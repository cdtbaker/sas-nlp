<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis">
  <import name="org.apache.commons.math3.analysis.differentiation.DerivativeStructure" />
  <import name="org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction" />
  <import name="org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction" />
  <import name="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction" />
  <import name="org.apache.commons.math3.analysis.function.Identity" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <class name="FunctionUtils" startLine="30">
    <javadoc>
      <text>* Utilities for manipulating function objects.</text>
      <version>$Id: FunctionUtils.java 1455194 2013-03-11 15:45:54Z luc $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Class only contains static methods.</text>
    </javadoc>
    <method type="constructor" name="FunctionUtils" startLine="40" endLine="40" />
    <javadoc>
      <text>* Composes functions.
 * <br/>
 * The functions in the argument list are composed sequentially, in the
 * given order.  For example, compose(f1,f2,f3) acts like f1(f2(f3(x))).</text>
      <param>f List of functions.</param>
      <return>the composite function.</return>
    </javadoc>
    <method type="UnivariateFunction" name="compose" startLine="51" endLine="62">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value" startLine="54" endLine="60">
        <declaration type="double" name="r" />
        <scope startLine="56" endLine="58" />
      </method>
    </method>
    <javadoc>
      <text>* Composes functions.
 * <br/>
 * The functions in the argument list are composed sequentially, in the
 * given order.  For example, compose(f1,f2,f3) acts like f1(f2(f3(x))).</text>
      <param>f List of functions.</param>
      <return>the composite function.</return>
      <since>3.1</since>
    </javadoc>
    <method type="UnivariateDifferentiableFunction" name="compose" startLine="74" endLine="96">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value" startLine="78" endLine="84">
        <declaration type="double" name="r" />
        <scope startLine="80" endLine="82" />
      </method>
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="DerivativeStructure" name="value" startLine="87" endLine="93">
        <declaration type="DerivativeStructure" name="r" />
        <scope startLine="89" endLine="91" />
      </method>
    </method>
    <javadoc>
      <text>* Composes functions.
 * <br/>
 * The functions in the argument list are composed sequentially, in the
 * given order.  For example, compose(f1,f2,f3) acts like f1(f2(f3(x))).</text>
      <param>f List of functions.</param>
      <return>the composite function.</return>
      <deprecated>as of 3.1 replaced by {@link #compose(UnivariateDifferentiableFunction)}</deprecated>
    </javadoc>
    <method type="DifferentiableUnivariateFunction" name="compose" startLine="108" endLine="135">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value" startLine="111" endLine="117">
        <declaration type="double" name="r" />
        <scope startLine="113" endLine="115" />
      </method>
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="UnivariateFunction" name="derivative" startLine="120" endLine="133">
        <javadoc>
          <text>* {@inheritDoc}</text>
        </javadoc>
        <method type="double" name="value" startLine="123" endLine="131">
          <declaration type="double" name="p" />
          <declaration type="double" name="r" />
          <scope startLine="126" endLine="129" />
        </method>
      </method>
    </method>
    <javadoc>
      <text>* Adds functions.</text>
      <param>f List of functions.</param>
      <return>a function that computes the sum of the functions.</return>
    </javadoc>
    <method type="UnivariateFunction" name="add" startLine="143" endLine="154">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value" startLine="146" endLine="152">
        <declaration type="double" name="r" />
        <scope startLine="148" endLine="150" />
      </method>
    </method>
    <javadoc>
      <text>* Adds functions.</text>
      <param>f List of functions.</param>
      <return>a function that computes the sum of the functions.</return>
      <since>3.1</since>
    </javadoc>
    <method type="UnivariateDifferentiableFunction" name="add" startLine="163" endLine="188">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value" startLine="167" endLine="173">
        <declaration type="double" name="r" />
        <scope startLine="169" endLine="171" />
      </method>
      <javadoc>
        <text>* {@inheritDoc}</text>
        <throws>DimensionMismatchException if functions are not consistent with each other</throws>
      </javadoc>
      <method type="DerivativeStructure" name="value" startLine="179" endLine="185">
        <declaration type="DerivativeStructure" name="r" />
        <scope startLine="181" endLine="183" />
      </method>
    </method>
    <javadoc>
      <text>* Adds functions.</text>
      <param>f List of functions.</param>
      <return>a function that computes the sum of the functions.</return>
      <deprecated>as of 3.1 replaced by {@link #add(UnivariateDifferentiableFunction)}</deprecated>
    </javadoc>
    <method type="DifferentiableUnivariateFunction" name="add" startLine="198" endLine="223">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value" startLine="201" endLine="207">
        <declaration type="double" name="r" />
        <scope startLine="203" endLine="205" />
      </method>
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="UnivariateFunction" name="derivative" startLine="210" endLine="221">
        <javadoc>
          <text>* {@inheritDoc}</text>
        </javadoc>
        <method type="double" name="value" startLine="213" endLine="219">
          <declaration type="double" name="r" />
          <scope startLine="215" endLine="217" />
        </method>
      </method>
    </method>
    <javadoc>
      <text>* Multiplies functions.</text>
      <param>f List of functions.</param>
      <return>a function that computes the product of the functions.</return>
    </javadoc>
    <method type="UnivariateFunction" name="multiply" startLine="231" endLine="242">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value" startLine="234" endLine="240">
        <declaration type="double" name="r" />
        <scope startLine="236" endLine="238" />
      </method>
    </method>
    <javadoc>
      <text>* Multiplies functions.</text>
      <param>f List of functions.</param>
      <return>a function that computes the product of the functions.</return>
      <since>3.1</since>
    </javadoc>
    <method type="UnivariateDifferentiableFunction" name="multiply" startLine="251" endLine="273">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value" startLine="255" endLine="261">
        <declaration type="double" name="r" />
        <scope startLine="257" endLine="259" />
      </method>
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="DerivativeStructure" name="value" startLine="264" endLine="270">
        <declaration type="DerivativeStructure" name="r" />
        <scope startLine="266" endLine="268" />
      </method>
    </method>
    <javadoc>
      <text>* Multiplies functions.</text>
      <param>f List of functions.</param>
      <return>a function that computes the product of the functions.</return>
      <deprecated>as of 3.1 replaced by {@link #multiply(UnivariateDifferentiableFunction)}</deprecated>
    </javadoc>
    <method type="DifferentiableUnivariateFunction" name="multiply" startLine="282" endLine="313">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value" startLine="285" endLine="291">
        <declaration type="double" name="r" />
        <scope startLine="287" endLine="289" />
      </method>
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="UnivariateFunction" name="derivative" startLine="294" endLine="311">
        <javadoc>
          <text>* {@inheritDoc}</text>
        </javadoc>
        <method type="double" name="value" startLine="297" endLine="309">
          <declaration type="double" name="sum" />
          <scope startLine="299" endLine="307">
            <declaration type="double" name="prod" />
            <scope startLine="301" endLine="305">
              <scope startLine="302" endLine="304" />
            </scope>
          </scope>
        </method>
      </method>
    </method>
    <javadoc>
      <text>* Returns the univariate function <br/>{@code h(x) = combiner(f(x), g(x))}.</text>
      <param>combiner Combiner function.</param>
      <param>f Function.</param>
      <param>g Function.</param>
      <return>the composite function.</return>
    </javadoc>
    <method type="UnivariateFunction" name="combine" startLine="326" endLine="333">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value" startLine="329" endLine="331" />
    </method>
    <javadoc>
      <text>* Returns a MultivariateFunction h(x[]) defined by <pre> <code>
 * h(x[]) = combiner(...combiner(combiner(initialValue,f(x[0])),f(x[1]))...),f(x[x.length-1]))
 * </code></pre></text>
      <param>combiner Combiner function.</param>
      <param>f Function.</param>
      <param>initialValue Initial value.</param>
      <return>a collector function.</return>
    </javadoc>
    <method type="MultivariateFunction" name="collector" startLine="347" endLine="358">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value" startLine="350" endLine="356">
        <declaration type="double" name="result" />
        <scope startLine="352" endLine="354" />
      </method>
    </method>
    <javadoc>
      <text>* Returns a MultivariateFunction h(x[]) defined by <pre> <code>
 * h(x[]) = combiner(...combiner(combiner(initialValue,x[0]),x[1])...),x[x.length-1])
 * </code></pre></text>
      <param>combiner Combiner function.</param>
      <param>initialValue Initial value.</param>
      <return>a collector function.</return>
    </javadoc>
    <method type="MultivariateFunction" name="collector" startLine="370" endLine="372" />
    <javadoc>
      <text>* Creates a unary function by fixing the first argument of a binary function.</text>
      <param>f Binary function.</param>
      <param>fixed Value to which the first argument of {@code f} is set.</param>
      <return>the unary function h(x) = f(fixed, x)</return>
    </javadoc>
    <method type="UnivariateFunction" name="fix1stArgument" startLine="382" endLine="389">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value" startLine="385" endLine="387" />
    </method>
    <javadoc>
      <text>* Creates a unary function by fixing the second argument of a binary function.</text>
      <param>f Binary function.</param>
      <param>fixed Value to which the second argument of {@code f} is set.</param>
      <return>the unary function h(x) = f(x, fixed)</return>
    </javadoc>
    <method type="UnivariateFunction" name="fix2ndArgument" startLine="398" endLine="405">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value" startLine="401" endLine="403" />
    </method>
    <javadoc>
      <text>* Samples the specified univariate real function on the specified interval.
 * <br/>
 * The interval is divided equally into {@code n} sections and sample points
 * are taken from {@code min} to {@code max - (max - min) / n}; therefore{@code f} is not sampled at the upper bound {@code max}.</text>
      <param>f Function to be sampled</param>
      <param>min Lower bound of the interval (included).</param>
      <param>max Upper bound of the interval (excluded).</param>
      <param>n Number of sample points.</param>
      <return>the array of samples.</return>
      <throws>NumberIsTooLargeException if the lower bound {@code min} is
 * greater than, or equal to the upper bound {@code max}.</throws>
      <throws>NotStrictlyPositiveException if the number of sample points{@code n} is negative.</throws>
    </javadoc>
    <method type="double[]" name="sample" startLine="425" endLine="442">
      <scope startLine="427" endLine="431" />
      <scope startLine="432" endLine="434" />
      <declaration type="double[]" name="s" />
      <declaration type="double" name="h" />
      <scope startLine="438" endLine="440" />
    </method>
    <javadoc>
      <text>* Convert a {@link UnivariateDifferentiableFunction} into a {@link DifferentiableUnivariateFunction}.</text>
      <param>f function to convert</param>
      <return>converted function</return>
      <deprecated>this conversion method is temporary in version 3.1, as the {@link DifferentiableUnivariateFunction} interface itself is deprecated</deprecated>
    </javadoc>
    <method type="DifferentiableUnivariateFunction" name="toDifferentiableUnivariateFunction" startLine="451" endLine="470">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value" startLine="455" endLine="457" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="UnivariateFunction" name="derivative" startLine="460" endLine="467">
        <javadoc>
          <text>* {@inheritDoc}</text>
        </javadoc>
        <method type="double" name="value" startLine="463" endLine="465" />
      </method>
    </method>
    <javadoc>
      <text>* Convert a {@link DifferentiableUnivariateFunction} into a {@link UnivariateDifferentiableFunction}.
 * <p>
 * Note that the converted function is able to handle {@link DerivativeStructure} up to order one.
 * If the function is called with higher order, a {@link NumberIsTooLargeException} will be thrown.
 * </p></text>
      <param>f function to convert</param>
      <return>converted function</return>
      <deprecated>this conversion method is temporary in version 3.1, as the {@link DifferentiableUnivariateFunction} interface itself is deprecated</deprecated>
    </javadoc>
    <method type="UnivariateDifferentiableFunction" name="toUnivariateDifferential" startLine="483" endLine="518">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value" startLine="487" endLine="489" />
      <javadoc>
        <text>* {@inheritDoc}</text>
        <exception>NumberIsTooLargeException if derivation order is greater than 1</exception>
      </javadoc>
      <method type="DerivativeStructure" name="value" startLine="495" endLine="515">
        <scope startLine="499" endLine="511">
          <declaration type="int" name="parameters" />
          <declaration type="double[]" name="derivatives" />
          <declaration type="double" name="fPrime" />
          <declaration type="int[]" name="orders" />
          <scope startLine="505" endLine="509" />
        </scope>
      </method>
    </method>
    <javadoc>
      <text>* Convert a {@link MultivariateDifferentiableFunction} into a {@link DifferentiableMultivariateFunction}.</text>
      <param>f function to convert</param>
      <return>converted function</return>
      <deprecated>this conversion method is temporary in version 3.1, as the {@link DifferentiableMultivariateFunction} interface itself is deprecated</deprecated>
    </javadoc>
    <method type="DifferentiableMultivariateFunction" name="toDifferentiableMultivariateFunction" startLine="527" endLine="591">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value" startLine="531" endLine="533" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="MultivariateFunction" name="partialDerivative" startLine="536" endLine="559">
        <javadoc>
          <text>* {@inheritDoc}</text>
        </javadoc>
        <method type="double" name="value" startLine="539" endLine="557">
          <declaration type="int" name="n" />
          <declaration type="DerivativeStructure[]" name="dsX" />
          <scope startLine="545" endLine="551">
            <scope startLine="546" endLine="548" />
            <scope startLine="548" endLine="550" />
          </scope>
          <declaration type="DerivativeStructure" name="y" />
        </method>
      </method>
      <method type="MultivariateVectorFunction" name="gradient" startLine="561" endLine="588">
        <javadoc>
          <text>* {@inheritDoc}</text>
        </javadoc>
        <method type="double[]" name="value" startLine="564" endLine="586">
          <declaration type="int" name="n" />
          <declaration type="DerivativeStructure[]" name="dsX" />
          <scope startLine="570" endLine="572" />
          <declaration type="DerivativeStructure" name="y" />
          <declaration type="double[]" name="gradient" />
          <declaration type="int[]" name="orders" />
          <scope startLine="578" endLine="582" />
        </method>
      </method>
      <comment>delegate computation to underlying function</comment>
      <comment>extract partial derivative</comment>
      <comment>delegate computation to underlying function</comment>
      <comment>extract gradient</comment>
    </method>
    <javadoc>
      <text>* Convert a {@link DifferentiableMultivariateFunction} into a {@link MultivariateDifferentiableFunction}.
 * <p>
 * Note that the converted function is able to handle {@link DerivativeStructure} elements
 * that all have the same number of free parameters and order, and with order at most 1.
 * If the function is called with inconsistent numbers of free parameters or higher order, a{@link DimensionMismatchException} or a {@link NumberIsTooLargeException} will be thrown.
 * </p></text>
      <param>f function to convert</param>
      <return>converted function</return>
      <deprecated>this conversion method is temporary in version 3.1, as the {@link DifferentiableMultivariateFunction} interface itself is deprecated</deprecated>
    </javadoc>
    <method type="MultivariateDifferentiableFunction" name="toMultivariateDifferentiableFunction" startLine="606" endLine="665">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value" startLine="610" endLine="612" />
      <javadoc>
        <text>* {@inheritDoc}</text>
        <exception>NumberIsTooLargeException if derivation order is higher than 1</exception>
        <exception>DimensionMismatchException if numbers of free parameters are inconsistent</exception>
      </javadoc>
      <method type="DerivativeStructure" name="value" startLine="619" endLine="662">
        <declaration type="int" name="parameters" />
        <declaration type="int" name="order" />
        <declaration type="int" name="n" />
        <scope startLine="625" endLine="627" />
        <scope startLine="630" endLine="638">
          <scope startLine="631" endLine="633" />
          <scope startLine="635" endLine="637" />
        </scope>
        <declaration type="double[]" name="point" />
        <scope startLine="642" endLine="644" />
        <declaration type="double" name="value" />
        <declaration type="double[]" name="gradient" />
        <declaration type="double[]" name="derivatives" />
        <declaration type="int[]" name="orders" />
        <scope startLine="652" endLine="658">
          <scope startLine="654" endLine="656" />
        </scope>
      </method>
      <comment>check parameters and orders limits</comment>
      <comment>check all elements in the array are consistent</comment>
      <comment>delegate computation to underlying function</comment>
      <comment>merge value and gradient into one DerivativeStructure</comment>
    </method>
    <javadoc>
      <text>* Convert a {@link MultivariateDifferentiableVectorFunction} into a {@link DifferentiableMultivariateVectorFunction}.</text>
      <param>f function to convert</param>
      <return>converted function</return>
      <deprecated>this conversion method is temporary in version 3.1, as the {@link DifferentiableMultivariateVectorFunction} interface itself is deprecated</deprecated>
    </javadoc>
    <method type="DifferentiableMultivariateVectorFunction" name="toDifferentiableMultivariateVectorFunction" startLine="674" endLine="714">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double[]" name="value" startLine="678" endLine="680" />
      <method type="MultivariateMatrixFunction" name="jacobian" startLine="682" endLine="711">
        <javadoc>
          <text>* {@inheritDoc}</text>
        </javadoc>
        <method type="double[][]" name="value" startLine="685" endLine="709">
          <declaration type="int" name="n" />
          <declaration type="DerivativeStructure[]" name="dsX" />
          <scope startLine="691" endLine="693" />
          <declaration type="DerivativeStructure[]" name="y" />
          <declaration type="double[][]" name="jacobian" />
          <declaration type="int[]" name="orders" />
          <scope startLine="699" endLine="705">
            <scope startLine="700" endLine="704" />
          </scope>
        </method>
      </method>
      <comment>delegate computation to underlying function</comment>
      <comment>extract Jacobian</comment>
    </method>
    <javadoc>
      <text>* Convert a {@link DifferentiableMultivariateVectorFunction} into a {@link MultivariateDifferentiableVectorFunction}.
 * <p>
 * Note that the converted function is able to handle {@link DerivativeStructure} elements
 * that all have the same number of free parameters and order, and with order at most 1.
 * If the function is called with inconsistent numbers of free parameters or higher order, a{@link DimensionMismatchException} or a {@link NumberIsTooLargeException} will be thrown.
 * </p></text>
      <param>f function to convert</param>
      <return>converted function</return>
      <deprecated>this conversion method is temporary in version 3.1, as the {@link DifferentiableMultivariateFunction} interface itself is deprecated</deprecated>
    </javadoc>
    <method type="MultivariateDifferentiableVectorFunction" name="toMultivariateDifferentiableVectorFunction" startLine="729" endLine="792">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double[]" name="value" startLine="733" endLine="735" />
      <javadoc>
        <text>* {@inheritDoc}</text>
        <exception>NumberIsTooLargeException if derivation order is higher than 1</exception>
        <exception>DimensionMismatchException if numbers of free parameters are inconsistent</exception>
      </javadoc>
      <method type="DerivativeStructure[]" name="value" startLine="742" endLine="789">
        <declaration type="int" name="parameters" />
        <declaration type="int" name="order" />
        <declaration type="int" name="n" />
        <scope startLine="748" endLine="750" />
        <scope startLine="753" endLine="761">
          <scope startLine="754" endLine="756" />
          <scope startLine="758" endLine="760" />
        </scope>
        <declaration type="double[]" name="point" />
        <scope startLine="765" endLine="767" />
        <declaration type="double[]" name="value" />
        <declaration type="double[][]" name="jacobian" />
        <declaration type="DerivativeStructure[]" name="merged" />
        <scope startLine="773" endLine="785">
          <declaration type="double[]" name="derivatives" />
          <declaration type="int[]" name="orders" />
          <scope startLine="777" endLine="783">
            <scope startLine="779" endLine="781" />
          </scope>
        </scope>
      </method>
      <comment>check parameters and orders limits</comment>
      <comment>check all elements in the array are consistent</comment>
      <comment>delegate computation to underlying function</comment>
      <comment>merge value and Jacobian into a DerivativeStructure array</comment>
    </method>
  </class>
</source>
