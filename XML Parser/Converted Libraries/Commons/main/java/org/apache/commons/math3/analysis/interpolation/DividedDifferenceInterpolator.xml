<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.interpolation">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm" />
  <import name="org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.NonMonotonicSequenceException" />
  <class name="DividedDifferenceInterpolator" startLine="26">
    <implements name="UnivariateInterpolator" />
    <implements name="Serializable" />
    <javadoc>
      <text>* Implements the <a href="
 * http://mathworld.wolfram.com/NewtonsDividedDifferenceInterpolationFormula.html">
 * Divided Difference Algorithm</a> for interpolation of real univariate
 * functions. For reference, see <b>Introduction to Numerical Analysis</b>,
 * ISBN 038795452X, chapter 2.
 * <p>
 * The actual code of Neville's evaluation is in PolynomialFunctionLagrangeForm,
 * this class provides an easy-to-use interface to it.</p></text>
      <version>$Id: DividedDifferenceInterpolator.java 1385313 2012-09-16 16:35:23Z tn $</version>
      <since>1.2</since>
    </javadoc>
    <javadoc>
      <text>* serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Compute an interpolating function for the dataset.</text>
      <param>x Interpolating points array.</param>
      <param>y Interpolating values array.</param>
      <return>a function which interpolates the dataset.</return>
      <throws>DimensionMismatchException if the array lengths are different.</throws>
      <throws>NumberIsTooSmallException if the number of points is less than 2.</throws>
      <throws>NonMonotonicSequenceException if {@code x} is not sorted in
 * strictly increasing order.</throws>
    </javadoc>
    <method type="PolynomialFunctionNewtonForm" name="interpolate" startLine="58" endLine="79">
      <declaration type="double[]" name="c" />
      <declaration type="double[]" name="a" />
      <javadoc>
        <text>* a[] and c[] are defined in the general formula of Newton form:
 * p(x) = a[0] + a[1](x-c[0]) + a[2](x-c[0])(x-c[1]) + ... +
 * a[n](x-c[0])(x-c[1])...(x-c[n-1])</text>
      </javadoc>
      <javadoc>
        <text>* When used for interpolation, the Newton form formula becomes
 * p(x) = f[x0] + f[x0,x1](x-x0) + f[x0,x1,x2](x-x0)(x-x1) + ... +
 * f[x0,x1,...,x[n-1]](x-x0)(x-x1)...(x-x[n-2])
 * Therefore, a[k] = f[x0,x1,...,xk], c[k] = x[k].
 * <p>
 * Note x[], y[], a[] have the same length but c[]'s size is one less.</p></text>
      </javadoc>
    </method>
    <javadoc>
      <text>* Return a copy of the divided difference array.
 * <p>
 * The divided difference array is defined recursively by <pre>
 * f[x0] = f(x0)
 * f[x0,x1,...,xk] = (f[x1,...,xk] - f[x0,...,x[k-1]]) / (xk - x0)
 * </pre></p>
 * <p>
 * The computational complexity is O(N^2).</p></text>
      <param>x Interpolating points array.</param>
      <param>y Interpolating values array.</param>
      <return>a fresh copy of the divided difference array.</return>
      <throws>DimensionMismatchException if the array lengths are different.</throws>
      <throws>NumberIsTooSmallException if the number of points is less than 2.</throws>
      <throws>NonMonotonicSequenceExceptionif {@code x} is not sorted in strictly increasing order.</throws>
    </javadoc>
    <method type="double[]" name="computeDividedDifference" startLine="102" endLine="119">
      <declaration type="double[]" name="divdiff" />
      <declaration type="int" name="n" />
      <declaration type="double[]" name="a" />
      <scope startLine="110" endLine="116">
        <scope startLine="111" endLine="114">
          <declaration type="double" name="denominator" />
        </scope>
      </scope>
      <comment>initialization</comment>
    </method>
  </class>
</source>
