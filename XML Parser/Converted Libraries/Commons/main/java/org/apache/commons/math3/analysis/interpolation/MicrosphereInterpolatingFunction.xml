<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.interpolation">
  <import name="java.util.ArrayList" />
  <import name="java.util.HashMap" />
  <import name="java.util.List" />
  <import name="java.util.Map" />
  <import name="org.apache.commons.math3.analysis.MultivariateFunction" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NoDataException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.linear.ArrayRealVector" />
  <import name="org.apache.commons.math3.linear.RealVector" />
  <import name="org.apache.commons.math3.random.UnitSphereRandomVectorGenerator" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="MicrosphereInterpolatingFunction" startLine="33">
    <implements name="MultivariateFunction" />
    <javadoc>
      <text>* Interpolating function that implements the
 * <a href="http://www.dudziak.com/microsphere.php">Microsphere Projection</a>.</text>
      <version>$Id: MicrosphereInterpolatingFunction.java 1455194 2013-03-11 15:45:54Z luc $</version>
    </javadoc>
    <javadoc>
      <text>* Space dimension.</text>
    </javadoc>
    <declaration type="int" name="dimension" />
    <javadoc>
      <text>* Internal accounting data for the interpolation algorithm.
 * Each element of the list corresponds to one surface element of
 * the microsphere.</text>
    </javadoc>
    <declaration type="List<MicrosphereSurfaceElement>" name="microsphere" />
    <javadoc>
      <text>* Exponent used in the power law that computes the weights of the
 * sample data.</text>
    </javadoc>
    <declaration type="double" name="brightnessExponent" />
    <javadoc>
      <text>* Sample data.</text>
    </javadoc>
    <declaration type="Map<RealVector,Double>" name="samples" />
    <class name="MicrosphereSurfaceElement" startLine="61">
      <javadoc>
        <text>* Class for storing the accounting data needed to perform the
 * microsphere projection.</text>
      </javadoc>
      <javadoc>
        <text>* Normal vector characterizing a surface element.</text>
      </javadoc>
      <declaration type="RealVector" name="normal" />
      <javadoc>
        <text>* Illumination received from the brightest sample.</text>
      </javadoc>
      <declaration type="double" name="brightestIllumination" />
      <javadoc>
        <text>* Brightest sample.</text>
      </javadoc>
      <declaration type="Map.Entry<RealVector,Double>" name="brightestSample" />
      <javadoc>
        <param>n Normal vector characterizing a surface element
 * of the microsphere.</param>
      </javadoc>
      <method type="constructor" name="MicrosphereSurfaceElement" startLine="77" endLine="79" />
      <javadoc>
        <text>* Return the normal vector.</text>
        <return>the normal vector</return>
      </javadoc>
      <method type="RealVector" name="normal" startLine="85" endLine="87" />
      <javadoc>
        <text>* Reset "illumination" and "sampleIndex".</text>
      </javadoc>
      <method type="void" name="reset" startLine="92" endLine="95" />
      <javadoc>
        <text>* Store the illumination and index of the brightest sample.</text>
        <param>illuminationFromSample illumination received from sample</param>
        <param>sample current sample illuminating the element</param>
      </javadoc>
      <method type="void" name="store" startLine="103" endLine="108">
        <scope startLine="104" endLine="107" />
      </method>
      <javadoc>
        <text>* Get the illumination of the element.</text>
        <return>the illumination.</return>
      </javadoc>
      <method type="double" name="illumination" startLine="114" endLine="116" />
      <javadoc>
        <text>* Get the sample illuminating the element the most.</text>
        <return>the sample.</return>
      </javadoc>
      <method type="Map.Entry<RealVector,Double>" name="sample" startLine="122" endLine="124" />
      <javadoc>
        <param>xval Arguments for the interpolation points.{@code xval[i][0]} is the first component of interpolation point{@code i}, {@code xval[i][1]} is the second component, and so on
 * until {@code xval[i][d-1]}, the last component of that interpolation
 * point (where {@code dimension} is thus the dimension of the sampled
 * space).</param>
        <param>yval Values for the interpolation points.</param>
        <param>brightnessExponent Brightness dimming factor.</param>
        <param>microsphereElements Number of surface elements of the
 * microsphere.</param>
        <param>rand Unit vector generator for creating the microsphere.</param>
        <throws>DimensionMismatchException if the lengths of {@code yval} and{@code xval} (equal to {@code n}, the number of interpolation points)
 * do not match, or the the arrays {@code xval[0]} ... {@code xval[n]},
 * have lengths different from {@code dimension}.</throws>
        <throws>NoDataException if there an array has zero-length.</throws>
        <throws>NullArgumentException if an argument is {@code null}.</throws>
      </javadoc>
      <method type="constructor" name="MicrosphereInterpolatingFunction" startLine="153" endLine="191">
        <scope startLine="155" endLine="157" />
        <scope startLine="158" endLine="160" />
        <scope startLine="161" endLine="163" />
        <scope startLine="164" endLine="166" />
        <scope startLine="173" endLine="183">
          <declaration type="double[]" name="xvalI" />
          <scope startLine="175" endLine="177" />
          <scope startLine="178" endLine="180" />
        </scope>
        <scope startLine="188" endLine="190" />
        <comment>Copy data samples.</comment>
        <comment>Generate the microsphere, assuming that a fairly large number of</comment>
        <comment>randomly generated normals will represent a sphere.</comment>
      </method>
      <javadoc>
        <param>point Interpolation point.</param>
        <return>the interpolated value.</return>
        <throws>DimensionMismatchException if point dimension does not math sample</throws>
      </javadoc>
      <method type="double" name="value" startLine="198" endLine="239">
        <declaration type="RealVector" name="p" />
        <scope startLine="202" endLine="204" />
        <scope startLine="207" endLine="224">
          <declaration type="RealVector" name="diff" />
          <declaration type="double" name="diffNorm" />
          <scope startLine="213" endLine="217" />
          <scope startLine="219" endLine="222">
            <declaration type="double" name="w" />
          </scope>
          <comment>Vector between interpolation point and current sample point.</comment>
          <comment>No need to interpolate, as the interpolation point is</comment>
          <comment>actually (very close to) one of the sampled points.</comment>
        </scope>
        <declaration type="double" name="value" />
        <declaration type="double" name="totalWeight" />
        <scope startLine="229" endLine="236">
          <declaration type="double" name="iV" />
          <declaration type="Map.Entry<RealVector,Double>" name="sd" />
          <scope startLine="232" endLine="235" />
        </scope>
        <comment>Reset.</comment>
        <comment>Compute contribution of each sample points to the microsphere elements illumination</comment>
        <comment>Interpolation calculation.</comment>
      </method>
      <javadoc>
        <text>* Compute the cosine of the angle between 2 vectors.</text>
        <param>v Vector.</param>
        <param>w Vector.</param>
        <return>the cosine of the angle between {@code v} and {@code w}.</return>
      </javadoc>
      <method type="double" name="cosAngle" startLine="248" endLine="250" />
    </class>
  </class>
</source>
