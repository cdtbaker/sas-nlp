<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.util">
  <import name="java.util.Arrays" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.exception.NotFiniteNumberException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.util.Localizable" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <class name="MathUtils" startLine="28">
    <javadoc>
      <text>* Miscellaneous utility functions.</text>
      <see>ArithmeticUtils</see>
      <see>Precision</see>
      <see>MathArrays</see>
      <version>$Id: MathUtils.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* 2 &pi;.</text>
      <since>2.1</since>
    </javadoc>
    <declaration type="double" name="TWO_PI" />
    <javadoc>
      <text>* Class contains only static methods.</text>
    </javadoc>
    <method type="constructor" name="MathUtils" startLine="47" endLine="47" />
    <javadoc>
      <text>* Returns an integer hash code representing the given double value.</text>
      <param>value the value to be hashed</param>
      <return>the hash code</return>
    </javadoc>
    <method type="int" name="hash" startLine="56" endLine="58" />
    <javadoc>
      <text>* Returns an integer hash code representing the given double array.</text>
      <param>value the value to be hashed (may be null)</param>
      <return>the hash code</return>
      <since>1.2</since>
    </javadoc>
    <method type="int" name="hash" startLine="67" endLine="69" />
    <javadoc>
      <text>* Normalize an angle in a 2&pi wide interval around a center value.
 * <p>This method has three main uses:</p>
 * <ul>
 * <li>normalize an angle between 0 and 2&pi;:<br/>{@code a = MathUtils.normalizeAngle(a, FastMath.PI);}</li>
 * <li>normalize an angle between -&pi; and +&pi;<br/>{@code a = MathUtils.normalizeAngle(a, 0.0);}</li>
 * <li>compute the angle between two defining angular positions:<br>{@code angle = MathUtils.normalizeAngle(end, start) - start;}</li>
 * </ul>
 * <p>Note that due to numerical accuracy and since &pi; cannot be represented
 * exactly, the result interval is <em>closed</em>, it cannot be half-closed
 * as would be more satisfactory in a purely mathematical view.</p></text>
      <param>a angle to normalize</param>
      <param>center center of the desired 2&pi; interval for the result</param>
      <return>a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;</return>
      <since>1.2</since>
    </javadoc>
    <method type="double" name="normalizeAngle" startLine="90" endLine="92" />
    <javadoc>
      <text>* <p>Reduce {@code |a - offset|} to the primary interval{@code [0, |period|)}.</p>
 * <p>Specifically, the value returned is <br/>{@code a - |period| * floor((a - offset) / |period|) - offset}.</p>
 * <p>If any of the parameters are {@code NaN} or infinite, the result is{@code NaN}.</p></text>
      <param>a Value to reduce.</param>
      <param>period Period.</param>
      <param>offset Value that will be mapped to {@code 0}.</param>
      <return>the value, within the interval {@code [0 |period|)},
 * that corresponds to {@code a}.</return>
    </javadoc>
    <method type="double" name="reduce" startLine="112" endLine="115">
      <declaration type="double" name="p" />
    </method>
    <javadoc>
      <text>* Returns the first argument with the sign of the second argument.</text>
      <param>magnitude Magnitude of the returned value.</param>
      <param>sign Sign of the returned value.</param>
      <return>a value with magnitude equal to {@code magnitude} and with the
 * same sign as the {@code sign} argument.</return>
      <throws>MathArithmeticException if {@code magnitude == Byte.MIN_VALUE}and {@code sign >= 0}.</throws>
    </javadoc>
    <method type="byte" name="copySign" startLine="128" endLine="138">
      <scope startLine="130" endLine="132">
        <comment>Sign is OK.</comment>
      </scope>
      <scope startLine="133" endLine="135" />
      <scope startLine="135" endLine="137">
        <comment>Flip sign.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the first argument with the sign of the second argument.</text>
      <param>magnitude Magnitude of the returned value.</param>
      <param>sign Sign of the returned value.</param>
      <return>a value with magnitude equal to {@code magnitude} and with the
 * same sign as the {@code sign} argument.</return>
      <throws>MathArithmeticException if {@code magnitude == Short.MIN_VALUE}and {@code sign >= 0}.</throws>
    </javadoc>
    <method type="short" name="copySign" startLine="151" endLine="161">
      <scope startLine="153" endLine="155">
        <comment>Sign is OK.</comment>
      </scope>
      <scope startLine="156" endLine="158" />
      <scope startLine="158" endLine="160">
        <comment>Flip sign.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the first argument with the sign of the second argument.</text>
      <param>magnitude Magnitude of the returned value.</param>
      <param>sign Sign of the returned value.</param>
      <return>a value with magnitude equal to {@code magnitude} and with the
 * same sign as the {@code sign} argument.</return>
      <throws>MathArithmeticException if {@code magnitude == Integer.MIN_VALUE}and {@code sign >= 0}.</throws>
    </javadoc>
    <method type="int" name="copySign" startLine="174" endLine="184">
      <scope startLine="176" endLine="178">
        <comment>Sign is OK.</comment>
      </scope>
      <scope startLine="179" endLine="181" />
      <scope startLine="181" endLine="183">
        <comment>Flip sign.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the first argument with the sign of the second argument.</text>
      <param>magnitude Magnitude of the returned value.</param>
      <param>sign Sign of the returned value.</param>
      <return>a value with magnitude equal to {@code magnitude} and with the
 * same sign as the {@code sign} argument.</return>
      <throws>MathArithmeticException if {@code magnitude == Long.MIN_VALUE}and {@code sign >= 0}.</throws>
    </javadoc>
    <method type="long" name="copySign" startLine="197" endLine="207">
      <scope startLine="199" endLine="201">
        <comment>Sign is OK.</comment>
      </scope>
      <scope startLine="202" endLine="204" />
      <scope startLine="204" endLine="206">
        <comment>Flip sign.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Check that the argument is a real number.</text>
      <param>x Argument.</param>
      <throws>NotFiniteNumberException if {@code x} is not a
 * finite real number.</throws>
    </javadoc>
    <method type="void" name="checkFinite" startLine="216" endLine="220">
      <scope startLine="217" endLine="219" />
    </method>
    <javadoc>
      <text>* Check that all the elements are real numbers.</text>
      <param>val Arguments.</param>
      <throws>NotFiniteNumberException if any values of the array is not a
 * finite real number.</throws>
    </javadoc>
    <method type="void" name="checkFinite" startLine="230" endLine="237">
      <scope startLine="231" endLine="236">
        <declaration type="double" name="x" />
        <scope startLine="233" endLine="235" />
      </scope>
    </method>
    <javadoc>
      <text>* Checks that an object is not null.</text>
      <param>o Object to be checked.</param>
      <param>pattern Message pattern.</param>
      <param>args Arguments to replace the placeholders in {@code pattern}.</param>
      <throws>NullArgumentException if {@code o} is {@code null}.</throws>
    </javadoc>
    <method type="void" name="checkNotNull" startLine="250" endLine="254">
      <scope startLine="251" endLine="253" />
    </method>
    <javadoc>
      <text>* Checks that an object is not null.</text>
      <param>o Object to be checked.</param>
      <throws>NullArgumentException if {@code o} is {@code null}.</throws>
    </javadoc>
    <method type="void" name="checkNotNull" startLine="263" endLine="267">
      <scope startLine="264" endLine="266" />
    </method>
  </class>
</source>
