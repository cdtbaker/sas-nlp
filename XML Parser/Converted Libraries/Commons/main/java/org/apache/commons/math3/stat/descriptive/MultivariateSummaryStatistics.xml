<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.descriptive">
  <import name="java.io.Serializable" />
  <import name="java.util.Arrays" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathIllegalStateException" />
  <import name="org.apache.commons.math3.linear.RealMatrix" />
  <import name="org.apache.commons.math3.stat.descriptive.moment.GeometricMean" />
  <import name="org.apache.commons.math3.stat.descriptive.moment.Mean" />
  <import name="org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance" />
  <import name="org.apache.commons.math3.stat.descriptive.rank.Max" />
  <import name="org.apache.commons.math3.stat.descriptive.rank.Min" />
  <import name="org.apache.commons.math3.stat.descriptive.summary.Sum" />
  <import name="org.apache.commons.math3.stat.descriptive.summary.SumOfLogs" />
  <import name="org.apache.commons.math3.stat.descriptive.summary.SumOfSquares" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <import name="org.apache.commons.math3.util.Precision" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="MultivariateSummaryStatistics" startLine="39">
    <implements name="StatisticalMultivariateSummary" />
    <implements name="Serializable" />
    <javadoc>
      <text>* <p>Computes summary statistics for a stream of n-tuples added using the{@link #addValue(double[]) addValue} method. The data values are not stored
 * in memory, so this class can be used to compute statistics for very large
 * n-tuple streams.</p>
 * <p>The {@link StorelessUnivariateStatistic} instances used to maintain
 * summary state and compute statistics are configurable via setters.
 * For example, the default implementation for the mean can be overridden by
 * calling {@link #setMeanImpl(StorelessUnivariateStatistic[])}. Actual
 * parameters to these methods must implement the{@link StorelessUnivariateStatistic} interface and configuration must be
 * completed before <code>addValue</code> is called. No configuration is
 * necessary to use the default, commons-math provided implementations.</p>
 * <p>To compute statistics for a stream of n-tuples, construct a
 * MultivariateStatistics instance with dimension n and then use{@link #addValue(double[])} to add n-tuples. The <code>getXxx</code>
 * methods where Xxx is a statistic return an array of <code>double</code>
 * values, where for <code>i = 0,...,n-1</code> the i<sup>th</sup> array element is the
 * value of the given statistic for data range consisting of the i<sup>th</sup> element of
 * each of the input n-tuples.  For example, if <code>addValue</code> is called
 * with actual parameters {0, 1, 2}, then {3, 4, 5} and finally {6, 7, 8},
 * <code>getSum</code> will return a three-element array with values
 * {0+3+6, 1+4+7, 2+5+8}</p>
 * <p>Note: This class is not thread-safe. Use{@link SynchronizedMultivariateSummaryStatistics} if concurrent access from multiple
 * threads is required.</p></text>
      <since>1.2</since>
      <version>$Id: MultivariateSummaryStatistics.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serialization UID</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Dimension of the data.</text>
    </javadoc>
    <declaration type="int" name="k" />
    <javadoc>
      <text>* Count of values that have been added</text>
    </javadoc>
    <declaration type="long" name="n" />
    <javadoc>
      <text>* Sum statistic implementation - can be reset by setter.</text>
    </javadoc>
    <declaration type="StorelessUnivariateStatistic[]" name="sumImpl" />
    <javadoc>
      <text>* Sum of squares statistic implementation - can be reset by setter.</text>
    </javadoc>
    <declaration type="StorelessUnivariateStatistic[]" name="sumSqImpl" />
    <javadoc>
      <text>* Minimum statistic implementation - can be reset by setter.</text>
    </javadoc>
    <declaration type="StorelessUnivariateStatistic[]" name="minImpl" />
    <javadoc>
      <text>* Maximum statistic implementation - can be reset by setter.</text>
    </javadoc>
    <declaration type="StorelessUnivariateStatistic[]" name="maxImpl" />
    <javadoc>
      <text>* Sum of log statistic implementation - can be reset by setter.</text>
    </javadoc>
    <declaration type="StorelessUnivariateStatistic[]" name="sumLogImpl" />
    <javadoc>
      <text>* Geometric mean statistic implementation - can be reset by setter.</text>
    </javadoc>
    <declaration type="StorelessUnivariateStatistic[]" name="geoMeanImpl" />
    <javadoc>
      <text>* Mean statistic implementation - can be reset by setter.</text>
    </javadoc>
    <declaration type="StorelessUnivariateStatistic[]" name="meanImpl" />
    <javadoc>
      <text>* Covariance statistic implementation - cannot be reset.</text>
    </javadoc>
    <declaration type="VectorialCovariance" name="covarianceImpl" />
    <javadoc>
      <text>* Construct a MultivariateSummaryStatistics instance</text>
      <param>k dimension of the data</param>
      <param>isCovarianceBiasCorrected if true, the unbiased sample
 * covariance is computed, otherwise the biased population covariance
 * is computed</param>
    </javadoc>
    <method type="constructor" name="MultivariateSummaryStatistics" startLine="115" endLine="139">
      <scope startLine="126" endLine="134" />
    </method>
    <javadoc>
      <text>* Add an n-tuple to the data</text>
      <param>value  the n-tuple to add</param>
      <throws>DimensionMismatchException if the length of the array
 * does not match the one used at construction</throws>
    </javadoc>
    <method type="void" name="addValue" startLine="148" endLine="162">
      <scope startLine="150" endLine="159">
        <declaration type="double" name="v" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the dimension of the data</text>
      <return>The dimension of the data</return>
    </javadoc>
    <method type="int" name="getDimension" startLine="168" endLine="170" />
    <javadoc>
      <text>* Returns the number of available values</text>
      <return>The number of available values</return>
    </javadoc>
    <method type="long" name="getN" startLine="176" endLine="178" />
    <javadoc>
      <text>* Returns an array of the results of a statistic.</text>
      <param>stats univariate statistic array</param>
      <return>results array</return>
    </javadoc>
    <method type="double[]" name="getResults" startLine="185" endLine="191">
      <declaration type="double[]" name="results" />
      <scope startLine="187" endLine="189" />
    </method>
    <javadoc>
      <text>* Returns an array whose i<sup>th</sup> entry is the sum of the
 * i<sup>th</sup> entries of the arrays that have been added using{@link #addValue(double[])}</text>
      <return>the array of component sums</return>
    </javadoc>
    <method type="double[]" name="getSum" startLine="200" endLine="202" />
    <javadoc>
      <text>* Returns an array whose i<sup>th</sup> entry is the sum of squares of the
 * i<sup>th</sup> entries of the arrays that have been added using{@link #addValue(double[])}</text>
      <return>the array of component sums of squares</return>
    </javadoc>
    <method type="double[]" name="getSumSq" startLine="211" endLine="213" />
    <javadoc>
      <text>* Returns an array whose i<sup>th</sup> entry is the sum of logs of the
 * i<sup>th</sup> entries of the arrays that have been added using{@link #addValue(double[])}</text>
      <return>the array of component log sums</return>
    </javadoc>
    <method type="double[]" name="getSumLog" startLine="222" endLine="224" />
    <javadoc>
      <text>* Returns an array whose i<sup>th</sup> entry is the mean of the
 * i<sup>th</sup> entries of the arrays that have been added using{@link #addValue(double[])}</text>
      <return>the array of component means</return>
    </javadoc>
    <method type="double[]" name="getMean" startLine="233" endLine="235" />
    <javadoc>
      <text>* Returns an array whose i<sup>th</sup> entry is the standard deviation of the
 * i<sup>th</sup> entries of the arrays that have been added using{@link #addValue(double[])}</text>
      <return>the array of component standard deviations</return>
    </javadoc>
    <method type="double[]" name="getStandardDeviation" startLine="244" endLine="257">
      <declaration type="double[]" name="stdDev" />
      <scope startLine="246" endLine="248" />
      <scope startLine="248" endLine="250" />
      <scope startLine="250" endLine="255">
        <declaration type="RealMatrix" name="matrix" />
        <scope startLine="252" endLine="254" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the covariance matrix of the values that have been added.</text>
      <return>the covariance matrix</return>
    </javadoc>
    <method type="RealMatrix" name="getCovariance" startLine="264" endLine="266" />
    <javadoc>
      <text>* Returns an array whose i<sup>th</sup> entry is the maximum of the
 * i<sup>th</sup> entries of the arrays that have been added using{@link #addValue(double[])}</text>
      <return>the array of component maxima</return>
    </javadoc>
    <method type="double[]" name="getMax" startLine="275" endLine="277" />
    <javadoc>
      <text>* Returns an array whose i<sup>th</sup> entry is the minimum of the
 * i<sup>th</sup> entries of the arrays that have been added using{@link #addValue(double[])}</text>
      <return>the array of component minima</return>
    </javadoc>
    <method type="double[]" name="getMin" startLine="286" endLine="288" />
    <javadoc>
      <text>* Returns an array whose i<sup>th</sup> entry is the geometric mean of the
 * i<sup>th</sup> entries of the arrays that have been added using{@link #addValue(double[])}</text>
      <return>the array of component geometric means</return>
    </javadoc>
    <method type="double[]" name="getGeometricMean" startLine="297" endLine="299" />
    <javadoc>
      <text>* Generates a text report displaying
 * summary statistics from values that
 * have been added.</text>
      <return>String with line feeds displaying statistics</return>
    </javadoc>
    <method type="String" name="toString" startLine="308" endLine="323">
      <declaration type="String" name="separator" />
      <declaration type="String" name="suffix" />
      <declaration type="StringBuilder" name="outBuffer" />
    </method>
    <javadoc>
      <text>* Append a text representation of an array to a buffer.</text>
      <param>buffer buffer to fill</param>
      <param>data data array</param>
      <param>prefix text prefix</param>
      <param>separator elements separator</param>
      <param>suffix text suffix</param>
    </javadoc>
    <method type="void" name="append" startLine="334" endLine="343">
      <scope startLine="336" endLine="341">
        <scope startLine="337" endLine="339" />
      </scope>
    </method>
    <javadoc>
      <text>* Resets all statistics and storage</text>
    </javadoc>
    <method type="void" name="clear" startLine="348" endLine="360">
      <scope startLine="350" endLine="358" />
    </method>
    <javadoc>
      <text>* Returns true iff <code>object</code> is a <code>MultivariateSummaryStatistics</code>
 * instance and all statistics have the same values as this.</text>
      <param>object the object to test equality against.</param>
      <return>true if object equals this</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="369" endLine="386">
      <scope startLine="370" endLine="372" />
      <scope startLine="373" endLine="375" />
      <declaration type="MultivariateSummaryStatistics" name="stat" />
    </method>
    <javadoc>
      <text>* Returns hash code based on values of statistics</text>
      <return>hash code</return>
    </javadoc>
    <method type="int" name="hashCode" startLine="394" endLine="406">
      <declaration type="int" name="result" />
    </method>
    <javadoc>
      <text>* Sets statistics implementations.</text>
      <param>newImpl new implementations for statistics</param>
      <param>oldImpl old implementations for statistics</param>
      <throws>DimensionMismatchException if the array dimension
 * does not match the one used at construction</throws>
      <throws>MathIllegalStateException if data has already been added
 * (i.e. if n > 0)</throws>
    </javadoc>
    <method type="void" name="setImpl" startLine="420" endLine="424" />
    <javadoc>
      <text>* Returns the currently configured Sum implementation</text>
      <return>the StorelessUnivariateStatistic implementing the sum</return>
    </javadoc>
    <method type="StorelessUnivariateStatistic[]" name="getSumImpl" startLine="431" endLine="433" />
    <javadoc>
      <text>* <p>Sets the implementation for the Sum.</p>
 * <p>This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double[]) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.</p></text>
      <param>sumImpl the StorelessUnivariateStatistic instance to use
 * for computing the Sum</param>
      <throws>DimensionMismatchException if the array dimension
 * does not match the one used at construction</throws>
      <throws>MathIllegalStateException if data has already been added
 * (i.e if n > 0)</throws>
    </javadoc>
    <method type="void" name="setSumImpl" startLine="449" endLine="451" />
    <javadoc>
      <text>* Returns the currently configured sum of squares implementation</text>
      <return>the StorelessUnivariateStatistic implementing the sum of squares</return>
    </javadoc>
    <method type="StorelessUnivariateStatistic[]" name="getSumsqImpl" startLine="458" endLine="460" />
    <javadoc>
      <text>* <p>Sets the implementation for the sum of squares.</p>
 * <p>This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double[]) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.</p></text>
      <param>sumsqImpl the StorelessUnivariateStatistic instance to use
 * for computing the sum of squares</param>
      <throws>DimensionMismatchException if the array dimension
 * does not match the one used at construction</throws>
      <throws>MathIllegalStateException if data has already been added
 * (i.e if n > 0)</throws>
    </javadoc>
    <method type="void" name="setSumsqImpl" startLine="476" endLine="478" />
    <javadoc>
      <text>* Returns the currently configured minimum implementation</text>
      <return>the StorelessUnivariateStatistic implementing the minimum</return>
    </javadoc>
    <method type="StorelessUnivariateStatistic[]" name="getMinImpl" startLine="485" endLine="487" />
    <javadoc>
      <text>* <p>Sets the implementation for the minimum.</p>
 * <p>This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double[]) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.</p></text>
      <param>minImpl the StorelessUnivariateStatistic instance to use
 * for computing the minimum</param>
      <throws>DimensionMismatchException if the array dimension
 * does not match the one used at construction</throws>
      <throws>MathIllegalStateException if data has already been added
 * (i.e if n > 0)</throws>
    </javadoc>
    <method type="void" name="setMinImpl" startLine="503" endLine="505" />
    <javadoc>
      <text>* Returns the currently configured maximum implementation</text>
      <return>the StorelessUnivariateStatistic implementing the maximum</return>
    </javadoc>
    <method type="StorelessUnivariateStatistic[]" name="getMaxImpl" startLine="512" endLine="514" />
    <javadoc>
      <text>* <p>Sets the implementation for the maximum.</p>
 * <p>This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double[]) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.</p></text>
      <param>maxImpl the StorelessUnivariateStatistic instance to use
 * for computing the maximum</param>
      <throws>DimensionMismatchException if the array dimension
 * does not match the one used at construction</throws>
      <throws>MathIllegalStateException if data has already been added
 * (i.e if n > 0)</throws>
    </javadoc>
    <method type="void" name="setMaxImpl" startLine="530" endLine="532" />
    <javadoc>
      <text>* Returns the currently configured sum of logs implementation</text>
      <return>the StorelessUnivariateStatistic implementing the log sum</return>
    </javadoc>
    <method type="StorelessUnivariateStatistic[]" name="getSumLogImpl" startLine="539" endLine="541" />
    <javadoc>
      <text>* <p>Sets the implementation for the sum of logs.</p>
 * <p>This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double[]) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.</p></text>
      <param>sumLogImpl the StorelessUnivariateStatistic instance to use
 * for computing the log sum</param>
      <throws>DimensionMismatchException if the array dimension
 * does not match the one used at construction</throws>
      <throws>MathIllegalStateException if data has already been added
 * (i.e if n > 0)</throws>
    </javadoc>
    <method type="void" name="setSumLogImpl" startLine="557" endLine="559" />
    <javadoc>
      <text>* Returns the currently configured geometric mean implementation</text>
      <return>the StorelessUnivariateStatistic implementing the geometric mean</return>
    </javadoc>
    <method type="StorelessUnivariateStatistic[]" name="getGeoMeanImpl" startLine="566" endLine="568" />
    <javadoc>
      <text>* <p>Sets the implementation for the geometric mean.</p>
 * <p>This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double[]) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.</p></text>
      <param>geoMeanImpl the StorelessUnivariateStatistic instance to use
 * for computing the geometric mean</param>
      <throws>DimensionMismatchException if the array dimension
 * does not match the one used at construction</throws>
      <throws>MathIllegalStateException if data has already been added
 * (i.e if n > 0)</throws>
    </javadoc>
    <method type="void" name="setGeoMeanImpl" startLine="584" endLine="586" />
    <javadoc>
      <text>* Returns the currently configured mean implementation</text>
      <return>the StorelessUnivariateStatistic implementing the mean</return>
    </javadoc>
    <method type="StorelessUnivariateStatistic[]" name="getMeanImpl" startLine="593" endLine="595" />
    <javadoc>
      <text>* <p>Sets the implementation for the mean.</p>
 * <p>This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double[]) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.</p></text>
      <param>meanImpl the StorelessUnivariateStatistic instance to use
 * for computing the mean</param>
      <throws>DimensionMismatchException if the array dimension
 * does not match the one used at construction</throws>
      <throws>MathIllegalStateException if data has already been added
 * (i.e if n > 0)</throws>
    </javadoc>
    <method type="void" name="setMeanImpl" startLine="611" endLine="613" />
    <javadoc>
      <text>* Throws MathIllegalStateException if the statistic is not empty.</text>
      <throws>MathIllegalStateException if n > 0.</throws>
    </javadoc>
    <method type="void" name="checkEmpty" startLine="619" endLine="624">
      <scope startLine="620" endLine="623" />
    </method>
    <javadoc>
      <text>* Throws DimensionMismatchException if dimension != k.</text>
      <param>dimension dimension to check</param>
      <throws>DimensionMismatchException if dimension != k</throws>
    </javadoc>
    <method type="void" name="checkDimension" startLine="631" endLine="635">
      <scope startLine="632" endLine="634" />
    </method>
    <comment>Getters and setters for statistics implementations</comment>
  </class>
</source>
