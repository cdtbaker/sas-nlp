<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.geometry.euclidean.threed">
  <import name="java.text.FieldPosition" />
  <import name="java.text.NumberFormat" />
  <import name="java.text.ParsePosition" />
  <import name="java.util.Locale" />
  <import name="org.apache.commons.math3.exception.MathParseException" />
  <import name="org.apache.commons.math3.geometry.Vector" />
  <import name="org.apache.commons.math3.geometry.VectorFormat" />
  <import name="org.apache.commons.math3.util.CompositeFormat" />
  <class name="Vector3DFormat" extends="VectorFormat<Euclidean3D>" startLine="30">
    <javadoc>
      <text>* Formats a 3D vector in components list format "{x; y; z}".
 * <p>The prefix and suffix "{" and "}" and the separator "; " can be replaced by
 * any user-defined strings. The number format for components can be configured.</p>
 * <p>White space is ignored at parse time, even if it is in the prefix, suffix
 * or separator specifications. So even if the default separator does include a space
 * character that is used at format time, both input string "{1;1;1}" and
 * " { 1 ; 1 ; 1 } " will be parsed without error and the same vector will be
 * returned. In the second case, however, the parse position after parsing will be
 * just after the closing curly brace, i.e. just before the trailing space.</p></text>
      <version>$Id: Vector3DFormat.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Create an instance with default settings.
 * <p>The instance uses the default prefix, suffix and separator:
 * "{", "}", and "; " and the default number format for components.</p></text>
    </javadoc>
    <method type="constructor" name="Vector3DFormat" startLine="50" endLine="53" />
    <javadoc>
      <text>* Create an instance with a custom number format for components.</text>
      <param>format the custom format for components.</param>
    </javadoc>
    <method type="constructor" name="Vector3DFormat" startLine="59" endLine="61" />
    <javadoc>
      <text>* Create an instance with custom prefix, suffix and separator.</text>
      <param>prefix prefix to use instead of the default "{"</param>
      <param>suffix suffix to use instead of the default "}"</param>
      <param>separator separator to use instead of the default "; "</param>
    </javadoc>
    <method type="constructor" name="Vector3DFormat" startLine="70" endLine="72" />
    <javadoc>
      <text>* Create an instance with custom prefix, suffix, separator and format
 * for components.</text>
      <param>prefix prefix to use instead of the default "{"</param>
      <param>suffix suffix to use instead of the default "}"</param>
      <param>separator separator to use instead of the default "; "</param>
      <param>format the custom format for components.</param>
    </javadoc>
    <method type="constructor" name="Vector3DFormat" startLine="83" endLine="85" />
    <javadoc>
      <text>* Returns the default 3D vector format for the current locale.</text>
      <return>the default 3D vector format.</return>
    </javadoc>
    <method type="Vector3DFormat" name="getInstance" startLine="91" endLine="93" />
    <javadoc>
      <text>* Returns the default 3D vector format for the given locale.</text>
      <param>locale the specific locale used by the format.</param>
      <return>the 3D vector format specific to the given locale.</return>
    </javadoc>
    <method type="Vector3DFormat" name="getInstance" startLine="100" endLine="102" />
    <javadoc>
      <text>* Formats a {@link Vector3D} object to produce a string.</text>
      <param>vector the object to format.</param>
      <param>toAppendTo where the text is to be appended</param>
      <param>pos On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
      <return>the value passed in as toAppendTo.</return>
    </javadoc>
    <method type="StringBuffer" name="format" startLine="114" endLine="117">
      <declaration type="Vector3D" name="v3" />
    </method>
    <javadoc>
      <text>* Parses a string to produce a {@link Vector3D} object.</text>
      <param>source the string to parse</param>
      <return>the parsed {@link Vector3D} object.</return>
      <throws>MathParseException if the beginning of the specified string
 * cannot be parsed.</throws>
    </javadoc>
    <method type="Vector3D" name="parse" startLine="127" endLine="136">
      <declaration type="ParsePosition" name="parsePosition" />
      <declaration type="Vector3D" name="result" />
      <scope startLine="130" endLine="134" />
    </method>
    <javadoc>
      <text>* Parses a string to produce a {@link Vector3D} object.</text>
      <param>source the string to parse</param>
      <param>pos input/ouput parsing parameter.</param>
      <return>the parsed {@link Vector3D} object.</return>
    </javadoc>
    <method type="Vector3D" name="parse" startLine="145" endLine="151">
      <declaration type="double[]" name="coordinates" />
      <scope startLine="147" endLine="149" />
    </method>
  </class>
</source>
