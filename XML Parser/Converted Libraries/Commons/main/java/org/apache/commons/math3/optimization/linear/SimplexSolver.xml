<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization.linear">
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <import name="org.apache.commons.math3.optimization.PointValuePair" />
  <import name="org.apache.commons.math3.util.Precision" />
  <class name="SimplexSolver" extends="AbstractLinearOptimizer" startLine="28">
    <javadoc>
      <text>* Solves a linear problem using the Two-Phase Simplex Method.</text>
      <version>$Id: SimplexSolver.java 1462503 2013-03-29 15:48:27Z luc $</version>
      <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Default amount of error to accept for algorithm convergence.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_EPSILON" />
    <javadoc>
      <text>* Default amount of error to accept in floating point comparisons (as ulps).</text>
    </javadoc>
    <declaration type="int" name="DEFAULT_ULPS" />
    <javadoc>
      <text>* Amount of error to accept for algorithm convergence.</text>
    </javadoc>
    <declaration type="double" name="epsilon" />
    <javadoc>
      <text>* Amount of error to accept in floating point comparisons (as ulps).</text>
    </javadoc>
    <declaration type="int" name="maxUlps" />
    <javadoc>
      <text>* Build a simplex solver with default settings.</text>
    </javadoc>
    <method type="constructor" name="SimplexSolver" startLine="53" endLine="55" />
    <javadoc>
      <text>* Build a simplex solver with a specified accepted amount of error</text>
      <param>epsilon the amount of error to accept for algorithm convergence</param>
      <param>maxUlps amount of error to accept in floating point comparisons</param>
    </javadoc>
    <method type="constructor" name="SimplexSolver" startLine="62" endLine="65" />
    <javadoc>
      <text>* Returns the column with the most negative coefficient in the objective function row.</text>
      <param>tableau simple tableau for the problem</param>
      <return>column with the most negative coefficient</return>
    </javadoc>
    <method type="Integer" name="getPivotColumn" startLine="72" endLine="85">
      <declaration type="double" name="minValue" />
      <declaration type="Integer" name="minPos" />
      <scope startLine="75" endLine="83">
        <declaration type="double" name="entry" />
        <scope startLine="79" endLine="82" />
        <comment>check if the entry is strictly smaller than the current minimum</comment>
        <comment>do not use a ulp/epsilon check</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the row with the minimum ratio as given by the minimum ratio test (MRT).</text>
      <param>tableau simple tableau for the problem</param>
      <param>col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}</param>
      <return>row with the minimum ratio</return>
    </javadoc>
    <method type="Integer" name="getPivotRow" startLine="93" endLine="161">
      <declaration type="List<Integer>" name="minRatioPositions" />
      <declaration type="double" name="minRatio" />
      <scope startLine="97" endLine="114">
        <declaration type="double" name="rhs" />
        <declaration type="double" name="entry" />
        <scope startLine="101" endLine="113">
          <declaration type="double" name="ratio" />
          <declaration type="int" name="cmp" />
          <scope startLine="106" endLine="108" />
          <scope startLine="108" endLine="112" />
        </scope>
        <comment>check if the entry is strictly equal to the current min ratio</comment>
        <comment>do not use a ulp/epsilon check</comment>
      </scope>
      <scope startLine="116" endLine="118" />
      <scope startLine="118" endLine="159">
        <scope startLine="122" endLine="132">
          <scope startLine="123" endLine="131">
            <scope startLine="124" endLine="130">
              <declaration type="int" name="column" />
              <declaration type="double" name="entry" />
              <scope startLine="127" endLine="129" />
            </scope>
          </scope>
        </scope>
        <scope startLine="143" endLine="158">
          <declaration type="Integer" name="minRow" />
          <declaration type="int" name="minIndex" />
          <declaration type="int" name="varStart" />
          <declaration type="int" name="varEnd" />
          <scope startLine="148" endLine="156">
            <scope startLine="149" endLine="155">
              <declaration type="Integer" name="basicRow" />
              <scope startLine="151" endLine="154" />
            </scope>
          </scope>
        </scope>
        <comment>there's a degeneracy as indicated by a tie in the minimum ratio test</comment>
        <comment>1. check if there's an artificial variable that can be forced out of the basis</comment>
        <comment>2. apply Bland's rule to prevent cycling:</comment>
        <comment>take the row for which the corresponding basic variable has the smallest index</comment>
        <comment />
        <comment>see http:www.stanford.edu/class/msande310/blandrule.pdf</comment>
        <comment>see http:en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)</comment>
        <comment />
        <comment>Additional heuristic: if we did not get a solution after half of maxIterations</comment>
        <comment>revert to the simple case of just returning the top-most row</comment>
        <comment>This heuristic is based on empirical data gathered while investigating MATH-828.</comment>
      </scope>
      <comment>create a list of all the rows that tie for the lowest score in the minimum ratio test</comment>
    </method>
    <javadoc>
      <text>* Runs one iteration of the Simplex method on the given model.</text>
      <param>tableau simple tableau for the problem</param>
      <throws>MaxCountExceededException if the maximal iteration count has been exceeded</throws>
      <throws>UnboundedSolutionException if the model is found not to have a bounded solution</throws>
    </javadoc>
    <method type="void" name="doIteration" startLine="170" endLine="191">
      <declaration type="Integer" name="pivotCol" />
      <declaration type="Integer" name="pivotRow" />
      <scope startLine="176" endLine="178" />
      <declaration type="double" name="pivotVal" />
      <scope startLine="185" endLine="190">
        <scope startLine="186" endLine="189">
          <declaration type="double" name="multiplier" />
        </scope>
      </scope>
      <comment>set the pivot element to 1</comment>
      <comment>set the rest of the pivot column to 0</comment>
    </method>
    <javadoc>
      <text>* Solves Phase 1 of the Simplex method.</text>
      <param>tableau simple tableau for the problem</param>
      <throws>MaxCountExceededException if the maximal iteration count has been exceeded</throws>
      <throws>UnboundedSolutionException if the model is found not to have a bounded solution</throws>
      <throws>NoFeasibleSolutionException if there is no feasible solution</throws>
    </javadoc>
    <method type="void" name="solvePhase1" startLine="201" endLine="216">
      <scope startLine="204" endLine="206" />
      <scope startLine="208" endLine="210" />
      <scope startLine="213" endLine="215" />
      <comment>make sure we're in Phase 1</comment>
      <comment>if W is not zero then we have no feasible solution</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="PointValuePair" name="doOptimize" startLine="221" endLine="237">
      <declaration type="SimplexTableau" name="tableau" />
      <scope startLine="233" endLine="235" />
    </method>
  </class>
</source>
