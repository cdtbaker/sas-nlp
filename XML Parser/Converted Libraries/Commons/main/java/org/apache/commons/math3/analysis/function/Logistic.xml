<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.function">
  <import name="org.apache.commons.math3.analysis.FunctionUtils" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.DifferentiableUnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.ParametricUnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.differentiation.DerivativeStructure" />
  <import name="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="Logistic" startLine="31">
    <implements name="UnivariateDifferentiableFunction" />
    <implements name="DifferentiableUnivariateFunction" />
    <javadoc>
      <text>* <a href="http://en.wikipedia.org/wiki/Generalised_logistic_function">
 * Generalised logistic</a> function.</text>
      <since>3.0</since>
      <version>$Id: Logistic.java 1391927 2012-09-30 00:03:30Z erans $</version>
    </javadoc>
    <javadoc>
      <text>* Lower asymptote.</text>
    </javadoc>
    <declaration type="double" name="a" />
    <javadoc>
      <text>* Upper asymptote.</text>
    </javadoc>
    <declaration type="double" name="k" />
    <javadoc>
      <text>* Growth rate.</text>
    </javadoc>
    <declaration type="double" name="b" />
    <javadoc>
      <text>* Parameter that affects near which asymptote maximum growth occurs.</text>
    </javadoc>
    <declaration type="double" name="oneOverN" />
    <javadoc>
      <text>* Parameter that affects the position of the curve along the ordinate axis.</text>
    </javadoc>
    <declaration type="double" name="q" />
    <javadoc>
      <text>* Abscissa of maximum growth.</text>
    </javadoc>
    <declaration type="double" name="m" />
    <javadoc>
      <param>k If {@code b > 0}, value of the function for x going towards +&infin;.
 * If {@code b < 0}, value of the function for x going towards -&infin;.</param>
      <param>m Abscissa of maximum growth.</param>
      <param>b Growth rate.</param>
      <param>q Parameter that affects the position of the curve along the
 * ordinate axis.</param>
      <param>a If {@code b > 0}, value of the function for x going towards -&infin;.
 * If {@code b < 0}, value of the function for x going towards +&infin;.</param>
      <param>n Parameter that affects near which asymptote the maximum
 * growth occurs.</param>
      <throws>NotStrictlyPositiveException if {@code n <= 0}.</throws>
    </javadoc>
    <method type="constructor" name="Logistic" startLine="71" endLine="82">
      <scope startLine="72" endLine="74" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value" startLine="85" endLine="87" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <deprecated>as of 3.1, replaced by {@link #value(DerivativeStructure)}</deprecated>
    </javadoc>
    <method type="UnivariateFunction" name="derivative" startLine="93" endLine="95" />
    <class name="Parametric" startLine="97">
      <implements name="ParametricUnivariateFunction" />
      <javadoc>
        <text>* Parametric function where the input array contains the parameters of
 * the logit function, ordered as follows:
 * <ul>
 * <li>Lower asymptote</li>
 * <li>Higher asymptote</li>
 * </ul></text>
      </javadoc>
      <javadoc>
        <text>* Computes the value of the sigmoid at {@code x}.</text>
        <param>x Value for which the function must be computed.</param>
        <param>param Values for {@code k}, {@code m}, {@code b}, {@code q},{@code a} and  {@code n}.</param>
        <return>the value of the function.</return>
        <throws>NullArgumentException if {@code param} is {@code null}.</throws>
        <throws>DimensionMismatchException if the size of {@code param} is
 * not 6.</throws>
        <throws>NotStrictlyPositiveException if {@code param[5] <= 0}.</throws>
      </javadoc>
      <method type="double" name="value" startLine="121" endLine="126" />
      <javadoc>
        <text>* Computes the value of the gradient at {@code x}.
 * The components of the gradient vector are the partial
 * derivatives of the function with respect to each of the
 * <em>parameters</em>.</text>
        <param>x Value at which the gradient must be computed.</param>
        <param>param Values for {@code k}, {@code m}, {@code b}, {@code q},{@code a} and  {@code n}.</param>
        <return>the gradient vector at {@code x}.</return>
        <throws>NullArgumentException if {@code param} is {@code null}.</throws>
        <throws>DimensionMismatchException if the size of {@code param} is
 * not 6.</throws>
        <throws>NotStrictlyPositiveException if {@code param[5] <= 0}.</throws>
      </javadoc>
      <method type="double[]" name="gradient" startLine="146" endLine="169">
        <declaration type="double" name="b" />
        <declaration type="double" name="q" />
        <declaration type="double" name="mMinusX" />
        <declaration type="double" name="oneOverN" />
        <declaration type="double" name="exp" />
        <declaration type="double" name="qExp" />
        <declaration type="double" name="qExp1" />
        <declaration type="double" name="factor1" />
        <declaration type="double" name="factor2" />
        <declaration type="double" name="gk" />
        <declaration type="double" name="gm" />
        <declaration type="double" name="gb" />
        <declaration type="double" name="gq" />
        <declaration type="double" name="ga" />
        <declaration type="double" name="gn" />
        <comment>Components of the gradient.</comment>
      </method>
      <javadoc>
        <text>* Validates parameters to ensure they are appropriate for the evaluation of
 * the {@link #value(double,double[])} and {@link #gradient(double,double[])}methods.</text>
        <param>param Values for {@code k}, {@code m}, {@code b}, {@code q},{@code a} and {@code n}.</param>
        <throws>NullArgumentException if {@code param} is {@code null}.</throws>
        <throws>DimensionMismatchException if the size of {@code param} is
 * not 6.</throws>
        <throws>NotStrictlyPositiveException if {@code param[5] <= 0}.</throws>
      </javadoc>
      <method type="void" name="validateParameters" startLine="186" endLine="196">
        <scope startLine="187" endLine="189" />
        <scope startLine="190" endLine="192" />
        <scope startLine="193" endLine="195" />
      </method>
      <javadoc>
        <param>mMinusX {@code m - x}.</param>
        <param>k {@code k}.</param>
        <param>b {@code b}.</param>
        <param>q {@code q}.</param>
        <param>a {@code a}.</param>
        <param>oneOverN {@code 1 / n}.</param>
        <return>the value of the function.</return>
      </javadoc>
      <method type="double" name="value" startLine="213" endLine="215" />
      <javadoc>
        <text>* {@inheritDoc}</text>
        <since>3.1</since>
      </javadoc>
      <method type="DerivativeStructure" name="value" startLine="220" endLine="222" />
    </class>
  </class>
</source>
