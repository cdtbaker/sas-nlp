<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim.univariate">
  <import name="java.util.Arrays" />
  <import name="java.util.Comparator" />
  <import name="org.apache.commons.math3.exception.MathIllegalStateException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.optim.MaxEval" />
  <import name="org.apache.commons.math3.optim.nonlinear.scalar.GoalType" />
  <import name="org.apache.commons.math3.optim.OptimizationData" />
  <class name="MultiStartUnivariateOptimizer" extends="UnivariateOptimizer" startLine="30">
    <javadoc>
      <text>* Special implementation of the {@link UnivariateOptimizer} interface
 * adding multi-start features to an existing optimizer.
 * <br/>
 * This class wraps an optimizer in order to use it several times in
 * turn with different starting points (trying to avoid being trapped
 * in a local extremum when looking for a global one).</text>
      <version>$Id: MultiStartUnivariateOptimizer.java 1435539 2013-01-19 13:27:24Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Underlying classical optimizer.</text>
    </javadoc>
    <declaration type="UnivariateOptimizer" name="optimizer" />
    <javadoc>
      <text>* Number of evaluations already performed for all starts.</text>
    </javadoc>
    <declaration type="int" name="totalEvaluations" />
    <javadoc>
      <text>* Number of starts to go.</text>
    </javadoc>
    <declaration type="int" name="starts" />
    <javadoc>
      <text>* Random generator for multi-start.</text>
    </javadoc>
    <declaration type="RandomGenerator" name="generator" />
    <javadoc>
      <text>* Found optima.</text>
    </javadoc>
    <declaration type="UnivariatePointValuePair[]" name="optima" />
    <javadoc>
      <text>* Optimization data.</text>
    </javadoc>
    <declaration type="OptimizationData[]" name="optimData" />
    <javadoc>
      <text>* Location in {@link #optimData} where the updated maximum
 * number of evaluations will be stored.</text>
    </javadoc>
    <declaration type="int" name="maxEvalIndex" />
    <javadoc>
      <text>* Location in {@link #optimData} where the updated start value
 * will be stored.</text>
    </javadoc>
    <declaration type="int" name="searchIntervalIndex" />
    <javadoc>
      <text>* Create a multi-start optimizer from a single-start optimizer.</text>
      <param>optimizer Single-start optimizer to wrap.</param>
      <param>starts Number of starts to perform. If {@code starts == 1},
 * the {@code optimize} methods will return the same solution as{@code optimizer} would.</param>
      <param>generator Random generator to use for restarts.</param>
      <throws>NotStrictlyPositiveException if {@code starts < 1}.</throws>
    </javadoc>
    <method type="constructor" name="MultiStartUnivariateOptimizer" startLine="78" endLine="88">
      <scope startLine="81" endLine="83" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getEvaluations" startLine="92" endLine="94" />
    <javadoc>
      <text>* Gets all the optima found during the last call to {@code optimize}.
 * The optimizer stores all the optima found during a set of
 * restarts. The {@code optimize} method returns the best point only.
 * This method returns all the points found at the end of each starts,
 * including the best one already returned by the {@code optimize} method.
 * <br/>
 * The returned array as one element for each start as specified
 * in the constructor. It is ordered with the results from the
 * runs that did converge first, sorted from best to worst
 * objective value (i.e in ascending order if minimizing and in
 * descending order if maximizing), followed by {@code null} elements
 * corresponding to the runs that did not converge. This means all
 * elements will be {@code null} if the {@code optimize} method did throw
 * an exception.
 * This also means that if the first element is not {@code null}, it is
 * the best point found across all starts.</text>
      <return>an array containing the optima.</return>
      <throws>MathIllegalStateException if {@link #optimize(OptimizationData[])optimize} has not been called.</throws>
    </javadoc>
    <method type="UnivariatePointValuePair[]" name="getOptima" startLine="118" endLine="123">
      <scope startLine="119" endLine="121" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <throws>MathIllegalStateException if {@code optData} does not contain an
 * instance of {@link MaxEval} or {@link SearchInterval}.</throws>
    </javadoc>
    <method type="UnivariatePointValuePair" name="optimize" startLine="132" endLine="137">
      <comment>Store arguments in order to pass them to the internal optimizer.</comment>
      <comment>Set up base class and perform computations.</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="UnivariatePointValuePair" name="doOptimize" startLine="141" endLine="205">
      <scope startLine="147" endLine="158">
        <scope startLine="148" endLine="152" />
        <scope startLine="153" endLine="157" />
      </scope>
      <scope startLine="159" endLine="161" />
      <scope startLine="162" endLine="164" />
      <declaration type="RuntimeException" name="lastException" />
      <declaration type="int" name="maxEval" />
      <declaration type="double" name="min" />
      <declaration type="double" name="max" />
      <declaration type="double" name="startValue" />
      <scope startLine="176" endLine="195">
        <scope startLine="178" endLine="188">
          <declaration type="double" name="s" />
        </scope>
        <scope startLine="188" endLine="191" />
        <comment>CHECKSTYLE: stop IllegalCatch</comment>
        <comment>Decrease number of allowed evaluations.</comment>
        <comment>New start value.</comment>
        <comment>Optimize.</comment>
        <comment>CHECKSTYLE: resume IllegalCatch</comment>
      </scope>
      <scope startLine="199" endLine="201">
        <comment>Cannot be null if starts >= 1.</comment>
      </scope>
      <comment>Remove all instances of "MaxEval" and "SearchInterval" from the</comment>
      <comment>array that will be passed to the internal optimizer.</comment>
      <comment>The former is to enforce smaller numbers of allowed evaluations</comment>
      <comment>(according to how many have been used up already), and the latter</comment>
      <comment>to impose a different start value for each start.</comment>
      <comment>Multi-start loop.</comment>
      <comment>Return the point with the best objective function value.</comment>
    </method>
    <javadoc>
      <text>* Sort the optima from best to worst, followed by {@code null} elements.</text>
      <param>goal Goal type.</param>
    </javadoc>
    <method type="void" name="sortPairs" startLine="212" endLine="227">
      <method type="int" name="compare" startLine="215" endLine="225">
        <scope startLine="216" endLine="218" />
        <scope startLine="218" endLine="220" />
        <declaration type="double" name="v1" />
        <declaration type="double" name="v2" />
      </method>
    </method>
  </class>
</source>
