<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.primes">
  <import name="java.math.BigInteger" />
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="SmallPrimes" startLine="26">
    <javadoc>
      <text>* Utility methods to work on primes within the <code>int</code> range.</text>
      <version>$Id: SmallPrimes.java 1462702 2013-03-30 04:45:52Z psteitz $</version>
      <since>3.2</since>
    </javadoc>
    <javadoc>
      <text>* The first 512 prime numbers.
 * <p>
 * It contains all primes smaller or equal to the cubic square of Integer.MAX_VALUE.
 * As a result, <code>int</code> numbers which are not reduced by those primes are guaranteed
 * to be either prime or semi prime.</text>
    </javadoc>
    <declaration type="int[]" name="PRIMES" />
    <javadoc>
      <text>* The last number in PRIMES.</text>
    </javadoc>
    <declaration type="int" name="PRIMES_LAST" />
    <javadoc>
      <text>* Hide utility class.</text>
    </javadoc>
    <method type="constructor" name="SmallPrimes" startLine="74" endLine="75" />
    <javadoc>
      <text>* Extract small factors.</text>
      <param>n the number to factor, must be &gt; 0.</param>
      <param>factors the list where to add the factors.</param>
      <return>the part of n which remains to be factored, it is either a prime or a semi-prime</return>
    </javadoc>
    <method type="int" name="smallTrialDivision" startLine="83" endLine="91">
      <scope startLine="84" endLine="89">
        <scope startLine="85" endLine="88" />
      </scope>
    </method>
    <javadoc>
      <text>* Extract factors in the range <code>PRIME_LAST+2</code> to <code>maxFactors</code>.</text>
      <param>n the number to factorize, must be >= PRIME_LAST+2 and must not contain any factor below PRIME_LAST+2</param>
      <param>maxFactor the upper bound of trial division: if it is reached, the method gives up and returns n.</param>
      <param>factors the list where to add the factors.</param>
      <return>n or 1 if factorization is completed.</return>
    </javadoc>
    <method type="int" name="boundedTrialDivision" startLine="100" endLine="121">
      <declaration type="int" name="f" />
      <scope startLine="103" endLine="116">
        <scope startLine="104" endLine="108" />
        <scope startLine="110" endLine="114" />
      </scope>
      <scope startLine="117" endLine="119" />
      <comment>no check is done about n >= f</comment>
    </method>
    <javadoc>
      <text>* Factorization by trial division.</text>
      <param>n the number to factor</param>
      <return>the list of prime factors of n</return>
    </javadoc>
    <method type="List<Integer>" name="trialDivision" startLine="128" endLine="138">
      <declaration type="List<Integer>" name="factors" />
      <scope startLine="131" endLine="133" />
      <declaration type="int" name="bound" />
      <comment>here we are sure that n is either a prime or a semi prime</comment>
    </method>
    <javadoc>
      <text>* Miller-Rabin probabilistic primality test for int type, used in such a way that a result is always guaranteed.
 * <p>
 * It uses the prime numbers as successive base therefore it is guaranteed to be always correct.
 * (see Handbook of applied cryptography by Menezes, table 4.1)</text>
      <param>n number to test: an odd integer &ge; 3</param>
      <return>true if n is prime. false if n is definitely composite.</return>
    </javadoc>
    <method type="boolean" name="millerRabinPrimeTest" startLine="149" endLine="187">
      <declaration type="int" name="nMinus1" />
      <declaration type="int" name="s" />
      <declaration type="int" name="r" />
      <declaration type="int" name="t" />
      <scope startLine="155" endLine="157" />
      <scope startLine="158" endLine="160" />
      <scope startLine="161" endLine="163">
        <comment>works up to 3.2 billion, int range stops at 2.7 so we are safe :-)</comment>
      </scope>
      <declaration type="BigInteger" name="br" />
      <declaration type="BigInteger" name="bn" />
      <scope startLine="167" endLine="185">
        <declaration type="BigInteger" name="a" />
        <declaration type="BigInteger" name="bPow" />
        <declaration type="int" name="y" />
        <scope startLine="171" endLine="184">
          <declaration type="int" name="j" />
          <scope startLine="173" endLine="180">
            <declaration type="long" name="square" />
            <scope startLine="176" endLine="178" />
          </scope>
          <scope startLine="181" endLine="183" />
        </scope>
        <comment>definitely composite</comment>
        <comment>definitely composite</comment>
      </scope>
      <comment>r must be odd, it is not checked here</comment>
      <comment>definitely prime</comment>
    </method>
  </class>
</source>
