<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.util">
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <class name="MultidimensionalCounter" startLine="24">
    <implements name="Iterable<Integer>" />
    <javadoc>
      <text>* Converter between unidimensional storage structure and multidimensional
 * conceptual structure.
 * This utility will convert from indices in a multidimensional structure
 * to the corresponding index in a one-dimensional array. For example,
 * assuming that the ranges (in 3 dimensions) of indices are 2, 4 and 3,
 * the following correspondences, between 3-tuples indices and unidimensional
 * indices, will hold:
 * <ul>
 * <li>(0, 0, 0) corresponds to 0</li>
 * <li>(0, 0, 1) corresponds to 1</li>
 * <li>(0, 0, 2) corresponds to 2</li>
 * <li>(0, 1, 0) corresponds to 3</li>
 * <li>...</li>
 * <li>(1, 0, 0) corresponds to 12</li>
 * <li>...</li>
 * <li>(1, 3, 2) corresponds to 23</li>
 * </ul></text>
      <since>2.2</since>
      <version>$Id: MultidimensionalCounter.java 1382887 2012-09-10 14:37:27Z luc $</version>
    </javadoc>
    <javadoc>
      <text>* Number of dimensions.</text>
    </javadoc>
    <declaration type="int" name="dimension" />
    <javadoc>
      <text>* Offset for each dimension.</text>
    </javadoc>
    <declaration type="int[]" name="uniCounterOffset" />
    <javadoc>
      <text>* Counter sizes.</text>
    </javadoc>
    <declaration type="int[]" name="size" />
    <javadoc>
      <text>* Total number of (one-dimensional) slots.</text>
    </javadoc>
    <declaration type="int" name="totalSize" />
    <javadoc>
      <text>* Index of last dimension.</text>
    </javadoc>
    <declaration type="int" name="last" />
    <class name="Iterator" startLine="68">
      <implements name="java.util.Iterator<Integer>" />
      <javadoc>
        <text>* Perform iteration over the multidimensional counter.</text>
      </javadoc>
      <javadoc>
        <text>* Multidimensional counter.</text>
      </javadoc>
      <declaration type="int[]" name="counter" />
      <javadoc>
        <text>* Unidimensional counter.</text>
      </javadoc>
      <declaration type="int" name="count" />
      <javadoc>
        <text>* Create an iterator</text>
        <see>#iterator()</see>
      </javadoc>
      <method type="constructor" name="Iterator" startLine="85" endLine="87" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="boolean" name="hasNext" startLine="92" endLine="99">
        <scope startLine="93" endLine="97">
          <scope startLine="94" endLine="96" />
        </scope>
      </method>
      <javadoc>
        <return>the unidimensional count after the counter has been
 * incremented by {@code 1}.</return>
      </javadoc>
      <method type="Integer" name="next" startLine="105" endLine="116">
        <scope startLine="106" endLine="113">
          <scope startLine="107" endLine="109" />
          <scope startLine="109" endLine="112" />
        </scope>
      </method>
      <javadoc>
        <text>* Get the current unidimensional counter slot.</text>
        <return>the index within the unidimensionl counter.</return>
      </javadoc>
      <method type="int" name="getCount" startLine="123" endLine="125" />
      <javadoc>
        <text>* Get the current multidimensional counter slots.</text>
        <return>the indices within the multidimensional counter.</return>
      </javadoc>
      <method type="int[]" name="getCounts" startLine="131" endLine="133" />
      <javadoc>
        <text>* Get the current count in the selected dimension.</text>
        <param>dim Dimension index.</param>
        <return>the count at the corresponding index for the current state
 * of the iterator.</return>
        <throws>IndexOutOfBoundsException if {@code index} is not in the
 * correct interval (as defined by the length of the argument in the{@link MultidimensionalCounter#MultidimensionalCounter(int[])constructor of the enclosing class}).</throws>
      </javadoc>
      <method type="int" name="getCount" startLine="146" endLine="148" />
      <javadoc>
        <throws>UnsupportedOperationException</throws>
      </javadoc>
      <method type="void" name="remove" startLine="153" endLine="155" />
      <javadoc>
        <text>* Create a counter.</text>
        <param>size Counter sizes (number of slots in each dimension).</param>
        <throws>NotStrictlyPositiveException if one of the sizes is
 * negative or zero.</throws>
      </javadoc>
      <method type="constructor" name="MultidimensionalCounter" startLine="165" endLine="188">
        <declaration type="int" name="tS" />
        <scope startLine="173" endLine="180">
          <declaration type="int" name="count" />
          <scope startLine="175" endLine="177" />
        </scope>
        <scope startLine="183" endLine="185" />
      </method>
      <javadoc>
        <text>* Create an iterator over this counter.</text>
        <return>the iterator.</return>
      </javadoc>
      <method type="Iterator" name="iterator" startLine="195" endLine="197" />
      <javadoc>
        <text>* Get the number of dimensions of the multidimensional counter.</text>
        <return>the number of dimensions.</return>
      </javadoc>
      <method type="int" name="getDimension" startLine="204" endLine="206" />
      <javadoc>
        <text>* Convert to multidimensional counter.</text>
        <param>index Index in unidimensional counter.</param>
        <return>the multidimensional counts.</return>
        <throws>OutOfRangeException if {@code index} is not between{@code 0} and the value returned by {@link #getSize()} (excluded).</throws>
      </javadoc>
      <method type="int[]" name="getCounts" startLine="216" endLine="240">
        <scope startLine="218" endLine="220" />
        <declaration type="int[]" name="indices" />
        <declaration type="int" name="count" />
        <scope startLine="225" endLine="235">
          <declaration type="int" name="idx" />
          <declaration type="int" name="offset" />
          <scope startLine="228" endLine="231" />
        </scope>
      </method>
      <javadoc>
        <text>* Convert to unidimensional counter.</text>
        <param>c Indices in multidimensional counter.</param>
        <return>the index within the unidimensionl counter.</return>
        <throws>DimensionMismatchException if the size of {@code c}does not match the size of the array given in the constructor.</throws>
        <throws>OutOfRangeException if a value of {@code c} is not in
 * the range of the corresponding dimension, as defined in the{@link MultidimensionalCounter#MultidimensionalCounter(int...) constructor}.</throws>
      </javadoc>
      <method type="int" name="getCount" startLine="254" endLine="268">
        <scope startLine="255" endLine="257" />
        <declaration type="int" name="count" />
        <scope startLine="259" endLine="266">
          <declaration type="int" name="index" />
          <scope startLine="262" endLine="264" />
        </scope>
      </method>
      <javadoc>
        <text>* Get the total number of elements.</text>
        <return>the total size of the unidimensional counter.</return>
      </javadoc>
      <method type="int" name="getSize" startLine="275" endLine="277" />
      <javadoc>
        <text>* Get the number of multidimensional counter slots in each dimension.</text>
        <return>the sizes of the multidimensional counter in each dimension.</return>
      </javadoc>
      <method type="int[]" name="getSizes" startLine="283" endLine="285" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="String" name="toString" startLine="291" endLine="297">
        <declaration type="StringBuilder" name="sb" />
        <scope startLine="293" endLine="295" />
      </method>
    </class>
  </class>
</source>
