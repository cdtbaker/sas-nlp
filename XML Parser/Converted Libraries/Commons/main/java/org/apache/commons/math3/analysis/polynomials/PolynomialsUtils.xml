<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.polynomials">
  <import name="java.util.ArrayList" />
  <import name="java.util.HashMap" />
  <import name="java.util.List" />
  <import name="java.util.Map" />
  <import name="org.apache.commons.math3.fraction.BigFraction" />
  <import name="org.apache.commons.math3.util.ArithmeticUtils" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="PolynomialsUtils" startLine="28">
    <javadoc>
      <text>* A collection of static methods that operate on or return polynomials.</text>
      <version>$Id: PolynomialsUtils.java 1364387 2012-07-22 18:14:11Z tn $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Coefficients for Chebyshev polynomials.</text>
    </javadoc>
    <declaration type="List<BigFraction>" name="CHEBYSHEV_COEFFICIENTS" />
    <javadoc>
      <text>* Coefficients for Hermite polynomials.</text>
    </javadoc>
    <declaration type="List<BigFraction>" name="HERMITE_COEFFICIENTS" />
    <javadoc>
      <text>* Coefficients for Laguerre polynomials.</text>
    </javadoc>
    <declaration type="List<BigFraction>" name="LAGUERRE_COEFFICIENTS" />
    <javadoc>
      <text>* Coefficients for Legendre polynomials.</text>
    </javadoc>
    <declaration type="List<BigFraction>" name="LEGENDRE_COEFFICIENTS" />
    <javadoc>
      <text>* Coefficients for Jacobi polynomials.</text>
    </javadoc>
    <declaration type="Map<JacobiKey,List<BigFraction>>" name="JACOBI_COEFFICIENTS" />
    <scope startLine="51" endLine="84">
      <comment>initialize recurrence for Chebyshev polynomials</comment>
      <comment>T0(X) = 1, T1(X) = 0 + 1 * X</comment>
      <comment>initialize recurrence for Hermite polynomials</comment>
      <comment>H0(X) = 1, H1(X) = 0 + 2 * X</comment>
      <comment>initialize recurrence for Laguerre polynomials</comment>
      <comment>L0(X) = 1, L1(X) = 1 - 1 * X</comment>
      <comment>initialize recurrence for Legendre polynomials</comment>
      <comment>P0(X) = 1, P1(X) = 0 + 1 * X</comment>
      <comment>initialize map for Jacobi polynomials</comment>
    </scope>
    <javadoc>
      <text>* Private constructor, to prevent instantiation.</text>
    </javadoc>
    <method type="constructor" name="PolynomialsUtils" startLine="89" endLine="90" />
    <javadoc>
      <text>* Create a Chebyshev polynomial of the first kind.
 * <p><a href="http://mathworld.wolfram.com/ChebyshevPolynomialoftheFirstKind.html">Chebyshev
 * polynomials of the first kind</a> are orthogonal polynomials.
 * They can be defined by the following recurrence relations:
 * <pre>
 * T<sub>0</sub>(X)   = 1
 * T<sub>1</sub>(X)   = X
 * T<sub>k+1</sub>(X) = 2X T<sub>k</sub>(X) - T<sub>k-1</sub>(X)
 * </pre></p></text>
      <param>degree degree of the polynomial</param>
      <return>Chebyshev polynomial of specified degree</return>
    </javadoc>
    <method type="PolynomialFunction" name="createChebyshevPolynomial" startLine="105" endLine="114">
      <declaration type="BigFraction[]" name="coeffs" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="BigFraction[]" name="generate" startLine="110" endLine="112" />
    </method>
    <javadoc>
      <text>* Create a Hermite polynomial.
 * <p><a href="http://mathworld.wolfram.com/HermitePolynomial.html">Hermite
 * polynomials</a> are orthogonal polynomials.
 * They can be defined by the following recurrence relations:
 * <pre>
 * H<sub>0</sub>(X)   = 1
 * H<sub>1</sub>(X)   = 2X
 * H<sub>k+1</sub>(X) = 2X H<sub>k</sub>(X) - 2k H<sub>k-1</sub>(X)
 * </pre></p></text>
      <param>degree degree of the polynomial</param>
      <return>Hermite polynomial of specified degree</return>
    </javadoc>
    <method type="PolynomialFunction" name="createHermitePolynomial" startLine="130" endLine="141">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="BigFraction[]" name="generate" startLine="134" endLine="139" />
    </method>
    <javadoc>
      <text>* Create a Laguerre polynomial.
 * <p><a href="http://mathworld.wolfram.com/LaguerrePolynomial.html">Laguerre
 * polynomials</a> are orthogonal polynomials.
 * They can be defined by the following recurrence relations:
 * <pre>
 * L<sub>0</sub>(X)   = 1
 * L<sub>1</sub>(X)   = 1 - X
 * (k+1) L<sub>k+1</sub>(X) = (2k + 1 - X) L<sub>k</sub>(X) - k L<sub>k-1</sub>(X)
 * </pre></p></text>
      <param>degree degree of the polynomial</param>
      <return>Laguerre polynomial of specified degree</return>
    </javadoc>
    <method type="PolynomialFunction" name="createLaguerrePolynomial" startLine="156" endLine="168">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="BigFraction[]" name="generate" startLine="160" endLine="166">
        <declaration type="int" name="kP1" />
      </method>
    </method>
    <javadoc>
      <text>* Create a Legendre polynomial.
 * <p><a href="http://mathworld.wolfram.com/LegendrePolynomial.html">Legendre
 * polynomials</a> are orthogonal polynomials.
 * They can be defined by the following recurrence relations:
 * <pre>
 * P<sub>0</sub>(X)   = 1
 * P<sub>1</sub>(X)   = X
 * (k+1) P<sub>k+1</sub>(X) = (2k+1) X P<sub>k</sub>(X) - k P<sub>k-1</sub>(X)
 * </pre></p></text>
      <param>degree degree of the polynomial</param>
      <return>Legendre polynomial of specified degree</return>
    </javadoc>
    <method type="PolynomialFunction" name="createLegendrePolynomial" startLine="183" endLine="195">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="BigFraction[]" name="generate" startLine="187" endLine="193">
        <declaration type="int" name="kP1" />
      </method>
    </method>
    <javadoc>
      <text>* Create a Jacobi polynomial.
 * <p><a href="http://mathworld.wolfram.com/JacobiPolynomial.html">Jacobi
 * polynomials</a> are orthogonal polynomials.
 * They can be defined by the following recurrence relations:
 * <pre>
 * P<sub>0</sub><sup>vw</sup>(X)   = 1
 * P<sub>-1</sub><sup>vw</sup>(X)  = 0
 * 2k(k + v + w)(2k + v + w - 2) P<sub>k</sub><sup>vw</sup>(X) =
 * (2k + v + w - 1)[(2k + v + w)(2k + v + w - 2) X + v<sup>2</sup> - w<sup>2</sup>] P<sub>k-1</sub><sup>vw</sup>(X)
 * - 2(k + v - 1)(k + w - 1)(2k + v + w) P<sub>k-2</sub><sup>vw</sup>(X)
 * </pre></p></text>
      <param>degree degree of the polynomial</param>
      <param>v first exponent</param>
      <param>w second exponent</param>
      <return>Jacobi polynomial of specified degree</return>
    </javadoc>
    <method type="PolynomialFunction" name="createJacobiPolynomial" startLine="214" endLine="253">
      <declaration type="JacobiKey" name="key" />
      <scope startLine="219" endLine="232">
        <declaration type="List<BigFraction>" name="list" />
        <comment>allocate a new list for v, w</comment>
        <comment>Pv,w,0(x) = 1;</comment>
        <comment>P1(x) = (v - w) / 2 + (2 + v + w) * X / 2</comment>
      </scope>
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="BigFraction[]" name="generate" startLine="237" endLine="250">
        <declaration type="int" name="kvw" />
        <declaration type="int" name="twoKvw" />
        <declaration type="int" name="twoKvwM1" />
        <declaration type="int" name="twoKvwM2" />
        <declaration type="int" name="den" />
      </method>
      <comment>select the appropriate list</comment>
    </method>
    <class name="JacobiKey" startLine="255">
      <javadoc>
        <text>* Inner class for Jacobi polynomials keys.</text>
      </javadoc>
      <javadoc>
        <text>* First exponent.</text>
      </javadoc>
      <declaration type="int" name="v" />
      <javadoc>
        <text>* Second exponent.</text>
      </javadoc>
      <declaration type="int" name="w" />
      <javadoc>
        <text>* Simple constructor.</text>
        <param>v first exponent</param>
        <param>w second exponent</param>
      </javadoc>
      <method type="constructor" name="JacobiKey" startLine="268" endLine="271" />
      <javadoc>
        <text>* Get hash code.</text>
        <return>hash code</return>
      </javadoc>
      <method type="int" name="hashCode" startLine="277" endLine="279" />
      <javadoc>
        <text>* Check if the instance represent the same key as another instance.</text>
        <param>key other key</param>
        <return>true if the instance and the other key refer to the same polynomial</return>
      </javadoc>
      <method type="boolean" name="equals" startLine="286" endLine="295">
        <scope startLine="288" endLine="290" />
        <declaration type="JacobiKey" name="otherK" />
      </method>
      <javadoc>
        <text>* Compute the coefficients of the polynomial <code>P<sub>s</sub>(x)</code>
 * whose values at point {@code x} will be the same as the those from the
 * original polynomial <code>P(x)</code> when computed at {@code x + shift}.
 * Thus, if <code>P(x) = &Sigma;<sub>i</sub> a<sub>i</sub> x<sup>i</sup></code>,
 * then
 * <pre>
 * <table>
 * <tr>
 * <td><code>P<sub>s</sub>(x)</td>
 * <td>= &Sigma;<sub>i</sub> b<sub>i</sub> x<sup>i</sup></code></td>
 * </tr>
 * <tr>
 * <td></td>
 * <td>= &Sigma;<sub>i</sub> a<sub>i</sub> (x + shift)<sup>i</sup></code></td>
 * </tr>
 * </table>
 * </pre></text>
        <param>coefficients Coefficients of the original polynomial.</param>
        <param>shift Shift value.</param>
        <return>the coefficients <code>b<sub>i</sub></code> of the shifted
 * polynomial.</return>
      </javadoc>
      <method type="double[]" name="shift" startLine="323" endLine="350">
        <declaration type="int" name="dp1" />
        <declaration type="double[]" name="newCoefficients" />
        <declaration type="int[][]" name="coeff" />
        <scope startLine="329" endLine="333">
          <scope startLine="330" endLine="332" />
        </scope>
        <scope startLine="336" endLine="338" />
        <declaration type="int" name="d" />
        <scope startLine="342" endLine="347">
          <scope startLine="343" endLine="346" />
        </scope>
        <comment>Pascal triangle.</comment>
        <comment>First polynomial coefficient.</comment>
        <comment>Superior order.</comment>
      </method>
      <javadoc>
        <text>* Get the coefficients array for a given degree.</text>
        <param>degree degree of the polynomial</param>
        <param>coefficients list where the computed coefficients are stored</param>
        <param>generator recurrence coefficients generator</param>
        <return>coefficients array</return>
      </javadoc>
      <method type="PolynomialFunction" name="buildPolynomial" startLine="361" endLine="388">
        <declaration type="int" name="maxDegree" />
        <scope startLine="364" endLine="368">
          <scope startLine="365" endLine="367" />
        </scope>
        <declaration type="int" name="start" />
        <declaration type="double[]" name="a" />
        <scope startLine="381" endLine="383" />
        <comment>coefficient  for polynomial 0 is  l [0]</comment>
        <comment>coefficients for polynomial 1 are l [1] ... l [2] (degrees 0 ... 1)</comment>
        <comment>coefficients for polynomial 2 are l [3] ... l [5] (degrees 0 ... 2)</comment>
        <comment>coefficients for polynomial 3 are l [6] ... l [9] (degrees 0 ... 3)</comment>
        <comment>coefficients for polynomial 4 are l[10] ... l[14] (degrees 0 ... 4)</comment>
        <comment>coefficients for polynomial 5 are l[15] ... l[20] (degrees 0 ... 5)</comment>
        <comment>coefficients for polynomial 6 are l[21] ... l[27] (degrees 0 ... 6)</comment>
        <comment>...</comment>
        <comment>build the polynomial</comment>
      </method>
      <javadoc>
        <text>* Compute polynomial coefficients up to a given degree.</text>
        <param>degree maximal degree</param>
        <param>maxDegree current maximal degree</param>
        <param>generator recurrence coefficients generator</param>
        <param>coefficients list where the computed coefficients should be appended</param>
      </javadoc>
      <method type="void" name="computeUpToDegree" startLine="398" endLine="434">
        <declaration type="int" name="startK" />
        <scope startLine="401" endLine="432">
          <declaration type="int" name="startKm1" />
          <declaration type="BigFraction[]" name="ai" />
          <declaration type="BigFraction" name="ck" />
          <declaration type="BigFraction" name="ckm1" />
          <scope startLine="417" endLine="422">
            <declaration type="BigFraction" name="ckPrev" />
          </scope>
          <declaration type="BigFraction" name="ckPrev" />
          <comment>start indices of two previous polynomials Pk(X) and Pk-1(X)</comment>
          <comment>Pk+1(X) = (a[0] + a[1] X) Pk(X) - a[2] Pk-1(X)</comment>
          <comment>degree 0 coefficient</comment>
          <comment>degree 1 to degree k-1 coefficients</comment>
          <comment>degree k coefficient</comment>
          <comment>degree k+1 coefficient</comment>
        </scope>
      </method>
      <interface name="RecurrenceCoefficientsGenerator" startLine="436">
        <javadoc>
          <text>* Interface for recurrence coefficients generation.</text>
        </javadoc>
        <method name="generate" type="BigFraction[]" startLine="438" endLine="444" />
        <javadoc>
          <text>* Generate recurrence coefficients.</text>
          <param>k highest degree of the polynomials used in the recurrence</param>
          <return>an array of three coefficients such that
 * P<sub>k+1</sub>(X) = (a[0] + a[1] X) P<sub>k</sub>(X) - a[2] P<sub>k-1</sub>(X)</return>
        </javadoc>
      </interface>
    </class>
  </class>
</source>
