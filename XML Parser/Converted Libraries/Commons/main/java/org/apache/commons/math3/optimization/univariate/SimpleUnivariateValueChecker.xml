<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization.univariate">
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.optimization.AbstractConvergenceChecker" />
  <class name="SimpleUnivariateValueChecker" extends="AbstractConvergenceChecker<UnivariatePointValuePair>" startLine="24">
    <javadoc>
      <text>* Simple implementation of the{@link org.apache.commons.math3.optimization.ConvergenceChecker} interface
 * that uses only objective function values.
 * Convergence is considered to have been reached if either the relative
 * difference between the objective function values is smaller than a
 * threshold or if either the absolute difference between the objective
 * function values is smaller than another threshold.
 * <br/>
 * The {@link #converged(int,UnivariatePointValuePair,UnivariatePointValuePair)converged} method will also return {@code true} if the number of iterations
 * has been set (see {@link #SimpleUnivariateValueChecker(double,double,int)this constructor}).</text>
      <version>$Id: SimpleUnivariateValueChecker.java 1462503 2013-03-29 15:48:27Z luc $</version>
      <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
      <since>3.1</since>
    </javadoc>
    <javadoc>
      <text>* If {@link #maxIterationCount} is set to this value, the number of
 * iterations will never cause{@link #converged(int,UnivariatePointValuePair,UnivariatePointValuePair)}to return {@code true}.</text>
    </javadoc>
    <declaration type="int" name="ITERATION_CHECK_DISABLED" />
    <javadoc>
      <text>* Number of iterations after which the{@link #converged(int,UnivariatePointValuePair,UnivariatePointValuePair)}method will return true (unless the check is disabled).</text>
    </javadoc>
    <declaration type="int" name="maxIterationCount" />
    <javadoc>
      <text>* Build an instance with default thresholds.</text>
      <deprecated>See {@link AbstractConvergenceChecker#AbstractConvergenceChecker()}</deprecated>
    </javadoc>
    <method type="constructor" name="SimpleUnivariateValueChecker" startLine="65" endLine="67" />
    <javadoc>
      <text>* Build an instance with specified thresholds.
 * In order to perform only relative checks, the absolute tolerance
 * must be set to a negative value. In order to perform only absolute
 * checks, the relative tolerance must be set to a negative value.</text>
      <param>relativeThreshold relative tolerance threshold</param>
      <param>absoluteThreshold absolute tolerance threshold</param>
    </javadoc>
    <method type="constructor" name="SimpleUnivariateValueChecker" startLine="79" endLine="82" />
    <javadoc>
      <text>* Builds an instance with specified thresholds.
 * In order to perform only relative checks, the absolute tolerance
 * must be set to a negative value. In order to perform only absolute
 * checks, the relative tolerance must be set to a negative value.</text>
      <param>relativeThreshold relative tolerance threshold</param>
      <param>absoluteThreshold absolute tolerance threshold</param>
      <param>maxIter Maximum iteration count.</param>
      <throws>NotStrictlyPositiveException if {@code maxIter <= 0}.</throws>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="SimpleUnivariateValueChecker" startLine="100" endLine="107">
      <scope startLine="103" endLine="105" />
    </method>
    <javadoc>
      <text>* Check if the optimization algorithm has converged considering the
 * last two points.
 * This method may be called several time from the same algorithm
 * iteration with different points. This can be detected by checking the
 * iteration number at each call if needed. Each time this method is
 * called, the previous and current point correspond to points with the
 * same role at each iteration, so they can be compared. As an example,
 * simplex-based algorithms call this method for all points of the simplex,
 * not only for the best or worst ones.</text>
      <param>iteration Index of current iteration</param>
      <param>previous Best point in the previous iteration.</param>
      <param>current Best point in the current iteration.</param>
      <return>{@code true} if the algorithm has converged.</return>
    </javadoc>
    <method type="boolean" name="converged" startLine="128" endLine="139">
      <scope startLine="129" endLine="131" />
      <declaration type="double" name="p" />
      <declaration type="double" name="c" />
      <declaration type="double" name="difference" />
      <declaration type="double" name="size" />
    </method>
  </class>
</source>
