<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.util">
  <interface name="DoubleArray" startLine="20">
    <javadoc>
      <text>* Provides a standard interface for double arrays.  Allows different
 * array implementations to support various storage mechanisms
 * such as automatic expansion, contraction, and array "rolling".</text>
      <version>$Id: DoubleArray.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <method name="getNumElements" type="int" startLine="29" endLine="35" />
    <javadoc>
      <text>* Returns the number of elements currently in the array.  Please note
 * that this may be different from the length of the internal storage array.</text>
      <return>number of elements</return>
    </javadoc>
    <method name="getElement" type="double" startLine="37" endLine="47" />
    <javadoc>
      <text>* Returns the element at the specified index.  Note that if an
 * out of bounds index is supplied a ArrayIndexOutOfBoundsException
 * will be thrown.</text>
      <param>index index to fetch a value from</param>
      <return>value stored at the specified index</return>
      <throws>ArrayIndexOutOfBoundsException if <code>index</code> is less than
 * zero or is greater than <code>getNumElements() - 1</code>.</throws>
    </javadoc>
    <method name="setElement" type="void" startLine="49" endLine="61" />
    <javadoc>
      <text>* Sets the element at the specified index.  If the specified index is greater than
 * <code>getNumElements() - 1</code>, the <code>numElements</code> property
 * is increased to <code>index +1</code> and additional storage is allocated
 * (if necessary) for the new element and all  (uninitialized) elements
 * between the new element and the previous end of the array).</text>
      <param>index index to store a value in</param>
      <param>value value to store at the specified index</param>
      <throws>ArrayIndexOutOfBoundsException if <code>index</code> is less than
 * zero.</throws>
    </javadoc>
    <method name="addElement" type="void" startLine="63" endLine="68" />
    <javadoc>
      <text>* Adds an element to the end of this expandable array</text>
      <param>value to be added to end of array</param>
    </javadoc>
    <method name="addElements" type="void" startLine="70" endLine="75" />
    <javadoc>
      <text>* Adds elements to the end of this expandable array</text>
      <param>values to be added to end of array</param>
    </javadoc>
    <method name="addElementRolling" type="double" startLine="77" endLine="93" />
    <javadoc>
      <text>* <p>
 * Adds an element to the end of the array and removes the first
 * element in the array.  Returns the discarded first element.
 * The effect is similar to a push operation in a FIFO queue.
 * </p>
 * <p>
 * Example: If the array contains the elements 1, 2, 3, 4 (in that order)
 * and addElementRolling(5) is invoked, the result is an array containing
 * the entries 2, 3, 4, 5 and the value returned is 1.
 * </p></text>
      <param>value the value to be added to the array</param>
      <return>the value which has been discarded or "pushed" out of the array
 * by this rolling insert</return>
    </javadoc>
    <method name="getElements" type="double[]" startLine="95" endLine="104" />
    <javadoc>
      <text>* Returns a double[] array containing the elements of this
 * <code>DoubleArray</code>.  If the underlying implementation is
 * array-based, this method should always return a copy, rather than a
 * reference to the underlying array so that changes made to the returned
 * array have no effect on the <code>DoubleArray.</code></text>
      <return>all elements added to the array</return>
    </javadoc>
    <method name="clear" type="void" startLine="106" endLine="109" />
    <javadoc>
      <text>* Clear the double array</text>
    </javadoc>
  </interface>
</source>
