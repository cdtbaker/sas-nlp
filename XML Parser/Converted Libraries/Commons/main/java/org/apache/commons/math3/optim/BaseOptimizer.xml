<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim">
  <import name="org.apache.commons.math3.util.Incrementor" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <import name="org.apache.commons.math3.exception.TooManyIterationsException" />
  <class name="BaseOptimizer" startLine="23">
    <javadoc>
      <text>* Base class for implementing optimizers.
 * It contains the boiler-plate code for counting the number of evaluations
 * of the objective function and the number of iterations of the algorithm,
 * and storing the convergence checker.
 * <em>It is not a "user" class.</em></text>
      <param><PAIR>
 *  Type of the point/value pair returned by the optimization
 * algorithm.</param>
      <version>$Id: BaseOptimizer.java 1458323 2013-03-19 14:51:30Z erans $</version>
      <since>3.1</since>
    </javadoc>
    <javadoc>
      <text>* Evaluations counter.</text>
    </javadoc>
    <declaration type="Incrementor" name="evaluations" />
    <javadoc>
      <text>* Iterations counter.</text>
    </javadoc>
    <declaration type="Incrementor" name="iterations" />
    <javadoc>
      <text>* Convergence checker.</text>
    </javadoc>
    <declaration type="ConvergenceChecker<PAIR>" name="checker" />
    <javadoc>
      <param>checker Convergence checker.</param>
    </javadoc>
    <method type="constructor" name="BaseOptimizer" startLine="47" endLine="52" />
    <javadoc>
      <text>* Gets the maximal number of function evaluations.</text>
      <return>the maximal number of function evaluations.</return>
    </javadoc>
    <method type="int" name="getMaxEvaluations" startLine="59" endLine="61" />
    <javadoc>
      <text>* Gets the number of evaluations of the objective function.
 * The number of evaluations corresponds to the last call to the{@code optimize} method. It is 0 if the method has not been
 * called yet.</text>
      <return>the number of evaluations of the objective function.</return>
    </javadoc>
    <method type="int" name="getEvaluations" startLine="71" endLine="73" />
    <javadoc>
      <text>* Gets the maximal number of iterations.</text>
      <return>the maximal number of iterations.</return>
    </javadoc>
    <method type="int" name="getMaxIterations" startLine="80" endLine="82" />
    <javadoc>
      <text>* Gets the number of iterations performed by the algorithm.
 * The number iterations corresponds to the last call to the{@code optimize} method. It is 0 if the method has not been
 * called yet.</text>
      <return>the number of evaluations of the objective function.</return>
    </javadoc>
    <method type="int" name="getIterations" startLine="92" endLine="94" />
    <javadoc>
      <text>* Gets the convergence checker.</text>
      <return>the object used to check for convergence.</return>
    </javadoc>
    <method type="ConvergenceChecker<PAIR>" name="getConvergenceChecker" startLine="101" endLine="103" />
    <javadoc>
      <text>* Stores data and performs the optimization.
 * <br/>
 * The list of parameters is open-ended so that sub-classes can extend it
 * with arguments specific to their concrete implementations.
 * <br/>
 * When the method is called multiple times, instance data is overwritten
 * only when actually present in the list of arguments: when not specified,
 * data set in a previous call is retained (and thus is optional in
 * subsequent calls).
 * <br/>
 * Important note: Subclasses <em>must</em> override{@link #parseOptimizationData(OptimizationData[])} if they need to register
 * their own options; but then, they <em>must</em> also call{@code super.parseOptimizationData(optData)} within that method.</text>
      <param>optData Optimization data.
 * This method will register the following data:
 * <ul>
 * <li>{@link MaxEval}</li>
 * <li>{@link MaxIter}</li>
 * </ul></param>
      <return>a point/value pair that satifies the convergence criteria.</return>
      <throws>TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.</throws>
      <throws>TooManyIterationsException if the maximal number of
 * iterations is exceeded.</throws>
    </javadoc>
    <method type="PAIR" name="optimize" startLine="135" endLine="144">
      <comment>Parse options.</comment>
      <comment>Reset counters.</comment>
      <comment>Perform optimization.</comment>
    </method>
    <method name="doOptimize" type="PAIR" startLine="146" endLine="152" />
    <javadoc>
      <text>* Performs the bulk of the optimization algorithm.</text>
      <return>the point/value pair giving the optimal value of the
 * objective function.</return>
    </javadoc>
    <javadoc>
      <text>* Increment the evaluation count.</text>
      <throws>TooManyEvaluationsException if the allowed evaluations
 * have been exhausted.</throws>
    </javadoc>
    <method type="void" name="incrementEvaluationCount" startLine="161" endLine="163" />
    <javadoc>
      <text>* Increment the iteration count.</text>
      <throws>TooManyIterationsException if the allowed iterations
 * have been exhausted.</throws>
    </javadoc>
    <method type="void" name="incrementIterationCount" startLine="172" endLine="174" />
    <javadoc>
      <text>* Scans the list of (required and optional) optimization data that
 * characterize the problem.</text>
      <param>optData Optimization data.
 * The following data will be looked for:
 * <ul>
 * <li>{@link MaxEval}</li>
 * <li>{@link MaxIter}</li>
 * </ul></param>
    </javadoc>
    <method type="void" name="parseOptimizationData" startLine="187" endLine="200">
      <scope startLine="190" endLine="199">
        <scope startLine="191" endLine="194" />
        <scope startLine="195" endLine="198" />
      </scope>
      <comment>The existing values (as set by the previous call) are reused if</comment>
      <comment>not provided in the argument list.</comment>
    </method>
    <class name="MaxEvalCallback" startLine="202">
      <implements name="Incrementor.MaxCountExceededCallback" />
      <javadoc>
        <text>* Defines the action to perform when reaching the maximum number
 * of evaluations.</text>
      </javadoc>
      <javadoc>
        <text>* {@inheritDoc}</text>
        <throws>TooManyEvaluationsException.</throws>
      </javadoc>
      <method type="void" name="trigger" startLine="212" endLine="214" />
      <class name="MaxIterCallback" startLine="217">
        <implements name="Incrementor.MaxCountExceededCallback" />
        <javadoc>
          <text>* Defines the action to perform when reaching the maximum number
 * of evaluations.</text>
        </javadoc>
        <javadoc>
          <text>* {@inheritDoc}</text>
          <throws>TooManyIterationsException.</throws>
        </javadoc>
        <method type="void" name="trigger" startLine="227" endLine="229" />
      </class>
    </class>
  </class>
</source>
