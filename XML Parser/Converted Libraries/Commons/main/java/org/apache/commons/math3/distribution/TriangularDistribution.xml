<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution">
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.Well19937c" />
  <class name="TriangularDistribution" extends="AbstractRealDistribution" startLine="28">
    <javadoc>
      <text>* Implementation of the triangular real distribution.</text>
      <see><a href="http://en.wikipedia.org/wiki/Triangular_distribution">
 * Triangular distribution (Wikipedia)</a></see>
      <version>$Id: TriangularDistribution.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Lower limit of this distribution (inclusive).</text>
    </javadoc>
    <declaration type="double" name="a" />
    <javadoc>
      <text>* Upper limit of this distribution (inclusive).</text>
    </javadoc>
    <declaration type="double" name="b" />
    <javadoc>
      <text>* Mode of this distribution.</text>
    </javadoc>
    <declaration type="double" name="c" />
    <javadoc>
      <text>* Inverse cumulative probability accuracy.</text>
    </javadoc>
    <declaration type="double" name="solverAbsoluteAccuracy" />
    <javadoc>
      <text>* Creates a triangular real distribution using the given lower limit,
 * upper limit, and mode.</text>
      <param>a Lower limit of this distribution (inclusive).</param>
      <param>b Upper limit of this distribution (inclusive).</param>
      <param>c Mode of this distribution.</param>
      <throws>NumberIsTooLargeException if {@code a >= b} or if {@code c > b}.</throws>
      <throws>NumberIsTooSmallException if {@code c < a}.</throws>
    </javadoc>
    <method type="constructor" name="TriangularDistribution" startLine="60" endLine="62" />
    <javadoc>
      <text>* Creates a triangular distribution.</text>
      <param>rng Random number generator.</param>
      <param>a Lower limit of this distribution (inclusive).</param>
      <param>b Upper limit of this distribution (inclusive).</param>
      <param>c Mode of this distribution.</param>
      <throws>NumberIsTooLargeException if {@code a >= b} or if {@code c > b}.</throws>
      <throws>NumberIsTooSmallException if {@code c < a}.</throws>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="TriangularDistribution" startLine="79" endLine="100">
      <scope startLine="82" endLine="86" />
      <scope startLine="87" endLine="90" />
      <scope startLine="91" endLine="94" />
    </method>
    <javadoc>
      <text>* Returns the mode {@code c} of this distribution.</text>
      <return>the mode {@code c} of this distribution</return>
    </javadoc>
    <method type="double" name="getMode" startLine="107" endLine="109" />
    <javadoc>
      <text>* {@inheritDoc}<p>
 * For this distribution, the returned value is not really meaningful,
 * since exact formulas are implemented for the computation of the{@link #inverseCumulativeProbability(double)} (no solver is invoked).
 * </p>
 * <p>
 * For lower limit {@code a} and upper limit {@code b}, the current
 * implementation returns {@code max(ulp(a), ulp(b)}.
 * </p></text>
    </javadoc>
    <method type="double" name="getSolverAbsoluteAccuracy" startLine="125" endLine="127" />
    <javadoc>
      <text>* {@inheritDoc}For lower limit {@code a}, upper limit {@code b} and mode {@code c}, the
 * PDF is given by
 * <ul>
 * <li>{@code 2 * (x - a) / [(b - a) * (c - a)]} if {@code a <= x < c},</li>
 * <li>{@code 2 / (b - a)} if {@code x = c},</li>
 * <li>{@code 2 * (b - x) / [(b - a) * (b - c)]} if {@code c < x <= b},</li>
 * <li>{@code 0} otherwise.
 * </ul></text>
    </javadoc>
    <method type="double" name="density" startLine="141" endLine="159">
      <scope startLine="142" endLine="144" />
      <scope startLine="145" endLine="149">
        <declaration type="double" name="divident" />
        <declaration type="double" name="divisor" />
      </scope>
      <scope startLine="150" endLine="152" />
      <scope startLine="153" endLine="157">
        <declaration type="double" name="divident" />
        <declaration type="double" name="divisor" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}For lower limit {@code a}, upper limit {@code b} and mode {@code c}, the
 * CDF is given by
 * <ul>
 * <li>{@code 0} if {@code x < a},</li>
 * <li>{@code (x - a)^2 / [(b - a) * (c - a)]} if {@code a <= x < c},</li>
 * <li>{@code (c - a) / (b - a)} if {@code x = c},</li>
 * <li>{@code 1 - (b - x)^2 / [(b - a) * (b - c)]} if {@code c < x <= b},</li>
 * <li>{@code 1} if {@code x > b}.</li>
 * </ul></text>
    </javadoc>
    <method type="double" name="cumulativeProbability" startLine="174" endLine="192">
      <scope startLine="175" endLine="177" />
      <scope startLine="178" endLine="182">
        <declaration type="double" name="divident" />
        <declaration type="double" name="divisor" />
      </scope>
      <scope startLine="183" endLine="185" />
      <scope startLine="186" endLine="190">
        <declaration type="double" name="divident" />
        <declaration type="double" name="divisor" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}For lower limit {@code a}, upper limit {@code b}, and mode {@code c},
 * the mean is {@code (a + b + c) / 3}.</text>
    </javadoc>
    <method type="double" name="getNumericalMean" startLine="200" endLine="202" />
    <javadoc>
      <text>* {@inheritDoc}For lower limit {@code a}, upper limit {@code b}, and mode {@code c},
 * the variance is {@code (a^2 + b^2 + c^2 - a * b - a * c - b * c) / 18}.</text>
    </javadoc>
    <method type="double" name="getNumericalVariance" startLine="210" endLine="212" />
    <javadoc>
      <text>* {@inheritDoc}The lower bound of the support is equal to the lower limit parameter{@code a} of the distribution.</text>
      <return>lower bound of the support</return>
    </javadoc>
    <method type="double" name="getSupportLowerBound" startLine="222" endLine="224" />
    <javadoc>
      <text>* {@inheritDoc}The upper bound of the support is equal to the upper limit parameter{@code b} of the distribution.</text>
      <return>upper bound of the support</return>
    </javadoc>
    <method type="double" name="getSupportUpperBound" startLine="234" endLine="236" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isSupportLowerBoundInclusive" startLine="239" endLine="241" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isSupportUpperBoundInclusive" startLine="244" endLine="246" />
    <javadoc>
      <text>* {@inheritDoc}The support of this distribution is connected.</text>
      <return>{@code true}</return>
    </javadoc>
    <method type="boolean" name="isSupportConnected" startLine="255" endLine="257" />
    <method type="double" name="inverseCumulativeProbability" startLine="261" endLine="275">
      <scope startLine="262" endLine="264" />
      <scope startLine="265" endLine="267" />
      <scope startLine="268" endLine="270" />
      <scope startLine="271" endLine="273" />
    </method>
  </class>
</source>
