<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim">
  <import name="org.apache.commons.math3.exception.MathIllegalStateException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <import name="org.apache.commons.math3.random.RandomVectorGenerator" />
  <class name="BaseMultiStartMultivariateOptimizer" extends="BaseMultivariateOptimizer<PAIR>" startLine="24">
    <javadoc>
      <text>* Base class multi-start optimizer for a multivariate function.
 * <br/>
 * This class wraps an optimizer in order to use it several times in
 * turn with different starting points (trying to avoid being trapped
 * in a local extremum when looking for a global one).
 * <em>It is not a "user" class.</em></text>
      <param><PAIR>
 *  Type of the point/value pair returned by the optimization
 * algorithm.</param>
      <version>$Id: BaseMultiStartMultivariateOptimizer.java 1454746 2013-03-09 17:37:30Z luc $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Underlying classical optimizer.</text>
    </javadoc>
    <declaration type="BaseMultivariateOptimizer<PAIR>" name="optimizer" />
    <javadoc>
      <text>* Number of evaluations already performed for all starts.</text>
    </javadoc>
    <declaration type="int" name="totalEvaluations" />
    <javadoc>
      <text>* Number of starts to go.</text>
    </javadoc>
    <declaration type="int" name="starts" />
    <javadoc>
      <text>* Random generator for multi-start.</text>
    </javadoc>
    <declaration type="RandomVectorGenerator" name="generator" />
    <javadoc>
      <text>* Optimization data.</text>
    </javadoc>
    <declaration type="OptimizationData[]" name="optimData" />
    <javadoc>
      <text>* Location in {@link #optimData} where the updated maximum
 * number of evaluations will be stored.</text>
    </javadoc>
    <declaration type="int" name="maxEvalIndex" />
    <javadoc>
      <text>* Location in {@link #optimData} where the updated start value
 * will be stored.</text>
    </javadoc>
    <declaration type="int" name="initialGuessIndex" />
    <javadoc>
      <text>* Create a multi-start optimizer from a single-start optimizer.
 * <p>
 * Note that if there are bounds constraints (see {@link #getLowerBound()}and {@link #getUpperBound()}), then a simple rejection algorithm is used
 * at each restart. This implies that the random vector generator should have
 * a good probability to generate vectors in the bounded domain, otherwise the
 * rejection algorithm will hit the {@link #getMaxEvaluations()} count without
 * generating a proper restart point. Users must be take great care of the <a
 * href="http://en.wikipedia.org/wiki/Curse_of_dimensionality">curse of dimensionality</a>.
 * </p></text>
      <param>optimizer Single-start optimizer to wrap.</param>
      <param>starts Number of starts to perform. If {@code starts == 1},
 * the {@link #optimize(OptimizationData[]) optimize} will return the
 * same solution as the given {@code optimizer} would return.</param>
      <param>generator Random vector generator to use for restarts.</param>
      <throws>NotStrictlyPositiveException if {@code starts < 1}.</throws>
    </javadoc>
    <method type="constructor" name="BaseMultiStartMultivariateOptimizer" startLine="81" endLine="91">
      <scope startLine="84" endLine="86" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getEvaluations" startLine="95" endLine="97" />
    <method name="getOptima" type="PAIR[]" startLine="99" endLine="122" />
    <javadoc>
      <text>* Gets all the optima found during the last call to {@code optimize}.
 * The optimizer stores all the optima found during a set of
 * restarts. The {@code optimize} method returns the best point only.
 * This method returns all the points found at the end of each starts,
 * including the best one already returned by the {@code optimize} method.
 * <br/>
 * The returned array as one element for each start as specified
 * in the constructor. It is ordered with the results from the
 * runs that did converge first, sorted from best to worst
 * objective value (i.e in ascending order if minimizing and in
 * descending order if maximizing), followed by {@code null} elements
 * corresponding to the runs that did not converge. This means all
 * elements will be {@code null} if the {@code optimize} method did throw
 * an exception.
 * This also means that if the first element is not {@code null}, it is
 * the best point found across all starts.
 * <br/>
 * The behaviour is undefined if this method is called before{@code optimize}; it will likely throw {@code NullPointerException}.</text>
      <return>an array containing the optima sorted from best to worst.</return>
    </javadoc>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <throws>MathIllegalStateException if {@code optData} does not contain an
 * instance of {@link MaxEval} or {@link InitialGuess}.</throws>
    </javadoc>
    <method type="PAIR" name="optimize" startLine="131" endLine="136">
      <comment>Store arguments in order to pass them to the internal optimizer.</comment>
      <comment>Set up base class and perform computations.</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="PAIR" name="doOptimize" startLine="140" endLine="218">
      <scope startLine="146" endLine="156">
        <scope startLine="147" endLine="150" />
        <scope startLine="151" endLine="155" />
      </scope>
      <scope startLine="157" endLine="159" />
      <scope startLine="160" endLine="162" />
      <declaration type="RuntimeException" name="lastException" />
      <declaration type="int" name="maxEval" />
      <declaration type="double[]" name="min" />
      <declaration type="double[]" name="max" />
      <declaration type="double[]" name="startPoint" />
      <scope startLine="174" endLine="208">
        <scope startLine="176" endLine="202">
          <declaration type="double[]" name="s" />
          <scope startLine="181" endLine="183" />
          <scope startLine="183" endLine="197">
            <declaration type="int" name="attempts" />
            <scope startLine="185" endLine="196">
              <scope startLine="186" endLine="188" />
              <scope startLine="190" endLine="195">
                <scope startLine="191" endLine="194" />
              </scope>
            </scope>
          </scope>
          <declaration type="PAIR" name="result" />
        </scope>
        <scope startLine="202" endLine="204" />
        <comment>CHECKSTYLE: stop IllegalCatch</comment>
        <comment>Decrease number of allowed evaluations.</comment>
        <comment>New start value.</comment>
        <comment>reject the vector</comment>
        <comment>Optimize.</comment>
        <comment>CHECKSTYLE: resume IllegalCatch</comment>
      </scope>
      <declaration type="PAIR[]" name="optima" />
      <scope startLine="211" endLine="214">
        <comment>All runs failed.</comment>
        <comment>Cannot be null if starts >= 1.</comment>
      </scope>
      <comment>Remove all instances of "MaxEval" and "InitialGuess" from the</comment>
      <comment>array that will be passed to the internal optimizer.</comment>
      <comment>The former is to enforce smaller numbers of allowed evaluations</comment>
      <comment>(according to how many have been used up already), and the latter</comment>
      <comment>to impose a different start value for each start.</comment>
      <comment>Multi-start loop.</comment>
      <comment>Return the best optimum.</comment>
    </method>
    <method name="store" type="void" startLine="220" endLine="225" />
    <javadoc>
      <text>* Method that will be called in order to store each found optimum.</text>
      <param>optimum Result of an optimization run.</param>
    </javadoc>
    <method name="clear" type="void" startLine="226" endLine="229" />
    <javadoc>
      <text>* Method that will called in order to clear all stored optima.</text>
    </javadoc>
  </class>
</source>
