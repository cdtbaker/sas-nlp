<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.exception.NotPositiveException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.OpenIntToDoubleHashMap" />
  <import name="org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator" />
  <class name="OpenMapRealVector" extends="SparseRealVector" startLine="30">
    <implements name="Serializable" />
    <javadoc>
      <text>* This class implements the {@link RealVector} interface with a{@link OpenIntToDoubleHashMap} backing store.</text>
      <version>$Id: OpenMapRealVector.java 1462503 2013-03-29 15:48:27Z luc $</version>
      <since>2.0</since>
      <deprecated>As of version 3.1, this class is deprecated, for reasons exposed
 * in this JIRA
 * <a href="https://issues.apache.org/jira/browse/MATH-870">ticket</a>. This
 * class will be removed in version 4.0.</deprecated>
    </javadoc>
    <javadoc>
      <text>* Default Tolerance for having a value considered zero.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_ZERO_TOLERANCE" />
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Entries of the vector.</text>
    </javadoc>
    <declaration type="OpenIntToDoubleHashMap" name="entries" />
    <javadoc>
      <text>* Dimension of the vector.</text>
    </javadoc>
    <declaration type="int" name="virtualSize" />
    <javadoc>
      <text>* Tolerance for having a value considered zero.</text>
    </javadoc>
    <declaration type="double" name="epsilon" />
    <javadoc>
      <text>* Build a 0-length vector.
 * Zero-length vectors may be used to initialized construction of vectors
 * by data gathering. We start with zero-length and use either the {@link #OpenMapRealVector(OpenMapRealVector,int)} constructor
 * or one of the {@code append} method ({@link #append(double)},{@link #append(RealVector)}) to gather data into this vector.</text>
    </javadoc>
    <method type="constructor" name="OpenMapRealVector" startLine="62" endLine="64" />
    <javadoc>
      <text>* Construct a vector of zeroes.</text>
      <param>dimension Size of the vector.</param>
    </javadoc>
    <method type="constructor" name="OpenMapRealVector" startLine="71" endLine="73" />
    <javadoc>
      <text>* Construct a vector of zeroes, specifying zero tolerance.</text>
      <param>dimension Size of the vector.</param>
      <param>epsilon Tolerance below which a value considered zero.</param>
    </javadoc>
    <method type="constructor" name="OpenMapRealVector" startLine="81" endLine="85" />
    <javadoc>
      <text>* Build a resized vector, for use with append.</text>
      <param>v Original vector.</param>
      <param>resize Amount to add.</param>
    </javadoc>
    <method type="constructor" name="OpenMapRealVector" startLine="93" endLine="97" />
    <javadoc>
      <text>* Build a vector with known the sparseness (for advanced use only).</text>
      <param>dimension Size of the vector.</param>
      <param>expectedSize The expected number of non-zero entries.</param>
    </javadoc>
    <method type="constructor" name="OpenMapRealVector" startLine="105" endLine="107" />
    <javadoc>
      <text>* Build a vector with known the sparseness and zero tolerance
 * setting (for advanced use only).</text>
      <param>dimension Size of the vector.</param>
      <param>expectedSize Expected number of non-zero entries.</param>
      <param>epsilon Tolerance below which a value is considered zero.</param>
    </javadoc>
    <method type="constructor" name="OpenMapRealVector" startLine="117" endLine="121" />
    <javadoc>
      <text>* Create from an array.
 * Only non-zero entries will be stored.</text>
      <param>values Set of values to create from.</param>
    </javadoc>
    <method type="constructor" name="OpenMapRealVector" startLine="129" endLine="131" />
    <javadoc>
      <text>* Create from an array, specifying zero tolerance.
 * Only non-zero entries will be stored.</text>
      <param>values Set of values to create from.</param>
      <param>epsilon Tolerance below which a value is considered zero.</param>
    </javadoc>
    <method type="constructor" name="OpenMapRealVector" startLine="140" endLine="150">
      <scope startLine="144" endLine="149">
        <declaration type="double" name="value" />
        <scope startLine="146" endLine="148" />
      </scope>
    </method>
    <javadoc>
      <text>* Create from an array.
 * Only non-zero entries will be stored.</text>
      <param>values The set of values to create from</param>
    </javadoc>
    <method type="constructor" name="OpenMapRealVector" startLine="158" endLine="160" />
    <javadoc>
      <text>* Create from an array.
 * Only non-zero entries will be stored.</text>
      <param>values Set of values to create from.</param>
      <param>epsilon Tolerance below which a value is considered zero.</param>
    </javadoc>
    <method type="constructor" name="OpenMapRealVector" startLine="169" endLine="179">
      <scope startLine="173" endLine="178">
        <declaration type="double" name="value" />
        <scope startLine="175" endLine="177" />
      </scope>
    </method>
    <javadoc>
      <text>* Copy constructor.</text>
      <param>v Instance to copy from.</param>
    </javadoc>
    <method type="constructor" name="OpenMapRealVector" startLine="186" endLine="190" />
    <javadoc>
      <text>* Generic copy constructor.</text>
      <param>v Instance to copy from.</param>
    </javadoc>
    <method type="constructor" name="OpenMapRealVector" startLine="197" endLine="207">
      <scope startLine="201" endLine="206">
        <declaration type="double" name="value" />
        <scope startLine="203" endLine="205" />
      </scope>
    </method>
    <javadoc>
      <text>* Get the entries of this instance.</text>
      <return>the entries of this instance.</return>
    </javadoc>
    <method type="OpenIntToDoubleHashMap" name="getEntries" startLine="214" endLine="216" />
    <javadoc>
      <text>* Determine if this value is within epsilon of zero.</text>
      <param>value Value to test</param>
      <return>{@code true} if this value is within epsilon to zero,{@code false} otherwise.</return>
      <since>2.1</since>
    </javadoc>
    <method type="boolean" name="isDefaultValue" startLine="226" endLine="228" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="RealVector" name="add" startLine="233" endLine="240">
      <scope startLine="235" endLine="237" />
      <scope startLine="237" endLine="239" />
    </method>
    <javadoc>
      <text>* Optimized method to add two OpenMapRealVectors.
 * It copies the larger vector, then iterates over the smaller.</text>
      <param>v Vector to add.</param>
      <return>the sum of {@code this} and {@code v}.</return>
      <throws>DimensionMismatchException if the dimensions do not match.</throws>
    </javadoc>
    <method type="OpenMapRealVector" name="add" startLine="251" endLine="267">
      <declaration type="boolean" name="copyThis" />
      <declaration type="OpenMapRealVector" name="res" />
      <declaration type="Iterator" name="iter" />
      <declaration type="OpenIntToDoubleHashMap" name="randomAccess" />
      <scope startLine="257" endLine="265">
        <declaration type="int" name="key" />
        <scope startLine="260" endLine="262" />
        <scope startLine="262" endLine="264" />
      </scope>
    </method>
    <javadoc>
      <text>* Optimized method to append a OpenMapRealVector.</text>
      <param>v vector to append</param>
      <return>The result of appending {@code v} to self</return>
    </javadoc>
    <method type="OpenMapRealVector" name="append" startLine="274" endLine="282">
      <declaration type="OpenMapRealVector" name="res" />
      <declaration type="Iterator" name="iter" />
      <scope startLine="277" endLine="280" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="OpenMapRealVector" name="append" startLine="286" endLine="296">
      <scope startLine="287" endLine="289" />
      <scope startLine="289" endLine="295">
        <declaration type="OpenMapRealVector" name="res" />
        <scope startLine="291" endLine="293" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="OpenMapRealVector" name="append" startLine="300" endLine="304">
      <declaration type="OpenMapRealVector" name="res" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>2.1</since>
    </javadoc>
    <method type="OpenMapRealVector" name="copy" startLine="311" endLine="313" />
    <javadoc>
      <text>* Computes the dot product.
 * Note that the computation is now performed in the parent class: no
 * performance improvement is to be expected from this overloaded
 * method.
 * The previous implementation was buggy and cannot be easily fixed
 * (see MATH-795).</text>
      <param>v Vector.</param>
      <return>the dot product of this vector with {@code v}.</return>
      <throws>DimensionMismatchException if {@code v} is not the same size as{@code this} vector.</throws>
      <deprecated>as of 3.1 (to be removed in 4.0). The computation is
 * performed by the parent class. The method must be kept to maintain
 * backwards compatibility.</deprecated>
    </javadoc>
    <method type="double" name="dotProduct" startLine="334" endLine="336" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="OpenMapRealVector" name="ebeDivide" startLine="341" endLine="354">
      <declaration type="OpenMapRealVector" name="res" />
      <declaration type="int" name="n" />
      <scope startLine="350" endLine="352" />
      <comment>MATH-803: it is not sufficient to loop through non zero entries of
 this only. Indeed, if this[i] = 0d and v[i] = 0d, then
 this[i]  v[i] = NaN, and not 0d.</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="OpenMapRealVector" name="ebeMultiply" startLine="359" endLine="387">
      <declaration type="OpenMapRealVector" name="res" />
      <declaration type="Iterator" name="iter" />
      <scope startLine="363" endLine="366" />
      <scope startLine="374" endLine="385">
        <declaration type="int" name="n" />
        <scope startLine="376" endLine="384">
          <declaration type="double" name="y" />
          <scope startLine="378" endLine="380" />
          <scope startLine="380" endLine="383">
            <declaration type="double" name="x" />
          </scope>
        </scope>
      </scope>
      <comment>MATH-803: the above loop assumes that 0d  x  = 0d for any double x,
 which allows to consider only the non-zero entries of this. However,
 this fails if this[i] == 0d and (v[i] = NaN or v[i] = Infinity).

 These special cases are handled below.</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="OpenMapRealVector" name="getSubVector" startLine="392" endLine="409">
      <scope startLine="394" endLine="396" />
      <declaration type="OpenMapRealVector" name="res" />
      <declaration type="int" name="end" />
      <declaration type="Iterator" name="iter" />
      <scope startLine="401" endLine="407">
        <declaration type="int" name="key" />
        <scope startLine="404" endLine="406" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getDimension" startLine="413" endLine="415" />
    <javadoc>
      <text>* Optimized method to compute distance.</text>
      <param>v Vector to compute distance to.</param>
      <return>the distance from {@code this} and {@code v}.</return>
      <throws>DimensionMismatchException if the dimensions do not match.</throws>
    </javadoc>
    <method type="double" name="getDistance" startLine="425" endLine="446">
      <declaration type="Iterator" name="iter" />
      <declaration type="double" name="res" />
      <scope startLine="429" endLine="435">
        <declaration type="int" name="key" />
        <declaration type="double" name="delta" />
      </scope>
      <scope startLine="437" endLine="444">
        <declaration type="int" name="key" />
        <scope startLine="440" endLine="443">
          <declaration type="double" name="value" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getDistance" startLine="450" endLine="457">
      <scope startLine="452" endLine="454" />
      <scope startLine="454" endLine="456" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getEntry" startLine="461" endLine="464" />
    <javadoc>
      <text>* Distance between two vectors.
 * This method computes the distance consistent with
 * L<sub>1</sub> norm, i.e. the sum of the absolute values of
 * elements differences.</text>
      <param>v Vector to which distance is requested.</param>
      <return>distance between this vector and {@code v}.</return>
      <throws>DimensionMismatchException if the dimensions do not match.</throws>
    </javadoc>
    <method type="double" name="getL1Distance" startLine="477" endLine="496">
      <declaration type="double" name="max" />
      <declaration type="Iterator" name="iter" />
      <scope startLine="481" endLine="485">
        <declaration type="double" name="delta" />
      </scope>
      <scope startLine="487" endLine="494">
        <declaration type="int" name="key" />
        <scope startLine="490" endLine="493">
          <declaration type="double" name="delta" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getL1Distance" startLine="501" endLine="508">
      <scope startLine="503" endLine="505" />
      <scope startLine="505" endLine="507" />
    </method>
    <javadoc>
      <text>* Optimized method to compute LInfDistance.</text>
      <param>v Vector to compute distance from.</param>
      <return>the LInfDistance.</return>
      <throws>DimensionMismatchException if the dimensions do not match.</throws>
    </javadoc>
    <method type="double" name="getLInfDistance" startLine="518" endLine="538">
      <declaration type="double" name="max" />
      <declaration type="Iterator" name="iter" />
      <scope startLine="522" endLine="528">
        <declaration type="double" name="delta" />
        <scope startLine="525" endLine="527" />
      </scope>
      <scope startLine="530" endLine="536">
        <declaration type="int" name="key" />
        <scope startLine="533" endLine="535" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getLInfDistance" startLine="543" endLine="550">
      <scope startLine="545" endLine="547" />
      <scope startLine="547" endLine="549" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isInfinite" startLine="554" endLine="568">
      <declaration type="boolean" name="infiniteFound" />
      <declaration type="Iterator" name="iter" />
      <scope startLine="557" endLine="566">
        <declaration type="double" name="value" />
        <scope startLine="560" endLine="562" />
        <scope startLine="563" endLine="565" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isNaN" startLine="572" endLine="581">
      <declaration type="Iterator" name="iter" />
      <scope startLine="574" endLine="579">
        <scope startLine="576" endLine="578" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="OpenMapRealVector" name="mapAdd" startLine="585" endLine="587" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="OpenMapRealVector" name="mapAddToSelf" startLine="591" endLine="596">
      <scope startLine="592" endLine="594" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setEntry" startLine="601" endLine="608">
      <scope startLine="603" endLine="605" />
      <scope startLine="605" endLine="607" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setSubVector" startLine="613" endLine="619">
      <scope startLine="616" endLine="618" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="set" startLine="623" endLine="627">
      <scope startLine="624" endLine="626" />
    </method>
    <javadoc>
      <text>* Optimized method to subtract OpenMapRealVectors.</text>
      <param>v Vector to subtract from {@code this}.</param>
      <return>the difference of {@code this} and {@code v}.</return>
      <throws>DimensionMismatchException if the dimensions do not match.</throws>
    </javadoc>
    <method type="OpenMapRealVector" name="subtract" startLine="637" endLine="651">
      <declaration type="OpenMapRealVector" name="res" />
      <declaration type="Iterator" name="iter" />
      <scope startLine="641" endLine="649">
        <declaration type="int" name="key" />
        <scope startLine="644" endLine="646" />
        <scope startLine="646" endLine="648" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="RealVector" name="subtract" startLine="656" endLine="663">
      <scope startLine="658" endLine="660" />
      <scope startLine="660" endLine="662" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="OpenMapRealVector" name="unitVector" startLine="667" endLine="671">
      <declaration type="OpenMapRealVector" name="res" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="unitize" startLine="675" endLine="685">
      <declaration type="double" name="norm" />
      <scope startLine="677" endLine="679" />
      <declaration type="Iterator" name="iter" />
      <scope startLine="681" endLine="684" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double[]" name="toArray" startLine="689" endLine="697">
      <declaration type="double[]" name="res" />
      <declaration type="Iterator" name="iter" />
      <scope startLine="692" endLine="695" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}Implementation Note: This works on exact values, and as a result
 * it is possible for {@code a.subtract(b)} to be the zero vector, while{@code a.hashCode() != b.hashCode()}.</text>
    </javadoc>
    <method type="int" name="hashCode" startLine="706" endLine="720">
      <declaration type="int" name="prime" />
      <declaration type="int" name="result" />
      <declaration type="long" name="temp" />
      <declaration type="Iterator" name="iter" />
      <scope startLine="714" endLine="718" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}Implementation Note: This performs an exact comparison, and as a result
 * it is possible for {@code a.subtract(b}} to be the zero vector, while{@code  a.equals(b) == false}.</text>
    </javadoc>
    <method type="boolean" name="equals" startLine="729" endLine="761">
      <scope startLine="730" endLine="732" />
      <scope startLine="733" endLine="735" />
      <declaration type="OpenMapRealVector" name="other" />
      <scope startLine="737" endLine="739" />
      <scope startLine="741" endLine="743" />
      <declaration type="Iterator" name="iter" />
      <scope startLine="745" endLine="751">
        <declaration type="double" name="test" />
        <scope startLine="748" endLine="750" />
      </scope>
      <scope startLine="753" endLine="759">
        <declaration type="double" name="test" />
        <scope startLine="756" endLine="758" />
      </scope>
    </method>
    <javadoc>
      <return>the percentage of none zero elements as a decimal percent.</return>
      <since>2.2</since>
    </javadoc>
    <method type="double" name="getSparsity" startLine="768" endLine="770" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="java.util.Iterator<Entry>" name="sparseIterator" startLine="774" endLine="776" />
    <class name="OpenMapEntry" extends="Entry" startLine="778">
      <javadoc>
        <text>* Implementation of {@code Entry} optimized for OpenMap.
 * This implementation does not allow arbitrary calls to {@code setIndex}since the order in which entries are returned is undefined.</text>
      </javadoc>
      <javadoc>
        <text>* Iterator pointing to the entry.</text>
      </javadoc>
      <declaration type="Iterator" name="iter" />
      <javadoc>
        <text>* Build an entry from an iterator point to an element.</text>
        <param>iter Iterator pointing to the entry.</param>
      </javadoc>
      <method type="constructor" name="OpenMapEntry" startLine="792" endLine="794" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="getValue" startLine="798" endLine="800" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="void" name="setValue" startLine="804" endLine="806" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="int" name="getIndex" startLine="810" endLine="812" />
      <class name="OpenMapSparseIterator" startLine="816">
        <implements name="java.util.Iterator<Entry>" />
        <javadoc>
          <text>* Iterator class to do iteration over just the non-zero elements.
 * This implementation is fail-fast, so cannot be used to modify
 * any zero element.</text>
        </javadoc>
        <javadoc>
          <text>* Underlying iterator.</text>
        </javadoc>
        <declaration type="Iterator" name="iter" />
        <javadoc>
          <text>* Current entry.</text>
        </javadoc>
        <declaration type="Entry" name="current" />
        <javadoc>
          <text>* Simple constructor.</text>
        </javadoc>
        <method type="constructor" name="OpenMapSparseIterator" startLine="828" endLine="831" />
        <javadoc>
          <text>* {@inheritDoc}</text>
        </javadoc>
        <method type="boolean" name="hasNext" startLine="834" endLine="836" />
        <javadoc>
          <text>* {@inheritDoc}</text>
        </javadoc>
        <method type="Entry" name="next" startLine="839" endLine="842" />
        <javadoc>
          <text>* {@inheritDoc}</text>
        </javadoc>
        <method type="void" name="remove" startLine="845" endLine="847" />
      </class>
    </class>
  </class>
</source>
