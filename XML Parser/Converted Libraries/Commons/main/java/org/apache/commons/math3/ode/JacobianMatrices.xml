<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.ode">
  <import name="java.lang.reflect.Array" />
  <import name="java.util.ArrayList" />
  <import name="java.util.Arrays" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <class name="JacobianMatrices" startLine="29">
    <javadoc>
      <text>* This class defines a set of {@link SecondaryEquations secondary equations} to
 * compute the Jacobian matrices with respect to the initial state vector and, if
 * any, to some parameters of the primary ODE set.
 * <p>
 * It is intended to be packed into an {@link ExpandableStatefulODE}in conjunction with a primary set of ODE, which may be:
 * <ul>
 * <li>a {@link FirstOrderDifferentialEquations}</li>
 * <li>a {@link MainStateJacobianProvider}</li>
 * </ul>
 * In order to compute Jacobian matrices with respect to some parameters of the
 * primary ODE set, the following parameter Jacobian providers may be set:
 * <ul>
 * <li>a {@link ParameterJacobianProvider}</li>
 * <li>a {@link ParameterizedODE}</li>
 * </ul>
 * </p></text>
      <see>ExpandableStatefulODE</see>
      <see>FirstOrderDifferentialEquations</see>
      <see>MainStateJacobianProvider</see>
      <see>ParameterJacobianProvider</see>
      <see>ParameterizedODE</see>
      <version>$Id: JacobianMatrices.java 1422447 2012-12-16 01:38:40Z psteitz $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Expandable first order differential equation.</text>
    </javadoc>
    <declaration type="ExpandableStatefulODE" name="efode" />
    <javadoc>
      <text>* Index of the instance in the expandable set.</text>
    </javadoc>
    <declaration type="int" name="index" />
    <javadoc>
      <text>* FODE with exact primary Jacobian computation skill.</text>
    </javadoc>
    <declaration type="MainStateJacobianProvider" name="jode" />
    <javadoc>
      <text>* FODE without exact parameter Jacobian computation skill.</text>
    </javadoc>
    <declaration type="ParameterizedODE" name="pode" />
    <javadoc>
      <text>* Main state vector dimension.</text>
    </javadoc>
    <declaration type="int" name="stateDim" />
    <javadoc>
      <text>* Selected parameters for parameter Jacobian computation.</text>
    </javadoc>
    <declaration type="ParameterConfiguration[]" name="selectedParameters" />
    <javadoc>
      <text>* FODE with exact parameter Jacobian computation skill.</text>
    </javadoc>
    <declaration type="List<ParameterJacobianProvider>" name="jacobianProviders" />
    <javadoc>
      <text>* Parameters dimension.</text>
    </javadoc>
    <declaration type="int" name="paramDim" />
    <javadoc>
      <text>* Boolean for selected parameters consistency.</text>
    </javadoc>
    <declaration type="boolean" name="dirtyParameter" />
    <javadoc>
      <text>* State and parameters Jacobian matrices in a row.</text>
    </javadoc>
    <declaration type="double[]" name="matricesData" />
    <javadoc>
      <text>* Simple constructor for a secondary equations set computing Jacobian matrices.
 * <p>
 * Parameters must belong to the supported ones given by {@link Parameterizable#getParametersNames()}, so the primary set of differential
 * equations must be {@link Parameterizable}.
 * </p>
 * <p>Note that each selection clears the previous selected parameters.</p></text>
      <param>fode the primary first order differential equations set to extend</param>
      <param>hY step used for finite difference computation with respect to state vector</param>
      <param>parameters parameters to consider for Jacobian matrices processing
 * (may be null if parameters Jacobians is not desired)</param>
      <exception>DimensionMismatchException if there is a dimension mismatch between
 * the steps array {@code hY} and the equation dimension</exception>
    </javadoc>
    <method type="constructor" name="JacobianMatrices" startLine="106" endLine="108" />
    <javadoc>
      <text>* Simple constructor for a secondary equations set computing Jacobian matrices.
 * <p>
 * Parameters must belong to the supported ones given by {@link Parameterizable#getParametersNames()}, so the primary set of differential
 * equations must be {@link Parameterizable}.
 * </p>
 * <p>Note that each selection clears the previous selected parameters.</p></text>
      <param>jode the primary first order differential equations set to extend</param>
      <param>parameters parameters to consider for Jacobian matrices processing
 * (may be null if parameters Jacobians is not desired)</param>
    </javadoc>
    <method type="constructor" name="JacobianMatrices" startLine="123" endLine="154">
      <scope startLine="133" endLine="136" />
      <scope startLine="136" endLine="142">
        <scope startLine="138" endLine="140" />
      </scope>
      <scope startLine="150" endLine="152" />
      <comment>set the default initial state Jacobian to the identity</comment>
      <comment>and the default initial parameters Jacobian to the null matrix</comment>
    </method>
    <javadoc>
      <text>* Register the variational equations for the Jacobians matrices to the expandable set.</text>
      <param>expandable expandable set into which variational equations should be registered</param>
      <throws>DimensionMismatchException if the dimension of the partial state does not
 * match the selected equations set dimension</throws>
      <exception>MismatchedEquations if the primary set of the expandable set does
 * not match the one used to build the instance</exception>
      <see>ExpandableStatefulODE#addSecondaryEquations(SecondaryEquations)</see>
    </javadoc>
    <method type="void" name="registerVariationalEquations" startLine="165" endLine="179">
      <declaration type="FirstOrderDifferentialEquations" name="ode" />
      <scope startLine="171" endLine="173" />
      <comment>safety checks</comment>
    </method>
    <javadoc>
      <text>* Add a parameter Jacobian provider.</text>
      <param>provider the parameter Jacobian provider to compute exactly the parameter Jacobian matrix</param>
    </javadoc>
    <method type="void" name="addParameterJacobianProvider" startLine="184" endLine="186" />
    <javadoc>
      <text>* Set a parameter Jacobian provider.</text>
      <param>parameterizedOde the parameterized ODE to compute the parameter Jacobian matrix using finite differences</param>
    </javadoc>
    <method type="void" name="setParameterizedODE" startLine="191" endLine="194" />
    <javadoc>
      <text>* Set the step associated to a parameter in order to compute by finite
 * difference the Jacobian matrix.
 * <p>
 * Needed if and only if the primary ODE set is a {@link ParameterizedODE}.
 * </p>
 * <p>
 * Given a non zero parameter value pval for the parameter, a reasonable value
 * for such a step is {@code pval * FastMath.sqrt(Precision.EPSILON)}.
 * </p>
 * <p>
 * A zero value for such a step doesn't enable to compute the parameter Jacobian matrix.
 * </p></text>
      <param>parameter parameter to consider for Jacobian processing</param>
      <param>hP step for Jacobian finite difference computation w.r.t. the specified parameter</param>
      <see>ParameterizedODE</see>
      <exception>UnknownParameterException if the parameter is not supported</exception>
    </javadoc>
    <method type="void" name="setParameterStep" startLine="214" endLine="226">
      <scope startLine="216" endLine="222">
        <scope startLine="217" endLine="221" />
      </scope>
    </method>
    <javadoc>
      <text>* Set the initial value of the Jacobian matrix with respect to state.
 * <p>
 * If this method is not called, the initial value of the Jacobian
 * matrix with respect to state is set to identity.
 * </p></text>
      <param>dYdY0 initial Jacobian matrix w.r.t. state</param>
      <exception>DimensionMismatchException if matrix dimensions are incorrect</exception>
    </javadoc>
    <method type="void" name="setInitialMainStateJacobian" startLine="237" endLine="254">
      <declaration type="int" name="i" />
      <scope startLine="245" endLine="248" />
      <scope startLine="250" endLine="252" />
      <comment>Check dimensions</comment>
      <comment>store the matrix in row major order as a single dimension array</comment>
    </method>
    <javadoc>
      <text>* Set the initial value of a column of the Jacobian matrix with respect to one parameter.
 * <p>
 * If this method is not called for some parameter, the initial value of
 * the column of the Jacobian matrix with respect to this parameter is set to zero.
 * </p></text>
      <param>pName parameter name</param>
      <param>dYdP initial Jacobian column vector with respect to the parameter</param>
      <exception>UnknownParameterException if a parameter is not supported</exception>
      <throws>DimensionMismatchException if the column vector does not match state dimension</throws>
    </javadoc>
    <method type="void" name="setInitialParameterJacobian" startLine="267" endLine="287">
      <declaration type="int" name="i" />
      <scope startLine="274" endLine="283">
        <scope startLine="275" endLine="281">
          <scope startLine="277" endLine="279" />
        </scope>
      </scope>
      <comment>Check dimensions</comment>
      <comment>store the column in a global single dimension array</comment>
    </method>
    <javadoc>
      <text>* Get the current value of the Jacobian matrix with respect to state.</text>
      <param>dYdY0 current Jacobian matrix with respect to state.</param>
    </javadoc>
    <method type="void" name="getCurrentMainSetJacobian" startLine="292" endLine="303">
      <declaration type="double[]" name="p" />
      <declaration type="int" name="j" />
      <scope startLine="298" endLine="301" />
      <comment>get current state for this set of equations from the expandable fode</comment>
    </method>
    <javadoc>
      <text>* Get the current value of the Jacobian matrix with respect to one parameter.</text>
      <param>pName name of the parameter for the computed Jacobian matrix</param>
      <param>dYdP current Jacobian matrix with respect to the named parameter</param>
    </javadoc>
    <method type="void" name="getCurrentParameterJacobian" startLine="309" endLine="323">
      <declaration type="double[]" name="p" />
      <declaration type="int" name="i" />
      <scope startLine="315" endLine="321">
        <scope startLine="316" endLine="319" />
      </scope>
      <comment>get current state for this set of equations from the expandable fode</comment>
    </method>
    <javadoc>
      <text>* Check array dimensions.</text>
      <param>expected expected dimension</param>
      <param>array (may be null if expected is 0)</param>
      <throws>DimensionMismatchException if the array dimension does not match the expected one</throws>
    </javadoc>
    <method type="void" name="checkDimension" startLine="331" endLine="336">
      <declaration type="int" name="arrayDimension" />
      <scope startLine="333" endLine="335" />
    </method>
    <class name="JacobiansSecondaryEquations" startLine="338">
      <implements name="SecondaryEquations" />
      <javadoc>
        <text>* Local implementation of secondary equations.
 * <p>
 * This class is an inner class to ensure proper scheduling of calls
 * by forcing the use of {@link JacobianMatrices#registerVariationalEquations(ExpandableStatefulODE)}.
 * </p></text>
      </javadoc>
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="int" name="getDimension" startLine="347" endLine="349" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="void" name="computeDerivatives" startLine="354" endLine="415">
        <scope startLine="357" endLine="360" />
        <declaration type="double[][]" name="dFdY" />
        <scope startLine="370" endLine="382">
          <declaration type="double[]" name="dFdYi" />
          <scope startLine="372" endLine="381">
            <declaration type="double" name="s" />
            <declaration type="int" name="startIndex" />
            <declaration type="int" name="zIndex" />
            <scope startLine="376" endLine="379" />
          </scope>
        </scope>
        <scope startLine="384" endLine="413">
          <declaration type="double[]" name="dFdP" />
          <declaration type="int" name="startIndex" />
          <scope startLine="388" endLine="412">
            <declaration type="boolean" name="found" />
            <scope startLine="390" endLine="407">
              <declaration type="ParameterJacobianProvider" name="provider" />
              <scope startLine="392" endLine="406">
                <scope startLine="395" endLine="404">
                  <declaration type="double[]" name="dFdYi" />
                  <declaration type="int" name="zIndex" />
                  <declaration type="double" name="s" />
                  <scope startLine="399" endLine="402" />
                </scope>
              </scope>
            </scope>
            <scope startLine="408" endLine="410" />
          </scope>
          <comment>compute Jacobian matrices with respect to parameters</comment>
        </scope>
        <comment>Lazy initialization</comment>
        <comment>variational equations:</comment>
        <comment>from d[dy/dt]/dy0 and d[dy/dt]/dp to d[dy/dy0]/dt and d[dy/dp]/dt</comment>
        <comment>compute Jacobian matrix with respect to primary state</comment>
        <comment>Dispatch Jacobian matrix in the compound secondary state vector</comment>
      </method>
      <class name="MainStateJacobianWrapper" startLine="418">
        <implements name="MainStateJacobianProvider" />
        <javadoc>
          <text>* Wrapper class to compute jacobian matrices by finite differences for ODE
 * which do not compute them by themselves.</text>
        </javadoc>
        <javadoc>
          <text>* Raw ODE without jacobians computation skill to be wrapped into a MainStateJacobianProvider.</text>
        </javadoc>
        <declaration type="FirstOrderDifferentialEquations" name="ode" />
        <javadoc>
          <text>* Steps for finite difference computation of the jacobian df/dy w.r.t. state.</text>
        </javadoc>
        <declaration type="double[]" name="hY" />
        <javadoc>
          <text>* Wrap a {@link FirstOrderDifferentialEquations} into a {@link MainStateJacobianProvider}.</text>
          <param>ode original ODE problem, without jacobians computation skill</param>
          <param>hY step sizes to compute the jacobian df/dy</param>
          <see>JacobianMatrices#setMainStateSteps(double[])</see>
          <exception>DimensionMismatchException if there is a dimension mismatch between
 * the steps array {@code hY} and the equation dimension</exception>
        </javadoc>
        <method type="constructor" name="MainStateJacobianWrapper" startLine="438" endLine="444">
          <scope startLine="441" endLine="443" />
        </method>
        <javadoc>
          <text>* {@inheritDoc}</text>
        </javadoc>
        <method type="int" name="getDimension" startLine="447" endLine="449" />
        <javadoc>
          <text>* {@inheritDoc}</text>
        </javadoc>
        <method type="void" name="computeDerivatives" startLine="453" endLine="455" />
        <javadoc>
          <text>* {@inheritDoc}</text>
        </javadoc>
        <method type="void" name="computeMainStateJacobian" startLine="459" endLine="473">
          <declaration type="int" name="n" />
          <declaration type="double[]" name="tmpDot" />
          <scope startLine="464" endLine="472">
            <declaration type="double" name="savedYj" />
            <scope startLine="468" endLine="470" />
          </scope>
        </method>
        <class name="MismatchedEquations" extends="MathIllegalArgumentException" startLine="477">
          <javadoc>
            <text>* Special exception for equations mismatch.</text>
            <since>3.1</since>
          </javadoc>
          <javadoc>
            <text>* Serializable UID.</text>
          </javadoc>
          <declaration type="long" name="serialVersionUID" />
          <javadoc>
            <text>* Simple constructor.</text>
          </javadoc>
          <method type="constructor" name="MismatchedEquations" startLine="487" endLine="489" />
        </class>
      </class>
    </class>
  </class>
</source>
