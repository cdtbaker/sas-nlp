<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.geometry.partitioning">
  <import name="org.apache.commons.math3.geometry.Vector" />
  <import name="org.apache.commons.math3.geometry.Space" />
  <interface name="Hyperplane" startLine="22">
    <javadoc>
      <text>* This interface represents an hyperplane of a space.
 * <p>The most prominent place where hyperplane appears in space
 * partitioning is as cutters. Each partitioning node in a {@link BSPTree BSP tree} has a cut {@link SubHyperplane sub-hyperplane}which is either an hyperplane or a part of an hyperplane. In an
 * n-dimensions euclidean space, an hyperplane is an (n-1)-dimensions
 * hyperplane (for example a traditional plane in the 3D euclidean
 * space). They can be more exotic objects in specific fields, for
 * example a circle on the surface of the unit sphere.</p></text>
      <param><S>
 *  Type of the space.</param>
      <version>$Id: Hyperplane.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <method name="copySelf" type="Hyperplane<S>" startLine="40" endLine="46" />
    <javadoc>
      <text>* Copy the instance.
 * <p>The instance created is completely independant of the original
 * one. A deep copy is used, none of the underlying objects are
 * shared (except for immutable objects).</p></text>
      <return>a new hyperplane, copy of the instance</return>
    </javadoc>
    <method name="getOffset" type="double" startLine="48" endLine="56" />
    <javadoc>
      <text>* Get the offset (oriented distance) of a point.
 * <p>The offset is 0 if the point is on the underlying hyperplane,
 * it is positive if the point is on one particular side of the
 * hyperplane, and it is negative if the point is on the other side,
 * according to the hyperplane natural orientation.</p></text>
      <param>point point to check</param>
      <return>offset of the point</return>
    </javadoc>
    <method name="sameOrientationAs" type="boolean" startLine="58" endLine="67" />
    <javadoc>
      <text>* Check if the instance has the same orientation as another hyperplane.
 * <p>This method is expected to be called on parallel hyperplanes. The
 * method should <em>not</em> re-check for parallelism, only for
 * orientation, typically by testing something like the sign of the
 * dot-products of normals.</p></text>
      <param>other other hyperplane to check against the instance</param>
      <return>true if the instance and the other hyperplane have
 * the same orientation</return>
    </javadoc>
    <method name="wholeHyperplane" type="SubHyperplane<S>" startLine="69" endLine="72" />
    <javadoc>
      <text>* Build a sub-hyperplane covering the whole hyperplane.</text>
      <return>a sub-hyperplane covering the whole hyperplane</return>
    </javadoc>
    <method name="wholeSpace" type="Region<S>" startLine="74" endLine="77" />
    <javadoc>
      <text>* Build a region covering the whole space.</text>
      <return>a region containing the instance</return>
    </javadoc>
  </interface>
</source>
