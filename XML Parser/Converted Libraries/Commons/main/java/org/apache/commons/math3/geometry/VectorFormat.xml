<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.geometry">
  <import name="java.text.FieldPosition" />
  <import name="java.text.NumberFormat" />
  <import name="java.text.ParsePosition" />
  <import name="java.util.Locale" />
  <import name="org.apache.commons.math3.util.CompositeFormat" />
  <import name="org.apache.commons.math3.exception.MathParseException" />
  <class name="VectorFormat" startLine="28">
    <javadoc>
      <text>* Formats a vector in components list format "{x; y; ...}".
 * <p>The prefix and suffix "{" and "}" and the separator "; " can be replaced by
 * any user-defined strings. The number format for components can be configured.</p>
 * <p>White space is ignored at parse time, even if it is in the prefix, suffix
 * or separator specifications. So even if the default separator does include a space
 * character that is used at format time, both input string "{1;1;1}" and
 * " { 1 ; 1 ; 1 } " will be parsed without error and the same vector will be
 * returned. In the second case, however, the parse position after parsing will be
 * just after the closing curly brace, i.e. just before the trailing space.</p></text>
      <param><S>
 *  Type of the space.</param>
      <version>$Id: VectorFormat.java 1462503 2013-03-29 15:48:27Z luc $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* The default prefix: "{".</text>
    </javadoc>
    <declaration type="String" name="DEFAULT_PREFIX" />
    <javadoc>
      <text>* The default suffix: "}".</text>
    </javadoc>
    <declaration type="String" name="DEFAULT_SUFFIX" />
    <javadoc>
      <text>* The default separator: ", ".</text>
    </javadoc>
    <declaration type="String" name="DEFAULT_SEPARATOR" />
    <javadoc>
      <text>* Prefix.</text>
    </javadoc>
    <declaration type="String" name="prefix" />
    <javadoc>
      <text>* Suffix.</text>
    </javadoc>
    <declaration type="String" name="suffix" />
    <javadoc>
      <text>* Separator.</text>
    </javadoc>
    <declaration type="String" name="separator" />
    <javadoc>
      <text>* Trimmed prefix.</text>
    </javadoc>
    <declaration type="String" name="trimmedPrefix" />
    <javadoc>
      <text>* Trimmed suffix.</text>
    </javadoc>
    <declaration type="String" name="trimmedSuffix" />
    <javadoc>
      <text>* Trimmed separator.</text>
    </javadoc>
    <declaration type="String" name="trimmedSeparator" />
    <javadoc>
      <text>* The format used for components.</text>
    </javadoc>
    <declaration type="NumberFormat" name="format" />
    <javadoc>
      <text>* Create an instance with default settings.
 * <p>The instance uses the default prefix, suffix and separator:
 * "{", "}", and "; " and the default number format for components.</p></text>
    </javadoc>
    <method type="constructor" name="VectorFormat" startLine="80" endLine="83" />
    <javadoc>
      <text>* Create an instance with a custom number format for components.</text>
      <param>format the custom format for components.</param>
    </javadoc>
    <method type="constructor" name="VectorFormat" startLine="89" endLine="91" />
    <javadoc>
      <text>* Create an instance with custom prefix, suffix and separator.</text>
      <param>prefix prefix to use instead of the default "{"</param>
      <param>suffix suffix to use instead of the default "}"</param>
      <param>separator separator to use instead of the default "; "</param>
    </javadoc>
    <method type="constructor" name="VectorFormat" startLine="100" endLine="102" />
    <javadoc>
      <text>* Create an instance with custom prefix, suffix, separator and format
 * for components.</text>
      <param>prefix prefix to use instead of the default "{"</param>
      <param>suffix suffix to use instead of the default "}"</param>
      <param>separator separator to use instead of the default "; "</param>
      <param>format the custom format for components.</param>
    </javadoc>
    <method type="constructor" name="VectorFormat" startLine="113" endLine="121" />
    <javadoc>
      <text>* Get the set of locales for which point/vector formats are available.
 * <p>This is the same set as the {@link NumberFormat} set.</p></text>
      <return>available point/vector format locales.</return>
    </javadoc>
    <method type="Locale[]" name="getAvailableLocales" startLine="128" endLine="130" />
    <javadoc>
      <text>* Get the format prefix.</text>
      <return>format prefix.</return>
    </javadoc>
    <method type="String" name="getPrefix" startLine="136" endLine="138" />
    <javadoc>
      <text>* Get the format suffix.</text>
      <return>format suffix.</return>
    </javadoc>
    <method type="String" name="getSuffix" startLine="144" endLine="146" />
    <javadoc>
      <text>* Get the format separator between components.</text>
      <return>format separator.</return>
    </javadoc>
    <method type="String" name="getSeparator" startLine="152" endLine="154" />
    <javadoc>
      <text>* Get the components format.</text>
      <return>components format.</return>
    </javadoc>
    <method type="NumberFormat" name="getFormat" startLine="160" endLine="162" />
    <javadoc>
      <text>* Formats a {@link Vector} object to produce a string.</text>
      <param>vector the object to format.</param>
      <return>a formatted string.</return>
    </javadoc>
    <method type="String" name="format" startLine="169" endLine="171" />
    <method name="format" type="StringBuffer" startLine="173" endLine="182" />
    <javadoc>
      <text>* Formats a {@link Vector} object to produce a string.</text>
      <param>vector the object to format.</param>
      <param>toAppendTo where the text is to be appended</param>
      <param>pos On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
      <return>the value passed in as toAppendTo.</return>
    </javadoc>
    <javadoc>
      <text>* Formats the coordinates of a {@link Vector} to produce a string.</text>
      <param>toAppendTo where the text is to be appended</param>
      <param>pos On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
      <param>coordinates coordinates of the object to format.</param>
      <return>the value passed in as toAppendTo.</return>
    </javadoc>
    <method type="StringBuffer" name="format" startLine="193" endLine="214">
      <scope startLine="202" endLine="207">
        <scope startLine="203" endLine="205" />
      </scope>
      <comment>format prefix</comment>
      <comment>format components</comment>
      <comment>format suffix</comment>
    </method>
    <method name="parse" type="Vector<S>" startLine="216" endLine="223" />
    <javadoc>
      <text>* Parses a string to produce a {@link Vector} object.</text>
      <param>source the string to parse</param>
      <return>the parsed {@link Vector} object.</return>
      <throws>MathParseException if the beginning of the specified string
 * cannot be parsed.</throws>
    </javadoc>
    <method name="parse" type="Vector<S>" startLine="225" endLine="231" />
    <javadoc>
      <text>* Parses a string to produce a {@link Vector} object.</text>
      <param>source the string to parse</param>
      <param>pos input/output parsing parameter.</param>
      <return>the parsed {@link Vector} object.</return>
    </javadoc>
    <javadoc>
      <text>* Parses a string to produce an array of coordinates.</text>
      <param>dimension dimension of the space</param>
      <param>source the string to parse</param>
      <param>pos input/output parsing parameter.</param>
      <return>coordinates array.</return>
    </javadoc>
    <method type="double[]" name="parseCoordinates" startLine="240" endLine="286">
      <declaration type="int" name="initialIndex" />
      <declaration type="double[]" name="coordinates" />
      <scope startLine="247" endLine="249" />
      <scope startLine="251" endLine="276">
        <scope startLine="257" endLine="259" />
        <declaration type="Number" name="c" />
        <scope startLine="266" endLine="271" />
        <comment>skip whitespace</comment>
        <comment>parse separator</comment>
        <comment>skip whitespace</comment>
        <comment>parse coordinate</comment>
        <comment>invalid coordinate</comment>
        <comment>set index back to initial, error index should already be set</comment>
        <comment>store coordinate</comment>
      </scope>
      <scope startLine="280" endLine="282" />
      <comment>parse prefix</comment>
      <comment>parse suffix</comment>
    </method>
  </class>
</source>
