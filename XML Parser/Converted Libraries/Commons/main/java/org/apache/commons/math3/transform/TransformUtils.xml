<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.transform">
  <import name="java.util.Arrays" />
  <import name="org.apache.commons.math3.complex.Complex" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <class name="TransformUtils" startLine="26">
    <javadoc>
      <text>* Useful functions for the implementation of various transforms.</text>
      <version>$Id: TransformUtils.java 1385310 2012-09-16 16:32:10Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Table of the powers of 2 to facilitate binary search lookup.</text>
      <see>#exactLog2(int)</see>
    </javadoc>
    <declaration type="int[]" name="POWERS_OF_TWO" />
    <javadoc>
      <text>* Private constructor.</text>
    </javadoc>
    <method type="constructor" name="TransformUtils" startLine="48" endLine="50" />
    <javadoc>
      <text>* Multiply every component in the given real array by the
 * given real number. The change is made in place.</text>
      <param>f the real array to be scaled</param>
      <param>d the real scaling coefficient</param>
      <return>a reference to the scaled array</return>
    </javadoc>
    <method type="double[]" name="scaleArray" startLine="60" endLine="66">
      <scope startLine="62" endLine="64" />
    </method>
    <javadoc>
      <text>* Multiply every component in the given complex array by the
 * given real number. The change is made in place.</text>
      <param>f the complex array to be scaled</param>
      <param>d the real scaling coefficient</param>
      <return>a reference to the scaled array</return>
    </javadoc>
    <method type="Complex[]" name="scaleArray" startLine="76" endLine="82">
      <scope startLine="78" endLine="80" />
    </method>
    <javadoc>
      <text>* Builds a new two dimensional array of {@code double} filled with the real
 * and imaginary parts of the specified {@link Complex} numbers. In the
 * returned array {@code dataRI}, the data is laid out as follows
 * <ul>
 * <li>{@code dataRI[0][i] = dataC[i].getReal()},</li>
 * <li>{@code dataRI[1][i] = dataC[i].getImaginary()}.</li>
 * </ul></text>
      <param>dataC the array of {@link Complex} data to be transformed</param>
      <return>a two dimensional array filled with the real and imaginary parts
 * of the specified complex input</return>
    </javadoc>
    <method type="double[][]" name="createRealImaginaryArray" startLine="98" endLine="108">
      <declaration type="double[][]" name="dataRI" />
      <declaration type="double[]" name="dataR" />
      <declaration type="double[]" name="dataI" />
      <scope startLine="102" endLine="106">
        <declaration type="Complex" name="c" />
      </scope>
    </method>
    <javadoc>
      <text>* Builds a new array of {@link Complex} from the specified two dimensional
 * array of real and imaginary parts. In the returned array {@code dataC},
 * the data is laid out as follows
 * <ul>
 * <li>{@code dataC[i].getReal() = dataRI[0][i]},</li>
 * <li>{@code dataC[i].getImaginary() = dataRI[1][i]}.</li>
 * </ul></text>
      <param>dataRI the array of real and imaginary parts to be transformed</param>
      <return>an array of {@link Complex} with specified real and imaginary parts.</return>
      <throws>DimensionMismatchException if the number of rows of the specified
 * array is not two, or the array is not rectangular</throws>
    </javadoc>
    <method type="Complex[]" name="createComplexArray" startLine="125" endLine="142">
      <scope startLine="127" endLine="129" />
      <declaration type="double[]" name="dataR" />
      <declaration type="double[]" name="dataI" />
      <scope startLine="132" endLine="134" />
      <declaration type="int" name="n" />
      <declaration type="Complex[]" name="c" />
      <scope startLine="138" endLine="140" />
    </method>
    <javadoc>
      <text>* Returns the base-2 logarithm of the specified {@code int}. Throws an
 * exception if {@code n} is not a power of two.</text>
      <param>n the {@code int} whose base-2 logarithm is to be evaluated</param>
      <return>the base-2 logarithm of {@code n}</return>
      <throws>MathIllegalArgumentException if {@code n} is not a power of two</throws>
    </javadoc>
    <method type="int" name="exactLog2" startLine="154" endLine="163">
      <declaration type="int" name="index" />
      <scope startLine="157" endLine="161" />
    </method>
  </class>
</source>
