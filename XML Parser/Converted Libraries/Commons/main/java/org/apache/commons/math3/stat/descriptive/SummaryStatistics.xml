<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.descriptive">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.exception.MathIllegalStateException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.stat.descriptive.moment.GeometricMean" />
  <import name="org.apache.commons.math3.stat.descriptive.moment.Mean" />
  <import name="org.apache.commons.math3.stat.descriptive.moment.SecondMoment" />
  <import name="org.apache.commons.math3.stat.descriptive.moment.Variance" />
  <import name="org.apache.commons.math3.stat.descriptive.rank.Max" />
  <import name="org.apache.commons.math3.stat.descriptive.rank.Min" />
  <import name="org.apache.commons.math3.stat.descriptive.summary.Sum" />
  <import name="org.apache.commons.math3.stat.descriptive.summary.SumOfLogs" />
  <import name="org.apache.commons.math3.stat.descriptive.summary.SumOfSquares" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <import name="org.apache.commons.math3.util.Precision" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="SummaryStatistics" startLine="37">
    <implements name="StatisticalSummary" />
    <implements name="Serializable" />
    <javadoc>
      <text>* <p>
 * Computes summary statistics for a stream of data values added using the{@link #addValue(double) addValue} method. The data values are not stored in
 * memory, so this class can be used to compute statistics for very large data
 * streams.
 * </p>
 * <p>
 * The {@link StorelessUnivariateStatistic} instances used to maintain summary
 * state and compute statistics are configurable via setters. For example, the
 * default implementation for the variance can be overridden by calling{@link #setVarianceImpl(StorelessUnivariateStatistic)}. Actual parameters to
 * these methods must implement the {@link StorelessUnivariateStatistic}interface and configuration must be completed before <code>addValue</code>
 * is called. No configuration is necessary to use the default, commons-math
 * provided implementations.
 * </p>
 * <p>
 * Note: This class is not thread-safe. Use{@link SynchronizedSummaryStatistics} if concurrent access from multiple
 * threads is required.
 * </p></text>
      <version>$Id: SummaryStatistics.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serialization UID</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* count of values that have been added</text>
    </javadoc>
    <declaration type="long" name="n" />
    <javadoc>
      <text>* SecondMoment is used to compute the mean and variance</text>
    </javadoc>
    <declaration type="SecondMoment" name="secondMoment" />
    <javadoc>
      <text>* sum of values that have been added</text>
    </javadoc>
    <declaration type="Sum" name="sum" />
    <javadoc>
      <text>* sum of the square of each value that has been added</text>
    </javadoc>
    <declaration type="SumOfSquares" name="sumsq" />
    <javadoc>
      <text>* min of values that have been added</text>
    </javadoc>
    <declaration type="Min" name="min" />
    <javadoc>
      <text>* max of values that have been added</text>
    </javadoc>
    <declaration type="Max" name="max" />
    <javadoc>
      <text>* sumLog of values that have been added</text>
    </javadoc>
    <declaration type="SumOfLogs" name="sumLog" />
    <javadoc>
      <text>* geoMean of values that have been added</text>
    </javadoc>
    <declaration type="GeometricMean" name="geoMean" />
    <javadoc>
      <text>* mean of values that have been added</text>
    </javadoc>
    <declaration type="Mean" name="mean" />
    <javadoc>
      <text>* variance of values that have been added</text>
    </javadoc>
    <declaration type="Variance" name="variance" />
    <javadoc>
      <text>* Sum statistic implementation - can be reset by setter.</text>
    </javadoc>
    <declaration type="StorelessUnivariateStatistic" name="sumImpl" />
    <javadoc>
      <text>* Sum of squares statistic implementation - can be reset by setter.</text>
    </javadoc>
    <declaration type="StorelessUnivariateStatistic" name="sumsqImpl" />
    <javadoc>
      <text>* Minimum statistic implementation - can be reset by setter.</text>
    </javadoc>
    <declaration type="StorelessUnivariateStatistic" name="minImpl" />
    <javadoc>
      <text>* Maximum statistic implementation - can be reset by setter.</text>
    </javadoc>
    <declaration type="StorelessUnivariateStatistic" name="maxImpl" />
    <javadoc>
      <text>* Sum of log statistic implementation - can be reset by setter.</text>
    </javadoc>
    <declaration type="StorelessUnivariateStatistic" name="sumLogImpl" />
    <javadoc>
      <text>* Geometric mean statistic implementation - can be reset by setter.</text>
    </javadoc>
    <declaration type="StorelessUnivariateStatistic" name="geoMeanImpl" />
    <javadoc>
      <text>* Mean statistic implementation - can be reset by setter.</text>
    </javadoc>
    <declaration type="StorelessUnivariateStatistic" name="meanImpl" />
    <javadoc>
      <text>* Variance statistic implementation - can be reset by setter.</text>
    </javadoc>
    <declaration type="StorelessUnivariateStatistic" name="varianceImpl" />
    <javadoc>
      <text>* Construct a SummaryStatistics instance</text>
    </javadoc>
    <method type="constructor" name="SummaryStatistics" startLine="123" endLine="124" />
    <javadoc>
      <text>* A copy constructor. Creates a deep-copy of the {@code original}.</text>
      <param>original the {@code SummaryStatistics} instance to copy</param>
      <throws>NullArgumentException if original is null</throws>
    </javadoc>
    <method type="constructor" name="SummaryStatistics" startLine="132" endLine="134" />
    <javadoc>
      <text>* Return a {@link StatisticalSummaryValues} instance reporting current
 * statistics.</text>
      <return>Current values of statistics</return>
    </javadoc>
    <method type="StatisticalSummary" name="getSummary" startLine="141" endLine="144" />
    <javadoc>
      <text>* Add a value to the data</text>
      <param>value the value to add</param>
    </javadoc>
    <method type="void" name="addValue" startLine="150" endLine="169">
      <scope startLine="159" endLine="161" />
      <scope startLine="162" endLine="164" />
      <scope startLine="165" endLine="167" />
      <comment>If mean, variance or geomean have been overridden,</comment>
      <comment>need to increment these</comment>
    </method>
    <javadoc>
      <text>* Returns the number of available values</text>
      <return>The number of available values</return>
    </javadoc>
    <method type="long" name="getN" startLine="175" endLine="177" />
    <javadoc>
      <text>* Returns the sum of the values that have been added</text>
      <return>The sum or <code>Double.NaN</code> if no values have been added</return>
    </javadoc>
    <method type="double" name="getSum" startLine="183" endLine="185" />
    <javadoc>
      <text>* Returns the sum of the squares of the values that have been added.
 * <p>
 * Double.NaN is returned if no values have been added.
 * </p></text>
      <return>The sum of squares</return>
    </javadoc>
    <method type="double" name="getSumsq" startLine="194" endLine="196" />
    <javadoc>
      <text>* Returns the mean of the values that have been added.
 * <p>
 * Double.NaN is returned if no values have been added.
 * </p></text>
      <return>the mean</return>
    </javadoc>
    <method type="double" name="getMean" startLine="205" endLine="207" />
    <javadoc>
      <text>* Returns the standard deviation of the values that have been added.
 * <p>
 * Double.NaN is returned if no values have been added.
 * </p></text>
      <return>the standard deviation</return>
    </javadoc>
    <method type="double" name="getStandardDeviation" startLine="216" endLine="226">
      <declaration type="double" name="stdDev" />
      <scope startLine="218" endLine="224">
        <scope startLine="219" endLine="221" />
        <scope startLine="221" endLine="223" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the (sample) variance of the available values.
 * <p>This method returns the bias-corrected sample variance (using {@code n - 1} in
 * the denominator).  Use {@link #getPopulationVariance()} for the non-bias-corrected
 * population variance.</p>
 * <p>Double.NaN is returned if no values have been added.</p></text>
      <return>the variance</return>
    </javadoc>
    <method type="double" name="getVariance" startLine="239" endLine="241" />
    <javadoc>
      <text>* Returns the <a href="http://en.wikibooks.org/wiki/Statistics/Summary/Variance">
 * population variance</a> of the values that have been added.
 * <p>Double.NaN is returned if no values have been added.</p></text>
      <return>the population variance</return>
    </javadoc>
    <method type="double" name="getPopulationVariance" startLine="251" endLine="255">
      <declaration type="Variance" name="populationVariance" />
    </method>
    <javadoc>
      <text>* Returns the maximum of the values that have been added.
 * <p>
 * Double.NaN is returned if no values have been added.
 * </p></text>
      <return>the maximum</return>
    </javadoc>
    <method type="double" name="getMax" startLine="264" endLine="266" />
    <javadoc>
      <text>* Returns the minimum of the values that have been added.
 * <p>
 * Double.NaN is returned if no values have been added.
 * </p></text>
      <return>the minimum</return>
    </javadoc>
    <method type="double" name="getMin" startLine="275" endLine="277" />
    <javadoc>
      <text>* Returns the geometric mean of the values that have been added.
 * <p>
 * Double.NaN is returned if no values have been added.
 * </p></text>
      <return>the geometric mean</return>
    </javadoc>
    <method type="double" name="getGeometricMean" startLine="286" endLine="288" />
    <javadoc>
      <text>* Returns the sum of the logs of the values that have been added.
 * <p>
 * Double.NaN is returned if no values have been added.
 * </p></text>
      <return>the sum of logs</return>
      <since>1.2</since>
    </javadoc>
    <method type="double" name="getSumOfLogs" startLine="298" endLine="300" />
    <javadoc>
      <text>* Returns a statistic related to the Second Central Moment.  Specifically,
 * what is returned is the sum of squared deviations from the sample mean
 * among the values that have been added.
 * <p>
 * Returns <code>Double.NaN</code> if no data values have been added and
 * returns <code>0</code> if there is just one value in the data set.</p>
 * <p></text>
      <return>second central moment statistic</return>
      <since>2.0</since>
    </javadoc>
    <method type="double" name="getSecondMoment" startLine="313" endLine="315" />
    <javadoc>
      <text>* Generates a text report displaying summary statistics from values that
 * have been added.</text>
      <return>String with line feeds displaying statistics</return>
      <since>1.2</since>
    </javadoc>
    <method type="String" name="toString" startLine="324" endLine="340">
      <declaration type="StringBuilder" name="outBuffer" />
      <declaration type="String" name="endl" />
    </method>
    <javadoc>
      <text>* Resets all statistics and storage</text>
    </javadoc>
    <method type="void" name="clear" startLine="345" endLine="360">
      <scope startLine="354" endLine="356" />
      <scope startLine="357" endLine="359" />
    </method>
    <javadoc>
      <text>* Returns true iff <code>object</code> is a
 * <code>SummaryStatistics</code> instance and all statistics have the
 * same values as this.</text>
      <param>object the object to test equality against.</param>
      <return>true if object equals this</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="370" endLine="386">
      <scope startLine="371" endLine="373" />
      <scope startLine="374" endLine="376" />
      <declaration type="SummaryStatistics" name="stat" />
    </method>
    <javadoc>
      <text>* Returns hash code based on values of statistics</text>
      <return>hash code</return>
    </javadoc>
    <method type="int" name="hashCode" startLine="393" endLine="404">
      <declaration type="int" name="result" />
    </method>
    <javadoc>
      <text>* Returns the currently configured Sum implementation</text>
      <return>the StorelessUnivariateStatistic implementing the sum</return>
      <since>1.2</since>
    </javadoc>
    <method type="StorelessUnivariateStatistic" name="getSumImpl" startLine="412" endLine="414" />
    <javadoc>
      <text>* <p>
 * Sets the implementation for the Sum.
 * </p>
 * <p>
 * This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.
 * </p></text>
      <param>sumImpl the StorelessUnivariateStatistic instance to use for
 * computing the Sum</param>
      <throws>MathIllegalStateException if data has already been added (i.e if n >0)</throws>
      <since>1.2</since>
    </javadoc>
    <method type="void" name="setSumImpl" startLine="431" endLine="434" />
    <javadoc>
      <text>* Returns the currently configured sum of squares implementation</text>
      <return>the StorelessUnivariateStatistic implementing the sum of squares</return>
      <since>1.2</since>
    </javadoc>
    <method type="StorelessUnivariateStatistic" name="getSumsqImpl" startLine="441" endLine="443" />
    <javadoc>
      <text>* <p>
 * Sets the implementation for the sum of squares.
 * </p>
 * <p>
 * This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.
 * </p></text>
      <param>sumsqImpl the StorelessUnivariateStatistic instance to use for
 * computing the sum of squares</param>
      <throws>MathIllegalStateException if data has already been added (i.e if n > 0)</throws>
      <since>1.2</since>
    </javadoc>
    <method type="void" name="setSumsqImpl" startLine="460" endLine="463" />
    <javadoc>
      <text>* Returns the currently configured minimum implementation</text>
      <return>the StorelessUnivariateStatistic implementing the minimum</return>
      <since>1.2</since>
    </javadoc>
    <method type="StorelessUnivariateStatistic" name="getMinImpl" startLine="470" endLine="472" />
    <javadoc>
      <text>* <p>
 * Sets the implementation for the minimum.
 * </p>
 * <p>
 * This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.
 * </p></text>
      <param>minImpl the StorelessUnivariateStatistic instance to use for
 * computing the minimum</param>
      <throws>MathIllegalStateException if data has already been added (i.e if n > 0)</throws>
      <since>1.2</since>
    </javadoc>
    <method type="void" name="setMinImpl" startLine="489" endLine="492" />
    <javadoc>
      <text>* Returns the currently configured maximum implementation</text>
      <return>the StorelessUnivariateStatistic implementing the maximum</return>
      <since>1.2</since>
    </javadoc>
    <method type="StorelessUnivariateStatistic" name="getMaxImpl" startLine="499" endLine="501" />
    <javadoc>
      <text>* <p>
 * Sets the implementation for the maximum.
 * </p>
 * <p>
 * This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.
 * </p></text>
      <param>maxImpl the StorelessUnivariateStatistic instance to use for
 * computing the maximum</param>
      <throws>MathIllegalStateException if data has already been added (i.e if n > 0)</throws>
      <since>1.2</since>
    </javadoc>
    <method type="void" name="setMaxImpl" startLine="518" endLine="521" />
    <javadoc>
      <text>* Returns the currently configured sum of logs implementation</text>
      <return>the StorelessUnivariateStatistic implementing the log sum</return>
      <since>1.2</since>
    </javadoc>
    <method type="StorelessUnivariateStatistic" name="getSumLogImpl" startLine="528" endLine="530" />
    <javadoc>
      <text>* <p>
 * Sets the implementation for the sum of logs.
 * </p>
 * <p>
 * This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.
 * </p></text>
      <param>sumLogImpl the StorelessUnivariateStatistic instance to use for
 * computing the log sum</param>
      <throws>MathIllegalStateException if data has already been added (i.e if n > 0)</throws>
      <since>1.2</since>
    </javadoc>
    <method type="void" name="setSumLogImpl" startLine="547" endLine="551" />
    <javadoc>
      <text>* Returns the currently configured geometric mean implementation</text>
      <return>the StorelessUnivariateStatistic implementing the geometric mean</return>
      <since>1.2</since>
    </javadoc>
    <method type="StorelessUnivariateStatistic" name="getGeoMeanImpl" startLine="558" endLine="560" />
    <javadoc>
      <text>* <p>
 * Sets the implementation for the geometric mean.
 * </p>
 * <p>
 * This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.
 * </p></text>
      <param>geoMeanImpl the StorelessUnivariateStatistic instance to use for
 * computing the geometric mean</param>
      <throws>MathIllegalStateException if data has already been added (i.e if n > 0)</throws>
      <since>1.2</since>
    </javadoc>
    <method type="void" name="setGeoMeanImpl" startLine="577" endLine="580" />
    <javadoc>
      <text>* Returns the currently configured mean implementation</text>
      <return>the StorelessUnivariateStatistic implementing the mean</return>
      <since>1.2</since>
    </javadoc>
    <method type="StorelessUnivariateStatistic" name="getMeanImpl" startLine="587" endLine="589" />
    <javadoc>
      <text>* <p>
 * Sets the implementation for the mean.
 * </p>
 * <p>
 * This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.
 * </p></text>
      <param>meanImpl the StorelessUnivariateStatistic instance to use for
 * computing the mean</param>
      <throws>MathIllegalStateException if data has already been added (i.e if n > 0)</throws>
      <since>1.2</since>
    </javadoc>
    <method type="void" name="setMeanImpl" startLine="606" endLine="609" />
    <javadoc>
      <text>* Returns the currently configured variance implementation</text>
      <return>the StorelessUnivariateStatistic implementing the variance</return>
      <since>1.2</since>
    </javadoc>
    <method type="StorelessUnivariateStatistic" name="getVarianceImpl" startLine="616" endLine="618" />
    <javadoc>
      <text>* <p>
 * Sets the implementation for the variance.
 * </p>
 * <p>
 * This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.
 * </p></text>
      <param>varianceImpl the StorelessUnivariateStatistic instance to use for
 * computing the variance</param>
      <throws>MathIllegalStateException if data has already been added (i.e if n > 0)</throws>
      <since>1.2</since>
    </javadoc>
    <method type="void" name="setVarianceImpl" startLine="635" endLine="638" />
    <javadoc>
      <text>* Throws IllegalStateException if n > 0.</text>
      <throws>MathIllegalStateException if data has been added</throws>
    </javadoc>
    <method type="void" name="checkEmpty" startLine="644" endLine="649">
      <scope startLine="645" endLine="648" />
    </method>
    <javadoc>
      <text>* Returns a copy of this SummaryStatistics instance with the same internal state.</text>
      <return>a copy of this</return>
    </javadoc>
    <method type="SummaryStatistics" name="copy" startLine="656" endLine="661">
      <declaration type="SummaryStatistics" name="result" />
      <comment>No try-catch or advertised exception because arguments are guaranteed non-null</comment>
    </method>
    <javadoc>
      <text>* Copies source to dest.
 * <p>Neither source nor dest can be null.</p></text>
      <param>source SummaryStatistics to copy</param>
      <param>dest SummaryStatistics to copy to</param>
      <throws>NullArgumentException if either source or dest is null</throws>
    </javadoc>
    <method type="void" name="copy" startLine="672" endLine="742">
      <scope startLine="684" endLine="686" />
      <scope startLine="686" endLine="688" />
      <scope startLine="689" endLine="691" />
      <scope startLine="691" endLine="693" />
      <scope startLine="694" endLine="696" />
      <scope startLine="696" endLine="698" />
      <scope startLine="702" endLine="704" />
      <scope startLine="704" endLine="706" />
      <scope startLine="707" endLine="709" />
      <scope startLine="709" endLine="711" />
      <scope startLine="712" endLine="714" />
      <scope startLine="714" endLine="716" />
      <scope startLine="717" endLine="719" />
      <scope startLine="719" endLine="721" />
      <scope startLine="722" endLine="724" />
      <scope startLine="724" endLine="726" />
      <scope startLine="727" endLine="729" />
      <scope startLine="729" endLine="731" />
      <scope startLine="732" endLine="734" />
      <scope startLine="734" endLine="736" />
      <scope startLine="737" endLine="739" />
      <scope startLine="739" endLine="741" />
      <comment>Keep commons-math supplied statistics with embedded moments in synch</comment>
      <comment>Make sure that if stat == statImpl in source, same</comment>
      <comment>holds in dest; otherwise copy stat</comment>
    </method>
    <comment>Getters and setters for statistics implementations</comment>
  </class>
</source>
