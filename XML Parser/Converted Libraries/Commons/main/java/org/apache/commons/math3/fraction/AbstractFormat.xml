<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.fraction">
  <import name="java.io.Serializable" />
  <import name="java.text.FieldPosition" />
  <import name="java.text.NumberFormat" />
  <import name="java.text.ParsePosition" />
  <import name="java.util.Locale" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <class name="AbstractFormat" extends="NumberFormat" startLine="29">
    <implements name="Serializable" />
    <javadoc>
      <text>* Common part shared by both {@link FractionFormat} and {@link BigFractionFormat}.</text>
      <version>$Id: AbstractFormat.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* The format used for the denominator.</text>
    </javadoc>
    <declaration type="NumberFormat" name="denominatorFormat" />
    <javadoc>
      <text>* The format used for the numerator.</text>
    </javadoc>
    <declaration type="NumberFormat" name="numeratorFormat" />
    <javadoc>
      <text>* Create an improper formatting instance with the default number format
 * for the numerator and denominator.</text>
    </javadoc>
    <method type="constructor" name="AbstractFormat" startLine="49" endLine="51" />
    <javadoc>
      <text>* Create an improper formatting instance with a custom number format for
 * both the numerator and denominator.</text>
      <param>format the custom format for both the numerator and denominator.</param>
    </javadoc>
    <method type="constructor" name="AbstractFormat" startLine="58" endLine="60" />
    <javadoc>
      <text>* Create an improper formatting instance with a custom number format for
 * the numerator and a custom number format for the denominator.</text>
      <param>numeratorFormat the custom format for the numerator.</param>
      <param>denominatorFormat the custom format for the denominator.</param>
    </javadoc>
    <method type="constructor" name="AbstractFormat" startLine="69" endLine="72" />
    <javadoc>
      <text>* Create a default number format.  The default number format is based on{@link NumberFormat#getNumberInstance(java.util.Locale)}. The only
 * customization is the maximum number of BigFraction digits, which is set to 0.</text>
      <return>the default number format.</return>
    </javadoc>
    <method type="NumberFormat" name="getDefaultNumberFormat" startLine="80" endLine="82" />
    <javadoc>
      <text>* Create a default number format.  The default number format is based on{@link NumberFormat#getNumberInstance(java.util.Locale)}. The only
 * customization is the maximum number of BigFraction digits, which is set to 0.</text>
      <param>locale the specific locale used by the format.</param>
      <return>the default number format specific to the given locale.</return>
    </javadoc>
    <method type="NumberFormat" name="getDefaultNumberFormat" startLine="91" endLine="96">
      <declaration type="NumberFormat" name="nf" />
    </method>
    <javadoc>
      <text>* Access the denominator format.</text>
      <return>the denominator format.</return>
    </javadoc>
    <method type="NumberFormat" name="getDenominatorFormat" startLine="102" endLine="104" />
    <javadoc>
      <text>* Access the numerator format.</text>
      <return>the numerator format.</return>
    </javadoc>
    <method type="NumberFormat" name="getNumeratorFormat" startLine="110" endLine="112" />
    <javadoc>
      <text>* Modify the denominator format.</text>
      <param>format the new denominator format value.</param>
      <throws>NullArgumentException if {@code format} is {@code null}.</throws>
    </javadoc>
    <method type="void" name="setDenominatorFormat" startLine="119" endLine="124">
      <scope startLine="120" endLine="122" />
    </method>
    <javadoc>
      <text>* Modify the numerator format.</text>
      <param>format the new numerator format value.</param>
      <throws>NullArgumentException if {@code format} is {@code null}.</throws>
    </javadoc>
    <method type="void" name="setNumeratorFormat" startLine="131" endLine="136">
      <scope startLine="132" endLine="134" />
    </method>
    <javadoc>
      <text>* Parses <code>source</code> until a non-whitespace character is found.</text>
      <param>source the string to parse</param>
      <param>pos input/output parsing parameter.  On output, <code>pos</code>
 * holds the index of the next non-whitespace character.</param>
    </javadoc>
    <method type="void" name="parseAndIgnoreWhitespace" startLine="145" endLine="148" />
    <javadoc>
      <text>* Parses <code>source</code> until a non-whitespace character is found.</text>
      <param>source the string to parse</param>
      <param>pos input/output parsing parameter.</param>
      <return>the first non-whitespace character.</return>
    </javadoc>
    <method type="char" name="parseNextCharacter" startLine="157" endLine="175">
      <declaration type="int" name="index" />
      <declaration type="int" name="n" />
      <declaration type="char" name="ret" />
      <scope startLine="162" endLine="172">
        <declaration type="char" name="c" />
        <scope startLine="164" endLine="166" />
        <scope startLine="169" endLine="171" />
      </scope>
    </method>
    <javadoc>
      <text>* Formats a double value as a fraction and appends the result to a StringBuffer.</text>
      <param>value the double value to format</param>
      <param>buffer StringBuffer to append to</param>
      <param>position On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
      <return>a reference to the appended buffer</return>
      <see>#format(Object,StringBuffer,FieldPosition)</see>
    </javadoc>
    <method type="StringBuffer" name="format" startLine="189" endLine="191" />
    <javadoc>
      <text>* Formats a long value as a fraction and appends the result to a StringBuffer.</text>
      <param>value the long value to format</param>
      <param>buffer StringBuffer to append to</param>
      <param>position On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
      <return>a reference to the appended buffer</return>
      <see>#format(Object,StringBuffer,FieldPosition)</see>
    </javadoc>
    <method type="StringBuffer" name="format" startLine="206" endLine="208" />
  </class>
</source>
