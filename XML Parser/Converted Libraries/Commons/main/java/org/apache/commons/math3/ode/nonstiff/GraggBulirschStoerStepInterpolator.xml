<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.ode.nonstiff">
  <import name="java.io.IOException" />
  <import name="java.io.ObjectInput" />
  <import name="java.io.ObjectOutput" />
  <import name="org.apache.commons.math3.ode.EquationsMapper" />
  <import name="org.apache.commons.math3.ode.sampling.AbstractStepInterpolator" />
  <import name="org.apache.commons.math3.ode.sampling.StepInterpolator" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="GraggBulirschStoerStepInterpolator" extends="AbstractStepInterpolator" startLine="29">
    <javadoc>
      <text>* This class implements an interpolator for the Gragg-Bulirsch-Stoer
 * integrator.
 * <p>This interpolator compute dense output inside the last step
 * produced by a Gragg-Bulirsch-Stoer integrator.</p>
 * <p>
 * This implementation is basically a reimplementation in Java of the
 * <a
 * href="http://www.unige.ch/math/folks/hairer/prog/nonstiff/odex.f">odex</a>
 * fortran code by E. Hairer and G. Wanner. The redistribution policy
 * for this code is available <a
 * href="http://www.unige.ch/~hairer/prog/licence.txt">here</a>, for
 * convenience, it is reproduced below.</p>
 * </p>
 * <table border="0" width="80%" cellpadding="10" align="center" bgcolor="#E0E0E0">
 * <tr><td>Copyright (c) 2004, Ernst Hairer</td></tr>
 * <tr><td>Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 * <ul>
 * <li>Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.</li>
 * <li>Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.</li>
 * </ul></td></tr>
 * <tr><td><strong>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</strong></td></tr>
 * </table></text>
      <see>GraggBulirschStoerIntegrator</see>
      <version>$Id: GraggBulirschStoerStepInterpolator.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>1.2</since>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Slope at the beginning of the step.</text>
    </javadoc>
    <declaration type="double[]" name="y0Dot" />
    <javadoc>
      <text>* State at the end of the step.</text>
    </javadoc>
    <declaration type="double[]" name="y1" />
    <javadoc>
      <text>* Slope at the end of the step.</text>
    </javadoc>
    <declaration type="double[]" name="y1Dot" />
    <javadoc>
      <text>* Derivatives at the middle of the step.
 * element 0 is state at midpoint, element 1 is first derivative ...</text>
    </javadoc>
    <declaration type="double[][]" name="yMidDots" />
    <javadoc>
      <text>* Interpolation polynomials.</text>
    </javadoc>
    <declaration type="double[][]" name="polynomials" />
    <javadoc>
      <text>* Error coefficients for the interpolation.</text>
    </javadoc>
    <declaration type="double[]" name="errfac" />
    <javadoc>
      <text>* Degree of the interpolation polynomials.</text>
    </javadoc>
    <declaration type="int" name="currentDegree" />
    <javadoc>
      <text>* Simple constructor.
 * This constructor should not be used directly, it is only intended
 * for the serialization process.</text>
    </javadoc>
    <method type="constructor" name="GraggBulirschStoerStepInterpolator" startLine="111" endLine="117" />
    <javadoc>
      <text>* Simple constructor.</text>
      <param>y reference to the integrator array holding the current state</param>
      <param>y0Dot reference to the integrator array holding the slope
 * at the beginning of the step</param>
      <param>y1 reference to the integrator array holding the state at
 * the end of the step</param>
      <param>y1Dot reference to the integrator array holding the slope
 * at the end of the step</param>
      <param>yMidDots reference to the integrator array holding the
 * derivatives at the middle point of the step</param>
      <param>forward integration direction indicator</param>
      <param>primaryMapper equations mapper for the primary equations set</param>
      <param>secondaryMappers equations mappers for the secondary equations sets</param>
    </javadoc>
    <method type="constructor" name="GraggBulirschStoerStepInterpolator" startLine="138" endLine="148" />
    <javadoc>
      <text>* Copy constructor.</text>
      <param>interpolator interpolator to copy from. The copy is a deep
 * copy: its arrays are separated from the original arrays of the
 * instance</param>
    </javadoc>
    <method type="constructor" name="GraggBulirschStoerStepInterpolator" startLine="156" endLine="183">
      <declaration type="int" name="dimension" />
      <scope startLine="170" endLine="173" />
      <scope startLine="173" endLine="181">
        <scope startLine="175" endLine="179" />
      </scope>
      <comment>the interpolator has been finalized,</comment>
      <comment>the following arrays are not needed anymore</comment>
      <comment>copy the interpolation polynomials (up to the current degree only)</comment>
    </method>
    <javadoc>
      <text>* Reallocate the internal tables.
 * Reallocate the internal tables in order to be able to handle
 * interpolation polynomials up to the given degree</text>
      <param>maxDegree maximal degree to handle</param>
    </javadoc>
    <method type="void" name="resetTables" startLine="190" endLine="230">
      <scope startLine="192" endLine="196" />
      <scope startLine="196" endLine="228">
        <declaration type="double[][][]" name="newPols" />
        <scope startLine="199" endLine="204">
          <scope startLine="201" endLine="203" />
        </scope>
        <scope startLine="204" endLine="208">
          <scope startLine="205" endLine="207" />
        </scope>
        <scope startLine="212" endLine="214" />
        <scope startLine="214" endLine="224">
          <scope startLine="216" endLine="223">
            <declaration type="int" name="ip5" />
            <declaration type="double" name="e" />
            <scope startLine="220" endLine="222" />
          </scope>
        </scope>
        <comment>initialize the error factors array for interpolation</comment>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="StepInterpolator" name="doCopy" startLine="234" endLine="236" />
    <javadoc>
      <text>* Compute the interpolation coefficients for dense output.</text>
      <param>mu degree of the interpolation polynomial</param>
      <param>h current step</param>
    </javadoc>
    <method type="void" name="computeCoefficients" startLine="243" endLine="296">
      <scope startLine="245" endLine="247" />
      <scope startLine="251" endLine="294">
        <declaration type="double" name="yp0" />
        <declaration type="double" name="yp1" />
        <declaration type="double" name="ydiff" />
        <declaration type="double" name="aspl" />
        <declaration type="double" name="bspl" />
        <scope startLine="264" endLine="266" />
        <declaration type="double" name="ph0" />
        <scope startLine="272" endLine="293">
          <declaration type="double" name="ph1" />
          <scope startLine="276" endLine="292">
            <declaration type="double" name="ph2" />
            <scope startLine="280" endLine="291">
              <declaration type="double" name="ph3" />
              <scope startLine="284" endLine="289">
                <declaration type="double" name="fac1" />
                <declaration type="double" name="fac2" />
              </scope>
            </scope>
          </scope>
        </scope>
        <comment>compute the remaining coefficients</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Estimate interpolation error.</text>
      <param>scale scaling array</param>
      <return>estimate of the interpolation error</return>
    </javadoc>
    <method type="double" name="estimateError" startLine="302" endLine="312">
      <declaration type="double" name="error" />
      <scope startLine="304" endLine="310">
        <scope startLine="305" endLine="308">
          <declaration type="double" name="e" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="computeInterpolatedStateAndDerivatives" startLine="317" endLine="359">
      <declaration type="int" name="dimension" />
      <declaration type="double" name="oneMinusTheta" />
      <declaration type="double" name="theta05" />
      <declaration type="double" name="tOmT" />
      <declaration type="double" name="t4" />
      <declaration type="double" name="t4Dot" />
      <declaration type="double" name="dot1" />
      <declaration type="double" name="dot2" />
      <declaration type="double" name="dot3" />
      <scope startLine="330" endLine="351">
        <declaration type="double" name="p0" />
        <declaration type="double" name="p1" />
        <declaration type="double" name="p2" />
        <declaration type="double" name="p3" />
        <scope startLine="339" endLine="349">
          <declaration type="double" name="cDot" />
          <declaration type="double" name="c" />
          <scope startLine="342" endLine="346">
            <declaration type="double" name="d" />
          </scope>
        </scope>
      </scope>
      <scope startLine="353" endLine="357">
        <comment>in this degenerated case, the previous computation leads to NaN for derivatives</comment>
        <comment>we fix this by using the derivatives at midpoint</comment>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="writeExternal" startLine="364" endLine="379">
      <declaration type="int" name="dimension" />
      <scope startLine="373" endLine="377">
        <scope startLine="374" endLine="376" />
      </scope>
      <comment>save the state of the base class</comment>
      <comment>save the local attributes (but not the temporary vectors)</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="readExternal" startLine="384" endLine="404">
      <declaration type="double" name="t" />
      <declaration type="int" name="dimension" />
      <declaration type="int" name="degree" />
      <scope startLine="395" endLine="399">
        <scope startLine="396" endLine="398" />
      </scope>
      <comment>read the base class</comment>
      <comment>read the local attributes</comment>
      <comment>we can now set the interpolated time and state</comment>
    </method>
  </class>
</source>
