<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.genetics">
  <import name="java.util.ArrayList" />
  <import name="java.util.Arrays" />
  <import name="java.util.Collections" />
  <import name="java.util.List" />
  <class name="AbstractListChromosome" extends="Chromosome" startLine="24">
    <javadoc>
      <text>* Chromosome represented by an immutable list of a fixed length.</text>
      <param><T>
 *  type of the representation list</param>
      <version>$Id: AbstractListChromosome.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* List representing the chromosome</text>
    </javadoc>
    <declaration type="List<T>" name="representation" />
    <javadoc>
      <text>* Constructor.</text>
      <param>representation inner representation of the chromosome</param>
      <throws>InvalidRepresentationException iff the <code>representation</code> can not represent a valid chromosome</throws>
    </javadoc>
    <method type="constructor" name="AbstractListChromosome" startLine="41" endLine="44" />
    <javadoc>
      <text>* Constructor.</text>
      <param>representation inner representation of the chromosome</param>
      <throws>InvalidRepresentationException iff the <code>representation</code> can not represent a valid chromosome</throws>
    </javadoc>
    <method type="constructor" name="AbstractListChromosome" startLine="51" endLine="53" />
    <method name="checkValidity" type="void" startLine="55" endLine="61" />
    <javadoc>
      <text>* Asserts that <code>representation</code> can represent a valid chromosome.</text>
      <param>chromosomeRepresentation representation of the chromosome</param>
      <throws>InvalidRepresentationException iff the <code>representation</code> can not represent a valid chromosome</throws>
    </javadoc>
    <javadoc>
      <text>* Returns the (immutable) inner representation of the chromosome.</text>
      <return>the representation of the chromosome</return>
    </javadoc>
    <method type="List<T>" name="getRepresentation" startLine="67" endLine="69" />
    <javadoc>
      <text>* Returns the length of the chromosome.</text>
      <return>the length of the chromosome</return>
    </javadoc>
    <method type="int" name="getLength" startLine="75" endLine="77" />
    <method name="newFixedLengthChromosome" type="AbstractListChromosome<T>" startLine="79" endLine="89" />
    <javadoc>
      <text>* Creates a new instance of the same class as <code>this</code> is, with a given <code>arrayRepresentation</code>.
 * This is needed in crossover and mutation operators, where we need a new instance of the same class, but with
 * different array representation.
 * <p>
 * Usually, this method just calls a constructor of the class.</text>
      <param>chromosomeRepresentation the inner array representation of the new chromosome.</param>
      <return>new instance extended from FixedLengthChromosome with the given arrayRepresentation</return>
    </javadoc>
    <method type="String" name="toString" startLine="92" endLine="94" />
  </class>
</source>
