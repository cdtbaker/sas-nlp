<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.polynomials">
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NonMonotonicSequenceException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <class name="PolynomialFunctionLagrangeForm" startLine="27">
    <implements name="UnivariateFunction" />
    <javadoc>
      <text>* Implements the representation of a real polynomial function in
 * <a href="http://mathworld.wolfram.com/LagrangeInterpolatingPolynomial.html">
 * Lagrange Form</a>. For reference, see <b>Introduction to Numerical
 * Analysis</b>, ISBN 038795452X, chapter 2.
 * <p>
 * The approximated function should be smooth enough for Lagrange polynomial
 * to work well. Otherwise, consider using splines instead.</p></text>
      <version>$Id: PolynomialFunctionLagrangeForm.java 1455194 2013-03-11 15:45:54Z luc $</version>
      <since>1.2</since>
    </javadoc>
    <javadoc>
      <text>* The coefficients of the polynomial, ordered by degree -- i.e.
 * coefficients[0] is the constant term and coefficients[n] is the
 * coefficient of x^n where n is the degree of the polynomial.</text>
    </javadoc>
    <declaration type="double" name="coefficients" />
    <javadoc>
      <text>* Interpolating points (abscissas).</text>
    </javadoc>
    <declaration type="double" name="x" />
    <javadoc>
      <text>* Function values at interpolating points.</text>
    </javadoc>
    <declaration type="double" name="y" />
    <javadoc>
      <text>* Whether the polynomial coefficients are available.</text>
    </javadoc>
    <declaration type="boolean" name="coefficientsComputed" />
    <javadoc>
      <text>* Construct a Lagrange polynomial with the given abscissas and function
 * values. The order of interpolating points are not important.
 * <p>
 * The constructor makes copy of the input arrays and assigns them.</p></text>
      <param>x interpolating points</param>
      <param>y function values at interpolating points</param>
      <throws>DimensionMismatchException if the array lengths are different.</throws>
      <throws>NumberIsTooSmallException if the number of points is less than 2.</throws>
      <throws>NonMonotonicSequenceExceptionif two abscissae have the same value.</throws>
    </javadoc>
    <method type="constructor" name="PolynomialFunctionLagrangeForm" startLine="73" endLine="85">
      <scope startLine="80" endLine="84">
        <comment>Second check in case some abscissa is duplicated.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Calculate the function value at the given point.</text>
      <param>z Point at which the function value is to be computed.</param>
      <return>the function value.</return>
      <throws>DimensionMismatchException if {@code x} and {@code y} have
 * different lengths.</throws>
      <throws>org.apache.commons.math3.exception.NonMonotonicSequenceExceptionif {@code x} is not sorted in strictly increasing order.</throws>
      <throws>NumberIsTooSmallException if the size of {@code x} is less
 * than 2.</throws>
    </javadoc>
    <method type="double" name="value" startLine="99" endLine="101" />
    <javadoc>
      <text>* Returns the degree of the polynomial.</text>
      <return>the degree of the polynomial</return>
    </javadoc>
    <method type="int" name="degree" startLine="108" endLine="110" />
    <javadoc>
      <text>* Returns a copy of the interpolating points array.
 * <p>
 * Changes made to the returned copy will not affect the polynomial.</p></text>
      <return>a fresh copy of the interpolating points array</return>
    </javadoc>
    <method type="double[]" name="getInterpolatingPoints" startLine="119" endLine="123">
      <declaration type="double[]" name="out" />
    </method>
    <javadoc>
      <text>* Returns a copy of the interpolating values array.
 * <p>
 * Changes made to the returned copy will not affect the polynomial.</p></text>
      <return>a fresh copy of the interpolating values array</return>
    </javadoc>
    <method type="double[]" name="getInterpolatingValues" startLine="132" endLine="136">
      <declaration type="double[]" name="out" />
    </method>
    <javadoc>
      <text>* Returns a copy of the coefficients array.
 * <p>
 * Changes made to the returned copy will not affect the polynomial.</p>
 * <p>
 * Note that coefficients computation can be ill-conditioned. Use with caution
 * and only when it is necessary.</p></text>
      <return>a fresh copy of the coefficients array</return>
    </javadoc>
    <method type="double[]" name="getCoefficients" startLine="148" endLine="155">
      <scope startLine="149" endLine="151" />
      <declaration type="double[]" name="out" />
    </method>
    <javadoc>
      <text>* Evaluate the Lagrange polynomial using
 * <a href="http://mathworld.wolfram.com/NevillesAlgorithm.html">
 * Neville's Algorithm</a>. It takes O(n^2) time.</text>
      <param>x Interpolating points array.</param>
      <param>y Interpolating values array.</param>
      <param>z Point at which the function value is to be computed.</param>
      <return>the function value.</return>
      <throws>DimensionMismatchException if {@code x} and {@code y} have
 * different lengths.</throws>
      <throws>NonMonotonicSequenceExceptionif {@code x} is not sorted in strictly increasing order.</throws>
      <throws>NumberIsTooSmallException if the size of {@code x} is less
 * than 2.</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="174" endLine="189">
      <scope startLine="175" endLine="177" />
      <declaration type="double[]" name="xNew" />
      <declaration type="double[]" name="yNew" />
      <comment>Array is not sorted.</comment>
      <comment>Second check in case some abscissa is duplicated.</comment>
    </method>
    <javadoc>
      <text>* Evaluate the Lagrange polynomial using
 * <a href="http://mathworld.wolfram.com/NevillesAlgorithm.html">
 * Neville's Algorithm</a>. It takes O(n^2) time.</text>
      <param>x Interpolating points array.</param>
      <param>y Interpolating values array.</param>
      <param>z Point at which the function value is to be computed.</param>
      <return>the function value.</return>
      <throws>DimensionMismatchException if {@code x} and {@code y} have
 * different lengths.</throws>
      <throws>org.apache.commons.math3.exception.NonMonotonicSequenceExceptionif {@code x} is not sorted in strictly increasing order.</throws>
      <throws>NumberIsTooSmallException if the size of {@code x} is less
 * than 2.</throws>
    </javadoc>
    <method type="double" name="evaluateInternal" startLine="207" endLine="248">
      <declaration type="int" name="nearest" />
      <declaration type="int" name="n" />
      <declaration type="double[]" name="c" />
      <declaration type="double[]" name="d" />
      <declaration type="double" name="min_dist" />
      <scope startLine="213" endLine="223">
        <declaration type="double" name="dist" />
        <scope startLine="219" endLine="222" />
        <comment>initialize the difference arrays</comment>
        <comment>find out the abscissa closest to z</comment>
      </scope>
      <declaration type="double" name="value" />
      <scope startLine="228" endLine="245">
        <scope startLine="229" endLine="237">
          <declaration type="double" name="tc" />
          <declaration type="double" name="td" />
          <declaration type="double" name="divider" />
          <declaration type="double" name="w" />
        </scope>
        <scope startLine="239" endLine="241" />
        <scope startLine="241" endLine="244" />
        <comment>update the difference arrays</comment>
        <comment>sum up the difference terms to get the final value</comment>
        <comment>fork down</comment>
        <comment>fork up</comment>
      </scope>
      <comment>initial approximation to the function value at z</comment>
    </method>
    <javadoc>
      <text>* Calculate the coefficients of Lagrange polynomial from the
 * interpolation data. It takes O(n^2) time.
 * Note that this computation can be ill-conditioned: Use with caution
 * and only when it is necessary.</text>
    </javadoc>
    <method type="void" name="computeCoefficients" startLine="256" endLine="296">
      <declaration type="int" name="n" />
      <scope startLine="259" endLine="261" />
      <declaration type="double[]" name="c" />
      <scope startLine="266" endLine="272">
        <scope startLine="267" endLine="269" />
      </scope>
      <declaration type="double[]" name="tc" />
      <scope startLine="275" endLine="293">
        <declaration type="double" name="d" />
        <scope startLine="278" endLine="282">
          <scope startLine="279" endLine="281" />
        </scope>
        <declaration type="double" name="t" />
        <scope startLine="289" endLine="292" />
        <comment>d = (x[i]-x[0])...(x[i]-x[i-1])(x[i]-x[i+1])...(x[i]-x[n-1])</comment>
        <comment>Lagrange polynomial is the sum of n terms, each of which is a</comment>
        <comment>polynomial of degree n-1. tc[] are the coefficients of the i-th</comment>
        <comment>numerator Pi(x) = (x-x[0])...(x-x[i-1])(x-x[i+1])...(x-x[n-1]).</comment>
        <comment>actually c[n] = 1</comment>
      </scope>
      <comment>c[] are the coefficients of P(x) = (x-x[0])(x-x[1])...(x-x[n-1])</comment>
    </method>
    <javadoc>
      <text>* Check that the interpolation arrays are valid.
 * The arrays features checked by this method are that both arrays have the
 * same length and this length is at least 2.</text>
      <param>x Interpolating points array.</param>
      <param>y Interpolating values array.</param>
      <param>abort Whether to throw an exception if {@code x} is not sorted.</param>
      <throws>DimensionMismatchException if the array lengths are different.</throws>
      <throws>NumberIsTooSmallException if the number of points is less than 2.</throws>
      <throws>org.apache.commons.math3.exception.NonMonotonicSequenceExceptionif {@code x} is not sorted in strictly increasing order and {@code abort}is {@code true}.</throws>
      <return>{@code false} if the {@code x} is not sorted in increasing order,{@code true} otherwise.</return>
      <see>#evaluate(double[],double[],double)</see>
      <see>#computeCoefficients()</see>
    </javadoc>
    <method type="boolean" name="verifyInterpolationArray" startLine="317" endLine="326">
      <scope startLine="318" endLine="320" />
      <scope startLine="321" endLine="323" />
    </method>
  </class>
</source>
