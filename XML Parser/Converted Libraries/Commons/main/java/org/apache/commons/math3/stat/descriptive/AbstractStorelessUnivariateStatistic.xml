<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.descriptive">
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <import name="org.apache.commons.math3.util.Precision" />
  <class name="AbstractStorelessUnivariateStatistic" extends="AbstractUnivariateStatistic" startLine="25">
    <implements name="StorelessUnivariateStatistic" />
    <javadoc>
      <text>* Abstract implementation of the {@link StorelessUnivariateStatistic} interface.
 * <p>
 * Provides default <code>evaluate()</code> and <code>incrementAll(double[])</code>
 * implementations.</p>
 * <p>
 * <strong>Note that these implementations are not synchronized.</strong></p></text>
      <version>$Id: AbstractStorelessUnivariateStatistic.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* This default implementation calls {@link #clear}, then invokes{@link #increment} in a loop over the the input array, and then uses{@link #getResult} to compute the return value.
 * <p>
 * Note that this implementation changes the internal state of the
 * statistic.  Its side effects are the same as invoking {@link #clear} and
 * then {@link #incrementAll(double[])}.</p>
 * <p>
 * Implementations may override this method with a more efficient and
 * possibly more accurate implementation that works directly with the
 * input array.</p>
 * <p>
 * If the array is null, a MathIllegalArgumentException is thrown.</p></text>
      <param>values input array</param>
      <return>the value of the statistic applied to the input array</return>
      <throws>MathIllegalArgumentException if values is null</throws>
      <see>org.apache.commons.math3.stat.descriptive.UnivariateStatistic#evaluate(double[])</see>
    </javadoc>
    <method type="double" name="evaluate" startLine="60" endLine="65">
      <scope startLine="61" endLine="63" />
    </method>
    <javadoc>
      <text>* This default implementation calls {@link #clear}, then invokes{@link #increment} in a loop over the specified portion of the input
 * array, and then uses {@link #getResult} to compute the return value.
 * <p>
 * Note that this implementation changes the internal state of the
 * statistic.  Its side effects are the same as invoking {@link #clear} and
 * then {@link #incrementAll(double[],int,int)}.</p>
 * <p>
 * Implementations may override this method with a more efficient and
 * possibly more accurate implementation that works directly with the
 * input array.</p>
 * <p>
 * If the array is null or the index parameters are not valid, an
 * MathIllegalArgumentException is thrown.</p></text>
      <param>values the input array</param>
      <param>begin the index of the first element to include</param>
      <param>length the number of elements to include</param>
      <return>the value of the statistic applied to the included array entries</return>
      <throws>MathIllegalArgumentException if the array is null or the indices are not valid</throws>
      <see>org.apache.commons.math3.stat.descriptive.UnivariateStatistic#evaluate(double[],int,int)</see>
    </javadoc>
    <method type="double" name="evaluate" startLine="91" endLine="97">
      <scope startLine="92" endLine="95" />
    </method>
    <method name="copy" type="StorelessUnivariateStatistic" startLine="99" endLine="103" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method name="clear" type="void" startLine="105" endLine="108" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method name="getResult" type="double" startLine="110" endLine="113" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method name="increment" type="void" startLine="115" endLine="118" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <javadoc>
      <text>* This default implementation just calls {@link #increment} in a loop over
 * the input array.
 * <p>
 * Throws IllegalArgumentException if the input values array is null.</p></text>
      <param>values values to add</param>
      <throws>MathIllegalArgumentException if values is null</throws>
      <see>org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic#incrementAll(double[])</see>
    </javadoc>
    <method type="void" name="incrementAll" startLine="130" endLine="135">
      <scope startLine="131" endLine="133" />
    </method>
    <javadoc>
      <text>* This default implementation just calls {@link #increment} in a loop over
 * the specified portion of the input array.
 * <p>
 * Throws IllegalArgumentException if the input values array is null.</p></text>
      <param>values  array holding values to add</param>
      <param>begin   index of the first array element to add</param>
      <param>length  number of array elements to add</param>
      <throws>MathIllegalArgumentException if values is null</throws>
      <see>org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic#incrementAll(double[],int,int)</see>
    </javadoc>
    <method type="void" name="incrementAll" startLine="149" endLine="156">
      <scope startLine="150" endLine="155">
        <declaration type="int" name="k" />
        <scope startLine="152" endLine="154" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns true iff <code>object</code> is an
 * <code>AbstractStorelessUnivariateStatistic</code> returning the same
 * values as this for <code>getResult()</code> and <code>getN()</code></text>
      <param>object object to test equality against.</param>
      <return>true if object returns the same value as this</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="166" endLine="176">
      <scope startLine="167" endLine="169" />
      <scope startLine="170" endLine="172" />
      <declaration type="AbstractStorelessUnivariateStatistic" name="stat" />
    </method>
    <javadoc>
      <text>* Returns hash code based on getResult() and getN()</text>
      <return>hash code</return>
    </javadoc>
    <method type="int" name="hashCode" startLine="184" endLine="186" />
  </class>
</source>
