<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="CholeskyDecomposition" startLine="24">
    <javadoc>
      <text>* Calculates the Cholesky decomposition of a matrix.
 * <p>The Cholesky decomposition of a real symmetric positive-definite
 * matrix A consists of a lower triangular matrix L with same size such
 * that: A = LL<sup>T</sup>. In a sense, this is the square root of A.</p>
 * <p>This class is based on the class with similar name from the
 * <a href="http://math.nist.gov/javanumerics/jama/">JAMA</a> library, with the
 * following changes:</p>
 * <ul>
 * <li>a {@link #getLT() getLT} method has been added,</li>
 * <li>the {@code isspd} method has been removed, since the constructor of
 * this class throws a {@link NonPositiveDefiniteMatrixException} when a
 * matrix cannot be decomposed,</li>
 * <li>a {@link #getDeterminant() getDeterminant} method has been added,</li>
 * <li>the {@code solve} method has been replaced by a {@link #getSolver()getSolver} method and the equivalent method provided by the returned{@link DecompositionSolver}.</li>
 * </ul></text>
      <see><a href="http://mathworld.wolfram.com/CholeskyDecomposition.html">MathWorld</a></see>
      <see><a href="http://en.wikipedia.org/wiki/Cholesky_decomposition">Wikipedia</a></see>
      <version>$Id: CholeskyDecomposition.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>2.0 (changed to concrete class in 3.0)</since>
    </javadoc>
    <javadoc>
      <text>* Default threshold above which off-diagonal elements are considered too different
 * and matrix not symmetric.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_RELATIVE_SYMMETRY_THRESHOLD" />
    <javadoc>
      <text>* Default threshold below which diagonal elements are considered null
 * and matrix not positive definite.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD" />
    <javadoc>
      <text>* Row-oriented storage for L<sup>T</sup> matrix data.</text>
    </javadoc>
    <declaration type="double[][]" name="lTData" />
    <javadoc>
      <text>* Cached value of L.</text>
    </javadoc>
    <declaration type="RealMatrix" name="cachedL" />
    <javadoc>
      <text>* Cached value of LT.</text>
    </javadoc>
    <declaration type="RealMatrix" name="cachedLT" />
    <javadoc>
      <text>* Calculates the Cholesky decomposition of the given matrix.
 * <p>
 * Calling this constructor is equivalent to call {@link #CholeskyDecomposition(RealMatrix,double,double)} with the
 * thresholds set to the default values {@link #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD} and {@link #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD}</p></text>
      <param>matrix the matrix to decompose</param>
      <throws>NonSquareMatrixException if the matrix is not square.</throws>
      <throws>NonSymmetricMatrixException if the matrix is not symmetric.</throws>
      <throws>NonPositiveDefiniteMatrixException if the matrix is not
 * strictly positive definite.</throws>
      <see>#CholeskyDecomposition(RealMatrix,double,double)</see>
      <see>#DEFAULT_RELATIVE_SYMMETRY_THRESHOLD</see>
      <see>#DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD</see>
    </javadoc>
    <method type="constructor" name="CholeskyDecomposition" startLine="84" endLine="87" />
    <javadoc>
      <text>* Calculates the Cholesky decomposition of the given matrix.</text>
      <param>matrix the matrix to decompose</param>
      <param>relativeSymmetryThreshold threshold above which off-diagonal
 * elements are considered too different and matrix not symmetric</param>
      <param>absolutePositivityThreshold threshold below which diagonal
 * elements are considered null and matrix not positive definite</param>
      <throws>NonSquareMatrixException if the matrix is not square.</throws>
      <throws>NonSymmetricMatrixException if the matrix is not symmetric.</throws>
      <throws>NonPositiveDefiniteMatrixException if the matrix is not
 * strictly positive definite.</throws>
      <see>#CholeskyDecomposition(RealMatrix)</see>
      <see>#DEFAULT_RELATIVE_SYMMETRY_THRESHOLD</see>
      <see>#DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD</see>
    </javadoc>
    <method type="constructor" name="CholeskyDecomposition" startLine="106" endLine="156">
      <scope startLine="107" endLine="110" />
      <declaration type="int" name="order" />
      <scope startLine="118" endLine="133">
        <declaration type="double[]" name="lI" />
        <scope startLine="122" endLine="132">
          <declaration type="double[]" name="lJ" />
          <declaration type="double" name="lIJ" />
          <declaration type="double" name="lJI" />
          <declaration type="double" name="maxDelta" />
          <scope startLine="128" endLine="130" />
        </scope>
        <comment>check off-diagonal elements (and reset them to 0)</comment>
      </scope>
      <scope startLine="136" endLine="155">
        <declaration type="double[]" name="ltI" />
        <scope startLine="141" endLine="143" />
        <declaration type="double" name="inverse" />
        <scope startLine="148" endLine="154">
          <declaration type="double[]" name="ltQ" />
          <scope startLine="151" endLine="153" />
        </scope>
        <comment>check diagonal element</comment>
      </scope>
      <comment>check the matrix before transformation</comment>
      <comment>transform the matrix</comment>
    </method>
    <javadoc>
      <text>* Returns the matrix L of the decomposition.
 * <p>L is an lower-triangular matrix</p></text>
      <return>the L matrix</return>
    </javadoc>
    <method type="RealMatrix" name="getL" startLine="163" endLine="168">
      <scope startLine="164" endLine="166" />
    </method>
    <javadoc>
      <text>* Returns the transpose of the matrix L of the decomposition.
 * <p>L<sup>T</sup> is an upper-triangular matrix</p></text>
      <return>the transpose of the matrix L of the decomposition</return>
    </javadoc>
    <method type="RealMatrix" name="getLT" startLine="175" endLine="183">
      <scope startLine="177" endLine="179" />
      <comment>return the cached matrix</comment>
    </method>
    <javadoc>
      <text>* Return the determinant of the matrix</text>
      <return>determinant of the matrix</return>
    </javadoc>
    <method type="double" name="getDeterminant" startLine="189" endLine="196">
      <declaration type="double" name="determinant" />
      <scope startLine="191" endLine="194">
        <declaration type="double" name="lTii" />
      </scope>
    </method>
    <javadoc>
      <text>* Get a solver for finding the A &times; X = B solution in least square sense.</text>
      <return>a solver</return>
    </javadoc>
    <method type="DecompositionSolver" name="getSolver" startLine="202" endLine="204" />
    <class name="Solver" startLine="206">
      <implements name="DecompositionSolver" />
      <javadoc>
        <text>* Specialized solver.</text>
      </javadoc>
      <javadoc>
        <text>* Row-oriented storage for L<sup>T</sup> matrix data.</text>
      </javadoc>
      <declaration type="double[][]" name="lTData" />
      <javadoc>
        <text>* Build a solver from decomposed matrix.</text>
        <param>lTData row-oriented storage for L<sup>T</sup> matrix data</param>
      </javadoc>
      <method type="constructor" name="Solver" startLine="215" endLine="217" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="boolean" name="isNonSingular" startLine="220" endLine="223">
        <comment>if we get this far, the matrix was positive definite, hence non-singular</comment>
      </method>
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="RealVector" name="solve" startLine="226" endLine="254">
        <declaration type="int" name="m" />
        <scope startLine="228" endLine="230" />
        <declaration type="double[]" name="x" />
        <scope startLine="235" endLine="242">
          <declaration type="double[]" name="lJ" />
          <declaration type="double" name="xJ" />
          <scope startLine="239" endLine="241" />
        </scope>
        <scope startLine="245" endLine="251">
          <declaration type="double" name="xJ" />
          <scope startLine="248" endLine="250" />
        </scope>
        <comment>Solve LY = b</comment>
        <comment>Solve LTX = Y</comment>
      </method>
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="RealMatrix" name="solve" startLine="257" endLine="300">
        <declaration type="int" name="m" />
        <scope startLine="259" endLine="261" />
        <declaration type="int" name="nColB" />
        <declaration type="double[][]" name="x" />
        <scope startLine="267" endLine="281">
          <declaration type="double[]" name="lJ" />
          <declaration type="double" name="lJJ" />
          <declaration type="double[]" name="xJ" />
          <scope startLine="271" endLine="273" />
          <scope startLine="274" endLine="280">
            <declaration type="double[]" name="xI" />
            <declaration type="double" name="lJI" />
            <scope startLine="277" endLine="279" />
          </scope>
        </scope>
        <scope startLine="284" endLine="297">
          <declaration type="double" name="lJJ" />
          <declaration type="double[]" name="xJ" />
          <scope startLine="287" endLine="289" />
          <scope startLine="290" endLine="296">
            <declaration type="double[]" name="xI" />
            <declaration type="double" name="lIJ" />
            <scope startLine="293" endLine="295" />
          </scope>
        </scope>
        <comment>Solve LY = b</comment>
        <comment>Solve LTX = Y</comment>
      </method>
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="RealMatrix" name="getInverse" startLine="303" endLine="305" />
    </class>
  </class>
</source>
