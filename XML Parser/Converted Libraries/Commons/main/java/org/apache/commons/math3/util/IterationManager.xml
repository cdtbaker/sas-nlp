<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.util">
  <import name="java.util.Collection" />
  <import name="java.util.concurrent.CopyOnWriteArrayList" />
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <class name="IterationManager" startLine="24">
    <javadoc>
      <text>* This abstract class provides a general framework for managing iterative
 * algorithms. The maximum number of iterations can be set, and methods are
 * provided to monitor the current iteration count. A lightweight event
 * framework is also provided.</text>
      <version>$Id: IterationManager.java 1422313 2012-12-15 18:53:41Z psteitz $</version>
    </javadoc>
    <javadoc>
      <text>* Keeps a count of the number of iterations.</text>
    </javadoc>
    <declaration type="Incrementor" name="iterations" />
    <javadoc>
      <text>* The collection of all listeners attached to this iterative algorithm.</text>
    </javadoc>
    <declaration type="Collection<IterationListener>" name="listeners" />
    <javadoc>
      <text>* Creates a new instance of this class.</text>
      <param>maxIterations the maximum number of iterations</param>
    </javadoc>
    <method type="constructor" name="IterationManager" startLine="45" endLine="48" />
    <javadoc>
      <text>* Creates a new instance of this class.</text>
      <param>maxIterations the maximum number of iterations</param>
      <param>callBack the function to be called when the maximum number of
 * iterations has been reached</param>
      <throws>org.apache.commons.math3.exception.NullArgumentException if {@code callBack} is {@code null}</throws>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="IterationManager" startLine="60" endLine="63" />
    <javadoc>
      <text>* Attaches a listener to this manager.</text>
      <param>listener A {@code IterationListener} object.</param>
    </javadoc>
    <method type="void" name="addIterationListener" startLine="70" endLine="72" />
    <javadoc>
      <text>* Informs all registered listeners that the initial phase (prior to the
 * main iteration loop) has been completed.</text>
      <param>e The {@link IterationEvent} object.</param>
    </javadoc>
    <method type="void" name="fireInitializationEvent" startLine="80" endLine="84">
      <scope startLine="81" endLine="83" />
    </method>
    <javadoc>
      <text>* Informs all registered listeners that a new iteration (in the main
 * iteration loop) has been performed.</text>
      <param>e The {@link IterationEvent} object.</param>
    </javadoc>
    <method type="void" name="fireIterationPerformedEvent" startLine="92" endLine="96">
      <scope startLine="93" endLine="95" />
    </method>
    <javadoc>
      <text>* Informs all registered listeners that a new iteration (in the main
 * iteration loop) has been started.</text>
      <param>e The {@link IterationEvent} object.</param>
    </javadoc>
    <method type="void" name="fireIterationStartedEvent" startLine="104" endLine="108">
      <scope startLine="105" endLine="107" />
    </method>
    <javadoc>
      <text>* Informs all registered listeners that the final phase (post-iterations)
 * has been completed.</text>
      <param>e The {@link IterationEvent} object.</param>
    </javadoc>
    <method type="void" name="fireTerminationEvent" startLine="116" endLine="120">
      <scope startLine="117" endLine="119" />
    </method>
    <javadoc>
      <text>* Returns the number of iterations of this solver, 0 if no iterations has
 * been performed yet.</text>
      <return>the number of iterations.</return>
    </javadoc>
    <method type="int" name="getIterations" startLine="128" endLine="130" />
    <javadoc>
      <text>* Returns the maximum number of iterations.</text>
      <return>the maximum number of iterations.</return>
    </javadoc>
    <method type="int" name="getMaxIterations" startLine="137" endLine="139" />
    <javadoc>
      <text>* Increments the iteration count by one, and throws an exception if the
 * maximum number of iterations is reached. This method should be called at
 * the beginning of a new iteration.</text>
      <throws>MaxCountExceededException if the maximum number of iterations is
 * reached.</throws>
    </javadoc>
    <method type="void" name="incrementIterationCount" startLine="150" endLine="152" />
    <javadoc>
      <text>* Removes the specified iteration listener from the list of listeners
 * currently attached to {@code this} object. Attempting to remove a
 * listener which was <em>not</em> previously registered does not cause any
 * error.</text>
      <param>listener The {@link IterationListener} to be removed.</param>
    </javadoc>
    <method type="void" name="removeIterationListener" startLine="162" endLine="164" />
    <javadoc>
      <text>* Sets the iteration count to 0. This method must be called during the
 * initial phase.</text>
    </javadoc>
    <method type="void" name="resetIterationCount" startLine="170" endLine="172" />
  </class>
</source>
