<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.integration.gauss">
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.util.Pair" />
  <class name="LegendreRuleFactory" extends="BaseRuleFactory<Double>" startLine="22">
    <javadoc>
      <text>* Factory that creates Gauss-type quadrature rule using Legendre polynomials.
 * In this implementation, the lower and upper bounds of the natural interval
 * of integration are -1 and 1, respectively.
 * The Legendre polynomials are evaluated using the recurrence relation
 * presented in <a href="http://en.wikipedia.org/wiki/Abramowitz_and_Stegun"
 * Abramowitz and Stegun, 1964</a>.</text>
      <since>3.1</since>
      <version>$Id: LegendreRuleFactory.java 1455194 2013-03-11 15:45:54Z luc $</version>
    </javadoc>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Pair<Double[],Double[]>" name="computeRule" startLine="37" endLine="140">
      <scope startLine="39" endLine="43">
        <comment>Break recursion.</comment>
      </scope>
      <declaration type="Double[]" name="previousPoints" />
      <declaration type="Double[]" name="points" />
      <declaration type="Double[]" name="weights" />
      <declaration type="int" name="iMax" />
      <scope startLine="56" endLine="122">
        <declaration type="double" name="a" />
        <declaration type="double" name="b" />
        <declaration type="double" name="pma" />
        <declaration type="double" name="pa" />
        <declaration type="double" name="pmb" />
        <declaration type="double" name="pb" />
        <scope startLine="69" endLine="80">
          <declaration type="int" name="two_j_p_1" />
          <declaration type="int" name="j_p_1" />
          <declaration type="double" name="ppa" />
          <declaration type="double" name="ppb" />
        </scope>
        <declaration type="double" name="c" />
        <declaration type="double" name="pmc" />
        <declaration type="double" name="pc" />
        <declaration type="boolean" name="done" />
        <scope startLine="89" endLine="112">
          <scope startLine="93" endLine="98">
            <declaration type="double" name="ppc" />
          </scope>
          <scope startLine="100" endLine="111">
            <scope startLine="101" endLine="105" />
            <scope startLine="105" endLine="109" />
          </scope>
        </scope>
        <declaration type="double" name="d" />
        <declaration type="double" name="w" />
        <declaration type="int" name="idx" />
        <comment>Lower-bound of the interval.</comment>
        <comment>Upper-bound of the interval.</comment>
        <comment>P[j-1](a)</comment>
        <comment>P[j](a)</comment>
        <comment>P[j-1](b)</comment>
        <comment>P[j](b)</comment>
        <comment>P[j+1](a)</comment>
        <comment>P[j+1](b)</comment>
        <comment>Now pa = P[n+1](a), and pma = P[n](a) (same holds for b).</comment>
        <comment>Middle of the interval.</comment>
        <comment>P[j-1](c)</comment>
        <comment>P[j](c)</comment>
        <comment>P[j+1](c)</comment>
        <comment>Now pc = P[n+1](c) and pmc = P[n](c).</comment>
      </scope>
      <scope startLine="127" endLine="137">
        <declaration type="double" name="pmc" />
        <scope startLine="129" endLine="131" />
        <declaration type="double" name="d" />
        <declaration type="double" name="w" />
      </scope>
      <comment>Get previous rule.</comment>
      <comment>If it has not been computed yet it will trigger a recursive call</comment>
      <comment>to this method.</comment>
      <comment>Compute next rule.</comment>
      <comment>Find i-th root of P[n+1] by bracketing.</comment>
      <comment>If "numberOfPoints" is odd, 0 is a root.</comment>
      <comment>Note: as written, the test for oddness will work for negative</comment>
      <comment>integers too (although it is not necessary here), preventing</comment>
      <comment>a FindBugs warning.</comment>
    </method>
  </class>
</source>
