<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization.univariate">
  <import name="java.util.Arrays" />
  <import name="java.util.Comparator" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.exception.MathIllegalStateException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.optimization.GoalType" />
  <import name="org.apache.commons.math3.optimization.ConvergenceChecker" />
  <class name="UnivariateMultiStartOptimizer" startLine="32">
    <implements name="BaseUnivariateOptimizer<FUNC>" />
    <javadoc>
      <text>* Special implementation of the {@link UnivariateOptimizer} interface
 * adding multi-start features to an existing optimizer.
 * This class wraps a classical optimizer to use it several times in
 * turn with different starting points in order to avoid being trapped
 * into a local extremum when looking for a global one.</text>
      <param><FUNC>
 *  Type of the objective function to be optimized.</param>
      <version>$Id: UnivariateMultiStartOptimizer.java 1422230 2012-12-15 12:11:13Z erans $</version>
      <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Underlying classical optimizer.</text>
    </javadoc>
    <declaration type="BaseUnivariateOptimizer<FUNC>" name="optimizer" />
    <javadoc>
      <text>* Maximal number of evaluations allowed.</text>
    </javadoc>
    <declaration type="int" name="maxEvaluations" />
    <javadoc>
      <text>* Number of evaluations already performed for all starts.</text>
    </javadoc>
    <declaration type="int" name="totalEvaluations" />
    <javadoc>
      <text>* Number of starts to go.</text>
    </javadoc>
    <declaration type="int" name="starts" />
    <javadoc>
      <text>* Random generator for multi-start.</text>
    </javadoc>
    <declaration type="RandomGenerator" name="generator" />
    <javadoc>
      <text>* Found optima.</text>
    </javadoc>
    <declaration type="UnivariatePointValuePair[]" name="optima" />
    <javadoc>
      <text>* Create a multi-start optimizer from a single-start optimizer.</text>
      <param>optimizer Single-start optimizer to wrap.</param>
      <param>starts Number of starts to perform. If {@code starts == 1},
 * the {@code optimize} methods will return the same solution as{@code optimizer} would.</param>
      <param>generator Random generator to use for restarts.</param>
      <throws>NullArgumentException if {@code optimizer} or {@code generator}is {@code null}.</throws>
      <throws>NotStrictlyPositiveException if {@code starts < 1}.</throws>
    </javadoc>
    <method type="constructor" name="UnivariateMultiStartOptimizer" startLine="76" endLine="88">
      <scope startLine="78" endLine="80" />
      <scope startLine="81" endLine="83" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="ConvergenceChecker<UnivariatePointValuePair>" name="getConvergenceChecker" startLine="93" endLine="95" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getMaxEvaluations" startLine="98" endLine="100" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getEvaluations" startLine="103" endLine="105" />
    <javadoc>
      <text>* Get all the optima found during the last call to {@link #optimize(int,UnivariateFunction,GoalType,double,double) optimize}.
 * The optimizer stores all the optima found during a set of
 * restarts. The {@link #optimize(int,UnivariateFunction,GoalType,double,double) optimize}method returns the best point only. This method returns all the points
 * found at the end of each starts, including the best one already
 * returned by the {@link #optimize(int,UnivariateFunction,GoalType,double,double) optimize}method.
 * <br/>
 * The returned array as one element for each start as specified
 * in the constructor. It is ordered with the results from the
 * runs that did converge first, sorted from best to worst
 * objective value (i.e in ascending order if minimizing and in
 * descending order if maximizing), followed by {@code null} elements
 * corresponding to the runs that did not converge. This means all
 * elements will be {@code null} if the {@link #optimize(int,UnivariateFunction,GoalType,double,double) optimize}method did throw an exception.
 * This also means that if the first element is not {@code null}, it is
 * the best point found across all starts.</text>
      <return>an array containing the optima.</return>
      <throws>MathIllegalStateException if {@link #optimize(int,UnivariateFunction,GoalType,double,double) optimize}has not been called.</throws>
    </javadoc>
    <method type="UnivariatePointValuePair[]" name="getOptima" startLine="134" endLine="139">
      <scope startLine="135" endLine="137" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="UnivariatePointValuePair" name="optimize" startLine="144" endLine="146" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="UnivariatePointValuePair" name="optimize" startLine="152" endLine="180">
      <declaration type="RuntimeException" name="lastException" />
      <scope startLine="158" endLine="170">
        <scope startLine="160" endLine="163">
          <declaration type="double" name="s" />
        </scope>
        <scope startLine="163" endLine="166" />
        <comment>CHECKSTYLE: stop IllegalCatch</comment>
        <comment>CHECKSTYLE: resume IllegalCatch</comment>
      </scope>
      <scope startLine="174" endLine="176">
        <comment>cannot be null if starts >=1</comment>
      </scope>
      <comment>Multi-start loop.</comment>
      <comment>Return the point with the best objective function value.</comment>
    </method>
    <javadoc>
      <text>* Sort the optima from best to worst, followed by {@code null} elements.</text>
      <param>goal Goal type.</param>
    </javadoc>
    <method type="void" name="sortPairs" startLine="187" endLine="202">
      <method type="int" name="compare" startLine="190" endLine="200">
        <scope startLine="191" endLine="193" />
        <scope startLine="193" endLine="195" />
        <declaration type="double" name="v1" />
        <declaration type="double" name="v2" />
      </method>
    </method>
  </class>
</source>
