<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.solvers">
  <import name="org.apache.commons.math3.complex.Complex" />
  <import name="org.apache.commons.math3.complex.ComplexUtils" />
  <import name="org.apache.commons.math3.analysis.polynomials.PolynomialFunction" />
  <import name="org.apache.commons.math3.exception.NoBracketingException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.NoDataException" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="LaguerreSolver" extends="AbstractPolynomialSolver" startLine="30">
    <javadoc>
      <text>* Implements the <a href="http://mathworld.wolfram.com/LaguerresMethod.html">
 * Laguerre's Method</a> for root finding of real coefficient polynomials.
 * For reference, see
 * <quote>
 * <b>A First Course in Numerical Analysis</b>
 * ISBN 048641454X, chapter 8.
 * </quote>
 * Laguerre's method is global in the sense that it can start with any initial
 * approximation and be able to solve all roots from that point.
 * The algorithm requires a bracketing condition.</text>
      <version>$Id: LaguerreSolver.java 1422195 2012-12-15 06:45:18Z psteitz $</version>
      <since>1.2</since>
    </javadoc>
    <javadoc>
      <text>* Default absolute accuracy.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_ABSOLUTE_ACCURACY" />
    <javadoc>
      <text>* Complex solver.</text>
    </javadoc>
    <declaration type="ComplexSolver" name="complexSolver" />
    <javadoc>
      <text>* Construct a solver with default accuracy (1e-6).</text>
    </javadoc>
    <method type="constructor" name="LaguerreSolver" startLine="54" endLine="56" />
    <javadoc>
      <text>* Construct a solver.</text>
      <param>absoluteAccuracy Absolute accuracy.</param>
    </javadoc>
    <method type="constructor" name="LaguerreSolver" startLine="62" endLine="64" />
    <javadoc>
      <text>* Construct a solver.</text>
      <param>relativeAccuracy Relative accuracy.</param>
      <param>absoluteAccuracy Absolute accuracy.</param>
    </javadoc>
    <method type="constructor" name="LaguerreSolver" startLine="72" endLine="74" />
    <javadoc>
      <text>* Construct a solver.</text>
      <param>relativeAccuracy Relative accuracy.</param>
      <param>absoluteAccuracy Absolute accuracy.</param>
      <param>functionValueAccuracy Function value accuracy.</param>
    </javadoc>
    <method type="constructor" name="LaguerreSolver" startLine="84" endLine="86" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="doSolve" startLine="95" endLine="132">
      <declaration type="double" name="min" />
      <declaration type="double" name="max" />
      <declaration type="double" name="initial" />
      <declaration type="double" name="functionValueAccuracy" />
      <declaration type="double" name="yInitial" />
      <scope startLine="105" endLine="107" />
      <declaration type="double" name="yMin" />
      <scope startLine="111" endLine="113" />
      <scope startLine="116" endLine="118" />
      <declaration type="double" name="yMax" />
      <scope startLine="122" endLine="124" />
      <scope startLine="127" endLine="129" />
      <comment>Return the initial guess if it is good enough.</comment>
      <comment>Return the first endpoint if it is good enough.</comment>
      <comment>Reduce interval if min and initial bracket the root.</comment>
      <comment>Return the second endpoint if it is good enough.</comment>
      <comment>Reduce interval if initial and max bracket the root.</comment>
    </method>
    <javadoc>
      <text>* Find a real root in the given interval.
 * Despite the bracketing condition, the root returned by{@link LaguerreSolver.ComplexSolver#solve(Complex[],Complex)} may
 * not be a real zero inside {@code [min, max]}.
 * For example, <code>p(x) = x<sup>3</sup> + 1,</code>
 * with {@code min = -2}, {@code max = 2}, {@code initial = 0}.
 * When it occurs, this code calls{@link LaguerreSolver.ComplexSolver#solveAll(Complex[],Complex)}in order to obtain all roots and picks up one real root.</text>
      <param>lo Lower bound of the search interval.</param>
      <param>hi Higher bound of the search interval.</param>
      <param>fLo Function value at the lower bound of the search interval.</param>
      <param>fHi Function value at the higher bound of the search interval.</param>
      <return>the point at which the function value is zero.</return>
      <deprecated>This method should not be part of the public API: It will
 * be made private in version 4.0.</deprecated>
    </javadoc>
    <method type="double" name="laguerre" startLine="156" endLine="175">
      <declaration type="Complex[]" name="c" />
      <declaration type="Complex" name="initial" />
      <declaration type="Complex" name="z" />
      <scope startLine="161" endLine="163" />
      <scope startLine="163" endLine="174">
        <declaration type="double" name="r" />
        <declaration type="Complex[]" name="root" />
        <scope startLine="167" endLine="172">
          <scope startLine="168" endLine="171" />
        </scope>
        <comment>Solve all roots and select the one we are seeking.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Find all complex roots for the polynomial with the given
 * coefficients, starting from the given initial value.
 * <br/>
 * Note: This method is not part of the API of {@link BaseUnivariateSolver}.</text>
      <param>coefficients Polynomial coefficients.</param>
      <param>initial Start value.</param>
      <return>the point at which the function value is zero.</return>
      <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximum number of evaluations is exceeded.</throws>
      <throws>NullArgumentException if the {@code coefficients} is{@code null}.</throws>
      <throws>NoDataException if the {@code coefficients} array is empty.</throws>
      <since>3.1</since>
    </javadoc>
    <method type="Complex[]" name="solveAllComplex" startLine="197" endLine="205" />
    <javadoc>
      <text>* Find a complex root for the polynomial with the given coefficients,
 * starting from the given initial value.
 * <br/>
 * Note: This method is not part of the API of {@link BaseUnivariateSolver}.</text>
      <param>coefficients Polynomial coefficients.</param>
      <param>initial Start value.</param>
      <return>the point at which the function value is zero.</return>
      <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximum number of evaluations is exceeded.</throws>
      <throws>NullArgumentException if the {@code coefficients} is{@code null}.</throws>
      <throws>NoDataException if the {@code coefficients} array is empty.</throws>
      <since>3.1</since>
    </javadoc>
    <method type="Complex" name="solveComplex" startLine="227" endLine="235" />
    <class name="ComplexSolver" startLine="237">
      <javadoc>
        <text>* Class for searching all (complex) roots.</text>
      </javadoc>
      <javadoc>
        <text>* Check whether the given complex root is actually a real zero
 * in the given interval, within the solver tolerance level.</text>
        <param>min Lower bound for the interval.</param>
        <param>max Upper bound for the interval.</param>
        <param>z Complex root.</param>
        <return>{@code true} if z is a real zero.</return>
      </javadoc>
      <method type="boolean" name="isRoot" startLine="250" endLine="257">
        <scope startLine="251" endLine="255">
          <declaration type="double" name="tolerance" />
        </scope>
      </method>
      <javadoc>
        <text>* Find all complex roots for the polynomial with the given
 * coefficients, starting from the given initial value.</text>
        <param>coefficients Polynomial coefficients.</param>
        <param>initial Start value.</param>
        <return>the point at which the function value is zero.</return>
        <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximum number of evaluations is exceeded.</throws>
        <throws>NullArgumentException if the {@code coefficients} is{@code null}.</throws>
        <throws>NoDataException if the {@code coefficients} array is empty.</throws>
      </javadoc>
      <method type="Complex[]" name="solveAll" startLine="275" endLine="306">
        <scope startLine="276" endLine="278" />
        <declaration type="int" name="n" />
        <scope startLine="280" endLine="282" />
        <declaration type="Complex[]" name="c" />
        <scope startLine="285" endLine="287" />
        <declaration type="Complex[]" name="root" />
        <scope startLine="291" endLine="303">
          <declaration type="Complex[]" name="subarray" />
          <declaration type="Complex" name="newc" />
          <declaration type="Complex" name="oldc" />
          <scope startLine="298" endLine="302" />
          <comment>Polynomial deflation using synthetic division.</comment>
        </scope>
        <comment>Coefficients for deflated polynomial.</comment>
        <comment>Solve individual roots successively.</comment>
      </method>
      <javadoc>
        <text>* Find a complex root for the polynomial with the given coefficients,
 * starting from the given initial value.</text>
        <param>coefficients Polynomial coefficients.</param>
        <param>initial Start value.</param>
        <return>the point at which the function value is zero.</return>
        <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximum number of evaluations is exceeded.</throws>
        <throws>NullArgumentException if the {@code coefficients} is{@code null}.</throws>
        <throws>NoDataException if the {@code coefficients} array is empty.</throws>
      </javadoc>
      <method type="Complex" name="solve" startLine="324" endLine="389">
        <scope startLine="325" endLine="327" />
        <declaration type="int" name="n" />
        <scope startLine="330" endLine="332" />
        <declaration type="double" name="absoluteAccuracy" />
        <declaration type="double" name="relativeAccuracy" />
        <declaration type="double" name="functionValueAccuracy" />
        <declaration type="Complex" name="nC" />
        <declaration type="Complex" name="n1C" />
        <declaration type="Complex" name="z" />
        <declaration type="Complex" name="oldz" />
        <scope startLine="344" endLine="388">
          <declaration type="Complex" name="pv" />
          <declaration type="Complex" name="dv" />
          <declaration type="Complex" name="d2v" />
          <scope startLine="350" endLine="354" />
          <declaration type="double" name="tolerance" />
          <scope startLine="360" endLine="362" />
          <scope startLine="363" endLine="365" />
          <declaration type="Complex" name="G" />
          <declaration type="Complex" name="G2" />
          <declaration type="Complex" name="H" />
          <declaration type="Complex" name="delta" />
          <declaration type="Complex" name="deltaSqrt" />
          <declaration type="Complex" name="dplus" />
          <declaration type="Complex" name="dminus" />
          <declaration type="Complex" name="denominator" />
          <scope startLine="379" endLine="383" />
          <scope startLine="383" endLine="386" />
          <comment>Compute pv (polynomial value), dv (derivative value), and</comment>
          <comment>d2v (second derivative value) simultaneously.</comment>
          <comment>Check for convergence.</comment>
          <comment>Now pv != 0, calculate the new approximation.</comment>
          <comment>Choose a denominator larger in magnitude.</comment>
          <comment>Perturb z if denominator is zero, for instance,</comment>
          <comment>p(x) = x^3 + 1, z = 0.</comment>
        </scope>
      </method>
    </class>
  </class>
</source>
