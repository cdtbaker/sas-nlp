<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.ode.sampling">
  <class name="DummyStepHandler" startLine="20">
    <implements name="StepHandler" />
    <javadoc>
      <text>* This class is a step handler that does nothing.
 * <p>This class is provided as a convenience for users who are only
 * interested in the final state of an integration and not in the
 * intermediate steps. Its handleStep method does nothing.</p>
 * <p>Since this class has no internal state, it is implemented using
 * the Singleton design pattern. This means that only one instance is
 * ever created, which can be retrieved using the getInstance
 * method. This explains why there is no public constructor.</p></text>
      <see>StepHandler</see>
      <version>$Id: DummyStepHandler.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>1.2</since>
    </javadoc>
    <javadoc>
      <text>* Private constructor.
 * The constructor is private to prevent users from creating
 * instances (Singleton design-pattern).</text>
    </javadoc>
    <method type="constructor" name="DummyStepHandler" startLine="43" endLine="44" />
    <javadoc>
      <text>* Get the only instance.</text>
      <return>the only instance</return>
    </javadoc>
    <method type="DummyStepHandler" name="getInstance" startLine="49" endLine="51" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="init" startLine="54" endLine="55" />
    <javadoc>
      <text>* Handle the last accepted step.
 * This method does nothing in this class.</text>
      <param>interpolator interpolator for the last accepted step. For
 * efficiency purposes, the various integrators reuse the same
 * object on each call, so if the instance wants to keep it across
 * all calls (for example to provide at the end of the integration a
 * continuous model valid throughout the integration range), it
 * should build a local copy using the clone method and store this
 * copy.</param>
      <param>isLast true if the step is the last one</param>
    </javadoc>
    <method type="void" name="handleStep" startLine="69" endLine="70" />
    <class name="LazyHolder" startLine="73">
      <javadoc>
        <text>* Holder for the instance.
 * <p>We use here the Initialization On Demand Holder Idiom.</p></text>
      </javadoc>
      <javadoc>
        <text>* Cached field instance.</text>
      </javadoc>
      <declaration type="DummyStepHandler" name="INSTANCE" />
      <javadoc>
        <text>* Handle deserialization of the singleton.</text>
        <return>the singleton instance</return>
      </javadoc>
      <method type="Object" name="readResolve" startLine="85" endLine="88">
        <comment>return the singleton instance</comment>
      </method>
    </class>
    <comment>CHECKSTYLE: stop HideUtilityClassConstructor</comment>
    <comment>CHECKSTYLE: resume HideUtilityClassConstructor</comment>
  </class>
</source>
