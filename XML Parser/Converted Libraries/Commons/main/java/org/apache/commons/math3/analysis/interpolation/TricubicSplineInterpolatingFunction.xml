<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.interpolation">
  <import name="org.apache.commons.math3.analysis.TrivariateFunction" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NoDataException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.NonMonotonicSequenceException" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <class name="TricubicSplineInterpolatingFunction" startLine="26">
    <implements name="TrivariateFunction" />
    <javadoc>
      <text>* Function that implements the
 * <a href="http://en.wikipedia.org/wiki/Tricubic_interpolation">
 * tricubic spline interpolation</a>, as proposed in
 * <quote>
 * Tricubic interpolation in three dimensions<br/>
 * F. Lekien and J. Marsden<br/>
 * <em>Int. J. Numer. Meth. Engng</em> 2005; <b>63</b>:455-471
 * </quote></text>
      <since>2.2</since>
      <version>$Id: TricubicSplineInterpolatingFunction.java 1385314 2012-09-16 16:35:49Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Matrix to compute the spline coefficients from the function values
 * and function derivatives values</text>
    </javadoc>
    <declaration type="double[][]" name="AINV" />
    <javadoc>
      <text>* Samples x-coordinates</text>
    </javadoc>
    <declaration type="double[]" name="xval" />
    <javadoc>
      <text>* Samples y-coordinates</text>
    </javadoc>
    <declaration type="double[]" name="yval" />
    <javadoc>
      <text>* Samples z-coordinates</text>
    </javadoc>
    <declaration type="double[]" name="zval" />
    <javadoc>
      <text>* Set of cubic splines pacthing the whole data grid</text>
    </javadoc>
    <declaration type="TricubicSplineFunction[][][]" name="splines" />
    <javadoc>
      <param>x Sample values of the x-coordinate, in increasing order.</param>
      <param>y Sample values of the y-coordinate, in increasing order.</param>
      <param>z Sample values of the y-coordinate, in increasing order.</param>
      <param>f Values of the function on every grid point.</param>
      <param>dFdX Values of the partial derivative of function with respect to x on every grid point.</param>
      <param>dFdY Values of the partial derivative of function with respect to y on every grid point.</param>
      <param>dFdZ Values of the partial derivative of function with respect to z on every grid point.</param>
      <param>d2FdXdY Values of the cross partial derivative of function on every grid point.</param>
      <param>d2FdXdZ Values of the cross partial derivative of function on every grid point.</param>
      <param>d2FdYdZ Values of the cross partial derivative of function on every grid point.</param>
      <param>d3FdXdYdZ Values of the cross partial derivative of function on every grid point.</param>
      <throws>NoDataException if any of the arrays has zero length.</throws>
      <throws>DimensionMismatchException if the various arrays do not contain the expected number of elements.</throws>
      <throws>NonMonotonicSequenceException if {@code x}, {@code y} or {@code z} are not strictly increasing.</throws>
    </javadoc>
    <method type="constructor" name="TricubicSplineInterpolatingFunction" startLine="150" endLine="299">
      <declaration type="int" name="xLen" />
      <declaration type="int" name="yLen" />
      <declaration type="int" name="zLen" />
      <scope startLine="155" endLine="157" />
      <scope startLine="158" endLine="160" />
      <scope startLine="161" endLine="163" />
      <scope startLine="164" endLine="166" />
      <scope startLine="167" endLine="169" />
      <scope startLine="170" endLine="172" />
      <scope startLine="173" endLine="175" />
      <scope startLine="176" endLine="178" />
      <scope startLine="179" endLine="181" />
      <declaration type="int" name="lastI" />
      <declaration type="int" name="lastJ" />
      <declaration type="int" name="lastK" />
      <scope startLine="196" endLine="298">
        <scope startLine="197" endLine="199" />
        <scope startLine="200" endLine="202" />
        <scope startLine="203" endLine="205" />
        <scope startLine="206" endLine="208" />
        <scope startLine="209" endLine="211" />
        <scope startLine="212" endLine="214" />
        <scope startLine="215" endLine="217" />
        <scope startLine="218" endLine="220" />
        <declaration type="int" name="ip1" />
        <scope startLine="223" endLine="297">
          <scope startLine="224" endLine="226" />
          <scope startLine="227" endLine="229" />
          <scope startLine="230" endLine="232" />
          <scope startLine="233" endLine="235" />
          <scope startLine="236" endLine="238" />
          <scope startLine="239" endLine="241" />
          <scope startLine="242" endLine="244" />
          <scope startLine="245" endLine="247" />
          <declaration type="int" name="jp1" />
          <scope startLine="250" endLine="296">
            <declaration type="int" name="kp1" />
            <declaration type="double[][]" name="beta" />
          </scope>
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <throws>OutOfRangeException if any of the variables is outside its interpolation range.</throws>
    </javadoc>
    <method type="double" name="value" startLine="307" endLine="326">
      <declaration type="int" name="i" />
      <scope startLine="309" endLine="311" />
      <declaration type="int" name="j" />
      <scope startLine="313" endLine="315" />
      <declaration type="int" name="k" />
      <scope startLine="317" endLine="319" />
      <declaration type="double" name="xN" />
      <declaration type="double" name="yN" />
      <declaration type="double" name="zN" />
    </method>
    <javadoc>
      <param>c Coordinate.</param>
      <param>val Coordinate samples.</param>
      <return>the index in {@code val} corresponding to the interval containing {@code c}, or {@code -1}if {@code c} is out of the range defined by the end values of {@code val}.</return>
    </javadoc>
    <method type="int" name="searchIndex" startLine="334" endLine="347">
      <scope startLine="335" endLine="337" />
      <declaration type="int" name="max" />
      <scope startLine="340" endLine="344">
        <scope startLine="341" endLine="343" />
      </scope>
    </method>
    <javadoc>
      <text>* Compute the spline coefficients from the list of function values and
 * function partial derivatives values at the four corners of a grid
 * element. They must be specified in the following order:
 * <ul>
 * <li>f(0,0,0)</li>
 * <li>f(1,0,0)</li>
 * <li>f(0,1,0)</li>
 * <li>f(1,1,0)</li>
 * <li>f(0,0,1)</li>
 * <li>f(1,0,1)</li>
 * <li>f(0,1,1)</li>
 * <li>f(1,1,1)</li>
 * <li>f<sub>x</sub>(0,0,0)</li>
 * <li>... <em>(same order as above)</em></li>
 * <li>f<sub>x</sub>(1,1,1)</li>
 * <li>f<sub>y</sub>(0,0,0)</li>
 * <li>... <em>(same order as above)</em></li>
 * <li>f<sub>y</sub>(1,1,1)</li>
 * <li>f<sub>z</sub>(0,0,0)</li>
 * <li>... <em>(same order as above)</em></li>
 * <li>f<sub>z</sub>(1,1,1)</li>
 * <li>f<sub>xy</sub>(0,0,0)</li>
 * <li>... <em>(same order as above)</em></li>
 * <li>f<sub>xy</sub>(1,1,1)</li>
 * <li>f<sub>xz</sub>(0,0,0)</li>
 * <li>... <em>(same order as above)</em></li>
 * <li>f<sub>xz</sub>(1,1,1)</li>
 * <li>f<sub>yz</sub>(0,0,0)</li>
 * <li>... <em>(same order as above)</em></li>
 * <li>f<sub>yz</sub>(1,1,1)</li>
 * <li>f<sub>xyz</sub>(0,0,0)</li>
 * <li>... <em>(same order as above)</em></li>
 * <li>f<sub>xyz</sub>(1,1,1)</li>
 * </ul>
 * where the subscripts indicate the partial derivative with respect to
 * the corresponding variable(s).</text>
      <param>beta List of function values and function partial derivatives values.</param>
      <return>the spline coefficients.</return>
    </javadoc>
    <method type="double[]" name="computeSplineCoefficients" startLine="397" endLine="411">
      <declaration type="int" name="sz" />
      <declaration type="double[]" name="a" />
      <scope startLine="401" endLine="408">
        <declaration type="double" name="result" />
        <declaration type="double[]" name="row" />
        <scope startLine="404" endLine="406" />
      </scope>
    </method>
    <class name="TricubicSplineFunction" startLine="414">
      <implements name="TrivariateFunction" />
      <javadoc>
        <text>* 3D-spline function.</text>
        <version>$Id: TricubicSplineInterpolatingFunction.java 1385314 2012-09-16 16:35:49Z tn $</version>
      </javadoc>
      <javadoc>
        <text>* Number of points.</text>
      </javadoc>
      <declaration type="short" name="N" />
      <javadoc>
        <text>* Coefficients</text>
      </javadoc>
      <declaration type="double[][][]" name="a" />
      <javadoc>
        <param>aV List of spline coefficients.</param>
      </javadoc>
      <method type="constructor" name="TricubicSplineFunction" startLine="429" endLine="437">
        <scope startLine="430" endLine="436">
          <scope startLine="431" endLine="435">
            <scope startLine="432" endLine="434" />
          </scope>
        </scope>
      </method>
      <javadoc>
        <param>x x-coordinate of the interpolation point.</param>
        <param>y y-coordinate of the interpolation point.</param>
        <param>z z-coordinate of the interpolation point.</param>
        <return>the interpolated value.</return>
        <throws>OutOfRangeException if {@code x}, {@code y} or{@code z} are not in the interval {@code [0, 1]}.</throws>
      </javadoc>
      <method type="double" name="value" startLine="448" endLine="481">
        <scope startLine="449" endLine="451" />
        <scope startLine="452" endLine="454" />
        <scope startLine="455" endLine="457" />
        <declaration type="double" name="x2" />
        <declaration type="double" name="x3" />
        <declaration type="double[]" name="pX" />
        <declaration type="double" name="y2" />
        <declaration type="double" name="y3" />
        <declaration type="double[]" name="pY" />
        <declaration type="double" name="z2" />
        <declaration type="double" name="z3" />
        <declaration type="double[]" name="pZ" />
        <declaration type="double" name="result" />
        <scope startLine="472" endLine="478">
          <scope startLine="473" endLine="477">
            <scope startLine="474" endLine="476" />
          </scope>
        </scope>
      </method>
    </class>
  </class>
</source>
