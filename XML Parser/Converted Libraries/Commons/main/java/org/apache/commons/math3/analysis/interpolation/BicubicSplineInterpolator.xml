<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.interpolation">
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NoDataException" />
  <import name="org.apache.commons.math3.exception.NonMonotonicSequenceException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <class name="BicubicSplineInterpolator" startLine="27">
    <implements name="BivariateGridInterpolator" />
    <javadoc>
      <text>* Generates a bicubic interpolating function.</text>
      <version>$Id: BicubicSplineInterpolator.java 1455194 2013-03-11 15:45:54Z luc $</version>
      <since>2.2</since>
    </javadoc>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="BicubicSplineInterpolatingFunction" name="interpolate" startLine="42" endLine="122">
      <scope startLine="43" endLine="45" />
      <scope startLine="46" endLine="48" />
      <declaration type="int" name="xLen" />
      <declaration type="int" name="yLen" />
      <declaration type="double[][]" name="fX" />
      <scope startLine="61" endLine="69">
        <scope startLine="62" endLine="64" />
        <scope startLine="66" endLine="68" />
      </scope>
      <declaration type="SplineInterpolator" name="spInterpolator" />
      <declaration type="PolynomialSplineFunction[]" name="ySplineX" />
      <scope startLine="76" endLine="78" />
      <declaration type="PolynomialSplineFunction[]" name="xSplineY" />
      <scope startLine="83" endLine="85" />
      <declaration type="double[][]" name="dFdX" />
      <scope startLine="89" endLine="94">
        <declaration type="UnivariateFunction" name="f" />
        <scope startLine="91" endLine="93" />
      </scope>
      <declaration type="double[][]" name="dFdY" />
      <scope startLine="98" endLine="103">
        <declaration type="UnivariateFunction" name="f" />
        <scope startLine="100" endLine="102" />
      </scope>
      <declaration type="double[][]" name="d2FdXdY" />
      <scope startLine="107" endLine="117">
        <declaration type="int" name="nI" />
        <declaration type="int" name="pI" />
        <scope startLine="110" endLine="116">
          <declaration type="int" name="nJ" />
          <declaration type="int" name="pJ" />
        </scope>
      </scope>
      <comment>Samples (first index is y-coordinate, i.e. subarray variable is x)</comment>
      <comment>0 <= i < xval.length</comment>
      <comment>0 <= j < yval.length</comment>
      <comment>fX[j][i] = f(xval[i], yval[j])</comment>
      <comment>For each line y[j] (0 <= j < yLen), construct a 1D spline with</comment>
      <comment>respect to variable x</comment>
      <comment>For each line x[i] (0 <= i < xLen), construct a 1D spline with</comment>
      <comment>respect to variable y generated by array fY_1[i]</comment>
      <comment>Partial derivatives with respect to x at the grid knots</comment>
      <comment>Partial derivatives with respect to y at the grid knots</comment>
      <comment>Cross partial derivatives</comment>
      <comment>Create the interpolating splines</comment>
    </method>
    <javadoc>
      <text>* Computes the next index of an array, clipping if necessary.
 * It is assumed (but not checked) that {@code i >= 0}.</text>
      <param>i Index.</param>
      <param>max Upper limit of the array.</param>
      <return>the next index.</return>
    </javadoc>
    <method type="int" name="nextIndex" startLine="132" endLine="135">
      <declaration type="int" name="index" />
    </method>
    <javadoc>
      <text>* Computes the previous index of an array, clipping if necessary.
 * It is assumed (but not checked) that {@code i} is smaller than the size
 * of the array.</text>
      <param>i Index.</param>
      <return>the previous index.</return>
    </javadoc>
    <method type="int" name="previousIndex" startLine="144" endLine="147">
      <declaration type="int" name="index" />
    </method>
  </class>
</source>
