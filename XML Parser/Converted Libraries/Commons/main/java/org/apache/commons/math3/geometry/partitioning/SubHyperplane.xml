<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.geometry.partitioning">
  <import name="org.apache.commons.math3.geometry.Space" />
  <interface name="SubHyperplane" startLine="21">
    <javadoc>
      <text>* This interface represents the remaining parts of an hyperplane after
 * other parts have been chopped off.
 * <p>sub-hyperplanes are obtained when parts of an {@link Hyperplane hyperplane} are chopped off by other hyperplanes that
 * intersect it. The remaining part is a convex region. Such objects
 * appear in {@link BSPTree BSP trees} as the intersection of a cut
 * hyperplane with the convex region which it splits, the chopping
 * hyperplanes are the cut hyperplanes closer to the tree root.</p></text>
      <param><S>
 *  Type of the embedding space.</param>
      <version>$Id: SubHyperplane.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <method name="copySelf" type="SubHyperplane<S>" startLine="38" endLine="45" />
    <javadoc>
      <text>* Copy the instance.
 * <p>The instance created is completely independent of the original
 * one. A deep copy is used, none of the underlying objects are
 * shared (except for the nodes attributes and immutable
 * objects).</p></text>
      <return>a new sub-hyperplane, copy of the instance</return>
    </javadoc>
    <method name="getHyperplane" type="Hyperplane<S>" startLine="47" endLine="50" />
    <javadoc>
      <text>* Get the underlying hyperplane.</text>
      <return>underlying hyperplane</return>
    </javadoc>
    <method name="isEmpty" type="boolean" startLine="52" endLine="55" />
    <javadoc>
      <text>* Check if the instance is empty.</text>
      <return>true if the instance is empty</return>
    </javadoc>
    <method name="getSize" type="double" startLine="57" endLine="61" />
    <javadoc>
      <text>* Get the size of the instance.</text>
      <return>the size of the instance (this is a length in 1D, an area
 * in 2D, a volume in 3D ...)</return>
    </javadoc>
    <method name="side" type="Side" startLine="63" endLine="69" />
    <javadoc>
      <text>* Compute the relative position of the instance with respect
 * to an hyperplane.</text>
      <param>hyperplane hyperplane to check instance against</param>
      <return>one of {@link Side#PLUS}, {@link Side#MINUS}, {@link Side#BOTH},{@link Side#HYPER}</return>
    </javadoc>
    <method name="split" type="SplitSubHyperplane<S>" startLine="71" endLine="77" />
    <javadoc>
      <text>* Split the instance in two parts by an hyperplane.</text>
      <param>hyperplane splitting hyperplane</param>
      <return>an object containing both the part of the instance
 * on the plus side of the instance and the part of the
 * instance on the minus side of the instance</return>
    </javadoc>
    <method name="reunite" type="SubHyperplane<S>" startLine="79" endLine="84" />
    <javadoc>
      <text>* Compute the union of the instance and another sub-hyperplane.</text>
      <param>other other sub-hyperplane to union (<em>must</em> be in the
 * same hyperplane as the instance)</param>
      <return>a new sub-hyperplane, union of the instance and other</return>
    </javadoc>
    <class name="SplitSubHyperplane" startLine="86">
      <javadoc>
        <text>* Class holding the results of the {@link #split split} method.</text>
        <param><U>
 *  Type of the embedding space.</param>
      </javadoc>
      <javadoc>
        <text>* Part of the sub-hyperplane on the plus side of the splitting hyperplane.</text>
      </javadoc>
      <declaration type="SubHyperplane<U>" name="plus" />
      <javadoc>
        <text>* Part of the sub-hyperplane on the minus side of the splitting hyperplane.</text>
      </javadoc>
      <declaration type="SubHyperplane<U>" name="minus" />
      <javadoc>
        <text>* Build a SplitSubHyperplane from its parts.</text>
        <param>plus part of the sub-hyperplane on the plus side of the
 * splitting hyperplane</param>
        <param>minus part of the sub-hyperplane on the minus side of the
 * splitting hyperplane</param>
      </javadoc>
      <method type="constructor" name="SplitSubHyperplane" startLine="104" endLine="107" />
      <javadoc>
        <text>* Get the part of the sub-hyperplane on the plus side of the splitting hyperplane.</text>
        <return>part of the sub-hyperplane on the plus side of the splitting hyperplane</return>
      </javadoc>
      <method type="SubHyperplane<U>" name="getPlus" startLine="112" endLine="114" />
      <javadoc>
        <text>* Get the part of the sub-hyperplane on the minus side of the splitting hyperplane.</text>
        <return>part of the sub-hyperplane on the minus side of the splitting hyperplane</return>
      </javadoc>
      <method type="SubHyperplane<U>" name="getMinus" startLine="119" endLine="121" />
    </class>
  </interface>
</source>
