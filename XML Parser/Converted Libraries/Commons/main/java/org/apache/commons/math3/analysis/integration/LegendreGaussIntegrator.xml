<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.integration">
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="LegendreGaussIntegrator" extends="BaseAbstractUnivariateIntegrator" startLine="27">
    <javadoc>
      <text>* Implements the <a href="http://mathworld.wolfram.com/Legendre-GaussQuadrature.html">
 * Legendre-Gauss</a> quadrature formula.
 * <p>
 * Legendre-Gauss integrators are efficient integrators that can
 * accurately integrate functions with few function evaluations. A
 * Legendre-Gauss integrator using an n-points quadrature formula can
 * integrate 2n-1 degree polynomials exactly.
 * </p>
 * <p>
 * These integrators evaluate the function on n carefully chosen
 * abscissas in each step interval (mapped to the canonical [-1,1] interval).
 * The evaluation abscissas are not evenly spaced and none of them are
 * at the interval endpoints. This implies the function integrated can be
 * undefined at integration interval endpoints.
 * </p>
 * <p>
 * The evaluation abscissas x<sub>i</sub> are the roots of the degree n
 * Legendre polynomial. The weights a<sub>i</sub> of the quadrature formula
 * integrals from -1 to +1 &int; Li<sup>2</sup> where Li (x) =
 * &prod; (x-x<sub>k</sub>)/(x<sub>i</sub>-x<sub>k</sub>) for k != i.
 * </p>
 * <p></text>
      <version>$Id: LegendreGaussIntegrator.java 1455194 2013-03-11 15:45:54Z luc $</version>
      <since>1.2</since>
      <deprecated>As of 3.1 (to be removed in 4.0). Please use{@link IterativeLegendreGaussIntegrator} instead.</deprecated>
    </javadoc>
    <javadoc>
      <text>* Abscissas for the 2 points method.</text>
    </javadoc>
    <declaration type="double[]" name="ABSCISSAS_2" />
    <javadoc>
      <text>* Weights for the 2 points method.</text>
    </javadoc>
    <declaration type="double[]" name="WEIGHTS_2" />
    <javadoc>
      <text>* Abscissas for the 3 points method.</text>
    </javadoc>
    <declaration type="double[]" name="ABSCISSAS_3" />
    <javadoc>
      <text>* Weights for the 3 points method.</text>
    </javadoc>
    <declaration type="double[]" name="WEIGHTS_3" />
    <javadoc>
      <text>* Abscissas for the 4 points method.</text>
    </javadoc>
    <declaration type="double[]" name="ABSCISSAS_4" />
    <javadoc>
      <text>* Weights for the 4 points method.</text>
    </javadoc>
    <declaration type="double[]" name="WEIGHTS_4" />
    <javadoc>
      <text>* Abscissas for the 5 points method.</text>
    </javadoc>
    <declaration type="double[]" name="ABSCISSAS_5" />
    <javadoc>
      <text>* Weights for the 5 points method.</text>
    </javadoc>
    <declaration type="double[]" name="WEIGHTS_5" />
    <javadoc>
      <text>* Abscissas for the current method.</text>
    </javadoc>
    <declaration type="double[]" name="abscissas" />
    <javadoc>
      <text>* Weights for the current method.</text>
    </javadoc>
    <declaration type="double[]" name="weights" />
    <javadoc>
      <text>* Build a Legendre-Gauss integrator with given accuracies and iterations counts.</text>
      <param>n number of points desired (must be between 2 and 5 inclusive)</param>
      <param>relativeAccuracy relative accuracy of the result</param>
      <param>absoluteAccuracy absolute accuracy of the result</param>
      <param>minimalIterationCount minimum number of iterations</param>
      <param>maximalIterationCount maximum number of iterations</param>
      <exception>MathIllegalArgumentException if number of points is out of [2; 5]</exception>
      <exception>NotStrictlyPositiveException if minimal number of iterations
 * is not strictly positive</exception>
      <exception>NumberIsTooSmallException if maximal number of iterations
 * is lesser than or equal to the minimal number of iterations</exception>
    </javadoc>
    <method type="constructor" name="LegendreGaussIntegrator" startLine="142" endLine="167" />
    <javadoc>
      <text>* Build a Legendre-Gauss integrator with given accuracies.</text>
      <param>n number of points desired (must be between 2 and 5 inclusive)</param>
      <param>relativeAccuracy relative accuracy of the result</param>
      <param>absoluteAccuracy absolute accuracy of the result</param>
      <exception>MathIllegalArgumentException if number of points is out of [2; 5]</exception>
    </javadoc>
    <method type="constructor" name="LegendreGaussIntegrator" startLine="179" endLine="182" />
    <javadoc>
      <text>* Build a Legendre-Gauss integrator with given iteration counts.</text>
      <param>n number of points desired (must be between 2 and 5 inclusive)</param>
      <param>minimalIterationCount minimum number of iterations</param>
      <param>maximalIterationCount maximum number of iterations</param>
      <exception>MathIllegalArgumentException if number of points is out of [2; 5]</exception>
      <exception>NotStrictlyPositiveException if minimal number of iterations
 * is not strictly positive</exception>
      <exception>NumberIsTooSmallException if maximal number of iterations
 * is lesser than or equal to the minimal number of iterations</exception>
    </javadoc>
    <method type="constructor" name="LegendreGaussIntegrator" startLine="198" endLine="201" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="doIntegrate" startLine="206" endLine="236">
      <declaration type="double" name="oldt" />
      <declaration type="int" name="n" />
      <scope startLine="212" endLine="234">
        <declaration type="double" name="t" />
        <declaration type="double" name="delta" />
        <declaration type="double" name="limit" />
        <scope startLine="224" endLine="226" />
        <declaration type="double" name="ratio" />
        <comment>improve integral with a larger number of steps</comment>
        <comment>estimate error</comment>
        <comment>check convergence</comment>
        <comment>prepare next iteration</comment>
      </scope>
      <comment>compute first estimate with a single step</comment>
    </method>
    <javadoc>
      <text>* Compute the n-th stage integral.</text>
      <param>n number of steps</param>
      <return>the value of n-th stage integral</return>
      <throws>TooManyEvaluationsException if the maximum number of evaluations
 * is exceeded.</throws>
    </javadoc>
    <method type="double" name="stage" startLine="246" endLine="264">
      <declaration type="double" name="step" />
      <declaration type="double" name="halfStep" />
      <declaration type="double" name="midPoint" />
      <declaration type="double" name="sum" />
      <scope startLine="255" endLine="260">
        <scope startLine="256" endLine="258" />
      </scope>
      <comment>set up the step for the current stage</comment>
      <comment>integrate over all elementary steps</comment>
    </method>
  </class>
</source>
