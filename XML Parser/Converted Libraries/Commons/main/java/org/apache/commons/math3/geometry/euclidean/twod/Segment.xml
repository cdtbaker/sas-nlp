<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.geometry.euclidean.twod">
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="Segment" startLine="21">
    <javadoc>
      <text>* Simple container for a two-points segment.</text>
      <version>$Id: Segment.java 1422195 2012-12-15 06:45:18Z psteitz $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Start point of the segment.</text>
    </javadoc>
    <declaration type="Vector2D" name="start" />
    <javadoc>
      <text>* End point of the segments.</text>
    </javadoc>
    <declaration type="Vector2D" name="end" />
    <javadoc>
      <text>* Line containing the segment.</text>
    </javadoc>
    <declaration type="Line" name="line" />
    <javadoc>
      <text>* Build a segment.</text>
      <param>start start point of the segment</param>
      <param>end end point of the segment</param>
      <param>line line containing the segment</param>
    </javadoc>
    <method type="constructor" name="Segment" startLine="41" endLine="45" />
    <javadoc>
      <text>* Get the start point of the segment.</text>
      <return>start point of the segment</return>
    </javadoc>
    <method type="Vector2D" name="getStart" startLine="50" endLine="52" />
    <javadoc>
      <text>* Get the end point of the segment.</text>
      <return>end point of the segment</return>
    </javadoc>
    <method type="Vector2D" name="getEnd" startLine="57" endLine="59" />
    <javadoc>
      <text>* Get the line containing the segment.</text>
      <return>line containing the segment</return>
    </javadoc>
    <method type="Line" name="getLine" startLine="64" endLine="66" />
    <javadoc>
      <text>* Calculates the shortest distance from a point to this line segment.
 * <p>
 * If the perpendicular extension from the point to the line does not
 * cross in the bounds of the line segment, the shortest distance to
 * the two end points will be returned.
 * </p>
 * Algorithm adapted from:
 * <a href="http://www.codeguru.com/forum/printthread.php?s=cc8cf0596231f9a7dba4da6e77c29db3&t=194400&pp=15&page=1">
 * Thread @ Codeguru</a></text>
      <param>p to check</param>
      <return>distance between the instance and the point</return>
      <since>3.1</since>
    </javadoc>
    <method type="double" name="distance" startLine="83" endLine="111">
      <declaration type="double" name="deltaX" />
      <declaration type="double" name="deltaY" />
      <declaration type="double" name="r" />
      <scope startLine="97" endLine="102">
        <declaration type="double" name="dist1" />
        <declaration type="double" name="dist2" />
      </scope>
      <scope startLine="103" endLine="110">
        <declaration type="double" name="px" />
        <declaration type="double" name="py" />
        <declaration type="Vector2D" name="interPt" />
        <comment>find point on line and see if it is in the line segment</comment>
      </scope>
      <comment>r == 0 => P = startPt</comment>
      <comment>r == 1 => P = endPt</comment>
      <comment>r < 0 => P is on the backward extension of the segment</comment>
      <comment>r > 1 => P is on the forward extension of the segment</comment>
      <comment>0 < r < 1 => P is on the segment</comment>
      <comment>if point isn't on the line segment, just return the shortest distance to the end points</comment>
    </method>
  </class>
</source>
