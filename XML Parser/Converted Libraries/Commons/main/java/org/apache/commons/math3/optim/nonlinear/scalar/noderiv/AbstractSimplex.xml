<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv">
  <import name="java.util.Arrays" />
  <import name="java.util.Comparator" />
  <import name="org.apache.commons.math3.analysis.MultivariateFunction" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.ZeroException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.optim.PointValuePair" />
  <import name="org.apache.commons.math3.optim.OptimizationData" />
  <class name="AbstractSimplex" startLine="34">
    <implements name="OptimizationData" />
    <javadoc>
      <text>* This class implements the simplex concept.
 * It is intended to be used in conjunction with {@link SimplexOptimizer}.
 * <br/>
 * The initial configuration of the simplex is set by the constructors{@link #AbstractSimplex(double[])} or {@link #AbstractSimplex(double[][])}.
 * The other {@link #AbstractSimplex(int) constructor} will set all steps
 * to 1, thus building a default configuration from a unit hypercube.
 * <br/>
 * Users <em>must</em> call the {@link #build(double[]) build} method in order
 * to create the data structure that will be acted on by the other methods of
 * this class.</text>
      <see>SimplexOptimizer</see>
      <version>$Id: AbstractSimplex.java 1435539 2013-01-19 13:27:24Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Simplex.</text>
    </javadoc>
    <declaration type="PointValuePair[]" name="simplex" />
    <javadoc>
      <text>* Start simplex configuration.</text>
    </javadoc>
    <declaration type="double[][]" name="startConfiguration" />
    <javadoc>
      <text>* Simplex dimension (must be equal to {@code simplex.length - 1}).</text>
    </javadoc>
    <declaration type="int" name="dimension" />
    <javadoc>
      <text>* Build a unit hypercube simplex.</text>
      <param>n Dimension of the simplex.</param>
    </javadoc>
    <method type="constructor" name="AbstractSimplex" startLine="64" endLine="66" />
    <javadoc>
      <text>* Build a hypercube simplex with the given side length.</text>
      <param>n Dimension of the simplex.</param>
      <param>sideLength Length of the sides of the hypercube.</param>
    </javadoc>
    <method type="constructor" name="AbstractSimplex" startLine="75" endLine="77" />
    <javadoc>
      <text>* The start configuration for simplex is built from a box parallel to
 * the canonical axes of the space. The simplex is the subset of vertices
 * of a box parallel to the canonical axes. It is built as the path followed
 * while traveling from one vertex of the box to the diagonally opposite
 * vertex moving only along the box edges. The first vertex of the box will
 * be located at the start point of the optimization.
 * As an example, in dimension 3 a simplex has 4 vertices. Setting the
 * steps to (1, 10, 2) and the start point to (1, 1, 1) would imply the
 * start simplex would be: { (1, 1, 1), (2, 1, 1), (2, 11, 1), (2, 11, 3) }.
 * The first vertex would be set to the start point at (1, 1, 1) and the
 * last vertex would be set to the diagonally opposite vertex at (2, 11, 3).</text>
      <param>steps Steps along the canonical axes representing box edges. They
 * may be negative but not zero.</param>
      <throws>NullArgumentException if {@code steps} is {@code null}.</throws>
      <throws>ZeroException if one of the steps is zero.</throws>
    </javadoc>
    <method type="constructor" name="AbstractSimplex" startLine="97" endLine="118">
      <scope startLine="98" endLine="100" />
      <scope startLine="101" endLine="103" />
      <scope startLine="109" endLine="117">
        <declaration type="double[]" name="vertexI" />
        <scope startLine="111" endLine="116">
          <scope startLine="112" endLine="114" />
        </scope>
      </scope>
      <comment>Only the relative position of the n final vertices with respect</comment>
      <comment>to the first one are stored.</comment>
    </method>
    <javadoc>
      <text>* The real initial simplex will be set up by moving the reference
 * simplex such that its first point is located at the start point of the
 * optimization.</text>
      <param>referenceSimplex Reference simplex.</param>
      <throws>NotStrictlyPositiveException if the reference simplex does not
 * contain at least one point.</throws>
      <throws>DimensionMismatchException if there is a dimension mismatch
 * in the reference simplex.</throws>
      <throws>IllegalArgumentException if one of its vertices is duplicated.</throws>
    </javadoc>
    <method type="constructor" name="AbstractSimplex" startLine="132" endLine="175">
      <scope startLine="133" endLine="136" />
      <declaration type="double[]" name="ref0" />
      <scope startLine="145" endLine="174">
        <declaration type="double[]" name="refI" />
        <scope startLine="149" endLine="151" />
        <scope startLine="152" endLine="165">
          <declaration type="double[]" name="refJ" />
          <declaration type="boolean" name="allEquals" />
          <scope startLine="155" endLine="160">
            <scope startLine="156" endLine="159" />
          </scope>
          <scope startLine="161" endLine="164" />
        </scope>
        <scope startLine="168" endLine="173">
          <declaration type="double[]" name="confI" />
          <scope startLine="170" endLine="172" />
        </scope>
        <comment>Safety checks.</comment>
        <comment>Store vertex i position relative to vertex 0 position.</comment>
      </scope>
      <comment>Only the relative position of the n final vertices with respect</comment>
      <comment>to the first one are stored.</comment>
      <comment>Loop over vertices.</comment>
    </method>
    <javadoc>
      <text>* Get simplex dimension.</text>
      <return>the dimension of the simplex.</return>
    </javadoc>
    <method type="int" name="getDimension" startLine="182" endLine="184" />
    <javadoc>
      <text>* Get simplex size.
 * After calling the {@link #build(double[]) build} method, this method will
 * will be equivalent to {@code getDimension() + 1}.</text>
      <return>the size of the simplex.</return>
    </javadoc>
    <method type="int" name="getSize" startLine="193" endLine="195" />
    <method name="iterate" type="void" startLine="197" endLine="207" />
    <javadoc>
      <text>* Compute the next simplex of the algorithm.</text>
      <param>evaluationFunction Evaluation function.</param>
      <param>comparator Comparator to use to sort simplex vertices from best
 * to worst.</param>
      <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the algorithm fails to converge.</throws>
    </javadoc>
    <javadoc>
      <text>* Build an initial simplex.</text>
      <param>startPoint First point of the simplex.</param>
      <throws>DimensionMismatchException if the start point does not match
 * simplex dimension.</throws>
    </javadoc>
    <method type="void" name="build" startLine="216" endLine="234">
      <scope startLine="217" endLine="219" />
      <scope startLine="226" endLine="233">
        <declaration type="double[]" name="confI" />
        <declaration type="double[]" name="vertexI" />
        <scope startLine="229" endLine="231" />
      </scope>
      <comment>Set first vertex.</comment>
      <comment>Set remaining vertices.</comment>
    </method>
    <javadoc>
      <text>* Evaluate all the non-evaluated points of the simplex.</text>
      <param>evaluationFunction Evaluation function.</param>
      <param>comparator Comparator to use to sort simplex vertices from best to worst.</param>
      <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximal number of evaluations is exceeded.</throws>
    </javadoc>
    <method type="void" name="evaluate" startLine="245" endLine="257">
      <scope startLine="247" endLine="253">
        <declaration type="PointValuePair" name="vertex" />
        <declaration type="double[]" name="point" />
        <scope startLine="250" endLine="252" />
      </scope>
      <comment>Evaluate the objective function at all non-evaluated simplex points.</comment>
      <comment>Sort the simplex from best to worst.</comment>
    </method>
    <javadoc>
      <text>* Replace the worst point of the simplex by a new point.</text>
      <param>pointValuePair Point to insert.</param>
      <param>comparator Comparator to use for sorting the simplex vertices
 * from best to worst.</param>
    </javadoc>
    <method type="void" name="replaceWorstPoint" startLine="267" endLine="276">
      <scope startLine="268" endLine="274">
        <scope startLine="269" endLine="273">
          <declaration type="PointValuePair" name="tmp" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Get the points of the simplex.</text>
      <return>all the simplex points.</return>
    </javadoc>
    <method type="PointValuePair[]" name="getPoints" startLine="283" endLine="287">
      <declaration type="PointValuePair[]" name="copy" />
    </method>
    <javadoc>
      <text>* Get the simplex point stored at the requested {@code index}.</text>
      <param>index Location.</param>
      <return>the point at location {@code index}.</return>
    </javadoc>
    <method type="PointValuePair" name="getPoint" startLine="295" endLine="301">
      <scope startLine="297" endLine="299" />
    </method>
    <javadoc>
      <text>* Store a new point at location {@code index}.
 * Note that no deep-copy of {@code point} is performed.</text>
      <param>index Location.</param>
      <param>point New value.</param>
    </javadoc>
    <method type="void" name="setPoint" startLine="310" endLine="316">
      <scope startLine="312" endLine="314" />
    </method>
    <javadoc>
      <text>* Replace all points.
 * Note that no deep-copy of {@code points} is performed.</text>
      <param>points New Points.</param>
    </javadoc>
    <method type="void" name="setPoints" startLine="324" endLine="329">
      <scope startLine="325" endLine="327" />
    </method>
    <javadoc>
      <text>* Create steps for a unit hypercube.</text>
      <param>n Dimension of the hypercube.</param>
      <param>sideLength Length of the sides of the hypercube.</param>
      <return>the steps.</return>
    </javadoc>
    <method type="double[]" name="createHypercubeSteps" startLine="339" endLine="345">
      <declaration type="double[]" name="steps" />
      <scope startLine="341" endLine="343" />
    </method>
  </class>
</source>
