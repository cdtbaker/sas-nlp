<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.util">
  <import name="java.io.Serializable" />
  <import name="java.util.Collection" />
  <import name="java.util.HashMap" />
  <import name="java.util.Map" />
  <import name="java.util.Set" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <class name="TransformerMap" startLine="27">
    <implements name="NumberTransformer" />
    <implements name="Serializable" />
    <javadoc>
      <text>* This TansformerMap automates the transformation of mixed object types.
 * It provides a means to set NumberTransformers that will be selected
 * based on the Class of the object handed to the Maps
 * <code>double transform(Object o)</code> method.</text>
      <version>$Id: TransformerMap.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* A default Number Transformer for Numbers and numeric Strings.</text>
    </javadoc>
    <declaration type="NumberTransformer" name="defaultTransformer" />
    <javadoc>
      <text>* The internal Map.</text>
    </javadoc>
    <declaration type="Map<Class<?>,NumberTransformer>" name="map" />
    <javadoc>
      <text>* Build a map containing only the default transformer.</text>
    </javadoc>
    <method type="constructor" name="TransformerMap" startLine="52" endLine="55" />
    <javadoc>
      <text>* Tests if a Class is present in the TransformerMap.</text>
      <param>key Class to check</param>
      <return>true|false</return>
    </javadoc>
    <method type="boolean" name="containsClass" startLine="62" endLine="64" />
    <javadoc>
      <text>* Tests if a NumberTransformer is present in the TransformerMap.</text>
      <param>value NumberTransformer to check</param>
      <return>true|false</return>
    </javadoc>
    <method type="boolean" name="containsTransformer" startLine="71" endLine="73" />
    <javadoc>
      <text>* Returns the Transformer that is mapped to a class
 * if mapping is not present, this returns null.</text>
      <param>key The Class of the object</param>
      <return>the mapped NumberTransformer or null.</return>
    </javadoc>
    <method type="NumberTransformer" name="getTransformer" startLine="81" endLine="83" />
    <javadoc>
      <text>* Sets a Class to Transformer Mapping in the Map. If
 * the Class is already present, this overwrites that
 * mapping.</text>
      <param>key The Class</param>
      <param>transformer The NumberTransformer</param>
      <return>the replaced transformer if one is present</return>
    </javadoc>
    <method type="NumberTransformer" name="putTransformer" startLine="93" endLine="95" />
    <javadoc>
      <text>* Removes a Class to Transformer Mapping in the Map.</text>
      <param>key The Class</param>
      <return>the removed transformer if one is present or
 * null if none was present.</return>
    </javadoc>
    <method type="NumberTransformer" name="removeTransformer" startLine="103" endLine="105" />
    <javadoc>
      <text>* Clears all the Class to Transformer mappings.</text>
    </javadoc>
    <method type="void" name="clear" startLine="110" endLine="112" />
    <javadoc>
      <text>* Returns the Set of Classes used as keys in the map.</text>
      <return>Set of Classes</return>
    </javadoc>
    <method type="Set<Class<?>>" name="classes" startLine="118" endLine="120" />
    <javadoc>
      <text>* Returns the Set of NumberTransformers used as values
 * in the map.</text>
      <return>Set of NumberTransformers</return>
    </javadoc>
    <method type="Collection<NumberTransformer>" name="transformers" startLine="127" endLine="129" />
    <javadoc>
      <text>* Attempts to transform the Object against the map of
 * NumberTransformers. Otherwise it returns Double.NaN.</text>
      <param>o the Object to be transformed.</param>
      <return>the double value of the Object.</return>
      <throws>MathIllegalArgumentException if the Object can not be
 * transformed into a Double.</throws>
      <see>org.apache.commons.math3.util.NumberTransformer#transform(java.lang.Object)</see>
    </javadoc>
    <method type="double" name="transform" startLine="141" endLine="154">
      <declaration type="double" name="value" />
      <scope startLine="144" endLine="146" />
      <scope startLine="146" endLine="151">
        <declaration type="NumberTransformer" name="trans" />
        <scope startLine="148" endLine="150" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="equals" startLine="158" endLine="178">
      <scope startLine="159" endLine="161" />
      <scope startLine="162" endLine="176">
        <declaration type="TransformerMap" name="rhs" />
        <scope startLine="164" endLine="166" />
        <scope startLine="167" endLine="169" />
        <scope startLine="170" endLine="174">
          <scope startLine="171" endLine="173" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="hashCode" startLine="182" endLine="188">
      <declaration type="int" name="hash" />
      <scope startLine="184" endLine="186" />
    </method>
  </class>
</source>
