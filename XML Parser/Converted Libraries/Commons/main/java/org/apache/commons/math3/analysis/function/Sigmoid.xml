<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.function">
  <import name="java.util.Arrays" />
  <import name="org.apache.commons.math3.analysis.FunctionUtils" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.DifferentiableUnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.ParametricUnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.differentiation.DerivativeStructure" />
  <import name="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="Sigmoid" startLine="32">
    <implements name="UnivariateDifferentiableFunction" />
    <implements name="DifferentiableUnivariateFunction" />
    <javadoc>
      <text>* <a href="http://en.wikipedia.org/wiki/Sigmoid_function">
 * Sigmoid</a> function.
 * It is the inverse of the {@link Logit logit} function.
 * A more flexible version, the generalised logistic, is implemented
 * by the {@link Logistic} class.</text>
      <since>3.0</since>
      <version>$Id: Sigmoid.java 1455194 2013-03-11 15:45:54Z luc $</version>
    </javadoc>
    <javadoc>
      <text>* Lower asymptote.</text>
    </javadoc>
    <declaration type="double" name="lo" />
    <javadoc>
      <text>* Higher asymptote.</text>
    </javadoc>
    <declaration type="double" name="hi" />
    <javadoc>
      <text>* Usual sigmoid function, where the lower asymptote is 0 and the higher
 * asymptote is 1.</text>
    </javadoc>
    <method type="constructor" name="Sigmoid" startLine="52" endLine="54" />
    <javadoc>
      <text>* Sigmoid function.</text>
      <param>lo Lower asymptote.</param>
      <param>hi Higher asymptote.</param>
    </javadoc>
    <method type="constructor" name="Sigmoid" startLine="63" endLine="66" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <deprecated>as of 3.1, replaced by {@link #value(DerivativeStructure)}</deprecated>
    </javadoc>
    <method type="UnivariateFunction" name="derivative" startLine="72" endLine="74" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value" startLine="77" endLine="79" />
    <class name="Parametric" startLine="81">
      <implements name="ParametricUnivariateFunction" />
      <javadoc>
        <text>* Parametric function where the input array contains the parameters of
 * the logit function, ordered as follows:
 * <ul>
 * <li>Lower asymptote</li>
 * <li>Higher asymptote</li>
 * </ul></text>
      </javadoc>
      <javadoc>
        <text>* Computes the value of the sigmoid at {@code x}.</text>
        <param>x Value for which the function must be computed.</param>
        <param>param Values of lower asymptote and higher asymptote.</param>
        <return>the value of the function.</return>
        <throws>NullArgumentException if {@code param} is {@code null}.</throws>
        <throws>DimensionMismatchException if the size of {@code param} is
 * not 2.</throws>
      </javadoc>
      <method type="double" name="value" startLine="102" endLine="105" />
      <javadoc>
        <text>* Computes the value of the gradient at {@code x}.
 * The components of the gradient vector are the partial
 * derivatives of the function with respect to each of the
 * <em>parameters</em> (lower asymptote and higher asymptote).</text>
        <param>x Value at which the gradient must be computed.</param>
        <param>param Values for lower asymptote and higher asymptote.</param>
        <return>the gradient vector at {@code x}.</return>
        <throws>NullArgumentException if {@code param} is {@code null}.</throws>
        <throws>DimensionMismatchException if the size of {@code param} is
 * not 2.</throws>
      </javadoc>
      <method type="double[]" name="gradient" startLine="122" endLine="128">
        <declaration type="double" name="invExp1" />
      </method>
      <javadoc>
        <text>* Validates parameters to ensure they are appropriate for the evaluation of
 * the {@link #value(double,double[])} and {@link #gradient(double,double[])}methods.</text>
        <param>param Values for lower and higher asymptotes.</param>
        <throws>NullArgumentException if {@code param} is {@code null}.</throws>
        <throws>DimensionMismatchException if the size of {@code param} is
 * not 2.</throws>
      </javadoc>
      <method type="void" name="validateParameters" startLine="142" endLine="149">
        <scope startLine="143" endLine="145" />
        <scope startLine="146" endLine="148" />
      </method>
      <javadoc>
        <param>x Value at which to compute the sigmoid.</param>
        <param>lo Lower asymptote.</param>
        <param>hi Higher asymptote.</param>
        <return>the value of the sigmoid function at {@code x}.</return>
      </javadoc>
      <method type="double" name="value" startLine="160" endLine="162" />
      <javadoc>
        <text>* {@inheritDoc}</text>
        <since>3.1</since>
      </javadoc>
      <method type="DerivativeStructure" name="value" startLine="168" endLine="216">
        <declaration type="double[]" name="f" />
        <declaration type="double" name="exp" />
        <scope startLine="172" endLine="178">
          <comment>special handling near lower boundary, to avoid NaN</comment>
        </scope>
        <scope startLine="178" endLine="212">
          <declaration type="double[]" name="p" />
          <declaration type="double" name="inv" />
          <declaration type="double" name="coeff" />
          <scope startLine="190" endLine="207">
            <declaration type="double" name="v" />
            <scope startLine="195" endLine="202">
              <scope startLine="197" endLine="199" />
              <scope startLine="199" endLine="201" />
            </scope>
          </scope>
          <comment>the nth order derivative of sigmoid has the form:</comment>
          <comment>dn(sigmoid(x)/dxn = P_n(exp(-x)) / (1+exp(-x))^(n+1)</comment>
          <comment>where P_n(t) is a degree n polynomial with normalized higher term</comment>
          <comment>P_0(t) = 1, P_1(t) = t, P_2(t) = t^2 - t, P_3(t) = t^3 - 4 t^2 + t...</comment>
          <comment>the general recurrence relation for P_n is:</comment>
          <comment>P_n(x) = n t P_(n-1)(t) - t (1 + t) P_(n-1)'(t)</comment>
          <comment>update and evaluate polynomial P_n(t)</comment>
          <comment>fix function value</comment>
        </scope>
      </method>
    </class>
  </class>
</source>
