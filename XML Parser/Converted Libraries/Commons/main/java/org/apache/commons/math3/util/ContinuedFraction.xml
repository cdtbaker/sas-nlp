<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.util">
  <import name="org.apache.commons.math3.exception.ConvergenceException" />
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <class name="ContinuedFraction" startLine="23">
    <javadoc>
      <text>* Provides a generic means to evaluate continued fractions.  Subclasses simply
 * provided the a and b coefficients to evaluate the continued fraction.
 * <p>
 * References:
 * <ul>
 * <li><a href="http://mathworld.wolfram.com/ContinuedFraction.html">
 * Continued Fraction</a></li>
 * </ul>
 * </p></text>
      <version>$Id: ContinuedFraction.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Maximum allowed numerical error.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_EPSILON" />
    <javadoc>
      <text>* Default constructor.</text>
    </javadoc>
    <method type="constructor" name="ContinuedFraction" startLine="44" endLine="46" />
    <method name="getA" type="double" startLine="48" endLine="55" />
    <javadoc>
      <text>* Access the n-th a coefficient of the continued fraction.  Since a can be
 * a function of the evaluation point, x, that is passed in as well.</text>
      <param>n the coefficient index to retrieve.</param>
      <param>x the evaluation point.</param>
      <return>the n-th a coefficient.</return>
    </javadoc>
    <method name="getB" type="double" startLine="57" endLine="64" />
    <javadoc>
      <text>* Access the n-th b coefficient of the continued fraction.  Since b can be
 * a function of the evaluation point, x, that is passed in as well.</text>
      <param>n the coefficient index to retrieve.</param>
      <param>x the evaluation point.</param>
      <return>the n-th b coefficient.</return>
    </javadoc>
    <javadoc>
      <text>* Evaluates the continued fraction at the value x.</text>
      <param>x the evaluation point.</param>
      <return>the value of the continued fraction evaluated at x.</return>
      <throws>ConvergenceException if the algorithm fails to converge.</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="72" endLine="74" />
    <javadoc>
      <text>* Evaluates the continued fraction at the value x.</text>
      <param>x the evaluation point.</param>
      <param>epsilon maximum error allowed.</param>
      <return>the value of the continued fraction evaluated at x.</return>
      <throws>ConvergenceException if the algorithm fails to converge.</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="83" endLine="85" />
    <javadoc>
      <text>* Evaluates the continued fraction at the value x.</text>
      <param>x the evaluation point.</param>
      <param>maxIterations maximum number of convergents</param>
      <return>the value of the continued fraction evaluated at x.</return>
      <throws>ConvergenceException if the algorithm fails to converge.</throws>
      <throws>MaxCountExceededException if maximal number of iterations is reached</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="96" endLine="98" />
    <javadoc>
      <text>* Evaluates the continued fraction at the value x.
 * <p>
 * The implementation of this method is based on the modified Lentz algorithm as described
 * on page 18 ff. in:
 * <ul>
 * <li>
 * I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
 * <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
 * http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
 * </li>
 * </ul>
 * <b>Note:</b> the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
 * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction @ MathWorld</a>.
 * </p></text>
      <param>x the evaluation point.</param>
      <param>epsilon maximum error allowed.</param>
      <param>maxIterations maximum number of convergents</param>
      <return>the value of the continued fraction evaluated at x.</return>
      <throws>ConvergenceException if the algorithm fails to converge.</throws>
      <throws>MaxCountExceededException if maximal number of iterations is reached</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="124" endLine="180">
      <declaration type="double" name="small" />
      <declaration type="double" name="hPrev" />
      <scope startLine="129" endLine="131" />
      <declaration type="int" name="n" />
      <declaration type="double" name="dPrev" />
      <declaration type="double" name="cPrev" />
      <declaration type="double" name="hN" />
      <scope startLine="138" endLine="172">
        <declaration type="double" name="a" />
        <declaration type="double" name="b" />
        <declaration type="double" name="dN" />
        <scope startLine="143" endLine="145" />
        <declaration type="double" name="cN" />
        <scope startLine="147" endLine="149" />
        <declaration type="double" name="deltaN" />
        <scope startLine="155" endLine="158" />
        <scope startLine="159" endLine="162" />
        <scope startLine="164" endLine="166" />
      </scope>
      <scope startLine="174" endLine="177" />
      <comment>use the value of small as epsilon criteria for zero checks</comment>
    </method>
  </class>
</source>
