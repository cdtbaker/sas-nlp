<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.interpolation">
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.NonMonotonicSequenceException" />
  <import name="org.apache.commons.math3.analysis.polynomials.PolynomialFunction" />
  <import name="org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <class name="SplineInterpolator" startLine="27">
    <implements name="UnivariateInterpolator" />
    <javadoc>
      <text>* Computes a natural (also known as "free", "unclamped") cubic spline interpolation for the data set.
 * <p>
 * The {@link #interpolate(double[],double[])} method returns a {@link PolynomialSplineFunction}consisting of n cubic polynomials, defined over the subintervals determined by the x values,
 * x[0] < x[i] ... < x[n].  The x values are referred to as "knot points."</p>
 * <p>
 * The value of the PolynomialSplineFunction at a point x that is greater than or equal to the smallest
 * knot point and strictly less than the largest knot point is computed by finding the subinterval to which
 * x belongs and computing the value of the corresponding polynomial at <code>x - x[i] </code> where
 * <code>i</code> is the index of the subinterval.  See {@link PolynomialSplineFunction} for more details.
 * </p>
 * <p>
 * The interpolating polynomials satisfy: <ol>
 * <li>The value of the PolynomialSplineFunction at each of the input x values equals the
 * corresponding y value.</li>
 * <li>Adjacent polynomials are equal through two derivatives at the knot points (i.e., adjacent polynomials
 * "match up" at the knot points, as do their first and second derivatives).</li>
 * </ol></p>
 * <p>
 * The cubic spline interpolation algorithm implemented is as described in R.L. Burden, J.D. Faires,
 * <u>Numerical Analysis</u>, 4th Ed., 1989, PWS-Kent, ISBN 0-53491-585-X, pp 126-131.
 * </p></text>
      <version>$Id: SplineInterpolator.java 1379905 2012-09-01 23:56:50Z erans $</version>
    </javadoc>
    <javadoc>
      <text>* Computes an interpolating function for the data set.</text>
      <param>x the arguments for the interpolation points</param>
      <param>y the values for the interpolation points</param>
      <return>a function which interpolates the data set</return>
      <throws>DimensionMismatchException if {@code x} and {@code y}have different sizes.</throws>
      <throws>NonMonotonicSequenceException if {@code x} is not sorted in
 * strict increasing order.</throws>
      <throws>NumberIsTooSmallException if the size of {@code x} is smaller
 * than 3.</throws>
    </javadoc>
    <method type="PolynomialSplineFunction" name="interpolate" startLine="69" endLine="127">
      <scope startLine="70" endLine="72" />
      <scope startLine="74" endLine="77" />
      <declaration type="int" name="n" />
      <declaration type="double[]" name="h" />
      <scope startLine="86" endLine="88" />
      <declaration type="double[]" name="mu" />
      <declaration type="double[]" name="z" />
      <declaration type="double" name="g" />
      <scope startLine="95" endLine="100" />
      <declaration type="double[]" name="b" />
      <declaration type="double[]" name="c" />
      <declaration type="double[]" name="d" />
      <scope startLine="110" endLine="114" />
      <declaration type="PolynomialFunction[]" name="polynomials" />
      <declaration type="double[]" name="coefficients" />
      <scope startLine="118" endLine="124" />
      <comment>Number of intervals.  The number of data points is n + 1.</comment>
      <comment>Differences between knot points</comment>
      <comment>cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)</comment>
    </method>
  </class>
</source>
