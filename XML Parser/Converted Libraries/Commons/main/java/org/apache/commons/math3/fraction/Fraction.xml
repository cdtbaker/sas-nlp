<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.fraction">
  <import name="java.io.Serializable" />
  <import name="java.math.BigInteger" />
  <import name="org.apache.commons.math3.FieldElement" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.util.ArithmeticUtils" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="Fraction" extends="Number" startLine="29">
    <implements name="FieldElement<Fraction>" />
    <implements name="Comparable<Fraction>" />
    <implements name="Serializable" />
    <javadoc>
      <text>* Representation of a rational number.
 * implements Serializable since 2.0</text>
      <since>1.1</since>
      <version>$Id: Fraction.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* A fraction representing "2 / 1".</text>
    </javadoc>
    <declaration type="Fraction" name="TWO" />
    <javadoc>
      <text>* A fraction representing "1".</text>
    </javadoc>
    <declaration type="Fraction" name="ONE" />
    <javadoc>
      <text>* A fraction representing "0".</text>
    </javadoc>
    <declaration type="Fraction" name="ZERO" />
    <javadoc>
      <text>* A fraction representing "4/5".</text>
    </javadoc>
    <declaration type="Fraction" name="FOUR_FIFTHS" />
    <javadoc>
      <text>* A fraction representing "1/5".</text>
    </javadoc>
    <declaration type="Fraction" name="ONE_FIFTH" />
    <javadoc>
      <text>* A fraction representing "1/2".</text>
    </javadoc>
    <declaration type="Fraction" name="ONE_HALF" />
    <javadoc>
      <text>* A fraction representing "1/4".</text>
    </javadoc>
    <declaration type="Fraction" name="ONE_QUARTER" />
    <javadoc>
      <text>* A fraction representing "1/3".</text>
    </javadoc>
    <declaration type="Fraction" name="ONE_THIRD" />
    <javadoc>
      <text>* A fraction representing "3/5".</text>
    </javadoc>
    <declaration type="Fraction" name="THREE_FIFTHS" />
    <javadoc>
      <text>* A fraction representing "3/4".</text>
    </javadoc>
    <declaration type="Fraction" name="THREE_QUARTERS" />
    <javadoc>
      <text>* A fraction representing "2/5".</text>
    </javadoc>
    <declaration type="Fraction" name="TWO_FIFTHS" />
    <javadoc>
      <text>* A fraction representing "2/4".</text>
    </javadoc>
    <declaration type="Fraction" name="TWO_QUARTERS" />
    <javadoc>
      <text>* A fraction representing "2/3".</text>
    </javadoc>
    <declaration type="Fraction" name="TWO_THIRDS" />
    <javadoc>
      <text>* A fraction representing "-1 / 1".</text>
    </javadoc>
    <declaration type="Fraction" name="MINUS_ONE" />
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* The denominator.</text>
    </javadoc>
    <declaration type="int" name="denominator" />
    <javadoc>
      <text>* The numerator.</text>
    </javadoc>
    <declaration type="int" name="numerator" />
    <javadoc>
      <text>* Create a fraction given the double value.</text>
      <param>value the double value to convert to a fraction.</param>
      <throws>FractionConversionException if the continued fraction failed to
 * converge.</throws>
    </javadoc>
    <method type="constructor" name="Fraction" startLine="98" endLine="100" />
    <javadoc>
      <text>* Create a fraction given the double value and maximum error allowed.
 * <p>
 * References:
 * <ul>
 * <li><a href="http://mathworld.wolfram.com/ContinuedFraction.html">
 * Continued Fraction</a> equations (11) and (22)-(26)</li>
 * </ul>
 * </p></text>
      <param>value the double value to convert to a fraction.</param>
      <param>epsilon maximum error allowed.  The resulting fraction is within{@code epsilon} of {@code value}, in absolute terms.</param>
      <param>maxIterations maximum number of convergents</param>
      <throws>FractionConversionException if the continued fraction failed to
 * converge.</throws>
    </javadoc>
    <method type="constructor" name="Fraction" startLine="120" endLine="122" />
    <javadoc>
      <text>* Create a fraction given the double value and maximum denominator.
 * <p>
 * References:
 * <ul>
 * <li><a href="http://mathworld.wolfram.com/ContinuedFraction.html">
 * Continued Fraction</a> equations (11) and (22)-(26)</li>
 * </ul>
 * </p></text>
      <param>value the double value to convert to a fraction.</param>
      <param>maxDenominator The maximum allowed value for denominator</param>
      <throws>FractionConversionException if the continued fraction failed to
 * converge</throws>
    </javadoc>
    <method type="constructor" name="Fraction" startLine="140" endLine="142" />
    <javadoc>
      <text>* Create a fraction given the double value and either the maximum error
 * allowed or the maximum number of denominator digits.
 * <p>
 * NOTE: This constructor is called with EITHER
 * - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
 * (that way the maxDenominator has no effect).
 * OR
 * - a valid maxDenominator value and the epsilon value set to zero
 * (that way epsilon only has effect if there is an exact match before
 * the maxDenominator value is reached).
 * </p><p>
 * It has been done this way so that the same code can be (re)used for both
 * scenarios. However this could be confusing to users if it were part of
 * the public API and this constructor should therefore remain PRIVATE.
 * </p>
 * See JIRA issue ticket MATH-181 for more details:
 * https://issues.apache.org/jira/browse/MATH-181</text>
      <param>value the double value to convert to a fraction.</param>
      <param>epsilon maximum error allowed.  The resulting fraction is within{@code epsilon} of {@code value}, in absolute terms.</param>
      <param>maxDenominator maximum denominator value allowed.</param>
      <param>maxIterations maximum number of convergents</param>
      <throws>FractionConversionException if the continued fraction failed to
 * converge.</throws>
    </javadoc>
    <method type="constructor" name="Fraction" startLine="177" endLine="238">
      <declaration type="long" name="overflow" />
      <declaration type="double" name="r0" />
      <declaration type="long" name="a0" />
      <scope startLine="181" endLine="183" />
      <scope startLine="187" endLine="191" />
      <declaration type="long" name="p0" />
      <declaration type="long" name="q0" />
      <declaration type="long" name="p1" />
      <declaration type="long" name="q1" />
      <declaration type="long" name="p2" />
      <declaration type="long" name="q2" />
      <declaration type="int" name="n" />
      <declaration type="boolean" name="stop" />
      <scope startLine="203" endLine="224">
        <declaration type="double" name="r1" />
        <declaration type="long" name="a1" />
        <scope startLine="209" endLine="211" />
        <declaration type="double" name="convergent" />
        <scope startLine="214" endLine="221" />
        <scope startLine="221" endLine="223" />
      </scope>
      <scope startLine="226" endLine="228" />
      <scope startLine="230" endLine="233" />
      <scope startLine="233" endLine="236" />
      <comment>check for (almost) integer arguments, which should not go</comment>
      <comment>to iterations.</comment>
    </method>
    <javadoc>
      <text>* Create a fraction from an int.
 * The fraction is num / 1.</text>
      <param>num the numerator.</param>
    </javadoc>
    <method type="constructor" name="Fraction" startLine="245" endLine="247" />
    <javadoc>
      <text>* Create a fraction given the numerator and denominator.  The fraction is
 * reduced to lowest terms.</text>
      <param>num the numerator.</param>
      <param>den the denominator.</param>
      <throws>MathArithmeticException if the denominator is {@code zero}</throws>
    </javadoc>
    <method type="constructor" name="Fraction" startLine="256" endLine="284">
      <scope startLine="257" endLine="260" />
      <scope startLine="261" endLine="269">
        <scope startLine="263" endLine="266" />
      </scope>
      <declaration type="int" name="d" />
      <scope startLine="272" endLine="275" />
      <scope startLine="278" endLine="281" />
      <comment>reduce numerator and denominator by greatest common denominator.</comment>
      <comment>move sign to numerator.</comment>
    </method>
    <javadoc>
      <text>* Returns the absolute value of this fraction.</text>
      <return>the absolute value.</return>
    </javadoc>
    <method type="Fraction" name="abs" startLine="290" endLine="298">
      <declaration type="Fraction" name="ret" />
      <scope startLine="292" endLine="294" />
      <scope startLine="294" endLine="296" />
    </method>
    <javadoc>
      <text>* Compares this object to another based on size.</text>
      <param>object the object to compare to</param>
      <return>-1 if this is less than <tt>object</tt>, +1 if this is greater
 * than <tt>object</tt>, 0 if they are equal.</return>
    </javadoc>
    <method type="int" name="compareTo" startLine="306" endLine="310">
      <declaration type="long" name="nOd" />
      <declaration type="long" name="dOn" />
    </method>
    <javadoc>
      <text>* Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.</text>
      <return>the fraction as a <tt>double</tt></return>
    </javadoc>
    <method type="double" name="doubleValue" startLine="318" endLine="320" />
    <javadoc>
      <text>* Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.</text>
      <param>other fraction to test for equality to this fraction</param>
      <return>true if two fractions are equal, false if object is
 * <tt>null</tt>, not an instance of {@link Fraction}, or not equal
 * to this fraction instance.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="332" endLine="344">
      <scope startLine="333" endLine="335" />
      <scope startLine="336" endLine="342">
        <declaration type="Fraction" name="rhs" />
        <comment>since fractions are always in lowest terms, numerators and</comment>
        <comment>denominators can be compared directly for equality.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.</text>
      <return>the fraction as a <tt>float</tt></return>
    </javadoc>
    <method type="float" name="floatValue" startLine="352" endLine="354" />
    <javadoc>
      <text>* Access the denominator.</text>
      <return>the denominator.</return>
    </javadoc>
    <method type="int" name="getDenominator" startLine="360" endLine="362" />
    <javadoc>
      <text>* Access the numerator.</text>
      <return>the numerator.</return>
    </javadoc>
    <method type="int" name="getNumerator" startLine="368" endLine="370" />
    <javadoc>
      <text>* Gets a hashCode for the fraction.</text>
      <return>a hash code value for this object</return>
    </javadoc>
    <method type="int" name="hashCode" startLine="377" endLine="379" />
    <javadoc>
      <text>* Gets the fraction as an <tt>int</tt>. This returns the whole number part
 * of the fraction.</text>
      <return>the whole number fraction part</return>
    </javadoc>
    <method type="int" name="intValue" startLine="387" endLine="389" />
    <javadoc>
      <text>* Gets the fraction as a <tt>long</tt>. This returns the whole number part
 * of the fraction.</text>
      <return>the whole number fraction part</return>
    </javadoc>
    <method type="long" name="longValue" startLine="397" endLine="399" />
    <javadoc>
      <text>* Return the additive inverse of this fraction.</text>
      <return>the negation of this fraction.</return>
    </javadoc>
    <method type="Fraction" name="negate" startLine="405" endLine="410">
      <scope startLine="406" endLine="408" />
    </method>
    <javadoc>
      <text>* Return the multiplicative inverse of this fraction.</text>
      <return>the reciprocal fraction</return>
    </javadoc>
    <method type="Fraction" name="reciprocal" startLine="416" endLine="418" />
    <javadoc>
      <text>* <p>Adds the value of this fraction to another, returning the result in reduced form.
 * The algorithm follows Knuth, 4.5.1.</p></text>
      <param>fraction  the fraction to add, must not be {@code null}</param>
      <return>a {@code Fraction} instance with the resulting values</return>
      <throws>NullArgumentException if the fraction is {@code null}</throws>
      <throws>MathArithmeticException if the resulting numerator or denominator exceeds{@code Integer.MAX_VALUE}</throws>
    </javadoc>
    <method type="Fraction" name="add" startLine="430" endLine="432">
      <comment>return addSub(fraction, true  add );</comment>
    </method>
    <javadoc>
      <text>* Add an integer to the fraction.</text>
      <param>i the <tt>integer</tt> to add.</param>
      <return>this + i</return>
    </javadoc>
    <method type="Fraction" name="add" startLine="439" endLine="441" />
    <javadoc>
      <text>* <p>Subtracts the value of another fraction from the value of this one,
 * returning the result in reduced form.</p></text>
      <param>fraction  the fraction to subtract, must not be {@code null}</param>
      <return>a {@code Fraction} instance with the resulting values</return>
      <throws>NullArgumentException if the fraction is {@code null}</throws>
      <throws>MathArithmeticException if the resulting numerator or denominator
 * cannot be represented in an {@code int}.</throws>
    </javadoc>
    <method type="Fraction" name="subtract" startLine="453" endLine="455">
      <comment>return addSub(fraction, false  subtract );</comment>
    </method>
    <javadoc>
      <text>* Subtract an integer from the fraction.</text>
      <param>i the <tt>integer</tt> to subtract.</param>
      <return>this - i</return>
    </javadoc>
    <method type="Fraction" name="subtract" startLine="462" endLine="464" />
    <javadoc>
      <text>* Implement add and subtract using algorithm described in Knuth 4.5.1.</text>
      <param>fraction the fraction to subtract, must not be {@code null}</param>
      <param>isAdd true to add, false to subtract</param>
      <return>a {@code Fraction} instance with the resulting values</return>
      <throws>NullArgumentException if the fraction is {@code null}</throws>
      <throws>MathArithmeticException if the resulting numerator or denominator
 * cannot be represented in an {@code int}.</throws>
    </javadoc>
    <method type="Fraction" name="addSub" startLine="476" endLine="521">
      <scope startLine="477" endLine="479" />
      <scope startLine="481" endLine="483" />
      <scope startLine="484" endLine="486" />
      <declaration type="int" name="d1" />
      <scope startLine="490" endLine="498">
        <declaration type="int" name="uvp" />
        <declaration type="int" name="upv" />
        <comment>result is ( (u*v' +/- u'v) / u'v')</comment>
      </scope>
      <declaration type="BigInteger" name="uvp" />
      <declaration type="BigInteger" name="upv" />
      <declaration type="BigInteger" name="t" />
      <declaration type="int" name="tmodd1" />
      <declaration type="int" name="d2" />
      <declaration type="BigInteger" name="w" />
      <scope startLine="514" endLine="517" />
      <comment>zero is identity for addition.</comment>
      <comment>if denominators are randomly distributed, d1 will be 1 about 61%</comment>
      <comment>of the time.</comment>
      <comment>the quantity 't' requires 65 bits of precision; see knuth 4.5.1</comment>
      <comment>exercise 7.  we're going to use a BigInteger.</comment>
      <comment>t = u(v'/d1) +/- v(u'/d1)</comment>
      <comment>but d2 doesn't need extra precision because</comment>
      <comment>d2 = gcd(t,d1) = gcd(t mod d1, d1)</comment>
      <comment>result is (t/d2) / (u'/d1)(v'/d2)</comment>
    </method>
    <javadoc>
      <text>* <p>Multiplies the value of this fraction by another, returning the
 * result in reduced form.</p></text>
      <param>fraction  the fraction to multiply by, must not be {@code null}</param>
      <return>a {@code Fraction} instance with the resulting values</return>
      <throws>NullArgumentException if the fraction is {@code null}</throws>
      <throws>MathArithmeticException if the resulting numerator or denominator exceeds{@code Integer.MAX_VALUE}</throws>
    </javadoc>
    <method type="Fraction" name="multiply" startLine="533" endLine="547">
      <scope startLine="534" endLine="536" />
      <scope startLine="537" endLine="539" />
      <declaration type="int" name="d1" />
      <declaration type="int" name="d2" />
      <comment>knuth 4.5.1</comment>
      <comment>make sure we don't overflow unless the result *must* overflow.</comment>
    </method>
    <javadoc>
      <text>* Multiply the fraction by an integer.</text>
      <param>i the <tt>integer</tt> to multiply by.</param>
      <return>this * i</return>
    </javadoc>
    <method type="Fraction" name="multiply" startLine="554" endLine="556" />
    <javadoc>
      <text>* <p>Divide the value of this fraction by another.</p></text>
      <param>fraction  the fraction to divide by, must not be {@code null}</param>
      <return>a {@code Fraction} instance with the resulting values</return>
      <throws>IllegalArgumentException if the fraction is {@code null}</throws>
      <throws>MathArithmeticException if the fraction to divide by is zero</throws>
      <throws>MathArithmeticException if the resulting numerator or denominator exceeds{@code Integer.MAX_VALUE}</throws>
    </javadoc>
    <method type="Fraction" name="divide" startLine="568" endLine="577">
      <scope startLine="569" endLine="571" />
      <scope startLine="572" endLine="575" />
    </method>
    <javadoc>
      <text>* Divide the fraction by an integer.</text>
      <param>i the <tt>integer</tt> to divide by.</param>
      <return>this * i</return>
    </javadoc>
    <method type="Fraction" name="divide" startLine="584" endLine="586" />
    <javadoc>
      <text>* <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p></text>
      <return>the fraction percentage as a <tt>double</tt>.</return>
    </javadoc>
    <method type="double" name="percentageValue" startLine="596" endLine="598" />
    <javadoc>
      <text>* <p>Creates a {@code Fraction} instance with the 2 parts
 * of a fraction Y/Z.</p>
 * <p>Any negative signs are resolved to be on the numerator.</p></text>
      <param>numerator  the numerator, for example the three in 'three sevenths'</param>
      <param>denominator  the denominator, for example the seven in 'three sevenths'</param>
      <return>a new fraction instance, with the numerator and denominator reduced</return>
      <throws>MathArithmeticException if the denominator is {@code zero}</throws>
    </javadoc>
    <method type="Fraction" name="getReducedFraction" startLine="611" endLine="637">
      <scope startLine="612" endLine="615" />
      <scope startLine="616" endLine="618">
        <comment>normalize zero.</comment>
      </scope>
      <scope startLine="620" endLine="622" />
      <scope startLine="623" endLine="631">
        <scope startLine="625" endLine="628" />
      </scope>
      <declaration type="int" name="gcd" />
      <comment>allow 2^k/-2^31 as a valid fraction (where k>0)</comment>
      <comment>simplify fraction.</comment>
    </method>
    <javadoc>
      <text>* <p>
 * Returns the {@code String} representing this fraction, ie
 * "num / dem" or just "num" if the denominator is one.
 * </p></text>
      <return>a string representation of the fraction.</return>
      <see>java.lang.Object#toString()</see>
    </javadoc>
    <method type="String" name="toString" startLine="649" endLine="659">
      <declaration type="String" name="str" />
      <scope startLine="651" endLine="653" />
      <scope startLine="653" endLine="655" />
      <scope startLine="655" endLine="657" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FractionField" name="getField" startLine="662" endLine="664" />
  </class>
</source>
