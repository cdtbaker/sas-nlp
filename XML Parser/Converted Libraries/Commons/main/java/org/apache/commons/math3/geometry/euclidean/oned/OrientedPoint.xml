<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.geometry.euclidean.oned">
  <import name="org.apache.commons.math3.geometry.Vector" />
  <import name="org.apache.commons.math3.geometry.partitioning.Hyperplane" />
  <class name="OrientedPoint" startLine="22">
    <implements name="Hyperplane<Euclidean1D>" />
    <javadoc>
      <text>* This class represents a 1D oriented hyperplane.
 * <p>An hyperplane in 1D is a simple point, its orientation being a
 * boolean.</p>
 * <p>Instances of this class are guaranteed to be immutable.</p></text>
      <version>$Id: OrientedPoint.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Vector location.</text>
    </javadoc>
    <declaration type="Vector1D" name="location" />
    <javadoc>
      <text>* Orientation.</text>
    </javadoc>
    <declaration type="boolean" name="direct" />
    <javadoc>
      <text>* Simple constructor.</text>
      <param>location location of the hyperplane</param>
      <param>direct if true, the plus side of the hyperplane is towards
 * abscissas greater than {@code location}</param>
    </javadoc>
    <method type="constructor" name="OrientedPoint" startLine="42" endLine="45" />
    <javadoc>
      <text>* Copy the instance.
 * <p>Since instances are immutable, this method directly returns
 * the instance.</p></text>
      <return>the instance itself</return>
    </javadoc>
    <method type="OrientedPoint" name="copySelf" startLine="52" endLine="54" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getOffset" startLine="57" endLine="60">
      <declaration type="double" name="delta" />
    </method>
    <javadoc>
      <text>* Build a region covering the whole hyperplane.
 * <p>Since this class represent zero dimension spaces which does
 * not have lower dimension sub-spaces, this method returns a dummy
 * implementation of a {@link org.apache.commons.math3.geometry.partitioning.SubHyperplane SubHyperplane}.
 * This implementation is only used to allow the {@link org.apache.commons.math3.geometry.partitioning.SubHyperplaneSubHyperplane} class implementation to work properly, it should
 * <em>not</em> be used otherwise.</p></text>
      <return>a dummy sub hyperplane</return>
    </javadoc>
    <method type="SubOrientedPoint" name="wholeHyperplane" startLine="73" endLine="75" />
    <javadoc>
      <text>* Build a region covering the whole space.</text>
      <return>a region containing the instance (really an {@link IntervalsSet IntervalsSet} instance)</return>
    </javadoc>
    <method type="IntervalsSet" name="wholeSpace" startLine="81" endLine="83" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="sameOrientationAs" startLine="86" endLine="88" />
    <javadoc>
      <text>* Get the hyperplane location on the real line.</text>
      <return>the hyperplane location</return>
    </javadoc>
    <method type="Vector1D" name="getLocation" startLine="93" endLine="95" />
    <javadoc>
      <text>* Check if the hyperplane orientation is direct.</text>
      <return>true if the plus side of the hyperplane is towards
 * abscissae greater than hyperplane location</return>
    </javadoc>
    <method type="boolean" name="isDirect" startLine="101" endLine="103" />
    <javadoc>
      <text>* Revert the instance.</text>
    </javadoc>
    <method type="void" name="revertSelf" startLine="107" endLine="109" />
  </class>
</source>
