<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.regression">
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.linear.Array2DRowRealMatrix" />
  <import name="org.apache.commons.math3.linear.LUDecomposition" />
  <import name="org.apache.commons.math3.linear.QRDecomposition" />
  <import name="org.apache.commons.math3.linear.RealMatrix" />
  <import name="org.apache.commons.math3.linear.RealVector" />
  <import name="org.apache.commons.math3.stat.StatUtils" />
  <import name="org.apache.commons.math3.stat.descriptive.moment.SecondMoment" />
  <class name="OLSMultipleLinearRegression" extends="AbstractMultipleLinearRegression" startLine="28">
    <javadoc>
      <text>* <p>Implements ordinary least squares (OLS) to estimate the parameters of a
 * multiple linear regression model.</p>
 * <p>The regression coefficients, <code>b</code>, satisfy the normal equations:
 * <pre><code> X<sup>T</sup> X b = X<sup>T</sup> y </code></pre></p>
 * <p>To solve the normal equations, this implementation uses QR decomposition
 * of the <code>X</code> matrix. (See {@link QRDecomposition} for details on the
 * decomposition algorithm.) The <code>X</code> matrix, also known as the <i>design matrix,</i>
 * has rows corresponding to sample observations and columns corresponding to independent
 * variables.  When the model is estimated using an intercept term (i.e. when{@link #isNoIntercept() isNoIntercept} is false as it is by default), the <code>X</code>
 * matrix includes an initial column identically equal to 1.  We solve the normal equations
 * as follows:
 * <pre><code> X<sup>T</sup>X b = X<sup>T</sup> y
 * (QR)<sup>T</sup> (QR) b = (QR)<sup>T</sup>y
 * R<sup>T</sup> (Q<sup>T</sup>Q) R b = R<sup>T</sup> Q<sup>T</sup> y
 * R<sup>T</sup> R b = R<sup>T</sup> Q<sup>T</sup> y
 * (R<sup>T</sup>)<sup>-1</sup> R<sup>T</sup> R b = (R<sup>T</sup>)<sup>-1</sup> R<sup>T</sup> Q<sup>T</sup> y
 * R b = Q<sup>T</sup> y </code></pre></p>
 * <p>Given <code>Q</code> and <code>R</code>, the last equation is solved by back-substitution.</p></text>
      <version>$Id: OLSMultipleLinearRegression.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Cached QR decomposition of X matrix</text>
    </javadoc>
    <declaration type="QRDecomposition" name="qr" />
    <javadoc>
      <text>* Loads model x and y sample data, overriding any previous sample.
 * Computes and caches QR decomposition of the X matrix.</text>
      <param>y the [n,1] array representing the y sample</param>
      <param>x the [n,k] array representing the x sample</param>
      <throws>MathIllegalArgumentException if the x and y array data are not
 * compatible for the regression</throws>
    </javadoc>
    <method type="void" name="newSampleData" startLine="69" endLine="73" />
    <javadoc>
      <text>* {@inheritDoc}<p>This implementation computes and caches the QR decomposition of the X matrix.</p></text>
    </javadoc>
    <method type="void" name="newSampleData" startLine="80" endLine="83" />
    <javadoc>
      <text>* <p>Compute the "hat" matrix.
 * </p>
 * <p>The hat matrix is defined in terms of the design matrix X
 * by X(X<sup>T</sup>X)<sup>-1</sup>X<sup>T</sup>
 * </p>
 * <p>The implementation here uses the QR decomposition to compute the
 * hat matrix as Q I<sub>p</sub>Q<sup>T</sup> where I<sub>p</sub> is the
 * p-dimensional identity matrix augmented by 0's.  This computational
 * formula is from "The Hat Matrix in Regression and ANOVA",
 * David C. Hoaglin and Roy E. Welsch,
 * <i>The American Statistician</i>, Vol. 32, No. 1 (Feb., 1978), pp. 17-22.
 * </p>
 * <p>Data for the model must have been successfully loaded using one of
 * the {@code newSampleData} methods before invoking this method; otherwise
 * a {@code NullPointerException} will be thrown.</p></text>
      <return>the hat matrix</return>
    </javadoc>
    <method type="RealMatrix" name="calculateHat" startLine="104" endLine="125">
      <declaration type="RealMatrix" name="Q" />
      <declaration type="int" name="p" />
      <declaration type="int" name="n" />
      <declaration type="Array2DRowRealMatrix" name="augI" />
      <declaration type="double[][]" name="augIData" />
      <scope startLine="112" endLine="120">
        <scope startLine="113" endLine="119">
          <scope startLine="114" endLine="116" />
          <scope startLine="116" endLine="118" />
        </scope>
      </scope>
      <comment>Create augmented identity matrix</comment>
      <comment>No try-catch or advertised NotStrictlyPositiveException - NPE above if n < 3</comment>
      <comment>Compute and return Hat matrix</comment>
      <comment>No DME advertised - args valid if we get here</comment>
    </method>
    <javadoc>
      <text>* <p>Returns the sum of squared deviations of Y from its mean.</p>
 * <p>If the model has no intercept term, <code>0</code> is used for the
 * mean of Y - i.e., what is returned is the sum of the squared Y values.</p>
 * <p>The value returned by this method is the SSTO value used in
 * the {@link #calculateRSquared() R-squared} computation.</p></text>
      <return>SSTO - the total sum of squares</return>
      <throws>MathIllegalArgumentException if the sample has not been set or does
 * not contain at least 3 observations</throws>
      <see>#isNoIntercept()</see>
      <since>2.2</since>
    </javadoc>
    <method type="double" name="calculateTotalSumOfSquares" startLine="142" endLine="148">
      <scope startLine="143" endLine="145" />
      <scope startLine="145" endLine="147" />
    </method>
    <javadoc>
      <text>* Returns the sum of squared residuals.</text>
      <return>residual sum of squares</return>
      <since>2.2</since>
    </javadoc>
    <method type="double" name="calculateResidualSumOfSquares" startLine="156" endLine="160">
      <declaration type="RealVector" name="residuals" />
      <comment>No advertised DME, args are valid</comment>
    </method>
    <javadoc>
      <text>* Returns the R-Squared statistic, defined by the formula <pre>
 * R<sup>2</sup> = 1 - SSR / SSTO
 * </pre>
 * where SSR is the {@link #calculateResidualSumOfSquares() sum of squared residuals}and SSTO is the {@link #calculateTotalSumOfSquares() total sum of squares}</text>
      <return>R-square statistic</return>
      <throws>MathIllegalArgumentException if the sample has not been set or does
 * not contain at least 3 observations</throws>
      <since>2.2</since>
    </javadoc>
    <method type="double" name="calculateRSquared" startLine="174" endLine="176" />
    <javadoc>
      <text>* <p>Returns the adjusted R-squared statistic, defined by the formula <pre>
 * R<sup>2</sup><sub>adj</sub> = 1 - [SSR (n - 1)] / [SSTO (n - p)]
 * </pre>
 * where SSR is the {@link #calculateResidualSumOfSquares() sum of squared residuals},
 * SSTO is the {@link #calculateTotalSumOfSquares() total sum of squares}, n is the number
 * of observations and p is the number of parameters estimated (including the intercept).</p>
 * <p>If the regression is estimated without an intercept term, what is returned is <pre>
 * <code> 1 - (1 - {@link #calculateRSquared()}) * (n / (n - p)) </code>
 * </pre></p></text>
      <return>adjusted R-Squared statistic</return>
      <throws>MathIllegalArgumentException if the sample has not been set or does
 * not contain at least 3 observations</throws>
      <see>#isNoIntercept()</see>
      <since>2.2</since>
    </javadoc>
    <method type="double" name="calculateAdjustedRSquared" startLine="196" endLine="204">
      <declaration type="double" name="n" />
      <scope startLine="198" endLine="200" />
      <scope startLine="200" endLine="203" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}<p>This implementation computes and caches the QR decomposition of the X matrix
 * once it is successfully loaded.</p></text>
    </javadoc>
    <method type="void" name="newXSampleData" startLine="212" endLine="215" />
    <javadoc>
      <text>* Calculates the regression coefficients using OLS.
 * <p>Data for the model must have been successfully loaded using one of
 * the {@code newSampleData} methods before invoking this method; otherwise
 * a {@code NullPointerException} will be thrown.</p></text>
      <return>beta</return>
    </javadoc>
    <method type="RealVector" name="calculateBeta" startLine="227" endLine="229" />
    <javadoc>
      <text>* <p>Calculates the variance-covariance matrix of the regression parameters.
 * </p>
 * <p>Var(b) = (X<sup>T</sup>X)<sup>-1</sup>
 * </p>
 * <p>Uses QR decomposition to reduce (X<sup>T</sup>X)<sup>-1</sup>
 * to (R<sup>T</sup>R)<sup>-1</sup>, with only the top p rows of
 * R included, where p = the length of the beta vector.</p>
 * <p>Data for the model must have been successfully loaded using one of
 * the {@code newSampleData} methods before invoking this method; otherwise
 * a {@code NullPointerException} will be thrown.</p></text>
      <return>The beta variance-covariance matrix</return>
    </javadoc>
    <method type="RealMatrix" name="calculateBetaVariance" startLine="247" endLine="252">
      <declaration type="int" name="p" />
      <declaration type="RealMatrix" name="Raug" />
      <declaration type="RealMatrix" name="Rinv" />
    </method>
  </class>
</source>
