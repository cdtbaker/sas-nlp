<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <class name="RealLinearOperator" startLine="22">
    <javadoc>
      <text>* This class defines a linear operator operating on real ({@code double})
 * vector spaces. No direct access to the coefficients of the underlying matrix
 * is provided.
 * The motivation for such an interface is well stated by
 * <a href="#BARR1994">Barrett et al. (1994)</a>:
 * <blockquote>
 * We restrict ourselves to iterative methods, which work by repeatedly
 * improving an approximate solution until it is accurate enough. These
 * methods access the coefficient matrix A of the linear system only via the
 * matrix-vector product y = A &middot; x
 * (and perhaps z = A<sup>T</sup> &middot; x). Thus the user need only
 * supply a subroutine for computing y (and perhaps z) given x, which permits
 * full exploitation of the sparsity or other special structure of A.
 * </blockquote>
 * <br/>
 * <dl>
 * <dt><a name="BARR1994">Barret et al. (1994)</a></dt>
 * <dd>
 * R. Barrett, M. Berry, T. F. Chan, J. Demmel, J. M. Donato, J. Dongarra,
 * V. Eijkhout, R. Pozo, C. Romine and H. Van der Vorst,
 * <em>Templates for the Solution of Linear Systems: Building Blocks for
 * Iterative Methods</em>, SIAM
 * </dd>
 * </dl></text>
      <version>$Id: RealLinearOperator.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <method name="getRowDimension" type="int" startLine="54" endLine="59" />
    <javadoc>
      <text>* Returns the dimension of the codomain of this operator.</text>
      <return>the number of rows of the underlying matrix</return>
    </javadoc>
    <method name="getColumnDimension" type="int" startLine="61" endLine="66" />
    <javadoc>
      <text>* Returns the dimension of the domain of this operator.</text>
      <return>the number of columns of the underlying matrix</return>
    </javadoc>
    <method name="operate" type="RealVector" startLine="68" endLine="77" />
    <javadoc>
      <text>* Returns the result of multiplying {@code this} by the vector {@code x}.</text>
      <param>x the vector to operate on</param>
      <return>the product of {@code this} instance with {@code x}</return>
      <throws>DimensionMismatchException if the column dimension does not match
 * the size of {@code x}</throws>
    </javadoc>
    <javadoc>
      <text>* Returns the result of multiplying the transpose of {@code this} operator
 * by the vector {@code x} (optional operation). The default implementation
 * throws an {@link UnsupportedOperationException}. Users overriding this
 * method must also override {@link #isTransposable()}.</text>
      <param>x the vector to operate on</param>
      <return>the product of the transpose of {@code this} instance with{@code x}</return>
      <throws>org.apache.commons.math3.exception.DimensionMismatchExceptionif the row dimension does not match the size of {@code x}</throws>
      <throws>UnsupportedOperationException if this operation is not supported
 * by {@code this} operator</throws>
    </javadoc>
    <method type="RealVector" name="operateTranspose" startLine="94" endLine="96" />
    <javadoc>
      <text>* Returns {@code true} if this operator supports{@link #operateTranspose(RealVector)}. If {@code true} is returned,{@link #operateTranspose(RealVector)} should not throw{@code UnsupportedOperationException}. The default implementation returns{@code false}.</text>
      <return>{@code false}</return>
    </javadoc>
    <method type="boolean" name="isTransposable" startLine="107" endLine="109" />
  </class>
</source>
