<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.geometry">
  <import name="java.io.Serializable" />
  <import name="java.text.NumberFormat" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <interface name="Vector" startLine="24">
    <implements name="Serializable" />
    <javadoc>
      <text>* This interface represents a generic vector in a vectorial space or a point in an affine space.</text>
      <param><S>
 *  Type of the space.</param>
      <version>$Id: Vector.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <see>Space</see>
      <see>Vector</see>
      <since>3.0</since>
    </javadoc>
    <method name="getSpace" type="Space" startLine="33" endLine="36" />
    <javadoc>
      <text>* Get the space to which the vector belongs.</text>
      <return>containing space</return>
    </javadoc>
    <method name="getZero" type="Vector<S>" startLine="38" endLine="41" />
    <javadoc>
      <text>* Get the null vector of the vectorial space or origin point of the affine space.</text>
      <return>null vector of the vectorial space or origin point of the affine space</return>
    </javadoc>
    <method name="getNorm1" type="double" startLine="43" endLine="46" />
    <javadoc>
      <text>* Get the L<sub>1</sub> norm for the vector.</text>
      <return>L<sub>1</sub> norm for the vector</return>
    </javadoc>
    <method name="getNorm" type="double" startLine="48" endLine="51" />
    <javadoc>
      <text>* Get the L<sub>2</sub> norm for the vector.</text>
      <return>Euclidean norm for the vector</return>
    </javadoc>
    <method name="getNormSq" type="double" startLine="53" endLine="56" />
    <javadoc>
      <text>* Get the square of the norm for the vector.</text>
      <return>square of the Euclidean norm for the vector</return>
    </javadoc>
    <method name="getNormInf" type="double" startLine="58" endLine="61" />
    <javadoc>
      <text>* Get the L<sub>&infin;</sub> norm for the vector.</text>
      <return>L<sub>&infin;</sub> norm for the vector</return>
    </javadoc>
    <method name="add" type="Vector<S>" startLine="63" endLine="67" />
    <javadoc>
      <text>* Add a vector to the instance.</text>
      <param>v vector to add</param>
      <return>a new vector</return>
    </javadoc>
    <method name="add" type="Vector<S>" startLine="69" endLine="74" />
    <javadoc>
      <text>* Add a scaled vector to the instance.</text>
      <param>factor scale factor to apply to v before adding it</param>
      <param>v vector to add</param>
      <return>a new vector</return>
    </javadoc>
    <method name="subtract" type="Vector<S>" startLine="76" endLine="80" />
    <javadoc>
      <text>* Subtract a vector from the instance.</text>
      <param>v vector to subtract</param>
      <return>a new vector</return>
    </javadoc>
    <method name="subtract" type="Vector<S>" startLine="82" endLine="87" />
    <javadoc>
      <text>* Subtract a scaled vector from the instance.</text>
      <param>factor scale factor to apply to v before subtracting it</param>
      <param>v vector to subtract</param>
      <return>a new vector</return>
    </javadoc>
    <method name="negate" type="Vector<S>" startLine="89" endLine="92" />
    <javadoc>
      <text>* Get the opposite of the instance.</text>
      <return>a new vector which is opposite to the instance</return>
    </javadoc>
    <method name="normalize" type="Vector<S>" startLine="94" endLine="98" />
    <javadoc>
      <text>* Get a normalized vector aligned with the instance.</text>
      <return>a new normalized vector</return>
      <exception>MathArithmeticException if the norm is zero</exception>
    </javadoc>
    <method name="scalarMultiply" type="Vector<S>" startLine="100" endLine="104" />
    <javadoc>
      <text>* Multiply the instance by a scalar.</text>
      <param>a scalar</param>
      <return>a new vector</return>
    </javadoc>
    <method name="isNaN" type="boolean" startLine="106" endLine="110" />
    <javadoc>
      <text>* Returns true if any coordinate of this vector is NaN; false otherwise</text>
      <return>true if any coordinate of this vector is NaN; false otherwise</return>
    </javadoc>
    <method name="isInfinite" type="boolean" startLine="112" endLine="118" />
    <javadoc>
      <text>* Returns true if any coordinate of this vector is infinite and none are NaN;
 * false otherwise</text>
      <return>true if any coordinate of this vector is infinite and none are NaN;
 * false otherwise</return>
    </javadoc>
    <method name="distance1" type="double" startLine="120" endLine="127" />
    <javadoc>
      <text>* Compute the distance between the instance and another vector according to the L<sub>1</sub> norm.
 * <p>Calling this method is equivalent to calling:
 * <code>q.subtract(p).getNorm1()</code> except that no intermediate
 * vector is built</p></text>
      <param>v second vector</param>
      <return>the distance between the instance and p according to the L<sub>1</sub> norm</return>
    </javadoc>
    <method name="distance" type="double" startLine="129" endLine="136" />
    <javadoc>
      <text>* Compute the distance between the instance and another vector according to the L<sub>2</sub> norm.
 * <p>Calling this method is equivalent to calling:
 * <code>q.subtract(p).getNorm()</code> except that no intermediate
 * vector is built</p></text>
      <param>v second vector</param>
      <return>the distance between the instance and p according to the L<sub>2</sub> norm</return>
    </javadoc>
    <method name="distanceInf" type="double" startLine="138" endLine="145" />
    <javadoc>
      <text>* Compute the distance between the instance and another vector according to the L<sub>&infin;</sub> norm.
 * <p>Calling this method is equivalent to calling:
 * <code>q.subtract(p).getNormInf()</code> except that no intermediate
 * vector is built</p></text>
      <param>v second vector</param>
      <return>the distance between the instance and p according to the L<sub>&infin;</sub> norm</return>
    </javadoc>
    <method name="distanceSq" type="double" startLine="147" endLine="154" />
    <javadoc>
      <text>* Compute the square of the distance between the instance and another vector.
 * <p>Calling this method is equivalent to calling:
 * <code>q.subtract(p).getNormSq()</code> except that no intermediate
 * vector is built</p></text>
      <param>v second vector</param>
      <return>the square of the distance between the instance and p</return>
    </javadoc>
    <method name="dotProduct" type="double" startLine="156" endLine="160" />
    <javadoc>
      <text>* Compute the dot-product of the instance and another vector.</text>
      <param>v second vector</param>
      <return>the dot product this.v</return>
    </javadoc>
    <method name="toString" type="String" startLine="162" endLine="166" />
    <javadoc>
      <text>* Get a string representation of this vector.</text>
      <param>format the custom format for components</param>
      <return>a string representation of this vector</return>
    </javadoc>
  </interface>
</source>
