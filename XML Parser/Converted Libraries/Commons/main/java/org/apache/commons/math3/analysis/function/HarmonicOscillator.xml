<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.function">
  <import name="org.apache.commons.math3.analysis.DifferentiableUnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.FunctionUtils" />
  <import name="org.apache.commons.math3.analysis.ParametricUnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.differentiation.DerivativeStructure" />
  <import name="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="HarmonicOscillator" startLine="30">
    <implements name="UnivariateDifferentiableFunction" />
    <implements name="DifferentiableUnivariateFunction" />
    <javadoc>
      <text>* <a href="http://en.wikipedia.org/wiki/Harmonic_oscillator">
 * simple harmonic oscillator</a> function.</text>
      <since>3.0</since>
      <version>$Id: HarmonicOscillator.java 1455194 2013-03-11 15:45:54Z luc $</version>
    </javadoc>
    <javadoc>
      <text>* Amplitude.</text>
    </javadoc>
    <declaration type="double" name="amplitude" />
    <javadoc>
      <text>* Angular frequency.</text>
    </javadoc>
    <declaration type="double" name="omega" />
    <javadoc>
      <text>* Phase.</text>
    </javadoc>
    <declaration type="double" name="phase" />
    <javadoc>
      <text>* Harmonic oscillator function.</text>
      <param>amplitude Amplitude.</param>
      <param>omega Angular frequency.</param>
      <param>phase Phase.</param>
    </javadoc>
    <method type="constructor" name="HarmonicOscillator" startLine="54" endLine="58" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value" startLine="61" endLine="63" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <deprecated>as of 3.1, replaced by {@link #value(DerivativeStructure)}</deprecated>
    </javadoc>
    <method type="UnivariateFunction" name="derivative" startLine="69" endLine="71" />
    <class name="Parametric" startLine="73">
      <implements name="ParametricUnivariateFunction" />
      <javadoc>
        <text>* Parametric function where the input array contains the parameters of
 * the harmonic oscillator function, ordered as follows:
 * <ul>
 * <li>Amplitude</li>
 * <li>Angular frequency</li>
 * <li>Phase</li>
 * </ul></text>
      </javadoc>
      <javadoc>
        <text>* Computes the value of the harmonic oscillator at {@code x}.</text>
        <param>x Value for which the function must be computed.</param>
        <param>param Values of norm, mean and standard deviation.</param>
        <return>the value of the function.</return>
        <throws>NullArgumentException if {@code param} is {@code null}.</throws>
        <throws>DimensionMismatchException if the size of {@code param} is
 * not 3.</throws>
      </javadoc>
      <method type="double" name="value" startLine="95" endLine="98" />
      <javadoc>
        <text>* Computes the value of the gradient at {@code x}.
 * The components of the gradient vector are the partial
 * derivatives of the function with respect to each of the
 * <em>parameters</em> (amplitude, angular frequency and phase).</text>
        <param>x Value at which the gradient must be computed.</param>
        <param>param Values of amplitude, angular frequency and phase.</param>
        <return>the gradient vector at {@code x}.</return>
        <throws>NullArgumentException if {@code param} is {@code null}.</throws>
        <throws>DimensionMismatchException if the size of {@code param} is
 * not 3.</throws>
      </javadoc>
      <method type="double[]" name="gradient" startLine="115" endLine="128">
        <declaration type="double" name="amplitude" />
        <declaration type="double" name="omega" />
        <declaration type="double" name="phase" />
        <declaration type="double" name="xTimesOmegaPlusPhase" />
        <declaration type="double" name="a" />
        <declaration type="double" name="p" />
        <declaration type="double" name="w" />
      </method>
      <javadoc>
        <text>* Validates parameters to ensure they are appropriate for the evaluation of
 * the {@link #value(double,double[])} and {@link #gradient(double,double[])}methods.</text>
        <param>param Values of norm, mean and standard deviation.</param>
        <throws>NullArgumentException if {@code param} is {@code null}.</throws>
        <throws>DimensionMismatchException if the size of {@code param} is
 * not 3.</throws>
      </javadoc>
      <method type="void" name="validateParameters" startLine="142" endLine="149">
        <scope startLine="143" endLine="145" />
        <scope startLine="146" endLine="148" />
      </method>
      <javadoc>
        <param>xTimesOmegaPlusPhase {@code omega * x + phase}.</param>
        <param>amplitude Amplitude.</param>
        <return>the value of the harmonic oscillator function at {@code x}.</return>
      </javadoc>
      <method type="double" name="value" startLine="158" endLine="160" />
      <javadoc>
        <text>* {@inheritDoc}</text>
        <since>3.1</since>
      </javadoc>
      <method type="DerivativeStructure" name="value" startLine="166" endLine="182">
        <declaration type="double" name="x" />
        <declaration type="double[]" name="f" />
        <declaration type="double" name="alpha" />
        <scope startLine="172" endLine="178">
          <declaration type="double" name="mo2" />
          <scope startLine="175" endLine="177" />
        </scope>
      </method>
    </class>
  </class>
</source>
