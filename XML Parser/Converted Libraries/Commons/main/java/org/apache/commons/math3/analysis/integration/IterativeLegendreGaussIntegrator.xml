<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.integration">
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory" />
  <import name="org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="IterativeLegendreGaussIntegrator" extends="BaseAbstractUnivariateIntegrator" startLine="30">
    <javadoc>
      <text>* This algorithm divides the integration interval into equally-sized
 * sub-interval and on each of them performs a
 * <a href="http://mathworld.wolfram.com/Legendre-GaussQuadrature.html">
 * Legendre-Gauss</a> quadrature.</text>
      <version>$Id: IterativeLegendreGaussIntegrator.java 1455194 2013-03-11 15:45:54Z luc $</version>
      <since>3.1</since>
    </javadoc>
    <javadoc>
      <text>* Factory that computes the points and weights.</text>
    </javadoc>
    <declaration type="GaussIntegratorFactory" name="FACTORY" />
    <javadoc>
      <text>* Number of integration points (per interval).</text>
    </javadoc>
    <declaration type="int" name="numberOfPoints" />
    <javadoc>
      <text>* Builds an integrator with given accuracies and iterations counts.</text>
      <param>n Number of integration points.</param>
      <param>relativeAccuracy Relative accuracy of the result.</param>
      <param>absoluteAccuracy Absolute accuracy of the result.</param>
      <param>minimalIterationCount Minimum number of iterations.</param>
      <param>maximalIterationCount Maximum number of iterations.</param>
      <throws>NotStrictlyPositiveException if minimal number of iterations
 * or number of points are not strictly positive.</throws>
      <throws>NumberIsTooSmallException if maximal number of iterations
 * is smaller than or equal to the minimal number of iterations.</throws>
    </javadoc>
    <method type="constructor" name="IterativeLegendreGaussIntegrator" startLine="66" endLine="72">
      <scope startLine="68" endLine="70" />
    </method>
    <javadoc>
      <text>* Builds an integrator with given accuracies.</text>
      <param>n Number of integration points.</param>
      <param>relativeAccuracy Relative accuracy of the result.</param>
      <param>absoluteAccuracy Absolute accuracy of the result.</param>
      <throws>NotStrictlyPositiveException if {@code n < 1}.</throws>
    </javadoc>
    <method type="constructor" name="IterativeLegendreGaussIntegrator" startLine="85" endLine="88" />
    <javadoc>
      <text>* Builds an integrator with given iteration counts.</text>
      <param>n Number of integration points.</param>
      <param>minimalIterationCount Minimum number of iterations.</param>
      <param>maximalIterationCount Maximum number of iterations.</param>
      <throws>NotStrictlyPositiveException if minimal number of iterations
 * is not strictly positive.</throws>
      <throws>NumberIsTooSmallException if maximal number of iterations
 * is smaller than or equal to the minimal number of iterations.</throws>
      <throws>NotStrictlyPositiveException if {@code n < 1}.</throws>
    </javadoc>
    <method type="constructor" name="IterativeLegendreGaussIntegrator" startLine="105" endLine="108" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="doIntegrate" startLine="113" endLine="140">
      <declaration type="double" name="oldt" />
      <declaration type="int" name="n" />
      <scope startLine="118" endLine="139">
        <declaration type="double" name="t" />
        <declaration type="double" name="delta" />
        <declaration type="double" name="limit" />
        <scope startLine="130" endLine="132" />
        <declaration type="double" name="ratio" />
        <comment>Improve integral with a larger number of steps.</comment>
        <comment>Estimate the error.</comment>
        <comment>check convergence</comment>
        <comment>Prepare next iteration.</comment>
      </scope>
      <comment>Compute first estimate with a single step.</comment>
    </method>
    <javadoc>
      <text>* Compute the n-th stage integral.</text>
      <param>n Number of steps.</param>
      <return>the value of n-th stage integral.</return>
      <throws>TooManyEvaluationsException if the maximum number of evaluations
 * is exceeded.</throws>
    </javadoc>
    <method type="double" name="stage" startLine="151" endLine="174">
      <declaration type="UnivariateFunction" name="f" />
      <method type="double" name="value" startLine="155" endLine="157" />
      <declaration type="double" name="min" />
      <declaration type="double" name="max" />
      <declaration type="double" name="step" />
      <declaration type="double" name="sum" />
      <scope startLine="165" endLine="171">
        <declaration type="double" name="a" />
        <declaration type="double" name="b" />
        <declaration type="GaussIntegrator" name="g" />
        <comment>Integrate over each sub-interval [a, b].</comment>
      </scope>
      <comment>Function to be integrated is stored in the base class.</comment>
    </method>
  </class>
</source>
