<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim.univariate">
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.optim.BaseOptimizer" />
  <import name="org.apache.commons.math3.optim.OptimizationData" />
  <import name="org.apache.commons.math3.optim.nonlinear.scalar.GoalType" />
  <import name="org.apache.commons.math3.optim.ConvergenceChecker" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <class name="UnivariateOptimizer" extends="BaseOptimizer<UnivariatePointValuePair>" startLine="26">
    <javadoc>
      <text>* Base class for a univariate scalar function optimizer.</text>
      <version>$Id: UnivariateOptimizer.java 1443444 2013-02-07 12:41:36Z erans $</version>
      <since>3.1</since>
    </javadoc>
    <javadoc>
      <text>* Objective function.</text>
    </javadoc>
    <declaration type="UnivariateFunction" name="function" />
    <javadoc>
      <text>* Type of optimization.</text>
    </javadoc>
    <declaration type="GoalType" name="goal" />
    <javadoc>
      <text>* Initial guess.</text>
    </javadoc>
    <declaration type="double" name="start" />
    <javadoc>
      <text>* Lower bound.</text>
    </javadoc>
    <declaration type="double" name="min" />
    <javadoc>
      <text>* Upper bound.</text>
    </javadoc>
    <declaration type="double" name="max" />
    <javadoc>
      <param>checker Convergence checker.</param>
    </javadoc>
    <method type="constructor" name="UnivariateOptimizer" startLine="48" endLine="50" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <param>optData Optimization data. In addition to those documented in{@link BaseOptimizer#parseOptimizationData(OptimizationData[])BaseOptimizer}, this method will register the following data:
 * <ul>
 * <li>{@link GoalType}</li>
 * <li>{@link SearchInterval}</li>
 * <li>{@link UnivariateObjectiveFunction}</li>
 * </ul></param>
      <return>{@inheritDoc}</return>
      <throws>TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.</throws>
    </javadoc>
    <method type="UnivariatePointValuePair" name="optimize" startLine="68" endLine="71">
      <comment>Perform computation.</comment>
    </method>
    <javadoc>
      <return>the optimization type.</return>
    </javadoc>
    <method type="GoalType" name="getGoalType" startLine="76" endLine="78" />
    <javadoc>
      <text>* Scans the list of (required and optional) optimization data that
 * characterize the problem.</text>
      <param>optData Optimization data.
 * The following data will be looked for:
 * <ul>
 * <li>{@link GoalType}</li>
 * <li>{@link SearchInterval}</li>
 * <li>{@link UnivariateObjectiveFunction}</li>
 * </ul></param>
    </javadoc>
    <method type="void" name="parseOptimizationData" startLine="93" endLine="116">
      <scope startLine="99" endLine="115">
        <scope startLine="100" endLine="106">
          <declaration type="SearchInterval" name="interval" />
        </scope>
        <scope startLine="107" endLine="110" />
        <scope startLine="111" endLine="114" />
      </scope>
      <comment>Allow base class to register its own data.</comment>
      <comment>The existing values (as set by the previous call) are reused if</comment>
      <comment>not provided in the argument list.</comment>
    </method>
    <javadoc>
      <return>the initial guess.</return>
    </javadoc>
    <method type="double" name="getStartValue" startLine="121" endLine="123" />
    <javadoc>
      <return>the lower bounds.</return>
    </javadoc>
    <method type="double" name="getMin" startLine="127" endLine="129" />
    <javadoc>
      <return>the upper bounds.</return>
    </javadoc>
    <method type="double" name="getMax" startLine="133" endLine="135" />
    <javadoc>
      <text>* Computes the objective function value.
 * This method <em>must</em> be called by subclasses to enforce the
 * evaluation counter limit.</text>
      <param>x Point at which the objective function must be evaluated.</param>
      <return>the objective function value at the specified point.</return>
      <throws>TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.</throws>
    </javadoc>
    <method type="double" name="computeObjectiveValue" startLine="147" endLine="150" />
  </class>
</source>
