<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.descriptive.moment">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="SemiVariance" extends="AbstractUnivariateStatistic" startLine="27">
    <implements name="Serializable" />
    <javadoc>
      <text>* <p>Computes the semivariance of a set of values with respect to a given cutoff value.
 * We define the <i>downside semivariance</i> of a set of values <code>x</code>
 * against the <i>cutoff value</i> <code>cutoff</code> to be <br/>
 * <code>&Sigma; (x[i] - target)<sup>2</sup> / df</code> <br/>
 * where the sum is taken over all <code>i</code> such that <code>x[i] < cutoff</code>
 * and <code>df</code> is the length of <code>x</code> (non-bias-corrected) or
 * one less than this number (bias corrected).  The <i>upside semivariance</i>
 * is defined similarly, with the sum taken over values of <code>x</code> that
 * exceed the cutoff value.</p>
 * <p>The cutoff value defaults to the mean, bias correction defaults to <code>true</code>
 * and the "variance direction" (upside or downside) defaults to downside.  The variance direction
 * and bias correction may be set using property setters or their values can provided as
 * parameters to {@link #evaluate(double[],double,Direction,boolean,int,int)}.</p>
 * <p>If the input array is null, <code>evaluate</code> methods throw
 * <code>IllegalArgumentException.</code>  If the array has length 1, <code>0</code>
 * is returned, regardless of the value of the <code>cutoff.</code>
 * <p><strong>Note that this class is not intended to be threadsafe.</strong> If
 * multiple threads access an instance of this class concurrently, and one or
 * more of these threads invoke property setters, external synchronization must
 * be provided to ensure correct results.</p></text>
      <since>2.1</since>
      <version>$Id: SemiVariance.java 1385386 2012-09-16 22:11:15Z psteitz $</version>
    </javadoc>
    <javadoc>
      <text>* The UPSIDE Direction is used to specify that the observations above the
 * cutoff point will be used to calculate SemiVariance.</text>
    </javadoc>
    <declaration type="Direction" name="UPSIDE_VARIANCE" />
    <javadoc>
      <text>* The DOWNSIDE Direction is used to specify that the observations below
 * the cutoff point will be used to calculate SemiVariance</text>
    </javadoc>
    <declaration type="Direction" name="DOWNSIDE_VARIANCE" />
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Determines whether or not bias correction is applied when computing the
 * value of the statisic.  True means that bias is corrected.</text>
    </javadoc>
    <declaration type="boolean" name="biasCorrected" />
    <javadoc>
      <text>* Determines whether to calculate downside or upside SemiVariance.</text>
    </javadoc>
    <declaration type="Direction" name="varianceDirection" />
    <javadoc>
      <text>* Constructs a SemiVariance with default (true) <code>biasCorrected</code>
 * property and default (Downside) <code>varianceDirection</code> property.</text>
    </javadoc>
    <method type="constructor" name="SemiVariance" startLine="87" endLine="88" />
    <javadoc>
      <text>* Constructs a SemiVariance with the specified <code>biasCorrected</code>
 * property and default (Downside) <code>varianceDirection</code> property.</text>
      <param>biasCorrected  setting for bias correction - true means
 * bias will be corrected and is equivalent to using the argumentless
 * constructor</param>
    </javadoc>
    <method type="constructor" name="SemiVariance" startLine="98" endLine="100" />
    <javadoc>
      <text>* Constructs a SemiVariance with the specified <code>Direction</code> property
 * and default (true) <code>biasCorrected</code> property</text>
      <param>direction  setting for the direction of the SemiVariance
 * to calculate</param>
    </javadoc>
    <method type="constructor" name="SemiVariance" startLine="110" endLine="112" />
    <javadoc>
      <text>* Constructs a SemiVariance with the specified <code>isBiasCorrected</code>
 * property and the specified <code>Direction</code> property.</text>
      <param>corrected  setting for bias correction - true means
 * bias will be corrected and is equivalent to using the argumentless
 * constructor</param>
      <param>direction  setting for the direction of the SemiVariance
 * to calculate</param>
    </javadoc>
    <method type="constructor" name="SemiVariance" startLine="126" endLine="129" />
    <javadoc>
      <text>* Copy constructor, creates a new {@code SemiVariance} identical
 * to the {@code original}</text>
      <param>original the {@code SemiVariance} instance to copy</param>
      <throws>NullArgumentException  if original is null</throws>
    </javadoc>
    <method type="constructor" name="SemiVariance" startLine="139" endLine="141" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="SemiVariance" name="copy" startLine="148" endLine="153">
      <declaration type="SemiVariance" name="result" />
      <comment>No try-catch or advertised exception because args are guaranteed non-null</comment>
    </method>
    <javadoc>
      <text>* Copies source to dest.
 * <p>Neither source nor dest can be null.</p></text>
      <param>source SemiVariance to copy</param>
      <param>dest SemiVariance to copy to</param>
      <throws>NullArgumentException if either source or dest is null</throws>
    </javadoc>
    <method type="void" name="copy" startLine="165" endLine="171" />
    <javadoc>
      <text>* <p>Returns the {@link SemiVariance} of the designated values against the mean, using
 * instance properties varianceDirection and biasCorrection.</p>
 * <p>Returns <code>NaN</code> if the array is empty and throws
 * <code>IllegalArgumentException</code> if the array is null.</p></text>
      <param>values the input array</param>
      <param>start index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the SemiVariance</return>
      <throws>MathIllegalArgumentException if the parameters are not valid</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="189" endLine="192">
      <declaration type="double" name="m" />
    </method>
    <javadoc>
      <text>* This method calculates {@link SemiVariance} for the entire array against the mean, using
 * the current value of the biasCorrection instance property.</text>
      <param>values the input array</param>
      <param>direction the {@link Direction} of the semivariance</param>
      <return>the SemiVariance</return>
      <throws>MathIllegalArgumentException if values is null</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="206" endLine="209">
      <declaration type="double" name="m" />
    </method>
    <javadoc>
      <text>* <p>Returns the {@link SemiVariance} of the designated values against the cutoff, using
 * instance properties variancDirection and biasCorrection.</p>
 * <p>Returns <code>NaN</code> if the array is empty and throws
 * <code>MathIllegalArgumentException</code> if the array is null.</p></text>
      <param>values the input array</param>
      <param>cutoff the reference point</param>
      <return>the SemiVariance</return>
      <throws>MathIllegalArgumentException if values is null</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="224" endLine="226" />
    <javadoc>
      <text>* <p>Returns the {@link SemiVariance} of the designated values against the cutoff in the
 * given direction, using the current value of the biasCorrection instance property.</p>
 * <p>Returns <code>NaN</code> if the array is empty and throws
 * <code>MathIllegalArgumentException</code> if the array is null.</p></text>
      <param>values the input array</param>
      <param>cutoff the reference point</param>
      <param>direction the {@link Direction} of the semivariance</param>
      <return>the SemiVariance</return>
      <throws>MathIllegalArgumentException if values is null</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="242" endLine="244" />
    <javadoc>
      <text>* <p>Returns the {@link SemiVariance} of the designated values against the cutoff
 * in the given direction with the provided bias correction.</p>
 * <p>Returns <code>NaN</code> if the array is empty and throws
 * <code>IllegalArgumentException</code> if the array is null.</p></text>
      <param>values the input array</param>
      <param>cutoff the reference point</param>
      <param>direction the {@link Direction} of the semivariance</param>
      <param>corrected the BiasCorrection flag</param>
      <param>start index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the SemiVariance</return>
      <throws>MathIllegalArgumentException if the parameters are not valid</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="265" endLine="292">
      <scope startLine="268" endLine="270" />
      <scope startLine="270" endLine="291">
        <scope startLine="271" endLine="273" />
        <scope startLine="273" endLine="290">
          <declaration type="boolean" name="booleanDirection" />
          <declaration type="double" name="dev" />
          <declaration type="double" name="sumsq" />
          <scope startLine="278" endLine="283">
            <scope startLine="279" endLine="282" />
          </scope>
          <scope startLine="285" endLine="287" />
          <scope startLine="287" endLine="289" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Returns true iff biasCorrected property is set to true.</text>
      <return>the value of biasCorrected.</return>
    </javadoc>
    <method type="boolean" name="isBiasCorrected" startLine="299" endLine="301" />
    <javadoc>
      <text>* Sets the biasCorrected property.</text>
      <param>biasCorrected new biasCorrected property value</param>
    </javadoc>
    <method type="void" name="setBiasCorrected" startLine="308" endLine="310" />
    <javadoc>
      <text>* Returns the varianceDirection property.</text>
      <return>the varianceDirection</return>
    </javadoc>
    <method type="Direction" name="getVarianceDirection" startLine="317" endLine="319" />
    <javadoc>
      <text>* Sets the variance direction</text>
      <param>varianceDirection the direction of the semivariance</param>
    </javadoc>
    <method type="void" name="setVarianceDirection" startLine="326" endLine="328" />
    <javadoc>
      <text>* The direction of the semivariance - either upside or downside. The direction
 * is represented by boolean, with true corresponding to UPSIDE semivariance.</text>
    </javadoc>
    <javadoc>
      <text>* The UPSIDE Direction is used to specify that the observations above the
 * cutoff point will be used to calculate SemiVariance</text>
    </javadoc>
    <javadoc>
      <text>* The DOWNSIDE Direction is used to specify that the observations below
 * the cutoff point will be used to calculate SemiVariance</text>
    </javadoc>
    <javadoc>
      <text>* boolean value  UPSIDE <-> true</text>
    </javadoc>
    <declaration type="boolean" name="direction" />
    <javadoc>
      <text>* Create a Direction with the given value.</text>
      <param>b boolean value representing the Direction. True corresponds to UPSIDE.</param>
    </javadoc>
    <method type="constructor" name="Direction" startLine="357" endLine="359" />
    <javadoc>
      <text>* Returns the value of this Direction. True corresponds to UPSIDE.</text>
      <return>true if direction is UPSIDE; false otherwise</return>
    </javadoc>
    <method type="boolean" name="getDirection" startLine="366" endLine="368" />
  </class>
</source>
