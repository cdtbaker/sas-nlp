<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.geometry.euclidean.twod">
  <import name="java.text.NumberFormat" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.geometry.Space" />
  <import name="org.apache.commons.math3.geometry.Vector" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="Vector2D" startLine="29">
    <implements name="Vector<Euclidean2D>" />
    <javadoc>
      <text>* This class represents a 2D vector.
 * <p>Instances of this class are guaranteed to be immutable.</p></text>
      <version>$Id: Vector2D.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Origin (coordinates: 0, 0).</text>
    </javadoc>
    <declaration type="Vector2D" name="ZERO" />
    <javadoc>
      <text>* A vector with all coordinates set to NaN.</text>
    </javadoc>
    <declaration type="Vector2D" name="NaN" />
    <javadoc>
      <text>* A vector with all coordinates set to positive infinity.</text>
    </javadoc>
    <declaration type="Vector2D" name="POSITIVE_INFINITY" />
    <javadoc>
      <text>* A vector with all coordinates set to negative infinity.</text>
    </javadoc>
    <declaration type="Vector2D" name="NEGATIVE_INFINITY" />
    <javadoc>
      <text>* Serializable UID.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Abscissa.</text>
    </javadoc>
    <declaration type="double" name="x" />
    <javadoc>
      <text>* Ordinate.</text>
    </javadoc>
    <declaration type="double" name="y" />
    <javadoc>
      <text>* Simple constructor.
 * Build a vector from its coordinates</text>
      <param>x abscissa</param>
      <param>y ordinate</param>
      <see>#getX()</see>
      <see>#getY()</see>
    </javadoc>
    <method type="constructor" name="Vector2D" startLine="68" endLine="71" />
    <javadoc>
      <text>* Simple constructor.
 * Build a vector from its coordinates</text>
      <param>v coordinates array</param>
      <exception>DimensionMismatchException if array does not have 2 elements</exception>
      <see>#toArray()</see>
    </javadoc>
    <method type="constructor" name="Vector2D" startLine="79" endLine="85">
      <scope startLine="80" endLine="82" />
    </method>
    <javadoc>
      <text>* Multiplicative constructor
 * Build a vector from another one and a scale factor.
 * The vector built will be a * u</text>
      <param>a scale factor</param>
      <param>u base (unscaled) vector</param>
    </javadoc>
    <method type="constructor" name="Vector2D" startLine="93" endLine="96" />
    <javadoc>
      <text>* Linear constructor
 * Build a vector from two other ones and corresponding scale factors.
 * The vector built will be a1 * u1 + a2 * u2</text>
      <param>a1 first scale factor</param>
      <param>u1 first base (unscaled) vector</param>
      <param>a2 second scale factor</param>
      <param>u2 second base (unscaled) vector</param>
    </javadoc>
    <method type="constructor" name="Vector2D" startLine="106" endLine="109" />
    <javadoc>
      <text>* Linear constructor
 * Build a vector from three other ones and corresponding scale factors.
 * The vector built will be a1 * u1 + a2 * u2 + a3 * u3</text>
      <param>a1 first scale factor</param>
      <param>u1 first base (unscaled) vector</param>
      <param>a2 second scale factor</param>
      <param>u2 second base (unscaled) vector</param>
      <param>a3 third scale factor</param>
      <param>u3 third base (unscaled) vector</param>
    </javadoc>
    <method type="constructor" name="Vector2D" startLine="122" endLine="125" />
    <javadoc>
      <text>* Linear constructor
 * Build a vector from four other ones and corresponding scale factors.
 * The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4</text>
      <param>a1 first scale factor</param>
      <param>u1 first base (unscaled) vector</param>
      <param>a2 second scale factor</param>
      <param>u2 second base (unscaled) vector</param>
      <param>a3 third scale factor</param>
      <param>u3 third base (unscaled) vector</param>
      <param>a4 fourth scale factor</param>
      <param>u4 fourth base (unscaled) vector</param>
    </javadoc>
    <method type="constructor" name="Vector2D" startLine="140" endLine="143" />
    <javadoc>
      <text>* Get the abscissa of the vector.</text>
      <return>abscissa of the vector</return>
      <see>#Vector2D(double,double)</see>
    </javadoc>
    <method type="double" name="getX" startLine="149" endLine="151" />
    <javadoc>
      <text>* Get the ordinate of the vector.</text>
      <return>ordinate of the vector</return>
      <see>#Vector2D(double,double)</see>
    </javadoc>
    <method type="double" name="getY" startLine="157" endLine="159" />
    <javadoc>
      <text>* Get the vector coordinates as a dimension 2 array.</text>
      <return>vector coordinates</return>
      <see>#Vector2D(double[])</see>
    </javadoc>
    <method type="double[]" name="toArray" startLine="165" endLine="167" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Space" name="getSpace" startLine="170" endLine="172" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Vector2D" name="getZero" startLine="175" endLine="177" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getNorm1" startLine="180" endLine="182" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getNorm" startLine="185" endLine="187" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getNormSq" startLine="190" endLine="192" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getNormInf" startLine="195" endLine="197" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Vector2D" name="add" startLine="200" endLine="203">
      <declaration type="Vector2D" name="v2" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Vector2D" name="add" startLine="206" endLine="209">
      <declaration type="Vector2D" name="v2" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Vector2D" name="subtract" startLine="212" endLine="215">
      <declaration type="Vector2D" name="p3" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Vector2D" name="subtract" startLine="218" endLine="221">
      <declaration type="Vector2D" name="v2" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Vector2D" name="normalize" startLine="224" endLine="230">
      <declaration type="double" name="s" />
      <scope startLine="226" endLine="228" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Vector2D" name="negate" startLine="232" endLine="234" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Vector2D" name="scalarMultiply" startLine="237" endLine="239" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isNaN" startLine="242" endLine="244" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isInfinite" startLine="247" endLine="249" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="distance1" startLine="252" endLine="257">
      <declaration type="Vector2D" name="p3" />
      <declaration type="double" name="dx" />
      <declaration type="double" name="dy" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="distance" startLine="260" endLine="265">
      <declaration type="Vector2D" name="p3" />
      <declaration type="double" name="dx" />
      <declaration type="double" name="dy" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="distanceInf" startLine="268" endLine="273">
      <declaration type="Vector2D" name="p3" />
      <declaration type="double" name="dx" />
      <declaration type="double" name="dy" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="distanceSq" startLine="276" endLine="281">
      <declaration type="Vector2D" name="p3" />
      <declaration type="double" name="dx" />
      <declaration type="double" name="dy" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="dotProduct" startLine="284" endLine="287">
      <declaration type="Vector2D" name="v2" />
    </method>
    <javadoc>
      <text>* Compute the distance between two vectors according to the L<sub>2</sub> norm.
 * <p>Calling this method is equivalent to calling:
 * <code>p1.subtract(p2).getNorm()</code> except that no intermediate
 * vector is built</p></text>
      <param>p1 first vector</param>
      <param>p2 second vector</param>
      <return>the distance between p1 and p2 according to the L<sub>2</sub> norm</return>
    </javadoc>
    <method type="double" name="distance" startLine="297" endLine="299" />
    <javadoc>
      <text>* Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.
 * <p>Calling this method is equivalent to calling:
 * <code>p1.subtract(p2).getNormInf()</code> except that no intermediate
 * vector is built</p></text>
      <param>p1 first vector</param>
      <param>p2 second vector</param>
      <return>the distance between p1 and p2 according to the L<sub>&infin;</sub> norm</return>
    </javadoc>
    <method type="double" name="distanceInf" startLine="309" endLine="311" />
    <javadoc>
      <text>* Compute the square of the distance between two vectors.
 * <p>Calling this method is equivalent to calling:
 * <code>p1.subtract(p2).getNormSq()</code> except that no intermediate
 * vector is built</p></text>
      <param>p1 first vector</param>
      <param>p2 second vector</param>
      <return>the square of the distance between p1 and p2</return>
    </javadoc>
    <method type="double" name="distanceSq" startLine="321" endLine="323" />
    <javadoc>
      <text>* Test for the equality of two 2D vectors.
 * <p>
 * If all coordinates of two 2D vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two 2D vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 2D vector are equal to <code>Double.NaN</code>, the 2D vector is equal to{@link #NaN}.
 * </p></text>
      <param>other Object to test for equality to this</param>
      <return>true if two 2D vector objects are equal, false if
 * object is null, not an instance of Vector2D, or
 * not equal to this Vector2D instance</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="345" endLine="360">
      <scope startLine="347" endLine="349" />
      <scope startLine="351" endLine="358">
        <declaration type="Vector2D" name="rhs" />
        <scope startLine="353" endLine="355" />
      </scope>
    </method>
    <javadoc>
      <text>* Get a hashCode for the 2D vector.
 * <p>
 * All NaN values have the same hash code.</p></text>
      <return>a hash code value for this object</return>
    </javadoc>
    <method type="int" name="hashCode" startLine="370" endLine="375">
      <scope startLine="371" endLine="373" />
    </method>
    <javadoc>
      <text>* Get a string representation of this vector.</text>
      <return>a string representation of this vector</return>
    </javadoc>
    <method type="String" name="toString" startLine="381" endLine="383" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="String" name="toString" startLine="386" endLine="388" />
    <comment>CHECKSTYLE: stop ConstantName</comment>
    <comment>CHECKSTYLE: resume ConstantName</comment>
  </class>
</source>
