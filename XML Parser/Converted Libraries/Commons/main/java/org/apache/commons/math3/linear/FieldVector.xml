<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="org.apache.commons.math3.Field" />
  <import name="org.apache.commons.math3.FieldElement" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.exception.NotPositiveException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <interface name="FieldVector" startLine="27">
    <javadoc>
      <text>* Interface defining a field-valued vector with basic algebraic operations.
 * <p>
 * vector element indexing is 0-based -- e.g., <code>getEntry(0)</code>
 * returns the first element of the vector.
 * </p>
 * <p>
 * The various <code>mapXxx</code> and <code>mapXxxToSelf</code> methods operate
 * on vectors element-wise, i.e. they perform the same operation (adding a scalar,
 * applying a function ...) on each element in turn. The <code>mapXxx</code>
 * versions create a new vector to hold the result and do not change the instance.
 * The <code>mapXxxToSelf</code> versions use the instance itself to store the
 * results, so the instance is changed by these methods. In both cases, the result
 * vector is returned by the methods, this allows to use the <i>fluent API</i>
 * style, like this:
 * </p>
 * <pre>
 * RealVector result = v.mapAddToSelf(3.0).mapTanToSelf().mapSquareToSelf();
 * </pre>
 * <p>
 * Note that as almost all operations on {@link FieldElement} throw {@link NullArgumentException} when operating on a null element, it is the responsibility
 * of <code>FieldVector</code> implementations to make sure no null elements
 * are inserted into the vector. This must be done in all constructors and
 * all setters.
 * <p></text>
      <param><T>
 *  the type of the field elements</param>
      <version>$Id: FieldVector.java 1455233 2013-03-11 17:00:41Z luc $</version>
      <since>2.0</since>
    </javadoc>
    <method name="getField" type="Field<T>" startLine="60" endLine="64" />
    <javadoc>
      <text>* Get the type of field elements of the vector.</text>
      <return>type of field elements of the vector</return>
    </javadoc>
    <method name="copy" type="FieldVector<T>" startLine="66" endLine="70" />
    <javadoc>
      <text>* Returns a (deep) copy of this.</text>
      <return>vector copy</return>
    </javadoc>
    <method name="add" type="FieldVector<T>" startLine="72" endLine="78" />
    <javadoc>
      <text>* Compute the sum of {@code this} and {@code v}.</text>
      <param>v vector to be added</param>
      <return>{@code this + v}</return>
      <throws>DimensionMismatchException if {@code v} is not the same size as {@code this}</throws>
    </javadoc>
    <method name="subtract" type="FieldVector<T>" startLine="80" endLine="86" />
    <javadoc>
      <text>* Compute {@code this} minus {@code v}.</text>
      <param>v vector to be subtracted</param>
      <return>{@code this - v}</return>
      <throws>DimensionMismatchException if {@code v} is not the same size as {@code this}</throws>
    </javadoc>
    <method name="mapAdd" type="FieldVector<T>" startLine="88" endLine="94" />
    <javadoc>
      <text>* Map an addition operation to each entry.</text>
      <param>d value to be added to each entry</param>
      <return>{@code this + d}</return>
      <throws>NullArgumentException if {@code d} is {@code null}.</throws>
    </javadoc>
    <method name="mapAddToSelf" type="FieldVector<T>" startLine="96" endLine="103" />
    <javadoc>
      <text>* Map an addition operation to each entry.
 * <p>The instance <strong>is</strong> changed by this method.</p></text>
      <param>d value to be added to each entry</param>
      <return>for convenience, return {@code this}</return>
      <throws>NullArgumentException if {@code d} is {@code null}.</throws>
    </javadoc>
    <method name="mapSubtract" type="FieldVector<T>" startLine="105" endLine="111" />
    <javadoc>
      <text>* Map a subtraction operation to each entry.</text>
      <param>d value to be subtracted to each entry</param>
      <return>{@code this - d}</return>
      <throws>NullArgumentException if {@code d} is {@code null}</throws>
    </javadoc>
    <method name="mapSubtractToSelf" type="FieldVector<T>" startLine="113" endLine="120" />
    <javadoc>
      <text>* Map a subtraction operation to each entry.
 * <p>The instance <strong>is</strong> changed by this method.</p></text>
      <param>d value to be subtracted to each entry</param>
      <return>for convenience, return {@code this}</return>
      <throws>NullArgumentException if {@code d} is {@code null}</throws>
    </javadoc>
    <method name="mapMultiply" type="FieldVector<T>" startLine="122" endLine="128" />
    <javadoc>
      <text>* Map a multiplication operation to each entry.</text>
      <param>d value to multiply all entries by</param>
      <return>{@code this * d}</return>
      <throws>NullArgumentException if {@code d} is {@code null}.</throws>
    </javadoc>
    <method name="mapMultiplyToSelf" type="FieldVector<T>" startLine="130" endLine="137" />
    <javadoc>
      <text>* Map a multiplication operation to each entry.
 * <p>The instance <strong>is</strong> changed by this method.</p></text>
      <param>d value to multiply all entries by</param>
      <return>for convenience, return {@code this}</return>
      <throws>NullArgumentException if {@code d} is {@code null}.</throws>
    </javadoc>
    <method name="mapDivide" type="FieldVector<T>" startLine="139" endLine="147" />
    <javadoc>
      <text>* Map a division operation to each entry.</text>
      <param>d value to divide all entries by</param>
      <return>{@code this / d}</return>
      <throws>NullArgumentException if {@code d} is {@code null}.</throws>
      <throws>MathArithmeticException if {@code d} is zero.</throws>
    </javadoc>
    <method name="mapDivideToSelf" type="FieldVector<T>" startLine="149" endLine="158" />
    <javadoc>
      <text>* Map a division operation to each entry.
 * <p>The instance <strong>is</strong> changed by this method.</p></text>
      <param>d value to divide all entries by</param>
      <return>for convenience, return {@code this}</return>
      <throws>NullArgumentException if {@code d} is {@code null}.</throws>
      <throws>MathArithmeticException if {@code d} is zero.</throws>
    </javadoc>
    <method name="mapInv" type="FieldVector<T>" startLine="160" endLine="165" />
    <javadoc>
      <text>* Map the 1/x function to each entry.</text>
      <return>a vector containing the result of applying the function to each entry.</return>
      <throws>MathArithmeticException if one of the entries is zero.</throws>
    </javadoc>
    <method name="mapInvToSelf" type="FieldVector<T>" startLine="167" endLine="173" />
    <javadoc>
      <text>* Map the 1/x function to each entry.
 * <p>The instance <strong>is</strong> changed by this method.</p></text>
      <return>for convenience, return {@code this}</return>
      <throws>MathArithmeticException if one of the entries is zero.</throws>
    </javadoc>
    <method name="ebeMultiply" type="FieldVector<T>" startLine="175" endLine="182" />
    <javadoc>
      <text>* Element-by-element multiplication.</text>
      <param>v vector by which instance elements must be multiplied</param>
      <return>a vector containing {@code this[i] * v[i]} for all {@code i}</return>
      <throws>DimensionMismatchException if {@code v} is not the same size as {@code this}</throws>
    </javadoc>
    <method name="ebeDivide" type="FieldVector<T>" startLine="184" endLine="192" />
    <javadoc>
      <text>* Element-by-element division.</text>
      <param>v vector by which instance elements must be divided</param>
      <return>a vector containing {@code this[i] / v[i]} for all {@code i}</return>
      <throws>DimensionMismatchException if {@code v} is not the same size as {@code this}</throws>
      <throws>MathArithmeticException if one entry of {@code v} is zero.</throws>
    </javadoc>
    <method name="getData" type="T[]" startLine="194" endLine="200" />
    <javadoc>
      <text>* Returns vector entries as a T array.</text>
      <return>T array of entries</return>
      <deprecated>as of 3.1, to be removed in 4.0. Please use the {@link #toArray()} method instead.</deprecated>
    </javadoc>
    <method name="dotProduct" type="T" startLine="202" endLine="208" />
    <javadoc>
      <text>* Compute the dot product.</text>
      <param>v vector with which dot product should be computed</param>
      <return>the scalar dot product of {@code this} and {@code v}</return>
      <throws>DimensionMismatchException if {@code v} is not the same size as {@code this}</throws>
    </javadoc>
    <method name="projection" type="FieldVector<T>" startLine="210" endLine="218" />
    <javadoc>
      <text>* Find the orthogonal projection of this vector onto another vector.</text>
      <param>v vector onto which {@code this} must be projected</param>
      <return>projection of {@code this} onto {@code v}</return>
      <throws>DimensionMismatchException if {@code v} is not the same size as {@code this}</throws>
      <throws>MathArithmeticException if {@code v} is the null vector.</throws>
    </javadoc>
    <method name="outerProduct" type="FieldMatrix<T>" startLine="220" endLine="225" />
    <javadoc>
      <text>* Compute the outer product.</text>
      <param>v vector with which outer product should be computed</param>
      <return>the matrix outer product between instance and v</return>
    </javadoc>
    <method name="getEntry" type="T" startLine="227" endLine="235" />
    <javadoc>
      <text>* Returns the entry in the specified index.</text>
      <param>index Index location of entry to be fetched.</param>
      <return>the vector entry at {@code index}.</return>
      <throws>OutOfRangeException if the index is not valid.</throws>
      <see>#setEntry(int,FieldElement)</see>
    </javadoc>
    <method name="setEntry" type="void" startLine="237" endLine="244" />
    <javadoc>
      <text>* Set a single element.</text>
      <param>index element index.</param>
      <param>value new value for the element.</param>
      <throws>OutOfRangeException if the index is not valid.</throws>
      <see>#getEntry(int)</see>
    </javadoc>
    <method name="getDimension" type="int" startLine="246" endLine="250" />
    <javadoc>
      <text>* Returns the size of the vector.</text>
      <return>size</return>
    </javadoc>
    <method name="append" type="FieldVector<T>" startLine="252" endLine="257" />
    <javadoc>
      <text>* Construct a vector by appending a vector to this vector.</text>
      <param>v vector to append to this one.</param>
      <return>a new vector</return>
    </javadoc>
    <method name="append" type="FieldVector<T>" startLine="259" endLine="264" />
    <javadoc>
      <text>* Construct a vector by appending a T to this vector.</text>
      <param>d T to append.</param>
      <return>a new vector</return>
    </javadoc>
    <method name="getSubVector" type="FieldVector<T>" startLine="266" endLine="275" />
    <javadoc>
      <text>* Get a subvector from consecutive elements.</text>
      <param>index index of first element.</param>
      <param>n number of elements to be retrieved.</param>
      <return>a vector containing n elements.</return>
      <throws>OutOfRangeException if the index is not valid.</throws>
      <throws>NotPositiveException if the number of elements if not positive.</throws>
    </javadoc>
    <method name="setSubVector" type="void" startLine="277" endLine="283" />
    <javadoc>
      <text>* Set a set of consecutive elements.</text>
      <param>index index of first element to be set.</param>
      <param>v vector containing the values to set.</param>
      <throws>OutOfRangeException if the index is not valid.</throws>
    </javadoc>
    <method name="set" type="void" startLine="285" endLine="289" />
    <javadoc>
      <text>* Set all elements to a single value.</text>
      <param>value single value to set for all elements</param>
    </javadoc>
    <method name="toArray" type="T[]" startLine="291" endLine="297" />
    <javadoc>
      <text>* Convert the vector to a T array.
 * <p>The array is independent from vector data, it's elements
 * are copied.</p></text>
      <return>array containing a copy of vector elements</return>
    </javadoc>
  </interface>
</source>
