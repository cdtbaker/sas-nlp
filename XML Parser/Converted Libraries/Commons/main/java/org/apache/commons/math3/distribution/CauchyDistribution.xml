<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution">
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.Well19937c" />
  <class name="CauchyDistribution" extends="AbstractRealDistribution" startLine="26">
    <javadoc>
      <text>* Implementation of the Cauchy distribution.</text>
      <see><a href="http://en.wikipedia.org/wiki/Cauchy_distribution">Cauchy distribution (Wikipedia)</a></see>
      <see><a href="http://mathworld.wolfram.com/CauchyDistribution.html">Cauchy Distribution (MathWorld)</a></see>
      <since>1.1 (changed to concrete class in 3.0)</since>
      <version>$Id: CauchyDistribution.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Default inverse cumulative probability accuracy.</text>
      <since>2.1</since>
    </javadoc>
    <declaration type="double" name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" />
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* The median of this distribution.</text>
    </javadoc>
    <declaration type="double" name="median" />
    <javadoc>
      <text>* The scale of this distribution.</text>
    </javadoc>
    <declaration type="double" name="scale" />
    <javadoc>
      <text>* Inverse cumulative probability accuracy</text>
    </javadoc>
    <declaration type="double" name="solverAbsoluteAccuracy" />
    <javadoc>
      <text>* Creates a Cauchy distribution with the median equal to zero and scale
 * equal to one.</text>
    </javadoc>
    <method type="constructor" name="CauchyDistribution" startLine="53" endLine="55" />
    <javadoc>
      <text>* Creates a Cauchy distribution using the given median and scale.</text>
      <param>median Median for this distribution.</param>
      <param>scale Scale parameter for this distribution.</param>
    </javadoc>
    <method type="constructor" name="CauchyDistribution" startLine="63" endLine="65" />
    <javadoc>
      <text>* Creates a Cauchy distribution using the given median and scale.</text>
      <param>median Median for this distribution.</param>
      <param>scale Scale parameter for this distribution.</param>
      <param>inverseCumAccuracy Maximum absolute error in inverse
 * cumulative probability estimates
 * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).</param>
      <throws>NotStrictlyPositiveException if {@code scale <= 0}.</throws>
      <since>2.1</since>
    </javadoc>
    <method type="constructor" name="CauchyDistribution" startLine="79" endLine="81" />
    <javadoc>
      <text>* Creates a Cauchy distribution.</text>
      <param>rng Random number generator.</param>
      <param>median Median for this distribution.</param>
      <param>scale Scale parameter for this distribution.</param>
      <param>inverseCumAccuracy Maximum absolute error in inverse
 * cumulative probability estimates
 * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).</param>
      <throws>NotStrictlyPositiveException if {@code scale <= 0}.</throws>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="CauchyDistribution" startLine="98" endLine="106">
      <scope startLine="100" endLine="102" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="cumulativeProbability" startLine="109" endLine="111" />
    <javadoc>
      <text>* Access the median.</text>
      <return>the median for this distribution.</return>
    </javadoc>
    <method type="double" name="getMedian" startLine="118" endLine="120" />
    <javadoc>
      <text>* Access the scale parameter.</text>
      <return>the scale parameter for this distribution.</return>
    </javadoc>
    <method type="double" name="getScale" startLine="127" endLine="129" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="density" startLine="132" endLine="135">
      <declaration type="double" name="dev" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}Returns {@code Double.NEGATIVE_INFINITY} when {@code p == 0}and {@code Double.POSITIVE_INFINITY} when {@code p == 1}.</text>
    </javadoc>
    <method type="double" name="inverseCumulativeProbability" startLine="144" endLine="156">
      <declaration type="double" name="ret" />
      <scope startLine="146" endLine="148" />
      <scope startLine="148" endLine="150" />
      <scope startLine="150" endLine="152" />
      <scope startLine="152" endLine="154" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getSolverAbsoluteAccuracy" startLine="160" endLine="162" />
    <javadoc>
      <text>* {@inheritDoc}The mean is always undefined no matter the parameters.</text>
      <return>mean (always Double.NaN)</return>
    </javadoc>
    <method type="double" name="getNumericalMean" startLine="171" endLine="173" />
    <javadoc>
      <text>* {@inheritDoc}The variance is always undefined no matter the parameters.</text>
      <return>variance (always Double.NaN)</return>
    </javadoc>
    <method type="double" name="getNumericalVariance" startLine="182" endLine="184" />
    <javadoc>
      <text>* {@inheritDoc}The lower bound of the support is always negative infinity no matter
 * the parameters.</text>
      <return>lower bound of the support (always Double.NEGATIVE_INFINITY)</return>
    </javadoc>
    <method type="double" name="getSupportLowerBound" startLine="194" endLine="196" />
    <javadoc>
      <text>* {@inheritDoc}The upper bound of the support is always positive infinity no matter
 * the parameters.</text>
      <return>upper bound of the support (always Double.POSITIVE_INFINITY)</return>
    </javadoc>
    <method type="double" name="getSupportUpperBound" startLine="206" endLine="208" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isSupportLowerBoundInclusive" startLine="211" endLine="213" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isSupportUpperBoundInclusive" startLine="216" endLine="218" />
    <javadoc>
      <text>* {@inheritDoc}The support of this distribution is connected.</text>
      <return>{@code true}</return>
    </javadoc>
    <method type="boolean" name="isSupportConnected" startLine="227" endLine="229" />
  </class>
</source>
