<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.solvers">
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.exception.NoBracketingException" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <class name="RiddersSolver" extends="AbstractUnivariateSolver" startLine="23">
    <javadoc>
      <text>* Implements the <a href="http://mathworld.wolfram.com/RiddersMethod.html">
 * Ridders' Method</a> for root finding of real univariate functions. For
 * reference, see C. Ridders, <i>A new algorithm for computing a single root
 * of a real continuous function </i>, IEEE Transactions on Circuits and
 * Systems, 26 (1979), 979 - 980.
 * <p>
 * The function should be continuous but not necessarily smooth.</p></text>
      <version>$Id: RiddersSolver.java 1379560 2012-08-31 19:40:30Z erans $</version>
      <since>1.2</since>
    </javadoc>
    <javadoc>
      <text>* Default absolute accuracy.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_ABSOLUTE_ACCURACY" />
    <javadoc>
      <text>* Construct a solver with default accuracy (1e-6).</text>
    </javadoc>
    <method type="constructor" name="RiddersSolver" startLine="42" endLine="44" />
    <javadoc>
      <text>* Construct a solver.</text>
      <param>absoluteAccuracy Absolute accuracy.</param>
    </javadoc>
    <method type="constructor" name="RiddersSolver" startLine="50" endLine="52" />
    <javadoc>
      <text>* Construct a solver.</text>
      <param>relativeAccuracy Relative accuracy.</param>
      <param>absoluteAccuracy Absolute accuracy.</param>
    </javadoc>
    <method type="constructor" name="RiddersSolver" startLine="60" endLine="62" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="doSolve" startLine="70" endLine="142">
      <declaration type="double" name="min" />
      <declaration type="double" name="max" />
      <declaration type="double" name="x1" />
      <declaration type="double" name="y1" />
      <declaration type="double" name="x2" />
      <declaration type="double" name="y2" />
      <scope startLine="82" endLine="84" />
      <scope startLine="85" endLine="87" />
      <declaration type="double" name="absoluteAccuracy" />
      <declaration type="double" name="functionValueAccuracy" />
      <declaration type="double" name="relativeAccuracy" />
      <declaration type="double" name="oldx" />
      <scope startLine="95" endLine="141">
        <declaration type="double" name="x3" />
        <declaration type="double" name="y3" />
        <scope startLine="99" endLine="101" />
        <declaration type="double" name="delta" />
        <declaration type="double" name="correction" />
        <declaration type="double" name="x" />
        <declaration type="double" name="y" />
        <declaration type="double" name="tolerance" />
        <scope startLine="110" endLine="112" />
        <scope startLine="113" endLine="115" />
        <scope startLine="119" endLine="129">
          <scope startLine="120" endLine="123" />
          <scope startLine="123" endLine="128" />
        </scope>
        <scope startLine="129" endLine="139">
          <scope startLine="130" endLine="133" />
          <scope startLine="133" endLine="138" />
        </scope>
        <comment>calculate the new root approximation</comment>
        <comment>delta > 1 due to bracketing</comment>
        <comment>correction != 0</comment>
        <comment>check for convergence</comment>
        <comment>prepare the new interval for next iteration</comment>
        <comment>Ridders' method guarantees x1 < x < x2</comment>
        <comment>x1 < x < x3</comment>
        <comment>x3 < x < x2</comment>
      </scope>
      <comment>[x1, x2] is the bracketing interval in each iteration</comment>
      <comment>x3 is the midpoint of [x1, x2]</comment>
      <comment>x is the new root approximation and an endpoint of the new interval</comment>
      <comment>check for zeros before verifying bracketing</comment>
    </method>
  </class>
</source>
