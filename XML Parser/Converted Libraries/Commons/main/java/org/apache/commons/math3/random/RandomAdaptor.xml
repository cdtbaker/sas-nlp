<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.random">
  <import name="java.util.Random" />
  <class name="RandomAdaptor" extends="Random" startLine="21">
    <implements name="RandomGenerator" />
    <javadoc>
      <text>* Extension of <code>java.util.Random</code> wrapping a{@link RandomGenerator}.</text>
      <since>1.1</since>
      <version>$Id: RandomAdaptor.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Wrapped randomGenerator instance</text>
    </javadoc>
    <declaration type="RandomGenerator" name="randomGenerator" />
    <javadoc>
      <text>* Prevent instantiation without a generator argument</text>
    </javadoc>
    <method type="constructor" name="RandomAdaptor" startLine="40" endLine="40" />
    <javadoc>
      <text>* Construct a RandomAdaptor wrapping the supplied RandomGenerator.</text>
      <param>randomGenerator  the wrapped generator</param>
    </javadoc>
    <method type="constructor" name="RandomAdaptor" startLine="47" endLine="49" />
    <javadoc>
      <text>* Factory method to create a <code>Random</code> using the supplied
 * <code>RandomGenerator</code>.</text>
      <param>randomGenerator  wrapped RandomGenerator instance</param>
      <return>a Random instance wrapping the RandomGenerator</return>
    </javadoc>
    <method type="Random" name="createAdaptor" startLine="58" endLine="60" />
    <javadoc>
      <text>* Returns the next pseudorandom, uniformly distributed
 * <code>boolean</code> value from this random number generator's
 * sequence.</text>
      <return>the next pseudorandom, uniformly distributed
 * <code>boolean</code> value from this random number generator's
 * sequence</return>
    </javadoc>
    <method type="boolean" name="nextBoolean" startLine="72" endLine="74" />
    <javadoc>
      <text>* Generates random bytes and places them into a user-supplied
 * byte array.  The number of random bytes produced is equal to
 * the length of the byte array.</text>
      <param>bytes the non-null byte array in which to put the
 * random bytes</param>
    </javadoc>
    <method type="void" name="nextBytes" startLine="85" endLine="87" />
    <javadoc>
      <text>* Returns the next pseudorandom, uniformly distributed
 * <code>double</code> value between <code>0.0</code> and
 * <code>1.0</code> from this random number generator's sequence.</text>
      <return>the next pseudorandom, uniformly distributed
 * <code>double</code> value between <code>0.0</code> and
 * <code>1.0</code> from this random number generator's sequence</return>
    </javadoc>
    <method type="double" name="nextDouble" startLine="99" endLine="101" />
    <javadoc>
      <text>* Returns the next pseudorandom, uniformly distributed <code>float</code>
 * value between <code>0.0</code> and <code>1.0</code> from this random
 * number generator's sequence.</text>
      <return>the next pseudorandom, uniformly distributed <code>float</code>
 * value between <code>0.0</code> and <code>1.0</code> from this
 * random number generator's sequence</return>
    </javadoc>
    <method type="float" name="nextFloat" startLine="113" endLine="115" />
    <javadoc>
      <text>* Returns the next pseudorandom, Gaussian ("normally") distributed
 * <code>double</code> value with mean <code>0.0</code> and standard
 * deviation <code>1.0</code> from this random number generator's sequence.</text>
      <return>the next pseudorandom, Gaussian ("normally") distributed
 * <code>double</code> value with mean <code>0.0</code> and
 * standard deviation <code>1.0</code> from this random number
 * generator's sequence</return>
    </javadoc>
    <method type="double" name="nextGaussian" startLine="128" endLine="130" />
    <javadoc>
      <text>* Returns the next pseudorandom, uniformly distributed <code>int</code>
 * value from this random number generator's sequence.
 * All 2<font size="-1"><sup>32</sup></font> possible <tt>int</tt> values
 * should be produced with  (approximately) equal probability.</text>
      <return>the next pseudorandom, uniformly distributed <code>int</code>
 * value from this random number generator's sequence</return>
    </javadoc>
    <method type="int" name="nextInt" startLine="142" endLine="144" />
    <javadoc>
      <text>* Returns a pseudorandom, uniformly distributed <tt>int</tt> value
 * between 0 (inclusive) and the specified value (exclusive), drawn from
 * this random number generator's sequence.</text>
      <param>n the bound on the random number to be returned.  Must be
 * positive.</param>
      <return>a pseudorandom, uniformly distributed <tt>int</tt>
 * value between 0 (inclusive) and n (exclusive).</return>
      <throws>IllegalArgumentException  if n is not positive.</throws>
    </javadoc>
    <method type="int" name="nextInt" startLine="158" endLine="160" />
    <javadoc>
      <text>* Returns the next pseudorandom, uniformly distributed <code>long</code>
 * value from this random number generator's sequence.  All
 * 2<font size="-1"><sup>64</sup></font> possible <tt>long</tt> values
 * should be produced with (approximately) equal probability.</text>
      <return>the next pseudorandom, uniformly distributed <code>long</code>
 * value from this random number generator's sequence</return>
    </javadoc>
    <method type="long" name="nextLong" startLine="172" endLine="174" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setSeed" startLine="177" endLine="181">
      <scope startLine="178" endLine="180">
        <comment>required to avoid NPE in constructor</comment>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setSeed" startLine="184" endLine="188">
      <scope startLine="185" endLine="187">
        <comment>required to avoid NPE in constructor</comment>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setSeed" startLine="192" endLine="196">
      <scope startLine="193" endLine="195">
        <comment>required to avoid NPE in constructor</comment>
      </scope>
    </method>
  </class>
</source>
