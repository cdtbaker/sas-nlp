<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.correlation">
  <import name="org.apache.commons.math3.distribution.TDistribution" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.linear.RealMatrix" />
  <import name="org.apache.commons.math3.linear.BlockRealMatrix" />
  <import name="org.apache.commons.math3.stat.regression.SimpleRegression" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="PearsonsCorrelation" startLine="29">
    <javadoc>
      <text>* Computes Pearson's product-moment correlation coefficients for pairs of arrays
 * or columns of a matrix.
 * <p>The constructors that take <code>RealMatrix</code> or
 * <code>double[][]</code> arguments generate correlation matrices.  The
 * columns of the input matrices are assumed to represent variable values.
 * Correlations are given by the formula</p>
 * <code>cor(X, Y) = &Sigma;[(x<sub>i</sub> - E(X))(y<sub>i</sub> - E(Y))] / [(n - 1)s(X)s(Y)]</code>
 * where <code>E(X)</code> is the mean of <code>X</code>, <code>E(Y)</code>
 * is the mean of the <code>Y</code> values and s(X), s(Y) are standard deviations.</text>
      <version>$Id: PearsonsCorrelation.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* correlation matrix</text>
    </javadoc>
    <declaration type="RealMatrix" name="correlationMatrix" />
    <javadoc>
      <text>* number of observations</text>
    </javadoc>
    <declaration type="int" name="nObs" />
    <javadoc>
      <text>* Create a PearsonsCorrelation instance without data</text>
    </javadoc>
    <method type="constructor" name="PearsonsCorrelation" startLine="55" endLine="59" />
    <javadoc>
      <text>* Create a PearsonsCorrelation from a rectangular array
 * whose columns represent values of variables to be correlated.</text>
      <param>data rectangular array with columns representing variables</param>
      <throws>IllegalArgumentException if the input data array is not
 * rectangular with at least two rows and two columns.</throws>
    </javadoc>
    <method type="constructor" name="PearsonsCorrelation" startLine="69" endLine="71" />
    <javadoc>
      <text>* Create a PearsonsCorrelation from a RealMatrix whose columns
 * represent variables to be correlated.</text>
      <param>matrix matrix with columns representing variables to correlate</param>
    </javadoc>
    <method type="constructor" name="PearsonsCorrelation" startLine="79" endLine="83" />
    <javadoc>
      <text>* Create a PearsonsCorrelation from a {@link Covariance}.  The correlation
 * matrix is computed by scaling the Covariance's covariance matrix.
 * The Covariance instance must have been created from a data matrix with
 * columns representing variable values.</text>
      <param>covariance Covariance instance</param>
    </javadoc>
    <method type="constructor" name="PearsonsCorrelation" startLine="93" endLine="100">
      <declaration type="RealMatrix" name="covarianceMatrix" />
      <scope startLine="95" endLine="97" />
    </method>
    <javadoc>
      <text>* Create a PearsonsCorrelation from a covariance matrix.  The correlation
 * matrix is computed by scaling the covariance matrix.</text>
      <param>covarianceMatrix covariance matrix</param>
      <param>numberOfObservations the number of observations in the dataset used to compute
 * the covariance matrix</param>
    </javadoc>
    <method type="constructor" name="PearsonsCorrelation" startLine="110" endLine="114" />
    <javadoc>
      <text>* Returns the correlation matrix</text>
      <return>correlation matrix</return>
    </javadoc>
    <method type="RealMatrix" name="getCorrelationMatrix" startLine="121" endLine="123" />
    <javadoc>
      <text>* Returns a matrix of standard errors associated with the estimates
 * in the correlation matrix.<br/>
 * <code>getCorrelationStandardErrors().getEntry(i,j)</code> is the standard
 * error associated with <code>getCorrelationMatrix.getEntry(i,j)</code>
 * <p>The formula used to compute the standard error is <br/>
 * <code>SE<sub>r</sub> = ((1 - r<sup>2</sup>) / (n - 2))<sup>1/2</sup></code>
 * where <code>r</code> is the estimated correlation coefficient and
 * <code>n</code> is the number of observations in the source dataset.</p></text>
      <return>matrix of correlation standard errors</return>
    </javadoc>
    <method type="RealMatrix" name="getCorrelationStandardErrors" startLine="137" endLine="147">
      <declaration type="int" name="nVars" />
      <declaration type="double[][]" name="out" />
      <scope startLine="140" endLine="145">
        <scope startLine="141" endLine="144">
          <declaration type="double" name="r" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Returns a matrix of p-values associated with the (two-sided) null
 * hypothesis that the corresponding correlation coefficient is zero.
 * <p><code>getCorrelationPValues().getEntry(i,j)</code> is the probability
 * that a random variable distributed as <code>t<sub>n-2</sub></code> takes
 * a value with absolute value greater than or equal to <br>
 * <code>|r|((n - 2) / (1 - r<sup>2</sup>))<sup>1/2</sup></code></p>
 * <p>The values in the matrix are sometimes referred to as the
 * <i>significance</i> of the corresponding correlation coefficients.</p></text>
      <return>matrix of p-values</return>
      <throws>org.apache.commons.math3.exception.MaxCountExceededExceptionif an error occurs estimating probabilities</throws>
    </javadoc>
    <method type="RealMatrix" name="getCorrelationPValues" startLine="163" endLine="179">
      <declaration type="TDistribution" name="tDistribution" />
      <declaration type="int" name="nVars" />
      <declaration type="double[][]" name="out" />
      <scope startLine="167" endLine="177">
        <scope startLine="168" endLine="176">
          <scope startLine="169" endLine="171" />
          <scope startLine="171" endLine="175">
            <declaration type="double" name="r" />
            <declaration type="double" name="t" />
          </scope>
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Computes the correlation matrix for the columns of the
 * input matrix.</text>
      <param>matrix matrix with columns representing variables to correlate</param>
      <return>correlation matrix</return>
    </javadoc>
    <method type="RealMatrix" name="computeCorrelationMatrix" startLine="189" endLine="201">
      <declaration type="int" name="nVars" />
      <declaration type="RealMatrix" name="outMatrix" />
      <scope startLine="192" endLine="199">
        <scope startLine="193" endLine="197">
          <declaration type="double" name="corr" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Computes the correlation matrix for the columns of the
 * input rectangular array.  The colums of the array represent values
 * of variables to be correlated.</text>
      <param>data matrix with columns representing variables to correlate</param>
      <return>correlation matrix</return>
    </javadoc>
    <method type="RealMatrix" name="computeCorrelationMatrix" startLine="211" endLine="213" />
    <javadoc>
      <text>* Computes the Pearson's product-moment correlation coefficient between the two arrays.
 * </p>Throws IllegalArgumentException if the arrays do not have the same length
 * or their common length is less than 2</p></text>
      <param>xArray first data array</param>
      <param>yArray second data array</param>
      <return>Returns Pearson's correlation coefficient for the two arrays</return>
      <throws>DimensionMismatchException if the arrays lengths do not match</throws>
      <throws>MathIllegalArgumentException if there is insufficient data</throws>
    </javadoc>
    <method type="double" name="correlation" startLine="227" endLine="240">
      <declaration type="SimpleRegression" name="regression" />
      <scope startLine="229" endLine="231" />
      <scope startLine="231" endLine="234" />
      <scope startLine="234" endLine="239">
        <scope startLine="235" endLine="237" />
      </scope>
    </method>
    <javadoc>
      <text>* Derives a correlation matrix from a covariance matrix.
 * <p>Uses the formula <br/>
 * <code>r(X,Y) = cov(X,Y)/s(X)s(Y)</code> where
 * <code>r(&middot,&middot;)</code> is the correlation coefficient and
 * <code>s(&middot;)</code> means standard deviation.</p></text>
      <param>covarianceMatrix the covariance matrix</param>
      <return>correlation matrix</return>
    </javadoc>
    <method type="RealMatrix" name="covarianceToCorrelation" startLine="253" endLine="267">
      <declaration type="int" name="nVars" />
      <declaration type="RealMatrix" name="outMatrix" />
      <scope startLine="256" endLine="265">
        <declaration type="double" name="sigma" />
        <scope startLine="259" endLine="264">
          <declaration type="double" name="entry" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Throws IllegalArgumentException of the matrix does not have at least
 * two columns and two rows</text>
      <param>matrix matrix to check for sufficiency</param>
      <throws>MathIllegalArgumentException if there is insufficient data</throws>
    </javadoc>
    <method type="void" name="checkSufficientData" startLine="276" endLine="283">
      <declaration type="int" name="nRows" />
      <declaration type="int" name="nCols" />
      <scope startLine="279" endLine="282" />
    </method>
  </class>
</source>
