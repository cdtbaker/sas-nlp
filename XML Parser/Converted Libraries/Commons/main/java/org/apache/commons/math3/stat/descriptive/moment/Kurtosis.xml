<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.descriptive.moment">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="Kurtosis" extends="AbstractStorelessUnivariateStatistic" startLine="28">
    <implements name="Serializable" />
    <javadoc>
      <text>* Computes the Kurtosis of the available values.
 * <p>
 * We use the following (unbiased) formula to define kurtosis:</p>
 * <p>
 * kurtosis = { [n(n+1) / (n -1)(n - 2)(n-3)] sum[(x_i - mean)^4] / std^4 } - [3(n-1)^2 / (n-2)(n-3)]
 * </p><p>
 * where n is the number of values, mean is the {@link Mean} and std is the{@link StandardDeviation}</p>
 * <p>
 * Note that this statistic is undefined for n < 4.  <code>Double.Nan</code>
 * is returned when there is not sufficient data to compute the statistic.</p>
 * <p>
 * <strong>Note that this implementation is not synchronized.</strong> If
 * multiple threads access an instance of this class concurrently, and at least
 * one of the threads invokes the <code>increment()</code> or
 * <code>clear()</code> method, it must be synchronized externally.</p></text>
      <version>$Id: Kurtosis.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Fourth Moment on which this statistic is based</text>
    </javadoc>
    <declaration type="FourthMoment" name="moment" />
    <javadoc>
      <text>* Determines whether or not this statistic can be incremented or cleared.
 * <p>
 * Statistics based on (constructed from) external moments cannot
 * be incremented or cleared.</p></text>
    </javadoc>
    <declaration type="boolean" name="incMoment" />
    <javadoc>
      <text>* Construct a Kurtosis</text>
    </javadoc>
    <method type="constructor" name="Kurtosis" startLine="67" endLine="70" />
    <javadoc>
      <text>* Construct a Kurtosis from an external moment</text>
      <param>m4 external Moment</param>
    </javadoc>
    <method type="constructor" name="Kurtosis" startLine="77" endLine="80" />
    <javadoc>
      <text>* Copy constructor, creates a new {@code Kurtosis} identical
 * to the {@code original}</text>
      <param>original the {@code Kurtosis} instance to copy</param>
      <throws>NullArgumentException if original is null</throws>
    </javadoc>
    <method type="constructor" name="Kurtosis" startLine="89" endLine="91" />
    <javadoc>
      <text>* {@inheritDoc}<p>Note that when {@link #Kurtosis(FourthMoment)} is used to
 * create a Variance, this method does nothing. In that case, the
 * FourthMoment should be incremented directly.</p></text>
    </javadoc>
    <method type="void" name="increment" startLine="100" endLine="104">
      <scope startLine="101" endLine="103" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getResult" startLine="110" endLine="125">
      <declaration type="double" name="kurtosis" />
      <scope startLine="112" endLine="123">
        <declaration type="double" name="variance" />
        <scope startLine="114" endLine="116" />
        <scope startLine="116" endLine="122">
          <declaration type="double" name="n" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="clear" startLine="131" endLine="135">
      <scope startLine="132" endLine="134" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="long" name="getN" startLine="140" endLine="142" />
    <javadoc>
      <text>* Returns the kurtosis of the entries in the specified portion of the
 * input array.
 * <p>
 * See {@link Kurtosis} for details on the computing algorithm.</p>
 * <p>
 * Throws <code>IllegalArgumentException</code> if the array is null.</p></text>
      <param>values the input array</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the kurtosis of the values or Double.NaN if length is less than 4</return>
      <throws>MathIllegalArgumentException if the input array is null or the array
 * index parameters are not valid</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="163" endLine="195">
      <declaration type="double" name="kurt" />
      <scope startLine="167" endLine="193">
        <declaration type="Variance" name="variance" />
        <declaration type="double" name="mean" />
        <declaration type="double" name="stdDev" />
        <declaration type="double" name="accum3" />
        <scope startLine="178" endLine="180" />
        <declaration type="double" name="n0" />
        <declaration type="double" name="coefficientOne" />
        <declaration type="double" name="termTwo" />
        <comment>Compute the mean and standard deviation</comment>
        <comment>Sum the ^4 of the distance from the mean divided by the</comment>
        <comment>standard deviation</comment>
        <comment>Get N</comment>
        <comment>Calculate kurtosis</comment>
      </scope>
      <comment>Initialize the kurtosis</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Kurtosis" name="copy" startLine="201" endLine="206">
      <declaration type="Kurtosis" name="result" />
      <comment>No try-catch because args are guaranteed non-null</comment>
    </method>
    <javadoc>
      <text>* Copies source to dest.
 * <p>Neither source nor dest can be null.</p></text>
      <param>source Kurtosis to copy</param>
      <param>dest Kurtosis to copy to</param>
      <throws>NullArgumentException if either source or dest is null</throws>
    </javadoc>
    <method type="void" name="copy" startLine="217" endLine="223" />
    <comment>UnvariateStatistic Approach</comment>
  </class>
</source>
