<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim.nonlinear.vector">
  <import name="java.util.Collections" />
  <import name="java.util.List" />
  <import name="java.util.ArrayList" />
  <import name="java.util.Comparator" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.linear.RealMatrix" />
  <import name="org.apache.commons.math3.linear.RealVector" />
  <import name="org.apache.commons.math3.linear.ArrayRealVector" />
  <import name="org.apache.commons.math3.random.RandomVectorGenerator" />
  <import name="org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer" />
  <import name="org.apache.commons.math3.optim.PointVectorValuePair" />
  <class name="MultiStartMultivariateVectorOptimizer" extends="BaseMultiStartMultivariateOptimizer<PointVectorValuePair>" startLine="32">
    <javadoc>
      <text>* Multi-start optimizer for a (vector) model function.
 * This class wraps an optimizer in order to use it several times in
 * turn with different starting points (trying to avoid being trapped
 * in a local extremum when looking for a global one).</text>
      <version>$Id: MultiStartMultivariateVectorOptimizer.java 1435539 2013-01-19 13:27:24Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Underlying optimizer.</text>
    </javadoc>
    <declaration type="MultivariateVectorOptimizer" name="optimizer" />
    <javadoc>
      <text>* Found optima.</text>
    </javadoc>
    <declaration type="List<PointVectorValuePair>" name="optima" />
    <javadoc>
      <text>* Create a multi-start optimizer from a single-start optimizer.</text>
      <param>optimizer Single-start optimizer to wrap.</param>
      <param>starts Number of starts to perform.
 * If {@code starts == 1}, the result will be same as if {@code optimizer}is called directly.</param>
      <param>generator Random vector generator to use for restarts.</param>
      <throws>NullArgumentException if {@code optimizer} or {@code generator}is {@code null}.</throws>
      <throws>NotStrictlyPositiveException if {@code starts < 1}.</throws>
    </javadoc>
    <method type="constructor" name="MultiStartMultivariateVectorOptimizer" startLine="65" endLine="68" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="PointVectorValuePair[]" name="getOptima" startLine="74" endLine="77" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="store" startLine="83" endLine="85" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="clear" startLine="91" endLine="93" />
    <javadoc>
      <return>a comparator for sorting the optima.</return>
    </javadoc>
    <method type="Comparator<PointVectorValuePair>" name="getPairComparator" startLine="98" endLine="120">
      <declaration type="RealVector" name="target" />
      <declaration type="RealMatrix" name="weight" />
      <method type="int" name="compare" startLine="104" endLine="112">
        <scope startLine="105" endLine="107" />
        <scope startLine="107" endLine="109" />
      </method>
      <method type="double" name="weightedResidual" startLine="114" endLine="118">
        <declaration type="RealVector" name="v" />
        <declaration type="RealVector" name="r" />
      </method>
    </method>
  </class>
</source>
