<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.descriptive.summary">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="SumOfLogs" extends="AbstractStorelessUnivariateStatistic" startLine="27">
    <implements name="Serializable" />
    <javadoc>
      <text>* Returns the sum of the natural logs for this collection of values.
 * <p>
 * Uses {@link org.apache.commons.math3.util.FastMath#log(double)} to compute the logs.
 * Therefore,
 * <ul>
 * <li>If any of values are &lt; 0, the result is <code>NaN.</code></li>
 * <li>If all values are non-negative and less than
 * <code>Double.POSITIVE_INFINITY</code>,  but at least one value is 0, the
 * result is <code>Double.NEGATIVE_INFINITY.</code></li>
 * <li>If both <code>Double.POSITIVE_INFINITY</code> and
 * <code>Double.NEGATIVE_INFINITY</code> are among the values, the result is
 * <code>NaN.</code></li>
 * </ul></p>
 * <p>
 * <strong>Note that this implementation is not synchronized.</strong> If
 * multiple threads access an instance of this class concurrently, and at least
 * one of the threads invokes the <code>increment()</code> or
 * <code>clear()</code> method, it must be synchronized externally.</p></text>
      <version>$Id: SumOfLogs.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Number of values that have been added</text>
    </javadoc>
    <declaration type="int" name="n" />
    <javadoc>
      <text>* The currently running value</text>
    </javadoc>
    <declaration type="double" name="value" />
    <javadoc>
      <text>* Create a SumOfLogs instance</text>
    </javadoc>
    <method type="constructor" name="SumOfLogs" startLine="65" endLine="68" />
    <javadoc>
      <text>* Copy constructor, creates a new {@code SumOfLogs} identical
 * to the {@code original}</text>
      <param>original the {@code SumOfLogs} instance to copy</param>
      <throws>NullArgumentException if original is null</throws>
    </javadoc>
    <method type="constructor" name="SumOfLogs" startLine="77" endLine="79" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="increment" startLine="85" endLine="88" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getResult" startLine="94" endLine="96" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="long" name="getN" startLine="101" endLine="103" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="clear" startLine="109" endLine="112" />
    <javadoc>
      <text>* Returns the sum of the natural logs of the entries in the specified portion of
 * the input array, or <code>Double.NaN</code> if the designated subarray
 * is empty.
 * <p>
 * Throws <code>MathIllegalArgumentException</code> if the array is null.</p>
 * <p>
 * See {@link SumOfLogs}.</p></text>
      <param>values the input array</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the sum of the natural logs of the values or 0 if
 * length = 0</return>
      <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="133" endLine="142">
      <declaration type="double" name="sumLog" />
      <scope startLine="135" endLine="140">
        <scope startLine="137" endLine="139" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="SumOfLogs" name="copy" startLine="148" endLine="153">
      <declaration type="SumOfLogs" name="result" />
      <comment>No try-catch or advertised exception here because args are valid</comment>
    </method>
    <javadoc>
      <text>* Copies source to dest.
 * <p>Neither source nor dest can be null.</p></text>
      <param>source SumOfLogs to copy</param>
      <param>dest SumOfLogs to copy to</param>
      <throws>NullArgumentException if either source or dest is null</throws>
    </javadoc>
    <method type="void" name="copy" startLine="164" endLine="170" />
  </class>
</source>
