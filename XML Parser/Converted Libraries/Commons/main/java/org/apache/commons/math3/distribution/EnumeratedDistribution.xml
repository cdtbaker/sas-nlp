<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution">
  <import name="java.io.Serializable" />
  <import name="java.lang.reflect.Array" />
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.exception.NotANumberException" />
  <import name="org.apache.commons.math3.exception.NotFiniteNumberException" />
  <import name="org.apache.commons.math3.exception.NotPositiveException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.Well19937c" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <import name="org.apache.commons.math3.util.Pair" />
  <class name="EnumeratedDistribution" startLine="36">
    <implements name="Serializable" />
    <javadoc>
      <text>* <p>A generic implementation of a
 * <a href="http://en.wikipedia.org/wiki/Probability_distribution#Discrete_probability_distribution">
 * discrete probability distribution (Wikipedia)</a> over a finite sample space,
 * based on an enumerated list of &lt;value, probability&gt; pairs.  Input probabilities must all be non-negative,
 * but zero values are allowed and their sum does not have to equal one. Constructors will normalize input
 * probabilities to make them sum to one.</p>
 * <p>The list of <value, probability> pairs does not, strictly speaking, have to be a function and it can
 * contain null values.  The pmf created by the constructor will combine probabilities of equal values and
 * will treat null values as equal.  For example, if the list of pairs &lt;"dog", 0.2&gt;, &lt;null, 0.1&gt;,
 * &lt;"pig", 0.2&gt;, &lt;"dog", 0.1&gt;, &lt;null, 0.4&gt; is provided to the constructor, the resulting
 * pmf will assign mass of 0.5 to null, 0.3 to "dog" and 0.2 to null.</p></text>
      <param><T>
 *  type of the elements in the sample space.</param>
      <version>$Id: EnumeratedDistribution.java 1456769 2013-03-15 04:51:34Z psteitz $</version>
      <since>3.2</since>
    </javadoc>
    <javadoc>
      <text>* Serializable UID.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* RNG instance used to generate samples from the distribution.</text>
    </javadoc>
    <declaration type="RandomGenerator" name="random" />
    <javadoc>
      <text>* List of random variable values.</text>
    </javadoc>
    <declaration type="List<T>" name="singletons" />
    <javadoc>
      <text>* Probabilities of respective random variable values. For i = 0, ..., singletons.size() - 1,
 * probability[i] is the probability that a random variable following this distribution takes
 * the value singletons[i].</text>
    </javadoc>
    <declaration type="double[]" name="probabilities" />
    <javadoc>
      <text>* Create an enumerated distribution using the given probability mass function
 * enumeration.</text>
      <param>pmf probability mass function enumerated as a list of <T, probability>
 * pairs.</param>
      <throws>NotPositiveException if any of the probabilities are negative.</throws>
      <throws>NotFiniteNumberException if any of the probabilities are infinite.</throws>
      <throws>NotANumberException if any of the probabilities are NaN.</throws>
      <throws>MathArithmeticException all of the probabilities are 0.</throws>
    </javadoc>
    <method type="constructor" name="EnumeratedDistribution" startLine="87" endLine="89" />
    <javadoc>
      <text>* Create an enumerated distribution using the given random number generator
 * and probability mass function enumeration.</text>
      <param>rng random number generator.</param>
      <param>pmf probability mass function enumerated as a list of <T, probability>
 * pairs.</param>
      <throws>NotPositiveException if any of the probabilities are negative.</throws>
      <throws>NotFiniteNumberException if any of the probabilities are infinite.</throws>
      <throws>NotANumberException if any of the probabilities are NaN.</throws>
      <throws>MathArithmeticException all of the probabilities are 0.</throws>
    </javadoc>
    <method type="constructor" name="EnumeratedDistribution" startLine="104" endLine="127">
      <declaration type="double[]" name="probs" />
      <scope startLine="110" endLine="124">
        <declaration type="Pair<T,Double>" name="sample" />
        <declaration type="double" name="p" />
        <scope startLine="114" endLine="116" />
        <scope startLine="117" endLine="119" />
        <scope startLine="120" endLine="122" />
      </scope>
    </method>
    <javadoc>
      <text>* Reseed the random generator used to generate samples.</text>
      <param>seed the new seed</param>
    </javadoc>
    <method type="void" name="reseedRandomGenerator" startLine="134" endLine="136" />
    <javadoc>
      <text>* <p>For a random variable {@code X} whose values are distributed according to
 * this distribution, this method returns {@code P(X = x)}. In other words,
 * this method represents the probability mass function (PMF) for the
 * distribution.</p>
 * <p>Note that if {@code x1} and {@code x2} satisfy {@code x1.equals(x2)},
 * or both are null, then {@code probability(x1) = probability(x2)}.</p></text>
      <param>x the point at which the PMF is evaluated</param>
      <return>the value of the probability mass function at {@code x}</return>
    </javadoc>
    <method type="double" name="probability" startLine="150" endLine="161">
      <declaration type="double" name="probability" />
      <scope startLine="153" endLine="158">
        <scope startLine="155" endLine="157" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>Return the probability mass function as a list of <value, probability> pairs.</p>
 * <p>Note that if duplicate and / or null values were provided to the constructor
 * when creating this EnumeratedDistribution, the returned list will contain these
 * values.  If duplicates values exist, what is returned will not represent
 * a pmf (i.e., it is up to the caller to consolidate duplicate mass points).</p></text>
      <return>the probability mass function.</return>
    </javadoc>
    <method type="List<Pair<T,Double>>" name="getPmf" startLine="173" endLine="181">
      <declaration type="List<Pair<T,Double>>" name="samples" />
      <scope startLine="176" endLine="178" />
    </method>
    <javadoc>
      <text>* Generate a random value sampled from this distribution.</text>
      <return>a random value.</return>
    </javadoc>
    <method type="T" name="sample" startLine="188" endLine="203">
      <declaration type="double" name="randomValue" />
      <declaration type="double" name="sum" />
      <scope startLine="192" endLine="197">
        <scope startLine="194" endLine="196" />
      </scope>
      <comment>This should never happen, but it ensures we will return a correct
 object in case the loop above has some floating point inequality
 problem on the final iteration.</comment>
    </method>
    <javadoc>
      <text>* Generate a random sample from the distribution.</text>
      <param>sampleSize the number of random values to generate.</param>
      <return>an array representing the random sample.</return>
      <throws>NotStrictlyPositiveException if {@code sampleSize} is not
 * positive.</throws>
    </javadoc>
    <method type="Object[]" name="sample" startLine="213" endLine="227">
      <scope startLine="214" endLine="217" />
      <declaration type="Object[]" name="out" />
      <scope startLine="221" endLine="223" />
    </method>
    <javadoc>
      <text>* Generate a random sample from the distribution.
 * <p>
 * If the requested samples fit in the specified array, it is returned
 * therein. Otherwise, a new array is allocated with the runtime type of
 * the specified array and the size of this collection.</text>
      <param>sampleSize the number of random values to generate.</param>
      <param>array the array to populate.</param>
      <return>an array representing the random sample.</return>
      <throws>NotStrictlyPositiveException if {@code sampleSize} is not positive.</throws>
      <throws>NullArgumentException if {@code array} is null</throws>
    </javadoc>
    <method type="T[]" name="sample" startLine="242" endLine="266">
      <scope startLine="243" endLine="245" />
      <scope startLine="247" endLine="249" />
      <declaration type="T[]" name="out" />
      <scope startLine="252" endLine="256">
        <declaration type="T[][]" name="unchecked" />
        <comment>safe as both are of type T</comment>
      </scope>
      <scope startLine="256" endLine="258" />
      <scope startLine="260" endLine="262" />
    </method>
  </class>
</source>
