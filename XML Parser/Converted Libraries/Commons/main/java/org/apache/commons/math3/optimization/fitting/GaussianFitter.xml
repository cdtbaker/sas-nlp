<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization.fitting">
  <import name="java.util.Arrays" />
  <import name="java.util.Comparator" />
  <import name="org.apache.commons.math3.analysis.function.Gaussian" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.ZeroException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="GaussianFitter" extends="CurveFitter<Gaussian.Parametric>" startLine="33">
    <javadoc>
      <text>* Fits points to a {@link org.apache.commons.math3.analysis.function.Gaussian.Parametric Gaussian} function.
 * <p>
 * Usage example:
 * <pre>
 * GaussianFitter fitter = new GaussianFitter(
 * new LevenbergMarquardtOptimizer());
 * fitter.addObservedPoint(4.0254623,  531026.0);
 * fitter.addObservedPoint(4.03128248, 984167.0);
 * fitter.addObservedPoint(4.03839603, 1887233.0);
 * fitter.addObservedPoint(4.04421621, 2687152.0);
 * fitter.addObservedPoint(4.05132976, 3461228.0);
 * fitter.addObservedPoint(4.05326982, 3580526.0);
 * fitter.addObservedPoint(4.05779662, 3439750.0);
 * fitter.addObservedPoint(4.0636168,  2877648.0);
 * fitter.addObservedPoint(4.06943698, 2175960.0);
 * fitter.addObservedPoint(4.07525716, 1447024.0);
 * fitter.addObservedPoint(4.08237071, 717104.0);
 * fitter.addObservedPoint(4.08366408, 620014.0);
 * double[] parameters = fitter.fit();
 * </pre></text>
      <since>2.2</since>
      <version>$Id: GaussianFitter.java 1422230 2012-12-15 12:11:13Z erans $</version>
      <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
    </javadoc>
    <javadoc>
      <text>* Constructs an instance using the specified optimizer.</text>
      <param>optimizer Optimizer to use for the fitting.</param>
    </javadoc>
    <method type="constructor" name="GaussianFitter" startLine="67" endLine="69" />
    <javadoc>
      <text>* Fits a Gaussian function to the observed points.</text>
      <param>initialGuess First guess values in the following order:
 * <ul>
 * <li>Norm</li>
 * <li>Mean</li>
 * <li>Sigma</li>
 * </ul></param>
      <return>the parameters of the Gaussian function that best fits the
 * observed points (in the same order as above).</return>
      <since>3.0</since>
    </javadoc>
    <method type="double[]" name="fit" startLine="84" endLine="112">
      <declaration type="Gaussian.Parametric[]" name="f" />
      <method type="double" name="value" startLine="87" endLine="95">
        <declaration type="double" name="v" />
        <scope startLine="89" endLine="91">
          <comment>NOPMD</comment>
        </scope>
        <scope startLine="91" endLine="93">
          <comment>Do nothing.</comment>
        </scope>
      </method>
      <method type="double[]" name="gradient" startLine="98" endLine="108">
        <declaration type="double[]" name="v" />
        <scope startLine="102" endLine="104">
          <comment>NOPMD</comment>
        </scope>
        <scope startLine="104" endLine="106">
          <comment>Do nothing.</comment>
        </scope>
      </method>
    </method>
    <javadoc>
      <text>* Fits a Gaussian function to the observed points.</text>
      <return>the parameters of the Gaussian function that best fits the
 * observed points (in the same order as above).</return>
    </javadoc>
    <method type="double[]" name="fit" startLine="120" endLine="123">
      <declaration type="double[]" name="guess" />
    </method>
    <class name="ParameterGuesser" startLine="125">
      <javadoc>
        <text>* Guesses the parameters {@code norm}, {@code mean}, and {@code sigma}of a {@link org.apache.commons.math3.analysis.function.Gaussian.Parametric}based on the specified observed points.</text>
      </javadoc>
      <javadoc>
        <text>* Normalization factor.</text>
      </javadoc>
      <declaration type="double" name="norm" />
      <javadoc>
        <text>* Mean.</text>
      </javadoc>
      <declaration type="double" name="mean" />
      <javadoc>
        <text>* Standard deviation.</text>
      </javadoc>
      <declaration type="double" name="sigma" />
      <javadoc>
        <text>* Constructs instance with the specified observed points.</text>
        <param>observations Observed points from which to guess the
 * parameters of the Gaussian.</param>
        <throws>NullArgumentException if {@code observations} is{@code null}.</throws>
        <throws>NumberIsTooSmallException if there are less than 3
 * observations.</throws>
      </javadoc>
      <method type="constructor" name="ParameterGuesser" startLine="148" endLine="162">
        <scope startLine="149" endLine="151" />
        <scope startLine="152" endLine="154" />
        <declaration type="WeightedObservedPoint[]" name="sorted" />
        <declaration type="double[]" name="params" />
      </method>
      <javadoc>
        <text>* Gets an estimation of the parameters.</text>
        <return>the guessed parameters, in the following order:
 * <ul>
 * <li>Normalization factor</li>
 * <li>Mean</li>
 * <li>Standard deviation</li>
 * </ul></return>
      </javadoc>
      <method type="double[]" name="guess" startLine="174" endLine="176" />
      <javadoc>
        <text>* Sort the observations.</text>
        <param>unsorted Input observations.</param>
        <return>the input observations, sorted.</return>
      </javadoc>
      <method type="WeightedObservedPoint[]" name="sortObservations" startLine="184" endLine="223">
        <declaration type="WeightedObservedPoint[]" name="observations" />
        <declaration type="Comparator<WeightedObservedPoint>" name="cmp" />
        <method type="int" name="compare" startLine="189" endLine="218">
          <scope startLine="190" endLine="192" />
          <scope startLine="193" endLine="195" />
          <scope startLine="196" endLine="198" />
          <scope startLine="199" endLine="201" />
          <scope startLine="202" endLine="204" />
          <scope startLine="205" endLine="207" />
          <scope startLine="208" endLine="210" />
          <scope startLine="211" endLine="213" />
          <scope startLine="214" endLine="216" />
        </method>
      </method>
      <javadoc>
        <text>* Guesses the parameters based on the specified observed points.</text>
        <param>points Observed points, sorted.</param>
        <return>the guessed parameters (normalization factor, mean and
 * sigma).</return>
      </javadoc>
      <method type="double[]" name="basicGuess" startLine="232" endLine="250">
        <declaration type="int" name="maxYIdx" />
        <declaration type="double" name="n" />
        <declaration type="double" name="m" />
        <declaration type="double" name="fwhmApprox" />
        <scope startLine="238" endLine="243">
          <declaration type="double" name="halfY" />
          <declaration type="double" name="fwhmX1" />
          <declaration type="double" name="fwhmX2" />
        </scope>
        <scope startLine="243" endLine="246">
          <comment>TODO: Exceptions should not be used for flow control.</comment>
        </scope>
        <declaration type="double" name="s" />
      </method>
      <javadoc>
        <text>* Finds index of point in specified points with the largest Y.</text>
        <param>points Points to search.</param>
        <return>the index in specified points array.</return>
      </javadoc>
      <method type="int" name="findMaxY" startLine="258" endLine="266">
        <declaration type="int" name="maxYIdx" />
        <scope startLine="260" endLine="264">
          <scope startLine="261" endLine="263" />
        </scope>
      </method>
      <javadoc>
        <text>* Interpolates using the specified points to determine X at the
 * specified Y.</text>
        <param>points Points to use for interpolation.</param>
        <param>startIdx Index within points from which to start the search for
 * interpolation bounds points.</param>
        <param>idxStep Index step for searching interpolation bounds points.</param>
        <param>y Y value for which X should be determined.</param>
        <return>the value of X for the specified Y.</return>
        <throws>ZeroException if {@code idxStep} is 0.</throws>
        <throws>OutOfRangeException if specified {@code y} is not within the
 * range of the specified {@code points}.</throws>
      </javadoc>
      <method type="double" name="interpolateXAtY" startLine="286" endLine="302">
        <scope startLine="287" endLine="289" />
        <declaration type="WeightedObservedPoint[]" name="twoPoints" />
        <declaration type="WeightedObservedPoint" name="p1" />
        <declaration type="WeightedObservedPoint" name="p2" />
        <scope startLine="294" endLine="296" />
        <scope startLine="297" endLine="299" />
      </method>
      <javadoc>
        <text>* Gets the two bounding interpolation points from the specified points
 * suitable for determining X at the specified Y.</text>
        <param>points Points to use for interpolation.</param>
        <param>startIdx Index within points from which to start search for
 * interpolation bounds points.</param>
        <param>idxStep Index step for search for interpolation bounds points.</param>
        <param>y Y value for which X should be determined.</param>
        <return>the array containing two points suitable for determining X at
 * the specified Y.</return>
        <throws>ZeroException if {@code idxStep} is 0.</throws>
        <throws>OutOfRangeException if specified {@code y} is not within the
 * range of the specified {@code points}.</throws>
      </javadoc>
      <method type="WeightedObservedPoint[]" name="getInterpolationPointsForY" startLine="323" endLine="347">
        <scope startLine="324" endLine="326" />
        <scope startLine="329" endLine="339">
          <declaration type="WeightedObservedPoint" name="p1" />
          <declaration type="WeightedObservedPoint" name="p2" />
          <scope startLine="332" endLine="338">
            <scope startLine="333" endLine="335" />
            <scope startLine="335" endLine="337" />
          </scope>
        </scope>
        <comment>Boundaries are replaced by dummy values because the raised</comment>
        <comment>exception is caught and the message never displayed.</comment>
        <comment>TODO: Exceptions should not be used for flow control.</comment>
      </method>
      <javadoc>
        <text>* Determines whether a value is between two other values.</text>
        <param>value Value to test whether it is between {@code boundary1}and {@code boundary2}.</param>
        <param>boundary1 One end of the range.</param>
        <param>boundary2 Other end of the range.</param>
        <return>{@code true} if {@code value} is between {@code boundary1} and{@code boundary2} (inclusive), {@code false} otherwise.</return>
      </javadoc>
      <method type="boolean" name="isBetween" startLine="361" endLine="364" />
    </class>
  </class>
</source>
