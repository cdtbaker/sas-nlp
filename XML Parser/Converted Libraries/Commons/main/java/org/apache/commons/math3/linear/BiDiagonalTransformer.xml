<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="BiDiagonalTransformer" startLine="23">
    <javadoc>
      <text>* Class transforming any matrix to bi-diagonal shape.
 * <p>Any m &times; n matrix A can be written as the product of three matrices:
 * A = U &times; B &times; V<sup>T</sup> with U an m &times; m orthogonal matrix,
 * B an m &times; n bi-diagonal matrix (lower diagonal if m &lt; n, upper diagonal
 * otherwise), and V an n &times; n orthogonal matrix.</p>
 * <p>Transformation to bi-diagonal shape is often not a goal by itself, but it is
 * an intermediate step in more general decomposition algorithms like {@link SingularValueDecomposition Singular Value Decomposition}. This class is therefore
 * intended for internal use by the library and is not public. As a consequence of
 * this explicitly limited scope, many methods directly returns references to
 * internal arrays, not copies.</p></text>
      <version>$Id: BiDiagonalTransformer.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Householder vectors.</text>
    </javadoc>
    <declaration type="double" name="householderVectors" />
    <javadoc>
      <text>* Main diagonal.</text>
    </javadoc>
    <declaration type="double[]" name="main" />
    <javadoc>
      <text>* Secondary diagonal.</text>
    </javadoc>
    <declaration type="double[]" name="secondary" />
    <javadoc>
      <text>* Cached value of U.</text>
    </javadoc>
    <declaration type="RealMatrix" name="cachedU" />
    <javadoc>
      <text>* Cached value of B.</text>
    </javadoc>
    <declaration type="RealMatrix" name="cachedB" />
    <javadoc>
      <text>* Cached value of V.</text>
    </javadoc>
    <declaration type="RealMatrix" name="cachedV" />
    <javadoc>
      <text>* Build the transformation to bi-diagonal shape of a matrix.</text>
      <param>matrix the matrix to transform.</param>
    </javadoc>
    <method type="constructor" name="BiDiagonalTransformer" startLine="62" endLine="81">
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <declaration type="int" name="p" />
      <scope startLine="75" endLine="77" />
      <scope startLine="77" endLine="79" />
      <comment>transform matrix</comment>
    </method>
    <javadoc>
      <text>* Returns the matrix U of the transform.
 * <p>U is an orthogonal matrix, i.e. its transpose is also its inverse.</p></text>
      <return>the U matrix</return>
    </javadoc>
    <method type="RealMatrix" name="getU" startLine="88" endLine="131">
      <scope startLine="90" endLine="126">
        <declaration type="int" name="m" />
        <declaration type="int" name="n" />
        <declaration type="int" name="p" />
        <declaration type="int" name="diagOffset" />
        <declaration type="double[]" name="diagonal" />
        <declaration type="double[][]" name="ua" />
        <scope startLine="100" endLine="102" />
        <scope startLine="105" endLine="121">
          <declaration type="double[]" name="hK" />
          <scope startLine="108" endLine="120">
            <scope startLine="109" endLine="119">
              <declaration type="double" name="alpha" />
              <scope startLine="111" endLine="113" />
              <scope startLine="116" endLine="118" />
            </scope>
          </scope>
        </scope>
        <scope startLine="122" endLine="124" />
        <comment>fill up the part of the matrix not affected by Householder transforms</comment>
        <comment>build up first part of the matrix by applying Householder transforms</comment>
      </scope>
      <comment>return the cached matrix</comment>
    </method>
    <javadoc>
      <text>* Returns the bi-diagonal matrix B of the transform.</text>
      <return>the B matrix</return>
    </javadoc>
    <method type="RealMatrix" name="getB" startLine="137" endLine="162">
      <scope startLine="139" endLine="157">
        <declaration type="int" name="m" />
        <declaration type="int" name="n" />
        <declaration type="double[][]" name="ba" />
        <scope startLine="144" endLine="155">
          <scope startLine="146" endLine="150">
            <scope startLine="147" endLine="149" />
          </scope>
          <scope startLine="150" endLine="154">
            <scope startLine="151" endLine="153" />
          </scope>
        </scope>
      </scope>
      <comment>return the cached matrix</comment>
    </method>
    <javadoc>
      <text>* Returns the matrix V of the transform.
 * <p>V is an orthogonal matrix, i.e. its transpose is also its inverse.</p></text>
      <return>the V matrix</return>
    </javadoc>
    <method type="RealMatrix" name="getV" startLine="169" endLine="212">
      <scope startLine="171" endLine="207">
        <declaration type="int" name="m" />
        <declaration type="int" name="n" />
        <declaration type="int" name="p" />
        <declaration type="int" name="diagOffset" />
        <declaration type="double[]" name="diagonal" />
        <declaration type="double[][]" name="va" />
        <scope startLine="181" endLine="183" />
        <scope startLine="186" endLine="202">
          <declaration type="double[]" name="hK" />
          <scope startLine="189" endLine="201">
            <scope startLine="190" endLine="200">
              <declaration type="double" name="beta" />
              <scope startLine="192" endLine="194" />
              <scope startLine="197" endLine="199" />
            </scope>
          </scope>
        </scope>
        <scope startLine="203" endLine="205" />
        <comment>fill up the part of the matrix not affected by Householder transforms</comment>
        <comment>build up first part of the matrix by applying Householder transforms</comment>
      </scope>
      <comment>return the cached matrix</comment>
    </method>
    <javadoc>
      <text>* Get the Householder vectors of the transform.
 * <p>Note that since this class is only intended for internal use,
 * it returns directly a reference to its internal arrays, not a copy.</p></text>
      <return>the main diagonal elements of the B matrix</return>
    </javadoc>
    <method type="double[][]" name="getHouseholderVectorsRef" startLine="220" endLine="222" />
    <javadoc>
      <text>* Get the main diagonal elements of the matrix B of the transform.
 * <p>Note that since this class is only intended for internal use,
 * it returns directly a reference to its internal arrays, not a copy.</p></text>
      <return>the main diagonal elements of the B matrix</return>
    </javadoc>
    <method type="double[]" name="getMainDiagonalRef" startLine="230" endLine="232" />
    <javadoc>
      <text>* Get the secondary diagonal elements of the matrix B of the transform.
 * <p>Note that since this class is only intended for internal use,
 * it returns directly a reference to its internal arrays, not a copy.</p></text>
      <return>the secondary diagonal elements of the B matrix</return>
    </javadoc>
    <method type="double[]" name="getSecondaryDiagonalRef" startLine="240" endLine="242" />
    <javadoc>
      <text>* Check if the matrix is transformed to upper bi-diagonal.</text>
      <return>true if the matrix is transformed to upper bi-diagonal</return>
    </javadoc>
    <method type="boolean" name="isUpperBiDiagonal" startLine="248" endLine="250" />
    <javadoc>
      <text>* Transform original matrix to upper bi-diagonal form.
 * <p>Transformation is done using alternate Householder transforms
 * on columns and rows.</p></text>
    </javadoc>
    <method type="void" name="transformToUpperBiDiagonal" startLine="257" endLine="314">
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <scope startLine="261" endLine="313">
        <declaration type="double" name="xNormSqr" />
        <scope startLine="265" endLine="268">
          <declaration type="double" name="c" />
        </scope>
        <declaration type="double[]" name="hK" />
        <declaration type="double" name="a" />
        <scope startLine="272" endLine="286">
          <scope startLine="274" endLine="285">
            <declaration type="double" name="alpha" />
            <scope startLine="276" endLine="279">
              <declaration type="double[]" name="hI" />
            </scope>
            <scope startLine="281" endLine="284">
              <declaration type="double[]" name="hI" />
            </scope>
          </scope>
        </scope>
        <scope startLine="288" endLine="311">
          <scope startLine="291" endLine="294">
            <declaration type="double" name="c" />
          </scope>
          <declaration type="double" name="b" />
          <scope startLine="297" endLine="310">
            <scope startLine="299" endLine="309">
              <declaration type="double[]" name="hI" />
              <declaration type="double" name="beta" />
              <scope startLine="302" endLine="304" />
              <scope startLine="306" endLine="308" />
            </scope>
          </scope>
        </scope>
        <comment>zero-out a column</comment>
        <comment>zero-out a row</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Transform original matrix to lower bi-diagonal form.
 * <p>Transformation is done using alternate Householder transforms
 * on rows and columns.</p></text>
    </javadoc>
    <method type="void" name="transformToLowerBiDiagonal" startLine="321" endLine="379">
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <scope startLine="325" endLine="378">
        <declaration type="double[]" name="hK" />
        <declaration type="double" name="xNormSqr" />
        <scope startLine="330" endLine="333">
          <declaration type="double" name="c" />
        </scope>
        <declaration type="double" name="a" />
        <scope startLine="336" endLine="349">
          <scope startLine="338" endLine="348">
            <declaration type="double[]" name="hI" />
            <declaration type="double" name="alpha" />
            <scope startLine="341" endLine="343" />
            <scope startLine="345" endLine="347" />
          </scope>
        </scope>
        <scope startLine="351" endLine="376">
          <declaration type="double[]" name="hKp1" />
          <scope startLine="355" endLine="358">
            <declaration type="double" name="c" />
          </scope>
          <declaration type="double" name="b" />
          <scope startLine="361" endLine="375">
            <scope startLine="363" endLine="374">
              <declaration type="double" name="beta" />
              <scope startLine="365" endLine="368">
                <declaration type="double[]" name="hI" />
              </scope>
              <scope startLine="370" endLine="373">
                <declaration type="double[]" name="hI" />
              </scope>
            </scope>
          </scope>
        </scope>
        <comment>zero-out a row</comment>
        <comment>zero-out a column</comment>
      </scope>
    </method>
  </class>
</source>
