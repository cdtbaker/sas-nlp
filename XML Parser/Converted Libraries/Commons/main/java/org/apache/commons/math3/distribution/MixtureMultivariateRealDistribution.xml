<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution">
  <import name="java.util.List" />
  <import name="java.util.ArrayList" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NotPositiveException" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.Well19937c" />
  <import name="org.apache.commons.math3.util.Pair" />
  <class name="MixtureMultivariateRealDistribution" extends="AbstractMultivariateRealDistribution" startLine="29">
    <javadoc>
      <text>* Class for representing <a href="http://en.wikipedia.org/wiki/Mixture_model">
 * mixture model</a> distributions.</text>
      <param><T>
 *  Type of the mixture components.</param>
      <version>$Id: MixtureMultivariateRealDistribution.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>3.1</since>
    </javadoc>
    <javadoc>
      <text>* Normalized weight of each mixture component.</text>
    </javadoc>
    <declaration type="double[]" name="weight" />
    <javadoc>
      <text>* Mixture components.</text>
    </javadoc>
    <declaration type="List<T>" name="distribution" />
    <javadoc>
      <text>* Creates a mixture model from a list of distributions and their
 * associated weights.</text>
      <param>components List of (weight, distribution) pairs from which to sample.</param>
    </javadoc>
    <method type="constructor" name="MixtureMultivariateRealDistribution" startLine="51" endLine="53" />
    <javadoc>
      <text>* Creates a mixture model from a list of distributions and their
 * associated weights.</text>
      <param>rng Random number generator.</param>
      <param>components Distributions from which to sample.</param>
      <throws>NotPositiveException if any of the weights is negative.</throws>
      <throws>DimensionMismatchException if not all components have the same
 * number of variables.</throws>
    </javadoc>
    <method type="constructor" name="MixtureMultivariateRealDistribution" startLine="66" endLine="96">
      <declaration type="int" name="numComp" />
      <declaration type="int" name="dim" />
      <declaration type="double" name="weightSum" />
      <scope startLine="72" endLine="81">
        <declaration type="Pair<Double,T>" name="comp" />
        <scope startLine="74" endLine="76" />
        <scope startLine="77" endLine="79" />
      </scope>
      <scope startLine="84" endLine="86" />
      <scope startLine="91" endLine="95">
        <declaration type="Pair<Double,T>" name="comp" />
      </scope>
      <comment>Check for overflow.</comment>
      <comment>Store each distribution and its normalized weight.</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="density" startLine="99" endLine="105">
      <declaration type="double" name="p" />
      <scope startLine="101" endLine="103" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double[]" name="sample" startLine="108" endLine="133">
      <declaration type="double[]" name="vals" />
      <declaration type="double" name="randomValue" />
      <declaration type="double" name="sum" />
      <scope startLine="116" endLine="123">
        <scope startLine="118" endLine="122" />
        <comment>pick model i</comment>
      </scope>
      <scope startLine="125" endLine="130">
        <comment>This should never happen, but it ensures we won't return a null in</comment>
        <comment>case the loop above has some floating point inequality problem on</comment>
        <comment>the final iteration.</comment>
      </scope>
      <comment>Sampled values.</comment>
      <comment>Determine which component to sample from.</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="reseedRandomGenerator" startLine="136" endLine="146">
      <scope startLine="141" endLine="145">
        <comment>Make each component's seed different in order to avoid</comment>
        <comment>using the same sequence of random numbers.</comment>
      </scope>
      <comment>Seed needs to be propagated to underlying components</comment>
      <comment>in order to maintain consistency between runs.</comment>
    </method>
    <javadoc>
      <text>* Gets the distributions that make up the mixture model.</text>
      <return>the component distributions and associated weights.</return>
    </javadoc>
    <method type="List<Pair<Double,T>>" name="getComponents" startLine="153" endLine="161">
      <declaration type="List<Pair<Double,T>>" name="list" />
      <scope startLine="156" endLine="158" />
    </method>
  </class>
</source>
