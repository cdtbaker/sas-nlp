<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.interpolation">
  <import name="java.util.ArrayList" />
  <import name="java.util.Arrays" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.analysis.differentiation.DerivativeStructure" />
  <import name="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableVectorFunction" />
  <import name="org.apache.commons.math3.analysis.polynomials.PolynomialFunction" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.exception.NoDataException" />
  <import name="org.apache.commons.math3.exception.ZeroException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.ArithmeticUtils" />
  <class name="HermiteInterpolator" startLine="32">
    <implements name="UnivariateDifferentiableVectorFunction" />
    <javadoc>
      <text>* Polynomial interpolator using both sample values and sample derivatives.
 * <p>
 * The interpolation polynomials match all sample points, including both values
 * and provided derivatives. There is one polynomial for each component of
 * the values vector. All polynomials have the same degree. The degree of the
 * polynomials depends on the number of points and number of derivatives at each
 * point. For example the interpolation polynomials for n sample points without
 * any derivatives all have degree n-1. The interpolation polynomials for n
 * sample points with the two extreme points having value and first derivative
 * and the remaining points having value only all have degree n+1. The
 * interpolation polynomial for n sample points with value, first and second
 * derivative for all points all have degree 3n-1.
 * </p></text>
      <version>$Id: HermiteInterpolator.java 1410460 2012-11-16 16:49:38Z erans $</version>
      <since>3.1</since>
    </javadoc>
    <javadoc>
      <text>* Sample abscissae.</text>
    </javadoc>
    <declaration type="List<Double>" name="abscissae" />
    <javadoc>
      <text>* Top diagonal of the divided differences array.</text>
    </javadoc>
    <declaration type="List<double[]>" name="topDiagonal" />
    <javadoc>
      <text>* Bottom diagonal of the divided differences array.</text>
    </javadoc>
    <declaration type="List<double[]>" name="bottomDiagonal" />
    <javadoc>
      <text>* Create an empty interpolator.</text>
    </javadoc>
    <method type="constructor" name="HermiteInterpolator" startLine="62" endLine="66" />
    <javadoc>
      <text>* Add a sample point.
 * <p>
 * This method must be called once for each sample point. It is allowed to
 * mix some calls with values only with calls with values and first
 * derivatives.
 * </p>
 * <p>
 * The point abscissae for all calls <em>must</em> be different.
 * </p></text>
      <param>x abscissa of the sample point</param>
      <param>value value and derivatives of the sample point
 * (if only one row is passed, it is the value, if two rows are
 * passed the first one is the value and the second the derivative
 * and so on)</param>
      <exception>ZeroException if the abscissa difference between added point
 * and a previous point is zero (i.e. the two points are at same abscissa)</exception>
      <exception>MathArithmeticException if the number of derivatives is larger
 * than 20, which prevents computation of a factorial</exception>
    </javadoc>
    <method type="void" name="addSamplePoint" startLine="88" endLine="124">
      <scope startLine="90" endLine="122">
        <declaration type="double[]" name="y" />
        <scope startLine="93" endLine="98">
          <declaration type="double" name="inv" />
          <scope startLine="95" endLine="97" />
        </scope>
        <declaration type="int" name="n" />
        <declaration type="double[]" name="bottom0" />
        <scope startLine="104" endLine="114">
          <declaration type="double[]" name="bottom1" />
          <declaration type="double" name="inv" />
          <scope startLine="107" endLine="109" />
          <scope startLine="110" endLine="112" />
        </scope>
        <comment>update the bottom diagonal of the divided differences array</comment>
        <comment>update the top diagonal of the divided differences array</comment>
        <comment>update the abscissae array</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Compute the interpolation polynomials.</text>
      <return>interpolation polynomials array</return>
      <exception>NoDataException if sample is empty</exception>
    </javadoc>
    <method type="PolynomialFunction[]" name="getPolynomials" startLine="131" endLine="155">
      <declaration type="PolynomialFunction" name="zero" />
      <declaration type="PolynomialFunction[]" name="polynomials" />
      <scope startLine="139" endLine="141" />
      <declaration type="PolynomialFunction" name="coeff" />
      <scope startLine="145" endLine="151">
        <declaration type="double[]" name="tdi" />
        <scope startLine="147" endLine="149" />
      </scope>
      <comment>safety check</comment>
      <comment>iteration initialization</comment>
      <comment>build the polynomials by iterating on the top diagonal of the divided differences array</comment>
    </method>
    <javadoc>
      <text>* Interpolate value at a specified abscissa.
 * <p>
 * Calling this method is equivalent to call the {@link PolynomialFunction#value(double)value} methods of all polynomials returned by {@link #getPolynomials() getPolynomials},
 * except it does not build the intermediate polynomials, so this method is faster and
 * numerically more stable.
 * </p></text>
      <param>x interpolation abscissa</param>
      <return>interpolated value</return>
      <exception>NoDataException if sample is empty</exception>
    </javadoc>
    <method type="double[]" name="value" startLine="169" endLine="187">
      <declaration type="double[]" name="value" />
      <declaration type="double" name="valueCoeff" />
      <scope startLine="176" endLine="183">
        <declaration type="double[]" name="dividedDifference" />
        <scope startLine="178" endLine="180" />
        <declaration type="double" name="deltaX" />
      </scope>
      <comment>safety check</comment>
    </method>
    <javadoc>
      <text>* Interpolate value at a specified abscissa.
 * <p>
 * Calling this method is equivalent to call the {@link PolynomialFunction#value(DerivativeStructure) value} methods of all polynomials
 * returned by {@link #getPolynomials() getPolynomials}, except it does not build the
 * intermediate polynomials, so this method is faster and numerically more stable.
 * </p></text>
      <param>x interpolation abscissa</param>
      <return>interpolated value</return>
      <exception>NoDataException if sample is empty</exception>
    </javadoc>
    <method type="DerivativeStructure[]" name="value" startLine="201" endLine="220">
      <declaration type="DerivativeStructure[]" name="value" />
      <declaration type="DerivativeStructure" name="valueCoeff" />
      <scope startLine="209" endLine="216">
        <declaration type="double[]" name="dividedDifference" />
        <scope startLine="211" endLine="213" />
        <declaration type="DerivativeStructure" name="deltaX" />
      </scope>
      <comment>safety check</comment>
    </method>
    <javadoc>
      <text>* Check interpolation can be performed.</text>
      <exception>NoDataException if interpolation cannot be performed
 * because sample is empty</exception>
    </javadoc>
    <method type="void" name="checkInterpolation" startLine="226" endLine="230">
      <scope startLine="227" endLine="229" />
    </method>
    <javadoc>
      <text>* Create a polynomial from its coefficients.</text>
      <param>c polynomials coefficients</param>
      <return>polynomial</return>
    </javadoc>
    <method type="PolynomialFunction" name="polynomial" startLine="236" endLine="238" />
  </class>
</source>
