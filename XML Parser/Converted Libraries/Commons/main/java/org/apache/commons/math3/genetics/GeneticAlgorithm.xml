<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.genetics">
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.JDKRandomGenerator" />
  <class name="GeneticAlgorithm" startLine="24">
    <javadoc>
      <text>* Implementation of a genetic algorithm. All factors that govern the operation
 * of the algorithm can be configured for a specific problem.</text>
      <since>2.0</since>
      <version>$Id: GeneticAlgorithm.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Static random number generator shared by GA implementation classes. Set the randomGenerator seed to get
 * reproducible results. Use {@link #setRandomGenerator(RandomGenerator)} to supply an alternative to the default
 * JDK-provided PRNG.</text>
    </javadoc>
    <declaration type="RandomGenerator" name="randomGenerator" />
    <javadoc>
      <text>* the crossover policy used by the algorithm.</text>
    </javadoc>
    <declaration type="CrossoverPolicy" name="crossoverPolicy" />
    <javadoc>
      <text>* the rate of crossover for the algorithm.</text>
    </javadoc>
    <declaration type="double" name="crossoverRate" />
    <javadoc>
      <text>* the mutation policy used by the algorithm.</text>
    </javadoc>
    <declaration type="MutationPolicy" name="mutationPolicy" />
    <javadoc>
      <text>* the rate of mutation for the algorithm.</text>
    </javadoc>
    <declaration type="double" name="mutationRate" />
    <javadoc>
      <text>* the selection policy used by the algorithm.</text>
    </javadoc>
    <declaration type="SelectionPolicy" name="selectionPolicy" />
    <javadoc>
      <text>* the number of generations evolved to reach {@link StoppingCondition} in the last run.</text>
    </javadoc>
    <declaration type="int" name="generationsEvolved" />
    <javadoc>
      <text>* Create a new genetic algorithm.</text>
      <param>crossoverPolicy The {@link CrossoverPolicy}</param>
      <param>crossoverRate The crossover rate as a percentage (0-1 inclusive)</param>
      <param>mutationPolicy The {@link MutationPolicy}</param>
      <param>mutationRate The mutation rate as a percentage (0-1 inclusive)</param>
      <param>selectionPolicy The {@link SelectionPolicy}</param>
      <throws>OutOfRangeException if the crossover or mutation rate is outside the [0, 1] range</throws>
    </javadoc>
    <method type="constructor" name="GeneticAlgorithm" startLine="72" endLine="87">
      <scope startLine="74" endLine="77" />
      <scope startLine="78" endLine="81" />
    </method>
    <javadoc>
      <text>* Set the (static) random generator.</text>
      <param>random random generator</param>
    </javadoc>
    <method type="void" name="setRandomGenerator" startLine="94" endLine="96" />
    <javadoc>
      <text>* Returns the (static) random generator.</text>
      <return>the static random generator shared by GA implementation classes</return>
    </javadoc>
    <method type="RandomGenerator" name="getRandomGenerator" startLine="103" endLine="105" />
    <javadoc>
      <text>* Evolve the given population. Evolution stops when the stopping condition
 * is satisfied. Updates the {@link #getGenerationsEvolved() generationsEvolved}property with the number of generations evolved before the StoppingCondition
 * is satisfied.</text>
      <param>initial the initial, seed population.</param>
      <param>condition the stopping condition used to stop evolution.</param>
      <return>the population that satisfies the stopping condition.</return>
    </javadoc>
    <method type="Population" name="evolve" startLine="117" endLine="125">
      <declaration type="Population" name="current" />
      <scope startLine="120" endLine="123" />
    </method>
    <javadoc>
      <text>* Evolve the given population into the next generation.
 * <p>
 * <ol>
 * <li>Get nextGeneration population to fill from <code>current</code>
 * generation, using its nextGeneration method</li>
 * <li>Loop until new generation is filled:</li>
 * <ul><li>Apply configured SelectionPolicy to select a pair of parents
 * from <code>current</code></li>
 * <li>With probability = {@link #getCrossoverRate()}, apply
 * configured {@link CrossoverPolicy} to parents</li>
 * <li>With probability = {@link #getMutationRate()}, apply
 * configured {@link MutationPolicy} to each of the offspring</li>
 * <li>Add offspring individually to nextGeneration,
 * space permitting</li>
 * </ul>
 * <li>Return nextGeneration</li>
 * </ol></text>
      <param>current the current population.</param>
      <return>the population for the next generation.</return>
    </javadoc>
    <method type="Population" name="nextGeneration" startLine="149" endLine="182">
      <declaration type="Population" name="nextGeneration" />
      <declaration type="RandomGenerator" name="randGen" />
      <scope startLine="154" endLine="179">
        <declaration type="ChromosomePair" name="pair" />
        <scope startLine="159" endLine="162" />
        <scope startLine="165" endLine="170" />
        <scope startLine="175" endLine="178" />
        <comment>select parent chromosomes</comment>
        <comment>crossover?</comment>
        <comment>apply crossover policy to create two offspring</comment>
        <comment>mutation?</comment>
        <comment>apply mutation policy to the chromosomes</comment>
        <comment>add the first chromosome to the population</comment>
        <comment>is there still a place for the second chromosome?</comment>
        <comment>add the second chromosome to the population</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the crossover policy.</text>
      <return>crossover policy</return>
    </javadoc>
    <method type="CrossoverPolicy" name="getCrossoverPolicy" startLine="188" endLine="190" />
    <javadoc>
      <text>* Returns the crossover rate.</text>
      <return>crossover rate</return>
    </javadoc>
    <method type="double" name="getCrossoverRate" startLine="196" endLine="198" />
    <javadoc>
      <text>* Returns the mutation policy.</text>
      <return>mutation policy</return>
    </javadoc>
    <method type="MutationPolicy" name="getMutationPolicy" startLine="204" endLine="206" />
    <javadoc>
      <text>* Returns the mutation rate.</text>
      <return>mutation rate</return>
    </javadoc>
    <method type="double" name="getMutationRate" startLine="212" endLine="214" />
    <javadoc>
      <text>* Returns the selection policy.</text>
      <return>selection policy</return>
    </javadoc>
    <method type="SelectionPolicy" name="getSelectionPolicy" startLine="220" endLine="222" />
    <javadoc>
      <text>* Returns the number of generations evolved to reach {@link StoppingCondition} in the last run.</text>
      <return>number of generations evolved</return>
      <since>2.1</since>
    </javadoc>
    <method type="int" name="getGenerationsEvolved" startLine="230" endLine="232" />
    <comment>@GuardedBy("this")</comment>
  </class>
</source>
