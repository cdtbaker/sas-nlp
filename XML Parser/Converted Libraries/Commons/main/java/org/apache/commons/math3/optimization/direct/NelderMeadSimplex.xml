<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization.direct">
  <import name="java.util.Comparator" />
  <import name="org.apache.commons.math3.optimization.PointValuePair" />
  <import name="org.apache.commons.math3.analysis.MultivariateFunction" />
  <class name="NelderMeadSimplex" extends="AbstractSimplex" startLine="25">
    <javadoc>
      <text>* This class implements the Nelder-Mead simplex algorithm.</text>
      <version>$Id: NelderMeadSimplex.java 1422230 2012-12-15 12:11:13Z erans $</version>
      <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Default value for {@link #rho}: {@value}.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_RHO" />
    <javadoc>
      <text>* Default value for {@link #khi}: {@value}.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_KHI" />
    <javadoc>
      <text>* Default value for {@link #gamma}: {@value}.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_GAMMA" />
    <javadoc>
      <text>* Default value for {@link #sigma}: {@value}.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_SIGMA" />
    <javadoc>
      <text>* Reflection coefficient.</text>
    </javadoc>
    <declaration type="double" name="rho" />
    <javadoc>
      <text>* Expansion coefficient.</text>
    </javadoc>
    <declaration type="double" name="khi" />
    <javadoc>
      <text>* Contraction coefficient.</text>
    </javadoc>
    <declaration type="double" name="gamma" />
    <javadoc>
      <text>* Shrinkage coefficient.</text>
    </javadoc>
    <declaration type="double" name="sigma" />
    <javadoc>
      <text>* Build a Nelder-Mead simplex with default coefficients.
 * The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
 * for both gamma and sigma.</text>
      <param>n Dimension of the simplex.</param>
    </javadoc>
    <method type="constructor" name="NelderMeadSimplex" startLine="58" endLine="60" />
    <javadoc>
      <text>* Build a Nelder-Mead simplex with default coefficients.
 * The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
 * for both gamma and sigma.</text>
      <param>n Dimension of the simplex.</param>
      <param>sideLength Length of the sides of the default (hypercube)
 * simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.</param>
    </javadoc>
    <method type="constructor" name="NelderMeadSimplex" startLine="71" endLine="74" />
    <javadoc>
      <text>* Build a Nelder-Mead simplex with specified coefficients.</text>
      <param>n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int,double)}.</param>
      <param>sideLength Length of the sides of the default (hypercube)
 * simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.</param>
      <param>rho Reflection coefficient.</param>
      <param>khi Expansion coefficient.</param>
      <param>gamma Contraction coefficient.</param>
      <param>sigma Shrinkage coefficient.</param>
    </javadoc>
    <method type="constructor" name="NelderMeadSimplex" startLine="90" endLine="97" />
    <javadoc>
      <text>* Build a Nelder-Mead simplex with specified coefficients.</text>
      <param>n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int)}.</param>
      <param>rho Reflection coefficient.</param>
      <param>khi Expansion coefficient.</param>
      <param>gamma Contraction coefficient.</param>
      <param>sigma Shrinkage coefficient.</param>
    </javadoc>
    <method type="constructor" name="NelderMeadSimplex" startLine="111" endLine="113" />
    <javadoc>
      <text>* Build a Nelder-Mead simplex with default coefficients.
 * The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
 * for both gamma and sigma.</text>
      <param>steps Steps along the canonical axes representing box edges.
 * They may be negative but not zero. See</param>
    </javadoc>
    <method type="constructor" name="NelderMeadSimplex" startLine="123" endLine="125" />
    <javadoc>
      <text>* Build a Nelder-Mead simplex with specified coefficients.</text>
      <param>steps Steps along the canonical axes representing box edges.
 * They may be negative but not zero. See{@link AbstractSimplex#AbstractSimplex(double[])}.</param>
      <param>rho Reflection coefficient.</param>
      <param>khi Expansion coefficient.</param>
      <param>gamma Contraction coefficient.</param>
      <param>sigma Shrinkage coefficient.</param>
      <throws>IllegalArgumentException if one of the steps is zero.</throws>
    </javadoc>
    <method type="constructor" name="NelderMeadSimplex" startLine="141" endLine="148" />
    <javadoc>
      <text>* Build a Nelder-Mead simplex with default coefficients.
 * The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
 * for both gamma and sigma.</text>
      <param>referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.</param>
    </javadoc>
    <method type="constructor" name="NelderMeadSimplex" startLine="158" endLine="160" />
    <javadoc>
      <text>* Build a Nelder-Mead simplex with specified coefficients.</text>
      <param>referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.</param>
      <param>rho Reflection coefficient.</param>
      <param>khi Expansion coefficient.</param>
      <param>gamma Contraction coefficient.</param>
      <param>sigma Shrinkage coefficient.</param>
      <throws>org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif the reference simplex does not contain at least one point.</throws>
      <throws>org.apache.commons.math3.exception.DimensionMismatchExceptionif there is a dimension mismatch in the reference simplex.</throws>
    </javadoc>
    <method type="constructor" name="NelderMeadSimplex" startLine="178" endLine="185" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="iterate" startLine="190" endLine="283">
      <declaration type="int" name="n" />
      <declaration type="PointValuePair" name="best" />
      <declaration type="PointValuePair" name="secondBest" />
      <declaration type="PointValuePair" name="worst" />
      <declaration type="double[]" name="xWorst" />
      <declaration type="double[]" name="centroid" />
      <scope startLine="203" endLine="208">
        <declaration type="double[]" name="x" />
        <scope startLine="205" endLine="207" />
      </scope>
      <declaration type="double" name="scaling" />
      <scope startLine="210" endLine="212" />
      <declaration type="double[]" name="xR" />
      <scope startLine="216" endLine="218" />
      <declaration type="PointValuePair" name="reflected" />
      <scope startLine="223" endLine="226">
        <comment>Accept the reflected point.</comment>
      </scope>
      <scope startLine="226" endLine="242">
        <declaration type="double[]" name="xE" />
        <scope startLine="229" endLine="231" />
        <declaration type="PointValuePair" name="expanded" />
        <scope startLine="235" endLine="238" />
        <scope startLine="238" endLine="241" />
        <comment>Compute the expansion point.</comment>
        <comment>Accept the expansion point.</comment>
        <comment>Accept the reflected point.</comment>
      </scope>
      <scope startLine="242" endLine="282">
        <scope startLine="243" endLine="256">
          <declaration type="double[]" name="xC" />
          <scope startLine="246" endLine="248" />
          <declaration type="PointValuePair" name="outContracted" />
          <scope startLine="251" endLine="255" />
        </scope>
        <scope startLine="256" endLine="270">
          <declaration type="double[]" name="xC" />
          <scope startLine="259" endLine="261" />
          <declaration type="PointValuePair" name="inContracted" />
          <scope startLine="265" endLine="269" />
        </scope>
        <declaration type="double[]" name="xSmallest" />
        <scope startLine="274" endLine="280">
          <declaration type="double[]" name="x" />
          <scope startLine="276" endLine="278" />
        </scope>
        <comment>Perform an outside contraction.</comment>
        <comment>Accept the contraction point.</comment>
        <comment>Perform an inside contraction.</comment>
        <comment>Accept the contraction point.</comment>
        <comment>Perform a shrink.</comment>
      </scope>
      <comment>The simplex has n + 1 points if dimension is n.</comment>
      <comment>Interesting values.</comment>
      <comment>Compute the centroid of the best vertices (dismissing the worst</comment>
      <comment>point at index n).</comment>
      <comment>compute the reflection point</comment>
    </method>
  </class>
</source>
