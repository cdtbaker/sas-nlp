<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution">
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.Well19937c" />
  <class name="UniformRealDistribution" extends="AbstractRealDistribution" startLine="26">
    <javadoc>
      <text>* Implementation of the uniform real distribution.</text>
      <see><a href="http://en.wikipedia.org/wiki/Uniform_distribution_(continuous)"
 * >Uniform distribution (continuous), at Wikipedia</a></see>
      <version>$Id: UniformRealDistribution.java 1462020 2013-03-28 10:24:45Z luc $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Default inverse cumulative probability accuracy.</text>
      <deprecated>as of 3.2 not used anymore, will be removed in 4.0</deprecated>
    </javadoc>
    <declaration type="double" name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" />
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Lower bound of this distribution (inclusive).</text>
    </javadoc>
    <declaration type="double" name="lower" />
    <javadoc>
      <text>* Upper bound of this distribution (exclusive).</text>
    </javadoc>
    <declaration type="double" name="upper" />
    <javadoc>
      <text>* Create a standard uniform real distribution with lower bound (inclusive)
 * equal to zero and upper bound (exclusive) equal to one.</text>
    </javadoc>
    <method type="constructor" name="UniformRealDistribution" startLine="52" endLine="54" />
    <javadoc>
      <text>* Create a uniform real distribution using the given lower and upper
 * bounds.</text>
      <param>lower Lower bound of this distribution (inclusive).</param>
      <param>upper Upper bound of this distribution (exclusive).</param>
      <throws>NumberIsTooLargeException if {@code lower >= upper}.</throws>
    </javadoc>
    <method type="constructor" name="UniformRealDistribution" startLine="65" endLine="67" />
    <javadoc>
      <text>* Create a uniform distribution.</text>
      <param>lower Lower bound of this distribution (inclusive).</param>
      <param>upper Upper bound of this distribution (exclusive).</param>
      <param>inverseCumAccuracy Inverse cumulative probability accuracy.</param>
      <throws>NumberIsTooLargeException if {@code lower >= upper}.</throws>
      <deprecated>as of 3.2, inverse CDF is now calculated analytically, use{@link #UniformRealDistribution(double,double)} instead.</deprecated>
    </javadoc>
    <method type="constructor" name="UniformRealDistribution" startLine="81" endLine="83" />
    <javadoc>
      <text>* Creates a uniform distribution.</text>
      <param>rng Random number generator.</param>
      <param>lower Lower bound of this distribution (inclusive).</param>
      <param>upper Upper bound of this distribution (exclusive).</param>
      <param>inverseCumAccuracy Inverse cumulative probability accuracy.</param>
      <throws>NumberIsTooLargeException if {@code lower >= upper}.</throws>
      <since>3.1</since>
      <deprecated>as of 3.2, inverse CDF is now calculated analytically, use{@link #UniformRealDistribution(RandomGenerator,double,double)}instead.</deprecated>
    </javadoc>
    <method type="constructor" name="UniformRealDistribution" startLine="102" endLine="104" />
    <javadoc>
      <text>* Creates a uniform distribution.</text>
      <param>rng Random number generator.</param>
      <param>lower Lower bound of this distribution (inclusive).</param>
      <param>upper Upper bound of this distribution (exclusive).</param>
      <throws>NumberIsTooLargeException if {@code lower >= upper}.</throws>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="UniformRealDistribution" startLine="118" endLine="128">
      <scope startLine="120" endLine="124" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="density" startLine="131" endLine="136">
      <scope startLine="132" endLine="134" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="cumulativeProbability" startLine="139" endLine="147">
      <scope startLine="140" endLine="142" />
      <scope startLine="143" endLine="145" />
    </method>
    <method type="double" name="inverseCumulativeProbability" startLine="151" endLine="156">
      <scope startLine="152" endLine="154" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}For lower bound {@code lower} and upper bound {@code upper}, the mean is{@code 0.5 * (lower + upper)}.</text>
    </javadoc>
    <method type="double" name="getNumericalMean" startLine="164" endLine="166" />
    <javadoc>
      <text>* {@inheritDoc}For lower bound {@code lower} and upper bound {@code upper}, the
 * variance is {@code (upper - lower)^2 / 12}.</text>
    </javadoc>
    <method type="double" name="getNumericalVariance" startLine="174" endLine="177">
      <declaration type="double" name="ul" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}The lower bound of the support is equal to the lower bound parameter
 * of the distribution.</text>
      <return>lower bound of the support</return>
    </javadoc>
    <method type="double" name="getSupportLowerBound" startLine="187" endLine="189" />
    <javadoc>
      <text>* {@inheritDoc}The upper bound of the support is equal to the upper bound parameter
 * of the distribution.</text>
      <return>upper bound of the support</return>
    </javadoc>
    <method type="double" name="getSupportUpperBound" startLine="199" endLine="201" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isSupportLowerBoundInclusive" startLine="204" endLine="206" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isSupportUpperBoundInclusive" startLine="209" endLine="211" />
    <javadoc>
      <text>* {@inheritDoc}The support of this distribution is connected.</text>
      <return>{@code true}</return>
    </javadoc>
    <method type="boolean" name="isSupportConnected" startLine="220" endLine="222" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="sample" startLine="226" endLine="229">
      <declaration type="double" name="u" />
    </method>
  </class>
</source>
