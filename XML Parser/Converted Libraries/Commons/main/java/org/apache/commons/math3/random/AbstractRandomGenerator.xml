<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.random">
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="AbstractRandomGenerator" startLine="22">
    <implements name="RandomGenerator" />
    <javadoc>
      <text>* Abstract class implementing the {@link RandomGenerator} interface.
 * Default implementations for all methods other than {@link #nextDouble()} and{@link #setSeed(long)} are provided.
 * <p>
 * All data generation methods are based on {@code code nextDouble()}.
 * Concrete implementations <strong>must</strong> override
 * this method and <strong>should</strong> provide better / more
 * performant implementations of the other methods if the underlying PRNG
 * supplies them.</p></text>
      <since>1.1</since>
      <version>$Id: AbstractRandomGenerator.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Cached random normal value.  The default implementation for{@link #nextGaussian} generates pairs of values and this field caches the
 * second value so that the full algorithm is not executed for every
 * activation.  The value {@code Double.NaN} signals that there is
 * no cached value.  Use {@link #clear} to clear the cached value.</text>
    </javadoc>
    <declaration type="double" name="cachedNormalDeviate" />
    <javadoc>
      <text>* Construct a RandomGenerator.</text>
    </javadoc>
    <method type="constructor" name="AbstractRandomGenerator" startLine="50" endLine="53" />
    <javadoc>
      <text>* Clears the cache used by the default implementation of{@link #nextGaussian}. Implementations that do not override the
 * default implementation of {@code nextGaussian} should call this
 * method in the implementation of {@link #setSeed(long)}</text>
    </javadoc>
    <method type="void" name="clear" startLine="61" endLine="63" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setSeed" startLine="66" endLine="68" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setSeed" startLine="71" endLine="80">
      <declaration type="long" name="prime" />
      <declaration type="long" name="combined" />
      <scope startLine="76" endLine="78" />
      <comment>the following number is the largest prime that fits in 32 bits (it is 2^32 - 5)</comment>
    </method>
    <method name="setSeed" type="void" startLine="82" endLine="93" />
    <javadoc>
      <text>* Sets the seed of the underlying random number generator using a{@code long} seed.  Sequences of values generated starting with the
 * same seeds should be identical.
 * <p>
 * Implementations that do not override the default implementation of{@code nextGaussian} should include a call to {@link #clear} in the
 * implementation of this method.</p></text>
      <param>seed the seed value</param>
    </javadoc>
    <javadoc>
      <text>* Generates random bytes and places them into a user-supplied
 * byte array.  The number of random bytes produced is equal to
 * the length of the byte array.
 * <p>
 * The default implementation fills the array with bytes extracted from
 * random integers generated using {@link #nextInt}.</p></text>
      <param>bytes the non-null byte array in which to put the
 * random bytes</param>
    </javadoc>
    <method type="void" name="nextBytes" startLine="106" endLine="120">
      <declaration type="int" name="bytesOut" />
      <scope startLine="108" endLine="119">
        <declaration type="int" name="randInt" />
        <scope startLine="110" endLine="118">
          <scope startLine="111" endLine="113" />
          <scope startLine="115" endLine="117" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the next pseudorandom, uniformly distributed {@code int}value from this random number generator's sequence.
 * All 2<font size="-1"><sup>32</sup></font> possible {@code int} values
 * should be produced with  (approximately) equal probability.
 * <p>
 * The default implementation provided here returns
 * <pre>
 * <code>(int) (nextDouble() * Integer.MAX_VALUE)</code>
 * </pre></p></text>
      <return>the next pseudorandom, uniformly distributed {@code int}value from this random number generator's sequence</return>
    </javadoc>
    <method type="int" name="nextInt" startLine="136" endLine="138" />
    <javadoc>
      <text>* Returns a pseudorandom, uniformly distributed {@code int} value
 * between 0 (inclusive) and the specified value (exclusive), drawn from
 * this random number generator's sequence.
 * <p>
 * The default implementation returns
 * <pre>
 * <code>(int) (nextDouble() * n</code>
 * </pre></p></text>
      <param>n the bound on the random number to be returned.  Must be
 * positive.</param>
      <return>a pseudorandom, uniformly distributed {@code int}value between 0 (inclusive) and n (exclusive).</return>
      <throws>NotStrictlyPositiveException if {@code n <= 0}.</throws>
    </javadoc>
    <method type="int" name="nextInt" startLine="156" endLine="162">
      <scope startLine="157" endLine="159" />
      <declaration type="int" name="result" />
    </method>
    <javadoc>
      <text>* Returns the next pseudorandom, uniformly distributed {@code long}value from this random number generator's sequence.  All
 * 2<font size="-1"><sup>64</sup></font> possible {@code long} values
 * should be produced with (approximately) equal probability.
 * <p>
 * The default implementation returns
 * <pre>
 * <code>(long) (nextDouble() * Long.MAX_VALUE)</code>
 * </pre></p></text>
      <return>the next pseudorandom, uniformly distributed {@code long}value from this random number generator's sequence</return>
    </javadoc>
    <method type="long" name="nextLong" startLine="178" endLine="180" />
    <javadoc>
      <text>* Returns the next pseudorandom, uniformly distributed{@code boolean} value from this random number generator's
 * sequence.
 * <p>
 * The default implementation returns
 * <pre>
 * <code>nextDouble() <= 0.5</code>
 * </pre></p></text>
      <return>the next pseudorandom, uniformly distributed{@code boolean} value from this random number generator's
 * sequence</return>
    </javadoc>
    <method type="boolean" name="nextBoolean" startLine="196" endLine="198" />
    <javadoc>
      <text>* Returns the next pseudorandom, uniformly distributed {@code float}value between {@code 0.0} and {@code 1.0} from this random
 * number generator's sequence.
 * <p>
 * The default implementation returns
 * <pre>
 * <code>(float) nextDouble() </code>
 * </pre></p></text>
      <return>the next pseudorandom, uniformly distributed {@code float}value between {@code 0.0} and {@code 1.0} from this
 * random number generator's sequence</return>
    </javadoc>
    <method type="float" name="nextFloat" startLine="214" endLine="216" />
    <method name="nextDouble" type="double" startLine="218" endLine="230" />
    <javadoc>
      <text>* Returns the next pseudorandom, uniformly distributed{@code double} value between {@code 0.0} and{@code 1.0} from this random number generator's sequence.
 * <p>
 * This method provides the underlying source of random data used by the
 * other methods.</p></text>
      <return>the next pseudorandom, uniformly distributed{@code double} value between {@code 0.0} and{@code 1.0} from this random number generator's sequence</return>
    </javadoc>
    <javadoc>
      <text>* Returns the next pseudorandom, Gaussian ("normally") distributed{@code double} value with mean {@code 0.0} and standard
 * deviation {@code 1.0} from this random number generator's sequence.
 * <p>
 * The default implementation uses the <em>Polar Method</em>
 * due to G.E.P. Box, M.E. Muller and G. Marsaglia, as described in
 * D. Knuth, <u>The Art of Computer Programming</u>, 3.4.1C.</p>
 * <p>
 * The algorithm generates a pair of independent random values.  One of
 * these is cached for reuse, so the full algorithm is not executed on each
 * activation.  Implementations that do not override this method should
 * make sure to call {@link #clear} to clear the cached value in the
 * implementation of {@link #setSeed(long)}.</p></text>
      <return>the next pseudorandom, Gaussian ("normally") distributed{@code double} value with mean {@code 0.0} and
 * standard deviation {@code 1.0} from this random number
 * generator's sequence</return>
    </javadoc>
    <method type="double" name="nextGaussian" startLine="252" endLine="271">
      <scope startLine="253" endLine="257">
        <declaration type="double" name="dev" />
      </scope>
      <declaration type="double" name="v1" />
      <declaration type="double" name="v2" />
      <declaration type="double" name="s" />
      <scope startLine="261" endLine="265" />
      <scope startLine="266" endLine="268" />
    </method>
  </class>
</source>
