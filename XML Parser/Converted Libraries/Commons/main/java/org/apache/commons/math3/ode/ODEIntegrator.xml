<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.ode">
  <import name="java.util.Collection" />
  <import name="org.apache.commons.math3.analysis.solvers.UnivariateSolver" />
  <import name="org.apache.commons.math3.ode.events.EventHandler" />
  <import name="org.apache.commons.math3.ode.sampling.StepHandler" />
  <interface name="ODEIntegrator" startLine="26">
    <javadoc>
      <text>* This interface defines the common parts shared by integrators
 * for first and second order differential equations.</text>
      <see>FirstOrderIntegrator</see>
      <see>SecondOrderIntegrator</see>
      <version>$Id: ODEIntegrator.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>2.0</since>
    </javadoc>
    <method name="getName" type="String" startLine="36" endLine="39" />
    <javadoc>
      <text>* Get the name of the method.</text>
      <return>name of the method</return>
    </javadoc>
    <method name="addStepHandler" type="void" startLine="41" endLine="49" />
    <javadoc>
      <text>* Add a step handler to this integrator.
 * <p>The handler will be called by the integrator for each accepted
 * step.</p></text>
      <param>handler handler for the accepted steps</param>
      <see>#getStepHandlers()</see>
      <see>#clearStepHandlers()</see>
      <since>2.0</since>
    </javadoc>
    <method name="getStepHandlers" type="Collection<StepHandler>" startLine="51" endLine="57" />
    <javadoc>
      <text>* Get all the step handlers that have been added to the integrator.</text>
      <return>an unmodifiable collection of the added events handlers</return>
      <see>#addStepHandler(StepHandler)</see>
      <see>#clearStepHandlers()</see>
      <since>2.0</since>
    </javadoc>
    <method name="clearStepHandlers" type="void" startLine="59" endLine="64" />
    <javadoc>
      <text>* Remove all the step handlers that have been added to the integrator.</text>
      <see>#addStepHandler(StepHandler)</see>
      <see>#getStepHandlers()</see>
      <since>2.0</since>
    </javadoc>
    <method name="addEventHandler" type="void" startLine="66" endLine="81" />
    <javadoc>
      <text>* Add an event handler to the integrator.
 * Uses a default {@link UnivariateSolver}with an absolute accuracy equal to the given convergence threshold,
 * as root-finding algorithm to detect the state events.</text>
      <param>handler event handler</param>
      <param>maxCheckInterval maximal time interval between switching
 * function checks (this interval prevents missing sign changes in
 * case the integration steps becomes very large)</param>
      <param>convergence convergence threshold in the event time search</param>
      <param>maxIterationCount upper limit of the iteration count in
 * the event time search</param>
      <see>#getEventHandlers()</see>
      <see>#clearEventHandlers()</see>
    </javadoc>
    <method name="addEventHandler" type="void" startLine="83" endLine="98" />
    <javadoc>
      <text>* Add an event handler to the integrator.</text>
      <param>handler event handler</param>
      <param>maxCheckInterval maximal time interval between switching
 * function checks (this interval prevents missing sign changes in
 * case the integration steps becomes very large)</param>
      <param>convergence convergence threshold in the event time search</param>
      <param>maxIterationCount upper limit of the iteration count in
 * the event time search</param>
      <param>solver The root-finding algorithm to use to detect the state
 * events.</param>
      <see>#getEventHandlers()</see>
      <see>#clearEventHandlers()</see>
    </javadoc>
    <method name="getEventHandlers" type="Collection<EventHandler>" startLine="100" endLine="105" />
    <javadoc>
      <text>* Get all the event handlers that have been added to the integrator.</text>
      <return>an unmodifiable collection of the added events handlers</return>
      <see>#addEventHandler(EventHandler,double,double,int)</see>
      <see>#clearEventHandlers()</see>
    </javadoc>
    <method name="clearEventHandlers" type="void" startLine="107" endLine="111" />
    <javadoc>
      <text>* Remove all the event handlers that have been added to the integrator.</text>
      <see>#addEventHandler(EventHandler,double,double,int)</see>
      <see>#getEventHandlers()</see>
    </javadoc>
    <method name="getCurrentStepStart" type="double" startLine="113" endLine="122" />
    <javadoc>
      <text>* Get the current value of the step start time t<sub>i</sub>.
 * <p>This method can be called during integration (typically by
 * the object implementing the {@link FirstOrderDifferentialEquationsdifferential equations} problem) if the value of the current step that
 * is attempted is needed.</p>
 * <p>The result is undefined if the method is called outside of
 * calls to <code>integrate</code>.</p></text>
      <return>current value of the step start time t<sub>i</sub></return>
    </javadoc>
    <method name="getCurrentSignedStepsize" type="double" startLine="124" endLine="133" />
    <javadoc>
      <text>* Get the current signed value of the integration stepsize.
 * <p>This method can be called during integration (typically by
 * the object implementing the {@link FirstOrderDifferentialEquationsdifferential equations} problem) if the signed value of the current stepsize
 * that is tried is needed.</p>
 * <p>The result is undefined if the method is called outside of
 * calls to <code>integrate</code>.</p></text>
      <return>current signed value of the stepsize</return>
    </javadoc>
    <method name="setMaxEvaluations" type="void" startLine="135" endLine="143" />
    <javadoc>
      <text>* Set the maximal number of differential equations function evaluations.
 * <p>The purpose of this method is to avoid infinite loops which can occur
 * for example when stringent error constraints are set or when lots of
 * discrete events are triggered, thus leading to many rejected steps.</p></text>
      <param>maxEvaluations maximal number of function evaluations (negative
 * values are silently converted to maximal integer value, thus representing
 * almost unlimited evaluations)</param>
    </javadoc>
    <method name="getMaxEvaluations" type="int" startLine="145" endLine="148" />
    <javadoc>
      <text>* Get the maximal number of functions evaluations.</text>
      <return>maximal number of functions evaluations</return>
    </javadoc>
    <method name="getEvaluations" type="int" startLine="150" endLine="157" />
    <javadoc>
      <text>* Get the number of evaluations of the differential equations function.
 * <p>
 * The number of evaluations corresponds to the last call to the
 * <code>integrate</code> method. It is 0 if the method has not been called yet.
 * </p></text>
      <return>number of evaluations of the differential equations function</return>
    </javadoc>
  </interface>
</source>
