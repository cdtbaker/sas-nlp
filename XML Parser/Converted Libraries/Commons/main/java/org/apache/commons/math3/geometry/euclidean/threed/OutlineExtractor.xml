<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.geometry.euclidean.threed">
  <import name="java.util.ArrayList" />
  <import name="org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D" />
  <import name="org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet" />
  <import name="org.apache.commons.math3.geometry.euclidean.twod.Vector2D" />
  <import name="org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane" />
  <import name="org.apache.commons.math3.geometry.partitioning.BSPTree" />
  <import name="org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor" />
  <import name="org.apache.commons.math3.geometry.partitioning.BoundaryAttribute" />
  <import name="org.apache.commons.math3.geometry.partitioning.RegionFactory" />
  <import name="org.apache.commons.math3.geometry.partitioning.SubHyperplane" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="OutlineExtractor" startLine="32">
    <javadoc>
      <text>* Extractor for {@link PolygonsSet polyhedrons sets} outlines.
 * <p>This class extracts the 2D outlines from {{@link PolygonsSetpolyhedrons sets} in a specified projection plane.</p></text>
      <version>$Id: OutlineExtractor.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Abscissa axis of the projection plane.</text>
    </javadoc>
    <declaration type="Vector3D" name="u" />
    <javadoc>
      <text>* Ordinate axis of the projection plane.</text>
    </javadoc>
    <declaration type="Vector3D" name="v" />
    <javadoc>
      <text>* Normal of the projection plane (viewing direction).</text>
    </javadoc>
    <declaration type="Vector3D" name="w" />
    <javadoc>
      <text>* Build an extractor for a specific projection plane.</text>
      <param>u abscissa axis of the projection point</param>
      <param>v ordinate axis of the projection point</param>
    </javadoc>
    <method type="constructor" name="OutlineExtractor" startLine="53" endLine="57" />
    <javadoc>
      <text>* Extract the outline of a polyhedrons set.</text>
      <param>polyhedronsSet polyhedrons set whose outline must be extracted</param>
      <return>an outline, as an array of loops.</return>
    </javadoc>
    <method type="Vector2D[][]" name="getOutline" startLine="63" endLine="97">
      <declaration type="BoundaryProjector" name="projector" />
      <declaration type="PolygonsSet" name="projected" />
      <declaration type="Vector2D[][]" name="outline" />
      <scope startLine="72" endLine="93">
        <declaration type="Vector2D[]" name="rawLoop" />
        <declaration type="int" name="end" />
        <declaration type="int" name="j" />
        <scope startLine="76" endLine="87">
          <scope startLine="77" endLine="83">
            <scope startLine="79" endLine="81" />
          </scope>
          <scope startLine="83" endLine="86" />
        </scope>
        <scope startLine="88" endLine="92" />
        <comment>the point should be removed</comment>
        <comment>the point remains in the loop</comment>
        <comment>resize the array</comment>
      </scope>
      <comment>project all boundary facets into one polygons set</comment>
      <comment>Remove the spurious intermediate vertices from the outline</comment>
    </method>
    <javadoc>
      <text>* Check if a point is geometrically between its neighbour in an array.
 * <p>The neighbours are computed considering the array is a loop
 * (i.e. point at index (n-1) is before point at index 0)</p></text>
      <param>loop points array</param>
      <param>n number of points to consider in the array</param>
      <param>i index of the point to check (must be between 0 and n-1)</param>
      <return>true if the point is exactly between its neighbours</return>
    </javadoc>
    <method type="boolean" name="pointIsBetween" startLine="107" endLine="119">
      <declaration type="Vector2D" name="previous" />
      <declaration type="Vector2D" name="current" />
      <declaration type="Vector2D" name="next" />
      <declaration type="double" name="dx1" />
      <declaration type="double" name="dy1" />
      <declaration type="double" name="dx2" />
      <declaration type="double" name="dy2" />
      <declaration type="double" name="cross" />
      <declaration type="double" name="dot" />
      <declaration type="double" name="d1d2" />
    </method>
    <class name="BoundaryProjector" startLine="121">
      <implements name="BSPTreeVisitor<Euclidean3D>" />
      <javadoc>
        <text>* Visitor projecting the boundary facets on a plane.</text>
      </javadoc>
      <javadoc>
        <text>* Projection of the polyhedrons set on the plane.</text>
      </javadoc>
      <declaration type="PolygonsSet" name="projected" />
      <javadoc>
        <text>* Simple constructor.</text>
      </javadoc>
      <method type="constructor" name="BoundaryProjector" startLine="129" endLine="131" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="Order" name="visitOrder" startLine="134" endLine="136" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="void" name="visitInternalNode" startLine="139" endLine="149">
        <declaration type="BoundaryAttribute<Euclidean3D>" name="attribute" />
        <scope startLine="143" endLine="145" />
        <scope startLine="146" endLine="148" />
      </method>
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="void" name="visitLeafNode" startLine="152" endLine="153" />
      <javadoc>
        <text>* Add he contribution of a boundary facet.</text>
        <param>facet boundary facet</param>
        <param>reversed if true, the facet has the inside on its plus side</param>
      </javadoc>
      <method type="void" name="addContribution" startLine="159" endLine="247">
        <declaration type="AbstractSubHyperplane<Euclidean3D,Euclidean2D>" name="absFacet" />
        <declaration type="Plane" name="plane" />
        <declaration type="double" name="scal" />
        <scope startLine="168" endLine="246">
          <declaration type="Vector2D[][]" name="vertices" />
          <scope startLine="172" endLine="195">
            <declaration type="Vector2D[][][]" name="newVertices" />
            <scope startLine="176" endLine="190">
              <declaration type="Vector2D[]" name="loop" />
              <declaration type="Vector2D[]" name="newLoop" />
              <scope startLine="179" endLine="184">
                <scope startLine="181" endLine="183" />
              </scope>
              <scope startLine="184" endLine="188">
                <scope startLine="185" endLine="187" />
              </scope>
            </scope>
          </scope>
          <declaration type="ArrayList<SubHyperplane<Euclidean2D>>" name="edges" />
          <scope startLine="199" endLine="240">
            <declaration type="boolean" name="closed" />
            <declaration type="int" name="previous" />
            <declaration type="Vector3D" name="previous3D" />
            <declaration type="int" name="current" />
            <declaration type="Vector2D" name="pPoint" />
            <scope startLine="206" endLine="239">
              <declaration type="Vector3D" name="current3D" />
              <declaration type="Vector2D" name="cPoint" />
              <declaration type="org.apache.commons.math3.geometry.euclidean.twod.Line" name="line" />
              <declaration type="SubHyperplane<Euclidean2D>" name="edge" />
              <scope startLine="215" endLine="222">
                <declaration type="double" name="angle" />
                <declaration type="org.apache.commons.math3.geometry.euclidean.twod.Line" name="l" />
              </scope>
              <scope startLine="224" endLine="231">
                <declaration type="double" name="angle" />
                <declaration type="org.apache.commons.math3.geometry.euclidean.twod.Line" name="l" />
              </scope>
            </scope>
          </scope>
          <declaration type="PolygonsSet" name="projectedFacet" />
          <comment>the facet is seen from the inside,</comment>
          <comment>we need to invert its boundary orientation</comment>
          <comment>use the reverted vertices</comment>
          <comment>compute the projection of the facet in the outline plane</comment>
          <comment>the previous point is a real vertex</comment>
          <comment>it defines one bounding point of the edge</comment>
          <comment>the current point is a real vertex</comment>
          <comment>it defines one bounding point of the edge</comment>
          <comment>add the contribution of the facet to the global outline</comment>
        </scope>
        <comment>extract the vertices of the facet</comment>
      </method>
      <javadoc>
        <text>* Get the projection of the polyhedrons set on the plane.</text>
        <return>projection of the polyhedrons set on the plane</return>
      </javadoc>
      <method type="PolygonsSet" name="getProjected" startLine="252" endLine="254" />
    </class>
  </class>
</source>
