<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.interpolation">
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.FieldElement" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.exception.NoDataException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.ZeroException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="FieldHermiteInterpolator" startLine="32">
    <javadoc>
      <text>* Polynomial interpolator using both sample values and sample derivatives.
 * <p>
 * The interpolation polynomials match all sample points, including both values
 * and provided derivatives. There is one polynomial for each component of
 * the values vector. All polynomials have the same degree. The degree of the
 * polynomials depends on the number of points and number of derivatives at each
 * point. For example the interpolation polynomials for n sample points without
 * any derivatives all have degree n-1. The interpolation polynomials for n
 * sample points with the two extreme points having value and first derivative
 * and the remaining points having value only all have degree n+1. The
 * interpolation polynomial for n sample points with value, first and second
 * derivative for all points all have degree 3n-1.
 * </p></text>
      <param><T>
 *  Type of the field elements.</param>
      <version>$Id: FieldHermiteInterpolator.java 1455194 2013-03-11 15:45:54Z luc $</version>
      <since>3.2</since>
    </javadoc>
    <javadoc>
      <text>* Sample abscissae.</text>
    </javadoc>
    <declaration type="List<T>" name="abscissae" />
    <javadoc>
      <text>* Top diagonal of the divided differences array.</text>
    </javadoc>
    <declaration type="List<T[]>" name="topDiagonal" />
    <javadoc>
      <text>* Bottom diagonal of the divided differences array.</text>
    </javadoc>
    <declaration type="List<T[]>" name="bottomDiagonal" />
    <javadoc>
      <text>* Create an empty interpolator.</text>
    </javadoc>
    <method type="constructor" name="FieldHermiteInterpolator" startLine="64" endLine="68" />
    <javadoc>
      <text>* Add a sample point.
 * <p>
 * This method must be called once for each sample point. It is allowed to
 * mix some calls with values only with calls with values and first
 * derivatives.
 * </p>
 * <p>
 * The point abscissae for all calls <em>must</em> be different.
 * </p></text>
      <param>x abscissa of the sample point</param>
      <param>value value and derivatives of the sample point
 * (if only one row is passed, it is the value, if two rows are
 * passed the first one is the value and the second the derivative
 * and so on)</param>
      <exception>ZeroException if the abscissa difference between added point
 * and a previous point is zero (i.e. the two points are at same abscissa)</exception>
      <exception>MathArithmeticException if the number of derivatives is larger
 * than 20, which prevents computation of a factorial</exception>
      <throws>DimensionMismatchException if derivative structures are inconsistent</throws>
      <throws>NullArgumentException if x is null</throws>
    </javadoc>
    <method type="void" name="addSamplePoint" startLine="93" endLine="132">
      <declaration type="T" name="factorial" />
      <scope startLine="97" endLine="130">
        <declaration type="T[]" name="y" />
        <scope startLine="100" endLine="106">
          <declaration type="T" name="inv" />
          <scope startLine="103" endLine="105" />
        </scope>
        <declaration type="int" name="n" />
        <declaration type="T[]" name="bottom0" />
        <scope startLine="112" endLine="122">
          <declaration type="T[]" name="bottom1" />
          <scope startLine="114" endLine="116" />
          <declaration type="T" name="inv" />
          <scope startLine="118" endLine="120" />
        </scope>
        <comment>update the bottom diagonal of the divided differences array</comment>
        <comment>update the top diagonal of the divided differences array</comment>
        <comment>update the abscissae array</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Interpolate value at a specified abscissa.</text>
      <param>x interpolation abscissa</param>
      <return>interpolated value</return>
      <exception>NoDataException if sample is empty</exception>
      <throws>NullArgumentException if x is null</throws>
    </javadoc>
    <method type="T[]" name="value" startLine="140" endLine="161">
      <scope startLine="144" endLine="146" />
      <declaration type="T[]" name="value" />
      <declaration type="T" name="valueCoeff" />
      <scope startLine="150" endLine="157">
        <declaration type="T[]" name="dividedDifference" />
        <scope startLine="152" endLine="154" />
        <declaration type="T" name="deltaX" />
      </scope>
      <comment>safety check</comment>
    </method>
    <javadoc>
      <text>* Interpolate value and first derivatives at a specified abscissa.</text>
      <param>x interpolation abscissa</param>
      <param>order maximum derivation order</param>
      <return>interpolated value and derivatives (value in row 0,
 * 1<sup>st</sup> derivative in row 1, ... n<sup>th</sup> derivative in row n)</return>
      <exception>NoDataException if sample is empty</exception>
      <throws>NullArgumentException if x is null</throws>
    </javadoc>
    <method type="T[][]" name="derivatives" startLine="171" endLine="208">
      <scope startLine="175" endLine="177" />
      <declaration type="T" name="zero" />
      <declaration type="T" name="one" />
      <declaration type="T[]" name="tj" />
      <scope startLine="183" endLine="185" />
      <declaration type="T[][]" name="derivatives" />
      <declaration type="T[]" name="valueCoeff" />
      <scope startLine="191" endLine="204">
        <declaration type="T[]" name="dividedDifference" />
        <declaration type="T" name="deltaX" />
        <scope startLine="194" endLine="203">
          <scope startLine="195" endLine="198" />
          <scope startLine="200" endLine="202" />
        </scope>
      </scope>
      <comment>safety check</comment>
    </method>
  </class>
</source>
