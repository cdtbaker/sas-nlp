<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.polynomials">
  <import name="java.io.Serializable" />
  <import name="java.util.Arrays" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.exception.NoDataException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.analysis.DifferentiableUnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.ParametricUnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.differentiation.DerivativeStructure" />
  <import name="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="PolynomialFunction" startLine="33">
    <implements name="UnivariateDifferentiableFunction" />
    <implements name="DifferentiableUnivariateFunction" />
    <implements name="Serializable" />
    <javadoc>
      <text>* Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href="http://mathworld.wolfram.com/HornersMethod.html">Horner's Method</a>
 * is used to evaluate the function.</p></text>
      <version>$Id: PolynomialFunction.java 1455194 2013-03-11 15:45:54Z luc $</version>
    </javadoc>
    <javadoc>
      <text>* Serialization identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* The coefficients of the polynomial, ordered by degree -- i.e.,
 * coefficients[0] is the constant term and coefficients[n] is the
 * coefficient of x^n where n is the degree of the polynomial.</text>
    </javadoc>
    <declaration type="double" name="coefficients" />
    <javadoc>
      <text>* Construct a polynomial with the given coefficients.  The first element
 * of the coefficients array is the constant term.  Higher degree
 * coefficients follow in sequence.  The degree of the resulting polynomial
 * is the index of the last non-null element of the array, or 0 if all elements
 * are null.
 * <p>
 * The constructor makes a copy of the input array and assigns the copy to
 * the coefficients property.</p></text>
      <param>c Polynomial coefficients.</param>
      <throws>NullArgumentException if {@code c} is {@code null}.</throws>
      <throws>NoDataException if {@code c} is empty.</throws>
    </javadoc>
    <method type="constructor" name="PolynomialFunction" startLine="68" endLine="80">
      <declaration type="int" name="n" />
      <scope startLine="72" endLine="74" />
      <scope startLine="75" endLine="77" />
    </method>
    <javadoc>
      <text>* Compute the value of the function for the given argument.
 * <p>
 * The value returned is <br/>
 * <code>coefficients[n] * x^n + ... + coefficients[1] * x  + coefficients[0]</code>
 * </p></text>
      <param>x Argument for which the function value should be computed.</param>
      <return>the value of the polynomial at the given point.</return>
      <see>UnivariateFunction#value(double)</see>
    </javadoc>
    <method type="double" name="value" startLine="93" endLine="95" />
    <javadoc>
      <text>* Returns the degree of the polynomial.</text>
      <return>the degree of the polynomial.</return>
    </javadoc>
    <method type="int" name="degree" startLine="102" endLine="104" />
    <javadoc>
      <text>* Returns a copy of the coefficients array.
 * <p>
 * Changes made to the returned copy will not affect the coefficients of
 * the polynomial.</p></text>
      <return>a fresh copy of the coefficients array.</return>
    </javadoc>
    <method type="double[]" name="getCoefficients" startLine="114" endLine="116" />
    <javadoc>
      <text>* Uses Horner's Method to evaluate the polynomial with the given coefficients at
 * the argument.</text>
      <param>coefficients Coefficients of the polynomial to evaluate.</param>
      <param>argument Input value.</param>
      <return>the value of the polynomial.</return>
      <throws>NoDataException if {@code coefficients} is empty.</throws>
      <throws>NullArgumentException if {@code coefficients} is {@code null}.</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="129" endLine="140">
      <declaration type="int" name="n" />
      <scope startLine="132" endLine="134" />
      <declaration type="double" name="result" />
      <scope startLine="136" endLine="138" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.1</since>
      <throws>NoDataException if {@code coefficients} is empty.</throws>
      <throws>NullArgumentException if {@code coefficients} is {@code null}.</throws>
    </javadoc>
    <method type="DerivativeStructure" name="value" startLine="149" endLine="161">
      <declaration type="int" name="n" />
      <scope startLine="152" endLine="154" />
      <declaration type="DerivativeStructure" name="result" />
      <scope startLine="157" endLine="159" />
    </method>
    <javadoc>
      <text>* Add a polynomial to the instance.</text>
      <param>p Polynomial to add.</param>
      <return>a new polynomial which is the sum of the instance and {@code p}.</return>
    </javadoc>
    <method type="PolynomialFunction" name="add" startLine="169" endLine="186">
      <declaration type="int" name="lowLength" />
      <declaration type="int" name="highLength" />
      <declaration type="double[]" name="newCoefficients" />
      <scope startLine="176" endLine="178" />
      <comment>identify the lowest degree polynomial</comment>
      <comment>build the coefficients array</comment>
    </method>
    <javadoc>
      <text>* Subtract a polynomial from the instance.</text>
      <param>p Polynomial to subtract.</param>
      <return>a new polynomial which is the difference the instance minus {@code p}.</return>
    </javadoc>
    <method type="PolynomialFunction" name="subtract" startLine="194" endLine="214">
      <declaration type="int" name="lowLength" />
      <declaration type="int" name="highLength" />
      <declaration type="double[]" name="newCoefficients" />
      <scope startLine="201" endLine="203" />
      <scope startLine="204" endLine="208">
        <scope startLine="205" endLine="207" />
      </scope>
      <scope startLine="208" endLine="211" />
      <comment>identify the lowest degree polynomial</comment>
      <comment>build the coefficients array</comment>
    </method>
    <javadoc>
      <text>* Negate the instance.</text>
      <return>a new polynomial.</return>
    </javadoc>
    <method type="PolynomialFunction" name="negate" startLine="221" endLine="227">
      <declaration type="double[]" name="newCoefficients" />
      <scope startLine="223" endLine="225" />
    </method>
    <javadoc>
      <text>* Multiply the instance by a polynomial.</text>
      <param>p Polynomial to multiply by.</param>
      <return>a new polynomial.</return>
    </javadoc>
    <method type="PolynomialFunction" name="multiply" startLine="235" endLine="248">
      <declaration type="double[]" name="newCoefficients" />
      <scope startLine="238" endLine="245">
        <scope startLine="242" endLine="244" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the coefficients of the derivative of the polynomial with the given coefficients.</text>
      <param>coefficients Coefficients of the polynomial to differentiate.</param>
      <return>the coefficients of the derivative or {@code null} if coefficients has length 1.</return>
      <throws>NoDataException if {@code coefficients} is empty.</throws>
      <throws>NullArgumentException if {@code coefficients} is {@code null}.</throws>
    </javadoc>
    <method type="double[]" name="differentiate" startLine="259" endLine="273">
      <declaration type="int" name="n" />
      <scope startLine="262" endLine="264" />
      <scope startLine="265" endLine="267" />
      <declaration type="double[]" name="result" />
      <scope startLine="269" endLine="271" />
    </method>
    <javadoc>
      <text>* Returns the derivative as a {@link PolynomialFunction}.</text>
      <return>the derivative polynomial.</return>
    </javadoc>
    <method type="PolynomialFunction" name="polynomialDerivative" startLine="280" endLine="282" />
    <javadoc>
      <text>* Returns the derivative as a {@link UnivariateFunction}.</text>
      <return>the derivative function.</return>
    </javadoc>
    <method type="UnivariateFunction" name="derivative" startLine="289" endLine="291" />
    <javadoc>
      <text>* Returns a string representation of the polynomial.
 * <p>The representation is user oriented. Terms are displayed lowest
 * degrees first. The multiplications signs, coefficients equals to
 * one and null terms are not displayed (except if the polynomial is 0,
 * in which case the 0 constant term is displayed). Addition of terms
 * with negative coefficients are replaced by subtraction of terms
 * with positive coefficients except for the first displayed term
 * (i.e. we display <code>-3</code> for a constant negative polynomial,
 * but <code>1 - 3 x + x^2</code> if the negative coefficient is not
 * the first one displayed).</p></text>
      <return>a string representation of the polynomial.</return>
    </javadoc>
    <method type="String" name="toString" startLine="309" endLine="348">
      <declaration type="StringBuilder" name="s" />
      <scope startLine="311" endLine="315">
        <scope startLine="312" endLine="314" />
      </scope>
      <scope startLine="315" endLine="317" />
      <scope startLine="319" endLine="345">
        <scope startLine="320" endLine="344">
          <scope startLine="321" endLine="327">
            <scope startLine="322" endLine="324" />
            <scope startLine="324" endLine="326" />
          </scope>
          <scope startLine="327" endLine="331">
            <scope startLine="328" endLine="330" />
          </scope>
          <declaration type="double" name="absAi" />
          <scope startLine="334" endLine="337" />
          <scope startLine="340" endLine="343" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Creates a string representing a coefficient, removing ".0" endings.</text>
      <param>coeff Coefficient.</param>
      <return>a string representation of {@code coeff}.</return>
    </javadoc>
    <method type="String" name="toString" startLine="356" endLine="363">
      <declaration type="String" name="c" />
      <scope startLine="358" endLine="360" />
      <scope startLine="360" endLine="362" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="hashCode" startLine="367" endLine="372">
      <declaration type="int" name="prime" />
      <declaration type="int" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="equals" startLine="376" endLine="388">
      <scope startLine="377" endLine="379" />
      <scope startLine="380" endLine="382" />
      <declaration type="PolynomialFunction" name="other" />
      <scope startLine="384" endLine="386" />
    </method>
    <class name="Parametric" startLine="390">
      <implements name="ParametricUnivariateFunction" />
      <javadoc>
        <text>* Dedicated parametric polynomial class.</text>
        <since>3.0</since>
      </javadoc>
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double[]" name="gradient" startLine="397" endLine="405">
        <declaration type="double[]" name="gradient" />
        <declaration type="double" name="xn" />
        <scope startLine="400" endLine="403" />
      </method>
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value" startLine="409" endLine="411" />
    </class>
  </class>
</source>
