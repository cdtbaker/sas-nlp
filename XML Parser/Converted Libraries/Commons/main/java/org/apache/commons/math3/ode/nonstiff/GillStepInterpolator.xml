<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.ode.nonstiff">
  <import name="org.apache.commons.math3.ode.sampling.StepInterpolator" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="GillStepInterpolator" extends="RungeKuttaStepInterpolator" startLine="23">
    <javadoc>
      <text>* This class implements a step interpolator for the Gill fourth
 * order Runge-Kutta integrator.
 * <p>This interpolator allows to compute dense output inside the last
 * step computed. The interpolation equation is consistent with the
 * integration scheme :
 * <ul>
 * <li>Using reference point at step start:<br>
 * y(t<sub>n</sub> + &theta; h) = y (t<sub>n</sub>)
 * + &theta; (h/6) [ (6 - 9 &theta; + 4 &theta;<sup>2</sup>) y'<sub>1</sub>
 * + (    6 &theta; - 4 &theta;<sup>2</sup>) ((1-1/&radic;2) y'<sub>2</sub> + (1+1/&radic;2)) y'<sub>3</sub>)
 * + (  - 3 &theta; + 4 &theta;<sup>2</sup>) y'<sub>4</sub>
 * ]
 * </li>
 * <li>Using reference point at step start:<br>
 * y(t<sub>n</sub> + &theta; h) = y (t<sub>n</sub> + h)
 * - (1 - &theta;) (h/6) [ (1 - 5 &theta; + 4 &theta;<sup>2</sup>) y'<sub>1</sub>
 * + (2 + 2 &theta; - 4 &theta;<sup>2</sup>) ((1-1/&radic;2) y'<sub>2</sub> + (1+1/&radic;2)) y'<sub>3</sub>)
 * + (1 +   &theta; + 4 &theta;<sup>2</sup>) y'<sub>4</sub>
 * ]
 * </li>
 * </ul>
 * </p>
 * where &theta; belongs to [0 ; 1] and where y'<sub>1</sub> to y'<sub>4</sub>
 * are the four evaluations of the derivatives already computed during
 * the step.</p></text>
      <see>GillIntegrator</see>
      <version>$Id: GillStepInterpolator.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>1.2</since>
    </javadoc>
    <javadoc>
      <text>* First Gill coefficient.</text>
    </javadoc>
    <declaration type="double" name="ONE_MINUS_INV_SQRT_2" />
    <javadoc>
      <text>* Second Gill coefficient.</text>
    </javadoc>
    <declaration type="double" name="ONE_PLUS_INV_SQRT_2" />
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Simple constructor.
 * This constructor builds an instance that is not usable yet, the{@link org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#reinitialize}method should be called before using the instance in order to
 * initialize the internal arrays. This constructor is used only
 * in order to delay the initialization in some cases. The {@link RungeKuttaIntegrator} class uses the prototyping design pattern
 * to create the step interpolators by cloning an uninitialized model
 * and later initializing the copy.</text>
    </javadoc>
    <method type="constructor" name="GillStepInterpolator" startLine="79" endLine="80" />
    <javadoc>
      <text>* Copy constructor.</text>
      <param>interpolator interpolator to copy from. The copy is a deep
 * copy: its arrays are separated from the original arrays of the
 * instance</param>
    </javadoc>
    <method type="constructor" name="GillStepInterpolator" startLine="87" endLine="89" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="StepInterpolator" name="doCopy" startLine="93" endLine="95" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="computeInterpolatedStateAndDerivatives" startLine="101" endLine="147">
      <declaration type="double" name="twoTheta" />
      <declaration type="double" name="fourTheta2" />
      <declaration type="double" name="coeffDot1" />
      <declaration type="double" name="cDot23" />
      <declaration type="double" name="coeffDot2" />
      <declaration type="double" name="coeffDot3" />
      <declaration type="double" name="coeffDot4" />
      <scope startLine="111" endLine="128">
        <declaration type="double" name="s" />
        <declaration type="double" name="c23" />
        <declaration type="double" name="coeff1" />
        <declaration type="double" name="coeff2" />
        <declaration type="double" name="coeff3" />
        <declaration type="double" name="coeff4" />
        <scope startLine="118" endLine="127">
          <declaration type="double" name="yDot1" />
          <declaration type="double" name="yDot2" />
          <declaration type="double" name="yDot3" />
          <declaration type="double" name="yDot4" />
        </scope>
      </scope>
      <scope startLine="128" endLine="145">
        <declaration type="double" name="s" />
        <declaration type="double" name="c23" />
        <declaration type="double" name="coeff1" />
        <declaration type="double" name="coeff2" />
        <declaration type="double" name="coeff3" />
        <declaration type="double" name="coeff4" />
        <scope startLine="135" endLine="144">
          <declaration type="double" name="yDot1" />
          <declaration type="double" name="yDot2" />
          <declaration type="double" name="yDot3" />
          <declaration type="double" name="yDot4" />
        </scope>
      </scope>
    </method>
  </class>
</source>
