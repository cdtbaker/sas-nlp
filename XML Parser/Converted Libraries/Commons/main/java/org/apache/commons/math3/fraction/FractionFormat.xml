<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.fraction">
  <import name="java.text.FieldPosition" />
  <import name="java.text.NumberFormat" />
  <import name="java.text.ParsePosition" />
  <import name="java.util.Locale" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.MathParseException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <class name="FractionFormat" extends="AbstractFormat" startLine="29">
    <javadoc>
      <text>* Formats a Fraction number in proper format or improper format.  The number
 * format for each of the whole number, numerator and, denominator can be
 * configured.</text>
      <since>1.1</since>
      <version>$Id: FractionFormat.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Create an improper formatting instance with the default number format
 * for the numerator and denominator.</text>
    </javadoc>
    <method type="constructor" name="FractionFormat" startLine="46" endLine="47" />
    <javadoc>
      <text>* Create an improper formatting instance with a custom number format for
 * both the numerator and denominator.</text>
      <param>format the custom format for both the numerator and denominator.</param>
    </javadoc>
    <method type="constructor" name="FractionFormat" startLine="54" endLine="56" />
    <javadoc>
      <text>* Create an improper formatting instance with a custom number format for
 * the numerator and a custom number format for the denominator.</text>
      <param>numeratorFormat the custom format for the numerator.</param>
      <param>denominatorFormat the custom format for the denominator.</param>
    </javadoc>
    <method type="constructor" name="FractionFormat" startLine="65" endLine="67" />
    <javadoc>
      <text>* Get the set of locales for which complex formats are available.  This
 * is the same set as the {@link NumberFormat} set.</text>
      <return>available complex format locales.</return>
    </javadoc>
    <method type="Locale[]" name="getAvailableLocales" startLine="74" endLine="76" />
    <javadoc>
      <text>* This static method calls formatFraction() on a default instance of
 * FractionFormat.</text>
      <param>f Fraction object to format</param>
      <return>a formatted fraction in proper form.</return>
    </javadoc>
    <method type="String" name="formatFraction" startLine="85" endLine="87" />
    <javadoc>
      <text>* Returns the default complex format for the current locale.</text>
      <return>the default complex format.</return>
    </javadoc>
    <method type="FractionFormat" name="getImproperInstance" startLine="93" endLine="95" />
    <javadoc>
      <text>* Returns the default complex format for the given locale.</text>
      <param>locale the specific locale used by the format.</param>
      <return>the complex format specific to the given locale.</return>
    </javadoc>
    <method type="FractionFormat" name="getImproperInstance" startLine="102" endLine="104" />
    <javadoc>
      <text>* Returns the default complex format for the current locale.</text>
      <return>the default complex format.</return>
    </javadoc>
    <method type="FractionFormat" name="getProperInstance" startLine="110" endLine="112" />
    <javadoc>
      <text>* Returns the default complex format for the given locale.</text>
      <param>locale the specific locale used by the format.</param>
      <return>the complex format specific to the given locale.</return>
    </javadoc>
    <method type="FractionFormat" name="getProperInstance" startLine="119" endLine="121" />
    <javadoc>
      <text>* Create a default number format.  The default number format is based on{@link NumberFormat#getNumberInstance(java.util.Locale)} with the only
 * customizing is the maximum number of fraction digits, which is set to 0.</text>
      <return>the default number format.</return>
    </javadoc>
    <method type="NumberFormat" name="getDefaultNumberFormat" startLine="129" endLine="131" />
    <javadoc>
      <text>* Formats a {@link Fraction} object to produce a string.  The fraction is
 * output in improper format.</text>
      <param>fraction the object to format.</param>
      <param>toAppendTo where the text is to be appended</param>
      <param>pos On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
      <return>the value passed in as toAppendTo.</return>
    </javadoc>
    <method type="StringBuffer" name="format" startLine="144" endLine="155" />
    <javadoc>
      <text>* Formats an object and appends the result to a StringBuffer. <code>obj</code> must be either a{@link Fraction} object or a {@link Number} object.  Any other type of
 * object will result in an {@link IllegalArgumentException} being thrown.</text>
      <param>obj the object to format.</param>
      <param>toAppendTo where the text is to be appended</param>
      <param>pos On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
      <return>the value passed in as toAppendTo.</return>
      <see>java.text.Format#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)</see>
      <throws>FractionConversionException if the number cannot be converted to a fraction</throws>
      <throws>MathIllegalArgumentException if <code>obj</code> is not a valid type.</throws>
    </javadoc>
    <method type="StringBuffer" name="format" startLine="174" endLine="186">
      <declaration type="StringBuffer" name="ret" />
      <scope startLine="177" endLine="179" />
      <scope startLine="179" endLine="181" />
      <scope startLine="181" endLine="183" />
    </method>
    <javadoc>
      <text>* Parses a string to produce a {@link Fraction} object.</text>
      <param>source the string to parse</param>
      <return>the parsed {@link Fraction} object.</return>
      <exception>MathParseException if the beginning of the specified string
 * cannot be parsed.</exception>
    </javadoc>
    <method type="Fraction" name="parse" startLine="196" endLine="203">
      <declaration type="ParsePosition" name="parsePosition" />
      <declaration type="Fraction" name="result" />
      <scope startLine="199" endLine="201" />
    </method>
    <javadoc>
      <text>* Parses a string to produce a {@link Fraction} object.  This method
 * expects the string to be formatted as an improper fraction.</text>
      <param>source the string to parse</param>
      <param>pos input/output parsing parameter.</param>
      <return>the parsed {@link Fraction} object.</return>
    </javadoc>
    <method type="Fraction" name="parse" startLine="213" endLine="263">
      <declaration type="int" name="initialIndex" />
      <declaration type="Number" name="num" />
      <scope startLine="221" endLine="227">
        <comment>invalid integer number</comment>
        <comment>set index back to initial, error index should already be set</comment>
        <comment>character examined.</comment>
      </scope>
      <declaration type="int" name="startIndex" />
      <declaration type="char" name="c" />
      <declaration type="Number" name="den" />
      <scope startLine="254" endLine="260">
        <comment>invalid integer number</comment>
        <comment>set index back to initial, error index should already be set</comment>
        <comment>character examined.</comment>
      </scope>
      <comment>parse whitespace</comment>
      <comment>parse numerator</comment>
      <comment>parse '/'</comment>
      <comment>no '/'</comment>
      <comment>return num as a fraction</comment>
      <comment>found '/', continue parsing denominator</comment>
      <comment>invalid '/'</comment>
      <comment>set index back to initial, error index should be the last</comment>
      <comment>character examined.</comment>
      <comment>parse whitespace</comment>
      <comment>parse denominator</comment>
    </method>
  </class>
</source>
