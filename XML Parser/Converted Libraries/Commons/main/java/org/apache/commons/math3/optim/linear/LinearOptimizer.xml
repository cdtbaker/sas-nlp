<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim.linear">
  <import name="java.util.Collection" />
  <import name="java.util.Collections" />
  <import name="org.apache.commons.math3.exception.TooManyIterationsException" />
  <import name="org.apache.commons.math3.optim.OptimizationData" />
  <import name="org.apache.commons.math3.optim.PointValuePair" />
  <import name="org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer" />
  <class name="LinearOptimizer" extends="MultivariateOptimizer" startLine="26">
    <javadoc>
      <text>* Base class for implementing linear optimizers.</text>
      <version>$Id: LinearOptimizer.java 1443444 2013-02-07 12:41:36Z erans $</version>
      <since>3.1</since>
    </javadoc>
    <javadoc>
      <text>* Linear objective function.</text>
    </javadoc>
    <declaration type="LinearObjectiveFunction" name="function" />
    <javadoc>
      <text>* Linear constraints.</text>
    </javadoc>
    <declaration type="Collection<LinearConstraint>" name="linearConstraints" />
    <javadoc>
      <text>* Whether to restrict the variables to non-negative values.</text>
    </javadoc>
    <declaration type="boolean" name="nonNegative" />
    <javadoc>
      <text>* Simple constructor with default settings.</text>
    </javadoc>
    <method type="constructor" name="LinearOptimizer" startLine="51" endLine="53">
      <comment>No convergence checker.</comment>
    </method>
    <javadoc>
      <return>{@code true} if the variables are restricted to non-negative values.</return>
    </javadoc>
    <method type="boolean" name="isRestrictedToNonNegative" startLine="58" endLine="60" />
    <javadoc>
      <return>the optimization type.</return>
    </javadoc>
    <method type="LinearObjectiveFunction" name="getFunction" startLine="65" endLine="67" />
    <javadoc>
      <return>the optimization type.</return>
    </javadoc>
    <method type="Collection<LinearConstraint>" name="getConstraints" startLine="72" endLine="74" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <param>optData Optimization data. In addition to those documented in{@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])MultivariateOptimizer}, this method will register the following data:
 * <ul>
 * <li>{@link LinearObjectiveFunction}</li>
 * <li>{@link LinearConstraintSet}</li>
 * <li>{@link NonNegativeConstraint}</li>
 * </ul></param>
      <return>{@inheritDoc}</return>
      <throws>TooManyIterationsException if the maximal number of
 * iterations is exceeded.</throws>
    </javadoc>
    <method type="PointValuePair" name="optimize" startLine="93" endLine="96">
      <comment>Set up base class and perform computation.</comment>
    </method>
    <javadoc>
      <text>* Scans the list of (required and optional) optimization data that
 * characterize the problem.</text>
      <param>optData Optimization data.
 * The following data will be looked for:
 * <ul>
 * <li>{@link LinearObjectiveFunction}</li>
 * <li>{@link LinearConstraintSet}</li>
 * <li>{@link NonNegativeConstraint}</li>
 * </ul></param>
    </javadoc>
    <method type="void" name="parseOptimizationData" startLine="111" endLine="131">
      <scope startLine="117" endLine="130">
        <scope startLine="118" endLine="121" />
        <scope startLine="122" endLine="125" />
        <scope startLine="126" endLine="129" />
      </scope>
      <comment>Allow base class to register its own data.</comment>
      <comment>The existing values (as set by the previous call) are reused if</comment>
      <comment>not provided in the argument list.</comment>
    </method>
  </class>
</source>
