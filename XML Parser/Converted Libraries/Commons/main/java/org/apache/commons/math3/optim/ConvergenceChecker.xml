<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim">
  <interface name="ConvergenceChecker" startLine="20">
    <javadoc>
      <text>* This interface specifies how to check if an optimization algorithm has
 * converged.
 * <br/>
 * Deciding if convergence has been reached is a problem-dependent issue. The
 * user should provide a class implementing this interface to allow the
 * optimization algorithm to stop its search according to the problem at hand.
 * <br/>
 * For convenience, three implementations that fit simple needs are already
 * provided: {@link SimpleValueChecker}, {@link SimpleVectorValueChecker} and{@link SimplePointChecker}. The first two consider that convergence is
 * reached when the objective function value does not change much anymore, it
 * does not use the point set at all.
 * The third one considers that convergence is reached when the input point
 * set does not change much anymore, it does not use objective function value
 * at all.</text>
      <param><PAIR>
 *  Type of the (point, objective value) pair.</param>
      <see>org.apache.commons.math3.optim.SimplePointChecker</see>
      <see>org.apache.commons.math3.optim.SimpleValueChecker</see>
      <see>org.apache.commons.math3.optim.SimpleVectorValueChecker</see>
      <version>$Id: ConvergenceChecker.java 1435539 2013-01-19 13:27:24Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <method name="converged" type="boolean" startLine="47" endLine="55" />
    <javadoc>
      <text>* Check if the optimization algorithm has converged.</text>
      <param>iteration Current iteration.</param>
      <param>previous Best point in the previous iteration.</param>
      <param>current Best point in the current iteration.</param>
      <return>{@code true} if the algorithm is considered to have converged.</return>
    </javadoc>
  </interface>
</source>
