<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution">
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.special.Erf" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.Well19937c" />
  <class name="LogNormalDistribution" extends="AbstractRealDistribution" startLine="28">
    <javadoc>
      <text>* Implementation of the log-normal (gaussian) distribution.
 * <p>
 * <strong>Parameters:</strong>{@code X} is log-normally distributed if its natural logarithm {@code log(X)}is normally distributed. The probability distribution function of {@code X}is given by (for {@code x > 0})
 * </p>
 * <p>{@code exp(-0.5 * ((ln(x) - m) / s)^2) / (s * sqrt(2 * pi) * x)}</p>
 * <ul>
 * <li>{@code m} is the <em>scale</em> parameter: this is the mean of the
 * normally distributed natural logarithm of this distribution,</li>
 * <li>{@code s} is the <em>shape</em> parameter: this is the standard
 * deviation of the normally distributed natural logarithm of this
 * distribution.
 * </ul></text>
      <see><a href="http://en.wikipedia.org/wiki/Log-normal_distribution">
 * Log-normal distribution (Wikipedia)</a></see>
      <see><a href="http://mathworld.wolfram.com/LogNormalDistribution.html">
 * Log Normal distribution (MathWorld)</a></see>
      <version>$Id: LogNormalDistribution.java 1422195 2012-12-15 06:45:18Z psteitz $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Default inverse cumulative probability accuracy.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" />
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* &radic;(2 &pi;)</text>
    </javadoc>
    <declaration type="double" name="SQRT2PI" />
    <javadoc>
      <text>* &radic;(2)</text>
    </javadoc>
    <declaration type="double" name="SQRT2" />
    <javadoc>
      <text>* The scale parameter of this distribution.</text>
    </javadoc>
    <declaration type="double" name="scale" />
    <javadoc>
      <text>* The shape parameter of this distribution.</text>
    </javadoc>
    <declaration type="double" name="shape" />
    <javadoc>
      <text>* Inverse cumulative probability accuracy.</text>
    </javadoc>
    <declaration type="double" name="solverAbsoluteAccuracy" />
    <javadoc>
      <text>* Create a log-normal distribution, where the mean and standard deviation
 * of the {@link NormalDistribution normally distributed} natural
 * logarithm of the log-normal distribution are equal to zero and one
 * respectively. In other words, the scale of the returned distribution is{@code 0}, while its shape is {@code 1}.</text>
    </javadoc>
    <method type="constructor" name="LogNormalDistribution" startLine="85" endLine="87" />
    <javadoc>
      <text>* Create a log-normal distribution using the specified scale and shape.</text>
      <param>scale the scale parameter of this distribution</param>
      <param>shape the shape parameter of this distribution</param>
      <throws>NotStrictlyPositiveException if {@code shape <= 0}.</throws>
    </javadoc>
    <method type="constructor" name="LogNormalDistribution" startLine="97" endLine="99" />
    <javadoc>
      <text>* Create a log-normal distribution using the specified scale, shape and
 * inverse cumulative distribution accuracy.</text>
      <param>scale the scale parameter of this distribution</param>
      <param>shape the shape parameter of this distribution</param>
      <param>inverseCumAccuracy Inverse cumulative probability accuracy.</param>
      <throws>NotStrictlyPositiveException if {@code shape <= 0}.</throws>
    </javadoc>
    <method type="constructor" name="LogNormalDistribution" startLine="111" endLine="113" />
    <javadoc>
      <text>* Creates a log-normal distribution.</text>
      <param>rng Random number generator.</param>
      <param>scale Scale parameter of this distribution.</param>
      <param>shape Shape parameter of this distribution.</param>
      <param>inverseCumAccuracy Inverse cumulative probability accuracy.</param>
      <throws>NotStrictlyPositiveException if {@code shape <= 0}.</throws>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="LogNormalDistribution" startLine="129" endLine="139">
      <scope startLine="132" endLine="134" />
    </method>
    <javadoc>
      <text>* Returns the scale parameter of this distribution.</text>
      <return>the scale parameter</return>
    </javadoc>
    <method type="double" name="getScale" startLine="146" endLine="148" />
    <javadoc>
      <text>* Returns the shape parameter of this distribution.</text>
      <return>the shape parameter</return>
    </javadoc>
    <method type="double" name="getShape" startLine="155" endLine="157" />
    <javadoc>
      <text>* {@inheritDoc}For scale {@code m}, and shape {@code s} of this distribution, the PDF
 * is given by
 * <ul>
 * <li>{@code 0} if {@code x <= 0},</li>
 * <li>{@code exp(-0.5 * ((ln(x) - m) / s)^2) / (s * sqrt(2 * pi) * x)}otherwise.</li>
 * </ul></text>
    </javadoc>
    <method type="double" name="density" startLine="170" endLine="177">
      <scope startLine="171" endLine="173" />
      <declaration type="double" name="x0" />
      <declaration type="double" name="x1" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}For scale {@code m}, and shape {@code s} of this distribution, the CDF
 * is given by
 * <ul>
 * <li>{@code 0} if {@code x <= 0},</li>
 * <li>{@code 0} if {@code ln(x) - m < 0} and {@code m - ln(x) > 40 * s}, as
 * in these cases the actual value is within {@code Double.MIN_VALUE} of 0,
 * <li>{@code 1} if {@code ln(x) - m >= 0} and {@code ln(x) - m > 40 * s},
 * as in these cases the actual value is within {@code Double.MIN_VALUE} of
 * 1,</li>
 * <li>{@code 0.5 + 0.5 * erf((ln(x) - m) / (s * sqrt(2))} otherwise.</li>
 * </ul></text>
    </javadoc>
    <method type="double" name="cumulativeProbability" startLine="194" endLine="203">
      <scope startLine="195" endLine="197" />
      <declaration type="double" name="dev" />
      <scope startLine="199" endLine="201" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <deprecated>See {@link RealDistribution#cumulativeProbability(double,double)}</deprecated>
    </javadoc>
    <method type="double" name="cumulativeProbability" startLine="212" endLine="214" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="probability" startLine="220" endLine="232">
      <scope startLine="221" endLine="224" />
      <scope startLine="225" endLine="227" />
      <declaration type="double" name="denom" />
      <declaration type="double" name="v0" />
      <declaration type="double" name="v1" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getSolverAbsoluteAccuracy" startLine="236" endLine="238" />
    <javadoc>
      <text>* {@inheritDoc}For scale {@code m} and shape {@code s}, the mean is{@code exp(m + s^2 / 2)}.</text>
    </javadoc>
    <method type="double" name="getNumericalMean" startLine="246" endLine="249">
      <declaration type="double" name="s" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}For scale {@code m} and shape {@code s}, the variance is{@code (exp(s^2) - 1) * exp(2 * m + s^2)}.</text>
    </javadoc>
    <method type="double" name="getNumericalVariance" startLine="257" endLine="261">
      <declaration type="double" name="s" />
      <declaration type="double" name="ss" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}The lower bound of the support is always 0 no matter the parameters.</text>
      <return>lower bound of the support (always 0)</return>
    </javadoc>
    <method type="double" name="getSupportLowerBound" startLine="270" endLine="272" />
    <javadoc>
      <text>* {@inheritDoc}The upper bound of the support is always positive infinity
 * no matter the parameters.</text>
      <return>upper bound of the support (always{@code Double.POSITIVE_INFINITY})</return>
    </javadoc>
    <method type="double" name="getSupportUpperBound" startLine="283" endLine="285" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isSupportLowerBoundInclusive" startLine="288" endLine="290" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isSupportUpperBoundInclusive" startLine="293" endLine="295" />
    <javadoc>
      <text>* {@inheritDoc}The support of this distribution is connected.</text>
      <return>{@code true}</return>
    </javadoc>
    <method type="boolean" name="isSupportConnected" startLine="304" endLine="306" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="sample" startLine="310" endLine="313">
      <declaration type="double" name="n" />
    </method>
  </class>
</source>
