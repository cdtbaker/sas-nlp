<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization.general">
  <interface name="Preconditioner" startLine="20">
    <javadoc>
      <text>* This interface represents a preconditioner for differentiable scalar
 * objective function optimizers.</text>
      <version>$Id: Preconditioner.java 1422230 2012-12-15 12:11:13Z erans $</version>
      <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
      <since>2.0</since>
    </javadoc>
    <method name="precondition" type="double[]" startLine="29" endLine="46" />
    <javadoc>
      <text>* Precondition a search direction.
 * <p>
 * The returned preconditioned search direction must be computed fast or
 * the algorithm performances will drop drastically. A classical approach
 * is to compute only the diagonal elements of the hessian and to divide
 * the raw search direction by these elements if they are all positive.
 * If at least one of them is negative, it is safer to return a clone of
 * the raw search direction as if the hessian was the identity matrix. The
 * rationale for this simplified choice is that a negative diagonal element
 * means the current point is far from the optimum and preconditioning will
 * not be efficient anyway in this case.
 * </p></text>
      <param>point current point at which the search direction was computed</param>
      <param>r raw search direction (i.e. opposite of the gradient)</param>
      <return>approximation of H<sup>-1</sup>r where H is the objective function hessian</return>
    </javadoc>
  </interface>
</source>
