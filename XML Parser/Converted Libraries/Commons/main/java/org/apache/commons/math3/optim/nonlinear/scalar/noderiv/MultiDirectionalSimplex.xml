<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv">
  <import name="java.util.Comparator" />
  <import name="org.apache.commons.math3.analysis.MultivariateFunction" />
  <import name="org.apache.commons.math3.optim.PointValuePair" />
  <class name="MultiDirectionalSimplex" extends="AbstractSimplex" startLine="24">
    <javadoc>
      <text>* This class implements the multi-directional direct search method.</text>
      <version>$Id: MultiDirectionalSimplex.java 1435539 2013-01-19 13:27:24Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Default value for {@link #khi}: {@value}.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_KHI" />
    <javadoc>
      <text>* Default value for {@link #gamma}: {@value}.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_GAMMA" />
    <javadoc>
      <text>* Expansion coefficient.</text>
    </javadoc>
    <declaration type="double" name="khi" />
    <javadoc>
      <text>* Contraction coefficient.</text>
    </javadoc>
    <declaration type="double" name="gamma" />
    <javadoc>
      <text>* Build a multi-directional simplex with default coefficients.
 * The default values are 2.0 for khi and 0.5 for gamma.</text>
      <param>n Dimension of the simplex.</param>
    </javadoc>
    <method type="constructor" name="MultiDirectionalSimplex" startLine="46" endLine="48" />
    <javadoc>
      <text>* Build a multi-directional simplex with default coefficients.
 * The default values are 2.0 for khi and 0.5 for gamma.</text>
      <param>n Dimension of the simplex.</param>
      <param>sideLength Length of the sides of the default (hypercube)
 * simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.</param>
    </javadoc>
    <method type="constructor" name="MultiDirectionalSimplex" startLine="58" endLine="60" />
    <javadoc>
      <text>* Build a multi-directional simplex with specified coefficients.</text>
      <param>n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int,double)}.</param>
      <param>khi Expansion coefficient.</param>
      <param>gamma Contraction coefficient.</param>
    </javadoc>
    <method type="constructor" name="MultiDirectionalSimplex" startLine="71" endLine="73" />
    <javadoc>
      <text>* Build a multi-directional simplex with specified coefficients.</text>
      <param>n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int,double)}.</param>
      <param>sideLength Length of the sides of the default (hypercube)
 * simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.</param>
      <param>khi Expansion coefficient.</param>
      <param>gamma Contraction coefficient.</param>
    </javadoc>
    <method type="constructor" name="MultiDirectionalSimplex" startLine="86" endLine="91" />
    <javadoc>
      <text>* Build a multi-directional simplex with default coefficients.
 * The default values are 2.0 for khi and 0.5 for gamma.</text>
      <param>steps Steps along the canonical axes representing box edges.
 * They may be negative but not zero. See</param>
    </javadoc>
    <method type="constructor" name="MultiDirectionalSimplex" startLine="100" endLine="102" />
    <javadoc>
      <text>* Build a multi-directional simplex with specified coefficients.</text>
      <param>steps Steps along the canonical axes representing box edges.
 * They may be negative but not zero. See{@link AbstractSimplex#AbstractSimplex(double[])}.</param>
      <param>khi Expansion coefficient.</param>
      <param>gamma Contraction coefficient.</param>
    </javadoc>
    <method type="constructor" name="MultiDirectionalSimplex" startLine="114" endLine="119" />
    <javadoc>
      <text>* Build a multi-directional simplex with default coefficients.
 * The default values are 2.0 for khi and 0.5 for gamma.</text>
      <param>referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.</param>
    </javadoc>
    <method type="constructor" name="MultiDirectionalSimplex" startLine="128" endLine="130" />
    <javadoc>
      <text>* Build a multi-directional simplex with specified coefficients.</text>
      <param>referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.</param>
      <param>khi Expansion coefficient.</param>
      <param>gamma Contraction coefficient.</param>
      <throws>org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif the reference simplex does not contain at least one point.</throws>
      <throws>org.apache.commons.math3.exception.DimensionMismatchExceptionif there is a dimension mismatch in the reference simplex.</throws>
    </javadoc>
    <method type="constructor" name="MultiDirectionalSimplex" startLine="145" endLine="150" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="iterate" startLine="155" endLine="179">
      <declaration type="PointValuePair[]" name="original" />
      <declaration type="PointValuePair" name="best" />
      <declaration type="PointValuePair" name="reflected" />
      <scope startLine="163" endLine="174">
        <declaration type="PointValuePair[]" name="reflectedSimplex" />
        <declaration type="PointValuePair" name="expanded" />
        <scope startLine="168" endLine="171" />
        <comment>Compute the expanded simplex.</comment>
        <comment>Keep the reflected simplex.</comment>
        <comment>Keep the expanded simplex.</comment>
      </scope>
      <comment>Save the original simplex.</comment>
      <comment>Perform a reflection step.</comment>
      <comment>Compute the contracted simplex.</comment>
    </method>
    <javadoc>
      <text>* Compute and evaluate a new simplex.</text>
      <param>evaluationFunction Evaluation function.</param>
      <param>original Original simplex (to be preserved).</param>
      <param>coeff Linear coefficient.</param>
      <param>comparator Comparator to use to sort simplex vertices from best
 * to poorest.</param>
      <return>the best point in the transformed simplex.</return>
      <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximal number of evaluations is exceeded.</throws>
    </javadoc>
    <method type="PointValuePair" name="evaluateNewSimplex" startLine="196" endLine="215">
      <declaration type="double[]" name="xSmallest" />
      <declaration type="int" name="dim" />
      <scope startLine="202" endLine="209">
        <declaration type="double[]" name="xOriginal" />
        <declaration type="double[]" name="xTransformed" />
        <scope startLine="205" endLine="207" />
      </scope>
      <comment>Perform a linear transformation on all the simplex points,</comment>
      <comment>except the first one.</comment>
      <comment>Evaluate the simplex.</comment>
    </method>
  </class>
</source>
