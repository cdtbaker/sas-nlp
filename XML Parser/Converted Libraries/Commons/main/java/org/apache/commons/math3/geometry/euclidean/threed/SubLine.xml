<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.geometry.euclidean.threed">
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.geometry.euclidean.oned.Interval" />
  <import name="org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet" />
  <import name="org.apache.commons.math3.geometry.euclidean.oned.Vector1D" />
  <import name="org.apache.commons.math3.geometry.partitioning.Region.Location" />
  <class name="SubLine" startLine="28">
    <javadoc>
      <text>* This class represents a subset of a {@link Line}.</text>
      <version>$Id: SubLine.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Underlying line.</text>
    </javadoc>
    <declaration type="Line" name="line" />
    <javadoc>
      <text>* Remaining region of the hyperplane.</text>
    </javadoc>
    <declaration type="IntervalsSet" name="remainingRegion" />
    <javadoc>
      <text>* Simple constructor.</text>
      <param>line underlying line</param>
      <param>remainingRegion remaining region of the line</param>
    </javadoc>
    <method type="constructor" name="SubLine" startLine="44" endLine="47" />
    <javadoc>
      <text>* Create a sub-line from two endpoints.</text>
      <param>start start point</param>
      <param>end end point</param>
      <exception>MathIllegalArgumentException if the points are equal</exception>
    </javadoc>
    <method type="constructor" name="SubLine" startLine="55" endLine="57" />
    <javadoc>
      <text>* Create a sub-line from a segment.</text>
      <param>segment single segment forming the sub-line</param>
      <exception>MathIllegalArgumentException if the segment endpoints are equal</exception>
    </javadoc>
    <method type="constructor" name="SubLine" startLine="63" endLine="65" />
    <javadoc>
      <text>* Get the endpoints of the sub-line.
 * <p>
 * A subline may be any arbitrary number of disjoints segments, so the endpoints
 * are provided as a list of endpoint pairs. Each element of the list represents
 * one segment, and each segment contains a start point at index 0 and an end point
 * at index 1. If the sub-line is unbounded in the negative infinity direction,
 * the start point of the first segment will have infinite coordinates. If the
 * sub-line is unbounded in the positive infinity direction, the end point of the
 * last segment will have infinite coordinates. So a sub-line covering the whole
 * line will contain just one row and both elements of this row will have infinite
 * coordinates. If the sub-line is empty, the returned list will contain 0 segments.
 * </p></text>
      <return>list of segments endpoints</return>
    </javadoc>
    <method type="List<Segment>" name="getSegments" startLine="81" endLine="94">
      <declaration type="List<Interval>" name="list" />
      <declaration type="List<Segment>" name="segments" />
      <scope startLine="86" endLine="90">
        <declaration type="Vector3D" name="start" />
        <declaration type="Vector3D" name="end" />
      </scope>
    </method>
    <javadoc>
      <text>* Get the intersection of the instance and another sub-line.
 * <p>
 * This method is related to the {@link Line#intersection(Line)intersection} method in the {@link Line Line} class, but in addition
 * to compute the point along infinite lines, it also checks the point
 * lies on both sub-line ranges.
 * </p></text>
      <param>subLine other sub-line which may intersect instance</param>
      <param>includeEndPoints if true, endpoints are considered to belong to
 * instance (i.e. they are closed sets) and may be returned, otherwise endpoints
 * are considered to not belong to instance (i.e. they are open sets) and intersection
 * occurring on endpoints lead to null being returned</param>
      <return>the intersection point if there is one, null if the sub-lines don't intersect</return>
    </javadoc>
    <method type="Vector3D" name="intersection" startLine="110" endLine="127">
      <declaration type="Vector3D" name="v1D" />
      <declaration type="Location" name="loc1" />
      <declaration type="Location" name="loc2" />
      <scope startLine="121" endLine="123" />
      <scope startLine="123" endLine="125" />
      <comment>compute the intersection on infinite line</comment>
      <comment>check location of point with respect to first sub-line</comment>
      <comment>check location of point with respect to second sub-line</comment>
    </method>
    <javadoc>
      <text>* Build an interval set from two points.</text>
      <param>start start point</param>
      <param>end end point</param>
      <return>an interval set</return>
      <exception>MathIllegalArgumentException if the points are equal</exception>
    </javadoc>
    <method type="IntervalsSet" name="buildIntervalSet" startLine="136" endLine="140">
      <declaration type="Line" name="line" />
    </method>
  </class>
</source>
