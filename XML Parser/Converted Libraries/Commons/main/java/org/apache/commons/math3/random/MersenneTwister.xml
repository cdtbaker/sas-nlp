<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.random">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="MersenneTwister" extends="BitsStreamGenerator" startLine="24">
    <implements name="Serializable" />
    <javadoc>
      <text>* This class implements a powerful pseudo-random number generator
 * developed by Makoto Matsumoto and Takuji Nishimura during
 * 1996-1997.
 * <p>This generator features an extremely long period
 * (2<sup>19937</sup>-1) and 623-dimensional equidistribution up to 32
 * bits accuracy. The home page for this generator is located at <a
 * href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html">
 * http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html</a>.</p>
 * <p>This generator is described in a paper by Makoto Matsumoto and
 * Takuji Nishimura in 1998: <a
 * href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/ARTICLES/mt.pdf">Mersenne
 * Twister: A 623-Dimensionally Equidistributed Uniform Pseudo-Random
 * Number Generator</a>, ACM Transactions on Modeling and Computer
 * Simulation, Vol. 8, No. 1, January 1998, pp 3--30</p>
 * <p>This class is mainly a Java port of the 2002-01-26 version of
 * the generator written in C by Makoto Matsumoto and Takuji
 * Nishimura. Here is their original copyright:</p>
 * <table border="0" width="80%" cellpadding="10" align="center" bgcolor="#E0E0E0">
 * <tr><td>Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
 * All rights reserved.</td></tr>
 * <tr><td>Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * <ol>
 * <li>Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.</li>
 * <li>Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.</li>
 * <li>The names of its contributors may not be used to endorse or promote
 * products derived from this software without specific prior written
 * permission.</li>
 * </ol></td></tr>
 * <tr><td><strong>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.</strong></td></tr>
 * </table></text>
      <version>$Id: MersenneTwister.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Size of the bytes pool.</text>
    </javadoc>
    <declaration type="int" name="N" />
    <javadoc>
      <text>* Period second parameter.</text>
    </javadoc>
    <declaration type="int" name="M" />
    <javadoc>
      <text>* X * MATRIX_A for X = {0, 1}.</text>
    </javadoc>
    <declaration type="int[]" name="MAG01" />
    <javadoc>
      <text>* Bytes pool.</text>
    </javadoc>
    <declaration type="int[]" name="mt" />
    <javadoc>
      <text>* Current index in the bytes pool.</text>
    </javadoc>
    <declaration type="int" name="mti" />
    <javadoc>
      <text>* Creates a new random number generator.
 * <p>The instance is initialized using the current time plus the
 * system identity hash code of this instance as the seed.</p></text>
    </javadoc>
    <method type="constructor" name="MersenneTwister" startLine="106" endLine="109" />
    <javadoc>
      <text>* Creates a new random number generator using a single int seed.</text>
      <param>seed the initial seed (32 bits integer)</param>
    </javadoc>
    <method type="constructor" name="MersenneTwister" startLine="114" endLine="117" />
    <javadoc>
      <text>* Creates a new random number generator using an int array seed.</text>
      <param>seed the initial seed (32 bits integers array), if null
 * the seed of the generator will be related to the current time</param>
    </javadoc>
    <method type="constructor" name="MersenneTwister" startLine="123" endLine="126" />
    <javadoc>
      <text>* Creates a new random number generator using a single long seed.</text>
      <param>seed the initial seed (64 bits integer)</param>
    </javadoc>
    <method type="constructor" name="MersenneTwister" startLine="131" endLine="134" />
    <javadoc>
      <text>* Reinitialize the generator as if just built with the given int seed.
 * <p>The state of the generator is exactly the same as a new
 * generator built with the same seed.</p></text>
      <param>seed the initial seed (32 bits integer)</param>
    </javadoc>
    <method type="void" name="setSeed" startLine="142" endLine="155">
      <declaration type="long" name="longMT" />
      <scope startLine="147" endLine="152">
        <comment>See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier.</comment>
        <comment>initializer from the 2002-01-09 C version by Makoto Matsumoto</comment>
      </scope>
      <comment>we use a long masked by 0xffffffffL as a poor man unsigned int</comment>
      <comment>NB: unlike original C code, we are working with java longs, the cast below makes masking unnecessary</comment>
      <comment>Clear normal deviate cache</comment>
    </method>
    <javadoc>
      <text>* Reinitialize the generator as if just built with the given int array seed.
 * <p>The state of the generator is exactly the same as a new
 * generator built with the same seed.</p></text>
      <param>seed the initial seed (32 bits integers array), if null
 * the seed of the generator will be the current system time plus the
 * system identity hash code of this instance</param>
    </javadoc>
    <method type="void" name="setSeed" startLine="165" endLine="207">
      <scope startLine="167" endLine="170" />
      <declaration type="int" name="i" />
      <declaration type="int" name="j" />
      <scope startLine="176" endLine="189">
        <declaration type="long" name="l0" />
        <declaration type="long" name="l1" />
        <declaration type="long" name="l" />
        <scope startLine="182" endLine="185" />
        <scope startLine="186" endLine="188" />
        <comment>non linear</comment>
      </scope>
      <scope startLine="191" endLine="201">
        <declaration type="long" name="l0" />
        <declaration type="long" name="l1" />
        <declaration type="long" name="l" />
        <scope startLine="197" endLine="200" />
        <comment>non linear</comment>
      </scope>
      <comment>MSB is 1; assuring non-zero initial array</comment>
      <comment>Clear normal deviate cache</comment>
    </method>
    <javadoc>
      <text>* Reinitialize the generator as if just built with the given long seed.
 * <p>The state of the generator is exactly the same as a new
 * generator built with the same seed.</p></text>
      <param>seed the initial seed (64 bits integer)</param>
    </javadoc>
    <method type="void" name="setSeed" startLine="215" endLine="217" />
    <javadoc>
      <text>* Generate next pseudorandom number.
 * <p>This method is the core generation algorithm. It is used by all the
 * public generation methods for the various primitive types {@link #nextBoolean()}, {@link #nextBytes(byte[])}, {@link #nextDouble()},{@link #nextFloat()}, {@link #nextGaussian()}, {@link #nextInt()},{@link #next(int)} and {@link #nextLong()}.</p></text>
      <param>bits number of random bits to produce</param>
      <return>random bits generated</return>
    </javadoc>
    <method type="int" name="next" startLine="229" endLine="263">
      <declaration type="int" name="y" />
      <scope startLine="233" endLine="251">
        <declaration type="int" name="mtNext" />
        <scope startLine="235" endLine="240">
          <declaration type="int" name="mtCurr" />
        </scope>
        <scope startLine="241" endLine="246">
          <declaration type="int" name="mtCurr" />
        </scope>
        <comment>generate N words at one time</comment>
      </scope>
      <comment>tempering</comment>
    </method>
  </class>
</source>
