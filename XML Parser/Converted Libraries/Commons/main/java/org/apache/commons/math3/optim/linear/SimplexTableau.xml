<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim.linear">
  <import name="java.io.IOException" />
  <import name="java.io.ObjectInputStream" />
  <import name="java.io.ObjectOutputStream" />
  <import name="java.io.Serializable" />
  <import name="java.util.ArrayList" />
  <import name="java.util.Collection" />
  <import name="java.util.HashSet" />
  <import name="java.util.List" />
  <import name="java.util.Set" />
  <import name="java.util.TreeSet" />
  <import name="org.apache.commons.math3.linear.Array2DRowRealMatrix" />
  <import name="org.apache.commons.math3.linear.MatrixUtils" />
  <import name="org.apache.commons.math3.linear.RealMatrix" />
  <import name="org.apache.commons.math3.linear.RealVector" />
  <import name="org.apache.commons.math3.optim.nonlinear.scalar.GoalType" />
  <import name="org.apache.commons.math3.optim.PointValuePair" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.Precision" />
  <class name="SimplexTableau" startLine="39">
    <implements name="Serializable" />
    <javadoc>
      <text>* A tableau for use in the Simplex method.
 * <p>
 * Example:
 * <pre>
 * W |  Z |  x1 |  x2 |  x- | s1 |  s2 |  a1 |  RHS
 * ---------------------------------------------------
 * -1    0    0     0     0     0     0     1     0   &lt;= phase 1 objective
 * 0    1   -15   -10    0     0     0     0     0   &lt;= phase 2 objective
 * 0    0    1     0     0     1     0     0     2   &lt;= constraint 1
 * 0    0    0     1     0     0     1     0     3   &lt;= constraint 2
 * 0    0    1     1     0     0     0     1     4   &lt;= constraint 3
 * </pre>
 * W: Phase 1 objective function</br>
 * Z: Phase 2 objective function</br>
 * x1 &amp; x2: Decision variables</br>
 * x-: Extra decision variable to allow for negative values</br>
 * s1 &amp; s2: Slack/Surplus variables</br>
 * a1: Artificial variable</br>
 * RHS: Right hand side</br>
 * </p></text>
      <version>$Id: SimplexTableau.java 1435810 2013-01-20 10:04:45Z tn $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Column label for negative vars.</text>
    </javadoc>
    <declaration type="String" name="NEGATIVE_VAR_COLUMN_LABEL" />
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Linear objective function.</text>
    </javadoc>
    <declaration type="LinearObjectiveFunction" name="f" />
    <javadoc>
      <text>* Linear constraints.</text>
    </javadoc>
    <declaration type="List<LinearConstraint>" name="constraints" />
    <javadoc>
      <text>* Whether to restrict the variables to non-negative values.</text>
    </javadoc>
    <declaration type="boolean" name="restrictToNonNegative" />
    <javadoc>
      <text>* The variables each column represents</text>
    </javadoc>
    <declaration type="List<String>" name="columnLabels" />
    <javadoc>
      <text>* Simple tableau.</text>
    </javadoc>
    <declaration type="RealMatrix" name="tableau" />
    <javadoc>
      <text>* Number of decision variables.</text>
    </javadoc>
    <declaration type="int" name="numDecisionVariables" />
    <javadoc>
      <text>* Number of slack variables.</text>
    </javadoc>
    <declaration type="int" name="numSlackVariables" />
    <javadoc>
      <text>* Number of artificial variables.</text>
    </javadoc>
    <declaration type="int" name="numArtificialVariables" />
    <javadoc>
      <text>* Amount of error to accept when checking for optimality.</text>
    </javadoc>
    <declaration type="double" name="epsilon" />
    <javadoc>
      <text>* Amount of error to accept in floating point comparisons.</text>
    </javadoc>
    <declaration type="int" name="maxUlps" />
    <javadoc>
      <text>* Cut-off value for entries in the tableau.</text>
    </javadoc>
    <declaration type="double" name="cutOff" />
    <javadoc>
      <text>* Builds a tableau for a linear problem.</text>
      <param>f Linear objective function.</param>
      <param>constraints Linear constraints.</param>
      <param>goalType Optimization goal: either {@link GoalType#MAXIMIZE}or {@link GoalType#MINIMIZE}.</param>
      <param>restrictToNonNegative Whether to restrict the variables to non-negative values.</param>
      <param>epsilon Amount of error to accept when checking for optimality.</param>
    </javadoc>
    <method type="constructor" name="SimplexTableau" startLine="119" endLine="122" />
    <javadoc>
      <text>* Build a tableau for a linear problem.</text>
      <param>f linear objective function</param>
      <param>constraints linear constraints</param>
      <param>goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}</param>
      <param>restrictToNonNegative whether to restrict the variables to non-negative values</param>
      <param>epsilon amount of error to accept when checking for optimality</param>
      <param>maxUlps amount of error to accept in floating point comparisons</param>
    </javadoc>
    <method type="constructor" name="SimplexTableau" startLine="138" endLine="140" />
    <javadoc>
      <text>* Build a tableau for a linear problem.</text>
      <param>f linear objective function</param>
      <param>constraints linear constraints</param>
      <param>goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}</param>
      <param>restrictToNonNegative whether to restrict the variables to non-negative values</param>
      <param>epsilon amount of error to accept when checking for optimality</param>
      <param>maxUlps amount of error to accept in floating point comparisons</param>
      <param>cutOff the cut-off value for tableau entries</param>
    </javadoc>
    <method type="constructor" name="SimplexTableau" startLine="158" endLine="173" />
    <javadoc>
      <text>* Initialize the labels for the columns.</text>
    </javadoc>
    <method type="void" name="initializeColumnLabels" startLine="178" endLine="196">
      <scope startLine="179" endLine="181" />
      <scope startLine="183" endLine="185" />
      <scope startLine="186" endLine="188" />
      <scope startLine="189" endLine="191" />
      <scope startLine="192" endLine="194" />
    </method>
    <javadoc>
      <text>* Create the tableau by itself.</text>
      <param>maximize if true, goal is to maximize the objective function</param>
      <return>created tableau</return>
    </javadoc>
    <method type="RealMatrix" name="createTableau" startLine="203" endLine="264">
      <declaration type="int" name="width" />
      <declaration type="int" name="height" />
      <declaration type="Array2DRowRealMatrix" name="matrix" />
      <scope startLine="212" endLine="214" />
      <declaration type="int" name="zIndex" />
      <declaration type="RealVector" name="objectiveCoefficients" />
      <scope startLine="223" endLine="226" />
      <declaration type="int" name="slackVar" />
      <declaration type="int" name="artificialVar" />
      <scope startLine="231" endLine="261">
        <declaration type="LinearConstraint" name="constraint" />
        <declaration type="int" name="row" />
        <scope startLine="239" endLine="242" />
        <scope startLine="248" endLine="250" />
        <scope startLine="250" endLine="252" />
        <scope startLine="256" endLine="260" />
        <comment>decision variable coefficients</comment>
        <comment>x-</comment>
        <comment>RHS</comment>
        <comment>slack variables</comment>
        <comment>slack</comment>
        <comment>excess</comment>
        <comment>artificial variables</comment>
      </scope>
      <comment>create a matrix of the correct size</comment>
      <comment>+ 1 is for RHS</comment>
      <comment>initialize the objective function rows</comment>
      <comment>initialize the constraint rows</comment>
    </method>
    <javadoc>
      <text>* Get new versions of the constraints which have positive right hand sides.</text>
      <param>originalConstraints original (not normalized) constraints</param>
      <return>new versions of the constraints</return>
    </javadoc>
    <method type="List<LinearConstraint>" name="normalizeConstraints" startLine="271" endLine="277">
      <declaration type="List<LinearConstraint>" name="normalized" />
      <scope startLine="273" endLine="275" />
    </method>
    <javadoc>
      <text>* Get a new equation equivalent to this one with a positive right hand side.</text>
      <param>constraint reference constraint</param>
      <return>new equation</return>
    </javadoc>
    <method type="LinearConstraint" name="normalize" startLine="284" endLine="292">
      <scope startLine="285" endLine="289" />
    </method>
    <javadoc>
      <text>* Get the number of objective functions in this tableau.</text>
      <return>2 for Phase 1.  1 for Phase 2.</return>
    </javadoc>
    <method type="int" name="getNumObjectiveFunctions" startLine="298" endLine="300" />
    <javadoc>
      <text>* Get a count of constraints corresponding to a specified relationship.</text>
      <param>relationship relationship to count</param>
      <return>number of constraint with the specified relationship</return>
    </javadoc>
    <method type="int" name="getConstraintTypeCounts" startLine="307" endLine="315">
      <declaration type="int" name="count" />
      <scope startLine="309" endLine="313">
        <scope startLine="310" endLine="312" />
      </scope>
    </method>
    <javadoc>
      <text>* Get the -1 times the sum of all coefficients in the given array.</text>
      <param>coefficients coefficients to sum</param>
      <return>the -1 times the sum of all coefficients in the given array.</return>
    </javadoc>
    <method type="double" name="getInvertedCoefficientSum" startLine="322" endLine="328">
      <declaration type="double" name="sum" />
      <scope startLine="324" endLine="326" />
    </method>
    <javadoc>
      <text>* Checks whether the given column is basic.</text>
      <param>col index of the column to check</param>
      <return>the row that the variable is basic in.  null if the column is not basic</return>
    </javadoc>
    <method type="Integer" name="getBasicRow" startLine="335" endLine="346">
      <declaration type="Integer" name="row" />
      <scope startLine="337" endLine="344">
        <declaration type="double" name="entry" />
        <scope startLine="339" endLine="341" />
        <scope startLine="341" endLine="343" />
      </scope>
    </method>
    <javadoc>
      <text>* Removes the phase 1 objective function, positive cost non-artificial variables,
 * and the non-basic artificial variables from this tableau.</text>
    </javadoc>
    <method type="void" name="dropPhase1Objective" startLine="352" endLine="394">
      <scope startLine="353" endLine="355" />
      <declaration type="Set<Integer>" name="columnsToDrop" />
      <scope startLine="361" endLine="366">
        <declaration type="double" name="entry" />
        <scope startLine="363" endLine="365" />
      </scope>
      <scope startLine="369" endLine="374">
        <declaration type="int" name="col" />
        <scope startLine="371" endLine="373" />
      </scope>
      <declaration type="double[][]" name="matrix" />
      <scope startLine="377" endLine="384">
        <declaration type="int" name="col" />
        <scope startLine="379" endLine="383">
          <scope startLine="380" endLine="382" />
        </scope>
      </scope>
      <declaration type="Integer[]" name="drop" />
      <scope startLine="388" endLine="390" />
      <comment>positive cost non-artificial variables</comment>
      <comment>non-basic artificial variables</comment>
      <comment>remove the columns in reverse order so the indices are correct</comment>
    </method>
    <javadoc>
      <param>src the source array</param>
      <param>dest the destination array</param>
    </javadoc>
    <method type="void" name="copyArray" startLine="400" endLine="402" />
    <javadoc>
      <text>* Returns whether the problem is at an optimal state.</text>
      <return>whether the model has been solved</return>
    </javadoc>
    <method type="boolean" name="isOptimal" startLine="408" endLine="416">
      <scope startLine="409" endLine="414">
        <declaration type="double" name="entry" />
        <scope startLine="411" endLine="413" />
      </scope>
    </method>
    <javadoc>
      <text>* Get the current solution.</text>
      <return>current solution</return>
    </javadoc>
    <method type="PointValuePair" name="getSolution" startLine="422" endLine="453">
      <declaration type="int" name="negativeVarColumn" />
      <declaration type="Integer" name="negativeVarBasicRow" />
      <declaration type="double" name="mostNegative" />
      <declaration type="Set<Integer>" name="basicRows" />
      <declaration type="double[]" name="coefficients" />
      <scope startLine="429" endLine="451">
        <declaration type="int" name="colIndex" />
        <scope startLine="431" endLine="434" />
        <declaration type="Integer" name="basicRow" />
        <scope startLine="436" endLine="441" />
        <scope startLine="441" endLine="445" />
        <scope startLine="445" endLine="450" />
        <comment>if the basic row is found to be the objective function row</comment>
        <comment>set the coefficient to 0 -> this case handles unconstrained</comment>
        <comment>variables that are still part of the objective function</comment>
        <comment>if multiple variables can take a given value</comment>
        <comment>then we choose the first and set the rest equal to 0</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Subtracts a multiple of one row from another.
 * <p>
 * After application of this operation, the following will hold:
 * <pre>minuendRow = minuendRow - multiple * subtrahendRow</pre></text>
      <param>dividendRow index of the row</param>
      <param>divisor value of the divisor</param>
    </javadoc>
    <method type="void" name="divideRow" startLine="464" endLine="468">
      <scope startLine="465" endLine="467" />
    </method>
    <javadoc>
      <text>* Subtracts a multiple of one row from another.
 * <p>
 * After application of this operation, the following will hold:
 * <pre>minuendRow = minuendRow - multiple * subtrahendRow</pre></text>
      <param>minuendRow row index</param>
      <param>subtrahendRow row index</param>
      <param>multiple multiplication factor</param>
    </javadoc>
    <method type="void" name="subtractRow" startLine="481" endLine="490">
      <scope startLine="482" endLine="489">
        <declaration type="double" name="result" />
        <scope startLine="485" endLine="487" />
        <comment>cut-off values smaller than the cut-off threshold, otherwise may lead to numerical instabilities</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Get the width of the tableau.</text>
      <return>width of the tableau</return>
    </javadoc>
    <method type="int" name="getWidth" startLine="496" endLine="498" />
    <javadoc>
      <text>* Get the height of the tableau.</text>
      <return>height of the tableau</return>
    </javadoc>
    <method type="int" name="getHeight" startLine="504" endLine="506" />
    <javadoc>
      <text>* Get an entry of the tableau.</text>
      <param>row row index</param>
      <param>column column index</param>
      <return>entry at (row, column)</return>
    </javadoc>
    <method type="double" name="getEntry" startLine="514" endLine="516" />
    <javadoc>
      <text>* Set an entry of the tableau.</text>
      <param>row row index</param>
      <param>column column index</param>
      <param>value for the entry</param>
    </javadoc>
    <method type="void" name="setEntry" startLine="525" endLine="527" />
    <javadoc>
      <text>* Get the offset of the first slack variable.</text>
      <return>offset of the first slack variable</return>
    </javadoc>
    <method type="int" name="getSlackVariableOffset" startLine="533" endLine="535" />
    <javadoc>
      <text>* Get the offset of the first artificial variable.</text>
      <return>offset of the first artificial variable</return>
    </javadoc>
    <method type="int" name="getArtificialVariableOffset" startLine="541" endLine="543" />
    <javadoc>
      <text>* Get the offset of the right hand side.</text>
      <return>offset of the right hand side</return>
    </javadoc>
    <method type="int" name="getRhsOffset" startLine="549" endLine="551" />
    <javadoc>
      <text>* Get the number of decision variables.
 * <p>
 * If variables are not restricted to positive values, this will include 1 extra decision variable to represent
 * the absolute value of the most negative variable.</text>
      <return>number of decision variables</return>
      <see>#getOriginalNumDecisionVariables()</see>
    </javadoc>
    <method type="int" name="getNumDecisionVariables" startLine="562" endLine="564" />
    <javadoc>
      <text>* Get the original number of decision variables.</text>
      <return>original number of decision variables</return>
      <see>#getNumDecisionVariables()</see>
    </javadoc>
    <method type="int" name="getOriginalNumDecisionVariables" startLine="571" endLine="573" />
    <javadoc>
      <text>* Get the number of slack variables.</text>
      <return>number of slack variables</return>
    </javadoc>
    <method type="int" name="getNumSlackVariables" startLine="579" endLine="581" />
    <javadoc>
      <text>* Get the number of artificial variables.</text>
      <return>number of artificial variables</return>
    </javadoc>
    <method type="int" name="getNumArtificialVariables" startLine="587" endLine="589" />
    <javadoc>
      <text>* Get the tableau data.</text>
      <return>tableau data</return>
    </javadoc>
    <method type="double[][]" name="getData" startLine="595" endLine="597" />
    <method type="boolean" name="equals" startLine="600" endLine="619">
      <scope startLine="602" endLine="604" />
      <scope startLine="606" endLine="617">
        <declaration type="SimplexTableau" name="rhs" />
      </scope>
    </method>
    <method type="int" name="hashCode" startLine="622" endLine="632" />
    <javadoc>
      <text>* Serialize the instance.</text>
      <param>oos stream where object should be written</param>
      <throws>IOException if object cannot be written to stream</throws>
    </javadoc>
    <method type="void" name="writeObject" startLine="640" endLine="643" />
    <javadoc>
      <text>* Deserialize the instance.</text>
      <param>ois stream from which the object should be read</param>
      <throws>ClassNotFoundException if a class in the stream cannot be found</throws>
      <throws>IOException if object cannot be read from the stream</throws>
    </javadoc>
    <method type="void" name="readObject" startLine="652" endLine="655" />
  </class>
</source>
