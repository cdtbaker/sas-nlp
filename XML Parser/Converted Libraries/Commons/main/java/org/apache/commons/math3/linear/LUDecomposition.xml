<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="LUDecomposition" startLine="23">
    <javadoc>
      <text>* Calculates the LUP-decomposition of a square matrix.
 * <p>The LUP-decomposition of a matrix A consists of three matrices L, U and
 * P that satisfy: P&times;A = L&times;U. L is lower triangular (with unit
 * diagonal terms), U is upper triangular and P is a permutation matrix. All
 * matrices are m&times;m.</p>
 * <p>As shown by the presence of the P matrix, this decomposition is
 * implemented using partial pivoting.</p>
 * <p>This class is based on the class with similar name from the
 * <a href="http://math.nist.gov/javanumerics/jama/">JAMA</a> library.</p>
 * <ul>
 * <li>a {@link #getP() getP} method has been added,</li>
 * <li>the {@code det} method has been renamed as {@link #getDeterminant()getDeterminant},</li>
 * <li>the {@code getDoublePivot} method has been removed (but the int based{@link #getPivot() getPivot} method has been kept),</li>
 * <li>the {@code solve} and {@code isNonSingular} methods have been replaced
 * by a {@link #getSolver() getSolver} method and the equivalent methods
 * provided by the returned {@link DecompositionSolver}.</li>
 * </ul></text>
      <see><a href="http://mathworld.wolfram.com/LUDecomposition.html">MathWorld</a></see>
      <see><a href="http://en.wikipedia.org/wiki/LU_decomposition">Wikipedia</a></see>
      <version>$Id: LUDecomposition.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>2.0 (changed to concrete class in 3.0)</since>
    </javadoc>
    <javadoc>
      <text>* Default bound to determine effective singularity in LU decomposition.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_TOO_SMALL" />
    <javadoc>
      <text>* Entries of LU decomposition.</text>
    </javadoc>
    <declaration type="double[][]" name="lu" />
    <javadoc>
      <text>* Pivot permutation associated with LU decomposition.</text>
    </javadoc>
    <declaration type="int[]" name="pivot" />
    <javadoc>
      <text>* Parity of the permutation associated with the LU decomposition.</text>
    </javadoc>
    <declaration type="boolean" name="even" />
    <javadoc>
      <text>* Singularity indicator.</text>
    </javadoc>
    <declaration type="boolean" name="singular" />
    <javadoc>
      <text>* Cached value of L.</text>
    </javadoc>
    <declaration type="RealMatrix" name="cachedL" />
    <javadoc>
      <text>* Cached value of U.</text>
    </javadoc>
    <declaration type="RealMatrix" name="cachedU" />
    <javadoc>
      <text>* Cached value of P.</text>
    </javadoc>
    <declaration type="RealMatrix" name="cachedP" />
    <javadoc>
      <text>* Calculates the LU-decomposition of the given matrix.
 * This constructor uses 1e-11 as default value for the singularity
 * threshold.</text>
      <param>matrix Matrix to decompose.</param>
      <throws>NonSquareMatrixException if matrix is not square.</throws>
    </javadoc>
    <method type="constructor" name="LUDecomposition" startLine="75" endLine="77" />
    <javadoc>
      <text>* Calculates the LU-decomposition of the given matrix.</text>
      <param>matrix The matrix to decompose.</param>
      <param>singularityThreshold threshold (based on partial row norm)
 * under which a matrix is considered singular</param>
      <throws>NonSquareMatrixException if matrix is not square</throws>
    </javadoc>
    <method type="constructor" name="LUDecomposition" startLine="86" endLine="165">
      <scope startLine="87" endLine="90" />
      <declaration type="int" name="m" />
      <scope startLine="100" endLine="102" />
      <scope startLine="107" endLine="164">
        <scope startLine="110" endLine="117">
          <declaration type="double[]" name="luRow" />
          <declaration type="double" name="sum" />
          <scope startLine="113" endLine="115" />
        </scope>
        <declaration type="int" name="max" />
        <declaration type="double" name="largest" />
        <scope startLine="122" endLine="135">
          <declaration type="double[]" name="luRow" />
          <declaration type="double" name="sum" />
          <scope startLine="125" endLine="127" />
          <scope startLine="131" endLine="134" />
        </scope>
        <scope startLine="138" endLine="141" />
        <scope startLine="144" endLine="157">
          <declaration type="double" name="tmp" />
          <declaration type="double[]" name="luMax" />
          <declaration type="double[]" name="luCol" />
          <scope startLine="148" endLine="152" />
          <declaration type="int" name="temp" />
        </scope>
        <declaration type="double" name="luDiag" />
        <scope startLine="161" endLine="163" />
        <comment>upper</comment>
        <comment>lower</comment>
        <comment>permutation row</comment>
        <comment>maintain best permutation choice</comment>
        <comment>Singularity check</comment>
        <comment>Pivot if necessary</comment>
        <comment>Divide the lower elements by the "winning" diagonal elt.</comment>
      </scope>
      <comment>Initialize permutation array and parity</comment>
      <comment>Loop over columns</comment>
    </method>
    <javadoc>
      <text>* Returns the matrix L of the decomposition.
 * <p>L is a lower-triangular matrix</p></text>
      <return>the L matrix (or null if decomposed matrix is singular)</return>
    </javadoc>
    <method type="RealMatrix" name="getL" startLine="172" endLine="185">
      <scope startLine="173" endLine="183">
        <declaration type="int" name="m" />
        <scope startLine="176" endLine="182">
          <declaration type="double[]" name="luI" />
          <scope startLine="178" endLine="180" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the matrix U of the decomposition.
 * <p>U is an upper-triangular matrix</p></text>
      <return>the U matrix (or null if decomposed matrix is singular)</return>
    </javadoc>
    <method type="RealMatrix" name="getU" startLine="192" endLine="204">
      <scope startLine="193" endLine="202">
        <declaration type="int" name="m" />
        <scope startLine="196" endLine="201">
          <declaration type="double[]" name="luI" />
          <scope startLine="198" endLine="200" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the P rows permutation matrix.
 * <p>P is a sparse matrix with exactly one element set to 1.0 in
 * each row and each column, all other elements being set to 0.0.</p>
 * <p>The positions of the 1 elements are given by the {@link #getPivot()pivot permutation vector}.</p></text>
      <return>the P rows permutation matrix (or null if decomposed matrix is singular)</return>
      <see>#getPivot()</see>
    </javadoc>
    <method type="RealMatrix" name="getP" startLine="215" endLine="224">
      <scope startLine="216" endLine="222">
        <declaration type="int" name="m" />
        <scope startLine="219" endLine="221" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the pivot permutation vector.</text>
      <return>the pivot permutation vector</return>
      <see>#getP()</see>
    </javadoc>
    <method type="int[]" name="getPivot" startLine="231" endLine="233" />
    <javadoc>
      <text>* Return the determinant of the matrix</text>
      <return>determinant of the matrix</return>
    </javadoc>
    <method type="double" name="getDeterminant" startLine="239" endLine="250">
      <scope startLine="240" endLine="242" />
      <scope startLine="242" endLine="249">
        <declaration type="int" name="m" />
        <declaration type="double" name="determinant" />
        <scope startLine="245" endLine="247" />
      </scope>
    </method>
    <javadoc>
      <text>* Get a solver for finding the A &times; X = B solution in exact linear
 * sense.</text>
      <return>a solver</return>
    </javadoc>
    <method type="DecompositionSolver" name="getSolver" startLine="257" endLine="259" />
    <class name="Solver" startLine="261">
      <implements name="DecompositionSolver" />
      <javadoc>
        <text>* Specialized solver.</text>
      </javadoc>
      <javadoc>
        <text>* Entries of LU decomposition.</text>
      </javadoc>
      <declaration type="double[][]" name="lu" />
      <javadoc>
        <text>* Pivot permutation associated with LU decomposition.</text>
      </javadoc>
      <declaration type="int[]" name="pivot" />
      <javadoc>
        <text>* Singularity indicator.</text>
      </javadoc>
      <declaration type="boolean" name="singular" />
      <javadoc>
        <text>* Build a solver from decomposed matrix.</text>
        <param>lu entries of LU decomposition</param>
        <param>pivot pivot permutation associated with LU decomposition</param>
        <param>singular singularity indicator</param>
      </javadoc>
      <method type="constructor" name="Solver" startLine="279" endLine="283" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="boolean" name="isNonSingular" startLine="286" endLine="288" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="RealVector" name="solve" startLine="291" endLine="325">
        <declaration type="int" name="m" />
        <scope startLine="293" endLine="295" />
        <scope startLine="296" endLine="298" />
        <declaration type="double[]" name="bp" />
        <scope startLine="303" endLine="305" />
        <scope startLine="308" endLine="313">
          <declaration type="double" name="bpCol" />
          <scope startLine="310" endLine="312" />
        </scope>
        <scope startLine="316" endLine="322">
          <declaration type="double" name="bpCol" />
          <scope startLine="319" endLine="321" />
        </scope>
        <comment>Apply permutations to b</comment>
        <comment>Solve LY = b</comment>
        <comment>Solve UX = Y</comment>
      </method>
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="RealMatrix" name="solve" startLine="328" endLine="379">
        <declaration type="int" name="m" />
        <scope startLine="331" endLine="333" />
        <scope startLine="334" endLine="336" />
        <declaration type="int" name="nColB" />
        <declaration type="double[][]" name="bp" />
        <scope startLine="342" endLine="348">
          <declaration type="double[]" name="bpRow" />
          <declaration type="int" name="pRow" />
          <scope startLine="345" endLine="347" />
        </scope>
        <scope startLine="351" endLine="360">
          <declaration type="double[]" name="bpCol" />
          <scope startLine="353" endLine="359">
            <declaration type="double[]" name="bpI" />
            <declaration type="double" name="luICol" />
            <scope startLine="356" endLine="358" />
          </scope>
        </scope>
        <scope startLine="363" endLine="376">
          <declaration type="double[]" name="bpCol" />
          <declaration type="double" name="luDiag" />
          <scope startLine="366" endLine="368" />
          <scope startLine="369" endLine="375">
            <declaration type="double[]" name="bpI" />
            <declaration type="double" name="luICol" />
            <scope startLine="372" endLine="374" />
          </scope>
        </scope>
        <comment>Apply permutations to b</comment>
        <comment>Solve LY = b</comment>
        <comment>Solve UX = Y</comment>
      </method>
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="RealMatrix" name="getInverse" startLine="382" endLine="384" />
    </class>
  </class>
</source>
