<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.polynomials">
  <import name="java.util.Arrays" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <import name="org.apache.commons.math3.analysis.DifferentiableUnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.differentiation.DerivativeStructure" />
  <import name="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction" />
  <import name="org.apache.commons.math3.exception.NonMonotonicSequenceException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <class name="PolynomialSplineFunction" startLine="33">
    <implements name="UnivariateDifferentiableFunction" />
    <implements name="DifferentiableUnivariateFunction" />
    <javadoc>
      <text>* Represents a polynomial spline function.
 * <p>
 * A <strong>polynomial spline function</strong> consists of a set of
 * <i>interpolating polynomials</i> and an ascending array of domain
 * <i>knot points</i>, determining the intervals over which the spline function
 * is defined by the constituent polynomials.  The polynomials are assumed to
 * have been computed to match the values of another function at the knot
 * points.  The value consistency constraints are not currently enforced by
 * <code>PolynomialSplineFunction</code> itself, but are assumed to hold among
 * the polynomials and knot points passed to the constructor.</p>
 * <p>
 * N.B.:  The polynomials in the <code>polynomials</code> property must be
 * centered on the knot points to compute the spline function values.
 * See below.</p>
 * <p>
 * The domain of the polynomial spline function is
 * <code>[smallest knot, largest knot]</code>.  Attempts to evaluate the
 * function at values outside of this range generate IllegalArgumentExceptions.
 * </p>
 * <p>
 * The value of the polynomial spline function for an argument <code>x</code>
 * is computed as follows:
 * <ol>
 * <li>The knot array is searched to find the segment to which <code>x</code>
 * belongs.  If <code>x</code> is less than the smallest knot point or greater
 * than the largest one, an <code>IllegalArgumentException</code>
 * is thrown.</li>
 * <li> Let <code>j</code> be the index of the largest knot point that is less
 * than or equal to <code>x</code>.  The value returned is <br>
 * <code>polynomials[j](x - knot[j])</code></li></ol></p></text>
      <version>$Id: PolynomialSplineFunction.java 1455194 2013-03-11 15:45:54Z luc $</version>
    </javadoc>
    <javadoc>
      <text>* Spline segment interval delimiters (knots).
 * Size is n + 1 for n segments.</text>
    </javadoc>
    <declaration type="double" name="knots" />
    <javadoc>
      <text>* The polynomial functions that make up the spline.  The first element
 * determines the value of the spline over the first subinterval, the
 * second over the second, etc.   Spline function values are determined by
 * evaluating these functions at {@code (x - knot[i])} where i is the
 * knot segment to which x belongs.</text>
    </javadoc>
    <declaration type="PolynomialFunction" name="polynomials" />
    <javadoc>
      <text>* Number of spline segments. It is equal to the number of polynomials and
 * to the number of partition points - 1.</text>
    </javadoc>
    <declaration type="int" name="n" />
    <javadoc>
      <text>* Construct a polynomial spline function with the given segment delimiters
 * and interpolating polynomials.
 * The constructor copies both arrays and assigns the copies to the knots
 * and polynomials properties, respectively.</text>
      <param>knots Spline segment interval delimiters.</param>
      <param>polynomials Polynomial functions that make up the spline.</param>
      <throws>NullArgumentException if either of the input arrays is {@code null}.</throws>
      <throws>NumberIsTooSmallException if knots has length less than 2.</throws>
      <throws>DimensionMismatchException if {@code polynomials.length != knots.length - 1}.</throws>
      <throws>NonMonotonicSequenceException if the {@code knots} array is not strictly increasing.</throws>
    </javadoc>
    <method type="constructor" name="PolynomialSplineFunction" startLine="104" endLine="123">
      <scope startLine="106" endLine="108" />
      <scope startLine="109" endLine="112" />
      <scope startLine="113" endLine="115" />
    </method>
    <javadoc>
      <text>* Compute the value for the function.
 * See {@link PolynomialSplineFunction} for details on the algorithm for
 * computing the value of the function.</text>
      <param>v Point for which the function value should be computed.</param>
      <return>the value.</return>
      <throws>OutOfRangeException if {@code v} is outside of the domain of the
 * spline function (smaller than the smallest knot point or larger than the
 * largest knot point).</throws>
    </javadoc>
    <method type="double" name="value" startLine="136" endLine="151">
      <scope startLine="137" endLine="139" />
      <declaration type="int" name="i" />
      <scope startLine="141" endLine="143" />
      <scope startLine="147" endLine="149" />
      <comment>This will handle the case where v is the last knot value</comment>
      <comment>There are only n-1 polynomials, so if v is the last knot</comment>
      <comment>then we will use the last polynomial to calculate the value.</comment>
    </method>
    <javadoc>
      <text>* Get the derivative of the polynomial spline function.</text>
      <return>the derivative function.</return>
    </javadoc>
    <method type="UnivariateFunction" name="derivative" startLine="158" endLine="160" />
    <javadoc>
      <text>* Get the derivative of the polynomial spline function.</text>
      <return>the derivative function.</return>
    </javadoc>
    <method type="PolynomialSplineFunction" name="polynomialSplineDerivative" startLine="167" endLine="173">
      <declaration type="PolynomialFunction[]" name="derivativePolynomials" />
      <scope startLine="169" endLine="171" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.1</since>
    </javadoc>
    <method type="DerivativeStructure" name="value" startLine="179" endLine="195">
      <declaration type="double" name="t0" />
      <scope startLine="181" endLine="183" />
      <declaration type="int" name="i" />
      <scope startLine="185" endLine="187" />
      <scope startLine="191" endLine="193" />
      <comment>This will handle the case where t is the last knot value</comment>
      <comment>There are only n-1 polynomials, so if t is the last knot</comment>
      <comment>then we will use the last polynomial to calculate the value.</comment>
    </method>
    <javadoc>
      <text>* Get the number of spline segments.
 * It is also the number of polynomials and the number of knot points - 1.</text>
      <return>the number of spline segments.</return>
    </javadoc>
    <method type="int" name="getN" startLine="203" endLine="205" />
    <javadoc>
      <text>* Get a copy of the interpolating polynomials array.
 * It returns a fresh copy of the array. Changes made to the copy will
 * not affect the polynomials property.</text>
      <return>the interpolating polynomials.</return>
    </javadoc>
    <method type="PolynomialFunction[]" name="getPolynomials" startLine="214" endLine="218">
      <declaration type="PolynomialFunction[]" name="p" />
    </method>
    <javadoc>
      <text>* Get an array copy of the knot points.
 * It returns a fresh copy of the array. Changes made to the copy
 * will not affect the knots property.</text>
      <return>the knot points.</return>
    </javadoc>
    <method type="double[]" name="getKnots" startLine="227" endLine="231">
      <declaration type="double[]" name="out" />
    </method>
  </class>
</source>
