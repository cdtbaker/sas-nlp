<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="java.text.FieldPosition" />
  <import name="java.text.NumberFormat" />
  <import name="java.text.ParsePosition" />
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="java.util.Locale" />
  <import name="org.apache.commons.math3.exception.MathParseException" />
  <import name="org.apache.commons.math3.util.CompositeFormat" />
  <class name="RealVectorFormat" startLine="30">
    <javadoc>
      <text>* Formats a vector in components list format "{v0; v1; ...; vk-1}".
 * <p>The prefix and suffix "{" and "}" and the separator "; " can be replaced by
 * any user-defined strings. The number format for components can be configured.</p>
 * <p>White space is ignored at parse time, even if it is in the prefix, suffix
 * or separator specifications. So even if the default separator does include a space
 * character that is used at format time, both input string "{1;1;1}" and
 * " { 1 ; 1 ; 1 } " will be parsed without error and the same vector will be
 * returned. In the second case, however, the parse position after parsing will be
 * just after the closing curly brace, i.e. just before the trailing space.</p></text>
      <version>$Id: RealVectorFormat.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* The default prefix: "{".</text>
    </javadoc>
    <declaration type="String" name="DEFAULT_PREFIX" />
    <javadoc>
      <text>* The default suffix: "}".</text>
    </javadoc>
    <declaration type="String" name="DEFAULT_SUFFIX" />
    <javadoc>
      <text>* The default separator: ", ".</text>
    </javadoc>
    <declaration type="String" name="DEFAULT_SEPARATOR" />
    <javadoc>
      <text>* Prefix.</text>
    </javadoc>
    <declaration type="String" name="prefix" />
    <javadoc>
      <text>* Suffix.</text>
    </javadoc>
    <declaration type="String" name="suffix" />
    <javadoc>
      <text>* Separator.</text>
    </javadoc>
    <declaration type="String" name="separator" />
    <javadoc>
      <text>* Trimmed prefix.</text>
    </javadoc>
    <declaration type="String" name="trimmedPrefix" />
    <javadoc>
      <text>* Trimmed suffix.</text>
    </javadoc>
    <declaration type="String" name="trimmedSuffix" />
    <javadoc>
      <text>* Trimmed separator.</text>
    </javadoc>
    <declaration type="String" name="trimmedSeparator" />
    <javadoc>
      <text>* The format used for components.</text>
    </javadoc>
    <declaration type="NumberFormat" name="format" />
    <javadoc>
      <text>* Create an instance with default settings.
 * <p>The instance uses the default prefix, suffix and separator:
 * "{", "}", and "; " and the default number format for components.</p></text>
    </javadoc>
    <method type="constructor" name="RealVectorFormat" startLine="72" endLine="75" />
    <javadoc>
      <text>* Create an instance with a custom number format for components.</text>
      <param>format the custom format for components.</param>
    </javadoc>
    <method type="constructor" name="RealVectorFormat" startLine="81" endLine="83" />
    <javadoc>
      <text>* Create an instance with custom prefix, suffix and separator.</text>
      <param>prefix prefix to use instead of the default "{"</param>
      <param>suffix suffix to use instead of the default "}"</param>
      <param>separator separator to use instead of the default "; "</param>
    </javadoc>
    <method type="constructor" name="RealVectorFormat" startLine="92" endLine="95" />
    <javadoc>
      <text>* Create an instance with custom prefix, suffix, separator and format
 * for components.</text>
      <param>prefix prefix to use instead of the default "{"</param>
      <param>suffix suffix to use instead of the default "}"</param>
      <param>separator separator to use instead of the default "; "</param>
      <param>format the custom format for components.</param>
    </javadoc>
    <method type="constructor" name="RealVectorFormat" startLine="106" endLine="114" />
    <javadoc>
      <text>* Get the set of locales for which real vectors formats are available.
 * <p>This is the same set as the {@link NumberFormat} set.</p></text>
      <return>available real vector format locales.</return>
    </javadoc>
    <method type="Locale[]" name="getAvailableLocales" startLine="121" endLine="123" />
    <javadoc>
      <text>* Get the format prefix.</text>
      <return>format prefix.</return>
    </javadoc>
    <method type="String" name="getPrefix" startLine="129" endLine="131" />
    <javadoc>
      <text>* Get the format suffix.</text>
      <return>format suffix.</return>
    </javadoc>
    <method type="String" name="getSuffix" startLine="137" endLine="139" />
    <javadoc>
      <text>* Get the format separator between components.</text>
      <return>format separator.</return>
    </javadoc>
    <method type="String" name="getSeparator" startLine="145" endLine="147" />
    <javadoc>
      <text>* Get the components format.</text>
      <return>components format.</return>
    </javadoc>
    <method type="NumberFormat" name="getFormat" startLine="153" endLine="155" />
    <javadoc>
      <text>* Returns the default real vector format for the current locale.</text>
      <return>the default real vector format.</return>
    </javadoc>
    <method type="RealVectorFormat" name="getInstance" startLine="161" endLine="163" />
    <javadoc>
      <text>* Returns the default real vector format for the given locale.</text>
      <param>locale the specific locale used by the format.</param>
      <return>the real vector format specific to the given locale.</return>
    </javadoc>
    <method type="RealVectorFormat" name="getInstance" startLine="170" endLine="172" />
    <javadoc>
      <text>* This method calls {@link #format(RealVector,StringBuffer,FieldPosition)}.</text>
      <param>v RealVector object to format.</param>
      <return>a formatted vector.</return>
    </javadoc>
    <method type="String" name="format" startLine="180" endLine="182" />
    <javadoc>
      <text>* Formats a {@link RealVector} object to produce a string.</text>
      <param>vector the object to format.</param>
      <param>toAppendTo where the text is to be appended</param>
      <param>pos On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
      <return>the value passed in as toAppendTo.</return>
    </javadoc>
    <method type="StringBuffer" name="format" startLine="193" endLine="213">
      <scope startLine="202" endLine="207">
        <scope startLine="203" endLine="205" />
      </scope>
      <comment>format prefix</comment>
      <comment>format components</comment>
      <comment>format suffix</comment>
    </method>
    <javadoc>
      <text>* Parse a string to produce a {@link RealVector} object.</text>
      <param>source String to parse.</param>
      <return>the parsed {@link RealVector} object.</return>
      <throws>MathParseException if the beginning of the specified string
 * cannot be parsed.</throws>
    </javadoc>
    <method type="ArrayRealVector" name="parse" startLine="223" endLine="232">
      <declaration type="ParsePosition" name="parsePosition" />
      <declaration type="ArrayRealVector" name="result" />
      <scope startLine="226" endLine="230" />
    </method>
    <javadoc>
      <text>* Parse a string to produce a {@link RealVector} object.</text>
      <param>source String to parse.</param>
      <param>pos input/ouput parsing parameter.</param>
      <return>the parsed {@link RealVector} object.</return>
    </javadoc>
    <method type="ArrayRealVector" name="parse" startLine="241" endLine="288">
      <declaration type="int" name="initialIndex" />
      <scope startLine="246" endLine="248" />
      <declaration type="List<Number>" name="components" />
      <scope startLine="252" endLine="274">
        <scope startLine="254" endLine="259">
          <scope startLine="256" endLine="258" />
        </scope>
        <scope startLine="261" endLine="272">
          <declaration type="Number" name="component" />
          <scope startLine="264" endLine="266" />
          <scope startLine="266" endLine="271" />
        </scope>
        <comment>invalid component</comment>
        <comment>set index back to initial, error index should already be set</comment>
      </scope>
      <scope startLine="278" endLine="280" />
      <declaration type="double[]" name="data" />
      <scope startLine="284" endLine="286" />
      <comment>parse prefix</comment>
      <comment>parse components</comment>
      <comment>parse suffix</comment>
      <comment>build vector</comment>
    </method>
  </class>
</source>
