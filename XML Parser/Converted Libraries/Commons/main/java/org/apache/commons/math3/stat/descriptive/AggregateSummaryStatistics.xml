<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.descriptive">
  <import name="java.io.Serializable" />
  <import name="java.util.Collection" />
  <import name="java.util.Iterator" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <class name="AggregateSummaryStatistics" startLine="26">
    <implements name="StatisticalSummary" />
    <implements name="Serializable" />
    <javadoc>
      <text>* <p>
 * An aggregator for {@code SummaryStatistics} from several data sets or
 * data set partitions.  In its simplest usage mode, the client creates an
 * instance via the zero-argument constructor, then uses{@link #createContributingStatistics()} to obtain a {@code SummaryStatistics}for each individual data set / partition.  The per-set statistics objects
 * are used as normal, and at any time the aggregate statistics for all the
 * contributors can be obtained from this object.
 * </p><p>
 * Clients with specialized requirements can use alternative constructors to
 * control the statistics implementations and initial values used by the
 * contributing and the internal aggregate {@code SummaryStatistics} objects.
 * </p><p>
 * A static {@link #aggregate(Collection)} method is also included that computes
 * aggregate statistics directly from a Collection of SummaryStatistics instances.
 * </p><p>
 * When {@link #createContributingStatistics()} is used to create SummaryStatistics
 * instances to be aggregated concurrently, the created instances'{@link SummaryStatistics#addValue(double)} methods must synchronize on the aggregating
 * instance maintained by this class.  In multithreaded environments, if the functionality
 * provided by {@link #aggregate(Collection)} is adequate, that method should be used
 * to avoid unnecessary computation and synchronization delays.</p></text>
      <since>2.0</since>
      <version>$Id: AggregateSummaryStatistics.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* A SummaryStatistics serving as a prototype for creating SummaryStatistics
 * contributing to this aggregate</text>
    </javadoc>
    <declaration type="SummaryStatistics" name="statisticsPrototype" />
    <javadoc>
      <text>* The SummaryStatistics in which aggregate statistics are accumulated.</text>
    </javadoc>
    <declaration type="SummaryStatistics" name="statistics" />
    <javadoc>
      <text>* Initializes a new AggregateSummaryStatistics with default statistics
 * implementations.</text>
    </javadoc>
    <method type="constructor" name="AggregateSummaryStatistics" startLine="77" endLine="80">
      <comment>No try-catch or throws NAE because arg is guaranteed non-null</comment>
    </method>
    <javadoc>
      <text>* Initializes a new AggregateSummaryStatistics with the specified statistics
 * object as a prototype for contributing statistics and for the internal
 * aggregate statistics.  This provides for customized statistics implementations
 * to be used by contributing and aggregate statistics.</text>
      <param>prototypeStatistics a {@code SummaryStatistics} serving as a
 * prototype both for the internal aggregate statistics and for
 * contributing statistics obtained via the{@code createContributingStatistics()} method.  Being a prototype
 * means that other objects are initialized by copying this object's state.
 * If {@code null}, a new, default statistics object is used.  Any statistic
 * values in the prototype are propagated to contributing statistics
 * objects and (once) into these aggregate statistics.</param>
      <throws>NullArgumentException if prototypeStatistics is null</throws>
      <see>#createContributingStatistics()</see>
    </javadoc>
    <method type="constructor" name="AggregateSummaryStatistics" startLine="99" endLine="102" />
    <javadoc>
      <text>* Initializes a new AggregateSummaryStatistics with the specified statistics
 * object as a prototype for contributing statistics and for the internal
 * aggregate statistics.  This provides for different statistics implementations
 * to be used by contributing and aggregate statistics and for an initial
 * state to be supplied for the aggregate statistics.</text>
      <param>prototypeStatistics a {@code SummaryStatistics} serving as a
 * prototype both for the internal aggregate statistics and for
 * contributing statistics obtained via the{@code createContributingStatistics()} method.  Being a prototype
 * means that other objects are initialized by copying this object's state.
 * If {@code null}, a new, default statistics object is used.  Any statistic
 * values in the prototype are propagated to contributing statistics
 * objects, but not into these aggregate statistics.</param>
      <param>initialStatistics a {@code SummaryStatistics} to serve as the
 * internal aggregate statistics object.  If {@code null}, a new, default
 * statistics object is used.</param>
      <see>#createContributingStatistics()</see>
    </javadoc>
    <method type="constructor" name="AggregateSummaryStatistics" startLine="125" endLine="130" />
    <javadoc>
      <text>* {@inheritDoc}.  This version returns the maximum over all the aggregated
 * data.</text>
      <see>StatisticalSummary#getMax()</see>
    </javadoc>
    <method type="double" name="getMax" startLine="138" endLine="142">
      <scope startLine="139" endLine="141" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}.  This version returns the mean of all the aggregated data.</text>
      <see>StatisticalSummary#getMean()</see>
    </javadoc>
    <method type="double" name="getMean" startLine="149" endLine="153">
      <scope startLine="150" endLine="152" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}.  This version returns the minimum over all the aggregated
 * data.</text>
      <see>StatisticalSummary#getMin()</see>
    </javadoc>
    <method type="double" name="getMin" startLine="161" endLine="165">
      <scope startLine="162" endLine="164" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}.  This version returns a count of all the aggregated data.</text>
      <see>StatisticalSummary#getN()</see>
    </javadoc>
    <method type="long" name="getN" startLine="172" endLine="176">
      <scope startLine="173" endLine="175" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}.  This version returns the standard deviation of all the
 * aggregated data.</text>
      <see>StatisticalSummary#getStandardDeviation()</see>
    </javadoc>
    <method type="double" name="getStandardDeviation" startLine="184" endLine="188">
      <scope startLine="185" endLine="187" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}.  This version returns a sum of all the aggregated data.</text>
      <see>StatisticalSummary#getSum()</see>
    </javadoc>
    <method type="double" name="getSum" startLine="195" endLine="199">
      <scope startLine="196" endLine="198" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}.  This version returns the variance of all the aggregated
 * data.</text>
      <see>StatisticalSummary#getVariance()</see>
    </javadoc>
    <method type="double" name="getVariance" startLine="207" endLine="211">
      <scope startLine="208" endLine="210" />
    </method>
    <javadoc>
      <text>* Returns the sum of the logs of all the aggregated data.</text>
      <return>the sum of logs</return>
      <see>SummaryStatistics#getSumOfLogs()</see>
    </javadoc>
    <method type="double" name="getSumOfLogs" startLine="219" endLine="223">
      <scope startLine="220" endLine="222" />
    </method>
    <javadoc>
      <text>* Returns the geometric mean of all the aggregated data.</text>
      <return>the geometric mean</return>
      <see>SummaryStatistics#getGeometricMean()</see>
    </javadoc>
    <method type="double" name="getGeometricMean" startLine="231" endLine="235">
      <scope startLine="232" endLine="234" />
    </method>
    <javadoc>
      <text>* Returns the sum of the squares of all the aggregated data.</text>
      <return>The sum of squares</return>
      <see>SummaryStatistics#getSumsq()</see>
    </javadoc>
    <method type="double" name="getSumsq" startLine="243" endLine="247">
      <scope startLine="244" endLine="246" />
    </method>
    <javadoc>
      <text>* Returns a statistic related to the Second Central Moment.  Specifically,
 * what is returned is the sum of squared deviations from the sample mean
 * among the all of the aggregated data.</text>
      <return>second central moment statistic</return>
      <see>SummaryStatistics#getSecondMoment()</see>
    </javadoc>
    <method type="double" name="getSecondMoment" startLine="257" endLine="261">
      <scope startLine="258" endLine="260" />
    </method>
    <javadoc>
      <text>* Return a {@link StatisticalSummaryValues} instance reporting current
 * aggregate statistics.</text>
      <return>Current values of aggregate statistics</return>
    </javadoc>
    <method type="StatisticalSummary" name="getSummary" startLine="269" endLine="274">
      <scope startLine="270" endLine="273" />
    </method>
    <javadoc>
      <text>* Creates and returns a {@code SummaryStatistics} whose data will be
 * aggregated with those of this {@code AggregateSummaryStatistics}.</text>
      <return>a {@code SummaryStatistics} whose data will be aggregated with
 * those of this {@code AggregateSummaryStatistics}.  The initial state
 * is a copy of the configured prototype statistics.</return>
    </javadoc>
    <method type="SummaryStatistics" name="createContributingStatistics" startLine="284" endLine="292">
      <declaration type="SummaryStatistics" name="contributingStatistics" />
      <comment>No try - catch or advertising NAE because neither argument will ever be null</comment>
    </method>
    <javadoc>
      <text>* Computes aggregate summary statistics. This method can be used to combine statistics
 * computed over partitions or subsamples - i.e., the StatisticalSummaryValues returned
 * should contain the same values that would have been obtained by computing a single
 * StatisticalSummary over the combined dataset.
 * <p>
 * Returns null if the collection is empty or null.
 * </p></text>
      <param>statistics collection of SummaryStatistics to aggregate</param>
      <return>summary statistics for the combined dataset</return>
    </javadoc>
    <method type="StatisticalSummaryValues" name="aggregate" startLine="306" endLine="346">
      <scope startLine="307" endLine="309" />
      <declaration type="Iterator<SummaryStatistics>" name="iterator" />
      <scope startLine="311" endLine="313" />
      <declaration type="SummaryStatistics" name="current" />
      <declaration type="long" name="n" />
      <declaration type="double" name="min" />
      <declaration type="double" name="sum" />
      <declaration type="double" name="max" />
      <declaration type="double" name="m2" />
      <declaration type="double" name="mean" />
      <scope startLine="321" endLine="336">
        <scope startLine="323" endLine="325" />
        <scope startLine="326" endLine="328" />
        <declaration type="double" name="oldN" />
        <declaration type="double" name="curN" />
        <declaration type="double" name="meanDiff" />
      </scope>
      <declaration type="double" name="variance" />
      <scope startLine="338" endLine="340" />
      <scope startLine="340" endLine="342" />
      <scope startLine="342" endLine="344" />
    </method>
    <class name="AggregatingSummaryStatistics" extends="SummaryStatistics" startLine="348">
      <javadoc>
        <text>* A SummaryStatistics that also forwards all values added to it to a second{@code SummaryStatistics} for aggregation.</text>
        <since>2.0</since>
      </javadoc>
      <javadoc>
        <text>* The serialization version of this class</text>
      </javadoc>
      <declaration type="long" name="serialVersionUID" />
      <javadoc>
        <text>* An additional SummaryStatistics into which values added to these
 * statistics (and possibly others) are aggregated</text>
      </javadoc>
      <declaration type="SummaryStatistics" name="aggregateStatistics" />
      <javadoc>
        <text>* Initializes a new AggregatingSummaryStatistics with the specified
 * aggregate statistics object</text>
        <param>aggregateStatistics a {@code SummaryStatistics} into which
 * values added to this statistics object should be aggregated</param>
      </javadoc>
      <method type="constructor" name="AggregatingSummaryStatistics" startLine="374" endLine="376" />
      <javadoc>
        <text>* {@inheritDoc}.  This version adds the provided value to the configured
 * aggregate after adding it to these statistics.</text>
        <see>SummaryStatistics#addValue(double)</see>
      </javadoc>
      <method type="void" name="addValue" startLine="385" endLine="390">
        <scope startLine="387" endLine="389" />
      </method>
      <javadoc>
        <text>* Returns true iff <code>object</code> is a
 * <code>SummaryStatistics</code> instance and all statistics have the
 * same values as this.</text>
        <param>object the object to test equality against.</param>
        <return>true if object equals this</return>
      </javadoc>
      <method type="boolean" name="equals" startLine="400" endLine="410">
        <scope startLine="401" endLine="403" />
        <scope startLine="404" endLine="406" />
        <declaration type="AggregatingSummaryStatistics" name="stat" />
      </method>
      <javadoc>
        <text>* Returns hash code based on values of statistics</text>
        <return>hash code</return>
      </javadoc>
      <method type="int" name="hashCode" startLine="417" endLine="419" />
    </class>
  </class>
</source>
