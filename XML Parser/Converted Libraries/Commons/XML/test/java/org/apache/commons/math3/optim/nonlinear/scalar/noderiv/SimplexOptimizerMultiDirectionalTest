<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv">
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.optim.MaxEval"/>
        <import package="org.apache.commons.math3.optim.InitialGuess"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.optim.SimpleValueChecker"/>
        <import package="org.apache.commons.math3.optim.SimpleBounds"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.GoalType"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="SimplexOptimizerMultiDirectionalTest" line="33">
            <method name="testBoundsUnsupported" type="void" line="35">
                <declaration name="optimizer" type="SimplexOptimizer" line="36"/>
                <declaration name="fourExtrema" type="FourExtrema" line="37"/>
            </method>
            <method name="testMinimize1" type="void" line="49">
                <comment line="50">
                    Check that the number of iterations is updated (MATH-949).                    
                </comment>
                <declaration name="optimizer" type="SimplexOptimizer" line="50"/>
                <declaration name="fourExtrema" type="FourExtrema" line="51"/>
                <declaration name="optimum" type="PointValuePair" line="53"/>
            </method>
            <method name="testMinimize2" type="void" line="70">
                <comment line="71">
                    Check that the number of iterations is updated (MATH-949).                    
                </comment>
                <declaration name="optimizer" type="SimplexOptimizer" line="71"/>
                <declaration name="fourExtrema" type="FourExtrema" line="72"/>
                <declaration name="optimum" type="PointValuePair" line="74"/>
            </method>
            <method name="testMaximize1" type="void" line="91">
                <comment line="92">
                    Check that the number of iterations is updated (MATH-949).                    
                </comment>
                <declaration name="optimizer" type="SimplexOptimizer" line="92"/>
                <declaration name="fourExtrema" type="FourExtrema" line="93"/>
                <declaration name="optimum" type="PointValuePair" line="95"/>
            </method>
            <method name="testMaximize2" type="void" line="112">
                <comment line="113">
                    Check that the number of iterations is updated (MATH-949).                    
                </comment>
                <declaration name="optimizer" type="SimplexOptimizer" line="113"/>
                <declaration name="fourExtrema" type="FourExtrema" line="114"/>
                <declaration name="optimum" type="PointValuePair" line="116"/>
            </method>
            <method name="testRosenbrock" type="void" line="133">
                <anonymous_class line="135">
                    <method name="value" type="double" line="136">
                        <params>
                            <param name="x" type="double[]"/>
                        </params>
                        <declaration name="a" type="double" line="138"/>
                        <declaration name="b" type="double" line="139"/>
                    </method>
                </anonymous_class>
                <declaration name="rosenbrock" type="MultivariateFunction" line="134"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="145"/>
                <declaration name="optimum" type="PointValuePair" line="146"/>
            </method>
            <method name="testPowell" type="void" line="163">
                <anonymous_class line="165">
                    <method name="value" type="double" line="166">
                        <params>
                            <param name="x" type="double[]"/>
                        </params>
                        <declaration name="a" type="double" line="168"/>
                        <declaration name="b" type="double" line="169"/>
                        <declaration name="c" type="double" line="170"/>
                        <declaration name="d" type="double" line="171"/>
                    </method>
                </anonymous_class>
                <declaration name="powell" type="MultivariateFunction" line="164"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="177"/>
                <declaration name="optimum" type="PointValuePair" line="178"/>
            </method>
            <method name="testMath283" type="void" line="191">
                <comment line="192">
                    fails because MultiDirectional.iterateSimplex is looping forever                    
                </comment>
                <comment line="192">
                    the while(true) should be replaced with a convergence check                    
                </comment>
                <declaration name="optimizer" type="SimplexOptimizer" line="194"/>
                <declaration name="function" type="Gaussian2D" line="195"/>
                <declaration name="estimate" type="PointValuePair" line="196"/>
                <declaration name="EPSILON" type="double" line="201"/>
                <declaration name="expectedMaximum" type="double" line="202"/>
                <declaration name="actualMaximum" type="double" line="203"/>
                <declaration name="expectedPosition" type="double[]" line="206"/>
                <declaration name="actualPosition" type="double[]" line="207"/>
            </method>
            <class name="FourExtrema" line="212">
                <comment line="213">
                    The following function has 4 local extrema.                    
                </comment>
                <comment line="213">
                    nal double valueXmYm = 0.2373295333134216789769; // Local maximum.                    
                </comment>
                <comment line="213">
                    nal double valueXmYp = -valueXmYm; // Local minimum.                    
                </comment>
                <comment line="213">
                    nal double valueXpYm = -0.7290400707055187115322; // Global minimum.                    
                </comment>
                <comment line="213">
                    nal double valueXpYp = -valueXpYm; // Global maximum.                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="xM" type="double" line="214"/>
                <declaration name="yM" type="double" line="215"/>
                <declaration name="xP" type="double" line="216"/>
                <declaration name="yP" type="double" line="217"/>
                <declaration name="valueXmYm" type="double" line="218"/>
                <declaration name="valueXmYp" type="double" line="219"/>
                <declaration name="valueXpYm" type="double" line="220"/>
                <declaration name="valueXpYp" type="double" line="221"/>
                <method name="value" type="double" line="223">
                    <params>
                        <param name="variables" type="double[]"/>
                    </params>
                    <declaration name="x" type="double" line="224"/>
                    <declaration name="y" type="double" line="225"/>
                </method>
            </class>
            <class name="Gaussian2D" line="231">
                <comment line="213">
                    The following function has 4 local extrema.                    
                </comment>
                <comment line="213">
                    nal double valueXmYm = 0.2373295333134216789769; // Local maximum.                    
                </comment>
                <comment line="213">
                    nal double valueXmYp = -valueXmYm; // Local minimum.                    
                </comment>
                <comment line="213">
                    nal double valueXpYm = -0.7290400707055187115322; // Global minimum.                    
                </comment>
                <comment line="213">
                    nal double valueXpYp = -valueXpYm; // Global maximum.                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="maximumPosition" type="double[]" line="232"/>
                <declaration name="std" type="double" line="233"/>
                <method name="Gaussian2D" type="constructor" line="235">
                    <params>
                        <param name="xOpt" type="double"/>
                        <param name="yOpt" type="double"/>
                        <param name="std" type="double"/>
                    </params>
                </method>
                <method name="getMaximum" type="double" line="240"/>
                <method name="getMaximumPosition" type="double[]" line="244"/>
                <method name="value" type="double" line="248">
                    <params>
                        <param name="point" type="double[]"/>
                    </params>
                    <declaration name="x" type="double" line="249"/>
                    <declaration name="twoS2" type="double" line="250"/>
                </method>
            </class>
            <declaration name="count" type="int" line="255"/>
        </class>
    </source>