<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ml.clustering">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collection"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.ml.distance.EuclideanDistance"/>
        <import package="org.apache.commons.math3.random.JDKRandomGenerator"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Before"/>
        <import package="org.junit.Test"/>
        <class name="KMeansPlusPlusClustererTest" line="33">
            <declaration name="random" type="RandomGenerator" line="35"/>
            <method name="setUp" type="void" line="38"/>
            <javadoc line="43">
                JIRA: MATH-305
                  Two points, one cluster, one iteration                
            </javadoc>
            <method name="testPerformClusterAnalysisDegenerate" type="void" line="49">
                <declaration name="transformer" type="KMeansPlusPlusClusterer&lt;DoublePoint&gt;" line="50"/>
                <declaration name="points" type="DoublePoint[]" line="53"/>
                <declaration name="clusters" type="List&lt;? extends Cluster&lt;DoublePoint&gt;&gt;" line="56"/>
                <declaration name="pt1" type="DoublePoint" line="59"/>
                <declaration name="pt2" type="DoublePoint" line="60"/>
            </method>
            <method name="testCertainSpace" type="void" line="67">
                <declaration name="strategies" type="KMeansPlusPlusClusterer.EmptyClusterStrategy[]" line="68"/>
                <scope line="73">
                    <declaration name="numberOfVariables" type="int" line="74"/>
                    <declaration name="position1" type="int" line="76"/>
                    <declaration name="position2" type="int" line="77"/>
                    <declaration name="position3" type="int" line="78"/>
                    <declaration name="position4" type="int" line="79"/>
                    <declaration name="multiplier" type="int" line="81"/>
                    <declaration name="breakingPoints" type="DoublePoint[]" line="83"/>
                    <scope line="85">
                        <declaration name="points" type="int" line="86"/>
                        <scope line="88"/>
                        <declaration name="DoublePoint" type="DoublePoint" line="91"/>
                    </scope>
                    <scope line="99">
                        <declaration name="transformer" type="KMeansPlusPlusClusterer&lt;DoublePoint&gt;" line="100"/>
                        <declaration name="clusters" type="List&lt;? extends Cluster&lt;DoublePoint&gt;&gt;" line="103"/>
                        <declaration name="sum" type="int" line="107"/>
                        <scope line="108"/>
                    </scope>
                </scope>
            </method>
            <class name="CloseDistance" line="117">
                <extends class="EuclideanDistance"/>
                <javadoc line="117">
                    A helper class for testSmallDistances(). This class is similar to DoublePoint, but
                      it defines a different distanceFrom() method that tends to return distances less than 1.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="122"/>
                <method name="compute" type="double" line="125">
                    <params>
                        <param name="a" type="double[]"/>
                        <param name="b" type="double[]"/>
                    </params>
                </method>
            </class>
            <javadoc line="130">
                Test points that are very close together. See issue MATH-546.                
            </javadoc>
            <method name="testSmallDistances" type="void" line="134">
                <comment line="135">
                    Create a bunch of CloseDoublePoints. Most are identical, but one is different by a                    
                </comment>
                <comment line="135">
                    small distance.                    
                </comment>
                <comment line="135">
                    Ask a KMeansPlusPlusClusterer to run zero iterations (i.e., to simply choose initial                    
                </comment>
                <comment line="135">
                    cluster centers).                    
                </comment>
                <comment line="135">
                    Check that one of the chosen centers is the unique point.                    
                </comment>
                <declaration name="repeatedArray" type="int[]" line="137"/>
                <declaration name="uniqueArray" type="int[]" line="138"/>
                <declaration name="repeatedPoint" type="DoublePoint" line="139"/>
                <declaration name="uniquePoint" type="DoublePoint" line="140"/>
                <declaration name="points" type="Collection&lt;DoublePoint&gt;" line="142"/>
                <declaration name="NUM_REPEATED_POINTS" type="int" line="143"/>
                <scope line="144"/>
                <declaration name="RANDOM_SEED" type="long" line="151"/>
                <declaration name="NUM_CLUSTERS" type="int" line="152"/>
                <declaration name="NUM_ITERATIONS" type="int" line="153"/>
                <declaration name="clusterer" type="KMeansPlusPlusClusterer&lt;DoublePoint&gt;" line="156"/>
                <declaration name="clusters" type="List&lt;CentroidCluster&lt;DoublePoint&gt;&gt;" line="159"/>
                <declaration name="uniquePointIsCenter" type="boolean" line="162"/>
                <scope line="163">
                    <scope line="164"/>
                </scope>
            </method>
            <javadoc line="171">
                2 variables cannot be clustered into 3 clusters. See issue MATH-436.                
            </javadoc>
            <method name="testPerformClusterAnalysisToManyClusters" type="void" line="175">
                <declaration name="transformer" type="KMeansPlusPlusClusterer&lt;DoublePoint&gt;" line="176"/>
                <declaration name="points" type="DoublePoint[]" line="179"/>
            </method>
        </class>
    </source>