<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NoBracketingException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.ode.JacobianMatrices.MismatchedEquations"/>
        <import package="org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator"/>
        <import package="org.apache.commons.math3.stat.descriptive.SummaryStatistics"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="JacobianMatricesTest" line="31">
            <method name="testLowAccuracyExternalDifferentiation" type="void" line="36">
                <comment line="37">
                    this test does not really test JacobianMatrices,                    
                </comment>
                <comment line="37">
                    it only shows that WITHOUT this class, attempting to recover                    
                </comment>
                <comment line="37">
                    the jacobians from external differentiation on simple integration                    
                </comment>
                <comment line="37">
                    results with low accuracy gives very poor results. In fact,                    
                </comment>
                <comment line="37">
                    the curves dy/dp = g(b) when b varies from 2.88 to 3.08 are                    
                </comment>
                <comment line="37">
                    essentially noise.                    
                </comment>
                <comment line="37">
                    This test is taken from Hairer, Norsett and Wanner book                    
                </comment>
                <comment line="37">
                    Solving Ordinary Differential Equations I (Nonstiff problems),                    
                </comment>
                <comment line="37">
                    the curves dy/dp = g(b) are in figure 6.5                    
                </comment>
                <declaration name="integ" type="FirstOrderIntegrator" line="46"/>
                <declaration name="hP" type="double" line="48"/>
                <declaration name="residualsP0" type="SummaryStatistics" line="49"/>
                <declaration name="residualsP1" type="SummaryStatistics" line="50"/>
                <scope line="51">
                    <declaration name="brusselator" type="Brusselator" line="52"/>
                    <declaration name="y" type="double[]" line="53"/>
                    <declaration name="yP" type="double[]" line="55"/>
                </scope>
            </method>
            <method name="testHighAccuracyExternalDifferentiation" type="void" line="69">
                <declaration name="integ" type="FirstOrderIntegrator" line="70"/>
                <declaration name="hP" type="double" line="72"/>
                <declaration name="residualsP0" type="SummaryStatistics" line="73"/>
                <declaration name="residualsP1" type="SummaryStatistics" line="74"/>
                <scope line="75">
                    <declaration name="brusselator" type="ParamBrusselator" line="76"/>
                    <declaration name="y" type="double[]" line="77"/>
                    <declaration name="yP" type="double[]" line="79"/>
                </scope>
            </method>
            <method name="testInternalDifferentiation" type="void" line="99">
                <declaration name="integ" type="AbstractIntegrator" line="100"/>
                <declaration name="hP" type="double" line="102"/>
                <declaration name="hY" type="double" line="103"/>
                <declaration name="residualsP0" type="SummaryStatistics" line="104"/>
                <declaration name="residualsP1" type="SummaryStatistics" line="105"/>
                <scope line="106">
                    <declaration name="brusselator" type="ParamBrusselator" line="107"/>
                    <declaration name="z" type="double[]" line="109"/>
                    <declaration name="dZdZ0" type="double[][]" line="110"/>
                    <declaration name="dZdP" type="double[]" line="111"/>
                    <declaration name="jacob" type="JacobianMatrices" line="113"/>
                    <declaration name="efode" type="ExpandableStatefulODE" line="118"/>
                </scope>
            </method>
            <method name="testAnalyticalDifferentiation" type="void" line="144">
                <declaration name="integ" type="AbstractIntegrator" line="145"/>
                <declaration name="residualsP0" type="SummaryStatistics" line="147"/>
                <declaration name="residualsP1" type="SummaryStatistics" line="148"/>
                <scope line="149">
                    <declaration name="brusselator" type="Brusselator" line="150"/>
                    <declaration name="z" type="double[]" line="151"/>
                    <declaration name="dZdZ0" type="double[][]" line="152"/>
                    <declaration name="dZdP" type="double[]" line="153"/>
                    <declaration name="jacob" type="JacobianMatrices" line="155"/>
                    <declaration name="efode" type="ExpandableStatefulODE" line="159"/>
                </scope>
            </method>
            <method name="testFinalResult" type="void" line="184">
                <declaration name="integ" type="AbstractIntegrator" line="186"/>
                <declaration name="y" type="double[]" line="188"/>
                <declaration name="circle" type="Circle" line="189"/>
                <declaration name="jacob" type="JacobianMatrices" line="191"/>
                <declaration name="efode" type="ExpandableStatefulODE" line="198"/>
                <declaration name="t" type="double" line="205"/>
                <scope line="208"/>
                <declaration name="dydy0" type="double[][]" line="212"/>
                <scope line="214">
                    <scope line="215"/>
                </scope>
                <declaration name="dydcx" type="double[]" line="219"/>
                <scope line="221"/>
                <declaration name="dydcy" type="double[]" line="224"/>
                <scope line="226"/>
                <declaration name="dydom" type="double[]" line="229"/>
                <scope line="231"/>
            </method>
            <method name="testParameterizable" type="void" line="240">
                <declaration name="integ" type="AbstractIntegrator" line="242"/>
                <declaration name="y" type="double[]" line="244"/>
                <declaration name="pcircle" type="ParameterizedCircle" line="245"/>
                <declaration name="hP" type="double" line="247"/>
                <declaration name="hY" type="double" line="248"/>
                <declaration name="jacob" type="JacobianMatrices" line="250"/>
                <declaration name="efode" type="ExpandableStatefulODE" line="262"/>
                <declaration name="t" type="double" line="269"/>
                <scope line="272"/>
                <declaration name="dydy0" type="double[][]" line="276"/>
                <scope line="278">
                    <scope line="279"/>
                </scope>
                <declaration name="dydp0" type="double[]" line="284"/>
                <scope line="286"/>
                <declaration name="dydp1" type="double[]" line="290"/>
                <scope line="292"/>
            </method>
            <class name="Brusselator" extends="AbstractParameterizable" line="297">
                <implements interface="MainStateJacobianProvider"/>
                <implements interface="ParameterJacobianProvider"/>
                <declaration name="B" type="String" line="300"/>
                <declaration name="b" type="double" line="302"/>
                <method name="Brusselator" type="constructor" line="304"/>
                <method name="getDimension" type="int" line="309"/>
                <method name="computeDerivatives" type="void" line="313">
                    <declaration name="prod" type="double" line="314"/>
                </method>
                <method name="computeMainStateJacobian" type="void" line="320">
                    <declaration name="p" type="double" line="321"/>
                    <declaration name="y02" type="double" line="322"/>
                </method>
                <method name="computeParameterJacobian" type="void" line="330">
                    <scope line="331"/>
                    <scope line="334"/>
                </method>
                <method name="dYdP0" type="double" line="340"/>
                <method name="dYdP1" type="double" line="344"/>
            </class>
            <class name="ParamBrusselator" extends="AbstractParameterizable" line="350">
                <implements interface="FirstOrderDifferentialEquations"/>
                <implements interface="ParameterizedODE"/>
                <declaration name="B" type="String" line="353"/>
                <declaration name="b" type="double" line="355"/>
                <method name="ParamBrusselator" type="constructor" line="357"/>
                <method name="getDimension" type="int" line="362"/>
                <javadoc line="366">
                    {@inheritDoc}                    
                </javadoc>
                <method name="getParameter" type="double" line="368"/>
                <javadoc line="373">
                    {@inheritDoc}                    
                </javadoc>
                <method name="setParameter" type="void" line="375"/>
                <method name="computeDerivatives" type="void" line="380">
                    <declaration name="prod" type="double" line="381"/>
                </method>
                <method name="dYdP0" type="double" line="386"/>
                <method name="dYdP1" type="double" line="390"/>
            </class>
            <class name="Circle" extends="AbstractParameterizable" line="396">
                <implements interface="MainStateJacobianProvider"/>
                <implements interface="ParameterJacobianProvider"/>
                <javadoc line="396">
                    ODE representing a point moving on a circle with provided center and angular rate.                    
                </javadoc>
                <declaration name="CX" type="String" line="400"/>
                <declaration name="CY" type="String" line="401"/>
                <declaration name="OMEGA" type="String" line="402"/>
                <declaration name="y0" type="double[]" line="404"/>
                <declaration name="cx" type="double" line="405"/>
                <declaration name="cy" type="double" line="406"/>
                <declaration name="omega" type="double" line="407"/>
                <method name="Circle" type="constructor" line="409"/>
                <method name="getDimension" type="int" line="417"/>
                <method name="computeDerivatives" type="void" line="421"/>
                <method name="computeMainStateJacobian" type="void" line="427"/>
                <method name="computeParameterJacobian" type="void" line="436">
                    <scope line="438"/>
                    <scope line="441"/>
                    <scope line="444"/>
                </method>
                <method name="exactY" type="double[]" line="450">
                    <declaration name="cos" type="double" line="451"/>
                    <declaration name="sin" type="double" line="452"/>
                    <declaration name="dx0" type="double" line="453"/>
                    <declaration name="dy0" type="double" line="454"/>
                </method>
                <method name="exactDyDy0" type="double[][]" line="461">
                    <declaration name="cos" type="double" line="462"/>
                    <declaration name="sin" type="double" line="463"/>
                </method>
                <method name="exactDyDcx" type="double[]" line="470">
                    <declaration name="cos" type="double" line="471"/>
                    <declaration name="sin" type="double" line="472"/>
                </method>
                <method name="exactDyDcy" type="double[]" line="476">
                    <declaration name="cos" type="double" line="477"/>
                    <declaration name="sin" type="double" line="478"/>
                </method>
                <method name="exactDyDom" type="double[]" line="482">
                    <declaration name="cos" type="double" line="483"/>
                    <declaration name="sin" type="double" line="484"/>
                    <declaration name="dx0" type="double" line="485"/>
                    <declaration name="dy0" type="double" line="486"/>
                </method>
            </class>
            <class name="ParameterizedCircle" extends="AbstractParameterizable" line="492">
                <implements interface="FirstOrderDifferentialEquations"/>
                <implements interface="ParameterizedODE"/>
                <javadoc line="492">
                    ODE representing a point moving on a circle with provided center and angular rate.                    
                </javadoc>
                <declaration name="CX" type="String" line="496"/>
                <declaration name="CY" type="String" line="497"/>
                <declaration name="OMEGA" type="String" line="498"/>
                <declaration name="y0" type="double[]" line="500"/>
                <declaration name="cx" type="double" line="501"/>
                <declaration name="cy" type="double" line="502"/>
                <declaration name="omega" type="double" line="503"/>
                <method name="ParameterizedCircle" type="constructor" line="505"/>
                <method name="getDimension" type="int" line="513"/>
                <method name="computeDerivatives" type="void" line="517"/>
                <method name="getParameter" type="double" line="523">
                    <scope line="524"/>
                    <scope line="526"/>
                    <scope line="528"/>
                    <scope line="530"/>
                </method>
                <method name="setParameter" type="void" line="536">
                    <scope line="537"/>
                    <scope line="539"/>
                    <scope line="541"/>
                    <scope line="543"/>
                </method>
                <method name="exactY" type="double[]" line="548">
                    <declaration name="cos" type="double" line="549"/>
                    <declaration name="sin" type="double" line="550"/>
                    <declaration name="dx0" type="double" line="551"/>
                    <declaration name="dy0" type="double" line="552"/>
                </method>
                <method name="exactDyDy0" type="double[][]" line="559">
                    <declaration name="cos" type="double" line="560"/>
                    <declaration name="sin" type="double" line="561"/>
                </method>
                <method name="exactDyDcx" type="double[]" line="568">
                    <declaration name="cos" type="double" line="569"/>
                    <declaration name="sin" type="double" line="570"/>
                </method>
                <method name="exactDyDcy" type="double[]" line="574">
                    <declaration name="cos" type="double" line="575"/>
                    <declaration name="sin" type="double" line="576"/>
                </method>
                <method name="exactDyDom" type="double[]" line="580">
                    <declaration name="cos" type="double" line="581"/>
                    <declaration name="sin" type="double" line="582"/>
                    <declaration name="dx0" type="double" line="583"/>
                    <declaration name="dy0" type="double" line="584"/>
                </method>
            </class>
        </class>
    </source>