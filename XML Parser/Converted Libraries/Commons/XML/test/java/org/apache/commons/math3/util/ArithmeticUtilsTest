<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.math.BigInteger"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.random.RandomDataImpl"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="ArithmeticUtilsTest" line="34">
            <javadoc line="34">
                Test cases for the {@link ArithmeticUtils} class.                
                <@version>
                    n $Id: ArithmeticUtilsTest.java 1371680 2012-08-10 12:15:23Z luc $                    
                </@version>
            </javadoc>
            <declaration name="binomialCache" type="List&lt;Map&lt;Integer,Long&gt;&gt;" line="41"/>
            <javadoc line="41">
                cached binomial coefficients                
            </javadoc>
            <javadoc line="44">
                Verify that b(0,0) = 1                
            </javadoc>
            <method name="test0Choose0" type="void" line="46"/>
            <method name="testAddAndCheck" type="void" line="53">
                <declaration name="big" type="int" line="54"/>
                <declaration name="bigNeg" type="int" line="55"/>
                <scope line="57"/>
                <scope line="60"/>
                <scope line="62"/>
                <scope line="65"/>
            </method>
            <method name="testAddAndCheckLong" type="void" line="70">
                <declaration name="max" type="long" line="71"/>
                <declaration name="min" type="long" line="72"/>
            </method>
            <method name="testBinomialCoefficient" type="void" line="89">
                <declaration name="bcoef5" type="long[]" line="90"/>
                <declaration name="bcoef6" type="long[]" line="97"/>
                <scope line="105"/>
                <scope line="108"/>
                <scope line="112">
                    <scope line="113"/>
                </scope>
                <declaration name="n" type="int[]" line="120"/>
                <declaration name="k" type="int[]" line="121"/>
                <scope line="122">
                    <declaration name="expected" type="long" line="123"/>
                </scope>
            </method>
            <method name="testBinomialCoefficientFail" type="void" line="134">
                <scope line="135"/>
                <scope line="138"/>
                <scope line="142"/>
                <scope line="145"/>
                <scope line="149"/>
                <scope line="152"/>
                <scope line="156"/>
                <scope line="159"/>
                <scope line="162"/>
                <scope line="165"/>
                <scope line="168"/>
                <scope line="171"/>
                <scope line="175"/>
                <scope line="178"/>
                <scope line="181"/>
                <scope line="184"/>
                <declaration name="x" type="double" line="187"/>
            </method>
            <javadoc line="192">
                Tests correctness for large n and sharpness of upper bound in API doc
                 * JIRA: MATH-241                
            </javadoc>
            <method name="testBinomialCoefficientLarge" type="void" line="197">
                <comment line="198">
                    This tests all legal and illegal values for n &lt;= 200.                    
                </comment>
                <comment line="198">
                    This one should throw                    
                </comment>
                <scope line="199">
                    <scope line="200">
                        <declaration name="ourResult" type="long" line="201"/>
                        <declaration name="exactResult" type="long" line="202"/>
                        <declaration name="shouldThrow" type="boolean" line="203"/>
                        <declaration name="didThrow" type="boolean" line="204"/>
                        <scope line="205"/>
                        <scope line="207"/>
                        <scope line="210"/>
                        <scope line="212"/>
                        <scope line="219"/>
                    </scope>
                </scope>
                <declaration name="ourResult" type="long" line="228"/>
                <declaration name="exactResult" type="long" line="229"/>
                <scope line="237"/>
                <scope line="240"/>
                <declaration name="n" type="int" line="244"/>
            </method>
            <method name="testFactorial" type="void" line="254">
                <scope line="255"/>
            </method>
            <method name="testFactorialFail" type="void" line="267">
                <scope line="268"/>
                <scope line="271"/>
                <scope line="274"/>
                <scope line="277"/>
                <scope line="280"/>
                <scope line="283"/>
                <scope line="286"/>
                <scope line="289"/>
            </method>
            <method name="testGcd" type="void" line="296">
                <declaration name="a" type="int" line="297"/>
                <declaration name="b" type="int" line="298"/>
                <declaration name="c" type="int" line="299"/>
                <scope line="323"/>
                <scope line="327"/>
                <scope line="330"/>
                <scope line="334"/>
                <scope line="337"/>
                <scope line="341"/>
            </method>
            <method name="testGcdConsistency" type="void" line="347">
                <declaration name="primeList" type="int[]" line="348"/>
                <declaration name="primes" type="ArrayList&lt;Integer&gt;" line="349"/>
                <scope line="350"/>
                <declaration name="randomData" type="RandomDataImpl" line="353"/>
                <scope line="354">
                    <declaration name="sample" type="Object[]" line="355"/>
                    <declaration name="p1" type="int" line="356"/>
                    <declaration name="p2" type="int" line="357"/>
                    <declaration name="p3" type="int" line="358"/>
                    <declaration name="p4" type="int" line="359"/>
                    <declaration name="i1" type="int" line="360"/>
                    <declaration name="i2" type="int" line="361"/>
                    <declaration name="gcd" type="int" line="362"/>
                    <declaration name="l1" type="long" line="364"/>
                    <declaration name="l2" type="long" line="365"/>
                </scope>
            </method>
            <method name="testGcdLong" type="void" line="371">
                <declaration name="a" type="long" line="372"/>
                <declaration name="b" type="long" line="373"/>
                <declaration name="c" type="long" line="374"/>
                <scope line="400"/>
                <scope line="404"/>
                <scope line="407"/>
                <scope line="411"/>
                <scope line="414"/>
                <scope line="418"/>
            </method>
            <method name="testLcm" type="void" line="425">
                <comment line="426">
                    Assert that no intermediate value overflows:                    
                </comment>
                <comment line="426">
                    The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)                    
                </comment>
                <comment line="426">
                    Special case                    
                </comment>
                <declaration name="a" type="int" line="426"/>
                <declaration name="b" type="int" line="427"/>
                <declaration name="c" type="int" line="428"/>
                <scope line="447"/>
                <scope line="451"/>
                <scope line="455"/>
                <scope line="459"/>
                <scope line="463"/>
                <scope line="466"/>
            </method>
            <method name="testLcmLong" type="void" line="472">
                <comment line="473">
                    Assert that no intermediate value overflows:                    
                </comment>
                <comment line="473">
                    The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)                    
                </comment>
                <comment line="473">
                    Special case                    
                </comment>
                <declaration name="a" type="long" line="473"/>
                <declaration name="b" type="long" line="474"/>
                <declaration name="c" type="long" line="475"/>
                <scope line="496"/>
                <scope line="500"/>
                <scope line="504"/>
                <scope line="508"/>
                <scope line="514"/>
                <scope line="517"/>
            </method>
            <method name="testMulAndCheck" type="void" line="523">
                <declaration name="big" type="int" line="524"/>
                <declaration name="bigNeg" type="int" line="525"/>
                <scope line="527"/>
                <scope line="530"/>
                <scope line="532"/>
                <scope line="535"/>
            </method>
            <method name="testMulAndCheckLong" type="void" line="540">
                <declaration name="max" type="long" line="541"/>
                <declaration name="min" type="long" line="542"/>
            </method>
            <method name="testSubAndCheck" type="void" line="562">
                <declaration name="big" type="int" line="563"/>
                <declaration name="bigNeg" type="int" line="564"/>
                <scope line="568"/>
                <scope line="571"/>
                <scope line="573"/>
                <scope line="576"/>
            </method>
            <method name="testSubAndCheckErrorMessage" type="void" line="581">
                <declaration name="big" type="int" line="582"/>
                <scope line="583"/>
                <scope line="586"/>
            </method>
            <method name="testSubAndCheckLong" type="void" line="592">
                <comment line="593">
                    min == -1-max                    
                </comment>
                <declaration name="max" type="long" line="593"/>
                <declaration name="min" type="long" line="594"/>
            </method>
            <method name="testPow" type="void" line="608">
                <scope line="612"/>
                <scope line="615"/>
                <scope line="621"/>
                <scope line="624"/>
                <scope line="630"/>
                <scope line="633"/>
                <scope line="639"/>
                <scope line="642"/>
                <declaration name="twentyOne" type="BigInteger" line="646"/>
                <scope line="649"/>
                <scope line="652"/>
                <scope line="658"/>
                <scope line="661"/>
                <scope line="667"/>
                <scope line="670"/>
                <declaration name="bigOne" type="BigInteger" line="674"/>
            </method>
            <method name="testIsPowerOfTwo" type="void" line="685">
                <declaration name="n" type="int" line="686"/>
                <declaration name="expected" type="boolean[]" line="687"/>
                <scope line="689"/>
                <scope line="692">
                    <declaration name="actual" type="boolean" line="693"/>
                </scope>
            </method>
            <method name="testStirlingS2" type="void" line="699">
                <scope line="703">
                    <scope line="706"/>
                </scope>
            </method>
            <method name="testStirlingS2NegativeN" type="void" line="741"/>
            <method name="testStirlingS2LargeK" type="void" line="746"/>
            <method name="testStirlingS2Overflow" type="void" line="751"/>
            <javadoc line="755">
                Exact (caching) recursive implementation to test against                
            </javadoc>
            <method name="binomialCoefficient" type="long" line="758">
                <scope line="759">
                    <declaration name="cachedResult" type="Long" line="760"/>
                    <scope line="761"/>
                </scope>
                <declaration name="result" type="long" line="765"/>
                <scope line="766"/>
                <scope line="768"/>
                <scope line="770">
                    <scope line="772"/>
                    <scope line="775"/>
                </scope>
                <scope line="781"/>
                <scope line="784"/>
            </method>
            <javadoc line="791">
                Exact direct multiplication implementation to test against                
            </javadoc>
            <method name="factorial" type="long" line="794">
                <declaration name="result" type="long" line="795"/>
                <scope line="796"/>
            </method>
            <method name="testAddAndCheckLongFailure" type="void" line="802">
                <scope line="803"/>
                <scope line="806"/>
            </method>
            <method name="testMulAndCheckLongFailure" type="void" line="811">
                <scope line="812"/>
                <scope line="815"/>
            </method>
            <method name="testSubAndCheckLongFailure" type="void" line="820">
                <scope line="821"/>
                <scope line="824"/>
            </method>
        </class>
    </source>