<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.math.BigDecimal"/>
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.fraction.BigFraction"/>
        <import package="org.apache.commons.math3.fraction.Fraction"/>
        <import package="org.apache.commons.math3.fraction.FractionConversionException"/>
        <import package="org.apache.commons.math3.fraction.FractionField"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="MatrixUtilsTest" line="31">
            <comment line="32">
                Taken from R manual http:stat.ethz.chR-manualR-patchedlibrarybasehtmlbacksolve.html                
            </comment>
            <javadoc line="31">
                Test cases for the {@link MatrixUtils} class.                
                <@version>
                    n $Id: MatrixUtilsTest.java 1403587 2012-10-30 00:21:20Z erans $                    
                </@version>
            </javadoc>
            <declaration name="testData" type="double[][]" line="39"/>
            <declaration name="nullMatrix" type="double[][]" line="40"/>
            <declaration name="row" type="double[]" line="41"/>
            <declaration name="bigRow" type="BigDecimal[]" line="42"/>
            <declaration name="stringRow" type="String[]" line="44"/>
            <declaration name="fractionRow" type="Fraction[]" line="45"/>
            <declaration name="rowMatrix" type="double[][]" line="47"/>
            <declaration name="bigRowMatrix" type="BigDecimal[][]" line="48"/>
            <declaration name="stringRowMatrix" type="String[][]" line="50"/>
            <declaration name="fractionRowMatrix" type="Fraction[][]" line="51"/>
            <declaration name="col" type="double[]" line="53"/>
            <declaration name="bigCol" type="BigDecimal[]" line="54"/>
            <declaration name="stringCol" type="String[]" line="56"/>
            <declaration name="fractionCol" type="Fraction[]" line="57"/>
            <declaration name="nullDoubleArray" type="double[]" line="59"/>
            <declaration name="colMatrix" type="double[][]" line="60"/>
            <declaration name="bigColMatrix" type="BigDecimal[][]" line="61"/>
            <declaration name="stringColMatrix" type="String[][]" line="63"/>
            <declaration name="fractionColMatrix" type="Fraction[][]" line="64"/>
            <method name="testCreateRealMatrix" type="void" line="68">
                <scope line="71"/>
                <scope line="74"/>
                <scope line="77"/>
                <scope line="80"/>
                <scope line="83"/>
                <scope line="86"/>
            </method>
            <method name="testcreateFieldMatrix" type="void" line="92">
                <scope line="97"/>
                <scope line="100"/>
                <scope line="103"/>
                <scope line="106"/>
                <scope line="109"/>
                <scope line="112"/>
            </method>
            <method name="testCreateRowRealMatrix" type="void" line="118">
                <scope line="121"/>
                <scope line="124"/>
                <scope line="127"/>
                <scope line="130"/>
            </method>
            <method name="testCreateRowFieldMatrix" type="void" line="136">
                <scope line="141"/>
                <scope line="144"/>
                <scope line="147"/>
                <scope line="150"/>
            </method>
            <method name="testCreateColumnRealMatrix" type="void" line="156">
                <scope line="159"/>
                <scope line="162"/>
                <scope line="165"/>
                <scope line="168"/>
            </method>
            <method name="testCreateColumnFieldMatrix" type="void" line="174">
                <scope line="180"/>
                <scope line="183"/>
                <scope line="186"/>
                <scope line="189"/>
            </method>
            <javadoc line="194">
                Verifies that the matrix is an identity matrix                
            </javadoc>
            <method name="checkIdentityMatrix" type="void" line="197">
                <scope line="198">
                    <scope line="199">
                        <scope line="200"/>
                        <scope line="202"/>
                    </scope>
                </scope>
            </method>
            <method name="testCreateIdentityMatrix" type="void" line="210">
                <scope line="214"/>
                <scope line="217"/>
            </method>
            <javadoc line="222">
                Verifies that the matrix is an identity matrix                
            </javadoc>
            <method name="checkIdentityFieldMatrix" type="void" line="225">
                <scope line="226">
                    <scope line="227">
                        <scope line="228"/>
                        <scope line="230"/>
                    </scope>
                </scope>
            </method>
            <method name="testcreateFieldIdentityMatrix" type="void" line="238">
                <scope line="242"/>
                <scope line="245"/>
            </method>
            <method name="testBigFractionConverter" type="void" line="251">
                <declaration name="bfData" type="BigFraction[][]" line="252"/>
                <declaration name="m" type="FieldMatrix&lt;BigFraction&gt;" line="257"/>
                <declaration name="converted" type="RealMatrix" line="258"/>
                <declaration name="reference" type="RealMatrix" line="259"/>
            </method>
            <method name="testFractionConverter" type="void" line="264">
                <declaration name="fData" type="Fraction[][]" line="265"/>
                <declaration name="m" type="FieldMatrix&lt;Fraction&gt;" line="270"/>
                <declaration name="converted" type="RealMatrix" line="271"/>
                <declaration name="reference" type="RealMatrix" line="272"/>
            </method>
            <method name="asFraction" type="Fraction[][]" line="276">
                <declaration name="d" type="Fraction" line="277"/>
                <scope line="278">
                    <scope line="279">
                        <declaration name="dataI" type="double[]" line="280"/>
                        <declaration name="dI" type="Fraction[]" line="281"/>
                        <scope line="282"/>
                    </scope>
                </scope>
                <scope line="287"/>
            </method>
            <method name="asFraction" type="Fraction[]" line="293">
                <declaration name="d" type="Fraction" line="294"/>
                <scope line="295">
                    <scope line="296"/>
                </scope>
                <scope line="299"/>
            </method>
            <method name="testSolveLowerTriangularSystem" type="void" line="306">
                <declaration name="rm" type="RealMatrix" line="307"/>
                <declaration name="b" type="RealVector" line="310"/>
            </method>
            <method name="testSolveUpperTriangularSystem" type="void" line="320">
                <declaration name="rm" type="RealMatrix" line="321"/>
                <declaration name="b" type="RealVector" line="324"/>
            </method>
            <javadoc line="329">
                This test should probably be replaced by one that could show
                 * whether this algorithm can sometimes perform better (precision- or
                 * performance-wise) than the direct inversion of the whole matrix.                
            </javadoc>
            <method name="testBlockInverse" type="void" line="335">
                <declaration name="data" type="double[][]" line="336"/>
                <declaration name="m" type="RealMatrix" line="343"/>
                <declaration name="len" type="int" line="344"/>
                <declaration name="tol" type="double" line="345"/>
                <scope line="347">
                    <declaration name="mInv" type="RealMatrix" line="348"/>
                    <declaration name="id" type="RealMatrix" line="349"/>
                    <scope line="352">
                        <scope line="353">
                            <declaration name="entry" type="double" line="354"/>
                            <scope line="355"/>
                            <scope line="358"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testIsSymmetric" type="void" line="368">
                <declaration name="eps" type="double" line="369"/>
                <declaration name="dataSym" type="double[][]" line="371"/>
                <declaration name="dataNonSym" type="double[][]" line="378"/>
            </method>
            <method name="testIsSymmetricTolerance" type="void" line="387">
                <declaration name="eps" type="double" line="388"/>
                <declaration name="dataSym1" type="double[][]" line="390"/>
                <declaration name="dataSym2" type="double[][]" line="396"/>
                <declaration name="dataNonSym1" type="double[][]" line="403"/>
                <declaration name="dataNonSym2" type="double[][]" line="409"/>
            </method>
            <method name="testCheckSymmetric1" type="void" line="418">
                <declaration name="dataSym" type="double[][]" line="419"/>
            </method>
            <method name="testCheckSymmetric2" type="void" line="428">
                <declaration name="dataNonSym" type="double[][]" line="429"/>
            </method>
        </class>
    </source>