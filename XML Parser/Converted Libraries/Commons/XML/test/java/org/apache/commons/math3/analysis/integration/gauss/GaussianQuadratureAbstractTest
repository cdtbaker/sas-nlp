<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.integration.gauss">
        <import package="org.apache.commons.math3.analysis.function.Power"/>
        <import package="org.junit.Test"/>
        <import package="org.junit.Assert"/>
        <class name="GaussianQuadratureAbstractTest" line="23">
            <javadoc line="23">
                Base class for standard testing of Gaussian quadrature rules,
                 * which are exact for polynomials up to a certain degree. In this test, each
                 * monomial in turn is tested against the specified quadrature rule.                
                <@version>
                    n $Id$                    
                </@version>
            </javadoc>
            <declaration name="eps" type="double" line="31"/>
            <javadoc line="31">
                The maximum absolute error (for zero testing).                
            </javadoc>
            <declaration name="numUlps" type="double" line="35"/>
            <javadoc line="35">
                The maximum relative error (in ulps).                
            </javadoc>
            <declaration name="integrator" type="GaussIntegrator" line="39"/>
            <javadoc line="39">
                The quadrature rule under test.                
            </javadoc>
            <declaration name="maxDegree" type="int" line="43"/>
            <javadoc line="43">
                Maximum degree of monomials to be tested.                
            </javadoc>
            <javadoc line="48">
                Creates a new instance of this abstract test with the specified
                 * quadrature rule.
                 * If the expected value is non-zero, equality of actual and expected values
                 * is checked in the relative sense &lt;center&gt;
                 * |x&lt;sub&gt;act&lt;/sub&gt;&amp;nbsp;-&amp;nbsp;x&lt;sub&gt;exp&lt;/sub&gt;|&amp;nbsp;&amp;le;&amp;nbsp; n&amp;nbsp;
                 * &lt;code&gt;Math.ulp(&lt;/code&gt;x&lt;sub&gt;exp&lt;/sub&gt;&lt;code&gt;)&lt;/code&gt;, &lt;/center&gt; where n is
                 * the maximum relative error (in ulps). If the expected value is zero, the
                 * test checks that &lt;center&gt; |x&lt;sub&gt;act&lt;/sub&gt;|&amp;nbsp;&amp;le;&amp;nbsp;&amp;epsilon;,
                 * &lt;/center&gt; where &amp;epsilon; is the maximum absolute error.                
                <@param>
                    m integrator Quadrature rule under test.                    
                </@param>
                <@param>
                    m maxDegree Maximum degree of monomials to be tested.                    
                </@param>
                <@param>
                    m eps &epsilon;.                    
                </@param>
                <@param>
                    m numUlps Value of the maximum relative error (in ulps).                    
                </@param>
            </javadoc>
            <method name="GaussianQuadratureAbstractTest" type="constructor" line="67"/>
            <method name="getExpectedValue" type="double" line="74"/>
            <javadoc line="74">
                Returns the expected value of the integral of the specified monomial.
                 * The integration is carried out on the natural interval of the quadrature
                 * rule under test.                
                <@param>
                    m n Degree of the monomial.                    
                </@param>
                <@return>
                    n the expected value of the integral of x<sup>n</sup>.                    
                </@return>
            </javadoc>
            <javadoc line="84">
                Checks that the value of the integral of each monomial
                 * &lt;code&gt;x&lt;sup&gt;0&lt;/sup&gt;, ... , x&lt;sup&gt;p&lt;/sup&gt;&lt;/code&gt;
                 * returned by the quadrature rule under test conforms with the expected
                 * value.
                 * Here {@code p} denotes the degree of the highest polynomial for which
                 * exactness is to be expected.                
            </javadoc>
            <method name="testAllMonomials" type="void" line="93">
                <scope line="94">
                    <declaration name="expected" type="double" line="95"/>
                    <declaration name="monomial" type="Power" line="97"/>
                    <declaration name="actual" type="double" line="98"/>
                    <scope line="102"/>
                    <scope line="107">
                        <declaration name="err" type="double" line="108"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>