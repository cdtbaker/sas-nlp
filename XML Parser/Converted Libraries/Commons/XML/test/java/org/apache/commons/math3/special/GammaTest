<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.special">
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="GammaTest" line="26">
            <javadoc line="26">
                @version $Id: GammaTest.java 1414531 2012-11-28 05:39:39Z celestin $                
            </javadoc>
            <method name="testRegularizedGamma" type="void" line="30">
                <declaration name="actualP" type="double" line="31"/>
                <declaration name="actualQ" type="double" line="32"/>
            </method>
            <method name="testLogGamma" type="void" line="37">
                <declaration name="actual" type="double" line="38"/>
            </method>
            <method name="testRegularizedGammaNanPositive" type="void" line="43"/>
            <method name="testRegularizedGammaPositiveNan" type="void" line="48"/>
            <method name="testRegularizedGammaNegativePositive" type="void" line="53"/>
            <method name="testRegularizedGammaPositiveNegative" type="void" line="58"/>
            <method name="testRegularizedGammaZeroPositive" type="void" line="63"/>
            <method name="testRegularizedGammaPositiveZero" type="void" line="68"/>
            <method name="testRegularizedGammaPositivePositive" type="void" line="73"/>
            <method name="testLogGammaNan" type="void" line="78"/>
            <method name="testLogGammaNegative" type="void" line="83"/>
            <method name="testLogGammaZero" type="void" line="88"/>
            <method name="testLogGammaPositive" type="void" line="93"/>
            <method name="testDigammaLargeArgs" type="void" line="98">
                <declaration name="eps" type="double" line="99"/>
            </method>
            <method name="testDigammaSmallArgs" type="void" line="114">
                <comment line="115">
                    values for negative powers of 10 from 1 to 30 as computed by webMathematica with 20 digits                    
                </comment>
                <comment line="115">
                    see functions.wolfram.com                    
                </comment>
                <declaration name="expected" type="double[]" line="117"/>
                <scope line="123"/>
            </method>
            <method name="testTrigamma" type="void" line="129">
                <comment line="130">
                    computed using webMathematica.  For example, to compute trigamma($i) = Polygamma(1, $i), use                    
                </comment>
                <comment line="130">
                                        
                </comment>
                <comment line="130">
                    http://functions.wolfram.com/webMathematica/Evaluated.jsp?name=PolyGamma2&amp;plottype=0&amp;vars={%221%22,%22$i%22}&amp;digits=20                    
                </comment>
                <declaration name="eps" type="double" line="130"/>
                <declaration name="data" type="double[]" line="134"/>
                <scope line="149"/>
            </method>
            <declaration name="LOG_GAMMA_REF" type="double[][]" line="154"/>
            <javadoc line="154">
                Reference data for the {@link Gamma#logGamma(double)} function. This data
                 * was generated with the following &lt;a
                 * href=&quot;http://maxima.sourceforge.net/&quot;&gt;Maxima&lt;/a&gt; script.
                 * &lt;pre&gt;
                 * kill(all);
                 * fpprec : 64;
                 * gamln(x) := log(gamma(x));
                 * x : append(makelist(bfloat(i / 8), i, 1, 80),
                 * [0.8b0, 1b2, 1b3, 1b4, 1b5, 1b6, 1b7, 1b8, 1b9, 1b10]);
                 * for i : 1 while i &lt;= length(x) do
                 * print(&quot;{&quot;, float(x[i]), &quot;,&quot;, float(gamln(x[i])), &quot;},&quot;);
                 * &lt;/pre&gt;                
            </javadoc>
            <method name="testLogGamma" type="void" line="307">
                <declaration name="ulps" type="int" line="308"/>
                <scope line="309">
                    <declaration name="data" type="double[]" line="310"/>
                    <declaration name="x" type="double" line="311"/>
                    <declaration name="expected" type="double" line="312"/>
                    <declaration name="actual" type="double" line="313"/>
                    <declaration name="tol" type="double" line="314"/>
                    <scope line="315"/>
                    <scope line="317"/>
                </scope>
            </method>
            <method name="testLogGammaPrecondition1" type="void" line="325"/>
            <method name="testLogGammaPrecondition2" type="void" line="330"/>
            <declaration name="INV_GAMMA1P_M1_REF" type="double[][]" line="334"/>
            <javadoc line="334">
                &lt;p&gt;
                 * Reference values for the {@link Gamma#invGamma1pm1(double)} method.
                 * These values were generated with the following &lt;a
                 * href=&quot;http://maxima.sourceforge.net/&quot;&gt;Maxima&lt;/a&gt; script
                 * &lt;/p&gt;
                 * &lt;pre&gt;
                 * kill(all);
                 * fpprec : 64;
                 * gam1(x) := 1 / gamma(1 + x) - 1;
                 * x : makelist(bfloat(i / 8), i, -4, 12);
                 * for i : 1 while i &lt;= length(x) do print(&quot;{&quot;,
                 * float(x[i]),
                 * &quot;,&quot;,
                 * float(gam1(x[i])),
                 * &quot;},&quot;);
                 * &lt;/pre&gt;                
            </javadoc>
            <method name="testInvGamma1pm1" type="void" line="376">
                <declaration name="ulps" type="int" line="378"/>
                <scope line="379">
                    <declaration name="ref" type="double[]" line="380"/>
                    <declaration name="x" type="double" line="381"/>
                    <declaration name="expected" type="double" line="382"/>
                    <declaration name="actual" type="double" line="383"/>
                    <declaration name="tol" type="double" line="384"/>
                </scope>
            </method>
            <method name="testInvGamma1pm1Precondition1" type="void" line="390"/>
            <method name="testInvGamma1pm1Precondition2" type="void" line="396"/>
            <declaration name="LOG_GAMMA1P_REF" type="double[][]" line="401"/>
            <method name="testLogGamma1p" type="void" line="422">
                <declaration name="ulps" type="int" line="424"/>
                <scope line="425">
                    <declaration name="ref" type="double[]" line="426"/>
                    <declaration name="x" type="double" line="427"/>
                    <declaration name="expected" type="double" line="428"/>
                    <declaration name="actual" type="double" line="429"/>
                    <declaration name="tol" type="double" line="430"/>
                </scope>
            </method>
            <method name="testLogGamma1pPrecondition1" type="void" line="436"/>
            <method name="testLogGamma1pPrecondition2" type="void" line="442"/>
            <declaration name="GAMMA_REF" type="double[][]" line="447"/>
            <javadoc line="447">
                Reference data for the {@link Gamma#gamma(double)} function. This
                 * data was generated with the following &lt;a
                 * href=&quot;http://maxima.sourceforge.net/&quot;&gt;Maxima&lt;/a&gt; script.
                 * &lt;pre&gt;
                 * kill(all);
                 * fpprec : 64;
                 * EPSILON : 10**(-fpprec + 1);
                 * isInteger(x) := abs(x - floor(x)) &lt;= EPSILON * abs(x);
                 * x : makelist(bfloat(i / 8), i, -160, 160);
                 * x : append(x, makelist(bfloat(i / 2), i, 41, 200));
                 * for i : 1 while i &lt;= length(x) do if not(isInteger(x[i])) then
                 * print(&quot;{&quot;, float(x[i]), &quot;,&quot;, float(gamma(x[i])), &quot;},&quot;);
                 * &lt;/pre&gt;                
            </javadoc>
            <method name="testGamma" type="void" line="931">
                <scope line="933">
                    <declaration name="ref" type="double[]" line="934"/>
                    <declaration name="x" type="double" line="935"/>
                    <declaration name="expected" type="double" line="936"/>
                    <declaration name="actual" type="double" line="937"/>
                    <declaration name="absX" type="double" line="938"/>
                    <declaration name="ulps" type="int" line="939"/>
                    <scope line="940"/>
                    <scope line="942"/>
                    <scope line="944"/>
                    <scope line="946"/>
                    <scope line="948"/>
                    <declaration name="tol" type="double" line="951"/>
                </scope>
            </method>
            <method name="testGammaNegativeInteger" type="void" line="957">
                <scope line="959"/>
            </method>
            <method name="checkRelativeError" type="void" line="965"/>
        </class>
    </source>