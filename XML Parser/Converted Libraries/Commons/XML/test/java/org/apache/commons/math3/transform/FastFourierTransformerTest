<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.transform">
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.function.Sin"/>
        <import package="org.apache.commons.math3.analysis.function.Sinc"/>
        <import package="org.apache.commons.math3.complex.Complex"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="FastFourierTransformerTest" line="32">
            <comment line="33">
                                
            </comment>
            <comment line="33">
                                
            </comment>
            <comment line="33">
                                
            </comment>
            <comment line="33">
                                
            </comment>
            <comment line="33">
                                
            </comment>
            <javadoc line="32">
                Test case for fast Fourier transformer.
                 * &lt;p&gt;
                 * FFT algorithm is exact, the small tolerance number is used only
                 * to account for round-off errors.                
                <@version>
                    n $Id: FastFourierTransformerTest.java 1374632 2012-08-18 18:11:11Z luc $                    
                </@version>
            </javadoc>
            <declaration name="SEED" type="long" line="41"/>
            <javadoc line="41">
                The common seed of all random number generators used in this test.                
            </javadoc>
            <method name="testTransformComplexSizeNotAPowerOfTwo" type="void" line="49">
                <declaration name="n" type="int" line="50"/>
                <declaration name="x" type="Complex[]" line="51"/>
                <declaration name="norm" type="DftNormalization[]" line="52"/>
                <declaration name="type" type="TransformType[]" line="54"/>
                <scope line="56">
                    <scope line="57">
                        <declaration name="fft" type="FastFourierTransformer" line="58"/>
                        <scope line="60"/>
                        <scope line="64"/>
                    </scope>
                </scope>
            </method>
            <method name="testTransformRealSizeNotAPowerOfTwo" type="void" line="72">
                <declaration name="n" type="int" line="73"/>
                <declaration name="x" type="double[]" line="74"/>
                <declaration name="norm" type="DftNormalization[]" line="75"/>
                <declaration name="type" type="TransformType[]" line="77"/>
                <scope line="79">
                    <scope line="80">
                        <declaration name="fft" type="FastFourierTransformer" line="81"/>
                        <scope line="83"/>
                        <scope line="87"/>
                    </scope>
                </scope>
            </method>
            <method name="testTransformFunctionSizeNotAPowerOfTwo" type="void" line="95">
                <declaration name="n" type="int" line="96"/>
                <declaration name="f" type="UnivariateFunction" line="97"/>
                <declaration name="norm" type="DftNormalization[]" line="98"/>
                <declaration name="type" type="TransformType[]" line="100"/>
                <scope line="102">
                    <scope line="103">
                        <declaration name="fft" type="FastFourierTransformer" line="104"/>
                        <scope line="106"/>
                        <scope line="110"/>
                    </scope>
                </scope>
            </method>
            <method name="testTransformFunctionNotStrictlyPositiveNumberOfSamples" type="void" line="118">
                <declaration name="n" type="int" line="119"/>
                <declaration name="f" type="UnivariateFunction" line="120"/>
                <declaration name="norm" type="DftNormalization[]" line="121"/>
                <declaration name="type" type="TransformType[]" line="123"/>
                <scope line="125">
                    <scope line="126">
                        <declaration name="fft" type="FastFourierTransformer" line="127"/>
                        <scope line="129"/>
                        <scope line="134"/>
                    </scope>
                </scope>
            </method>
            <method name="testTransformFunctionInvalidBounds" type="void" line="142">
                <declaration name="n" type="int" line="143"/>
                <declaration name="f" type="UnivariateFunction" line="144"/>
                <declaration name="norm" type="DftNormalization[]" line="145"/>
                <declaration name="type" type="TransformType[]" line="147"/>
                <scope line="149">
                    <scope line="150">
                        <declaration name="fft" type="FastFourierTransformer" line="151"/>
                        <scope line="153"/>
                        <scope line="157"/>
                    </scope>
                </scope>
            </method>
            <method name="createComplexData" type="Complex[]" line="168">
                <declaration name="random" type="Random" line="169"/>
                <declaration name="data" type="Complex[]" line="170"/>
                <scope line="171">
                    <declaration name="re" type="double" line="172"/>
                    <declaration name="im" type="double" line="173"/>
                </scope>
            </method>
            <method name="createRealData" type="double[]" line="179">
                <declaration name="random" type="Random" line="180"/>
                <declaration name="data" type="double[]" line="181"/>
                <scope line="182"/>
            </method>
            <javadoc line="188">
                Naive implementation of DFT, for reference.                
            </javadoc>
            <method name="dft" type="Complex[]" line="189">
                <declaration name="n" type="int" line="190"/>
                <declaration name="cos" type="double[]" line="191"/>
                <declaration name="sin" type="double[]" line="192"/>
                <declaration name="y" type="Complex[]" line="193"/>
                <scope line="194">
                    <declaration name="arg" type="double" line="195"/>
                </scope>
                <scope line="199">
                    <declaration name="yr" type="double" line="200"/>
                    <declaration name="yi" type="double" line="201"/>
                    <scope line="202">
                        <declaration name="index" type="int" line="203"/>
                        <declaration name="c" type="double" line="204"/>
                        <declaration name="s" type="double" line="205"/>
                        <declaration name="xr" type="double" line="206"/>
                        <declaration name="xi" type="double" line="207"/>
                    </scope>
                </scope>
            </method>
            <method name="doTestTransformComplex" type="void" line="218">
                <declaration name="fft" type="FastFourierTransformer" line="219"/>
                <declaration name="x" type="Complex[]" line="221"/>
                <declaration name="expected" type="Complex[]" line="222"/>
                <declaration name="s" type="double" line="223"/>
                <scope line="224">
                    <scope line="226"/>
                    <scope line="228"/>
                </scope>
                <scope line="231">
                    <scope line="233"/>
                    <scope line="235"/>
                </scope>
                <declaration name="actual" type="Complex[]" line="239"/>
                <scope line="240">
                    <declaration name="msg" type="String" line="241"/>
                    <declaration name="re" type="double" line="243"/>
                    <declaration name="im" type="double" line="246"/>
                </scope>
            </method>
            <method name="doTestTransformReal" type="void" line="254">
                <declaration name="fft" type="FastFourierTransformer" line="255"/>
                <declaration name="x" type="double[]" line="257"/>
                <declaration name="xc" type="Complex[]" line="258"/>
                <scope line="259"/>
                <declaration name="expected" type="Complex[]" line="262"/>
                <declaration name="s" type="double" line="263"/>
                <scope line="264">
                    <scope line="266"/>
                    <scope line="268"/>
                </scope>
                <scope line="271">
                    <scope line="273"/>
                    <scope line="275"/>
                </scope>
                <declaration name="actual" type="Complex[]" line="279"/>
                <scope line="280">
                    <declaration name="msg" type="String" line="281"/>
                    <declaration name="re" type="double" line="283"/>
                    <declaration name="im" type="double" line="286"/>
                </scope>
            </method>
            <method name="doTestTransformFunction" type="void" line="295">
                <declaration name="fft" type="FastFourierTransformer" line="296"/>
                <declaration name="x" type="Complex[]" line="298"/>
                <scope line="299">
                    <declaration name="t" type="double" line="300"/>
                </scope>
                <declaration name="expected" type="Complex[]" line="303"/>
                <declaration name="s" type="double" line="304"/>
                <scope line="305">
                    <scope line="307"/>
                    <scope line="309"/>
                </scope>
                <scope line="312">
                    <scope line="314"/>
                    <scope line="316"/>
                </scope>
                <declaration name="actual" type="Complex[]" line="320"/>
                <scope line="321">
                    <declaration name="msg" type="String" line="322"/>
                    <declaration name="re" type="double" line="323"/>
                    <declaration name="im" type="double" line="326"/>
                </scope>
            </method>
            <method name="testTransformComplex" type="void" line="337">
                <declaration name="norm" type="DftNormalization[]" line="338"/>
                <declaration name="type" type="TransformType[]" line="340"/>
                <scope line="342">
                    <scope line="343"/>
                </scope>
            </method>
            <method name="testStandardTransformReal" type="void" line="356">
                <declaration name="norm" type="DftNormalization[]" line="357"/>
                <declaration name="type" type="TransformType[]" line="359"/>
                <scope line="361">
                    <scope line="362"/>
                </scope>
            </method>
            <method name="testStandardTransformFunction" type="void" line="375">
                <declaration name="f" type="UnivariateFunction" line="376"/>
                <declaration name="min" type="double" line="377"/>
                <declaration name="max" type="double" line="378"/>
                <declaration name="norm" type="DftNormalization[]" line="379"/>
                <declaration name="type" type="TransformType[]" line="381"/>
                <scope line="383">
                    <scope line="384"/>
                </scope>
            </method>
            <javadoc line="400">
                Test of transformer for the ad hoc data taken from Mathematica.                
            </javadoc>
            <method name="testAdHocData" type="void" line="404">
                <declaration name="transformer" type="FastFourierTransformer" line="405"/>
                <declaration name="result" type="Complex" line="407"/>
                <declaration name="tolerance" type="double" line="407"/>
                <declaration name="x" type="double" line="409"/>
                <declaration name="y" type="Complex" line="410"/>
                <scope line="421"/>
                <scope line="427"/>
                <declaration name="x2" type="double" line="432"/>
                <declaration name="y2" type="Complex" line="434"/>
                <scope line="438"/>
                <scope line="444"/>
            </method>
            <javadoc line="450">
                Test of transformer for the sine function.                
            </javadoc>
            <method name="testSinFunction" type="void" line="454">
                <declaration name="f" type="UnivariateFunction" line="455"/>
                <declaration name="transformer" type="FastFourierTransformer" line="456"/>
                <declaration name="result" type="Complex" line="458"/>
                <declaration name="N" type="int" line="458"/>
                <declaration name="min" type="double" line="459"/>
                <scope line="467"/>
                <scope line="478"/>
            </method>
            <method name="test2DData" type="void" line="489">
                <declaration name="transformer" type="FastFourierTransformer" line="490"/>
                <declaration name="tolerance" type="double" line="493"/>
                <declaration name="input" type="Complex[][]" line="494"/>
                <declaration name="goodOutput" type="Complex[][]" line="498"/>
                <scope line="501"/>
                <declaration name="output" type="Complex[][]" line="507"/>
                <declaration name="output2" type="Complex[][]" line="508"/>
                <scope line="517">
                    <scope line="518"/>
                </scope>
            </method>
            <method name="test2DDataUnitary" type="void" line="530">
                <declaration name="transformer" type="FastFourierTransformer" line="531"/>
                <declaration name="tolerance" type="double" line="533"/>
                <declaration name="input" type="Complex[][]" line="534"/>
                <declaration name="goodOutput" type="Complex[][]" line="538"/>
                <declaration name="output" type="Complex[][]" line="541"/>
                <declaration name="output2" type="Complex[][]" line="542"/>
                <scope line="551">
                    <scope line="552"/>
                </scope>
            </method>
        </class>
    </source>