<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.transform">
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="RealTransformerAbstractTest" line="29">
            <comment line="30">
                                
            </comment>
            <comment line="30">
                                
            </comment>
            <comment line="30">
                                
            </comment>
            <comment line="30">
                                
            </comment>
            <javadoc line="29">
                Abstract test for classes implementing the {@link RealTransformer} interface.
                 * This abstract test handles the automatic generation of random data of various
                 * sizes. For each generated data array, actual values (returned by the
                 * transformer to be tested) are compared to expected values, returned by the{@link #transform(double[],TransformType)} (to be implemented by the user:
                 * a naive method may be used). Methods are also provided to test that invalid
                 * parameters throw the expected exceptions.                
                <@since>
                    e 3.0                    
                </@since>
                <@version>
                    n $Id: RealTransformerAbstractTest.java 1244375 2012-02-15 06:30:05Z celestin $                    
                </@version>
            </javadoc>
            <declaration name="SEED" type="long" line="43"/>
            <javadoc line="43">
                The common seed of all random number generators used in this test.                
            </javadoc>
            <method name="createRealTransformer" type="RealTransformer" line="46"/>
            <javadoc line="46">
                Returns a new instance of the {@link RealTransformer} to be tested.                
                <@return>
                    n a the transformer to be tested                    
                </@return>
            </javadoc>
            <method name="getInvalidDataSize" type="int" line="53"/>
            <javadoc line="53">
                Returns an invalid data size. Transforms with this data size should
                 * trigger a {@link MathIllegalArgumentException}.                
                <@param>
                    m i the index of the invalid data size ({@code 0 <= i <}{@link #getNumberOfInvalidDataSizes()}                    
                </@param>
                <@return>
                    n an invalid data size                    
                </@return>
            </javadoc>
            <method name="getNumberOfInvalidDataSizes" type="int" line="63"/>
            <javadoc line="63">
                Returns the total number of invalid data sizes to be tested. If data
                 * array of any
                 * size can be handled by the {@link RealTransformer} to be tested, this
                 * method should return {@code 0}.                
                <@return>
                    n the total number of invalid data sizes                    
                </@return>
            </javadoc>
            <method name="getNumberOfValidDataSizes" type="int" line="73"/>
            <javadoc line="73">
                Returns the total number of valid data sizes to be tested.                
                <@return>
                    n the total number of valid data sizes                    
                </@return>
            </javadoc>
            <method name="getRelativeTolerance" type="double" line="80"/>
            <javadoc line="80">
                Returns the expected relative accuracy for data arrays of size{@code getValidDataSize(i)}.                
                <@param>
                    m i the index of the valid data size                    
                </@param>
                <@return>
                    n the expected relative accuracy                    
                </@return>
            </javadoc>
            <method name="getValidDataSize" type="int" line="89"/>
            <javadoc line="89">
                Returns a valid data size. This method allows for data arrays of various
                 * sizes to be automatically tested (by allowing multiple values of the
                 * specified index).                
                <@param>
                    m i the index of the valid data size ({@code 0 <= i <}{@link #getNumberOfValidDataSizes()}                    
                </@param>
                <@return>
                    n a valid data size                    
                </@return>
            </javadoc>
            <method name="getValidFunction" type="UnivariateFunction" line="100"/>
            <javadoc line="100">
                Returns a function for the accuracy check of{@link RealTransformer#transform(UnivariateFunction,double,double,int)}and{@link RealTransformer#inverseTransform(UnivariateFunction,double,double,int)}.
                 * This function should be valid. In other words, none of the above methods
                 * should throw an exception when passed this function.                
                <@return>
                    n a valid function                    
                </@return>
            </javadoc>
            <method name="getValidLowerBound" type="double" line="112"/>
            <javadoc line="112">
                Returns a sampling lower bound for the accuracy check of{@link RealTransformer#transform(UnivariateFunction,double,double,int)}and{@link RealTransformer#inverseTransform(UnivariateFunction,double,double,int)}.
                 * This lower bound should be valid. In other words, none of the above
                 * methods should throw an exception when passed this bound.                
                <@return>
                    n a valid lower bound                    
                </@return>
            </javadoc>
            <method name="getValidUpperBound" type="double" line="124"/>
            <javadoc line="124">
                Returns a sampling upper bound for the accuracy check of{@link RealTransformer#transform(UnivariateFunction,double,double,int)}and{@link RealTransformer#inverseTransform(UnivariateFunction,double,double,int)}.
                 * This upper bound should be valid. In other words, none of the above
                 * methods should throw an exception when passed this bound.                
                <@return>
                    n a valid bound                    
                </@return>
            </javadoc>
            <method name="transform" type="double[]" line="136"/>
            <javadoc line="136">
                Returns the expected transform of the specified real data array.                
                <@param>
                    m x the real data array to be transformed                    
                </@param>
                <@param>
                    m type the type of transform (forward, inverse) to be performed                    
                </@param>
                <@return>
                    n the expected transform                    
                </@return>
            </javadoc>
            <javadoc line="149">
                {@link RealTransformer#transform(double[],TransformType)} should throw a{@link MathIllegalArgumentException} if data size is invalid.                
            </javadoc>
            <method name="testTransformRealInvalidDataSize" type="void" line="154">
                <declaration name="type" type="TransformType[]" line="155"/>
                <declaration name="transformer" type="RealTransformer" line="156"/>
                <scope line="157">
                    <declaration name="n" type="int" line="158"/>
                    <scope line="159">
                        <scope line="160"/>
                        <scope line="163"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="170">
                {@link RealTransformer#transform(UnivariateFunction,double,double,int,TransformType)}should throw a {@link MathIllegalArgumentException} if number of samples
                 * is invalid.                
            </javadoc>
            <method name="testTransformFunctionInvalidDataSize" type="void" line="176">
                <declaration name="type" type="TransformType[]" line="177"/>
                <declaration name="transformer" type="RealTransformer" line="178"/>
                <declaration name="f" type="UnivariateFunction" line="179"/>
                <declaration name="a" type="double" line="180"/>
                <declaration name="b" type="double" line="181"/>
                <scope line="182">
                    <declaration name="n" type="int" line="183"/>
                    <scope line="184">
                        <scope line="185"/>
                        <scope line="188"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="195">
                {@link RealTransformer#transform(UnivariateFunction,double,double,int,TransformType)}should throw a {@link NotStrictlyPositiveException} if number of samples
                 * is not strictly positive.                
            </javadoc>
            <method name="testTransformFunctionNotStrictlyPositiveNumberOfSamples" type="void" line="201">
                <declaration name="type" type="TransformType[]" line="202"/>
                <declaration name="transformer" type="RealTransformer" line="203"/>
                <declaration name="f" type="UnivariateFunction" line="204"/>
                <declaration name="a" type="double" line="205"/>
                <declaration name="b" type="double" line="206"/>
                <scope line="207">
                    <declaration name="n" type="int" line="208"/>
                    <scope line="209">
                        <scope line="210"/>
                        <scope line="213"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="220">
                {@link RealTransformer#transform(UnivariateFunction,double,double,int,TransformType)}should throw a {@link NumberIsTooLargeException} if sampling bounds are
                 * not correctly ordered.                
            </javadoc>
            <method name="testTransformFunctionInvalidBounds" type="void" line="226">
                <declaration name="type" type="TransformType[]" line="227"/>
                <declaration name="transformer" type="RealTransformer" line="228"/>
                <declaration name="f" type="UnivariateFunction" line="229"/>
                <declaration name="a" type="double" line="230"/>
                <declaration name="b" type="double" line="231"/>
                <scope line="232">
                    <declaration name="n" type="int" line="233"/>
                    <scope line="234">
                        <scope line="235"/>
                        <scope line="238"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="249">
                Accuracy check of {@link RealTransformer#transform(double[],TransformType)}.
                 * For each valid data size returned by{@link #getValidDataSize(int) getValidDataSize(i)},
                 * a random data array is generated with{@link #createRealData(int) createRealData(i)}. The actual
                 * transform is computed and compared to the expected transform, return by{@link #transform(double[],TransformType)}. Actual and expected values
                 * should be equal to within the relative error returned by{@link #getRelativeTolerance(int) getRelativeTolerance(i)}.                
            </javadoc>
            <method name="testTransformReal" type="void" line="261">
                <declaration name="type" type="TransformType[]" line="262"/>
                <scope line="263">
                    <declaration name="n" type="int" line="264"/>
                    <declaration name="tol" type="double" line="265"/>
                    <scope line="266"/>
                </scope>
            </method>
            <javadoc line="272">
                Accuracy check of{@link RealTransformer#transform(UnivariateFunction,double,double,int,TransformType)}.
                 * For each valid data size returned by{@link #getValidDataSize(int) getValidDataSize(i)},
                 * the {@link UnivariateFunction} returned by {@link #getValidFunction()} is
                 * sampled. The actual transform is computed and compared to the expected
                 * transform, return by {@link #transform(double[],TransformType)}. Actual
                 * and expected values should be equal to within the relative error returned
                 * by {@link #getRelativeTolerance(int) getRelativeTolerance(i)}.                
            </javadoc>
            <method name="testTransformFunction" type="void" line="284">
                <declaration name="type" type="TransformType[]" line="285"/>
                <scope line="286">
                    <declaration name="n" type="int" line="287"/>
                    <declaration name="tol" type="double" line="288"/>
                    <scope line="289"/>
                </scope>
            </method>
            <javadoc line="299">
                Returns a random array of doubles. Random generator always uses the same
                 * seed.                
                <@param>
                    m n the size of the array to be returned                    
                </@param>
                <@return>
                    n a random array of specified size                    
                </@return>
            </javadoc>
            <method name="createRealData" type="double[]" line="306">
                <declaration name="random" type="Random" line="307"/>
                <declaration name="data" type="double[]" line="308"/>
                <scope line="309"/>
            </method>
            <method name="doTestTransformReal" type="void" line="320">
                <declaration name="transformer" type="RealTransformer" line="321"/>
                <declaration name="x" type="double[]" line="322"/>
                <declaration name="expected" type="double[]" line="323"/>
                <declaration name="actual" type="double[]" line="324"/>
                <scope line="325">
                    <declaration name="msg" type="String" line="326"/>
                    <declaration name="delta" type="double" line="327"/>
                </scope>
            </method>
            <method name="doTestTransformFunction" type="void" line="333">
                <declaration name="transformer" type="RealTransformer" line="334"/>
                <declaration name="f" type="UnivariateFunction" line="335"/>
                <declaration name="a" type="double" line="336"/>
                <declaration name="b" type="double" line="337"/>
                <declaration name="x" type="double[]" line="338"/>
                <scope line="339">
                    <declaration name="t" type="double" line="340"/>
                </scope>
                <declaration name="expected" type="double[]" line="343"/>
                <declaration name="actual" type="double[]" line="344"/>
                <scope line="345">
                    <declaration name="msg" type="String" line="346"/>
                    <declaration name="delta" type="double" line="347"/>
                </scope>
            </method>
        </class>
    </source>