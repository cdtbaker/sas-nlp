<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3">
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.text.DecimalFormat"/>
        <import package="org.apache.commons.math3.complex.Complex"/>
        <import package="org.apache.commons.math3.complex.ComplexFormat"/>
        <import package="org.apache.commons.math3.distribution.RealDistribution"/>
        <import package="org.apache.commons.math3.linear.FieldMatrix"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.RealVector"/>
        <import package="org.apache.commons.math3.stat.inference.ChiSquareTest"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.junit.Assert"/>
        <class name="TestUtils" line="39">
            <javadoc line="39">
                @version $Id: TestUtils.java 1363575 2012-07-19 23:02:47Z erans $                
            </javadoc>
            <javadoc line="43">
                Collection of static methods used in math unit tests.                
            </javadoc>
            <method name="TestUtils" type="constructor" line="46"/>
            <javadoc line="50">
                Verifies that expected and actual are within delta, or are both NaN or
                 * infinities of the same sign.                
            </javadoc>
            <method name="assertEquals" type="void" line="54"/>
            <javadoc line="58">
                Verifies that expected and actual are within delta, or are both NaN or
                 * infinities of the same sign.                
            </javadoc>
            <method name="assertEquals" type="void" line="62">
                <comment line="63">
                    check for NaN                    
                </comment>
                <scope line="64"/>
                <scope line="67"/>
            </method>
            <javadoc line="72">
                Verifies that the two arguments are exactly the same, either
                 * both NaN or infinities of same sign, or identical floating point values.                
            </javadoc>
            <method name="assertSame" type="void" line="76"/>
            <javadoc line="80">
                Verifies that real and imaginary parts of the two complex arguments
                 * are exactly the same.  Also ensures that NaN / infinite components match.                
            </javadoc>
            <method name="assertSame" type="void" line="84"/>
            <javadoc line="89">
                Verifies that real and imaginary parts of the two complex arguments
                 * differ by at most delta.  Also ensures that NaN / infinite components match.                
            </javadoc>
            <method name="assertEquals" type="void" line="93"/>
            <javadoc line="98">
                Verifies that two double arrays have equal entries, up to tolerance                
            </javadoc>
            <method name="assertEquals" type="void" line="101"/>
            <javadoc line="105">
                Serializes an object to a bytes array and then recovers the object from the bytes array.
                 * Returns the deserialized object.                
                <@param>
                    m o  object to serialize and recover                    
                </@param>
                <@return>
                    n  the recovered, deserialized object                    
                </@return>
            </javadoc>
            <method name="serializeAndRecover" type="Object" line="112">
                <scope line="113">
                    <declaration name="bos" type="ByteArrayOutputStream" line="115"/>
                    <declaration name="so" type="ObjectOutputStream" line="116"/>
                    <declaration name="bis" type="ByteArrayInputStream" line="120"/>
                    <declaration name="si" type="ObjectInputStream" line="121"/>
                </scope>
                <scope line="123"/>
                <scope line="125"/>
            </method>
            <javadoc line="130">
                Verifies that serialization preserves equals and hashCode.
                 * Serializes the object, then recovers it and checks equals and hash code.                
                <@param>
                    m object  the object to serialize and recover                    
                </@param>
            </javadoc>
            <method name="checkSerializedEquality" type="void" line="136">
                <declaration name="object2" type="Object" line="137"/>
            </method>
            <javadoc line="142">
                Verifies that the relative error in actual vs. expected is less than or
                 * equal to relativeError.  If expected is infinite or NaN, actual must be
                 * the same (NaN or infinity of the same sign).                
                <@param>
                    m expected expected value                    
                </@param>
                <@param>
                    m actual  observed value                    
                </@param>
                <@param>
                    m relativeError  maximum allowable relative error                    
                </@param>
            </javadoc>
            <method name="assertRelativelyEquals" type="void" line="152"/>
            <javadoc line="156">
                Verifies that the relative error in actual vs. expected is less than or
                 * equal to relativeError.  If expected is infinite or NaN, actual must be
                 * the same (NaN or infinity of the same sign).                
                <@param>
                    m msg  message to return with failure                    
                </@param>
                <@param>
                    m expected expected value                    
                </@param>
                <@param>
                    m actual  observed value                    
                </@param>
                <@param>
                    m relativeError  maximum allowable relative error                    
                </@param>
            </javadoc>
            <method name="assertRelativelyEquals" type="void" line="167">
                <scope line="168"/>
                <scope line="170"/>
                <scope line="172"/>
                <scope line="174"/>
                <scope line="176">
                    <declaration name="absError" type="double" line="177"/>
                </scope>
            </method>
            <javadoc line="182">
                Fails iff values does not contain a number within epsilon of z.                
                <@param>
                    m msg  message to return with failure                    
                </@param>
                <@param>
                    m values complex array to search                    
                </@param>
                <@param>
                    m z  value sought                    
                </@param>
                <@param>
                    m epsilon  tolerance                    
                </@param>
            </javadoc>
            <method name="assertContains" type="void" line="191">
                <scope line="192">
                    <scope line="194"/>
                </scope>
            </method>
            <javadoc line="201">
                Fails iff values does not contain a number within epsilon of z.                
                <@param>
                    m values complex array to search                    
                </@param>
                <@param>
                    m z  value sought                    
                </@param>
                <@param>
                    m epsilon  tolerance                    
                </@param>
            </javadoc>
            <method name="assertContains" type="void" line="209"/>
            <javadoc line="213">
                Fails iff values does not contain a number within epsilon of x.                
                <@param>
                    m msg  message to return with failure                    
                </@param>
                <@param>
                    m values double array to search                    
                </@param>
                <@param>
                    m x value sought                    
                </@param>
                <@param>
                    m epsilon  tolerance                    
                </@param>
            </javadoc>
            <method name="assertContains" type="void" line="222">
                <scope line="223">
                    <scope line="224"/>
                </scope>
            </method>
            <javadoc line="231">
                Fails iff values does not contain a number within epsilon of x.                
                <@param>
                    m values double array to search                    
                </@param>
                <@param>
                    m x value sought                    
                </@param>
                <@param>
                    m epsilon  tolerance                    
                </@param>
            </javadoc>
            <method name="assertContains" type="void" line="239"/>
            <javadoc line="243">
                Asserts that all entries of the specified vectors are equal to within a
                 * positive {@code delta}.                
                <@param>
                    m message the identifying message for the assertion error (can be{@code null})                    
                </@param>
                <@param>
                    m expected expected value                    
                </@param>
                <@param>
                    m actual actual value                    
                </@param>
                <@param>
                    m delta the maximum difference between the entries of the expected
                     * and actual vectors for which both entries are still considered equal                    
                </@param>
            </javadoc>
            <method name="assertEquals" type="void" line="255">
                <declaration name="msgAndSep" type="String" line="256"/>
                <scope line="259"/>
            </method>
            <javadoc line="265">
                Asserts that all entries of the specified vectors are equal to within a
                 * positive {@code delta}.                
                <@param>
                    m message the identifying message for the assertion error (can be{@code null})                    
                </@param>
                <@param>
                    m expected expected value                    
                </@param>
                <@param>
                    m actual actual value                    
                </@param>
                <@param>
                    m delta the maximum difference between the entries of the expected
                     * and actual vectors for which both entries are still considered equal                    
                </@param>
            </javadoc>
            <method name="assertEquals" type="void" line="277">
                <declaration name="msgAndSep" type="String" line="278"/>
                <declaration name="dim" type="int" line="281"/>
                <scope line="282"/>
            </method>
            <javadoc line="288">
                verifies that two matrices are close (1-norm)                
            </javadoc>
            <method name="assertEquals" type="void" line="289">
                <scope line="294">
                    <declaration name="messageBuffer" type="StringBuilder" line="295"/>
                </scope>
                <declaration name="delta" type="RealMatrix" line="304"/>
                <scope line="305">
                    <declaration name="messageBuffer" type="StringBuilder" line="306"/>
                </scope>
            </method>
            <javadoc line="314">
                verifies that two matrices are equal                
            </javadoc>
            <method name="assertEquals" type="void" line="316">
                <scope line="321">
                    <declaration name="messageBuffer" type="StringBuilder" line="322"/>
                </scope>
                <scope line="331">
                    <scope line="332">
                        <declaration name="eij" type="FieldElement&lt;?&gt;" line="333"/>
                        <declaration name="oij" type="FieldElement&lt;?&gt;" line="334"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="340">
                verifies that two arrays are close (sup norm)                
            </javadoc>
            <method name="assertEquals" type="void" line="341">
                <declaration name="out" type="StringBuilder" line="342"/>
                <scope line="343"/>
                <declaration name="failure" type="boolean" line="351"/>
                <scope line="352">
                    <scope line="353"/>
                </scope>
                <scope line="364"/>
            </method>
            <javadoc line="369">
                verifies that two arrays are equal                
            </javadoc>
            <method name="assertEquals" type="void" line="370">
                <scope line="371"/>
                <scope line="374"/>
            </method>
            <javadoc line="379">
                Computes the sum of squared deviations of &lt;values&gt; from &lt;target&gt;                
                <@param>
                    m values array of deviates                    
                </@param>
                <@param>
                    m target value to compute deviations from                    
                </@param>
                <@return>
                    n sum of squared deviations                    
                </@return>
            </javadoc>
            <method name="sumSquareDev" type="double" line="386">
                <declaration name="sumsq" type="double" line="387"/>
                <scope line="388">
                    <declaration name="dev" type="double" line="389"/>
                </scope>
            </method>
            <javadoc line="395">
                Asserts the null hypothesis for a ChiSquare test.  Fails and dumps arguments and test
                 * statistics if the null hypothesis can be rejected with confidence 100 * (1 - alpha)%                
                <@param>
                    m valueLabels labels for the values of the discrete distribution under test                    
                </@param>
                <@param>
                    m expected expected counts                    
                </@param>
                <@param>
                    m observed observed counts                    
                </@param>
                <@param>
                    m alpha significance level of the test                    
                </@param>
            </javadoc>
            <method name="assertChiSquareAccept" type="void" line="404">
                <comment line="405">
                    Fail if we can reject null hypothesis that distributions are the same                    
                </comment>
                <declaration name="chiSquareTest" type="ChiSquareTest" line="405"/>
                <scope line="408">
                    <declaration name="msgBuffer" type="StringBuilder" line="409"/>
                    <declaration name="df" type="DecimalFormat" line="410"/>
                    <scope line="418"/>
                </scope>
            </method>
            <javadoc line="433">
                Asserts the null hypothesis for a ChiSquare test.  Fails and dumps arguments and test
                 * statistics if the null hypothesis can be rejected with confidence 100 * (1 - alpha)%                
                <@param>
                    m values integer values whose observed and expected counts are being compared                    
                </@param>
                <@param>
                    m expected expected counts                    
                </@param>
                <@param>
                    m observed observed counts                    
                </@param>
                <@param>
                    m alpha significance level of the test                    
                </@param>
            </javadoc>
            <method name="assertChiSquareAccept" type="void" line="442">
                <declaration name="labels" type="String[]" line="443"/>
                <scope line="444"/>
            </method>
            <javadoc line="450">
                Asserts the null hypothesis for a ChiSquare test.  Fails and dumps arguments and test
                 * statistics if the null hypothesis can be rejected with confidence 100 * (1 - alpha)%                
                <@param>
                    m expected expected counts                    
                </@param>
                <@param>
                    m observed observed counts                    
                </@param>
                <@param>
                    m alpha significance level of the test                    
                </@param>
            </javadoc>
            <method name="assertChiSquareAccept" type="void" line="458">
                <declaration name="labels" type="String[]" line="459"/>
                <scope line="460"/>
            </method>
            <javadoc line="466">
                Computes the 25th, 50th and 75th percentiles of the given distribution and returns
                 * these values in an array.                
            </javadoc>
            <method name="getDistributionQuartiles" type="double[]" line="470">
                <declaration name="quantiles" type="double[]" line="471"/>
            </method>
            <javadoc line="478">
                Updates observed counts of values in quartiles.
                 * counts[0] &lt;-&gt; 1st quartile ... counts[3] &lt;-&gt; top quartile                
            </javadoc>
            <method name="updateCounts" type="void" line="482">
                <scope line="483"/>
                <scope line="485"/>
                <scope line="487"/>
                <scope line="489"/>
            </method>
            <javadoc line="494">
                Eliminates points with zero mass from densityPoints and densityValues parallel
                 * arrays.  Returns the number of positive mass points and collapses the arrays so
                 * that the first &lt;returned value&gt; elements of the input arrays represent the positive
                 * mass points.                
            </javadoc>
            <method name="eliminateZeroMassPoints" type="int" line="500">
                <declaration name="positiveMassCount" type="int" line="501"/>
                <scope line="502">
                    <scope line="503"/>
                </scope>
                <scope line="507">
                    <declaration name="newPoints" type="int[]" line="508"/>
                    <declaration name="newValues" type="double[]" line="509"/>
                    <declaration name="j" type="int" line="510"/>
                    <scope line="511">
                        <scope line="512"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>