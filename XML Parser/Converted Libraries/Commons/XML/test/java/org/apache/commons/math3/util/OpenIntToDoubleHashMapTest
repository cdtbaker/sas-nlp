<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.util.ConcurrentModificationException"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Map"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.Random"/>
        <import package="java.util.Set"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Before"/>
        <import package="org.junit.Test"/>
        <class name="OpenIntToDoubleHashMapTest" line="32">
            <comment line="33">
                This time only remove some entries                
            </comment>
            <javadoc line="32">
                Test cases for the {@link OpenIntToDoubleHashMap}.                
            </javadoc>
            <declaration name="javaMap" type="Map&lt;Integer,Double&gt;" line="37"/>
            <method name="setUp" type="void" line="40">
                <comment line="41">
                    Add a few more to cause the table to rehash                    
                </comment>
            </method>
            <method name="generate" type="Map<Integer,Double>" line="59">
                <declaration name="map" type="Map&lt;Integer,Double&gt;" line="60"/>
                <declaration name="r" type="Random" line="61"/>
            </method>
            <method name="createFromJavaMap" type="OpenIntToDoubleHashMap" line="67">
                <declaration name="map" type="OpenIntToDoubleHashMap" line="68"/>
                <scope line="69"/>
            </method>
            <method name="testPutAndGetWith0ExpectedSize" type="void" line="76">
                <declaration name="map" type="OpenIntToDoubleHashMap" line="77"/>
            </method>
            <method name="testPutAndGetWithExpectedSize" type="void" line="82">
                <declaration name="map" type="OpenIntToDoubleHashMap" line="83"/>
            </method>
            <method name="testPutAndGet" type="void" line="88">
                <declaration name="map" type="OpenIntToDoubleHashMap" line="89"/>
            </method>
            <method name="assertPutAndGet" type="void" line="93">
                <params>
                    <param name="map" type="OpenIntToDoubleHashMap"/>
                </params>
            </method>
            <method name="assertPutAndGet" type="void" line="98">
                <params>
                    <param name="map" type="OpenIntToDoubleHashMap"/>
                    <param name="mapSize" type="int"/>
                    <param name="keysInMap" type="Set<Integer>"/>
                </params>
                <scope line="100"/>
            </method>
            <method name="testPutAbsentOnExisting" type="void" line="110">
                <declaration name="map" type="OpenIntToDoubleHashMap" line="111"/>
                <declaration name="size" type="int" line="112"/>
                <scope line="113"/>
            </method>
            <method name="testPutOnExisting" type="void" line="121">
                <declaration name="map" type="OpenIntToDoubleHashMap" line="122"/>
                <scope line="123"/>
            </method>
            <method name="testGetAbsent" type="void" line="131">
                <declaration name="generated" type="Map&lt;Integer,Double&gt;" line="132"/>
                <declaration name="map" type="OpenIntToDoubleHashMap" line="133"/>
            </method>
            <method name="testGetFromEmpty" type="void" line="140">
                <declaration name="map" type="OpenIntToDoubleHashMap" line="141"/>
            </method>
            <method name="testRemove" type="void" line="148">
                <comment line="149">
                    Ensure that put and get still work correctly after removals                    
                </comment>
                <declaration name="map" type="OpenIntToDoubleHashMap" line="149"/>
                <declaration name="mapSize" type="int" line="150"/>
                <scope line="152"/>
            </method>
            <method name="testRemove2" type="void" line="164">
                <comment line="165">
                    Ensure that put and get still work correctly after removals                    
                </comment>
                <declaration name="map" type="OpenIntToDoubleHashMap" line="165"/>
                <declaration name="mapSize" type="int" line="166"/>
                <declaration name="count" type="int" line="167"/>
                <declaration name="keysInMap" type="Set&lt;Integer&gt;" line="168"/>
                <scope line="169"/>
            </method>
            <method name="testRemoveFromEmpty" type="void" line="183">
                <declaration name="map" type="OpenIntToDoubleHashMap" line="184"/>
            </method>
            <method name="testRemoveAbsent" type="void" line="189">
                <declaration name="generated" type="Map&lt;Integer,Double&gt;" line="190"/>
                <declaration name="map" type="OpenIntToDoubleHashMap" line="192"/>
                <declaration name="mapSize" type="int" line="193"/>
                <scope line="195"/>
            </method>
            <javadoc line="202">
                Returns a map with at least 100 elements where each element is absent from javaMap.                
            </javadoc>
            <method name="generateAbsent" type="Map<Integer,Double>" line="205">
                <declaration name="generated" type="Map&lt;Integer,Double&gt;" line="206"/>
                <scope line="207"/>
            </method>
            <method name="testCopy" type="void" line="216">
                <declaration name="copy" type="OpenIntToDoubleHashMap" line="217"/>
            </method>
            <method name="testContainsKey" type="void" line="226">
                <declaration name="map" type="OpenIntToDoubleHashMap" line="227"/>
                <scope line="228"/>
                <scope line="231"/>
                <scope line="234">
                    <declaration name="key" type="int" line="235"/>
                </scope>
            </method>
            <method name="testIterator" type="void" line="243">
                <declaration name="map" type="OpenIntToDoubleHashMap" line="244"/>
                <declaration name="iterator" type="OpenIntToDoubleHashMap.Iterator" line="245"/>
                <scope line="246">
                    <declaration name="key" type="int" line="249"/>
                </scope>
                <scope line="256"/>
                <scope line="259"/>
            </method>
            <method name="testConcurrentModification" type="void" line="265">
                <declaration name="map" type="OpenIntToDoubleHashMap" line="266"/>
                <declaration name="iterator" type="OpenIntToDoubleHashMap.Iterator" line="267"/>
                <scope line="269"/>
                <scope line="272"/>
            </method>
            <javadoc line="277">
                Regression test for a bug in findInsertionIndex where the hashing in the second probing
                  loop was inconsistent with the first causing duplicate keys after the right sequence
                  of puts and removes.                
            </javadoc>
            <method name="testPutKeysWithCollisions" type="void" line="283">
                <declaration name="map" type="OpenIntToDoubleHashMap" line="284"/>
                <declaration name="key1" type="int" line="285"/>
                <declaration name="value1" type="double" line="286"/>
                <declaration name="key2" type="int" line="288"/>
                <declaration name="key3" type="int" line="290"/>
                <declaration name="value2" type="double" line="296"/>
            </method>
            <javadoc line="302">
                Similar to testPutKeysWithCollisions() but exercises the codepaths in a slightly
                  different manner.                
            </javadoc>
            <method name="testPutKeysWithCollision2" type="void" line="307">
                <declaration name="map" type="OpenIntToDoubleHashMap" line="308"/>
                <declaration name="key1" type="int" line="309"/>
                <declaration name="value1" type="double" line="310"/>
                <declaration name="key2" type="int" line="312"/>
                <declaration name="value2" type="double" line="318"/>
            </method>
        </class>
    </source>