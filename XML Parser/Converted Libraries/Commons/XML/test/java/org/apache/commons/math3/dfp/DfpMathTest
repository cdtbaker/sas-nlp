<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.dfp">
        <import package="org.junit.After"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Before"/>
        <import package="org.junit.Test"/>
        <class name="DfpMathTest" line="25">
            <comment line="26">
                Generic test function.  Takes params x and y and tests them for                
            </comment>
            <comment line="26">
                equality.  Then checks the status flags against the flags argument.                
            </comment>
            <comment line="26">
                If the test fail, it prints the desc string                
            </comment>
            <declaration name="factory" type="DfpField" line="27"/>
            <declaration name="pinf" type="Dfp" line="28"/>
            <declaration name="ninf" type="Dfp" line="29"/>
            <declaration name="nan" type="Dfp" line="30"/>
            <declaration name="qnan" type="Dfp" line="31"/>
            <method name="setUp" type="void" line="34">
                <comment line="35">
                    Some basic setup.  Define some constants and clear the status flags                    
                </comment>
                <comment line="35">
                    force loading of dfpmath                    
                </comment>
                <declaration name="pi" type="Dfp" line="44"/>
            </method>
            <method name="tearDown" type="void" line="49"/>
            <method name="test" type="void" line="60">
                <declaration name="b" type="boolean" line="61"/>
            </method>
            <method name="testPow" type="void" line="79">
                <comment line="80">
                    Test special cases  exponent of zero                    
                </comment>
                <comment line="80">
                    exponent of one                    
                </comment>
                <comment line="80">
                    exponent of NaN                    
                </comment>
                <comment line="80">
                    radix of NaN                    
                </comment>
                <comment line="80">
                    (x &gt; 1) ^ pinf = pinf,    (x &lt; -1) ^ pinf = pinf                    
                </comment>
                <comment line="80">
                    (x &gt; 1) ^ ninf = +0,    (x &lt; -1) ^ ninf = +0                    
                </comment>
                <comment line="80">
                    (-1 &lt; x &lt; 1) ^ pinf = 0                    
                </comment>
                <comment line="80">
                    (-1 &lt; x &lt; 1) ^ ninf = pinf                    
                </comment>
                <comment line="80">
                    +/- 1  ^ +/-inf  = NaN                    
                </comment>
                <comment line="80">
                    +0  ^ +anything except 0, NAN  = +0                    
                </comment>
                <comment line="80">
                    -0  ^ +anything except 0, NAN, odd integer  = +0                    
                </comment>
                <comment line="80">
                    +0  ^ -anything except 0, NAN  = +INF                    
                </comment>
                <comment line="80">
                    -0  ^ -anything except 0, NAN, odd integer  = +INF                    
                </comment>
                <comment line="80">
                    -0  ^ -odd integer   =  -INF                    
                </comment>
                <comment line="80">
                    -0  ^ +odd integer   =  -0                    
                </comment>
                <comment line="80">
                    pinf  ^ +anything   = pinf                    
                </comment>
                <comment line="80">
                    pinf  ^ -anything   = +0                    
                </comment>
                <comment line="80">
                    ninf  ^ anything   = -0 ^ -anything                    
                </comment>
                <comment line="80">
                    ninf  ^ -anything except 0, NAN, odd integer  = +0                    
                </comment>
                <comment line="80">
                    ninf  ^ +anything except 0, NAN, odd integer  = +INF                    
                </comment>
                <comment line="80">
                    ninf  ^ +odd integer   =  -INF                    
                </comment>
                <comment line="80">
                    ninf  ^ -odd integer   =  -0                    
                </comment>
                <comment line="80">
                    -anything ^ integer                    
                </comment>
                <comment line="80">
                    -anything ^ noninteger = NaN                    
                </comment>
                <comment line="80">
                    Some fractional cases.                    
                </comment>
            </method>
            <method name="testSin" type="void" line="476"/>
        </class>
    </source>