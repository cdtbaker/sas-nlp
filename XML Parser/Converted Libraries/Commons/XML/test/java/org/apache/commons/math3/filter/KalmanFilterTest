<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.filter">
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.ArrayRealVector"/>
        <import package="org.apache.commons.math3.linear.MatrixDimensionMismatchException"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.RealVector"/>
        <import package="org.apache.commons.math3.random.JDKRandomGenerator"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="KalmanFilterTest" line="28">
            <javadoc line="28">
                Tests for {@link KalmanFilter}.                
                <@version>
                    n $Id$                    
                </@version>
            </javadoc>
            <method name="testTransitionMeasurementMatrixMismatch" type="void" line="36">
                <comment line="37">
                    A and H matrix do not match in dimensions                    
                </comment>
                <comment line="37">
                    A = [ 1 ]                    
                </comment>
                <comment line="37">
                    no control input                    
                </comment>
                <comment line="37">
                    H = [ 1 1 ]                    
                </comment>
                <comment line="37">
                    Q = [ 0 ]                    
                </comment>
                <comment line="37">
                    R = [ 0 ]                    
                </comment>
                <declaration name="A" type="RealMatrix" line="41"/>
                <declaration name="B" type="RealMatrix" line="43"/>
                <declaration name="H" type="RealMatrix" line="45"/>
                <declaration name="Q" type="RealMatrix" line="47"/>
                <declaration name="R" type="RealMatrix" line="49"/>
                <declaration name="pm" type="ProcessModel" line="51"/>
                <declaration name="mm" type="MeasurementModel" line="54"/>
            </method>
            <method name="testTransitionControlMatrixMismatch" type="void" line="60">
                <comment line="61">
                    A and B matrix do not match in dimensions                    
                </comment>
                <comment line="61">
                    A = [ 1 ]                    
                </comment>
                <comment line="61">
                    B = [ 1 1 ]                    
                </comment>
                <comment line="61">
                    H = [ 1 ]                    
                </comment>
                <comment line="61">
                    Q = [ 0 ]                    
                </comment>
                <comment line="61">
                    R = [ 0 ]                    
                </comment>
                <declaration name="A" type="RealMatrix" line="65"/>
                <declaration name="B" type="RealMatrix" line="67"/>
                <declaration name="H" type="RealMatrix" line="69"/>
                <declaration name="Q" type="RealMatrix" line="71"/>
                <declaration name="R" type="RealMatrix" line="73"/>
                <declaration name="pm" type="ProcessModel" line="75"/>
                <declaration name="mm" type="MeasurementModel" line="78"/>
            </method>
            <method name="testConstant" type="void" line="84">
                <comment line="85">
                    simulates a simple process with a constant state and no control input                    
                </comment>
                <comment line="85">
                    A = [ 1 ]                    
                </comment>
                <comment line="85">
                    no control input                    
                </comment>
                <comment line="85">
                    H = [ 1 ]                    
                </comment>
                <comment line="85">
                    x = [ 10 ]                    
                </comment>
                <comment line="85">
                    Q = [ 1e-5 ]                    
                </comment>
                <comment line="85">
                    R = [ 0.1 ]                    
                </comment>
                <comment line="85">
                    check the initial state                    
                </comment>
                <comment line="85">
                    iterate 60 steps                    
                </comment>
                <comment line="85">
                    error covariance should be already very low (&lt; 0.02)                    
                </comment>
                <declaration name="constantValue" type="double" line="87"/>
                <declaration name="measurementNoise" type="double" line="88"/>
                <declaration name="processNoise" type="double" line="89"/>
                <declaration name="A" type="RealMatrix" line="92"/>
                <declaration name="B" type="RealMatrix" line="94"/>
                <declaration name="H" type="RealMatrix" line="96"/>
                <declaration name="x" type="RealVector" line="98"/>
                <declaration name="Q" type="RealMatrix" line="100"/>
                <declaration name="R" type="RealMatrix" line="102"/>
                <declaration name="pm" type="ProcessModel" line="104"/>
                <declaration name="mm" type="MeasurementModel" line="107"/>
                <declaration name="filter" type="KalmanFilter" line="108"/>
                <declaration name="expectedInitialState" type="double[]" line="116"/>
                <declaration name="pNoise" type="RealVector" line="119"/>
                <declaration name="mNoise" type="RealVector" line="120"/>
                <declaration name="rand" type="RandomGenerator" line="122"/>
                <scope line="124">
                    <declaration name="z" type="RealVector" line="137"/>
                    <declaration name="diff" type="double" line="142"/>
                </scope>
            </method>
            <method name="testConstantAcceleration" type="void" line="153">
                <comment line="154">
                    simulates a vehicle, accelerating at a constant rate (0.1 m/s)                    
                </comment>
                <comment line="154">
                    discrete time interval                    
                </comment>
                <comment line="154">
                    position measurement noise (meter)                    
                </comment>
                <comment line="154">
                    acceleration noise (meter/sec^2)                    
                </comment>
                <comment line="154">
                    A = [ 1 dt ]                    
                </comment>
                <comment line="154">
                    [ 0  1 ]                    
                </comment>
                <comment line="154">
                    B = [ dt^2/2 ]                    
                </comment>
                <comment line="154">
                    [ dt     ]                    
                </comment>
                <comment line="154">
                    H = [ 1 0 ]                    
                </comment>
                <comment line="154">
                    x = [ 0 0 ]                    
                </comment>
                <comment line="154">
                    Q = [ dt^4/4 dt^3/2 ]                    
                </comment>
                <comment line="154">
                    [ dt^3/2 dt^2   ]                    
                </comment>
                <comment line="154">
                    P0 = [ 1 1 ]                    
                </comment>
                <comment line="154">
                    [ 1 1 ]                    
                </comment>
                <comment line="154">
                    R = [ measurementNoise^2 ]                    
                </comment>
                <comment line="154">
                    constant control input, increase velocity by 0.1 m/s per cycle                    
                </comment>
                <comment line="154">
                    check the initial state                    
                </comment>
                <comment line="154">
                    iterate 60 steps                    
                </comment>
                <comment line="154">
                    error covariance of the velocity should be already very low (&lt; 0.1)                    
                </comment>
                <declaration name="dt" type="double" line="157"/>
                <declaration name="measurementNoise" type="double" line="159"/>
                <declaration name="accelNoise" type="double" line="161"/>
                <declaration name="A" type="RealMatrix" line="165"/>
                <declaration name="B" type="RealMatrix" line="169"/>
                <declaration name="H" type="RealMatrix" line="173"/>
                <declaration name="x" type="RealVector" line="176"/>
                <declaration name="tmp" type="RealMatrix" line="178"/>
                <declaration name="Q" type="RealMatrix" line="184"/>
                <declaration name="P0" type="RealMatrix" line="188"/>
                <declaration name="R" type="RealMatrix" line="191"/>
                <declaration name="u" type="RealVector" line="195"/>
                <declaration name="pm" type="ProcessModel" line="197"/>
                <declaration name="mm" type="MeasurementModel" line="198"/>
                <declaration name="filter" type="KalmanFilter" line="199"/>
                <declaration name="expectedInitialState" type="double[]" line="207"/>
                <declaration name="rand" type="RandomGenerator" line="210"/>
                <declaration name="tmpPNoise" type="RealVector" line="212"/>
                <declaration name="mNoise" type="RealVector" line="215"/>
                <scope line="218">
                    <declaration name="pNoise" type="RealVector" line="222"/>
                    <declaration name="z" type="RealVector" line="231"/>
                    <declaration name="diff" type="double" line="236"/>
                </scope>
            </method>
            <method name="assertVectorEquals" type="void" line="245">
                <params>
                    <param name="expected" type="double[]"/>
                    <param name="result" type="double[]"/>
                </params>
                <scope line="248"/>
            </method>
            <method name="assertMatrixEquals" type="void" line="254">
                <params>
                    <param name="expected" type="double[][]"/>
                    <param name="result" type="double[][]"/>
                </params>
                <scope line="257">
                    <scope line="260"/>
                </scope>
            </method>
        </class>
    </source>