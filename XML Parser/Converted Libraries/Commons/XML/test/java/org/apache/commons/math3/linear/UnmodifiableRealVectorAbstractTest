<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.util.Set"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.function.Sin"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <import package="org.apache.commons.math3.linear.RealVector.Entry"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="UnmodifiableRealVectorAbstractTest" line="33">
            <javadoc line="33">
                This is an abstract test of the {@link RealVector#unmodifiableRealVector(RealVector) unmodifiable vector}implementation. These unmodifiable vectors decorate a (modifiable){@link RealVector}; therefore, a new implementation of this abstract
                 * test should be considered for each implementation of{@link RealVector}.                
                <@version>
                    n $Id$                    
                </@version>
            </javadoc>
            <declaration name="DIM" type="int" line="45"/>
            <javadoc line="45">
                The dimension of the randomly generated vectors.                
            </javadoc>
            <declaration name="EPS" type="double" line="47"/>
            <javadoc line="47">
                Absolute tolerance.                
            </javadoc>
            <declaration name="EXCLUDE" type="Set&lt;String&gt;" line="49"/>
            <javadoc line="49">
                The list of methods which are excluded from the general test{@link #testAllButExcluded()}.                
            </javadoc>
            <declaration name="RANDOM" type="Random" line="54"/>
            <javadoc line="54">
                The random number generator (always initialized with the same seed.                
            </javadoc>
            <scope line="57">
                <scope line="71"/>
            </scope>
            <javadoc line="77">
                Returns {@code true} if the specified {@code double} are equal (within a
                 * given tolerance).                
                <@param>
                    m x First {@code double}.                    
                </@param>
                <@param>
                    m y Second {@code double}.                    
                </@param>
                <@return>
                    n {@code true} if {@code x} and {@code y} are equal.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="85">
                <scope line="86"/>
                <scope line="88"/>
                <scope line="90"/>
                <scope line="92"/>
            </method>
            <javadoc line="97">
                Returns {@code true} if the specified {@code double} arrays are equal
                 * (within a given tolerance).                
                <@param>
                    m x First array.                    
                </@param>
                <@param>
                    m y Second array.                    
                </@param>
                <@return>
                    n {@code true} if {@code x} and {@code y} are equal.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="105">
                <scope line="106"/>
                <declaration name="n" type="int" line="109"/>
                <scope line="110">
                    <scope line="111"/>
                </scope>
            </method>
            <javadoc line="118">
                Returns {@code true} if the specified {@code RealVector} are equal
                 * (within a given tolerance).                
                <@param>
                    m x First vector.                    
                </@param>
                <@param>
                    m y Second vector.                    
                </@param>
                <@return>
                    n {@code true} if {@code x} and {@code y} are equal.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="126">
                <scope line="127"/>
                <declaration name="n" type="int" line="130"/>
                <scope line="131">
                    <scope line="132"/>
                </scope>
            </method>
            <javadoc line="139">
                Returns {@code true} if the specified {@code RealVector} is equal to the
                 * specified {@code double} array (within a given tolerance).                
                <@param>
                    m x Vector.                    
                </@param>
                <@param>
                    m y Array.                    
                </@param>
                <@return>
                    n {@code true} if {@code x} and {@code y} are equal.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="147">
                <scope line="148"/>
                <declaration name="n" type="int" line="151"/>
                <scope line="152">
                    <scope line="153"/>
                </scope>
            </method>
            <javadoc line="160">
                Returns {@code true} if the specified {@code RealMatrix} are equal
                 * (within a given tolerance).                
                <@param>
                    m x First matrix.                    
                </@param>
                <@param>
                    m y Second matrix.                    
                </@param>
                <@return>
                    n {@code true} if {@code x} and {@code y} are equal.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="168">
                <scope line="169"/>
                <scope line="172"/>
                <declaration name="rows" type="int" line="175"/>
                <declaration name="cols" type="int" line="176"/>
                <scope line="177">
                    <scope line="178">
                        <scope line="179"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="187">
                Returns {@code true} if the specified {@code Object} are equal.                
                <@param>
                    m x First object.                    
                </@param>
                <@param>
                    m y Second object.                    
                </@param>
                <@return>
                    n {@code true} if {@code x} and {@code y} are equal.                    
                </@return>
                <@throws>
                    s IllegalArgumentException if {@code x} and {@code y} could
                     * not be compared.                    
                </@throws>
            </javadoc>
            <method name="equals" type="boolean" line="196">
                <scope line="197">
                    <scope line="198"/>
                    <scope line="201"/>
                </scope>
                <scope line="205">
                    <scope line="206"/>
                    <scope line="208"/>
                </scope>
                <scope line="211">
                    <scope line="212"/>
                    <scope line="215"/>
                </scope>
                <scope line="218">
                    <scope line="219"/>
                    <scope line="221"/>
                    <scope line="223"/>
                </scope>
                <scope line="226">
                    <scope line="227"/>
                    <scope line="229"/>
                    <scope line="231"/>
                </scope>
                <scope line="234">
                    <scope line="235"/>
                    <scope line="237"/>
                </scope>
                <scope line="240"/>
            </method>
            <method name="createVector" type="RealVector" line="246"/>
            <javadoc line="246">
                Creates a new random vector of a specified type. This vector is then to
                 * be wrapped in an unmodifiable vector.                
                <@return>
                    n a new random vector.                    
                </@return>
            </javadoc>
            <javadoc line="254">
                Creates a new random object of the specified type.                
                <@param>
                    m c Class of the object to be created.                    
                </@param>
                <@return>
                    n a new random object.                    
                </@return>
                <@throws>
                    s IllegalArgumentException if the specified class is not
                     * recognized by this method.                    
                </@throws>
            </javadoc>
            <method name="createParameter" type="Object" line="262">
                <scope line="263"/>
                <scope line="265"/>
                <scope line="267">
                    <declaration name="v" type="double[]" line="268"/>
                    <scope line="269"/>
                </scope>
                <scope line="273"/>
                <scope line="275"/>
                <scope line="277"/>
            </method>
            <javadoc line="282">
                This is the general test of most methods in the{@link RealVector#unmodifiableRealVector(RealVector) unmodifiable vector}.
                 * It works as follows.
                 * First, an unmodifiable view of a copy of the specified random vector{@code u} is created: this defines {@code v}. Then the &lt;em&gt;same&lt;/em&gt;
                 * method {@code m} is invoked on {@code u} and {@code v}, with randomly
                 * generated parameters {@code args}.
                 * If it turns out that {@code u} has changed after the call of method{@code m}, then this test checks that the call of this method on{@code v} resulted in a {@link MathUnsupportedOperationException}. If{@code u} was not modified, then this test checks that the results
                 * returned by the call of method {@code m} on {@code u} and {@code v}returned the same result.                
                <@param>
                    m m Method to be tested.                    
                </@param>
                <@param>
                    m u Random vector from which the unmodifiable view is to be
                     * constructed.                    
                </@param>
                <@param>
                    m args Arguments to be passed to method {@code m}.                    
                </@param>
            </javadoc>
            <method name="callMethod" type="void" line="307">
                <declaration name="uu" type="RealVector" line="308"/>
                <declaration name="v" type="RealVector" line="309"/>
                <declaration name="exp" type="Object" line="310"/>
                <scope line="311">
                    <declaration name="act" type="Object" line="312"/>
                </scope>
                <scope line="318">
                    <declaration name="flag" type="boolean" line="319"/>
                    <scope line="320"/>
                    <scope line="322">
                        <scope line="323"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="331">
                This test calls {@link #callMethod(Method,RealVector,Object)} on
                 * every method defined in interface {@link RealVector}. It generates the
                 * appropriate random arguments. Some methods are manually excluded (see{@link #EXCLUDE}), they must be handled by separate tests.                
            </javadoc>
            <method name="testAllButExcluded" type="void" line="341">
                <declaration name="method" type="Method[]" line="342"/>
                <scope line="343">
                    <declaration name="m" type="Method" line="344"/>
                    <scope line="345">
                        <declaration name="u" type="RealVector" line="346"/>
                        <declaration name="paramType" type="Class&lt;?&gt;[]" line="347"/>
                        <declaration name="param" type="Object[]" line="348"/>
                        <scope line="349"/>
                    </scope>
                </scope>
            </method>
            <method name="testGetEntry" type="void" line="358">
                <declaration name="u" type="RealVector" line="359"/>
                <declaration name="v" type="RealVector" line="360"/>
                <scope line="361"/>
            </method>
            <method name="testSetEntry" type="void" line="367">
                <declaration name="u" type="RealVector" line="368"/>
                <declaration name="v" type="RealVector" line="369"/>
                <scope line="370"/>
            </method>
            <method name="testAddToEntry" type="void" line="376">
                <declaration name="u" type="RealVector" line="377"/>
                <declaration name="v" type="RealVector" line="378"/>
                <scope line="379"/>
            </method>
            <method name="testGetSubVector" type="void" line="385">
                <declaration name="u" type="RealVector" line="386"/>
                <declaration name="v" type="RealVector" line="387"/>
                <scope line="388">
                    <scope line="389">
                        <declaration name="exp" type="RealVector" line="390"/>
                        <declaration name="act" type="RealVector" line="391"/>
                    </scope>
                </scope>
            </method>
            <method name="testSetSubVector" type="void" line="398">
                <declaration name="u" type="RealVector" line="399"/>
                <declaration name="v" type="RealVector" line="400"/>
            </method>
            <method name="testIterator" type="void" line="405">
                <declaration name="u" type="RealVector" line="406"/>
                <declaration name="i" type="Iterator&lt;Entry&gt;" line="407"/>
                <declaration name="v" type="RealVector" line="408"/>
                <declaration name="j" type="Iterator&lt;Entry&gt;" line="409"/>
                <declaration name="flag" type="boolean" line="410"/>
                <scope line="411">
                    <declaration name="exp" type="Entry" line="413"/>
                    <declaration name="act" type="Entry" line="414"/>
                    <scope line="420"/>
                    <scope line="422"/>
                </scope>
            </method>
            <method name="testSparseIterator" type="void" line="431">
                <declaration name="u" type="RealVector" line="432"/>
                <declaration name="i" type="Iterator&lt;Entry&gt;" line="433"/>
                <declaration name="v" type="RealVector" line="434"/>
                <declaration name="j" type="Iterator&lt;Entry&gt;" line="435"/>
                <declaration name="flag" type="boolean" line="436"/>
                <scope line="437">
                    <declaration name="exp" type="Entry" line="439"/>
                    <declaration name="act" type="Entry" line="440"/>
                    <scope line="446"/>
                    <scope line="448"/>
                </scope>
            </method>
        </class>
    </source>