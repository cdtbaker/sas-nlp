<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.solvers">
        <import package="org.apache.commons.math3.analysis.QuinticFunction"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="BracketingNthOrderBrentSolverTest" line="29">
            <extends class="BaseSecantSolverAbstractTest"/>
            <javadoc line="29">
                Test case for {@link BracketingNthOrderBrentSolver bracketing n&lt;sup&gt;th&lt;/sup&gt; order Brent} solver.                
                <@version>
                    n $Id: BracketingNthOrderBrentSolverTest.java 1383441 2012-09-11 14:56:39Z luc $                    
                </@version>
            </javadoc>
            <javadoc line="35">
                {@inheritDoc}                
            </javadoc>
            <method name="getSolver" type="UnivariateSolver" line="37"/>
            <javadoc line="41">
                {@inheritDoc}                
            </javadoc>
            <method name="getQuinticEvalCounts" type="int[]" line="43"/>
            <method name="testInsufficientOrder1" type="void" line="48"/>
            <method name="testInsufficientOrder2" type="void" line="53"/>
            <method name="testInsufficientOrder3" type="void" line="58"/>
            <method name="testConstructorsOK" type="void" line="63"/>
            <method name="testConvergenceOnFunctionAccuracy" type="void" line="70">
                <declaration name="solver" type="BracketingNthOrderBrentSolver" line="71"/>
                <declaration name="f" type="QuinticFunction" line="73"/>
                <declaration name="result" type="double" line="74"/>
            </method>
            <method name="testIssue716" type="void" line="85">
                <declaration name="solver" type="BracketingNthOrderBrentSolver" line="86"/>
                <anonymous_class line="88">
                    <method name="value" type="double" line="89">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="sharpTurn" type="UnivariateFunction" line="88"/>
                <declaration name="result" type="double" line="93"/>
            </method>
            <method name="testFasterThanNewton" type="void" line="100">
                <comment line="101">
                    the following test functions come from Beny Neta&apos;s paper:                    
                </comment>
                <comment line="101">
                    &quot;Several New Methods for solving Equations&quot;                    
                </comment>
                <comment line="101">
                    intern J. Computer Math Vol 23 pp 265-282                    
                </comment>
                <comment line="101">
                    available here: http://www.math.nps.navy.mil/~bneta/SeveralNewMethods.PDF                    
                </comment>
                <comment line="101">
                    the reference roots have been computed by the Dfp solver to more than                    
                </comment>
                <comment line="101">
                    80 digits and checked with emacs (only the first 20 digits are reproduced here)                    
                </comment>
                <anonymous_class line="107">
                    <method name="value" type="DerivativeStructure" line="109">
                        <params>
                            <param name="x" type="DerivativeStructure"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="113">
                    <method name="value" type="DerivativeStructure" line="115">
                        <params>
                            <param name="x" type="DerivativeStructure"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="119">
                    <method name="value" type="DerivativeStructure" line="121">
                        <params>
                            <param name="x" type="DerivativeStructure"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="125">
                    <method name="value" type="DerivativeStructure" line="127">
                        <params>
                            <param name="x" type="DerivativeStructure"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="131">
                    <method name="value" type="DerivativeStructure" line="133">
                        <params>
                            <param name="x" type="DerivativeStructure"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="137">
                    <method name="value" type="DerivativeStructure" line="139">
                        <params>
                            <param name="x" type="DerivativeStructure"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <method name="compare" type="void" line="146">
                <params>
                    <param name="f" type="TestFunction"/>
                </params>
            </method>
            <method name="compare" type="void" line="151">
                <params>
                    <param name="f" type="UnivariateDifferentiableFunction"/>
                    <param name="root" type="double"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                </params>
                <comment line="152">
                    bracketing solver evaluates only function value, we set the weight to 1                    
                </comment>
                <comment line="152">
                    Newton-Raphson solver evaluates both function value and derivative, we set the weight to 2                    
                </comment>
                <declaration name="newton" type="NewtonRaphsonSolver" line="152"/>
                <declaration name="bracketing" type="BracketingNthOrderBrentSolver" line="153"/>
                <declaration name="resultN" type="double" line="155"/>
                <scope line="156"/>
                <scope line="158"/>
                <declaration name="resultB" type="double" line="161"/>
                <scope line="162"/>
                <scope line="164"/>
                <declaration name="weightedBracketingEvaluations" type="int" line="171"/>
                <declaration name="weightedNewtonEvaluations" type="int" line="174"/>
            </method>
            <class name="TestFunction" line="180">
                <implements interface="UnivariateDifferentiableFunction"/>
                <declaration name="root" type="double" line="182"/>
                <declaration name="min" type="double" line="183"/>
                <declaration name="max" type="double" line="184"/>
                <method name="TestFunction" type="constructor" line="186">
                    <params>
                        <param name="root" type="double"/>
                        <param name="min" type="double"/>
                        <param name="max" type="double"/>
                    </params>
                </method>
                <method name="getRoot" type="double" line="192"/>
                <method name="getMin" type="double" line="196"/>
                <method name="getMax" type="double" line="200"/>
                <method name="value" type="double" line="204">
                    <params>
                        <param name="x" type="double"/>
                    </params>
                </method>
                <method name="value" type="DerivativeStructure" line="208"/>
            </class>
        </class>
    </source>