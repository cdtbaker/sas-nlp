<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.fitting">
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialFunction"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric"/>
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer"/>
        <import package="org.apache.commons.math3.optimization.general.GaussNewtonOptimizer"/>
        <import package="org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer"/>
        <import package="org.apache.commons.math3.optimization.SimpleVectorValueChecker"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.distribution.RealDistribution"/>
        <import package="org.apache.commons.math3.distribution.UniformRealDistribution"/>
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.junit.Test"/>
        <import package="org.junit.Assert"/>
        <class name="PolynomialFitterTest" line="38">
            <javadoc line="38">
                Test for class {@link CurveFitter} where the function to fit is a
                 * polynomial.                
            </javadoc>
            <method name="testFit" type="void" line="44">
                <comment line="45">
                    nal double[] coeff = { 12.9, -3.4, 2.1 }; // 12.9 - 3.4 x + 2.1 x^2                    
                </comment>
                <comment line="45">
                    Collect data from a known polynomial.                    
                </comment>
                <comment line="45">
                    Start fit from initial guesses that are far from the optimal values.                    
                </comment>
                <declaration name="rng" type="RealDistribution" line="45"/>
                <declaration name="optim" type="LevenbergMarquardtOptimizer" line="48"/>
                <declaration name="fitter" type="PolynomialFitter" line="49"/>
                <declaration name="coeff" type="double[]" line="50"/>
                <declaration name="f" type="PolynomialFunction" line="51"/>
                <scope line="54">
                    <declaration name="x" type="double" line="55"/>
                </scope>
                <declaration name="best" type="double[]" line="60"/>
            </method>
            <method name="testNoError" type="void" line="66">
                <declaration name="randomizer" type="Random" line="67"/>
                <scope line="68">
                    <declaration name="p" type="PolynomialFunction" line="69"/>
                    <declaration name="fitter" type="PolynomialFitter" line="71"/>
                    <scope line="72"/>
                    <declaration name="init" type="double[]" line="76"/>
                    <declaration name="fitted" type="PolynomialFunction" line="77"/>
                    <scope line="79">
                        <declaration name="error" type="double" line="80"/>
                    </scope>
                </scope>
            </method>
            <method name="testSmallError" type="void" line="88">
                <declaration name="randomizer" type="Random" line="89"/>
                <declaration name="maxError" type="double" line="90"/>
                <scope line="91">
                    <declaration name="p" type="PolynomialFunction" line="92"/>
                    <declaration name="fitter" type="PolynomialFitter" line="94"/>
                    <scope line="95"/>
                    <declaration name="init" type="double[]" line="100"/>
                    <declaration name="fitted" type="PolynomialFunction" line="101"/>
                    <scope line="103">
                        <declaration name="error" type="double" line="104"/>
                    </scope>
                </scope>
            </method>
            <method name="testMath798" type="void" line="114">
                <declaration name="tol" type="double" line="115"/>
                <declaration name="checker" type="SimpleVectorValueChecker" line="116"/>
                <declaration name="init" type="double[]" line="117"/>
                <declaration name="maxEval" type="int" line="118"/>
                <declaration name="lm" type="double[]" line="120"/>
                <declaration name="gn" type="double[]" line="121"/>
                <scope line="123"/>
            </method>
            <javadoc line="128">
                This test shows that the user can set the maximum number of iterations
                 * to avoid running for too long.
                 * But in the test case, the real problem is that the tolerance is way too
                 * stringent.                
            </javadoc>
            <method name="testMath798WithToleranceTooLow" type="void" line="135">
                <comment line="136">
                    nal int maxEval = 10000; // Trying hard to fit.                    
                </comment>
                <declaration name="tol" type="double" line="136"/>
                <declaration name="checker" type="SimpleVectorValueChecker" line="137"/>
                <declaration name="init" type="double[]" line="138"/>
                <declaration name="maxEval" type="int" line="139"/>
                <declaration name="gn" type="double[]" line="141"/>
            </method>
            <javadoc line="144">
                This test shows that the user can set the maximum number of iterations
                 * to avoid running for too long.
                 * Even if the real problem is that the tolerance is way too stringent, it
                 * is possible to get the best solution so far, i.e. a checker will return
                 * the point when the maximum iteration count has been reached.                
            </javadoc>
            <method name="testMath798WithToleranceTooLowButNoException" type="void" line="152">
                <comment line="153">
                    nal int maxEval = 10000; // Trying hard to fit.                    
                </comment>
                <declaration name="tol" type="double" line="153"/>
                <declaration name="init" type="double[]" line="154"/>
                <declaration name="maxEval" type="int" line="155"/>
                <declaration name="checker" type="SimpleVectorValueChecker" line="156"/>
                <declaration name="lm" type="double[]" line="158"/>
                <declaration name="gn" type="double[]" line="159"/>
                <scope line="161"/>
            </method>
            <javadoc line="166">
                @param optimizer Optimizer.                
                <@param>
                    m maxEval Maximum number of function evaluations.                    
                </@param>
                <@param>
                    m init First guess.                    
                </@param>
                <@return>
                    n the solution found by the given optimizer.                    
                </@return>
            </javadoc>
            <method name="doMath798" type="double[]" line="174">
                <declaration name="fitter" type="CurveFitter&lt;Parametric&gt;" line="175"/>
                <declaration name="coeff" type="double[]" line="208"/>
            </method>
            <method name="testRedundantSolvable" type="void" line="215">
                <comment line="216">
                    Levenberg-Marquardt should handle redundant information gracefully                    
                </comment>
            </method>
            <method name="testRedundantUnsolvable" type="void" line="221">
                <comment line="222">
                    Gauss-Newton should not be able to solve redundant information                    
                </comment>
            </method>
            <method name="testLargeSample" type="void" line="227">
                <declaration name="randomizer" type="Random" line="228"/>
                <declaration name="maxError" type="double" line="229"/>
                <scope line="230">
                    <declaration name="p" type="PolynomialFunction" line="231"/>
                    <declaration name="fitter" type="PolynomialFitter" line="233"/>
                    <scope line="234">
                        <declaration name="x" type="double" line="235"/>
                    </scope>
                    <declaration name="init" type="double[]" line="240"/>
                    <declaration name="fitted" type="PolynomialFunction" line="241"/>
                    <scope line="243">
                        <declaration name="error" type="double" line="244"/>
                    </scope>
                </scope>
            </method>
            <method name="checkUnsolvableProblem" type="void" line="254">
                <declaration name="randomizer" type="Random" line="255"/>
                <scope line="256">
                    <declaration name="p" type="PolynomialFunction" line="257"/>
                    <declaration name="fitter" type="PolynomialFitter" line="259"/>
                    <scope line="265"/>
                    <scope line="269">
                        <declaration name="init" type="double[]" line="270"/>
                    </scope>
                    <scope line="273"/>
                </scope>
            </method>
            <method name="buildRandomPolynomial" type="PolynomialFunction" line="279">
                <declaration name="coefficients" type="double[]" line="280"/>
                <scope line="281"/>
            </method>
        </class>
    </source>