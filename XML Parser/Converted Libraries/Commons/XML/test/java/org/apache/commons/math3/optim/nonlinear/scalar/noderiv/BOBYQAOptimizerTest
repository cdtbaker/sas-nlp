<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv">
        <import package="java.util.Arrays"/>
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.optim.MaxEval"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.GoalType"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.optim.InitialGuess"/>
        <import package="org.apache.commons.math3.optim.SimpleBounds"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Ignore"/>
        <import package="org.junit.Test"/>
        <class name="BOBYQAOptimizerTest" line="36">
            <comment line="37">
                See MATH-728                
            </comment>
            <comment line="37">
                TODO: this test is temporarily disabled for 3.2 release as a bug in Cobertura                
            </comment>
            <comment line="37">
                makes it run for several hours before completing                
            </comment>
            <javadoc line="36">
                Test for {@link BOBYQAOptimizer}.                
            </javadoc>
            <declaration name="DIM" type="int" line="41"/>
            <method name="testInitOutOfBounds" type="void" line="44">
                <declaration name="startPoint" type="double[]" line="45"/>
                <declaration name="boundaries" type="double[][]" line="46"/>
            </method>
            <method name="testBoundariesDimensionMismatch" type="void" line="53">
                <declaration name="startPoint" type="double[]" line="54"/>
                <declaration name="boundaries" type="double[][]" line="55"/>
            </method>
            <method name="testProblemDimensionTooSmall" type="void" line="62">
                <declaration name="startPoint" type="double[]" line="63"/>
            </method>
            <method name="testMaxEvaluations" type="void" line="70">
                <declaration name="lowMaxEval" type="int" line="71"/>
                <declaration name="startPoint" type="double[]" line="72"/>
                <declaration name="boundaries" type="double[][]" line="73"/>
            </method>
            <method name="testRosen" type="void" line="80">
                <declaration name="startPoint" type="double[]" line="81"/>
                <declaration name="boundaries" type="double[][]" line="82"/>
                <declaration name="expected" type="PointValuePair" line="83"/>
            </method>
            <method name="testMaximize" type="void" line="90">
                <declaration name="startPoint" type="double[]" line="91"/>
                <declaration name="boundaries" type="double[][]" line="92"/>
                <declaration name="expected" type="PointValuePair" line="93"/>
            </method>
            <method name="testEllipse" type="void" line="105">
                <declaration name="startPoint" type="double[]" line="106"/>
                <declaration name="boundaries" type="double[][]" line="107"/>
                <declaration name="expected" type="PointValuePair" line="108"/>
            </method>
            <method name="testElliRotated" type="void" line="116">
                <declaration name="startPoint" type="double[]" line="117"/>
                <declaration name="boundaries" type="double[][]" line="118"/>
                <declaration name="expected" type="PointValuePair" line="119"/>
            </method>
            <method name="testCigar" type="void" line="127">
                <declaration name="startPoint" type="double[]" line="128"/>
                <declaration name="boundaries" type="double[][]" line="129"/>
                <declaration name="expected" type="PointValuePair" line="130"/>
            </method>
            <method name="testTwoAxes" type="void" line="138">
                <declaration name="startPoint" type="double[]" line="139"/>
                <declaration name="boundaries" type="double[][]" line="140"/>
                <declaration name="expected" type="PointValuePair" line="141"/>
            </method>
            <method name="testCigTab" type="void" line="149">
                <declaration name="startPoint" type="double[]" line="150"/>
                <declaration name="boundaries" type="double[][]" line="151"/>
                <declaration name="expected" type="PointValuePair" line="152"/>
            </method>
            <method name="testSphere" type="void" line="160">
                <declaration name="startPoint" type="double[]" line="161"/>
                <declaration name="boundaries" type="double[][]" line="162"/>
                <declaration name="expected" type="PointValuePair" line="163"/>
            </method>
            <method name="testTablet" type="void" line="171">
                <declaration name="startPoint" type="double[]" line="172"/>
                <declaration name="boundaries" type="double[][]" line="173"/>
                <declaration name="expected" type="PointValuePair" line="174"/>
            </method>
            <method name="testDiffPow" type="void" line="182">
                <declaration name="startPoint" type="double[]" line="183"/>
                <declaration name="boundaries" type="double[][]" line="184"/>
                <declaration name="expected" type="PointValuePair" line="185"/>
            </method>
            <method name="testSsDiffPow" type="void" line="193">
                <declaration name="startPoint" type="double[]" line="194"/>
                <declaration name="boundaries" type="double[][]" line="195"/>
                <declaration name="expected" type="PointValuePair" line="196"/>
            </method>
            <method name="testAckley" type="void" line="204">
                <declaration name="startPoint" type="double[]" line="205"/>
                <declaration name="boundaries" type="double[][]" line="206"/>
                <declaration name="expected" type="PointValuePair" line="207"/>
            </method>
            <method name="testRastrigin" type="void" line="215">
                <declaration name="startPoint" type="double[]" line="216"/>
                <declaration name="boundaries" type="double[][]" line="218"/>
                <declaration name="expected" type="PointValuePair" line="219"/>
            </method>
            <method name="testConstrainedRosen" type="void" line="227">
                <declaration name="startPoint" type="double[]" line="228"/>
                <declaration name="boundaries" type="double[][]" line="230"/>
                <declaration name="expected" type="PointValuePair" line="231"/>
            </method>
            <method name="testConstrainedRosenWithMoreInterpolationPoints" type="void" line="242">
                <comment line="243">
                    This should have been 78 because in the code the hard limit is                    
                </comment>
                <comment line="243">
                    said to be                    
                </comment>
                <comment line="243">
                    ((DIM + 1) * (DIM + 2)) / 2 - (2 * DIM + 1)                    
                </comment>
                <comment line="243">
                    i.e. 78 in this case, but the test fails for 48, 59, 62, 63, 64,                    
                </comment>
                <comment line="243">
                    65, 66, ...                    
                </comment>
                <declaration name="startPoint" type="double[]" line="243"/>
                <declaration name="boundaries" type="double[][]" line="244"/>
                <declaration name="expected" type="PointValuePair" line="245"/>
                <declaration name="maxAdditionalPoints" type="int" line="252"/>
                <scope line="254"/>
            </method>
            <javadoc line="264">
                @param func Function to optimize.                
                <@param>
                    m startPoint Starting point.                    
                </@param>
                <@param>
                    m boundaries Upper / lower point limit.                    
                </@param>
                <@param>
                    m goal Minimization or maximization.                    
                </@param>
                <@param>
                    m fTol Tolerance relative error on the objective function.                    
                </@param>
                <@param>
                    m pointTol Tolerance for checking that the optimum is correct.                    
                </@param>
                <@param>
                    m maxEvaluations Maximum number of evaluations.                    
                </@param>
                <@param>
                    m expected Expected point / value.                    
                </@param>
            </javadoc>
            <method name="doTest" type="void" line="281">
                <params>
                    <param name="func" type="MultivariateFunction"/>
                    <param name="startPoint" type="double[]"/>
                    <param name="boundaries" type="double[][]"/>
                    <param name="goal" type="GoalType"/>
                    <param name="fTol" type="double"/>
                    <param name="pointTol" type="double"/>
                    <param name="maxEvaluations" type="int"/>
                    <param name="expected" type="PointValuePair"/>
                </params>
            </method>
            <javadoc line="294">
                @param func Function to optimize.                
                <@param>
                    m startPoint Starting point.                    
                </@param>
                <@param>
                    m boundaries Upper / lower point limit.                    
                </@param>
                <@param>
                    m goal Minimization or maximization.                    
                </@param>
                <@param>
                    m fTol Tolerance relative error on the objective function.                    
                </@param>
                <@param>
                    m pointTol Tolerance for checking that the optimum is correct.                    
                </@param>
                <@param>
                    m maxEvaluations Maximum number of evaluations.                    
                </@param>
                <@param>
                    m additionalInterpolationPoints Number of interpolation to used
                      in addition to the default (2  dim + 1).                    
                </@param>
                <@param>
                    m expected Expected point / value.                    
                </@param>
            </javadoc>
            <method name="doTest" type="void" line="315">
                <params>
                    <param name="func" type="MultivariateFunction"/>
                    <param name="startPoint" type="double[]"/>
                    <param name="boundaries" type="double[][]"/>
                    <param name="goal" type="GoalType"/>
                    <param name="fTol" type="double"/>
                    <param name="pointTol" type="double"/>
                    <param name="maxEvaluations" type="int"/>
                    <param name="additionalInterpolationPoints" type="int"/>
                    <param name="expected" type="PointValuePair"/>
                    <param name="assertMsg" type="String"/>
                </params>
                <comment line="316">
                    System.out.println(func.getClass().getName() + &quot; BEGIN&quot;); // XXX                    
                </comment>
                <comment line="316">
                    System.out.println(func.getClass().getName() + &quot; = &quot;                    
                </comment>
                <comment line="316">
                    + optim.getEvaluations() + &quot; f(&quot;);                    
                </comment>
                <comment line="316">
                    for (double x: result.getPoint())  System.out.print(x + &quot; &quot;);                    
                </comment>
                <comment line="316">
                    System.out.println(&quot;) = &quot; +  result.getValue());                    
                </comment>
                <comment line="316">
                    System.out.println(func.getClass().getName() + &quot; END&quot;); // XXX                    
                </comment>
                <declaration name="dim" type="int" line="319"/>
                <declaration name="numIterpolationPoints" type="int" line="320"/>
                <declaration name="optim" type="BOBYQAOptimizer" line="321"/>
                <declaration name="result" type="PointValuePair" line="322"/>
                <scope line="339"/>
            </method>
            <method name="point" type="double[]" line="347">
                <params>
                    <param name="n" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="ds" type="double[]" line="348"/>
            </method>
            <method name="boundaries" type="double[][]" line="354">
                <params>
                    <param name="dim" type="int"/>
                    <param name="lower" type="double"/>
                    <param name="upper" type="double"/>
                </params>
                <declaration name="boundaries" type="double[][]" line="355"/>
            </method>
            <class name="Sphere" line="363">
                <comment line="500">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    ndom rand = new Random(2); // use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="365">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="366"/>
                </method>
            </class>
            <class name="Cigar" line="373">
                <comment line="500">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    ndom rand = new Random(2); // use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="374"/>
                <method name="Cigar" type="constructor" line="376"/>
                <method name="Cigar" type="constructor" line="380">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="384">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="385"/>
                </method>
            </class>
            <class name="Tablet" line="392">
                <comment line="500">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    ndom rand = new Random(2); // use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="393"/>
                <method name="Tablet" type="constructor" line="395"/>
                <method name="Tablet" type="constructor" line="399">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="403">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="404"/>
                </method>
            </class>
            <class name="CigTab" line="411">
                <comment line="500">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    ndom rand = new Random(2); // use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="412"/>
                <method name="CigTab" type="constructor" line="414"/>
                <method name="CigTab" type="constructor" line="418">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="422">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="end" type="int" line="423"/>
                    <declaration name="f" type="double" line="424"/>
                </method>
            </class>
            <class name="TwoAxes" line="431">
                <comment line="500">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    ndom rand = new Random(2); // use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="433"/>
                <method name="TwoAxes" type="constructor" line="435"/>
                <method name="TwoAxes" type="constructor" line="439">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="443">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="444"/>
                </method>
            </class>
            <class name="ElliRotated" line="451">
                <comment line="500">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    ndom rand = new Random(2); // use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="B" type="Basis" line="452"/>
                <declaration name="factor" type="double" line="453"/>
                <method name="ElliRotated" type="constructor" line="455"/>
                <method name="ElliRotated" type="constructor" line="459">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="463">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="464"/>
                </method>
            </class>
            <class name="Elli" line="472">
                <comment line="500">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    ndom rand = new Random(2); // use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="474"/>
                <method name="Elli" type="constructor" line="476"/>
                <method name="Elli" type="constructor" line="480">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="484">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="485"/>
                </method>
            </class>
            <class name="MinusElli" line="492">
                <comment line="500">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    ndom rand = new Random(2); // use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="elli" type="Elli" line="493"/>
                <method name="value" type="double" line="494">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                </method>
            </class>
            <class name="DiffPow" line="499">
                <comment line="500">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    ndom rand = new Random(2); // use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="501">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <comment line="502">
                        System.out.print(&quot;&quot; + (fcount++) + &quot;) &quot;);                        
                    </comment>
                    <comment line="502">
                        for (int i = 0; i &lt; x.length; i++)                        
                    </comment>
                    <comment line="502">
                        System.out.print(x[i] +  &quot; &quot;);                        
                    </comment>
                    <comment line="502">
                        System.out.println(&quot; = &quot; + f);                        
                    </comment>
                    <declaration name="f" type="double" line="502"/>
                </method>
            </class>
            <class name="SsDiffPow" line="514">
                <comment line="500">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    ndom rand = new Random(2); // use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="516">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="517"/>
                </method>
            </class>
            <class name="Rosen" line="522">
                <comment line="500">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    ndom rand = new Random(2); // use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="524">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="525"/>
                </method>
            </class>
            <class name="Ackley" line="533">
                <comment line="500">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    ndom rand = new Random(2); // use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="axisratio" type="double" line="534"/>
                <method name="Ackley" type="constructor" line="536">
                    <params>
                        <param name="axra" type="double"/>
                    </params>
                </method>
                <method name="Ackley" type="constructor" line="540"/>
                <method name="value" type="double" line="544">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="545"/>
                    <declaration name="res2" type="double" line="546"/>
                    <declaration name="fac" type="double" line="547"/>
                    <scope line="548"/>
                </method>
            </class>
            <class name="Rastrigin" line="559">
                <comment line="500">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    ndom rand = new Random(2); // use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="axisratio" type="double" line="561"/>
                <declaration name="amplitude" type="double" line="562"/>
                <method name="Rastrigin" type="constructor" line="564"/>
                <method name="Rastrigin" type="constructor" line="568">
                    <params>
                        <param name="axisratio" type="double"/>
                        <param name="amplitude" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="573">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="574"/>
                    <declaration name="fac" type="double" line="575"/>
                    <scope line="576"/>
                </method>
            </class>
            <class name="Basis" line="587">
                <comment line="500">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    ndom rand = new Random(2); // use not always the same basis                    
                </comment>
                <declaration name="basis" type="double[][]" line="588"/>
                <declaration name="rand" type="Random" line="589"/>
                <method name="Rotate" type="double[]" line="591">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="y" type="double[]" line="593"/>
                    <scope line="594"/>
                </method>
                <method name="GenBasis" type="void" line="602">
                    <params>
                        <param name="DIM" type="int"/>
                    </params>
                    <comment line="603">
                        generate orthogonal basis                        
                    </comment>
                    <declaration name="sp" type="double" line="606"/>
                    <declaration name="i" type="int" line="607"/>
                    <scope line="611">
                        <scope line="616"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>