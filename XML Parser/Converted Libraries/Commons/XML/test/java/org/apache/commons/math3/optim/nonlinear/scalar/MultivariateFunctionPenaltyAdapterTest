<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar">
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.optim.MaxEval"/>
        <import package="org.apache.commons.math3.optim.InitialGuess"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.optim.SimplePointChecker"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="MultivariateFunctionPenaltyAdapterTest" line="30">
            <method name="testStartSimplexInsideRange" type="void" line="32">
                <declaration name="biQuadratic" type="BiQuadratic" line="33"/>
                <declaration name="wrapped" type="MultivariateFunctionPenaltyAdapter" line="34"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="40"/>
                <declaration name="simplex" type="AbstractSimplex" line="41"/>
                <declaration name="optimum" type="PointValuePair" line="43"/>
            </method>
            <method name="testStartSimplexOutsideRange" type="void" line="55">
                <declaration name="biQuadratic" type="BiQuadratic" line="56"/>
                <declaration name="wrapped" type="MultivariateFunctionPenaltyAdapter" line="57"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="63"/>
                <declaration name="simplex" type="AbstractSimplex" line="64"/>
                <declaration name="optimum" type="PointValuePair" line="66"/>
            </method>
            <method name="testOptimumOutsideRange" type="void" line="78">
                <declaration name="biQuadratic" type="BiQuadratic" line="79"/>
                <declaration name="wrapped" type="MultivariateFunctionPenaltyAdapter" line="80"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="86"/>
                <declaration name="simplex" type="AbstractSimplex" line="87"/>
                <declaration name="optimum" type="PointValuePair" line="89"/>
            </method>
            <method name="testUnbounded" type="void" line="101">
                <declaration name="biQuadratic" type="BiQuadratic" line="102"/>
                <declaration name="wrapped" type="MultivariateFunctionPenaltyAdapter" line="105"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="111"/>
                <declaration name="simplex" type="AbstractSimplex" line="112"/>
                <declaration name="optimum" type="PointValuePair" line="114"/>
            </method>
            <method name="testHalfBounded" type="void" line="126">
                <declaration name="biQuadratic" type="BiQuadratic" line="127"/>
                <declaration name="wrapped" type="MultivariateFunctionPenaltyAdapter" line="130"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="136"/>
                <declaration name="simplex" type="AbstractSimplex" line="137"/>
                <declaration name="optimum" type="PointValuePair" line="139"/>
            </method>
            <class name="BiQuadratic" line="150">
                <implements interface="MultivariateFunction"/>
                <declaration name="xOptimum" type="double" line="152"/>
                <declaration name="yOptimum" type="double" line="153"/>
                <declaration name="xMin" type="double" line="155"/>
                <declaration name="xMax" type="double" line="156"/>
                <declaration name="yMin" type="double" line="157"/>
                <declaration name="yMax" type="double" line="158"/>
                <method name="BiQuadratic" type="constructor" line="162"/>
                <method name="value" type="double" line="171">
                    <comment line="172">
                        the function should never be called with out of range points                        
                    </comment>
                    <declaration name="dx" type="double" line="178"/>
                    <declaration name="dy" type="double" line="179"/>
                </method>
                <method name="getLower" type="double[]" line="184"/>
                <method name="getUpper" type="double[]" line="188"/>
                <method name="getBoundedXOptimum" type="double" line="192"/>
                <method name="getBoundedYOptimum" type="double" line="196"/>
            </class>
        </class>
    </source>