<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.vector.jacobian">
        <import package="java.io.BufferedReader"/>
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="org.apache.commons.math3.analysis.MultivariateVectorFunction"/>
        <import package="org.apache.commons.math3.analysis.MultivariateMatrixFunction"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.ModelFunction"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="StatisticalReferenceDataset" line="28">
            <javadoc line="28">
                This class gives access to the statistical reference datasets provided by the
                  NIST (available
                  &lt;a href=&quot;http://www.itl.nist.gov/div898/strd/general/dataarchive.html&quot;&gt;here&lt;/a&gt;).
                  Instances of this class can be created by invocation of the{@link StatisticalReferenceDatasetFactory}.                
            </javadoc>
            <declaration name="name" type="String" line="37"/>
            <javadoc line="37">
                The name of this dataset.                
            </javadoc>
            <declaration name="numObservations" type="int" line="40"/>
            <javadoc line="40">
                The total number of observations (data points).                
            </javadoc>
            <declaration name="numParameters" type="int" line="43"/>
            <javadoc line="43">
                The total number of parameters.                
            </javadoc>
            <declaration name="numStartingPoints" type="int" line="46"/>
            <javadoc line="46">
                The total number of starting points for the optimizations.                
            </javadoc>
            <declaration name="x" type="double[]" line="49"/>
            <javadoc line="49">
                The values of the predictor.                
            </javadoc>
            <declaration name="y" type="double[]" line="52"/>
            <javadoc line="52">
                The values of the response.                
            </javadoc>
            <declaration name="startingValues" type="double[][]" line="55"/>
            <javadoc line="55">
                The starting values. {@code startingValues[j][i]} is the value of the{@code i}-th parameter in the {@code j}-th set of starting values.                
            </javadoc>
            <declaration name="a" type="double[]" line="61"/>
            <javadoc line="61">
                The certified values of the parameters.                
            </javadoc>
            <declaration name="sigA" type="double[]" line="64"/>
            <javadoc line="64">
                The certified values of the standard deviation of the parameters.                
            </javadoc>
            <declaration name="residualSumOfSquares" type="double" line="67"/>
            <javadoc line="67">
                The certified value of the residual sum of squares.                
            </javadoc>
            <declaration name="problem" type="LeastSquaresProblem" line="70"/>
            <javadoc line="70">
                The least-squares problem.                
            </javadoc>
            <javadoc line="73">
                Creates a new instance of this class from the specified data file. The
                  file must follow the StRD format.                
                <@param>
                    m in the data file                    
                </@param>
                <@throws>
                    s IOException if an I/O error occurs                    
                </@throws>
            </javadoc>
            <method name="StatisticalReferenceDataset" type="constructor" line="81">
                <params>
                    <param name="in" type="BufferedReader"/>
                </params>
                <declaration name="lines" type="ArrayList&lt;String&gt;" line="83"/>
                <scope line="84"/>
                <declaration name="index" type="int[]" line="87"/>
                <scope line="88"/>
                <scope line="94">
                    <declaration name="line" type="String" line="95"/>
                    <declaration name="tokens" type="String[]" line="96"/>
                </scope>
                <scope line="103"/>
                <declaration name="start" type="double[][]" line="109"/>
                <scope line="112">
                    <declaration name="line" type="String" line="113"/>
                    <declaration name="tokens" type="String[]" line="114"/>
                    <scope line="115"/>
                    <scope line="118"/>
                </scope>
                <scope line="124"/>
                <declaration name="dummyDouble" type="double" line="130"/>
                <declaration name="dummyString" type="String" line="131"/>
                <scope line="132">
                    <scope line="133"/>
                    <scope line="138">
                        <declaration name="tokens" type="String[]" line="139"/>
                    </scope>
                </scope>
                <scope line="143"/>
                <scope line="149"/>
            </method>
            <class name="LeastSquaresProblem" line="157">
                <method name="getModelFunction" type="ModelFunction" line="158">
                    <anonymous_class line="159">
                        <method name="value" type="double[]" line="160">
                            <params>
                                <param name="a" type="double[]"/>
                            </params>
                            <declaration name="n" type="int" line="161"/>
                            <declaration name="yhat" type="double[]" line="162"/>
                            <scope line="163"/>
                        </method>
                    </anonymous_class>
                </method>
                <method name="getModelFunctionJacobian" type="ModelFunctionJacobian" line="171">
                    <anonymous_class line="172">
                        <method name="value" type="double[][]" line="174">
                            <params>
                                <param name="a" type="double[]"/>
                            </params>
                            <declaration name="n" type="int" line="175"/>
                            <declaration name="j" type="double[][]" line="176"/>
                            <scope line="177"/>
                        </method>
                    </anonymous_class>
                </method>
            </class>
            <javadoc line="186">
                Returns the name of this dataset.                
                <@return>
                    n the name of the dataset                    
                </@return>
            </javadoc>
            <method name="getName" type="String" line="191"/>
            <javadoc line="195">
                Returns the total number of observations (data points).                
                <@return>
                    n the number of observations                    
                </@return>
            </javadoc>
            <method name="getNumObservations" type="int" line="200"/>
            <javadoc line="204">
                Returns a copy of the data arrays. The data is laid out as follows &lt;li&gt;{@code data[0][i] = x[i]},&lt;/li&gt; &lt;li&gt;{@code data[1][i] = y[i]},&lt;/li&gt;                
                <@return>
                    n the array of data points.                    
                </@return>
            </javadoc>
            <method name="getData" type="double[][]" line="210"/>
            <javadoc line="216">
                Returns the x-value of the {@code i}-th data point.                
                <@param>
                    m i the index of the data point                    
                </@param>
                <@return>
                    n the x-value                    
                </@return>
            </javadoc>
            <method name="getX" type="double" line="222">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="226">
                Returns the y-value of the {@code i}-th data point.                
                <@param>
                    m i the index of the data point                    
                </@param>
                <@return>
                    n the y-value                    
                </@return>
            </javadoc>
            <method name="getY" type="double" line="232">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="236">
                Returns the total number of parameters.                
                <@return>
                    n the number of parameters                    
                </@return>
            </javadoc>
            <method name="getNumParameters" type="int" line="241"/>
            <javadoc line="245">
                Returns the certified values of the paramters.                
                <@return>
                    n the values of the parameters                    
                </@return>
            </javadoc>
            <method name="getParameters" type="double[]" line="250"/>
            <javadoc line="254">
                Returns the certified value of the {@code i}-th parameter.                
                <@param>
                    m i the index of the parameter                    
                </@param>
                <@return>
                    n the value of the parameter                    
                </@return>
            </javadoc>
            <method name="getParameter" type="double" line="260">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="264">
                Reurns the certified values of the standard deviations of the parameters.                
                <@return>
                    n the standard deviations of the parameters                    
                </@return>
            </javadoc>
            <method name="getParametersStandardDeviations" type="double[]" line="269"/>
            <javadoc line="273">
                Returns the certified value of the standard deviation of the {@code i}-th
                  parameter.                
                <@param>
                    m i the index of the parameter                    
                </@param>
                <@return>
                    n the standard deviation of the parameter                    
                </@return>
            </javadoc>
            <method name="getParameterStandardDeviation" type="double" line="280">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="284">
                Returns the certified value of the residual sum of squares.                
                <@return>
                    n the residual sum of squares                    
                </@return>
            </javadoc>
            <method name="getResidualSumOfSquares" type="double" line="289"/>
            <javadoc line="293">
                Returns the total number of starting points (initial guesses for the
                  optimization process).                
                <@return>
                    n the number of starting points                    
                </@return>
            </javadoc>
            <method name="getNumStartingPoints" type="int" line="299"/>
            <javadoc line="303">
                Returns the {@code i}-th set of initial values of the parameters.                
                <@param>
                    m i the index of the starting point                    
                </@param>
                <@return>
                    n the starting point                    
                </@return>
            </javadoc>
            <method name="getStartingPoint" type="double[]" line="309">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="313">
                Returns the least-squares problem corresponding to fitting the model to
                  the specified data.                
                <@return>
                    n the least-squares problem                    
                </@return>
            </javadoc>
            <method name="getLeastSquaresProblem" type="LeastSquaresProblem" line="319"/>
            <method name="getModelValue" type="double" line="323"/>
            <javadoc line="323">
                Returns the value of the model for the specified values of the predictor
                  variable and the parameters.                
                <@param>
                    m x the predictor variable                    
                </@param>
                <@param>
                    m a the parameters                    
                </@param>
                <@return>
                    n the value of the model                    
                </@return>
            </javadoc>
            <method name="getModelDerivatives" type="double[]" line="333"/>
            <javadoc line="333">
                Returns the values of the partial derivatives of the model with respect
                  to the parameters.                
                <@param>
                    m x the predictor variable                    
                </@param>
                <@param>
                    m a the parameters                    
                </@param>
                <@return>
                    n the partial derivatives                    
                </@return>
            </javadoc>
            <javadoc line="344">
                &lt;p&gt;
                  Parses the specified text lines, and extracts the indices of the first
                  and last lines of the data defined by the specified {@code key}. This key
                  must be one of
                  &lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;{@code &quot;Starting Values&quot;},&lt;/li&gt;
                  &lt;li&gt;{@code &quot;Certified Values&quot;},&lt;/li&gt;
                  &lt;li&gt;{@code &quot;Data&quot;}.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  In the NIST data files, the line indices are separated by the keywords{@code &quot;lines&quot;} and {@code &quot;to&quot;}.
                  &lt;/p&gt;                
                <@param>
                    m lines the line of text to be parsed                    
                </@param>
                <@return>
                    n an array of two {@code int}s. First value is the index of the
                      first line, second value is the index of the last line.{@code null} if the line could not be parsed.                    
                </@return>
            </javadoc>
            <method name="findLineNumbers" type="int[]" line="366">
                <params>
                    <param name="key" type="String"/>
                    <param name="lines" type="Iterable<String>"/>
                </params>
                <scope line="367">
                    <declaration name="flag" type="boolean" line="368"/>
                    <scope line="370">
                        <declaration name="numbers" type="int[]" line="371"/>
                        <declaration name="from" type="String" line="372"/>
                        <declaration name="to" type="String" line="375"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>