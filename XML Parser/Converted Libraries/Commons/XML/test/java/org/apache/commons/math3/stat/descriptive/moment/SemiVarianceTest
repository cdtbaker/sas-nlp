<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive.moment">
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.stat.StatUtils"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="SemiVarianceTest" line="27">
            <method name="testInsufficientData" type="void" line="30">
                <declaration name="nothing" type="double[]" line="31"/>
                <declaration name="sv" type="SemiVariance" line="32"/>
                <scope line="33"/>
                <scope line="36"/>
                <scope line="39"/>
                <scope line="43"/>
            </method>
            <method name="testSingleDown" type="void" line="50">
                <declaration name="sv" type="SemiVariance" line="51"/>
                <declaration name="values" type="double[]" line="52"/>
                <declaration name="singletest" type="double" line="53"/>
            </method>
            <method name="testSingleUp" type="void" line="58">
                <declaration name="sv" type="SemiVariance" line="59"/>
                <declaration name="values" type="double[]" line="60"/>
                <declaration name="singletest" type="double" line="61"/>
            </method>
            <method name="testSample" type="void" line="66">
                <comment line="67">
                    nal double mean = StatUtils.mean(values); // 6.333...                    
                </comment>
                <comment line="67">
                    nal SemiVariance sv = new SemiVariance();  // Default bias correction is true                    
                </comment>
                <comment line="67">
                    nal double downsideSemiVariance = sv.evaluate(values); // Downside is the default                    
                </comment>
                <comment line="67">
                    Verify that upper + lower semivariance against the mean sum to variance                    
                </comment>
                <declaration name="values" type="double[]" line="67"/>
                <declaration name="length" type="int" line="68"/>
                <declaration name="mean" type="double" line="69"/>
                <declaration name="sv" type="SemiVariance" line="70"/>
                <declaration name="downsideSemiVariance" type="double" line="71"/>
                <declaration name="upsideSemiVariance" type="double" line="76"/>
            </method>
            <method name="testPopulation" type="void" line="85">
                <declaration name="values" type="double[]" line="86"/>
                <declaration name="sv" type="SemiVariance" line="87"/>
                <declaration name="singletest" type="double" line="89"/>
            </method>
            <method name="testNonMeanCutoffs" type="void" line="98">
                <comment line="99">
                    miVariance sv = new SemiVariance(false); // Turn off bias correction - use df = length                    
                </comment>
                <declaration name="values" type="double[]" line="99"/>
                <declaration name="sv" type="SemiVariance" line="100"/>
                <declaration name="singletest" type="double" line="102"/>
            </method>
            <javadoc line="111">
                Check that the lower + upper semivariance against the mean sum to the
                  variance.                
            </javadoc>
            <method name="testVarianceDecompMeanCutoff" type="void" line="116">
                <comment line="117">
                    miVariance sv = new SemiVariance(true); // Bias corrected                    
                </comment>
                <declaration name="values" type="double[]" line="117"/>
                <declaration name="variance" type="double" line="118"/>
                <declaration name="sv" type="SemiVariance" line="119"/>
                <declaration name="lower" type="double" line="121"/>
                <declaration name="upper" type="double" line="123"/>
            </method>
            <javadoc line="127">
                Check that upper and lower semivariances against a cutoff sum to the sum
                  of squared deviations of the full set of values against the cutoff
                  divided by df = length - 1 (assuming bias-corrected).                
            </javadoc>
            <method name="testVarianceDecompNonMeanCutoff" type="void" line="133">
                <comment line="134">
                    miVariance sv = new SemiVariance(true); // Bias corrected                    
                </comment>
                <declaration name="values" type="double[]" line="134"/>
                <declaration name="target" type="double" line="135"/>
                <declaration name="totalSumOfSquares" type="double" line="136"/>
                <declaration name="sv" type="SemiVariance" line="137"/>
                <declaration name="lower" type="double" line="139"/>
                <declaration name="upper" type="double" line="141"/>
            </method>
            <method name="testNoVariance" type="void" line="146">
                <declaration name="values" type="double[]" line="147"/>
                <declaration name="sv" type="SemiVariance" line="148"/>
            </method>
        </class>
    </source>