<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.events">
        <import package="org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NoBracketingException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.ode.FirstOrderDifferentialEquations"/>
        <import package="org.apache.commons.math3.ode.FirstOrderIntegrator"/>
        <import package="org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937a"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="EventFilterTest" line="33">
            <method name="testHistoryIncreasingForward" type="void" line="36">
                <comment line="37">
                    start point: g &gt; 0                    
                </comment>
                <comment line="37">
                    start point: g = 0                    
                </comment>
                <comment line="37">
                    start point: g &lt; 0                    
                </comment>
            </method>
            <method name="testHistoryIncreasingBackward" type="void" line="53">
                <comment line="54">
                    start point: g &gt; 0                    
                </comment>
                <comment line="54">
                    start point: g = 0                    
                </comment>
                <comment line="54">
                    start point: g &lt; 0                    
                </comment>
            </method>
            <method name="testHistoryDecreasingForward" type="void" line="70">
                <comment line="71">
                    start point: g &gt; 0                    
                </comment>
                <comment line="71">
                    start point: g = 0                    
                </comment>
                <comment line="71">
                    start point: g &lt; 0                    
                </comment>
            </method>
            <method name="testHistoryDecreasingBackward" type="void" line="87">
                <comment line="88">
                    start point: g &gt; 0                    
                </comment>
                <comment line="88">
                    start point: g = 0                    
                </comment>
                <comment line="88">
                    start point: g &lt; 0                    
                </comment>
            </method>
            <method name="testHistory" type="void" line="103">
                <comment line="104">
                    first pass to set up switches history for a long period                    
                </comment>
                <comment line="104">
                    verify old events are preserved, even if randomly accessed                    
                </comment>
                <declaration name="onlyIncreasing" type="Event" line="104"/>
                <declaration name="eventFilter" type="EventFilter" line="105"/>
                <declaration name="h" type="double" line="110"/>
                <declaration name="n" type="double" line="111"/>
                <scope line="112">
                    <declaration name="t" type="double" line="113"/>
                </scope>
                <declaration name="rng" type="RandomGenerator" line="118"/>
                <scope line="119">
                    <declaration name="t" type="double" line="120"/>
                    <declaration name="g" type="double" line="121"/>
                    <declaration name="turn" type="int" line="122"/>
                    <scope line="123"/>
                    <scope line="125"/>
                </scope>
            </method>
            <method name="testIncreasingOnly" type="void" line="135">
                <declaration name="e" type="double" line="136"/>
                <declaration name="integrator" type="FirstOrderIntegrator" line="137"/>
                <declaration name="allEvents" type="Event" line="139"/>
                <declaration name="onlyIncreasing" type="Event" line="142"/>
                <declaration name="t0" type="double" line="147"/>
                <declaration name="tEnd" type="double" line="148"/>
                <declaration name="y" type="double[]" line="149"/>
            </method>
            <method name="testDecreasingOnly" type="void" line="162">
                <declaration name="e" type="double" line="163"/>
                <declaration name="integrator" type="FirstOrderIntegrator" line="164"/>
                <declaration name="allEvents" type="Event" line="166"/>
                <declaration name="onlyDecreasing" type="Event" line="169"/>
                <declaration name="t0" type="double" line="174"/>
                <declaration name="tEnd" type="double" line="175"/>
                <declaration name="y" type="double[]" line="176"/>
            </method>
            <method name="testTwoOppositeFilters" type="void" line="189">
                <declaration name="e" type="double" line="190"/>
                <declaration name="integrator" type="FirstOrderIntegrator" line="191"/>
                <declaration name="allEvents" type="Event" line="193"/>
                <declaration name="onlyIncreasing" type="Event" line="196"/>
                <declaration name="onlyDecreasing" type="Event" line="201"/>
                <declaration name="t0" type="double" line="206"/>
                <declaration name="tEnd" type="double" line="207"/>
                <declaration name="y" type="double[]" line="208"/>
            </method>
            <class name="SineCosine" line="219">
                <implements interface="FirstOrderDifferentialEquations"/>
                <method name="getDimension" type="int" line="220"/>
                <method name="computeDerivatives" type="void" line="224"/>
            </class>
            <class name="Event" line="230">
                <implements interface="EventHandler"/>
                <javadoc line="230">
                    State events for this unit test.                    
                </javadoc>
                <declaration name="expectDecreasing" type="boolean" line="233"/>
                <declaration name="expectIncreasing" type="boolean" line="234"/>
                <declaration name="eventCount" type="int" line="235"/>
                <method name="Event" type="constructor" line="237"/>
                <method name="getEventCount" type="int" line="242"/>
                <method name="init" type="void" line="246"/>
                <method name="g" type="double" line="250"/>
                <method name="eventOccurred" type="Action" line="254">
                    <scope line="255"/>
                    <scope line="257"/>
                </method>
                <method name="resetState" type="void" line="264">
                    <comment line="265">
                        in fact, we don&apos;t really reset anything for this test                        
                    </comment>
                </method>
            </class>
        </class>
    </source>