<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.fitting">
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="GaussianFitterTest" line="26">
            <javadoc line="26">
                Tests {@link GaussianFitter}.                
                <@since>
                    e 2.2                    
                </@since>
                <@version>
                    n $Id: GaussianFitterTest.java 1349707 2012-06-13 09:30:56Z erans $                    
                </@version>
            </javadoc>
            <declaration name="DATASET1" type="double[][]" line="33"/>
            <javadoc line="33">
                Good data.                
            </javadoc>
            <declaration name="DATASET2" type="double[][]" line="66"/>
            <javadoc line="66">
                Poor data: right of peak not symmetric with left of peak.                
            </javadoc>
            <declaration name="DATASET3" type="double[][]" line="100"/>
            <javadoc line="100">
                Poor data: long tails.                
            </javadoc>
            <declaration name="DATASET4" type="double[][]" line="149"/>
            <javadoc line="149">
                Poor data: right of peak is missing.                
            </javadoc>
            <declaration name="DATASET5" type="double[][]" line="166"/>
            <javadoc line="166">
                Good data, but few points.                
            </javadoc>
            <javadoc line="182">
                Basic.                
            </javadoc>
            <method name="testFit01" type="void" line="186">
                <declaration name="fitter" type="GaussianFitter" line="187"/>
                <declaration name="parameters" type="double[]" line="189"/>
            </method>
            <javadoc line="196">
                Zero points is not enough observed points.                
            </javadoc>
            <method name="testFit02" type="void" line="200">
                <declaration name="fitter" type="GaussianFitter" line="201"/>
            </method>
            <javadoc line="205">
                Two points is not enough observed points.                
            </javadoc>
            <method name="testFit03" type="void" line="209">
                <declaration name="fitter" type="GaussianFitter" line="210"/>
            </method>
            <javadoc line="218">
                Poor data: right of peak not symmetric with left of peak.                
            </javadoc>
            <method name="testFit04" type="void" line="222">
                <declaration name="fitter" type="GaussianFitter" line="223"/>
                <declaration name="parameters" type="double[]" line="225"/>
            </method>
            <javadoc line="232">
                Poor data: long tails.                
            </javadoc>
            <method name="testFit05" type="void" line="236">
                <declaration name="fitter" type="GaussianFitter" line="237"/>
                <declaration name="parameters" type="double[]" line="239"/>
            </method>
            <javadoc line="246">
                Poor data: right of peak is missing.                
            </javadoc>
            <method name="testFit06" type="void" line="250">
                <declaration name="fitter" type="GaussianFitter" line="251"/>
                <declaration name="parameters" type="double[]" line="253"/>
            </method>
            <javadoc line="260">
                Basic with smaller dataset.                
            </javadoc>
            <method name="testFit07" type="void" line="264">
                <declaration name="fitter" type="GaussianFitter" line="265"/>
                <declaration name="parameters" type="double[]" line="267"/>
            </method>
            <method name="testMath519" type="void" line="275">
                <comment line="276">
                    The optimizer will try negative sigma values but &quot;GaussianFitter&quot;                    
                </comment>
                <comment line="276">
                    will catch the raised exceptions and return NaN values instead.                    
                </comment>
                <declaration name="data" type="double[]" line="279"/>
                <declaration name="fitter" type="GaussianFitter" line="309"/>
                <scope line="310"/>
                <declaration name="p" type="double[]" line="313"/>
            </method>
            <method name="testMath798" type="void" line="320">
                <comment line="321">
                    When the data points are not commented out below, the fit stalls.                    
                </comment>
                <comment line="321">
                    This is expected however, since the whole dataset hardly looks like                    
                </comment>
                <comment line="321">
                    a Gaussian.                    
                </comment>
                <comment line="321">
                    When commented out, the fit proceeds fine.                    
                </comment>
                <comment line="321">
                    fitter.addObservedPoint(0.68, 0.0);                    
                </comment>
                <comment line="321">
                    fitter.addObservedPoint(1.59, 0.0);                    
                </comment>
                <comment line="321">
                    fitter.addObservedPoint(2.50, 0.0);                    
                </comment>
                <comment line="321">
                    fitter.addObservedPoint(3.41, 0.0);                    
                </comment>
                <comment line="321">
                    fitter.addObservedPoint(4.32, 0.0);                    
                </comment>
                <comment line="321">
                    Values are copied from a previous run of this test.                    
                </comment>
                <declaration name="fitter" type="GaussianFitter" line="321"/>
                <declaration name="p" type="double[]" line="340"/>
            </method>
            <javadoc line="348">
                Adds the specified points to specified &lt;code&gt;GaussianFitter&lt;/code&gt;
                  instance.                
                <@param>
                    m points data points where first dimension is a point index and
                      second dimension is an array of length two representing the point
                      with the first value corresponding to X and the second value
                      corresponding to Y                    
                </@param>
                <@param>
                    m fitter fitter to which the points in <code>points</code> should be
                      added as observed points                    
                </@param>
            </javadoc>
            <method name="addDatasetToGaussianFitter" type="void" line="360">
                <params>
                    <param name="points" type="double[][]"/>
                    <param name="fitter" type="GaussianFitter"/>
                </params>
                <scope line="361"/>
            </method>
        </class>
    </source>