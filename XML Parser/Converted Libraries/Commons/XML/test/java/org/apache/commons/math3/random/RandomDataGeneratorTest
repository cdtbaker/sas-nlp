<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.random">
        <import package="java.text.DecimalFormat"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.Retry"/>
        <import package="org.apache.commons.math3.RetryRunner"/>
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.distribution.BetaDistribution"/>
        <import package="org.apache.commons.math3.distribution.BinomialDistribution"/>
        <import package="org.apache.commons.math3.distribution.BinomialDistributionTest"/>
        <import package="org.apache.commons.math3.distribution.CauchyDistribution"/>
        <import package="org.apache.commons.math3.distribution.ChiSquaredDistribution"/>
        <import package="org.apache.commons.math3.distribution.ExponentialDistribution"/>
        <import package="org.apache.commons.math3.distribution.FDistribution"/>
        <import package="org.apache.commons.math3.distribution.GammaDistribution"/>
        <import package="org.apache.commons.math3.distribution.HypergeometricDistribution"/>
        <import package="org.apache.commons.math3.distribution.HypergeometricDistributionTest"/>
        <import package="org.apache.commons.math3.distribution.NormalDistribution"/>
        <import package="org.apache.commons.math3.distribution.PascalDistribution"/>
        <import package="org.apache.commons.math3.distribution.PascalDistributionTest"/>
        <import package="org.apache.commons.math3.distribution.PoissonDistribution"/>
        <import package="org.apache.commons.math3.distribution.TDistribution"/>
        <import package="org.apache.commons.math3.distribution.WeibullDistribution"/>
        <import package="org.apache.commons.math3.distribution.ZipfDistribution"/>
        <import package="org.apache.commons.math3.distribution.ZipfDistributionTest"/>
        <import package="org.apache.commons.math3.stat.Frequency"/>
        <import package="org.apache.commons.math3.stat.descriptive.SummaryStatistics"/>
        <import package="org.apache.commons.math3.stat.inference.ChiSquareTest"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <import package="org.junit.runner.RunWith"/>
        <class name="RandomDataGeneratorTest" line="54">
            <comment line="55">
                Disable until we have equals                
            </comment>
            <comment line="55">
                public void testSerial() {                
            </comment>
            <comment line="55">
                Assert.assertEquals(randomData, TestUtils.serializeAndRecover(randomData));                
            </comment>
            <comment line="55">
                }                
            </comment>
            <javadoc line="54">
                Test cases for the RandomDataGenerator class.                
                <@version>
                    n $Id: RandomDataGeneratorTest.java 1457491 2013-03-17 17:15:31Z psteitz $                    
                </@version>
            </javadoc>
            <method name="RandomDataGeneratorTest" type="constructor" line="62"/>
            <declaration name="smallSampleSize" type="long" line="67"/>
            <declaration name="expected" type="double[]" line="68"/>
            <declaration name="largeSampleSize" type="int" line="69"/>
            <declaration name="hex" type="String[]" line="70"/>
            <declaration name="randomData" type="RandomDataGenerator" line="72"/>
            <declaration name="testStatistic" type="ChiSquareTest" line="73"/>
            <method name="testNextIntExtremeValues" type="void" line="76">
                <declaration name="x" type="int" line="77"/>
                <declaration name="y" type="int" line="78"/>
            </method>
            <method name="testNextLongExtremeValues" type="void" line="83">
                <declaration name="x" type="long" line="84"/>
                <declaration name="y" type="long" line="85"/>
            </method>
            <method name="testNextUniformExtremeValues" type="void" line="90">
                <declaration name="x" type="double" line="91"/>
                <declaration name="y" type="double" line="92"/>
            </method>
            <method name="testNextIntIAE" type="void" line="101">
                <scope line="102"/>
                <scope line="105"/>
            </method>
            <method name="testNextIntNegativeToPositiveRange" type="void" line="111">
                <scope line="112"/>
            </method>
            <method name="testNextIntNegativeRange" type="void" line="119">
                <scope line="120"/>
            </method>
            <method name="testNextIntPositiveRange" type="void" line="128">
                <scope line="129"/>
            </method>
            <method name="checkNextIntUniform" type="void" line="137">
                <params>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
                <declaration name="freq" type="Frequency" line="138"/>
                <scope line="139">
                    <declaration name="value" type="int" line="140"/>
                </scope>
                <declaration name="len" type="int" line="144"/>
                <declaration name="observed" type="long[]" line="145"/>
                <scope line="146"/>
                <declaration name="expected" type="double[]" line="149"/>
                <scope line="150"/>
            </method>
            <method name="testNextIntWideRange" type="void" line="158">
                <declaration name="lower" type="int" line="159"/>
                <declaration name="upper" type="int" line="160"/>
                <declaration name="max" type="int" line="161"/>
                <declaration name="min" type="int" line="162"/>
                <scope line="163">
                    <declaration name="r" type="int" line="164"/>
                </scope>
                <declaration name="ratio" type="double" line="170"/>
            </method>
            <method name="testNextLongIAE" type="void" line="176">
                <scope line="177"/>
                <scope line="180"/>
            </method>
            <method name="testNextLongNegativeToPositiveRange" type="void" line="186">
                <scope line="187"/>
            </method>
            <method name="testNextLongNegativeRange" type="void" line="194">
                <scope line="195"/>
            </method>
            <method name="testNextLongPositiveRange" type="void" line="203">
                <scope line="204"/>
            </method>
            <method name="checkNextLongUniform" type="void" line="211">
                <params>
                    <param name="min" type="long"/>
                    <param name="max" type="long"/>
                </params>
                <declaration name="freq" type="Frequency" line="212"/>
                <scope line="213">
                    <declaration name="value" type="long" line="214"/>
                </scope>
                <declaration name="len" type="int" line="219"/>
                <declaration name="observed" type="long[]" line="220"/>
                <scope line="221"/>
                <declaration name="expected" type="double[]" line="224"/>
                <scope line="225"/>
            </method>
            <method name="testNextLongWideRange" type="void" line="233">
                <declaration name="lower" type="long" line="234"/>
                <declaration name="upper" type="long" line="235"/>
                <declaration name="max" type="long" line="236"/>
                <declaration name="min" type="long" line="237"/>
                <scope line="238">
                    <declaration name="r" type="long" line="239"/>
                </scope>
                <declaration name="ratio" type="double" line="245"/>
            </method>
            <method name="testNextSecureLongIAE" type="void" line="251">
                <scope line="252"/>
                <scope line="255"/>
            </method>
            <method name="testNextSecureLongNegativeToPositiveRange" type="void" line="262">
                <scope line="263"/>
            </method>
            <method name="testNextSecureLongNegativeRange" type="void" line="271">
                <scope line="272"/>
            </method>
            <method name="testNextSecureLongPositiveRange" type="void" line="280">
                <scope line="281"/>
            </method>
            <method name="checkNextSecureLongUniform" type="void" line="287">
                <params>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
                <declaration name="freq" type="Frequency" line="288"/>
                <scope line="289">
                    <declaration name="value" type="long" line="290"/>
                </scope>
                <declaration name="len" type="int" line="294"/>
                <declaration name="observed" type="long[]" line="295"/>
                <scope line="296"/>
                <declaration name="expected" type="double[]" line="299"/>
                <scope line="300"/>
            </method>
            <method name="testNextSecureIntIAE" type="void" line="308">
                <scope line="309"/>
                <scope line="312"/>
            </method>
            <method name="testNextSecureIntNegativeToPositiveRange" type="void" line="319">
                <scope line="320"/>
            </method>
            <method name="testNextSecureIntNegativeRange" type="void" line="328">
                <scope line="329"/>
            </method>
            <method name="testNextSecureIntPositiveRange" type="void" line="337">
                <scope line="338"/>
            </method>
            <method name="checkNextSecureIntUniform" type="void" line="344">
                <params>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
                <declaration name="freq" type="Frequency" line="345"/>
                <scope line="346">
                    <declaration name="value" type="int" line="347"/>
                </scope>
                <declaration name="len" type="int" line="351"/>
                <declaration name="observed" type="long[]" line="352"/>
                <scope line="353"/>
                <declaration name="expected" type="double[]" line="356"/>
                <scope line="357"/>
            </method>
            <javadoc line="366">
                Make sure that empirical distribution of random Poisson(4)&apos;s has P(X &lt;=
                  5) close to actual cumulative Poisson probability and that nextPoisson
                  fails when mean is non-positive.                
            </javadoc>
            <method name="testNextPoisson" type="void" line="372">
                <scope line="373"/>
                <scope line="376"/>
                <scope line="379"/>
                <scope line="382"/>
                <scope line="385"/>
                <scope line="388"/>
                <declaration name="mean" type="double" line="392"/>
                <declaration name="len" type="int" line="393"/>
                <declaration name="poissonDistribution" type="PoissonDistribution" line="394"/>
                <declaration name="f" type="Frequency" line="395"/>
                <scope line="397"/>
                <declaration name="observed" type="long[]" line="400"/>
                <scope line="401"/>
                <declaration name="expected" type="double[]" line="404"/>
                <scope line="405"/>
            </method>
            <method name="testNextPoissonConsistency" type="void" line="413">
                <comment line="414">
                    Small integral means                    
                </comment>
                <comment line="414">
                    non-integer means                    
                </comment>
                <comment line="414">
                    large means                    
                </comment>
                <comment line="414">
                    TODO: When MATH-282 is resolved, s/3000/10000 below                    
                </comment>
                <scope line="416"/>
                <scope line="420"/>
                <scope line="425"/>
            </method>
            <javadoc line="430">
                Verifies that nextPoisson(mean) generates an empirical distribution of values
                  consistent with PoissonDistributionImpl by generating 1000 values, computing a
                  grouped frequency distribution of the observed values and comparing this distribution
                  to the corresponding expected distribution computed using PoissonDistributionImpl.
                  Uses ChiSquare test of goodness of fit to evaluate the null hypothesis that the
                  distributions are the same. If the null hypothesis can be rejected with confidence
                  1 - alpha, the check fails.                
            </javadoc>
            <method name="checkNextPoissonConsistency" type="void" line="439">
                <params>
                    <param name="mean" type="double"/>
                </params>
                <comment line="440">
                    Generate sample values                    
                </comment>
                <comment line="440">
                    nal int sampleSize = 1000;        // Number of deviates to generate                    
                </comment>
                <comment line="440">
                    nal int minExpectedCount = 7;     // Minimum size of expected bin count                    
                </comment>
                <comment line="440">
                    nal double alpha = 0.001;         // Probability of false failure                    
                </comment>
                <comment line="440">
                    Set up bins for chi-square test.
                      Ensure expected counts are all at least minExpectedCount.
                      Start with upper and lower tail bins.                    
                </comment>
                <comment line="440">
                    t upper = (int) (5 * mean);  // Even for mean = 1, not much mass beyond 5                    
                </comment>
                <comment line="440">
                    Set bin width for interior bins.  For poisson, only need to look at end bins.                    
                </comment>
                <comment line="440">
                    Determine interior bin bounds.  Bins are
                      [1, lower = binBounds[0]), [lower, binBounds[1]), [binBounds[1], binBounds[2]), ... ,
                        [binBounds[binCount - 2], upper = binBounds[binCount - 1]), [upper, +inf)                    
                </comment>
                <comment line="440">
                    nBounds.add(upper); // The size of bin [binBounds[binCount - 2], upper) satisfies binWidth &lt;= size &lt; 2*binWidth.                    
                </comment>
                <comment line="440">
                    Compute observed and expected bin counts                    
                </comment>
                <comment line="440">
                    Bottom bin                    
                </comment>
                <comment line="440">
                    Top bin                    
                </comment>
                <comment line="440">
                    Interior bins                    
                </comment>
                <comment line="440">
                    Use chisquare test to verify that generated values are poisson(mean)-distributed                    
                </comment>
                <comment line="440">
                    Fail if we can reject null hypothesis that distributions are the same                    
                </comment>
                <declaration name="sampleSize" type="int" line="441"/>
                <declaration name="minExpectedCount" type="int" line="442"/>
                <declaration name="maxObservedValue" type="long" line="443"/>
                <declaration name="alpha" type="double" line="444"/>
                <declaration name="frequency" type="Frequency" line="445"/>
                <scope line="446">
                    <declaration name="value" type="long" line="447"/>
                    <scope line="448"/>
                </scope>
                <declaration name="poissonDistribution" type="PoissonDistribution" line="460"/>
                <declaration name="lower" type="int" line="461"/>
                <scope line="462"/>
                <declaration name="upper" type="int" line="465"/>
                <scope line="466"/>
                <declaration name="binWidth" type="int" line="471"/>
                <declaration name="widthSufficient" type="boolean" line="472"/>
                <declaration name="lowerBinMass" type="double" line="473"/>
                <declaration name="upperBinMass" type="double" line="474"/>
                <scope line="475"/>
                <declaration name="binBounds" type="List&lt;Integer&gt;" line="488"/>
                <declaration name="bound" type="int" line="490"/>
                <scope line="491"/>
                <declaration name="binCount" type="int" line="498"/>
                <declaration name="observed" type="long[]" line="499"/>
                <declaration name="expected" type="double[]" line="500"/>
                <scope line="504"/>
                <scope line="511"/>
                <scope line="517">
                    <scope line="519"/>
                </scope>
                <declaration name="chiSquareTest" type="ChiSquareTest" line="527"/>
                <scope line="529">
                    <declaration name="msgBuffer" type="StringBuilder" line="530"/>
                    <declaration name="df" type="DecimalFormat" line="531"/>
                    <scope line="540"/>
                </scope>
            </method>
            <javadoc line="559">
                test dispersion and failure modes for nextHex()                
            </javadoc>
            <method name="testNextHex" type="void" line="561">
                <scope line="562"/>
                <scope line="565"/>
                <scope line="568"/>
                <scope line="571"/>
                <declaration name="hexString" type="String" line="574"/>
                <scope line="575"/>
                <scope line="579"/>
                <scope line="582"/>
                <scope line="585"/>
                <declaration name="f" type="Frequency" line="588"/>
                <scope line="589">
                    <scope line="591"/>
                    <scope line="594"/>
                </scope>
                <declaration name="expected" type="double[]" line="598"/>
                <declaration name="observed" type="long[]" line="599"/>
                <scope line="600"/>
            </method>
            <javadoc line="607">
                test dispersion and failure modes for nextHex()                
            </javadoc>
            <method name="testNextSecureHex" type="void" line="610">
                <scope line="611"/>
                <scope line="614"/>
                <scope line="617"/>
                <scope line="620"/>
                <declaration name="hexString" type="String" line="623"/>
                <scope line="624"/>
                <scope line="628"/>
                <scope line="631"/>
                <scope line="634"/>
                <declaration name="f" type="Frequency" line="637"/>
                <scope line="638">
                    <scope line="640"/>
                    <scope line="643"/>
                </scope>
                <declaration name="expected" type="double[]" line="647"/>
                <declaration name="observed" type="long[]" line="648"/>
                <scope line="649"/>
            </method>
            <method name="testNextUniformIAE" type="void" line="657">
                <scope line="658"/>
                <scope line="661"/>
                <scope line="664"/>
                <scope line="667"/>
                <scope line="670"/>
                <scope line="673"/>
                <scope line="676"/>
                <scope line="679"/>
                <scope line="682"/>
                <scope line="685"/>
            </method>
            <method name="testNextUniformUniformPositiveBounds" type="void" line="691">
                <scope line="692"/>
            </method>
            <method name="testNextUniformUniformNegativeToPositiveBounds" type="void" line="698">
                <scope line="699"/>
            </method>
            <method name="testNextUniformUniformNegaiveBounds" type="void" line="705">
                <scope line="706"/>
            </method>
            <method name="testNextUniformUniformMaximalInterval" type="void" line="712">
                <scope line="713"/>
            </method>
            <method name="checkNextUniformUniform" type="void" line="718">
                <params>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                </params>
                <comment line="719">
                    Set up bin bounds - min, binBound[0], ..., binBound[binCount-2], max                    
                </comment>
                <comment line="719">
                    nal double binSize = max / binCount - min/binCount; // Prevent overflow in extreme value case                    
                </comment>
                <declaration name="binCount" type="int" line="720"/>
                <declaration name="binSize" type="double" line="721"/>
                <declaration name="binBounds" type="double[]" line="722"/>
                <scope line="724"/>
                <declaration name="freq" type="Frequency" line="728"/>
                <scope line="729">
                    <declaration name="value" type="double" line="730"/>
                    <declaration name="j" type="int" line="733"/>
                    <scope line="734"/>
                </scope>
                <declaration name="observed" type="long[]" line="740"/>
                <scope line="741"/>
                <declaration name="expected" type="double[]" line="744"/>
                <scope line="745"/>
            </method>
            <javadoc line="752">
                test exclusive endpoints of nextUniform                
            </javadoc>
            <method name="testNextUniformExclusiveEndpoints" type="void" line="754">
                <scope line="755">
                    <declaration name="u" type="double" line="756"/>
                </scope>
            </method>
            <javadoc line="761">
                test failure modes and distribution of nextGaussian()                
            </javadoc>
            <method name="testNextGaussian" type="void" line="763">
                <scope line="764"/>
                <scope line="767"/>
                <declaration name="quartiles" type="double[]" line="770"/>
                <declaration name="counts" type="long[]" line="771"/>
                <scope line="773">
                    <declaration name="value" type="double" line="774"/>
                </scope>
            </method>
            <javadoc line="780">
                test failure modes and distribution of nextExponential()                
            </javadoc>
            <method name="testNextExponential" type="void" line="782">
                <comment line="783">
                    Mean 1                    
                </comment>
                <comment line="783">
                    Mean 5                    
                </comment>
                <scope line="783"/>
                <scope line="786"/>
                <scope line="789"/>
                <scope line="792"/>
                <declaration name="quartiles" type="double[]" line="795"/>
                <declaration name="counts" type="long[]" line="796"/>
                <scope line="802">
                    <declaration name="value" type="double" line="803"/>
                </scope>
                <scope line="812">
                    <declaration name="value" type="double" line="813"/>
                </scope>
            </method>
            <javadoc line="819">
                test reseeding, algorithm/provider games                
            </javadoc>
            <method name="testConfig" type="void" line="821">
                <comment line="822">
                    remove this test back soon, since it takes about 4 seconds
                    
                     try { randomData.setSecureAlgorithm(&quot;SHA1PRNG&quot;,&quot;SUN&quot;); } catch
                     (NoSuchProviderException ex) { ; } Assert.assertTrue(&quot;different seeds&quot;,
                     !hex.equals(randomData.nextSecureHexString(40))); try {
                     randomData.setSecureAlgorithm(&quot;NOSUCHTHING&quot;,&quot;SUN&quot;);
                     Assert.fail(&quot;expecting NoSuchAlgorithmException&quot;); } catch
                     (NoSuchProviderException ex) { ; } catch (NoSuchAlgorithmException
                     ex) { ; }
                    
                     try { randomData.setSecureAlgorithm(&quot;SHA1PRNG&quot;,&quot;NOSUCHPROVIDER&quot;);
                     Assert.fail(&quot;expecting NoSuchProviderException&quot;); } catch                    
                </comment>
                <comment line="822">
                    test reseeding without first using the generators                    
                </comment>
                <declaration name="v" type="double" line="823"/>
                <declaration name="hex" type="String" line="830"/>
                <declaration name="rd" type="RandomDataGenerator" line="855"/>
                <declaration name="rd2" type="RandomDataGenerator" line="858"/>
            </method>
            <javadoc line="869">
                tests for nextSample() sampling from Collection                
            </javadoc>
            <method name="testNextSample" type="void" line="871">
                <comment line="872">
                    shSet&lt;Object&gt; cPop = new HashSet&lt;Object&gt;(); // {0,1,2,3,4}                    
                </comment>
                <comment line="872">
                    ject[] sets = new Object[10]; // 2-sets from 5                    
                </comment>
                <comment line="872">
                    Use ChiSquare dist with df = 10-1 = 9, alpha = .001 Change to 21.67                    
                </comment>
                <comment line="872">
                    Make sure sample of size = size of collection returns same collection                    
                </comment>
                <comment line="872">
                    Make sure we fail for sample size &gt; collection size                    
                </comment>
                <comment line="872">
                    Make sure we fail for empty collection                    
                </comment>
                <declaration name="c" type="Object[][]" line="872"/>
                <declaration name="observed" type="long[]" line="875"/>
                <declaration name="expected" type="double[]" line="876"/>
                <declaration name="cPop" type="HashSet&lt;Object&gt;" line="878"/>
                <scope line="879"/>
                <declaration name="sets" type="Object[]" line="883"/>
                <scope line="884">
                    <declaration name="hs" type="HashSet&lt;Object&gt;" line="885"/>
                </scope>
                <scope line="891">
                    <declaration name="cSamp" type="Object[]" line="892"/>
                </scope>
                <declaration name="hs" type="HashSet&lt;Object&gt;" line="904"/>
                <declaration name="one" type="Object[]" line="906"/>
                <declaration name="oneString" type="String" line="907"/>
                <scope line="908"/>
                <scope line="913"/>
                <scope line="916"/>
                <scope line="921"/>
                <scope line="925"/>
            </method>
            <method name="findSample" type="int" line="931">
                <params>
                    <param name="u" type="Object[]"/>
                    <param name="samp" type="Object[]"/>
                </params>
                <scope line="932">
                    <declaration name="set" type="HashSet&lt;Object&gt;" line="933"/>
                    <declaration name="sampSet" type="HashSet&lt;Object&gt;" line="934"/>
                    <scope line="935"/>
                    <scope line="938"/>
                </scope>
            </method>
            <javadoc line="946">
                tests for nextPermutation                
            </javadoc>
            <method name="testNextPermutation" type="void" line="948">
                <comment line="949">
                    Check size = 1 boundary case                    
                </comment>
                <declaration name="p" type="int[][]" line="949"/>
                <declaration name="observed" type="long[]" line="951"/>
                <declaration name="expected" type="double[]" line="952"/>
                <scope line="954">
                    <declaration name="perm" type="int[]" line="955"/>
                </scope>
                <declaration name="labels" type="String[]" line="959"/>
                <declaration name="perm" type="int[]" line="964"/>
                <scope line="965">
                    <scope line="969"/>
                    <scope line="972"/>
                    <scope line="977"/>
                    <scope line="980"/>
                    <scope line="985"/>
                    <scope line="988"/>
                </scope>
            </method>
            <method name="findPerm" type="int" line="1000">
                <params>
                    <param name="p" type="int[][]"/>
                    <param name="samp" type="int[]"/>
                </params>
                <scope line="1001">
                    <declaration name="good" type="boolean" line="1002"/>
                    <scope line="1003">
                        <scope line="1004"/>
                    </scope>
                    <scope line="1008"/>
                </scope>
            </method>
            <method name="testNextInversionDeviate" type="void" line="1017">
                <comment line="1018">
                    Set the seed for the default random generator                    
                </comment>
                <comment line="1018">
                    Reseed again so the inversion generator gets the same sequence                    
                </comment>
                <comment line="1018">
                    Generate a sequence of deviates using inversion - the distribution function
                      evaluated at the random value from the distribution should match the uniform
                      random value used to generate it, which is stored in the quantiles[] array.                    
                </comment>
                <declaration name="rg" type="RandomGenerator" line="1019"/>
                <declaration name="rdg" type="RandomDataGenerator" line="1020"/>
                <declaration name="quantiles" type="double[]" line="1021"/>
                <scope line="1022"/>
                <declaration name="betaDistribution" type="BetaDistribution" line="1027"/>
                <scope line="1034">
                    <declaration name="value" type="double" line="1035"/>
                </scope>
            </method>
            <method name="testNextBeta" type="void" line="1041">
                <declaration name="quartiles" type="double[]" line="1042"/>
                <declaration name="counts" type="long[]" line="1043"/>
                <scope line="1045">
                    <declaration name="value" type="double" line="1046"/>
                </scope>
            </method>
            <method name="testNextCauchy" type="void" line="1053">
                <declaration name="quartiles" type="double[]" line="1054"/>
                <declaration name="counts" type="long[]" line="1055"/>
                <scope line="1057">
                    <declaration name="value" type="double" line="1058"/>
                </scope>
            </method>
            <method name="testNextChiSquare" type="void" line="1065">
                <declaration name="quartiles" type="double[]" line="1066"/>
                <declaration name="counts" type="long[]" line="1067"/>
                <scope line="1069">
                    <declaration name="value" type="double" line="1070"/>
                </scope>
            </method>
            <method name="testNextF" type="void" line="1077">
                <declaration name="quartiles" type="double[]" line="1078"/>
                <declaration name="counts" type="long[]" line="1079"/>
                <scope line="1081">
                    <declaration name="value" type="double" line="1082"/>
                </scope>
            </method>
            <method name="testNextGamma" type="void" line="1089">
                <comment line="1090">
                    Tests shape &gt; 1, one case in the rejection sampling                    
                </comment>
                <comment line="1090">
                    Tests shape &lt;= 1, another case in the rejection sampling                    
                </comment>
                <declaration name="quartiles" type="double[]" line="1090"/>
                <declaration name="counts" type="long[]" line="1091"/>
                <scope line="1097">
                    <declaration name="value" type="double" line="1098"/>
                </scope>
                <scope line="1107">
                    <declaration name="value" type="double" line="1108"/>
                </scope>
            </method>
            <method name="testNextT" type="void" line="1115">
                <declaration name="quartiles" type="double[]" line="1116"/>
                <declaration name="counts" type="long[]" line="1117"/>
                <scope line="1119">
                    <declaration name="value" type="double" line="1120"/>
                </scope>
            </method>
            <method name="testNextWeibull" type="void" line="1127">
                <declaration name="quartiles" type="double[]" line="1128"/>
                <declaration name="counts" type="long[]" line="1129"/>
                <scope line="1131">
                    <declaration name="value" type="double" line="1132"/>
                </scope>
            </method>
            <method name="testNextBinomial" type="void" line="1139">
                <declaration name="testInstance" type="BinomialDistributionTest" line="1140"/>
                <declaration name="densityPoints" type="int[]" line="1141"/>
                <declaration name="densityValues" type="double[]" line="1142"/>
                <declaration name="sampleSize" type="int" line="1143"/>
                <declaration name="length" type="int" line="1144"/>
                <declaration name="distribution" type="BinomialDistribution" line="1145"/>
                <declaration name="expectedCounts" type="double[]" line="1146"/>
                <declaration name="observedCounts" type="long[]" line="1147"/>
                <scope line="1148"/>
                <scope line="1152">
                    <declaration name="value" type="int" line="1153"/>
                    <scope line="1155">
                        <scope line="1156"/>
                    </scope>
                </scope>
            </method>
            <method name="testNextHypergeometric" type="void" line="1165">
                <declaration name="testInstance" type="HypergeometricDistributionTest" line="1166"/>
                <declaration name="densityPoints" type="int[]" line="1167"/>
                <declaration name="densityValues" type="double[]" line="1168"/>
                <declaration name="sampleSize" type="int" line="1169"/>
                <declaration name="length" type="int" line="1170"/>
                <declaration name="distribution" type="HypergeometricDistribution" line="1171"/>
                <declaration name="expectedCounts" type="double[]" line="1172"/>
                <declaration name="observedCounts" type="long[]" line="1173"/>
                <scope line="1174"/>
                <scope line="1178">
                    <declaration name="value" type="int" line="1179"/>
                    <scope line="1181">
                        <scope line="1182"/>
                    </scope>
                </scope>
            </method>
            <method name="testNextPascal" type="void" line="1191">
                <declaration name="testInstance" type="PascalDistributionTest" line="1192"/>
                <declaration name="densityPoints" type="int[]" line="1193"/>
                <declaration name="densityValues" type="double[]" line="1194"/>
                <declaration name="sampleSize" type="int" line="1195"/>
                <declaration name="length" type="int" line="1196"/>
                <declaration name="distribution" type="PascalDistribution" line="1197"/>
                <declaration name="expectedCounts" type="double[]" line="1198"/>
                <declaration name="observedCounts" type="long[]" line="1199"/>
                <scope line="1200"/>
                <scope line="1204">
                    <declaration name="value" type="int" line="1205"/>
                    <scope line="1206">
                        <scope line="1207"/>
                    </scope>
                </scope>
            </method>
            <method name="testNextZipf" type="void" line="1216">
                <declaration name="testInstance" type="ZipfDistributionTest" line="1217"/>
                <declaration name="densityPoints" type="int[]" line="1218"/>
                <declaration name="densityValues" type="double[]" line="1219"/>
                <declaration name="sampleSize" type="int" line="1220"/>
                <declaration name="length" type="int" line="1221"/>
                <declaration name="distribution" type="ZipfDistribution" line="1222"/>
                <declaration name="expectedCounts" type="double[]" line="1223"/>
                <declaration name="observedCounts" type="long[]" line="1224"/>
                <scope line="1225"/>
                <scope line="1229">
                    <declaration name="value" type="int" line="1230"/>
                    <scope line="1231">
                        <scope line="1232"/>
                    </scope>
                </scope>
            </method>
            <method name="testReseed" type="void" line="1244">
                <declaration name="x" type="PoissonDistribution" line="1245"/>
                <declaration name="u" type="double" line="1247"/>
                <declaration name="y" type="PoissonDistribution" line="1248"/>
            </method>
        </class>
    </source>