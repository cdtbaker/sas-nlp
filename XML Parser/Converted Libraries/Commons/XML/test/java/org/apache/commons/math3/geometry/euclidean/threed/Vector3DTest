<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.threed">
        <import package="java.text.DecimalFormat"/>
        <import package="java.text.DecimalFormatSymbols"/>
        <import package="java.text.NumberFormat"/>
        <import package="java.util.Locale"/>
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.geometry.Space"/>
        <import package="org.apache.commons.math3.random.Well1024a"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="Vector3DTest" line="35">
            <method name="testConstructors" type="void" line="37">
                <declaration name="r" type="double" line="38"/>
            </method>
            <method name="testSpace" type="void" line="58">
                <declaration name="space" type="Space" line="59"/>
                <declaration name="deserialized" type="Space" line="62"/>
            </method>
            <method name="testZero" type="void" line="67"/>
            <method name="testEquals" type="void" line="72">
                <declaration name="u1" type="Vector3D" line="73"/>
                <declaration name="u2" type="Vector3D" line="74"/>
            </method>
            <method name="testHash" type="void" line="85">
                <declaration name="u" type="Vector3D" line="87"/>
                <declaration name="v" type="Vector3D" line="88"/>
            </method>
            <method name="testInfinite" type="void" line="93"/>
            <method name="testNaN" type="void" line="102"/>
            <method name="testToString" type="void" line="111">
                <declaration name="format" type="NumberFormat" line="113"/>
            </method>
            <method name="testWrongDimension" type="void" line="118"/>
            <method name="testCoordinates" type="void" line="123">
                <declaration name="v" type="Vector3D" line="124"/>
                <declaration name="coordinates" type="double[]" line="128"/>
            </method>
            <method name="testNorm1" type="void" line="135"/>
            <method name="testNorm" type="void" line="141"/>
            <method name="testNormSq" type="void" line="147"/>
            <method name="testNormInf" type="void" line="153"/>
            <method name="testDistance1" type="void" line="159">
                <declaration name="v1" type="Vector3D" line="160"/>
                <declaration name="v2" type="Vector3D" line="161"/>
            </method>
            <method name="testDistance" type="void" line="168">
                <declaration name="v1" type="Vector3D" line="169"/>
                <declaration name="v2" type="Vector3D" line="170"/>
            </method>
            <method name="testDistanceSq" type="void" line="177">
                <declaration name="v1" type="Vector3D" line="178"/>
                <declaration name="v2" type="Vector3D" line="179"/>
            </method>
            <method name="testDistanceInf" type="void" line="187">
                <declaration name="v1" type="Vector3D" line="188"/>
                <declaration name="v2" type="Vector3D" line="189"/>
            </method>
            <method name="testSubtract" type="void" line="196">
                <declaration name="v1" type="Vector3D" line="197"/>
                <declaration name="v2" type="Vector3D" line="198"/>
            </method>
            <method name="testAdd" type="void" line="207">
                <declaration name="v1" type="Vector3D" line="208"/>
                <declaration name="v2" type="Vector3D" line="209"/>
            </method>
            <method name="testScalarProduct" type="void" line="218">
                <declaration name="v" type="Vector3D" line="219"/>
            </method>
            <method name="testVectorialProducts" type="void" line="227">
                <declaration name="v1" type="Vector3D" line="228"/>
                <declaration name="v2" type="Vector3D" line="229"/>
                <declaration name="v3" type="Vector3D" line="233"/>
            </method>
            <method name="testCrossProductCancellation" type="void" line="241">
                <declaration name="v1" type="Vector3D" line="242"/>
                <declaration name="v2" type="Vector3D" line="243"/>
                <declaration name="scale" type="double" line="246"/>
                <declaration name="big1" type="Vector3D" line="247"/>
                <declaration name="small2" type="Vector3D" line="248"/>
            </method>
            <method name="testAngular" type="void" line="254">
                <declaration name="u" type="Vector3D" line="262"/>
            </method>
            <method name="testAngularSeparation" type="void" line="268">
                <declaration name="v1" type="Vector3D" line="269"/>
                <declaration name="k" type="Vector3D" line="271"/>
                <declaration name="i" type="Vector3D" line="272"/>
                <declaration name="v2" type="Vector3D" line="273"/>
            </method>
            <method name="testNormalize" type="void" line="279">
                <scope line="281"/>
                <scope line="284"/>
            </method>
            <method name="testNegate" type="void" line="290"/>
            <method name="testOrthogonal" type="void" line="295">
                <declaration name="v1" type="Vector3D" line="296"/>
                <declaration name="v2" type="Vector3D" line="298"/>
                <declaration name="v3" type="Vector3D" line="300"/>
                <declaration name="v4" type="Vector3D" line="302"/>
                <scope line="304"/>
                <scope line="307"/>
            </method>
            <method name="testAngle" type="void" line="312">
                <scope line="322"/>
                <scope line="325"/>
            </method>
            <method name="testAccurateDotProduct" type="void" line="331">
                <comment line="332">
                    the following two vectors are nearly but not exactly orthogonal                    
                </comment>
                <comment line="332">
                    naive dot product (i.e. computing u1.x * u2.x + u1.y * u2.y + u1.z * u2.z                    
                </comment>
                <comment line="332">
                    leads to a result of 0.0, instead of the correct -1.855129...                    
                </comment>
                <declaration name="u1" type="Vector3D" line="335"/>
                <declaration name="u2" type="Vector3D" line="338"/>
                <declaration name="sNaive" type="double" line="341"/>
                <declaration name="sAccurate" type="double" line="342"/>
            </method>
            <method name="testDotProduct" type="void" line="348">
                <comment line="349">
                    we compare accurate versus naive dot product implementations                    
                </comment>
                <comment line="349">
                    on regular vectors (i.e. not extreme cases like in the previous test)                    
                </comment>
                <declaration name="random" type="Well1024a" line="351"/>
                <scope line="352">
                    <declaration name="ux" type="double" line="353"/>
                    <declaration name="uy" type="double" line="354"/>
                    <declaration name="uz" type="double" line="355"/>
                    <declaration name="vx" type="double" line="356"/>
                    <declaration name="vy" type="double" line="357"/>
                    <declaration name="vz" type="double" line="358"/>
                    <declaration name="sNaive" type="double" line="359"/>
                    <declaration name="sAccurate" type="double" line="360"/>
                </scope>
            </method>
            <method name="testAccurateCrossProduct" type="void" line="366">
                <comment line="367">
                    the vectors u1 and u2 are nearly but not exactly anti-parallel                    
                </comment>
                <comment line="367">
                    (7.31e-16 degrees from 180 degrees) naive cross product (i.e.                    
                </comment>
                <comment line="367">
                    computing u1.x * u2.x + u1.y * u2.y + u1.z * u2.z                    
                </comment>
                <comment line="367">
                    leads to a result of   [0.0009765, -0.0001220, -0.0039062],                    
                </comment>
                <comment line="367">
                    instead of the correct [0.0006913, -0.0001254, -0.0007909]                    
                </comment>
                <declaration name="u1" type="Vector3D" line="372"/>
                <declaration name="u2" type="Vector3D" line="375"/>
                <declaration name="u3" type="Vector3D" line="378"/>
                <declaration name="cNaive" type="Vector3D" line="381"/>
                <declaration name="cAccurate" type="Vector3D" line="384"/>
            </method>
            <method name="testCrossProduct" type="void" line="390">
                <comment line="391">
                    we compare accurate versus naive cross product implementations                    
                </comment>
                <comment line="391">
                    on regular vectors (i.e. not extreme cases like in the previous test)                    
                </comment>
                <declaration name="random" type="Well1024a" line="393"/>
                <scope line="394">
                    <declaration name="ux" type="double" line="395"/>
                    <declaration name="uy" type="double" line="396"/>
                    <declaration name="uz" type="double" line="397"/>
                    <declaration name="vx" type="double" line="398"/>
                    <declaration name="vy" type="double" line="399"/>
                    <declaration name="vz" type="double" line="400"/>
                    <declaration name="cNaive" type="Vector3D" line="401"/>
                    <declaration name="cAccurate" type="Vector3D" line="402"/>
                </scope>
            </method>
            <method name="checkVector" type="void" line="407"/>
        </class>
    </source>