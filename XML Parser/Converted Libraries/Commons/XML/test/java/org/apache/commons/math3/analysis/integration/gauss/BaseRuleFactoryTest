<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.integration.gauss">
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.concurrent.ThreadPoolExecutor"/>
        <import package="java.util.concurrent.ArrayBlockingQueue"/>
        <import package="java.util.concurrent.TimeUnit"/>
        <import package="java.util.concurrent.Callable"/>
        <import package="java.util.concurrent.Future"/>
        <import package="java.util.concurrent.ExecutionException"/>
        <import package="java.util.concurrent.atomic.AtomicInteger"/>
        <import package="org.apache.commons.math3.util.Pair"/>
        <import package="org.junit.Test"/>
        <import package="org.junit.Assert"/>
        <class name="BaseRuleFactoryTest" line="32">
            <javadoc line="32">
                Test for {@link BaseRuleFactory}.                
                <@version>
                    n $Id$                    
                </@version>
            </javadoc>
            <javadoc line="38">
                Tests that a given rule rule will be computed and added once to the cache
                  whatever the number of times this rule is called concurrently.                
            </javadoc>
            <method name="testConcurrentCreation" type="void" line="44">
                <comment line="45">
                    Number of times the same rule will be called.                    
                </comment>
                <comment line="45">
                    Ensure that all computations have completed.                    
                </comment>
                <comment line="45">
                    Assertion would fail if &quot;getRuleInternal&quot; were not &quot;synchronized&quot;.                    
                </comment>
                <declaration name="numTasks" type="int" line="46"/>
                <declaration name="exec" type="ThreadPoolExecutor" line="48"/>
                <declaration name="results" type="List&lt;Future&lt;Pair&lt;double[],double[]&gt;&gt;&gt;" line="52"/>
                <scope line="54"/>
                <scope line="59"/>
                <declaration name="n" type="int" line="64"/>
            </method>
        </class>
        <class name="RuleBuilder" line="69">
            <implements interface="Callable">
                <type_params>
                    <type_param name="Pair<double[],double[]>"/>
                </type_params>
            </implements>
            <declaration name="factory" type="DummyRuleFactory" line="70"/>
            <method name="call" type="Pair<double[],double[]>" line="72">
                <comment line="73">
                    nal int dummy = 2; // Always request the same rule.                    
                </comment>
                <declaration name="dummy" type="int" line="73"/>
            </method>
            <method name="getNumberOfCalls" type="int" line="77"/>
        </class>
        <class name="DummyRuleFactory" line="82">
            <extends class="BaseRuleFactory">
                <type_params>
                    <type_param name="Double"/>
                </type_params>
            </extends>
            <declaration name="nCalls" type="AtomicInteger" line="83"/>
            <javadoc line="83">
                Rule computations counter.                
            </javadoc>
            <method name="computeRule" type="Pair<Double[],Double[]>" line="87">
                <params>
                    <param name="order" type="int"/>
                </params>
                <comment line="88">
                    Tracks whether this computation has been called more than once.                    
                </comment>
                <comment line="88">
                    Dummy rule (but contents must exist).                    
                </comment>
                <scope line="91"/>
                <scope line="94"/>
                <declaration name="p" type="Double[]" line="99"/>
                <declaration name="w" type="Double[]" line="100"/>
                <scope line="101"/>
            </method>
            <method name="getNumberOfCalls" type="int" line="108"/>
        </class>
    </source>