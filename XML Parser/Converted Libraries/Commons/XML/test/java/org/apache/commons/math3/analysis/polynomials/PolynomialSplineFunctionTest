<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.polynomials">
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="PolynomialSplineFunctionTest" line="28">
            <javadoc line="28">
                Tests the PolynomialSplineFunction implementation.                
                <@version>
                    n $Id: PolynomialSplineFunctionTest.java 1364030 2012-07-21 01:10:04Z erans $                    
                </@version>
            </javadoc>
            <declaration name="tolerance" type="double" line="35"/>
            <javadoc line="35">
                Error tolerance for tests                
            </javadoc>
            <declaration name="polynomials" type="PolynomialFunction[]" line="38"/>
            <javadoc line="38">
                Quadratic polynomials used in tests:
                  x^2 + x            [-1, 0)
                  x^2 + x + 2        [0, 1)
                  x^2 + x + 4        [1, 2)
                  Defined so that evaluation using PolynomialSplineFunction evaluation
                  algorithm agrees at knot point boundaries.                
            </javadoc>
            <declaration name="knots" type="double[]" line="54"/>
            <javadoc line="54">
                Knot points                
            </javadoc>
            <declaration name="dp" type="PolynomialFunction" line="57"/>
            <javadoc line="57">
                Derivative of test polynomials -- 2x + 1                
            </javadoc>
            <method name="testConstructor" type="void" line="63">
                <declaration name="spline" type="PolynomialSplineFunction" line="64"/>
                <scope line="70"/>
                <scope line="73"/>
                <scope line="77"/>
                <scope line="80"/>
                <scope line="84"/>
                <scope line="87"/>
            </method>
            <method name="testValues" type="void" line="93">
                <comment line="94">
                    interior points -- spline value at x should equal p(x - knot)
                     where knot is the largest knot point less than or equal to x and p
                     is the polynomial defined over the knot segment to which x belongs.                    
                </comment>
                <comment line="94">
                    knot points -- centering should zero arguments                    
                </comment>
                <declaration name="spline" type="PolynomialSplineFunction" line="94"/>
                <declaration name="dSpline" type="UnivariateFunction" line="96"/>
                <declaration name="x" type="double" line="103"/>
                <declaration name="index" type="int" line="104"/>
                <scope line="105"/>
                <scope line="115"/>
                <scope line="122"/>
                <scope line="125"/>
                <scope line="129"/>
                <scope line="132"/>
            </method>
            <javadoc line="137">
                Do linear search to find largest knot point less than or equal to x.
                  Implementation does binary search.                
            </javadoc>
            <method name="findKnot" type="int" line="141">
                <params>
                    <param name="knots" type="double[]"/>
                    <param name="x" type="double"/>
                </params>
                <scope line="142"/>
                <scope line="145">
                    <scope line="146"/>
                </scope>
            </method>
        </class>
    </source>