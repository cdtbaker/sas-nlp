<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.complex">
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.complex.Quaternion"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.ZeroException"/>
        <import package="org.apache.commons.math3.geometry.euclidean.threed.Rotation"/>
        <import package="org.apache.commons.math3.geometry.euclidean.threed.Vector3D"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Test"/>
        <import package="org.junit.Assert"/>
        <class name="QuaternionTest" line="29">
            <declaration name="EPS" type="double" line="30"/>
            <javadoc line="30">
                Epsilon for double comparison.                
            </javadoc>
            <declaration name="COMPARISON_EPS" type="double" line="32"/>
            <javadoc line="32">
                Epsilon for double comparison.                
            </javadoc>
            <method name="testAccessors1" type="void" line="36">
                <declaration name="q0" type="double" line="37"/>
                <declaration name="q1" type="double" line="38"/>
                <declaration name="q2" type="double" line="39"/>
                <declaration name="q3" type="double" line="40"/>
                <declaration name="q" type="Quaternion" line="41"/>
            </method>
            <method name="testAccessors2" type="void" line="50">
                <declaration name="q0" type="double" line="51"/>
                <declaration name="q1" type="double" line="52"/>
                <declaration name="q2" type="double" line="53"/>
                <declaration name="q3" type="double" line="54"/>
                <declaration name="q" type="Quaternion" line="55"/>
                <declaration name="sP" type="double" line="57"/>
                <declaration name="vP" type="double[]" line="58"/>
            </method>
            <method name="testAccessors3" type="void" line="67">
                <declaration name="q0" type="double" line="68"/>
                <declaration name="q1" type="double" line="69"/>
                <declaration name="q2" type="double" line="70"/>
                <declaration name="q3" type="double" line="71"/>
                <declaration name="q" type="Quaternion" line="72"/>
                <declaration name="sP" type="double" line="74"/>
                <declaration name="vP" type="double[]" line="75"/>
            </method>
            <method name="testWrongDimension" type="void" line="84"/>
            <method name="testConjugate" type="void" line="89">
                <declaration name="q0" type="double" line="90"/>
                <declaration name="q1" type="double" line="91"/>
                <declaration name="q2" type="double" line="92"/>
                <declaration name="q3" type="double" line="93"/>
                <declaration name="q" type="Quaternion" line="94"/>
                <declaration name="qConjugate" type="Quaternion" line="96"/>
            </method>
            <method name="testProductQuaternionQuaternion" type="void" line="105">
                <comment line="106">
                    Case : analytic test case                    
                </comment>
                <comment line="106">
                    comparison with the result given by the formula :                    
                </comment>
                <comment line="106">
                    qResult = (scalarA * scalarB - vectorA . vectorB) + (scalarA * vectorB + scalarB * vectorA + vectorA ^                    
                </comment>
                <comment line="106">
                    vectorB)                    
                </comment>
                <comment line="106">
                    Conjugate of the product of two quaternions and product of their conjugates :                    
                </comment>
                <comment line="106">
                    Conj(qA * qB) = Conj(qB) * Conj(qA)                    
                </comment>
                <declaration name="qA" type="Quaternion" line="109"/>
                <declaration name="qB" type="Quaternion" line="110"/>
                <declaration name="qResult" type="Quaternion" line="111"/>
                <declaration name="vectorA" type="Vector3D" line="122"/>
                <declaration name="vectorB" type="Vector3D" line="123"/>
                <declaration name="vectorResult" type="Vector3D" line="124"/>
                <declaration name="scalarPartRef" type="double" line="126"/>
                <declaration name="vectorPartRef" type="Vector3D" line="130"/>
                <declaration name="norm" type="double" line="132"/>
                <declaration name="conjugateOfProduct" type="Quaternion" line="139"/>
                <declaration name="productOfConjugate" type="Quaternion" line="140"/>
            </method>
            <method name="testProductQuaternionVector" type="void" line="149">
                <comment line="150">
                    Case : Product between a vector and a quaternion : QxV                    
                </comment>
                <comment line="150">
                    comparison with the result given by the formula :                    
                </comment>
                <comment line="150">
                    qResult = (- vectorQ . vector) + (scalarQ * vector + vectorQ ^ vector)                    
                </comment>
                <comment line="150">
                    Case : Product between a vector and a quaternion : VxQ                    
                </comment>
                <comment line="150">
                    comparison with the result given by the formula :                    
                </comment>
                <comment line="150">
                    qResult = (- vector . vectorQ) + (scalarQ * vector + vector ^ vectorQ)                    
                </comment>
                <declaration name="quaternion" type="Quaternion" line="153"/>
                <declaration name="vector" type="double[]" line="154"/>
                <declaration name="qResultQxV" type="Quaternion" line="155"/>
                <declaration name="vectorQ" type="double[]" line="165"/>
                <declaration name="vectorResultQxV" type="double[]" line="166"/>
                <declaration name="scalarPartRefQxV" type="double" line="168"/>
                <declaration name="vectorPartRefQxV" type="Vector3D" line="171"/>
                <declaration name="normQxV" type="double" line="173"/>
                <declaration name="qResultVxQ" type="Quaternion" line="178"/>
                <declaration name="vectorResultVxQ" type="double[]" line="185"/>
                <declaration name="scalarPartRefVxQ" type="double" line="190"/>
                <declaration name="vectorPartRefVxQ" type="Vector3D" line="193"/>
                <declaration name="normVxQ" type="double" line="195"/>
            </method>
            <method name="testDotProductQuaternionQuaternion" type="void" line="200">
                <comment line="201">
                    expected output                    
                </comment>
                <comment line="201">
                    inputs                    
                </comment>
                <declaration name="expected" type="double" line="202"/>
                <declaration name="q1" type="Quaternion" line="204"/>
                <declaration name="q2" type="Quaternion" line="205"/>
                <declaration name="actual1" type="double" line="207"/>
                <declaration name="actual2" type="double" line="208"/>
            </method>
            <method name="testScalarMultiplyDouble" type="void" line="215">
                <comment line="216">
                    expected outputs                    
                </comment>
                <comment line="216">
                    inputs                    
                </comment>
                <declaration name="w" type="double" line="217"/>
                <declaration name="x" type="double" line="218"/>
                <declaration name="y" type="double" line="219"/>
                <declaration name="z" type="double" line="220"/>
                <declaration name="q1" type="Quaternion" line="222"/>
                <declaration name="a" type="double" line="223"/>
                <declaration name="q" type="Quaternion" line="225"/>
            </method>
            <method name="testAddQuaternionQuaternion" type="void" line="234">
                <comment line="235">
                    expected outputs                    
                </comment>
                <comment line="235">
                    inputs                    
                </comment>
                <declaration name="w" type="double" line="236"/>
                <declaration name="x" type="double" line="237"/>
                <declaration name="y" type="double" line="238"/>
                <declaration name="z" type="double" line="239"/>
                <declaration name="q1" type="Quaternion" line="241"/>
                <declaration name="q2" type="Quaternion" line="242"/>
                <declaration name="qa" type="Quaternion" line="244"/>
                <declaration name="qb" type="Quaternion" line="245"/>
            </method>
            <method name="testSubtractQuaternionQuaternion" type="void" line="259">
                <comment line="260">
                    expected outputs                    
                </comment>
                <comment line="260">
                    inputs                    
                </comment>
                <declaration name="w" type="double" line="261"/>
                <declaration name="x" type="double" line="262"/>
                <declaration name="y" type="double" line="263"/>
                <declaration name="z" type="double" line="264"/>
                <declaration name="q1" type="Quaternion" line="266"/>
                <declaration name="q2" type="Quaternion" line="267"/>
                <declaration name="qa" type="Quaternion" line="269"/>
                <declaration name="qb" type="Quaternion" line="270"/>
            </method>
            <method name="testNorm" type="void" line="284">
                <declaration name="q0" type="double" line="286"/>
                <declaration name="q1" type="double" line="287"/>
                <declaration name="q2" type="double" line="288"/>
                <declaration name="q3" type="double" line="289"/>
                <declaration name="q" type="Quaternion" line="290"/>
                <declaration name="norm" type="double" line="292"/>
                <declaration name="normSquareRef" type="double" line="296"/>
            </method>
            <method name="testNormalize" type="void" line="301">
                <declaration name="q" type="Quaternion" line="303"/>
                <declaration name="versor" type="Quaternion" line="305"/>
            </method>
            <method name="testNormalizeFail" type="void" line="316">
                <declaration name="zeroQ" type="Quaternion" line="317"/>
            </method>
            <method name="testObjectEquals" type="void" line="322">
                <declaration name="one" type="double" line="323"/>
                <declaration name="q1" type="Quaternion" line="324"/>
                <declaration name="q2" type="Quaternion" line="327"/>
                <declaration name="q3" type="Quaternion" line="330"/>
            </method>
            <method name="testQuaternionEquals" type="void" line="335">
                <declaration name="inc" type="double" line="336"/>
                <declaration name="q1" type="Quaternion" line="337"/>
                <declaration name="q2" type="Quaternion" line="338"/>
                <declaration name="q3" type="Quaternion" line="339"/>
                <declaration name="q4" type="Quaternion" line="340"/>
                <declaration name="q5" type="Quaternion" line="341"/>
            </method>
            <method name="testQuaternionEquals2" type="void" line="355">
                <declaration name="q1" type="Quaternion" line="356"/>
                <declaration name="gap" type="double" line="357"/>
                <declaration name="q2" type="Quaternion" line="358"/>
            </method>
            <method name="testIsUnitQuaternion" type="void" line="366">
                <declaration name="r" type="Random" line="367"/>
                <declaration name="numberOfTrials" type="int" line="368"/>
                <scope line="369">
                    <declaration name="q1" type="Quaternion" line="370"/>
                    <declaration name="q2" type="Quaternion" line="371"/>
                </scope>
                <declaration name="q" type="Quaternion" line="375"/>
            </method>
            <method name="testIsPureQuaternion" type="void" line="380">
                <declaration name="q1" type="Quaternion" line="381"/>
                <declaration name="q2" type="Quaternion" line="384"/>
                <declaration name="q3" type="Quaternion" line="387"/>
                <declaration name="r" type="Random" line="390"/>
                <declaration name="v" type="double[]" line="391"/>
                <declaration name="q4" type="Quaternion" line="392"/>
                <declaration name="q5" type="Quaternion" line="395"/>
            </method>
            <method name="testPolarForm" type="void" line="400">
                <declaration name="r" type="Random" line="401"/>
                <declaration name="numberOfTrials" type="int" line="402"/>
                <scope line="403">
                    <declaration name="q" type="Quaternion" line="404"/>
                    <declaration name="qP" type="Quaternion" line="406"/>
                    <declaration name="rot" type="Rotation" line="411"/>
                    <declaration name="rotP" type="Rotation" line="412"/>
                </scope>
            </method>
            <method name="testGetInverse" type="void" line="422">
                <declaration name="q" type="Quaternion" line="423"/>
                <declaration name="inverseQ" type="Quaternion" line="425"/>
                <declaration name="product" type="Quaternion" line="431"/>
                <declaration name="qNul" type="Quaternion" line="437"/>
                <scope line="438">
                    <declaration name="inverseQNul" type="Quaternion" line="439"/>
                </scope>
                <scope line="441"/>
            </method>
            <method name="testToString" type="void" line="447">
                <declaration name="q" type="Quaternion" line="448"/>
            </method>
        </class>
    </source>