<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar">
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.optim.MaxEval"/>
        <import package="org.apache.commons.math3.optim.InitialGuess"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.optim.SimplePointChecker"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="MultivariateFunctionMappingAdapterTest" line="30">
            <method name="testStartSimplexInsideRange" type="void" line="32">
                <declaration name="biQuadratic" type="BiQuadratic" line="33"/>
                <declaration name="wrapped" type="MultivariateFunctionMappingAdapter" line="34"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="39"/>
                <declaration name="simplex" type="AbstractSimplex" line="40"/>
                <declaration name="optimum" type="PointValuePair" line="46"/>
                <declaration name="bounded" type="double[]" line="52"/>
            </method>
            <method name="testOptimumOutsideRange" type="void" line="59">
                <declaration name="biQuadratic" type="BiQuadratic" line="60"/>
                <declaration name="wrapped" type="MultivariateFunctionMappingAdapter" line="61"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="66"/>
                <declaration name="simplex" type="AbstractSimplex" line="67"/>
                <declaration name="optimum" type="PointValuePair" line="73"/>
                <declaration name="bounded" type="double[]" line="79"/>
            </method>
            <method name="testUnbounded" type="void" line="86">
                <declaration name="biQuadratic" type="BiQuadratic" line="87"/>
                <declaration name="wrapped" type="MultivariateFunctionMappingAdapter" line="90"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="95"/>
                <declaration name="simplex" type="AbstractSimplex" line="96"/>
                <declaration name="optimum" type="PointValuePair" line="102"/>
                <declaration name="bounded" type="double[]" line="108"/>
            </method>
            <method name="testHalfBounded" type="void" line="115">
                <declaration name="biQuadratic" type="BiQuadratic" line="116"/>
                <declaration name="wrapped" type="MultivariateFunctionMappingAdapter" line="119"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="124"/>
                <declaration name="simplex" type="AbstractSimplex" line="125"/>
                <declaration name="optimum" type="PointValuePair" line="131"/>
                <declaration name="bounded" type="double[]" line="137"/>
            </method>
            <class name="BiQuadratic" line="143">
                <implements interface="MultivariateFunction"/>
                <declaration name="xOptimum" type="double" line="145"/>
                <declaration name="yOptimum" type="double" line="146"/>
                <declaration name="xMin" type="double" line="148"/>
                <declaration name="xMax" type="double" line="149"/>
                <declaration name="yMin" type="double" line="150"/>
                <declaration name="yMax" type="double" line="151"/>
                <method name="BiQuadratic" type="constructor" line="155"/>
                <method name="value" type="double" line="164">
                    <comment line="165">
                        the function should never be called with out of range points                        
                    </comment>
                    <declaration name="dx" type="double" line="171"/>
                    <declaration name="dy" type="double" line="172"/>
                </method>
                <method name="getLower" type="double[]" line="177"/>
                <method name="getUpper" type="double[]" line="181"/>
                <method name="getBoundedXOptimum" type="double" line="185"/>
                <method name="getBoundedYOptimum" type="double" line="189"/>
            </class>
        </class>
    </source>