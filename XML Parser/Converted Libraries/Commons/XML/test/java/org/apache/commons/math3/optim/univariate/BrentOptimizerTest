<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.univariate">
        <import package="org.apache.commons.math3.analysis.QuinticFunction"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.function.Sin"/>
        <import package="org.apache.commons.math3.analysis.function.StepFunction"/>
        <import package="org.apache.commons.math3.analysis.FunctionUtils"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.optim.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.GoalType"/>
        <import package="org.apache.commons.math3.optim.MaxEval"/>
        <import package="org.apache.commons.math3.stat.descriptive.DescriptiveStatistics"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="BrentOptimizerTest" line="36">
            <javadoc line="36">
                @version $Id$                
            </javadoc>
            <method name="testSinMin" type="void" line="42">
                <declaration name="f" type="UnivariateFunction" line="43"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="44"/>
                <scope line="57"/>
                <scope line="63"/>
            </method>
            <method name="testSinMinWithValueChecker" type="void" line="69">
                <comment line="70">
                    The default stopping criterion of Brent&apos;s algorithm should not                    
                </comment>
                <comment line="70">
                    pass, but the search will stop at the given relative tolerance                    
                </comment>
                <comment line="70">
                    for the function value.                    
                </comment>
                <declaration name="f" type="UnivariateFunction" line="70"/>
                <declaration name="checker" type="ConvergenceChecker&lt;UnivariatePointValuePair&gt;" line="71"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="75"/>
                <declaration name="result" type="UnivariatePointValuePair" line="76"/>
            </method>
            <method name="testBoundaries" type="void" line="84">
                <declaration name="lower" type="double" line="85"/>
                <declaration name="upper" type="double" line="86"/>
                <anonymous_class line="87">
                    <method name="value" type="double" line="88">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                        <scope line="89"/>
                        <scope line="91"/>
                        <scope line="93"/>
                    </method>
                </anonymous_class>
                <declaration name="f" type="UnivariateFunction" line="87"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="98"/>
            </method>
            <method name="testQuinticMin" type="void" line="114">
                <comment line="115">
                    The function has local minima at -0.27195613 and 0.82221643.                    
                </comment>
                <comment line="115">
                    search in a large interval                    
                </comment>
                <declaration name="f" type="UnivariateFunction" line="116"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="117"/>
            </method>
            <method name="testQuinticMinStatistics" type="void" line="137">
                <comment line="138">
                    The function has local minima at -0.27195613 and 0.82221643.                    
                </comment>
                <declaration name="f" type="UnivariateFunction" line="139"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="140"/>
                <declaration name="stat" type="DescriptiveStatistics[]" line="142"/>
                <scope line="143"/>
                <declaration name="min" type="double" line="147"/>
                <declaration name="max" type="double" line="148"/>
                <declaration name="nSamples" type="int" line="149"/>
                <declaration name="delta" type="double" line="150"/>
                <scope line="151">
                    <declaration name="start" type="double" line="152"/>
                </scope>
                <declaration name="meanOptValue" type="double" line="160"/>
                <declaration name="medianEval" type="double" line="161"/>
            </method>
            <method name="testQuinticMax" type="void" line="168">
                <comment line="169">
                    The quintic function has zeros at 0, +-0.5 and +-1.                    
                </comment>
                <comment line="169">
                    The function has a local maximum at 0.27195613.                    
                </comment>
                <declaration name="f" type="UnivariateFunction" line="171"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="172"/>
                <scope line="177"/>
                <scope line="183"/>
            </method>
            <method name="testMinEndpoints" type="void" line="189">
                <comment line="190">
                    endpoint is minimum                    
                </comment>
                <declaration name="f" type="UnivariateFunction" line="190"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="191"/>
                <declaration name="result" type="double" line="194"/>
            </method>
            <method name="testMath832" type="void" line="208">
                <anonymous_class line="209">
                    <method name="value" type="double" line="210">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                        <declaration name="sqrtX" type="double" line="211"/>
                        <declaration name="a" type="double" line="212"/>
                        <declaration name="b" type="double" line="213"/>
                        <declaration name="c" type="double" line="214"/>
                    </method>
                </anonymous_class>
                <declaration name="f" type="UnivariateFunction" line="209"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="220"/>
                <declaration name="result" type="double" line="221"/>
            </method>
            <javadoc line="230">
                Contrived example showing that prior to the resolution of MATH-855
                  (second revision), the algorithm would not return the best point if
                  it happened to be the initial guess.                
            </javadoc>
            <method name="testKeepInitIfBest" type="void" line="236">
                <comment line="237">
                    A slightly less stringent tolerance would make the test pass                    
                </comment>
                <comment line="237">
                    even with the previous implementation.                    
                </comment>
                <comment line="237">
                    System.out.println(&quot;numEval=&quot; + numEval);                    
                </comment>
                <comment line="237">
                    System.out.println(&quot;min=&quot; + init + &quot; f=&quot; + f.value(init));                    
                </comment>
                <comment line="237">
                    System.out.println(&quot;sol=&quot; + sol + &quot; f=&quot; + f.value(sol));                    
                </comment>
                <comment line="237">
                    System.out.println(&quot;exp=&quot; + expected + &quot; f=&quot; + f.value(expected));                    
                </comment>
                <declaration name="minSin" type="double" line="237"/>
                <declaration name="offset" type="double" line="238"/>
                <declaration name="delta" type="double" line="239"/>
                <declaration name="f1" type="UnivariateFunction" line="240"/>
                <declaration name="f2" type="UnivariateFunction" line="241"/>
                <declaration name="f" type="UnivariateFunction" line="243"/>
                <declaration name="relTol" type="double" line="246"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="247"/>
                <declaration name="init" type="double" line="248"/>
                <declaration name="result" type="UnivariatePointValuePair" line="249"/>
                <declaration name="numEval" type="int" line="256"/>
                <declaration name="sol" type="double" line="258"/>
                <declaration name="expected" type="double" line="259"/>
            </method>
            <javadoc line="269">
                Contrived example showing that prior to the resolution of MATH-855,
                  the algorithm, by always returning the last evaluated point, would
                  sometimes not report the best point it had found.                
            </javadoc>
            <method name="testMath855" type="void" line="275">
                <comment line="276">
                    System.out.println(&quot;min=&quot; + (minSin + offset) + &quot; f=&quot; + f.value(minSin + offset));                    
                </comment>
                <comment line="276">
                    System.out.println(&quot;sol=&quot; + sol + &quot; f=&quot; + f.value(sol));                    
                </comment>
                <comment line="276">
                    System.out.println(&quot;exp=&quot; + expected + &quot; f=&quot; + f.value(expected));                    
                </comment>
                <declaration name="minSin" type="double" line="276"/>
                <declaration name="offset" type="double" line="277"/>
                <declaration name="delta" type="double" line="278"/>
                <declaration name="f1" type="UnivariateFunction" line="279"/>
                <declaration name="f2" type="UnivariateFunction" line="280"/>
                <declaration name="f" type="UnivariateFunction" line="282"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="283"/>
                <declaration name="result" type="UnivariatePointValuePair" line="284"/>
                <declaration name="numEval" type="int" line="290"/>
                <declaration name="sol" type="double" line="292"/>
                <declaration name="expected" type="double" line="293"/>
            </method>
        </class>
    </source>