<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.dfp">
        <import package="org.apache.commons.math3.ExtendedFieldElementAbstractTest"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.junit.After"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Before"/>
        <import package="org.junit.Test"/>
        <class name="DfpTest" line="28">
            <extends class="ExtendedFieldElementAbstractTest">
                <type_params>
                    <type_param name="Dfp"/>
                </type_params>
            </extends>
            <comment line="29">
                Generic test function.  Takes params x and y and tests them for                
            </comment>
            <comment line="29">
                equality.  Then checks the status flags against the flags argument.                
            </comment>
            <comment line="29">
                If the test fail, it prints the desc string                
            </comment>
            <comment line="29">
                                
            </comment>
            <comment line="29">
                //////////////////////////////////////////////////////////////////////////////////////////////////////                
            </comment>
            <comment line="29">
                Test comparisons                
            </comment>
            <comment line="29">
                utility function to help test comparisons                
            </comment>
            <comment line="29">
                                
            </comment>
            <comment line="29">
                Test multiplication                
            </comment>
            <comment line="29">
                                
            </comment>
            <method name="build" type="Dfp" line="30">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <declaration name="field" type="DfpField" line="34"/>
            <declaration name="pinf" type="Dfp" line="35"/>
            <declaration name="ninf" type="Dfp" line="36"/>
            <declaration name="nan" type="Dfp" line="37"/>
            <declaration name="snan" type="Dfp" line="38"/>
            <declaration name="qnan" type="Dfp" line="39"/>
            <method name="setUp" type="void" line="42">
                <comment line="43">
                    Some basic setup.  Define some constants and clear the status flags                    
                </comment>
            </method>
            <method name="tearDown" type="void" line="54"/>
            <method name="test" type="void" line="67">
                <params>
                    <param name="x" type="Dfp"/>
                    <param name="y" type="Dfp"/>
                    <param name="flags" type="int"/>
                    <param name="desc" type="String"/>
                </params>
                <declaration name="b" type="boolean" line="68"/>
            </method>
            <method name="testByteConstructor" type="void" line="85"/>
            <method name="testIntConstructor" type="void" line="94"/>
            <method name="testLongConstructor" type="void" line="105"/>
            <method name="testAdd" type="void" line="120">
                <comment line="121">
                    rounding mode is round half even                    
                </comment>
            </method>
            <method name="cmptst" type="void" line="374">
                <params>
                    <param name="a" type="Dfp"/>
                    <param name="b" type="Dfp"/>
                    <param name="op" type="String"/>
                    <param name="result" type="boolean"/>
                    <param name="num" type="double"/>
                </params>
            </method>
            <method name="testCompare" type="void" line="394">
                <comment line="395">
                    test equal() comparison                    
                </comment>
                <comment line="395">
                    check zero vs. zero                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;0&quot;), &quot;equal&quot;, true, 1);         // 0 == 0                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;-0&quot;), &quot;equal&quot;, true, 2);        // 0 == -0                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-0&quot;), field.newDfp(&quot;-0&quot;), &quot;equal&quot;, true, 3);       // -0 == -0                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-0&quot;), field.newDfp(&quot;0&quot;), &quot;equal&quot;, true, 4);        // -0 == 0                    
                </comment>
                <comment line="395">
                    check zero vs normal numbers                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;1&quot;), &quot;equal&quot;, false, 5);         // 0 == 1                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;1&quot;), field.newDfp(&quot;0&quot;), &quot;equal&quot;, false, 6);         // 1 == 0                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-1&quot;), field.newDfp(&quot;0&quot;), &quot;equal&quot;, false, 7);        // -1 == 0                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;-1&quot;), &quot;equal&quot;, false, 8);        // 0 == -1                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;1e-131072&quot;), &quot;equal&quot;, false, 9); // 0 == 1e-131072                    
                </comment>
                <comment line="395">
                    check flags                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;1e-131078&quot;), &quot;equal&quot;, false, 10); // 0 == 1e-131078                    
                </comment>
                <comment line="395">
                    check flags  -- underflow should be set                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;1e+131071&quot;), &quot;equal&quot;, false, 11); // 0 == 1e+131071                    
                </comment>
                <comment line="395">
                    check zero vs infinities                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), pinf, &quot;equal&quot;, false, 12);    // 0 == pinf                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), ninf, &quot;equal&quot;, false, 13);    // 0 == ninf                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-0&quot;), pinf, &quot;equal&quot;, false, 14);   // -0 == pinf                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-0&quot;), ninf, &quot;equal&quot;, false, 15);   // -0 == ninf                    
                </comment>
                <comment line="395">
                    ptst(pinf, field.newDfp(&quot;0&quot;), &quot;equal&quot;, false, 16);    // pinf == 0                    
                </comment>
                <comment line="395">
                    ptst(ninf, field.newDfp(&quot;0&quot;), &quot;equal&quot;, false, 17);    // ninf == 0                    
                </comment>
                <comment line="395">
                    ptst(pinf, field.newDfp(&quot;-0&quot;), &quot;equal&quot;, false, 18);   // pinf == -0                    
                </comment>
                <comment line="395">
                    ptst(ninf, field.newDfp(&quot;-0&quot;), &quot;equal&quot;, false, 19);   // ninf == -0                    
                </comment>
                <comment line="395">
                    ptst(ninf, pinf, &quot;equal&quot;, false, 19.10);     // ninf == pinf                    
                </comment>
                <comment line="395">
                    ptst(pinf, ninf, &quot;equal&quot;, false, 19.11);     // pinf == ninf                    
                </comment>
                <comment line="395">
                    ptst(pinf, pinf, &quot;equal&quot;, true, 19.12);     // pinf == pinf                    
                </comment>
                <comment line="395">
                    ptst(ninf, ninf, &quot;equal&quot;, true, 19.13);     // ninf == ninf                    
                </comment>
                <comment line="395">
                    check some normal numbers                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;1&quot;), field.newDfp(&quot;1&quot;), &quot;equal&quot;, true, 20);   // 1 == 1                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;1&quot;), field.newDfp(&quot;-1&quot;), &quot;equal&quot;, false, 21);   // 1 == -1                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-1&quot;), field.newDfp(&quot;-1&quot;), &quot;equal&quot;, true, 22);   // -1 == -1                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;1&quot;), field.newDfp(&quot;1.0000000000000001&quot;), &quot;equal&quot;, false, 23);   // 1 == 1.0000000000000001                    
                </comment>
                <comment line="395">
                    The tests below checks to ensure that comparisons don&apos;t set FLAG_INEXACT                    
                </comment>
                <comment line="395">
                    100000 == 1.0000000000000001                    
                </comment>
                <comment line="395">
                    check some nans -- nans shouldnt equal anything                    
                </comment>
                <comment line="395">
                                        
                </comment>
                <comment line="395">
                    Tests for un equal  -- do it all over again                    
                </comment>
                <comment line="395">
                                        
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;0&quot;), &quot;unequal&quot;, false, 1);         // 0 == 0                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;-0&quot;), &quot;unequal&quot;, false, 2);        // 0 == -0                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-0&quot;), field.newDfp(&quot;-0&quot;), &quot;unequal&quot;, false, 3);       // -0 == -0                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-0&quot;), field.newDfp(&quot;0&quot;), &quot;unequal&quot;, false, 4);        // -0 == 0                    
                </comment>
                <comment line="395">
                    check zero vs normal numbers                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;1&quot;), &quot;unequal&quot;, true, 5);         // 0 == 1                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;1&quot;), field.newDfp(&quot;0&quot;), &quot;unequal&quot;, true, 6);         // 1 == 0                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-1&quot;), field.newDfp(&quot;0&quot;), &quot;unequal&quot;, true, 7);        // -1 == 0                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;-1&quot;), &quot;unequal&quot;, true, 8);        // 0 == -1                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;1e-131072&quot;), &quot;unequal&quot;, true, 9); // 0 == 1e-131072                    
                </comment>
                <comment line="395">
                    check flags                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;1e-131078&quot;), &quot;unequal&quot;, true, 10); // 0 == 1e-131078                    
                </comment>
                <comment line="395">
                    check flags  -- underflow should be set                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;1e+131071&quot;), &quot;unequal&quot;, true, 11); // 0 == 1e+131071                    
                </comment>
                <comment line="395">
                    check zero vs infinities                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), pinf, &quot;unequal&quot;, true, 12);    // 0 == pinf                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), ninf, &quot;unequal&quot;, true, 13);    // 0 == ninf                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-0&quot;), pinf, &quot;unequal&quot;, true, 14);   // -0 == pinf                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-0&quot;), ninf, &quot;unequal&quot;, true, 15);   // -0 == ninf                    
                </comment>
                <comment line="395">
                    ptst(pinf, field.newDfp(&quot;0&quot;), &quot;unequal&quot;, true, 16);    // pinf == 0                    
                </comment>
                <comment line="395">
                    ptst(ninf, field.newDfp(&quot;0&quot;), &quot;unequal&quot;, true, 17);    // ninf == 0                    
                </comment>
                <comment line="395">
                    ptst(pinf, field.newDfp(&quot;-0&quot;), &quot;unequal&quot;, true, 18);   // pinf == -0                    
                </comment>
                <comment line="395">
                    ptst(ninf, field.newDfp(&quot;-0&quot;), &quot;unequal&quot;, true, 19);   // ninf == -0                    
                </comment>
                <comment line="395">
                    ptst(ninf, pinf, &quot;unequal&quot;, true, 19.10);     // ninf == pinf                    
                </comment>
                <comment line="395">
                    ptst(pinf, ninf, &quot;unequal&quot;, true, 19.11);     // pinf == ninf                    
                </comment>
                <comment line="395">
                    ptst(pinf, pinf, &quot;unequal&quot;, false, 19.12);     // pinf == pinf                    
                </comment>
                <comment line="395">
                    ptst(ninf, ninf, &quot;unequal&quot;, false, 19.13);     // ninf == ninf                    
                </comment>
                <comment line="395">
                    check some normal numbers                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;1&quot;), field.newDfp(&quot;1&quot;), &quot;unequal&quot;, false, 20);   // 1 == 1                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;1&quot;), field.newDfp(&quot;-1&quot;), &quot;unequal&quot;, true, 21);   // 1 == -1                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-1&quot;), field.newDfp(&quot;-1&quot;), &quot;unequal&quot;, false, 22);   // -1 == -1                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;1&quot;), field.newDfp(&quot;1.0000000000000001&quot;), &quot;unequal&quot;, true, 23);   // 1 == 1.0000000000000001                    
                </comment>
                <comment line="395">
                    The tests below checks to ensure that comparisons don&apos;t set FLAG_INEXACT                    
                </comment>
                <comment line="395">
                    100000 == 1.0000000000000001                    
                </comment>
                <comment line="395">
                    check some nans -- nans shouldnt be unequal to anything                    
                </comment>
                <comment line="395">
                                        
                </comment>
                <comment line="395">
                    Tests for lessThan  -- do it all over again                    
                </comment>
                <comment line="395">
                                        
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;0&quot;), &quot;lessThan&quot;, false, 1);         // 0 &lt; 0                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;-0&quot;), &quot;lessThan&quot;, false, 2);        // 0 &lt; -0                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-0&quot;), field.newDfp(&quot;-0&quot;), &quot;lessThan&quot;, false, 3);       // -0 &lt; -0                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-0&quot;), field.newDfp(&quot;0&quot;), &quot;lessThan&quot;, false, 4);        // -0 &lt; 0                    
                </comment>
                <comment line="395">
                    check zero vs normal numbers                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;1&quot;), &quot;lessThan&quot;, true, 5);         // 0 &lt; 1                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;1&quot;), field.newDfp(&quot;0&quot;), &quot;lessThan&quot;, false, 6);         // 1 &lt; 0                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-1&quot;), field.newDfp(&quot;0&quot;), &quot;lessThan&quot;, true, 7);        // -1 &lt; 0                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;-1&quot;), &quot;lessThan&quot;, false, 8);        // 0 &lt; -1                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;1e-131072&quot;), &quot;lessThan&quot;, true, 9); // 0 &lt; 1e-131072                    
                </comment>
                <comment line="395">
                    check flags                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;1e-131078&quot;), &quot;lessThan&quot;, true, 10); // 0 &lt; 1e-131078                    
                </comment>
                <comment line="395">
                    check flags  -- underflow should be set                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;1e+131071&quot;), &quot;lessThan&quot;, true, 11); // 0 &lt; 1e+131071                    
                </comment>
                <comment line="395">
                    check zero vs infinities                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), pinf, &quot;lessThan&quot;, true, 12);    // 0 &lt; pinf                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), ninf, &quot;lessThan&quot;, false, 13);    // 0 &lt; ninf                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-0&quot;), pinf, &quot;lessThan&quot;, true, 14);   // -0 &lt; pinf                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-0&quot;), ninf, &quot;lessThan&quot;, false, 15);   // -0 &lt; ninf                    
                </comment>
                <comment line="395">
                    ptst(pinf, field.newDfp(&quot;0&quot;), &quot;lessThan&quot;, false, 16);    // pinf &lt; 0                    
                </comment>
                <comment line="395">
                    ptst(ninf, field.newDfp(&quot;0&quot;), &quot;lessThan&quot;, true, 17);    // ninf &lt; 0                    
                </comment>
                <comment line="395">
                    ptst(pinf, field.newDfp(&quot;-0&quot;), &quot;lessThan&quot;, false, 18);   // pinf &lt; -0                    
                </comment>
                <comment line="395">
                    ptst(ninf, field.newDfp(&quot;-0&quot;), &quot;lessThan&quot;, true, 19);   // ninf &lt; -0                    
                </comment>
                <comment line="395">
                    ptst(ninf, pinf, &quot;lessThan&quot;, true, 19.10);     // ninf &lt; pinf                    
                </comment>
                <comment line="395">
                    ptst(pinf, ninf, &quot;lessThan&quot;, false, 19.11);     // pinf &lt; ninf                    
                </comment>
                <comment line="395">
                    ptst(pinf, pinf, &quot;lessThan&quot;, false, 19.12);     // pinf &lt; pinf                    
                </comment>
                <comment line="395">
                    ptst(ninf, ninf, &quot;lessThan&quot;, false, 19.13);     // ninf &lt; ninf                    
                </comment>
                <comment line="395">
                    check some normal numbers                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;1&quot;), field.newDfp(&quot;1&quot;), &quot;lessThan&quot;, false, 20);   // 1 &lt; 1                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;1&quot;), field.newDfp(&quot;-1&quot;), &quot;lessThan&quot;, false, 21);   // 1 &lt; -1                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-1&quot;), field.newDfp(&quot;-1&quot;), &quot;lessThan&quot;, false, 22);   // -1 &lt; -1                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;1&quot;), field.newDfp(&quot;1.0000000000000001&quot;), &quot;lessThan&quot;, true, 23);   // 1 &lt; 1.0000000000000001                    
                </comment>
                <comment line="395">
                    The tests below checks to ensure that comparisons don&apos;t set FLAG_INEXACT                    
                </comment>
                <comment line="395">
                    100000 &lt; 1.0000000000000001                    
                </comment>
                <comment line="395">
                    check some nans -- nans shouldnt be lessThan to anything                    
                </comment>
                <comment line="395">
                    lessThan compares with nans should raise FLAG_INVALID                    
                </comment>
                <comment line="395">
                                        
                </comment>
                <comment line="395">
                    Tests for greaterThan  -- do it all over again                    
                </comment>
                <comment line="395">
                                        
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;0&quot;), &quot;greaterThan&quot;, false, 1);         // 0 &gt; 0                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;-0&quot;), &quot;greaterThan&quot;, false, 2);        // 0 &gt; -0                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-0&quot;), field.newDfp(&quot;-0&quot;), &quot;greaterThan&quot;, false, 3);       // -0 &gt; -0                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-0&quot;), field.newDfp(&quot;0&quot;), &quot;greaterThan&quot;, false, 4);        // -0 &gt; 0                    
                </comment>
                <comment line="395">
                    check zero vs normal numbers                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;1&quot;), &quot;greaterThan&quot;, false, 5);         // 0 &gt; 1                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;1&quot;), field.newDfp(&quot;0&quot;), &quot;greaterThan&quot;, true, 6);         // 1 &gt; 0                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-1&quot;), field.newDfp(&quot;0&quot;), &quot;greaterThan&quot;, false, 7);        // -1 &gt; 0                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;-1&quot;), &quot;greaterThan&quot;, true, 8);        // 0 &gt; -1                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;1e-131072&quot;), &quot;greaterThan&quot;, false, 9); // 0 &gt; 1e-131072                    
                </comment>
                <comment line="395">
                    check flags                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;1e-131078&quot;), &quot;greaterThan&quot;, false, 10); // 0 &gt; 1e-131078                    
                </comment>
                <comment line="395">
                    check flags  -- underflow should be set                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), field.newDfp(&quot;1e+131071&quot;), &quot;greaterThan&quot;, false, 11); // 0 &gt; 1e+131071                    
                </comment>
                <comment line="395">
                    check zero vs infinities                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), pinf, &quot;greaterThan&quot;, false, 12);    // 0 &gt; pinf                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;0&quot;), ninf, &quot;greaterThan&quot;, true, 13);    // 0 &gt; ninf                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-0&quot;), pinf, &quot;greaterThan&quot;, false, 14);   // -0 &gt; pinf                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-0&quot;), ninf, &quot;greaterThan&quot;, true, 15);   // -0 &gt; ninf                    
                </comment>
                <comment line="395">
                    ptst(pinf, field.newDfp(&quot;0&quot;), &quot;greaterThan&quot;, true, 16);    // pinf &gt; 0                    
                </comment>
                <comment line="395">
                    ptst(ninf, field.newDfp(&quot;0&quot;), &quot;greaterThan&quot;, false, 17);    // ninf &gt; 0                    
                </comment>
                <comment line="395">
                    ptst(pinf, field.newDfp(&quot;-0&quot;), &quot;greaterThan&quot;, true, 18);   // pinf &gt; -0                    
                </comment>
                <comment line="395">
                    ptst(ninf, field.newDfp(&quot;-0&quot;), &quot;greaterThan&quot;, false, 19);   // ninf &gt; -0                    
                </comment>
                <comment line="395">
                    ptst(ninf, pinf, &quot;greaterThan&quot;, false, 19.10);     // ninf &gt; pinf                    
                </comment>
                <comment line="395">
                    ptst(pinf, ninf, &quot;greaterThan&quot;, true, 19.11);     // pinf &gt; ninf                    
                </comment>
                <comment line="395">
                    ptst(pinf, pinf, &quot;greaterThan&quot;, false, 19.12);     // pinf &gt; pinf                    
                </comment>
                <comment line="395">
                    ptst(ninf, ninf, &quot;greaterThan&quot;, false, 19.13);     // ninf &gt; ninf                    
                </comment>
                <comment line="395">
                    check some normal numbers                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;1&quot;), field.newDfp(&quot;1&quot;), &quot;greaterThan&quot;, false, 20);   // 1 &gt; 1                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;1&quot;), field.newDfp(&quot;-1&quot;), &quot;greaterThan&quot;, true, 21);   // 1 &gt; -1                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;-1&quot;), field.newDfp(&quot;-1&quot;), &quot;greaterThan&quot;, false, 22);   // -1 &gt; -1                    
                </comment>
                <comment line="395">
                    ptst(field.newDfp(&quot;1&quot;), field.newDfp(&quot;1.0000000000000001&quot;), &quot;greaterThan&quot;, false, 23);   // 1 &gt; 1.0000000000000001                    
                </comment>
                <comment line="395">
                    The tests below checks to ensure that comparisons don&apos;t set FLAG_INEXACT                    
                </comment>
                <comment line="395">
                    100000 &gt; 1.0000000000000001                    
                </comment>
                <comment line="395">
                    check some nans -- nans shouldnt be greaterThan to anything                    
                </comment>
                <comment line="395">
                    greaterThan compares with nans should raise FLAG_INVALID                    
                </comment>
            </method>
            <method name="testMultiply" type="void" line="762">
                <comment line="763">
                    basic tests with integers                    
                </comment>
                <comment line="763">
                    multiply by zero                    
                </comment>
            </method>
            <method name="testDivide" type="void" line="929"/>
            <method name="testReciprocal" type="void" line="1049"/>
            <method name="testDivideInt" type="void" line="1089"/>
            <method name="testNextAfter" type="void" line="1157"/>
            <method name="testToString" type="void" line="1221"/>
            <method name="testRound" type="void" line="1235">
                <comment line="1236">
                    Round down                    
                </comment>
                <comment line="1236">
                    Round up                    
                </comment>
                <comment line="1236">
                    Round half up                    
                </comment>
                <comment line="1236">
                    Round half down                    
                </comment>
                <comment line="1236">
                    Round half odd                    
                </comment>
                <comment line="1236">
                    Round ceil                    
                </comment>
                <comment line="1236">
                    Round floor                    
                </comment>
                <comment line="1236">
                    eld.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN);  // reset                    
                </comment>
            </method>
            <method name="testCeil" type="void" line="1354"/>
            <method name="testFloor" type="void" line="1362"/>
            <method name="testRint" type="void" line="1370"/>
            <method name="testCopySign" type="void" line="1386"/>
            <method name="testIntValue" type="void" line="1406"/>
            <method name="testLog10K" type="void" line="1417"/>
            <method name="testPower10K" type="void" line="1427">
                <declaration name="d" type="Dfp" line="1428"/>
            </method>
            <method name="testLog10" type="void" line="1441"/>
            <method name="testPower10" type="void" line="1464">
                <declaration name="d" type="Dfp" line="1465"/>
            </method>
            <method name="testRemainder" type="void" line="1492"/>
            <method name="testSqrt" type="void" line="1508"/>
            <method name="testIssue567" type="void" line="1559">
                <declaration name="field" type="DfpField" line="1560"/>
            </method>
            <method name="testIsZero" type="void" line="1568"/>
            <method name="testSignPredicates" type="void" line="1583"/>
            <method name="testSpecialConstructors" type="void" line="1638"/>
        </class>
    </source>