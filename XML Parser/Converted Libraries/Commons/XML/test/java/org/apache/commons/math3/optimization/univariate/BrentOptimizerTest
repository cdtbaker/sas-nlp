<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.univariate">
        <import package="org.apache.commons.math3.analysis.QuinticFunction"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.function.Sin"/>
        <import package="org.apache.commons.math3.analysis.function.StepFunction"/>
        <import package="org.apache.commons.math3.analysis.FunctionUtils"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.optimization.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.stat.descriptive.DescriptiveStatistics"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="BrentOptimizerTest" line="35">
            <javadoc line="35">
                @version $Id$                
            </javadoc>
            <method name="testSinMin" type="void" line="41">
                <declaration name="f" type="UnivariateFunction" line="42"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="43"/>
                <scope line="50"/>
                <scope line="53"/>
            </method>
            <method name="testSinMinWithValueChecker" type="void" line="59">
                <comment line="60">
                    The default stopping criterion of Brent&apos;s algorithm should not                    
                </comment>
                <comment line="60">
                    pass, but the search will stop at the given relative tolerance                    
                </comment>
                <comment line="60">
                    for the function value.                    
                </comment>
                <declaration name="f" type="UnivariateFunction" line="60"/>
                <declaration name="checker" type="ConvergenceChecker&lt;UnivariatePointValuePair&gt;" line="61"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="65"/>
                <declaration name="result" type="UnivariatePointValuePair" line="66"/>
            </method>
            <method name="testBoundaries" type="void" line="71">
                <declaration name="lower" type="double" line="72"/>
                <declaration name="upper" type="double" line="73"/>
                <anonymous_class line="74">
                    <method name="value" type="double" line="75">
                        <scope line="76"/>
                        <scope line="78"/>
                        <scope line="80"/>
                    </method>
                </anonymous_class>
                <declaration name="f" type="UnivariateFunction" line="74"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="85"/>
            </method>
            <method name="testQuinticMin" type="void" line="95">
                <comment line="96">
                    The function has local minima at -0.27195613 and 0.82221643.                    
                </comment>
                <comment line="96">
                    search in a large interval                    
                </comment>
                <declaration name="f" type="UnivariateFunction" line="97"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="98"/>
            </method>
            <method name="testQuinticMinStatistics" type="void" line="109">
                <comment line="110">
                    The function has local minima at -0.27195613 and 0.82221643.                    
                </comment>
                <declaration name="f" type="UnivariateFunction" line="111"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="112"/>
                <declaration name="stat" type="DescriptiveStatistics[]" line="114"/>
                <scope line="115"/>
                <declaration name="min" type="double" line="119"/>
                <declaration name="max" type="double" line="120"/>
                <declaration name="nSamples" type="int" line="121"/>
                <declaration name="delta" type="double" line="122"/>
                <scope line="123">
                    <declaration name="start" type="double" line="124"/>
                </scope>
                <declaration name="meanOptValue" type="double" line="129"/>
                <declaration name="medianEval" type="double" line="130"/>
            </method>
            <method name="testQuinticMax" type="void" line="137">
                <comment line="138">
                    The quintic function has zeros at 0, +-0.5 and +-1.                    
                </comment>
                <comment line="138">
                    The function has a local maximum at 0.27195613.                    
                </comment>
                <declaration name="f" type="UnivariateFunction" line="140"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="141"/>
                <scope line="143"/>
                <scope line="146"/>
            </method>
            <method name="testMinEndpoints" type="void" line="152">
                <comment line="153">
                    endpoint is minimum                    
                </comment>
                <declaration name="f" type="UnivariateFunction" line="153"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="154"/>
                <declaration name="result" type="double" line="157"/>
            </method>
            <method name="testMath832" type="void" line="165">
                <anonymous_class line="166">
                    <method name="value" type="double" line="167">
                        <declaration name="sqrtX" type="double" line="168"/>
                        <declaration name="a" type="double" line="169"/>
                        <declaration name="b" type="double" line="170"/>
                        <declaration name="c" type="double" line="171"/>
                    </method>
                </anonymous_class>
                <declaration name="f" type="UnivariateFunction" line="166"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="177"/>
                <declaration name="result" type="double" line="178"/>
            </method>
            <javadoc line="187">
                Contrived example showing that prior to the resolution of MATH-855
                 * (second revision), the algorithm would not return the best point if
                 * it happened to be the initial guess.                
            </javadoc>
            <method name="testKeepInitIfBest" type="void" line="193">
                <comment line="194">
                    A slightly less stringent tolerance would make the test pass                    
                </comment>
                <comment line="194">
                    even with the previous implementation.                    
                </comment>
                <comment line="194">
                    System.out.println(&quot;numEval=&quot; + numEval);                    
                </comment>
                <comment line="194">
                    System.out.println(&quot;min=&quot; + init + &quot; f=&quot; + f.value(init));                    
                </comment>
                <comment line="194">
                    System.out.println(&quot;sol=&quot; + sol + &quot; f=&quot; + f.value(sol));                    
                </comment>
                <comment line="194">
                    System.out.println(&quot;exp=&quot; + expected + &quot; f=&quot; + f.value(expected));                    
                </comment>
                <declaration name="minSin" type="double" line="194"/>
                <declaration name="offset" type="double" line="195"/>
                <declaration name="delta" type="double" line="196"/>
                <declaration name="f1" type="UnivariateFunction" line="197"/>
                <declaration name="f2" type="UnivariateFunction" line="198"/>
                <declaration name="f" type="UnivariateFunction" line="200"/>
                <declaration name="relTol" type="double" line="203"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="204"/>
                <declaration name="init" type="double" line="205"/>
                <declaration name="result" type="UnivariatePointValuePair" line="206"/>
                <declaration name="numEval" type="int" line="211"/>
                <declaration name="sol" type="double" line="213"/>
                <declaration name="expected" type="double" line="214"/>
            </method>
            <javadoc line="224">
                Contrived example showing that prior to the resolution of MATH-855,
                 * the algorithm, by always returning the last evaluated point, would
                 * sometimes not report the best point it had found.                
            </javadoc>
            <method name="testMath855" type="void" line="230">
                <comment line="231">
                    System.out.println(&quot;min=&quot; + (minSin + offset) + &quot; f=&quot; + f.value(minSin + offset));                    
                </comment>
                <comment line="231">
                    System.out.println(&quot;sol=&quot; + sol + &quot; f=&quot; + f.value(sol));                    
                </comment>
                <comment line="231">
                    System.out.println(&quot;exp=&quot; + expected + &quot; f=&quot; + f.value(expected));                    
                </comment>
                <declaration name="minSin" type="double" line="231"/>
                <declaration name="offset" type="double" line="232"/>
                <declaration name="delta" type="double" line="233"/>
                <declaration name="f1" type="UnivariateFunction" line="234"/>
                <declaration name="f2" type="UnivariateFunction" line="235"/>
                <declaration name="f" type="UnivariateFunction" line="237"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="238"/>
                <declaration name="result" type="UnivariatePointValuePair" line="239"/>
                <declaration name="numEval" type="int" line="243"/>
                <declaration name="sol" type="double" line="245"/>
                <declaration name="expected" type="double" line="246"/>
            </method>
        </class>
    </source>