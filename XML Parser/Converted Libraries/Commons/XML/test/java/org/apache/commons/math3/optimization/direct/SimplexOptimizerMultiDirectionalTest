<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.direct">
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.optimization.SimpleValueChecker"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="SimplexOptimizerMultiDirectionalTest" line="28">
            <method name="testMinimize1" type="void" line="30">
                <declaration name="optimizer" type="SimplexOptimizer" line="31"/>
                <declaration name="fourExtrema" type="FourExtrema" line="33"/>
                <declaration name="optimum" type="PointValuePair" line="35"/>
            </method>
            <method name="testMinimize2" type="void" line="45">
                <declaration name="optimizer" type="SimplexOptimizer" line="46"/>
                <declaration name="fourExtrema" type="FourExtrema" line="48"/>
                <declaration name="optimum" type="PointValuePair" line="50"/>
            </method>
            <method name="testMaximize1" type="void" line="60">
                <declaration name="optimizer" type="SimplexOptimizer" line="61"/>
                <declaration name="fourExtrema" type="FourExtrema" line="63"/>
                <declaration name="optimum" type="PointValuePair" line="65"/>
            </method>
            <method name="testMaximize2" type="void" line="75">
                <declaration name="optimizer" type="SimplexOptimizer" line="76"/>
                <declaration name="fourExtrema" type="FourExtrema" line="78"/>
                <declaration name="optimum" type="PointValuePair" line="80"/>
            </method>
            <method name="testRosenbrock" type="void" line="90">
                <anonymous_class line="92">
                    <method name="value" type="double" line="93">
                        <params>
                            <param name="x" type="double[]"/>
                        </params>
                        <declaration name="a" type="double" line="95"/>
                        <declaration name="b" type="double" line="96"/>
                    </method>
                </anonymous_class>
                <declaration name="rosenbrock" type="MultivariateFunction" line="91"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="102"/>
                <declaration name="optimum" type="PointValuePair" line="106"/>
            </method>
            <method name="testPowell" type="void" line="116">
                <anonymous_class line="118">
                    <method name="value" type="double" line="119">
                        <params>
                            <param name="x" type="double[]"/>
                        </params>
                        <declaration name="a" type="double" line="121"/>
                        <declaration name="b" type="double" line="122"/>
                        <declaration name="c" type="double" line="123"/>
                        <declaration name="d" type="double" line="124"/>
                    </method>
                </anonymous_class>
                <declaration name="powell" type="MultivariateFunction" line="117"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="130"/>
                <declaration name="optimum" type="PointValuePair" line="132"/>
            </method>
            <method name="testMath283" type="void" line="141">
                <comment line="142">
                    fails because MultiDirectional.iterateSimplex is looping forever                    
                </comment>
                <comment line="142">
                    the while(true) should be replaced with a convergence check                    
                </comment>
                <declaration name="optimizer" type="SimplexOptimizer" line="144"/>
                <declaration name="function" type="Gaussian2D" line="146"/>
                <declaration name="estimate" type="PointValuePair" line="147"/>
                <declaration name="EPSILON" type="double" line="149"/>
                <declaration name="expectedMaximum" type="double" line="150"/>
                <declaration name="actualMaximum" type="double" line="151"/>
                <declaration name="expectedPosition" type="double[]" line="154"/>
                <declaration name="actualPosition" type="double[]" line="155"/>
            </method>
            <class name="FourExtrema" line="160">
                <comment line="161">
                    The following function has 4 local extrema.                    
                </comment>
                <comment line="161">
                    nal double valueXmYm = 0.2373295333134216789769; // Local maximum.                    
                </comment>
                <comment line="161">
                    nal double valueXmYp = -valueXmYm; // Local minimum.                    
                </comment>
                <comment line="161">
                    nal double valueXpYm = -0.7290400707055187115322; // Global minimum.                    
                </comment>
                <comment line="161">
                    nal double valueXpYp = -valueXpYm; // Global maximum.                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="xM" type="double" line="162"/>
                <declaration name="yM" type="double" line="163"/>
                <declaration name="xP" type="double" line="164"/>
                <declaration name="yP" type="double" line="165"/>
                <declaration name="valueXmYm" type="double" line="166"/>
                <declaration name="valueXmYp" type="double" line="167"/>
                <declaration name="valueXpYm" type="double" line="168"/>
                <declaration name="valueXpYp" type="double" line="169"/>
                <method name="value" type="double" line="171">
                    <params>
                        <param name="variables" type="double[]"/>
                    </params>
                    <declaration name="x" type="double" line="172"/>
                    <declaration name="y" type="double" line="173"/>
                </method>
            </class>
            <class name="Gaussian2D" line="179">
                <comment line="161">
                    The following function has 4 local extrema.                    
                </comment>
                <comment line="161">
                    nal double valueXmYm = 0.2373295333134216789769; // Local maximum.                    
                </comment>
                <comment line="161">
                    nal double valueXmYp = -valueXmYm; // Local minimum.                    
                </comment>
                <comment line="161">
                    nal double valueXpYm = -0.7290400707055187115322; // Global minimum.                    
                </comment>
                <comment line="161">
                    nal double valueXpYp = -valueXpYm; // Global maximum.                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="maximumPosition" type="double[]" line="180"/>
                <declaration name="std" type="double" line="181"/>
                <method name="Gaussian2D" type="constructor" line="183">
                    <params>
                        <param name="xOpt" type="double"/>
                        <param name="yOpt" type="double"/>
                        <param name="std" type="double"/>
                    </params>
                </method>
                <method name="getMaximum" type="double" line="188"/>
                <method name="getMaximumPosition" type="double[]" line="192"/>
                <method name="value" type="double" line="196">
                    <params>
                        <param name="point" type="double[]"/>
                    </params>
                    <declaration name="x" type="double" line="197"/>
                    <declaration name="twoS2" type="double" line="198"/>
                </method>
            </class>
            <declaration name="count" type="int" line="203"/>
        </class>
    </source>