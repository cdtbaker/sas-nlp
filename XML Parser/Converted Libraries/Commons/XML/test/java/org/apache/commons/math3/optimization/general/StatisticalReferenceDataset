<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.general">
        <import package="java.io.BufferedReader"/>
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="StatisticalReferenceDataset" line="27">
            <javadoc line="27">
                This class gives access to the statistical reference datasets provided by the
                  NIST (available
                  &lt;a href=&quot;http://www.itl.nist.gov/div898/strd/general/dataarchive.html&quot;&gt;here&lt;/a&gt;).
                  Instances of this class can be created by invocation of the{@link StatisticalReferenceDatasetFactory}.                
            </javadoc>
            <declaration name="name" type="String" line="36"/>
            <javadoc line="36">
                The name of this dataset.                
            </javadoc>
            <declaration name="numObservations" type="int" line="39"/>
            <javadoc line="39">
                The total number of observations (data points).                
            </javadoc>
            <declaration name="numParameters" type="int" line="42"/>
            <javadoc line="42">
                The total number of parameters.                
            </javadoc>
            <declaration name="numStartingPoints" type="int" line="45"/>
            <javadoc line="45">
                The total number of starting points for the optimizations.                
            </javadoc>
            <declaration name="x" type="double[]" line="48"/>
            <javadoc line="48">
                The values of the predictor.                
            </javadoc>
            <declaration name="y" type="double[]" line="51"/>
            <javadoc line="51">
                The values of the response.                
            </javadoc>
            <declaration name="startingValues" type="double[][]" line="54"/>
            <javadoc line="54">
                The starting values. {@code startingValues[j][i]} is the value of the{@code i}-th parameter in the {@code j}-th set of starting values.                
            </javadoc>
            <declaration name="a" type="double[]" line="60"/>
            <javadoc line="60">
                The certified values of the parameters.                
            </javadoc>
            <declaration name="sigA" type="double[]" line="63"/>
            <javadoc line="63">
                The certified values of the standard deviation of the parameters.                
            </javadoc>
            <declaration name="residualSumOfSquares" type="double" line="66"/>
            <javadoc line="66">
                The certified value of the residual sum of squares.                
            </javadoc>
            <declaration name="problem" type="MultivariateDifferentiableVectorFunction" line="69"/>
            <javadoc line="69">
                The least-squares problem.                
            </javadoc>
            <javadoc line="72">
                Creates a new instance of this class from the specified data file. The
                  file must follow the StRD format.                
                <@param>
                    m in the data file                    
                </@param>
                <@throws>
                    s IOException if an I/O error occurs                    
                </@throws>
            </javadoc>
            <method name="StatisticalReferenceDataset" type="constructor" line="80">
                <params>
                    <param name="in" type="BufferedReader"/>
                </params>
                <declaration name="lines" type="ArrayList&lt;String&gt;" line="82"/>
                <scope line="83"/>
                <declaration name="index" type="int[]" line="86"/>
                <scope line="87"/>
                <scope line="93">
                    <declaration name="line" type="String" line="94"/>
                    <declaration name="tokens" type="String[]" line="95"/>
                </scope>
                <scope line="102"/>
                <declaration name="start" type="double[][]" line="108"/>
                <scope line="111">
                    <declaration name="line" type="String" line="112"/>
                    <declaration name="tokens" type="String[]" line="113"/>
                    <scope line="114"/>
                    <scope line="117"/>
                </scope>
                <scope line="123"/>
                <declaration name="dummyDouble" type="double" line="129"/>
                <declaration name="dummyString" type="String" line="130"/>
                <scope line="131">
                    <scope line="132"/>
                    <scope line="137">
                        <declaration name="tokens" type="String[]" line="138"/>
                    </scope>
                </scope>
                <scope line="142"/>
                <scope line="148"/>
                <anonymous_class line="153">
                    <method name="value" type="double[]" line="155">
                        <params>
                            <param name="a" type="double[]"/>
                        </params>
                        <declaration name="dsA" type="DerivativeStructure[]" line="156"/>
                        <scope line="157"/>
                        <declaration name="n" type="int" line="160"/>
                        <declaration name="yhat" type="double[]" line="161"/>
                        <scope line="162"/>
                    </method>
                    <method name="value" type="DerivativeStructure[]" line="168">
                        <params>
                            <param name="a" type="DerivativeStructure[]"/>
                        </params>
                        <declaration name="n" type="int" line="169"/>
                        <declaration name="yhat" type="DerivativeStructure[]" line="170"/>
                        <scope line="171"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="180">
                Returns the name of this dataset.                
                <@return>
                    n the name of the dataset                    
                </@return>
            </javadoc>
            <method name="getName" type="String" line="185"/>
            <javadoc line="189">
                Returns the total number of observations (data points).                
                <@return>
                    n the number of observations                    
                </@return>
            </javadoc>
            <method name="getNumObservations" type="int" line="194"/>
            <javadoc line="198">
                Returns a copy of the data arrays. The data is laid out as follows &lt;li&gt;{@code data[0][i] = x[i]},&lt;/li&gt; &lt;li&gt;{@code data[1][i] = y[i]},&lt;/li&gt;                
                <@return>
                    n the array of data points.                    
                </@return>
            </javadoc>
            <method name="getData" type="double[][]" line="204"/>
            <javadoc line="210">
                Returns the x-value of the {@code i}-th data point.                
                <@param>
                    m i the index of the data point                    
                </@param>
                <@return>
                    n the x-value                    
                </@return>
            </javadoc>
            <method name="getX" type="double" line="216">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="220">
                Returns the y-value of the {@code i}-th data point.                
                <@param>
                    m i the index of the data point                    
                </@param>
                <@return>
                    n the y-value                    
                </@return>
            </javadoc>
            <method name="getY" type="double" line="226">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="230">
                Returns the total number of parameters.                
                <@return>
                    n the number of parameters                    
                </@return>
            </javadoc>
            <method name="getNumParameters" type="int" line="235"/>
            <javadoc line="239">
                Returns the certified values of the paramters.                
                <@return>
                    n the values of the parameters                    
                </@return>
            </javadoc>
            <method name="getParameters" type="double[]" line="244"/>
            <javadoc line="248">
                Returns the certified value of the {@code i}-th parameter.                
                <@param>
                    m i the index of the parameter                    
                </@param>
                <@return>
                    n the value of the parameter                    
                </@return>
            </javadoc>
            <method name="getParameter" type="double" line="254">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="258">
                Reurns the certified values of the standard deviations of the parameters.                
                <@return>
                    n the standard deviations of the parameters                    
                </@return>
            </javadoc>
            <method name="getParametersStandardDeviations" type="double[]" line="263"/>
            <javadoc line="267">
                Returns the certified value of the standard deviation of the {@code i}-th
                  parameter.                
                <@param>
                    m i the index of the parameter                    
                </@param>
                <@return>
                    n the standard deviation of the parameter                    
                </@return>
            </javadoc>
            <method name="getParameterStandardDeviation" type="double" line="274">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="278">
                Returns the certified value of the residual sum of squares.                
                <@return>
                    n the residual sum of squares                    
                </@return>
            </javadoc>
            <method name="getResidualSumOfSquares" type="double" line="283"/>
            <javadoc line="287">
                Returns the total number of starting points (initial guesses for the
                  optimization process).                
                <@return>
                    n the number of starting points                    
                </@return>
            </javadoc>
            <method name="getNumStartingPoints" type="int" line="293"/>
            <javadoc line="297">
                Returns the {@code i}-th set of initial values of the parameters.                
                <@param>
                    m i the index of the starting point                    
                </@param>
                <@return>
                    n the starting point                    
                </@return>
            </javadoc>
            <method name="getStartingPoint" type="double[]" line="303">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="307">
                Returns the least-squares problem corresponding to fitting the model to
                  the specified data.                
                <@return>
                    n the least-squares problem                    
                </@return>
            </javadoc>
            <method name="getLeastSquaresProblem" type="MultivariateDifferentiableVectorFunction" line="313"/>
            <method name="getModelValue" type="DerivativeStructure" line="317"/>
            <javadoc line="317">
                Returns the value of the model for the specified values of the predictor
                  variable and the parameters.                
                <@param>
                    m x the predictor variable                    
                </@param>
                <@param>
                    m a the parameters                    
                </@param>
                <@return>
                    n the value of the model                    
                </@return>
            </javadoc>
            <javadoc line="327">
                &lt;p&gt;
                  Parses the specified text lines, and extracts the indices of the first
                  and last lines of the data defined by the specified {@code key}. This key
                  must be one of
                  &lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;{@code &quot;Starting Values&quot;},&lt;/li&gt;
                  &lt;li&gt;{@code &quot;Certified Values&quot;},&lt;/li&gt;
                  &lt;li&gt;{@code &quot;Data&quot;}.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  In the NIST data files, the line indices are separated by the keywords{@code &quot;lines&quot;} and {@code &quot;to&quot;}.
                  &lt;/p&gt;                
                <@param>
                    m lines the line of text to be parsed                    
                </@param>
                <@return>
                    n an array of two {@code int}s. First value is the index of the
                      first line, second value is the index of the last line.{@code null} if the line could not be parsed.                    
                </@return>
            </javadoc>
            <method name="findLineNumbers" type="int[]" line="349">
                <params>
                    <param name="key" type="String"/>
                    <param name="lines" type="Iterable<String>"/>
                </params>
                <scope line="350">
                    <declaration name="flag" type="boolean" line="351"/>
                    <scope line="353">
                        <declaration name="numbers" type="int[]" line="354"/>
                        <declaration name="from" type="String" line="355"/>
                        <declaration name="to" type="String" line="358"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>