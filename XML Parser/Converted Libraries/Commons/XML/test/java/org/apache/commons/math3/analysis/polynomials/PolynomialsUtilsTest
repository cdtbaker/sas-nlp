<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.polynomials">
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator"/>
        <import package="org.apache.commons.math3.util.ArithmeticUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="PolynomialsUtilsTest" line="27">
            <javadoc line="27">
                Tests the PolynomialsUtils class.                
                <@version>
                    n $Id: PolynomialsUtilsTest.java 1377244 2012-08-25 10:05:13Z luc $                    
                </@version>
            </javadoc>
            <method name="testFirstChebyshevPolynomials" type="void" line="35"/>
            <method name="testChebyshevBounds" type="void" line="49">
                <scope line="50">
                    <declaration name="Tk" type="PolynomialFunction" line="51"/>
                    <scope line="52"/>
                </scope>
            </method>
            <method name="testChebyshevDifferentials" type="void" line="59">
                <scope line="60">
                    <declaration name="Tk0" type="PolynomialFunction" line="62"/>
                    <declaration name="Tk1" type="PolynomialFunction" line="63"/>
                    <declaration name="Tk2" type="PolynomialFunction" line="64"/>
                    <declaration name="g0" type="PolynomialFunction" line="66"/>
                    <declaration name="g1" type="PolynomialFunction" line="67"/>
                    <declaration name="g2" type="PolynomialFunction" line="68"/>
                    <declaration name="Tk0g0" type="PolynomialFunction" line="70"/>
                    <declaration name="Tk1g1" type="PolynomialFunction" line="71"/>
                    <declaration name="Tk2g2" type="PolynomialFunction" line="72"/>
                </scope>
            </method>
            <method name="testChebyshevOrthogonality" type="void" line="80">
                <anonymous_class line="81">
                    <method name="value" type="double" line="82">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="weight" type="UnivariateFunction" line="81"/>
                <scope line="86">
                    <declaration name="pi" type="PolynomialFunction" line="87"/>
                    <scope line="88">
                        <declaration name="pj" type="PolynomialFunction" line="89"/>
                    </scope>
                </scope>
            </method>
            <method name="testFirstHermitePolynomials" type="void" line="96"/>
            <method name="testHermiteDifferentials" type="void" line="110">
                <scope line="111">
                    <declaration name="Hk0" type="PolynomialFunction" line="113"/>
                    <declaration name="Hk1" type="PolynomialFunction" line="114"/>
                    <declaration name="Hk2" type="PolynomialFunction" line="115"/>
                    <declaration name="g0" type="PolynomialFunction" line="117"/>
                    <declaration name="g1" type="PolynomialFunction" line="118"/>
                    <declaration name="g2" type="PolynomialFunction" line="119"/>
                    <declaration name="Hk0g0" type="PolynomialFunction" line="121"/>
                    <declaration name="Hk1g1" type="PolynomialFunction" line="122"/>
                    <declaration name="Hk2g2" type="PolynomialFunction" line="123"/>
                </scope>
            </method>
            <method name="testHermiteOrthogonality" type="void" line="131">
                <anonymous_class line="132">
                    <method name="value" type="double" line="133">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="weight" type="UnivariateFunction" line="132"/>
                <scope line="137">
                    <declaration name="pi" type="PolynomialFunction" line="138"/>
                    <scope line="139">
                        <declaration name="pj" type="PolynomialFunction" line="140"/>
                    </scope>
                </scope>
            </method>
            <method name="testFirstLaguerrePolynomials" type="void" line="147"/>
            <method name="testLaguerreDifferentials" type="void" line="167">
                <scope line="168">
                    <declaration name="Lk0" type="PolynomialFunction" line="170"/>
                    <declaration name="Lk1" type="PolynomialFunction" line="171"/>
                    <declaration name="Lk2" type="PolynomialFunction" line="172"/>
                    <declaration name="g0" type="PolynomialFunction" line="174"/>
                    <declaration name="g1" type="PolynomialFunction" line="175"/>
                    <declaration name="g2" type="PolynomialFunction" line="176"/>
                    <declaration name="Lk0g0" type="PolynomialFunction" line="178"/>
                    <declaration name="Lk1g1" type="PolynomialFunction" line="179"/>
                    <declaration name="Lk2g2" type="PolynomialFunction" line="180"/>
                </scope>
            </method>
            <method name="testLaguerreOrthogonality" type="void" line="188">
                <anonymous_class line="189">
                    <method name="value" type="double" line="190">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="weight" type="UnivariateFunction" line="189"/>
                <scope line="194">
                    <declaration name="pi" type="PolynomialFunction" line="195"/>
                    <scope line="196">
                        <declaration name="pj" type="PolynomialFunction" line="197"/>
                    </scope>
                </scope>
            </method>
            <method name="testFirstLegendrePolynomials" type="void" line="204"/>
            <method name="testLegendreDifferentials" type="void" line="218">
                <scope line="219">
                    <declaration name="Pk0" type="PolynomialFunction" line="221"/>
                    <declaration name="Pk1" type="PolynomialFunction" line="222"/>
                    <declaration name="Pk2" type="PolynomialFunction" line="223"/>
                    <declaration name="g0" type="PolynomialFunction" line="225"/>
                    <declaration name="g1" type="PolynomialFunction" line="226"/>
                    <declaration name="g2" type="PolynomialFunction" line="227"/>
                    <declaration name="Pk0g0" type="PolynomialFunction" line="229"/>
                    <declaration name="Pk1g1" type="PolynomialFunction" line="230"/>
                    <declaration name="Pk2g2" type="PolynomialFunction" line="231"/>
                </scope>
            </method>
            <method name="testLegendreOrthogonality" type="void" line="239">
                <anonymous_class line="240">
                    <method name="value" type="double" line="241">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="weight" type="UnivariateFunction" line="240"/>
                <scope line="245">
                    <declaration name="pi" type="PolynomialFunction" line="246"/>
                    <scope line="247">
                        <declaration name="pj" type="PolynomialFunction" line="248"/>
                    </scope>
                </scope>
            </method>
            <method name="testHighDegreeLegendre" type="void" line="255">
                <declaration name="l40" type="double[]" line="257"/>
                <declaration name="denominator" type="double" line="258"/>
                <declaration name="numerators" type="double[]" line="259"/>
                <scope line="267">
                    <scope line="268">
                        <declaration name="ci" type="double" line="269"/>
                    </scope>
                    <scope line="271"/>
                </scope>
            </method>
            <method name="testJacobiLegendre" type="void" line="278">
                <scope line="279">
                    <declaration name="legendre" type="PolynomialFunction" line="280"/>
                    <declaration name="jacobi" type="PolynomialFunction" line="281"/>
                </scope>
            </method>
            <method name="testJacobiEvaluationAt1" type="void" line="287">
                <scope line="288">
                    <scope line="289">
                        <scope line="290">
                            <declaration name="jacobi" type="PolynomialFunction" line="291"/>
                            <declaration name="binomial" type="double" line="292"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testJacobiOrthogonality" type="void" line="300">
                <scope line="301">
                    <scope line="302">
                        <declaration name="vv" type="int" line="303"/>
                        <declaration name="ww" type="int" line="304"/>
                        <anonymous_class line="305">
                            <method name="value" type="double" line="306">
                                <params>
                                    <param name="x" type="double"/>
                                </params>
                            </method>
                        </anonymous_class>
                        <declaration name="weight" type="UnivariateFunction" line="305"/>
                        <scope line="310">
                            <declaration name="pi" type="PolynomialFunction" line="311"/>
                            <scope line="312">
                                <declaration name="pj" type="PolynomialFunction" line="313"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testShift" type="void" line="322">
                <comment line="323">
                    f1(x) = 1 + x + 2 x^2                    
                </comment>
                <comment line="323">
                    f2(x) = 2 + 3 x^2 + 8 x^3 + 121 x^5                    
                </comment>
                <declaration name="f1x" type="PolynomialFunction" line="324"/>
                <declaration name="f1x1" type="PolynomialFunction" line="326"/>
                <declaration name="f1xM1" type="PolynomialFunction" line="330"/>
                <declaration name="f1x3" type="PolynomialFunction" line="334"/>
                <declaration name="f2x" type="PolynomialFunction" line="339"/>
                <declaration name="f2x1" type="PolynomialFunction" line="341"/>
                <declaration name="f2x3" type="PolynomialFunction" line="345"/>
            </method>
            <method name="checkPolynomial" type="void" line="351">
                <params>
                    <param name="p" type="PolynomialFunction"/>
                    <param name="denominator" type="long"/>
                    <param name="reference" type="String"/>
                </params>
                <declaration name="q" type="PolynomialFunction" line="352"/>
            </method>
            <method name="checkPolynomial" type="void" line="356">
                <params>
                    <param name="p" type="PolynomialFunction"/>
                    <param name="reference" type="String"/>
                </params>
            </method>
            <method name="checkNullPolynomial" type="void" line="360">
                <params>
                    <param name="p" type="PolynomialFunction"/>
                </params>
                <scope line="361"/>
            </method>
            <method name="checkOrthogonality" type="void" line="371">
                <params>
                    <param name="p1" type="PolynomialFunction"/>
                    <param name="p2" type="PolynomialFunction"/>
                    <param name="weight" type="UnivariateFunction"/>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                    <param name="nonZeroThreshold" type="double"/>
                    <param name="zeroThreshold" type="double"/>
                </params>
                <anonymous_class line="372">
                    <method name="value" type="double" line="373">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="f" type="UnivariateFunction" line="372"/>
                <declaration name="dotProduct" type="double" line="377"/>
                <scope line="379"/>
                <scope line="383"/>
            </method>
        </class>
    </source>