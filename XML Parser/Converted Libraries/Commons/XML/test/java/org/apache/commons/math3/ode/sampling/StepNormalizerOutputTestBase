<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.sampling">
        <import package="org.junit.Assert.assertArrayEquals"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NoBracketingException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.ode.FirstOrderDifferentialEquations"/>
        <import package="org.apache.commons.math3.ode.FirstOrderIntegrator"/>
        <import package="org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator"/>
        <import package="org.junit.Test"/>
        <class name="StepNormalizerOutputTestBase" line="34">
            <implements interface="FirstOrderDifferentialEquations"/>
            <implements interface="FixedStepHandler"/>
            <javadoc line="34">
                Base class for step normalizer output tests.                
            </javadoc>
            <declaration name="output" type="List&lt;Double&gt;" line="38"/>
            <javadoc line="38">
                The normalized output time values.                
            </javadoc>
            <method name="getStart" type="double" line="41"/>
            <javadoc line="41">
                Returns the start time.                
                <@return>
                    n the start time                    
                </@return>
            </javadoc>
            <method name="getEnd" type="double" line="47"/>
            <javadoc line="47">
                Returns the end time.                
                <@return>
                    n the end time                    
                </@return>
            </javadoc>
            <method name="getExpInc" type="double[]" line="53"/>
            <javadoc line="53">
                Returns the expected normalized output time values for increment mode.                
                <@return>
                    n the expected normalized output time values for increment mode                    
                </@return>
            </javadoc>
            <method name="getExpIncRev" type="double[]" line="59"/>
            <javadoc line="59">
                Returns the expected reversed normalized output time values for
                 * increment mode.                
                <@return>
                    n the expected reversed normalized output time values for
                     * increment mode                    
                </@return>
            </javadoc>
            <method name="getExpMul" type="double[]" line="67"/>
            <javadoc line="67">
                Returns the expected normalized output time values for multiples mode.                
                <@return>
                    n the expected normalized output time values for multiples mode                    
                </@return>
            </javadoc>
            <method name="getExpMulRev" type="double[]" line="73"/>
            <javadoc line="73">
                Returns the expected reversed normalized output time values for
                 * multiples mode.                
                <@return>
                    n the expected reversed normalized output time values for
                     * multiples mode                    
                </@return>
            </javadoc>
            <method name="getO" type="int[][]" line="81"/>
            <javadoc line="81">
                Returns the offsets for the unit tests below, in the order they are
                 * given below. For each test, the left and right offsets are returned.                
                <@return>
                    n the offsets for the unit tests below, in the order they are
                     * given below                    
                </@return>
            </javadoc>
            <javadoc line="89">
                Get the array, given left and right offsets.                
                <@param>
                    m a the input array                    
                </@param>
                <@param>
                    m offsetL the left side offset                    
                </@param>
                <@param>
                    m offsetR the right side offset                    
                </@param>
                <@return>
                    n the modified array                    
                </@return>
            </javadoc>
            <method name="getArray" type="double[]" line="96">
                <declaration name="copy" type="double[]" line="97"/>
            </method>
            <method name="testIncNeither" type="void" line="105">
                <declaration name="exp" type="double[]" line="106"/>
            </method>
            <method name="testIncNeitherRev" type="void" line="113">
                <declaration name="exp" type="double[]" line="114"/>
            </method>
            <method name="testIncFirst" type="void" line="121">
                <declaration name="exp" type="double[]" line="122"/>
            </method>
            <method name="testIncFirstRev" type="void" line="129">
                <declaration name="exp" type="double[]" line="130"/>
            </method>
            <method name="testIncLast" type="void" line="137">
                <declaration name="exp" type="double[]" line="138"/>
            </method>
            <method name="testIncLastRev" type="void" line="145">
                <declaration name="exp" type="double[]" line="146"/>
            </method>
            <method name="testIncBoth" type="void" line="153">
                <declaration name="exp" type="double[]" line="154"/>
            </method>
            <method name="testIncBothRev" type="void" line="161">
                <declaration name="exp" type="double[]" line="162"/>
            </method>
            <method name="testMulNeither" type="void" line="169">
                <declaration name="exp" type="double[]" line="170"/>
            </method>
            <method name="testMulNeitherRev" type="void" line="177">
                <declaration name="exp" type="double[]" line="178"/>
            </method>
            <method name="testMulFirst" type="void" line="185">
                <declaration name="exp" type="double[]" line="186"/>
            </method>
            <method name="testMulFirstRev" type="void" line="193">
                <declaration name="exp" type="double[]" line="194"/>
            </method>
            <method name="testMulLast" type="void" line="201">
                <declaration name="exp" type="double[]" line="202"/>
            </method>
            <method name="testMulLastRev" type="void" line="209">
                <declaration name="exp" type="double[]" line="210"/>
            </method>
            <method name="testMulBoth" type="void" line="217">
                <declaration name="exp" type="double[]" line="218"/>
            </method>
            <method name="testMulBothRev" type="void" line="225">
                <declaration name="exp" type="double[]" line="226"/>
            </method>
            <javadoc line="230">
                The actual step normalizer output test code, shared by all the unit
                 * tests.                
                <@param>
                    m mode the step normalizer mode to use                    
                </@param>
                <@param>
                    m bounds the step normalizer bounds setting to use                    
                </@param>
                <@param>
                    m expected the expected output (normalized time points)                    
                </@param>
                <@param>
                    m reverse whether to reverse the integration direction                    
                </@param>
                <@throws>
                    s NoBracketingException                    
                </@throws>
                <@throws>
                    s MaxCountExceededException                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException                    
                </@throws>
                <@throws>
                    s DimensionMismatchException                    
                </@throws>
            </javadoc>
            <method name="doTest" type="void" line="246">
                <comment line="247">
                    Forward test.                    
                </comment>
                <declaration name="integ" type="FirstOrderIntegrator" line="248"/>
                <declaration name="y" type="double[]" line="251"/>
                <declaration name="start" type="double" line="252"/>
                <declaration name="end" type="double" line="253"/>
                <declaration name="actual" type="double[]" line="256"/>
                <scope line="257"/>
            </method>
            <javadoc line="263">
                {@inheritDoc}                
            </javadoc>
            <method name="getDimension" type="int" line="264"/>
            <javadoc line="268">
                {@inheritDoc}                
            </javadoc>
            <method name="computeDerivatives" type="void" line="269"/>
            <javadoc line="273">
                {@inheritDoc}                
            </javadoc>
            <method name="init" type="void" line="274"/>
            <javadoc line="277">
                {@inheritDoc}                
            </javadoc>
            <method name="handleStep" type="void" line="278"/>
        </class>
    </source>