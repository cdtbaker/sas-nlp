<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.inference">
        <import package="org.apache.commons.math3.distribution.NormalDistribution"/>
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.stat.ranking.NaNStrategy"/>
        <import package="org.apache.commons.math3.stat.ranking.NaturalRanking"/>
        <import package="org.apache.commons.math3.stat.ranking.TiesStrategy"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="WilcoxonSignedRankTest" line="31">
            <javadoc line="31">
                An implementation of the Wilcoxon signed-rank test.                
                <@version>
                    n $Id: WilcoxonSignedRankTest.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <declaration name="naturalRanking" type="NaturalRanking" line="38"/>
            <javadoc line="38">
                Ranking algorithm.                
            </javadoc>
            <javadoc line="41">
                Create a test instance where NaN&apos;s are left in place and ties get
                  the average of applicable ranks. Use this unless you are very sure
                  of what you are doing.                
            </javadoc>
            <method name="WilcoxonSignedRankTest" type="constructor" line="46"/>
            <javadoc line="51">
                Create a test instance using the given strategies for NaN&apos;s and ties.
                  Only use this if you are sure of what you are doing.                
                <@param>
                    m nanStrategyspecifies the strategy that should be used for Double.NaN's                    
                </@param>
                <@param>
                    m tiesStrategyspecifies the strategy that should be used for ties                    
                </@param>
            </javadoc>
            <method name="WilcoxonSignedRankTest" type="constructor" line="61">
                <params>
                    <param name="nanStrategy" type="NaNStrategy"/>
                    <param name="tiesStrategy" type="TiesStrategy"/>
                </params>
            </method>
            <javadoc line="65">
                Ensures that the provided arrays fulfills the assumptions.                
                <@param>
                    m x first sample                    
                </@param>
                <@param>
                    m y second sample                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code x} or {@code y} are {@code null}.                    
                </@throws>
                <@throws>
                    s NoDataException if {@code x} or {@code y} are zero-length.                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if {@code x} and {@code y} do not
                      have the same length.                    
                </@throws>
            </javadoc>
            <method name="ensureDataConformance" type="void" line="76">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double[]"/>
                </params>
                <scope line="79"/>
                <scope line="83"/>
                <scope line="86"/>
            </method>
            <javadoc line="91">
                Calculates y[i] - x[i] for all i                
                <@param>
                    m x first sample                    
                </@param>
                <@param>
                    m y second sample                    
                </@param>
                <@return>
                    n z = y - x                    
                </@return>
            </javadoc>
            <method name="calculateDifferences" type="double[]" line="98">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double[]"/>
                </params>
                <declaration name="z" type="double[]" line="100"/>
                <scope line="102"/>
            </method>
            <javadoc line="109">
                Calculates |z[i]| for all i                
                <@param>
                    m z sample                    
                </@param>
                <@return>
                    n |z|                    
                </@return>
                <@throws>
                    s NullArgumentException if {@code z} is {@code null}                    
                </@throws>
                <@throws>
                    s NoDataException if {@code z} is zero-length.                    
                </@throws>
            </javadoc>
            <method name="calculateAbsoluteDifferences" type="double[]" line="118">
                <params>
                    <param name="z" type="double[]"/>
                </params>
                <scope line="120"/>
                <scope line="124"/>
                <declaration name="zAbs" type="double[]" line="128"/>
                <scope line="130"/>
            </method>
            <javadoc line="137">
                Computes the &lt;a
                  href=&quot;http://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test&quot;&gt;
                  Wilcoxon signed ranked statistic&lt;/a&gt; comparing mean for two related
                  samples or repeated measurements on a single sample.
                  &lt;p&gt;
                  This statistic can be used to perform a Wilcoxon signed ranked test
                  evaluating the null hypothesis that the two related samples or repeated
                  measurements on a single sample has equal mean.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Let X&lt;sub&gt;i&lt;/sub&gt; denote the i&apos;th individual of the first sample and
                  Y&lt;sub&gt;i&lt;/sub&gt; the related i&apos;th individual in the second sample. Let
                  Z&lt;sub&gt;i&lt;/sub&gt; = Y&lt;sub&gt;i&lt;/sub&gt; - X&lt;sub&gt;i&lt;/sub&gt;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;:
                  &lt;ul&gt;
                  &lt;li&gt;The differences Z&lt;sub&gt;i&lt;/sub&gt; must be independent.&lt;/li&gt;
                  &lt;li&gt;Each Z&lt;sub&gt;i&lt;/sub&gt; comes from a continuous population (they must be
                  identical) and is symmetric about a common median.&lt;/li&gt;
                  &lt;li&gt;The values that X&lt;sub&gt;i&lt;/sub&gt; and Y&lt;sub&gt;i&lt;/sub&gt; represent are
                  ordered, so the comparisons greater than, less than, and equal to are
                  meaningful.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <@param>
                    m x the first sample                    
                </@param>
                <@param>
                    m y the second sample                    
                </@param>
                <@return>
                    n wilcoxonSignedRank statistic (the larger of W+ and W-)                    
                </@return>
                <@throws>
                    s NullArgumentException if {@code x} or {@code y} are {@code null}.                    
                </@throws>
                <@throws>
                    s NoDataException if {@code x} or {@code y} are zero-length.                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if {@code x} and {@code y} do not
                      have the same length.                    
                </@throws>
            </javadoc>
            <method name="wilcoxonSignedRank" type="double" line="173">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double[]"/>
                </params>
                <comment line="174">
                    throws IllegalArgumentException if x and y are not correctly                    
                </comment>
                <comment line="174">
                    specified                    
                </comment>
                <declaration name="z" type="double[]" line="179"/>
                <declaration name="zAbs" type="double[]" line="180"/>
                <declaration name="ranks" type="double[]" line="182"/>
                <declaration name="Wplus" type="double" line="184"/>
                <scope line="186">
                    <scope line="187"/>
                </scope>
                <declaration name="N" type="int" line="192"/>
                <declaration name="Wminus" type="double" line="193"/>
            </method>
            <javadoc line="198">
                Algorithm inspired by
                  http://www.fon.hum.uva.nl/Service/Statistics/Signed_Rank_Algorihms.html#C
                  by Rob van Son, Institute of Phonetic Sciences &amp; IFOTT,
                  University of Amsterdam                
                <@param>
                    m Wmax largest Wilcoxon signed rank value                    
                </@param>
                <@param>
                    m N number of subjects (corresponding to x.length)                    
                </@param>
                <@return>
                    n two-sided exact p-value                    
                </@return>
            </javadoc>
            <method name="calculateExactPValue" type="double" line="208">
                <params>
                    <param name="Wmax" type="double"/>
                    <param name="N" type="int"/>
                </params>
                <comment line="209">
                    Total number of outcomes (equal to 2^N but a lot faster)                    
                </comment>
                <comment line="209">
                    largerRankSums  m gives the one-sided p-value, so it&apos;s multiplied                    
                </comment>
                <declaration name="m" type="int" line="211"/>
                <declaration name="largerRankSums" type="int" line="213"/>
                <scope line="215">
                    <declaration name="rankSum" type="int" line="216"/>
                    <scope line="219">
                        <scope line="222"/>
                    </scope>
                    <scope line="227"/>
                </scope>
            </method>
            <javadoc line="239">
                @param Wmin smallest Wilcoxon signed rank value                
                <@param>
                    m N number of subjects (corresponding to x.length)                    
                </@param>
                <@return>
                    n two-sided asymptotic p-value                    
                </@return>
            </javadoc>
            <method name="calculateAsymptoticPValue" type="double" line="244">
                <params>
                    <param name="Wmin" type="double"/>
                    <param name="N" type="int"/>
                </params>
                <comment line="245">
                    Same as (but saves computations):
                     final double VarW = ((double) (N  (N + 1)  (2N + 1)))  24;                    
                </comment>
                <comment line="245">
                    - 0.5 is a continuity correction                    
                </comment>
                <comment line="245">
                    No try-catch or advertised exception because args are valid                    
                </comment>
                <declaration name="ES" type="double" line="246"/>
                <declaration name="VarS" type="double" line="251"/>
                <declaration name="z" type="double" line="254"/>
                <declaration name="standardNormal" type="NormalDistribution" line="257"/>
            </method>
            <javadoc line="262">
                Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or &lt;a href=
                  &quot;http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue&quot;&gt;
                  p-value&lt;/a&gt;, associated with a &lt;a
                  href=&quot;http://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test&quot;&gt;
                  Wilcoxon signed ranked statistic&lt;/a&gt; comparing mean for two related
                  samples or repeated measurements on a single sample.
                  &lt;p&gt;
                  Let X&lt;sub&gt;i&lt;/sub&gt; denote the i&apos;th individual of the first sample and
                  Y&lt;sub&gt;i&lt;/sub&gt; the related i&apos;th individual in the second sample. Let
                  Z&lt;sub&gt;i&lt;/sub&gt; = Y&lt;sub&gt;i&lt;/sub&gt; - X&lt;sub&gt;i&lt;/sub&gt;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;:
                  &lt;ul&gt;
                  &lt;li&gt;The differences Z&lt;sub&gt;i&lt;/sub&gt; must be independent.&lt;/li&gt;
                  &lt;li&gt;Each Z&lt;sub&gt;i&lt;/sub&gt; comes from a continuous population (they must be
                  identical) and is symmetric about a common median.&lt;/li&gt;
                  &lt;li&gt;The values that X&lt;sub&gt;i&lt;/sub&gt; and Y&lt;sub&gt;i&lt;/sub&gt; represent are
                  ordered, so the comparisons greater than, less than, and equal to are
                  meaningful.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <@param>
                    m x the first sample                    
                </@param>
                <@param>
                    m y the second sample                    
                </@param>
                <@param>
                    m exactPValueif the exact p-value is wanted (only works for x.length <= 30,
                      if true and x.length > 30, this is ignored because
                      calculations may take too long)                    
                </@param>
                <@return>
                    n p-value                    
                </@return>
                <@throws>
                    s NullArgumentException if {@code x} or {@code y} are {@code null}.                    
                </@throws>
                <@throws>
                    s NoDataException if {@code x} or {@code y} are zero-length.                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if {@code x} and {@code y} do not
                      have the same length.                    
                </@throws>
                <@throws>
                    s NumberIsTooLargeException if {@code exactPValue} is {@code true}and {@code x.length} > 30                    
                </@throws>
                <@throws>
                    s ConvergenceException if the p-value can not be computed due to
                      a convergence error                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if the maximum number of iterations
                      is exceeded                    
                </@throws>
            </javadoc>
            <method name="wilcoxonSignedRankTest" type="double" line="307">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double[]"/>
                    <param name="exactPValue" type="boolean"/>
                </params>
                <declaration name="N" type="int" line="311"/>
                <declaration name="Wmax" type="double" line="312"/>
                <scope line="314"/>
                <scope line="318"/>
                <scope line="320">
                    <declaration name="Wmin" type="double" line="321"/>
                </scope>
            </method>
        </class>
    </source>