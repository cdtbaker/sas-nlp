<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive.summary">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Sum" line="27">
            <extends class="AbstractStorelessUnivariateStatistic"/>
            <implements interface="Serializable"/>
            <javadoc line="27">
                Returns the sum of the available values.
                  &lt;p&gt;
                  If there are no values in the dataset, then 0 is returned.
                  If any of the values are
                  &lt;code&gt;NaN&lt;/code&gt;, then &lt;code&gt;NaN&lt;/code&gt; is returned.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
                  multiple threads access an instance of this class concurrently, and at least
                  one of the threads invokes the &lt;code&gt;increment()&lt;/code&gt; or
                  &lt;code&gt;clear()&lt;/code&gt; method, it must be synchronized externally.&lt;/p&gt;                
                <@version>
                    n $Id: Sum.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="43"/>
            <javadoc line="43">
                Serializable version identifier                
            </javadoc>
            <declaration name="n" type="long" line="46"/>
            <javadoc line="46">
                                
            </javadoc>
            <declaration name="value" type="double" line="49"/>
            <javadoc line="49">
                The currently running sum.                
            </javadoc>
            <javadoc line="54">
                Create a Sum instance                
            </javadoc>
            <method name="Sum" type="constructor" line="57"/>
            <javadoc line="62">
                Copy constructor, creates a new {@code Sum} identical
                  to the {@code original}                
                <@param>
                    m original the {@code Sum} instance to copy                    
                </@param>
                <@throws>
                    s NullArgumentException if original is null                    
                </@throws>
            </javadoc>
            <method name="Sum" type="constructor" line="69">
                <params>
                    <param name="original" type="Sum"/>
                </params>
            </method>
            <javadoc line="73">
                {@inheritDoc}                
            </javadoc>
            <method name="increment" type="void" line="77">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="82">
                {@inheritDoc}                
            </javadoc>
            <method name="getResult" type="double" line="86"/>
            <javadoc line="90">
                {@inheritDoc}                
            </javadoc>
            <method name="getN" type="long" line="93"/>
            <javadoc line="97">
                {@inheritDoc}                
            </javadoc>
            <method name="clear" type="void" line="101"/>
            <javadoc line="106">
                The sum of the entries in the specified portion of
                  the input array, or 0 if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <@param>
                    m values the input array                    
                </@param>
                <@param>
                    m begin index of the first array element to include                    
                </@param>
                <@param>
                    m length the number of elements to include                    
                </@param>
                <@return>
                    n the sum of the values or 0 if length = 0                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </@throws>
            </javadoc>
            <method name="evaluate" type="double" line="122">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="sum" type="double" line="123"/>
                <scope line="124">
                    <scope line="126"/>
                </scope>
            </method>
            <javadoc line="133">
                The weighted sum of the entries in the specified portion of
                  the input array, or 0 if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if any of the following are true:
                  &lt;ul&gt;&lt;li&gt;the values array is null&lt;/li&gt;
                  &lt;li&gt;the weights array is null&lt;/li&gt;
                  &lt;li&gt;the weights array does not have the same length as the values array&lt;/li&gt;
                  &lt;li&gt;the weights array contains one or more infinite values&lt;/li&gt;
                  &lt;li&gt;the weights array contains one or more NaN values&lt;/li&gt;
                  &lt;li&gt;the weights array contains negative values&lt;/li&gt;
                  &lt;li&gt;the start and length arguments do not determine a valid array&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt;
                  Uses the formula, &lt;pre&gt;
                  weighted sum = &amp;Sigma;(values[i]  weights[i])
                  &lt;/pre&gt;&lt;/p&gt;                
                <@param>
                    m values the input array                    
                </@param>
                <@param>
                    m weights the weights array                    
                </@param>
                <@param>
                    m begin index of the first array element to include                    
                </@param>
                <@param>
                    m length the number of elements to include                    
                </@param>
                <@return>
                    n the sum of the values or 0 if length = 0                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if the parameters are not valid                    
                </@throws>
                <@since>
                    e 2.1                    
                </@since>
            </javadoc>
            <method name="evaluate" type="double" line="161">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="weights" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="sum" type="double" line="162"/>
                <scope line="163">
                    <scope line="165"/>
                </scope>
            </method>
            <javadoc line="172">
                The weighted sum of the entries in the the input array.
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if any of the following are true:
                  &lt;ul&gt;&lt;li&gt;the values array is null&lt;/li&gt;
                  &lt;li&gt;the weights array is null&lt;/li&gt;
                  &lt;li&gt;the weights array does not have the same length as the values array&lt;/li&gt;
                  &lt;li&gt;the weights array contains one or more infinite values&lt;/li&gt;
                  &lt;li&gt;the weights array contains one or more NaN values&lt;/li&gt;
                  &lt;li&gt;the weights array contains negative values&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt;
                  Uses the formula, &lt;pre&gt;
                  weighted sum = &amp;Sigma;(values[i]  weights[i])
                  &lt;/pre&gt;&lt;/p&gt;                
                <@param>
                    m values the input array                    
                </@param>
                <@param>
                    m weights the weights array                    
                </@param>
                <@return>
                    n the sum of the values or Double.NaN if length = 0                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if the parameters are not valid                    
                </@throws>
                <@since>
                    e 2.1                    
                </@since>
            </javadoc>
            <method name="evaluate" type="double" line="195">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="weights" type="double[]"/>
                </params>
            </method>
            <javadoc line="199">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="Sum" line="203">
                <comment line="204">
                    No try-catch or advertised exception because args are valid                    
                </comment>
                <declaration name="result" type="Sum" line="204"/>
            </method>
            <javadoc line="210">
                Copies source to dest.
                  &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;                
                <@param>
                    m source Sum to copy                    
                </@param>
                <@param>
                    m dest Sum to copy to                    
                </@param>
                <@throws>
                    s NullArgumentException if either source or dest is null                    
                </@throws>
            </javadoc>
            <method name="copy" type="void" line="219">
                <params>
                    <param name="source" type="Sum"/>
                    <param name="dest" type="Sum"/>
                </params>
            </method>
        </class>
    </source>