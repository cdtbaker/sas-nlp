<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fraction">
        <import package="java.text.FieldPosition"/>
        <import package="java.text.NumberFormat"/>
        <import package="java.text.ParsePosition"/>
        <import package="java.util.Locale"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathParseException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="FractionFormat" line="29">
            <extends class="AbstractFormat"/>
            <javadoc line="29">
                Formats a Fraction number in proper format or improper format.  The number
                  format for each of the whole number, numerator and, denominator can be
                  configured.                
                <@since>
                    e 1.1                    
                </@since>
                <@version>
                    n $Id: FractionFormat.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="39"/>
            <javadoc line="39">
                Serializable version identifier                
            </javadoc>
            <javadoc line="42">
                Create an improper formatting instance with the default number format
                  for the numerator and denominator.                
            </javadoc>
            <method name="FractionFormat" type="constructor" line="46"/>
            <javadoc line="49">
                Create an improper formatting instance with a custom number format for
                  both the numerator and denominator.                
                <@param>
                    m format the custom format for both the numerator and denominator.                    
                </@param>
            </javadoc>
            <method name="FractionFormat" type="constructor" line="54">
                <params>
                    <param name="format" type="NumberFormat"/>
                </params>
            </method>
            <javadoc line="58">
                Create an improper formatting instance with a custom number format for
                  the numerator and a custom number format for the denominator.                
                <@param>
                    m numeratorFormat the custom format for the numerator.                    
                </@param>
                <@param>
                    m denominatorFormat the custom format for the denominator.                    
                </@param>
            </javadoc>
            <method name="FractionFormat" type="constructor" line="65">
                <params>
                    <param name="numeratorFormat" type="NumberFormat"/>
                    <param name="denominatorFormat" type="NumberFormat"/>
                </params>
            </method>
            <javadoc line="69">
                Get the set of locales for which complex formats are available.  This
                  is the same set as the {@link NumberFormat} set.                
                <@return>
                    n available complex format locales.                    
                </@return>
            </javadoc>
            <method name="getAvailableLocales" type="Locale[]" line="74"/>
            <javadoc line="78">
                This static method calls formatFraction() on a default instance of
                  FractionFormat.                
                <@param>
                    m f Fraction object to format                    
                </@param>
                <@return>
                    n a formatted fraction in proper form.                    
                </@return>
            </javadoc>
            <method name="formatFraction" type="String" line="85">
                <params>
                    <param name="f" type="Fraction"/>
                </params>
            </method>
            <javadoc line="89">
                Returns the default complex format for the current locale.                
                <@return>
                    n the default complex format.                    
                </@return>
            </javadoc>
            <method name="getImproperInstance" type="FractionFormat" line="93"/>
            <javadoc line="97">
                Returns the default complex format for the given locale.                
                <@param>
                    m locale the specific locale used by the format.                    
                </@param>
                <@return>
                    n the complex format specific to the given locale.                    
                </@return>
            </javadoc>
            <method name="getImproperInstance" type="FractionFormat" line="102">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="106">
                Returns the default complex format for the current locale.                
                <@return>
                    n the default complex format.                    
                </@return>
            </javadoc>
            <method name="getProperInstance" type="FractionFormat" line="110"/>
            <javadoc line="114">
                Returns the default complex format for the given locale.                
                <@param>
                    m locale the specific locale used by the format.                    
                </@param>
                <@return>
                    n the complex format specific to the given locale.                    
                </@return>
            </javadoc>
            <method name="getProperInstance" type="FractionFormat" line="119">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="123">
                Create a default number format.  The default number format is based on{@link NumberFormat#getNumberInstance(java.util.Locale)} with the only
                  customizing is the maximum number of fraction digits, which is set to 0.                
                <@return>
                    n the default number format.                    
                </@return>
            </javadoc>
            <method name="getDefaultNumberFormat" type="NumberFormat" line="129"/>
            <javadoc line="133">
                Formats a {@link Fraction} object to produce a string.  The fraction is
                  output in improper format.                
                <@param>
                    m fraction the object to format.                    
                </@param>
                <@param>
                    m toAppendTo where the text is to be appended                    
                </@param>
                <@param>
                    m pos On input: an alignment field, if desired. On output: the
                      offsets of the alignment field                    
                </@param>
                <@return>
                    n the value passed in as toAppendTo.                    
                </@return>
            </javadoc>
            <method name="format" type="StringBuffer" line="144">
                <params>
                    <param name="fraction" type="Fraction"/>
                    <param name="toAppendTo" type="StringBuffer"/>
                    <param name="pos" type="FieldPosition"/>
                </params>
            </method>
            <javadoc line="157">
                Formats an object and appends the result to a StringBuffer. &lt;code&gt;obj&lt;/code&gt; must be either a{@link Fraction} object or a {@link Number} object.  Any other type of
                  object will result in an {@link IllegalArgumentException} being thrown.                
                <@param>
                    m obj the object to format.                    
                </@param>
                <@param>
                    m toAppendTo where the text is to be appended                    
                </@param>
                <@param>
                    m pos On input: an alignment field, if desired. On output: the
                      offsets of the alignment field                    
                </@param>
                <@return>
                    n the value passed in as toAppendTo.                    
                </@return>
                <@see>
                    e java.text.Format#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)                    
                </@see>
                <@throws>
                    s FractionConversionException if the number cannot be converted to a fraction                    
                </@throws>
                <@throws>
                    s MathIllegalArgumentException if <code>obj</code> is not a valid type.                    
                </@throws>
            </javadoc>
            <method name="format" type="StringBuffer" line="174">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="toAppendTo" type="StringBuffer"/>
                    <param name="pos" type="FieldPosition"/>
                </params>
                <declaration name="ret" type="StringBuffer" line="175"/>
                <scope line="177"/>
                <scope line="179"/>
                <scope line="181"/>
            </method>
            <javadoc line="188">
                Parses a string to produce a {@link Fraction} object.                
                <@param>
                    m source the string to parse                    
                </@param>
                <@return>
                    n the parsed {@link Fraction} object.                    
                </@return>
                <@exception>
                    n MathParseException if the beginning of the specified string
                      cannot be parsed.                    
                </@exception>
            </javadoc>
            <method name="parse" type="Fraction" line="196">
                <params>
                    <param name="source" type="String"/>
                </params>
                <declaration name="parsePosition" type="ParsePosition" line="197"/>
                <declaration name="result" type="Fraction" line="198"/>
                <scope line="199"/>
            </method>
            <javadoc line="205">
                Parses a string to produce a {@link Fraction} object.  This method
                  expects the string to be formatted as an improper fraction.                
                <@param>
                    m source the string to parse                    
                </@param>
                <@param>
                    m pos input/output parsing parameter.                    
                </@param>
                <@return>
                    n the parsed {@link Fraction} object.                    
                </@return>
            </javadoc>
            <method name="parse" type="Fraction" line="213">
                <params>
                    <param name="source" type="String"/>
                    <param name="pos" type="ParsePosition"/>
                </params>
                <comment line="214">
                    parse whitespace                    
                </comment>
                <comment line="214">
                    parse numerator                    
                </comment>
                <comment line="214">
                    parse &apos;/&apos;                    
                </comment>
                <comment line="214">
                    parse whitespace                    
                </comment>
                <comment line="214">
                    parse denominator                    
                </comment>
                <declaration name="initialIndex" type="int" line="214"/>
                <declaration name="num" type="Number" line="220"/>
                <scope line="221"/>
                <declaration name="startIndex" type="int" line="230"/>
                <declaration name="c" type="char" line="231"/>
                <declaration name="den" type="Number" line="253"/>
                <scope line="254"/>
            </method>
        </class>
    </source>