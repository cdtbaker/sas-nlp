<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive.rank">
        <import package="java.io.Serializable"/>
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Percentile" extends="AbstractUnivariateStatistic" line="30">
            <implements interface="Serializable"/>
            <javadoc line="30">
                Provides percentile computation.
                 * &lt;p&gt;
                 * There are several commonly used methods for estimating percentiles (a.k.a.
                 * quantiles) based on sample data.  For large samples, the different methods
                 * agree closely, but when sample sizes are small, different methods will give
                 * significantly different results.  The algorithm implemented here works as follows:
                 * &lt;ol&gt;
                 * &lt;li&gt;Let &lt;code&gt;n&lt;/code&gt; be the length of the (sorted) array and
                 * &lt;code&gt;0 &lt; p &lt;= 100&lt;/code&gt; be the desired percentile.&lt;/li&gt;
                 * &lt;li&gt;If &lt;code&gt; n = 1 &lt;/code&gt; return the unique array element (regardless of
                 * the value of &lt;code&gt;p&lt;/code&gt;); otherwise &lt;/li&gt;
                 * &lt;li&gt;Compute the estimated percentile position
                 * &lt;code&gt; pos = p * (n + 1) / 100&lt;/code&gt; and the difference, &lt;code&gt;d&lt;/code&gt;
                 * between &lt;code&gt;pos&lt;/code&gt; and &lt;code&gt;floor(pos)&lt;/code&gt; (i.e. the fractional
                 * part of &lt;code&gt;pos&lt;/code&gt;).&lt;/li&gt;
                 * &lt;li&gt; If &lt;code&gt;pos &lt; 1&lt;/code&gt; return the smallest element in the array.&lt;/li&gt;
                 * &lt;li&gt; Else if &lt;code&gt;pos &gt;= n&lt;/code&gt; return the largest element in the array.&lt;/li&gt;
                 * &lt;li&gt; Else let &lt;code&gt;lower&lt;/code&gt; be the element in position
                 * &lt;code&gt;floor(pos)&lt;/code&gt; in the array and let &lt;code&gt;upper&lt;/code&gt; be the
                 * next element in the array.  Return &lt;code&gt;lower + d * (upper - lower)&lt;/code&gt;
                 * &lt;/li&gt;
                 * &lt;/ol&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * To compute percentiles, the data must be at least partially ordered.  Input
                 * arrays are copied and recursively partitioned using an ordering definition.
                 * The ordering used by &lt;code&gt;Arrays.sort(double[])&lt;/code&gt; is the one determined
                 * by {@link java.lang.Double#compareTo(Double)}.  This ordering makes
                 * &lt;code&gt;Double.NaN&lt;/code&gt; larger than any other value (including
                 * &lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt;).  Therefore, for example, the median
                 * (50th percentile) of
                 * &lt;code&gt;{0, 1, 2, 3, 4, Double.NaN}&lt;/code&gt; evaluates to &lt;code&gt;2.5.&lt;/code&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * Since percentile estimation usually involves interpolation between array
                 * elements, arrays containing  &lt;code&gt;NaN&lt;/code&gt; or infinite values will often
                 * result in &lt;code&gt;NaN&lt;/code&gt; or infinite values returned.&lt;/p&gt;
                 * &lt;p&gt;
                 * Since 2.2, Percentile uses only selection instead of complete sorting
                 * and caches selection algorithm state between calls to the various{@code evaluate} methods. This greatly improves efficiency, both for a single
                 * percentile and multiple percentile computations. To maximize performance when
                 * multiple percentiles are computed based on the same data, users should set the
                 * data array once using either one of the {@link #evaluate(double[],double)} or{@link #setData(double[])} methods and thereafter {@link #evaluate(double)}with just the percentile provided.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
                 * multiple threads access an instance of this class concurrently, and at least
                 * one of the threads invokes the &lt;code&gt;increment()&lt;/code&gt; or
                 * &lt;code&gt;clear()&lt;/code&gt; method, it must be synchronized externally.&lt;/p&gt;                
                <@version>
                    n $Id: Percentile.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="86"/>
            <javadoc line="86">
                Serializable version identifier                
            </javadoc>
            <declaration name="MIN_SELECT_SIZE" type="int" line="89"/>
            <javadoc line="89">
                Minimum size under which we use a simple insertion sort rather than Hoare&apos;s select.                
            </javadoc>
            <declaration name="MAX_CACHED_LEVELS" type="int" line="92"/>
            <javadoc line="92">
                Maximum number of partitioning pivots cached (each level double the number of pivots).                
            </javadoc>
            <declaration name="quantile" type="double" line="95"/>
            <javadoc line="95">
                Determines what percentile is computed when evaluate() is activated
                 * with no quantile argument                
            </javadoc>
            <declaration name="cachedPivots" type="int[]" line="99"/>
            <javadoc line="99">
                Cached pivots.                
            </javadoc>
            <javadoc line="102">
                Constructs a Percentile with a default quantile
                 * value of 50.0.                
            </javadoc>
            <method name="Percentile" type="constructor" line="106">
                <comment line="107">
                    No try-catch or advertised exception here - arg is valid                    
                </comment>
            </method>
            <javadoc line="111">
                Constructs a Percentile with the specific quantile value.                
                <@param>
                    m p the quantile                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException  if p is not greater than 0 and less
                     * than or equal to 100                    
                </@throws>
            </javadoc>
            <method name="Percentile" type="constructor" line="117"/>
            <javadoc line="122">
                Copy constructor, creates a new {@code Percentile} identical
                 * to the {@code original}                
                <@param>
                    m original the {@code Percentile} instance to copy                    
                </@param>
                <@throws>
                    s NullArgumentException if original is null                    
                </@throws>
            </javadoc>
            <method name="Percentile" type="constructor" line="129"/>
            <javadoc line="133">
                {@inheritDoc}                
            </javadoc>
            <method name="setData" type="void" line="135">
                <scope line="136"/>
                <scope line="138"/>
            </method>
            <javadoc line="145">
                {@inheritDoc}                
            </javadoc>
            <method name="setData" type="void" line="148">
                <scope line="149"/>
                <scope line="151"/>
            </method>
            <javadoc line="158">
                Returns the result of evaluating the statistic over the stored data.
                 * &lt;p&gt;
                 * The stored array is the one which was set by previous calls to{@link #setData(double[])}&lt;/p&gt;                
                <@param>
                    m p the percentile value to compute                    
                </@param>
                <@return>
                    n the value of the statistic applied to the stored data                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if p is not a valid quantile value
                     * (p must be greater than 0 and less than or equal to 100)                    
                </@throws>
            </javadoc>
            <method name="evaluate" type="double" line="169"/>
            <javadoc line="173">
                Returns an estimate of the &lt;code&gt;p&lt;/code&gt;th percentile of the values
                 * in the &lt;code&gt;values&lt;/code&gt; array.
                 * &lt;p&gt;
                 * Calls to this method do not modify the internal &lt;code&gt;quantile&lt;/code&gt;
                 * state of this statistic.&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;ul&gt;
                 * &lt;li&gt;Returns &lt;code&gt;Double.NaN&lt;/code&gt; if &lt;code&gt;values&lt;/code&gt; has length
                 * &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
                 * &lt;li&gt;Returns (for any value of &lt;code&gt;p&lt;/code&gt;) &lt;code&gt;values[0]&lt;/code&gt;
                 * if &lt;code&gt;values&lt;/code&gt; has length &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
                 * &lt;li&gt;Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if &lt;code&gt;values&lt;/code&gt;
                 * is null or p is not a valid quantile value (p must be greater than 0
                 * and less than or equal to 100) &lt;/li&gt;
                 * &lt;/ul&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * See {@link Percentile} for a description of the percentile estimation
                 * algorithm used.&lt;/p&gt;                
                <@param>
                    m values input array of values                    
                </@param>
                <@param>
                    m p the percentile value to compute                    
                </@param>
                <@return>
                    n the percentile value or Double.NaN if the array is empty                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if <code>values</code> is null
                     * or p is invalid                    
                </@throws>
            </javadoc>
            <method name="evaluate" type="double" line="200"/>
            <javadoc line="205">
                Returns an estimate of the &lt;code&gt;quantile&lt;/code&gt;th percentile of the
                 * designated values in the &lt;code&gt;values&lt;/code&gt; array.  The quantile
                 * estimated is determined by the &lt;code&gt;quantile&lt;/code&gt; property.
                 * &lt;p&gt;
                 * &lt;ul&gt;
                 * &lt;li&gt;Returns &lt;code&gt;Double.NaN&lt;/code&gt; if &lt;code&gt;length = 0&lt;/code&gt;&lt;/li&gt;
                 * &lt;li&gt;Returns (for any value of &lt;code&gt;quantile&lt;/code&gt;)
                 * &lt;code&gt;values[begin]&lt;/code&gt; if &lt;code&gt;length = 1 &lt;/code&gt;&lt;/li&gt;
                 * &lt;li&gt;Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if &lt;code&gt;values&lt;/code&gt;
                 * is null, or &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;length&lt;/code&gt; is invalid&lt;/li&gt;
                 * &lt;/ul&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * See {@link Percentile} for a description of the percentile estimation
                 * algorithm used.&lt;/p&gt;                
                <@param>
                    m values the input array                    
                </@param>
                <@param>
                    m start index of the first array element to include                    
                </@param>
                <@param>
                    m length the number of elements to include                    
                </@param>
                <@return>
                    n the percentile value                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if the parameters are not valid                    
                </@throws>
            </javadoc>
            <method name="evaluate" type="double" line="230"/>
            <javadoc line="234">
                Returns an estimate of the &lt;code&gt;p&lt;/code&gt;th percentile of the values
                 * in the &lt;code&gt;values&lt;/code&gt; array, starting with the element in (0-based)
                 * position &lt;code&gt;begin&lt;/code&gt; in the array and including &lt;code&gt;length&lt;/code&gt;
                 * values.
                 * &lt;p&gt;
                 * Calls to this method do not modify the internal &lt;code&gt;quantile&lt;/code&gt;
                 * state of this statistic.&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;ul&gt;
                 * &lt;li&gt;Returns &lt;code&gt;Double.NaN&lt;/code&gt; if &lt;code&gt;length = 0&lt;/code&gt;&lt;/li&gt;
                 * &lt;li&gt;Returns (for any value of &lt;code&gt;p&lt;/code&gt;) &lt;code&gt;values[begin]&lt;/code&gt;
                 * if &lt;code&gt;length = 1 &lt;/code&gt;&lt;/li&gt;
                 * &lt;li&gt;Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if &lt;code&gt;values&lt;/code&gt;
                 * is null , &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;length&lt;/code&gt; is invalid, or
                 * &lt;code&gt;p&lt;/code&gt; is not a valid quantile value (p must be greater than 0
                 * and less than or equal to 100)&lt;/li&gt;
                 * &lt;/ul&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * See {@link Percentile} for a description of the percentile estimation
                 * algorithm used.&lt;/p&gt;                
                <@param>
                    m values array of input values                    
                </@param>
                <@param>
                    m p  the percentile to compute                    
                </@param>
                <@param>
                    m begin  the first (0-based) element to include in the computation                    
                </@param>
                <@param>
                    m length  the number of array elements to include                    
                </@param>
                <@return>
                    n  the percentile value                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if the parameters are not valid or the
                     * input array is null                    
                </@throws>
            </javadoc>
            <method name="evaluate" type="double" line="265">
                <scope line="269"/>
                <scope line="273"/>
                <scope line="276"/>
                <declaration name="n" type="double" line="279"/>
                <declaration name="pos" type="double" line="280"/>
                <declaration name="fpos" type="double" line="281"/>
                <declaration name="intPos" type="int" line="282"/>
                <declaration name="dif" type="double" line="283"/>
                <declaration name="work" type="double[]" line="284"/>
                <declaration name="pivotsHeap" type="int[]" line="285"/>
                <scope line="286"/>
                <scope line="289"/>
                <scope line="296"/>
                <scope line="299"/>
                <declaration name="lower" type="double" line="302"/>
                <declaration name="upper" type="double" line="303"/>
            </method>
            <javadoc line="307">
                Select the k&lt;sup&gt;th&lt;/sup&gt; smallest element from work array                
                <@param>
                    m work work array (will be reorganized during the call)                    
                </@param>
                <@param>
                    m pivotsHeap set of pivot index corresponding to elements that
                     * are already at their sorted location, stored as an implicit heap
                     * (i.e. a sorted binary tree stored in a flat array, where the
                     * children of a node at index n are at indices 2n+1 for the left
                     * child and 2n+2 for the right child, with 0-based indices)                    
                </@param>
                <@param>
                    m k index of the desired element                    
                </@param>
                <@return>
                    n k<sup>th</sup> smallest element                    
                </@return>
            </javadoc>
            <method name="select" type="double" line="318">
                <comment line="319">
                    the element is somewhere in the small sub-array                    
                </comment>
                <comment line="319">
                    sort the sub-array using insertion sort                    
                </comment>
                <declaration name="begin" type="int" line="320"/>
                <declaration name="end" type="int" line="321"/>
                <declaration name="node" type="int" line="322"/>
                <scope line="324">
                    <declaration name="pivot" type="int" line="326"/>
                    <scope line="327"/>
                    <scope line="331">
                        <scope line="334"/>
                    </scope>
                    <scope line="339"/>
                    <scope line="342"/>
                    <scope line="346"/>
                </scope>
            </method>
            <javadoc line="361">
                Select a pivot index as the median of three                
                <@param>
                    m work data array                    
                </@param>
                <@param>
                    m begin index of the first element of the slice                    
                </@param>
                <@param>
                    m end index after the last element of the slice                    
                </@param>
                <@return>
                    n the index of the median element chosen between the
                     * first, the middle and the last element of the array slice                    
                </@return>
            </javadoc>
            <method name="medianOf3" type="int" line="368">
                <declaration name="inclusiveEnd" type="int" line="370"/>
                <declaration name="middle" type="int" line="371"/>
                <declaration name="wBegin" type="double" line="372"/>
                <declaration name="wMiddle" type="double" line="373"/>
                <declaration name="wEnd" type="double" line="374"/>
                <scope line="376">
                    <scope line="377"/>
                    <scope line="379"/>
                </scope>
                <scope line="382">
                    <scope line="383"/>
                    <scope line="385"/>
                </scope>
            </method>
            <javadoc line="392">
                Partition an array slice around a pivot
                 * &lt;p&gt;
                 * Partitioning exchanges array elements such that all elements
                 * smaller than pivot are before it and all elements larger than
                 * pivot are after it
                 * &lt;/p&gt;                
                <@param>
                    m work data array                    
                </@param>
                <@param>
                    m begin index of the first element of the slice                    
                </@param>
                <@param>
                    m end index after the last element of the slice                    
                </@param>
                <@param>
                    m pivot initial index of the pivot                    
                </@param>
                <@return>
                    n index of the pivot after partition                    
                </@return>
            </javadoc>
            <method name="partition" type="int" line="405">
                <declaration name="value" type="double" line="407"/>
                <declaration name="i" type="int" line="410"/>
                <declaration name="j" type="int" line="411"/>
                <scope line="412">
                    <scope line="413"/>
                    <scope line="416"/>
                    <scope line="420">
                        <declaration name="tmp" type="double" line="421"/>
                    </scope>
                </scope>
                <scope line="427"/>
            </method>
            <javadoc line="436">
                Sort in place a (small) array slice using insertion sort                
                <@param>
                    m work array to sort                    
                </@param>
                <@param>
                    m begin index of the first element of the slice to sort                    
                </@param>
                <@param>
                    m end index after the last element of the slice to sort                    
                </@param>
            </javadoc>
            <method name="insertionSort" type="void" line="442">
                <scope line="443">
                    <declaration name="saved" type="double" line="444"/>
                    <declaration name="i" type="int" line="445"/>
                    <scope line="446"/>
                </scope>
            </method>
            <javadoc line="454">
                Returns the value of the quantile field (determines what percentile is
                 * computed when evaluate() is called with no quantile argument).                
                <@return>
                    n quantile                    
                </@return>
            </javadoc>
            <method name="getQuantile" type="double" line="460"/>
            <javadoc line="464">
                Sets the value of the quantile field (determines what percentile is
                 * computed when evaluate() is called with no quantile argument).                
                <@param>
                    m p a value between 0 < p <= 100                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException  if p is not greater than 0 and less
                     * than or equal to 100                    
                </@throws>
            </javadoc>
            <method name="setQuantile" type="void" line="472">
                <scope line="473"/>
            </method>
            <javadoc line="480">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="Percentile" line="484">
                <comment line="485">
                    No try-catch or advertised exception because args are guaranteed non-null                    
                </comment>
                <declaration name="result" type="Percentile" line="485"/>
            </method>
            <javadoc line="491">
                Copies source to dest.
                 * &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;                
                <@param>
                    m source Percentile to copy                    
                </@param>
                <@param>
                    m dest Percentile to copy to                    
                </@param>
                <@throws>
                    s NullArgumentException if either source or dest is null                    
                </@throws>
            </javadoc>
            <method name="copy" type="void" line="500">
                <scope line="504"/>
            </method>
        </class>
    </source>