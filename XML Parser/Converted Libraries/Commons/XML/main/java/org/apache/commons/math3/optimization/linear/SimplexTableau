<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.linear">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="java.util.TreeSet"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.MatrixUtils"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.RealVector"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="SimplexTableau" line="40">
            <implements interface="Serializable"/>
            <javadoc line="40">
                A tableau for use in the Simplex method.
                  &lt;p&gt;
                  Example:
                  &lt;pre&gt;
                  W |  Z |  x1 |  x2 |  x- | s1 |  s2 |  a1 |  RHS
                  ---------------------------------------------------
                  -1    0    0     0     0     0     0     1     0   &amp;lt;= phase 1 objective
                  0    1   -15   -10    0     0     0     0     0   &amp;lt;= phase 2 objective
                  0    0    1     0     0     1     0     0     2   &amp;lt;= constraint 1
                  0    0    0     1     0     0     1     0     3   &amp;lt;= constraint 2
                  0    0    1     1     0     0     0     1     4   &amp;lt;= constraint 3
                  &lt;/pre&gt;
                  W: Phase 1 objective function&lt;/br&gt;
                  Z: Phase 2 objective function&lt;/br&gt;
                  x1 &amp;amp; x2: Decision variables&lt;/br&gt;
                  x-: Extra decision variable to allow for negative values&lt;/br&gt;
                  s1 &amp;amp; s2: Slack/Surplus variables&lt;/br&gt;
                  a1: Artificial variable&lt;/br&gt;
                  RHS: Right hand side&lt;/br&gt;
                  &lt;/p&gt;                
                <@version>
                    n $Id: SimplexTableau.java 1422230 2012-12-15 12:11:13Z erans $                    
                </@version>
                <@deprecated>
                    d As of 3.1 (to be removed in 4.0).                    
                </@deprecated>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <declaration name="NEGATIVE_VAR_COLUMN_LABEL" type="String" line="68"/>
            <javadoc line="68">
                Column label for negative vars.                
            </javadoc>
            <declaration name="DEFAULT_ULPS" type="int" line="71"/>
            <javadoc line="71">
                Default amount of error to accept in floating point comparisons (as ulps).                
            </javadoc>
            <declaration name="CUTOFF_THRESHOLD" type="double" line="74"/>
            <javadoc line="74">
                The cut-off threshold to zero-out entries.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="77"/>
            <javadoc line="77">
                Serializable version identifier.                
            </javadoc>
            <declaration name="f" type="LinearObjectiveFunction" line="80"/>
            <javadoc line="80">
                Linear objective function.                
            </javadoc>
            <declaration name="constraints" type="List&lt;LinearConstraint&gt;" line="83"/>
            <javadoc line="83">
                Linear constraints.                
            </javadoc>
            <declaration name="restrictToNonNegative" type="boolean" line="86"/>
            <javadoc line="86">
                Whether to restrict the variables to non-negative values.                
            </javadoc>
            <declaration name="columnLabels" type="List&lt;String&gt;" line="89"/>
            <javadoc line="89">
                The variables each column represents                
            </javadoc>
            <declaration name="tableau" type="RealMatrix" line="92"/>
            <javadoc line="92">
                Simple tableau.                
            </javadoc>
            <declaration name="numDecisionVariables" type="int" line="95"/>
            <javadoc line="95">
                Number of decision variables.                
            </javadoc>
            <declaration name="numSlackVariables" type="int" line="98"/>
            <javadoc line="98">
                Number of slack variables.                
            </javadoc>
            <declaration name="numArtificialVariables" type="int" line="101"/>
            <javadoc line="101">
                Number of artificial variables.                
            </javadoc>
            <declaration name="epsilon" type="double" line="104"/>
            <javadoc line="104">
                Amount of error to accept when checking for optimality.                
            </javadoc>
            <declaration name="maxUlps" type="int" line="107"/>
            <javadoc line="107">
                Amount of error to accept in floating point comparisons.                
            </javadoc>
            <javadoc line="110">
                Build a tableau for a linear problem.                
                <@param>
                    m f linear objective function                    
                </@param>
                <@param>
                    m constraints linear constraints                    
                </@param>
                <@param>
                    m goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}                    
                </@param>
                <@param>
                    m restrictToNonNegative whether to restrict the variables to non-negative values                    
                </@param>
                <@param>
                    m epsilon amount of error to accept when checking for optimality                    
                </@param>
            </javadoc>
            <method name="SimplexTableau" type="constructor" line="121">
                <params>
                    <param name="f" type="LinearObjectiveFunction"/>
                    <param name="constraints" type="Collection<LinearConstraint>"/>
                    <param name="goalType" type="GoalType"/>
                    <param name="restrictToNonNegative" type="boolean"/>
                    <param name="epsilon" type="double"/>
                </params>
            </method>
            <javadoc line="125">
                Build a tableau for a linear problem.                
                <@param>
                    m f linear objective function                    
                </@param>
                <@param>
                    m constraints linear constraints                    
                </@param>
                <@param>
                    m goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}                    
                </@param>
                <@param>
                    m restrictToNonNegative whether to restrict the variables to non-negative values                    
                </@param>
                <@param>
                    m epsilon amount of error to accept when checking for optimality                    
                </@param>
                <@param>
                    m maxUlps amount of error to accept in floating point comparisons                    
                </@param>
            </javadoc>
            <method name="SimplexTableau" type="constructor" line="138">
                <params>
                    <param name="f" type="LinearObjectiveFunction"/>
                    <param name="constraints" type="Collection<LinearConstraint>"/>
                    <param name="goalType" type="GoalType"/>
                    <param name="restrictToNonNegative" type="boolean"/>
                    <param name="epsilon" type="double"/>
                    <param name="maxUlps" type="int"/>
                </params>
            </method>
            <javadoc line="154">
                Initialize the labels for the columns.                
            </javadoc>
            <method name="initializeColumnLabels" type="void" line="157">
                <scope line="158"/>
                <scope line="162"/>
                <scope line="165"/>
                <scope line="168"/>
                <scope line="171"/>
            </method>
            <javadoc line="177">
                Create the tableau by itself.                
                <@param>
                    m maximize if true, goal is to maximize the objective function                    
                </@param>
                <@return>
                    n created tableau                    
                </@return>
            </javadoc>
            <method name="createTableau" type="RealMatrix" line="182">
                <params>
                    <param name="maximize" type="boolean"/>
                </params>
                <comment line="183">
                    create a matrix of the correct size                    
                </comment>
                <comment line="183">
                    mArtificialVariables + getNumObjectiveFunctions() + 1; // + 1 is for RHS                    
                </comment>
                <comment line="183">
                    initialize the objective function rows                    
                </comment>
                <comment line="183">
                    initialize the constraint rows                    
                </comment>
                <declaration name="width" type="int" line="185"/>
                <declaration name="height" type="int" line="187"/>
                <declaration name="matrix" type="Array2DRowRealMatrix" line="188"/>
                <scope line="191"/>
                <declaration name="zIndex" type="int" line="194"/>
                <declaration name="objectiveCoefficients" type="RealVector" line="196"/>
                <scope line="202"/>
                <declaration name="slackVar" type="int" line="208"/>
                <declaration name="artificialVar" type="int" line="209"/>
                <scope line="210">
                    <declaration name="constraint" type="LinearConstraint" line="211"/>
                    <declaration name="row" type="int" line="212"/>
                    <scope line="218"/>
                    <scope line="227"/>
                    <scope line="229"/>
                    <scope line="235"/>
                </scope>
            </method>
            <javadoc line="245">
                Get new versions of the constraints which have positive right hand sides.                
                <@param>
                    m originalConstraints original (not normalized) constraints                    
                </@param>
                <@return>
                    n new versions of the constraints                    
                </@return>
            </javadoc>
            <method name="normalizeConstraints" type="List<LinearConstraint>" line="250">
                <params>
                    <param name="originalConstraints" type="Collection<LinearConstraint>"/>
                </params>
                <declaration name="normalized" type="List&lt;LinearConstraint&gt;" line="251"/>
                <scope line="252"/>
            </method>
            <javadoc line="258">
                Get a new equation equivalent to this one with a positive right hand side.                
                <@param>
                    m constraint reference constraint                    
                </@param>
                <@return>
                    n new equation                    
                </@return>
            </javadoc>
            <method name="normalize" type="LinearConstraint" line="263">
                <params>
                    <param name="constraint" type="LinearConstraint"/>
                </params>
                <scope line="264"/>
            </method>
            <javadoc line="273">
                Get the number of objective functions in this tableau.                
                <@return>
                    n 2 for Phase 1.  1 for Phase 2.                    
                </@return>
            </javadoc>
            <method name="getNumObjectiveFunctions" type="int" line="277"/>
            <javadoc line="281">
                Get a count of constraints corresponding to a specified relationship.                
                <@param>
                    m relationship relationship to count                    
                </@param>
                <@return>
                    n number of constraint with the specified relationship                    
                </@return>
            </javadoc>
            <method name="getConstraintTypeCounts" type="int" line="286">
                <params>
                    <param name="relationship" type="Relationship"/>
                </params>
                <declaration name="count" type="int" line="287"/>
                <scope line="288">
                    <scope line="289"/>
                </scope>
            </method>
            <javadoc line="296">
                Get the -1 times the sum of all coefficients in the given array.                
                <@param>
                    m coefficients coefficients to sum                    
                </@param>
                <@return>
                    n the -1 times the sum of all coefficients in the given array.                    
                </@return>
            </javadoc>
            <method name="getInvertedCoefficientSum" type="double" line="301">
                <params>
                    <param name="coefficients" type="RealVector"/>
                </params>
                <declaration name="sum" type="double" line="302"/>
                <scope line="303"/>
            </method>
            <javadoc line="309">
                Checks whether the given column is basic.                
                <@param>
                    m col index of the column to check                    
                </@param>
                <@return>
                    n the row that the variable is basic in.  null if the column is not basic                    
                </@return>
            </javadoc>
            <method name="getBasicRow" type="Integer" line="314">
                <params>
                    <param name="col" type="int"/>
                </params>
                <declaration name="row" type="Integer" line="315"/>
                <scope line="316">
                    <declaration name="entry" type="double" line="317"/>
                    <scope line="318"/>
                    <scope line="320"/>
                </scope>
            </method>
            <javadoc line="327">
                Removes the phase 1 objective function, positive cost non-artificial variables,
                  and the non-basic artificial variables from this tableau.                
            </javadoc>
            <method name="dropPhase1Objective" type="void" line="331">
                <comment line="332">
                    positive cost non-artificial variables                    
                </comment>
                <comment line="332">
                    non-basic artificial variables                    
                </comment>
                <comment line="332">
                    remove the columns in reverse order so the indices are correct                    
                </comment>
                <scope line="332"/>
                <declaration name="columnsToDrop" type="Set&lt;Integer&gt;" line="336"/>
                <scope line="340">
                    <declaration name="entry" type="double" line="341"/>
                    <scope line="342"/>
                </scope>
                <scope line="348">
                    <declaration name="col" type="int" line="349"/>
                    <scope line="350"/>
                </scope>
                <declaration name="matrix" type="double[][]" line="355"/>
                <scope line="356">
                    <declaration name="col" type="int" line="357"/>
                    <scope line="358">
                        <scope line="359"/>
                    </scope>
                </scope>
                <declaration name="drop" type="Integer[]" line="366"/>
                <scope line="367"/>
            </method>
            <javadoc line="375">
                @param src the source array                
                <@param>
                    m dest the destination array                    
                </@param>
            </javadoc>
            <method name="copyArray" type="void" line="379">
                <params>
                    <param name="src" type="double[]"/>
                    <param name="dest" type="double[]"/>
                </params>
            </method>
            <javadoc line="383">
                Returns whether the problem is at an optimal state.                
                <@return>
                    n whether the model has been solved                    
                </@return>
            </javadoc>
            <method name="isOptimal" type="boolean" line="387">
                <scope line="388">
                    <declaration name="entry" type="double" line="389"/>
                    <scope line="390"/>
                </scope>
            </method>
            <javadoc line="397">
                Get the current solution.                
                <@return>
                    n current solution                    
                </@return>
            </javadoc>
            <method name="getSolution" type="PointValuePair" line="401">
                <declaration name="negativeVarColumn" type="int" line="402"/>
                <declaration name="negativeVarBasicRow" type="Integer" line="403"/>
                <declaration name="mostNegative" type="double" line="404"/>
                <declaration name="basicRows" type="Set&lt;Integer&gt;" line="406"/>
                <declaration name="coefficients" type="double[]" line="407"/>
                <scope line="408">
                    <declaration name="colIndex" type="int" line="409"/>
                    <scope line="410"/>
                    <declaration name="basicRow" type="Integer" line="414"/>
                    <scope line="415"/>
                    <scope line="420"/>
                    <scope line="424"/>
                </scope>
            </method>
            <javadoc line="434">
                Subtracts a multiple of one row from another.
                  &lt;p&gt;
                  After application of this operation, the following will hold:
                  &lt;pre&gt;minuendRow = minuendRow - multiple  subtrahendRow&lt;/pre&gt;                
                <@param>
                    m dividendRow index of the row                    
                </@param>
                <@param>
                    m divisor value of the divisor                    
                </@param>
            </javadoc>
            <method name="divideRow" type="void" line="443">
                <params>
                    <param name="dividendRow" type="int"/>
                    <param name="divisor" type="double"/>
                </params>
                <scope line="444"/>
            </method>
            <javadoc line="449">
                Subtracts a multiple of one row from another.
                  &lt;p&gt;
                  After application of this operation, the following will hold:
                  &lt;pre&gt;minuendRow = minuendRow - multiple  subtrahendRow&lt;/pre&gt;                
                <@param>
                    m minuendRow row index                    
                </@param>
                <@param>
                    m subtrahendRow row index                    
                </@param>
                <@param>
                    m multiple multiplication factor                    
                </@param>
            </javadoc>
            <method name="subtractRow" type="void" line="460">
                <params>
                    <param name="minuendRow" type="int"/>
                    <param name="subtrahendRow" type="int"/>
                    <param name="multiple" type="double"/>
                </params>
                <scope line="461">
                    <declaration name="result" type="double" line="462"/>
                    <scope line="464"/>
                </scope>
            </method>
            <javadoc line="471">
                Get the width of the tableau.                
                <@return>
                    n width of the tableau                    
                </@return>
            </javadoc>
            <method name="getWidth" type="int" line="475"/>
            <javadoc line="479">
                Get the height of the tableau.                
                <@return>
                    n height of the tableau                    
                </@return>
            </javadoc>
            <method name="getHeight" type="int" line="483"/>
            <javadoc line="487">
                Get an entry of the tableau.                
                <@param>
                    m row row index                    
                </@param>
                <@param>
                    m column column index                    
                </@param>
                <@return>
                    n entry at (row, column)                    
                </@return>
            </javadoc>
            <method name="getEntry" type="double" line="493">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="497">
                Set an entry of the tableau.                
                <@param>
                    m row row index                    
                </@param>
                <@param>
                    m column column index                    
                </@param>
                <@param>
                    m value for the entry                    
                </@param>
            </javadoc>
            <method name="setEntry" type="void" line="504">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="508">
                Get the offset of the first slack variable.                
                <@return>
                    n offset of the first slack variable                    
                </@return>
            </javadoc>
            <method name="getSlackVariableOffset" type="int" line="512"/>
            <javadoc line="516">
                Get the offset of the first artificial variable.                
                <@return>
                    n offset of the first artificial variable                    
                </@return>
            </javadoc>
            <method name="getArtificialVariableOffset" type="int" line="520"/>
            <javadoc line="524">
                Get the offset of the right hand side.                
                <@return>
                    n offset of the right hand side                    
                </@return>
            </javadoc>
            <method name="getRhsOffset" type="int" line="528"/>
            <javadoc line="532">
                Get the number of decision variables.
                  &lt;p&gt;
                  If variables are not restricted to positive values, this will include 1 extra decision variable to represent
                  the absolute value of the most negative variable.                
                <@return>
                    n number of decision variables                    
                </@return>
                <@see>
                    e #getOriginalNumDecisionVariables()                    
                </@see>
            </javadoc>
            <method name="getNumDecisionVariables" type="int" line="541"/>
            <javadoc line="545">
                Get the original number of decision variables.                
                <@return>
                    n original number of decision variables                    
                </@return>
                <@see>
                    e #getNumDecisionVariables()                    
                </@see>
            </javadoc>
            <method name="getOriginalNumDecisionVariables" type="int" line="550"/>
            <javadoc line="554">
                Get the number of slack variables.                
                <@return>
                    n number of slack variables                    
                </@return>
            </javadoc>
            <method name="getNumSlackVariables" type="int" line="558"/>
            <javadoc line="562">
                Get the number of artificial variables.                
                <@return>
                    n number of artificial variables                    
                </@return>
            </javadoc>
            <method name="getNumArtificialVariables" type="int" line="566"/>
            <javadoc line="570">
                Get the tableau data.                
                <@return>
                    n tableau data                    
                </@return>
            </javadoc>
            <method name="getData" type="double[][]" line="574"/>
            <method name="equals" type="boolean" line="579">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="581"/>
                <scope line="585">
                    <declaration name="rhs" type="SimplexTableau" line="586"/>
                </scope>
            </method>
            <method name="hashCode" type="int" line="601"/>
            <javadoc line="613">
                Serialize the instance.                
                <@param>
                    m oos stream where object should be written                    
                </@param>
                <@throws>
                    s IOException if object cannot be written to stream                    
                </@throws>
            </javadoc>
            <method name="writeObject" type="void" line="619">
                <params>
                    <param name="oos" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="624">
                Deserialize the instance.                
                <@param>
                    m ois stream from which the object should be read                    
                </@param>
                <@throws>
                    s ClassNotFoundException if a class in the stream cannot be found                    
                </@throws>
                <@throws>
                    s IOException if object cannot be read from the stream                    
                </@throws>
            </javadoc>
            <method name="readObject" type="void" line="631">
                <params>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>