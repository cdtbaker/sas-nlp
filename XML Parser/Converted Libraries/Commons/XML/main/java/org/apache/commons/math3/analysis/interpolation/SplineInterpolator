<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialFunction"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="SplineInterpolator" line="27">
            <implements interface="UnivariateInterpolator"/>
            <javadoc line="27">
                Computes a natural (also known as &quot;free&quot;, &quot;unclamped&quot;) cubic spline interpolation for the data set.
                  &lt;p&gt;
                  The {@link #interpolate(double[],double[])} method returns a {@link PolynomialSplineFunction}consisting of n cubic polynomials, defined over the subintervals determined by the x values,
                  x[0] &lt; x[i] ... &lt; x[n].  The x values are referred to as &quot;knot points.&quot;&lt;/p&gt;
                  &lt;p&gt;
                  The value of the PolynomialSplineFunction at a point x that is greater than or equal to the smallest
                  knot point and strictly less than the largest knot point is computed by finding the subinterval to which
                  x belongs and computing the value of the corresponding polynomial at &lt;code&gt;x - x[i] &lt;/code&gt; where
                  &lt;code&gt;i&lt;/code&gt; is the index of the subinterval.  See {@link PolynomialSplineFunction} for more details.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The interpolating polynomials satisfy: &lt;ol&gt;
                  &lt;li&gt;The value of the PolynomialSplineFunction at each of the input x values equals the
                  corresponding y value.&lt;/li&gt;
                  &lt;li&gt;Adjacent polynomials are equal through two derivatives at the knot points (i.e., adjacent polynomials
                  &quot;match up&quot; at the knot points, as do their first and second derivatives).&lt;/li&gt;
                  &lt;/ol&gt;&lt;/p&gt;
                  &lt;p&gt;
                  The cubic spline interpolation algorithm implemented is as described in R.L. Burden, J.D. Faires,
                  &lt;u&gt;Numerical Analysis&lt;/u&gt;, 4th Ed., 1989, PWS-Kent, ISBN 0-53491-585-X, pp 126-131.
                  &lt;/p&gt;                
                <@version>
                    n $Id: SplineInterpolator.java 1379905 2012-09-01 23:56:50Z erans $                    
                </@version>
            </javadoc>
            <javadoc line="54">
                Computes an interpolating function for the data set.                
                <@param>
                    m x the arguments for the interpolation points                    
                </@param>
                <@param>
                    m y the values for the interpolation points                    
                </@param>
                <@return>
                    n a function which interpolates the data set                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code x} and {@code y}have different sizes.                    
                </@throws>
                <@throws>
                    s NonMonotonicSequenceException if {@code x} is not sorted in
                      strict increasing order.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the size of {@code x} is smaller
                      than 3.                    
                </@throws>
            </javadoc>
            <method name="interpolate" type="PolynomialSplineFunction" line="69">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <comment line="70">
                    Number of intervals.  The number of data points is n + 1.                    
                </comment>
                <comment line="70">
                    Differences between knot points                    
                </comment>
                <comment line="70">
                    cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y&apos;s are constants)                    
                </comment>
                <scope line="70"/>
                <scope line="74"/>
                <declaration name="n" type="int" line="80"/>
                <declaration name="h" type="double" line="85"/>
                <scope line="86"/>
                <declaration name="mu" type="double" line="90"/>
                <declaration name="z" type="double" line="91"/>
                <declaration name="g" type="double" line="94"/>
                <scope line="95"/>
                <declaration name="b" type="double" line="103"/>
                <declaration name="c" type="double" line="104"/>
                <declaration name="d" type="double" line="105"/>
                <scope line="110"/>
                <declaration name="polynomials" type="PolynomialFunction" line="116"/>
                <declaration name="coefficients" type="double" line="117"/>
                <scope line="118"/>
            </method>
        </class>
    </source>