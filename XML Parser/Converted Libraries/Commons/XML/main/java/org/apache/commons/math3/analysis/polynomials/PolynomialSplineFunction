<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.polynomials">
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.analysis.DifferentiableUnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="PolynomialSplineFunction" line="33">
            <implements interface="UnivariateDifferentiableFunction"/>
            <implements interface="DifferentiableUnivariateFunction"/>
            <javadoc line="33">
                Represents a polynomial spline function.
                  &lt;p&gt;
                  A &lt;strong&gt;polynomial spline function&lt;/strong&gt; consists of a set of
                  &lt;i&gt;interpolating polynomials&lt;/i&gt; and an ascending array of domain
                  &lt;i&gt;knot points&lt;/i&gt;, determining the intervals over which the spline function
                  is defined by the constituent polynomials.  The polynomials are assumed to
                  have been computed to match the values of another function at the knot
                  points.  The value consistency constraints are not currently enforced by
                  &lt;code&gt;PolynomialSplineFunction&lt;/code&gt; itself, but are assumed to hold among
                  the polynomials and knot points passed to the constructor.&lt;/p&gt;
                  &lt;p&gt;
                  N.B.:  The polynomials in the &lt;code&gt;polynomials&lt;/code&gt; property must be
                  centered on the knot points to compute the spline function values.
                  See below.&lt;/p&gt;
                  &lt;p&gt;
                  The domain of the polynomial spline function is
                  &lt;code&gt;[smallest knot, largest knot]&lt;/code&gt;.  Attempts to evaluate the
                  function at values outside of this range generate IllegalArgumentExceptions.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The value of the polynomial spline function for an argument &lt;code&gt;x&lt;/code&gt;
                  is computed as follows:
                  &lt;ol&gt;
                  &lt;li&gt;The knot array is searched to find the segment to which &lt;code&gt;x&lt;/code&gt;
                  belongs.  If &lt;code&gt;x&lt;/code&gt; is less than the smallest knot point or greater
                  than the largest one, an &lt;code&gt;IllegalArgumentException&lt;/code&gt;
                  is thrown.&lt;/li&gt;
                  &lt;li&gt; Let &lt;code&gt;j&lt;/code&gt; be the index of the largest knot point that is less
                  than or equal to &lt;code&gt;x&lt;/code&gt;.  The value returned is &lt;br&gt;
                  &lt;code&gt;polynomials[j](x - knot[j])&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;                
                <@version>
                    n $Id: PolynomialSplineFunction.java 1455194 2013-03-11 15:45:54Z luc $                    
                </@version>
            </javadoc>
            <declaration name="knots" type="double" line="68"/>
            <javadoc line="68">
                Spline segment interval delimiters (knots).
                  Size is n + 1 for n segments.                
            </javadoc>
            <declaration name="polynomials" type="PolynomialFunction" line="73"/>
            <javadoc line="73">
                The polynomial functions that make up the spline.  The first element
                  determines the value of the spline over the first subinterval, the
                  second over the second, etc.   Spline function values are determined by
                  evaluating these functions at {@code (x - knot[i])} where i is the
                  knot segment to which x belongs.                
            </javadoc>
            <declaration name="n" type="int" line="81"/>
            <javadoc line="81">
                Number of spline segments. It is equal to the number of polynomials and
                  to the number of partition points - 1.                
            </javadoc>
            <javadoc line="88">
                Construct a polynomial spline function with the given segment delimiters
                  and interpolating polynomials.
                  The constructor copies both arrays and assigns the copies to the knots
                  and polynomials properties, respectively.                
                <@param>
                    m knots Spline segment interval delimiters.                    
                </@param>
                <@param>
                    m polynomials Polynomial functions that make up the spline.                    
                </@param>
                <@throws>
                    s NullArgumentException if either of the input arrays is {@code null}.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if knots has length less than 2.                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if {@code polynomials.length != knots.length - 1}.                    
                </@throws>
                <@throws>
                    s NonMonotonicSequenceException if the {@code knots} array is not strictly increasing.                    
                </@throws>
            </javadoc>
            <method name="PolynomialSplineFunction" type="constructor" line="104">
                <params>
                    <param name="knots" type="double"/>
                    <param name="polynomials" type="PolynomialFunction"/>
                </params>
                <scope line="106"/>
                <scope line="109"/>
                <scope line="113"/>
            </method>
            <javadoc line="125">
                Compute the value for the function.
                  See {@link PolynomialSplineFunction} for details on the algorithm for
                  computing the value of the function.                
                <@param>
                    m v Point for which the function value should be computed.                    
                </@param>
                <@return>
                    n the value.                    
                </@return>
                <@throws>
                    s OutOfRangeException if {@code v} is outside of the domain of the
                      spline function (smaller than the smallest knot point or larger than the
                      largest knot point).                    
                </@throws>
            </javadoc>
            <method name="value" type="double" line="136">
                <params>
                    <param name="v" type="double"/>
                </params>
                <comment line="137">
                    This will handle the case where v is the last knot value                    
                </comment>
                <comment line="137">
                    There are only n-1 polynomials, so if v is the last knot                    
                </comment>
                <comment line="137">
                    then we will use the last polynomial to calculate the value.                    
                </comment>
                <scope line="137"/>
                <declaration name="i" type="int" line="140"/>
                <scope line="141"/>
                <scope line="147"/>
            </method>
            <javadoc line="153">
                Get the derivative of the polynomial spline function.                
                <@return>
                    n the derivative function.                    
                </@return>
            </javadoc>
            <method name="derivative" type="UnivariateFunction" line="158"/>
            <javadoc line="162">
                Get the derivative of the polynomial spline function.                
                <@return>
                    n the derivative function.                    
                </@return>
            </javadoc>
            <method name="polynomialSplineDerivative" type="PolynomialSplineFunction" line="167">
                <declaration name="derivativePolynomials" type="PolynomialFunction" line="168"/>
                <scope line="169"/>
            </method>
            <javadoc line="176">
                {@inheritDoc}                
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="value" type="DerivativeStructure" line="179">
                <params>
                    <param name="t" type="DerivativeStructure"/>
                </params>
                <comment line="180">
                    This will handle the case where t is the last knot value                    
                </comment>
                <comment line="180">
                    There are only n-1 polynomials, so if t is the last knot                    
                </comment>
                <comment line="180">
                    then we will use the last polynomial to calculate the value.                    
                </comment>
                <declaration name="t0" type="double" line="180"/>
                <scope line="181"/>
                <declaration name="i" type="int" line="184"/>
                <scope line="185"/>
                <scope line="191"/>
            </method>
            <javadoc line="197">
                Get the number of spline segments.
                  It is also the number of polynomials and the number of knot points - 1.                
                <@return>
                    n the number of spline segments.                    
                </@return>
            </javadoc>
            <method name="getN" type="int" line="203"/>
            <javadoc line="207">
                Get a copy of the interpolating polynomials array.
                  It returns a fresh copy of the array. Changes made to the copy will
                  not affect the polynomials property.                
                <@return>
                    n the interpolating polynomials.                    
                </@return>
            </javadoc>
            <method name="getPolynomials" type="PolynomialFunction[]" line="214">
                <declaration name="p" type="PolynomialFunction" line="215"/>
            </method>
            <javadoc line="220">
                Get an array copy of the knot points.
                  It returns a fresh copy of the array. Changes made to the copy
                  will not affect the knots property.                
                <@return>
                    n the knot points.                    
                </@return>
            </javadoc>
            <method name="getKnots" type="double[]" line="227">
                <declaration name="out" type="double" line="228"/>
            </method>
        </class>
    </source>