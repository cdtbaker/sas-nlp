<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <interface name="RealMatrix">
            <implements interface="AnyMatrix"/>
            <javadoc line="28">
                Interface defining a real-valued matrix with basic algebraic operations.
                 * &lt;p&gt;
                 * Matrix element indexing is 0-based -- e.g., &lt;code&gt;getEntry(0, 0)&lt;/code&gt;
                 * returns the element in the first row, first column of the matrix.&lt;/p&gt;                
                <@version>
                    n $Id: RealMatrix.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <method name="createMatrix" type="RealMatrix" line="38"/>
            <javadoc line="38">
                Create a new RealMatrix of the same type as the instance with the
                 * supplied
                 * row and column dimensions.                
                <@param>
                    m rowDimension the number of rows in the new matrix                    
                </@param>
                <@param>
                    m columnDimension the number of columns in the new matrix                    
                </@param>
                <@return>
                    n a new matrix of the same type as the instance                    
                </@return>
                <@throws>
                    s NotStrictlyPositiveException if row or column dimension is not
                     * positive.                    
                </@throws>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="copy" type="RealMatrix" line="53"/>
            <javadoc line="53">
                Returns a (deep) copy of this.                
                <@return>
                    n matrix copy                    
                </@return>
            </javadoc>
            <method name="add" type="RealMatrix" line="60"/>
            <javadoc line="60">
                Returns the sum of {@code this} and {@code m}.                
                <@param>
                    m m matrix to be added                    
                </@param>
                <@return>
                    n {@code this + m}                    
                </@return>
                <@throws>
                    s MatrixDimensionMismatchException if {@code m} is not the same
                     * size as {@code this}.                    
                </@throws>
            </javadoc>
            <method name="subtract" type="RealMatrix" line="71"/>
            <javadoc line="71">
                Returns {@code this} minus {@code m}.                
                <@param>
                    m m matrix to be subtracted                    
                </@param>
                <@return>
                    n {@code this - m}                    
                </@return>
                <@throws>
                    s MatrixDimensionMismatchException if {@code m} is not the same
                     * size as {@code this}.                    
                </@throws>
            </javadoc>
            <method name="scalarAdd" type="RealMatrix" line="82"/>
            <javadoc line="82">
                Returns the result of adding {@code d} to each entry of {@code this}.                
                <@param>
                    m d value to be added to each entry                    
                </@param>
                <@return>
                    n {@code d + this}                    
                </@return>
            </javadoc>
            <method name="scalarMultiply" type="RealMatrix" line="90"/>
            <javadoc line="90">
                Returns the result of multiplying each entry of {@code this} by{@code d}.                
                <@param>
                    m d value to multiply all entries by                    
                </@param>
                <@return>
                    n {@code d * this}                    
                </@return>
            </javadoc>
            <method name="multiply" type="RealMatrix" line="99"/>
            <javadoc line="99">
                Returns the result of postmultiplying {@code this} by {@code m}.                
                <@param>
                    m m matrix to postmultiply by                    
                </@param>
                <@return>
                    n {@code this * m}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if{@code columnDimension(this) != rowDimension(m)}                    
                </@throws>
            </javadoc>
            <method name="preMultiply" type="RealMatrix" line="110"/>
            <javadoc line="110">
                Returns the result of premultiplying {@code this} by {@code m}.                
                <@param>
                    m m matrix to premultiply by                    
                </@param>
                <@return>
                    n {@code m * this}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if{@code rowDimension(this) != columnDimension(m)}                    
                </@throws>
            </javadoc>
            <method name="power" type="RealMatrix" line="121"/>
            <javadoc line="121">
                Returns the result of multiplying {@code this} with itself {@code p}times. Depending on the underlying storage, instability for high powers
                 * might occur.                
                <@param>
                    m p raise {@code this} to power {@code p}                    
                </@param>
                <@return>
                    n {@code this^p}                    
                </@return>
                <@throws>
                    s NotPositiveException if {@code p < 0}                    
                </@throws>
                <@throws>
                    s NonSquareMatrixException if the matrix is not square                    
                </@throws>
            </javadoc>
            <method name="getData" type="double[][]" line="134"/>
            <javadoc line="134">
                Returns matrix entries as a two-dimensional array.                
                <@return>
                    n 2-dimensional array of entries                    
                </@return>
            </javadoc>
            <method name="getNorm" type="double" line="141"/>
            <javadoc line="141">
                Returns the &lt;a href=&quot;http://mathworld.wolfram.com/MaximumAbsoluteRowSumNorm.html&quot;&gt;
                 * maximum absolute row sum norm&lt;/a&gt; of the matrix.                
                <@return>
                    n norm                    
                </@return>
            </javadoc>
            <method name="getFrobeniusNorm" type="double" line="149"/>
            <javadoc line="149">
                Returns the &lt;a href=&quot;http://mathworld.wolfram.com/FrobeniusNorm.html&quot;&gt;
                 * Frobenius norm&lt;/a&gt; of the matrix.                
                <@return>
                    n norm                    
                </@return>
            </javadoc>
            <method name="getSubMatrix" type="RealMatrix" line="157"/>
            <javadoc line="157">
                Gets a submatrix. Rows and columns are indicated
                 * counting from 0 to n-1.                
                <@param>
                    m startRow Initial row index                    
                </@param>
                <@param>
                    m endRow Final row index (inclusive)                    
                </@param>
                <@param>
                    m startColumn Initial column index                    
                </@param>
                <@param>
                    m endColumn Final column index (inclusive)                    
                </@param>
                <@return>
                    n The subMatrix containing the data of the
                     * specified rows and columns.                    
                </@return>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </@throws>
            </javadoc>
            <method name="getSubMatrix" type="RealMatrix" line="175"/>
            <javadoc line="175">
                Gets a submatrix. Rows and columns are indicated counting from 0 to n-1.                
                <@param>
                    m selectedRows Array of row indices.                    
                </@param>
                <@param>
                    m selectedColumns Array of column indices.                    
                </@param>
                <@return>
                    n The subMatrix containing the data in the specified rows and
                     * columns                    
                </@return>
                <@throws>
                    s NullArgumentException if the row or column selections are{@code null}                    
                </@throws>
                <@throws>
                    s NoDataException if the row or column selections are empty (zero
                     * length).                    
                </@throws>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
            </javadoc>
            <method name="copySubMatrix" type="void" line="191"/>
            <javadoc line="191">
                Copy a submatrix. Rows and columns are indicated counting from 0 to n-1.                
                <@param>
                    m startRow Initial row index                    
                </@param>
                <@param>
                    m endRow Final row index (inclusive)                    
                </@param>
                <@param>
                    m startColumn Initial column index                    
                </@param>
                <@param>
                    m endColumn Final column index (inclusive)                    
                </@param>
                <@param>
                    m destination The arrays where the submatrix data should be copied
                     * (if larger than rows/columns counts, only the upper-left part will be
                     * used)                    
                </@param>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </@throws>
                <@throws>
                    s MatrixDimensionMismatchException if the destination array is too
                     * small.                    
                </@throws>
            </javadoc>
            <method name="copySubMatrix" type="void" line="212"/>
            <javadoc line="212">
                Copy a submatrix. Rows and columns are indicated counting from 0 to n-1.                
                <@param>
                    m selectedRows Array of row indices.                    
                </@param>
                <@param>
                    m selectedColumns Array of column indices.                    
                </@param>
                <@param>
                    m destination The arrays where the submatrix data should be copied
                     * (if larger than rows/columns counts, only the upper-left part will be
                     * used)                    
                </@param>
                <@throws>
                    s NullArgumentException if the row or column selections are{@code null}                    
                </@throws>
                <@throws>
                    s NoDataException if the row or column selections are empty (zero
                     * length).                    
                </@throws>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
                <@throws>
                    s MatrixDimensionMismatchException if the destination array is too
                     * small.                    
                </@throws>
            </javadoc>
            <method name="setSubMatrix" type="void" line="233"/>
            <javadoc line="233">
                Replace the submatrix starting at {@code row, column} using data in the
                 * input {@code subMatrix} array. Indexes are 0-based.
                 * &lt;p&gt;
                 * Example:&lt;br&gt;
                 * Starting with &lt;pre&gt;
                 * 1  2  3  4
                 * 5  6  7  8
                 * 9  0  1  2
                 * &lt;/pre&gt;
                 * and &lt;code&gt;subMatrix = {{3, 4} {5,6}}&lt;/code&gt;, invoking{@code setSubMatrix(subMatrix,1,1))} will result in &lt;pre&gt;
                 * 1  2  3  4
                 * 5  3  4  8
                 * 9  5  6  2
                 * &lt;/pre&gt;&lt;/p&gt;                
                <@param>
                    m subMatrix  array containing the submatrix replacement data                    
                </@param>
                <@param>
                    m row  row coordinate of the top, left element to be replaced                    
                </@param>
                <@param>
                    m column  column coordinate of the top, left element to be replaced                    
                </@param>
                <@throws>
                    s NoDataException if {@code subMatrix} is empty.                    
                </@throws>
                <@throws>
                    s OutOfRangeException if {@code subMatrix} does not fit into
                     * this matrix from element in {@code (row, column)}.                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if {@code subMatrix} is not rectangular
                     * (not all rows have the same length) or empty.                    
                </@throws>
                <@throws>
                    s NullArgumentException if {@code subMatrix} is {@code null}.                    
                </@throws>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="getRowMatrix" type="RealMatrix" line="265"/>
            <javadoc line="265">
                Get the entries at the given row index as a row matrix.  Row indices start
                 * at 0.                
                <@param>
                    m row Row to be fetched.                    
                </@param>
                <@return>
                    n row Matrix.                    
                </@return>
                <@throws>
                    s OutOfRangeException if the specified row index is invalid.                    
                </@throws>
            </javadoc>
            <method name="setRowMatrix" type="void" line="275"/>
            <javadoc line="275">
                Sets the specified {@code row} of {@code this} matrix to the entries of
                 * the specified row {@code matrix}. Row indices start at 0.                
                <@param>
                    m row Row to be set.                    
                </@param>
                <@param>
                    m matrix Row matrix to be copied (must have one row and the same
                     * number of columns as the instance).                    
                </@param>
                <@throws>
                    s OutOfRangeException if the specified row index is invalid.                    
                </@throws>
                <@throws>
                    s MatrixDimensionMismatchException if the row dimension of the{@code matrix} is not {@code 1}, or the column dimensions of {@code this}and {@code matrix} do not match.                    
                </@throws>
            </javadoc>
            <method name="getColumnMatrix" type="RealMatrix" line="290"/>
            <javadoc line="290">
                Get the entries at the given column index as a column matrix. Column
                 * indices start at 0.                
                <@param>
                    m column Column to be fetched.                    
                </@param>
                <@return>
                    n column Matrix.                    
                </@return>
                <@throws>
                    s OutOfRangeException if the specified column index is invalid.                    
                </@throws>
            </javadoc>
            <method name="setColumnMatrix" type="void" line="301"/>
            <javadoc line="301">
                Sets the specified {@code column} of {@code this} matrix to the entries
                 * of the specified column {@code matrix}. Column indices start at 0.                
                <@param>
                    m column Column to be set.                    
                </@param>
                <@param>
                    m matrix Column matrix to be copied (must have one column and the
                     * same number of rows as the instance).                    
                </@param>
                <@throws>
                    s OutOfRangeException if the specified column index is invalid.                    
                </@throws>
                <@throws>
                    s MatrixDimensionMismatchException if the column dimension of the{@code matrix} is not {@code 1}, or the row dimensions of {@code this}and {@code matrix} do not match.                    
                </@throws>
            </javadoc>
            <method name="getRowVector" type="RealVector" line="316"/>
            <javadoc line="316">
                Returns the entries in row number {@code row} as a vector. Row indices
                 * start at 0.                
                <@param>
                    m row Row to be fetched.                    
                </@param>
                <@return>
                    n a row vector.                    
                </@return>
                <@throws>
                    s OutOfRangeException if the specified row index is invalid.                    
                </@throws>
            </javadoc>
            <method name="setRowVector" type="void" line="327"/>
            <javadoc line="327">
                Sets the specified {@code row} of {@code this} matrix to the entries of
                 * the specified {@code vector}. Row indices start at 0.                
                <@param>
                    m row Row to be set.                    
                </@param>
                <@param>
                    m vector row vector to be copied (must have the same number of
                     * column as the instance).                    
                </@param>
                <@throws>
                    s OutOfRangeException if the specified row index is invalid.                    
                </@throws>
                <@throws>
                    s MatrixDimensionMismatchException if the {@code vector} dimension
                     * does not match the column dimension of {@code this} matrix.                    
                </@throws>
            </javadoc>
            <method name="getColumnVector" type="RealVector" line="341"/>
            <javadoc line="341">
                Get the entries at the given column index as a vector. Column indices
                 * start at 0.                
                <@param>
                    m column Column to be fetched.                    
                </@param>
                <@return>
                    n a column vector.                    
                </@return>
                <@throws>
                    s OutOfRangeException if the specified column index is invalid                    
                </@throws>
            </javadoc>
            <method name="setColumnVector" type="void" line="352"/>
            <javadoc line="352">
                Sets the specified {@code column} of {@code this} matrix to the entries
                 * of the specified {@code vector}. Column indices start at 0.                
                <@param>
                    m column Column to be set.                    
                </@param>
                <@param>
                    m vector column vector to be copied (must have the same number of
                     * rows as the instance).                    
                </@param>
                <@throws>
                    s OutOfRangeException if the specified column index is invalid.                    
                </@throws>
                <@throws>
                    s MatrixDimensionMismatchException if the {@code vector} dimension
                     * does not match the row dimension of {@code this} matrix.                    
                </@throws>
            </javadoc>
            <method name="getRow" type="double[]" line="366"/>
            <javadoc line="366">
                Get the entries at the given row index. Row indices start at 0.                
                <@param>
                    m row Row to be fetched.                    
                </@param>
                <@return>
                    n the array of entries in the row.                    
                </@return>
                <@throws>
                    s OutOfRangeException if the specified row index is not valid.                    
                </@throws>
            </javadoc>
            <method name="setRow" type="void" line="375"/>
            <javadoc line="375">
                Sets the specified {@code row} of {@code this} matrix to the entries
                 * of the specified {@code array}. Row indices start at 0.                
                <@param>
                    m row Row to be set.                    
                </@param>
                <@param>
                    m array Row matrix to be copied (must have the same number of
                     * columns as the instance)                    
                </@param>
                <@throws>
                    s OutOfRangeException if the specified row index is invalid.                    
                </@throws>
                <@throws>
                    s MatrixDimensionMismatchException if the {@code array} length does
                     * not match the column dimension of {@code this} matrix.                    
                </@throws>
            </javadoc>
            <method name="getColumn" type="double[]" line="389"/>
            <javadoc line="389">
                Get the entries at the given column index as an array. Column indices
                 * start at 0.                
                <@param>
                    m column Column to be fetched.                    
                </@param>
                <@return>
                    n the array of entries in the column.                    
                </@return>
                <@throws>
                    s OutOfRangeException if the specified column index is not valid.                    
                </@throws>
            </javadoc>
            <method name="setColumn" type="void" line="399"/>
            <javadoc line="399">
                Sets the specified {@code column} of {@code this} matrix to the entries
                 * of the specified {@code array}. Column indices start at 0.                
                <@param>
                    m column Column to be set.                    
                </@param>
                <@param>
                    m array Column array to be copied (must have the same number of
                     * rows as the instance).                    
                </@param>
                <@throws>
                    s OutOfRangeException if the specified column index is invalid.                    
                </@throws>
                <@throws>
                    s MatrixDimensionMismatchException if the {@code array} length does
                     * not match the row dimension of {@code this} matrix.                    
                </@throws>
            </javadoc>
            <method name="getEntry" type="double" line="413"/>
            <javadoc line="413">
                Get the entry in the specified row and column. Row and column indices
                 * start at 0.                
                <@param>
                    m row Row index of entry to be fetched.                    
                </@param>
                <@param>
                    m column Column index of entry to be fetched.                    
                </@param>
                <@return>
                    n the matrix entry at {@code (row, column)}.                    
                </@return>
                <@throws>
                    s OutOfRangeException if the row or column index is not valid.                    
                </@throws>
            </javadoc>
            <method name="setEntry" type="void" line="424"/>
            <javadoc line="424">
                Set the entry in the specified row and column. Row and column indices
                 * start at 0.                
                <@param>
                    m row Row index of entry to be set.                    
                </@param>
                <@param>
                    m column Column index of entry to be set.                    
                </@param>
                <@param>
                    m value the new value of the entry.                    
                </@param>
                <@throws>
                    s OutOfRangeException if the row or column index is not valid                    
                </@throws>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="addToEntry" type="void" line="436"/>
            <javadoc line="436">
                Adds (in place) the specified value to the specified entry of{@code this} matrix. Row and column indices start at 0.                
                <@param>
                    m row Row index of the entry to be modified.                    
                </@param>
                <@param>
                    m column Column index of the entry to be modified.                    
                </@param>
                <@param>
                    m increment value to add to the matrix entry.                    
                </@param>
                <@throws>
                    s OutOfRangeException if the row or column index is not valid.                    
                </@throws>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="multiplyEntry" type="void" line="448"/>
            <javadoc line="448">
                Multiplies (in place) the specified entry of {@code this} matrix by the
                 * specified value. Row and column indices start at 0.                
                <@param>
                    m row Row index of the entry to be modified.                    
                </@param>
                <@param>
                    m column Column index of the entry to be modified.                    
                </@param>
                <@param>
                    m factor Multiplication factor for the matrix entry.                    
                </@param>
                <@throws>
                    s OutOfRangeException if the row or column index is not valid.                    
                </@throws>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="transpose" type="RealMatrix" line="460"/>
            <javadoc line="460">
                Returns the transpose of this matrix.                
                <@return>
                    n transpose matrix                    
                </@return>
            </javadoc>
            <method name="getTrace" type="double" line="467"/>
            <javadoc line="467">
                Returns the &lt;a href=&quot;http://mathworld.wolfram.com/MatrixTrace.html&quot;&gt;
                 * trace&lt;/a&gt; of the matrix (the sum of the elements on the main diagonal).                
                <@return>
                    n the trace.                    
                </@return>
                <@throws>
                    s NonSquareMatrixException if the matrix is not square.                    
                </@throws>
            </javadoc>
            <method name="operate" type="double[]" line="476"/>
            <javadoc line="476">
                Returns the result of multiplying this by the vector {@code v}.                
                <@param>
                    m v the vector to operate on                    
                </@param>
                <@return>
                    n {@code this * v}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if the length of {@code v} does not
                     * match the column dimension of {@code this}.                    
                </@throws>
            </javadoc>
            <method name="operate" type="RealVector" line="486"/>
            <javadoc line="486">
                Returns the result of multiplying this by the vector {@code v}.                
                <@param>
                    m v the vector to operate on                    
                </@param>
                <@return>
                    n {@code this * v}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if the dimension of {@code v} does not
                     * match the column dimension of {@code this}.                    
                </@throws>
            </javadoc>
            <method name="preMultiply" type="double[]" line="496"/>
            <javadoc line="496">
                Returns the (row) vector result of premultiplying this by the vector {@code v}.                
                <@param>
                    m v the row vector to premultiply by                    
                </@param>
                <@return>
                    n {@code v * this}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if the length of {@code v} does not
                     * match the row dimension of {@code this}.                    
                </@throws>
            </javadoc>
            <method name="preMultiply" type="RealVector" line="506"/>
            <javadoc line="506">
                Returns the (row) vector result of premultiplying this by the vector {@code v}.                
                <@param>
                    m v the row vector to premultiply by                    
                </@param>
                <@return>
                    n {@code v * this}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if the dimension of {@code v} does not
                     * match the row dimension of {@code this}.                    
                </@throws>
            </javadoc>
            <method name="walkInRowOrder" type="double" line="516"/>
            <javadoc line="516">
                Visit (and possibly change) all matrix entries in row order.
                 * &lt;p&gt;Row order starts at upper left and iterating through all elements
                 * of a row from left to right before going to the leftmost element
                 * of the next row.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link RealMatrixChangingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInRowOrder" type="double" line="538"/>
            <javadoc line="538">
                Visit (but don&apos;t change) all matrix entries in row order.
                 * &lt;p&gt;Row order starts at upper left and iterating through all elements
                 * of a row from left to right before going to the leftmost element
                 * of the next row.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link RealMatrixPreservingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInRowOrder" type="double" line="560"/>
            <javadoc line="560">
                Visit (and possibly change) some matrix entries in row order.
                 * &lt;p&gt;Row order starts at upper left and iterating through all elements
                 * of a row from left to right before going to the leftmost element
                 * of the next row.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@param>
                    m startRow Initial row index                    
                </@param>
                <@param>
                    m endRow Final row index (inclusive)                    
                </@param>
                <@param>
                    m startColumn Initial column index                    
                </@param>
                <@param>
                    m endColumn Final column index                    
                </@param>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </@throws>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link RealMatrixChangingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInRowOrder" type="double" line="591"/>
            <javadoc line="591">
                Visit (but don&apos;t change) some matrix entries in row order.
                 * &lt;p&gt;Row order starts at upper left and iterating through all elements
                 * of a row from left to right before going to the leftmost element
                 * of the next row.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@param>
                    m startRow Initial row index                    
                </@param>
                <@param>
                    m endRow Final row index (inclusive)                    
                </@param>
                <@param>
                    m startColumn Initial column index                    
                </@param>
                <@param>
                    m endColumn Final column index                    
                </@param>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </@throws>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link RealMatrixPreservingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInColumnOrder" type="double" line="622"/>
            <javadoc line="622">
                Visit (and possibly change) all matrix entries in column order.
                 * &lt;p&gt;Column order starts at upper left and iterating through all elements
                 * of a column from top to bottom before going to the topmost element
                 * of the next column.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link RealMatrixChangingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInColumnOrder" type="double" line="644"/>
            <javadoc line="644">
                Visit (but don&apos;t change) all matrix entries in column order.
                 * &lt;p&gt;Column order starts at upper left and iterating through all elements
                 * of a column from top to bottom before going to the topmost element
                 * of the next column.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link RealMatrixPreservingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInColumnOrder" type="double" line="666"/>
            <javadoc line="666">
                Visit (and possibly change) some matrix entries in column order.
                 * &lt;p&gt;Column order starts at upper left and iterating through all elements
                 * of a column from top to bottom before going to the topmost element
                 * of the next column.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@param>
                    m startRow Initial row index                    
                </@param>
                <@param>
                    m endRow Final row index (inclusive)                    
                </@param>
                <@param>
                    m startColumn Initial column index                    
                </@param>
                <@param>
                    m endColumn Final column index                    
                </@param>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </@throws>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link RealMatrixChangingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInColumnOrder" type="double" line="697"/>
            <javadoc line="697">
                Visit (but don&apos;t change) some matrix entries in column order.
                 * &lt;p&gt;Column order starts at upper left and iterating through all elements
                 * of a column from top to bottom before going to the topmost element
                 * of the next column.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@param>
                    m startRow Initial row index                    
                </@param>
                <@param>
                    m endRow Final row index (inclusive)                    
                </@param>
                <@param>
                    m startColumn Initial column index                    
                </@param>
                <@param>
                    m endColumn Final column index                    
                </@param>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </@throws>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link RealMatrixPreservingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="728"/>
            <javadoc line="728">
                Visit (and possibly change) all matrix entries using the fastest possible order.
                 * &lt;p&gt;The fastest walking order depends on the exact matrix class. It may be
                 * different from traditional row or column orders.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link RealMatrixChangingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="749"/>
            <javadoc line="749">
                Visit (but don&apos;t change) all matrix entries using the fastest possible order.
                 * &lt;p&gt;The fastest walking order depends on the exact matrix class. It may be
                 * different from traditional row or column orders.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link RealMatrixPreservingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="770"/>
            <javadoc line="770">
                Visit (and possibly change) some matrix entries using the fastest possible order.
                 * &lt;p&gt;The fastest walking order depends on the exact matrix class. It may be
                 * different from traditional row or column orders.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@param>
                    m startRow Initial row index                    
                </@param>
                <@param>
                    m endRow Final row index (inclusive)                    
                </@param>
                <@param>
                    m startColumn Initial column index                    
                </@param>
                <@param>
                    m endColumn Final column index (inclusive)                    
                </@param>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </@throws>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link RealMatrixChangingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="800"/>
            <javadoc line="800">
                Visit (but don&apos;t change) some matrix entries using the fastest possible order.
                 * &lt;p&gt;The fastest walking order depends on the exact matrix class. It may be
                 * different from traditional row or column orders.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@param>
                    m startRow Initial row index                    
                </@param>
                <@param>
                    m endRow Final row index (inclusive)                    
                </@param>
                <@param>
                    m startColumn Initial column index                    
                </@param>
                <@param>
                    m endColumn Final column index (inclusive)                    
                </@param>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </@throws>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link RealMatrixPreservingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
        </interface>
    </source>