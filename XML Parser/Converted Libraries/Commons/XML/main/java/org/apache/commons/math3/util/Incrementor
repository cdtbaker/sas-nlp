<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <class name="Incrementor" line="22">
            <javadoc line="22">
                Utility that increments a counter until a maximum is reached, at
                 * which point, the instance will by default throw a{@link MaxCountExceededException}.
                 * However, the user is able to override this behaviour by defining a
                 * custom {@link MaxCountExceededCallback callback}, in order to e.g.
                 * select which exception must be thrown.                
                <@since>
                    e 3.0                    
                </@since>
                <@version>
                    n $Id: Incrementor.java 1455194 2013-03-11 15:45:54Z luc $                    
                </@version>
            </javadoc>
            <declaration name="maximalCount" type="int" line="34"/>
            <javadoc line="34">
                Upper limit for the counter.                
            </javadoc>
            <declaration name="count" type="int" line="38"/>
            <javadoc line="38">
                Current count.                
            </javadoc>
            <declaration name="maxCountCallback" type="MaxCountExceededCallback" line="42"/>
            <javadoc line="42">
                Function called at counter exhaustion.                
            </javadoc>
            <javadoc line="47">
                Default constructor.
                 * For the new instance to be useful, the maximal count must be set
                 * by calling {@link #setMaximalCount(int) setMaximalCount}.                
            </javadoc>
            <method name="Incrementor" type="constructor" line="52"/>
            <javadoc line="56">
                Defines a maximal count.                
                <@param>
                    m max Maximal count.                    
                </@param>
            </javadoc>
            <method name="Incrementor" type="constructor" line="61">
                <anonymous_class line="63">
                    <javadoc line="64">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="trigger" type="void" line="65"/>
                </anonymous_class>
            </method>
            <javadoc line="71">
                Defines a maximal count and a callback method to be triggered at
                 * counter exhaustion.                
                <@param>
                    m max Maximal count.                    
                </@param>
                <@param>
                    m cb Function to be called when the maximal count has been reached.                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code cb} is {@code null}                    
                </@throws>
            </javadoc>
            <method name="Incrementor" type="constructor" line="80">
                <scope line="81"/>
            </method>
            <javadoc line="88">
                Sets the upper limit for the counter.
                 * This does not automatically reset the current count to zero (see{@link #resetCount()}).                
                <@param>
                    m max Upper limit of the counter.                    
                </@param>
            </javadoc>
            <method name="setMaximalCount" type="void" line="95"/>
            <javadoc line="99">
                Gets the upper limit of the counter.                
                <@return>
                    n the counter upper limit.                    
                </@return>
            </javadoc>
            <method name="getMaximalCount" type="int" line="104"/>
            <javadoc line="108">
                Gets the current count.                
                <@return>
                    n the current count.                    
                </@return>
            </javadoc>
            <method name="getCount" type="int" line="113"/>
            <javadoc line="117">
                Checks whether a single increment is allowed.                
                <@return>
                    n {@code false} if the next call to {@link #incrementCount(int)incrementCount} will trigger a {@code MaxCountExceededException},{@code true} otherwise.                    
                </@return>
            </javadoc>
            <method name="canIncrement" type="boolean" line="124"/>
            <javadoc line="128">
                Performs multiple increments.
                 * See the other {@link #incrementCount() incrementCount} method).                
                <@param>
                    m value Number of increments.                    
                </@param>
                <@throws>
                    s MaxCountExceededException at counter exhaustion.                    
                </@throws>
            </javadoc>
            <method name="incrementCount" type="void" line="135">
                <scope line="136"/>
            </method>
            <javadoc line="141">
                Adds one to the current iteration count.
                 * At counter exhaustion, this method will call the{@link MaxCountExceededCallback#trigger(int) trigger} method of the
                 * callback object passed to the{@link #Incrementor(int,MaxCountExceededCallback) constructor}.
                 * If not explictly set, a default callback is used that will throw
                 * a {@code MaxCountExceededException}.                
                <@throws>
                    s MaxCountExceededException at counter exhaustion, unless a
                     * custom {@link MaxCountExceededCallback callback} has been set at
                     * construction.                    
                </@throws>
            </javadoc>
            <method name="incrementCount" type="void" line="154">
                <scope line="155"/>
            </method>
            <javadoc line="160">
                Resets the counter to 0.                
            </javadoc>
            <method name="resetCount" type="void" line="163"/>
            <interface name="MaxCountExceededCallback">
                <javadoc line="167">
                    Defines a method to be called at counter exhaustion.
                     * The {@link #trigger(int) trigger} method should usually throw an exception.                    
                </javadoc>
                <method name="trigger" type="void" line="172"/>
                <javadoc line="172">
                    Function called when the maximal count has been reached.                    
                    <@param>
                        m maximalCount Maximal count.                        
                    </@param>
                    <@throws>
                        s MaxCountExceededException at counter exhaustion                        
                    </@throws>
                </javadoc>
            </interface>
        </class>
    </source>