<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive.summary">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="SumOfLogs" line="27">
            <extends class="AbstractStorelessUnivariateStatistic"/>
            <implements interface="Serializable"/>
            <javadoc line="27">
                Returns the sum of the natural logs for this collection of values.
                  &lt;p&gt;
                  Uses {@link org.apache.commons.math3.util.FastMath#log(double)} to compute the logs.
                  Therefore,
                  &lt;ul&gt;
                  &lt;li&gt;If any of values are &amp;lt; 0, the result is &lt;code&gt;NaN.&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;If all values are non-negative and less than
                  &lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt;,  but at least one value is 0, the
                  result is &lt;code&gt;Double.NEGATIVE_INFINITY.&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;If both &lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt; and
                  &lt;code&gt;Double.NEGATIVE_INFINITY&lt;/code&gt; are among the values, the result is
                  &lt;code&gt;NaN.&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
                  multiple threads access an instance of this class concurrently, and at least
                  one of the threads invokes the &lt;code&gt;increment()&lt;/code&gt; or
                  &lt;code&gt;clear()&lt;/code&gt; method, it must be synchronized externally.&lt;/p&gt;                
                <@version>
                    n $Id: SumOfLogs.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="51"/>
            <javadoc line="51">
                Serializable version identifier                
            </javadoc>
            <declaration name="n" type="int" line="54"/>
            <javadoc line="54">
                Number of values that have been added                
            </javadoc>
            <declaration name="value" type="double" line="57"/>
            <javadoc line="57">
                The currently running value                
            </javadoc>
            <javadoc line="62">
                Create a SumOfLogs instance                
            </javadoc>
            <method name="SumOfLogs" type="constructor" line="65"/>
            <javadoc line="70">
                Copy constructor, creates a new {@code SumOfLogs} identical
                  to the {@code original}                
                <@param>
                    m original the {@code SumOfLogs} instance to copy                    
                </@param>
                <@throws>
                    s NullArgumentException if original is null                    
                </@throws>
            </javadoc>
            <method name="SumOfLogs" type="constructor" line="77">
                <params>
                    <param name="original" type="SumOfLogs"/>
                </params>
            </method>
            <javadoc line="81">
                {@inheritDoc}                
            </javadoc>
            <method name="increment" type="void" line="85">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="90">
                {@inheritDoc}                
            </javadoc>
            <method name="getResult" type="double" line="94"/>
            <javadoc line="98">
                {@inheritDoc}                
            </javadoc>
            <method name="getN" type="long" line="101"/>
            <javadoc line="105">
                {@inheritDoc}                
            </javadoc>
            <method name="clear" type="void" line="109"/>
            <javadoc line="114">
                Returns the sum of the natural logs of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link SumOfLogs}.&lt;/p&gt;                
                <@param>
                    m values the input array                    
                </@param>
                <@param>
                    m begin index of the first array element to include                    
                </@param>
                <@param>
                    m length the number of elements to include                    
                </@param>
                <@return>
                    n the sum of the natural logs of the values or 0 if
                      length = 0                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </@throws>
            </javadoc>
            <method name="evaluate" type="double" line="133">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="sumLog" type="double" line="134"/>
                <scope line="135">
                    <scope line="137"/>
                </scope>
            </method>
            <javadoc line="144">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="SumOfLogs" line="148">
                <comment line="149">
                    No try-catch or advertised exception here because args are valid                    
                </comment>
                <declaration name="result" type="SumOfLogs" line="149"/>
            </method>
            <javadoc line="155">
                Copies source to dest.
                  &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;                
                <@param>
                    m source SumOfLogs to copy                    
                </@param>
                <@param>
                    m dest SumOfLogs to copy to                    
                </@param>
                <@throws>
                    s NullArgumentException if either source or dest is null                    
                </@throws>
            </javadoc>
            <method name="copy" type="void" line="164">
                <params>
                    <param name="source" type="SumOfLogs"/>
                    <param name="dest" type="SumOfLogs"/>
                </params>
            </method>
        </class>
    </source>