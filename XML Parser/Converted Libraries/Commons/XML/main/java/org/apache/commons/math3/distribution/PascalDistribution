<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.special.Beta"/>
        <import package="org.apache.commons.math3.util.ArithmeticUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <class name="PascalDistribution" extends="AbstractIntegerDistribution" line="28">
            <javadoc line="28">
                &lt;p&gt;
                 * Implementation of the Pascal distribution. The Pascal distribution is a
                 * special case of the Negative Binomial distribution where the number of
                 * successes parameter is an integer.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * There are various ways to express the probability mass and distribution
                 * functions for the Pascal distribution. The present implementation represents
                 * the distribution of the number of failures before {@code r} successes occur.
                 * This is the convention adopted in e.g.
                 * &lt;a href=&quot;http://mathworld.wolfram.com/NegativeBinomialDistribution.html&quot;&gt;MathWorld&lt;/a&gt;,
                 * but &lt;em&gt;not&lt;/em&gt; in
                 * &lt;a href=&quot;http://en.wikipedia.org/wiki/Negative_binomial_distribution&quot;&gt;Wikipedia&lt;/a&gt;.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * For a random variable {@code X} whose values are distributed according to this
                 * distribution, the probability mass function is given by&lt;br/&gt;{@code P(X = k) = C(k + r - 1, r - 1) * p^r * (1 - p)^k,}&lt;br/&gt;
                 * where {@code r} is the number of successes, {@code p} is the probability of
                 * success, and {@code X} is the total number of failures. {@code C(n, k)} is
                 * the binomial coefficient ({@code n} choose {@code k}). The mean and variance
                 * of {@code X} are&lt;br/&gt;{@code E(X) = (1 - p) * r / p, var(X) = (1 - p) * r / p^2.}&lt;br/&gt;
                 * Finally, the cumulative distribution function is given by&lt;br/&gt;{@code P(X &lt;= k) = I(p, r, k + 1)},
                 * where I is the regularized incomplete Beta function.
                 * &lt;/p&gt;                
                <@see>
                    e <a href="http://en.wikipedia.org/wiki/Negative_binomial_distribution">
                     * Negative binomial distribution (Wikipedia)</a>                    
                </@see>
                <@see>
                    e <a href="http://mathworld.wolfram.com/NegativeBinomialDistribution.html">
                     * Negative binomial distribution (MathWorld)</a>                    
                </@see>
                <@version>
                    n $Id: PascalDistribution.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
                <@since>
                    e 1.2 (changed to concrete class in 3.0)                    
                </@since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="65"/>
            <javadoc line="65">
                Serializable version identifier.                
            </javadoc>
            <declaration name="numberOfSuccesses" type="int" line="67"/>
            <javadoc line="67">
                The number of successes.                
            </javadoc>
            <declaration name="probabilityOfSuccess" type="double" line="69"/>
            <javadoc line="69">
                The probability of success.                
            </javadoc>
            <javadoc line="72">
                Create a Pascal distribution with the given number of successes and
                 * probability of success.                
                <@param>
                    m r Number of successes.                    
                </@param>
                <@param>
                    m p Probability of success.                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if the number of successes is not positive                    
                </@throws>
                <@throws>
                    s OutOfRangeException if the probability of success is not in the
                     * range {@code [0, 1]}.                    
                </@throws>
            </javadoc>
            <method name="PascalDistribution" type="constructor" line="83"/>
            <javadoc line="87">
                Create a Pascal distribution with the given number of successes and
                 * probability of success.                
                <@param>
                    m rng Random number generator.                    
                </@param>
                <@param>
                    m r Number of successes.                    
                </@param>
                <@param>
                    m p Probability of success.                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if the number of successes is not positive                    
                </@throws>
                <@throws>
                    s OutOfRangeException if the probability of success is not in the
                     * range {@code [0, 1]}.                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="PascalDistribution" type="constructor" line="102">
                <scope line="105"/>
                <scope line="109"/>
            </method>
            <javadoc line="117">
                Access the number of successes for this distribution.                
                <@return>
                    n the number of successes.                    
                </@return>
            </javadoc>
            <method name="getNumberOfSuccesses" type="int" line="122"/>
            <javadoc line="126">
                Access the probability of success for this distribution.                
                <@return>
                    n the probability of success.                    
                </@return>
            </javadoc>
            <method name="getProbabilityOfSuccess" type="double" line="131"/>
            <javadoc line="135">
                {@inheritDoc}                
            </javadoc>
            <method name="probability" type="double" line="136">
                <declaration name="ret" type="double" line="137"/>
                <scope line="138"/>
                <scope line="140"/>
            </method>
            <javadoc line="149">
                {@inheritDoc}                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="150">
                <declaration name="ret" type="double" line="151"/>
                <scope line="152"/>
                <scope line="154"/>
            </method>
            <javadoc line="161">
                {@inheritDoc}For number of successes {@code r} and probability of success {@code p},
                 * the mean is {@code r * (1 - p) / p}.                
            </javadoc>
            <method name="getNumericalMean" type="double" line="167">
                <declaration name="p" type="double" line="168"/>
                <declaration name="r" type="double" line="169"/>
            </method>
            <javadoc line="173">
                {@inheritDoc}For number of successes {@code r} and probability of success {@code p},
                 * the variance is {@code r * (1 - p) / p^2}.                
            </javadoc>
            <method name="getNumericalVariance" type="double" line="179">
                <declaration name="p" type="double" line="180"/>
                <declaration name="r" type="double" line="181"/>
            </method>
            <javadoc line="185">
                {@inheritDoc}The lower bound of the support is always 0 no matter the parameters.                
                <@return>
                    n lower bound of the support (always 0)                    
                </@return>
            </javadoc>
            <method name="getSupportLowerBound" type="int" line="192"/>
            <javadoc line="196">
                {@inheritDoc}The upper bound of the support is always positive infinity no matter the
                 * parameters. Positive infinity is symbolized by {@code Integer.MAX_VALUE}.                
                <@return>
                    n upper bound of the support (always {@code Integer.MAX_VALUE}for positive infinity)                    
                </@return>
            </javadoc>
            <method name="getSupportUpperBound" type="int" line="205"/>
            <javadoc line="209">
                {@inheritDoc}The support of this distribution is connected.                
                <@return>
                    n {@code true}                    
                </@return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="216"/>
        </class>
    </source>