<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.correlation">
        <import package="org.apache.commons.math3.distribution.TDistribution"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.BlockRealMatrix"/>
        <import package="org.apache.commons.math3.stat.regression.SimpleRegression"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="PearsonsCorrelation" line="29">
            <javadoc line="29">
                Computes Pearson&apos;s product-moment correlation coefficients for pairs of arrays
                 * or columns of a matrix.
                 * &lt;p&gt;The constructors that take &lt;code&gt;RealMatrix&lt;/code&gt; or
                 * &lt;code&gt;double[][]&lt;/code&gt; arguments generate correlation matrices.  The
                 * columns of the input matrices are assumed to represent variable values.
                 * Correlations are given by the formula&lt;/p&gt;
                 * &lt;code&gt;cor(X, Y) = &amp;Sigma;[(x&lt;sub&gt;i&lt;/sub&gt; - E(X))(y&lt;sub&gt;i&lt;/sub&gt; - E(Y))] / [(n - 1)s(X)s(Y)]&lt;/code&gt;
                 * where &lt;code&gt;E(X)&lt;/code&gt; is the mean of &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;E(Y)&lt;/code&gt;
                 * is the mean of the &lt;code&gt;Y&lt;/code&gt; values and s(X), s(Y) are standard deviations.                
                <@version>
                    n $Id: PearsonsCorrelation.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <declaration name="correlationMatrix" type="RealMatrix" line="46"/>
            <javadoc line="46">
                correlation matrix                
            </javadoc>
            <declaration name="nObs" type="int" line="49"/>
            <javadoc line="49">
                number of observations                
            </javadoc>
            <javadoc line="52">
                Create a PearsonsCorrelation instance without data                
            </javadoc>
            <method name="PearsonsCorrelation" type="constructor" line="55"/>
            <javadoc line="61">
                Create a PearsonsCorrelation from a rectangular array
                 * whose columns represent values of variables to be correlated.                
                <@param>
                    m data rectangular array with columns representing variables                    
                </@param>
                <@throws>
                    s IllegalArgumentException if the input data array is not
                     * rectangular with at least two rows and two columns.                    
                </@throws>
            </javadoc>
            <method name="PearsonsCorrelation" type="constructor" line="69"/>
            <javadoc line="73">
                Create a PearsonsCorrelation from a RealMatrix whose columns
                 * represent variables to be correlated.                
                <@param>
                    m matrix matrix with columns representing variables to correlate                    
                </@param>
            </javadoc>
            <method name="PearsonsCorrelation" type="constructor" line="79"/>
            <javadoc line="85">
                Create a PearsonsCorrelation from a {@link Covariance}.  The correlation
                 * matrix is computed by scaling the Covariance&apos;s covariance matrix.
                 * The Covariance instance must have been created from a data matrix with
                 * columns representing variable values.                
                <@param>
                    m covariance Covariance instance                    
                </@param>
            </javadoc>
            <method name="PearsonsCorrelation" type="constructor" line="93">
                <declaration name="covarianceMatrix" type="RealMatrix" line="94"/>
                <scope line="95"/>
            </method>
            <javadoc line="102">
                Create a PearsonsCorrelation from a covariance matrix.  The correlation
                 * matrix is computed by scaling the covariance matrix.                
                <@param>
                    m covarianceMatrix covariance matrix                    
                </@param>
                <@param>
                    m numberOfObservations the number of observations in the dataset used to compute
                     * the covariance matrix                    
                </@param>
            </javadoc>
            <method name="PearsonsCorrelation" type="constructor" line="110"/>
            <javadoc line="116">
                Returns the correlation matrix                
                <@return>
                    n correlation matrix                    
                </@return>
            </javadoc>
            <method name="getCorrelationMatrix" type="RealMatrix" line="121"/>
            <javadoc line="125">
                Returns a matrix of standard errors associated with the estimates
                 * in the correlation matrix.&lt;br/&gt;
                 * &lt;code&gt;getCorrelationStandardErrors().getEntry(i,j)&lt;/code&gt; is the standard
                 * error associated with &lt;code&gt;getCorrelationMatrix.getEntry(i,j)&lt;/code&gt;
                 * &lt;p&gt;The formula used to compute the standard error is &lt;br/&gt;
                 * &lt;code&gt;SE&lt;sub&gt;r&lt;/sub&gt; = ((1 - r&lt;sup&gt;2&lt;/sup&gt;) / (n - 2))&lt;sup&gt;1/2&lt;/sup&gt;&lt;/code&gt;
                 * where &lt;code&gt;r&lt;/code&gt; is the estimated correlation coefficient and
                 * &lt;code&gt;n&lt;/code&gt; is the number of observations in the source dataset.&lt;/p&gt;                
                <@return>
                    n matrix of correlation standard errors                    
                </@return>
            </javadoc>
            <method name="getCorrelationStandardErrors" type="RealMatrix" line="137">
                <declaration name="nVars" type="int" line="138"/>
                <declaration name="out" type="double[][]" line="139"/>
                <scope line="140">
                    <scope line="141">
                        <declaration name="r" type="double" line="142"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="149">
                Returns a matrix of p-values associated with the (two-sided) null
                 * hypothesis that the corresponding correlation coefficient is zero.
                 * &lt;p&gt;&lt;code&gt;getCorrelationPValues().getEntry(i,j)&lt;/code&gt; is the probability
                 * that a random variable distributed as &lt;code&gt;t&lt;sub&gt;n-2&lt;/sub&gt;&lt;/code&gt; takes
                 * a value with absolute value greater than or equal to &lt;br&gt;
                 * &lt;code&gt;|r|((n - 2) / (1 - r&lt;sup&gt;2&lt;/sup&gt;))&lt;sup&gt;1/2&lt;/sup&gt;&lt;/code&gt;&lt;/p&gt;
                 * &lt;p&gt;The values in the matrix are sometimes referred to as the
                 * &lt;i&gt;significance&lt;/i&gt; of the corresponding correlation coefficients.&lt;/p&gt;                
                <@return>
                    n matrix of p-values                    
                </@return>
                <@throws>
                    s org.apache.commons.math3.exception.MaxCountExceededExceptionif an error occurs estimating probabilities                    
                </@throws>
            </javadoc>
            <method name="getCorrelationPValues" type="RealMatrix" line="163">
                <declaration name="tDistribution" type="TDistribution" line="164"/>
                <declaration name="nVars" type="int" line="165"/>
                <declaration name="out" type="double[][]" line="166"/>
                <scope line="167">
                    <scope line="168">
                        <scope line="169"/>
                        <scope line="171">
                            <declaration name="r" type="double" line="172"/>
                            <declaration name="t" type="double" line="173"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="182">
                Computes the correlation matrix for the columns of the
                 * input matrix.                
                <@param>
                    m matrix matrix with columns representing variables to correlate                    
                </@param>
                <@return>
                    n correlation matrix                    
                </@return>
            </javadoc>
            <method name="computeCorrelationMatrix" type="RealMatrix" line="189">
                <declaration name="nVars" type="int" line="190"/>
                <declaration name="outMatrix" type="RealMatrix" line="191"/>
                <scope line="192">
                    <scope line="193">
                        <declaration name="corr" type="double" line="194"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="203">
                Computes the correlation matrix for the columns of the
                 * input rectangular array.  The colums of the array represent values
                 * of variables to be correlated.                
                <@param>
                    m data matrix with columns representing variables to correlate                    
                </@param>
                <@return>
                    n correlation matrix                    
                </@return>
            </javadoc>
            <method name="computeCorrelationMatrix" type="RealMatrix" line="211"/>
            <javadoc line="215">
                Computes the Pearson&apos;s product-moment correlation coefficient between the two arrays.
                 * &lt;/p&gt;Throws IllegalArgumentException if the arrays do not have the same length
                 * or their common length is less than 2&lt;/p&gt;                
                <@param>
                    m xArray first data array                    
                </@param>
                <@param>
                    m yArray second data array                    
                </@param>
                <@return>
                    n Returns Pearson's correlation coefficient for the two arrays                    
                </@return>
                <@throws>
                    s DimensionMismatchException if the arrays lengths do not match                    
                </@throws>
                <@throws>
                    s MathIllegalArgumentException if there is insufficient data                    
                </@throws>
            </javadoc>
            <method name="correlation" type="double" line="227">
                <declaration name="regression" type="SimpleRegression" line="228"/>
                <scope line="229"/>
                <scope line="231"/>
                <scope line="234">
                    <scope line="235"/>
                </scope>
            </method>
            <javadoc line="242">
                Derives a correlation matrix from a covariance matrix.
                 * &lt;p&gt;Uses the formula &lt;br/&gt;
                 * &lt;code&gt;r(X,Y) = cov(X,Y)/s(X)s(Y)&lt;/code&gt; where
                 * &lt;code&gt;r(&amp;middot,&amp;middot;)&lt;/code&gt; is the correlation coefficient and
                 * &lt;code&gt;s(&amp;middot;)&lt;/code&gt; means standard deviation.&lt;/p&gt;                
                <@param>
                    m covarianceMatrix the covariance matrix                    
                </@param>
                <@return>
                    n correlation matrix                    
                </@return>
            </javadoc>
            <method name="covarianceToCorrelation" type="RealMatrix" line="253">
                <declaration name="nVars" type="int" line="254"/>
                <declaration name="outMatrix" type="RealMatrix" line="255"/>
                <scope line="256">
                    <declaration name="sigma" type="double" line="257"/>
                    <scope line="259">
                        <declaration name="entry" type="double" line="260"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="269">
                Throws IllegalArgumentException of the matrix does not have at least
                 * two columns and two rows                
                <@param>
                    m matrix matrix to check for sufficiency                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if there is insufficient data                    
                </@throws>
            </javadoc>
            <method name="checkSufficientData" type="void" line="276">
                <declaration name="nRows" type="int" line="277"/>
                <declaration name="nCols" type="int" line="278"/>
                <scope line="279"/>
            </method>
        </class>
    </source>