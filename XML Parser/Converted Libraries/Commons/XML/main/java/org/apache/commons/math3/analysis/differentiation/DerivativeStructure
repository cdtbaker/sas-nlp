<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.differentiation">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.RealFieldElement"/>
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="DerivativeStructure" line="31">
            <implements interface="RealFieldElement&lt;DerivativeStructure&gt;"/>
            <implements interface="Serializable"/>
            <javadoc line="31">
                Class representing both the value and the differentials of a function.
                 * &lt;p&gt;This class is the workhorse of the differentiation package.&lt;/p&gt;
                 * &lt;p&gt;This class is an implementation of the extension to Rall&apos;s
                 * numbers described in Dan Kalman&apos;s paper &lt;a
                 * href=&quot;http://www.math.american.edu/People/kalman/pdffiles/mmgautodiff.pdf&quot;&gt;Doubly
                 * Recursive Multivariate Automatic Differentiation&lt;/a&gt;, Mathematics Magazine, vol. 75,
                 * no. 3, June 2002.&lt;/p&gt;. Rall&apos;s numbers are an extension to the real numbers used
                 * throughout mathematical expressions; they hold the derivative together with the
                 * value of a function. Dan Kalman&apos;s derivative structures hold all partial derivatives
                 * up to any specified order, with respect to any number of free parameters. Rall&apos;s
                 * numbers therefore can be seen as derivative structures for order one derivative and
                 * one free parameter, and real numbers can be seen as derivative structures with zero
                 * order derivative and no free parameters.&lt;/p&gt;
                 * &lt;p&gt;{@link DerivativeStructure} instances can be used directly thanks to
                 * the arithmetic operators to the mathematical functions provided as static
                 * methods by this class (+, -, *, /, %, sin, cos ...).&lt;/p&gt;
                 * &lt;p&gt;Implementing complex expressions by hand using these classes is
                 * a tedious and error-prone task but has the advantage of having no limitation
                 * on the derivation order despite no requiring users to compute the derivatives by
                 * themselves. Implementing complex expression can also be done by developing computation
                 * code using standard primitive double values and to use {@link UnivariateFunctionDifferentiator differentiators} to create the {@link DerivativeStructure}-based instances. This method is simpler but may be limited in
                 * the accuracy and derivation orders and may be computationally intensive (this is
                 * typically the case for {@link FiniteDifferencesDifferentiator finite differences
                 * differentiator}.&lt;/p&gt;
                 * &lt;p&gt;Instances of this class are guaranteed to be immutable.&lt;/p&gt;                
                <@see>
                    e DSCompiler                    
                </@see>
                <@version>
                    n $Id: DerivativeStructure.java 1462423 2013-03-29 07:25:18Z luc $                    
                </@version>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="64"/>
            <javadoc line="64">
                Serializable UID.                
            </javadoc>
            <declaration name="compiler" type="DSCompiler" line="67"/>
            <javadoc line="67">
                Compiler for the current dimensions.                
            </javadoc>
            <declaration name="data" type="double[]" line="70"/>
            <javadoc line="70">
                Combined array holding all values.                
            </javadoc>
            <javadoc line="73">
                Build an instance with all values and derivatives set to 0.                
                <@param>
                    m compiler compiler to use for computation                    
                </@param>
            </javadoc>
            <method name="DerivativeStructure" type="constructor" line="76"/>
            <javadoc line="81">
                Build an instance with all values and derivatives set to 0.                
                <@param>
                    m parameters number of free parameters                    
                </@param>
                <@param>
                    m order derivation order                    
                </@param>
                <@throws>
                    s NumberIsTooLargeException if order is too large                    
                </@throws>
            </javadoc>
            <method name="DerivativeStructure" type="constructor" line="87"/>
            <javadoc line="91">
                Build an instance representing a constant value.                
                <@param>
                    m parameters number of free parameters                    
                </@param>
                <@param>
                    m order derivation order                    
                </@param>
                <@param>
                    m value value of the constant                    
                </@param>
                <@throws>
                    s NumberIsTooLargeException if order is too large                    
                </@throws>
                <@see>
                    e #DerivativeStructure(int,int,int,double)                    
                </@see>
            </javadoc>
            <method name="DerivativeStructure" type="constructor" line="99"/>
            <javadoc line="104">
                Build an instance representing a variable.
                 * &lt;p&gt;Instances built using this constructor are considered
                 * to be the free variables with respect to which differentials
                 * are computed. As such, their differential with respect to
                 * themselves is +1.&lt;/p&gt;                
                <@param>
                    m parameters number of free parameters                    
                </@param>
                <@param>
                    m order derivation order                    
                </@param>
                <@param>
                    m index index of the variable (from 0 to {@code parameters - 1})                    
                </@param>
                <@param>
                    m value value of the variable                    
                </@param>
                <@exception>
                    n NumberIsTooLargeException if {@code index >= parameters}.                    
                </@exception>
                <@see>
                    e #DerivativeStructure(int,int,double)                    
                </@see>
            </javadoc>
            <method name="DerivativeStructure" type="constructor" line="118">
                <scope line="121"/>
                <scope line="125"/>
            </method>
            <javadoc line="132">
                Linear combination constructor.
                 * The derivative structure built will be a1 * ds1 + a2 * ds2                
                <@param>
                    m a1 first scale factor                    
                </@param>
                <@param>
                    m ds1 first base (unscaled) derivative structure                    
                </@param>
                <@param>
                    m a2 second scale factor                    
                </@param>
                <@param>
                    m ds2 second base (unscaled) derivative structure                    
                </@param>
                <@exception>
                    n DimensionMismatchException if number of free parameters or orders are inconsistent                    
                </@exception>
            </javadoc>
            <method name="DerivativeStructure" type="constructor" line="142"/>
            <javadoc line="148">
                Linear combination constructor.
                 * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3                
                <@param>
                    m a1 first scale factor                    
                </@param>
                <@param>
                    m ds1 first base (unscaled) derivative structure                    
                </@param>
                <@param>
                    m a2 second scale factor                    
                </@param>
                <@param>
                    m ds2 second base (unscaled) derivative structure                    
                </@param>
                <@param>
                    m a3 third scale factor                    
                </@param>
                <@param>
                    m ds3 third base (unscaled) derivative structure                    
                </@param>
                <@exception>
                    n DimensionMismatchException if number of free parameters or orders are inconsistent                    
                </@exception>
            </javadoc>
            <method name="DerivativeStructure" type="constructor" line="161"/>
            <javadoc line="168">
                Linear combination constructor.
                 * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3 + a4 * ds4                
                <@param>
                    m a1 first scale factor                    
                </@param>
                <@param>
                    m ds1 first base (unscaled) derivative structure                    
                </@param>
                <@param>
                    m a2 second scale factor                    
                </@param>
                <@param>
                    m ds2 second base (unscaled) derivative structure                    
                </@param>
                <@param>
                    m a3 third scale factor                    
                </@param>
                <@param>
                    m ds3 third base (unscaled) derivative structure                    
                </@param>
                <@param>
                    m a4 fourth scale factor                    
                </@param>
                <@param>
                    m ds4 fourth base (unscaled) derivative structure                    
                </@param>
                <@exception>
                    n DimensionMismatchException if number of free parameters or orders are inconsistent                    
                </@exception>
            </javadoc>
            <method name="DerivativeStructure" type="constructor" line="184"/>
            <javadoc line="194">
                Build an instance from all its derivatives.                
                <@param>
                    m parameters number of free parameters                    
                </@param>
                <@param>
                    m order derivation order                    
                </@param>
                <@param>
                    m derivatives derivatives sorted according to{@link DSCompiler#getPartialDerivativeIndex(int...)}                    
                </@param>
                <@exception>
                    n DimensionMismatchException if derivatives array does not match the{@link DSCompiler#getSize() size} expected by the compiler                    
                </@exception>
                <@throws>
                    s NumberIsTooLargeException if order is too large                    
                </@throws>
                <@see>
                    e #getAllDerivatives()                    
                </@see>
            </javadoc>
            <method name="DerivativeStructure" type="constructor" line="205">
                <scope line="207"/>
            </method>
            <javadoc line="213">
                Copy constructor.                
                <@param>
                    m ds instance to copy                    
                </@param>
            </javadoc>
            <method name="DerivativeStructure" type="constructor" line="216"/>
            <javadoc line="221">
                Get the number of free parameters.                
                <@return>
                    n number of free parameters                    
                </@return>
            </javadoc>
            <method name="getFreeParameters" type="int" line="224"/>
            <javadoc line="228">
                Get the derivation order.                
                <@return>
                    n derivation order                    
                </@return>
            </javadoc>
            <method name="getOrder" type="int" line="231"/>
            <javadoc line="235">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="getReal" type="double" line="238"/>
            <javadoc line="242">
                Get the value part of the derivative structure.                
                <@return>
                    n value part of the derivative structure                    
                </@return>
                <@see>
                    e #getPartialDerivative(int...)                    
                </@see>
            </javadoc>
            <method name="getValue" type="double" line="246"/>
            <javadoc line="250">
                Get a partial derivative.                
                <@param>
                    m orders derivation orders with respect to each variable (if all orders are 0,
                     * the value is returned)                    
                </@param>
                <@return>
                    n partial derivative                    
                </@return>
                <@see>
                    e #getValue()                    
                </@see>
                <@exception>
                    n DimensionMismatchException if the numbers of variables does not
                     * match the instance                    
                </@exception>
                <@exception>
                    n NumberIsTooLargeException if sum of derivation orders is larger
                     * than the instance limits                    
                </@exception>
            </javadoc>
            <method name="getPartialDerivative" type="double" line="261"/>
            <javadoc line="265">
                Get all partial derivatives.                
                <@return>
                    n a fresh copy of partial derivatives, in an array sorted according to{@link DSCompiler#getPartialDerivativeIndex(int...)}                    
                </@return>
            </javadoc>
            <method name="getAllDerivatives" type="double[]" line="269"/>
            <javadoc line="273">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="add" type="DerivativeStructure" line="276">
                <declaration name="ds" type="DerivativeStructure" line="277"/>
            </method>
            <javadoc line="282">
                {@inheritDoc}                
                <@exception>
                    n DimensionMismatchException if number of free parameters
                     * or orders do not match                    
                </@exception>
            </javadoc>
            <method name="add" type="DerivativeStructure" line="287">
                <declaration name="ds" type="DerivativeStructure" line="289"/>
            </method>
            <javadoc line="294">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="subtract" type="DerivativeStructure" line="297"/>
            <javadoc line="301">
                {@inheritDoc}                
                <@exception>
                    n DimensionMismatchException if number of free parameters
                     * or orders do not match                    
                </@exception>
            </javadoc>
            <method name="subtract" type="DerivativeStructure" line="306">
                <declaration name="ds" type="DerivativeStructure" line="308"/>
            </method>
            <javadoc line="313">
                {@inheritDoc}                
            </javadoc>
            <method name="multiply" type="DerivativeStructure" line="314"/>
            <javadoc line="318">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="multiply" type="DerivativeStructure" line="321">
                <declaration name="ds" type="DerivativeStructure" line="322"/>
                <scope line="323"/>
            </method>
            <javadoc line="329">
                {@inheritDoc}                
                <@exception>
                    n DimensionMismatchException if number of free parameters
                     * or orders do not match                    
                </@exception>
            </javadoc>
            <method name="multiply" type="DerivativeStructure" line="334">
                <declaration name="result" type="DerivativeStructure" line="336"/>
            </method>
            <javadoc line="341">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="divide" type="DerivativeStructure" line="344">
                <declaration name="ds" type="DerivativeStructure" line="345"/>
                <scope line="346"/>
            </method>
            <javadoc line="352">
                {@inheritDoc}                
                <@exception>
                    n DimensionMismatchException if number of free parameters
                     * or orders do not match                    
                </@exception>
            </javadoc>
            <method name="divide" type="DerivativeStructure" line="357">
                <declaration name="result" type="DerivativeStructure" line="359"/>
            </method>
            <javadoc line="364">
                {@inheritDoc}                
            </javadoc>
            <method name="remainder" type="DerivativeStructure" line="365">
                <declaration name="ds" type="DerivativeStructure" line="366"/>
            </method>
            <javadoc line="371">
                {@inheritDoc}                
                <@exception>
                    n DimensionMismatchException if number of free parameters
                     * or orders do not match                    
                </@exception>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="remainder" type="DerivativeStructure" line="377">
                <declaration name="result" type="DerivativeStructure" line="379"/>
            </method>
            <javadoc line="384">
                {@inheritDoc}                
            </javadoc>
            <method name="negate" type="DerivativeStructure" line="385">
                <declaration name="ds" type="DerivativeStructure" line="386"/>
                <scope line="387"/>
            </method>
            <javadoc line="393">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="abs" type="DerivativeStructure" line="396">
                <scope line="397"/>
                <scope line="400"/>
            </method>
            <javadoc line="405">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="ceil" type="DerivativeStructure" line="408"/>
            <javadoc line="414">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="floor" type="DerivativeStructure" line="417"/>
            <javadoc line="423">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="rint" type="DerivativeStructure" line="426"/>
            <javadoc line="432">
                {@inheritDoc}                
            </javadoc>
            <method name="round" type="long" line="433"/>
            <javadoc line="437">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="signum" type="DerivativeStructure" line="440"/>
            <javadoc line="446">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="copySign" type="DerivativeStructure" line="449">
                <comment line="450">
                    turn negate(); // flip sign                    
                </comment>
                <declaration name="m" type="long" line="450"/>
                <declaration name="s" type="long" line="451"/>
                <scope line="452"/>
            </method>
            <javadoc line="458">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="copySign" type="DerivativeStructure" line="461">
                <comment line="462">
                    turn negate(); // flip sign                    
                </comment>
                <declaration name="m" type="long" line="462"/>
                <declaration name="s" type="long" line="463"/>
                <scope line="464"/>
            </method>
            <javadoc line="470">
                Return the exponent of the instance value, removing the bias.
                 * &lt;p&gt;
                 * For double numbers of the form 2&lt;sup&gt;x&lt;/sup&gt;, the unbiased
                 * exponent is exactly x.
                 * &lt;/p&gt;                
                <@return>
                    n exponent for instance in IEEE754 representation, without bias                    
                </@return>
            </javadoc>
            <method name="getExponent" type="int" line="478"/>
            <javadoc line="482">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="scalb" type="DerivativeStructure" line="485">
                <declaration name="ds" type="DerivativeStructure" line="486"/>
                <scope line="487"/>
            </method>
            <javadoc line="493">
                {@inheritDoc}                
                <@exception>
                    n DimensionMismatchException if number of free parameters
                     * or orders do not match                    
                </@exception>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="hypot" type="DerivativeStructure" line="499">
                <scope line="503"/>
                <scope line="507"/>
                <scope line="511">
                    <declaration name="expX" type="int" line="513"/>
                    <declaration name="expY" type="int" line="514"/>
                    <scope line="515"/>
                    <scope line="518"/>
                    <scope line="521">
                        <declaration name="middleExp" type="int" line="524"/>
                        <declaration name="scaledX" type="DerivativeStructure" line="527"/>
                        <declaration name="scaledY" type="DerivativeStructure" line="528"/>
                        <declaration name="scaledH" type="DerivativeStructure" line="531"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="542">
                Returns the hypotenuse of a triangle with sides {@code x} and {@code y}- sqrt(&lt;i&gt;x&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;+&lt;i&gt;y&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)&lt;br/&gt;
                 * avoiding intermediate overflow or underflow.
                 * &lt;ul&gt;
                 * &lt;li&gt; If either argument is infinite, then the result is positive infinity.&lt;/li&gt;
                 * &lt;li&gt; else, if either argument is NaN then the result is NaN.&lt;/li&gt;
                 * &lt;/ul&gt;                
                <@param>
                    m x a value                    
                </@param>
                <@param>
                    m y a value                    
                </@param>
                <@return>
                    n sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)                    
                </@return>
                <@exception>
                    n DimensionMismatchException if number of free parameters
                     * or orders do not match                    
                </@exception>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="hypot" type="DerivativeStructure" line="560"/>
            <javadoc line="564">
                Compute composition of the instance by a univariate function.                
                <@param>
                    m f array of value and derivatives of the function at
                     * the current point (i.e. [f({@link #getValue()}),
                     * f'({@link #getValue()}), f''({@link #getValue()})...]).                    
                </@param>
                <@return>
                    n f(this)                    
                </@return>
                <@exception>
                    n DimensionMismatchException if the number of derivatives
                     * in the array is not equal to {@link #getOrder() order} + 1                    
                </@exception>
            </javadoc>
            <method name="compose" type="DerivativeStructure" line="573">
                <scope line="574"/>
                <declaration name="result" type="DerivativeStructure" line="577"/>
            </method>
            <javadoc line="582">
                {@inheritDoc}                
            </javadoc>
            <method name="reciprocal" type="DerivativeStructure" line="583">
                <declaration name="result" type="DerivativeStructure" line="584"/>
            </method>
            <javadoc line="589">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="sqrt" type="DerivativeStructure" line="592"/>
            <javadoc line="596">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="cbrt" type="DerivativeStructure" line="599"/>
            <javadoc line="603">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="rootN" type="DerivativeStructure" line="606">
                <declaration name="result" type="DerivativeStructure" line="607"/>
            </method>
            <javadoc line="612">
                {@inheritDoc}                
            </javadoc>
            <method name="getField" type="Field<DerivativeStructure>" line="613">
                <anonymous_class line="614">
                    <javadoc line="616">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getZero" type="DerivativeStructure" line="617"/>
                    <javadoc line="621">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getOne" type="DerivativeStructure" line="622"/>
                    <javadoc line="626">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getRuntimeClass" type="Class<? extends FieldElement<DerivativeStructure>>" line="627"/>
                </anonymous_class>
            </method>
            <javadoc line="634">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="pow" type="DerivativeStructure" line="637">
                <declaration name="result" type="DerivativeStructure" line="638"/>
            </method>
            <javadoc line="643">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="pow" type="DerivativeStructure" line="646">
                <declaration name="result" type="DerivativeStructure" line="647"/>
            </method>
            <javadoc line="652">
                {@inheritDoc}                
                <@exception>
                    n DimensionMismatchException if number of free parameters
                     * or orders do not match                    
                </@exception>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="pow" type="DerivativeStructure" line="658">
                <declaration name="result" type="DerivativeStructure" line="660"/>
            </method>
            <javadoc line="665">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="exp" type="DerivativeStructure" line="668">
                <declaration name="result" type="DerivativeStructure" line="669"/>
            </method>
            <javadoc line="674">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="expm1" type="DerivativeStructure" line="677">
                <declaration name="result" type="DerivativeStructure" line="678"/>
            </method>
            <javadoc line="683">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="log" type="DerivativeStructure" line="686">
                <declaration name="result" type="DerivativeStructure" line="687"/>
            </method>
            <javadoc line="692">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="log1p" type="DerivativeStructure" line="695">
                <declaration name="result" type="DerivativeStructure" line="696"/>
            </method>
            <javadoc line="701">
                Base 10 logarithm.                
                <@return>
                    n base 10 logarithm of the instance                    
                </@return>
            </javadoc>
            <method name="log10" type="DerivativeStructure" line="704">
                <declaration name="result" type="DerivativeStructure" line="705"/>
            </method>
            <javadoc line="710">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="cos" type="DerivativeStructure" line="713">
                <declaration name="result" type="DerivativeStructure" line="714"/>
            </method>
            <javadoc line="719">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="sin" type="DerivativeStructure" line="722">
                <declaration name="result" type="DerivativeStructure" line="723"/>
            </method>
            <javadoc line="728">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="tan" type="DerivativeStructure" line="731">
                <declaration name="result" type="DerivativeStructure" line="732"/>
            </method>
            <javadoc line="737">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="acos" type="DerivativeStructure" line="740">
                <declaration name="result" type="DerivativeStructure" line="741"/>
            </method>
            <javadoc line="746">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="asin" type="DerivativeStructure" line="749">
                <declaration name="result" type="DerivativeStructure" line="750"/>
            </method>
            <javadoc line="755">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="atan" type="DerivativeStructure" line="758">
                <declaration name="result" type="DerivativeStructure" line="759"/>
            </method>
            <javadoc line="764">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="atan2" type="DerivativeStructure" line="768">
                <declaration name="result" type="DerivativeStructure" line="770"/>
            </method>
            <javadoc line="775">
                Two arguments arc tangent operation.                
                <@param>
                    m y first argument of the arc tangent                    
                </@param>
                <@param>
                    m x second argument of the arc tangent                    
                </@param>
                <@return>
                    n atan2(y, x)                    
                </@return>
                <@exception>
                    n DimensionMismatchException if number of free parameters
                     * or orders do not match                    
                </@exception>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="atan2" type="DerivativeStructure" line="784"/>
            <javadoc line="788">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="cosh" type="DerivativeStructure" line="791">
                <declaration name="result" type="DerivativeStructure" line="792"/>
            </method>
            <javadoc line="797">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="sinh" type="DerivativeStructure" line="800">
                <declaration name="result" type="DerivativeStructure" line="801"/>
            </method>
            <javadoc line="806">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="tanh" type="DerivativeStructure" line="809">
                <declaration name="result" type="DerivativeStructure" line="810"/>
            </method>
            <javadoc line="815">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="acosh" type="DerivativeStructure" line="818">
                <declaration name="result" type="DerivativeStructure" line="819"/>
            </method>
            <javadoc line="824">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="asinh" type="DerivativeStructure" line="827">
                <declaration name="result" type="DerivativeStructure" line="828"/>
            </method>
            <javadoc line="833">
                {@inheritDoc}                
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="atanh" type="DerivativeStructure" line="836">
                <declaration name="result" type="DerivativeStructure" line="837"/>
            </method>
            <javadoc line="842">
                Convert radians to degrees, with error of less than 0.5 ULP                
                <@return>
                    n instance converted into degrees                    
                </@return>
            </javadoc>
            <method name="toDegrees" type="DerivativeStructure" line="845">
                <declaration name="ds" type="DerivativeStructure" line="846"/>
                <scope line="847"/>
            </method>
            <javadoc line="853">
                Convert degrees to radians, with error of less than 0.5 ULP                
                <@return>
                    n instance converted into radians                    
                </@return>
            </javadoc>
            <method name="toRadians" type="DerivativeStructure" line="856">
                <declaration name="ds" type="DerivativeStructure" line="857"/>
                <scope line="858"/>
            </method>
            <javadoc line="864">
                Evaluate Taylor expansion a derivative structure.                
                <@param>
                    m delta parameters offsets (&Delta;x, &Delta;y, ...)                    
                </@param>
                <@return>
                    n value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...                    
                </@return>
                <@throws>
                    s MathArithmeticException if factorials becomes too large                    
                </@throws>
            </javadoc>
            <method name="taylor" type="double" line="869"/>
            <javadoc line="873">
                {@inheritDoc}                
                <@exception>
                    n DimensionMismatchException if number of free parameters
                     * or orders do not match                    
                </@exception>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="linearCombination" type="DerivativeStructure" line="879">
                <comment line="880">
                    compute an accurate value, taking care of cancellations                    
                </comment>
                <comment line="880">
                    compute a simple value, with all partial derivatives                    
                </comment>
                <comment line="880">
                    create a result with accurate value and all derivatives (not necessarily as accurate as the value)                    
                </comment>
                <declaration name="aDouble" type="double[]" line="882"/>
                <scope line="883"/>
                <declaration name="bDouble" type="double[]" line="886"/>
                <scope line="887"/>
                <declaration name="accurateValue" type="double" line="890"/>
                <declaration name="simpleValue" type="DerivativeStructure" line="893"/>
                <scope line="894"/>
                <declaration name="all" type="double[]" line="899"/>
            </method>
            <javadoc line="905">
                {@inheritDoc}                
                <@exception>
                    n DimensionMismatchException if number of free parameters
                     * or orders do not match                    
                </@exception>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="linearCombination" type="DerivativeStructure" line="911">
                <comment line="912">
                    compute an accurate value, taking care of cancellations                    
                </comment>
                <comment line="912">
                    compute a simple value, with all partial derivatives                    
                </comment>
                <comment line="912">
                    create a result with accurate value and all derivatives (not necessarily as accurate as the value)                    
                </comment>
                <declaration name="bDouble" type="double[]" line="914"/>
                <scope line="915"/>
                <declaration name="accurateValue" type="double" line="918"/>
                <declaration name="simpleValue" type="DerivativeStructure" line="921"/>
                <scope line="922"/>
                <declaration name="all" type="double[]" line="927"/>
            </method>
            <javadoc line="933">
                {@inheritDoc}                
                <@exception>
                    n DimensionMismatchException if number of free parameters
                     * or orders do not match                    
                </@exception>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="linearCombination" type="DerivativeStructure" line="940">
                <comment line="941">
                    compute an accurate value, taking care of cancellations                    
                </comment>
                <comment line="941">
                    compute a simple value, with all partial derivatives                    
                </comment>
                <comment line="941">
                    create a result with accurate value and all derivatives (not necessarily as accurate as the value)                    
                </comment>
                <declaration name="accurateValue" type="double" line="943"/>
                <declaration name="simpleValue" type="DerivativeStructure" line="947"/>
                <declaration name="all" type="double[]" line="950"/>
            </method>
            <javadoc line="956">
                {@inheritDoc}                
                <@exception>
                    n DimensionMismatchException if number of free parameters
                     * or orders do not match                    
                </@exception>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="linearCombination" type="DerivativeStructure" line="963">
                <comment line="964">
                    compute an accurate value, taking care of cancellations                    
                </comment>
                <comment line="964">
                    compute a simple value, with all partial derivatives                    
                </comment>
                <comment line="964">
                    create a result with accurate value and all derivatives (not necessarily as accurate as the value)                    
                </comment>
                <declaration name="accurateValue" type="double" line="966"/>
                <declaration name="simpleValue" type="DerivativeStructure" line="970"/>
                <declaration name="all" type="double[]" line="973"/>
            </method>
            <javadoc line="979">
                {@inheritDoc}                
                <@exception>
                    n DimensionMismatchException if number of free parameters
                     * or orders do not match                    
                </@exception>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="linearCombination" type="DerivativeStructure" line="987">
                <comment line="988">
                    compute an accurate value, taking care of cancellations                    
                </comment>
                <comment line="988">
                    compute a simple value, with all partial derivatives                    
                </comment>
                <comment line="988">
                    create a result with accurate value and all derivatives (not necessarily as accurate as the value)                    
                </comment>
                <declaration name="accurateValue" type="double" line="990"/>
                <declaration name="simpleValue" type="DerivativeStructure" line="995"/>
                <declaration name="all" type="double[]" line="998"/>
            </method>
            <javadoc line="1004">
                {@inheritDoc}                
                <@exception>
                    n DimensionMismatchException if number of free parameters
                     * or orders do not match                    
                </@exception>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="linearCombination" type="DerivativeStructure" line="1012">
                <comment line="1013">
                    compute an accurate value, taking care of cancellations                    
                </comment>
                <comment line="1013">
                    compute a simple value, with all partial derivatives                    
                </comment>
                <comment line="1013">
                    create a result with accurate value and all derivatives (not necessarily as accurate as the value)                    
                </comment>
                <declaration name="accurateValue" type="double" line="1015"/>
                <declaration name="simpleValue" type="DerivativeStructure" line="1020"/>
                <declaration name="all" type="double[]" line="1023"/>
            </method>
            <javadoc line="1029">
                {@inheritDoc}                
                <@exception>
                    n DimensionMismatchException if number of free parameters
                     * or orders do not match                    
                </@exception>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="linearCombination" type="DerivativeStructure" line="1038">
                <comment line="1039">
                    compute an accurate value, taking care of cancellations                    
                </comment>
                <comment line="1039">
                    compute a simple value, with all partial derivatives                    
                </comment>
                <comment line="1039">
                    create a result with accurate value and all derivatives (not necessarily as accurate as the value)                    
                </comment>
                <declaration name="accurateValue" type="double" line="1041"/>
                <declaration name="simpleValue" type="DerivativeStructure" line="1047"/>
                <declaration name="all" type="double[]" line="1050"/>
            </method>
            <javadoc line="1056">
                {@inheritDoc}                
                <@exception>
                    n DimensionMismatchException if number of free parameters
                     * or orders do not match                    
                </@exception>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="linearCombination" type="DerivativeStructure" line="1065">
                <comment line="1066">
                    compute an accurate value, taking care of cancellations                    
                </comment>
                <comment line="1066">
                    compute a simple value, with all partial derivatives                    
                </comment>
                <comment line="1066">
                    create a result with accurate value and all derivatives (not necessarily as accurate as the value)                    
                </comment>
                <declaration name="accurateValue" type="double" line="1068"/>
                <declaration name="simpleValue" type="DerivativeStructure" line="1074"/>
                <declaration name="all" type="double[]" line="1077"/>
            </method>
            <javadoc line="1083">
                Test for the equality of two derivative structures.
                 * &lt;p&gt;
                 * Derivative structures are considered equal if they have the same number
                 * of free parameters, the same derivation order, and the same derivatives.
                 * &lt;/p&gt;                
                <@param>
                    m other Object to test for equality to this                    
                </@param>
                <@return>
                    n true if two derivative structures are equal                    
                </@return>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="equals" type="boolean" line="1094">
                <scope line="1096"/>
                <scope line="1100">
                    <declaration name="rhs" type="DerivativeStructure" line="1101"/>
                </scope>
            </method>
            <javadoc line="1111">
                Get a hashCode for the derivative structure.                
                <@return>
                    n a hash code value for this object                    
                </@return>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="hashCode" type="int" line="1117"/>
            <javadoc line="1121">
                Replace the instance with a data transfer object for serialization.                
                <@return>
                    n data transfer object that will be serialized                    
                </@return>
            </javadoc>
            <method name="writeReplace" type="Object" line="1125"/>
            <class name="DataTransferObject" line="1129">
                <implements interface="Serializable"/>
                <javadoc line="1129">
                    Internal class used only for serialization.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="1132"/>
                <javadoc line="1132">
                    Serializable UID.                    
                </javadoc>
                <declaration name="variables" type="int" line="1135"/>
                <javadoc line="1135">
                    Number of variables.                    
                    <@serial>
                        l                        
                    </@serial>
                </javadoc>
                <declaration name="order" type="int" line="1140"/>
                <javadoc line="1140">
                    Derivation order.                    
                    <@serial>
                        l                        
                    </@serial>
                </javadoc>
                <declaration name="data" type="double[]" line="1145"/>
                <javadoc line="1145">
                    Partial derivatives.                    
                    <@serial>
                        l                        
                    </@serial>
                </javadoc>
                <javadoc line="1150">
                    Simple constructor.                    
                    <@param>
                        m variables number of variables                        
                    </@param>
                    <@param>
                        m order derivation order                        
                    </@param>
                    <@param>
                        m data partial derivatives                        
                    </@param>
                </javadoc>
                <method name="DataTransferObject" type="constructor" line="1155"/>
                <javadoc line="1161">
                    Replace the deserialized data transfer object with a {@link DerivativeStructure}.                    
                    <@return>
                        n replacement {@link DerivativeStructure}                        
                    </@return>
                </javadoc>
                <method name="readResolve" type="Object" line="1164"/>
            </class>
        </class>
    </source>