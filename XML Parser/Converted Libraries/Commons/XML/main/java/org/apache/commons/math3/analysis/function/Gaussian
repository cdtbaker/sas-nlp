<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.function">
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.analysis.FunctionUtils"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.DifferentiableUnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.ParametricUnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="Gaussian" line="34">
            <implements interface="UnivariateDifferentiableFunction"/>
            <implements interface="DifferentiableUnivariateFunction"/>
            <javadoc line="34">
                &lt;a href=&quot;http://en.wikipedia.org/wiki/Gaussian_function&quot;&gt;
                  Gaussian&lt;/a&gt; function.                
                <@since>
                    e 3.0                    
                </@since>
                <@version>
                    n $Id: Gaussian.java 1455194 2013-03-11 15:45:54Z luc $                    
                </@version>
            </javadoc>
            <declaration name="mean" type="double" line="42"/>
            <javadoc line="42">
                Mean.                
            </javadoc>
            <declaration name="is" type="double" line="44"/>
            <javadoc line="44">
                Inverse of the standard deviation.                
            </javadoc>
            <declaration name="i2s2" type="double" line="46"/>
            <javadoc line="46">
                Inverse of twice the square of the standard deviation.                
            </javadoc>
            <declaration name="norm" type="double" line="48"/>
            <javadoc line="48">
                Normalization factor.                
            </javadoc>
            <javadoc line="51">
                Gaussian with given normalization factor, mean and standard deviation.                
                <@param>
                    m norm Normalization factor.                    
                </@param>
                <@param>
                    m mean Mean.                    
                </@param>
                <@param>
                    m sigma Standard deviation.                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if {@code sigma <= 0}.                    
                </@throws>
            </javadoc>
            <method name="Gaussian" type="constructor" line="62">
                <params>
                    <param name="norm" type="double"/>
                    <param name="mean" type="double"/>
                    <param name="sigma" type="double"/>
                </params>
                <scope line="63"/>
            </method>
            <javadoc line="73">
                Normalized gaussian with given mean and standard deviation.                
                <@param>
                    m mean Mean.                    
                </@param>
                <@param>
                    m sigma Standard deviation.                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if {@code sigma <= 0}.                    
                </@throws>
            </javadoc>
            <method name="Gaussian" type="constructor" line="82">
                <params>
                    <param name="mean" type="double"/>
                    <param name="sigma" type="double"/>
                </params>
            </method>
            <javadoc line="86">
                Normalized gaussian with zero mean and unit standard deviation.                
            </javadoc>
            <method name="Gaussian" type="constructor" line="89"/>
            <javadoc line="93">
                {@inheritDoc}                
            </javadoc>
            <method name="value" type="double" line="94">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="98">
                {@inheritDoc}                
                <@deprecated>
                    d as of 3.1, replaced by {@link #value(DerivativeStructure)}                    
                </@deprecated>
            </javadoc>
            <method name="derivative" type="UnivariateFunction" line="102"/>
            <class name="Parametric" line="106">
                <implements interface="ParametricUnivariateFunction"/>
                <javadoc line="106">
                    Parametric function where the input array contains the parameters of
                      the Gaussian, ordered as follows:
                      &lt;ul&gt;
                      &lt;li&gt;Norm&lt;/li&gt;
                      &lt;li&gt;Mean&lt;/li&gt;
                      &lt;li&gt;Standard deviation&lt;/li&gt;
                      &lt;/ul&gt;                    
                </javadoc>
                <javadoc line="116">
                    Computes the value of the Gaussian at {@code x}.                    
                    <@param>
                        m x Value for which the function must be computed.                        
                    </@param>
                    <@param>
                        m param Values of norm, mean and standard deviation.                        
                    </@param>
                    <@return>
                        n the value of the function.                        
                    </@return>
                    <@throws>
                        s NullArgumentException if {@code param} is {@code null}.                        
                    </@throws>
                    <@throws>
                        s DimensionMismatchException if the size of {@code param} is
                          not 3.                        
                    </@throws>
                    <@throws>
                        s NotStrictlyPositiveException if {@code param[2]} is negative.                        
                    </@throws>
                </javadoc>
                <method name="value" type="double" line="130">
                    <params>
                        <param name="x" type="double"/>
                        <param name="param" type="double"/>
                    </params>
                    <declaration name="diff" type="double" line="133"/>
                    <declaration name="i2s2" type="double" line="134"/>
                </method>
                <javadoc line="138">
                    Computes the value of the gradient at {@code x}.
                      The components of the gradient vector are the partial
                      derivatives of the function with respect to each of the
                      &lt;em&gt;parameters&lt;/em&gt; (norm, mean and standard deviation).                    
                    <@param>
                        m x Value at which the gradient must be computed.                        
                    </@param>
                    <@param>
                        m param Values of norm, mean and standard deviation.                        
                    </@param>
                    <@return>
                        n the gradient vector at {@code x}.                        
                    </@return>
                    <@throws>
                        s NullArgumentException if {@code param} is {@code null}.                        
                    </@throws>
                    <@throws>
                        s DimensionMismatchException if the size of {@code param} is
                          not 3.                        
                    </@throws>
                    <@throws>
                        s NotStrictlyPositiveException if {@code param[2]} is negative.                        
                    </@throws>
                </javadoc>
                <method name="gradient" type="double[]" line="155">
                    <params>
                        <param name="x" type="double"/>
                        <param name="param" type="double"/>
                    </params>
                    <declaration name="norm" type="double" line="158"/>
                    <declaration name="diff" type="double" line="159"/>
                    <declaration name="sigma" type="double" line="160"/>
                    <declaration name="i2s2" type="double" line="161"/>
                    <declaration name="n" type="double" line="163"/>
                    <declaration name="m" type="double" line="164"/>
                    <declaration name="s" type="double" line="165"/>
                </method>
                <javadoc line="170">
                    Validates parameters to ensure they are appropriate for the evaluation of
                      the {@link #value(double,double[])} and {@link #gradient(double,double[])}methods.                    
                    <@param>
                        m param Values of norm, mean and standard deviation.                        
                    </@param>
                    <@throws>
                        s NullArgumentException if {@code param} is {@code null}.                        
                    </@throws>
                    <@throws>
                        s DimensionMismatchException if the size of {@code param} is
                          not 3.                        
                    </@throws>
                    <@throws>
                        s NotStrictlyPositiveException if {@code param[2]} is negative.                        
                    </@throws>
                </javadoc>
                <method name="validateParameters" type="void" line="184">
                    <params>
                        <param name="param" type="double[]"/>
                    </params>
                    <scope line="185"/>
                    <scope line="188"/>
                    <scope line="191"/>
                </method>
            </class>
            <javadoc line="197">
                @param xMinusMean {@code x - mean}.                
                <@param>
                    m norm Normalization factor.                    
                </@param>
                <@param>
                    m i2s2 Inverse of twice the square of the standard deviation.                    
                </@param>
                <@return>
                    n the value of the Gaussian at {@code x}.                    
                </@return>
            </javadoc>
            <method name="value" type="double" line="205">
                <params>
                    <param name="xMinusMean" type="double"/>
                    <param name="norm" type="double"/>
                    <param name="i2s2" type="double"/>
                </params>
            </method>
            <javadoc line="209">
                {@inheritDoc}                
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="value" type="DerivativeStructure" line="213">
                <params>
                    <param name="t" type="DerivativeStructure"/>
                </params>
                <comment line="214">
                    the nth order derivative of the Gaussian has the form:                    
                </comment>
                <comment line="214">
                    dn(g(x)/dxn = (norm / s^n) P_n(u) exp(-u^2/2) with u=(x-m)/s                    
                </comment>
                <comment line="214">
                    where P_n(u) is a degree n polynomial with same parity as n                    
                </comment>
                <comment line="214">
                    P_0(u) = 1, P_1(u) = -u, P_2(u) = u^2 - 1, P_3(u) = -u^3 + 3 u...                    
                </comment>
                <comment line="214">
                    the general recurrence relation for P_n is:                    
                </comment>
                <comment line="214">
                    P_n(u) = P_(n-1)&apos;(u) - u P_(n-1)(u)                    
                </comment>
                <comment line="214">
                    as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array                    
                </comment>
                <declaration name="u" type="double" line="215"/>
                <declaration name="f" type="double[]" line="216"/>
                <declaration name="p" type="double[]" line="225"/>
                <declaration name="u2" type="double" line="227"/>
                <declaration name="coeff" type="double" line="228"/>
                <scope line="229"/>
                <scope line="231">
                    <scope line="233">
                        <declaration name="v" type="double" line="236"/>
                        <scope line="238">
                            <scope line="240"/>
                            <scope line="242"/>
                        </scope>
                        <scope line="246"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>