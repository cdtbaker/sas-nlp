<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.nonstiff">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NoBracketingException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.ode.ExpandableStatefulODE"/>
        <import package="org.apache.commons.math3.ode.MultistepIntegrator"/>
        <class name="AdamsIntegrator" extends="MultistepIntegrator" line="29">
            <javadoc line="29">
                Base class for {@link AdamsBashforthIntegrator Adams-Bashforth} and{@link AdamsMoultonIntegrator Adams-Moulton} integrators.                
                <@version>
                    n $Id: AdamsIntegrator.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <declaration name="transformer" type="AdamsNordsieckTransformer" line="36"/>
            <javadoc line="36">
                Transformer.                
            </javadoc>
            <javadoc line="39">
                Build an Adams integrator with the given order and step control parameters.                
                <@param>
                    m name name of the method                    
                </@param>
                <@param>
                    m nSteps number of steps of the method excluding the one being computed                    
                </@param>
                <@param>
                    m order order of the method                    
                </@param>
                <@param>
                    m minStep minimal step (sign is irrelevant, regardless of
                     * integration direction, forward or backward), the last step can
                     * be smaller than this                    
                </@param>
                <@param>
                    m maxStep maximal step (sign is irrelevant, regardless of
                     * integration direction, forward or backward), the last step can
                     * be smaller than this                    
                </@param>
                <@param>
                    m scalAbsoluteTolerance allowed absolute error                    
                </@param>
                <@param>
                    m scalRelativeTolerance allowed relative error                    
                </@param>
                <@exception>
                    n NumberIsTooSmallException if order is 1 or less                    
                </@exception>
            </javadoc>
            <method name="AdamsIntegrator" type="constructor" line="58"/>
            <javadoc line="64">
                Build an Adams integrator with the given order and step control parameters.                
                <@param>
                    m name name of the method                    
                </@param>
                <@param>
                    m nSteps number of steps of the method excluding the one being computed                    
                </@param>
                <@param>
                    m order order of the method                    
                </@param>
                <@param>
                    m minStep minimal step (sign is irrelevant, regardless of
                     * integration direction, forward or backward), the last step can
                     * be smaller than this                    
                </@param>
                <@param>
                    m maxStep maximal step (sign is irrelevant, regardless of
                     * integration direction, forward or backward), the last step can
                     * be smaller than this                    
                </@param>
                <@param>
                    m vecAbsoluteTolerance allowed absolute error                    
                </@param>
                <@param>
                    m vecRelativeTolerance allowed relative error                    
                </@param>
                <@exception>
                    n IllegalArgumentException if order is 1 or less                    
                </@exception>
            </javadoc>
            <method name="AdamsIntegrator" type="constructor" line="83"/>
            <method name="integrate" type="void" line="89"/>
            <javadoc line="89">
                {@inheritDoc}                
            </javadoc>
            <javadoc line="95">
                {@inheritDoc}                
            </javadoc>
            <method name="initializeHighOrderDerivatives" type="Array2DRowRealMatrix" line="99"/>
            <javadoc line="103">
                Update the high order scaled derivatives for Adams integrators (phase 1).
                 * &lt;p&gt;The complete update of high order derivatives has a form similar to:
                 * &lt;pre&gt;
                 * r&lt;sub&gt;n+1&lt;/sub&gt; = (s&lt;sub&gt;1&lt;/sub&gt;(n) - s&lt;sub&gt;1&lt;/sub&gt;(n+1)) P&lt;sup&gt;-1&lt;/sup&gt; u + P&lt;sup&gt;-1&lt;/sup&gt; A P r&lt;sub&gt;n&lt;/sub&gt;
                 * &lt;/pre&gt;
                 * this method computes the P&lt;sup&gt;-1&lt;/sup&gt; A P r&lt;sub&gt;n&lt;/sub&gt; part.&lt;/p&gt;                
                <@param>
                    m highOrder high order scaled derivatives
                     * (h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))                    
                </@param>
                <@return>
                    n updated high order derivatives                    
                </@return>
                <@see>
                    e #updateHighOrderDerivativesPhase2(double[],double[],Array2DRowRealMatrix)                    
                </@see>
            </javadoc>
            <method name="updateHighOrderDerivativesPhase1" type="Array2DRowRealMatrix" line="114"/>
            <javadoc line="118">
                Update the high order scaled derivatives Adams integrators (phase 2).
                 * &lt;p&gt;The complete update of high order derivatives has a form similar to:
                 * &lt;pre&gt;
                 * r&lt;sub&gt;n+1&lt;/sub&gt; = (s&lt;sub&gt;1&lt;/sub&gt;(n) - s&lt;sub&gt;1&lt;/sub&gt;(n+1)) P&lt;sup&gt;-1&lt;/sup&gt; u + P&lt;sup&gt;-1&lt;/sup&gt; A P r&lt;sub&gt;n&lt;/sub&gt;
                 * &lt;/pre&gt;
                 * this method computes the (s&lt;sub&gt;1&lt;/sub&gt;(n) - s&lt;sub&gt;1&lt;/sub&gt;(n+1)) P&lt;sup&gt;-1&lt;/sup&gt; u part.&lt;/p&gt;
                 * &lt;p&gt;Phase 1 of the update must already have been performed.&lt;/p&gt;                
                <@param>
                    m start first order scaled derivatives at step start                    
                </@param>
                <@param>
                    m end first order scaled derivatives at step end                    
                </@param>
                <@param>
                    m highOrder high order scaled derivatives, will be modified
                     * (h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))                    
                </@param>
                <@see>
                    e #updateHighOrderDerivativesPhase1(Array2DRowRealMatrix)                    
                </@see>
            </javadoc>
            <method name="updateHighOrderDerivativesPhase2" type="void" line="133"/>
        </class>
    </source>