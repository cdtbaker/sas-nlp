<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.util.Collection"/>
        <import package="java.util.concurrent.CopyOnWriteArrayList"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <class name="IterationManager" line="24">
            <javadoc line="24">
                This abstract class provides a general framework for managing iterative
                 * algorithms. The maximum number of iterations can be set, and methods are
                 * provided to monitor the current iteration count. A lightweight event
                 * framework is also provided.                
                <@version>
                    n $Id: IterationManager.java 1422313 2012-12-15 18:53:41Z psteitz $                    
                </@version>
            </javadoc>
            <declaration name="iterations" type="Incrementor" line="34"/>
            <javadoc line="34">
                Keeps a count of the number of iterations.                
            </javadoc>
            <declaration name="listeners" type="Collection&lt;IterationListener&gt;" line="37"/>
            <javadoc line="37">
                The collection of all listeners attached to this iterative algorithm.                
            </javadoc>
            <javadoc line="40">
                Creates a new instance of this class.                
                <@param>
                    m maxIterations the maximum number of iterations                    
                </@param>
            </javadoc>
            <method name="IterationManager" type="constructor" line="45"/>
            <javadoc line="50">
                Creates a new instance of this class.                
                <@param>
                    m maxIterations the maximum number of iterations                    
                </@param>
                <@param>
                    m callBack the function to be called when the maximum number of
                     * iterations has been reached                    
                </@param>
                <@throws>
                    s org.apache.commons.math3.exception.NullArgumentException if {@code callBack} is {@code null}                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="IterationManager" type="constructor" line="60"/>
            <javadoc line="65">
                Attaches a listener to this manager.                
                <@param>
                    m listener A {@code IterationListener} object.                    
                </@param>
            </javadoc>
            <method name="addIterationListener" type="void" line="70"/>
            <javadoc line="74">
                Informs all registered listeners that the initial phase (prior to the
                 * main iteration loop) has been completed.                
                <@param>
                    m e The {@link IterationEvent} object.                    
                </@param>
            </javadoc>
            <method name="fireInitializationEvent" type="void" line="80">
                <scope line="81"/>
            </method>
            <javadoc line="86">
                Informs all registered listeners that a new iteration (in the main
                 * iteration loop) has been performed.                
                <@param>
                    m e The {@link IterationEvent} object.                    
                </@param>
            </javadoc>
            <method name="fireIterationPerformedEvent" type="void" line="92">
                <scope line="93"/>
            </method>
            <javadoc line="98">
                Informs all registered listeners that a new iteration (in the main
                 * iteration loop) has been started.                
                <@param>
                    m e The {@link IterationEvent} object.                    
                </@param>
            </javadoc>
            <method name="fireIterationStartedEvent" type="void" line="104">
                <scope line="105"/>
            </method>
            <javadoc line="110">
                Informs all registered listeners that the final phase (post-iterations)
                 * has been completed.                
                <@param>
                    m e The {@link IterationEvent} object.                    
                </@param>
            </javadoc>
            <method name="fireTerminationEvent" type="void" line="116">
                <scope line="117"/>
            </method>
            <javadoc line="122">
                Returns the number of iterations of this solver, 0 if no iterations has
                 * been performed yet.                
                <@return>
                    n the number of iterations.                    
                </@return>
            </javadoc>
            <method name="getIterations" type="int" line="128"/>
            <javadoc line="132">
                Returns the maximum number of iterations.                
                <@return>
                    n the maximum number of iterations.                    
                </@return>
            </javadoc>
            <method name="getMaxIterations" type="int" line="137"/>
            <javadoc line="141">
                Increments the iteration count by one, and throws an exception if the
                 * maximum number of iterations is reached. This method should be called at
                 * the beginning of a new iteration.                
                <@throws>
                    s MaxCountExceededException if the maximum number of iterations is
                     * reached.                    
                </@throws>
            </javadoc>
            <method name="incrementIterationCount" type="void" line="150"/>
            <javadoc line="154">
                Removes the specified iteration listener from the list of listeners
                 * currently attached to {@code this} object. Attempting to remove a
                 * listener which was &lt;em&gt;not&lt;/em&gt; previously registered does not cause any
                 * error.                
                <@param>
                    m listener The {@link IterationListener} to be removed.                    
                </@param>
            </javadoc>
            <method name="removeIterationListener" type="void" line="162"/>
            <javadoc line="166">
                Sets the iteration count to 0. This method must be called during the
                 * initial phase.                
            </javadoc>
            <method name="resetIterationCount" type="void" line="170"/>
        </class>
    </source>