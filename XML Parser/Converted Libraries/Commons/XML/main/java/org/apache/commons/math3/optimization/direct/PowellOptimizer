<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.direct">
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.optimization.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optimization.MultivariateOptimizer"/>
        <import package="org.apache.commons.math3.optimization.univariate.BracketFinder"/>
        <import package="org.apache.commons.math3.optimization.univariate.BrentOptimizer"/>
        <import package="org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair"/>
        <import package="org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker"/>
        <class name="PowellOptimizer" extends="BaseAbstractMultivariateOptimizer<MultivariateFunction>" line="35">
            <implements interface="MultivariateOptimizer"/>
            <javadoc line="35">
                Powell algorithm.
                 * This code is translated and adapted from the Python version of this
                 * algorithm (as implemented in module {@code optimize.py} v0.5 of
                 * &lt;em&gt;SciPy&lt;/em&gt;).
                 * &lt;br/&gt;
                 * The default stopping criterion is based on the differences of the
                 * function value between two successive iterations. It is however possible
                 * to define a custom convergence checker that might terminate the algorithm
                 * earlier.
                 * &lt;br/&gt;
                 * The internal line search optimizer is a {@link BrentOptimizer} with a
                 * convergence checker set to {@link SimpleUnivariateValueChecker}.                
                <@version>
                    n $Id: PowellOptimizer.java 1462503 2013-03-29 15:48:27Z luc $                    
                </@version>
                <@deprecated>
                    d As of 3.1 (to be removed in 4.0).                    
                </@deprecated>
                <@since>
                    e 2.2                    
                </@since>
            </javadoc>
            <declaration name="MIN_RELATIVE_TOLERANCE" type="double" line="57"/>
            <javadoc line="57">
                Minimum relative tolerance.                
            </javadoc>
            <declaration name="relativeThreshold" type="double" line="61"/>
            <javadoc line="61">
                Relative threshold.                
            </javadoc>
            <declaration name="absoluteThreshold" type="double" line="65"/>
            <javadoc line="65">
                Absolute threshold.                
            </javadoc>
            <declaration name="line" type="LineSearch" line="69"/>
            <javadoc line="69">
                Line search.                
            </javadoc>
            <javadoc line="74">
                This constructor allows to specify a user-defined convergence checker,
                 * in addition to the parameters that control the default convergence
                 * checking procedure.
                 * &lt;br/&gt;
                 * The internal line search tolerances are set to the square-root of their
                 * corresponding value in the multivariate optimizer.                
                <@param>
                    m rel Relative threshold.                    
                </@param>
                <@param>
                    m abs Absolute threshold.                    
                </@param>
                <@param>
                    m checker Convergence checker.                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if {@code abs <= 0}.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if {@code rel < 2 * Math.ulp(1d)}.                    
                </@throws>
            </javadoc>
            <method name="PowellOptimizer" type="constructor" line="90"/>
            <javadoc line="94">
                This constructor allows to specify a user-defined convergence checker,
                 * in addition to the parameters that control the default convergence
                 * checking procedure and the line search tolerances.                
                <@param>
                    m rel Relative threshold for this optimizer.                    
                </@param>
                <@param>
                    m abs Absolute threshold for this optimizer.                    
                </@param>
                <@param>
                    m lineRel Relative threshold for the internal line search optimizer.                    
                </@param>
                <@param>
                    m lineAbs Absolute threshold for the internal line search optimizer.                    
                </@param>
                <@param>
                    m checker Convergence checker.                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if {@code abs <= 0}.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if {@code rel < 2 * Math.ulp(1d)}.                    
                </@throws>
            </javadoc>
            <method name="PowellOptimizer" type="constructor" line="111">
                <comment line="112">
                    Create the line search optimizer.                    
                </comment>
                <scope line="114"/>
                <scope line="117"/>
            </method>
            <javadoc line="128">
                The parameters control the default convergence checking procedure.
                 * &lt;br/&gt;
                 * The internal line search tolerances are set to the square-root of their
                 * corresponding value in the multivariate optimizer.                
                <@param>
                    m rel Relative threshold.                    
                </@param>
                <@param>
                    m abs Absolute threshold.                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if {@code abs <= 0}.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if {@code rel < 2 * Math.ulp(1d)}.                    
                </@throws>
            </javadoc>
            <method name="PowellOptimizer" type="constructor" line="140"/>
            <javadoc line="144">
                Builds an instance with the default convergence checking procedure.                
                <@param>
                    m rel Relative threshold.                    
                </@param>
                <@param>
                    m abs Absolute threshold.                    
                </@param>
                <@param>
                    m lineRel Relative threshold for the internal line search optimizer.                    
                </@param>
                <@param>
                    m lineAbs Absolute threshold for the internal line search optimizer.                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if {@code abs <= 0}.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if {@code rel < 2 * Math.ulp(1d)}.                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="PowellOptimizer" type="constructor" line="158"/>
            <javadoc line="162">
                {@inheritDoc}                
            </javadoc>
            <method name="doOptimize" type="PointValuePair" line="164">
                <declaration name="goal" type="GoalType" line="165"/>
                <declaration name="guess" type="double[]" line="166"/>
                <declaration name="n" type="int" line="167"/>
                <declaration name="direc" type="double[][]" line="169"/>
                <scope line="170"/>
                <declaration name="checker" type="ConvergenceChecker&lt;PointValuePair&gt;" line="174"/>
                <declaration name="x" type="double[]" line="177"/>
                <declaration name="fVal" type="double" line="178"/>
                <declaration name="x1" type="double[]" line="179"/>
                <declaration name="iter" type="int" line="180"/>
                <scope line="181">
                    <declaration name="fX" type="double" line="184"/>
                    <declaration name="fX2" type="double" line="185"/>
                    <declaration name="delta" type="double" line="186"/>
                    <declaration name="bigInd" type="int" line="187"/>
                    <declaration name="alphaMin" type="double" line="188"/>
                    <scope line="190">
                        <declaration name="d" type="double[]" line="191"/>
                        <declaration name="optimum" type="UnivariatePointValuePair" line="195"/>
                        <declaration name="result" type="double[][]" line="198"/>
                        <scope line="201"/>
                    </scope>
                    <declaration name="stop" type="boolean" line="208"/>
                    <declaration name="previous" type="PointValuePair" line="212"/>
                    <declaration name="current" type="PointValuePair" line="213"/>
                    <scope line="214"/>
                    <scope line="217">
                        <scope line="218"/>
                        <scope line="220"/>
                    </scope>
                    <declaration name="d" type="double[]" line="225"/>
                    <declaration name="x2" type="double[]" line="226"/>
                    <scope line="227"/>
                    <scope line="235">
                        <declaration name="t" type="double" line="236"/>
                        <declaration name="temp" type="double" line="237"/>
                        <scope line="242">
                            <declaration name="optimum" type="UnivariatePointValuePair" line="243"/>
                            <declaration name="result" type="double[][]" line="246"/>
                            <declaration name="lastInd" type="int" line="249"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="257">
                Compute a new point (in the original space) and a new direction
                 * vector, resulting from the line search.                
                <@param>
                    m p Point used in the line search.                    
                </@param>
                <@param>
                    m d Direction used in the line search.                    
                </@param>
                <@param>
                    m optimum Optimum found by the line search.                    
                </@param>
                <@return>
                    n a 2-element array containing the new point (at index 0) and
                     * the new direction (at index 1).                    
                </@return>
            </javadoc>
            <method name="newPointAndDirection" type="double[][]" line="269">
                <declaration name="n" type="int" line="270"/>
                <declaration name="nP" type="double[]" line="271"/>
                <declaration name="nD" type="double[]" line="272"/>
                <scope line="273"/>
                <declaration name="result" type="double[][]" line="278"/>
            </method>
            <class name="LineSearch" extends="BrentOptimizer" line="285">
                <javadoc line="285">
                    Class for finding the minimum of the objective function along a given
                     * direction.                    
                </javadoc>
                <declaration name="REL_TOL_UNUSED" type="double" line="290"/>
                <javadoc line="290">
                    Value that will pass the precondition check for {@link BrentOptimizer}but will not pass the convergence check, so that the custom checker
                     * will always decide when to stop the line search.                    
                </javadoc>
                <declaration name="ABS_TOL_UNUSED" type="double" line="296"/>
                <javadoc line="296">
                    Value that will pass the precondition check for {@link BrentOptimizer}but will not pass the convergence check, so that the custom checker
                     * will always decide when to stop the line search.                    
                </javadoc>
                <declaration name="bracket" type="BracketFinder" line="302"/>
                <javadoc line="302">
                    Automatic bracketing.                    
                </javadoc>
                <javadoc line="307">
                    The &quot;BrentOptimizer&quot; default stopping criterion uses the tolerances
                     * to check the domain (point) values, not the function values.
                     * We thus create a custom checker to use function values.                    
                    <@param>
                        m rel Relative threshold.                        
                    </@param>
                    <@param>
                        m abs Absolute threshold.                        
                    </@param>
                </javadoc>
                <method name="LineSearch" type="constructor" line="316"/>
                <javadoc line="322">
                    Find the minimum of the function {@code f(p + alpha * d)}.                    
                    <@param>
                        m p Starting point.                        
                    </@param>
                    <@param>
                        m d Search direction.                        
                    </@param>
                    <@return>
                        n the optimum.                        
                    </@return>
                    <@throws>
                        s org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the number of evaluations is exceeded.                        
                    </@throws>
                </javadoc>
                <method name="search" type="UnivariatePointValuePair" line="331">
                    <comment line="332">
                        Passing &quot;MAX_VALUE&quot; as a dummy value because it is the enclosing                        
                    </comment>
                    <comment line="332">
                        class that counts the number of evaluations (and will eventually                        
                    </comment>
                    <comment line="332">
                        generate the exception).                        
                    </comment>
                    <declaration name="n" type="int" line="332"/>
                    <anonymous_class line="333">
                        <method name="value" type="double" line="334">
                            <declaration name="x" type="double[]" line="335"/>
                            <scope line="336"/>
                            <declaration name="obj" type="double" line="339"/>
                        </method>
                    </anonymous_class>
                    <declaration name="f" type="UnivariateFunction" line="333"/>
                    <declaration name="goal" type="GoalType" line="344"/>
                </method>
            </class>
        </class>
    </source>