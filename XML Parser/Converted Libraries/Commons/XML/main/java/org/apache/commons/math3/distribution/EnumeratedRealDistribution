<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotANumberException"/>
        <import package="org.apache.commons.math3.exception.NotFiniteNumberException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <import package="org.apache.commons.math3.util.Pair"/>
        <class name="EnumeratedRealDistribution" extends="AbstractRealDistribution" line="30">
            <javadoc line="30">
                &lt;p&gt;Implementation of a real-valued {@link EnumeratedDistribution}.
                 * &lt;p&gt;Values with zero-probability are allowed but they do not extend the
                 * support.&lt;br/&gt;
                 * Duplicate values are allowed. Probabilities of duplicate values are combined
                 * when computing cumulative probabilities and statistics.&lt;/p&gt;                
                <@version>
                    n $Id: EnumeratedRealDistribution.java 1456769 2013-03-15 04:51:34Z psteitz $                    
                </@version>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="43"/>
            <javadoc line="43">
                Serializable UID.                
            </javadoc>
            <declaration name="innerDistribution" type="EnumeratedDistribution&lt;Double&gt;" line="46"/>
            <javadoc line="46">
                {@link EnumeratedDistribution} (using the {@link Double} wrapper)
                 * used to generate the pmf.                
            </javadoc>
            <javadoc line="52">
                Create a discrete distribution using the given probability mass function
                 * enumeration.                
                <@param>
                    m singletons array of random variable values.                    
                </@param>
                <@param>
                    m probabilities array of probabilities.                    
                </@param>
                <@throws>
                    s DimensionMismatchException if{@code singletons.length != probabilities.length}                    
                </@throws>
                <@throws>
                    s NotPositiveException if any of the probabilities are negative.                    
                </@throws>
                <@throws>
                    s NotFiniteNumberException if any of the probabilities are infinite.                    
                </@throws>
                <@throws>
                    s NotANumberException if any of the probabilities are NaN.                    
                </@throws>
                <@throws>
                    s MathArithmeticException all of the probabilities are 0.                    
                </@throws>
            </javadoc>
            <method name="EnumeratedRealDistribution" type="constructor" line="67"/>
            <javadoc line="71">
                Create a discrete distribution using the given random number generator
                 * and probability mass function enumeration.                
                <@param>
                    m rng random number generator.                    
                </@param>
                <@param>
                    m singletons array of random variable values.                    
                </@param>
                <@param>
                    m probabilities array of probabilities.                    
                </@param>
                <@throws>
                    s DimensionMismatchException if{@code singletons.length != probabilities.length}                    
                </@throws>
                <@throws>
                    s NotPositiveException if any of the probabilities are negative.                    
                </@throws>
                <@throws>
                    s NotFiniteNumberException if any of the probabilities are infinite.                    
                </@throws>
                <@throws>
                    s NotANumberException if any of the probabilities are NaN.                    
                </@throws>
                <@throws>
                    s MathArithmeticException all of the probabilities are 0.                    
                </@throws>
            </javadoc>
            <method name="EnumeratedRealDistribution" type="constructor" line="88">
                <scope line="90"/>
                <declaration name="samples" type="List&lt;Pair&lt;Double,Double&gt;&gt;" line="94"/>
                <scope line="96"/>
            </method>
            <javadoc line="103">
                {@inheritDoc}                
            </javadoc>
            <method name="probability" type="double" line="107"/>
            <javadoc line="111">
                For a random variable {@code X} whose values are distributed according to
                 * this distribution, this method returns {@code P(X = x)}. In other words,
                 * this method represents the probability mass function (PMF) for the
                 * distribution.                
                <@param>
                    m x the point at which the PMF is evaluated                    
                </@param>
                <@return>
                    n the value of the probability mass function at point {@code x}                    
                </@return>
            </javadoc>
            <method name="density" type="double" line="120"/>
            <javadoc line="124">
                {@inheritDoc}                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="127">
                <declaration name="probability" type="double" line="128"/>
                <scope line="130">
                    <scope line="131"/>
                </scope>
            </method>
            <javadoc line="139">
                {@inheritDoc}                
                <@return>
                    n {@code sum(singletons[i] * probabilities[i])}                    
                </@return>
            </javadoc>
            <method name="getNumericalMean" type="double" line="144">
                <declaration name="mean" type="double" line="145"/>
                <scope line="147"/>
            </method>
            <javadoc line="154">
                {@inheritDoc}                
                <@return>
                    n {@code sum((singletons[i] - mean) ^ 2 * probabilities[i])}                    
                </@return>
            </javadoc>
            <method name="getNumericalVariance" type="double" line="159">
                <declaration name="mean" type="double" line="160"/>
                <declaration name="meanOfSquares" type="double" line="161"/>
                <scope line="163"/>
            </method>
            <javadoc line="171">
                {@inheritDoc}Returns the lowest value with non-zero probability.                
                <@return>
                    n the lowest value with non-zero probability.                    
                </@return>
            </javadoc>
            <method name="getSupportLowerBound" type="double" line="178">
                <declaration name="min" type="double" line="179"/>
                <scope line="180">
                    <scope line="181"/>
                </scope>
            </method>
            <javadoc line="189">
                {@inheritDoc}Returns the highest value with non-zero probability.                
                <@return>
                    n the highest value with non-zero probability.                    
                </@return>
            </javadoc>
            <method name="getSupportUpperBound" type="double" line="196">
                <declaration name="max" type="double" line="197"/>
                <scope line="198">
                    <scope line="199"/>
                </scope>
            </method>
            <javadoc line="207">
                {@inheritDoc}The support of this distribution includes the lower bound.                
                <@return>
                    n {@code true}                    
                </@return>
            </javadoc>
            <method name="isSupportLowerBoundInclusive" type="boolean" line="214"/>
            <javadoc line="218">
                {@inheritDoc}The support of this distribution includes the upper bound.                
                <@return>
                    n {@code true}                    
                </@return>
            </javadoc>
            <method name="isSupportUpperBoundInclusive" type="boolean" line="225"/>
            <javadoc line="229">
                {@inheritDoc}The support of this distribution is connected.                
                <@return>
                    n {@code true}                    
                </@return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="236"/>
            <javadoc line="240">
                {@inheritDoc}                
            </javadoc>
            <method name="sample" type="double" line="244"/>
        </class>
    </source>