<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.events">
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <javadoc line="24">
            Transformer for {@link EventHandler#g(double,double[]) g functions}.            
            <@see>
                e EventFilter                
            </@see>
            <@see>
                e FilterType                
            </@see>
            <@version>
                n $Id: Transformer.java 1458298 2013-03-19 14:09:58Z luc $                
            </@version>
            <@since>
                e 3.2                
            </@since>
        </javadoc>
        <javadoc line="32">
            Transformer computing transformed = 0.
              &lt;p&gt;
              This transformer is used when we initialize the filter, until we get at
              least one non-zero value to select the proper transformer.
              &lt;/p&gt;            
        </javadoc>
        <anonymous_class line="38">
            <javadoc line="39">
                {@inheritDoc}                
            </javadoc>
            <method name="transformed" type="double" line="40">
                <params>
                    <param name="g" type="double"/>
                </params>
            </method>
        </anonymous_class>
        <javadoc line="45">
            Transformer computing transformed = g.
              &lt;p&gt;
              When this transformer is applied, the roots of the original function
              are preserved, with the same {@code increasing/decreasing} status.
              &lt;/p&gt;            
        </javadoc>
        <anonymous_class line="51">
            <javadoc line="52">
                {@inheritDoc}                
            </javadoc>
            <method name="transformed" type="double" line="53">
                <params>
                    <param name="g" type="double"/>
                </params>
            </method>
        </anonymous_class>
        <javadoc line="58">
            Transformer computing transformed = -g.
              &lt;p&gt;
              When this transformer is applied, the roots of the original function
              are preserved, with reversed {@code increasing/decreasing} status.
              &lt;/p&gt;            
        </javadoc>
        <anonymous_class line="64">
            <javadoc line="65">
                {@inheritDoc}                
            </javadoc>
            <method name="transformed" type="double" line="66">
                <params>
                    <param name="g" type="double"/>
                </params>
            </method>
        </anonymous_class>
        <javadoc line="71">
            Transformer computing transformed = min(-{@link Precision#SAFE_MIN}, -g, +g).
              &lt;p&gt;
              When this transformer is applied, the transformed function is
              guaranteed to be always strictly negative (i.e. there are no roots).
              &lt;/p&gt;            
        </javadoc>
        <anonymous_class line="77">
            <javadoc line="78">
                {@inheritDoc}                
            </javadoc>
            <method name="transformed" type="double" line="79">
                <params>
                    <param name="g" type="double"/>
                </params>
            </method>
        </anonymous_class>
        <javadoc line="84">
            Transformer computing transformed = max(+{@link Precision#SAFE_MIN}, -g, +g).
              &lt;p&gt;
              When this transformer is applied, the transformed function is
              guaranteed to be always strictly positive (i.e. there are no roots).
              &lt;/p&gt;            
        </javadoc>
        <anonymous_class line="90">
            <javadoc line="91">
                {@inheritDoc}                
            </javadoc>
            <method name="transformed" type="double" line="92">
                <params>
                    <param name="g" type="double"/>
                </params>
            </method>
        </anonymous_class>
        <method name="transformed" type="double" line="97"/>
        <javadoc line="97">
            Transform value of function g.            
            <@param>
                m g raw value of function g                
            </@param>
            <@return>
                n transformed value of function g                
            </@return>
        </javadoc>
    </source>