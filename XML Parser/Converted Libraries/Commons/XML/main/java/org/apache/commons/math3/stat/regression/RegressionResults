<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.regression">
        <import package="java.io.Serializable"/>
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <class name="RegressionResults" line="25">
            <implements interface="Serializable"/>
            <javadoc line="25">
                Results of a Multiple Linear Regression model fit.                
                <@version>
                    n $Id: RegressionResults.java 1392342 2012-10-01 14:08:52Z psteitz $                    
                </@version>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="SSE_IDX" type="int" line="33"/>
            <javadoc line="33">
                INDEX of Sum of Squared Errors                
            </javadoc>
            <declaration name="SST_IDX" type="int" line="35"/>
            <javadoc line="35">
                INDEX of Sum of Squares of Model                
            </javadoc>
            <declaration name="RSQ_IDX" type="int" line="37"/>
            <javadoc line="37">
                INDEX of R-Squared of regression                
            </javadoc>
            <declaration name="MSE_IDX" type="int" line="39"/>
            <javadoc line="39">
                INDEX of Mean Squared Error                
            </javadoc>
            <declaration name="ADJRSQ_IDX" type="int" line="41"/>
            <javadoc line="41">
                INDEX of Adjusted R Squared                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="43"/>
            <javadoc line="43">
                UID                
            </javadoc>
            <declaration name="parameters" type="double[]" line="45"/>
            <javadoc line="45">
                regression slope parameters                
            </javadoc>
            <declaration name="varCovData" type="double[][]" line="47"/>
            <javadoc line="47">
                variance covariance matrix of parameters                
            </javadoc>
            <declaration name="isSymmetricVCD" type="boolean" line="49"/>
            <javadoc line="49">
                boolean flag for variance covariance matrix in symm compressed storage                
            </javadoc>
            <declaration name="rank" type="int" line="51"/>
            <javadoc line="51">
                rank of the solution                
            </javadoc>
            <declaration name="nobs" type="long" line="54"/>
            <javadoc line="54">
                number of observations on which results are based                
            </javadoc>
            <declaration name="containsConstant" type="boolean" line="56"/>
            <javadoc line="56">
                boolean flag indicator of whether a constant was included                
            </javadoc>
            <declaration name="globalFitInfo" type="double[]" line="58"/>
            <javadoc line="58">
                array storing global results, SSE, MSE, RSQ, adjRSQ                
            </javadoc>
            <javadoc line="61">
                Set the default constructor to private access
                 * to prevent inadvertent instantiation                
            </javadoc>
            <method name="RegressionResults" type="constructor" line="66"/>
            <javadoc line="76">
                Constructor for Regression Results.                
                <@param>
                    m parameters a double array with the regression slope estimates                    
                </@param>
                <@param>
                    m varcov the variance covariance matrix, stored either in a square matrix
                     * or as a compressed                    
                </@param>
                <@param>
                    m isSymmetricCompressed a flag which denotes that the variance covariance
                     * matrix is in symmetric compressed format                    
                </@param>
                <@param>
                    m nobs the number of observations of the regression estimation                    
                </@param>
                <@param>
                    m rank the number of independent variables in the regression                    
                </@param>
                <@param>
                    m sumy the sum of the independent variable                    
                </@param>
                <@param>
                    m sumysq the sum of the squared independent variable                    
                </@param>
                <@param>
                    m sse sum of squared errors                    
                </@param>
                <@param>
                    m containsConstant true model has constant,  false model does not have constant                    
                </@param>
                <@param>
                    m copyData if true a deep copy of all input data is made, if false only references
                     * are copied and the RegressionResults become mutable                    
                </@param>
            </javadoc>
            <method name="RegressionResults" type="constructor" line="99">
                <scope line="100">
                    <scope line="103"/>
                </scope>
                <scope line="106"/>
                <scope line="117"/>
                <scope line="129"/>
                <scope line="133"/>
            </method>
            <javadoc line="139">
                &lt;p&gt;Returns the parameter estimate for the regressor at the given index.&lt;/p&gt;
                 * &lt;p&gt;A redundant regressor will have its redundancy flag set, as well as
                 * a parameters estimated equal to {@code Double.NaN}&lt;/p&gt;                
                <@param>
                    m index Index.                    
                </@param>
                <@return>
                    n the parameters estimated for regressor at index.                    
                </@return>
                <@throws>
                    s OutOfRangeException if {@code index} is not in the interval{@code [0, number of parameters)}.                    
                </@throws>
            </javadoc>
            <method name="getParameterEstimate" type="double" line="150">
                <scope line="151"/>
                <scope line="154"/>
            </method>
            <javadoc line="160">
                &lt;p&gt;Returns a copy of the regression parameters estimates.&lt;/p&gt;
                 * &lt;p&gt;The parameter estimates are returned in the natural order of the data.&lt;/p&gt;
                 * &lt;p&gt;A redundant regressor will have its redundancy flag set, as will
                 * a parameter estimate equal to {@code Double.NaN}.&lt;/p&gt;                
                <@return>
                    n array of parameter estimates, null if no estimation occurred                    
                </@return>
            </javadoc>
            <method name="getParameterEstimates" type="double[]" line="170">
                <scope line="171"/>
            </method>
            <javadoc line="177">
                Returns the &lt;a href=&quot;http://www.xycoon.com/standerrorb(1).htm&quot;&gt;standard
                 * error of the parameter estimate at index&lt;/a&gt;,
                 * usually denoted s(b&lt;sub&gt;index&lt;/sub&gt;).                
                <@param>
                    m index Index.                    
                </@param>
                <@return>
                    n the standard errors associated with parameters estimated at index.                    
                </@return>
                <@throws>
                    s OutOfRangeException if {@code index} is not in the interval{@code [0, number of parameters)}.                    
                </@throws>
            </javadoc>
            <method name="getStdErrorOfEstimate" type="double" line="187">
                <scope line="188"/>
                <scope line="191"/>
                <declaration name="var" type="double" line="194"/>
                <scope line="195"/>
            </method>
            <javadoc line="201">
                &lt;p&gt;Returns the &lt;a href=&quot;http://www.xycoon.com/standerrorb(1).htm&quot;&gt;standard
                 * error of the parameter estimates&lt;/a&gt;,
                 * usually denoted s(b&lt;sub&gt;i&lt;/sub&gt;).&lt;/p&gt;
                 * &lt;p&gt;If there are problems with an ill conditioned design matrix then the regressor
                 * which is redundant will be assigned &lt;code&gt;Double.NaN&lt;/code&gt;. &lt;/p&gt;                
                <@return>
                    n an array standard errors associated with parameters estimates,
                     * null if no estimation occurred                    
                </@return>
            </javadoc>
            <method name="getStdErrorOfEstimates" type="double[]" line="212">
                <scope line="213"/>
                <declaration name="se" type="double[]" line="216"/>
                <scope line="217">
                    <declaration name="var" type="double" line="218"/>
                    <scope line="219"/>
                </scope>
            </method>
            <javadoc line="228">
                &lt;p&gt;Returns the covariance between regression parameters i and j.&lt;/p&gt;
                 * &lt;p&gt;If there are problems with an ill conditioned design matrix then the covariance
                 * which involves redundant columns will be assigned {@code Double.NaN}. &lt;/p&gt;                
                <@param>
                    m i {@code i}th regression parameter.                    
                </@param>
                <@param>
                    m j {@code j}th regression parameter.                    
                </@param>
                <@return>
                    n the covariance of the parameter estimates.                    
                </@return>
                <@throws>
                    s OutOfRangeException if {@code i} or {@code j} is not in the
                     * interval {@code [0, number of parameters)}.                    
                </@throws>
            </javadoc>
            <method name="getCovarianceOfParameters" type="double" line="240">
                <scope line="241"/>
                <scope line="244"/>
                <scope line="247"/>
            </method>
            <javadoc line="253">
                &lt;p&gt;Returns the number of parameters estimated in the model.&lt;/p&gt;
                 * &lt;p&gt;This is the maximum number of regressors, some techniques may drop
                 * redundant parameters&lt;/p&gt;                
                <@return>
                    n number of regressors, -1 if not estimated                    
                </@return>
            </javadoc>
            <method name="getNumberOfParameters" type="int" line="261">
                <scope line="262"/>
            </method>
            <javadoc line="268">
                Returns the number of observations added to the regression model.                
                <@return>
                    n Number of observations, -1 if an error condition prevents estimation                    
                </@return>
            </javadoc>
            <method name="getN" type="long" line="273"/>
            <javadoc line="277">
                &lt;p&gt;Returns the sum of squared deviations of the y values about their mean.&lt;/p&gt;
                 * &lt;p&gt;This is defined as SSTO
                 * &lt;a href=&quot;http://www.xycoon.com/SumOfSquares.htm&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
                 * &lt;p&gt;If {@code n &lt; 2}, this returns {@code Double.NaN}.&lt;/p&gt;                
                <@return>
                    n sum of squared deviations of y values                    
                </@return>
            </javadoc>
            <method name="getTotalSumSquares" type="double" line="287"/>
            <javadoc line="291">
                &lt;p&gt;Returns the sum of squared deviations of the predicted y values about
                 * their mean (which equals the mean of y).&lt;/p&gt;
                 * &lt;p&gt;This is usually abbreviated SSR or SSM.  It is defined as SSM
                 * &lt;a href=&quot;http://www.xycoon.com/SumOfSquares.htm&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
                 * &lt;p&gt;&lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;At least two observations (with at least two different x values)
                 * must have been added before invoking this method. If this method is
                 * invoked before a model can be estimated, &lt;code&gt;Double.NaN&lt;/code&gt; is
                 * returned.
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@return>
                    n sum of squared deviations of predicted y values                    
                </@return>
            </javadoc>
            <method name="getRegressionSumSquares" type="double" line="307"/>
            <javadoc line="311">
                &lt;p&gt;Returns the &lt;a href=&quot;http://www.xycoon.com/SumOfSquares.htm&quot;&gt;
                 * sum of squared errors&lt;/a&gt; (SSE) associated with the regression
                 * model.&lt;/p&gt;
                 * &lt;p&gt;The return value is constrained to be non-negative - i.e., if due to
                 * rounding errors the computational formula returns a negative result,
                 * 0 is returned.&lt;/p&gt;
                 * &lt;p&gt;&lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;numberOfParameters data pairs
                 * must have been added before invoking this method. If this method is
                 * invoked before a model can be estimated, &lt;code&gt;Double,NaN&lt;/code&gt; is
                 * returned.
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@return>
                    n sum of squared errors associated with the regression model                    
                </@return>
            </javadoc>
            <method name="getErrorSumSquares" type="double" line="329"/>
            <javadoc line="333">
                &lt;p&gt;Returns the sum of squared errors divided by the degrees of freedom,
                 * usually abbreviated MSE.&lt;/p&gt;
                 * &lt;p&gt;If there are fewer than &lt;strong&gt;numberOfParameters + 1&lt;/strong&gt; data pairs in the model,
                 * or if there is no variation in &lt;code&gt;x&lt;/code&gt;, this returns
                 * &lt;code&gt;Double.NaN&lt;/code&gt;.&lt;/p&gt;                
                <@return>
                    n sum of squared deviations of y values                    
                </@return>
            </javadoc>
            <method name="getMeanSquareError" type="double" line="343"/>
            <javadoc line="347">
                &lt;p&gt;Returns the &lt;a href=&quot;http://www.xycoon.com/coefficient1.htm&quot;&gt;
                 * coefficient of multiple determination&lt;/a&gt;,
                 * usually denoted r-square.&lt;/p&gt;
                 * &lt;p&gt;&lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;At least numberOfParameters observations (with at least numberOfParameters different x values)
                 * must have been added before invoking this method. If this method is
                 * invoked before a model can be estimated, {@code Double,NaN} is
                 * returned.
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@return>
                    n r-square, a double in the interval [0, 1]                    
                </@return>
            </javadoc>
            <method name="getRSquared" type="double" line="361"/>
            <javadoc line="365">
                &lt;p&gt;Returns the adjusted R-squared statistic, defined by the formula &lt;pre&gt;
                 * R&lt;sup&gt;2&lt;/sup&gt;&lt;sub&gt;adj&lt;/sub&gt; = 1 - [SSR (n - 1)] / [SSTO (n - p)]
                 * &lt;/pre&gt;
                 * where SSR is the sum of squared residuals},
                 * SSTO is the total sum of squares}, n is the number
                 * of observations and p is the number of parameters estimated (including the intercept).&lt;/p&gt;
                 * &lt;p&gt;If the regression is estimated without an intercept term, what is returned is &lt;pre&gt;
                 * &lt;code&gt; 1 - (1 - {@link #getRSquared()} ) * (n / (n - p)) &lt;/code&gt;
                 * &lt;/pre&gt;&lt;/p&gt;                
                <@return>
                    n adjusted R-Squared statistic                    
                </@return>
            </javadoc>
            <method name="getAdjustedRSquared" type="double" line="379"/>
            <javadoc line="383">
                Returns true if the regression model has been computed including an intercept.
                 * In this case, the coefficient of the intercept is the first element of the{@link #getParameterEstimates() parameter estimates}.                
                <@return>
                    n true if the model has an intercept term                    
                </@return>
            </javadoc>
            <method name="hasIntercept" type="boolean" line="389"/>
            <javadoc line="393">
                Gets the i-jth element of the variance-covariance matrix.                
                <@param>
                    m i first variable index                    
                </@param>
                <@param>
                    m j second variable index                    
                </@param>
                <@return>
                    n the requested variance-covariance matrix entry                    
                </@return>
            </javadoc>
            <method name="getVcvElement" type="double" line="400">
                <scope line="401">
                    <scope line="402">
                        <scope line="404"/>
                        <scope line="406"/>
                        <scope line="408"/>
                    </scope>
                    <scope line="411">
                        <scope line="412"/>
                        <scope line="414"/>
                    </scope>
                </scope>
                <scope line="418"/>
            </method>
        </class>
    </source>