<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.direct">
        <import package="java.util.Arrays"/>
        <import package="java.util.Comparator"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.ZeroException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.optimization.OptimizationData"/>
        <class name="AbstractSimplex" line="34">
            <implements interface="OptimizationData"/>
            <javadoc line="34">
                This class implements the simplex concept.
                 * It is intended to be used in conjunction with {@link SimplexOptimizer}.
                 * &lt;br/&gt;
                 * The initial configuration of the simplex is set by the constructors{@link #AbstractSimplex(double[])} or {@link #AbstractSimplex(double[][])}.
                 * The other {@link #AbstractSimplex(int) constructor} will set all steps
                 * to 1, thus building a default configuration from a unit hypercube.
                 * &lt;br/&gt;
                 * Users &lt;em&gt;must&lt;/em&gt; call the {@link #build(double[]) build} method in order
                 * to create the data structure that will be acted on by the other methods of
                 * this class.                
                <@see>
                    e SimplexOptimizer                    
                </@see>
                <@version>
                    n $Id: AbstractSimplex.java 1422230 2012-12-15 12:11:13Z erans $                    
                </@version>
                <@deprecated>
                    d As of 3.1 (to be removed in 4.0).                    
                </@deprecated>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="simplex" type="PointValuePair[]" line="54"/>
            <javadoc line="54">
                Simplex.                
            </javadoc>
            <declaration name="startConfiguration" type="double[][]" line="56"/>
            <javadoc line="56">
                Start simplex configuration.                
            </javadoc>
            <declaration name="dimension" type="int" line="58"/>
            <javadoc line="58">
                Simplex dimension (must be equal to {@code simplex.length - 1}).                
            </javadoc>
            <javadoc line="61">
                Build a unit hypercube simplex.                
                <@param>
                    m n Dimension of the simplex.                    
                </@param>
            </javadoc>
            <method name="AbstractSimplex" type="constructor" line="66"/>
            <javadoc line="70">
                Build a hypercube simplex with the given side length.                
                <@param>
                    m n Dimension of the simplex.                    
                </@param>
                <@param>
                    m sideLength Length of the sides of the hypercube.                    
                </@param>
            </javadoc>
            <method name="AbstractSimplex" type="constructor" line="77"/>
            <javadoc line="81">
                The start configuration for simplex is built from a box parallel to
                 * the canonical axes of the space. The simplex is the subset of vertices
                 * of a box parallel to the canonical axes. It is built as the path followed
                 * while traveling from one vertex of the box to the diagonally opposite
                 * vertex moving only along the box edges. The first vertex of the box will
                 * be located at the start point of the optimization.
                 * As an example, in dimension 3 a simplex has 4 vertices. Setting the
                 * steps to (1, 10, 2) and the start point to (1, 1, 1) would imply the
                 * start simplex would be: { (1, 1, 1), (2, 1, 1), (2, 11, 1), (2, 11, 3) }.
                 * The first vertex would be set to the start point at (1, 1, 1) and the
                 * last vertex would be set to the diagonally opposite vertex at (2, 11, 3).                
                <@param>
                    m steps Steps along the canonical axes representing box edges. They
                     * may be negative but not zero.                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code steps} is {@code null}.                    
                </@throws>
                <@throws>
                    s ZeroException if one of the steps is zero.                    
                </@throws>
            </javadoc>
            <method name="AbstractSimplex" type="constructor" line="99">
                <comment line="100">
                    Only the relative position of the n final vertices with respect                    
                </comment>
                <comment line="100">
                    to the first one are stored.                    
                </comment>
                <scope line="100"/>
                <scope line="103"/>
                <scope line="111">
                    <declaration name="vertexI" type="double[]" line="112"/>
                    <scope line="113">
                        <scope line="114"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="122">
                The real initial simplex will be set up by moving the reference
                 * simplex such that its first point is located at the start point of the
                 * optimization.                
                <@param>
                    m referenceSimplex Reference simplex.                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if the reference simplex does not
                     * contain at least one point.                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if there is a dimension mismatch
                     * in the reference simplex.                    
                </@throws>
                <@throws>
                    s IllegalArgumentException if one of its vertices is duplicated.                    
                </@throws>
            </javadoc>
            <method name="AbstractSimplex" type="constructor" line="134">
                <comment line="135">
                    Only the relative position of the n final vertices with respect                    
                </comment>
                <comment line="135">
                    to the first one are stored.                    
                </comment>
                <comment line="135">
                    Loop over vertices.                    
                </comment>
                <scope line="135"/>
                <declaration name="ref0" type="double[]" line="144"/>
                <scope line="147">
                    <declaration name="refI" type="double[]" line="148"/>
                    <scope line="151"/>
                    <scope line="154">
                        <declaration name="refJ" type="double[]" line="155"/>
                        <declaration name="allEquals" type="boolean" line="156"/>
                        <scope line="157">
                            <scope line="158"/>
                        </scope>
                        <scope line="163"/>
                    </scope>
                    <scope line="170">
                        <declaration name="confI" type="double[]" line="171"/>
                        <scope line="172"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="179">
                Get simplex dimension.                
                <@return>
                    n the dimension of the simplex.                    
                </@return>
            </javadoc>
            <method name="getDimension" type="int" line="184"/>
            <javadoc line="188">
                Get simplex size.
                 * After calling the {@link #build(double[]) build} method, this method will
                 * will be equivalent to {@code getDimension() + 1}.                
                <@return>
                    n the size of the simplex.                    
                </@return>
            </javadoc>
            <method name="getSize" type="int" line="195"/>
            <method name="iterate" type="void" line="199"/>
            <javadoc line="199">
                Compute the next simplex of the algorithm.                
                <@param>
                    m evaluationFunction Evaluation function.                    
                </@param>
                <@param>
                    m comparator Comparator to use to sort simplex vertices from best
                     * to worst.                    
                </@param>
                <@throws>
                    s org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the algorithm fails to converge.                    
                </@throws>
            </javadoc>
            <javadoc line="211">
                Build an initial simplex.                
                <@param>
                    m startPoint First point of the simplex.                    
                </@param>
                <@throws>
                    s DimensionMismatchException if the start point does not match
                     * simplex dimension.                    
                </@throws>
            </javadoc>
            <method name="build" type="void" line="218">
                <comment line="219">
                    Set first vertex.                    
                </comment>
                <comment line="219">
                    Set remaining vertices.                    
                </comment>
                <scope line="219"/>
                <scope line="228">
                    <declaration name="confI" type="double[]" line="229"/>
                    <declaration name="vertexI" type="double[]" line="230"/>
                    <scope line="231"/>
                </scope>
            </method>
            <javadoc line="238">
                Evaluate all the non-evaluated points of the simplex.                
                <@param>
                    m evaluationFunction Evaluation function.                    
                </@param>
                <@param>
                    m comparator Comparator to use to sort simplex vertices from best to worst.                    
                </@param>
                <@throws>
                    s org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximal number of evaluations is exceeded.                    
                </@throws>
            </javadoc>
            <method name="evaluate" type="void" line="247">
                <comment line="248">
                    Evaluate the objective function at all non-evaluated simplex points.                    
                </comment>
                <comment line="248">
                    Sort the simplex from best to worst.                    
                </comment>
                <scope line="249">
                    <declaration name="vertex" type="PointValuePair" line="250"/>
                    <declaration name="point" type="double[]" line="251"/>
                    <scope line="252"/>
                </scope>
            </method>
            <javadoc line="261">
                Replace the worst point of the simplex by a new point.                
                <@param>
                    m pointValuePair Point to insert.                    
                </@param>
                <@param>
                    m comparator Comparator to use for sorting the simplex vertices
                     * from best to worst.                    
                </@param>
            </javadoc>
            <method name="replaceWorstPoint" type="void" line="269">
                <scope line="270">
                    <scope line="271">
                        <declaration name="tmp" type="PointValuePair" line="272"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="280">
                Get the points of the simplex.                
                <@return>
                    n all the simplex points.                    
                </@return>
            </javadoc>
            <method name="getPoints" type="PointValuePair[]" line="285">
                <declaration name="copy" type="PointValuePair[]" line="286"/>
            </method>
            <javadoc line="291">
                Get the simplex point stored at the requested {@code index}.                
                <@param>
                    m index Location.                    
                </@param>
                <@return>
                    n the point at location {@code index}.                    
                </@return>
            </javadoc>
            <method name="getPoint" type="PointValuePair" line="297">
                <scope line="299"/>
            </method>
            <javadoc line="305">
                Store a new point at location {@code index}.
                 * Note that no deep-copy of {@code point} is performed.                
                <@param>
                    m index Location.                    
                </@param>
                <@param>
                    m point New value.                    
                </@param>
            </javadoc>
            <method name="setPoint" type="void" line="312">
                <scope line="314"/>
            </method>
            <javadoc line="320">
                Replace all points.
                 * Note that no deep-copy of {@code points} is performed.                
                <@param>
                    m points New Points.                    
                </@param>
            </javadoc>
            <method name="setPoints" type="void" line="326">
                <scope line="327"/>
            </method>
            <javadoc line="333">
                Create steps for a unit hypercube.                
                <@param>
                    m n Dimension of the hypercube.                    
                </@param>
                <@param>
                    m sideLength Length of the sides of the hypercube.                    
                </@param>
                <@return>
                    n the steps.                    
                </@return>
            </javadoc>
            <method name="createHypercubeSteps" type="double[]" line="341">
                <declaration name="steps" type="double[]" line="342"/>
                <scope line="343"/>
            </method>
        </class>
    </source>