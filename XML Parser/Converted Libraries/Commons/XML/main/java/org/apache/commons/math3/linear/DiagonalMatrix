<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="DiagonalMatrix" line="30">
            <extends class="AbstractRealMatrix"/>
            <implements interface="Serializable"/>
            <javadoc line="30">
                Implementation of a diagonal matrix.                
                <@version>
                    n $Id$                    
                </@version>
                <@since>
                    e 3.1.1                    
                </@since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="38"/>
            <javadoc line="38">
                Serializable version identifier.                
            </javadoc>
            <declaration name="data" type="double[]" line="40"/>
            <javadoc line="40">
                Entries of the diagonal.                
            </javadoc>
            <javadoc line="43">
                Creates a matrix with the supplied dimension.                
                <@param>
                    m dimension Number of rows and columns in the new matrix.                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if the dimension is
                      not positive.                    
                </@throws>
            </javadoc>
            <method name="DiagonalMatrix" type="constructor" line="51">
                <params>
                    <param name="dimension" type="int"/>
                </params>
            </method>
            <javadoc line="56">
                Creates a matrix using the input array as the underlying data.
                  &lt;br/&gt;
                  The input array is copied, not referenced.                
                <@param>
                    m d Data for the new matrix.                    
                </@param>
            </javadoc>
            <method name="DiagonalMatrix" type="constructor" line="63">
                <params>
                    <param name="d" type="double[]"/>
                </params>
            </method>
            <javadoc line="67">
                Creates a matrix using the input array as the underlying data.
                  &lt;br/&gt;
                  If an array is created specially in order to be embedded in a
                  this instance and not used directly, the {@code copyArray} may be
                  set to {@code false}.
                  This will prevent the copying and improve performance as no new
                  array will be built and no data will be copied.                
                <@param>
                    m d Data for new matrix.                    
                </@param>
                <@param>
                    m copyArray if {@code true}, the input array will be copied,
                      otherwise it will be referenced.                    
                </@param>
                <@exception>
                    n NullArgumentException if d is null                    
                </@exception>
            </javadoc>
            <method name="DiagonalMatrix" type="constructor" line="82">
                <params>
                    <param name="d" type="double[]"/>
                    <param name="copyArray" type="boolean"/>
                </params>
            </method>
            <javadoc line="87">
                {@inheritDoc}                
                <@throws>
                    s DimensionMismatchException if the requested dimensions are not equal.                    
                </@throws>
            </javadoc>
            <method name="createMatrix" type="RealMatrix" line="96">
                <params>
                    <param name="rowDimension" type="int"/>
                    <param name="columnDimension" type="int"/>
                </params>
                <scope line="97"/>
            </method>
            <javadoc line="104">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="RealMatrix" line="106"/>
            <javadoc line="110">
                Compute the sum of {@code this} and {@code m}.                
                <@param>
                    m m Matrix to be added.                    
                </@param>
                <@return>
                    n {@code this + m}.                    
                </@return>
                <@throws>
                    s MatrixDimensionMismatchException if {@code m} is not the same
                      size as {@code this}.                    
                </@throws>
            </javadoc>
            <method name="add" type="DiagonalMatrix" line="119">
                <params>
                    <param name="m" type="DiagonalMatrix"/>
                </params>
                <comment line="120">
                    Safety check.                    
                </comment>
                <declaration name="dim" type="int" line="123"/>
                <declaration name="outData" type="double[]" line="124"/>
                <scope line="125"/>
            </method>
            <javadoc line="132">
                Returns {@code this} minus {@code m}.                
                <@param>
                    m m Matrix to be subtracted.                    
                </@param>
                <@return>
                    n {@code this - m}                    
                </@return>
                <@throws>
                    s MatrixDimensionMismatchException if {@code m} is not the same
                      size as {@code this}.                    
                </@throws>
            </javadoc>
            <method name="subtract" type="DiagonalMatrix" line="141">
                <params>
                    <param name="m" type="DiagonalMatrix"/>
                </params>
                <declaration name="dim" type="int" line="144"/>
                <declaration name="outData" type="double[]" line="145"/>
                <scope line="146"/>
            </method>
            <javadoc line="153">
                Returns the result of postmultiplying {@code this} by {@code m}.                
                <@param>
                    m m matrix to postmultiply by                    
                </@param>
                <@return>
                    n {@code this  m}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if{@code columnDimension(this) != rowDimension(m)}                    
                </@throws>
            </javadoc>
            <method name="multiply" type="DiagonalMatrix" line="162">
                <params>
                    <param name="m" type="DiagonalMatrix"/>
                </params>
                <declaration name="dim" type="int" line="165"/>
                <declaration name="outData" type="double[]" line="166"/>
                <scope line="167"/>
            </method>
            <javadoc line="174">
                Returns the result of postmultiplying {@code this} by {@code m}.                
                <@param>
                    m m matrix to postmultiply by                    
                </@param>
                <@return>
                    n {@code this  m}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if{@code columnDimension(this) != rowDimension(m)}                    
                </@throws>
            </javadoc>
            <method name="multiply" type="RealMatrix" line="183">
                <params>
                    <param name="m" type="RealMatrix"/>
                </params>
                <scope line="184"/>
                <scope line="186">
                    <declaration name="nRows" type="int" line="188"/>
                    <declaration name="nCols" type="int" line="189"/>
                    <declaration name="product" type="double[][]" line="190"/>
                    <scope line="191">
                        <scope line="192"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="200">
                {@inheritDoc}                
            </javadoc>
            <method name="getData" type="double[][]" line="202">
                <declaration name="dim" type="int" line="203"/>
                <declaration name="out" type="double[][]" line="204"/>
                <scope line="206"/>
            </method>
            <javadoc line="213">
                Gets a reference to the underlying data array.                
                <@return>
                    n 1-dimensional array of entries.                    
                </@return>
            </javadoc>
            <method name="getDataRef" type="double[]" line="218"/>
            <javadoc line="222">
                {@inheritDoc}                
            </javadoc>
            <method name="getEntry" type="double" line="225">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="230">
                {@inheritDoc}                
                <@throws>
                    s NumberIsTooLargeException if {@code row != column} and value is non-zero.                    
                </@throws>
            </javadoc>
            <method name="setEntry" type="void" line="235">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <scope line="236"/>
                <scope line="239"/>
            </method>
            <javadoc line="244">
                {@inheritDoc}                
                <@throws>
                    s NumberIsTooLargeException if {@code row != column} and increment is non-zero.                    
                </@throws>
            </javadoc>
            <method name="addToEntry" type="void" line="251">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="increment" type="double"/>
                </params>
                <scope line="252"/>
                <scope line="255"/>
            </method>
            <javadoc line="260">
                {@inheritDoc}                
            </javadoc>
            <method name="multiplyEntry" type="void" line="265">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="factor" type="double"/>
                </params>
                <comment line="266">
                    we don&apos;t care about non-diagonal elements for multiplication                    
                </comment>
                <scope line="267"/>
            </method>
            <javadoc line="273">
                {@inheritDoc}                
            </javadoc>
            <method name="getRowDimension" type="int" line="275"/>
            <javadoc line="279">
                {@inheritDoc}                
            </javadoc>
            <method name="getColumnDimension" type="int" line="281"/>
            <javadoc line="285">
                {@inheritDoc}                
            </javadoc>
            <method name="operate" type="double[]" line="288">
                <params>
                    <param name="v" type="double[]"/>
                </params>
            </method>
            <javadoc line="292">
                {@inheritDoc}                
            </javadoc>
            <method name="preMultiply" type="double[]" line="295">
                <params>
                    <param name="v" type="double[]"/>
                </params>
            </method>
            <javadoc line="299">
                Ensure a value is zero.                
                <@param>
                    m value value to check                    
                </@param>
                <@exception>
                    n NumberIsTooLargeException if value is not zero                    
                </@exception>
            </javadoc>
            <method name="ensureZero" type="void" line="303">
                <params>
                    <param name="value" type="double"/>
                </params>
                <scope line="304"/>
            </method>
        </class>
    </source>