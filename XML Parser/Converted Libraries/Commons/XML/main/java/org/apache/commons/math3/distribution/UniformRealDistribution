<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <class name="UniformRealDistribution" extends="AbstractRealDistribution" line="26">
            <javadoc line="26">
                Implementation of the uniform real distribution.                
                <@see>
                    e <a href="http://en.wikipedia.org/wiki/Uniform_distribution_(continuous)"
                     * >Uniform distribution (continuous), at Wikipedia</a>                    
                </@see>
                <@version>
                    n $Id: UniformRealDistribution.java 1462020 2013-03-28 10:24:45Z luc $                    
                </@version>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" type="double" line="36"/>
            <javadoc line="36">
                Default inverse cumulative probability accuracy.                
                <@deprecated>
                    d as of 3.2 not used anymore, will be removed in 4.0                    
                </@deprecated>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="41"/>
            <javadoc line="41">
                Serializable version identifier.                
            </javadoc>
            <declaration name="lower" type="double" line="43"/>
            <javadoc line="43">
                Lower bound of this distribution (inclusive).                
            </javadoc>
            <declaration name="upper" type="double" line="45"/>
            <javadoc line="45">
                Upper bound of this distribution (exclusive).                
            </javadoc>
            <javadoc line="48">
                Create a standard uniform real distribution with lower bound (inclusive)
                 * equal to zero and upper bound (exclusive) equal to one.                
            </javadoc>
            <method name="UniformRealDistribution" type="constructor" line="52"/>
            <javadoc line="56">
                Create a uniform real distribution using the given lower and upper
                 * bounds.                
                <@param>
                    m lower Lower bound of this distribution (inclusive).                    
                </@param>
                <@param>
                    m upper Upper bound of this distribution (exclusive).                    
                </@param>
                <@throws>
                    s NumberIsTooLargeException if {@code lower >= upper}.                    
                </@throws>
            </javadoc>
            <method name="UniformRealDistribution" type="constructor" line="65"/>
            <javadoc line="69">
                Create a uniform distribution.                
                <@param>
                    m lower Lower bound of this distribution (inclusive).                    
                </@param>
                <@param>
                    m upper Upper bound of this distribution (exclusive).                    
                </@param>
                <@param>
                    m inverseCumAccuracy Inverse cumulative probability accuracy.                    
                </@param>
                <@throws>
                    s NumberIsTooLargeException if {@code lower >= upper}.                    
                </@throws>
                <@deprecated>
                    d as of 3.2, inverse CDF is now calculated analytically, use{@link #UniformRealDistribution(double,double)} instead.                    
                </@deprecated>
            </javadoc>
            <method name="UniformRealDistribution" type="constructor" line="81"/>
            <javadoc line="85">
                Creates a uniform distribution.                
                <@param>
                    m rng Random number generator.                    
                </@param>
                <@param>
                    m lower Lower bound of this distribution (inclusive).                    
                </@param>
                <@param>
                    m upper Upper bound of this distribution (exclusive).                    
                </@param>
                <@param>
                    m inverseCumAccuracy Inverse cumulative probability accuracy.                    
                </@param>
                <@throws>
                    s NumberIsTooLargeException if {@code lower >= upper}.                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
                <@deprecated>
                    d as of 3.2, inverse CDF is now calculated analytically, use{@link #UniformRealDistribution(RandomGenerator,double,double)}instead.                    
                </@deprecated>
            </javadoc>
            <method name="UniformRealDistribution" type="constructor" line="102"/>
            <javadoc line="106">
                Creates a uniform distribution.                
                <@param>
                    m rng Random number generator.                    
                </@param>
                <@param>
                    m lower Lower bound of this distribution (inclusive).                    
                </@param>
                <@param>
                    m upper Upper bound of this distribution (exclusive).                    
                </@param>
                <@throws>
                    s NumberIsTooLargeException if {@code lower >= upper}.                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="UniformRealDistribution" type="constructor" line="118">
                <scope line="120"/>
            </method>
            <javadoc line="130">
                {@inheritDoc}                
            </javadoc>
            <method name="density" type="double" line="131">
                <scope line="132"/>
            </method>
            <javadoc line="138">
                {@inheritDoc}                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="139">
                <scope line="140"/>
                <scope line="143"/>
            </method>
            <method name="inverseCumulativeProbability" type="double" line="151">
                <scope line="152"/>
            </method>
            <javadoc line="158">
                {@inheritDoc}For lower bound {@code lower} and upper bound {@code upper}, the mean is{@code 0.5 * (lower + upper)}.                
            </javadoc>
            <method name="getNumericalMean" type="double" line="164"/>
            <javadoc line="168">
                {@inheritDoc}For lower bound {@code lower} and upper bound {@code upper}, the
                 * variance is {@code (upper - lower)^2 / 12}.                
            </javadoc>
            <method name="getNumericalVariance" type="double" line="174">
                <declaration name="ul" type="double" line="175"/>
            </method>
            <javadoc line="179">
                {@inheritDoc}The lower bound of the support is equal to the lower bound parameter
                 * of the distribution.                
                <@return>
                    n lower bound of the support                    
                </@return>
            </javadoc>
            <method name="getSupportLowerBound" type="double" line="187"/>
            <javadoc line="191">
                {@inheritDoc}The upper bound of the support is equal to the upper bound parameter
                 * of the distribution.                
                <@return>
                    n upper bound of the support                    
                </@return>
            </javadoc>
            <method name="getSupportUpperBound" type="double" line="199"/>
            <javadoc line="203">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportLowerBoundInclusive" type="boolean" line="204"/>
            <javadoc line="208">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportUpperBoundInclusive" type="boolean" line="209"/>
            <javadoc line="213">
                {@inheritDoc}The support of this distribution is connected.                
                <@return>
                    n {@code true}                    
                </@return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="220"/>
            <javadoc line="224">
                {@inheritDoc}                
            </javadoc>
            <method name="sample" type="double" line="226">
                <declaration name="u" type="double" line="227"/>
            </method>
        </class>
    </source>