<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fraction">
        <import package="java.io.Serializable"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.math.BigInteger"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.ZeroException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.ArithmeticUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="BigFraction" extends="Number" line="33">
            <implements interface="FieldElement&lt;BigFraction&gt;"/>
            <implements interface="Comparable&lt;BigFraction&gt;"/>
            <implements interface="Serializable"/>
            <javadoc line="33">
                Representation of a rational number without any overflow. This class is
                 * immutable.                
                <@version>
                    n $Id: BigFraction.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <declaration name="TWO" type="BigFraction" line="44"/>
            <javadoc line="44">
                A fraction representing &quot;2 / 1&quot;.                
            </javadoc>
            <declaration name="ONE" type="BigFraction" line="47"/>
            <javadoc line="47">
                A fraction representing &quot;1&quot;.                
            </javadoc>
            <declaration name="ZERO" type="BigFraction" line="50"/>
            <javadoc line="50">
                A fraction representing &quot;0&quot;.                
            </javadoc>
            <declaration name="MINUS_ONE" type="BigFraction" line="53"/>
            <javadoc line="53">
                A fraction representing &quot;-1 / 1&quot;.                
            </javadoc>
            <declaration name="FOUR_FIFTHS" type="BigFraction" line="56"/>
            <javadoc line="56">
                A fraction representing &quot;4/5&quot;.                
            </javadoc>
            <declaration name="ONE_FIFTH" type="BigFraction" line="59"/>
            <javadoc line="59">
                A fraction representing &quot;1/5&quot;.                
            </javadoc>
            <declaration name="ONE_HALF" type="BigFraction" line="62"/>
            <javadoc line="62">
                A fraction representing &quot;1/2&quot;.                
            </javadoc>
            <declaration name="ONE_QUARTER" type="BigFraction" line="65"/>
            <javadoc line="65">
                A fraction representing &quot;1/4&quot;.                
            </javadoc>
            <declaration name="ONE_THIRD" type="BigFraction" line="68"/>
            <javadoc line="68">
                A fraction representing &quot;1/3&quot;.                
            </javadoc>
            <declaration name="THREE_FIFTHS" type="BigFraction" line="71"/>
            <javadoc line="71">
                A fraction representing &quot;3/5&quot;.                
            </javadoc>
            <declaration name="THREE_QUARTERS" type="BigFraction" line="74"/>
            <javadoc line="74">
                A fraction representing &quot;3/4&quot;.                
            </javadoc>
            <declaration name="TWO_FIFTHS" type="BigFraction" line="77"/>
            <javadoc line="77">
                A fraction representing &quot;2/5&quot;.                
            </javadoc>
            <declaration name="TWO_QUARTERS" type="BigFraction" line="80"/>
            <javadoc line="80">
                A fraction representing &quot;2/4&quot;.                
            </javadoc>
            <declaration name="TWO_THIRDS" type="BigFraction" line="83"/>
            <javadoc line="83">
                A fraction representing &quot;2/3&quot;.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="86"/>
            <javadoc line="86">
                Serializable version identifier.                
            </javadoc>
            <declaration name="ONE_HUNDRED" type="BigInteger" line="89"/>
            <javadoc line="89">
                &lt;code&gt;BigInteger&lt;/code&gt; representation of 100.                
            </javadoc>
            <declaration name="numerator" type="BigInteger" line="92"/>
            <javadoc line="92">
                The numerator.                
            </javadoc>
            <declaration name="denominator" type="BigInteger" line="95"/>
            <javadoc line="95">
                The denominator.                
            </javadoc>
            <javadoc line="98">
                &lt;p&gt;
                 * Create a {@link BigFraction} equivalent to the passed &lt;tt&gt;BigInteger&lt;/tt&gt;, ie
                 * &quot;num / 1&quot;.
                 * &lt;/p&gt;                
                <@param>
                    m numthe numerator.                    
                </@param>
            </javadoc>
            <method name="BigFraction" type="constructor" line="107"/>
            <javadoc line="111">
                Create a {@link BigFraction} given the numerator and denominator as{@code BigInteger}. The {@link BigFraction} is reduced to lowest terms.                
                <@param>
                    m num the numerator, must not be {@code null}.                    
                </@param>
                <@param>
                    m den the denominator, must not be {@code null}.                    
                </@param>
                <@throws>
                    s ZeroException if the denominator is zero.                    
                </@throws>
                <@throws>
                    s NullArgumentException if either of the arguments is null                    
                </@throws>
            </javadoc>
            <method name="BigFraction" type="constructor" line="120">
                <scope line="123"/>
                <scope line="126"/>
                <scope line="129">
                    <declaration name="gcd" type="BigInteger" line="132"/>
                    <scope line="133"/>
                    <scope line="139"/>
                </scope>
            </method>
            <javadoc line="151">
                Create a fraction given the double value.
                 * &lt;p&gt;
                 * This constructor behaves &lt;em&gt;differently&lt;/em&gt; from{@link #BigFraction(double,double,int)}. It converts the double value
                 * exactly, considering its internal bits representation. This works for all
                 * values except NaN and infinities and does not requires any loop or
                 * convergence threshold.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * Since this conversion is exact and since double numbers are sometimes
                 * approximated, the fraction created may seem strange in some cases. For example,
                 * calling &lt;code&gt;new BigFraction(1.0 / 3.0)&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; create
                 * the fraction 1/3, but the fraction 6004799503160661 / 18014398509481984
                 * because the double number passed to the constructor is not exactly 1/3
                 * (this number cannot be stored exactly in IEEE754).
                 * &lt;/p&gt;                
                <@see>
                    e #BigFraction(double,double,int)                    
                </@see>
                <@param>
                    m value the double value to convert to a fraction.                    
                </@param>
                <@exception>
                    n MathIllegalArgumentException if value is NaN or infinite                    
                </@exception>
            </javadoc>
            <method name="BigFraction" type="constructor" line="172">
                <comment line="173">
                    compute m and k such that value = m * 2^k                    
                </comment>
                <scope line="173"/>
                <scope line="176"/>
                <declaration name="bits" type="long" line="181"/>
                <declaration name="sign" type="long" line="182"/>
                <declaration name="exponent" type="long" line="183"/>
                <declaration name="m" type="long" line="184"/>
                <scope line="185"/>
                <scope line="189"/>
                <declaration name="k" type="int" line="192"/>
                <scope line="193"/>
                <scope line="198"/>
                <scope line="201"/>
            </method>
            <javadoc line="208">
                Create a fraction given the double value and maximum error allowed.
                 * &lt;p&gt;
                 * References:
                 * &lt;ul&gt;
                 * &lt;li&gt;&lt;a href=&quot;http://mathworld.wolfram.com/ContinuedFraction.html&quot;&gt;
                 * Continued Fraction&lt;/a&gt; equations (11) and (22)-(26)&lt;/li&gt;
                 * &lt;/ul&gt;
                 * &lt;/p&gt;                
                <@param>
                    m valuethe double value to convert to a fraction.                    
                </@param>
                <@param>
                    m epsilonmaximum error allowed. The resulting fraction is within
                     * <code>epsilon</code> of <code>value</code>, in absolute terms.                    
                </@param>
                <@param>
                    m maxIterationsmaximum number of convergents.                    
                </@param>
                <@throws>
                    s FractionConversionExceptionif the continued fraction failed to converge.                    
                </@throws>
                <@see>
                    e #BigFraction(double)                    
                </@see>
            </javadoc>
            <method name="BigFraction" type="constructor" line="231"/>
            <javadoc line="235">
                Create a fraction given the double value and either the maximum error
                 * allowed or the maximum number of denominator digits.
                 * &lt;p&gt;
                 * NOTE: This constructor is called with EITHER - a valid epsilon value and
                 * the maxDenominator set to Integer.MAX_VALUE (that way the maxDenominator
                 * has no effect). OR - a valid maxDenominator value and the epsilon value
                 * set to zero (that way epsilon only has effect if there is an exact match
                 * before the maxDenominator value is reached).
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * It has been done this way so that the same code can be (re)used for both
                 * scenarios. However this could be confusing to users if it were part of
                 * the public API and this constructor should therefore remain PRIVATE.
                 * &lt;/p&gt;
                 * See JIRA issue ticket MATH-181 for more details:
                 * https://issues.apache.org/jira/browse/MATH-181                
                <@param>
                    m valuethe double value to convert to a fraction.                    
                </@param>
                <@param>
                    m epsilonmaximum error allowed. The resulting fraction is within
                     * <code>epsilon</code> of <code>value</code>, in absolute terms.                    
                </@param>
                <@param>
                    m maxDenominatormaximum denominator value allowed.                    
                </@param>
                <@param>
                    m maxIterationsmaximum number of convergents.                    
                </@param>
                <@throws>
                    s FractionConversionExceptionif the continued fraction failed to converge.                    
                </@throws>
            </javadoc>
            <method name="BigFraction" type="constructor" line="271">
                <comment line="272">
                    check for (almost) integer arguments, which should not go                    
                </comment>
                <comment line="272">
                    to iterations.                    
                </comment>
                <declaration name="overflow" type="long" line="272"/>
                <declaration name="r0" type="double" line="273"/>
                <declaration name="a0" type="long" line="274"/>
                <scope line="275"/>
                <scope line="281"/>
                <declaration name="p0" type="long" line="287"/>
                <declaration name="q0" type="long" line="288"/>
                <declaration name="p1" type="long" line="289"/>
                <declaration name="q1" type="long" line="290"/>
                <declaration name="p2" type="long" line="292"/>
                <declaration name="q2" type="long" line="293"/>
                <declaration name="n" type="int" line="295"/>
                <declaration name="stop" type="boolean" line="296"/>
                <scope line="297">
                    <declaration name="r1" type="double" line="299"/>
                    <declaration name="a1" type="long" line="300"/>
                    <scope line="303"/>
                    <declaration name="convergent" type="double" line="307"/>
                    <scope line="310"/>
                    <scope line="317"/>
                </scope>
                <scope line="322"/>
                <scope line="326"/>
                <scope line="329"/>
            </method>
            <javadoc line="335">
                Create a fraction given the double value and maximum denominator.
                 * &lt;p&gt;
                 * References:
                 * &lt;ul&gt;
                 * &lt;li&gt;&lt;a href=&quot;http://mathworld.wolfram.com/ContinuedFraction.html&quot;&gt;
                 * Continued Fraction&lt;/a&gt; equations (11) and (22)-(26)&lt;/li&gt;
                 * &lt;/ul&gt;
                 * &lt;/p&gt;                
                <@param>
                    m valuethe double value to convert to a fraction.                    
                </@param>
                <@param>
                    m maxDenominatorThe maximum allowed value for denominator.                    
                </@param>
                <@throws>
                    s FractionConversionExceptionif the continued fraction failed to converge.                    
                </@throws>
            </javadoc>
            <method name="BigFraction" type="constructor" line="353"/>
            <javadoc line="357">
                &lt;p&gt;
                 * Create a {@link BigFraction} equivalent to the passed &lt;tt&gt;int&lt;/tt&gt;, ie
                 * &quot;num / 1&quot;.
                 * &lt;/p&gt;                
                <@param>
                    m numthe numerator.                    
                </@param>
            </javadoc>
            <method name="BigFraction" type="constructor" line="366"/>
            <javadoc line="370">
                &lt;p&gt;
                 * Create a {@link BigFraction} given the numerator and denominator as simple
                 * &lt;tt&gt;int&lt;/tt&gt;. The {@link BigFraction} is reduced to lowest terms.
                 * &lt;/p&gt;                
                <@param>
                    m numthe numerator.                    
                </@param>
                <@param>
                    m denthe denominator.                    
                </@param>
            </javadoc>
            <method name="BigFraction" type="constructor" line="381"/>
            <javadoc line="385">
                &lt;p&gt;
                 * Create a {@link BigFraction} equivalent to the passed long, ie &quot;num / 1&quot;.
                 * &lt;/p&gt;                
                <@param>
                    m numthe numerator.                    
                </@param>
            </javadoc>
            <method name="BigFraction" type="constructor" line="393"/>
            <javadoc line="397">
                &lt;p&gt;
                 * Create a {@link BigFraction} given the numerator and denominator as simple
                 * &lt;tt&gt;long&lt;/tt&gt;. The {@link BigFraction} is reduced to lowest terms.
                 * &lt;/p&gt;                
                <@param>
                    m numthe numerator.                    
                </@param>
                <@param>
                    m denthe denominator.                    
                </@param>
            </javadoc>
            <method name="BigFraction" type="constructor" line="408"/>
            <javadoc line="412">
                &lt;p&gt;
                 * Creates a &lt;code&gt;BigFraction&lt;/code&gt; instance with the 2 parts of a fraction
                 * Y/Z.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * Any negative signs are resolved to be on the numerator.
                 * &lt;/p&gt;                
                <@param>
                    m numeratorthe numerator, for example the three in 'three sevenths'.                    
                </@param>
                <@param>
                    m denominatorthe denominator, for example the seven in 'three sevenths'.                    
                </@param>
                <@return>
                    n a new fraction instance, with the numerator and denominator
                     * reduced.                    
                </@return>
                <@throws>
                    s ArithmeticExceptionif the denominator is <code>zero</code>.                    
                </@throws>
            </javadoc>
            <method name="getReducedFraction" type="BigFraction" line="432">
                <scope line="433"/>
            </method>
            <javadoc line="440">
                &lt;p&gt;
                 * Returns the absolute value of this {@link BigFraction}.
                 * &lt;/p&gt;                
                <@return>
                    n the absolute value as a {@link BigFraction}.                    
                </@return>
            </javadoc>
            <method name="abs" type="BigFraction" line="447"/>
            <javadoc line="451">
                &lt;p&gt;
                 * Adds the value of this fraction to the passed {@link BigInteger},
                 * returning the result in reduced form.
                 * &lt;/p&gt;                
                <@param>
                    m bgthe {@link BigInteger} to add, must'nt be <code>null</code>.                    
                </@param>
                <@return>
                    n a <code>BigFraction</code> instance with the resulting values.                    
                </@return>
                <@throws>
                    s NullArgumentExceptionif the {@link BigInteger} is <code>null</code>.                    
                </@throws>
            </javadoc>
            <method name="add" type="BigFraction" line="463"/>
            <javadoc line="468">
                &lt;p&gt;
                 * Adds the value of this fraction to the passed &lt;tt&gt;integer&lt;/tt&gt;, returning
                 * the result in reduced form.
                 * &lt;/p&gt;                
                <@param>
                    m ithe <tt>integer</tt> to add.                    
                </@param>
                <@return>
                    n a <code>BigFraction</code> instance with the resulting values.                    
                </@return>
            </javadoc>
            <method name="add" type="BigFraction" line="478"/>
            <javadoc line="482">
                &lt;p&gt;
                 * Adds the value of this fraction to the passed &lt;tt&gt;long&lt;/tt&gt;, returning
                 * the result in reduced form.
                 * &lt;/p&gt;                
                <@param>
                    m lthe <tt>long</tt> to add.                    
                </@param>
                <@return>
                    n a <code>BigFraction</code> instance with the resulting values.                    
                </@return>
            </javadoc>
            <method name="add" type="BigFraction" line="492"/>
            <javadoc line="496">
                &lt;p&gt;
                 * Adds the value of this fraction to another, returning the result in
                 * reduced form.
                 * &lt;/p&gt;                
                <@param>
                    m fractionthe {@link BigFraction} to add, must not be <code>null</code>.                    
                </@param>
                <@return>
                    n a {@link BigFraction} instance with the resulting values.                    
                </@return>
                <@throws>
                    s NullArgumentException if the {@link BigFraction} is {@code null}.                    
                </@throws>
            </javadoc>
            <method name="add" type="BigFraction" line="507">
                <scope line="508"/>
                <scope line="511"/>
                <declaration name="num" type="BigInteger" line="515"/>
                <declaration name="den" type="BigInteger" line="516"/>
                <scope line="518"/>
                <scope line="521"/>
            </method>
            <javadoc line="529">
                &lt;p&gt;
                 * Gets the fraction as a &lt;code&gt;BigDecimal&lt;/code&gt;. This calculates the
                 * fraction as the numerator divided by denominator.
                 * &lt;/p&gt;                
                <@return>
                    n the fraction as a <code>BigDecimal</code>.                    
                </@return>
                <@throws>
                    s ArithmeticExceptionif the exact quotient does not have a terminating decimal
                     * expansion.                    
                </@throws>
                <@see>
                    e BigDecimal                    
                </@see>
            </javadoc>
            <method name="bigDecimalValue" type="BigDecimal" line="541"/>
            <javadoc line="545">
                &lt;p&gt;
                 * Gets the fraction as a &lt;code&gt;BigDecimal&lt;/code&gt; following the passed
                 * rounding mode. This calculates the fraction as the numerator divided by
                 * denominator.
                 * &lt;/p&gt;                
                <@param>
                    m roundingModerounding mode to apply. see {@link BigDecimal} constants.                    
                </@param>
                <@return>
                    n the fraction as a <code>BigDecimal</code>.                    
                </@return>
                <@throws>
                    s IllegalArgumentExceptionif <tt>roundingMode</tt> does not represent a valid rounding
                     * mode.                    
                </@throws>
                <@see>
                    e BigDecimal                    
                </@see>
            </javadoc>
            <method name="bigDecimalValue" type="BigDecimal" line="560"/>
            <javadoc line="564">
                &lt;p&gt;
                 * Gets the fraction as a &lt;code&gt;BigDecimal&lt;/code&gt; following the passed scale
                 * and rounding mode. This calculates the fraction as the numerator divided
                 * by denominator.
                 * &lt;/p&gt;                
                <@param>
                    m scalescale of the <code>BigDecimal</code> quotient to be returned.
                     * see {@link BigDecimal} for more information.                    
                </@param>
                <@param>
                    m roundingModerounding mode to apply. see {@link BigDecimal} constants.                    
                </@param>
                <@return>
                    n the fraction as a <code>BigDecimal</code>.                    
                </@return>
                <@see>
                    e BigDecimal                    
                </@see>
            </javadoc>
            <method name="bigDecimalValue" type="BigDecimal" line="579"/>
            <javadoc line="583">
                &lt;p&gt;
                 * Compares this object to another based on size.
                 * &lt;/p&gt;                
                <@param>
                    m objectthe object to compare to, must not be <code>null</code>.                    
                </@param>
                <@return>
                    n -1 if this is less than <tt>object</tt>, +1 if this is greater
                     * than <tt>object</tt>, 0 if they are equal.                    
                </@return>
                <@see>
                    e java.lang.Comparable#compareTo(java.lang.Object)                    
                </@see>
            </javadoc>
            <method name="compareTo" type="int" line="594">
                <declaration name="nOd" type="BigInteger" line="595"/>
                <declaration name="dOn" type="BigInteger" line="596"/>
            </method>
            <javadoc line="600">
                &lt;p&gt;
                 * Divide the value of this fraction by the passed {@code BigInteger},
                 * ie {@code this * 1 / bg}, returning the result in reduced form.
                 * &lt;/p&gt;                
                <@param>
                    m bg the {@code BigInteger} to divide by, must not be {@code null}                    
                </@param>
                <@return>
                    n a {@link BigFraction} instance with the resulting values                    
                </@return>
                <@throws>
                    s NullArgumentException if the {@code BigInteger} is {@code null}                    
                </@throws>
                <@throws>
                    s MathArithmeticException if the fraction to divide by is zero                    
                </@throws>
            </javadoc>
            <method name="divide" type="BigFraction" line="611">
                <scope line="612"/>
                <scope line="615"/>
            </method>
            <javadoc line="621">
                &lt;p&gt;
                 * Divide the value of this fraction by the passed {@code int}, ie{@code this * 1 / i}, returning the result in reduced form.
                 * &lt;/p&gt;                
                <@param>
                    m i the {@code int} to divide by                    
                </@param>
                <@return>
                    n a {@link BigFraction} instance with the resulting values                    
                </@return>
                <@throws>
                    s MathArithmeticException if the fraction to divide by is zero                    
                </@throws>
            </javadoc>
            <method name="divide" type="BigFraction" line="631"/>
            <javadoc line="635">
                &lt;p&gt;
                 * Divide the value of this fraction by the passed {@code long}, ie{@code this * 1 / l}, returning the result in reduced form.
                 * &lt;/p&gt;                
                <@param>
                    m l the {@code long} to divide by                    
                </@param>
                <@return>
                    n a {@link BigFraction} instance with the resulting values                    
                </@return>
                <@throws>
                    s MathArithmeticException if the fraction to divide by is zero                    
                </@throws>
            </javadoc>
            <method name="divide" type="BigFraction" line="645"/>
            <javadoc line="649">
                &lt;p&gt;
                 * Divide the value of this fraction by another, returning the result in
                 * reduced form.
                 * &lt;/p&gt;                
                <@param>
                    m fraction Fraction to divide by, must not be {@code null}.                    
                </@param>
                <@return>
                    n a {@link BigFraction} instance with the resulting values.                    
                </@return>
                <@throws>
                    s NullArgumentException if the {@code fraction} is {@code null}.                    
                </@throws>
                <@throws>
                    s MathArithmeticException if the fraction to divide by is zero                    
                </@throws>
            </javadoc>
            <method name="divide" type="BigFraction" line="660">
                <scope line="661"/>
                <scope line="664"/>
            </method>
            <javadoc line="671">
                &lt;p&gt;
                 * Gets the fraction as a &lt;tt&gt;double&lt;/tt&gt;. This calculates the fraction as
                 * the numerator divided by denominator.
                 * &lt;/p&gt;                
                <@return>
                    n the fraction as a <tt>double</tt>                    
                </@return>
                <@see>
                    e java.lang.Number#doubleValue()                    
                </@see>
            </javadoc>
            <method name="doubleValue" type="double" line="681">
                <declaration name="result" type="double" line="682"/>
                <scope line="683">
                    <declaration name="shift" type="int" line="686"/>
                </scope>
            </method>
            <javadoc line="694">
                &lt;p&gt;
                 * Test for the equality of two fractions. If the lowest term numerator and
                 * denominators are the same for both fractions, the two fractions are
                 * considered to be equal.
                 * &lt;/p&gt;                
                <@param>
                    m otherfraction to test for equality to this fraction, can be
                     * <code>null</code>.                    
                </@param>
                <@return>
                    n true if two fractions are equal, false if object is
                     * <code>null</code>, not an instance of {@link BigFraction}, or not
                     * equal to this fraction instance.                    
                </@return>
                <@see>
                    e java.lang.Object#equals(java.lang.Object)                    
                </@see>
            </javadoc>
            <method name="equals" type="boolean" line="710">
                <declaration name="ret" type="boolean" line="711"/>
                <scope line="713"/>
                <scope line="715">
                    <declaration name="rhs" type="BigFraction" line="716"/>
                    <declaration name="thisOne" type="BigFraction" line="717"/>
                </scope>
            </method>
            <javadoc line="724">
                &lt;p&gt;
                 * Gets the fraction as a &lt;tt&gt;float&lt;/tt&gt;. This calculates the fraction as
                 * the numerator divided by denominator.
                 * &lt;/p&gt;                
                <@return>
                    n the fraction as a <tt>float</tt>.                    
                </@return>
                <@see>
                    e java.lang.Number#floatValue()                    
                </@see>
            </javadoc>
            <method name="floatValue" type="float" line="734">
                <declaration name="result" type="float" line="735"/>
                <scope line="736">
                    <declaration name="shift" type="int" line="739"/>
                </scope>
            </method>
            <javadoc line="747">
                &lt;p&gt;
                 * Access the denominator as a &lt;code&gt;BigInteger&lt;/code&gt;.
                 * &lt;/p&gt;                
                <@return>
                    n the denominator as a <code>BigInteger</code>.                    
                </@return>
            </javadoc>
            <method name="getDenominator" type="BigInteger" line="754"/>
            <javadoc line="758">
                &lt;p&gt;
                 * Access the denominator as a &lt;tt&gt;int&lt;/tt&gt;.
                 * &lt;/p&gt;                
                <@return>
                    n the denominator as a <tt>int</tt>.                    
                </@return>
            </javadoc>
            <method name="getDenominatorAsInt" type="int" line="765"/>
            <javadoc line="769">
                &lt;p&gt;
                 * Access the denominator as a &lt;tt&gt;long&lt;/tt&gt;.
                 * &lt;/p&gt;                
                <@return>
                    n the denominator as a <tt>long</tt>.                    
                </@return>
            </javadoc>
            <method name="getDenominatorAsLong" type="long" line="776"/>
            <javadoc line="780">
                &lt;p&gt;
                 * Access the numerator as a &lt;code&gt;BigInteger&lt;/code&gt;.
                 * &lt;/p&gt;                
                <@return>
                    n the numerator as a <code>BigInteger</code>.                    
                </@return>
            </javadoc>
            <method name="getNumerator" type="BigInteger" line="787"/>
            <javadoc line="791">
                &lt;p&gt;
                 * Access the numerator as a &lt;tt&gt;int&lt;/tt&gt;.
                 * &lt;/p&gt;                
                <@return>
                    n the numerator as a <tt>int</tt>.                    
                </@return>
            </javadoc>
            <method name="getNumeratorAsInt" type="int" line="798"/>
            <javadoc line="802">
                &lt;p&gt;
                 * Access the numerator as a &lt;tt&gt;long&lt;/tt&gt;.
                 * &lt;/p&gt;                
                <@return>
                    n the numerator as a <tt>long</tt>.                    
                </@return>
            </javadoc>
            <method name="getNumeratorAsLong" type="long" line="809"/>
            <javadoc line="813">
                &lt;p&gt;
                 * Gets a hashCode for the fraction.
                 * &lt;/p&gt;                
                <@return>
                    n a hash code value for this object.                    
                </@return>
                <@see>
                    e java.lang.Object#hashCode()                    
                </@see>
            </javadoc>
            <method name="hashCode" type="int" line="822"/>
            <javadoc line="826">
                &lt;p&gt;
                 * Gets the fraction as an &lt;tt&gt;int&lt;/tt&gt;. This returns the whole number part
                 * of the fraction.
                 * &lt;/p&gt;                
                <@return>
                    n the whole number fraction part.                    
                </@return>
                <@see>
                    e java.lang.Number#intValue()                    
                </@see>
            </javadoc>
            <method name="intValue" type="int" line="836"/>
            <javadoc line="840">
                &lt;p&gt;
                 * Gets the fraction as a &lt;tt&gt;long&lt;/tt&gt;. This returns the whole number part
                 * of the fraction.
                 * &lt;/p&gt;                
                <@return>
                    n the whole number fraction part.                    
                </@return>
                <@see>
                    e java.lang.Number#longValue()                    
                </@see>
            </javadoc>
            <method name="longValue" type="long" line="850"/>
            <javadoc line="854">
                &lt;p&gt;
                 * Multiplies the value of this fraction by the passed
                 * &lt;code&gt;BigInteger&lt;/code&gt;, returning the result in reduced form.
                 * &lt;/p&gt;                
                <@param>
                    m bg the {@code BigInteger} to multiply by.                    
                </@param>
                <@return>
                    n a {@code BigFraction} instance with the resulting values.                    
                </@return>
                <@throws>
                    s NullArgumentException if {@code bg} is {@code null}.                    
                </@throws>
            </javadoc>
            <method name="multiply" type="BigFraction" line="864">
                <scope line="865"/>
            </method>
            <javadoc line="871">
                &lt;p&gt;
                 * Multiply the value of this fraction by the passed &lt;tt&gt;int&lt;/tt&gt;, returning
                 * the result in reduced form.
                 * &lt;/p&gt;                
                <@param>
                    m ithe <tt>int</tt> to multiply by.                    
                </@param>
                <@return>
                    n a {@link BigFraction} instance with the resulting values.                    
                </@return>
            </javadoc>
            <method name="multiply" type="BigFraction" line="881"/>
            <javadoc line="885">
                &lt;p&gt;
                 * Multiply the value of this fraction by the passed &lt;tt&gt;long&lt;/tt&gt;,
                 * returning the result in reduced form.
                 * &lt;/p&gt;                
                <@param>
                    m lthe <tt>long</tt> to multiply by.                    
                </@param>
                <@return>
                    n a {@link BigFraction} instance with the resulting values.                    
                </@return>
            </javadoc>
            <method name="multiply" type="BigFraction" line="895"/>
            <javadoc line="899">
                &lt;p&gt;
                 * Multiplies the value of this fraction by another, returning the result in
                 * reduced form.
                 * &lt;/p&gt;                
                <@param>
                    m fraction Fraction to multiply by, must not be {@code null}.                    
                </@param>
                <@return>
                    n a {@link BigFraction} instance with the resulting values.                    
                </@return>
                <@throws>
                    s NullArgumentException if {@code fraction} is {@code null}.                    
                </@throws>
            </javadoc>
            <method name="multiply" type="BigFraction" line="909">
                <scope line="910"/>
                <scope line="914"/>
            </method>
            <javadoc line="921">
                &lt;p&gt;
                 * Return the additive inverse of this fraction, returning the result in
                 * reduced form.
                 * &lt;/p&gt;                
                <@return>
                    n the negation of this fraction.                    
                </@return>
            </javadoc>
            <method name="negate" type="BigFraction" line="929"/>
            <javadoc line="933">
                &lt;p&gt;
                 * Gets the fraction percentage as a &lt;tt&gt;double&lt;/tt&gt;. This calculates the
                 * fraction as the numerator divided by denominator multiplied by 100.
                 * &lt;/p&gt;                
                <@return>
                    n the fraction percentage as a <tt>double</tt>.                    
                </@return>
            </javadoc>
            <method name="percentageValue" type="double" line="941"/>
            <javadoc line="945">
                &lt;p&gt;
                 * Returns a {@code BigFraction} whose value is{@code (this&lt;sup&gt;exponent&lt;/sup&gt;)}, returning the result in reduced form.
                 * &lt;/p&gt;                
                <@param>
                    m exponentexponent to which this {@code BigFraction} is to be
                     * raised.                    
                </@param>
                <@return>
                    n <tt>this<sup>exponent</sup></tt>.                    
                </@return>
            </javadoc>
            <method name="pow" type="BigFraction" line="956">
                <scope line="957"/>
            </method>
            <javadoc line="963">
                &lt;p&gt;
                 * Returns a &lt;code&gt;BigFraction&lt;/code&gt; whose value is
                 * &lt;tt&gt;(this&lt;sup&gt;exponent&lt;/sup&gt;)&lt;/tt&gt;, returning the result in reduced form.
                 * &lt;/p&gt;                
                <@param>
                    m exponentexponent to which this <code>BigFraction</code> is to be raised.                    
                </@param>
                <@return>
                    n <tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.                    
                </@return>
            </javadoc>
            <method name="pow" type="BigFraction" line="973">
                <scope line="974"/>
            </method>
            <javadoc line="982">
                &lt;p&gt;
                 * Returns a &lt;code&gt;BigFraction&lt;/code&gt; whose value is
                 * &lt;tt&gt;(this&lt;sup&gt;exponent&lt;/sup&gt;)&lt;/tt&gt;, returning the result in reduced form.
                 * &lt;/p&gt;                
                <@param>
                    m exponentexponent to which this <code>BigFraction</code> is to be raised.                    
                </@param>
                <@return>
                    n <tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.                    
                </@return>
            </javadoc>
            <method name="pow" type="BigFraction" line="992">
                <scope line="993">
                    <declaration name="eNeg" type="BigInteger" line="994"/>
                </scope>
            </method>
            <javadoc line="1002">
                &lt;p&gt;
                 * Returns a &lt;code&gt;double&lt;/code&gt; whose value is
                 * &lt;tt&gt;(this&lt;sup&gt;exponent&lt;/sup&gt;)&lt;/tt&gt;, returning the result in reduced form.
                 * &lt;/p&gt;                
                <@param>
                    m exponentexponent to which this <code>BigFraction</code> is to be raised.                    
                </@param>
                <@return>
                    n <tt>this<sup>exponent</sup></tt>.                    
                </@return>
            </javadoc>
            <method name="pow" type="double" line="1012"/>
            <javadoc line="1017">
                &lt;p&gt;
                 * Return the multiplicative inverse of this fraction.
                 * &lt;/p&gt;                
                <@return>
                    n the reciprocal fraction.                    
                </@return>
            </javadoc>
            <method name="reciprocal" type="BigFraction" line="1024"/>
            <javadoc line="1028">
                &lt;p&gt;
                 * Reduce this &lt;code&gt;BigFraction&lt;/code&gt; to its lowest terms.
                 * &lt;/p&gt;                
                <@return>
                    n the reduced <code>BigFraction</code>. It doesn't change anything if
                     * the fraction can be reduced.                    
                </@return>
            </javadoc>
            <method name="reduce" type="BigFraction" line="1036">
                <declaration name="gcd" type="BigInteger" line="1037"/>
            </method>
            <javadoc line="1041">
                &lt;p&gt;
                 * Subtracts the value of an {@link BigInteger} from the value of this{@code BigFraction}, returning the result in reduced form.
                 * &lt;/p&gt;                
                <@param>
                    m bg the {@link BigInteger} to subtract, cannot be {@code null}.                    
                </@param>
                <@return>
                    n a {@code BigFraction} instance with the resulting values.                    
                </@return>
                <@throws>
                    s NullArgumentException if the {@link BigInteger} is {@code null}.                    
                </@throws>
            </javadoc>
            <method name="subtract" type="BigFraction" line="1051">
                <scope line="1052"/>
            </method>
            <javadoc line="1058">
                &lt;p&gt;
                 * Subtracts the value of an {@code integer} from the value of this{@code BigFraction}, returning the result in reduced form.
                 * &lt;/p&gt;                
                <@param>
                    m i the {@code integer} to subtract.                    
                </@param>
                <@return>
                    n a {@code BigFraction} instance with the resulting values.                    
                </@return>
            </javadoc>
            <method name="subtract" type="BigFraction" line="1067"/>
            <javadoc line="1071">
                &lt;p&gt;
                 * Subtracts the value of a {@code long} from the value of this{@code BigFraction}, returning the result in reduced form.
                 * &lt;/p&gt;                
                <@param>
                    m l the {@code long} to subtract.                    
                </@param>
                <@return>
                    n a {@code BigFraction} instance with the resulting values.                    
                </@return>
            </javadoc>
            <method name="subtract" type="BigFraction" line="1080"/>
            <javadoc line="1084">
                &lt;p&gt;
                 * Subtracts the value of another fraction from the value of this one,
                 * returning the result in reduced form.
                 * &lt;/p&gt;                
                <@param>
                    m fraction {@link BigFraction} to subtract, must not be {@code null}.                    
                </@param>
                <@return>
                    n a {@link BigFraction} instance with the resulting values                    
                </@return>
                <@throws>
                    s NullArgumentException if the {@code fraction} is {@code null}.                    
                </@throws>
            </javadoc>
            <method name="subtract" type="BigFraction" line="1094">
                <scope line="1095"/>
                <scope line="1098"/>
                <declaration name="num" type="BigInteger" line="1102"/>
                <declaration name="den" type="BigInteger" line="1103"/>
                <scope line="1104"/>
                <scope line="1107"/>
            </method>
            <javadoc line="1115">
                &lt;p&gt;
                 * Returns the &lt;code&gt;String&lt;/code&gt; representing this fraction, ie
                 * &quot;num / dem&quot; or just &quot;num&quot; if the denominator is one.
                 * &lt;/p&gt;                
                <@return>
                    n a string representation of the fraction.                    
                </@return>
                <@see>
                    e java.lang.Object#toString()                    
                </@see>
            </javadoc>
            <method name="toString" type="String" line="1125">
                <declaration name="str" type="String" line="1126"/>
                <scope line="1127"/>
                <scope line="1129"/>
                <scope line="1131"/>
            </method>
            <javadoc line="1137">
                {@inheritDoc}                
            </javadoc>
            <method name="getField" type="BigFractionField" line="1138"/>
        </class>
    </source>