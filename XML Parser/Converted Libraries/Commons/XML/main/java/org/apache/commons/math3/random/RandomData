<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.random">
        <import package="java.util.Collection"/>
        <import package="org.apache.commons.math3.exception.NotANumberException"/>
        <import package="org.apache.commons.math3.exception.NotFiniteNumberException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <interface name="RandomData">
            <javadoc line="26">
                Random data generation utilities.                
                <@deprecated>
                    d to be removed in 4.0.  Use {@link RandomDataGenerator} directly                    
                </@deprecated>
                <@version>
                    n $Id: RandomData.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <method name="nextHexString" type="String" line="32"/>
            <javadoc line="32">
                Generates a random string of hex characters of length {@code len}.
                  &lt;p&gt;
                  The generated string will be random, but not cryptographically
                  secure. To generate cryptographically secure strings, use{@link #nextSecureHexString(int)}.
                  &lt;/p&gt;                
                <@param>
                    m len the length of the string to be generated                    
                </@param>
                <@return>
                    n a random string of hex characters of length {@code len}                    
                </@return>
                <@throws>
                    s NotStrictlyPositiveExceptionif {@code len <= 0}                    
                </@throws>
            </javadoc>
            <method name="nextInt" type="int" line="47"/>
            <javadoc line="47">
                Generates a uniformly distributed random integer between {@code lower}and {@code upper} (endpoints included).
                  &lt;p&gt;
                  The generated integer will be random, but not cryptographically secure.
                  To generate cryptographically secure integer sequences, use{@link #nextSecureInt(int,int)}.
                  &lt;/p&gt;                
                <@param>
                    m lower lower bound for generated integer                    
                </@param>
                <@param>
                    m upper upper bound for generated integer                    
                </@param>
                <@return>
                    n a random integer greater than or equal to {@code lower}and less than or equal to {@code upper}                    
                </@return>
                <@throws>
                    s NumberIsTooLargeException if {@code lower >= upper}                    
                </@throws>
            </javadoc>
            <method name="nextLong" type="long" line="64"/>
            <javadoc line="64">
                Generates a uniformly distributed random long integer between{@code lower} and {@code upper} (endpoints included).
                  &lt;p&gt;
                  The generated long integer values will be random, but not
                  cryptographically secure. To generate cryptographically secure sequences
                  of longs, use {@link #nextSecureLong(long,long)}.
                  &lt;/p&gt;                
                <@param>
                    m lower lower bound for generated long integer                    
                </@param>
                <@param>
                    m upper upper bound for generated long integer                    
                </@param>
                <@return>
                    n a random long integer greater than or equal to {@code lower} and
                      less than or equal to {@code upper}                    
                </@return>
                <@throws>
                    s NumberIsTooLargeException if {@code lower >= upper}                    
                </@throws>
            </javadoc>
            <method name="nextSecureHexString" type="String" line="81"/>
            <javadoc line="81">
                Generates a random string of hex characters from a secure random
                  sequence.
                  &lt;p&gt;
                  If cryptographic security is not required, use{@link #nextHexString(int)}.
                  &lt;/p&gt;                
                <@param>
                    m len the length of the string to be generated                    
                </@param>
                <@return>
                    n a random string of hex characters of length {@code len}                    
                </@return>
                <@throws>
                    s NotStrictlyPositiveException if {@code len <= 0}                    
                </@throws>
            </javadoc>
            <method name="nextSecureInt" type="int" line="95"/>
            <javadoc line="95">
                Generates a uniformly distributed random integer between {@code lower}and {@code upper} (endpoints included) from a secure random sequence.
                  &lt;p&gt;
                  Sequences of integers generated using this method will be
                  cryptographically secure. If cryptographic security is not required,{@link #nextInt(int,int)} should be used instead of this method.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Definition&lt;/strong&gt;:
                  &lt;a href=&quot;http://en.wikipedia.org/wiki/Cryptographically_secure_pseudo-random_number_generator&quot;&gt;
                  Secure Random Sequence&lt;/a&gt;&lt;/p&gt;                
                <@param>
                    m lower lower bound for generated integer                    
                </@param>
                <@param>
                    m upper upper bound for generated integer                    
                </@param>
                <@return>
                    n a random integer greater than or equal to {@code lower} and less
                      than or equal to {@code upper}.                    
                </@return>
                <@throws>
                    s NumberIsTooLargeException if {@code lower >= upper}.                    
                </@throws>
            </javadoc>
            <method name="nextSecureLong" type="long" line="115"/>
            <javadoc line="115">
                Generates a uniformly distributed random long integer between{@code lower} and {@code upper} (endpoints included) from a secure random
                  sequence.
                  &lt;p&gt;
                  Sequences of long values generated using this method will be
                  cryptographically secure. If cryptographic security is not required,{@link #nextLong(long,long)} should be used instead of this method.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Definition&lt;/strong&gt;:
                  &lt;a href=&quot;http://en.wikipedia.org/wiki/Cryptographically_secure_pseudo-random_number_generator&quot;&gt;
                  Secure Random Sequence&lt;/a&gt;&lt;/p&gt;                
                <@param>
                    m lower lower bound for generated integer                    
                </@param>
                <@param>
                    m upper upper bound for generated integer                    
                </@param>
                <@return>
                    n a random long integer greater than or equal to {@code lower} and
                      less than or equal to {@code upper}.                    
                </@return>
                <@throws>
                    s NumberIsTooLargeException if {@code lower >= upper}.                    
                </@throws>
            </javadoc>
            <method name="nextPoisson" type="long" line="136"/>
            <javadoc line="136">
                Generates a random value from the Poisson distribution with the given
                  mean.
                  &lt;p&gt;
                  &lt;strong&gt;Definition&lt;/strong&gt;:
                  &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/eda/section3/eda366j.htm&quot;&gt;
                  Poisson Distribution&lt;/a&gt;&lt;/p&gt;                
                <@param>
                    m mean the mean of the Poisson distribution                    
                </@param>
                <@return>
                    n a random value following the specified Poisson distribution                    
                </@return>
                <@throws>
                    s NotStrictlyPositiveException if {@code mean <= 0}.                    
                </@throws>
            </javadoc>
            <method name="nextGaussian" type="double" line="150"/>
            <javadoc line="150">
                Generates a random value from the Normal (or Gaussian) distribution with
                  specified mean and standard deviation.
                  &lt;p&gt;
                  &lt;strong&gt;Definition&lt;/strong&gt;:
                  &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/eda/section3/eda3661.htm&quot;&gt;
                  Normal Distribution&lt;/a&gt;&lt;/p&gt;                
                <@param>
                    m mu the mean of the distribution                    
                </@param>
                <@param>
                    m sigma the standard deviation of the distribution                    
                </@param>
                <@return>
                    n a random value following the specified Gaussian distribution                    
                </@return>
                <@throws>
                    s NotStrictlyPositiveException if {@code sigma <= 0}.                    
                </@throws>
            </javadoc>
            <method name="nextExponential" type="double" line="165"/>
            <javadoc line="165">
                Generates a random value from the exponential distribution
                  with specified mean.
                  &lt;p&gt;
                  &lt;strong&gt;Definition&lt;/strong&gt;:
                  &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/eda/section3/eda3667.htm&quot;&gt;
                  Exponential Distribution&lt;/a&gt;&lt;/p&gt;                
                <@param>
                    m mean the mean of the distribution                    
                </@param>
                <@return>
                    n a random value following the specified exponential distribution                    
                </@return>
                <@throws>
                    s NotStrictlyPositiveException if {@code mean <= 0}.                    
                </@throws>
            </javadoc>
            <method name="nextUniform" type="double" line="179"/>
            <javadoc line="179">
                Generates a uniformly distributed random value from the open interval{@code (lower, upper)} (i.e., endpoints excluded).
                  &lt;p&gt;
                  &lt;strong&gt;Definition&lt;/strong&gt;:
                  &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/eda/section3/eda3662.htm&quot;&gt;
                  Uniform Distribution&lt;/a&gt; {@code lower} and {@code upper - lower} are the
                  &lt;a href = &quot;http://www.itl.nist.gov/div898/handbook/eda/section3/eda364.htm&quot;&gt;
                  location and scale parameters&lt;/a&gt;, respectively.&lt;/p&gt;                
                <@param>
                    m lower the exclusive lower bound of the support                    
                </@param>
                <@param>
                    m upper the exclusive upper bound of the support                    
                </@param>
                <@return>
                    n a uniformly distributed random value between lower and upper
                      (exclusive)                    
                </@return>
                <@throws>
                    s NumberIsTooLargeException if {@code lower >= upper}                    
                </@throws>
                <@throws>
                    s NotFiniteNumberException if one of the bounds is infinite                    
                </@throws>
                <@throws>
                    s NotANumberException if one of the bounds is NaN                    
                </@throws>
            </javadoc>
            <method name="nextUniform" type="double" line="200"/>
            <javadoc line="200">
                Generates a uniformly distributed random value from the interval{@code (lower, upper)} or the interval {@code [lower, upper)}. The lower
                  bound is thus optionally included, while the upper bound is always
                  excluded.
                  &lt;p&gt;
                  &lt;strong&gt;Definition&lt;/strong&gt;:
                  &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/eda/section3/eda3662.htm&quot;&gt;
                  Uniform Distribution&lt;/a&gt; {@code lower} and {@code upper - lower} are the
                  &lt;a href = &quot;http://www.itl.nist.gov/div898/handbook/eda/section3/eda364.htm&quot;&gt;
                  location and scale parameters&lt;/a&gt;, respectively.&lt;/p&gt;                
                <@param>
                    m lower the lower bound of the support                    
                </@param>
                <@param>
                    m upper the exclusive upper bound of the support                    
                </@param>
                <@param>
                    m lowerInclusive {@code true} if the lower bound is inclusive                    
                </@param>
                <@return>
                    n uniformly distributed random value in the {@code (lower, upper)}interval, if {@code lowerInclusive} is {@code false}, or in the{@code [lower, upper)} interval, if {@code lowerInclusive} is{@code true}                    
                </@return>
                <@throws>
                    s NumberIsTooLargeException if {@code lower >= upper}                    
                </@throws>
                <@throws>
                    s NotFiniteNumberException if one of the bounds is infinite                    
                </@throws>
                <@throws>
                    s NotANumberException if one of the bounds is NaN                    
                </@throws>
            </javadoc>
            <method name="nextPermutation" type="int[]" line="226"/>
            <javadoc line="226">
                Generates an integer array of length {@code k} whose entries are selected
                  randomly, without repetition, from the integers {@code 0, ..., n - 1}(inclusive).
                  &lt;p&gt;
                  Generated arrays represent permutations of {@code n} taken {@code k} at a
                  time.&lt;/p&gt;                
                <@param>
                    m n the domain of the permutation                    
                </@param>
                <@param>
                    m k the size of the permutation                    
                </@param>
                <@return>
                    n a random {@code k}-permutation of {@code n}, as an array of
                      integers                    
                </@return>
                <@throws>
                    s NumberIsTooLargeException if {@code k > n}.                    
                </@throws>
                <@throws>
                    s NotStrictlyPositiveException if {@code k <= 0}.                    
                </@throws>
            </javadoc>
            <method name="nextSample" type="Object[]" line="244"/>
            <javadoc line="244">
                Returns an array of {@code k} objects selected randomly from the
                  Collection {@code c}.
                  &lt;p&gt;
                  Sampling from {@code c} is without replacement; but if {@code c} contains
                  identical objects, the sample may include repeats.  If all elements of{@code c} are distinct, the resulting object array represents a
                  &lt;a href=&quot;http://rkb.home.cern.ch/rkb/AN16pp/node250.html#SECTION0002500000000000000000&quot;&gt;
                  Simple Random Sample&lt;/a&gt; of size {@code k} from the elements of{@code c}.&lt;/p&gt;                
                <@param>
                    m c the collection to be sampled                    
                </@param>
                <@param>
                    m k the size of the sample                    
                </@param>
                <@return>
                    n a random sample of {@code k} elements from {@code c}                    
                </@return>
                <@throws>
                    s NumberIsTooLargeException if {@code k > c.size()}.                    
                </@throws>
                <@throws>
                    s NotStrictlyPositiveException if {@code k <= 0}.                    
                </@throws>
            </javadoc>
        </interface>
    </source>