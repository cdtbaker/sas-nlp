<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.random">
        <import package="java.io.Serializable"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.NoSuchProviderException"/>
        <import package="java.security.SecureRandom"/>
        <import package="java.util.Collection"/>
        <import package="org.apache.commons.math3.distribution.BetaDistribution"/>
        <import package="org.apache.commons.math3.distribution.BinomialDistribution"/>
        <import package="org.apache.commons.math3.distribution.CauchyDistribution"/>
        <import package="org.apache.commons.math3.distribution.ChiSquaredDistribution"/>
        <import package="org.apache.commons.math3.distribution.ExponentialDistribution"/>
        <import package="org.apache.commons.math3.distribution.FDistribution"/>
        <import package="org.apache.commons.math3.distribution.GammaDistribution"/>
        <import package="org.apache.commons.math3.distribution.HypergeometricDistribution"/>
        <import package="org.apache.commons.math3.distribution.PascalDistribution"/>
        <import package="org.apache.commons.math3.distribution.PoissonDistribution"/>
        <import package="org.apache.commons.math3.distribution.TDistribution"/>
        <import package="org.apache.commons.math3.distribution.WeibullDistribution"/>
        <import package="org.apache.commons.math3.distribution.ZipfDistribution"/>
        <import package="org.apache.commons.math3.exception.MathInternalError"/>
        <import package="org.apache.commons.math3.exception.NotANumberException"/>
        <import package="org.apache.commons.math3.exception.NotFiniteNumberException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="RandomDataGenerator" line="49">
            <implements interface="RandomData"/>
            <implements interface="Serializable"/>
            <javadoc line="49">
                Implements the {@link RandomData} interface using a {@link RandomGenerator}instance to generate non-secure data and a {@link java.security.SecureRandom}instance to provide data for the &lt;code&gt;nextSecureXxx&lt;/code&gt; methods. If no
                 * &lt;code&gt;RandomGenerator&lt;/code&gt; is provided in the constructor, the default is
                 * to use a {@link Well19937c} generator. To plug in a different
                 * implementation, either implement &lt;code&gt;RandomGenerator&lt;/code&gt; directly or
                 * extend {@link AbstractRandomGenerator}.
                 * &lt;p&gt;
                 * Supports reseeding the underlying pseudo-random number generator (PRNG). The
                 * &lt;code&gt;SecurityProvider&lt;/code&gt; and &lt;code&gt;Algorithm&lt;/code&gt; used by the
                 * &lt;code&gt;SecureRandom&lt;/code&gt; instance can also be reset.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * For details on the default PRNGs, see {@link java.util.Random} and{@link java.security.SecureRandom}.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Usage Notes&lt;/strong&gt;:
                 * &lt;ul&gt;
                 * &lt;li&gt;
                 * Instance variables are used to maintain &lt;code&gt;RandomGenerator&lt;/code&gt; and
                 * &lt;code&gt;SecureRandom&lt;/code&gt; instances used in data generation. Therefore, to
                 * generate a random sequence of values or strings, you should use just
                 * &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;RandomDataImpl&lt;/code&gt; instance repeatedly.&lt;/li&gt;
                 * &lt;li&gt;
                 * The &quot;secure&quot; methods are *much* slower. These should be used only when a
                 * cryptographically secure random sequence is required. A secure random
                 * sequence is a sequence of pseudo-random values which, in addition to being
                 * well-dispersed (so no subsequence of values is an any more likely than other
                 * subsequence of the the same length), also has the additional property that
                 * knowledge of values generated up to any point in the sequence does not make
                 * it any easier to predict subsequent values.&lt;/li&gt;
                 * &lt;li&gt;
                 * When a new &lt;code&gt;RandomDataImpl&lt;/code&gt; is created, the underlying random
                 * number generators are &lt;strong&gt;not&lt;/strong&gt; initialized. If you do not
                 * explicitly seed the default non-secure generator, it is seeded with the
                 * current time in milliseconds plus the system identity hash code on first use.
                 * The same holds for the secure generator. If you provide a &lt;code&gt;RandomGenerator&lt;/code&gt;
                 * to the constructor, however, this generator is not reseeded by the constructor
                 * nor is it reseeded on first use.&lt;/li&gt;
                 * &lt;li&gt;
                 * The &lt;code&gt;reSeed&lt;/code&gt; and &lt;code&gt;reSeedSecure&lt;/code&gt; methods delegate to the
                 * corresponding methods on the underlying &lt;code&gt;RandomGenerator&lt;/code&gt; and
                 * &lt;code&gt;SecureRandom&lt;/code&gt; instances. Therefore, &lt;code&gt;reSeed(long)&lt;/code&gt;
                 * fully resets the initial state of the non-secure random number generator (so
                 * that reseeding with a specific value always results in the same subsequent
                 * random sequence); whereas reSeedSecure(long) does &lt;strong&gt;not&lt;/strong&gt;
                 * reinitialize the secure random number generator (so secure sequences started
                 * with calls to reseedSecure(long) won&apos;t be identical).&lt;/li&gt;
                 * &lt;li&gt;
                 * This implementation is not synchronized. The underlying &lt;code&gt;RandomGenerator&lt;/code&gt;
                 * or &lt;code&gt;SecureRandom&lt;/code&gt; instances are not protected by synchronization and
                 * are not guaranteed to be thread-safe.  Therefore, if an instance of this class
                 * is concurrently utilized by multiple threads, it is the responsibility of
                 * client code to synchronize access to seeding and data generation methods.
                 * &lt;/li&gt;
                 * &lt;/ul&gt;
                 * &lt;/p&gt;                
                <@since>
                    e 3.1                    
                </@since>
                <@version>
                    n $Id: RandomDataGenerator.java 1462423 2013-03-29 07:25:18Z luc $                    
                </@version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="113"/>
            <javadoc line="113">
                Serializable version identifier                
            </javadoc>
            <declaration name="rand" type="RandomGenerator" line="116"/>
            <javadoc line="116">
                underlying random number generator                
            </javadoc>
            <declaration name="secRand" type="SecureRandom" line="119"/>
            <javadoc line="119">
                underlying secure random number generator                
            </javadoc>
            <javadoc line="122">
                Construct a RandomDataGenerator, using a default random generator as the source
                 * of randomness.
                 * &lt;p&gt;The default generator is a {@link Well19937c} seeded
                 * with {@code System.currentTimeMillis() + System.identityHashCode(this))}.
                 * The generator is initialized and seeded on first use.&lt;/p&gt;                
            </javadoc>
            <method name="RandomDataGenerator" type="constructor" line="130"/>
            <javadoc line="133">
                Construct a RandomDataGenerator using the supplied {@link RandomGenerator} as
                 * the source of (non-secure) random data.                
                <@param>
                    m rand the source of (non-secure) random data
                     * (may be null, resulting in the default generator)                    
                </@param>
            </javadoc>
            <method name="RandomDataGenerator" type="constructor" line="140"/>
            <javadoc line="144">
                {@inheritDoc}&lt;p&gt;
                 * &lt;strong&gt;Algorithm Description:&lt;/strong&gt; hex strings are generated using a
                 * 2-step process.
                 * &lt;ol&gt;
                 * &lt;li&gt;{@code len / 2 + 1} binary bytes are generated using the underlying
                 * Random&lt;/li&gt;
                 * &lt;li&gt;Each binary byte is translated into 2 hex digits&lt;/li&gt;
                 * &lt;/ol&gt;
                 * &lt;/p&gt;                
                <@param>
                    m len the desired string length.                    
                </@param>
                <@return>
                    n the random string.                    
                </@return>
                <@throws>
                    s NotStrictlyPositiveException if {@code len <= 0}.                    
                </@throws>
            </javadoc>
            <method name="nextHexString" type="String" line="160">
                <comment line="161">
                    Get a random number generator                    
                </comment>
                <comment line="161">
                    Initialize output buffer                    
                </comment>
                <comment line="161">
                    Get int(len/2)+1 random bytes                    
                </comment>
                <comment line="161">
                    Convert each byte to 2 hex digits                    
                </comment>
                <scope line="161"/>
                <declaration name="ran" type="RandomGenerator" line="166"/>
                <declaration name="outBuffer" type="StringBuilder" line="169"/>
                <declaration name="randomBytes" type="byte[]" line="172"/>
                <scope line="176">
                    <declaration name="c" type="Integer" line="177"/>
                    <declaration name="hex" type="String" line="184"/>
                    <scope line="187"/>
                </scope>
            </method>
            <javadoc line="195">
                {@inheritDoc}                
            </javadoc>
            <method name="nextInt" type="int" line="196">
                <scope line="197"/>
                <declaration name="max" type="int" line="201"/>
                <scope line="202">
                    <declaration name="rng" type="RandomGenerator" line="205"/>
                    <scope line="206">
                        <declaration name="r" type="int" line="207"/>
                        <scope line="208"/>
                    </scope>
                </scope>
                <scope line="212"/>
            </method>
            <javadoc line="218">
                {@inheritDoc}                
            </javadoc>
            <method name="nextLong" type="long" line="219">
                <scope line="220"/>
                <declaration name="max" type="long" line="224"/>
                <scope line="225">
                    <declaration name="rng" type="RandomGenerator" line="228"/>
                    <scope line="229">
                        <declaration name="r" type="long" line="230"/>
                        <scope line="231"/>
                    </scope>
                </scope>
                <scope line="235"/>
                <scope line="238"/>
            </method>
            <javadoc line="244">
                Returns a pseudorandom, uniformly distributed &lt;tt&gt;long&lt;/tt&gt; value
                 * between 0 (inclusive) and the specified value (exclusive), drawn from
                 * this random number generator&apos;s sequence.                
                <@param>
                    m rng random generator to use                    
                </@param>
                <@param>
                    m n the bound on the random number to be returned.  Must be
                     * positive.                    
                </@param>
                <@return>
                    n  a pseudorandom, uniformly distributed <tt>long</tt>
                     * value between 0 (inclusive) and n (exclusive).                    
                </@return>
                <@throws>
                    s IllegalArgumentException  if n is not positive.                    
                </@throws>
            </javadoc>
            <method name="nextLong" type="long" line="256">
                <scope line="257">
                    <declaration name="byteArray" type="byte[]" line="258"/>
                    <declaration name="bits" type="long" line="259"/>
                    <declaration name="val" type="long" line="260"/>
                    <scope line="261">
                        <scope line="264"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="275">
                {@inheritDoc}&lt;p&gt;
                 * &lt;strong&gt;Algorithm Description:&lt;/strong&gt; hex strings are generated in
                 * 40-byte segments using a 3-step process.
                 * &lt;ol&gt;
                 * &lt;li&gt;
                 * 20 random bytes are generated using the underlying
                 * &lt;code&gt;SecureRandom&lt;/code&gt;.&lt;/li&gt;
                 * &lt;li&gt;
                 * SHA-1 hash is applied to yield a 20-byte binary digest.&lt;/li&gt;
                 * &lt;li&gt;
                 * Each byte of the binary digest is converted to 2 hex digits.&lt;/li&gt;
                 * &lt;/ol&gt;
                 * &lt;/p&gt;                
                <@throws>
                    s NotStrictlyPositiveException if {@code len <= 0}                    
                </@throws>
            </javadoc>
            <method name="nextSecureHexString" type="String" line="292">
                <comment line="293">
                    Get SecureRandom and setup Digest provider                    
                </comment>
                <comment line="293">
                    Compute number of iterations required (40 bytes each)                    
                </comment>
                <scope line="293"/>
                <declaration name="secRan" type="SecureRandom" line="298"/>
                <declaration name="alg" type="MessageDigest" line="299"/>
                <scope line="300"/>
                <scope line="302"/>
                <declaration name="numIter" type="int" line="309"/>
                <declaration name="outBuffer" type="StringBuilder" line="311"/>
                <scope line="312">
                    <declaration name="randomBytes" type="byte[]" line="313"/>
                    <declaration name="hash" type="byte[]" line="318"/>
                    <scope line="321">
                        <declaration name="c" type="Integer" line="322"/>
                        <declaration name="hex" type="String" line="329"/>
                        <scope line="332"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="341">
                {@inheritDoc}                
            </javadoc>
            <method name="nextSecureInt" type="int" line="342">
                <scope line="343"/>
                <declaration name="max" type="int" line="347"/>
                <scope line="348">
                    <declaration name="rng" type="SecureRandom" line="351"/>
                    <scope line="352">
                        <declaration name="r" type="int" line="353"/>
                        <scope line="354"/>
                    </scope>
                </scope>
                <scope line="358"/>
            </method>
            <javadoc line="364">
                {@inheritDoc}                
            </javadoc>
            <method name="nextSecureLong" type="long" line="365">
                <scope line="366"/>
                <declaration name="max" type="long" line="370"/>
                <scope line="371">
                    <declaration name="rng" type="SecureRandom" line="374"/>
                    <scope line="375">
                        <declaration name="r" type="long" line="376"/>
                        <scope line="377"/>
                    </scope>
                </scope>
                <scope line="381"/>
                <scope line="384"/>
            </method>
            <javadoc line="390">
                Returns a pseudorandom, uniformly distributed &lt;tt&gt;long&lt;/tt&gt; value
                 * between 0 (inclusive) and the specified value (exclusive), drawn from
                 * this random number generator&apos;s sequence.                
                <@param>
                    m rng random generator to use                    
                </@param>
                <@param>
                    m n the bound on the random number to be returned.  Must be
                     * positive.                    
                </@param>
                <@return>
                    n  a pseudorandom, uniformly distributed <tt>long</tt>
                     * value between 0 (inclusive) and n (exclusive).                    
                </@return>
                <@throws>
                    s IllegalArgumentException  if n is not positive.                    
                </@throws>
            </javadoc>
            <method name="nextLong" type="long" line="402">
                <scope line="403">
                    <declaration name="byteArray" type="byte[]" line="404"/>
                    <declaration name="bits" type="long" line="405"/>
                    <declaration name="val" type="long" line="406"/>
                    <scope line="407">
                        <scope line="410"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="421">
                {@inheritDoc}&lt;p&gt;
                 * &lt;strong&gt;Algorithm Description&lt;/strong&gt;:
                 * &lt;ul&gt;&lt;li&gt; For small means, uses simulation of a Poisson process
                 * using Uniform deviates, as described
                 * &lt;a href=&quot;http://irmi.epfl.ch/cmos/Pmmi/interactive/rng7.htm&quot;&gt; here.&lt;/a&gt;
                 * The Poisson process (and hence value returned) is bounded by 1000 * mean.&lt;/li&gt;
                 * &lt;li&gt; For large means, uses the rejection algorithm described in &lt;br/&gt;
                 * Devroye, Luc. (1981).&lt;i&gt;The Computer Generation of Poisson Random Variables&lt;/i&gt;
                 * &lt;strong&gt;Computing&lt;/strong&gt; vol. 26 pp. 197-207.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@throws>
                    s NotStrictlyPositiveException if {@code len <= 0}                    
                </@throws>
            </javadoc>
            <method name="nextPoisson" type="long" line="435"/>
            <javadoc line="441">
                {@inheritDoc}                
            </javadoc>
            <method name="nextGaussian" type="double" line="442">
                <scope line="443"/>
            </method>
            <javadoc line="449">
                {@inheritDoc}&lt;p&gt;
                 * &lt;strong&gt;Algorithm Description&lt;/strong&gt;: Uses the Algorithm SA (Ahrens)
                 * from p. 876 in:
                 * [1]: Ahrens, J. H. and Dieter, U. (1972). Computer methods for
                 * sampling from the exponential and normal distributions.
                 * Communications of the ACM, 15, 873-882.
                 * &lt;/p&gt;                
            </javadoc>
            <method name="nextExponential" type="double" line="460"/>
            <javadoc line="465">
                &lt;p&gt;Generates a random value from the{@link org.apache.commons.math3.distribution.GammaDistribution Gamma Distribution}.&lt;/p&gt;
                 * &lt;p&gt;This implementation uses the following algorithms: &lt;/p&gt;
                 * &lt;p&gt;For 0 &lt; shape &lt; 1: &lt;br/&gt;
                 * Ahrens, J. H. and Dieter, U., &lt;i&gt;Computer methods for
                 * sampling from gamma, beta, Poisson and binomial distributions.&lt;/i&gt;
                 * Computing, 12, 223-246, 1974.&lt;/p&gt;
                 * &lt;p&gt;For shape &gt;= 1: &lt;br/&gt;
                 * Marsaglia and Tsang, &lt;i&gt;A Simple Method for Generating
                 * Gamma Variables.&lt;/i&gt; ACM Transactions on Mathematical Software,
                 * Volume 26 Issue 3, September, 2000.&lt;/p&gt;                
                <@param>
                    m shape the median of the Gamma distribution                    
                </@param>
                <@param>
                    m scale the scale parameter of the Gamma distribution                    
                </@param>
                <@return>
                    n random value sampled from the Gamma(shape, scale) distribution                    
                </@return>
                <@throws>
                    s NotStrictlyPositiveException if {@code shape <= 0} or{@code scale <= 0}.                    
                </@throws>
            </javadoc>
            <method name="nextGamma" type="double" line="487"/>
            <javadoc line="492">
                Generates a random value from the {@link HypergeometricDistribution Hypergeometric Distribution}.                
                <@param>
                    m populationSize the population size of the Hypergeometric distribution                    
                </@param>
                <@param>
                    m numberOfSuccesses number of successes in the population of the Hypergeometric distribution                    
                </@param>
                <@param>
                    m sampleSize the sample size of the Hypergeometric distribution                    
                </@param>
                <@return>
                    n random value sampled from the Hypergeometric(numberOfSuccesses, sampleSize) distribution                    
                </@return>
                <@throws>
                    s NumberIsTooLargeException  if {@code numberOfSuccesses > populationSize},
                     * or {@code sampleSize > populationSize}.                    
                </@throws>
                <@throws>
                    s NotStrictlyPositiveException if {@code populationSize <= 0}.                    
                </@throws>
                <@throws>
                    s NotPositiveException  if {@code numberOfSuccesses < 0}.                    
                </@throws>
            </javadoc>
            <method name="nextHypergeometric" type="int" line="504"/>
            <javadoc line="509">
                Generates a random value from the {@link PascalDistribution Pascal Distribution}.                
                <@param>
                    m r the number of successes of the Pascal distribution                    
                </@param>
                <@param>
                    m p the probability of success of the Pascal distribution                    
                </@param>
                <@return>
                    n random value sampled from the Pascal(r, p) distribution                    
                </@return>
                <@throws>
                    s NotStrictlyPositiveException if the number of successes is not positive                    
                </@throws>
                <@throws>
                    s OutOfRangeException if the probability of success is not in the
                     * range {@code [0, 1]}.                    
                </@throws>
            </javadoc>
            <method name="nextPascal" type="int" line="519"/>
            <javadoc line="523">
                Generates a random value from the {@link TDistribution T Distribution}.                
                <@param>
                    m df the degrees of freedom of the T distribution                    
                </@param>
                <@return>
                    n random value from the T(df) distribution                    
                </@return>
                <@throws>
                    s NotStrictlyPositiveException if {@code df <= 0}                    
                </@throws>
            </javadoc>
            <method name="nextT" type="double" line="530"/>
            <javadoc line="535">
                Generates a random value from the {@link WeibullDistribution Weibull Distribution}.                
                <@param>
                    m shape the shape parameter of the Weibull distribution                    
                </@param>
                <@param>
                    m scale the scale parameter of the Weibull distribution                    
                </@param>
                <@return>
                    n random value sampled from the Weibull(shape, size) distribution                    
                </@return>
                <@throws>
                    s NotStrictlyPositiveException if {@code shape <= 0} or{@code scale <= 0}.                    
                </@throws>
            </javadoc>
            <method name="nextWeibull" type="double" line="544"/>
            <javadoc line="549">
                Generates a random value from the {@link ZipfDistribution Zipf Distribution}.                
                <@param>
                    m numberOfElements the number of elements of the ZipfDistribution                    
                </@param>
                <@param>
                    m exponent the exponent of the ZipfDistribution                    
                </@param>
                <@return>
                    n random value sampled from the Zipf(numberOfElements, exponent) distribution                    
                </@return>
                <@exception>
                    n NotStrictlyPositiveException if {@code numberOfElements <= 0}or {@code exponent <= 0}.                    
                </@exception>
            </javadoc>
            <method name="nextZipf" type="int" line="558"/>
            <javadoc line="562">
                Generates a random value from the {@link BetaDistribution Beta Distribution}.                
                <@param>
                    m alpha first distribution shape parameter                    
                </@param>
                <@param>
                    m beta second distribution shape parameter                    
                </@param>
                <@return>
                    n random value sampled from the beta(alpha, beta) distribution                    
                </@return>
            </javadoc>
            <method name="nextBeta" type="double" line="569"/>
            <javadoc line="574">
                Generates a random value from the {@link BinomialDistribution Binomial Distribution}.                
                <@param>
                    m numberOfTrials number of trials of the Binomial distribution                    
                </@param>
                <@param>
                    m probabilityOfSuccess probability of success of the Binomial distribution                    
                </@param>
                <@return>
                    n random value sampled from the Binomial(numberOfTrials, probabilityOfSuccess) distribution                    
                </@return>
            </javadoc>
            <method name="nextBinomial" type="int" line="581"/>
            <javadoc line="585">
                Generates a random value from the {@link CauchyDistribution Cauchy Distribution}.                
                <@param>
                    m median the median of the Cauchy distribution                    
                </@param>
                <@param>
                    m scale the scale parameter of the Cauchy distribution                    
                </@param>
                <@return>
                    n random value sampled from the Cauchy(median, scale) distribution                    
                </@return>
            </javadoc>
            <method name="nextCauchy" type="double" line="592"/>
            <javadoc line="597">
                Generates a random value from the {@link ChiSquaredDistribution ChiSquare Distribution}.                
                <@param>
                    m df the degrees of freedom of the ChiSquare distribution                    
                </@param>
                <@return>
                    n random value sampled from the ChiSquare(df) distribution                    
                </@return>
            </javadoc>
            <method name="nextChiSquare" type="double" line="603"/>
            <javadoc line="608">
                Generates a random value from the {@link FDistribution F Distribution}.                
                <@param>
                    m numeratorDf the numerator degrees of freedom of the F distribution                    
                </@param>
                <@param>
                    m denominatorDf the denominator degrees of freedom of the F distribution                    
                </@param>
                <@return>
                    n random value sampled from the F(numeratorDf, denominatorDf) distribution                    
                </@return>
                <@throws>
                    s NotStrictlyPositiveException if{@code numeratorDf <= 0} or {@code denominatorDf <= 0}.                    
                </@throws>
            </javadoc>
            <method name="nextF" type="double" line="617"/>
            <javadoc line="622">
                {@inheritDoc}&lt;p&gt;
                 * &lt;strong&gt;Algorithm Description&lt;/strong&gt;: scales the output of
                 * Random.nextDouble(), but rejects 0 values (i.e., will generate another
                 * random double if Random.nextDouble() returns 0). This is necessary to
                 * provide a symmetric output interval (both endpoints excluded).
                 * &lt;/p&gt;                
                <@throws>
                    s NumberIsTooLargeException if {@code lower >= upper}                    
                </@throws>
                <@throws>
                    s NotFiniteNumberException if one of the bounds is infinite                    
                </@throws>
                <@throws>
                    s NotANumberException if one of the bounds is NaN                    
                </@throws>
            </javadoc>
            <method name="nextUniform" type="double" line="636"/>
            <javadoc line="640">
                {@inheritDoc}&lt;p&gt;
                 * &lt;strong&gt;Algorithm Description&lt;/strong&gt;: if the lower bound is excluded,
                 * scales the output of Random.nextDouble(), but rejects 0 values (i.e.,
                 * will generate another random double if Random.nextDouble() returns 0).
                 * This is necessary to provide a symmetric output interval (both
                 * endpoints excluded).
                 * &lt;/p&gt;                
                <@throws>
                    s NumberIsTooLargeException if {@code lower >= upper}                    
                </@throws>
                <@throws>
                    s NotFiniteNumberException if one of the bounds is infinite                    
                </@throws>
                <@throws>
                    s NotANumberException if one of the bounds is NaN                    
                </@throws>
            </javadoc>
            <method name="nextUniform" type="double" line="656">
                <comment line="657">
                    ensure nextDouble() isn&apos;t 0.0                    
                </comment>
                <scope line="658"/>
                <scope line="663"/>
                <scope line="666"/>
                <scope line="670"/>
                <declaration name="generator" type="RandomGenerator" line="674"/>
                <declaration name="u" type="double" line="677"/>
                <scope line="678"/>
            </method>
            <javadoc line="685">
                {@inheritDoc}&lt;p&gt;
                 * Uses a 2-cycle permutation shuffle. The shuffling process is described &lt;a
                 * href=&quot;http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html&quot;&gt;
                 * here&lt;/a&gt;.
                 * &lt;/p&gt;                
                <@throws>
                    s NumberIsTooLargeException if {@code k > n}.                    
                </@throws>
                <@throws>
                    s NotStrictlyPositiveException if {@code k <= 0}.                    
                </@throws>
            </javadoc>
            <method name="nextPermutation" type="int[]" line="697">
                <scope line="698"/>
                <scope line="702"/>
                <declaration name="index" type="int[]" line="707"/>
                <declaration name="result" type="int[]" line="709"/>
                <scope line="710"/>
            </method>
            <javadoc line="717">
                {@inheritDoc}&lt;p&gt;
                 * &lt;strong&gt;Algorithm Description&lt;/strong&gt;: Uses a 2-cycle permutation
                 * shuffle to generate a random permutation of &lt;code&gt;c.size()&lt;/code&gt; and
                 * then returns the elements whose indexes correspond to the elements of the
                 * generated permutation. This technique is described, and proven to
                 * generate random samples &lt;a
                 * href=&quot;http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html&quot;&gt;
                 * here&lt;/a&gt;
                 * &lt;/p&gt;                
            </javadoc>
            <method name="nextSample" type="Object[]" line="730">
                <declaration name="len" type="int" line="732"/>
                <scope line="733"/>
                <scope line="737"/>
                <declaration name="objects" type="Object[]" line="741"/>
                <declaration name="index" type="int[]" line="742"/>
                <declaration name="result" type="Object[]" line="743"/>
                <scope line="744"/>
            </method>
            <javadoc line="752">
                Reseeds the random number generator with the supplied seed.
                 * &lt;p&gt;
                 * Will create and initialize if null.
                 * &lt;/p&gt;                
                <@param>
                    m seed the seed value to use                    
                </@param>
            </javadoc>
            <method name="reSeed" type="void" line="760"/>
            <javadoc line="764">
                Reseeds the secure random number generator with the current time in
                 * milliseconds.
                 * &lt;p&gt;
                 * Will create and initialize if null.
                 * &lt;/p&gt;                
            </javadoc>
            <method name="reSeedSecure" type="void" line="771"/>
            <javadoc line="775">
                Reseeds the secure random number generator with the supplied seed.
                 * &lt;p&gt;
                 * Will create and initialize if null.
                 * &lt;/p&gt;                
                <@param>
                    m seed the seed value to use                    
                </@param>
            </javadoc>
            <method name="reSeedSecure" type="void" line="783"/>
            <javadoc line="787">
                Reseeds the random number generator with{@code System.currentTimeMillis() + System.identityHashCode(this))}.                
            </javadoc>
            <method name="reSeed" type="void" line="791"/>
            <javadoc line="795">
                Sets the PRNG algorithm for the underlying SecureRandom instance using
                 * the Security Provider API. The Security Provider API is defined in &lt;a
                 * href =
                 * &quot;http://java.sun.com/j2se/1.3/docs/guide/security/CryptoSpec.html#AppA&quot;&gt;
                 * Java Cryptography Architecture API Specification &amp; Reference.&lt;/a&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;USAGE NOTE:&lt;/strong&gt; This method carries &lt;i&gt;significant&lt;/i&gt;
                 * overhead and may take several seconds to execute.
                 * &lt;/p&gt;                
                <@param>
                    m algorithm the name of the PRNG algorithm                    
                </@param>
                <@param>
                    m provider the name of the provider                    
                </@param>
                <@throws>
                    s NoSuchAlgorithmException if the specified algorithm is not available                    
                </@throws>
                <@throws>
                    s NoSuchProviderException if the specified provider is not installed                    
                </@throws>
            </javadoc>
            <method name="setSecureAlgorithm" type="void" line="812"/>
            <javadoc line="816">
                Returns the RandomGenerator used to generate non-secure random data.
                 * &lt;p&gt;
                 * Creates and initializes a default generator if null. Uses a {@link Well19937c}generator with {@code System.currentTimeMillis() + System.identityHashCode(this))}as the default seed.
                 * &lt;/p&gt;                
                <@return>
                    n the Random used to generate random data                    
                </@return>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="getRandomGenerator" type="RandomGenerator" line="827">
                <scope line="828"/>
            </method>
            <javadoc line="834">
                Sets the default generator to a {@link Well19937c} generator seeded with{@code System.currentTimeMillis() + System.identityHashCode(this))}.                
            </javadoc>
            <method name="initRan" type="void" line="838"/>
            <javadoc line="842">
                Returns the SecureRandom used to generate secure random data.
                 * &lt;p&gt;
                 * Creates and initializes if null.  Uses{@code System.currentTimeMillis() + System.identityHashCode(this)} as the default seed.
                 * &lt;/p&gt;                
                <@return>
                    n the SecureRandom used to generate secure random data                    
                </@return>
            </javadoc>
            <method name="getSecRan" type="SecureRandom" line="851">
                <scope line="852"/>
            </method>
            <javadoc line="859">
                Uses a 2-cycle permutation shuffle to randomly re-order the last elements
                 * of list.                
                <@param>
                    m list list to be shuffled                    
                </@param>
                <@param>
                    m end element past which shuffling begins                    
                </@param>
            </javadoc>
            <method name="shuffle" type="void" line="866">
                <declaration name="target" type="int" line="867"/>
                <scope line="868">
                    <scope line="869"/>
                    <scope line="871"/>
                    <declaration name="temp" type="int" line="875"/>
                </scope>
            </method>
            <javadoc line="881">
                Returns an array representing n.                
                <@param>
                    m n the natural number to represent                    
                </@param>
                <@return>
                    n array with entries = elements of n                    
                </@return>
            </javadoc>
            <method name="getNatural" type="int[]" line="887">
                <declaration name="natural" type="int[]" line="888"/>
                <scope line="889"/>
            </method>
        </class>
    </source>