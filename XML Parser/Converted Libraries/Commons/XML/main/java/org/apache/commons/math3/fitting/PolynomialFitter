<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fitting">
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialFunction"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer"/>
        <class name="PolynomialFitter" extends="CurveFitter<PolynomialFunction.Parametric>" line="22">
            <javadoc line="22">
                Polynomial fitting is a very simple case of {@link CurveFitter curve fitting}.
                 * The estimated coefficients are the polynomial coefficients (see the{@link #fit(double[]) fit} method).                
                <@version>
                    n $Id: PolynomialFitter.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <javadoc line="31">
                Simple constructor.                
                <@param>
                    m optimizer Optimizer to use for the fitting.                    
                </@param>
            </javadoc>
            <method name="PolynomialFitter" type="constructor" line="36"/>
            <javadoc line="40">
                Get the coefficients of the polynomial fitting the weighted data points.
                 * The degree of the fitting polynomial is {@code guess.length - 1}.                
                <@param>
                    m guess First guess for the coefficients. They must be sorted in
                     * increasing order of the polynomial's degree.                    
                </@param>
                <@param>
                    m maxEval Maximum number of evaluations of the polynomial.                    
                </@param>
                <@return>
                    n the coefficients of the polynomial that best fits the observed points.                    
                </@return>
                <@throws>
                    s org.apache.commons.math3.exception.TooManyEvaluationsException if
                     * the number of evaluations exceeds {@code maxEval}.                    
                </@throws>
                <@throws>
                    s org.apache.commons.math3.exception.ConvergenceExceptionif the algorithm failed to converge.                    
                </@throws>
            </javadoc>
            <method name="fit" type="double[]" line="53"/>
            <javadoc line="57">
                Get the coefficients of the polynomial fitting the weighted data points.
                 * The degree of the fitting polynomial is {@code guess.length - 1}.                
                <@param>
                    m guess First guess for the coefficients. They must be sorted in
                     * increasing order of the polynomial's degree.                    
                </@param>
                <@return>
                    n the coefficients of the polynomial that best fits the observed points.                    
                </@return>
                <@throws>
                    s org.apache.commons.math3.exception.ConvergenceExceptionif the algorithm failed to converge.                    
                </@throws>
            </javadoc>
            <method name="fit" type="double[]" line="67"/>
        </class>
    </source>