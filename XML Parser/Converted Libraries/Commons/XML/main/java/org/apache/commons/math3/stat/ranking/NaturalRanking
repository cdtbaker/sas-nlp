<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.ranking">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.MathInternalError"/>
        <import package="org.apache.commons.math3.exception.NotANumberException"/>
        <import package="org.apache.commons.math3.random.RandomDataGenerator"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="NaturalRanking" line="32">
            <implements interface="RankingAlgorithm"/>
            <javadoc line="32">
                &lt;p&gt; Ranking based on the natural ordering on doubles.&lt;/p&gt;
                  &lt;p&gt;NaNs are treated according to the configured {@link NaNStrategy} and ties
                  are handled using the selected {@link TiesStrategy}.
                  Configuration settings are supplied in optional constructor arguments.
                  Defaults are {@link NaNStrategy#FAILED} and {@link TiesStrategy#AVERAGE},
                  respectively. When using {@link TiesStrategy#RANDOM}, a{@link RandomGenerator} may be supplied as a constructor argument.&lt;/p&gt;
                  &lt;p&gt;Examples:
                  &lt;table border=&quot;1&quot; cellpadding=&quot;3&quot;&gt;
                  &lt;tr&gt;&lt;th colspan=&quot;3&quot;&gt;
                  Input data: (20, 17, 30, 42.3, 17, 50, Double.NaN, Double.NEGATIVE_INFINITY, 17)
                  &lt;/th&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;th&gt;NaNStrategy&lt;/th&gt;&lt;th&gt;TiesStrategy&lt;/th&gt;
                  &lt;th&gt;&lt;code&gt;rank(data)&lt;/code&gt;&lt;/th&gt;
                  &lt;tr&gt;
                  &lt;td&gt;default (NaNs maximal)&lt;/td&gt;
                  &lt;td&gt;default (ties averaged)&lt;/td&gt;
                  &lt;td&gt;(5, 3, 6, 7, 3, 8, 9, 1, 3)&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;default (NaNs maximal)&lt;/td&gt;
                  &lt;td&gt;MINIMUM&lt;/td&gt;
                  &lt;td&gt;(5, 2, 6, 7, 2, 8, 9, 1, 2)&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;MINIMAL&lt;/td&gt;
                  &lt;td&gt;default (ties averaged)&lt;/td&gt;
                  &lt;td&gt;(6, 4, 7, 8, 4, 9, 1.5, 1.5, 4)&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;REMOVED&lt;/td&gt;
                  &lt;td&gt;SEQUENTIAL&lt;/td&gt;
                  &lt;td&gt;(5, 2, 6, 7, 3, 8, 1, 4)&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;MINIMAL&lt;/td&gt;
                  &lt;td&gt;MAXIMUM&lt;/td&gt;
                  &lt;td&gt;(6, 5, 7, 8, 5, 9, 2, 2, 5)&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;                
                <@since>
                    e 2.0                    
                </@since>
                <@version>
                    n $Id: NaturalRanking.java 1454897 2013-03-10 19:02:54Z luc $                    
                </@version>
            </javadoc>
            <declaration name="DEFAULT_NAN_STRATEGY" type="NaNStrategy" line="73"/>
            <javadoc line="73">
                default NaN strategy                
            </javadoc>
            <declaration name="DEFAULT_TIES_STRATEGY" type="TiesStrategy" line="76"/>
            <javadoc line="76">
                default ties strategy                
            </javadoc>
            <declaration name="nanStrategy" type="NaNStrategy" line="79"/>
            <javadoc line="79">
                NaN strategy - defaults to NaNs maximal                
            </javadoc>
            <declaration name="tiesStrategy" type="TiesStrategy" line="82"/>
            <javadoc line="82">
                Ties strategy - defaults to ties averaged                
            </javadoc>
            <declaration name="randomData" type="RandomDataGenerator" line="85"/>
            <javadoc line="85">
                Source of random data - used only when ties strategy is RANDOM                
            </javadoc>
            <javadoc line="88">
                Create a NaturalRanking with default strategies for handling ties and NaNs.                
            </javadoc>
            <method name="NaturalRanking" type="constructor" line="91"/>
            <javadoc line="98">
                Create a NaturalRanking with the given TiesStrategy.                
                <@param>
                    m tiesStrategy the TiesStrategy to use                    
                </@param>
            </javadoc>
            <method name="NaturalRanking" type="constructor" line="103">
                <params>
                    <param name="tiesStrategy" type="TiesStrategy"/>
                </params>
            </method>
            <javadoc line="110">
                Create a NaturalRanking with the given NaNStrategy.                
                <@param>
                    m nanStrategy the NaNStrategy to use                    
                </@param>
            </javadoc>
            <method name="NaturalRanking" type="constructor" line="115">
                <params>
                    <param name="nanStrategy" type="NaNStrategy"/>
                </params>
            </method>
            <javadoc line="122">
                Create a NaturalRanking with the given NaNStrategy and TiesStrategy.                
                <@param>
                    m nanStrategy NaNStrategy to use                    
                </@param>
                <@param>
                    m tiesStrategy TiesStrategy to use                    
                </@param>
            </javadoc>
            <method name="NaturalRanking" type="constructor" line="128">
                <params>
                    <param name="nanStrategy" type="NaNStrategy"/>
                    <param name="tiesStrategy" type="TiesStrategy"/>
                </params>
            </method>
            <javadoc line="135">
                Create a NaturalRanking with TiesStrategy.RANDOM and the given
                  RandomGenerator as the source of random data.                
                <@param>
                    m randomGenerator source of random data                    
                </@param>
            </javadoc>
            <method name="NaturalRanking" type="constructor" line="141">
                <params>
                    <param name="randomGenerator" type="RandomGenerator"/>
                </params>
            </method>
            <javadoc line="149">
                Create a NaturalRanking with the given NaNStrategy, TiesStrategy.RANDOM
                  and the given source of random data.                
                <@param>
                    m nanStrategy NaNStrategy to use                    
                </@param>
                <@param>
                    m randomGenerator source of random data                    
                </@param>
            </javadoc>
            <method name="NaturalRanking" type="constructor" line="157">
                <params>
                    <param name="nanStrategy" type="NaNStrategy"/>
                    <param name="randomGenerator" type="RandomGenerator"/>
                </params>
            </method>
            <javadoc line="164">
                Return the NaNStrategy                
                <@return>
                    n returns the NaNStrategy                    
                </@return>
            </javadoc>
            <method name="getNanStrategy" type="NaNStrategy" line="169"/>
            <javadoc line="173">
                Return the TiesStrategy                
                <@return>
                    n the TiesStrategy                    
                </@return>
            </javadoc>
            <method name="getTiesStrategy" type="TiesStrategy" line="178"/>
            <javadoc line="182">
                Rank &lt;code&gt;data&lt;/code&gt; using the natural ordering on Doubles, with
                  NaN values handled according to &lt;code&gt;nanStrategy&lt;/code&gt; and ties
                  resolved using &lt;code&gt;tiesStrategy.&lt;/code&gt;                
                <@param>
                    m data array to be ranked                    
                </@param>
                <@return>
                    n array of ranks                    
                </@return>
                <@throws>
                    s NotANumberException if the selected {@link NaNStrategy} is {@code FAILED}and a {@link Double#NaN} is encountered in the input data                    
                </@throws>
            </javadoc>
            <method name="rank" type="double[]" line="192">
                <params>
                    <param name="data" type="double[]"/>
                </params>
                <comment line="193">
                    Array recording initial positions of data to be ranked                    
                </comment>
                <comment line="193">
                    Recode, remove or record positions of NaNs                    
                </comment>
                <comment line="193">
                    Sort the IntDoublePairs                    
                </comment>
                <comment line="193">
                    Walk the sorted array, filling output array using sorted positions,                    
                </comment>
                <comment line="193">
                    resolving ties as we go                    
                </comment>
                <comment line="193">
                    t pos = 1;  // position in sorted array                    
                </comment>
                <declaration name="ranks" type="IntDoublePair[]" line="195"/>
                <scope line="196"/>
                <declaration name="nanPositions" type="List&lt;Integer&gt;" line="201"/>
                <scope line="217"/>
                <declaration name="out" type="double[]" line="230"/>
                <declaration name="pos" type="int" line="231"/>
                <declaration name="tiesTrace" type="List&lt;Integer&gt;" line="233"/>
                <scope line="235">
                    <scope line="236">
                        <scope line="239"/>
                    </scope>
                    <scope line="244"/>
                </scope>
                <scope line="250"/>
                <scope line="253"/>
            </method>
            <javadoc line="259">
                Returns an array that is a copy of the input array with IntDoublePairs
                  having NaN values removed.                
                <@param>
                    m ranks input array                    
                </@param>
                <@return>
                    n array with NaN-valued entries removed                    
                </@return>
            </javadoc>
            <method name="removeNaNs" type="IntDoublePair[]" line="266">
                <params>
                    <param name="ranks" type="IntDoublePair[]"/>
                </params>
                <scope line="267"/>
                <declaration name="outRanks" type="IntDoublePair[]" line="270"/>
                <declaration name="j" type="int" line="271"/>
                <scope line="272">
                    <scope line="273">
                        <scope line="275"/>
                    </scope>
                    <scope line="279"/>
                </scope>
                <declaration name="returnRanks" type="IntDoublePair[]" line="285"/>
            </method>
            <javadoc line="290">
                Recodes NaN values to the given value.                
                <@param>
                    m ranks array to recode                    
                </@param>
                <@param>
                    m value the value to replace NaNs with                    
                </@param>
            </javadoc>
            <method name="recodeNaNs" type="void" line="296">
                <params>
                    <param name="ranks" type="IntDoublePair[]"/>
                    <param name="value" type="double"/>
                </params>
                <scope line="297">
                    <scope line="298"/>
                </scope>
            </method>
            <javadoc line="305">
                Checks for presence of NaNs in &lt;code&gt;ranks.&lt;/code&gt;                
                <@param>
                    m ranks array to be searched for NaNs                    
                </@param>
                <@return>
                    n true iff ranks contains one or more NaNs                    
                </@return>
            </javadoc>
            <method name="containsNaNs" type="boolean" line="311">
                <params>
                    <param name="ranks" type="IntDoublePair[]"/>
                </params>
                <scope line="312">
                    <scope line="313"/>
                </scope>
            </method>
            <javadoc line="320">
                Resolve a sequence of ties, using the configured {@link TiesStrategy}.
                  The input &lt;code&gt;ranks&lt;/code&gt; array is expected to take the same value
                  for all indices in &lt;code&gt;tiesTrace&lt;/code&gt;.  The common value is recoded
                  according to the tiesStrategy. For example, if ranks = &lt;5,8,2,6,2,7,1,2&gt;,
                  tiesTrace = &lt;2,4,7&gt; and tiesStrategy is MINIMUM, ranks will be unchanged.
                  The same array and trace with tiesStrategy AVERAGE will come out
                  &lt;5,8,3,6,3,7,1,3&gt;.                
                <@param>
                    m ranks array of ranks                    
                </@param>
                <@param>
                    m tiesTrace list of indices where <code>ranks</code> is constant
                      -- that is, for any i and j in TiesTrace, <code> ranks[i] == ranks[j]
                      </code>                    
                </@param>
            </javadoc>
            <method name="resolveTie" type="void" line="334">
                <params>
                    <param name="ranks" type="double[]"/>
                    <param name="tiesTrace" type="List<Integer>"/>
                </params>
                <comment line="335">
                    constant value of ranks over tiesTrace                    
                </comment>
                <comment line="335">
                    length of sequence of tied ranks                    
                </comment>
                <declaration name="c" type="double" line="337"/>
                <declaration name="length" type="int" line="340"/>
                <declaration name="iterator" type="Iterator&lt;Integer&gt;" line="353"/>
                <declaration name="f" type="long" line="354"/>
                <scope line="355"/>
                <declaration name="i" type="int" line="365"/>
                <scope line="366"/>
            </method>
            <javadoc line="375">
                Sets&lt;code&gt;data[i] = value&lt;/code&gt; for each i in &lt;code&gt;tiesTrace.&lt;/code&gt;                
                <@param>
                    m data array to modify                    
                </@param>
                <@param>
                    m tiesTrace list of index values to set                    
                </@param>
                <@param>
                    m value value to set                    
                </@param>
            </javadoc>
            <method name="fill" type="void" line="382">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="tiesTrace" type="List<Integer>"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="iterator" type="Iterator&lt;Integer&gt;" line="383"/>
                <scope line="384"/>
            </method>
            <javadoc line="389">
                Set &lt;code&gt;ranks[i] = Double.NaN&lt;/code&gt; for each i in &lt;code&gt;nanPositions.&lt;/code&gt;                
                <@param>
                    m ranks array to modify                    
                </@param>
                <@param>
                    m nanPositions list of index values to set to <code>Double.NaN</code>                    
                </@param>
            </javadoc>
            <method name="restoreNaNs" type="void" line="395">
                <params>
                    <param name="ranks" type="double[]"/>
                    <param name="nanPositions" type="List<Integer>"/>
                </params>
                <scope line="396"/>
                <declaration name="iterator" type="Iterator&lt;Integer&gt;" line="399"/>
                <scope line="400"/>
            </method>
            <javadoc line="406">
                Returns a list of indexes where &lt;code&gt;ranks&lt;/code&gt; is &lt;code&gt;NaN.&lt;/code&gt;                
                <@param>
                    m ranks array to search for <code>NaNs</code>                    
                </@param>
                <@return>
                    n list of indexes i such that <code>ranks[i] = NaN</code>                    
                </@return>
            </javadoc>
            <method name="getNanPositions" type="List<Integer>" line="412">
                <params>
                    <param name="ranks" type="IntDoublePair[]"/>
                </params>
                <declaration name="out" type="ArrayList&lt;Integer&gt;" line="413"/>
                <scope line="414">
                    <scope line="415"/>
                </scope>
            </method>
            <class name="IntDoublePair" line="422">
                <comment line="423">
                    N.B. equals() and hashCode() are not implemented; see MATH-610 for discussion.                    
                </comment>
                <implements interface="Comparable">
                    <type_params>
                        <type_param name="IntDoublePair"/>
                    </type_params>
                </implements>
                <javadoc line="422">
                    Represents the position of a double value in an ordering.
                      Comparable interface is implemented so Arrays.sort can be used
                      to sort an array of IntDoublePairs by value.  Note that the
                      implicitly defined natural ordering is NOT consistent with equals.                    
                </javadoc>
                <declaration name="value" type="double" line="430"/>
                <javadoc line="430">
                    Value of the pair                    
                </javadoc>
                <declaration name="position" type="int" line="433"/>
                <javadoc line="433">
                    Original position of the pair                    
                </javadoc>
                <javadoc line="436">
                    Construct an IntDoublePair with the given value and position.                    
                    <@param>
                        m value the value of the pair                        
                    </@param>
                    <@param>
                        m position the original position                        
                    </@param>
                </javadoc>
                <method name="IntDoublePair" type="constructor" line="441">
                    <params>
                        <param name="value" type="double"/>
                        <param name="position" type="int"/>
                    </params>
                </method>
                <javadoc line="446">
                    Compare this IntDoublePair to another pair.
                      Only the &lt;strong&gt;values&lt;/strong&gt; are compared.                    
                    <@param>
                        m other the other pair to compare this to                        
                    </@param>
                    <@return>
                        n result of <code>Double.compare(value, other.value)</code>                        
                    </@return>
                </javadoc>
                <method name="compareTo" type="int" line="453">
                    <params>
                        <param name="other" type="IntDoublePair"/>
                    </params>
                </method>
                <javadoc line="459">
                    Returns the value of the pair.                    
                    <@return>
                        n value                        
                    </@return>
                </javadoc>
                <method name="getValue" type="double" line="463"/>
                <javadoc line="467">
                    Returns the original position of the pair.                    
                    <@return>
                        n position                        
                    </@return>
                </javadoc>
                <method name="getPosition" type="int" line="471"/>
            </class>
        </class>
    </source>