<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.twod">
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="Segment" line="21">
            <javadoc line="21">
                Simple container for a two-points segment.                
                <@version>
                    n $Id: Segment.java 1422195 2012-12-15 06:45:18Z psteitz $                    
                </@version>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="start" type="Vector2D" line="27"/>
            <javadoc line="27">
                Start point of the segment.                
            </javadoc>
            <declaration name="end" type="Vector2D" line="30"/>
            <javadoc line="30">
                End point of the segments.                
            </javadoc>
            <declaration name="line" type="Line" line="33"/>
            <javadoc line="33">
                Line containing the segment.                
            </javadoc>
            <javadoc line="36">
                Build a segment.                
                <@param>
                    m start start point of the segment                    
                </@param>
                <@param>
                    m end end point of the segment                    
                </@param>
                <@param>
                    m line line containing the segment                    
                </@param>
            </javadoc>
            <method name="Segment" type="constructor" line="41">
                <params>
                    <param name="start" type="Vector2D"/>
                    <param name="end" type="Vector2D"/>
                    <param name="line" type="Line"/>
                </params>
            </method>
            <javadoc line="47">
                Get the start point of the segment.                
                <@return>
                    n start point of the segment                    
                </@return>
            </javadoc>
            <method name="getStart" type="Vector2D" line="50"/>
            <javadoc line="54">
                Get the end point of the segment.                
                <@return>
                    n end point of the segment                    
                </@return>
            </javadoc>
            <method name="getEnd" type="Vector2D" line="57"/>
            <javadoc line="61">
                Get the line containing the segment.                
                <@return>
                    n line containing the segment                    
                </@return>
            </javadoc>
            <method name="getLine" type="Line" line="64"/>
            <javadoc line="68">
                Calculates the shortest distance from a point to this line segment.
                  &lt;p&gt;
                  If the perpendicular extension from the point to the line does not
                  cross in the bounds of the line segment, the shortest distance to
                  the two end points will be returned.
                  &lt;/p&gt;
                  Algorithm adapted from:
                  &lt;a href=&quot;http://www.codeguru.com/forum/printthread.php?s=cc8cf0596231f9a7dba4da6e77c29db3&amp;t=194400&amp;pp=15&amp;page=1&quot;&gt;
                  Thread @ Codeguru&lt;/a&gt;                
                <@param>
                    m p to check                    
                </@param>
                <@return>
                    n distance between the instance and the point                    
                </@return>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="distance" type="double" line="83">
                <params>
                    <param name="p" type="Vector2D"/>
                </params>
                <comment line="84">
                    r == 0 =&gt; P = startPt                    
                </comment>
                <comment line="84">
                    r == 1 =&gt; P = endPt                    
                </comment>
                <comment line="84">
                    r &lt; 0 =&gt; P is on the backward extension of the segment                    
                </comment>
                <comment line="84">
                    r &gt; 1 =&gt; P is on the forward extension of the segment                    
                </comment>
                <comment line="84">
                    0 &lt; r &lt; 1 =&gt; P is on the segment                    
                </comment>
                <comment line="84">
                    if point isn&apos;t on the line segment, just return the shortest distance to the end points                    
                </comment>
                <declaration name="deltaX" type="double" line="84"/>
                <declaration name="deltaY" type="double" line="85"/>
                <declaration name="r" type="double" line="87"/>
                <scope line="97">
                    <declaration name="dist1" type="double" line="98"/>
                    <declaration name="dist2" type="double" line="99"/>
                </scope>
                <scope line="103">
                    <declaration name="px" type="double" line="105"/>
                    <declaration name="py" type="double" line="106"/>
                    <declaration name="interPt" type="Vector2D" line="108"/>
                </scope>
            </method>
        </class>
    </source>