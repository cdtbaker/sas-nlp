<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.sampling">
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <interface name="StepHandler">
            <javadoc line="23">
                This interface represents a handler that should be called after
                  each successful step.
                  &lt;p&gt;The ODE integrators compute the evolution of the state vector at
                  some grid points that depend on their own internal algorithm. Once
                  they have found a new grid point (possibly after having computed
                  several evaluation of the derivative at intermediate points), they
                  provide it to objects implementing this interface. These objects
                  typically either ignore the intermediate steps and wait for the
                  last one, store the points in an ephemeris, or forward them to
                  specialized processing or output methods.&lt;/p&gt;                
                <@see>
                    e org.apache.commons.math3.ode.FirstOrderIntegrator                    
                </@see>
                <@see>
                    e org.apache.commons.math3.ode.SecondOrderIntegrator                    
                </@see>
                <@see>
                    e StepInterpolator                    
                </@see>
                <@version>
                    n $Id: StepHandler.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
                <@since>
                    e 1.2                    
                </@since>
            </javadoc>
            <method name="init" type="void" line="45"/>
            <javadoc line="45">
                Initialize step handler at the start of an ODE integration.
                  &lt;p&gt;
                  This method is called once at the start of the integration. It
                  may be used by the step handler to initialize some internal data
                  if needed.
                  &lt;/p&gt;                
                <@param>
                    m t0 start value of the independent <i>time</i> variable                    
                </@param>
                <@param>
                    m y0 array containing the start value of the state vector                    
                </@param>
                <@param>
                    m t target time for the integration                    
                </@param>
            </javadoc>
            <method name="handleStep" type="void" line="57"/>
            <javadoc line="57">
                Handle the last accepted step                
                <@param>
                    m interpolator interpolator for the last accepted step. For
                      efficiency purposes, the various integrators reuse the same
                      object on each call, so if the instance wants to keep it across
                      all calls (for example to provide at the end of the integration a
                      continuous model valid throughout the integration range, as the{@link org.apache.commons.math3.ode.ContinuousOutputModelContinuousOutputModel} class does), it should build a local copy
                      using the clone method of the interpolator and store this copy.
                      Keeping only a reference to the interpolator and reusing it will
                      result in unpredictable behavior (potentially crashing the application).                    
                </@param>
                <@param>
                    m isLast true if the step is the last one                    
                </@param>
                <@exception>
                    n MaxCountExceededException if the interpolator throws one because
                      the number of functions evaluations is exceeded                    
                </@exception>
            </javadoc>
        </interface>
    </source>