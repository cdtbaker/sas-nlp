<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.inference">
        <import package="org.apache.commons.math3.distribution.TDistribution"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.stat.StatUtils"/>
        <import package="org.apache.commons.math3.stat.descriptive.StatisticalSummary"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="TTest" line="33">
            <comment line="34">
                ----------------------------------------------- Protected methods                
            </comment>
            <javadoc line="33">
                An implementation for Student&apos;s t-tests.
                 * &lt;p&gt;
                 * Tests can be:&lt;ul&gt;
                 * &lt;li&gt;One-sample or two-sample&lt;/li&gt;
                 * &lt;li&gt;One-sided or two-sided&lt;/li&gt;
                 * &lt;li&gt;Paired or unpaired (for two-sample tests)&lt;/li&gt;
                 * &lt;li&gt;Homoscedastic (equal variance assumption) or heteroscedastic
                 * (for two sample tests)&lt;/li&gt;
                 * &lt;li&gt;Fixed significance level (boolean-valued) or returning p-values.
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * Test statistics are available for all tests.  Methods including &quot;Test&quot; in
                 * in their names perform tests, all other methods return t-statistics.  Among
                 * the &quot;Test&quot; methods, &lt;code&gt;double-&lt;/code&gt;valued methods return p-values;
                 * &lt;code&gt;boolean-&lt;/code&gt;valued methods perform fixed significance level tests.
                 * Significance levels are always specified as numbers between 0 and 0.5
                 * (e.g. tests at the 95% level  use &lt;code&gt;alpha=0.05&lt;/code&gt;).&lt;/p&gt;
                 * &lt;p&gt;
                 * Input to tests can be either &lt;code&gt;double[]&lt;/code&gt; arrays or{@link StatisticalSummary} instances.&lt;/p&gt;&lt;p&gt;
                 * Uses commons-math {@link org.apache.commons.math3.distribution.TDistribution}implementation to estimate exact p-values.&lt;/p&gt;                
                <@version>
                    n $Id: TTest.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <javadoc line="60">
                Computes a paired, 2-sample t-statistic based on the data in the input
                 * arrays.  The t-statistic returned is equivalent to what would be returned by
                 * computing the one-sample t-statistic {@link #t(double,double[])}, with
                 * &lt;code&gt;mu = 0&lt;/code&gt; and the sample array consisting of the (signed)
                 * differences between corresponding entries in &lt;code&gt;sample1&lt;/code&gt; and
                 * &lt;code&gt;sample2.&lt;/code&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;The input arrays must have the same length and their common length
                 * must be at least 2.
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m sample1 array of sample data values                    
                </@param>
                <@param>
                    m sample2 array of sample data values                    
                </@param>
                <@return>
                    n t statistic                    
                </@return>
                <@throws>
                    s NullArgumentException if the arrays are <code>null</code>                    
                </@throws>
                <@throws>
                    s NoDataException if the arrays are empty                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if the length of the arrays is not equal                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the length of the arrays is &lt; 2                    
                </@throws>
            </javadoc>
            <method name="pairedT" type="double" line="83">
                <declaration name="meanDifference" type="double" line="87"/>
            </method>
            <javadoc line="94">
                Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or
                 * &lt;i&gt; p-value&lt;/i&gt;, associated with a paired, two-sample, two-tailed t-test
                 * based on the data in the input arrays.
                 * &lt;p&gt;
                 * The number returned is the smallest significance level
                 * at which one can reject the null hypothesis that the mean of the paired
                 * differences is 0 in favor of the two-sided alternative that the mean paired
                 * difference is not equal to 0. For a one-sided test, divide the returned
                 * value by 2.&lt;/p&gt;
                 * &lt;p&gt;
                 * This test is equivalent to a one-sample t-test computed using{@link #tTest(double,double[])} with &lt;code&gt;mu = 0&lt;/code&gt; and the sample
                 * array consisting of the signed differences between corresponding elements of
                 * &lt;code&gt;sample1&lt;/code&gt; and &lt;code&gt;sample2.&lt;/code&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
                 * The validity of the p-value depends on the assumptions of the parametric
                 * t-test procedure, as discussed
                 * &lt;a href=&quot;http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html&quot;&gt;
                 * here&lt;/a&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;The input array lengths must be the same and their common length must
                 * be at least 2.
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m sample1 array of sample data values                    
                </@param>
                <@param>
                    m sample2 array of sample data values                    
                </@param>
                <@return>
                    n p-value for t-test                    
                </@return>
                <@throws>
                    s NullArgumentException if the arrays are <code>null</code>                    
                </@throws>
                <@throws>
                    s NoDataException if the arrays are empty                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if the length of the arrays is not equal                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the length of the arrays is &lt; 2                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if an error occurs computing the p-value                    
                </@throws>
            </javadoc>
            <method name="pairedTTest" type="double" line="132">
                <declaration name="meanDifference" type="double" line="134"/>
            </method>
            <javadoc line="141">
                Performs a paired t-test evaluating the null hypothesis that the
                 * mean of the paired differences between &lt;code&gt;sample1&lt;/code&gt; and
                 * &lt;code&gt;sample2&lt;/code&gt; is 0 in favor of the two-sided alternative that the
                 * mean paired difference is not equal to 0, with significance level
                 * &lt;code&gt;alpha&lt;/code&gt;.
                 * &lt;p&gt;
                 * Returns &lt;code&gt;true&lt;/code&gt; iff the null hypothesis can be rejected with
                 * confidence &lt;code&gt;1 - alpha&lt;/code&gt;.  To perform a 1-sided test, use
                 * &lt;code&gt;alpha * 2&lt;/code&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
                 * The validity of the test depends on the assumptions of the parametric
                 * t-test procedure, as discussed
                 * &lt;a href=&quot;http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html&quot;&gt;
                 * here&lt;/a&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;The input array lengths must be the same and their common length
                 * must be at least 2.
                 * &lt;/li&gt;
                 * &lt;li&gt; &lt;code&gt; 0 &amp;lt; alpha &amp;lt; 0.5 &lt;/code&gt;
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m sample1 array of sample data values                    
                </@param>
                <@param>
                    m sample2 array of sample data values                    
                </@param>
                <@param>
                    m alpha significance level of the test                    
                </@param>
                <@return>
                    n true if the null hypothesis can be rejected with
                     * confidence 1 - alpha                    
                </@return>
                <@throws>
                    s NullArgumentException if the arrays are <code>null</code>                    
                </@throws>
                <@throws>
                    s NoDataException if the arrays are empty                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if the length of the arrays is not equal                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the length of the arrays is &lt; 2                    
                </@throws>
                <@throws>
                    s OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if an error occurs computing the p-value                    
                </@throws>
            </javadoc>
            <method name="pairedTTest" type="boolean" line="180"/>
            <javadoc line="187">
                Computes a &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula&quot;&gt;
                 * t statistic &lt;/a&gt; given observed values and a comparison constant.
                 * &lt;p&gt;
                 * This statistic can be used to perform a one sample t-test for the mean.
                 * &lt;/p&gt;&lt;p&gt;
                 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;The observed array length must be at least 2.
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m mu comparison constant                    
                </@param>
                <@param>
                    m observed array of values                    
                </@param>
                <@return>
                    n t statistic                    
                </@return>
                <@throws>
                    s NullArgumentException if <code>observed</code> is <code>null</code>                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the length of <code>observed</code> is &lt; 2                    
                </@throws>
            </javadoc>
            <method name="t" type="double" line="204">
                <comment line="205">
                    No try-catch or advertised exception because args have just been checked                    
                </comment>
            </method>
            <javadoc line="213">
                Computes a &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula&quot;&gt;
                 * t statistic &lt;/a&gt; to use in comparing the mean of the dataset described by
                 * &lt;code&gt;sampleStats&lt;/code&gt; to &lt;code&gt;mu&lt;/code&gt;.
                 * &lt;p&gt;
                 * This statistic can be used to perform a one sample t-test for the mean.
                 * &lt;/p&gt;&lt;p&gt;
                 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;&lt;code&gt;observed.getN() &amp;ge; 2&lt;/code&gt;.
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m mu comparison constant                    
                </@param>
                <@param>
                    m sampleStats DescriptiveStatistics holding sample summary statitstics                    
                </@param>
                <@return>
                    n t statistic                    
                </@return>
                <@throws>
                    s NullArgumentException if <code>sampleStats</code> is <code>null</code>                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the number of samples is &lt; 2                    
                </@throws>
            </javadoc>
            <method name="t" type="double" line="231"/>
            <javadoc line="239">
                Computes a 2-sample t statistic,  under the hypothesis of equal
                 * subpopulation variances.  To compute a t-statistic without the
                 * equal variances hypothesis, use {@link #t(double[],double[])}.
                 * &lt;p&gt;
                 * This statistic can be used to perform a (homoscedastic) two-sample
                 * t-test to compare sample means.&lt;/p&gt;
                 * &lt;p&gt;
                 * The t-statistic is&lt;/p&gt;
                 * &lt;p&gt;
                 * &amp;nbsp;&amp;nbsp;&lt;code&gt;  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))&lt;/code&gt;
                 * &lt;/p&gt;&lt;p&gt;
                 * where &lt;strong&gt;&lt;code&gt;n1&lt;/code&gt;&lt;/strong&gt; is the size of first sample;
                 * &lt;strong&gt;&lt;code&gt; n2&lt;/code&gt;&lt;/strong&gt; is the size of second sample;
                 * &lt;strong&gt;&lt;code&gt; m1&lt;/code&gt;&lt;/strong&gt; is the mean of first sample;
                 * &lt;strong&gt;&lt;code&gt; m2&lt;/code&gt;&lt;/strong&gt; is the mean of second sample&lt;/li&gt;
                 * &lt;/ul&gt;
                 * and &lt;strong&gt;&lt;code&gt;var&lt;/code&gt;&lt;/strong&gt; is the pooled variance estimate:
                 * &lt;/p&gt;&lt;p&gt;
                 * &lt;code&gt;var = sqrt(((n1 - 1)var1 + (n2 - 1)var2) / ((n1-1) + (n2-1)))&lt;/code&gt;
                 * &lt;/p&gt;&lt;p&gt;
                 * with &lt;strong&gt;&lt;code&gt;var1&lt;/code&gt;&lt;/strong&gt; the variance of the first sample and
                 * &lt;strong&gt;&lt;code&gt;var2&lt;/code&gt;&lt;/strong&gt; the variance of the second sample.
                 * &lt;/p&gt;&lt;p&gt;
                 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;The observed array lengths must both be at least 2.
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m sample1 array of sample data values                    
                </@param>
                <@param>
                    m sample2 array of sample data values                    
                </@param>
                <@return>
                    n t statistic                    
                </@return>
                <@throws>
                    s NullArgumentException if the arrays are <code>null</code>                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the length of the arrays is &lt; 2                    
                </@throws>
            </javadoc>
            <method name="homoscedasticT" type="double" line="274">
                <comment line="275">
                    No try-catch or advertised exception because args have just been checked                    
                </comment>
            </method>
            <javadoc line="285">
                Computes a 2-sample t statistic, without the hypothesis of equal
                 * subpopulation variances.  To compute a t-statistic assuming equal
                 * variances, use {@link #homoscedasticT(double[],double[])}.
                 * &lt;p&gt;
                 * This statistic can be used to perform a two-sample t-test to compare
                 * sample means.&lt;/p&gt;
                 * &lt;p&gt;
                 * The t-statistic is&lt;/p&gt;
                 * &lt;p&gt;
                 * &amp;nbsp;&amp;nbsp; &lt;code&gt;  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)&lt;/code&gt;
                 * &lt;/p&gt;&lt;p&gt;
                 * where &lt;strong&gt;&lt;code&gt;n1&lt;/code&gt;&lt;/strong&gt; is the size of the first sample
                 * &lt;strong&gt;&lt;code&gt; n2&lt;/code&gt;&lt;/strong&gt; is the size of the second sample;
                 * &lt;strong&gt;&lt;code&gt; m1&lt;/code&gt;&lt;/strong&gt; is the mean of the first sample;
                 * &lt;strong&gt;&lt;code&gt; m2&lt;/code&gt;&lt;/strong&gt; is the mean of the second sample;
                 * &lt;strong&gt;&lt;code&gt; var1&lt;/code&gt;&lt;/strong&gt; is the variance of the first sample;
                 * &lt;strong&gt;&lt;code&gt; var2&lt;/code&gt;&lt;/strong&gt; is the variance of the second sample;
                 * &lt;/p&gt;&lt;p&gt;
                 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;The observed array lengths must both be at least 2.
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m sample1 array of sample data values                    
                </@param>
                <@param>
                    m sample2 array of sample data values                    
                </@param>
                <@return>
                    n t statistic                    
                </@return>
                <@throws>
                    s NullArgumentException if the arrays are <code>null</code>                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the length of the arrays is &lt; 2                    
                </@throws>
            </javadoc>
            <method name="t" type="double" line="315">
                <comment line="316">
                    No try-catch or advertised exception because args have just been checked                    
                </comment>
            </method>
            <javadoc line="326">
                Computes a 2-sample t statistic &lt;/a&gt;, comparing the means of the datasets
                 * described by two {@link StatisticalSummary} instances, without the
                 * assumption of equal subpopulation variances.  Use{@link #homoscedasticT(StatisticalSummary,StatisticalSummary)} to
                 * compute a t-statistic under the equal variances assumption.
                 * &lt;p&gt;
                 * This statistic can be used to perform a two-sample t-test to compare
                 * sample means.&lt;/p&gt;
                 * &lt;p&gt;
                 * The returned  t-statistic is&lt;/p&gt;
                 * &lt;p&gt;
                 * &amp;nbsp;&amp;nbsp; &lt;code&gt;  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)&lt;/code&gt;
                 * &lt;/p&gt;&lt;p&gt;
                 * where &lt;strong&gt;&lt;code&gt;n1&lt;/code&gt;&lt;/strong&gt; is the size of the first sample;
                 * &lt;strong&gt;&lt;code&gt; n2&lt;/code&gt;&lt;/strong&gt; is the size of the second sample;
                 * &lt;strong&gt;&lt;code&gt; m1&lt;/code&gt;&lt;/strong&gt; is the mean of the first sample;
                 * &lt;strong&gt;&lt;code&gt; m2&lt;/code&gt;&lt;/strong&gt; is the mean of the second sample
                 * &lt;strong&gt;&lt;code&gt; var1&lt;/code&gt;&lt;/strong&gt; is the variance of the first sample;
                 * &lt;strong&gt;&lt;code&gt; var2&lt;/code&gt;&lt;/strong&gt; is the variance of the second sample
                 * &lt;/p&gt;&lt;p&gt;
                 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;The datasets described by the two Univariates must each contain
                 * at least 2 observations.
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m sampleStats1 StatisticalSummary describing data from the first sample                    
                </@param>
                <@param>
                    m sampleStats2 StatisticalSummary describing data from the second sample                    
                </@param>
                <@return>
                    n t statistic                    
                </@return>
                <@throws>
                    s NullArgumentException if the sample statistics are <code>null</code>                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the number of samples is &lt; 2                    
                </@throws>
            </javadoc>
            <method name="t" type="double" line="360"/>
            <javadoc line="370">
                Computes a 2-sample t statistic, comparing the means of the datasets
                 * described by two {@link StatisticalSummary} instances, under the
                 * assumption of equal subpopulation variances.  To compute a t-statistic
                 * without the equal variances assumption, use{@link #t(StatisticalSummary,StatisticalSummary)}.
                 * &lt;p&gt;
                 * This statistic can be used to perform a (homoscedastic) two-sample
                 * t-test to compare sample means.&lt;/p&gt;
                 * &lt;p&gt;
                 * The t-statistic returned is&lt;/p&gt;
                 * &lt;p&gt;
                 * &amp;nbsp;&amp;nbsp;&lt;code&gt;  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))&lt;/code&gt;
                 * &lt;/p&gt;&lt;p&gt;
                 * where &lt;strong&gt;&lt;code&gt;n1&lt;/code&gt;&lt;/strong&gt; is the size of first sample;
                 * &lt;strong&gt;&lt;code&gt; n2&lt;/code&gt;&lt;/strong&gt; is the size of second sample;
                 * &lt;strong&gt;&lt;code&gt; m1&lt;/code&gt;&lt;/strong&gt; is the mean of first sample;
                 * &lt;strong&gt;&lt;code&gt; m2&lt;/code&gt;&lt;/strong&gt; is the mean of second sample
                 * and &lt;strong&gt;&lt;code&gt;var&lt;/code&gt;&lt;/strong&gt; is the pooled variance estimate:
                 * &lt;/p&gt;&lt;p&gt;
                 * &lt;code&gt;var = sqrt(((n1 - 1)var1 + (n2 - 1)var2) / ((n1-1) + (n2-1)))&lt;/code&gt;
                 * &lt;/p&gt;&lt;p&gt;
                 * with &lt;strong&gt;&lt;code&gt;var1&lt;/code&gt;&lt;/strong&gt; the variance of the first sample and
                 * &lt;strong&gt;&lt;code&gt;var2&lt;/code&gt;&lt;/strong&gt; the variance of the second sample.
                 * &lt;/p&gt;&lt;p&gt;
                 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;The datasets described by the two Univariates must each contain
                 * at least 2 observations.
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m sampleStats1 StatisticalSummary describing data from the first sample                    
                </@param>
                <@param>
                    m sampleStats2 StatisticalSummary describing data from the second sample                    
                </@param>
                <@return>
                    n t statistic                    
                </@return>
                <@throws>
                    s NullArgumentException if the sample statistics are <code>null</code>                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the number of samples is &lt; 2                    
                </@throws>
            </javadoc>
            <method name="homoscedasticT" type="double" line="408"/>
            <javadoc line="418">
                Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or
                 * &lt;i&gt;p-value&lt;/i&gt;, associated with a one-sample, two-tailed t-test
                 * comparing the mean of the input array with the constant &lt;code&gt;mu&lt;/code&gt;.
                 * &lt;p&gt;
                 * The number returned is the smallest significance level
                 * at which one can reject the null hypothesis that the mean equals
                 * &lt;code&gt;mu&lt;/code&gt; in favor of the two-sided alternative that the mean
                 * is different from &lt;code&gt;mu&lt;/code&gt;. For a one-sided test, divide the
                 * returned value by 2.&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
                 * The validity of the test depends on the assumptions of the parametric
                 * t-test procedure, as discussed
                 * &lt;a href=&quot;http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html&quot;&gt;here&lt;/a&gt;
                 * &lt;/p&gt;&lt;p&gt;
                 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;The observed array length must be at least 2.
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m mu constant value to compare sample mean against                    
                </@param>
                <@param>
                    m sample array of sample data values                    
                </@param>
                <@return>
                    n p-value                    
                </@return>
                <@throws>
                    s NullArgumentException if the sample array is <code>null</code>                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the length of the array is &lt; 2                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if an error occurs computing the p-value                    
                </@throws>
            </javadoc>
            <method name="tTest" type="double" line="447">
                <comment line="448">
                    No try-catch or advertised exception because args have just been checked                    
                </comment>
            </method>
            <javadoc line="456">
                Performs a &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm&quot;&gt;
                 * two-sided t-test&lt;/a&gt; evaluating the null hypothesis that the mean of the population from
                 * which &lt;code&gt;sample&lt;/code&gt; is drawn equals &lt;code&gt;mu&lt;/code&gt;.
                 * &lt;p&gt;
                 * Returns &lt;code&gt;true&lt;/code&gt; iff the null hypothesis can be
                 * rejected with confidence &lt;code&gt;1 - alpha&lt;/code&gt;.  To
                 * perform a 1-sided test, use &lt;code&gt;alpha * 2&lt;/code&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Examples:&lt;/strong&gt;&lt;br&gt;&lt;ol&gt;
                 * &lt;li&gt;To test the (2-sided) hypothesis &lt;code&gt;sample mean = mu &lt;/code&gt; at
                 * the 95% level, use &lt;br&gt;&lt;code&gt;tTest(mu, sample, 0.05) &lt;/code&gt;
                 * &lt;/li&gt;
                 * &lt;li&gt;To test the (one-sided) hypothesis &lt;code&gt; sample mean &lt; mu &lt;/code&gt;
                 * at the 99% level, first verify that the measured sample mean is less
                 * than &lt;code&gt;mu&lt;/code&gt; and then use
                 * &lt;br&gt;&lt;code&gt;tTest(mu, sample, 0.02) &lt;/code&gt;
                 * &lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
                 * The validity of the test depends on the assumptions of the one-sample
                 * parametric t-test procedure, as discussed
                 * &lt;a href=&quot;http://www.basic.nwu.edu/statguidefiles/sg_glos.html#one-sample&quot;&gt;here&lt;/a&gt;
                 * &lt;/p&gt;&lt;p&gt;
                 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;The observed array length must be at least 2.
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m mu constant value to compare sample mean against                    
                </@param>
                <@param>
                    m sample array of sample data values                    
                </@param>
                <@param>
                    m alpha significance level of the test                    
                </@param>
                <@return>
                    n p-value                    
                </@return>
                <@throws>
                    s NullArgumentException if the sample array is <code>null</code>                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the length of the array is &lt; 2                    
                </@throws>
                <@throws>
                    s OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if an error computing the p-value                    
                </@throws>
            </javadoc>
            <method name="tTest" type="boolean" line="495"/>
            <javadoc line="502">
                Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or
                 * &lt;i&gt;p-value&lt;/i&gt;, associated with a one-sample, two-tailed t-test
                 * comparing the mean of the dataset described by &lt;code&gt;sampleStats&lt;/code&gt;
                 * with the constant &lt;code&gt;mu&lt;/code&gt;.
                 * &lt;p&gt;
                 * The number returned is the smallest significance level
                 * at which one can reject the null hypothesis that the mean equals
                 * &lt;code&gt;mu&lt;/code&gt; in favor of the two-sided alternative that the mean
                 * is different from &lt;code&gt;mu&lt;/code&gt;. For a one-sided test, divide the
                 * returned value by 2.&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
                 * The validity of the test depends on the assumptions of the parametric
                 * t-test procedure, as discussed
                 * &lt;a href=&quot;http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html&quot;&gt;
                 * here&lt;/a&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;The sample must contain at least 2 observations.
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m mu constant value to compare sample mean against                    
                </@param>
                <@param>
                    m sampleStats StatisticalSummary describing sample data                    
                </@param>
                <@return>
                    n p-value                    
                </@return>
                <@throws>
                    s NullArgumentException if <code>sampleStats</code> is <code>null</code>                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the number of samples is &lt; 2                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if an error occurs computing the p-value                    
                </@throws>
            </javadoc>
            <method name="tTest" type="double" line="533"/>
            <javadoc line="541">
                Performs a &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm&quot;&gt;
                 * two-sided t-test&lt;/a&gt; evaluating the null hypothesis that the mean of the
                 * population from which the dataset described by &lt;code&gt;stats&lt;/code&gt; is
                 * drawn equals &lt;code&gt;mu&lt;/code&gt;.
                 * &lt;p&gt;
                 * Returns &lt;code&gt;true&lt;/code&gt; iff the null hypothesis can be rejected with
                 * confidence &lt;code&gt;1 - alpha&lt;/code&gt;.  To  perform a 1-sided test, use
                 * &lt;code&gt;alpha * 2.&lt;/code&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Examples:&lt;/strong&gt;&lt;br&gt;&lt;ol&gt;
                 * &lt;li&gt;To test the (2-sided) hypothesis &lt;code&gt;sample mean = mu &lt;/code&gt; at
                 * the 95% level, use &lt;br&gt;&lt;code&gt;tTest(mu, sampleStats, 0.05) &lt;/code&gt;
                 * &lt;/li&gt;
                 * &lt;li&gt;To test the (one-sided) hypothesis &lt;code&gt; sample mean &lt; mu &lt;/code&gt;
                 * at the 99% level, first verify that the measured sample mean is less
                 * than &lt;code&gt;mu&lt;/code&gt; and then use
                 * &lt;br&gt;&lt;code&gt;tTest(mu, sampleStats, 0.02) &lt;/code&gt;
                 * &lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
                 * The validity of the test depends on the assumptions of the one-sample
                 * parametric t-test procedure, as discussed
                 * &lt;a href=&quot;http://www.basic.nwu.edu/statguidefiles/sg_glos.html#one-sample&quot;&gt;here&lt;/a&gt;
                 * &lt;/p&gt;&lt;p&gt;
                 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;The sample must include at least 2 observations.
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m mu constant value to compare sample mean against                    
                </@param>
                <@param>
                    m sampleStats StatisticalSummary describing sample data values                    
                </@param>
                <@param>
                    m alpha significance level of the test                    
                </@param>
                <@return>
                    n p-value                    
                </@return>
                <@throws>
                    s NullArgumentException if <code>sampleStats</code> is <code>null</code>                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the number of samples is &lt; 2                    
                </@throws>
                <@throws>
                    s OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if an error occurs computing the p-value                    
                </@throws>
            </javadoc>
            <method name="tTest" type="boolean" line="582"/>
            <javadoc line="589">
                Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or
                 * &lt;i&gt;p-value&lt;/i&gt;, associated with a two-sample, two-tailed t-test
                 * comparing the means of the input arrays.
                 * &lt;p&gt;
                 * The number returned is the smallest significance level
                 * at which one can reject the null hypothesis that the two means are
                 * equal in favor of the two-sided alternative that they are different.
                 * For a one-sided test, divide the returned value by 2.&lt;/p&gt;
                 * &lt;p&gt;
                 * The test does not assume that the underlying popuation variances are
                 * equal  and it uses approximated degrees of freedom computed from the
                 * sample data to compute the p-value.  The t-statistic used is as defined in{@link #t(double[],double[])} and the Welch-Satterthwaite approximation
                 * to the degrees of freedom is used,
                 * as described
                 * &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm&quot;&gt;
                 * here.&lt;/a&gt;  To perform the test under the assumption of equal subpopulation
                 * variances, use {@link #homoscedasticTTest(double[],double[])}.&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
                 * The validity of the p-value depends on the assumptions of the parametric
                 * t-test procedure, as discussed
                 * &lt;a href=&quot;http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html&quot;&gt;
                 * here&lt;/a&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;The observed array lengths must both be at least 2.
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m sample1 array of sample data values                    
                </@param>
                <@param>
                    m sample2 array of sample data values                    
                </@param>
                <@return>
                    n p-value for t-test                    
                </@return>
                <@throws>
                    s NullArgumentException if the arrays are <code>null</code>                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the length of the arrays is &lt; 2                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if an error occurs computing the p-value                    
                </@throws>
            </javadoc>
            <method name="tTest" type="double" line="628">
                <comment line="629">
                    No try-catch or advertised exception because args have just been checked                    
                </comment>
            </method>
            <javadoc line="639">
                Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or
                 * &lt;i&gt;p-value&lt;/i&gt;, associated with a two-sample, two-tailed t-test
                 * comparing the means of the input arrays, under the assumption that
                 * the two samples are drawn from subpopulations with equal variances.
                 * To perform the test without the equal variances assumption, use{@link #tTest(double[],double[])}.&lt;/p&gt;
                 * &lt;p&gt;
                 * The number returned is the smallest significance level
                 * at which one can reject the null hypothesis that the two means are
                 * equal in favor of the two-sided alternative that they are different.
                 * For a one-sided test, divide the returned value by 2.&lt;/p&gt;
                 * &lt;p&gt;
                 * A pooled variance estimate is used to compute the t-statistic.  See{@link #homoscedasticT(double[],double[])}. The sum of the sample sizes
                 * minus 2 is used as the degrees of freedom.&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
                 * The validity of the p-value depends on the assumptions of the parametric
                 * t-test procedure, as discussed
                 * &lt;a href=&quot;http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html&quot;&gt;
                 * here&lt;/a&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;The observed array lengths must both be at least 2.
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m sample1 array of sample data values                    
                </@param>
                <@param>
                    m sample2 array of sample data values                    
                </@param>
                <@return>
                    n p-value for t-test                    
                </@return>
                <@throws>
                    s NullArgumentException if the arrays are <code>null</code>                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the length of the arrays is &lt; 2                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if an error occurs computing the p-value                    
                </@throws>
            </javadoc>
            <method name="homoscedasticTTest" type="double" line="675">
                <comment line="676">
                    No try-catch or advertised exception because args have just been checked                    
                </comment>
            </method>
            <javadoc line="688">
                Performs a
                 * &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm&quot;&gt;
                 * two-sided t-test&lt;/a&gt; evaluating the null hypothesis that &lt;code&gt;sample1&lt;/code&gt;
                 * and &lt;code&gt;sample2&lt;/code&gt; are drawn from populations with the same mean,
                 * with significance level &lt;code&gt;alpha&lt;/code&gt;.  This test does not assume
                 * that the subpopulation variances are equal.  To perform the test assuming
                 * equal variances, use{@link #homoscedasticTTest(double[],double[],double)}.
                 * &lt;p&gt;
                 * Returns &lt;code&gt;true&lt;/code&gt; iff the null hypothesis that the means are
                 * equal can be rejected with confidence &lt;code&gt;1 - alpha&lt;/code&gt;.  To
                 * perform a 1-sided test, use &lt;code&gt;alpha * 2&lt;/code&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * See {@link #t(double[],double[])} for the formula used to compute the
                 * t-statistic.  Degrees of freedom are approximated using the
                 * &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm&quot;&gt;
                 * Welch-Satterthwaite approximation.&lt;/a&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Examples:&lt;/strong&gt;&lt;br&gt;&lt;ol&gt;
                 * &lt;li&gt;To test the (2-sided) hypothesis &lt;code&gt;mean 1 = mean 2 &lt;/code&gt; at
                 * the 95% level,  use
                 * &lt;br&gt;&lt;code&gt;tTest(sample1, sample2, 0.05). &lt;/code&gt;
                 * &lt;/li&gt;
                 * &lt;li&gt;To test the (one-sided) hypothesis &lt;code&gt; mean 1 &lt; mean 2 &lt;/code&gt;,
                 * at the 99% level, first verify that the measured  mean of &lt;code&gt;sample 1&lt;/code&gt;
                 * is less than the mean of &lt;code&gt;sample 2&lt;/code&gt; and then use
                 * &lt;br&gt;&lt;code&gt;tTest(sample1, sample2, 0.02) &lt;/code&gt;
                 * &lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
                 * The validity of the test depends on the assumptions of the parametric
                 * t-test procedure, as discussed
                 * &lt;a href=&quot;http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html&quot;&gt;
                 * here&lt;/a&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;The observed array lengths must both be at least 2.
                 * &lt;/li&gt;
                 * &lt;li&gt; &lt;code&gt; 0 &lt; alpha &lt; 0.5 &lt;/code&gt;
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m sample1 array of sample data values                    
                </@param>
                <@param>
                    m sample2 array of sample data values                    
                </@param>
                <@param>
                    m alpha significance level of the test                    
                </@param>
                <@return>
                    n true if the null hypothesis can be rejected with
                     * confidence 1 - alpha                    
                </@return>
                <@throws>
                    s NullArgumentException if the arrays are <code>null</code>                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the length of the arrays is &lt; 2                    
                </@throws>
                <@throws>
                    s OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if an error occurs computing the p-value                    
                </@throws>
            </javadoc>
            <method name="tTest" type="boolean" line="743"/>
            <javadoc line="750">
                Performs a
                 * &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm&quot;&gt;
                 * two-sided t-test&lt;/a&gt; evaluating the null hypothesis that &lt;code&gt;sample1&lt;/code&gt;
                 * and &lt;code&gt;sample2&lt;/code&gt; are drawn from populations with the same mean,
                 * with significance level &lt;code&gt;alpha&lt;/code&gt;,  assuming that the
                 * subpopulation variances are equal.  Use{@link #tTest(double[],double[],double)} to perform the test without
                 * the assumption of equal variances.
                 * &lt;p&gt;
                 * Returns &lt;code&gt;true&lt;/code&gt; iff the null hypothesis that the means are
                 * equal can be rejected with confidence &lt;code&gt;1 - alpha&lt;/code&gt;.  To
                 * perform a 1-sided test, use &lt;code&gt;alpha * 2.&lt;/code&gt;  To perform the test
                 * without the assumption of equal subpopulation variances, use{@link #tTest(double[],double[],double)}.&lt;/p&gt;
                 * &lt;p&gt;
                 * A pooled variance estimate is used to compute the t-statistic. See{@link #t(double[],double[])} for the formula. The sum of the sample
                 * sizes minus 2 is used as the degrees of freedom.&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Examples:&lt;/strong&gt;&lt;br&gt;&lt;ol&gt;
                 * &lt;li&gt;To test the (2-sided) hypothesis &lt;code&gt;mean 1 = mean 2 &lt;/code&gt; at
                 * the 95% level, use &lt;br&gt;&lt;code&gt;tTest(sample1, sample2, 0.05). &lt;/code&gt;
                 * &lt;/li&gt;
                 * &lt;li&gt;To test the (one-sided) hypothesis &lt;code&gt; mean 1 &lt; mean 2, &lt;/code&gt;
                 * at the 99% level, first verify that the measured mean of
                 * &lt;code&gt;sample 1&lt;/code&gt; is less than the mean of &lt;code&gt;sample 2&lt;/code&gt;
                 * and then use
                 * &lt;br&gt;&lt;code&gt;tTest(sample1, sample2, 0.02) &lt;/code&gt;
                 * &lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
                 * The validity of the test depends on the assumptions of the parametric
                 * t-test procedure, as discussed
                 * &lt;a href=&quot;http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html&quot;&gt;
                 * here&lt;/a&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;The observed array lengths must both be at least 2.
                 * &lt;/li&gt;
                 * &lt;li&gt; &lt;code&gt; 0 &lt; alpha &lt; 0.5 &lt;/code&gt;
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m sample1 array of sample data values                    
                </@param>
                <@param>
                    m sample2 array of sample data values                    
                </@param>
                <@param>
                    m alpha significance level of the test                    
                </@param>
                <@return>
                    n true if the null hypothesis can be rejected with
                     * confidence 1 - alpha                    
                </@return>
                <@throws>
                    s NullArgumentException if the arrays are <code>null</code>                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the length of the arrays is &lt; 2                    
                </@throws>
                <@throws>
                    s OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if an error occurs computing the p-value                    
                </@throws>
            </javadoc>
            <method name="homoscedasticTTest" type="boolean" line="806"/>
            <javadoc line="813">
                Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or
                 * &lt;i&gt;p-value&lt;/i&gt;, associated with a two-sample, two-tailed t-test
                 * comparing the means of the datasets described by two StatisticalSummary
                 * instances.
                 * &lt;p&gt;
                 * The number returned is the smallest significance level
                 * at which one can reject the null hypothesis that the two means are
                 * equal in favor of the two-sided alternative that they are different.
                 * For a one-sided test, divide the returned value by 2.&lt;/p&gt;
                 * &lt;p&gt;
                 * The test does not assume that the underlying population variances are
                 * equal  and it uses approximated degrees of freedom computed from the
                 * sample data to compute the p-value.   To perform the test assuming
                 * equal variances, use{@link #homoscedasticTTest(StatisticalSummary,StatisticalSummary)}.&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
                 * The validity of the p-value depends on the assumptions of the parametric
                 * t-test procedure, as discussed
                 * &lt;a href=&quot;http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html&quot;&gt;
                 * here&lt;/a&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;The datasets described by the two Univariates must each contain
                 * at least 2 observations.
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m sampleStats1  StatisticalSummary describing data from the first sample                    
                </@param>
                <@param>
                    m sampleStats2  StatisticalSummary describing data from the second sample                    
                </@param>
                <@return>
                    n p-value for t-test                    
                </@return>
                <@throws>
                    s NullArgumentException if the sample statistics are <code>null</code>                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the number of samples is &lt; 2                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if an error occurs computing the p-value                    
                </@throws>
            </javadoc>
            <method name="tTest" type="double" line="851"/>
            <javadoc line="861">
                Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or
                 * &lt;i&gt;p-value&lt;/i&gt;, associated with a two-sample, two-tailed t-test
                 * comparing the means of the datasets described by two StatisticalSummary
                 * instances, under the hypothesis of equal subpopulation variances. To
                 * perform a test without the equal variances assumption, use{@link #tTest(StatisticalSummary,StatisticalSummary)}.
                 * &lt;p&gt;
                 * The number returned is the smallest significance level
                 * at which one can reject the null hypothesis that the two means are
                 * equal in favor of the two-sided alternative that they are different.
                 * For a one-sided test, divide the returned value by 2.&lt;/p&gt;
                 * &lt;p&gt;
                 * See {@link #homoscedasticT(double[],double[])} for the formula used to
                 * compute the t-statistic. The sum of the  sample sizes minus 2 is used as
                 * the degrees of freedom.&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
                 * The validity of the p-value depends on the assumptions of the parametric
                 * t-test procedure, as discussed
                 * &lt;a href=&quot;http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html&quot;&gt;here&lt;/a&gt;
                 * &lt;/p&gt;&lt;p&gt;
                 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;The datasets described by the two Univariates must each contain
                 * at least 2 observations.
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m sampleStats1  StatisticalSummary describing data from the first sample                    
                </@param>
                <@param>
                    m sampleStats2  StatisticalSummary describing data from the second sample                    
                </@param>
                <@return>
                    n p-value for t-test                    
                </@return>
                <@throws>
                    s NullArgumentException if the sample statistics are <code>null</code>                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the number of samples is &lt; 2                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if an error occurs computing the p-value                    
                </@throws>
            </javadoc>
            <method name="homoscedasticTTest" type="double" line="898"/>
            <javadoc line="910">
                Performs a
                 * &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm&quot;&gt;
                 * two-sided t-test&lt;/a&gt; evaluating the null hypothesis that
                 * &lt;code&gt;sampleStats1&lt;/code&gt; and &lt;code&gt;sampleStats2&lt;/code&gt; describe
                 * datasets drawn from populations with the same mean, with significance
                 * level &lt;code&gt;alpha&lt;/code&gt;.   This test does not assume that the
                 * subpopulation variances are equal.  To perform the test under the equal
                 * variances assumption, use{@link #homoscedasticTTest(StatisticalSummary,StatisticalSummary)}.
                 * &lt;p&gt;
                 * Returns &lt;code&gt;true&lt;/code&gt; iff the null hypothesis that the means are
                 * equal can be rejected with confidence &lt;code&gt;1 - alpha&lt;/code&gt;.  To
                 * perform a 1-sided test, use &lt;code&gt;alpha * 2&lt;/code&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * See {@link #t(double[],double[])} for the formula used to compute the
                 * t-statistic.  Degrees of freedom are approximated using the
                 * &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm&quot;&gt;
                 * Welch-Satterthwaite approximation.&lt;/a&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Examples:&lt;/strong&gt;&lt;br&gt;&lt;ol&gt;
                 * &lt;li&gt;To test the (2-sided) hypothesis &lt;code&gt;mean 1 = mean 2 &lt;/code&gt; at
                 * the 95%, use
                 * &lt;br&gt;&lt;code&gt;tTest(sampleStats1, sampleStats2, 0.05) &lt;/code&gt;
                 * &lt;/li&gt;
                 * &lt;li&gt;To test the (one-sided) hypothesis &lt;code&gt; mean 1 &lt; mean 2 &lt;/code&gt;
                 * at the 99% level,  first verify that the measured mean of
                 * &lt;code&gt;sample 1&lt;/code&gt; is less than  the mean of &lt;code&gt;sample 2&lt;/code&gt;
                 * and then use
                 * &lt;br&gt;&lt;code&gt;tTest(sampleStats1, sampleStats2, 0.02) &lt;/code&gt;
                 * &lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
                 * The validity of the test depends on the assumptions of the parametric
                 * t-test procedure, as discussed
                 * &lt;a href=&quot;http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html&quot;&gt;
                 * here&lt;/a&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                 * &lt;li&gt;The datasets described by the two Univariates must each contain
                 * at least 2 observations.
                 * &lt;/li&gt;
                 * &lt;li&gt; &lt;code&gt; 0 &lt; alpha &lt; 0.5 &lt;/code&gt;
                 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m sampleStats1 StatisticalSummary describing sample data values                    
                </@param>
                <@param>
                    m sampleStats2 StatisticalSummary describing sample data values                    
                </@param>
                <@param>
                    m alpha significance level of the test                    
                </@param>
                <@return>
                    n true if the null hypothesis can be rejected with
                     * confidence 1 - alpha                    
                </@return>
                <@throws>
                    s NullArgumentException if the sample statistics are <code>null</code>                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the number of samples is &lt; 2                    
                </@throws>
                <@throws>
                    s OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if an error occurs computing the p-value                    
                </@throws>
            </javadoc>
            <method name="tTest" type="boolean" line="969"/>
            <javadoc line="978">
                Computes approximate degrees of freedom for 2-sample t-test.                
                <@param>
                    m v1 first sample variance                    
                </@param>
                <@param>
                    m v2 second sample variance                    
                </@param>
                <@param>
                    m n1 first sample n                    
                </@param>
                <@param>
                    m n2 second sample n                    
                </@param>
                <@return>
                    n approximate degrees of freedom                    
                </@return>
            </javadoc>
            <method name="df" type="double" line="987"/>
            <javadoc line="993">
                Computes t test statistic for 1-sample t-test.                
                <@param>
                    m m sample mean                    
                </@param>
                <@param>
                    m mu constant to test against                    
                </@param>
                <@param>
                    m v sample variance                    
                </@param>
                <@param>
                    m n sample n                    
                </@param>
                <@return>
                    n t test statistic                    
                </@return>
            </javadoc>
            <method name="t" type="double" line="1003"/>
            <javadoc line="1007">
                Computes t test statistic for 2-sample t-test.
                 * &lt;p&gt;
                 * Does not assume that subpopulation variances are equal.&lt;/p&gt;                
                <@param>
                    m m1 first sample mean                    
                </@param>
                <@param>
                    m m2 second sample mean                    
                </@param>
                <@param>
                    m v1 first sample variance                    
                </@param>
                <@param>
                    m v2 second sample variance                    
                </@param>
                <@param>
                    m n1 first sample n                    
                </@param>
                <@param>
                    m n2 second sample n                    
                </@param>
                <@return>
                    n t test statistic                    
                </@return>
            </javadoc>
            <method name="t" type="double" line="1022"/>
            <javadoc line="1026">
                Computes t test statistic for 2-sample t-test under the hypothesis
                 * of equal subpopulation variances.                
                <@param>
                    m m1 first sample mean                    
                </@param>
                <@param>
                    m m2 second sample mean                    
                </@param>
                <@param>
                    m v1 first sample variance                    
                </@param>
                <@param>
                    m v2 second sample variance                    
                </@param>
                <@param>
                    m n1 first sample n                    
                </@param>
                <@param>
                    m n2 second sample n                    
                </@param>
                <@return>
                    n t test statistic                    
                </@return>
            </javadoc>
            <method name="homoscedasticT" type="double" line="1040">
                <declaration name="pooledVariance" type="double" line="1041"/>
            </method>
            <javadoc line="1045">
                Computes p-value for 2-sided, 1-sample t-test.                
                <@param>
                    m m sample mean                    
                </@param>
                <@param>
                    m mu constant to test against                    
                </@param>
                <@param>
                    m v sample variance                    
                </@param>
                <@param>
                    m n sample n                    
                </@param>
                <@return>
                    n p-value                    
                </@return>
                <@throws>
                    s MaxCountExceededException if an error occurs computing the p-value                    
                </@throws>
                <@throws>
                    s MathIllegalArgumentException if n is not greater than 1                    
                </@throws>
            </javadoc>
            <method name="tTest" type="double" line="1058">
                <declaration name="t" type="double" line="1060"/>
                <declaration name="distribution" type="TDistribution" line="1061"/>
            </method>
            <javadoc line="1066">
                Computes p-value for 2-sided, 2-sample t-test.
                 * &lt;p&gt;
                 * Does not assume subpopulation variances are equal. Degrees of freedom
                 * are estimated from the data.&lt;/p&gt;                
                <@param>
                    m m1 first sample mean                    
                </@param>
                <@param>
                    m m2 second sample mean                    
                </@param>
                <@param>
                    m v1 first sample variance                    
                </@param>
                <@param>
                    m v2 second sample variance                    
                </@param>
                <@param>
                    m n1 first sample n                    
                </@param>
                <@param>
                    m n2 second sample n                    
                </@param>
                <@return>
                    n p-value                    
                </@return>
                <@throws>
                    s MaxCountExceededException if an error occurs computing the p-value                    
                </@throws>
                <@throws>
                    s NotStrictlyPositiveException if the estimated degrees of freedom is not
                     * strictly positive                    
                </@throws>
            </javadoc>
            <method name="tTest" type="double" line="1086">
                <declaration name="t" type="double" line="1088"/>
                <declaration name="degreesOfFreedom" type="double" line="1089"/>
                <declaration name="distribution" type="TDistribution" line="1090"/>
            </method>
            <javadoc line="1095">
                Computes p-value for 2-sided, 2-sample t-test, under the assumption
                 * of equal subpopulation variances.
                 * &lt;p&gt;
                 * The sum of the sample sizes minus 2 is used as degrees of freedom.&lt;/p&gt;                
                <@param>
                    m m1 first sample mean                    
                </@param>
                <@param>
                    m m2 second sample mean                    
                </@param>
                <@param>
                    m v1 first sample variance                    
                </@param>
                <@param>
                    m v2 second sample variance                    
                </@param>
                <@param>
                    m n1 first sample n                    
                </@param>
                <@param>
                    m n2 second sample n                    
                </@param>
                <@return>
                    n p-value                    
                </@return>
                <@throws>
                    s MaxCountExceededException if an error occurs computing the p-value                    
                </@throws>
                <@throws>
                    s NotStrictlyPositiveException if the estimated degrees of freedom is not
                     * strictly positive                    
                </@throws>
            </javadoc>
            <method name="homoscedasticTTest" type="double" line="1115">
                <declaration name="t" type="double" line="1117"/>
                <declaration name="degreesOfFreedom" type="double" line="1118"/>
                <declaration name="distribution" type="TDistribution" line="1119"/>
            </method>
            <javadoc line="1124">
                Check significance level.                
                <@param>
                    m alpha significance level                    
                </@param>
                <@throws>
                    s OutOfRangeException if the significance level is out of bounds.                    
                </@throws>
            </javadoc>
            <method name="checkSignificanceLevel" type="void" line="1131">
                <scope line="1133"/>
            </method>
            <javadoc line="1140">
                Check sample data.                
                <@param>
                    m data Sample data.                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code data} is {@code null}.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if there is not enough sample data.                    
                </@throws>
            </javadoc>
            <method name="checkSampleData" type="void" line="1148">
                <scope line="1150"/>
                <scope line="1153"/>
            </method>
            <javadoc line="1161">
                Check sample data.                
                <@param>
                    m stat Statistical summary.                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code data} is {@code null}.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if there is not enough sample data.                    
                </@throws>
            </javadoc>
            <method name="checkSampleData" type="void" line="1169">
                <scope line="1171"/>
                <scope line="1174"/>
            </method>
        </class>
    </source>