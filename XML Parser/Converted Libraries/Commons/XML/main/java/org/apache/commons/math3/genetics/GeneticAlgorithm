<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.genetics">
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.JDKRandomGenerator"/>
        <class name="GeneticAlgorithm" line="24">
            <javadoc line="24">
                Implementation of a genetic algorithm. All factors that govern the operation
                 * of the algorithm can be configured for a specific problem.                
                <@since>
                    e 2.0                    
                </@since>
                <@version>
                    n $Id: GeneticAlgorithm.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <declaration name="randomGenerator" type="RandomGenerator" line="33"/>
            <javadoc line="33">
                Static random number generator shared by GA implementation classes. Set the randomGenerator seed to get
                 * reproducible results. Use {@link #setRandomGenerator(RandomGenerator)} to supply an alternative to the default
                 * JDK-provided PRNG.                
            </javadoc>
            <declaration name="crossoverPolicy" type="CrossoverPolicy" line="41"/>
            <javadoc line="41">
                the crossover policy used by the algorithm.                
            </javadoc>
            <declaration name="crossoverRate" type="double" line="44"/>
            <javadoc line="44">
                the rate of crossover for the algorithm.                
            </javadoc>
            <declaration name="mutationPolicy" type="MutationPolicy" line="47"/>
            <javadoc line="47">
                the mutation policy used by the algorithm.                
            </javadoc>
            <declaration name="mutationRate" type="double" line="50"/>
            <javadoc line="50">
                the rate of mutation for the algorithm.                
            </javadoc>
            <declaration name="selectionPolicy" type="SelectionPolicy" line="53"/>
            <javadoc line="53">
                the selection policy used by the algorithm.                
            </javadoc>
            <declaration name="generationsEvolved" type="int" line="56"/>
            <javadoc line="56">
                the number of generations evolved to reach {@link StoppingCondition} in the last run.                
            </javadoc>
            <javadoc line="59">
                Create a new genetic algorithm.                
                <@param>
                    m crossoverPolicy The {@link CrossoverPolicy}                    
                </@param>
                <@param>
                    m crossoverRate The crossover rate as a percentage (0-1 inclusive)                    
                </@param>
                <@param>
                    m mutationPolicy The {@link MutationPolicy}                    
                </@param>
                <@param>
                    m mutationRate The mutation rate as a percentage (0-1 inclusive)                    
                </@param>
                <@param>
                    m selectionPolicy The {@link SelectionPolicy}                    
                </@param>
                <@throws>
                    s OutOfRangeException if the crossover or mutation rate is outside the [0, 1] range                    
                </@throws>
            </javadoc>
            <method name="GeneticAlgorithm" type="constructor" line="72">
                <scope line="74"/>
                <scope line="78"/>
            </method>
            <javadoc line="89">
                Set the (static) random generator.                
                <@param>
                    m random random generator                    
                </@param>
            </javadoc>
            <method name="setRandomGenerator" type="void" line="94"/>
            <javadoc line="98">
                Returns the (static) random generator.                
                <@return>
                    n the static random generator shared by GA implementation classes                    
                </@return>
            </javadoc>
            <method name="getRandomGenerator" type="RandomGenerator" line="103"/>
            <javadoc line="107">
                Evolve the given population. Evolution stops when the stopping condition
                 * is satisfied. Updates the {@link #getGenerationsEvolved() generationsEvolved}property with the number of generations evolved before the StoppingCondition
                 * is satisfied.                
                <@param>
                    m initial the initial, seed population.                    
                </@param>
                <@param>
                    m condition the stopping condition used to stop evolution.                    
                </@param>
                <@return>
                    n the population that satisfies the stopping condition.                    
                </@return>
            </javadoc>
            <method name="evolve" type="Population" line="117">
                <declaration name="current" type="Population" line="118"/>
                <scope line="120"/>
            </method>
            <javadoc line="127">
                Evolve the given population into the next generation.
                 * &lt;p&gt;
                 * &lt;ol&gt;
                 * &lt;li&gt;Get nextGeneration population to fill from &lt;code&gt;current&lt;/code&gt;
                 * generation, using its nextGeneration method&lt;/li&gt;
                 * &lt;li&gt;Loop until new generation is filled:&lt;/li&gt;
                 * &lt;ul&gt;&lt;li&gt;Apply configured SelectionPolicy to select a pair of parents
                 * from &lt;code&gt;current&lt;/code&gt;&lt;/li&gt;
                 * &lt;li&gt;With probability = {@link #getCrossoverRate()}, apply
                 * configured {@link CrossoverPolicy} to parents&lt;/li&gt;
                 * &lt;li&gt;With probability = {@link #getMutationRate()}, apply
                 * configured {@link MutationPolicy} to each of the offspring&lt;/li&gt;
                 * &lt;li&gt;Add offspring individually to nextGeneration,
                 * space permitting&lt;/li&gt;
                 * &lt;/ul&gt;
                 * &lt;li&gt;Return nextGeneration&lt;/li&gt;
                 * &lt;/ol&gt;                
                <@param>
                    m current the current population.                    
                </@param>
                <@return>
                    n the population for the next generation.                    
                </@return>
            </javadoc>
            <method name="nextGeneration" type="Population" line="149">
                <declaration name="nextGeneration" type="Population" line="150"/>
                <declaration name="randGen" type="RandomGenerator" line="152"/>
                <scope line="154">
                    <declaration name="pair" type="ChromosomePair" line="156"/>
                    <scope line="159"/>
                    <scope line="165"/>
                    <scope line="175"/>
                </scope>
            </method>
            <javadoc line="184">
                Returns the crossover policy.                
                <@return>
                    n crossover policy                    
                </@return>
            </javadoc>
            <method name="getCrossoverPolicy" type="CrossoverPolicy" line="188"/>
            <javadoc line="192">
                Returns the crossover rate.                
                <@return>
                    n crossover rate                    
                </@return>
            </javadoc>
            <method name="getCrossoverRate" type="double" line="196"/>
            <javadoc line="200">
                Returns the mutation policy.                
                <@return>
                    n mutation policy                    
                </@return>
            </javadoc>
            <method name="getMutationPolicy" type="MutationPolicy" line="204"/>
            <javadoc line="208">
                Returns the mutation rate.                
                <@return>
                    n mutation rate                    
                </@return>
            </javadoc>
            <method name="getMutationRate" type="double" line="212"/>
            <javadoc line="216">
                Returns the selection policy.                
                <@return>
                    n selection policy                    
                </@return>
            </javadoc>
            <method name="getSelectionPolicy" type="SelectionPolicy" line="220"/>
            <javadoc line="224">
                Returns the number of generations evolved to reach {@link StoppingCondition} in the last run.                
                <@return>
                    n number of generations evolved                    
                </@return>
                <@since>
                    e 2.1                    
                </@since>
            </javadoc>
            <method name="getGenerationsEvolved" type="int" line="230"/>
        </class>
    </source>