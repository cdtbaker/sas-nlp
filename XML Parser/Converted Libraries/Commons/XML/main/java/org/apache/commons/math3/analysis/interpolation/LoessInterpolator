<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="java.io.Serializable"/>
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.exception.NotFiniteNumberException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="LoessInterpolator" line="35">
            <implements interface="UnivariateInterpolator"/>
            <implements interface="Serializable"/>
            <javadoc line="35">
                Implements the &lt;a href=&quot;http://en.wikipedia.org/wiki/Local_regression&quot;&gt;
                  Local Regression Algorithm&lt;/a&gt; (also Loess, Lowess) for interpolation of
                  real univariate functions.
                  &lt;p/&gt;
                  For reference, see
                  &lt;a href=&quot;http://www.math.tau.ac.il/~yekutiel/MA seminar/Cleveland 1979.pdf&quot;&gt;
                  William S. Cleveland - Robust Locally Weighted Regression and Smoothing
                  Scatterplots&lt;/a&gt;
                  &lt;p/&gt;
                  This class implements both the loess method and serves as an interpolation
                  adapter to it, allowing one to build a spline on the obtained loess fit.                
                <@version>
                    n $Id: LoessInterpolator.java 1379904 2012-09-01 23:54:52Z erans $                    
                </@version>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <declaration name="DEFAULT_BANDWIDTH" type="double" line="53"/>
            <javadoc line="53">
                Default value of the bandwidth parameter.                
            </javadoc>
            <declaration name="DEFAULT_ROBUSTNESS_ITERS" type="int" line="55"/>
            <javadoc line="55">
                Default value of the number of robustness iterations.                
            </javadoc>
            <declaration name="DEFAULT_ACCURACY" type="double" line="57"/>
            <javadoc line="57">
                Default value for accuracy.                
                <@since>
                    e 2.1                    
                </@since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="62"/>
            <javadoc line="62">
                serializable version identifier.                
            </javadoc>
            <declaration name="bandwidth" type="double" line="64"/>
            <javadoc line="64">
                The bandwidth parameter: when computing the loess fit at
                  a particular point, this fraction of source points closest
                  to the current point is taken into account for computing
                  a least-squares regression.
                  &lt;p/&gt;
                  A sensible value is usually 0.25 to 0.5.                
            </javadoc>
            <declaration name="robustnessIters" type="int" line="73"/>
            <javadoc line="73">
                The number of robustness iterations parameter: this many
                  robustness iterations are done.
                  &lt;p/&gt;
                  A sensible value is usually 0 (just the initial fit without any
                  robustness iterations) to 4.                
            </javadoc>
            <declaration name="accuracy" type="double" line="81"/>
            <javadoc line="81">
                If the median residual at a certain robustness iteration
                  is less than this amount, no more iterations are done.                
            </javadoc>
            <javadoc line="87">
                Constructs a new {@link LoessInterpolator}with a bandwidth of {@link #DEFAULT_BANDWIDTH},{@link #DEFAULT_ROBUSTNESS_ITERS} robustness iterations
                  and an accuracy of {#link #DEFAULT_ACCURACY}.
                  See {@link #LoessInterpolator(double,int,double)} for an explanation of
                  the parameters.                
            </javadoc>
            <method name="LoessInterpolator" type="constructor" line="95"/>
            <javadoc line="101">
                Construct a new {@link LoessInterpolator}with given bandwidth and number of robustness iterations.
                  &lt;p&gt;
                  Calling this constructor is equivalent to calling {link {@link #LoessInterpolator(double,int,double) LoessInterpolator(bandwidth,
                  robustnessIters, LoessInterpolator.DEFAULT_ACCURACY)}&lt;/p&gt;                
                <@param>
                    m bandwidth  when computing the loess fit at
                      a particular point, this fraction of source points closest
                      to the current point is taken into account for computing
                      a least-squares regression.</br>
                      A sensible value is usually 0.25 to 0.5, the default value is{@link #DEFAULT_BANDWIDTH}.                    
                </@param>
                <@param>
                    m robustnessIters This many robustness iterations are done.</br>
                      A sensible value is usually 0 (just the initial fit without any
                      robustness iterations) to 4, the default value is{@link #DEFAULT_ROBUSTNESS_ITERS}.                    
                </@param>
                <@see>
                    e #LoessInterpolator(double,int,double)                    
                </@see>
            </javadoc>
            <method name="LoessInterpolator" type="constructor" line="123">
                <params>
                    <param name="bandwidth" type="double"/>
                    <param name="robustnessIters" type="int"/>
                </params>
            </method>
            <javadoc line="127">
                Construct a new {@link LoessInterpolator}with given bandwidth, number of robustness iterations and accuracy.                
                <@param>
                    m bandwidth  when computing the loess fit at
                      a particular point, this fraction of source points closest
                      to the current point is taken into account for computing
                      a least-squares regression.</br>
                      A sensible value is usually 0.25 to 0.5, the default value is{@link #DEFAULT_BANDWIDTH}.                    
                </@param>
                <@param>
                    m robustnessIters This many robustness iterations are done.</br>
                      A sensible value is usually 0 (just the initial fit without any
                      robustness iterations) to 4, the default value is{@link #DEFAULT_ROBUSTNESS_ITERS}.                    
                </@param>
                <@param>
                    m accuracy If the median residual at a certain robustness iteration
                      is less than this amount, no more iterations are done.                    
                </@param>
                <@throws>
                    s OutOfRangeException if bandwidth does not lie in the interval [0,1].                    
                </@throws>
                <@throws>
                    s NotPositiveException if {@code robustnessIters} is negative.                    
                </@throws>
                <@see>
                    e #LoessInterpolator(double,int)                    
                </@see>
                <@since>
                    e 2.1                    
                </@since>
            </javadoc>
            <method name="LoessInterpolator" type="constructor" line="150">
                <params>
                    <param name="bandwidth" type="double"/>
                    <param name="robustnessIters" type="int"/>
                    <param name="accuracy" type="double"/>
                </params>
                <scope line="152"/>
                <scope line="156"/>
            </method>
            <javadoc line="163">
                Compute an interpolating function by performing a loess fit
                  on the data at the original abscissae and then building a cubic spline
                  with a{@link org.apache.commons.math3.analysis.interpolation.SplineInterpolator}on the resulting fit.                
                <@param>
                    m xval the arguments for the interpolation points                    
                </@param>
                <@param>
                    m yval the values for the interpolation points                    
                </@param>
                <@return>
                    n A cubic spline built upon a loess fit to the data at the original abscissae                    
                </@return>
                <@throws>
                    s NonMonotonicSequenceException if {@code xval} not sorted in
                      strictly increasing order.                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if {@code xval} and {@code yval} have
                      different sizes.                    
                </@throws>
                <@throws>
                    s NoDataException if {@code xval} or {@code yval} has zero size.                    
                </@throws>
                <@throws>
                    s NotFiniteNumberException if any of the arguments and values are
                      not finite real numbers.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the bandwidth is too small to
                      accomodate the size of the input data (i.e. the bandwidth must be
                      larger than 2/n).                    
                </@throws>
            </javadoc>
            <method name="interpolate" type="PolynomialSplineFunction" line="190">
                <params>
                    <param name="xval" type="double[]"/>
                    <param name="yval" type="double[]"/>
                </params>
            </method>
            <javadoc line="194">
                Compute a weighted loess fit on the data at the original abscissae.                
                <@param>
                    m xval Arguments for the interpolation points.                    
                </@param>
                <@param>
                    m yval Values for the interpolation points.                    
                </@param>
                <@param>
                    m weights point weights: coefficients by which the robustness weight
                      of a point is multiplied.                    
                </@param>
                <@return>
                    n the values of the loess fit at corresponding original abscissae.                    
                </@return>
                <@throws>
                    s NonMonotonicSequenceException if {@code xval} not sorted in
                      strictly increasing order.                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if {@code xval} and {@code yval} have
                      different sizes.                    
                </@throws>
                <@throws>
                    s NoDataException if {@code xval} or {@code yval} has zero size.                    
                </@throws>
                <@throws>
                    s NotFiniteNumberException if any of the arguments and values are
                      not finite real numbers.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the bandwidth is too small to
                      accomodate the size of the input data (i.e. the bandwidth must be
                      larger than 2/n).                    
                </@throws>
                <@since>
                    e 2.1                    
                </@since>
            </javadoc>
            <method name="smooth" type="double[]" line="220">
                <params>
                    <param name="xval" type="double[]"/>
                    <param name="yval" type="double[]"/>
                    <param name="weights" type="double[]"/>
                </params>
                <comment line="221">
                    Do an initial fit and &apos;robustnessIters&apos; robustness iterations.                    
                </comment>
                <comment line="221">
                    This is equivalent to doing &apos;robustnessIters+1&apos; robustness iterations                    
                </comment>
                <comment line="221">
                    starting with all robustness weights set to 1.                    
                </comment>
                <scope line="221"/>
                <declaration name="n" type="int" line="225"/>
                <scope line="227"/>
                <scope line="237"/>
                <scope line="241"/>
                <declaration name="bandwidthInPoints" type="int" line="245"/>
                <scope line="247"/>
                <declaration name="res" type="double[]" line="252"/>
                <declaration name="residuals" type="double[]" line="254"/>
                <declaration name="sortedResiduals" type="double[]" line="255"/>
                <declaration name="robustnessWeights" type="double[]" line="257"/>
                <scope line="264">
                    <declaration name="bandwidthInterval" type="int[]" line="265"/>
                    <scope line="267">
                        <declaration name="x" type="double" line="268"/>
                        <scope line="272"/>
                        <declaration name="ileft" type="int" line="276"/>
                        <declaration name="iright" type="int" line="277"/>
                        <declaration name="edge" type="int" line="281"/>
                        <scope line="282"/>
                        <scope line="284"/>
                        <declaration name="sumWeights" type="double" line="295"/>
                        <declaration name="sumX" type="double" line="296"/>
                        <declaration name="sumXSquared" type="double" line="297"/>
                        <declaration name="sumY" type="double" line="298"/>
                        <declaration name="sumXY" type="double" line="299"/>
                        <declaration name="denom" type="double" line="300"/>
                        <scope line="301">
                            <declaration name="xk" type="double" line="302"/>
                            <declaration name="yk" type="double" line="303"/>
                            <declaration name="dist" type="double" line="304"/>
                            <declaration name="w" type="double" line="305"/>
                            <declaration name="xkw" type="double" line="306"/>
                        </scope>
                        <declaration name="meanX" type="double" line="314"/>
                        <declaration name="meanY" type="double" line="315"/>
                        <declaration name="meanXY" type="double" line="316"/>
                        <declaration name="meanXSquared" type="double" line="317"/>
                        <declaration name="beta" type="double" line="319"/>
                        <scope line="320"/>
                        <scope line="322"/>
                        <declaration name="alpha" type="double" line="326"/>
                    </scope>
                    <scope line="334"/>
                    <declaration name="medianResidual" type="double" line="345"/>
                    <scope line="347"/>
                    <scope line="351">
                        <declaration name="arg" type="double" line="352"/>
                        <scope line="353"/>
                        <scope line="355">
                            <declaration name="w" type="double" line="356"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="365">
                Compute a loess fit on the data at the original abscissae.                
                <@param>
                    m xval the arguments for the interpolation points                    
                </@param>
                <@param>
                    m yval the values for the interpolation points                    
                </@param>
                <@return>
                    n values of the loess fit at corresponding original abscissae                    
                </@return>
                <@throws>
                    s NonMonotonicSequenceException if {@code xval} not sorted in
                      strictly increasing order.                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if {@code xval} and {@code yval} have
                      different sizes.                    
                </@throws>
                <@throws>
                    s NoDataException if {@code xval} or {@code yval} has zero size.                    
                </@throws>
                <@throws>
                    s NotFiniteNumberException if any of the arguments and values are
                      not finite real numbers.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the bandwidth is too small to
                      accomodate the size of the input data (i.e. the bandwidth must be
                      larger than 2/n).                    
                </@throws>
            </javadoc>
            <method name="smooth" type="double[]" line="387">
                <params>
                    <param name="xval" type="double[]"/>
                    <param name="yval" type="double[]"/>
                </params>
                <scope line="388"/>
                <declaration name="unitWeights" type="double[]" line="392"/>
            </method>
            <javadoc line="398">
                Given an index interval into xval that embraces a certain number of
                  points closest to {@code xval[i-1]}, update the interval so that it
                  embraces the same number of points closest to {@code xval[i]},
                  ignoring zero weights.                
                <@param>
                    m xval Arguments array.                    
                </@param>
                <@param>
                    m weights Weights array.                    
                </@param>
                <@param>
                    m i Index around which the new interval should be computed.                    
                </@param>
                <@param>
                    m bandwidthInterval a two-element array {left, right} such that:{@code (left==0 or xval[i] - xval[left-1] > xval[right] - xval[i])}and{@code (right==xval.length-1 or xval[right+1] - xval[i] > xval[i] - xval[left])}.
                      The array will be updated.                    
                </@param>
            </javadoc>
            <method name="updateBandwidthInterval" type="void" line="415">
                <params>
                    <param name="xval" type="double[]"/>
                    <param name="weights" type="double[]"/>
                    <param name="i" type="int"/>
                    <param name="bandwidthInterval" type="int[]"/>
                </params>
                <comment line="416">
                    The right edge should be adjusted if the next point to the right                    
                </comment>
                <comment line="416">
                    is closer to xval[i] than the leftmost point of the current interval                    
                </comment>
                <declaration name="left" type="int" line="416"/>
                <declaration name="right" type="int" line="417"/>
                <declaration name="nextRight" type="int" line="421"/>
                <scope line="422">
                    <declaration name="nextLeft" type="int" line="423"/>
                </scope>
            </method>
            <javadoc line="429">
                Return the smallest index {@code j} such that{@code j &gt; i &amp;&amp; (j == weights.length || weights[j] != 0)}.                
                <@param>
                    m weights Weights array.                    
                </@param>
                <@param>
                    m i Index from which to start search.                    
                </@param>
                <@return>
                    n the smallest compliant index.                    
                </@return>
            </javadoc>
            <method name="nextNonzero" type="int" line="437">
                <params>
                    <param name="weights" type="double[]"/>
                    <param name="i" type="int"/>
                </params>
                <declaration name="j" type="int" line="438"/>
                <scope line="439"/>
            </method>
            <javadoc line="445">
                Compute the
                  &lt;a href=&quot;http://en.wikipedia.org/wiki/Local_regression#Weight_function&quot;&gt;tricube&lt;/a&gt;
                  weight function                
                <@param>
                    m x Argument.                    
                </@param>
                <@return>
                    n <code>(1 - |x|<sup>3</sup>)<sup>3</sup></code> for |x| &lt; 1, 0 otherwise.                    
                </@return>
            </javadoc>
            <method name="tricube" type="double" line="453">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="absX" type="double" line="454"/>
                <scope line="455"/>
                <declaration name="tmp" type="double" line="458"/>
            </method>
            <javadoc line="462">
                Check that all elements of an array are finite real numbers.                
                <@param>
                    m values Values array.                    
                </@param>
                <@throws>
                    s org.apache.commons.math3.exception.NotFiniteNumberExceptionif one of the values is not a finite real number.                    
                </@throws>
            </javadoc>
            <method name="checkAllFiniteReal" type="void" line="469">
                <params>
                    <param name="values" type="double[]"/>
                </params>
                <scope line="470"/>
            </method>
        </class>
    </source>