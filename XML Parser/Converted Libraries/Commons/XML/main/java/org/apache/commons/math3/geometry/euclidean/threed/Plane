<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.threed">
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.geometry.Vector"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.Vector1D"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.Vector2D"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Embedding"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Hyperplane"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="Plane" line="30">
            <implements interface="Hyperplane&lt;Euclidean3D&gt;"/>
            <implements interface="Embedding&lt;Euclidean3D,Euclidean2D&gt;"/>
            <javadoc line="30">
                The class represent planes in a three dimensional space.                
                <@version>
                    n $Id: Plane.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="originOffset" type="double" line="36"/>
            <javadoc line="36">
                Offset of the origin with respect to the plane.                
            </javadoc>
            <declaration name="origin" type="Vector3D" line="39"/>
            <javadoc line="39">
                Origin of the plane frame.                
            </javadoc>
            <declaration name="u" type="Vector3D" line="42"/>
            <javadoc line="42">
                First vector of the plane frame (in plane).                
            </javadoc>
            <declaration name="v" type="Vector3D" line="45"/>
            <javadoc line="45">
                Second vector of the plane frame (in plane).                
            </javadoc>
            <declaration name="w" type="Vector3D" line="48"/>
            <javadoc line="48">
                Third vector of the plane frame (plane normal).                
            </javadoc>
            <javadoc line="51">
                Build a plane normal to a given direction and containing the origin.                
                <@param>
                    m normal normal direction to the plane                    
                </@param>
                <@exception>
                    n MathArithmeticException if the normal norm is too small                    
                </@exception>
            </javadoc>
            <method name="Plane" type="constructor" line="55"/>
            <javadoc line="61">
                Build a plane from a point and a normal.                
                <@param>
                    m p point belonging to the plane                    
                </@param>
                <@param>
                    m normal normal direction to the plane                    
                </@param>
                <@exception>
                    n MathArithmeticException if the normal norm is too small                    
                </@exception>
            </javadoc>
            <method name="Plane" type="constructor" line="66"/>
            <javadoc line="72">
                Build a plane from three points.
                 * &lt;p&gt;The plane is oriented in the direction of{@code (p2-p1) ^ (p3-p1)}&lt;/p&gt;                
                <@param>
                    m p1 first point belonging to the plane                    
                </@param>
                <@param>
                    m p2 second point belonging to the plane                    
                </@param>
                <@param>
                    m p3 third point belonging to the plane                    
                </@param>
                <@exception>
                    n MathArithmeticException if the points do not constitute a plane                    
                </@exception>
            </javadoc>
            <method name="Plane" type="constructor" line="81"/>
            <javadoc line="85">
                Copy constructor.
                 * &lt;p&gt;The instance created is completely independant of the original
                 * one. A deep copy is used, none of the underlying object are
                 * shared.&lt;/p&gt;                
                <@param>
                    m plane plane to copy                    
                </@param>
            </javadoc>
            <method name="Plane" type="constructor" line="91"/>
            <javadoc line="99">
                Copy the instance.
                 * &lt;p&gt;The instance created is completely independant of the original
                 * one. A deep copy is used, none of the underlying objects are
                 * shared (except for immutable objects).&lt;/p&gt;                
                <@return>
                    n a new hyperplane, copy of the instance                    
                </@return>
            </javadoc>
            <method name="copySelf" type="Plane" line="105"/>
            <javadoc line="109">
                Reset the instance as if built from a point and a normal.                
                <@param>
                    m p point belonging to the plane                    
                </@param>
                <@param>
                    m normal normal direction to the plane                    
                </@param>
                <@exception>
                    n MathArithmeticException if the normal norm is too small                    
                </@exception>
            </javadoc>
            <method name="reset" type="void" line="114"/>
            <javadoc line="120">
                Reset the instance from another one.
                 * &lt;p&gt;The updated instance is completely independant of the original
                 * one. A deep reset is used none of the underlying object is
                 * shared.&lt;/p&gt;                
                <@param>
                    m original plane to reset from                    
                </@param>
            </javadoc>
            <method name="reset" type="void" line="126"/>
            <javadoc line="134">
                Set the normal vactor.                
                <@param>
                    m normal normal direction to the plane (will be copied)                    
                </@param>
                <@exception>
                    n MathArithmeticException if the normal norm is too small                    
                </@exception>
            </javadoc>
            <method name="setNormal" type="void" line="138">
                <declaration name="norm" type="double" line="139"/>
                <scope line="140"/>
            </method>
            <javadoc line="146">
                Reset the plane frame.                
            </javadoc>
            <method name="setFrame" type="void" line="148"/>
            <javadoc line="154">
                Get the origin point of the plane frame.
                 * &lt;p&gt;The point returned is the orthogonal projection of the
                 * 3D-space origin in the plane.&lt;/p&gt;                
                <@return>
                    n the origin point of the plane frame (point closest to the
                     * 3D-space origin)                    
                </@return>
            </javadoc>
            <method name="getOrigin" type="Vector3D" line="160"/>
            <javadoc line="164">
                Get the normalized normal vector.
                 * &lt;p&gt;The frame defined by ({@link #getU getU}, {@link #getV getV},{@link #getNormal getNormal}) is a rigth-handed orthonormalized
                 * frame).&lt;/p&gt;                
                <@return>
                    n normalized normal vector                    
                </@return>
                <@see>
                    e #getU                    
                </@see>
                <@see>
                    e #getV                    
                </@see>
            </javadoc>
            <method name="getNormal" type="Vector3D" line="172"/>
            <javadoc line="176">
                Get the plane first canonical vector.
                 * &lt;p&gt;The frame defined by ({@link #getU getU}, {@link #getV getV},{@link #getNormal getNormal}) is a rigth-handed orthonormalized
                 * frame).&lt;/p&gt;                
                <@return>
                    n normalized first canonical vector                    
                </@return>
                <@see>
                    e #getV                    
                </@see>
                <@see>
                    e #getNormal                    
                </@see>
            </javadoc>
            <method name="getU" type="Vector3D" line="184"/>
            <javadoc line="188">
                Get the plane second canonical vector.
                 * &lt;p&gt;The frame defined by ({@link #getU getU}, {@link #getV getV},{@link #getNormal getNormal}) is a rigth-handed orthonormalized
                 * frame).&lt;/p&gt;                
                <@return>
                    n normalized second canonical vector                    
                </@return>
                <@see>
                    e #getU                    
                </@see>
                <@see>
                    e #getNormal                    
                </@see>
            </javadoc>
            <method name="getV" type="Vector3D" line="196"/>
            <javadoc line="200">
                Revert the plane.
                 * &lt;p&gt;Replace the instance by a similar plane with opposite orientation.&lt;/p&gt;
                 * &lt;p&gt;The new plane frame is chosen in such a way that a 3D point that had{@code (x, y)} in-plane coordinates and {@code z} offset with
                 * respect to the plane and is unaffected by the change will have{@code (y, x)} in-plane coordinates and {@code -z} offset with
                 * respect to the new plane. This means that the {@code u} and {@code v}vectors returned by the {@link #getU} and {@link #getV} methods are exchanged,
                 * and the {@code w} vector returned by the {@link #getNormal} method is
                 * reversed.&lt;/p&gt;                
            </javadoc>
            <method name="revertSelf" type="void" line="211">
                <declaration name="tmp" type="Vector3D" line="212"/>
            </method>
            <javadoc line="219">
                Transform a 3D space point into an in-plane point.                
                <@param>
                    m point point of the space (must be a {@link Vector3DVector3D} instance)                    
                </@param>
                <@return>
                    n in-plane point (really a {@link org.apache.commons.math3.geometry.euclidean.twod.Vector2D Vector2D} instance)                    
                </@return>
                <@see>
                    e #toSpace                    
                </@see>
            </javadoc>
            <method name="toSubSpace" type="Vector2D" line="226"/>
            <javadoc line="230">
                Transform an in-plane point into a 3D space point.                
                <@param>
                    m point in-plane point (must be a {@link org.apache.commons.math3.geometry.euclidean.twod.Vector2D Vector2D} instance)                    
                </@param>
                <@return>
                    n 3D space point (really a {@link Vector3D Vector3D} instance)                    
                </@return>
                <@see>
                    e #toSubSpace                    
                </@see>
            </javadoc>
            <method name="toSpace" type="Vector3D" line="236">
                <declaration name="p2D" type="Vector2D" line="237"/>
            </method>
            <javadoc line="241">
                Get one point from the 3D-space.                
                <@param>
                    m inPlane desired in-plane coordinates for the point in the
                     * plane                    
                </@param>
                <@param>
                    m offset desired offset for the point                    
                </@param>
                <@return>
                    n one point in the 3D-space, with given coordinates and offset
                     * relative to the plane                    
                </@return>
            </javadoc>
            <method name="getPointAt" type="Vector3D" line="248"/>
            <javadoc line="252">
                Check if the instance is similar to another plane.
                 * &lt;p&gt;Planes are considered similar if they contain the same
                 * points. This does not mean they are equal since they can have
                 * opposite normals.&lt;/p&gt;                
                <@param>
                    m plane plane to which the instance is compared                    
                </@param>
                <@return>
                    n true if the planes are similar                    
                </@return>
            </javadoc>
            <method name="isSimilarTo" type="boolean" line="259">
                <declaration name="angle" type="double" line="260"/>
            </method>
            <javadoc line="265">
                Rotate the plane around the specified point.
                 * &lt;p&gt;The instance is not modified, a new instance is created.&lt;/p&gt;                
                <@param>
                    m center rotation center                    
                </@param>
                <@param>
                    m rotation vectorial rotation operator                    
                </@param>
                <@return>
                    n a new plane                    
                </@return>
            </javadoc>
            <method name="rotate" type="Plane" line="271">
                <comment line="272">
                    make sure the frame is transformed as desired                    
                </comment>
                <declaration name="delta" type="Vector3D" line="273"/>
                <declaration name="plane" type="Plane" line="274"/>
            </method>
            <javadoc line="285">
                Translate the plane by the specified amount.
                 * &lt;p&gt;The instance is not modified, a new instance is created.&lt;/p&gt;                
                <@param>
                    m translation translation to apply                    
                </@param>
                <@return>
                    n a new plane                    
                </@return>
            </javadoc>
            <method name="translate" type="Plane" line="290">
                <comment line="291">
                    make sure the frame is transformed as desired                    
                </comment>
                <declaration name="plane" type="Plane" line="292"/>
            </method>
            <javadoc line="302">
                Get the intersection of a line with the instance.                
                <@param>
                    m line line intersecting the instance                    
                </@param>
                <@return>
                    n intersection point between between the line and the
                     * instance (null if the line is parallel to the instance)                    
                </@return>
            </javadoc>
            <method name="intersection" type="Vector3D" line="307">
                <declaration name="direction" type="Vector3D" line="308"/>
                <declaration name="dot" type="double" line="309"/>
                <scope line="310"/>
                <declaration name="point" type="Vector3D" line="313"/>
                <declaration name="k" type="double" line="314"/>
            </method>
            <javadoc line="318">
                Build the line shared by the instance and another plane.                
                <@param>
                    m other other plane                    
                </@param>
                <@return>
                    n line at the intersection of the instance and the
                     * other plane (really a {@link Line Line} instance)                    
                </@return>
            </javadoc>
            <method name="intersection" type="Line" line="323">
                <declaration name="direction" type="Vector3D" line="324"/>
                <scope line="325"/>
                <declaration name="point" type="Vector3D" line="328"/>
            </method>
            <javadoc line="332">
                Get the intersection point of three planes.                
                <@param>
                    m plane1 first plane1                    
                </@param>
                <@param>
                    m plane2 second plane2                    
                </@param>
                <@param>
                    m plane3 third plane2                    
                </@param>
                <@return>
                    n intersection point of three planes, null if some planes are parallel                    
                </@return>
            </javadoc>
            <method name="intersection" type="Vector3D" line="338">
                <comment line="339">
                    coefficients of the three planes linear equations                    
                </comment>
                <comment line="339">
                    direct Cramer resolution of the linear system                    
                </comment>
                <comment line="339">
                    (this is still feasible for a 3x3 system)                    
                </comment>
                <declaration name="a1" type="double" line="341"/>
                <declaration name="b1" type="double" line="342"/>
                <declaration name="c1" type="double" line="343"/>
                <declaration name="d1" type="double" line="344"/>
                <declaration name="a2" type="double" line="346"/>
                <declaration name="b2" type="double" line="347"/>
                <declaration name="c2" type="double" line="348"/>
                <declaration name="d2" type="double" line="349"/>
                <declaration name="a3" type="double" line="351"/>
                <declaration name="b3" type="double" line="352"/>
                <declaration name="c3" type="double" line="353"/>
                <declaration name="d3" type="double" line="354"/>
                <declaration name="a23" type="double" line="358"/>
                <declaration name="b23" type="double" line="359"/>
                <declaration name="c23" type="double" line="360"/>
                <declaration name="determinant" type="double" line="361"/>
                <scope line="362"/>
                <declaration name="r" type="double" line="366"/>
            </method>
            <javadoc line="374">
                Build a region covering the whole hyperplane.                
                <@return>
                    n a region covering the whole hyperplane                    
                </@return>
            </javadoc>
            <method name="wholeHyperplane" type="SubPlane" line="377"/>
            <javadoc line="381">
                Build a region covering the whole space.                
                <@return>
                    n a region containing the instance (really a {@link PolyhedronsSet PolyhedronsSet} instance)                    
                </@return>
            </javadoc>
            <method name="wholeSpace" type="PolyhedronsSet" line="385"/>
            <javadoc line="389">
                Check if the instance contains a point.                
                <@param>
                    m p point to check                    
                </@param>
                <@return>
                    n true if p belongs to the plane                    
                </@return>
            </javadoc>
            <method name="contains" type="boolean" line="393"/>
            <javadoc line="397">
                Get the offset (oriented distance) of a parallel plane.
                 * &lt;p&gt;This method should be called only for parallel planes otherwise
                 * the result is not meaningful.&lt;/p&gt;
                 * &lt;p&gt;The offset is 0 if both planes are the same, it is
                 * positive if the plane is on the plus side of the instance and
                 * negative if it is on the minus side, according to its natural
                 * orientation.&lt;/p&gt;                
                <@param>
                    m plane plane to check                    
                </@param>
                <@return>
                    n offset of the plane                    
                </@return>
            </javadoc>
            <method name="getOffset" type="double" line="407"/>
            <javadoc line="411">
                Get the offset (oriented distance) of a point.
                 * &lt;p&gt;The offset is 0 if the point is on the underlying hyperplane,
                 * it is positive if the point is on one particular side of the
                 * hyperplane, and it is negative if the point is on the other side,
                 * according to the hyperplane natural orientation.&lt;/p&gt;                
                <@param>
                    m point point to check                    
                </@param>
                <@return>
                    n offset of the point                    
                </@return>
            </javadoc>
            <method name="getOffset" type="double" line="419"/>
            <javadoc line="423">
                Check if the instance has the same orientation as another hyperplane.                
                <@param>
                    m other other hyperplane to check against the instance                    
                </@param>
                <@return>
                    n true if the instance and the other hyperplane have
                     * the same orientation                    
                </@return>
            </javadoc>
            <method name="sameOrientationAs" type="boolean" line="428"/>
        </class>
    </source>