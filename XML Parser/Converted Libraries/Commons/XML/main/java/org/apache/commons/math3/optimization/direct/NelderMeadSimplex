<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.direct">
        <import package="java.util.Comparator"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <class name="NelderMeadSimplex" line="25">
            <extends class="AbstractSimplex"/>
            <javadoc line="25">
                This class implements the Nelder-Mead simplex algorithm.                
                <@version>
                    n $Id: NelderMeadSimplex.java 1422230 2012-12-15 12:11:13Z erans $                    
                </@version>
                <@deprecated>
                    d As of 3.1 (to be removed in 4.0).                    
                </@deprecated>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="DEFAULT_RHO" type="double" line="34"/>
            <javadoc line="34">
                Default value for {@link #rho}: {@value}.                
            </javadoc>
            <declaration name="DEFAULT_KHI" type="double" line="36"/>
            <javadoc line="36">
                Default value for {@link #khi}: {@value}.                
            </javadoc>
            <declaration name="DEFAULT_GAMMA" type="double" line="38"/>
            <javadoc line="38">
                Default value for {@link #gamma}: {@value}.                
            </javadoc>
            <declaration name="DEFAULT_SIGMA" type="double" line="40"/>
            <javadoc line="40">
                Default value for {@link #sigma}: {@value}.                
            </javadoc>
            <declaration name="rho" type="double" line="42"/>
            <javadoc line="42">
                Reflection coefficient.                
            </javadoc>
            <declaration name="khi" type="double" line="44"/>
            <javadoc line="44">
                Expansion coefficient.                
            </javadoc>
            <declaration name="gamma" type="double" line="46"/>
            <javadoc line="46">
                Contraction coefficient.                
            </javadoc>
            <declaration name="sigma" type="double" line="48"/>
            <javadoc line="48">
                Shrinkage coefficient.                
            </javadoc>
            <javadoc line="51">
                Build a Nelder-Mead simplex with default coefficients.
                  The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
                  for both gamma and sigma.                
                <@param>
                    m n Dimension of the simplex.                    
                </@param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="58">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="62">
                Build a Nelder-Mead simplex with default coefficients.
                  The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
                  for both gamma and sigma.                
                <@param>
                    m n Dimension of the simplex.                    
                </@param>
                <@param>
                    m sideLength Length of the sides of the default (hypercube)
                      simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </@param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="71">
                <params>
                    <param name="n" type="int"/>
                    <param name="sideLength" type="double"/>
                </params>
            </method>
            <javadoc line="76">
                Build a Nelder-Mead simplex with specified coefficients.                
                <@param>
                    m n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </@param>
                <@param>
                    m sideLength Length of the sides of the default (hypercube)
                      simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </@param>
                <@param>
                    m rho Reflection coefficient.                    
                </@param>
                <@param>
                    m khi Expansion coefficient.                    
                </@param>
                <@param>
                    m gamma Contraction coefficient.                    
                </@param>
                <@param>
                    m sigma Shrinkage coefficient.                    
                </@param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="90">
                <params>
                    <param name="n" type="int"/>
                    <param name="sideLength" type="double"/>
                    <param name="rho" type="double"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                    <param name="sigma" type="double"/>
                </params>
            </method>
            <javadoc line="99">
                Build a Nelder-Mead simplex with specified coefficients.                
                <@param>
                    m n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int)}.                    
                </@param>
                <@param>
                    m rho Reflection coefficient.                    
                </@param>
                <@param>
                    m khi Expansion coefficient.                    
                </@param>
                <@param>
                    m gamma Contraction coefficient.                    
                </@param>
                <@param>
                    m sigma Shrinkage coefficient.                    
                </@param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="111">
                <params>
                    <param name="n" type="int"/>
                    <param name="rho" type="double"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                    <param name="sigma" type="double"/>
                </params>
            </method>
            <javadoc line="115">
                Build a Nelder-Mead simplex with default coefficients.
                  The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
                  for both gamma and sigma.                
                <@param>
                    m steps Steps along the canonical axes representing box edges.
                      They may be negative but not zero. See                    
                </@param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="123">
                <params>
                    <param name="steps" type="double[]"/>
                </params>
            </method>
            <javadoc line="127">
                Build a Nelder-Mead simplex with specified coefficients.                
                <@param>
                    m steps Steps along the canonical axes representing box edges.
                      They may be negative but not zero. See{@link AbstractSimplex#AbstractSimplex(double[])}.                    
                </@param>
                <@param>
                    m rho Reflection coefficient.                    
                </@param>
                <@param>
                    m khi Expansion coefficient.                    
                </@param>
                <@param>
                    m gamma Contraction coefficient.                    
                </@param>
                <@param>
                    m sigma Shrinkage coefficient.                    
                </@param>
                <@throws>
                    s IllegalArgumentException if one of the steps is zero.                    
                </@throws>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="141">
                <params>
                    <param name="steps" type="double[]"/>
                    <param name="rho" type="double"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                    <param name="sigma" type="double"/>
                </params>
            </method>
            <javadoc line="150">
                Build a Nelder-Mead simplex with default coefficients.
                  The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
                  for both gamma and sigma.                
                <@param>
                    m referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.                    
                </@param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="158">
                <params>
                    <param name="referenceSimplex" type="double[][]"/>
                </params>
            </method>
            <javadoc line="162">
                Build a Nelder-Mead simplex with specified coefficients.                
                <@param>
                    m referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.                    
                </@param>
                <@param>
                    m rho Reflection coefficient.                    
                </@param>
                <@param>
                    m khi Expansion coefficient.                    
                </@param>
                <@param>
                    m gamma Contraction coefficient.                    
                </@param>
                <@param>
                    m sigma Shrinkage coefficient.                    
                </@param>
                <@throws>
                    s org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif the reference simplex does not contain at least one point.                    
                </@throws>
                <@throws>
                    s org.apache.commons.math3.exception.DimensionMismatchExceptionif there is a dimension mismatch in the reference simplex.                    
                </@throws>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="178">
                <params>
                    <param name="referenceSimplex" type="double[][]"/>
                    <param name="rho" type="double"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                    <param name="sigma" type="double"/>
                </params>
            </method>
            <javadoc line="187">
                {@inheritDoc}                
            </javadoc>
            <method name="iterate" type="void" line="190">
                <params>
                    <param name="evaluationFunction" type="MultivariateFunction"/>
                    <param name="comparator" type="Comparator<PointValuePair>"/>
                </params>
                <comment line="191">
                    The simplex has n + 1 points if dimension is n.                    
                </comment>
                <comment line="191">
                    Interesting values.                    
                </comment>
                <comment line="191">
                    Compute the centroid of the best vertices (dismissing the worst                    
                </comment>
                <comment line="191">
                    point at index n).                    
                </comment>
                <comment line="191">
                    compute the reflection point                    
                </comment>
                <declaration name="n" type="int" line="192"/>
                <declaration name="best" type="PointValuePair" line="195"/>
                <declaration name="secondBest" type="PointValuePair" line="196"/>
                <declaration name="worst" type="PointValuePair" line="197"/>
                <declaration name="xWorst" type="double[]" line="198"/>
                <declaration name="centroid" type="double[]" line="202"/>
                <scope line="203">
                    <declaration name="x" type="double[]" line="204"/>
                    <scope line="205"/>
                </scope>
                <declaration name="scaling" type="double" line="209"/>
                <scope line="210"/>
                <declaration name="xR" type="double[]" line="215"/>
                <scope line="216"/>
                <declaration name="reflected" type="PointValuePair" line="219"/>
                <scope line="223"/>
                <scope line="226">
                    <declaration name="xE" type="double[]" line="228"/>
                    <scope line="229"/>
                    <declaration name="expanded" type="PointValuePair" line="232"/>
                    <scope line="235"/>
                    <scope line="238"/>
                </scope>
                <scope line="242">
                    <scope line="243">
                        <declaration name="xC" type="double[]" line="245"/>
                        <scope line="246"/>
                        <declaration name="outContracted" type="PointValuePair" line="249"/>
                        <scope line="251"/>
                    </scope>
                    <scope line="256">
                        <declaration name="xC" type="double[]" line="258"/>
                        <scope line="259"/>
                        <declaration name="inContracted" type="PointValuePair" line="262"/>
                        <scope line="265"/>
                    </scope>
                    <declaration name="xSmallest" type="double[]" line="273"/>
                    <scope line="274">
                        <declaration name="x" type="double[]" line="275"/>
                        <scope line="276"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>