<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <class name="TriangularDistribution" extends="AbstractRealDistribution" line="28">
            <javadoc line="28">
                Implementation of the triangular real distribution.                
                <@see>
                    e <a href="http://en.wikipedia.org/wiki/Triangular_distribution">
                     * Triangular distribution (Wikipedia)</a>                    
                </@see>
                <@version>
                    n $Id: TriangularDistribution.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="38"/>
            <javadoc line="38">
                Serializable version identifier.                
            </javadoc>
            <declaration name="a" type="double" line="40"/>
            <javadoc line="40">
                Lower limit of this distribution (inclusive).                
            </javadoc>
            <declaration name="b" type="double" line="42"/>
            <javadoc line="42">
                Upper limit of this distribution (inclusive).                
            </javadoc>
            <declaration name="c" type="double" line="44"/>
            <javadoc line="44">
                Mode of this distribution.                
            </javadoc>
            <declaration name="solverAbsoluteAccuracy" type="double" line="46"/>
            <javadoc line="46">
                Inverse cumulative probability accuracy.                
            </javadoc>
            <javadoc line="49">
                Creates a triangular real distribution using the given lower limit,
                 * upper limit, and mode.                
                <@param>
                    m a Lower limit of this distribution (inclusive).                    
                </@param>
                <@param>
                    m b Upper limit of this distribution (inclusive).                    
                </@param>
                <@param>
                    m c Mode of this distribution.                    
                </@param>
                <@throws>
                    s NumberIsTooLargeException if {@code a >= b} or if {@code c > b}.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if {@code c < a}.                    
                </@throws>
            </javadoc>
            <method name="TriangularDistribution" type="constructor" line="60"/>
            <javadoc line="64">
                Creates a triangular distribution.                
                <@param>
                    m rng Random number generator.                    
                </@param>
                <@param>
                    m a Lower limit of this distribution (inclusive).                    
                </@param>
                <@param>
                    m b Upper limit of this distribution (inclusive).                    
                </@param>
                <@param>
                    m c Mode of this distribution.                    
                </@param>
                <@throws>
                    s NumberIsTooLargeException if {@code a >= b} or if {@code c > b}.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if {@code c < a}.                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="TriangularDistribution" type="constructor" line="79">
                <scope line="82"/>
                <scope line="87"/>
                <scope line="91"/>
            </method>
            <javadoc line="102">
                Returns the mode {@code c} of this distribution.                
                <@return>
                    n the mode {@code c} of this distribution                    
                </@return>
            </javadoc>
            <method name="getMode" type="double" line="107"/>
            <javadoc line="111">
                {@inheritDoc}&lt;p&gt;
                 * For this distribution, the returned value is not really meaningful,
                 * since exact formulas are implemented for the computation of the{@link #inverseCumulativeProbability(double)} (no solver is invoked).
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * For lower limit {@code a} and upper limit {@code b}, the current
                 * implementation returns {@code max(ulp(a), ulp(b)}.
                 * &lt;/p&gt;                
            </javadoc>
            <method name="getSolverAbsoluteAccuracy" type="double" line="125"/>
            <javadoc line="129">
                {@inheritDoc}For lower limit {@code a}, upper limit {@code b} and mode {@code c}, the
                 * PDF is given by
                 * &lt;ul&gt;
                 * &lt;li&gt;{@code 2 * (x - a) / [(b - a) * (c - a)]} if {@code a &lt;= x &lt; c},&lt;/li&gt;
                 * &lt;li&gt;{@code 2 / (b - a)} if {@code x = c},&lt;/li&gt;
                 * &lt;li&gt;{@code 2 * (b - x) / [(b - a) * (b - c)]} if {@code c &lt; x &lt;= b},&lt;/li&gt;
                 * &lt;li&gt;{@code 0} otherwise.
                 * &lt;/ul&gt;                
            </javadoc>
            <method name="density" type="double" line="141">
                <scope line="142"/>
                <scope line="145">
                    <declaration name="divident" type="double" line="146"/>
                    <declaration name="divisor" type="double" line="147"/>
                </scope>
                <scope line="150"/>
                <scope line="153">
                    <declaration name="divident" type="double" line="154"/>
                    <declaration name="divisor" type="double" line="155"/>
                </scope>
            </method>
            <javadoc line="161">
                {@inheritDoc}For lower limit {@code a}, upper limit {@code b} and mode {@code c}, the
                 * CDF is given by
                 * &lt;ul&gt;
                 * &lt;li&gt;{@code 0} if {@code x &lt; a},&lt;/li&gt;
                 * &lt;li&gt;{@code (x - a)^2 / [(b - a) * (c - a)]} if {@code a &lt;= x &lt; c},&lt;/li&gt;
                 * &lt;li&gt;{@code (c - a) / (b - a)} if {@code x = c},&lt;/li&gt;
                 * &lt;li&gt;{@code 1 - (b - x)^2 / [(b - a) * (b - c)]} if {@code c &lt; x &lt;= b},&lt;/li&gt;
                 * &lt;li&gt;{@code 1} if {@code x &gt; b}.&lt;/li&gt;
                 * &lt;/ul&gt;                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="174">
                <scope line="175"/>
                <scope line="178">
                    <declaration name="divident" type="double" line="179"/>
                    <declaration name="divisor" type="double" line="180"/>
                </scope>
                <scope line="183"/>
                <scope line="186">
                    <declaration name="divident" type="double" line="187"/>
                    <declaration name="divisor" type="double" line="188"/>
                </scope>
            </method>
            <javadoc line="194">
                {@inheritDoc}For lower limit {@code a}, upper limit {@code b}, and mode {@code c},
                 * the mean is {@code (a + b + c) / 3}.                
            </javadoc>
            <method name="getNumericalMean" type="double" line="200"/>
            <javadoc line="204">
                {@inheritDoc}For lower limit {@code a}, upper limit {@code b}, and mode {@code c},
                 * the variance is {@code (a^2 + b^2 + c^2 - a * b - a * c - b * c) / 18}.                
            </javadoc>
            <method name="getNumericalVariance" type="double" line="210"/>
            <javadoc line="214">
                {@inheritDoc}The lower bound of the support is equal to the lower limit parameter{@code a} of the distribution.                
                <@return>
                    n lower bound of the support                    
                </@return>
            </javadoc>
            <method name="getSupportLowerBound" type="double" line="222"/>
            <javadoc line="226">
                {@inheritDoc}The upper bound of the support is equal to the upper limit parameter{@code b} of the distribution.                
                <@return>
                    n upper bound of the support                    
                </@return>
            </javadoc>
            <method name="getSupportUpperBound" type="double" line="234"/>
            <javadoc line="238">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportLowerBoundInclusive" type="boolean" line="239"/>
            <javadoc line="243">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportUpperBoundInclusive" type="boolean" line="244"/>
            <javadoc line="248">
                {@inheritDoc}The support of this distribution is connected.                
                <@return>
                    n {@code true}                    
                </@return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="255"/>
            <method name="inverseCumulativeProbability" type="double" line="261">
                <scope line="262"/>
                <scope line="265"/>
                <scope line="268"/>
                <scope line="271"/>
            </method>
        </class>
    </source>