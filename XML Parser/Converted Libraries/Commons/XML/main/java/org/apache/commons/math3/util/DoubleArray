<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <interface name="DoubleArray">
            <javadoc line="20">
                Provides a standard interface for double arrays.  Allows different
                  array implementations to support various storage mechanisms
                  such as automatic expansion, contraction, and array &quot;rolling&quot;.                
                <@version>
                    n $Id: DoubleArray.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <method name="getNumElements" type="int" line="29"/>
            <javadoc line="29">
                Returns the number of elements currently in the array.  Please note
                  that this may be different from the length of the internal storage array.                
                <@return>
                    n number of elements                    
                </@return>
            </javadoc>
            <method name="getElement" type="double" line="37"/>
            <javadoc line="37">
                Returns the element at the specified index.  Note that if an
                  out of bounds index is supplied a ArrayIndexOutOfBoundsException
                  will be thrown.                
                <@param>
                    m index index to fetch a value from                    
                </@param>
                <@return>
                    n value stored at the specified index                    
                </@return>
                <@throws>
                    s ArrayIndexOutOfBoundsException if <code>index</code> is less than
                      zero or is greater than <code>getNumElements() - 1</code>.                    
                </@throws>
            </javadoc>
            <method name="setElement" type="void" line="49"/>
            <javadoc line="49">
                Sets the element at the specified index.  If the specified index is greater than
                  &lt;code&gt;getNumElements() - 1&lt;/code&gt;, the &lt;code&gt;numElements&lt;/code&gt; property
                  is increased to &lt;code&gt;index +1&lt;/code&gt; and additional storage is allocated
                  (if necessary) for the new element and all  (uninitialized) elements
                  between the new element and the previous end of the array).                
                <@param>
                    m index index to store a value in                    
                </@param>
                <@param>
                    m value value to store at the specified index                    
                </@param>
                <@throws>
                    s ArrayIndexOutOfBoundsException if <code>index</code> is less than
                      zero.                    
                </@throws>
            </javadoc>
            <method name="addElement" type="void" line="63"/>
            <javadoc line="63">
                Adds an element to the end of this expandable array                
                <@param>
                    m value to be added to end of array                    
                </@param>
            </javadoc>
            <method name="addElements" type="void" line="70"/>
            <javadoc line="70">
                Adds elements to the end of this expandable array                
                <@param>
                    m values to be added to end of array                    
                </@param>
            </javadoc>
            <method name="addElementRolling" type="double" line="77"/>
            <javadoc line="77">
                &lt;p&gt;
                  Adds an element to the end of the array and removes the first
                  element in the array.  Returns the discarded first element.
                  The effect is similar to a push operation in a FIFO queue.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Example: If the array contains the elements 1, 2, 3, 4 (in that order)
                  and addElementRolling(5) is invoked, the result is an array containing
                  the entries 2, 3, 4, 5 and the value returned is 1.
                  &lt;/p&gt;                
                <@param>
                    m value the value to be added to the array                    
                </@param>
                <@return>
                    n the value which has been discarded or "pushed" out of the array
                      by this rolling insert                    
                </@return>
            </javadoc>
            <method name="getElements" type="double[]" line="95"/>
            <javadoc line="95">
                Returns a double[] array containing the elements of this
                  &lt;code&gt;DoubleArray&lt;/code&gt;.  If the underlying implementation is
                  array-based, this method should always return a copy, rather than a
                  reference to the underlying array so that changes made to the returned
                  array have no effect on the &lt;code&gt;DoubleArray.&lt;/code&gt;                
                <@return>
                    n all elements added to the array                    
                </@return>
            </javadoc>
            <method name="clear" type="void" line="106"/>
            <javadoc line="106">
                Clear the double array                
            </javadoc>
        </interface>
    </source>