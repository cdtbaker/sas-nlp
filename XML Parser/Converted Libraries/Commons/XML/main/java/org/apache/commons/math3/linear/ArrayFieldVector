<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.io.Serializable"/>
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.ZeroException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="ArrayFieldVector" line="35">
            <implements interface="FieldVector&lt;T&gt;"/>
            <implements interface="Serializable"/>
            <javadoc line="35">
                This class implements the {@link FieldVector} interface with a {@link FieldElement} array.                
                <@param>
                    m<T>
                     *  the type of the field elements                    
                </@param>
                <@version>
                    n $Id: ArrayFieldVector.java 1462423 2013-03-29 07:25:18Z luc $                    
                </@version>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="42"/>
            <javadoc line="42">
                Serializable version identifier.                
            </javadoc>
            <declaration name="data" type="T[]" line="45"/>
            <javadoc line="45">
                Entries of the vector.                
            </javadoc>
            <declaration name="field" type="Field&lt;T&gt;" line="48"/>
            <javadoc line="48">
                Field to which the elements belong.                
            </javadoc>
            <javadoc line="51">
                Build a 0-length vector.
                 * Zero-length vectors may be used to initialize construction of vectors
                 * by data gathering. We start with zero-length and use either the {@link #ArrayFieldVector(ArrayFieldVector,ArrayFieldVector)} constructor
                 * or one of the {@code append} methods ({@link #add(FieldVector)} or{@link #append(ArrayFieldVector)}) to gather data into this vector.                
                <@param>
                    m field field to which the elements belong                    
                </@param>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="61"/>
            <javadoc line="65">
                Construct a vector of zeroes.                
                <@param>
                    m field Field to which the elements belong.                    
                </@param>
                <@param>
                    m size Size of the vector.                    
                </@param>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="71"/>
            <javadoc line="76">
                Construct a vector with preset values.                
                <@param>
                    m size Size of the vector.                    
                </@param>
                <@param>
                    m preset All entries will be set with this value.                    
                </@param>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="82"/>
            <javadoc line="87">
                Construct a vector from an array, copying the input array.
                 * This constructor needs a non-empty {@code d} array to retrieve
                 * the field from its first element. This implies it cannot build
                 * 0 length vectors. To build vectors from any size, one should
                 * use the {@link #ArrayFieldVector(Field,FieldElement[])} constructor.                
                <@param>
                    m d Array.                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code d} is {@code null}.                    
                </@throws>
                <@throws>
                    s ZeroException if {@code d} is empty.                    
                </@throws>
                <@see>
                    e #ArrayFieldVector(Field,FieldElement[])                    
                </@see>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="100">
                <scope line="102"/>
                <scope line="105"/>
            </method>
            <javadoc line="110">
                Construct a vector from an array, copying the input array.                
                <@param>
                    m field Field to which the elements belong.                    
                </@param>
                <@param>
                    m d Array.                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code d} is {@code null}.                    
                </@throws>
                <@see>
                    e #ArrayFieldVector(FieldElement[])                    
                </@see>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="119"/>
            <javadoc line="125">
                Create a new ArrayFieldVector using the input array as the underlying
                 * data array.
                 * If an array is built specially in order to be embedded in a
                 * ArrayFieldVector and not used directly, the {@code copyArray} may be
                 * set to {@code false}. This will prevent the copying and improve
                 * performance as no new array will be built and no data will be copied.
                 * This constructor needs a non-empty {@code d} array to retrieve
                 * the field from its first element. This implies it cannot build
                 * 0 length vectors. To build vectors from any size, one should
                 * use the {@link #ArrayFieldVector(Field,FieldElement[],boolean)}constructor.                
                <@param>
                    m d Data for the new vector.                    
                </@param>
                <@param>
                    m copyArray If {@code true}, the input array will be copied,
                     * otherwise it will be referenced.                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code d} is {@code null}.                    
                </@throws>
                <@throws>
                    s ZeroException if {@code d} is empty.                    
                </@throws>
                <@see>
                    e #ArrayFieldVector(FieldElement[])                    
                </@see>
                <@see>
                    e #ArrayFieldVector(Field,FieldElement[],boolean)                    
                </@see>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="147">
                <scope line="149"/>
            </method>
            <javadoc line="156">
                Create a new ArrayFieldVector using the input array as the underlying
                 * data array.
                 * If an array is built specially in order to be embedded in a
                 * ArrayFieldVector and not used directly, the {@code copyArray} may be
                 * set to {@code false}. This will prevent the copying and improve
                 * performance as no new array will be built and no data will be copied.                
                <@param>
                    m field Field to which the elements belong.                    
                </@param>
                <@param>
                    m d Data for the new vector.                    
                </@param>
                <@param>
                    m copyArray If {@code true}, the input array will be copied,
                     * otherwise it will be referenced.                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code d} is {@code null}.                    
                </@throws>
                <@see>
                    e #ArrayFieldVector(FieldElement[],boolean)                    
                </@see>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="172"/>
            <javadoc line="178">
                Construct a vector from part of a array.                
                <@param>
                    m d Array.                    
                </@param>
                <@param>
                    m pos Position of the first entry.                    
                </@param>
                <@param>
                    m size Number of entries to copy.                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code d} is {@code null}.                    
                </@throws>
                <@throws>
                    s NumberIsTooLargeException if the size of {@code d} is less
                     * than {@code pos + size}.                    
                </@throws>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="189">
                <scope line="191"/>
            </method>
            <javadoc line="199">
                Construct a vector from part of a array.                
                <@param>
                    m field Field to which the elements belong.                    
                </@param>
                <@param>
                    m d Array.                    
                </@param>
                <@param>
                    m pos Position of the first entry.                    
                </@param>
                <@param>
                    m size Number of entries to copy.                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code d} is {@code null}.                    
                </@throws>
                <@throws>
                    s NumberIsTooLargeException if the size of {@code d} is less
                     * than {@code pos + size}.                    
                </@throws>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="211">
                <scope line="213"/>
            </method>
            <javadoc line="221">
                Construct a vector from another vector, using a deep copy.                
                <@param>
                    m v Vector to copy.                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code v} is {@code null}.                    
                </@throws>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="228">
                <scope line="232"/>
            </method>
            <javadoc line="237">
                Construct a vector from another vector, using a deep copy.                
                <@param>
                    m v Vector to copy.                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code v} is {@code null}.                    
                </@throws>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="244"/>
            <javadoc line="250">
                Construct a vector from another vector.                
                <@param>
                    m v Vector to copy.                    
                </@param>
                <@param>
                    m deep If {@code true} perform a deep copy, otherwise perform
                     * a shallow copy                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code v} is {@code null}.                    
                </@throws>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="259"/>
            <javadoc line="265">
                Construct a vector by appending one vector to another vector.                
                <@param>
                    m v1 First vector (will be put in front of the new vector).                    
                </@param>
                <@param>
                    m v2 Second vector (will be put at back of the new vector).                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </@throws>
                <@deprecated>
                    d as of 3.2, replaced by {@link #ArrayFieldVector(FieldVector,FieldVector)}                    
                </@deprecated>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="276"/>
            <javadoc line="280">
                Construct a vector by appending one vector to another vector.                
                <@param>
                    m v1 First vector (will be put in front of the new vector).                    
                </@param>
                <@param>
                    m v2 Second vector (will be put at back of the new vector).                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </@throws>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="290">
                <declaration name="v1Data" type="T[]" line="294"/>
                <declaration name="v2Data" type="T[]" line="296"/>
            </method>
            <javadoc line="303">
                Construct a vector by appending one vector to another vector.                
                <@param>
                    m v1 First vector (will be put in front of the new vector).                    
                </@param>
                <@param>
                    m v2 Second vector (will be put at back of the new vector).                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </@throws>
                <@deprecated>
                    d as of 3.2, replaced by {@link #ArrayFieldVector(FieldVector,FieldElement[])}                    
                </@deprecated>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="314"/>
            <javadoc line="318">
                Construct a vector by appending one vector to another vector.                
                <@param>
                    m v1 First vector (will be put in front of the new vector).                    
                </@param>
                <@param>
                    m v2 Second vector (will be put at back of the new vector).                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </@throws>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="328">
                <declaration name="v1Data" type="T[]" line="332"/>
            </method>
            <javadoc line="339">
                Construct a vector by appending one vector to another vector.                
                <@param>
                    m v1 First vector (will be put in front of the new vector).                    
                </@param>
                <@param>
                    m v2 Second vector (will be put at back of the new vector).                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </@throws>
                <@deprecated>
                    d as of 3.2, replaced by {@link #ArrayFieldVector(FieldElement[],FieldVector)}                    
                </@deprecated>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="350"/>
            <javadoc line="354">
                Construct a vector by appending one vector to another vector.                
                <@param>
                    m v1 First vector (will be put in front of the new vector).                    
                </@param>
                <@param>
                    m v2 Second vector (will be put at back of the new vector).                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </@throws>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="364">
                <declaration name="v2Data" type="T[]" line="368"/>
            </method>
            <javadoc line="375">
                Construct a vector by appending one vector to another vector.
                 * This constructor needs at least one non-empty array to retrieve
                 * the field from its first element. This implies it cannot build
                 * 0 length vectors. To build vectors from any size, one should
                 * use the {@link #ArrayFieldVector(Field,FieldElement[],FieldElement[])}constructor.                
                <@param>
                    m v1 First vector (will be put in front of the new vector).                    
                </@param>
                <@param>
                    m v2 Second vector (will be put at back of the new vector).                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </@throws>
                <@throws>
                    s ZeroException if both arrays are empty.                    
                </@throws>
                <@see>
                    e #ArrayFieldVector(Field,FieldElement[],FieldElement[])                    
                </@see>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="391">
                <scope line="394"/>
            </method>
            <javadoc line="403">
                Construct a vector by appending one vector to another vector.                
                <@param>
                    m field Field to which the elements belong.                    
                </@param>
                <@param>
                    m v1 First vector (will be put in front of the new vector).                    
                </@param>
                <@param>
                    m v2 Second vector (will be put at back of the new vector).                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </@throws>
                <@throws>
                    s ZeroException if both arrays are empty.                    
                </@throws>
                <@see>
                    e #ArrayFieldVector(FieldElement[],FieldElement[])                    
                </@see>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="415">
                <scope line="418"/>
            </method>
            <javadoc line="427">
                {@inheritDoc}                
            </javadoc>
            <method name="getField" type="Field<T>" line="428"/>
            <javadoc line="432">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="FieldVector<T>" line="433"/>
            <javadoc line="437">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="FieldVector<T>" line="439">
                <scope line="440"/>
                <scope line="442">
                    <declaration name="out" type="T[]" line="444"/>
                    <scope line="445"/>
                </scope>
            </method>
            <javadoc line="452">
                Compute the sum of {@code this} and {@code v}.                
                <@param>
                    m v vector to be added                    
                </@param>
                <@return>
                    n {@code this + v}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code v} is not the same size as{@code this}                    
                </@throws>
            </javadoc>
            <method name="add" type="ArrayFieldVector<T>" line="460">
                <declaration name="out" type="T[]" line="462"/>
                <scope line="463"/>
            </method>
            <javadoc line="469">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="FieldVector<T>" line="471">
                <scope line="472"/>
                <scope line="474">
                    <declaration name="out" type="T[]" line="476"/>
                    <scope line="477"/>
                </scope>
            </method>
            <javadoc line="484">
                Compute {@code this} minus {@code v}.                
                <@param>
                    m v vector to be subtracted                    
                </@param>
                <@return>
                    n {@code this - v}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code v} is not the same size as{@code this}                    
                </@throws>
            </javadoc>
            <method name="subtract" type="ArrayFieldVector<T>" line="492">
                <declaration name="out" type="T[]" line="494"/>
                <scope line="495"/>
            </method>
            <javadoc line="501">
                {@inheritDoc}                
            </javadoc>
            <method name="mapAdd" type="FieldVector<T>" line="502">
                <declaration name="out" type="T[]" line="503"/>
                <scope line="504"/>
            </method>
            <javadoc line="510">
                {@inheritDoc}                
            </javadoc>
            <method name="mapAddToSelf" type="FieldVector<T>" line="511">
                <scope line="512"/>
            </method>
            <javadoc line="518">
                {@inheritDoc}                
            </javadoc>
            <method name="mapSubtract" type="FieldVector<T>" line="519">
                <declaration name="out" type="T[]" line="520"/>
                <scope line="521"/>
            </method>
            <javadoc line="527">
                {@inheritDoc}                
            </javadoc>
            <method name="mapSubtractToSelf" type="FieldVector<T>" line="528">
                <scope line="529"/>
            </method>
            <javadoc line="535">
                {@inheritDoc}                
            </javadoc>
            <method name="mapMultiply" type="FieldVector<T>" line="536">
                <declaration name="out" type="T[]" line="537"/>
                <scope line="538"/>
            </method>
            <javadoc line="544">
                {@inheritDoc}                
            </javadoc>
            <method name="mapMultiplyToSelf" type="FieldVector<T>" line="545">
                <scope line="546"/>
            </method>
            <javadoc line="552">
                {@inheritDoc}                
            </javadoc>
            <method name="mapDivide" type="FieldVector<T>" line="554">
                <declaration name="out" type="T[]" line="556"/>
                <scope line="557"/>
            </method>
            <javadoc line="563">
                {@inheritDoc}                
            </javadoc>
            <method name="mapDivideToSelf" type="FieldVector<T>" line="565">
                <scope line="567"/>
            </method>
            <javadoc line="573">
                {@inheritDoc}                
            </javadoc>
            <method name="mapInv" type="FieldVector<T>" line="574">
                <declaration name="out" type="T[]" line="575"/>
                <declaration name="one" type="T" line="576"/>
                <scope line="577">
                    <scope line="578"/>
                    <scope line="580"/>
                </scope>
            </method>
            <javadoc line="587">
                {@inheritDoc}                
            </javadoc>
            <method name="mapInvToSelf" type="FieldVector<T>" line="588">
                <declaration name="one" type="T" line="589"/>
                <scope line="590">
                    <scope line="591"/>
                    <scope line="593"/>
                </scope>
            </method>
            <javadoc line="600">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeMultiply" type="FieldVector<T>" line="602">
                <scope line="603"/>
                <scope line="605">
                    <declaration name="out" type="T[]" line="607"/>
                    <scope line="608"/>
                </scope>
            </method>
            <javadoc line="615">
                Element-by-element multiplication.                
                <@param>
                    m v vector by which instance elements must be multiplied                    
                </@param>
                <@return>
                    n a vector containing {@code this[i] * v[i]} for all {@code i}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code v} is not the same size as{@code this}                    
                </@throws>
            </javadoc>
            <method name="ebeMultiply" type="ArrayFieldVector<T>" line="623">
                <declaration name="out" type="T[]" line="625"/>
                <scope line="626"/>
            </method>
            <javadoc line="632">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeDivide" type="FieldVector<T>" line="634">
                <scope line="635"/>
                <scope line="637">
                    <declaration name="out" type="T[]" line="639"/>
                    <scope line="640">
                        <scope line="641"/>
                        <scope line="643"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="651">
                Element-by-element division.                
                <@param>
                    m v vector by which instance elements must be divided                    
                </@param>
                <@return>
                    n a vector containing {@code this[i] / v[i]} for all {@code i}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code v} is not the same size as{@code this}                    
                </@throws>
                <@throws>
                    s MathArithmeticException if one entry of {@code v} is zero.                    
                </@throws>
            </javadoc>
            <method name="ebeDivide" type="ArrayFieldVector<T>" line="660">
                <declaration name="out" type="T[]" line="662"/>
                <scope line="663">
                    <scope line="664"/>
                    <scope line="666"/>
                </scope>
            </method>
            <javadoc line="673">
                {@inheritDoc}                
            </javadoc>
            <method name="getData" type="T[]" line="674"/>
            <javadoc line="678">
                Returns a reference to the underlying data array.
                 * &lt;p&gt;Does not make a fresh copy of the underlying data.&lt;/p&gt;                
                <@return>
                    n array of entries                    
                </@return>
            </javadoc>
            <method name="getDataRef" type="T[]" line="683"/>
            <javadoc line="687">
                {@inheritDoc}                
            </javadoc>
            <method name="dotProduct" type="T" line="689">
                <scope line="690"/>
                <scope line="692">
                    <declaration name="dot" type="T" line="694"/>
                    <scope line="695"/>
                </scope>
            </method>
            <javadoc line="702">
                Compute the dot product.                
                <@param>
                    m v vector with which dot product should be computed                    
                </@param>
                <@return>
                    n the scalar dot product of {@code this} and {@code v}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code v} is not the same size as{@code this}                    
                </@throws>
            </javadoc>
            <method name="dotProduct" type="T" line="710">
                <declaration name="dot" type="T" line="712"/>
                <scope line="713"/>
            </method>
            <javadoc line="719">
                {@inheritDoc}                
            </javadoc>
            <method name="projection" type="FieldVector<T>" line="721"/>
            <javadoc line="725">
                Find the orthogonal projection of this vector onto another vector.                
                <@param>
                    m v vector onto which {@code this} must be projected                    
                </@param>
                <@return>
                    n projection of {@code this} onto {@code v}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code v} is not the same size as{@code this}                    
                </@throws>
                <@throws>
                    s MathArithmeticException if {@code v} is the null vector.                    
                </@throws>
            </javadoc>
            <method name="projection" type="ArrayFieldVector<T>" line="733"/>
            <javadoc line="737">
                {@inheritDoc}                
            </javadoc>
            <method name="outerProduct" type="FieldMatrix<T>" line="738">
                <scope line="739"/>
                <scope line="741">
                    <declaration name="m" type="int" line="742"/>
                    <declaration name="n" type="int" line="743"/>
                    <declaration name="out" type="FieldMatrix&lt;T&gt;" line="744"/>
                    <scope line="745">
                        <scope line="746"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="754">
                Compute the outer product.                
                <@param>
                    m v vector with which outer product should be computed                    
                </@param>
                <@return>
                    n the matrix outer product between instance and v                    
                </@return>
            </javadoc>
            <method name="outerProduct" type="FieldMatrix<T>" line="759">
                <declaration name="m" type="int" line="760"/>
                <declaration name="n" type="int" line="761"/>
                <declaration name="out" type="FieldMatrix&lt;T&gt;" line="762"/>
                <scope line="763">
                    <scope line="764"/>
                </scope>
            </method>
            <javadoc line="771">
                {@inheritDoc}                
            </javadoc>
            <method name="getEntry" type="T" line="772"/>
            <javadoc line="776">
                {@inheritDoc}                
            </javadoc>
            <method name="getDimension" type="int" line="777"/>
            <javadoc line="781">
                {@inheritDoc}                
            </javadoc>
            <method name="append" type="FieldVector<T>" line="782">
                <scope line="783"/>
                <scope line="785"/>
            </method>
            <javadoc line="790">
                Construct a vector by appending a vector to this vector.                
                <@param>
                    m v vector to append to this one.                    
                </@param>
                <@return>
                    n a new vector                    
                </@return>
            </javadoc>
            <method name="append" type="ArrayFieldVector<T>" line="795"/>
            <javadoc line="799">
                {@inheritDoc}                
            </javadoc>
            <method name="append" type="FieldVector<T>" line="800">
                <declaration name="out" type="T[]" line="801"/>
            </method>
            <javadoc line="807">
                {@inheritDoc}                
            </javadoc>
            <method name="getSubVector" type="FieldVector<T>" line="809">
                <scope line="810"/>
                <declaration name="out" type="ArrayFieldVector&lt;T&gt;" line="813"/>
                <scope line="814"/>
                <scope line="816"/>
            </method>
            <javadoc line="823">
                {@inheritDoc}                
            </javadoc>
            <method name="setEntry" type="void" line="824">
                <scope line="825"/>
                <scope line="827"/>
            </method>
            <javadoc line="832">
                {@inheritDoc}                
            </javadoc>
            <method name="setSubVector" type="void" line="833">
                <scope line="834">
                    <scope line="835"/>
                    <scope line="837">
                        <scope line="838"/>
                    </scope>
                </scope>
                <scope line="842"/>
            </method>
            <javadoc line="848">
                Set a set of consecutive elements.                
                <@param>
                    m index index of first element to be set.                    
                </@param>
                <@param>
                    m v vector containing the values to set.                    
                </@param>
                <@throws>
                    s OutOfRangeException if the index is invalid.                    
                </@throws>
            </javadoc>
            <method name="set" type="void" line="855">
                <scope line="856"/>
                <scope line="858"/>
            </method>
            <javadoc line="864">
                {@inheritDoc}                
            </javadoc>
            <method name="set" type="void" line="865"/>
            <javadoc line="869">
                {@inheritDoc}                
            </javadoc>
            <method name="toArray" type="T[]" line="870"/>
            <javadoc line="874">
                Check if instance and specified vectors have the same dimension.                
                <@param>
                    m v vector to compare instance with                    
                </@param>
                <@exception>
                    n DimensionMismatchException if the vectors do not
                     * have the same dimensions                    
                </@exception>
            </javadoc>
            <method name="checkVectorDimensions" type="void" line="881"/>
            <javadoc line="885">
                Check if instance dimension is equal to some expected value.                
                <@param>
                    m n Expected dimension.                    
                </@param>
                <@throws>
                    s DimensionMismatchException if the dimension is not equal to the
                     * size of {@code this} vector.                    
                </@throws>
            </javadoc>
            <method name="checkVectorDimensions" type="void" line="893">
                <scope line="894"/>
            </method>
            <javadoc line="899">
                Test for the equality of two vectors.                
                <@param>
                    m other Object to test for equality.                    
                </@param>
                <@return>
                    n {@code true} if two vector objects are equal, {@code false}otherwise.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="907">
                <scope line="908"/>
                <scope line="911"/>
                <scope line="915">
                    <declaration name="rhs" type="FieldVector&lt;T&gt;" line="916"/>
                    <scope line="918"/>
                    <scope line="922">
                        <scope line="923"/>
                    </scope>
                </scope>
                <scope line="928"/>
            </method>
            <javadoc line="934">
                Get a hashCode for the real vector.
                 * &lt;p&gt;All NaN values have the same hash code.&lt;/p&gt;                
                <@return>
                    n a hash code value for this object                    
                </@return>
            </javadoc>
            <method name="hashCode" type="int" line="940">
                <declaration name="h" type="int" line="941"/>
                <scope line="942"/>
            </method>
            <javadoc line="948">
                Check if an index is valid.                
                <@param>
                    m index Index to check.                    
                </@param>
                <@exception>
                    n OutOfRangeException if the index is not valid.                    
                </@exception>
            </javadoc>
            <method name="checkIndex" type="void" line="954">
                <scope line="955"/>
            </method>
        </class>
    </source>