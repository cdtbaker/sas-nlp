<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.vector">
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.analysis.MultivariateVectorFunction"/>
        <import package="org.apache.commons.math3.optim.OptimizationData"/>
        <import package="org.apache.commons.math3.optim.BaseMultivariateOptimizer"/>
        <import package="org.apache.commons.math3.optim.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optim.PointVectorValuePair"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <class name="MultivariateVectorOptimizer" extends="BaseMultivariateOptimizer<PointVectorValuePair>" line="29">
            <javadoc line="29">
                Base class for a multivariate vector function optimizer.                
                <@version>
                    n $Id: MultivariateVectorOptimizer.java 1443444 2013-02-07 12:41:36Z erans $                    
                </@version>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <declaration name="target" type="double[]" line="37"/>
            <javadoc line="37">
                Target values for the model function at optimum.                
            </javadoc>
            <declaration name="weightMatrix" type="RealMatrix" line="39"/>
            <javadoc line="39">
                Weight matrix.                
            </javadoc>
            <declaration name="model" type="MultivariateVectorFunction" line="41"/>
            <javadoc line="41">
                Model function.                
            </javadoc>
            <javadoc line="44">
                @param checker Convergence checker.                
            </javadoc>
            <method name="MultivariateVectorOptimizer" type="constructor" line="47"/>
            <javadoc line="51">
                Computes the objective function value.
                 * This method &lt;em&gt;must&lt;/em&gt; be called by subclasses to enforce the
                 * evaluation counter limit.                
                <@param>
                    m params Point at which the objective function must be evaluated.                    
                </@param>
                <@return>
                    n the objective function value at the specified point.                    
                </@return>
                <@throws>
                    s TooManyEvaluationsException if the maximal number of evaluations
                     * (of the model vector function) is exceeded.                    
                </@throws>
            </javadoc>
            <method name="computeObjectiveValue" type="double[]" line="61"/>
            <javadoc line="66">
                {@inheritDoc}                
                <@param>
                    m optData Optimization data. In addition to those documented in{@link BaseMultivariateOptimizer#parseOptimizationData(OptimizationData[])BaseMultivariateOptimizer}, this method will register the following data:
                     * <ul>
                     * <li>{@link Target}</li>
                     * <li>{@link Weight}</li>
                     * <li>{@link ModelFunction}</li>
                     * </ul>                    
                </@param>
                <@return>
                    n {@inheritDoc}                    
                </@return>
                <@throws>
                    s TooManyEvaluationsException if the maximal number of
                     * evaluations is exceeded.                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if the initial guess, target, and weight
                     * arguments have inconsistent dimensions.                    
                </@throws>
            </javadoc>
            <method name="optimize" type="PointVectorValuePair" line="85">
                <comment line="86">
                    Set up base class and perform computation.                    
                </comment>
            </method>
            <javadoc line="90">
                Gets the weight matrix of the observations.                
                <@return>
                    n the weight matrix.                    
                </@return>
            </javadoc>
            <method name="getWeight" type="RealMatrix" line="95"/>
            <javadoc line="98">
                Gets the observed values to be matched by the objective vector
                 * function.                
                <@return>
                    n the target values.                    
                </@return>
            </javadoc>
            <method name="getTarget" type="double[]" line="104"/>
            <javadoc line="108">
                Gets the number of observed values.                
                <@return>
                    n the length of the target vector.                    
                </@return>
            </javadoc>
            <method name="getTargetSize" type="int" line="113"/>
            <javadoc line="117">
                Scans the list of (required and optional) optimization data that
                 * characterize the problem.                
                <@param>
                    m optData Optimization data. The following data will be looked for:
                     * <ul>
                     * <li>{@link Target}</li>
                     * <li>{@link Weight}</li>
                     * <li>{@link ModelFunction}</li>
                     * </ul>                    
                </@param>
            </javadoc>
            <method name="parseOptimizationData" type="void" line="129">
                <comment line="130">
                    Allow base class to register its own data.                    
                </comment>
                <comment line="130">
                    The existing values (as set by the previous call) are reused if                    
                </comment>
                <comment line="130">
                    not provided in the argument list.                    
                </comment>
                <comment line="130">
                    Check input consistency.                    
                </comment>
                <scope line="135">
                    <scope line="136"/>
                    <scope line="140"/>
                    <scope line="144"/>
                </scope>
            </method>
            <javadoc line="154">
                Check parameters consistency.                
                <@throws>
                    s DimensionMismatchException if {@link #target} and{@link #weightMatrix} have inconsistent dimensions.                    
                </@throws>
            </javadoc>
            <method name="checkParameters" type="void" line="160">
                <scope line="161"/>
            </method>
        </class>
    </source>