<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar">
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.optim.BaseMultivariateOptimizer"/>
        <import package="org.apache.commons.math3.optim.OptimizationData"/>
        <import package="org.apache.commons.math3.optim.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <class name="MultivariateOptimizer" extends="BaseMultivariateOptimizer<PointValuePair>" line="26">
            <javadoc line="26">
                Base class for a multivariate scalar function optimizer.                
                <@version>
                    n $Id: MultivariateOptimizer.java 1443444 2013-02-07 12:41:36Z erans $                    
                </@version>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <declaration name="function" type="MultivariateFunction" line="34"/>
            <javadoc line="34">
                Objective function.                
            </javadoc>
            <declaration name="goal" type="GoalType" line="36"/>
            <javadoc line="36">
                Type of optimization.                
            </javadoc>
            <javadoc line="39">
                @param checker Convergence checker.                
            </javadoc>
            <method name="MultivariateOptimizer" type="constructor" line="42"/>
            <javadoc line="46">
                {@inheritDoc}                
                <@param>
                    m optData Optimization data. In addition to those documented in{@link BaseMultivariateOptimizer#parseOptimizationData(OptimizationData[])BaseMultivariateOptimizer}, this method will register the following data:
                     * <ul>
                     * <li>{@link ObjectiveFunction}</li>
                     * <li>{@link GoalType}</li>
                     * </ul>                    
                </@param>
                <@return>
                    n {@inheritDoc}                    
                </@return>
                <@throws>
                    s TooManyEvaluationsException if the maximal number of
                     * evaluations is exceeded.                    
                </@throws>
            </javadoc>
            <method name="optimize" type="PointValuePair" line="62">
                <comment line="63">
                    Set up base class and perform computation.                    
                </comment>
            </method>
            <javadoc line="67">
                Scans the list of (required and optional) optimization data that
                 * characterize the problem.                
                <@param>
                    m optData Optimization data.
                     * The following data will be looked for:
                     * <ul>
                     * <li>{@link ObjectiveFunction}</li>
                     * <li>{@link GoalType}</li>
                     * </ul>                    
                </@param>
            </javadoc>
            <method name="parseOptimizationData" type="void" line="79">
                <comment line="80">
                    Allow base class to register its own data.                    
                </comment>
                <comment line="80">
                    The existing values (as set by the previous call) are reused if                    
                </comment>
                <comment line="80">
                    not provided in the argument list.                    
                </comment>
                <scope line="85">
                    <scope line="86"/>
                    <scope line="90"/>
                </scope>
            </method>
            <javadoc line="97">
                @return the optimization type.                
            </javadoc>
            <method name="getGoalType" type="GoalType" line="100"/>
            <javadoc line="104">
                Computes the objective function value.
                 * This method &lt;em&gt;must&lt;/em&gt; be called by subclasses to enforce the
                 * evaluation counter limit.                
                <@param>
                    m params Point at which the objective function must be evaluated.                    
                </@param>
                <@return>
                    n the objective function value at the specified point.                    
                </@return>
                <@throws>
                    s TooManyEvaluationsException if the maximal number of
                     * evaluations is exceeded.                    
                </@throws>
            </javadoc>
            <method name="computeObjectiveValue" type="double" line="114"/>
        </class>
    </source>