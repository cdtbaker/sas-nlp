<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.transform">
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.complex.Complex"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="TransformUtils" line="26">
            <javadoc line="26">
                Useful functions for the implementation of various transforms.                
                <@version>
                    n $Id: TransformUtils.java 1385310 2012-09-16 16:32:10Z tn $                    
                </@version>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="POWERS_OF_TWO" type="int[]" line="33"/>
            <javadoc line="33">
                Table of the powers of 2 to facilitate binary search lookup.                
                <@see>
                    e #exactLog2(int)                    
                </@see>
            </javadoc>
            <javadoc line="47">
                Private constructor.                
            </javadoc>
            <method name="TransformUtils" type="constructor" line="48"/>
            <javadoc line="52">
                Multiply every component in the given real array by the
                 * given real number. The change is made in place.                
                <@param>
                    m f the real array to be scaled                    
                </@param>
                <@param>
                    m d the real scaling coefficient                    
                </@param>
                <@return>
                    n a reference to the scaled array                    
                </@return>
            </javadoc>
            <method name="scaleArray" type="double[]" line="60">
                <scope line="62"/>
            </method>
            <javadoc line="68">
                Multiply every component in the given complex array by the
                 * given real number. The change is made in place.                
                <@param>
                    m f the complex array to be scaled                    
                </@param>
                <@param>
                    m d the real scaling coefficient                    
                </@param>
                <@return>
                    n a reference to the scaled array                    
                </@return>
            </javadoc>
            <method name="scaleArray" type="Complex[]" line="76">
                <scope line="78"/>
            </method>
            <javadoc line="85">
                Builds a new two dimensional array of {@code double} filled with the real
                 * and imaginary parts of the specified {@link Complex} numbers. In the
                 * returned array {@code dataRI}, the data is laid out as follows
                 * &lt;ul&gt;
                 * &lt;li&gt;{@code dataRI[0][i] = dataC[i].getReal()},&lt;/li&gt;
                 * &lt;li&gt;{@code dataRI[1][i] = dataC[i].getImaginary()}.&lt;/li&gt;
                 * &lt;/ul&gt;                
                <@param>
                    m dataC the array of {@link Complex} data to be transformed                    
                </@param>
                <@return>
                    n a two dimensional array filled with the real and imaginary parts
                     * of the specified complex input                    
                </@return>
            </javadoc>
            <method name="createRealImaginaryArray" type="double[][]" line="98">
                <declaration name="dataRI" type="double[][]" line="99"/>
                <declaration name="dataR" type="double[]" line="100"/>
                <declaration name="dataI" type="double[]" line="101"/>
                <scope line="102">
                    <declaration name="c" type="Complex" line="103"/>
                </scope>
            </method>
            <javadoc line="110">
                Builds a new array of {@link Complex} from the specified two dimensional
                 * array of real and imaginary parts. In the returned array {@code dataC},
                 * the data is laid out as follows
                 * &lt;ul&gt;
                 * &lt;li&gt;{@code dataC[i].getReal() = dataRI[0][i]},&lt;/li&gt;
                 * &lt;li&gt;{@code dataC[i].getImaginary() = dataRI[1][i]}.&lt;/li&gt;
                 * &lt;/ul&gt;                
                <@param>
                    m dataRI the array of real and imaginary parts to be transformed                    
                </@param>
                <@return>
                    n an array of {@link Complex} with specified real and imaginary parts.                    
                </@return>
                <@throws>
                    s DimensionMismatchException if the number of rows of the specified
                     * array is not two, or the array is not rectangular                    
                </@throws>
            </javadoc>
            <method name="createComplexArray" type="Complex[]" line="125">
                <scope line="127"/>
                <declaration name="dataR" type="double[]" line="130"/>
                <declaration name="dataI" type="double[]" line="131"/>
                <scope line="132"/>
                <declaration name="n" type="int" line="136"/>
                <declaration name="c" type="Complex[]" line="137"/>
                <scope line="138"/>
            </method>
            <javadoc line="145">
                Returns the base-2 logarithm of the specified {@code int}. Throws an
                 * exception if {@code n} is not a power of two.                
                <@param>
                    m n the {@code int} whose base-2 logarithm is to be evaluated                    
                </@param>
                <@return>
                    n the base-2 logarithm of {@code n}                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if {@code n} is not a power of two                    
                </@throws>
            </javadoc>
            <method name="exactLog2" type="int" line="154">
                <declaration name="index" type="int" line="156"/>
                <scope line="157"/>
            </method>
        </class>
    </source>