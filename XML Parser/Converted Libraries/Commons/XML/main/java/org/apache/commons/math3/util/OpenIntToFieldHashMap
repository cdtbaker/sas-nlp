<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.lang.reflect.Array"/>
        <import package="java.util.ConcurrentModificationException"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <class name="OpenIntToFieldHashMap" line="29">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="Serializable"/>
            <javadoc line="29">
                Open addressed map from int to FieldElement.
                  &lt;p&gt;This class provides a dedicated map from integers to FieldElements with a
                  much smaller memory overhead than standard &lt;code&gt;java.util.Map&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;This class is not synchronized. The specialized iterators returned by{@link #iterator()} are fail-fast: they throw a
                  &lt;code&gt;ConcurrentModificationException&lt;/code&gt; when they detect the map has been
                  modified during iteration.&lt;/p&gt;                
                <@param>
                    m<T>
                       the type of the field elements                    
                </@param>
                <@version>
                    n $Id: OpenIntToFieldHashMap.java 1421448 2012-12-13 19:45:57Z tn $                    
                </@version>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <declaration name="FREE" type="byte" line="43"/>
            <javadoc line="43">
                Status indicator for free table entries.                
            </javadoc>
            <declaration name="FULL" type="byte" line="46"/>
            <javadoc line="46">
                Status indicator for full table entries.                
            </javadoc>
            <declaration name="REMOVED" type="byte" line="49"/>
            <javadoc line="49">
                Status indicator for removed table entries.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="52"/>
            <javadoc line="52">
                Serializable version identifier.                
            </javadoc>
            <declaration name="LOAD_FACTOR" type="float" line="55"/>
            <javadoc line="55">
                Load factor for the map.                
            </javadoc>
            <declaration name="DEFAULT_EXPECTED_SIZE" type="int" line="58"/>
            <javadoc line="58">
                Default starting size.
                  &lt;p&gt;This must be a power of two for bit mask to work properly. &lt;/p&gt;                
            </javadoc>
            <declaration name="RESIZE_MULTIPLIER" type="int" line="63"/>
            <javadoc line="63">
                Multiplier for size growth when map fills up.
                  &lt;p&gt;This must be a power of two for bit mask to work properly. &lt;/p&gt;                
            </javadoc>
            <declaration name="PERTURB_SHIFT" type="int" line="68"/>
            <javadoc line="68">
                Number of bits to perturb the index when probing for collision resolution.                
            </javadoc>
            <declaration name="field" type="Field&lt;T&gt;" line="71"/>
            <javadoc line="71">
                Field to which the elements belong.                
            </javadoc>
            <declaration name="keys" type="int[]" line="74"/>
            <javadoc line="74">
                Keys table.                
            </javadoc>
            <declaration name="values" type="T[]" line="77"/>
            <javadoc line="77">
                Values table.                
            </javadoc>
            <declaration name="states" type="byte[]" line="80"/>
            <javadoc line="80">
                States table.                
            </javadoc>
            <declaration name="missingEntries" type="T" line="83"/>
            <javadoc line="83">
                Return value for missing entries.                
            </javadoc>
            <declaration name="size" type="int" line="86"/>
            <javadoc line="86">
                Current size of the map.                
            </javadoc>
            <declaration name="mask" type="int" line="89"/>
            <javadoc line="89">
                Bit mask for hash values.                
            </javadoc>
            <declaration name="count" type="int" line="92"/>
            <javadoc line="92">
                Modifications count.                
            </javadoc>
            <javadoc line="95">
                Build an empty map with default size and using zero for missing entries.                
                <@param>
                    m field field to which the elements belong                    
                </@param>
            </javadoc>
            <method name="OpenIntToFieldHashMap" type="constructor" line="99">
                <params>
                    <param name="field" type="Field<T>"/>
                </params>
            </method>
            <javadoc line="103">
                Build an empty map with default size                
                <@param>
                    m field field to which the elements belong                    
                </@param>
                <@param>
                    m missingEntries value to return when a missing entry is fetched                    
                </@param>
            </javadoc>
            <method name="OpenIntToFieldHashMap" type="constructor" line="108">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="missingEntries" type="T"/>
                </params>
            </method>
            <javadoc line="112">
                Build an empty map with specified size and using zero for missing entries.                
                <@param>
                    m field field to which the elements belong                    
                </@param>
                <@param>
                    m expectedSize expected number of elements in the map                    
                </@param>
            </javadoc>
            <method name="OpenIntToFieldHashMap" type="constructor" line="117">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="expectedSize" type="int"/>
                </params>
            </method>
            <javadoc line="121">
                Build an empty map with specified size.                
                <@param>
                    m field field to which the elements belong                    
                </@param>
                <@param>
                    m expectedSize expected number of elements in the map                    
                </@param>
                <@param>
                    m missingEntries value to return when a missing entry is fetched                    
                </@param>
            </javadoc>
            <method name="OpenIntToFieldHashMap" type="constructor" line="128">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="expectedSize" type="int"/>
                    <param name="missingEntries" type="T"/>
                </params>
                <declaration name="capacity" type="int" line="130"/>
            </method>
            <javadoc line="138">
                Copy constructor.                
                <@param>
                    m source map to copy                    
                </@param>
            </javadoc>
            <method name="OpenIntToFieldHashMap" type="constructor" line="142">
                <params>
                    <param name="source" type="OpenIntToFieldHashMap<T>"/>
                </params>
                <declaration name="length" type="int" line="144"/>
            </method>
            <javadoc line="157">
                Compute the capacity needed for a given size.                
                <@param>
                    m expectedSize expected size of the map                    
                </@param>
                <@return>
                    n capacity to use for the specified size                    
                </@return>
            </javadoc>
            <method name="computeCapacity" type="int" line="162">
                <params>
                    <param name="expectedSize" type="int"/>
                </params>
                <scope line="163"/>
                <declaration name="capacity" type="int" line="166"/>
                <declaration name="powerOfTwo" type="int" line="167"/>
                <scope line="168"/>
            </method>
            <javadoc line="174">
                Find the smallest power of two greater than the input value                
                <@param>
                    m i input value                    
                </@param>
                <@return>
                    n smallest power of two greater than the input value                    
                </@return>
            </javadoc>
            <method name="nextPowerOfTwo" type="int" line="179">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="183">
                Get the stored value associated with the given key                
                <@param>
                    m key key associated with the data                    
                </@param>
                <@return>
                    n data associated with the key                    
                </@return>
            </javadoc>
            <method name="get" type="T" line="188">
                <params>
                    <param name="key" type="int"/>
                </params>
                <declaration name="hash" type="int" line="190"/>
                <declaration name="index" type="int" line="191"/>
                <scope line="192"/>
                <scope line="196"/>
                <declaration name="j" type="int" line="200"/>
                <scope line="201">
                    <scope line="204"/>
                </scope>
            </method>
            <javadoc line="213">
                Check if a value is associated with a key.                
                <@param>
                    m key key to check                    
                </@param>
                <@return>
                    n true if a value is associated with key                    
                </@return>
            </javadoc>
            <method name="containsKey" type="boolean" line="218">
                <params>
                    <param name="key" type="int"/>
                </params>
                <declaration name="hash" type="int" line="220"/>
                <declaration name="index" type="int" line="221"/>
                <scope line="222"/>
                <scope line="226"/>
                <declaration name="j" type="int" line="230"/>
                <scope line="231">
                    <scope line="234"/>
                </scope>
            </method>
            <javadoc line="243">
                Get an iterator over map elements.
                  &lt;p&gt;The specialized iterators returned are fail-fast: they throw a
                  &lt;code&gt;ConcurrentModificationException&lt;/code&gt; when they detect the map
                  has been modified during iteration.&lt;/p&gt;                
                <@return>
                    n iterator over the map elements                    
                </@return>
            </javadoc>
            <method name="iterator" type="Iterator" line="250"/>
            <javadoc line="254">
                Perturb the hash for starting probing.                
                <@param>
                    m hash initial hash                    
                </@param>
                <@return>
                    n perturbed hash                    
                </@return>
            </javadoc>
            <method name="perturb" type="int" line="259">
                <params>
                    <param name="hash" type="int"/>
                </params>
            </method>
            <javadoc line="263">
                Find the index at which a key should be inserted                
                <@param>
                    m key key to lookup                    
                </@param>
                <@return>
                    n index at which key should be inserted                    
                </@return>
            </javadoc>
            <method name="findInsertionIndex" type="int" line="268">
                <params>
                    <param name="key" type="int"/>
                </params>
            </method>
            <javadoc line="272">
                Find the index at which a key should be inserted                
                <@param>
                    m keys keys table                    
                </@param>
                <@param>
                    m states states table                    
                </@param>
                <@param>
                    m key key to lookup                    
                </@param>
                <@param>
                    m mask bit mask for hash values                    
                </@param>
                <@return>
                    n index at which key should be inserted                    
                </@return>
            </javadoc>
            <method name="findInsertionIndex" type="int" line="281">
                <params>
                    <param name="keys" type="int[]"/>
                    <param name="states" type="byte[]"/>
                    <param name="key" type="int"/>
                    <param name="mask" type="int"/>
                </params>
                <declaration name="hash" type="int" line="282"/>
                <declaration name="index" type="int" line="283"/>
                <scope line="284"/>
                <scope line="286"/>
                <declaration name="perturb" type="int" line="290"/>
                <declaration name="j" type="int" line="291"/>
                <scope line="292">
                    <scope line="293">
                        <scope line="298"/>
                    </scope>
                </scope>
                <scope line="304"/>
                <scope line="306"/>
                <declaration name="firstRemoved" type="int" line="312"/>
                <scope line="313">
                    <scope line="317"/>
                    <scope line="319"/>
                </scope>
            </method>
            <javadoc line="329">
                Compute next probe for collision resolution                
                <@param>
                    m perturb perturbed hash                    
                </@param>
                <@param>
                    m j previous probe                    
                </@param>
                <@return>
                    n next probe                    
                </@return>
            </javadoc>
            <method name="probe" type="int" line="335">
                <params>
                    <param name="perturb" type="int"/>
                    <param name="j" type="int"/>
                </params>
            </method>
            <javadoc line="339">
                Change the index sign                
                <@param>
                    m index initial index                    
                </@param>
                <@return>
                    n changed index                    
                </@return>
            </javadoc>
            <method name="changeIndexSign" type="int" line="344">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="348">
                Get the number of elements stored in the map.                
                <@return>
                    n number of elements stored in the map                    
                </@return>
            </javadoc>
            <method name="size" type="int" line="352"/>
            <javadoc line="357">
                Remove the value associated with a key.                
                <@param>
                    m key key to which the value is associated                    
                </@param>
                <@return>
                    n removed value                    
                </@return>
            </javadoc>
            <method name="remove" type="T" line="362">
                <params>
                    <param name="key" type="int"/>
                </params>
                <declaration name="hash" type="int" line="364"/>
                <declaration name="index" type="int" line="365"/>
                <scope line="366"/>
                <scope line="370"/>
                <declaration name="j" type="int" line="374"/>
                <scope line="375">
                    <scope line="378"/>
                </scope>
            </method>
            <javadoc line="387">
                Check if the tables contain an element associated with specified key
                  at specified index.                
                <@param>
                    m key key to check                    
                </@param>
                <@param>
                    m index index to check                    
                </@param>
                <@return>
                    n true if an element is associated with key at index                    
                </@return>
            </javadoc>
            <method name="containsKey" type="boolean" line="394">
                <params>
                    <param name="key" type="int"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="398">
                Remove an element at specified index.                
                <@param>
                    m index index of the element to remove                    
                </@param>
                <@return>
                    n removed value                    
                </@return>
            </javadoc>
            <method name="doRemove" type="T" line="403">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="previous" type="T" line="406"/>
            </method>
            <javadoc line="413">
                Put a value associated with a key in the map.                
                <@param>
                    m key key to which value is associated                    
                </@param>
                <@param>
                    m value value to put in the map                    
                </@param>
                <@return>
                    n previous value associated with the key                    
                </@return>
            </javadoc>
            <method name="put" type="T" line="419">
                <params>
                    <param name="key" type="int"/>
                    <param name="value" type="T"/>
                </params>
                <declaration name="index" type="int" line="420"/>
                <declaration name="previous" type="T" line="421"/>
                <declaration name="newMapping" type="boolean" line="422"/>
                <scope line="423"/>
                <scope line="431">
                    <scope line="433"/>
                </scope>
            </method>
            <javadoc line="442">
                Grow the tables.                
            </javadoc>
            <method name="growTable" type="void" line="445">
                <declaration name="oldLength" type="int" line="447"/>
                <declaration name="oldKeys" type="int[]" line="448"/>
                <declaration name="oldValues" type="T[]" line="449"/>
                <declaration name="oldStates" type="byte[]" line="450"/>
                <declaration name="newLength" type="int" line="452"/>
                <declaration name="newKeys" type="int[]" line="453"/>
                <declaration name="newValues" type="T[]" line="454"/>
                <declaration name="newStates" type="byte[]" line="455"/>
                <declaration name="newMask" type="int" line="456"/>
                <scope line="457">
                    <scope line="458">
                        <declaration name="key" type="int" line="459"/>
                        <declaration name="index" type="int" line="460"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="474">
                Check if tables should grow due to increased size.                
                <@return>
                    n true if  tables should grow                    
                </@return>
            </javadoc>
            <method name="shouldGrowTable" type="boolean" line="478"/>
            <javadoc line="482">
                Compute the hash value of a key                
                <@param>
                    m key key to hash                    
                </@param>
                <@return>
                    n hash value of the key                    
                </@return>
            </javadoc>
            <method name="hashOf" type="int" line="487">
                <params>
                    <param name="key" type="int"/>
                </params>
                <declaration name="h" type="int" line="488"/>
            </method>
            <class name="Iterator" line="493">
                <comment line="610">
                    uppressWarnings(&quot;unchecked&quot;) // field is of type T                    
                </comment>
                <javadoc line="493">
                    Iterator class for the map.                    
                </javadoc>
                <declaration name="referenceCount" type="int" line="496"/>
                <javadoc line="496">
                    Reference modification count.                    
                </javadoc>
                <declaration name="current" type="int" line="499"/>
                <javadoc line="499">
                    Index of current element.                    
                </javadoc>
                <declaration name="next" type="int" line="502"/>
                <javadoc line="502">
                    Index of next element.                    
                </javadoc>
                <javadoc line="505">
                    Simple constructor.                    
                </javadoc>
                <method name="Iterator" type="constructor" line="508">
                    <comment line="509">
                        preserve the modification count of the map to detect concurrent modifications later                        
                    </comment>
                    <comment line="509">
                        initialize current index                        
                    </comment>
                    <scope line="515"/>
                    <scope line="517"/>
                </method>
                <javadoc line="523">
                    Check if there is a next element in the map.                    
                    <@return>
                        n true if there is a next element                        
                    </@return>
                </javadoc>
                <method name="hasNext" type="boolean" line="527"/>
                <javadoc line="531">
                    Get the key of current entry.                    
                    <@return>
                        n key of current entry                        
                    </@return>
                    <@exception>
                        n ConcurrentModificationException if the map is modified during iteration                        
                    </@exception>
                    <@exception>
                        n NoSuchElementException if there is no element left in the map                        
                    </@exception>
                </javadoc>
                <method name="key" type="int" line="538">
                    <scope line="539"/>
                    <scope line="542"/>
                </method>
                <javadoc line="548">
                    Get the value of current entry.                    
                    <@return>
                        n value of current entry                        
                    </@return>
                    <@exception>
                        n ConcurrentModificationException if the map is modified during iteration                        
                    </@exception>
                    <@exception>
                        n NoSuchElementException if there is no element left in the map                        
                    </@exception>
                </javadoc>
                <method name="value" type="T" line="555">
                    <scope line="556"/>
                    <scope line="559"/>
                </method>
                <javadoc line="565">
                    Advance iterator one step further.                    
                    <@exception>
                        n ConcurrentModificationException if the map is modified during iteration                        
                    </@exception>
                    <@exception>
                        n NoSuchElementException if there is no element left in the map                        
                    </@exception>
                </javadoc>
                <method name="advance" type="void" line="571">
                    <comment line="572">
                        advance on step                        
                    </comment>
                    <comment line="572">
                        prepare next step                        
                    </comment>
                    <scope line="573"/>
                    <scope line="581">
                        <scope line="582"/>
                    </scope>
                    <scope line="585">
                        <scope line="587"/>
                    </scope>
                </method>
            </class>
            <javadoc line="596">
                Read a serialized object.                
                <@param>
                    m stream input stream                    
                </@param>
                <@throws>
                    s IOException if object cannot be read                    
                </@throws>
                <@throws>
                    s ClassNotFoundException if the class corresponding
                      to the serialized object cannot be found                    
                </@throws>
            </javadoc>
            <method name="readObject" type="void" line="604">
                <params>
                    <param name="stream" type="ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="609">
                Build an array of elements.                
                <@param>
                    m length size of the array to build                    
                </@param>
                <@return>
                    n a new array                    
                </@return>
            </javadoc>
            <method name="buildArray" type="T[]" line="614">
                <params>
                    <param name="length" type="int"/>
                </params>
            </method>
        </class>
    </source>