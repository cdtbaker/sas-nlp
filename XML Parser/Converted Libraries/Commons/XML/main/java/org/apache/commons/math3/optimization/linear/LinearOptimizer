<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.linear">
        <import package="java.util.Collection"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <interface name="LinearOptimizer">
            <javadoc line="26">
                This interface represents an optimization algorithm for linear problems.
                 * &lt;p&gt;Optimization algorithms find the input point set that either {@link GoalTypemaximize or minimize} an objective function. In the linear case the form of
                 * the function is restricted to
                 * &lt;pre&gt;
                 * c&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... c&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; = v
                 * &lt;/pre&gt;
                 * and there may be linear constraints too, of one of the forms:
                 * &lt;ul&gt;
                 * &lt;li&gt;c&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... c&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; = v&lt;/li&gt;
                 * &lt;li&gt;c&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... c&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; &amp;lt;= v&lt;/li&gt;
                 * &lt;li&gt;c&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... c&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; &gt;= v&lt;/li&gt;
                 * &lt;li&gt;l&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... l&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + l&lt;sub&gt;cst&lt;/sub&gt; =
                 * r&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... r&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + r&lt;sub&gt;cst&lt;/sub&gt;&lt;/li&gt;
                 * &lt;li&gt;l&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... l&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + l&lt;sub&gt;cst&lt;/sub&gt; &amp;lt;=
                 * r&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... r&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + r&lt;sub&gt;cst&lt;/sub&gt;&lt;/li&gt;
                 * &lt;li&gt;l&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... l&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + l&lt;sub&gt;cst&lt;/sub&gt; &gt;=
                 * r&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... r&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + r&lt;sub&gt;cst&lt;/sub&gt;&lt;/li&gt;
                 * &lt;/ul&gt;
                 * where the c&lt;sub&gt;i&lt;/sub&gt;, l&lt;sub&gt;i&lt;/sub&gt; or r&lt;sub&gt;i&lt;/sub&gt; are the coefficients of
                 * the constraints, the x&lt;sub&gt;i&lt;/sub&gt; are the coordinates of the current point and
                 * v is the value of the constraint.
                 * &lt;/p&gt;                
                <@version>
                    n $Id: LinearOptimizer.java 1422230 2012-12-15 12:11:13Z erans $                    
                </@version>
                <@deprecated>
                    d As of 3.1 (to be removed in 4.0).                    
                </@deprecated>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="setMaxIterations" type="void" line="57"/>
            <javadoc line="57">
                Set the maximal number of iterations of the algorithm.                
                <@param>
                    m maxIterations maximal number of function calls                    
                </@param>
            </javadoc>
            <method name="getMaxIterations" type="int" line="63"/>
            <javadoc line="63">
                Get the maximal number of iterations of the algorithm.                
                <@return>
                    n maximal number of iterations                    
                </@return>
            </javadoc>
            <method name="getIterations" type="int" line="69"/>
            <javadoc line="69">
                Get the number of iterations realized by the algorithm.
                 * &lt;p&gt;
                 * The number of evaluations corresponds to the last call to the{@link #optimize(LinearObjectiveFunction,Collection,GoalType,boolean) optimize}method. It is 0 if the method has not been called yet.
                 * &lt;/p&gt;                
                <@return>
                    n number of iterations                    
                </@return>
            </javadoc>
            <method name="optimize" type="PointValuePair" line="80"/>
            <javadoc line="80">
                Optimizes an objective function.                
                <@param>
                    m f linear objective function                    
                </@param>
                <@param>
                    m constraints linear constraints                    
                </@param>
                <@param>
                    m goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}                    
                </@param>
                <@param>
                    m restrictToNonNegative whether to restrict the variables to non-negative values                    
                </@param>
                <@return>
                    n point/value pair giving the optimal value for objective function                    
                </@return>
                <@exception>
                    n MathIllegalStateException if no solution fulfilling the constraints
                     * can be found in the allowed number of iterations                    
                </@exception>
            </javadoc>
        </interface>
    </source>