<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv">
        <import package="java.util.Comparator"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <class name="MultiDirectionalSimplex" line="24">
            <extends class="AbstractSimplex"/>
            <javadoc line="24">
                This class implements the multi-directional direct search method.                
                <@version>
                    n $Id: MultiDirectionalSimplex.java 1435539 2013-01-19 13:27:24Z tn $                    
                </@version>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="DEFAULT_KHI" type="double" line="31"/>
            <javadoc line="31">
                Default value for {@link #khi}: {@value}.                
            </javadoc>
            <declaration name="DEFAULT_GAMMA" type="double" line="33"/>
            <javadoc line="33">
                Default value for {@link #gamma}: {@value}.                
            </javadoc>
            <declaration name="khi" type="double" line="35"/>
            <javadoc line="35">
                Expansion coefficient.                
            </javadoc>
            <declaration name="gamma" type="double" line="37"/>
            <javadoc line="37">
                Contraction coefficient.                
            </javadoc>
            <javadoc line="40">
                Build a multi-directional simplex with default coefficients.
                  The default values are 2.0 for khi and 0.5 for gamma.                
                <@param>
                    m n Dimension of the simplex.                    
                </@param>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="46">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="50">
                Build a multi-directional simplex with default coefficients.
                  The default values are 2.0 for khi and 0.5 for gamma.                
                <@param>
                    m n Dimension of the simplex.                    
                </@param>
                <@param>
                    m sideLength Length of the sides of the default (hypercube)
                      simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </@param>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="58">
                <params>
                    <param name="n" type="int"/>
                    <param name="sideLength" type="double"/>
                </params>
            </method>
            <javadoc line="62">
                Build a multi-directional simplex with specified coefficients.                
                <@param>
                    m n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </@param>
                <@param>
                    m khi Expansion coefficient.                    
                </@param>
                <@param>
                    m gamma Contraction coefficient.                    
                </@param>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="71">
                <params>
                    <param name="n" type="int"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                </params>
            </method>
            <javadoc line="75">
                Build a multi-directional simplex with specified coefficients.                
                <@param>
                    m n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </@param>
                <@param>
                    m sideLength Length of the sides of the default (hypercube)
                      simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </@param>
                <@param>
                    m khi Expansion coefficient.                    
                </@param>
                <@param>
                    m gamma Contraction coefficient.                    
                </@param>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="86">
                <params>
                    <param name="n" type="int"/>
                    <param name="sideLength" type="double"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                </params>
            </method>
            <javadoc line="93">
                Build a multi-directional simplex with default coefficients.
                  The default values are 2.0 for khi and 0.5 for gamma.                
                <@param>
                    m steps Steps along the canonical axes representing box edges.
                      They may be negative but not zero. See                    
                </@param>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="100">
                <params>
                    <param name="steps" type="double[]"/>
                </params>
            </method>
            <javadoc line="104">
                Build a multi-directional simplex with specified coefficients.                
                <@param>
                    m steps Steps along the canonical axes representing box edges.
                      They may be negative but not zero. See{@link AbstractSimplex#AbstractSimplex(double[])}.                    
                </@param>
                <@param>
                    m khi Expansion coefficient.                    
                </@param>
                <@param>
                    m gamma Contraction coefficient.                    
                </@param>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="114">
                <params>
                    <param name="steps" type="double[]"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                </params>
            </method>
            <javadoc line="121">
                Build a multi-directional simplex with default coefficients.
                  The default values are 2.0 for khi and 0.5 for gamma.                
                <@param>
                    m referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.                    
                </@param>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="128">
                <params>
                    <param name="referenceSimplex" type="double[][]"/>
                </params>
            </method>
            <javadoc line="132">
                Build a multi-directional simplex with specified coefficients.                
                <@param>
                    m referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.                    
                </@param>
                <@param>
                    m khi Expansion coefficient.                    
                </@param>
                <@param>
                    m gamma Contraction coefficient.                    
                </@param>
                <@throws>
                    s org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif the reference simplex does not contain at least one point.                    
                </@throws>
                <@throws>
                    s org.apache.commons.math3.exception.DimensionMismatchExceptionif there is a dimension mismatch in the reference simplex.                    
                </@throws>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="145">
                <params>
                    <param name="referenceSimplex" type="double[][]"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                </params>
            </method>
            <javadoc line="152">
                {@inheritDoc}                
            </javadoc>
            <method name="iterate" type="void" line="155">
                <params>
                    <param name="evaluationFunction" type="MultivariateFunction"/>
                    <param name="comparator" type="Comparator<PointValuePair>"/>
                </params>
                <comment line="156">
                    Save the original simplex.                    
                </comment>
                <comment line="156">
                    Perform a reflection step.                    
                </comment>
                <comment line="156">
                    Compute the contracted simplex.                    
                </comment>
                <declaration name="original" type="PointValuePair[]" line="157"/>
                <declaration name="best" type="PointValuePair" line="158"/>
                <declaration name="reflected" type="PointValuePair" line="161"/>
                <scope line="163">
                    <declaration name="reflectedSimplex" type="PointValuePair[]" line="165"/>
                    <declaration name="expanded" type="PointValuePair" line="166"/>
                    <scope line="168"/>
                </scope>
            </method>
            <javadoc line="181">
                Compute and evaluate a new simplex.                
                <@param>
                    m evaluationFunction Evaluation function.                    
                </@param>
                <@param>
                    m original Original simplex (to be preserved).                    
                </@param>
                <@param>
                    m coeff Linear coefficient.                    
                </@param>
                <@param>
                    m comparator Comparator to use to sort simplex vertices from best
                      to poorest.                    
                </@param>
                <@return>
                    n the best point in the transformed simplex.                    
                </@return>
                <@throws>
                    s org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximal number of evaluations is exceeded.                    
                </@throws>
            </javadoc>
            <method name="evaluateNewSimplex" type="PointValuePair" line="196">
                <params>
                    <param name="evaluationFunction" type="MultivariateFunction"/>
                    <param name="original" type="PointValuePair[]"/>
                    <param name="coeff" type="double"/>
                    <param name="comparator" type="Comparator<PointValuePair>"/>
                </params>
                <comment line="197">
                    Perform a linear transformation on all the simplex points,                    
                </comment>
                <comment line="197">
                    except the first one.                    
                </comment>
                <comment line="197">
                    Evaluate the simplex.                    
                </comment>
                <declaration name="xSmallest" type="double[]" line="197"/>
                <declaration name="dim" type="int" line="201"/>
                <scope line="202">
                    <declaration name="xOriginal" type="double[]" line="203"/>
                    <declaration name="xTransformed" type="double[]" line="204"/>
                    <scope line="205"/>
                </scope>
            </method>
        </class>
    </source>