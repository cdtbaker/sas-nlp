<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.solvers">
        <import package="org.apache.commons.math3.complex.Complex"/>
        <import package="org.apache.commons.math3.complex.ComplexUtils"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialFunction"/>
        <import package="org.apache.commons.math3.exception.NoBracketingException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="LaguerreSolver" line="30">
            <extends class="AbstractPolynomialSolver"/>
            <javadoc line="30">
                Implements the &lt;a href=&quot;http://mathworld.wolfram.com/LaguerresMethod.html&quot;&gt;
                  Laguerre&apos;s Method&lt;/a&gt; for root finding of real coefficient polynomials.
                  For reference, see
                  &lt;quote&gt;
                  &lt;b&gt;A First Course in Numerical Analysis&lt;/b&gt;
                  ISBN 048641454X, chapter 8.
                  &lt;/quote&gt;
                  Laguerre&apos;s method is global in the sense that it can start with any initial
                  approximation and be able to solve all roots from that point.
                  The algorithm requires a bracketing condition.                
                <@version>
                    n $Id: LaguerreSolver.java 1422195 2012-12-15 06:45:18Z psteitz $                    
                </@version>
                <@since>
                    e 1.2                    
                </@since>
            </javadoc>
            <declaration name="DEFAULT_ABSOLUTE_ACCURACY" type="double" line="46"/>
            <javadoc line="46">
                Default absolute accuracy.                
            </javadoc>
            <declaration name="complexSolver" type="ComplexSolver" line="48"/>
            <javadoc line="48">
                Complex solver.                
            </javadoc>
            <javadoc line="51">
                Construct a solver with default accuracy (1e-6).                
            </javadoc>
            <method name="LaguerreSolver" type="constructor" line="54"/>
            <javadoc line="57">
                Construct a solver.                
                <@param>
                    m absoluteAccuracy Absolute accuracy.                    
                </@param>
            </javadoc>
            <method name="LaguerreSolver" type="constructor" line="62">
                <params>
                    <param name="absoluteAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="65">
                Construct a solver.                
                <@param>
                    m relativeAccuracy Relative accuracy.                    
                </@param>
                <@param>
                    m absoluteAccuracy Absolute accuracy.                    
                </@param>
            </javadoc>
            <method name="LaguerreSolver" type="constructor" line="72">
                <params>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="75">
                Construct a solver.                
                <@param>
                    m relativeAccuracy Relative accuracy.                    
                </@param>
                <@param>
                    m absoluteAccuracy Absolute accuracy.                    
                </@param>
                <@param>
                    m functionValueAccuracy Function value accuracy.                    
                </@param>
            </javadoc>
            <method name="LaguerreSolver" type="constructor" line="84">
                <params>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                    <param name="functionValueAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="88">
                {@inheritDoc}                
            </javadoc>
            <method name="doSolve" type="double" line="95">
                <comment line="96">
                    Return the initial guess if it is good enough.                    
                </comment>
                <comment line="96">
                    Return the first endpoint if it is good enough.                    
                </comment>
                <comment line="96">
                    Reduce interval if min and initial bracket the root.                    
                </comment>
                <comment line="96">
                    Return the second endpoint if it is good enough.                    
                </comment>
                <comment line="96">
                    Reduce interval if initial and max bracket the root.                    
                </comment>
                <declaration name="min" type="double" line="96"/>
                <declaration name="max" type="double" line="97"/>
                <declaration name="initial" type="double" line="98"/>
                <declaration name="functionValueAccuracy" type="double" line="99"/>
                <declaration name="yInitial" type="double" line="104"/>
                <scope line="105"/>
                <declaration name="yMin" type="double" line="110"/>
                <scope line="111"/>
                <scope line="116"/>
                <declaration name="yMax" type="double" line="121"/>
                <scope line="122"/>
                <scope line="127"/>
            </method>
            <javadoc line="134">
                Find a real root in the given interval.
                  Despite the bracketing condition, the root returned by{@link LaguerreSolver.ComplexSolver#solve(Complex[],Complex)} may
                  not be a real zero inside {@code [min, max]}.
                  For example, &lt;code&gt;p(x) = x&lt;sup&gt;3&lt;/sup&gt; + 1,&lt;/code&gt;
                  with {@code min = -2}, {@code max = 2}, {@code initial = 0}.
                  When it occurs, this code calls{@link LaguerreSolver.ComplexSolver#solveAll(Complex[],Complex)}in order to obtain all roots and picks up one real root.                
                <@param>
                    m lo Lower bound of the search interval.                    
                </@param>
                <@param>
                    m hi Higher bound of the search interval.                    
                </@param>
                <@param>
                    m fLo Function value at the lower bound of the search interval.                    
                </@param>
                <@param>
                    m fHi Function value at the higher bound of the search interval.                    
                </@param>
                <@return>
                    n the point at which the function value is zero.                    
                </@return>
                <@deprecated>
                    d This method should not be part of the public API: It will
                      be made private in version 4.0.                    
                </@deprecated>
            </javadoc>
            <method name="laguerre" type="double" line="156">
                <params>
                    <param name="lo" type="double"/>
                    <param name="hi" type="double"/>
                    <param name="fLo" type="double"/>
                    <param name="fHi" type="double"/>
                </params>
                <declaration name="c" type="Complex" line="157"/>
                <declaration name="initial" type="Complex" line="159"/>
                <declaration name="z" type="Complex" line="160"/>
                <scope line="161"/>
                <scope line="163">
                    <declaration name="r" type="double" line="164"/>
                    <declaration name="root" type="Complex[]" line="166"/>
                    <scope line="167">
                        <scope line="168"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="177">
                Find all complex roots for the polynomial with the given
                  coefficients, starting from the given initial value.
                  &lt;br/&gt;
                  Note: This method is not part of the API of {@link BaseUnivariateSolver}.                
                <@param>
                    m coefficients Polynomial coefficients.                    
                </@param>
                <@param>
                    m initial Start value.                    
                </@param>
                <@return>
                    n the point at which the function value is zero.                    
                </@return>
                <@throws>
                    s org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximum number of evaluations is exceeded.                    
                </@throws>
                <@throws>
                    s NullArgumentException if the {@code coefficients} is{@code null}.                    
                </@throws>
                <@throws>
                    s NoDataException if the {@code coefficients} array is empty.                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="solveAllComplex" type="Complex[]" line="197">
                <params>
                    <param name="coefficients" type="double[]"/>
                    <param name="initial" type="double"/>
                </params>
            </method>
            <javadoc line="207">
                Find a complex root for the polynomial with the given coefficients,
                  starting from the given initial value.
                  &lt;br/&gt;
                  Note: This method is not part of the API of {@link BaseUnivariateSolver}.                
                <@param>
                    m coefficients Polynomial coefficients.                    
                </@param>
                <@param>
                    m initial Start value.                    
                </@param>
                <@return>
                    n the point at which the function value is zero.                    
                </@return>
                <@throws>
                    s org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximum number of evaluations is exceeded.                    
                </@throws>
                <@throws>
                    s NullArgumentException if the {@code coefficients} is{@code null}.                    
                </@throws>
                <@throws>
                    s NoDataException if the {@code coefficients} array is empty.                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="solveComplex" type="Complex" line="227">
                <params>
                    <param name="coefficients" type="double[]"/>
                    <param name="initial" type="double"/>
                </params>
            </method>
            <class name="ComplexSolver" line="237">
                <javadoc line="237">
                    Class for searching all (complex) roots.                    
                </javadoc>
                <javadoc line="241">
                    Check whether the given complex root is actually a real zero
                      in the given interval, within the solver tolerance level.                    
                    <@param>
                        m min Lower bound for the interval.                        
                    </@param>
                    <@param>
                        m max Upper bound for the interval.                        
                    </@param>
                    <@param>
                        m z Complex root.                        
                    </@param>
                    <@return>
                        n {@code true} if z is a real zero.                        
                    </@return>
                </javadoc>
                <method name="isRoot" type="boolean" line="250">
                    <params>
                        <param name="min" type="double"/>
                        <param name="max" type="double"/>
                        <param name="z" type="Complex"/>
                    </params>
                    <scope line="251">
                        <declaration name="tolerance" type="double" line="252"/>
                    </scope>
                </method>
                <javadoc line="259">
                    Find all complex roots for the polynomial with the given
                      coefficients, starting from the given initial value.                    
                    <@param>
                        m coefficients Polynomial coefficients.                        
                    </@param>
                    <@param>
                        m initial Start value.                        
                    </@param>
                    <@return>
                        n the point at which the function value is zero.                        
                    </@return>
                    <@throws>
                        s org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximum number of evaluations is exceeded.                        
                    </@throws>
                    <@throws>
                        s NullArgumentException if the {@code coefficients} is{@code null}.                        
                    </@throws>
                    <@throws>
                        s NoDataException if the {@code coefficients} array is empty.                        
                    </@throws>
                </javadoc>
                <method name="solveAll" type="Complex[]" line="275">
                    <params>
                        <param name="coefficients" type="Complex"/>
                        <param name="initial" type="Complex"/>
                    </params>
                    <comment line="276">
                        Coefficients for deflated polynomial.                        
                    </comment>
                    <comment line="276">
                        Solve individual roots successively.                        
                    </comment>
                    <scope line="276"/>
                    <declaration name="n" type="int" line="279"/>
                    <scope line="280"/>
                    <declaration name="c" type="Complex" line="284"/>
                    <scope line="285"/>
                    <declaration name="root" type="Complex" line="290"/>
                    <scope line="291">
                        <declaration name="subarray" type="Complex" line="292"/>
                        <declaration name="newc" type="Complex" line="296"/>
                        <declaration name="oldc" type="Complex" line="297"/>
                        <scope line="298"/>
                    </scope>
                </method>
                <javadoc line="308">
                    Find a complex root for the polynomial with the given coefficients,
                      starting from the given initial value.                    
                    <@param>
                        m coefficients Polynomial coefficients.                        
                    </@param>
                    <@param>
                        m initial Start value.                        
                    </@param>
                    <@return>
                        n the point at which the function value is zero.                        
                    </@return>
                    <@throws>
                        s org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximum number of evaluations is exceeded.                        
                    </@throws>
                    <@throws>
                        s NullArgumentException if the {@code coefficients} is{@code null}.                        
                    </@throws>
                    <@throws>
                        s NoDataException if the {@code coefficients} array is empty.                        
                    </@throws>
                </javadoc>
                <method name="solve" type="Complex" line="324">
                    <params>
                        <param name="coefficients" type="Complex"/>
                        <param name="initial" type="Complex"/>
                    </params>
                    <scope line="325"/>
                    <declaration name="n" type="int" line="329"/>
                    <scope line="330"/>
                    <declaration name="absoluteAccuracy" type="double" line="334"/>
                    <declaration name="relativeAccuracy" type="double" line="335"/>
                    <declaration name="functionValueAccuracy" type="double" line="336"/>
                    <declaration name="nC" type="Complex" line="338"/>
                    <declaration name="n1C" type="Complex" line="339"/>
                    <declaration name="z" type="Complex" line="341"/>
                    <declaration name="oldz" type="Complex" line="342"/>
                    <scope line="344">
                        <declaration name="pv" type="Complex" line="347"/>
                        <declaration name="dv" type="Complex" line="348"/>
                        <declaration name="d2v" type="Complex" line="349"/>
                        <scope line="350"/>
                        <declaration name="tolerance" type="double" line="358"/>
                        <scope line="360"/>
                        <scope line="363"/>
                        <declaration name="G" type="Complex" line="368"/>
                        <declaration name="G2" type="Complex" line="369"/>
                        <declaration name="H" type="Complex" line="370"/>
                        <declaration name="delta" type="Complex" line="371"/>
                        <declaration name="deltaSqrt" type="Complex" line="373"/>
                        <declaration name="dplus" type="Complex" line="374"/>
                        <declaration name="dminus" type="Complex" line="375"/>
                        <declaration name="denominator" type="Complex" line="376"/>
                        <scope line="379"/>
                        <scope line="383"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>