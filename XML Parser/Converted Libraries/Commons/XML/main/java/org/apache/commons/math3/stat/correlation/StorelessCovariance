<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.correlation">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.linear.MatrixUtils"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <class name="StorelessCovariance" extends="Covariance" line="25">
            <javadoc line="25">
                Covariance implementation that does not require input data to be
                 * stored in memory. The size of the covariance matrix is specified in the
                 * constructor. Specific elements of the matrix are incrementally updated with
                 * calls to incrementRow() or increment Covariance().
                 * &lt;p&gt;This class is based on a paper written by Philippe P&amp;eacute;bay:
                 * &lt;a href=&quot;http://prod.sandia.gov/techlib/access-control.cgi/2008/086212.pdf&quot;&gt;
                 * Formulas for Robust, One-Pass Parallel Computation of Covariances and
                 * Arbitrary-Order Statistical Moments&lt;/a&gt;, 2008, Technical Report SAND2008-6212,
                 * Sandia National Laboratories.&lt;/p&gt;
                 * &lt;p&gt;Note: the underlying covariance matrix is symmetric, thus only the
                 * upper triangular part of the matrix is stored and updated each increment.&lt;/p&gt;                
                <@version>
                    n $Id: StorelessCovariance.java 1410238 2012-11-16 07:58:49Z luc $                    
                </@version>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="covMatrix" type="StorelessBivariateCovariance[]" line="45"/>
            <javadoc line="45">
                the square covariance matrix (upper triangular part)                
            </javadoc>
            <declaration name="dimension" type="int" line="48"/>
            <javadoc line="48">
                dimension of the square covariance matrix                
            </javadoc>
            <javadoc line="51">
                Create a bias corrected covariance matrix with a given dimension.                
                <@param>
                    m dim the dimension of the square covariance matrix                    
                </@param>
            </javadoc>
            <method name="StorelessCovariance" type="constructor" line="56"/>
            <javadoc line="60">
                Create a covariance matrix with a given number of rows and columns and the
                 * indicated bias correction.                
                <@param>
                    m dim the dimension of the covariance matrix                    
                </@param>
                <@param>
                    m biasCorrected if <code>true</code> the covariance estimate is corrected
                     * for bias, i.e. n-1 in the denominator, otherwise there is no bias correction,
                     * i.e. n in the denominator.                    
                </@param>
            </javadoc>
            <method name="StorelessCovariance" type="constructor" line="69"/>
            <javadoc line="75">
                Initialize the internal two-dimensional array of{@link StorelessBivariateCovariance} instances.                
                <@param>
                    m biasCorrected if the covariance estimate shall be corrected for bias                    
                </@param>
            </javadoc>
            <method name="initializeMatrix" type="void" line="81">
                <scope line="82">
                    <scope line="83"/>
                </scope>
            </method>
            <javadoc line="89">
                Returns the index (i, j) translated into the one-dimensional
                 * array used to store the upper triangular part of the symmetric
                 * covariance matrix.                
                <@param>
                    m i the row index                    
                </@param>
                <@param>
                    m j the column index                    
                </@param>
                <@return>
                    n the corresponding index in the matrix array                    
                </@return>
            </javadoc>
            <method name="indexOf" type="int" line="98"/>
            <javadoc line="102">
                Gets the element at index (i, j) from the covariance matrix                
                <@param>
                    m i the row index                    
                </@param>
                <@param>
                    m j the column index                    
                </@param>
                <@return>
                    n the {@link StorelessBivariateCovariance} element at the given index                    
                </@return>
            </javadoc>
            <method name="getElement" type="StorelessBivariateCovariance" line="108"/>
            <javadoc line="112">
                Sets the covariance element at index (i, j) in the covariance matrix                
                <@param>
                    m i the row index                    
                </@param>
                <@param>
                    m j the column index                    
                </@param>
                <@param>
                    m cov the {@link StorelessBivariateCovariance} element to be set                    
                </@param>
            </javadoc>
            <method name="setElement" type="void" line="119"/>
            <javadoc line="123">
                Get the covariance for an individual element of the covariance matrix.                
                <@param>
                    m xIndex row index in the covariance matrix                    
                </@param>
                <@param>
                    m yIndex column index in the covariance matrix                    
                </@param>
                <@return>
                    n the covariance of the given element                    
                </@return>
                <@throws>
                    s NumberIsTooSmallException if the number of observations
                     * in the cell is &lt; 2                    
                </@throws>
            </javadoc>
            <method name="getCovariance" type="double" line="134"/>
            <javadoc line="140">
                Increment the covariance matrix with one row of data.                
                <@param>
                    m data array representing one row of data.                    
                </@param>
                <@throws>
                    s DimensionMismatchException if the length of <code>rowData</code>
                     * does not match with the covariance matrix                    
                </@throws>
            </javadoc>
            <method name="increment" type="void" line="148">
                <comment line="149">
                    only update the upper triangular part of the covariance matrix                    
                </comment>
                <comment line="149">
                    as only these parts are actually stored                    
                </comment>
                <declaration name="length" type="int" line="150"/>
                <scope line="151"/>
                <scope line="157">
                    <scope line="158"/>
                </scope>
            </method>
            <javadoc line="165">
                {@inheritDoc}                
                <@throws>
                    s NumberIsTooSmallException if the number of observations
                     * in a cell is &lt; 2                    
                </@throws>
            </javadoc>
            <method name="getCovarianceMatrix" type="RealMatrix" line="171"/>
            <javadoc line="175">
                Return the covariance matrix as two-dimensional array.                
                <@return>
                    n a two-dimensional double array of covariance values                    
                </@return>
                <@throws>
                    s NumberIsTooSmallException if the number of observations
                     * for a cell is &lt; 2                    
                </@throws>
            </javadoc>
            <method name="getData" type="double[][]" line="182">
                <declaration name="data" type="double[][]" line="183"/>
                <scope line="184">
                    <scope line="185"/>
                </scope>
            </method>
            <javadoc line="192">
                This {@link Covariance} method is not supported by a {@link StorelessCovariance},
                 * since the number of bivariate observations does not have to be the same for different
                 * pairs of covariates - i.e., N as defined in {@link Covariance#getN()} is undefined.                
                <@return>
                    n nothing as this implementation always throws a{@link MathUnsupportedOperationException}                    
                </@return>
                <@throws>
                    s MathUnsupportedOperationException in all cases                    
                </@throws>
            </javadoc>
            <method name="getN" type="int" line="203"/>
        </class>
    </source>