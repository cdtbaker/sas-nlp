<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.threed">
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.geometry.Vector"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.Vector1D"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Embedding"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="Line" line="29">
            <implements interface="Embedding&lt;Euclidean3D,Euclidean1D&gt;"/>
            <javadoc line="29">
                The class represent lines in a three dimensional space.
                 * &lt;p&gt;Each oriented line is intrinsically associated with an abscissa
                 * which is a coordinate on the line. The point at abscissa 0 is the
                 * orthogonal projection of the origin on the line, another equivalent
                 * way to express this is to say that it is the point of the line
                 * which is closest to the origin. Abscissa increases in the line
                 * direction.&lt;/p&gt;                
                <@version>
                    n $Id: Line.java 1453218 2013-03-06 08:53:28Z luc $                    
                </@version>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="direction" type="Vector3D" line="43"/>
            <javadoc line="43">
                Line direction.                
            </javadoc>
            <declaration name="zero" type="Vector3D" line="46"/>
            <javadoc line="46">
                Line point closest to the origin.                
            </javadoc>
            <javadoc line="49">
                Build a line from two points.                
                <@param>
                    m p1 first point belonging to the line (this can be any point)                    
                </@param>
                <@param>
                    m p2 second point belonging to the line (this can be any point, different from p1)                    
                </@param>
                <@exception>
                    n MathIllegalArgumentException if the points are equal                    
                </@exception>
            </javadoc>
            <method name="Line" type="constructor" line="54"/>
            <javadoc line="58">
                Copy constructor.
                 * &lt;p&gt;The created instance is completely independent from the
                 * original instance, it is a deep copy.&lt;/p&gt;                
                <@param>
                    m line line to copy                    
                </@param>
            </javadoc>
            <method name="Line" type="constructor" line="63"/>
            <javadoc line="68">
                Reset the instance as if built from two points.                
                <@param>
                    m p1 first point belonging to the line (this can be any point)                    
                </@param>
                <@param>
                    m p2 second point belonging to the line (this can be any point, different from p1)                    
                </@param>
                <@exception>
                    n MathIllegalArgumentException if the points are equal                    
                </@exception>
            </javadoc>
            <method name="reset" type="void" line="73">
                <declaration name="delta" type="Vector3D" line="74"/>
                <declaration name="norm2" type="double" line="75"/>
                <scope line="76"/>
            </method>
            <javadoc line="83">
                Get a line with reversed direction.                
                <@return>
                    n a new instance, with reversed direction                    
                </@return>
            </javadoc>
            <method name="revert" type="Line" line="86">
                <declaration name="reverted" type="Line" line="87"/>
            </method>
            <javadoc line="92">
                Get the normalized direction vector.                
                <@return>
                    n normalized direction vector                    
                </@return>
            </javadoc>
            <method name="getDirection" type="Vector3D" line="95"/>
            <javadoc line="99">
                Get the line point closest to the origin.                
                <@return>
                    n line point closest to the origin                    
                </@return>
            </javadoc>
            <method name="getOrigin" type="Vector3D" line="102"/>
            <javadoc line="106">
                Get the abscissa of a point with respect to the line.
                 * &lt;p&gt;The abscissa is 0 if the projection of the point and the
                 * projection of the frame origin on the line are the same
                 * point.&lt;/p&gt;                
                <@param>
                    m point point to check                    
                </@param>
                <@return>
                    n abscissa of the point                    
                </@return>
            </javadoc>
            <method name="getAbscissa" type="double" line="113"/>
            <javadoc line="117">
                Get one point from the line.                
                <@param>
                    m abscissa desired abscissa for the point                    
                </@param>
                <@return>
                    n one point belonging to the line, at specified abscissa                    
                </@return>
            </javadoc>
            <method name="pointAt" type="Vector3D" line="121"/>
            <javadoc line="125">
                {@inheritDoc}                
                <@see>
                    e #getAbscissa(Vector3D)                    
                </@see>
            </javadoc>
            <method name="toSubSpace" type="Vector1D" line="128"/>
            <javadoc line="132">
                {@inheritDoc}                
                <@see>
                    e #pointAt(double)                    
                </@see>
            </javadoc>
            <method name="toSpace" type="Vector3D" line="135"/>
            <javadoc line="139">
                Check if the instance is similar to another line.
                 * &lt;p&gt;Lines are considered similar if they contain the same
                 * points. This does not mean they are equal since they can have
                 * opposite directions.&lt;/p&gt;                
                <@param>
                    m line line to which instance should be compared                    
                </@param>
                <@return>
                    n true if the lines are similar                    
                </@return>
            </javadoc>
            <method name="isSimilarTo" type="boolean" line="146">
                <declaration name="angle" type="double" line="147"/>
            </method>
            <javadoc line="151">
                Check if the instance contains a point.                
                <@param>
                    m p point to check                    
                </@param>
                <@return>
                    n true if p belongs to the line                    
                </@return>
            </javadoc>
            <method name="contains" type="boolean" line="155"/>
            <javadoc line="159">
                Compute the distance between the instance and a point.                
                <@param>
                    m p to check                    
                </@param>
                <@return>
                    n distance between the instance and the point                    
                </@return>
            </javadoc>
            <method name="distance" type="double" line="163">
                <declaration name="d" type="Vector3D" line="164"/>
                <declaration name="n" type="Vector3D" line="165"/>
            </method>
            <javadoc line="169">
                Compute the shortest distance between the instance and another line.                
                <@param>
                    m line line to check against the instance                    
                </@param>
                <@return>
                    n shortest distance between the instance and the line                    
                </@return>
            </javadoc>
            <method name="distance" type="double" line="173">
                <comment line="174">
                    signed separation of the two parallel planes that contains the lines                    
                </comment>
                <declaration name="normal" type="Vector3D" line="175"/>
                <declaration name="n" type="double" line="176"/>
                <scope line="177"/>
                <declaration name="offset" type="double" line="183"/>
            </method>
            <javadoc line="189">
                Compute the point of the instance closest to another line.                
                <@param>
                    m line line to check against the instance                    
                </@param>
                <@return>
                    n point of the instance closest to another line                    
                </@return>
            </javadoc>
            <method name="closestPoint" type="Vector3D" line="193">
                <declaration name="cos" type="double" line="195"/>
                <declaration name="n" type="double" line="196"/>
                <scope line="197"/>
                <declaration name="delta0" type="Vector3D" line="202"/>
                <declaration name="a" type="double" line="203"/>
                <declaration name="b" type="double" line="204"/>
            </method>
            <javadoc line="210">
                Get the intersection point of the instance and another line.                
                <@param>
                    m line other line                    
                </@param>
                <@return>
                    n intersection point of the instance and the other line
                     * or null if there are no intersection points                    
                </@return>
            </javadoc>
            <method name="intersection" type="Vector3D" line="215">
                <declaration name="closest" type="Vector3D" line="216"/>
            </method>
            <javadoc line="220">
                Build a sub-line covering the whole line.                
                <@return>
                    n a sub-line covering the whole line                    
                </@return>
            </javadoc>
            <method name="wholeLine" type="SubLine" line="223"/>
        </class>
    </source>