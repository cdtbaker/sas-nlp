<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="BicubicSplineInterpolator" line="27">
            <implements interface="BivariateGridInterpolator"/>
            <javadoc line="27">
                Generates a bicubic interpolating function.                
                <@version>
                    n $Id: BicubicSplineInterpolator.java 1455194 2013-03-11 15:45:54Z luc $                    
                </@version>
                <@since>
                    e 2.2                    
                </@since>
            </javadoc>
            <javadoc line="35">
                {@inheritDoc}                
            </javadoc>
            <method name="interpolate" type="BicubicSplineInterpolatingFunction" line="42">
                <comment line="43">
                    Samples (first index is y-coordinate, i.e. subarray variable is x)                    
                </comment>
                <comment line="43">
                    0 &lt;= i &lt; xval.length                    
                </comment>
                <comment line="43">
                    0 &lt;= j &lt; yval.length                    
                </comment>
                <comment line="43">
                    fX[j][i] = f(xval[i], yval[j])                    
                </comment>
                <comment line="43">
                    For each line y[j] (0 &lt;= j &lt; yLen), construct a 1D spline with                    
                </comment>
                <comment line="43">
                    respect to variable x                    
                </comment>
                <comment line="43">
                    For each line x[i] (0 &lt;= i &lt; xLen), construct a 1D spline with                    
                </comment>
                <comment line="43">
                    respect to variable y generated by array fY_1[i]                    
                </comment>
                <comment line="43">
                    Partial derivatives with respect to x at the grid knots                    
                </comment>
                <comment line="43">
                    Partial derivatives with respect to y at the grid knots                    
                </comment>
                <comment line="43">
                    Cross partial derivatives                    
                </comment>
                <comment line="43">
                    Create the interpolating splines                    
                </comment>
                <scope line="43"/>
                <scope line="46"/>
                <declaration name="xLen" type="int" line="53"/>
                <declaration name="yLen" type="int" line="54"/>
                <declaration name="fX" type="double[][]" line="60"/>
                <scope line="61">
                    <scope line="62"/>
                    <scope line="66"/>
                </scope>
                <declaration name="spInterpolator" type="SplineInterpolator" line="71"/>
                <declaration name="ySplineX" type="PolynomialSplineFunction[]" line="75"/>
                <scope line="76"/>
                <declaration name="xSplineY" type="PolynomialSplineFunction[]" line="82"/>
                <scope line="83"/>
                <declaration name="dFdX" type="double[][]" line="88"/>
                <scope line="89">
                    <declaration name="f" type="UnivariateFunction" line="90"/>
                    <scope line="91"/>
                </scope>
                <declaration name="dFdY" type="double[][]" line="97"/>
                <scope line="98">
                    <declaration name="f" type="UnivariateFunction" line="99"/>
                    <scope line="100"/>
                </scope>
                <declaration name="d2FdXdY" type="double[][]" line="106"/>
                <scope line="107">
                    <declaration name="nI" type="int" line="108"/>
                    <declaration name="pI" type="int" line="109"/>
                    <scope line="110">
                        <declaration name="nJ" type="int" line="111"/>
                        <declaration name="pJ" type="int" line="112"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="124">
                Computes the next index of an array, clipping if necessary.
                 * It is assumed (but not checked) that {@code i &gt;= 0}.                
                <@param>
                    m i Index.                    
                </@param>
                <@param>
                    m max Upper limit of the array.                    
                </@param>
                <@return>
                    n the next index.                    
                </@return>
            </javadoc>
            <method name="nextIndex" type="int" line="132">
                <declaration name="index" type="int" line="133"/>
            </method>
            <javadoc line="136">
                Computes the previous index of an array, clipping if necessary.
                 * It is assumed (but not checked) that {@code i} is smaller than the size
                 * of the array.                
                <@param>
                    m i Index.                    
                </@param>
                <@return>
                    n the previous index.                    
                </@return>
            </javadoc>
            <method name="previousIndex" type="int" line="144">
                <declaration name="index" type="int" line="145"/>
            </method>
        </class>
    </source>