<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.vector">
        <import package="org.apache.commons.math3.analysis.MultivariateMatrixFunction"/>
        <import package="org.apache.commons.math3.optim.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optim.OptimizationData"/>
        <import package="org.apache.commons.math3.optim.PointVectorValuePair"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <class name="JacobianMultivariateVectorOptimizer" extends="MultivariateVectorOptimizer" line="26">
            <javadoc line="26">
                Base class for implementing optimizers for multivariate vector
                 * differentiable functions.
                 * It contains boiler-plate code for dealing with Jacobian evaluation.
                 * It assumes that the rows of the Jacobian matrix iterate on the model
                 * functions while the columns iterate on the parameters; thus, the numbers
                 * of rows is equal to the dimension of the {@link Target} while the
                 * number of columns is equal to the dimension of the{@link org.apache.commons.math3.optim.InitialGuess InitialGuess}.                
                <@version>
                    n $Id: JacobianMultivariateVectorOptimizer.java 1454464 2013-03-08 16:58:10Z luc $                    
                </@version>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <declaration name="jacobian" type="MultivariateMatrixFunction" line="41"/>
            <javadoc line="41">
                Jacobian of the model function.                
            </javadoc>
            <javadoc line="46">
                @param checker Convergence checker.                
            </javadoc>
            <method name="JacobianMultivariateVectorOptimizer" type="constructor" line="49"/>
            <javadoc line="53">
                Computes the Jacobian matrix.                
                <@param>
                    m params Point at which the Jacobian must be evaluated.                    
                </@param>
                <@return>
                    n the Jacobian at the specified point.                    
                </@return>
            </javadoc>
            <method name="computeJacobian" type="double[][]" line="59"/>
            <javadoc line="63">
                {@inheritDoc}                
                <@param>
                    m optData Optimization data. In addition to those documented in{@link MultivariateVectorOptimizer#optimize(OptimizationData)}MultivariateOptimizer}, this method will register the following data:
                     * <ul>
                     * <li>{@link ModelFunctionJacobian}</li>
                     * </ul>                    
                </@param>
                <@return>
                    n {@inheritDoc}                    
                </@return>
                <@throws>
                    s TooManyEvaluationsException if the maximal number of
                     * evaluations is exceeded.                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if the initial guess, target, and weight
                     * arguments have inconsistent dimensions.                    
                </@throws>
            </javadoc>
            <method name="optimize" type="PointVectorValuePair" line="81">
                <comment line="82">
                    Set up base class and perform computation.                    
                </comment>
            </method>
            <javadoc line="86">
                Scans the list of (required and optional) optimization data that
                 * characterize the problem.                
                <@param>
                    m optData Optimization data.
                     * The following data will be looked for:
                     * <ul>
                     * <li>{@link ModelFunctionJacobian}</li>
                     * </ul>                    
                </@param>
            </javadoc>
            <method name="parseOptimizationData" type="void" line="97">
                <comment line="98">
                    Allow base class to register its own data.                    
                </comment>
                <comment line="98">
                    The existing values (as set by the previous call) are reused if                    
                </comment>
                <comment line="98">
                    not provided in the argument list.                    
                </comment>
                <scope line="103">
                    <scope line="104"/>
                </scope>
            </method>
        </class>
    </source>