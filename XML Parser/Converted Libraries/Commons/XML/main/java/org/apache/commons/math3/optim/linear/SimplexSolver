<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.linear">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.TooManyIterationsException"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="SimplexSolver" extends="LinearOptimizer" line="25">
            <javadoc line="25">
                Solves a linear problem using the &quot;Two-Phase Simplex&quot; method.
                 * &lt;p&gt;
                 * &lt;b&gt;Note:&lt;/b&gt; Depending on the problem definition, the default convergence criteria
                 * may be too strict, resulting in {@link NoFeasibleSolutionException} or{@link TooManyIterationsException}. In such a case it is advised to adjust these
                 * criteria with more appropriate values, e.g. relaxing the epsilon value.
                 * &lt;p&gt;
                 * Default convergence criteria:
                 * &lt;ul&gt;
                 * &lt;li&gt;Algorithm convergence: 1e-6&lt;/li&gt;
                 * &lt;li&gt;Floating-point comparisons: 10 ulp&lt;/li&gt;
                 * &lt;li&gt;Cut-Off value: 1e-12&lt;/li&gt;
                 * &lt;/ul&gt;
                 * &lt;p&gt;
                 * The cut-off value has been introduced to zero out very small numbers in the Simplex tableau,
                 * as these may lead to numerical instabilities due to the nature of the Simplex algorithm
                 * (the pivot element is used as a denominator). If the problem definition is very tight, the
                 * default cut-off value may be too small, thus it is advised to increase it to a larger value,
                 * in accordance with the chosen epsilon.
                 * &lt;p&gt;
                 * It may also be counter-productive to provide a too large value for {@link org.apache.commons.math3.optim.MaxIter MaxIter} as parameter in the call of {@link #optimize(org.apache.commons.math3.optim.OptimizationData) optimize(OptimizationData...)},
                 * as the {@link SimplexSolver} will use different strategies depending on the current iteration
                 * count. After half of the allowed max iterations has already been reached, the strategy to select
                 * pivot rows will change in order to break possible cycles due to degenerate problems.                
                <@version>
                    n $Id: SimplexSolver.java 1462503 2013-03-29 15:48:27Z luc $                    
                </@version>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <declaration name="DEFAULT_ULPS" type="int" line="57"/>
            <javadoc line="57">
                Default amount of error to accept in floating point comparisons (as ulps).                
            </javadoc>
            <declaration name="DEFAULT_CUT_OFF" type="double" line="60"/>
            <javadoc line="60">
                Default cut-off value.                
            </javadoc>
            <declaration name="DEFAULT_EPSILON" type="double" line="63"/>
            <javadoc line="63">
                Default amount of error to accept for algorithm convergence.                
            </javadoc>
            <declaration name="epsilon" type="double" line="66"/>
            <javadoc line="66">
                Amount of error to accept for algorithm convergence.                
            </javadoc>
            <declaration name="maxUlps" type="int" line="69"/>
            <javadoc line="69">
                Amount of error to accept in floating point comparisons (as ulps).                
            </javadoc>
            <declaration name="cutOff" type="double" line="72"/>
            <javadoc line="72">
                Cut-off value for entries in the tableau: values smaller than the cut-off
                 * are treated as zero to improve numerical stability.                
            </javadoc>
            <javadoc line="78">
                Builds a simplex solver with default settings.                
            </javadoc>
            <method name="SimplexSolver" type="constructor" line="81"/>
            <javadoc line="85">
                Builds a simplex solver with a specified accepted amount of error.                
                <@param>
                    m epsilon Amount of error to accept for algorithm convergence.                    
                </@param>
            </javadoc>
            <method name="SimplexSolver" type="constructor" line="90"/>
            <javadoc line="94">
                Builds a simplex solver with a specified accepted amount of error.                
                <@param>
                    m epsilon Amount of error to accept for algorithm convergence.                    
                </@param>
                <@param>
                    m maxUlps Amount of error to accept in floating point comparisons.                    
                </@param>
            </javadoc>
            <method name="SimplexSolver" type="constructor" line="100"/>
            <javadoc line="104">
                Builds a simplex solver with a specified accepted amount of error.                
                <@param>
                    m epsilon Amount of error to accept for algorithm convergence.                    
                </@param>
                <@param>
                    m maxUlps Amount of error to accept in floating point comparisons.                    
                </@param>
                <@param>
                    m cutOff Values smaller than the cutOff are treated as zero.                    
                </@param>
            </javadoc>
            <method name="SimplexSolver" type="constructor" line="111"/>
            <javadoc line="117">
                Returns the column with the most negative coefficient in the objective function row.                
                <@param>
                    m tableau Simple tableau for the problem.                    
                </@param>
                <@return>
                    n the column with the most negative coefficient.                    
                </@return>
            </javadoc>
            <method name="getPivotColumn" type="Integer" line="123">
                <declaration name="minValue" type="double" line="124"/>
                <declaration name="minPos" type="Integer" line="125"/>
                <scope line="126">
                    <declaration name="entry" type="double" line="127"/>
                    <scope line="130"/>
                </scope>
            </method>
            <javadoc line="138">
                Returns the row with the minimum ratio as given by the minimum ratio test (MRT).                
                <@param>
                    m tableau Simple tableau for the problem.                    
                </@param>
                <@param>
                    m col Column to test the ratio of (see {@link #getPivotColumn(SimplexTableau)}).                    
                </@param>
                <@return>
                    n the row with the minimum ratio.                    
                </@return>
            </javadoc>
            <method name="getPivotRow" type="Integer" line="145">
                <comment line="146">
                    create a list of all the rows that tie for the lowest score in the minimum ratio test                    
                </comment>
                <declaration name="minRatioPositions" type="List&lt;Integer&gt;" line="147"/>
                <declaration name="minRatio" type="double" line="148"/>
                <scope line="149">
                    <declaration name="rhs" type="double" line="150"/>
                    <declaration name="entry" type="double" line="151"/>
                    <scope line="153">
                        <declaration name="ratio" type="double" line="154"/>
                        <declaration name="cmp" type="int" line="157"/>
                        <scope line="158"/>
                        <scope line="160"/>
                    </scope>
                </scope>
                <scope line="168"/>
                <scope line="170">
                    <scope line="174">
                        <scope line="175">
                            <scope line="176">
                                <declaration name="column" type="int" line="177"/>
                                <declaration name="entry" type="double" line="178"/>
                                <scope line="179"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="195">
                        <declaration name="minRow" type="Integer" line="196"/>
                        <declaration name="minIndex" type="int" line="197"/>
                        <declaration name="varStart" type="int" line="198"/>
                        <declaration name="varEnd" type="int" line="199"/>
                        <scope line="200">
                            <scope line="201">
                                <declaration name="basicRow" type="Integer" line="202"/>
                                <scope line="203"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="215">
                Runs one iteration of the Simplex method on the given model.                
                <@param>
                    m tableau Simple tableau for the problem.                    
                </@param>
                <@throws>
                    s TooManyIterationsException if the allowed number of iterations has been exhausted.                    
                </@throws>
                <@throws>
                    s UnboundedSolutionException if the model is found not to have a bounded solution.                    
                </@throws>
            </javadoc>
            <method name="doIteration" type="void" line="224">
                <comment line="225">
                    set the pivot element to 1                    
                </comment>
                <comment line="225">
                    set the rest of the pivot column to 0                    
                </comment>
                <declaration name="pivotCol" type="Integer" line="228"/>
                <declaration name="pivotRow" type="Integer" line="229"/>
                <scope line="230"/>
                <declaration name="pivotVal" type="double" line="235"/>
                <scope line="239">
                    <scope line="240">
                        <declaration name="multiplier" type="double" line="241"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="247">
                Solves Phase 1 of the Simplex method.                
                <@param>
                    m tableau Simple tableau for the problem.                    
                </@param>
                <@throws>
                    s TooManyIterationsException if the allowed number of iterations has been exhausted.                    
                </@throws>
                <@throws>
                    s UnboundedSolutionException if the model is found not to have a bounded solution.                    
                </@throws>
                <@throws>
                    s NoFeasibleSolutionException if there is no feasible solution?                    
                </@throws>
            </javadoc>
            <method name="solvePhase1" type="void" line="258">
                <comment line="259">
                    make sure we&apos;re in Phase 1                    
                </comment>
                <comment line="259">
                    if W is not zero then we have no feasible solution                    
                </comment>
                <scope line="261"/>
                <scope line="265"/>
                <scope line="270"/>
            </method>
            <javadoc line="275">
                {@inheritDoc}                
            </javadoc>
            <method name="doOptimize" type="PointValuePair" line="280">
                <declaration name="tableau" type="SimplexTableau" line="281"/>
                <scope line="293"/>
            </method>
        </class>
    </source>