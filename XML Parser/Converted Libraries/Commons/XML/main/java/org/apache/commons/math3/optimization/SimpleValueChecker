<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization">
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <class name="SimpleValueChecker" line="23">
            <extends class="AbstractConvergenceChecker">
                <type_params>
                    <type_param name="PointValuePair"/>
                </type_params>
            </extends>
            <javadoc line="23">
                Simple implementation of the {@link ConvergenceChecker} interface using
                  only objective function values.
                  Convergence is considered to have been reached if either the relative
                  difference between the objective function values is smaller than a
                  threshold or if either the absolute difference between the objective
                  function values is smaller than another threshold.
                  &lt;br/&gt;
                  The {@link #converged(int,PointValuePair,PointValuePair) converged}method will also return {@code true} if the number of iterations has been set
                  (see {@link #SimpleValueChecker(double,double,int) this constructor}).                
                <@version>
                    n $Id: SimpleValueChecker.java 1462503 2013-03-29 15:48:27Z luc $                    
                </@version>
                <@deprecated>
                    d As of 3.1 (to be removed in 4.0).                    
                </@deprecated>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="ITERATION_CHECK_DISABLED" type="int" line="43"/>
            <javadoc line="43">
                If {@link #maxIterationCount} is set to this value, the number of
                  iterations will never cause{@link #converged(int,PointValuePair,PointValuePair)}to return {@code true}.                
            </javadoc>
            <declaration name="maxIterationCount" type="int" line="50"/>
            <javadoc line="50">
                Number of iterations after which the{@link #converged(int,PointValuePair,PointValuePair)} method
                  will return true (unless the check is disabled).                
            </javadoc>
            <javadoc line="57">
                Build an instance with default thresholds.                
                <@deprecated>
                    d See {@link AbstractConvergenceChecker#AbstractConvergenceChecker()}                    
                </@deprecated>
            </javadoc>
            <method name="SimpleValueChecker" type="constructor" line="62"/>
            <javadoc line="66">
                Build an instance with specified thresholds.
                  In order to perform only relative checks, the absolute tolerance
                  must be set to a negative value. In order to perform only absolute
                  checks, the relative tolerance must be set to a negative value.                
                <@param>
                    m relativeThreshold relative tolerance threshold                    
                </@param>
                <@param>
                    m absoluteThreshold absolute tolerance threshold                    
                </@param>
            </javadoc>
            <method name="SimpleValueChecker" type="constructor" line="76">
                <params>
                    <param name="relativeThreshold" type="double"/>
                    <param name="absoluteThreshold" type="double"/>
                </params>
            </method>
            <javadoc line="81">
                Builds an instance with specified thresholds.
                  In order to perform only relative checks, the absolute tolerance
                  must be set to a negative value. In order to perform only absolute
                  checks, the relative tolerance must be set to a negative value.                
                <@param>
                    m relativeThreshold relative tolerance threshold                    
                </@param>
                <@param>
                    m absoluteThreshold absolute tolerance threshold                    
                </@param>
                <@param>
                    m maxIter Maximum iteration count.                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if {@code maxIter <= 0}.                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="SimpleValueChecker" type="constructor" line="97">
                <params>
                    <param name="relativeThreshold" type="double"/>
                    <param name="absoluteThreshold" type="double"/>
                    <param name="maxIter" type="int"/>
                </params>
                <scope line="100"/>
            </method>
            <javadoc line="106">
                Check if the optimization algorithm has converged considering the
                  last two points.
                  This method may be called several time from the same algorithm
                  iteration with different points. This can be detected by checking the
                  iteration number at each call if needed. Each time this method is
                  called, the previous and current point correspond to points with the
                  same role at each iteration, so they can be compared. As an example,
                  simplex-based algorithms call this method for all points of the simplex,
                  not only for the best or worst ones.                
                <@param>
                    m iteration Index of current iteration                    
                </@param>
                <@param>
                    m previous Best point in the previous iteration.                    
                </@param>
                <@param>
                    m current Best point in the current iteration.                    
                </@param>
                <@return>
                    n {@code true} if the algorithm has converged.                    
                </@return>
            </javadoc>
            <method name="converged" type="boolean" line="125">
                <params>
                    <param name="iteration" type="int"/>
                    <param name="previous" type="PointValuePair"/>
                    <param name="current" type="PointValuePair"/>
                </params>
                <scope line="126"/>
                <declaration name="p" type="double" line="130"/>
                <declaration name="c" type="double" line="131"/>
                <declaration name="difference" type="double" line="132"/>
                <declaration name="size" type="double" line="133"/>
            </method>
        </class>
    </source>