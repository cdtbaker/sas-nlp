<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.nonstiff">
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="DormandPrince54Integrator" extends="EmbeddedRungeKuttaIntegrator" line="23">
            <comment line="24">
                element 2 is zero, so it is neither stored nor used                
            </comment>
            <javadoc line="23">
                This class implements the 5(4) Dormand-Prince integrator for Ordinary
                 * Differential Equations.
                 * &lt;p&gt;This integrator is an embedded Runge-Kutta integrator
                 * of order 5(4) used in local extrapolation mode (i.e. the solution
                 * is computed using the high order formula) with stepsize control
                 * (and automatic step initialization) and continuous output. This
                 * method uses 7 functions evaluations per step. However, since this
                 * is an &lt;i&gt;fsal&lt;/i&gt;, the last evaluation of one step is the same as
                 * the first evaluation of the next step and hence can be avoided. So
                 * the cost is really 6 functions evaluations per step.&lt;/p&gt;
                 * &lt;p&gt;This method has been published (whithout the continuous output
                 * that was added by Shampine in 1986) in the following article :
                 * &lt;pre&gt;
                 * A family of embedded Runge-Kutta formulae
                 * J. R. Dormand and P. J. Prince
                 * Journal of Computational and Applied Mathematics
                 * volume 6, no 1, 1980, pp. 19-26
                 * &lt;/pre&gt;&lt;/p&gt;                
                <@version>
                    n $Id: DormandPrince54Integrator.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
                <@since>
                    e 1.2                    
                </@since>
            </javadoc>
            <declaration name="METHOD_NAME" type="String" line="51"/>
            <javadoc line="51">
                Integrator method name.                
            </javadoc>
            <declaration name="STATIC_C" type="double[]" line="54"/>
            <javadoc line="54">
                Time steps Butcher array.                
            </javadoc>
            <declaration name="STATIC_A" type="double[][]" line="59"/>
            <javadoc line="59">
                Internal weights Butcher array.                
            </javadoc>
            <declaration name="STATIC_B" type="double[]" line="69"/>
            <javadoc line="69">
                Propagation weights Butcher array.                
            </javadoc>
            <declaration name="E1" type="double" line="74"/>
            <javadoc line="74">
                Error array, element 1.                
            </javadoc>
            <declaration name="E3" type="double" line="79"/>
            <javadoc line="79">
                Error array, element 3.                
            </javadoc>
            <declaration name="E4" type="double" line="82"/>
            <javadoc line="82">
                Error array, element 4.                
            </javadoc>
            <declaration name="E5" type="double" line="85"/>
            <javadoc line="85">
                Error array, element 5.                
            </javadoc>
            <declaration name="E6" type="double" line="88"/>
            <javadoc line="88">
                Error array, element 6.                
            </javadoc>
            <declaration name="E7" type="double" line="91"/>
            <javadoc line="91">
                Error array, element 7.                
            </javadoc>
            <javadoc line="94">
                Simple constructor.
                 * Build a fifth order Dormand-Prince integrator with the given step bounds                
                <@param>
                    m minStep minimal step (sign is irrelevant, regardless of
                     * integration direction, forward or backward), the last step can
                     * be smaller than this                    
                </@param>
                <@param>
                    m maxStep maximal step (sign is irrelevant, regardless of
                     * integration direction, forward or backward), the last step can
                     * be smaller than this                    
                </@param>
                <@param>
                    m scalAbsoluteTolerance allowed absolute error                    
                </@param>
                <@param>
                    m scalRelativeTolerance allowed relative error                    
                </@param>
            </javadoc>
            <method name="DormandPrince54Integrator" type="constructor" line="107"/>
            <javadoc line="112">
                Simple constructor.
                 * Build a fifth order Dormand-Prince integrator with the given step bounds                
                <@param>
                    m minStep minimal step (sign is irrelevant, regardless of
                     * integration direction, forward or backward), the last step can
                     * be smaller than this                    
                </@param>
                <@param>
                    m maxStep maximal step (sign is irrelevant, regardless of
                     * integration direction, forward or backward), the last step can
                     * be smaller than this                    
                </@param>
                <@param>
                    m vecAbsoluteTolerance allowed absolute error                    
                </@param>
                <@param>
                    m vecRelativeTolerance allowed relative error                    
                </@param>
            </javadoc>
            <method name="DormandPrince54Integrator" type="constructor" line="125"/>
            <javadoc line="130">
                {@inheritDoc}                
            </javadoc>
            <method name="getOrder" type="int" line="132"/>
            <javadoc line="136">
                {@inheritDoc}                
            </javadoc>
            <method name="estimateError" type="double" line="140">
                <declaration name="error" type="double" line="142"/>
                <scope line="144">
                    <declaration name="errSum" type="double" line="145"/>
                    <declaration name="yScale" type="double" line="149"/>
                    <declaration name="tol" type="double" line="150"/>
                    <declaration name="ratio" type="double" line="153"/>
                </scope>
            </method>
        </class>
    </source>