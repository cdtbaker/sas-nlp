<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.ranking">
        <javadoc line="20">
            Strategies for handling NaN values in rank transformations.
             * &lt;ul&gt;
             * &lt;li&gt;MINIMAL - NaNs are treated as minimal in the ordering, equivalent to
             * (that is, tied with) &lt;code&gt;Double.NEGATIVE_INFINITY&lt;/code&gt;.&lt;/li&gt;
             * &lt;li&gt;MAXIMAL - NaNs are treated as maximal in the ordering, equivalent to
             * &lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt;&lt;/li&gt;
             * &lt;li&gt;REMOVED - NaNs are removed before the rank transform is applied&lt;/li&gt;
             * &lt;li&gt;FIXED - NaNs are left &quot;in place,&quot; that is the rank transformation is
             * applied to the other elements in the input array, but the NaN elements
             * are returned unchanged.&lt;/li&gt;
             * &lt;li&gt;FAILED - If any NaN is encountered in the input array, an appropriate
             * exception is thrown&lt;/li&gt;
             * &lt;/ul&gt;            
            <@since>
                e 2.0                
            </@since>
            <@version>
                n $Id: NaNStrategy.java 1422313 2012-12-15 18:53:41Z psteitz $                
            </@version>
        </javadoc>
        <javadoc line="40">
            NaNs are considered minimal in the ordering            
        </javadoc>
        <javadoc line="43">
            NaNs are considered maximal in the ordering            
        </javadoc>
        <javadoc line="46">
            NaNs are removed before computing ranks            
        </javadoc>
        <javadoc line="49">
            NaNs are left in place            
        </javadoc>
        <javadoc line="52">
            NaNs result in an exception            
            <@since>
                e 3.1                
            </@since>
        </javadoc>
    </source>