<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.twod">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Region"/>
        <import package="org.apache.commons.math3.geometry.partitioning.RegionFactory"/>
        <import package="org.apache.commons.math3.geometry.partitioning.SubHyperplane"/>
        <class name="NestedLoops" line="29">
            <javadoc line="29">
                This class represent a tree of nested 2D boundary loops.
                 * &lt;p&gt;This class is used for piecewise polygons construction.
                 * Polygons are built using the outline edges as
                 * representative of boundaries, the orientation of these lines are
                 * meaningful. However, we want to allow the user to specify its
                 * outline loops without having to take care of this orientation. This
                 * class is devoted to correct mis-oriented loops.&lt;p&gt;
                 * &lt;p&gt;Orientation is computed assuming the piecewise polygon is finite,
                 * i.e. the outermost loops have their exterior side facing points at
                 * infinity, and hence are oriented counter-clockwise. The orientation of
                 * internal loops is computed as the reverse of the orientation of
                 * their immediate surrounding loop.&lt;/p&gt;                
                <@version>
                    n $Id: NestedLoops.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="loop" type="Vector2D[]" line="49"/>
            <javadoc line="49">
                Boundary loop.                
            </javadoc>
            <declaration name="surrounded" type="ArrayList&lt;NestedLoops&gt;" line="52"/>
            <javadoc line="52">
                Surrounded loops.                
            </javadoc>
            <declaration name="polygon" type="Region&lt;Euclidean2D&gt;" line="55"/>
            <javadoc line="55">
                Polygon enclosing a finite region.                
            </javadoc>
            <declaration name="originalIsClockwise" type="boolean" line="58"/>
            <javadoc line="58">
                Indicator for original loop orientation.                
            </javadoc>
            <javadoc line="61">
                Simple Constructor.
                 * &lt;p&gt;Build an empty tree of nested loops. This instance will become
                 * the root node of a complete tree, it is not associated with any
                 * loop by itself, the outermost loops are in the root tree child
                 * nodes.&lt;/p&gt;                
            </javadoc>
            <method name="NestedLoops" type="constructor" line="67"/>
            <javadoc line="71">
                Constructor.
                 * &lt;p&gt;Build a tree node with neither parent nor children&lt;/p&gt;                
                <@param>
                    m loop boundary loop (will be reversed in place if needed)                    
                </@param>
                <@exception>
                    n MathIllegalArgumentException if an outline has an open boundary loop                    
                </@exception>
            </javadoc>
            <method name="NestedLoops" type="constructor" line="76">
                <comment line="77">
                    build the polygon defined by the loop                    
                </comment>
                <comment line="77">
                    ensure the polygon encloses a finite region of the plane                    
                </comment>
                <scope line="78"/>
                <declaration name="edges" type="ArrayList&lt;SubHyperplane&lt;Euclidean2D&gt;&gt;" line="86"/>
                <declaration name="current" type="Vector2D" line="87"/>
                <scope line="88">
                    <declaration name="previous" type="Vector2D" line="89"/>
                    <declaration name="line" type="Line" line="91"/>
                    <declaration name="region" type="IntervalsSet" line="92"/>
                </scope>
                <scope line="99"/>
                <scope line="102"/>
            </method>
            <javadoc line="108">
                Add a loop in a tree.                
                <@param>
                    m bLoop boundary loop (will be reversed in place if needed)                    
                </@param>
                <@exception>
                    n MathIllegalArgumentException if an outline has crossing
                     * boundary loops or open boundary loops                    
                </@exception>
            </javadoc>
            <method name="add" type="void" line="113"/>
            <javadoc line="117">
                Add a loop in a tree.                
                <@param>
                    m node boundary loop (will be reversed in place if needed)                    
                </@param>
                <@exception>
                    n MathIllegalArgumentException if an outline has boundary
                     * loops that cross each other                    
                </@exception>
            </javadoc>
            <method name="add" type="void" line="122">
                <comment line="123">
                    check if we can go deeper in the tree                    
                </comment>
                <comment line="123">
                    check if we can absorb some of the instance children                    
                </comment>
                <comment line="123">
                    we should be separate from the remaining children                    
                </comment>
                <scope line="125">
                    <scope line="126"/>
                </scope>
                <scope line="133">
                    <declaration name="child" type="NestedLoops" line="134"/>
                    <scope line="135"/>
                </scope>
                <declaration name="factory" type="RegionFactory&lt;Euclidean2D&gt;" line="142"/>
                <scope line="143">
                    <scope line="144"/>
                </scope>
            </method>
            <javadoc line="153">
                Correct the orientation of the loops contained in the tree.
                 * &lt;p&gt;This is this method that really inverts the loops that where
                 * provided through the {@link #add(Vector2D[]) add} method if
                 * they are mis-oriented&lt;/p&gt;                
            </javadoc>
            <method name="correctOrientation" type="void" line="158">
                <scope line="159"/>
            </method>
            <javadoc line="164">
                Set the loop orientation.                
                <@param>
                    m clockwise if true, the loop should be set to clockwise
                     * orientation                    
                </@param>
            </javadoc>
            <method name="setClockWise" type="void" line="168">
                <comment line="169">
                    go deeper in the tree                    
                </comment>
                <scope line="170">
                    <declaration name="min" type="int" line="172"/>
                    <declaration name="max" type="int" line="173"/>
                    <scope line="174">
                        <declaration name="tmp" type="Vector2D" line="175"/>
                    </scope>
                </scope>
                <scope line="182"/>
            </method>
        </class>
    </source>