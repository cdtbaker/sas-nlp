<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.random">
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="StableRandomGenerator" line="24">
            <implements interface="NormalizedRandomGenerator"/>
            <javadoc line="24">
                &lt;p&gt;This class provides a stable normalized random generator. It samples from a stable
                  distribution with location parameter 0 and scale 1.&lt;/p&gt;
                  &lt;p&gt;The implementation uses the Chambers-Mallows-Stuck method as described in
                  &lt;i&gt;Handbook of computational statistics: concepts and methods&lt;/i&gt; by
                  James E. Gentle, Wolfgang H&amp;auml;rdle, Yuichi Mori.&lt;/p&gt;                
                <@version>
                    n $Id: StableRandomGenerator.java 1394763 2012-10-05 19:54:00Z psteitz $                    
                </@version>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="generator" type="RandomGenerator" line="36"/>
            <javadoc line="36">
                Underlying generator.                
            </javadoc>
            <declaration name="alpha" type="double" line="39"/>
            <javadoc line="39">
                stability parameter                
            </javadoc>
            <declaration name="beta" type="double" line="42"/>
            <javadoc line="42">
                skewness parameter                
            </javadoc>
            <declaration name="zeta" type="double" line="45"/>
            <javadoc line="45">
                cache of expression value used in generation                
            </javadoc>
            <javadoc line="48">
                Create a new generator.                
                <@param>
                    m generator underlying random generator to use                    
                </@param>
                <@param>
                    m alpha Stability parameter. Must be in range (0, 2]                    
                </@param>
                <@param>
                    m beta Skewness parameter. Must be in range [-1, 1]                    
                </@param>
                <@throws>
                    s NullArgumentException if generator is null                    
                </@throws>
                <@throws>
                    s OutOfRangeException if {@code alpha <= 0} or {@code alpha > 2}or {@code beta < -1} or {@code beta > 1}                    
                </@throws>
            </javadoc>
            <method name="StableRandomGenerator" type="constructor" line="60">
                <params>
                    <param name="generator" type="RandomGenerator"/>
                    <param name="alpha" type="double"/>
                    <param name="beta" type="double"/>
                </params>
                <scope line="61"/>
                <scope line="65"/>
                <scope line="70"/>
                <scope line="78"/>
                <scope line="80"/>
            </method>
            <javadoc line="85">
                Generate a random scalar with zero location and unit scale.                
                <@return>
                    n a random scalar with zero location and unit scale                    
                </@return>
            </javadoc>
            <method name="nextNormalizedDouble" type="double" line="90">
                <comment line="91">
                    we need 2 uniform random numbers to calculate omega and phi                    
                </comment>
                <comment line="91">
                    Normal distribution case (Box-Muller algorithm)                    
                </comment>
                <comment line="91">
                    when beta = 0, zeta is zero as well                    
                </comment>
                <comment line="91">
                    Thus we can exclude it from the formula                    
                </comment>
                <declaration name="omega" type="double" line="92"/>
                <declaration name="phi" type="double" line="93"/>
                <scope line="96"/>
                <declaration name="x" type="double" line="100"/>
                <scope line="103">
                    <scope line="105"/>
                    <scope line="107"/>
                </scope>
                <scope line="113">
                    <declaration name="cosPhi" type="double" line="115"/>
                    <scope line="117">
                        <declaration name="alphaPhi" type="double" line="118"/>
                        <declaration name="invAlphaPhi" type="double" line="119"/>
                    </scope>
                    <scope line="123">
                        <declaration name="betaPhi" type="double" line="124"/>
                        <scope line="128"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>