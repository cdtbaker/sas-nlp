<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.special.Gamma"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <class name="GammaDistribution" extends="AbstractRealDistribution" line="26">
            <javadoc line="26">
                Implementation of the Gamma distribution.                
                <@see>
                    e <a href="http://en.wikipedia.org/wiki/Gamma_distribution">Gamma distribution (Wikipedia)</a>                    
                </@see>
                <@see>
                    e <a href="http://mathworld.wolfram.com/GammaDistribution.html">Gamma distribution (MathWorld)</a>                    
                </@see>
                <@version>
                    n $Id: GammaDistribution.java 1422195 2012-12-15 06:45:18Z psteitz $                    
                </@version>
            </javadoc>
            <declaration name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" type="double" line="34"/>
            <javadoc line="34">
                Default inverse cumulative probability accuracy.                
                <@since>
                    e 2.1                    
                </@since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="39"/>
            <javadoc line="39">
                Serializable version identifier.                
            </javadoc>
            <declaration name="shape" type="double" line="41"/>
            <javadoc line="41">
                The shape parameter.                
            </javadoc>
            <declaration name="scale" type="double" line="43"/>
            <javadoc line="43">
                The scale parameter.                
            </javadoc>
            <declaration name="shiftedShape" type="double" line="45"/>
            <javadoc line="45">
                The constant value of {@code shape + g + 0.5}, where {@code g} is the
                 * Lanczos constant {@link Gamma#LANCZOS_G}.                
            </javadoc>
            <declaration name="densityPrefactor1" type="double" line="50"/>
            <javadoc line="50">
                The constant value of{@code shape / scale * sqrt(e / (2 * pi * (shape + g + 0.5))) / L(shape)},
                 * where {@code L(shape)} is the Lanczos approximation returned by{@link Gamma#lanczos(double)}. This prefactor is used in{@link #density(double)}, when no overflow occurs with the natural
                 * calculation.                
            </javadoc>
            <declaration name="densityPrefactor2" type="double" line="59"/>
            <javadoc line="59">
                The constant value of{@code shape * sqrt(e / (2 * pi * (shape + g + 0.5))) / L(shape)},
                 * where {@code L(shape)} is the Lanczos approximation returned by{@link Gamma#lanczos(double)}. This prefactor is used in{@link #density(double)}, when overflow occurs with the natural
                 * calculation.                
            </javadoc>
            <declaration name="minY" type="double" line="68"/>
            <javadoc line="68">
                Lower bound on {@code y = x / scale} for the selection of the computation
                 * method in {@link #density(double)}. For {@code y &lt;= minY}, the natural
                 * calculation overflows.                
            </javadoc>
            <declaration name="maxLogY" type="double" line="74"/>
            <javadoc line="74">
                Upper bound on {@code log(y)} ({@code y = x / scale}) for the selection
                 * of the computation method in {@link #density(double)}. For{@code log(y) &gt;= maxLogY}, the natural calculation overflows.                
            </javadoc>
            <declaration name="solverAbsoluteAccuracy" type="double" line="80"/>
            <javadoc line="80">
                Inverse cumulative probability accuracy.                
            </javadoc>
            <javadoc line="83">
                Creates a new gamma distribution with specified values of the shape and
                 * scale parameters.                
                <@param>
                    m shape the shape parameter                    
                </@param>
                <@param>
                    m scale the scale parameter                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if {@code shape <= 0} or{@code scale <= 0}.                    
                </@throws>
            </javadoc>
            <method name="GammaDistribution" type="constructor" line="92"/>
            <javadoc line="96">
                Creates a new gamma distribution with specified values of the shape and
                 * scale parameters.                
                <@param>
                    m shape the shape parameter                    
                </@param>
                <@param>
                    m scale the scale parameter                    
                </@param>
                <@param>
                    m inverseCumAccuracy the maximum absolute error in inverse
                     * cumulative probability estimates (defaults to{@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if {@code shape <= 0} or{@code scale <= 0}.                    
                </@throws>
                <@since>
                    e 2.1                    
                </@since>
            </javadoc>
            <method name="GammaDistribution" type="constructor" line="110"/>
            <javadoc line="114">
                Creates a Gamma distribution.                
                <@param>
                    m rng Random number generator.                    
                </@param>
                <@param>
                    m shape the shape parameter                    
                </@param>
                <@param>
                    m scale the scale parameter                    
                </@param>
                <@param>
                    m inverseCumAccuracy the maximum absolute error in inverse
                     * cumulative probability estimates (defaults to{@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if {@code shape <= 0} or{@code scale <= 0}.                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="GammaDistribution" type="constructor" line="131">
                <scope line="134"/>
                <scope line="137"/>
                <declaration name="aux" type="double" line="145"/>
            </method>
            <javadoc line="154">
                Returns the shape parameter of {@code this} distribution.                
                <@return>
                    n the shape parameter                    
                </@return>
                <@deprecated>
                    d as of version 3.1, {@link #getShape()} should be preferred.
                     * This method will be removed in version 4.0.                    
                </@deprecated>
            </javadoc>
            <method name="getAlpha" type="double" line="162"/>
            <javadoc line="166">
                Returns the shape parameter of {@code this} distribution.                
                <@return>
                    n the shape parameter                    
                </@return>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="getShape" type="double" line="172"/>
            <javadoc line="176">
                Returns the scale parameter of {@code this} distribution.                
                <@return>
                    n the scale parameter                    
                </@return>
                <@deprecated>
                    d as of version 3.1, {@link #getScale()} should be preferred.
                     * This method will be removed in version 4.0.                    
                </@deprecated>
            </javadoc>
            <method name="getBeta" type="double" line="184"/>
            <javadoc line="188">
                Returns the scale parameter of {@code this} distribution.                
                <@return>
                    n the scale parameter                    
                </@return>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="getScale" type="double" line="194"/>
            <javadoc line="198">
                {@inheritDoc}                
            </javadoc>
            <method name="density" type="double" line="199">
                <comment line="200">
                    The present method must return the value of
                    
                         1       x a     - x
                     ---------- (-)  exp(---)
                     x Gamma(a)  b        b
                    
                     where a is the shape parameter, and b the scale parameter.
                     Substituting the Lanczos approximation of Gamma(a) leads to the
                     following expression of the density
                    
                     a              e            1         y      a
                     - sqrt(------------------) ---- (-----------)  exp(a - y + g),
                     x      2 pi (a + g + 0.5)  L(a)  a + g + 0.5
                    
                     where y = x  b. The above formula is the &quot;natural&quot; computation, which
                     is implemented when no overflow is likely to occur. If overflow occurs
                     with the natural computation, the following identity is used. It is
                     based on the BOOST library
                     http:www.boost.orgdoclibs1_35_0libsmathdocsf_and_disthtmlmath_toolkitspecialsf_gammaigamma.html
                     Formula (15) needs adaptations, which are detailed below.
                    
                           y      a
                     (-----------)  exp(a - y + g)
                      a + g + 0.5
                                                  y - a - g - 0.5    y (g + 0.5)
                                   = exp(a log1pm(---------------) - ----------- + g),
                                                    a + g + 0.5      a + g + 0.5
                    
                      where log1pm(z) = log(1 + z) - z. Therefore, the value to be
                      returned is
                    
                     a              e            1
                     - sqrt(------------------) ----
                     x      2 pi (a + g + 0.5)  L(a)
                                                  y - a - g - 0.5    y (g + 0.5)
                                    exp(a log1pm(---------------) - ----------- + g).
                                                    a + g + 0.5      a + g + 0.5
                    
                    if (x &lt; 0) {                    
                </comment>
                <comment line="200">
                                        
                </comment>
                <scope line="238"/>
                <declaration name="y" type="double" line="241"/>
                <scope line="242">
                    <declaration name="aux1" type="double" line="246"/>
                    <declaration name="aux2" type="double" line="247"/>
                    <declaration name="aux3" type="double" line="248"/>
                </scope>
            </method>
            <javadoc line="259">
                {@inheritDoc}The implementation of this method is based on:
                 * &lt;ul&gt;
                 * &lt;li&gt;
                 * &lt;a href=&quot;http://mathworld.wolfram.com/Chi-SquaredDistribution.html&quot;&gt;
                 * Chi-Squared Distribution&lt;/a&gt;, equation (9).
                 * &lt;/li&gt;
                 * &lt;li&gt;Casella, G., &amp; Berger, R. (1990). &lt;i&gt;Statistical Inference&lt;/i&gt;.
                 * Belmont, CA: Duxbury Press.
                 * &lt;/li&gt;
                 * &lt;/ul&gt;                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="273">
                <declaration name="ret" type="double" line="274"/>
                <scope line="276"/>
                <scope line="278"/>
            </method>
            <javadoc line="285">
                {@inheritDoc}                
            </javadoc>
            <method name="getSolverAbsoluteAccuracy" type="double" line="287"/>
            <javadoc line="291">
                {@inheritDoc}For shape parameter {@code alpha} and scale parameter {@code beta}, the
                 * mean is {@code alpha * beta}.                
            </javadoc>
            <method name="getNumericalMean" type="double" line="297"/>
            <javadoc line="301">
                {@inheritDoc}For shape parameter {@code alpha} and scale parameter {@code beta}, the
                 * variance is {@code alpha * beta^2}.                
                <@return>
                    n {@inheritDoc}                    
                </@return>
            </javadoc>
            <method name="getNumericalVariance" type="double" line="309"/>
            <javadoc line="313">
                {@inheritDoc}The lower bound of the support is always 0 no matter the parameters.                
                <@return>
                    n lower bound of the support (always 0)                    
                </@return>
            </javadoc>
            <method name="getSupportLowerBound" type="double" line="320"/>
            <javadoc line="324">
                {@inheritDoc}The upper bound of the support is always positive infinity
                 * no matter the parameters.                
                <@return>
                    n upper bound of the support (always Double.POSITIVE_INFINITY)                    
                </@return>
            </javadoc>
            <method name="getSupportUpperBound" type="double" line="332"/>
            <javadoc line="336">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportLowerBoundInclusive" type="boolean" line="337"/>
            <javadoc line="341">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportUpperBoundInclusive" type="boolean" line="342"/>
            <javadoc line="346">
                {@inheritDoc}The support of this distribution is connected.                
                <@return>
                    n {@code true}                    
                </@return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="353"/>
            <javadoc line="357">
                &lt;p&gt;This implementation uses the following algorithms: &lt;/p&gt;
                 * &lt;p&gt;For 0 &lt; shape &lt; 1: &lt;br/&gt;
                 * Ahrens, J. H. and Dieter, U., &lt;i&gt;Computer methods for
                 * sampling from gamma, beta, Poisson and binomial distributions.&lt;/i&gt;
                 * Computing, 12, 223-246, 1974.&lt;/p&gt;
                 * &lt;p&gt;For shape &gt;= 1: &lt;br/&gt;
                 * Marsaglia and Tsang, &lt;i&gt;A Simple Method for Generating
                 * Gamma Variables.&lt;/i&gt; ACM Transactions on Mathematical Software,
                 * Volume 26 Issue 3, September, 2000.&lt;/p&gt;                
                <@return>
                    n random value sampled from the Gamma(shape, scale) distribution                    
                </@return>
            </javadoc>
            <method name="sample" type="double" line="373">
                <comment line="374">
                    Now shape &gt;= 1                    
                </comment>
                <scope line="374">
                    <scope line="377">
                        <declaration name="u" type="double" line="379"/>
                        <declaration name="bGS" type="double" line="380"/>
                        <declaration name="p" type="double" line="381"/>
                        <scope line="383">
                            <declaration name="x" type="double" line="386"/>
                            <declaration name="u2" type="double" line="387"/>
                            <scope line="389"/>
                            <scope line="392"/>
                        </scope>
                        <scope line="395">
                            <declaration name="x" type="double" line="398"/>
                            <declaration name="u2" type="double" line="399"/>
                            <scope line="401"/>
                            <scope line="404"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="d" type="double" line="413"/>
                <declaration name="c" type="double" line="414"/>
                <scope line="416">
                    <declaration name="x" type="double" line="417"/>
                    <declaration name="v" type="double" line="418"/>
                    <scope line="420"/>
                    <declaration name="x2" type="double" line="424"/>
                    <declaration name="u" type="double" line="425"/>
                    <scope line="428"/>
                    <scope line="432"/>
                </scope>
            </method>
        </class>
    </source>