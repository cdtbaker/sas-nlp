<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.complex">
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="ComplexUtils" line="24">
            <javadoc line="24">
                Static implementations of common{@link org.apache.commons.math3.complex.Complex} utilities functions.                
                <@version>
                    n $Id: ComplexUtils.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <javadoc line="32">
                Default constructor.                
            </javadoc>
            <method name="ComplexUtils" type="constructor" line="35"/>
            <javadoc line="37">
                Creates a complex number from the given polar representation.
                 * &lt;p&gt;
                 * The value returned is &lt;code&gt;r&amp;middot;e&lt;sup&gt;i&amp;middot;theta&lt;/sup&gt;&lt;/code&gt;,
                 * computed as &lt;code&gt;r&amp;middot;cos(theta) + r&amp;middot;sin(theta)i&lt;/code&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * If either &lt;code&gt;r&lt;/code&gt; or &lt;code&gt;theta&lt;/code&gt; is NaN, or
                 * &lt;code&gt;theta&lt;/code&gt; is infinite, {@link Complex#NaN} is returned.&lt;/p&gt;
                 * &lt;p&gt;
                 * If &lt;code&gt;r&lt;/code&gt; is infinite and &lt;code&gt;theta&lt;/code&gt; is finite,
                 * infinite or NaN values may be returned in parts of the result, following
                 * the rules for double arithmetic.&lt;pre&gt;
                 * Examples:
                 * &lt;code&gt;
                 * polar2Complex(INFINITY, &amp;pi;/4) = INFINITY + INFINITY i
                 * polar2Complex(INFINITY, 0) = INFINITY + NaN i
                 * polar2Complex(INFINITY, -&amp;pi;/4) = INFINITY - INFINITY i
                 * polar2Complex(INFINITY, 5&amp;pi;/4) = -INFINITY - INFINITY i &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;                
                <@param>
                    m r the modulus of the complex number to create                    
                </@param>
                <@param>
                    m theta  the argument of the complex number to create                    
                </@param>
                <@return>
                    n <code>r&middot;e<sup>i&middot;theta</sup></code>                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if {@code r} is negative.                    
                </@throws>
                <@since>
                    e 1.1                    
                </@since>
            </javadoc>
            <method name="polar2Complex" type="Complex" line="62">
                <scope line="63"/>
            </method>
            <javadoc line="70">
                Convert an array of primitive doubles to an array of {@code Complex} objects.                
                <@param>
                    m real Array of numbers to be converted to their {@code Complex}equivalent.                    
                </@param>
                <@return>
                    n an array of {@code Complex} objects.                    
                </@return>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="convertToComplex" type="Complex[]" line="79">
                <declaration name="c" type="Complex" line="80"/>
                <scope line="81"/>
            </method>
        </class>
    </source>