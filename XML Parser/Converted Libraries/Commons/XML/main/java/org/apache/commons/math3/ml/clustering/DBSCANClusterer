<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ml.clustering">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.ml.distance.DistanceMeasure"/>
        <import package="org.apache.commons.math3.ml.distance.EuclideanDistance"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="DBSCANClusterer" extends="Clusterer<T>" line="33">
            <javadoc line="33">
                DBSCAN (density-based spatial clustering of applications with noise) algorithm.
                 * &lt;p&gt;
                 * The DBSCAN algorithm forms clusters based on the idea of density connectivity, i.e.
                 * a point p is density connected to another point q, if there exists a chain of
                 * points p&lt;sub&gt;i&lt;/sub&gt;, with i = 1 .. n and p&lt;sub&gt;1&lt;/sub&gt; = p and p&lt;sub&gt;n&lt;/sub&gt; = q,
                 * such that each pair &amp;lt;p&lt;sub&gt;i&lt;/sub&gt;, p&lt;sub&gt;i+1&lt;/sub&gt;&amp;gt; is directly density-reachable.
                 * A point q is directly density-reachable from point p if it is in the &amp;epsilon;-neighborhood
                 * of this point.
                 * &lt;p&gt;
                 * Any point that is not density-reachable from a formed cluster is treated as noise, and
                 * will thus not be present in the result.
                 * &lt;p&gt;
                 * The algorithm requires two parameters:
                 * &lt;ul&gt;
                 * &lt;li&gt;eps: the distance that defines the &amp;epsilon;-neighborhood of a point
                 * &lt;li&gt;minPoints: the minimum number of density-connected points required to form a cluster
                 * &lt;/ul&gt;                
                <@param>
                    m<T>
                     *  type of the points to cluster                    
                </@param>
                <@see>
                    e <a href="http://en.wikipedia.org/wiki/DBSCAN">DBSCAN (wikipedia)</a>                    
                </@see>
                <@see>
                    e <a href="http://www.dbs.ifi.lmu.de/Publikationen/Papers/KDD-96.final.frame.pdf">
                     * A Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise</a>                    
                </@see>
                <@version>
                    n $Id: DBSCANClusterer.java 1461866 2013-03-27 21:54:36Z tn $                    
                </@version>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <declaration name="eps" type="double" line="61"/>
            <javadoc line="61">
                Maximum radius of the neighborhood to be considered.                
            </javadoc>
            <declaration name="minPts" type="int" line="64"/>
            <javadoc line="64">
                Minimum number of points needed for a cluster.                
            </javadoc>
            <javadoc line="67">
                Status of a point during the clustering process.                
            </javadoc>
            <javadoc line="69">
                The point has is considered to be noise.                
            </javadoc>
            <javadoc line="71">
                The point is already part of a cluster.                
            </javadoc>
            <javadoc line="75">
                Creates a new instance of a DBSCANClusterer.
                 * &lt;p&gt;
                 * The euclidean distance will be used as default distance measure.                
                <@param>
                    m eps maximum radius of the neighborhood to be considered                    
                </@param>
                <@param>
                    m minPts minimum number of points needed for a cluster                    
                </@param>
                <@throws>
                    s NotPositiveException if {@code eps < 0.0} or {@code minPts < 0}                    
                </@throws>
            </javadoc>
            <method name="DBSCANClusterer" type="constructor" line="85"/>
            <javadoc line="89">
                Creates a new instance of a DBSCANClusterer.                
                <@param>
                    m eps maximum radius of the neighborhood to be considered                    
                </@param>
                <@param>
                    m minPts minimum number of points needed for a cluster                    
                </@param>
                <@param>
                    m measure the distance measure to use                    
                </@param>
                <@throws>
                    s NotPositiveException if {@code eps < 0.0} or {@code minPts < 0}                    
                </@throws>
            </javadoc>
            <method name="DBSCANClusterer" type="constructor" line="98">
                <scope line="101"/>
                <scope line="104"/>
            </method>
            <javadoc line="111">
                Returns the maximum radius of the neighborhood to be considered.                
                <@return>
                    n maximum radius of the neighborhood                    
                </@return>
            </javadoc>
            <method name="getEps" type="double" line="115"/>
            <javadoc line="119">
                Returns the minimum number of points needed for a cluster.                
                <@return>
                    n minimum number of points needed for a cluster                    
                </@return>
            </javadoc>
            <method name="getMinPts" type="int" line="123"/>
            <javadoc line="127">
                Performs DBSCAN cluster analysis.                
                <@param>
                    m points the points to cluster                    
                </@param>
                <@return>
                    n the list of clusters                    
                </@return>
                <@throws>
                    s NullArgumentException if the data points are null                    
                </@throws>
            </javadoc>
            <method name="cluster" type="List<Cluster<T>>" line="134">
                <comment line="135">
                    sanity checks                    
                </comment>
                <declaration name="clusters" type="List&lt;Cluster&lt;T&gt;&gt;" line="139"/>
                <declaration name="visited" type="Map&lt;Clusterable,PointStatus&gt;" line="140"/>
                <scope line="142">
                    <scope line="143"/>
                    <declaration name="neighbors" type="List&lt;T&gt;" line="146"/>
                    <scope line="147">
                        <declaration name="cluster" type="Cluster&lt;T&gt;" line="149"/>
                    </scope>
                    <scope line="151"/>
                </scope>
            </method>
            <javadoc line="159">
                Expands the cluster to include density-reachable items.                
                <@param>
                    m cluster Cluster to expand                    
                </@param>
                <@param>
                    m point Point to add to cluster                    
                </@param>
                <@param>
                    m neighbors List of neighbors                    
                </@param>
                <@param>
                    m points the data set                    
                </@param>
                <@param>
                    m visited the set of already visited points                    
                </@param>
                <@return>
                    n the expanded cluster                    
                </@return>
            </javadoc>
            <method name="expandCluster" type="Cluster<T>" line="173">
                <declaration name="seeds" type="List&lt;T&gt;" line="177"/>
                <declaration name="index" type="int" line="178"/>
                <scope line="179">
                    <declaration name="current" type="T" line="180"/>
                    <declaration name="pStatus" type="PointStatus" line="181"/>
                    <scope line="183">
                        <declaration name="currentNeighbors" type="List&lt;T&gt;" line="184"/>
                        <scope line="185"/>
                    </scope>
                    <scope line="190"/>
                </scope>
            </method>
            <javadoc line="200">
                Returns a list of density-reachable neighbors of a {@code point}.                
                <@param>
                    m point the point to look for                    
                </@param>
                <@param>
                    m points possible neighbors                    
                </@param>
                <@return>
                    n the List of neighbors                    
                </@return>
            </javadoc>
            <method name="getNeighbors" type="List<T>" line="207">
                <declaration name="neighbors" type="List&lt;T&gt;" line="208"/>
                <scope line="209">
                    <scope line="210"/>
                </scope>
            </method>
            <javadoc line="217">
                Merges two lists together.                
                <@param>
                    m one first list                    
                </@param>
                <@param>
                    m two second list                    
                </@param>
                <@return>
                    n merged lists                    
                </@return>
            </javadoc>
            <method name="merge" type="List<T>" line="224">
                <declaration name="oneSet" type="Set&lt;T&gt;" line="225"/>
                <scope line="226">
                    <scope line="227"/>
                </scope>
            </method>
        </class>
    </source>