<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.regression">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.distribution.TDistribution"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="SimpleRegression" line="29">
            <comment line="30">
                ---------------------Public methods--------------------------------------                
            </comment>
            <comment line="30">
                ---------------------Private methods-----------------------------------                
            </comment>
            <implements interface="Serializable"/>
            <implements interface="UpdatingMultipleLinearRegression"/>
            <javadoc line="29">
                Estimates an ordinary least squares regression model
                  with one independent variable.
                  &lt;p&gt;
                  &lt;code&gt; y = intercept + slope  x  &lt;/code&gt;&lt;/p&gt;
                  &lt;p&gt;
                  Standard errors for &lt;code&gt;intercept&lt;/code&gt; and &lt;code&gt;slope&lt;/code&gt; are
                  available as well as ANOVA, r-square and Pearson&apos;s r statistics.&lt;/p&gt;
                  &lt;p&gt;
                  Observations (x,y pairs) can be added to the model one at a time or they
                  can be provided in a 2-dimensional array.  The observations are not stored
                  in memory, so there is no limit to the number of observations that can be
                  added to the model.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Usage Notes&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt; When there are fewer than two observations in the model, or when
                  there is no variation in the x values (i.e. all x values are the same)
                  all statistics return &lt;code&gt;NaN&lt;/code&gt;. At least two observations with
                  different x coordinates are required to estimate a bivariate regression
                  model.
                  &lt;/li&gt;
                  &lt;li&gt; Getters for the statistics always compute values based on the current
                  set of observations -- i.e., you can get statistics, then add more data
                  and get updated statistics without using a new instance.  There is no
                  &quot;compute&quot; method that updates all statistics.  Each of the getters performs
                  the necessary computations to return the requested statistic.
                  &lt;/li&gt;
                  &lt;li&gt; The intercept term may be suppressed by passing {@code false} to
                  the {@link #SimpleRegression(boolean)} constructor.  When the{@code hasIntercept} property is false, the model is estimated without a
                  constant term and {@link #getIntercept()} returns {@code 0}.&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <@version>
                    n $Id: SimpleRegression.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="66"/>
            <javadoc line="66">
                Serializable version identifier                
            </javadoc>
            <declaration name="sumX" type="double" line="69"/>
            <javadoc line="69">
                sum of x values                
            </javadoc>
            <declaration name="sumXX" type="double" line="72"/>
            <javadoc line="72">
                total variation in x (sum of squared deviations from xbar)                
            </javadoc>
            <declaration name="sumY" type="double" line="75"/>
            <javadoc line="75">
                sum of y values                
            </javadoc>
            <declaration name="sumYY" type="double" line="78"/>
            <javadoc line="78">
                total variation in y (sum of squared deviations from ybar)                
            </javadoc>
            <declaration name="sumXY" type="double" line="81"/>
            <javadoc line="81">
                sum of products                
            </javadoc>
            <declaration name="n" type="long" line="84"/>
            <javadoc line="84">
                number of observations                
            </javadoc>
            <declaration name="xbar" type="double" line="87"/>
            <javadoc line="87">
                mean of accumulated x values, used in updating formulas                
            </javadoc>
            <declaration name="ybar" type="double" line="90"/>
            <javadoc line="90">
                mean of accumulated y values, used in updating formulas                
            </javadoc>
            <declaration name="hasIntercept" type="boolean" line="93"/>
            <javadoc line="93">
                include an intercept or not                
            </javadoc>
            <javadoc line="97">
                Create an empty SimpleRegression instance                
            </javadoc>
            <method name="SimpleRegression" type="constructor" line="100"/>
            <javadoc line="103">
                Create a SimpleRegression instance, specifying whether or not to estimate
                  an intercept.
                  &lt;p&gt;Use {@code false} to estimate a model with no intercept.  When the{@code hasIntercept} property is false, the model is estimated without a
                  constant term and {@link #getIntercept()} returns {@code 0}.&lt;/p&gt;                
                <@param>
                    m includeIntercept whether or not to include an intercept term in
                      the regression model                    
                </@param>
            </javadoc>
            <method name="SimpleRegression" type="constructor" line="114">
                <params>
                    <param name="includeIntercept" type="boolean"/>
                </params>
            </method>
            <javadoc line="119">
                Adds the observation (x,y) to the regression data set.
                  &lt;p&gt;
                  Uses updating formulas for means and sums of squares defined in
                  &quot;Algorithms for Computing the Sample Variance: Analysis and
                  Recommendations&quot;, Chan, T.F., Golub, G.H., and LeVeque, R.J.
                  1983, American Statistician, vol. 37, pp. 242-247, referenced in
                  Weisberg, S. &quot;Applied Linear Regression&quot;. 2nd Ed. 1985.&lt;/p&gt;                
                <@param>
                    m x independent variable value                    
                </@param>
                <@param>
                    m y dependent variable value                    
                </@param>
            </javadoc>
            <method name="addData" type="void" line="132">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="133"/>
                <scope line="136">
                    <scope line="137">
                        <declaration name="fact1" type="double" line="138"/>
                        <declaration name="fact2" type="double" line="139"/>
                        <declaration name="dx" type="double" line="140"/>
                        <declaration name="dy" type="double" line="141"/>
                    </scope>
                </scope>
                <scope line="149"/>
            </method>
            <javadoc line="160">
                Removes the observation (x,y) from the regression data set.
                  &lt;p&gt;
                  Mirrors the addData method.  This method permits the use of
                  SimpleRegression instances in streaming mode where the regression
                  is applied to a sliding &quot;window&quot; of observations, however the caller is
                  responsible for maintaining the set of observations in the window.&lt;/p&gt;
                  The method has no effect if there are no points of data (i.e. n=0)                
                <@param>
                    m x independent variable value                    
                </@param>
                <@param>
                    m y dependent variable value                    
                </@param>
            </javadoc>
            <method name="removeData" type="void" line="173">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="174">
                    <scope line="175">
                        <declaration name="fact1" type="double" line="176"/>
                        <declaration name="fact2" type="double" line="177"/>
                        <declaration name="dx" type="double" line="178"/>
                        <declaration name="dy" type="double" line="179"/>
                    </scope>
                    <scope line="185">
                        <declaration name="fact1" type="double" line="186"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="199">
                Adds the observations represented by the elements in
                  &lt;code&gt;data&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;code&gt;(data[0][0],data[0][1])&lt;/code&gt; will be the first observation, then
                  &lt;code&gt;(data[1][0],data[1][1])&lt;/code&gt;, etc.&lt;/p&gt;
                  &lt;p&gt;
                  This method does not replace data that has already been added.  The
                  observations represented by &lt;code&gt;data&lt;/code&gt; are added to the existing
                  dataset.&lt;/p&gt;
                  &lt;p&gt;
                  To replace all data, use &lt;code&gt;clear()&lt;/code&gt; before adding the new
                  data.&lt;/p&gt;                
                <@param>
                    m data array of observations to be added                    
                </@param>
                <@throws>
                    s ModelSpecificationException if the length of {@code data[i]} is not
                      greater than or equal to 2                    
                </@throws>
            </javadoc>
            <method name="addData" type="void" line="217">
                <params>
                    <param name="data" type="double[][]"/>
                </params>
                <scope line="218">
                    <scope line="219"/>
                </scope>
            </method>
            <javadoc line="227">
                Adds one observation to the regression model.                
                <@param>
                    m x the independent variables which form the design matrix                    
                </@param>
                <@param>
                    m y the dependent or response variable                    
                </@param>
                <@throws>
                    s ModelSpecificationException if the length of {@code x} does not equal
                      the number of independent variables in the model                    
                </@throws>
            </javadoc>
            <method name="addObservation" type="void" line="236">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="237"/>
            </method>
            <javadoc line="243">
                Adds a series of observations to the regression model. The lengths of
                  x and y must be the same and x must be rectangular.                
                <@param>
                    m x a series of observations on the independent variables                    
                </@param>
                <@param>
                    m y a series of observations on the dependent variable
                      The length of x and y must be the same                    
                </@param>
                <@throws>
                    s ModelSpecificationException if {@code x} is not rectangular, does not match
                      the length of {@code y} or does not contain sufficient data to estimate the model                    
                </@throws>
            </javadoc>
            <method name="addObservations" type="void" line="253">
                <params>
                    <param name="x" type="double[][]"/>
                    <param name="y" type="double[]"/>
                </params>
                <scope line="254"/>
                <declaration name="obsOk" type="boolean" line="260"/>
                <scope line="261">
                    <scope line="262"/>
                </scope>
                <scope line="266"/>
                <scope line="271"/>
            </method>
            <javadoc line="276">
                Removes observations represented by the elements in &lt;code&gt;data&lt;/code&gt;.
                  &lt;p&gt;
                  If the array is larger than the current n, only the first n elements are
                  processed.  This method permits the use of SimpleRegression instances in
                  streaming mode where the regression is applied to a sliding &quot;window&quot; of
                  observations, however the caller is responsible for maintaining the set
                  of observations in the window.&lt;/p&gt;
                  &lt;p&gt;
                  To remove all data, use &lt;code&gt;clear()&lt;/code&gt;.&lt;/p&gt;                
                <@param>
                    m data array of observations to be removed                    
                </@param>
            </javadoc>
            <method name="removeData" type="void" line="289">
                <params>
                    <param name="data" type="double[][]"/>
                </params>
                <scope line="290"/>
            </method>
            <javadoc line="295">
                Clears all data from the model.                
            </javadoc>
            <method name="clear" type="void" line="298"/>
            <javadoc line="307">
                Returns the number of observations that have been added to the model.                
                <@return>
                    n n number of observations that have been added.                    
                </@return>
            </javadoc>
            <method name="getN" type="long" line="312"/>
            <javadoc line="316">
                Returns the &quot;predicted&quot; &lt;code&gt;y&lt;/code&gt; value associated with the
                  supplied &lt;code&gt;x&lt;/code&gt; value,  based on the data that has been
                  added to the model when this method is activated.
                  &lt;p&gt;
                  &lt;code&gt; predict(x) = intercept + slope  x &lt;/code&gt;&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;At least two observations (with at least two different x values)
                  must have been added before invoking this method. If this method is
                  invoked before a model can be estimated, &lt;code&gt;Double,NaN&lt;/code&gt; is
                  returned.
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m x input <code>x</code> value                    
                </@param>
                <@return>
                    n predicted <code>y</code> value                    
                </@return>
            </javadoc>
            <method name="predict" type="double" line="333">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="b1" type="double" line="334"/>
                <scope line="335"/>
            </method>
            <javadoc line="341">
                Returns the intercept of the estimated regression line, if{@link #hasIntercept()} is true; otherwise 0.
                  &lt;p&gt;
                  The least squares estimate of the intercept is computed using the
                  &lt;a href=&quot;http://www.xycoon.com/estimation4.htm&quot;&gt;normal equations&lt;/a&gt;.
                  The intercept is sometimes denoted b0.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;At least two observations (with at least two different x values)
                  must have been added before invoking this method. If this method is
                  invoked before a model can be estimated, &lt;code&gt;Double,NaN&lt;/code&gt; is
                  returned.
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@return>
                    n the intercept of the regression line if the model includes an
                      intercept; 0 otherwise                    
                </@return>
                <@see>
                    e #SimpleRegression(boolean)                    
                </@see>
            </javadoc>
            <method name="getIntercept" type="double" line="360"/>
            <javadoc line="364">
                Returns true if the model includes an intercept term.                
                <@return>
                    n true if the regression includes an intercept; false otherwise                    
                </@return>
                <@see>
                    e #SimpleRegression(boolean)                    
                </@see>
            </javadoc>
            <method name="hasIntercept" type="boolean" line="370"/>
            <javadoc line="374">
                Returns the slope of the estimated regression line.
                  &lt;p&gt;
                  The least squares estimate of the slope is computed using the
                  &lt;a href=&quot;http://www.xycoon.com/estimation4.htm&quot;&gt;normal equations&lt;/a&gt;.
                  The slope is sometimes denoted b1.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;At least two observations (with at least two different x values)
                  must have been added before invoking this method. If this method is
                  invoked before a model can be estimated, &lt;code&gt;Double.NaN&lt;/code&gt; is
                  returned.
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@return>
                    n the slope of the regression line                    
                </@return>
            </javadoc>
            <method name="getSlope" type="double" line="390">
                <scope line="391"/>
                <scope line="394"/>
            </method>
            <javadoc line="400">
                Returns the &lt;a href=&quot;http://www.xycoon.com/SumOfSquares.htm&quot;&gt;
                  sum of squared errors&lt;/a&gt; (SSE) associated with the regression
                  model.
                  &lt;p&gt;
                  The sum is computed using the computational formula&lt;/p&gt;
                  &lt;p&gt;
                  &lt;code&gt;SSE = SYY - (SXY  SXY / SXX)&lt;/code&gt;&lt;/p&gt;
                  &lt;p&gt;
                  where &lt;code&gt;SYY&lt;/code&gt; is the sum of the squared deviations of the y
                  values about their mean, &lt;code&gt;SXX&lt;/code&gt; is similarly defined and
                  &lt;code&gt;SXY&lt;/code&gt; is the sum of the products of x and y mean deviations.
                  &lt;/p&gt;&lt;p&gt;
                  The sums are accumulated using the updating algorithm referenced in{@link #addData}.&lt;/p&gt;
                  &lt;p&gt;
                  The return value is constrained to be non-negative - i.e., if due to
                  rounding errors the computational formula returns a negative result,
                  0 is returned.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;At least two observations (with at least two different x values)
                  must have been added before invoking this method. If this method is
                  invoked before a model can be estimated, &lt;code&gt;Double,NaN&lt;/code&gt; is
                  returned.
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@return>
                    n sum of squared errors associated with the regression model                    
                </@return>
            </javadoc>
            <method name="getSumSquaredErrors" type="double" line="429"/>
            <javadoc line="433">
                Returns the sum of squared deviations of the y values about their mean.
                  &lt;p&gt;
                  This is defined as SSTO
                  &lt;a href=&quot;http://www.xycoon.com/SumOfSquares.htm&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
                  &lt;p&gt;
                  If &lt;code&gt;n &lt; 2&lt;/code&gt;, this returns &lt;code&gt;Double.NaN&lt;/code&gt;.&lt;/p&gt;                
                <@return>
                    n sum of squared deviations of y values                    
                </@return>
            </javadoc>
            <method name="getTotalSumSquares" type="double" line="443">
                <scope line="444"/>
            </method>
            <javadoc line="450">
                Returns the sum of squared deviations of the x values about their mean.
                  If &lt;code&gt;n &lt; 2&lt;/code&gt;, this returns &lt;code&gt;Double.NaN&lt;/code&gt;.&lt;/p&gt;                
                <@return>
                    n sum of squared deviations of x values                    
                </@return>
            </javadoc>
            <method name="getXSumSquares" type="double" line="457">
                <scope line="458"/>
            </method>
            <javadoc line="464">
                Returns the sum of crossproducts, x&lt;sub&gt;i&lt;/sub&gt;y&lt;sub&gt;i&lt;/sub&gt;.                
                <@return>
                    n sum of cross products                    
                </@return>
            </javadoc>
            <method name="getSumOfCrossProducts" type="double" line="469"/>
            <javadoc line="473">
                Returns the sum of squared deviations of the predicted y values about
                  their mean (which equals the mean of y).
                  &lt;p&gt;
                  This is usually abbreviated SSR or SSM.  It is defined as SSM
                  &lt;a href=&quot;http://www.xycoon.com/SumOfSquares.htm&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;At least two observations (with at least two different x values)
                  must have been added before invoking this method. If this method is
                  invoked before a model can be estimated, &lt;code&gt;Double.NaN&lt;/code&gt; is
                  returned.
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@return>
                    n sum of squared deviations of predicted y values                    
                </@return>
            </javadoc>
            <method name="getRegressionSumSquares" type="double" line="489"/>
            <javadoc line="493">
                Returns the sum of squared errors divided by the degrees of freedom,
                  usually abbreviated MSE.
                  &lt;p&gt;
                  If there are fewer than &lt;strong&gt;three&lt;/strong&gt; data pairs in the model,
                  or if there is no variation in &lt;code&gt;x&lt;/code&gt;, this returns
                  &lt;code&gt;Double.NaN&lt;/code&gt;.&lt;/p&gt;                
                <@return>
                    n sum of squared deviations of y values                    
                </@return>
            </javadoc>
            <method name="getMeanSquareError" type="double" line="503">
                <scope line="504"/>
            </method>
            <javadoc line="510">
                Returns &lt;a href=&quot;http://mathworld.wolfram.com/CorrelationCoefficient.html&quot;&gt;
                  Pearson&apos;s product moment correlation coefficient&lt;/a&gt;,
                  usually denoted r.
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;At least two observations (with at least two different x values)
                  must have been added before invoking this method. If this method is
                  invoked before a model can be estimated, &lt;code&gt;Double,NaN&lt;/code&gt; is
                  returned.
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@return>
                    n Pearson's r                    
                </@return>
            </javadoc>
            <method name="getR" type="double" line="524">
                <declaration name="b1" type="double" line="525"/>
                <declaration name="result" type="double" line="526"/>
                <scope line="527"/>
            </method>
            <javadoc line="533">
                Returns the &lt;a href=&quot;http://www.xycoon.com/coefficient1.htm&quot;&gt;
                  coefficient of determination&lt;/a&gt;,
                  usually denoted r-square.
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;At least two observations (with at least two different x values)
                  must have been added before invoking this method. If this method is
                  invoked before a model can be estimated, &lt;code&gt;Double,NaN&lt;/code&gt; is
                  returned.
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@return>
                    n r-square                    
                </@return>
            </javadoc>
            <method name="getRSquare" type="double" line="547">
                <declaration name="ssto" type="double" line="548"/>
            </method>
            <javadoc line="552">
                Returns the &lt;a href=&quot;http://www.xycoon.com/standarderrorb0.htm&quot;&gt;
                  standard error of the intercept estimate&lt;/a&gt;,
                  usually denoted s(b0).
                  &lt;p&gt;
                  If there are fewer that &lt;strong&gt;three&lt;/strong&gt; observations in the
                  model, or if there is no variation in x, this returns
                  &lt;code&gt;Double.NaN&lt;/code&gt;.&lt;/p&gt; Additionally, a &lt;code&gt;Double.NaN&lt;/code&gt; is
                  returned when the intercept is constrained to be zero                
                <@return>
                    n standard error associated with intercept estimate                    
                </@return>
            </javadoc>
            <method name="getInterceptStdErr" type="double" line="564">
                <scope line="565"/>
            </method>
            <javadoc line="572">
                Returns the &lt;a href=&quot;http://www.xycoon.com/standerrorb(1).htm&quot;&gt;standard
                  error of the slope estimate&lt;/a&gt;,
                  usually denoted s(b1).
                  &lt;p&gt;
                  If there are fewer that &lt;strong&gt;three&lt;/strong&gt; data pairs in the model,
                  or if there is no variation in x, this returns &lt;code&gt;Double.NaN&lt;/code&gt;.
                  &lt;/p&gt;                
                <@return>
                    n standard error associated with slope estimate                    
                </@return>
            </javadoc>
            <method name="getSlopeStdErr" type="double" line="583"/>
            <javadoc line="587">
                Returns the half-width of a 95% confidence interval for the slope
                  estimate.
                  &lt;p&gt;
                  The 95% confidence interval is&lt;/p&gt;
                  &lt;p&gt;
                  &lt;code&gt;(getSlope() - getSlopeConfidenceInterval(),
                  getSlope() + getSlopeConfidenceInterval())&lt;/code&gt;&lt;/p&gt;
                  &lt;p&gt;
                  If there are fewer that &lt;strong&gt;three&lt;/strong&gt; observations in the
                  model, or if there is no variation in x, this returns
                  &lt;code&gt;Double.NaN&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Usage Note&lt;/strong&gt;:&lt;br&gt;
                  The validity of this statistic depends on the assumption that the
                  observations included in the model are drawn from a
                  &lt;a href=&quot;http://mathworld.wolfram.com/BivariateNormalDistribution.html&quot;&gt;
                  Bivariate Normal Distribution&lt;/a&gt;.&lt;/p&gt;                
                <@return>
                    n half-width of 95% confidence interval for the slope estimate                    
                </@return>
                <@throws>
                    s OutOfRangeException if the confidence interval can not be computed.                    
                </@throws>
            </javadoc>
            <method name="getSlopeConfidenceInterval" type="double" line="609"/>
            <javadoc line="613">
                Returns the half-width of a (100-100alpha)% confidence interval for
                  the slope estimate.
                  &lt;p&gt;
                  The (100-100alpha)% confidence interval is &lt;/p&gt;
                  &lt;p&gt;
                  &lt;code&gt;(getSlope() - getSlopeConfidenceInterval(),
                  getSlope() + getSlopeConfidenceInterval())&lt;/code&gt;&lt;/p&gt;
                  &lt;p&gt;
                  To request, for example, a 99% confidence interval, use
                  &lt;code&gt;alpha = .01&lt;/code&gt;&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Usage Note&lt;/strong&gt;:&lt;br&gt;
                  The validity of this statistic depends on the assumption that the
                  observations included in the model are drawn from a
                  &lt;a href=&quot;http://mathworld.wolfram.com/BivariateNormalDistribution.html&quot;&gt;
                  Bivariate Normal Distribution&lt;/a&gt;.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt; Preconditions:&lt;/strong&gt;&lt;ul&gt;
                  &lt;li&gt;If there are fewer that &lt;strong&gt;three&lt;/strong&gt; observations in the
                  model, or if there is no variation in x, this returns
                  &lt;code&gt;Double.NaN&lt;/code&gt;.
                  &lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;(0 &lt; alpha &lt; 1)&lt;/code&gt;; otherwise an
                  &lt;code&gt;OutOfRangeException&lt;/code&gt; is thrown.
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m alpha the desired significance level                    
                </@param>
                <@return>
                    n half-width of 95% confidence interval for the slope estimate                    
                </@return>
                <@throws>
                    s OutOfRangeException if the confidence interval can not be computed.                    
                </@throws>
            </javadoc>
            <method name="getSlopeConfidenceInterval" type="double" line="645">
                <params>
                    <param name="alpha" type="double"/>
                </params>
                <comment line="646">
                    No advertised NotStrictlyPositiveException here - will return NaN above                    
                </comment>
                <scope line="646"/>
                <scope line="649"/>
                <declaration name="distribution" type="TDistribution" line="654"/>
            </method>
            <javadoc line="659">
                Returns the significance level of the slope (equiv) correlation.
                  &lt;p&gt;
                  Specifically, the returned value is the smallest &lt;code&gt;alpha&lt;/code&gt;
                  such that the slope confidence interval with significance level
                  equal to &lt;code&gt;alpha&lt;/code&gt; does not include &lt;code&gt;0&lt;/code&gt;.
                  On regression output, this is often denoted &lt;code&gt;Prob(|t| &gt; 0)&lt;/code&gt;
                  &lt;/p&gt;&lt;p&gt;
                  &lt;strong&gt;Usage Note&lt;/strong&gt;:&lt;br&gt;
                  The validity of this statistic depends on the assumption that the
                  observations included in the model are drawn from a
                  &lt;a href=&quot;http://mathworld.wolfram.com/BivariateNormalDistribution.html&quot;&gt;
                  Bivariate Normal Distribution&lt;/a&gt;.&lt;/p&gt;
                  &lt;p&gt;
                  If there are fewer that &lt;strong&gt;three&lt;/strong&gt; observations in the
                  model, or if there is no variation in x, this returns
                  &lt;code&gt;Double.NaN&lt;/code&gt;.&lt;/p&gt;                
                <@return>
                    n significance level for slope/correlation                    
                </@return>
                <@throws>
                    s org.apache.commons.math3.exception.MaxCountExceededExceptionif the significance level can not be computed.                    
                </@throws>
            </javadoc>
            <method name="getSignificance" type="double" line="681">
                <comment line="682">
                    No advertised NotStrictlyPositiveException here - will return NaN above                    
                </comment>
                <scope line="682"/>
                <declaration name="distribution" type="TDistribution" line="686"/>
            </method>
            <javadoc line="693">
                Returns the intercept of the estimated regression line, given the slope.
                  &lt;p&gt;
                  Will return &lt;code&gt;NaN&lt;/code&gt; if slope is &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;                
                <@param>
                    m slope current slope                    
                </@param>
                <@return>
                    n the intercept of the regression line                    
                </@return>
            </javadoc>
            <method name="getIntercept" type="double" line="701">
                <params>
                    <param name="slope" type="double"/>
                </params>
                <scope line="702"/>
            </method>
            <javadoc line="708">
                Computes SSR from b1.                
                <@param>
                    m slope regression slope estimate                    
                </@param>
                <@return>
                    n sum of squared deviations of predicted y values                    
                </@return>
            </javadoc>
            <method name="getRegressionSumSquares" type="double" line="714">
                <params>
                    <param name="slope" type="double"/>
                </params>
            </method>
            <javadoc line="718">
                Performs a regression on data present in buffers and outputs a RegressionResults object.
                  &lt;p&gt;If there are fewer than 3 observations in the model and {@code hasIntercept} is true
                  a {@code NoDataException} is thrown.  If there is no intercept term, the model must
                  contain at least 2 observations.&lt;/p&gt;                
                <@return>
                    n RegressionResults acts as a container of regression output                    
                </@return>
                <@throws>
                    s ModelSpecificationException if the model is not correctly specified                    
                </@throws>
                <@throws>
                    s NoDataException if there is not sufficient data in the model to
                      estimate the regression parameters                    
                </@throws>
            </javadoc>
            <method name="regress" type="RegressionResults" line="730">
                <scope line="731">
                    <scope line="732"/>
                    <scope line="735">
                        <declaration name="params" type="double[]" line="736"/>
                        <declaration name="mse" type="double" line="737"/>
                        <declaration name="_syy" type="double" line="738"/>
                        <declaration name="vcv" type="double[]" line="739"/>
                    </scope>
                    <scope line="746">
                        <declaration name="params" type="double[]" line="747"/>
                        <declaration name="vcv" type="double[]" line="749"/>
                    </scope>
                </scope>
                <scope line="757">
                    <scope line="758"/>
                    <scope line="761">
                        <declaration name="vcv" type="double[]" line="762"/>
                        <declaration name="params" type="double[]" line="763"/>
                    </scope>
                    <scope line="767">
                        <declaration name="vcv" type="double[]" line="768"/>
                        <declaration name="params" type="double[]" line="769"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="777">
                Performs a regression on data present in buffers including only regressors
                  indexed in variablesToInclude and outputs a RegressionResults object                
                <@param>
                    m variablesToInclude an array of indices of regressors to include                    
                </@param>
                <@return>
                    n RegressionResults acts as a container of regression output                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if the variablesToInclude array is null or zero length                    
                </@throws>
                <@throws>
                    s OutOfRangeException if a requested variable is not present in model                    
                </@throws>
            </javadoc>
            <method name="regress" type="RegressionResults" line="785">
                <params>
                    <param name="variablesToInclude" type="int[]"/>
                </params>
                <scope line="786"/>
                <scope line="789"/>
                <scope line="795">
                    <scope line="796">
                        <scope line="797"/>
                        <scope line="799"/>
                        <scope line="802"/>
                    </scope>
                    <scope line="806">
                        <scope line="807"/>
                        <declaration name="_mean" type="double" line="810"/>
                        <declaration name="_syy" type="double" line="811"/>
                        <scope line="812">
                            <declaration name="vcv" type="double[]" line="814"/>
                            <declaration name="params" type="double[]" line="815"/>
                        </scope>
                        <scope line="820">
                            <declaration name="_sxx" type="double" line="822"/>
                            <declaration name="_sxy" type="double" line="823"/>
                            <declaration name="_sse" type="double" line="824"/>
                            <declaration name="_mse" type="double" line="825"/>
                            <scope line="826">
                                <declaration name="vcv" type="double[]" line="827"/>
                                <declaration name="params" type="double[]" line="828"/>
                            </scope>
                            <scope line="832">
                                <declaration name="vcv" type="double[]" line="833"/>
                                <declaration name="params" type="double[]" line="834"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="841">
                    <scope line="842"/>
                </scope>
            </method>
        </class>
    </source>