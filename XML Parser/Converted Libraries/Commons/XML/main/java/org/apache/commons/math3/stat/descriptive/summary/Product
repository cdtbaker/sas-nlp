<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive.summary">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic"/>
        <import package="org.apache.commons.math3.stat.descriptive.WeightedEvaluation"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Product" extends="AbstractStorelessUnivariateStatistic" line="28">
            <implements interface="Serializable"/>
            <implements interface="WeightedEvaluation"/>
            <javadoc line="28">
                Returns the product of the available values.
                 * &lt;p&gt;
                 * If there are no values in the dataset, then 1 is returned.
                 * If any of the values are
                 * &lt;code&gt;NaN&lt;/code&gt;, then &lt;code&gt;NaN&lt;/code&gt; is returned.&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
                 * multiple threads access an instance of this class concurrently, and at least
                 * one of the threads invokes the &lt;code&gt;increment()&lt;/code&gt; or
                 * &lt;code&gt;clear()&lt;/code&gt; method, it must be synchronized externally.&lt;/p&gt;                
                <@version>
                    n $Id: Product.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="44"/>
            <javadoc line="44">
                Serializable version identifier                
            </javadoc>
            <declaration name="n" type="long" line="47"/>
            <javadoc line="47">
                The number of values that have been added                
            </javadoc>
            <declaration name="value" type="double" line="50"/>
            <javadoc line="50">
                The current Running Product.                
            </javadoc>
            <javadoc line="55">
                Create a Product instance                
            </javadoc>
            <method name="Product" type="constructor" line="58"/>
            <javadoc line="63">
                Copy constructor, creates a new {@code Product} identical
                 * to the {@code original}                
                <@param>
                    m original the {@code Product} instance to copy                    
                </@param>
                <@throws>
                    s NullArgumentException  if original is null                    
                </@throws>
            </javadoc>
            <method name="Product" type="constructor" line="70"/>
            <javadoc line="74">
                {@inheritDoc}                
            </javadoc>
            <method name="increment" type="void" line="78"/>
            <javadoc line="83">
                {@inheritDoc}                
            </javadoc>
            <method name="getResult" type="double" line="87"/>
            <javadoc line="91">
                {@inheritDoc}                
            </javadoc>
            <method name="getN" type="long" line="94"/>
            <javadoc line="98">
                {@inheritDoc}                
            </javadoc>
            <method name="clear" type="void" line="102"/>
            <javadoc line="107">
                Returns the product of the entries in the specified portion of
                 * the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                 * is empty.
                 * &lt;p&gt;
                 * Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <@param>
                    m values the input array                    
                </@param>
                <@param>
                    m begin index of the first array element to include                    
                </@param>
                <@param>
                    m length the number of elements to include                    
                </@param>
                <@return>
                    n the product of the values or 1 if length = 0                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if the array is null or the array index
                     * parameters are not valid                    
                </@throws>
            </javadoc>
            <method name="evaluate" type="double" line="123">
                <declaration name="product" type="double" line="124"/>
                <scope line="125">
                    <scope line="127"/>
                </scope>
            </method>
            <javadoc line="134">
                &lt;p&gt;Returns the weighted product of the entries in the specified portion of
                 * the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                 * is empty.&lt;/p&gt;
                 * &lt;p&gt;Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if any of the following are true:
                 * &lt;ul&gt;&lt;li&gt;the values array is null&lt;/li&gt;
                 * &lt;li&gt;the weights array is null&lt;/li&gt;
                 * &lt;li&gt;the weights array does not have the same length as the values array&lt;/li&gt;
                 * &lt;li&gt;the weights array contains one or more infinite values&lt;/li&gt;
                 * &lt;li&gt;the weights array contains one or more NaN values&lt;/li&gt;
                 * &lt;li&gt;the weights array contains negative values&lt;/li&gt;
                 * &lt;li&gt;the start and length arguments do not determine a valid array&lt;/li&gt;
                 * &lt;/ul&gt;&lt;/p&gt;
                 * &lt;p&gt;Uses the formula, &lt;pre&gt;
                 * weighted product = &amp;prod;values[i]&lt;sup&gt;weights[i]&lt;/sup&gt;
                 * &lt;/pre&gt;
                 * that is, the weights are applied as exponents when computing the weighted product.&lt;/p&gt;                
                <@param>
                    m values the input array                    
                </@param>
                <@param>
                    m weights the weights array                    
                </@param>
                <@param>
                    m begin index of the first array element to include                    
                </@param>
                <@param>
                    m length the number of elements to include                    
                </@param>
                <@return>
                    n the product of the values or 1 if length = 0                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if the parameters are not valid                    
                </@throws>
                <@since>
                    e 2.1                    
                </@since>
            </javadoc>
            <method name="evaluate" type="double" line="163">
                <declaration name="product" type="double" line="164"/>
                <scope line="165">
                    <scope line="167"/>
                </scope>
            </method>
            <javadoc line="174">
                &lt;p&gt;Returns the weighted product of the entries in the input array.&lt;/p&gt;
                 * &lt;p&gt;Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if any of the following are true:
                 * &lt;ul&gt;&lt;li&gt;the values array is null&lt;/li&gt;
                 * &lt;li&gt;the weights array is null&lt;/li&gt;
                 * &lt;li&gt;the weights array does not have the same length as the values array&lt;/li&gt;
                 * &lt;li&gt;the weights array contains one or more infinite values&lt;/li&gt;
                 * &lt;li&gt;the weights array contains one or more NaN values&lt;/li&gt;
                 * &lt;li&gt;the weights array contains negative values&lt;/li&gt;
                 * &lt;/ul&gt;&lt;/p&gt;
                 * &lt;p&gt;Uses the formula, &lt;pre&gt;
                 * weighted product = &amp;prod;values[i]&lt;sup&gt;weights[i]&lt;/sup&gt;
                 * &lt;/pre&gt;
                 * that is, the weights are applied as exponents when computing the weighted product.&lt;/p&gt;                
                <@param>
                    m values the input array                    
                </@param>
                <@param>
                    m weights the weights array                    
                </@param>
                <@return>
                    n the product of the values or Double.NaN if length = 0                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if the parameters are not valid                    
                </@throws>
                <@since>
                    e 2.1                    
                </@since>
            </javadoc>
            <method name="evaluate" type="double" line="198"/>
            <javadoc line="203">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="Product" line="207">
                <comment line="208">
                    No try-catch or advertised exception because args are valid                    
                </comment>
                <declaration name="result" type="Product" line="208"/>
            </method>
            <javadoc line="214">
                Copies source to dest.
                 * &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;                
                <@param>
                    m source Product to copy                    
                </@param>
                <@param>
                    m dest Product to copy to                    
                </@param>
                <@throws>
                    s NullArgumentException if either source or dest is null                    
                </@throws>
            </javadoc>
            <method name="copy" type="void" line="223"/>
        </class>
    </source>