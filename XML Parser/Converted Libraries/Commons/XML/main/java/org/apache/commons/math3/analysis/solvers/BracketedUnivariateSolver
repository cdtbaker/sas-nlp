<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.solvers">
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <interface name="BracketedUnivariateSolver">
            <type_params>
                <type_param name="FUNC"/>
            </type_params>
            <implements interface="BaseUnivariateSolver">
                <type_params>
                    <type_param name="FUNC"/>
                </type_params>
            </implements>
            <javadoc line="22">
                Interface for {@link UnivariateSolver (univariate real) root-finding
                  algorithms} that maintain a bracketed solution. There are several advantages
                  to having such root-finding algorithms:
                  &lt;ul&gt;
                  &lt;li&gt;The bracketed solution guarantees that the root is kept within the
                  interval. As such, these algorithms generally also guarantee
                  convergence.&lt;/li&gt;
                  &lt;li&gt;The bracketed solution means that we have the opportunity to only
                  return roots that are greater than or equal to the actual root, or
                  are less than or equal to the actual root. That is, we can control
                  whether under-approximations and over-approximations are{@link AllowedSolution allowed solutions}. Other root-finding
                  algorithms can usually only guarantee that the solution (the root that
                  was found) is around the actual root.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;For backwards compatibility, all root-finding algorithms must have{@link AllowedSolution#ANY_SIDE ANY_SIDE} as default for the allowed
                  solutions.&lt;/p&gt;                
                <@param>
                    m<FUNC>
                       Type of function to solve.                    
                </@param>
                <@see>
                    e AllowedSolution                    
                </@see>
                <@since>
                    e 3.0                    
                </@since>
                <@version>
                    n $Id: BracketedUnivariateSolver.java 1364387 2012-07-22 18:14:11Z tn $                    
                </@version>
            </javadoc>
            <method name="solve" type="double" line="50"/>
            <javadoc line="50">
                Solve for a zero in the given interval.
                  A solver may require that the interval brackets a single zero root.
                  Solvers that do require bracketing should be able to handle the case
                  where one of the endpoints is itself a root.                
                <@param>
                    m maxEval Maximum number of evaluations.                    
                </@param>
                <@param>
                    m f Function to solve.                    
                </@param>
                <@param>
                    m min Lower bound for the interval.                    
                </@param>
                <@param>
                    m max Upper bound for the interval.                    
                </@param>
                <@param>
                    m allowedSolution The kind of solutions that the root-finding algorithm may
                      accept as solutions.                    
                </@param>
                <@return>
                    n A value where the function is zero.                    
                </@return>
                <@throws>
                    s org.apache.commons.math3.exception.MathIllegalArgumentExceptionif the arguments do not satisfy the requirements specified by the solver.                    
                </@throws>
                <@throws>
                    s org.apache.commons.math3.exception.TooManyEvaluationsException if
                      the allowed number of evaluations is exceeded.                    
                </@throws>
            </javadoc>
            <method name="solve" type="double" line="71"/>
            <javadoc line="71">
                Solve for a zero in the given interval, start at {@code startValue}.
                  A solver may require that the interval brackets a single zero root.
                  Solvers that do require bracketing should be able to handle the case
                  where one of the endpoints is itself a root.                
                <@param>
                    m maxEval Maximum number of evaluations.                    
                </@param>
                <@param>
                    m f Function to solve.                    
                </@param>
                <@param>
                    m min Lower bound for the interval.                    
                </@param>
                <@param>
                    m max Upper bound for the interval.                    
                </@param>
                <@param>
                    m startValue Start value to use.                    
                </@param>
                <@param>
                    m allowedSolution The kind of solutions that the root-finding algorithm may
                      accept as solutions.                    
                </@param>
                <@return>
                    n A value where the function is zero.                    
                </@return>
                <@throws>
                    s org.apache.commons.math3.exception.MathIllegalArgumentExceptionif the arguments do not satisfy the requirements specified by the solver.                    
                </@throws>
                <@throws>
                    s org.apache.commons.math3.exception.TooManyEvaluationsException if
                      the allowed number of evaluations is exceeded.                    
                </@throws>
            </javadoc>
        </interface>
    </source>