<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.SortedSet"/>
        <import package="java.util.TreeSet"/>
        <import package="org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver"/>
        <import package="org.apache.commons.math3.analysis.solvers.UnivariateSolver"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NoBracketingException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.ode.events.EventHandler"/>
        <import package="org.apache.commons.math3.ode.events.EventState"/>
        <import package="org.apache.commons.math3.ode.sampling.AbstractStepInterpolator"/>
        <import package="org.apache.commons.math3.ode.sampling.StepHandler"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Incrementor"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="AbstractIntegrator" line="44">
            <implements interface="FirstOrderIntegrator"/>
            <javadoc line="44">
                Base class managing common boilerplate for all integrators.                
                <@version>
                    n $Id: AbstractIntegrator.java 1463684 2013-04-02 19:04:13Z luc $                    
                </@version>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <declaration name="stepHandlers" type="Collection&lt;StepHandler&gt;" line="51"/>
            <javadoc line="51">
                Step handler.                
            </javadoc>
            <declaration name="stepStart" type="double" line="54"/>
            <javadoc line="54">
                Current step start time.                
            </javadoc>
            <declaration name="stepSize" type="double" line="57"/>
            <javadoc line="57">
                Current stepsize.                
            </javadoc>
            <declaration name="isLastStep" type="boolean" line="60"/>
            <javadoc line="60">
                Indicator for last step.                
            </javadoc>
            <declaration name="resetOccurred" type="boolean" line="63"/>
            <javadoc line="63">
                Indicator that a state or derivative reset was triggered by some event.                
            </javadoc>
            <declaration name="eventsStates" type="Collection&lt;EventState&gt;" line="66"/>
            <javadoc line="66">
                Events states.                
            </javadoc>
            <declaration name="statesInitialized" type="boolean" line="69"/>
            <javadoc line="69">
                Initialization indicator of events states.                
            </javadoc>
            <declaration name="name" type="String" line="72"/>
            <javadoc line="72">
                Name of the method.                
            </javadoc>
            <declaration name="evaluations" type="Incrementor" line="75"/>
            <javadoc line="75">
                Counter for number of evaluations.                
            </javadoc>
            <declaration name="expandable" type="ExpandableStatefulODE" line="78"/>
            <javadoc line="78">
                Differential equations to integrate.                
            </javadoc>
            <javadoc line="81">
                Build an instance.                
                <@param>
                    m name name of the method                    
                </@param>
            </javadoc>
            <method name="AbstractIntegrator" type="constructor" line="84"/>
            <javadoc line="96">
                Build an instance with a null name.                
            </javadoc>
            <method name="AbstractIntegrator" type="constructor" line="98"/>
            <javadoc line="102">
                {@inheritDoc}                
            </javadoc>
            <method name="getName" type="String" line="103"/>
            <javadoc line="107">
                {@inheritDoc}                
            </javadoc>
            <method name="addStepHandler" type="void" line="108"/>
            <javadoc line="112">
                {@inheritDoc}                
            </javadoc>
            <method name="getStepHandlers" type="Collection<StepHandler>" line="113"/>
            <javadoc line="117">
                {@inheritDoc}                
            </javadoc>
            <method name="clearStepHandlers" type="void" line="118"/>
            <javadoc line="122">
                {@inheritDoc}                
            </javadoc>
            <method name="addEventHandler" type="void" line="126"/>
            <javadoc line="132">
                {@inheritDoc}                
            </javadoc>
            <method name="addEventHandler" type="void" line="137"/>
            <javadoc line="142">
                {@inheritDoc}                
            </javadoc>
            <method name="getEventHandlers" type="Collection<EventHandler>" line="143">
                <declaration name="list" type="List&lt;EventHandler&gt;" line="144"/>
                <scope line="145"/>
            </method>
            <javadoc line="151">
                {@inheritDoc}                
            </javadoc>
            <method name="clearEventHandlers" type="void" line="152"/>
            <javadoc line="156">
                {@inheritDoc}                
            </javadoc>
            <method name="getCurrentStepStart" type="double" line="157"/>
            <javadoc line="161">
                {@inheritDoc}                
            </javadoc>
            <method name="getCurrentSignedStepsize" type="double" line="162"/>
            <javadoc line="166">
                {@inheritDoc}                
            </javadoc>
            <method name="setMaxEvaluations" type="void" line="167"/>
            <javadoc line="171">
                {@inheritDoc}                
            </javadoc>
            <method name="getMaxEvaluations" type="int" line="172"/>
            <javadoc line="176">
                {@inheritDoc}                
            </javadoc>
            <method name="getEvaluations" type="int" line="177"/>
            <javadoc line="181">
                Prepare the start of an integration.                
                <@param>
                    m t0 start value of the independent <i>time</i> variable                    
                </@param>
                <@param>
                    m y0 array containing the start value of the state vector                    
                </@param>
                <@param>
                    m t target time for the integration                    
                </@param>
            </javadoc>
            <method name="initIntegration" type="void" line="186">
                <scope line="190"/>
                <scope line="194"/>
            </method>
            <javadoc line="202">
                Set the equations.                
                <@param>
                    m equations equations to set                    
                </@param>
            </javadoc>
            <method name="setEquations" type="void" line="205"/>
            <javadoc line="209">
                Get the differential equations to integrate.                
                <@return>
                    n differential equations to integrate                    
                </@return>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="getExpandable" type="ExpandableStatefulODE" line="213"/>
            <javadoc line="217">
                Get the evaluations counter.                
                <@return>
                    n evaluations counter                    
                </@return>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <method name="getEvaluationsCounter" type="Incrementor" line="221"/>
            <javadoc line="225">
                {@inheritDoc}                
            </javadoc>
            <method name="integrate" type="double" line="229">
                <comment line="230">
                    prepare expandable stateful equations                    
                </comment>
                <comment line="230">
                    perform integration                    
                </comment>
                <comment line="230">
                    extract results back from the stateful equations                    
                </comment>
                <scope line="231"/>
                <scope line="234"/>
                <declaration name="expandableODE" type="ExpandableStatefulODE" line="239"/>
            </method>
            <method name="integrate" type="void" line="252"/>
            <javadoc line="252">
                Integrate a set of differential equations up to the given time.
                 * &lt;p&gt;This method solves an Initial Value Problem (IVP).&lt;/p&gt;
                 * &lt;p&gt;The set of differential equations is composed of a main set, which
                 * can be extended by some sets of secondary equations. The set of
                 * equations must be already set up with initial time and partial states.
                 * At integration completion, the final time and partial states will be
                 * available in the same object.&lt;/p&gt;
                 * &lt;p&gt;Since this method stores some internal state variables made
                 * available in its public interface during integration ({@link #getCurrentSignedStepsize()}), it is &lt;em&gt;not&lt;/em&gt; thread-safe.&lt;/p&gt;                
                <@param>
                    m equations complete set of differential equations to integrate                    
                </@param>
                <@param>
                    m t target time for the integration
                     * (can be set to a value smaller than <code>t0</code> for backward integration)                    
                </@param>
                <@exception>
                    n NumberIsTooSmallException if integration step is too small                    
                </@exception>
                <@throws>
                    s DimensionMismatchException if the dimension of the complete state does not
                     * match the complete equations sets dimension                    
                </@throws>
                <@exception>
                    n MaxCountExceededException if the number of functions evaluations is exceeded                    
                </@exception>
                <@exception>
                    n NoBracketingException if the location of an event cannot be bracketed                    
                </@exception>
            </javadoc>
            <javadoc line="275">
                Compute the derivatives and check the number of evaluations.                
                <@param>
                    m t current value of the independent <I>time</I> variable                    
                </@param>
                <@param>
                    m y array containing the current value of the state vector                    
                </@param>
                <@param>
                    m yDot placeholder array where to put the time derivative of the state vector                    
                </@param>
                <@exception>
                    n MaxCountExceededException if the number of functions evaluations is exceeded                    
                </@exception>
                <@exception>
                    n DimensionMismatchException if arrays dimensions do not match equations settings                    
                </@exception>
            </javadoc>
            <method name="computeDerivatives" type="void" line="283"/>
            <javadoc line="288">
                Set the stateInitialized flag.
                 * &lt;p&gt;This method must be called by integrators with the value{@code false} before they start integration, so a proper lazy
                 * initialization is done automatically on the first step.&lt;/p&gt;                
                <@param>
                    m stateInitialized new value for the flag                    
                </@param>
                <@since>
                    e 2.2                    
                </@since>
            </javadoc>
            <method name="setStateInitialized" type="void" line="295"/>
            <javadoc line="299">
                Accept a step, triggering events and step handlers.                
                <@param>
                    m interpolator step interpolator                    
                </@param>
                <@param>
                    m y state vector at step end time, must be reset if an event
                     * asks for resetting or if an events stops integration during the step                    
                </@param>
                <@param>
                    m yDot placeholder array where to put the time derivative of the state vector                    
                </@param>
                <@param>
                    m tEnd final integration time                    
                </@param>
                <@return>
                    n time at end of step                    
                </@return>
                <@exception>
                    n MaxCountExceededException if the interpolator throws one because
                     * the number of functions evaluations is exceeded                    
                </@exception>
                <@exception>
                    n NoBracketingException if the location of an event cannot be bracketed                    
                </@exception>
                <@exception>
                    n DimensionMismatchException if arrays dimensions do not match equations settings                    
                </@exception>
                <@since>
                    e 2.2                    
                </@since>
            </javadoc>
            <method name="acceptStep" type="double" line="314">
                <comment line="315">
                    initialize the events states if needed                    
                </comment>
                <comment line="315">
                    search for next events that may occur during the step                    
                </comment>
                <comment line="315">
                    last part of the step, after the last event                    
                </comment>
                <comment line="315">
                    handle the remaining part of the step, after all events if any                    
                </comment>
                <declaration name="previousT" type="double" line="316"/>
                <declaration name="currentT" type="double" line="317"/>
                <scope line="320">
                    <scope line="321"/>
                </scope>
                <declaration name="orderingSign" type="int" line="328"/>
                <anonymous_class line="329">
                    <javadoc line="331">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="compare" type="int" line="332"/>
                </anonymous_class>
                <declaration name="occuringEvents" type="SortedSet&lt;EventState&gt;" line="329"/>
                <scope line="338">
                    <scope line="339"/>
                </scope>
                <scope line="345">
                    <declaration name="iterator" type="Iterator&lt;EventState&gt;" line="348"/>
                    <declaration name="currentEvent" type="EventState" line="349"/>
                    <declaration name="eventT" type="double" line="353"/>
                    <declaration name="eventYPrimary" type="double[]" line="359"/>
                    <declaration name="eventYComplete" type="double[]" line="360"/>
                    <declaration name="index" type="int" line="363"/>
                    <scope line="364"/>
                    <scope line="370"/>
                    <scope line="376"/>
                    <scope line="380"/>
                    <declaration name="needReset" type="boolean" line="386"/>
                    <scope line="387"/>
                    <scope line="390"/>
                    <scope line="406"/>
                </scope>
                <declaration name="currentY" type="double[]" line="415"/>
                <scope line="416"/>
                <scope line="423"/>
            </method>
            <javadoc line="431">
                Check the integration span.                
                <@param>
                    m equations set of differential equations                    
                </@param>
                <@param>
                    m t target time for the integration                    
                </@param>
                <@exception>
                    n NumberIsTooSmallException if integration span is too small                    
                </@exception>
                <@exception>
                    n DimensionMismatchException if adaptive step size integrators
                     * tolerance arrays dimensions are not compatible with equations settings                    
                </@exception>
            </javadoc>
            <method name="sanityChecks" type="void" line="439">
                <declaration name="threshold" type="double" line="441"/>
                <declaration name="dt" type="double" line="443"/>
                <scope line="444"/>
            </method>
        </class>
    </source>