<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="SchurTransformer" line="25">
            <javadoc line="25">
                Class transforming a general real matrix to Schur form.
                 * &lt;p&gt;A m &amp;times; m matrix A can be written as the product of three matrices: A = P
                 * &amp;times; T &amp;times; P&lt;sup&gt;T&lt;/sup&gt; with P an orthogonal matrix and T an quasi-triangular
                 * matrix. Both P and T are m &amp;times; m matrices.&lt;/p&gt;
                 * &lt;p&gt;Transformation to Schur form is often not a goal by itself, but it is an
                 * intermediate step in more general decomposition algorithms like{@link EigenDecomposition eigen decomposition}. This class is therefore
                 * intended for internal use by the library and is not public. As a consequence
                 * of this explicitly limited scope, many methods directly returns references to
                 * internal arrays, not copies.&lt;/p&gt;
                 * &lt;p&gt;This class is based on the method hqr2 in class EigenvalueDecomposition
                 * from the &lt;a href=&quot;http://math.nist.gov/javanumerics/jama/&quot;&gt;JAMA&lt;/a&gt; library.&lt;/p&gt;                
                <@see>
                    e <a href="http://mathworld.wolfram.com/SchurDecomposition.html">Schur Decomposition - MathWorld</a>                    
                </@see>
                <@see>
                    e <a href="http://en.wikipedia.org/wiki/Schur_decomposition">Schur Decomposition - Wikipedia</a>                    
                </@see>
                <@see>
                    e <a href="http://en.wikipedia.org/wiki/Householder_transformation">Householder Transformations</a>                    
                </@see>
                <@version>
                    n $Id: SchurTransformer.java 1389129 2012-09-23 19:34:02Z tn $                    
                </@version>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <declaration name="MAX_ITERATIONS" type="int" line="46"/>
            <javadoc line="46">
                Maximum allowed iterations for convergence of the transformation.                
            </javadoc>
            <declaration name="matrixP" type="double" line="49"/>
            <javadoc line="49">
                P matrix.                
            </javadoc>
            <declaration name="matrixT" type="double" line="51"/>
            <javadoc line="51">
                T matrix.                
            </javadoc>
            <declaration name="cachedP" type="RealMatrix" line="53"/>
            <javadoc line="53">
                Cached value of P.                
            </javadoc>
            <declaration name="cachedT" type="RealMatrix" line="55"/>
            <javadoc line="55">
                Cached value of T.                
            </javadoc>
            <declaration name="cachedPt" type="RealMatrix" line="57"/>
            <javadoc line="57">
                Cached value of PT.                
            </javadoc>
            <declaration name="epsilon" type="double" line="60"/>
            <javadoc line="60">
                Epsilon criteria taken from JAMA code (originally was 2^-52).                
            </javadoc>
            <javadoc line="63">
                Build the transformation to Schur form of a general real matrix.                
                <@param>
                    m matrix matrix to transform                    
                </@param>
                <@throws>
                    s NonSquareMatrixException if the matrix is not square                    
                </@throws>
            </javadoc>
            <method name="SchurTransformer" type="constructor" line="69">
                <comment line="70">
                    transform matrix                    
                </comment>
                <scope line="70"/>
                <declaration name="transformer" type="HessenbergTransformer" line="75"/>
            </method>
            <javadoc line="86">
                Returns the matrix P of the transform.
                 * &lt;p&gt;P is an orthogonal matrix, i.e. its inverse is also its transpose.&lt;/p&gt;                
                <@return>
                    n the P matrix                    
                </@return>
            </javadoc>
            <method name="getP" type="RealMatrix" line="92">
                <scope line="93"/>
            </method>
            <javadoc line="99">
                Returns the transpose of the matrix P of the transform.
                 * &lt;p&gt;P is an orthogonal matrix, i.e. its inverse is also its transpose.&lt;/p&gt;                
                <@return>
                    n the transpose of the P matrix                    
                </@return>
            </javadoc>
            <method name="getPT" type="RealMatrix" line="105">
                <comment line="106">
                    return the cached matrix                    
                </comment>
                <scope line="106"/>
            </method>
            <javadoc line="114">
                Returns the quasi-triangular Schur matrix T of the transform.                
                <@return>
                    n the T matrix                    
                </@return>
            </javadoc>
            <method name="getT" type="RealMatrix" line="119">
                <comment line="120">
                    return the cached matrix                    
                </comment>
                <scope line="120"/>
            </method>
            <javadoc line="128">
                Transform original matrix to Schur form.                
                <@throws>
                    s MaxCountExceededException if the transformation does not converge                    
                </@throws>
            </javadoc>
            <method name="transform" type="void" line="132">
                <comment line="133">
                    compute matrix norm                    
                </comment>
                <comment line="133">
                    shift information                    
                </comment>
                <comment line="133">
                    Outer loop over eigenvalue index                    
                </comment>
                <declaration name="n" type="int" line="133"/>
                <declaration name="norm" type="double" line="136"/>
                <declaration name="shift" type="ShiftInfo" line="139"/>
                <declaration name="iteration" type="int" line="142"/>
                <declaration name="iu" type="int" line="143"/>
                <scope line="144">
                    <declaration name="il" type="int" line="147"/>
                    <scope line="150"/>
                    <scope line="155">
                        <declaration name="p" type="double" line="157"/>
                        <declaration name="q" type="double" line="158"/>
                        <scope line="162">
                            <declaration name="z" type="double" line="163"/>
                            <scope line="164"/>
                            <scope line="166"/>
                            <declaration name="x" type="double" line="169"/>
                            <declaration name="s" type="double" line="170"/>
                            <declaration name="r" type="double" line="173"/>
                            <scope line="178"/>
                            <scope line="185"/>
                            <scope line="192"/>
                        </scope>
                    </scope>
                    <scope line="200">
                        <scope line="205"/>
                        <declaration name="hVec" type="double[]" line="211"/>
                        <declaration name="im" type="int" line="213"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="219">
                Computes the L1 norm of the (quasi-)triangular matrix T.                
                <@return>
                    n the L1 norm of matrix T                    
                </@return>
            </javadoc>
            <method name="getNorm" type="double" line="224">
                <declaration name="norm" type="double" line="225"/>
                <scope line="226">
                    <scope line="228"/>
                </scope>
            </method>
            <javadoc line="235">
                Find the first small sub-diagonal element and returns its index.                
                <@param>
                    m startIdx the starting index for the search                    
                </@param>
                <@param>
                    m norm the L1 norm of the matrix                    
                </@param>
                <@return>
                    n the index of the first small sub-diagonal element                    
                </@return>
            </javadoc>
            <method name="findSmallSubDiagonalElement" type="int" line="242">
                <declaration name="l" type="int" line="243"/>
                <scope line="244">
                    <declaration name="s" type="double" line="245"/>
                    <scope line="246"/>
                    <scope line="249"/>
                </scope>
            </method>
            <javadoc line="257">
                Compute the shift for the current iteration.                
                <@param>
                    m l the index of the small sub-diagonal element                    
                </@param>
                <@param>
                    m idx the current eigenvalue index                    
                </@param>
                <@param>
                    m iteration the current iteration                    
                </@param>
                <@param>
                    m shift holder for shift information                    
                </@param>
            </javadoc>
            <method name="computeShift" type="void" line="265">
                <comment line="266">
                    Form shift                    
                </comment>
                <comment line="266">
                    Wilkinson&apos;s original ad hoc shift                    
                </comment>
                <comment line="266">
                    MATLAB&apos;s new ad hoc shift                    
                </comment>
                <scope line="269"/>
                <scope line="275">
                    <scope line="277"/>
                    <declaration name="s" type="double" line="280"/>
                </scope>
                <scope line="287">
                    <declaration name="s" type="double" line="288"/>
                    <scope line="290">
                        <scope line="292"/>
                        <scope line="296"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="305">
                Initialize the householder vectors for the QR step.                
                <@param>
                    m il the index of the small sub-diagonal element                    
                </@param>
                <@param>
                    m iu the current eigenvalue index                    
                </@param>
                <@param>
                    m shift shift information holder                    
                </@param>
                <@param>
                    m hVec the initial houseHolder vector                    
                </@param>
                <@return>
                    n the start index for the QR step                    
                </@return>
            </javadoc>
            <method name="initQRStep" type="int" line="314">
                <comment line="315">
                    Look for two consecutive small sub-diagonal elements                    
                </comment>
                <declaration name="im" type="int" line="316"/>
                <scope line="317">
                    <declaration name="z" type="double" line="318"/>
                    <declaration name="r" type="double" line="319"/>
                    <declaration name="s" type="double" line="320"/>
                    <scope line="325"/>
                    <declaration name="lhs" type="double" line="329"/>
                    <declaration name="rhs" type="double" line="330"/>
                    <scope line="334"/>
                </scope>
            </method>
            <javadoc line="343">
                Perform a double QR step involving rows l:idx and columns m:n                
                <@param>
                    m il the index of the small sub-diagonal element                    
                </@param>
                <@param>
                    m im the start index for the QR step                    
                </@param>
                <@param>
                    m iu the current eigenvalue index                    
                </@param>
                <@param>
                    m shift shift information holder                    
                </@param>
                <@param>
                    m hVec the initial houseHolder vector                    
                </@param>
            </javadoc>
            <method name="performDoubleQRStep" type="void" line="353">
                <comment line="354">
                    // k loop                    
                </comment>
                <comment line="354">
                    clean up pollution due to round-off errors                    
                </comment>
                <declaration name="n" type="int" line="355"/>
                <declaration name="p" type="double" line="356"/>
                <declaration name="q" type="double" line="357"/>
                <declaration name="r" type="double" line="358"/>
                <scope line="360">
                    <declaration name="notlast" type="boolean" line="361"/>
                    <scope line="362">
                        <scope line="367"/>
                    </scope>
                    <scope line="373"/>
                    <declaration name="s" type="double" line="376"/>
                    <scope line="377"/>
                    <scope line="380">
                        <scope line="381"/>
                        <scope line="383"/>
                        <declaration name="z" type="double" line="389"/>
                        <scope line="394">
                            <scope line="396"/>
                        </scope>
                        <scope line="405">
                            <scope line="407"/>
                        </scope>
                        <declaration name="high" type="int" line="416"/>
                        <scope line="417">
                            <scope line="419"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="430">
                    <scope line="432"/>
                </scope>
            </method>
            <class name="ShiftInfo" line="438">
                <comment line="439">
                    CHECKSTYLE: stop all                    
                </comment>
                <comment line="439">
                    CHECKSTYLE: resume all                    
                </comment>
                <javadoc line="438">
                    Internal data structure holding the current shift information.
                     * Contains variable names as present in the original JAMA code.                    
                </javadoc>
                <declaration name="x" type="double" line="445"/>
                <javadoc line="445">
                    x shift info                    
                </javadoc>
                <declaration name="y" type="double" line="447"/>
                <javadoc line="447">
                    y shift info                    
                </javadoc>
                <declaration name="w" type="double" line="449"/>
                <javadoc line="449">
                    w shift info                    
                </javadoc>
                <declaration name="exShift" type="double" line="451"/>
                <javadoc line="451">
                    Indicates an exceptional shift.                    
                </javadoc>
            </class>
        </class>
    </source>