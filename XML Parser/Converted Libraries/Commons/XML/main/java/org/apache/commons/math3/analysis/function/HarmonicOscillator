<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.function">
        <import package="org.apache.commons.math3.analysis.DifferentiableUnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.FunctionUtils"/>
        <import package="org.apache.commons.math3.analysis.ParametricUnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="HarmonicOscillator" line="30">
            <implements interface="UnivariateDifferentiableFunction"/>
            <implements interface="DifferentiableUnivariateFunction"/>
            <javadoc line="30">
                &lt;a href=&quot;http://en.wikipedia.org/wiki/Harmonic_oscillator&quot;&gt;
                 * simple harmonic oscillator&lt;/a&gt; function.                
                <@since>
                    e 3.0                    
                </@since>
                <@version>
                    n $Id: HarmonicOscillator.java 1455194 2013-03-11 15:45:54Z luc $                    
                </@version>
            </javadoc>
            <declaration name="amplitude" type="double" line="38"/>
            <javadoc line="38">
                Amplitude.                
            </javadoc>
            <declaration name="omega" type="double" line="40"/>
            <javadoc line="40">
                Angular frequency.                
            </javadoc>
            <declaration name="phase" type="double" line="42"/>
            <javadoc line="42">
                Phase.                
            </javadoc>
            <javadoc line="45">
                Harmonic oscillator function.                
                <@param>
                    m amplitude Amplitude.                    
                </@param>
                <@param>
                    m omega Angular frequency.                    
                </@param>
                <@param>
                    m phase Phase.                    
                </@param>
            </javadoc>
            <method name="HarmonicOscillator" type="constructor" line="54"/>
            <javadoc line="60">
                {@inheritDoc}                
            </javadoc>
            <method name="value" type="double" line="61"/>
            <javadoc line="65">
                {@inheritDoc}                
                <@deprecated>
                    d as of 3.1, replaced by {@link #value(DerivativeStructure)}                    
                </@deprecated>
            </javadoc>
            <method name="derivative" type="UnivariateFunction" line="69"/>
            <class name="Parametric" line="73">
                <implements interface="ParametricUnivariateFunction"/>
                <javadoc line="73">
                    Parametric function where the input array contains the parameters of
                     * the harmonic oscillator function, ordered as follows:
                     * &lt;ul&gt;
                     * &lt;li&gt;Amplitude&lt;/li&gt;
                     * &lt;li&gt;Angular frequency&lt;/li&gt;
                     * &lt;li&gt;Phase&lt;/li&gt;
                     * &lt;/ul&gt;                    
                </javadoc>
                <javadoc line="83">
                    Computes the value of the harmonic oscillator at {@code x}.                    
                    <@param>
                        m x Value for which the function must be computed.                        
                    </@param>
                    <@param>
                        m param Values of norm, mean and standard deviation.                        
                    </@param>
                    <@return>
                        n the value of the function.                        
                    </@return>
                    <@throws>
                        s NullArgumentException if {@code param} is {@code null}.                        
                    </@throws>
                    <@throws>
                        s DimensionMismatchException if the size of {@code param} is
                         * not 3.                        
                    </@throws>
                </javadoc>
                <method name="value" type="double" line="95"/>
                <javadoc line="100">
                    Computes the value of the gradient at {@code x}.
                     * The components of the gradient vector are the partial
                     * derivatives of the function with respect to each of the
                     * &lt;em&gt;parameters&lt;/em&gt; (amplitude, angular frequency and phase).                    
                    <@param>
                        m x Value at which the gradient must be computed.                        
                    </@param>
                    <@param>
                        m param Values of amplitude, angular frequency and phase.                        
                    </@param>
                    <@return>
                        n the gradient vector at {@code x}.                        
                    </@return>
                    <@throws>
                        s NullArgumentException if {@code param} is {@code null}.                        
                    </@throws>
                    <@throws>
                        s DimensionMismatchException if the size of {@code param} is
                         * not 3.                        
                    </@throws>
                </javadoc>
                <method name="gradient" type="double[]" line="115">
                    <declaration name="amplitude" type="double" line="118"/>
                    <declaration name="omega" type="double" line="119"/>
                    <declaration name="phase" type="double" line="120"/>
                    <declaration name="xTimesOmegaPlusPhase" type="double" line="122"/>
                    <declaration name="a" type="double" line="123"/>
                    <declaration name="p" type="double" line="124"/>
                    <declaration name="w" type="double" line="125"/>
                </method>
                <javadoc line="130">
                    Validates parameters to ensure they are appropriate for the evaluation of
                     * the {@link #value(double,double[])} and {@link #gradient(double,double[])}methods.                    
                    <@param>
                        m param Values of norm, mean and standard deviation.                        
                    </@param>
                    <@throws>
                        s NullArgumentException if {@code param} is {@code null}.                        
                    </@throws>
                    <@throws>
                        s DimensionMismatchException if the size of {@code param} is
                         * not 3.                        
                    </@throws>
                </javadoc>
                <method name="validateParameters" type="void" line="142">
                    <scope line="143"/>
                    <scope line="146"/>
                </method>
            </class>
            <javadoc line="152">
                @param xTimesOmegaPlusPhase {@code omega * x + phase}.                
                <@param>
                    m amplitude Amplitude.                    
                </@param>
                <@return>
                    n the value of the harmonic oscillator function at {@code x}.                    
                </@return>
            </javadoc>
            <method name="value" type="double" line="158"/>
            <javadoc line="162">
                {@inheritDoc}                
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="value" type="DerivativeStructure" line="166">
                <declaration name="x" type="double" line="167"/>
                <declaration name="f" type="double[]" line="168"/>
                <declaration name="alpha" type="double" line="170"/>
                <scope line="172">
                    <declaration name="mo2" type="double" line="174"/>
                    <scope line="175"/>
                </scope>
            </method>
        </class>
    </source>