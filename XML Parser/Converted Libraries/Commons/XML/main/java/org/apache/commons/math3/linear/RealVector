<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.util.Iterator"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.analysis.FunctionUtils"/>
        <import package="org.apache.commons.math3.analysis.function.Add"/>
        <import package="org.apache.commons.math3.analysis.function.Multiply"/>
        <import package="org.apache.commons.math3.analysis.function.Divide"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="RealVector" line="37">
            <javadoc line="37">
                Class defining a real-valued vector with basic algebraic operations.
                 * &lt;p&gt;
                 * vector element indexing is 0-based -- e.g., {@code getEntry(0)}returns the first element of the vector.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * The {@code code map} and {@code mapToSelf} methods operate
                 * on vectors element-wise, i.e. they perform the same operation (adding a scalar,
                 * applying a function ...) on each element in turn. The {@code map}versions create a new vector to hold the result and do not change the instance.
                 * The {@code mapToSelf} version uses the instance itself to store the
                 * results, so the instance is changed by this method. In all cases, the result
                 * vector is returned by the methods, allowing the &lt;i&gt;fluent API&lt;/i&gt;
                 * style, like this:
                 * &lt;/p&gt;
                 * &lt;pre&gt;
                 * RealVector result = v.mapAddToSelf(3.4).mapToSelf(new Tan()).mapToSelf(new Power(2.3));
                 * &lt;/pre&gt;                
                <@version>
                    n $Id: RealVector.java 1422313 2012-12-15 18:53:41Z psteitz $                    
                </@version>
                <@since>
                    e 2.1                    
                </@since>
            </javadoc>
            <method name="getDimension" type="int" line="61"/>
            <javadoc line="61">
                Returns the size of the vector.                
                <@return>
                    n the size of this vector.                    
                </@return>
            </javadoc>
            <method name="getEntry" type="double" line="68"/>
            <javadoc line="68">
                Return the entry at the specified index.                
                <@param>
                    m index Index location of entry to be fetched.                    
                </@param>
                <@return>
                    n the vector entry at {@code index}.                    
                </@return>
                <@throws>
                    s OutOfRangeException if the index is not valid.                    
                </@throws>
                <@see>
                    e #setEntry(int,double)                    
                </@see>
            </javadoc>
            <method name="setEntry" type="void" line="78"/>
            <javadoc line="78">
                Set a single element.                
                <@param>
                    m index element index.                    
                </@param>
                <@param>
                    m value new value for the element.                    
                </@param>
                <@throws>
                    s OutOfRangeException if the index is not valid.                    
                </@throws>
                <@see>
                    e #getEntry(int)                    
                </@see>
            </javadoc>
            <javadoc line="89">
                Change an entry at the specified index.                
                <@param>
                    m index Index location of entry to be set.                    
                </@param>
                <@param>
                    m increment Value to add to the vector entry.                    
                </@param>
                <@throws>
                    s OutOfRangeException if the index is not valid.                    
                </@throws>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <method name="addToEntry" type="void" line="98"/>
            <method name="append" type="RealVector" line="102"/>
            <javadoc line="102">
                Construct a new vector by appending a vector to this vector.                
                <@param>
                    m v vector to append to this one.                    
                </@param>
                <@return>
                    n a new vector.                    
                </@return>
            </javadoc>
            <method name="append" type="RealVector" line="110"/>
            <javadoc line="110">
                Construct a new vector by appending a double to this vector.                
                <@param>
                    m d double to append.                    
                </@param>
                <@return>
                    n a new vector.                    
                </@return>
            </javadoc>
            <method name="getSubVector" type="RealVector" line="118"/>
            <javadoc line="118">
                Get a subvector from consecutive elements.                
                <@param>
                    m index index of first element.                    
                </@param>
                <@param>
                    m n number of elements to be retrieved.                    
                </@param>
                <@return>
                    n a vector containing n elements.                    
                </@return>
                <@throws>
                    s OutOfRangeException if the index is not valid.                    
                </@throws>
                <@throws>
                    s NotPositiveException if the number of elements is not positive.                    
                </@throws>
            </javadoc>
            <method name="setSubVector" type="void" line="130"/>
            <javadoc line="130">
                Set a sequence of consecutive elements.                
                <@param>
                    m index index of first element to be set.                    
                </@param>
                <@param>
                    m v vector containing the values to set.                    
                </@param>
                <@throws>
                    s OutOfRangeException if the index is not valid.                    
                </@throws>
            </javadoc>
            <method name="isNaN" type="boolean" line="140"/>
            <javadoc line="140">
                Check whether any coordinate of this vector is {@code NaN}.                
                <@return>
                    n {@code true} if any coordinate of this vector is {@code NaN},{@code false} otherwise.                    
                </@return>
            </javadoc>
            <method name="isInfinite" type="boolean" line="148"/>
            <javadoc line="148">
                Check whether any coordinate of this vector is infinite and none are {@code NaN}.                
                <@return>
                    n {@code true} if any coordinate of this vector is infinite and
                     * none are {@code NaN}, {@code false} otherwise.                    
                </@return>
            </javadoc>
            <javadoc line="156">
                Check if instance and specified vectors have the same dimension.                
                <@param>
                    m v Vector to compare instance with.                    
                </@param>
                <@throws>
                    s DimensionMismatchException if the vectors do not
                     * have the same dimension.                    
                </@throws>
            </javadoc>
            <method name="checkVectorDimensions" type="void" line="164"/>
            <javadoc line="168">
                Check if instance dimension is equal to some expected value.                
                <@param>
                    m n Expected dimension.                    
                </@param>
                <@throws>
                    s DimensionMismatchException if the dimension is
                     * inconsistent with the vector size.                    
                </@throws>
            </javadoc>
            <method name="checkVectorDimensions" type="void" line="176">
                <declaration name="d" type="int" line="177"/>
                <scope line="178"/>
            </method>
            <javadoc line="183">
                Check if an index is valid.                
                <@param>
                    m index Index to check.                    
                </@param>
                <@exception>
                    n OutOfRangeException if {@code index} is not valid.                    
                </@exception>
            </javadoc>
            <method name="checkIndex" type="void" line="189">
                <scope line="191"/>
            </method>
            <javadoc line="197">
                Checks that the indices of a subvector are valid.                
                <@param>
                    m start the index of the first entry of the subvector                    
                </@param>
                <@param>
                    m end the index of the last entry of the subvector (inclusive)                    
                </@param>
                <@throws>
                    s OutOfRangeException if {@code start} of {@code end} are not valid                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if {@code end < start}                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="checkIndices" type="void" line="207">
                <declaration name="dim" type="int" line="208"/>
                <scope line="209"/>
                <scope line="213"/>
                <scope line="217"/>
            </method>
            <javadoc line="224">
                Compute the sum of this vector and {@code v}.
                 * Returns a new vector. Does not change instance data.                
                <@param>
                    m v Vector to be added.                    
                </@param>
                <@return>
                    n {@code this} + {@code v}.                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code v} is not the same size as{@code this} vector.                    
                </@throws>
            </javadoc>
            <method name="add" type="RealVector" line="233">
                <declaration name="result" type="RealVector" line="235"/>
                <declaration name="it" type="Iterator&lt;Entry&gt;" line="236"/>
                <scope line="237">
                    <declaration name="e" type="Entry" line="238"/>
                    <declaration name="index" type="int" line="239"/>
                </scope>
            </method>
            <javadoc line="245">
                Subtract {@code v} from this vector.
                 * Returns a new vector. Does not change instance data.                
                <@param>
                    m v Vector to be subtracted.                    
                </@param>
                <@return>
                    n {@code this} - {@code v}.                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code v} is not the same size as{@code this} vector.                    
                </@throws>
            </javadoc>
            <method name="subtract" type="RealVector" line="254">
                <declaration name="result" type="RealVector" line="256"/>
                <declaration name="it" type="Iterator&lt;Entry&gt;" line="257"/>
                <scope line="258">
                    <declaration name="e" type="Entry" line="259"/>
                    <declaration name="index" type="int" line="260"/>
                </scope>
            </method>
            <javadoc line="266">
                Add a value to each entry.
                 * Returns a new vector. Does not change instance data.                
                <@param>
                    m d Value to be added to each entry.                    
                </@param>
                <@return>
                    n {@code this} + {@code d}.                    
                </@return>
            </javadoc>
            <method name="mapAdd" type="RealVector" line="273"/>
            <javadoc line="277">
                Add a value to each entry.
                 * The instance is changed in-place.                
                <@param>
                    m d Value to be added to each entry.                    
                </@param>
                <@return>
                    n {@code this}.                    
                </@return>
            </javadoc>
            <method name="mapAddToSelf" type="RealVector" line="284">
                <scope line="285"/>
            </method>
            <method name="copy" type="RealVector" line="291"/>
            <javadoc line="291">
                Returns a (deep) copy of this vector.                
                <@return>
                    n a vector copy.                    
                </@return>
            </javadoc>
            <javadoc line="298">
                Compute the dot product of this vector with {@code v}.                
                <@param>
                    m v Vector with which dot product should be computed                    
                </@param>
                <@return>
                    n the scalar dot product between this instance and {@code v}.                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code v} is not the same size as{@code this} vector.                    
                </@throws>
            </javadoc>
            <method name="dotProduct" type="double" line="306">
                <declaration name="d" type="double" line="308"/>
                <declaration name="n" type="int" line="309"/>
                <scope line="310"/>
            </method>
            <javadoc line="316">
                Computes the cosine of the angle between this vector and the
                 * argument.                
                <@param>
                    m v Vector.                    
                </@param>
                <@return>
                    n the cosine of the angle between this vector and {@code v}.                    
                </@return>
                <@throws>
                    s MathArithmeticException if {@code this} or {@code v} is the null
                     * vector                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if the dimensions of {@code this} and{@code v} do not match                    
                </@throws>
            </javadoc>
            <method name="cosine" type="double" line="328">
                <declaration name="norm" type="double" line="329"/>
                <declaration name="vNorm" type="double" line="330"/>
                <scope line="333"/>
            </method>
            <method name="ebeDivide" type="RealVector" line="339"/>
            <javadoc line="339">
                Element-by-element division.                
                <@param>
                    m v Vector by which instance elements must be divided.                    
                </@param>
                <@return>
                    n a vector containing this[i] / v[i] for all i.                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code v} is not the same size as{@code this} vector.                    
                </@throws>
                <@deprecated>
                    d As of version 3.1, this method is deprecated, and will be
                     * removed in version 4.0. This decision follows the discussion reported in
                     * <a href="https://issues.apache.org/jira/browse/MATH-803?focusedCommentId=13399150#comment-13399150">MATH-803</a>.
                     * Uses of this method involving sparse implementations of{@link RealVector} might lead to wrong results. Since there is no
                     * satisfactory correction to this bug, this method is deprecated. Users who
                     * want to preserve this feature are advised to implement{@link RealVectorPreservingVisitor} (possibly ignoring corner cases for
                     * the sake of efficiency).                    
                </@deprecated>
            </javadoc>
            <method name="ebeMultiply" type="RealVector" line="360"/>
            <javadoc line="360">
                Element-by-element multiplication.                
                <@param>
                    m v Vector by which instance elements must be multiplied                    
                </@param>
                <@return>
                    n a vector containing this[i] * v[i] for all i.                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code v} is not the same size as{@code this} vector.                    
                </@throws>
                <@deprecated>
                    d As of version 3.1, this method is deprecated, and will be
                     * removed in version 4.0. This decision follows the discussion reported in
                     * <a href="https://issues.apache.org/jira/browse/MATH-803?focusedCommentId=13399150#comment-13399150">MATH-803</a>.
                     * Uses of this method involving sparse implementations of{@link RealVector} might lead to wrong results. Since there is no
                     * satisfactory correction to this bug, this method is deprecated. Users who
                     * want to preserve this feature are advised to implement{@link RealVectorPreservingVisitor} (possibly ignoring corner cases for
                     * the sake of efficiency).                    
                </@deprecated>
            </javadoc>
            <javadoc line="381">
                Distance between two vectors.
                 * &lt;p&gt;This method computes the distance consistent with the
                 * L&lt;sub&gt;2&lt;/sub&gt; norm, i.e. the square root of the sum of
                 * element differences, or Euclidean distance.&lt;/p&gt;                
                <@param>
                    m v Vector to which distance is requested.                    
                </@param>
                <@return>
                    n the distance between two vectors.                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code v} is not the same size as{@code this} vector.                    
                </@throws>
                <@see>
                    e #getL1Distance(RealVector)                    
                </@see>
                <@see>
                    e #getLInfDistance(RealVector)                    
                </@see>
                <@see>
                    e #getNorm()                    
                </@see>
            </javadoc>
            <method name="getDistance" type="double" line="395">
                <declaration name="d" type="double" line="397"/>
                <declaration name="it" type="Iterator&lt;Entry&gt;" line="398"/>
                <scope line="399">
                    <declaration name="e" type="Entry" line="400"/>
                    <declaration name="diff" type="double" line="401"/>
                </scope>
            </method>
            <javadoc line="407">
                Returns the L&lt;sub&gt;2&lt;/sub&gt; norm of the vector.
                 * &lt;p&gt;The L&lt;sub&gt;2&lt;/sub&gt; norm is the root of the sum of
                 * the squared elements.&lt;/p&gt;                
                <@return>
                    n the norm.                    
                </@return>
                <@see>
                    e #getL1Norm()                    
                </@see>
                <@see>
                    e #getLInfNorm()                    
                </@see>
                <@see>
                    e #getDistance(RealVector)                    
                </@see>
            </javadoc>
            <method name="getNorm" type="double" line="417">
                <declaration name="sum" type="double" line="418"/>
                <declaration name="it" type="Iterator&lt;Entry&gt;" line="419"/>
                <scope line="420">
                    <declaration name="e" type="Entry" line="421"/>
                    <declaration name="value" type="double" line="422"/>
                </scope>
            </method>
            <javadoc line="428">
                Returns the L&lt;sub&gt;1&lt;/sub&gt; norm of the vector.
                 * &lt;p&gt;The L&lt;sub&gt;1&lt;/sub&gt; norm is the sum of the absolute
                 * values of the elements.&lt;/p&gt;                
                <@return>
                    n the norm.                    
                </@return>
                <@see>
                    e #getNorm()                    
                </@see>
                <@see>
                    e #getLInfNorm()                    
                </@see>
                <@see>
                    e #getL1Distance(RealVector)                    
                </@see>
            </javadoc>
            <method name="getL1Norm" type="double" line="438">
                <declaration name="norm" type="double" line="439"/>
                <declaration name="it" type="Iterator&lt;Entry&gt;" line="440"/>
                <scope line="441">
                    <declaration name="e" type="Entry" line="442"/>
                </scope>
            </method>
            <javadoc line="448">
                Returns the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm of the vector.
                 * &lt;p&gt;The L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm is the max of the absolute
                 * values of the elements.&lt;/p&gt;                
                <@return>
                    n the norm.                    
                </@return>
                <@see>
                    e #getNorm()                    
                </@see>
                <@see>
                    e #getL1Norm()                    
                </@see>
                <@see>
                    e #getLInfDistance(RealVector)                    
                </@see>
            </javadoc>
            <method name="getLInfNorm" type="double" line="458">
                <declaration name="norm" type="double" line="459"/>
                <declaration name="it" type="Iterator&lt;Entry&gt;" line="460"/>
                <scope line="461">
                    <declaration name="e" type="Entry" line="462"/>
                </scope>
            </method>
            <javadoc line="468">
                Distance between two vectors.
                 * &lt;p&gt;This method computes the distance consistent with
                 * L&lt;sub&gt;1&lt;/sub&gt; norm, i.e. the sum of the absolute values of
                 * the elements differences.&lt;/p&gt;                
                <@param>
                    m v Vector to which distance is requested.                    
                </@param>
                <@return>
                    n the distance between two vectors.                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code v} is not the same size as{@code this} vector.                    
                </@throws>
            </javadoc>
            <method name="getL1Distance" type="double" line="480">
                <declaration name="d" type="double" line="482"/>
                <declaration name="it" type="Iterator&lt;Entry&gt;" line="483"/>
                <scope line="484">
                    <declaration name="e" type="Entry" line="485"/>
                </scope>
            </method>
            <javadoc line="491">
                Distance between two vectors.
                 * &lt;p&gt;This method computes the distance consistent with
                 * L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm, i.e. the max of the absolute values of
                 * element differences.&lt;/p&gt;                
                <@param>
                    m v Vector to which distance is requested.                    
                </@param>
                <@return>
                    n the distance between two vectors.                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code v} is not the same size as{@code this} vector.                    
                </@throws>
                <@see>
                    e #getDistance(RealVector)                    
                </@see>
                <@see>
                    e #getL1Distance(RealVector)                    
                </@see>
                <@see>
                    e #getLInfNorm()                    
                </@see>
            </javadoc>
            <method name="getLInfDistance" type="double" line="506">
                <declaration name="d" type="double" line="508"/>
                <declaration name="it" type="Iterator&lt;Entry&gt;" line="509"/>
                <scope line="510">
                    <declaration name="e" type="Entry" line="511"/>
                </scope>
            </method>
            <javadoc line="517">
                Get the index of the minimum entry.                
                <@return>
                    n the index of the minimum entry or -1 if vector length is 0
                     * or all entries are {@code NaN}.                    
                </@return>
            </javadoc>
            <method name="getMinIndex" type="int" line="523">
                <declaration name="minIndex" type="int" line="524"/>
                <declaration name="minValue" type="double" line="525"/>
                <declaration name="iterator" type="Iterator&lt;Entry&gt;" line="526"/>
                <scope line="527">
                    <declaration name="entry" type="Entry" line="528"/>
                    <scope line="529"/>
                </scope>
            </method>
            <javadoc line="537">
                Get the value of the minimum entry.                
                <@return>
                    n the value of the minimum entry or {@code NaN} if all
                     * entries are {@code NaN}.                    
                </@return>
            </javadoc>
            <method name="getMinValue" type="double" line="543">
                <declaration name="minIndex" type="int" line="544"/>
            </method>
            <javadoc line="548">
                Get the index of the maximum entry.                
                <@return>
                    n the index of the maximum entry or -1 if vector length is 0
                     * or all entries are {@code NaN}                    
                </@return>
            </javadoc>
            <method name="getMaxIndex" type="int" line="554">
                <declaration name="maxIndex" type="int" line="555"/>
                <declaration name="maxValue" type="double" line="556"/>
                <declaration name="iterator" type="Iterator&lt;Entry&gt;" line="557"/>
                <scope line="558">
                    <declaration name="entry" type="Entry" line="559"/>
                    <scope line="560"/>
                </scope>
            </method>
            <javadoc line="568">
                Get the value of the maximum entry.                
                <@return>
                    n the value of the maximum entry or {@code NaN} if all
                     * entries are {@code NaN}.                    
                </@return>
            </javadoc>
            <method name="getMaxValue" type="double" line="574">
                <declaration name="maxIndex" type="int" line="575"/>
            </method>
            <javadoc line="580">
                Multiply each entry by the argument. Returns a new vector.
                 * Does not change instance data.                
                <@param>
                    m d Multiplication factor.                    
                </@param>
                <@return>
                    n {@code this} * {@code d}.                    
                </@return>
            </javadoc>
            <method name="mapMultiply" type="RealVector" line="587"/>
            <javadoc line="591">
                Multiply each entry.
                 * The instance is changed in-place.                
                <@param>
                    m d Multiplication factor.                    
                </@param>
                <@return>
                    n {@code this}.                    
                </@return>
            </javadoc>
            <method name="mapMultiplyToSelf" type="RealVector" line="598"/>
            <javadoc line="602">
                Subtract a value from each entry. Returns a new vector.
                 * Does not change instance data.                
                <@param>
                    m d Value to be subtracted.                    
                </@param>
                <@return>
                    n {@code this} - {@code d}.                    
                </@return>
            </javadoc>
            <method name="mapSubtract" type="RealVector" line="609"/>
            <javadoc line="613">
                Subtract a value from each entry.
                 * The instance is changed in-place.                
                <@param>
                    m d Value to be subtracted.                    
                </@param>
                <@return>
                    n {@code this}.                    
                </@return>
            </javadoc>
            <method name="mapSubtractToSelf" type="RealVector" line="620"/>
            <javadoc line="624">
                Divide each entry by the argument. Returns a new vector.
                 * Does not change instance data.                
                <@param>
                    m d Value to divide by.                    
                </@param>
                <@return>
                    n {@code this} / {@code d}.                    
                </@return>
            </javadoc>
            <method name="mapDivide" type="RealVector" line="631"/>
            <javadoc line="635">
                Divide each entry by the argument.
                 * The instance is changed in-place.                
                <@param>
                    m d Value to divide by.                    
                </@param>
                <@return>
                    n {@code this}.                    
                </@return>
            </javadoc>
            <method name="mapDivideToSelf" type="RealVector" line="642"/>
            <javadoc line="646">
                Compute the outer product.                
                <@param>
                    m v Vector with which outer product should be computed.                    
                </@param>
                <@return>
                    n the matrix outer product between this instance and {@code v}.                    
                </@return>
            </javadoc>
            <method name="outerProduct" type="RealMatrix" line="652">
                <declaration name="m" type="int" line="653"/>
                <declaration name="n" type="int" line="654"/>
                <declaration name="product" type="RealMatrix" line="655"/>
                <scope line="656"/>
                <scope line="658"/>
                <scope line="661">
                    <scope line="662"/>
                </scope>
            </method>
            <javadoc line="669">
                Find the orthogonal projection of this vector onto another vector.                
                <@param>
                    m v vector onto which instance must be projected.                    
                </@param>
                <@return>
                    n projection of the instance onto {@code v}.                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code v} is not the same size as{@code this} vector.                    
                </@throws>
                <@throws>
                    s MathArithmeticException if {@code this} or {@code v} is the null
                     * vector                    
                </@throws>
            </javadoc>
            <method name="projection" type="RealVector" line="680">
                <declaration name="norm2" type="double" line="681"/>
                <scope line="682"/>
            </method>
            <javadoc line="688">
                Set all elements to a single value.                
                <@param>
                    m value Single value to set for all elements.                    
                </@param>
            </javadoc>
            <method name="set" type="void" line="693">
                <declaration name="it" type="Iterator&lt;Entry&gt;" line="694"/>
                <scope line="695">
                    <declaration name="e" type="Entry" line="696"/>
                </scope>
            </method>
            <javadoc line="701">
                Convert the vector to an array of {@code double}s.
                 * The array is independent from this vector data: the elements
                 * are copied.                
                <@return>
                    n an array containing a copy of the vector elements.                    
                </@return>
            </javadoc>
            <method name="toArray" type="double[]" line="708">
                <declaration name="dim" type="int" line="709"/>
                <declaration name="values" type="double[]" line="710"/>
                <scope line="711"/>
            </method>
            <javadoc line="717">
                Creates a unit vector pointing in the direction of this vector.
                 * The instance is not changed by this method.                
                <@return>
                    n a unit vector pointing in direction of this vector.                    
                </@return>
                <@throws>
                    s MathArithmeticException if the norm is zero.                    
                </@throws>
            </javadoc>
            <method name="unitVector" type="RealVector" line="724">
                <declaration name="norm" type="double" line="725"/>
                <scope line="726"/>
            </method>
            <javadoc line="732">
                Converts this vector into a unit vector.
                 * The instance itself is changed by this method.                
                <@throws>
                    s MathArithmeticException if the norm is zero.                    
                </@throws>
            </javadoc>
            <method name="unitize" type="void" line="738">
                <declaration name="norm" type="double" line="739"/>
                <scope line="740"/>
            </method>
            <javadoc line="746">
                Create a sparse iterator over the vector, which may omit some entries.
                 * Specialized implementations may choose to not iterate over all
                 * dimensions, either because those values are unset, or are equal
                 * to defaultValue(), or are small enough to be ignored for the
                 * purposes of iteration. No guarantees are made about order of iteration.
                 * In dense implementations, this method will often delegate to{@link #iterator()}.
                 * &lt;p&gt;Note: derived classes are required to return an {@link Iterator} that
                 * returns non-null {@link Entry} objects as long as {@link Iterator#hasNext()}returns {@code true}.&lt;/p&gt;                
                <@return>
                    n a sparse iterator.                    
                </@return>
                <@deprecated>
                    d As of 3.1, this method is deprecated, because its interface
                     * is too confusing (see
                     * <a href="https://issues.apache.org/jira/browse/MATH-875">JIRA MATH-875</a>).
                     * This method will be completely removed in 4.0.                    
                </@deprecated>
            </javadoc>
            <method name="sparseIterator" type="Iterator<Entry>" line="766"/>
            <javadoc line="770">
                Generic dense iterator. Iteration is in increasing order
                 * of the vector index.
                 * &lt;p&gt;Note: derived classes are required to return an {@link Iterator} that
                 * returns non-null {@link Entry} objects as long as {@link Iterator#hasNext()}returns {@code true}.&lt;/p&gt;                
                <@return>
                    n a dense iterator.                    
                </@return>
            </javadoc>
            <method name="iterator" type="Iterator<Entry>" line="780">
                <declaration name="dim" type="int" line="781"/>
                <anonymous_class line="782">
                    <declaration name="i" type="int" line="784"/>
                    <javadoc line="784">
                        Current index.                        
                    </javadoc>
                    <declaration name="e" type="Entry" line="787"/>
                    <javadoc line="787">
                        Current entry.                        
                    </javadoc>
                    <javadoc line="790">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="hasNext" type="boolean" line="791"/>
                    <javadoc line="795">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="next" type="Entry" line="796">
                        <scope line="797"/>
                        <scope line="800"/>
                    </method>
                    <javadoc line="805">
                        {@inheritDoc}                        
                        <@throws>
                            s MathUnsupportedOperationException in all circumstances.                            
                        </@throws>
                    </javadoc>
                    <method name="remove" type="void" line="810"/>
                </anonymous_class>
            </method>
            <javadoc line="816">
                Acts as if implemented as:
                 * &lt;pre&gt;
                 * return copy().mapToSelf(function);
                 * &lt;/pre&gt;
                 * Returns a new vector. Does not change instance data.                
                <@param>
                    m function Function to apply to each entry.                    
                </@param>
                <@return>
                    n a new vector.                    
                </@return>
            </javadoc>
            <method name="map" type="RealVector" line="826"/>
            <javadoc line="830">
                Acts as if it is implemented as:
                 * &lt;pre&gt;
                 * Entry e = null;
                 * for(Iterator&lt;Entry&gt; it = iterator(); it.hasNext(); e = it.next()) {
                 * e.setValue(function.value(e.getValue()));
                 * }
                 * &lt;/pre&gt;
                 * Entries of this vector are modified in-place by this method.                
                <@param>
                    m function Function to apply to each entry.                    
                </@param>
                <@return>
                    n a reference to this vector.                    
                </@return>
            </javadoc>
            <method name="mapToSelf" type="RealVector" line="843">
                <declaration name="it" type="Iterator&lt;Entry&gt;" line="844"/>
                <scope line="845">
                    <declaration name="e" type="Entry" line="846"/>
                </scope>
            </method>
            <javadoc line="852">
                Returns a new vector representing {@code a * this + b * y}, the linear
                 * combination of {@code this} and {@code y}.
                 * Returns a new vector. Does not change instance data.                
                <@param>
                    m a Coefficient of {@code this}.                    
                </@param>
                <@param>
                    m b Coefficient of {@code y}.                    
                </@param>
                <@param>
                    m y Vector with which {@code this} is linearly combined.                    
                </@param>
                <@return>
                    n a vector containing {@code a * this[i] + b * y[i]} for all{@code i}.                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code y} is not the same size as{@code this} vector.                    
                </@throws>
            </javadoc>
            <method name="combine" type="RealVector" line="866"/>
            <javadoc line="870">
                Updates {@code this} with the linear combination of {@code this} and{@code y}.                
                <@param>
                    m a Weight of {@code this}.                    
                </@param>
                <@param>
                    m b Weight of {@code y}.                    
                </@param>
                <@param>
                    m y Vector with which {@code this} is linearly combined.                    
                </@param>
                <@return>
                    n {@code this}, with components equal to{@code a * this[i] + b * y[i]} for all {@code i}.                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code y} is not the same size as{@code this} vector.                    
                </@throws>
            </javadoc>
            <method name="combineToSelf" type="RealVector" line="883">
                <scope line="885">
                    <declaration name="xi" type="double" line="886"/>
                    <declaration name="yi" type="double" line="887"/>
                </scope>
            </method>
            <javadoc line="893">
                Visits (but does not alter) all entries of this vector in default order
                 * (increasing index).                
                <@param>
                    m visitor the visitor to be used to process the entries of this
                     * vector                    
                </@param>
                <@return>
                    n the value returned by {@link RealVectorPreservingVisitor#end()}at the end of the walk                    
                </@return>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="walkInDefaultOrder" type="double" line="903">
                <declaration name="dim" type="int" line="904"/>
                <scope line="906"/>
            </method>
            <javadoc line="912">
                Visits (but does not alter) some entries of this vector in default order
                 * (increasing index).                
                <@param>
                    m visitor visitor to be used to process the entries of this vector                    
                </@param>
                <@param>
                    m start the index of the first entry to be visited                    
                </@param>
                <@param>
                    m end the index of the last entry to be visited (inclusive)                    
                </@param>
                <@return>
                    n the value returned by {@link RealVectorPreservingVisitor#end()}at the end of the walk                    
                </@return>
                <@throws>
                    s NumberIsTooSmallException if {@code end < start}.                    
                </@throws>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="walkInDefaultOrder" type="double" line="927">
                <scope line="930"/>
            </method>
            <javadoc line="936">
                Visits (but does not alter) all entries of this vector in optimized
                 * order. The order in which the entries are visited is selected so as to
                 * lead to the most efficient implementation; it might depend on the
                 * concrete implementation of this abstract class.                
                <@param>
                    m visitor the visitor to be used to process the entries of this
                     * vector                    
                </@param>
                <@return>
                    n the value returned by {@link RealVectorPreservingVisitor#end()}at the end of the walk                    
                </@return>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="948"/>
            <javadoc line="952">
                Visits (but does not alter) some entries of this vector in optimized
                 * order. The order in which the entries are visited is selected so as to
                 * lead to the most efficient implementation; it might depend on the
                 * concrete implementation of this abstract class.                
                <@param>
                    m visitor visitor to be used to process the entries of this vector                    
                </@param>
                <@param>
                    m start the index of the first entry to be visited                    
                </@param>
                <@param>
                    m end the index of the last entry to be visited (inclusive)                    
                </@param>
                <@return>
                    n the value returned by {@link RealVectorPreservingVisitor#end()}at the end of the walk                    
                </@return>
                <@throws>
                    s NumberIsTooSmallException if {@code end < start}.                    
                </@throws>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="969"/>
            <javadoc line="973">
                Visits (and possibly alters) all entries of this vector in default order
                 * (increasing index).                
                <@param>
                    m visitor the visitor to be used to process and modify the entries
                     * of this vector                    
                </@param>
                <@return>
                    n the value returned by {@link RealVectorChangingVisitor#end()}at the end of the walk                    
                </@return>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="walkInDefaultOrder" type="double" line="983">
                <declaration name="dim" type="int" line="984"/>
                <scope line="986"/>
            </method>
            <javadoc line="992">
                Visits (and possibly alters) some entries of this vector in default order
                 * (increasing index).                
                <@param>
                    m visitor visitor to be used to process the entries of this vector                    
                </@param>
                <@param>
                    m start the index of the first entry to be visited                    
                </@param>
                <@param>
                    m end the index of the last entry to be visited (inclusive)                    
                </@param>
                <@return>
                    n the value returned by {@link RealVectorChangingVisitor#end()}at the end of the walk                    
                </@return>
                <@throws>
                    s NumberIsTooSmallException if {@code end < start}.                    
                </@throws>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="walkInDefaultOrder" type="double" line="1007">
                <scope line="1010"/>
            </method>
            <javadoc line="1016">
                Visits (and possibly alters) all entries of this vector in optimized
                 * order. The order in which the entries are visited is selected so as to
                 * lead to the most efficient implementation; it might depend on the
                 * concrete implementation of this abstract class.                
                <@param>
                    m visitor the visitor to be used to process the entries of this
                     * vector                    
                </@param>
                <@return>
                    n the value returned by {@link RealVectorChangingVisitor#end()}at the end of the walk                    
                </@return>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="1028"/>
            <javadoc line="1032">
                Visits (and possibly change) some entries of this vector in optimized
                 * order. The order in which the entries are visited is selected so as to
                 * lead to the most efficient implementation; it might depend on the
                 * concrete implementation of this abstract class.                
                <@param>
                    m visitor visitor to be used to process the entries of this vector                    
                </@param>
                <@param>
                    m start the index of the first entry to be visited                    
                </@param>
                <@param>
                    m end the index of the last entry to be visited (inclusive)                    
                </@param>
                <@return>
                    n the value returned by {@link RealVectorChangingVisitor#end()}at the end of the walk                    
                </@return>
                <@throws>
                    s NumberIsTooSmallException if {@code end < start}.                    
                </@throws>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="1049"/>
            <class name="Entry" line="1053">
                <javadoc line="1053">
                    An entry in the vector.                    
                </javadoc>
                <declaration name="index" type="int" line="1055"/>
                <javadoc line="1055">
                    Index of this entry.                    
                </javadoc>
                <javadoc line="1058">
                    Simple constructor.                    
                </javadoc>
                <method name="Entry" type="constructor" line="1059"/>
                <javadoc line="1063">
                    Get the value of the entry.                    
                    <@return>
                        n the value of the entry.                        
                    </@return>
                </javadoc>
                <method name="getValue" type="double" line="1068"/>
                <javadoc line="1072">
                    Set the value of the entry.                    
                    <@param>
                        m value New value for the entry.                        
                    </@param>
                </javadoc>
                <method name="setValue" type="void" line="1077"/>
                <javadoc line="1081">
                    Get the index of the entry.                    
                    <@return>
                        n the index of the entry.                        
                    </@return>
                </javadoc>
                <method name="getIndex" type="int" line="1086"/>
                <javadoc line="1090">
                    Set the index of the entry.                    
                    <@param>
                        m index New index for the entry.                        
                    </@param>
                </javadoc>
                <method name="setIndex" type="void" line="1095"/>
            </class>
            <javadoc line="1100">
                &lt;p&gt;
                 * Test for the equality of two real vectors. If all coordinates of two real
                 * vectors are exactly the same, and none are {@code NaN}, the two real
                 * vectors are considered to be equal. {@code NaN} coordinates are
                 * considered to affect globally the vector and be equals to each other -
                 * i.e, if either (or all) coordinates of the real vector are equal to{@code NaN}, the real vector is equal to a vector with all {@code NaN}coordinates.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * This method &lt;em&gt;must&lt;/em&gt; be overriden by concrete subclasses of{@link RealVector} (the current implementation throws an exception).
                 * &lt;/p&gt;                
                <@param>
                    m other Object to test for equality.                    
                </@param>
                <@return>
                    n {@code true} if two vector objects are equal, {@code false} if{@code other} is null, not an instance of {@code RealVector}, or
                     * not equal to this {@code RealVector} instance.                    
                </@return>
                <@throws>
                    s MathUnsupportedOperationException if this method is not
                     * overridden.                    
                </@throws>
            </javadoc>
            <method name="equals" type="boolean" line="1124"/>
            <javadoc line="1128">
                {@inheritDoc}. This method &lt;em&gt;must&lt;/em&gt; be overriden by concrete
                 * subclasses of {@link RealVector} (current implementation throws an
                 * exception).                
                <@throws>
                    s MathUnsupportedOperationException if this method is not
                     * overridden.                    
                </@throws>
            </javadoc>
            <method name="hashCode" type="int" line="1137"/>
            <class name="SparseEntryIterator" line="1141">
                <implements interface="Iterator&lt;Entry&gt;"/>
                <javadoc line="1141">
                    This class should rarely be used, but is here to provide
                     * a default implementation of sparseIterator(), which is implemented
                     * by walking over the entries, skipping those whose values are the default one.
                     * Concrete subclasses which are SparseVector implementations should
                     * make their own sparse iterator, rather than using this one.
                     * This implementation might be useful for ArrayRealVector, when expensive
                     * operations which preserve the default value are to be done on the entries,
                     * and the fraction of non-default values is small (i.e. someone took a
                     * SparseVector, and passed it into the copy-constructor of ArrayRealVector)                    
                    <@deprecated>
                        d As of 3.1, this class is deprecated, see
                         * <a href="https://issues.apache.org/jira/browse/MATH-875">JIRA MATH-875</a>.
                         * This class will be completely removed in 4.0.                        
                    </@deprecated>
                </javadoc>
                <declaration name="dim" type="int" line="1161"/>
                <javadoc line="1161">
                    Dimension of the vector.                    
                </javadoc>
                <declaration name="current" type="Entry" line="1163"/>
                <javadoc line="1163">
                    Last entry returned by {@link #next()}.                    
                </javadoc>
                <declaration name="next" type="Entry" line="1165"/>
                <javadoc line="1165">
                    Next entry for {@link #next()} to return.                    
                </javadoc>
                <javadoc line="1168">
                    Simple constructor.                    
                </javadoc>
                <method name="SparseEntryIterator" type="constructor" line="1169">
                    <scope line="1173"/>
                </method>
                <javadoc line="1178">
                    Advance an entry up to the next nonzero one.                    
                    <@param>
                        m e entry to advance.                        
                    </@param>
                </javadoc>
                <method name="advance" type="void" line="1183">
                    <scope line="1184"/>
                    <scope line="1187"/>
                    <scope line="1190"/>
                </method>
                <javadoc line="1195">
                    {@inheritDoc}                    
                </javadoc>
                <method name="hasNext" type="boolean" line="1196"/>
                <javadoc line="1200">
                    {@inheritDoc}                    
                </javadoc>
                <method name="next" type="Entry" line="1201">
                    <declaration name="index" type="int" line="1202"/>
                    <scope line="1203"/>
                </method>
                <javadoc line="1211">
                    {@inheritDoc}                    
                    <@throws>
                        s MathUnsupportedOperationException in all circumstances.                        
                    </@throws>
                </javadoc>
                <method name="remove" type="void" line="1216"/>
            </class>
            <javadoc line="1221">
                Returns an unmodifiable view of the specified vector.
                 * The returned vector has read-only access. An attempt to modify it will
                 * result in a {@link MathUnsupportedOperationException}. However, the
                 * returned vector is &lt;em&gt;not&lt;/em&gt; immutable, since any modification of{@code v} will also change the returned view.
                 * For example, in the following piece of code
                 * &lt;pre&gt;
                 * RealVector v = new ArrayRealVector(2);
                 * RealVector w = RealVector.unmodifiableRealVector(v);
                 * v.setEntry(0, 1.2);
                 * v.setEntry(1, -3.4);
                 * &lt;/pre&gt;
                 * the changes will be seen in the {@code w} view of {@code v}.                
                <@param>
                    m v Vector for which an unmodifiable view is to be returned.                    
                </@param>
                <@return>
                    n an unmodifiable view of {@code v}.                    
                </@return>
            </javadoc>
            <method name="unmodifiableRealVector" type="RealVector" line="1239">
                <comment line="1240">
                    This anonymous class is an implementation of {@link RealVector}
                     with read-only access.
                     It wraps any {@link RealVector}, and exposes all methods which
                     do not modify it. Invoking methods which should normally result
                     in the modification of the calling {@link RealVector} results in
                     a {@link MathUnsupportedOperationException}. It should be noted
                     that {@link UnmodifiableVector} is &lt;em&gt;not&lt;em&gt; immutable.
                    
                    return new RealVector() {                    
                </comment>
                <anonymous_class line="1249">
                    <javadoc line="1250">
                        {@inheritDoc}                        
                        <@throws>
                            s MathUnsupportedOperationException in all circumstances.                            
                        </@throws>
                    </javadoc>
                    <method name="mapToSelf" type="RealVector" line="1257"/>
                    <javadoc line="1261">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="map" type="RealVector" line="1263"/>
                    <javadoc line="1267">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="iterator" type="Iterator<Entry>" line="1269">
                        <declaration name="i" type="Iterator&lt;Entry&gt;" line="1270"/>
                        <anonymous_class line="1271">
                            <declaration name="e" type="UnmodifiableEntry" line="1272"/>
                            <javadoc line="1272">
                                The current entry.                                
                            </javadoc>
                            <javadoc line="1275">
                                {@inheritDoc}                                
                            </javadoc>
                            <method name="hasNext" type="boolean" line="1276"/>
                            <javadoc line="1280">
                                {@inheritDoc}                                
                            </javadoc>
                            <method name="next" type="Entry" line="1281"/>
                            <javadoc line="1286">
                                {@inheritDoc}                                
                                <@throws>
                                    s MathUnsupportedOperationException in all
                                     * circumstances.                                    
                                </@throws>
                            </javadoc>
                            <method name="remove" type="void" line="1292"/>
                        </anonymous_class>
                    </method>
                    <javadoc line="1298">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="sparseIterator" type="Iterator<Entry>" line="1300">
                        <declaration name="i" type="Iterator&lt;Entry&gt;" line="1301"/>
                        <anonymous_class line="1303">
                            <declaration name="e" type="UnmodifiableEntry" line="1304"/>
                            <javadoc line="1304">
                                The current entry.                                
                            </javadoc>
                            <javadoc line="1307">
                                {@inheritDoc}                                
                            </javadoc>
                            <method name="hasNext" type="boolean" line="1308"/>
                            <javadoc line="1312">
                                {@inheritDoc}                                
                            </javadoc>
                            <method name="next" type="Entry" line="1313"/>
                            <javadoc line="1318">
                                {@inheritDoc}                                
                                <@throws>
                                    s MathUnsupportedOperationException in all
                                     * circumstances.                                    
                                </@throws>
                            </javadoc>
                            <method name="remove" type="void" line="1325"/>
                        </anonymous_class>
                    </method>
                    <javadoc line="1331">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="copy" type="RealVector" line="1333"/>
                    <javadoc line="1337">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="add" type="RealVector" line="1340"/>
                    <javadoc line="1344">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="subtract" type="RealVector" line="1347"/>
                    <javadoc line="1351">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="mapAdd" type="RealVector" line="1353"/>
                    <javadoc line="1357">
                        {@inheritDoc}                        
                        <@throws>
                            s MathUnsupportedOperationException in all
                             * circumstances.                            
                        </@throws>
                    </javadoc>
                    <method name="mapAddToSelf" type="RealVector" line="1365"/>
                    <javadoc line="1369">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="mapSubtract" type="RealVector" line="1371"/>
                    <javadoc line="1375">
                        {@inheritDoc}                        
                        <@throws>
                            s MathUnsupportedOperationException in all
                             * circumstances.                            
                        </@throws>
                    </javadoc>
                    <method name="mapSubtractToSelf" type="RealVector" line="1383"/>
                    <javadoc line="1387">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="mapMultiply" type="RealVector" line="1389"/>
                    <javadoc line="1393">
                        {@inheritDoc}                        
                        <@throws>
                            s MathUnsupportedOperationException in all
                             * circumstances.                            
                        </@throws>
                    </javadoc>
                    <method name="mapMultiplyToSelf" type="RealVector" line="1401"/>
                    <javadoc line="1405">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="mapDivide" type="RealVector" line="1407"/>
                    <javadoc line="1411">
                        {@inheritDoc}                        
                        <@throws>
                            s MathUnsupportedOperationException in all
                             * circumstances.                            
                        </@throws>
                    </javadoc>
                    <method name="mapDivideToSelf" type="RealVector" line="1419"/>
                    <javadoc line="1423">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="ebeMultiply" type="RealVector" line="1426"/>
                    <javadoc line="1430">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="ebeDivide" type="RealVector" line="1433"/>
                    <javadoc line="1437">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="dotProduct" type="double" line="1440"/>
                    <javadoc line="1444">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="cosine" type="double" line="1447"/>
                    <javadoc line="1451">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getNorm" type="double" line="1453"/>
                    <javadoc line="1457">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getL1Norm" type="double" line="1459"/>
                    <javadoc line="1463">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getLInfNorm" type="double" line="1465"/>
                    <javadoc line="1469">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getDistance" type="double" line="1472"/>
                    <javadoc line="1476">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getL1Distance" type="double" line="1479"/>
                    <javadoc line="1483">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getLInfDistance" type="double" line="1486"/>
                    <javadoc line="1490">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="unitVector" type="RealVector" line="1492"/>
                    <javadoc line="1496">
                        {@inheritDoc}                        
                        <@throws>
                            s MathUnsupportedOperationException in all
                             * circumstances.                            
                        </@throws>
                    </javadoc>
                    <method name="unitize" type="void" line="1503"/>
                    <javadoc line="1507">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="outerProduct" type="RealMatrix" line="1509"/>
                    <javadoc line="1513">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getEntry" type="double" line="1515"/>
                    <javadoc line="1519">
                        {@inheritDoc}                        
                        <@throws>
                            s MathUnsupportedOperationException in all
                             * circumstances.                            
                        </@throws>
                    </javadoc>
                    <method name="setEntry" type="void" line="1527"/>
                    <javadoc line="1531">
                        {@inheritDoc}                        
                        <@throws>
                            s MathUnsupportedOperationException in all
                             * circumstances.                            
                        </@throws>
                    </javadoc>
                    <method name="addToEntry" type="void" line="1539"/>
                    <javadoc line="1543">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getDimension" type="int" line="1545"/>
                    <javadoc line="1549">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="append" type="RealVector" line="1551"/>
                    <javadoc line="1555">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="append" type="RealVector" line="1557"/>
                    <javadoc line="1561">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getSubVector" type="RealVector" line="1564"/>
                    <javadoc line="1568">
                        {@inheritDoc}                        
                        <@throws>
                            s MathUnsupportedOperationException in all
                             * circumstances.                            
                        </@throws>
                    </javadoc>
                    <method name="setSubVector" type="void" line="1576"/>
                    <javadoc line="1580">
                        {@inheritDoc}                        
                        <@throws>
                            s MathUnsupportedOperationException in all
                             * circumstances.                            
                        </@throws>
                    </javadoc>
                    <method name="set" type="void" line="1588"/>
                    <javadoc line="1592">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="toArray" type="double[]" line="1594"/>
                    <javadoc line="1598">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="isNaN" type="boolean" line="1600"/>
                    <javadoc line="1604">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="isInfinite" type="boolean" line="1606"/>
                    <javadoc line="1610">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="combine" type="RealVector" line="1613"/>
                    <javadoc line="1617">
                        {@inheritDoc}                        
                        <@throws>
                            s MathUnsupportedOperationException in all
                             * circumstances.                            
                        </@throws>
                    </javadoc>
                    <method name="combineToSelf" type="RealVector" line="1625"/>
                    <class name="UnmodifiableEntry" extends="Entry" line="1629">
                        <javadoc line="1629">
                            An entry in the vector.                            
                        </javadoc>
                        <javadoc line="1631">
                            {@inheritDoc}                            
                        </javadoc>
                        <method name="getValue" type="double" line="1633"/>
                        <javadoc line="1637">
                            {@inheritDoc}                            
                            <@throws>
                                s MathUnsupportedOperationException in all
                                 * circumstances.                                
                            </@throws>
                        </javadoc>
                        <method name="setValue" type="void" line="1645"/>
                    </class>
                </anonymous_class>
            </method>
        </class>
    </source>