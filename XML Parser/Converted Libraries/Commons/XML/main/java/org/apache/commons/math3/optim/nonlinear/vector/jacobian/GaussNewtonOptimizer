<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.vector.jacobian">
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathInternalError"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.linear.ArrayRealVector"/>
        <import package="org.apache.commons.math3.linear.BlockRealMatrix"/>
        <import package="org.apache.commons.math3.linear.DecompositionSolver"/>
        <import package="org.apache.commons.math3.linear.LUDecomposition"/>
        <import package="org.apache.commons.math3.linear.QRDecomposition"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.SingularMatrixException"/>
        <import package="org.apache.commons.math3.optim.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optim.PointVectorValuePair"/>
        <class name="GaussNewtonOptimizer" extends="AbstractLeastSquaresOptimizer" line="34">
            <javadoc line="34">
                Gauss-Newton least-squares solver.
                 * &lt;br/&gt;
                 * Constraints are not supported: the call to{@link #optimize(OptimizationData[]) optimize} will throw{@link MathUnsupportedOperationException} if bounds are passed to it.
                 * &lt;p&gt;
                 * This class solve a least-square problem by solving the normal equations
                 * of the linearized problem at each iteration. Either LU decomposition or
                 * QR decomposition can be used to solve the normal equations. LU decomposition
                 * is faster but QR decomposition is more robust for difficult problems.
                 * &lt;/p&gt;                
                <@version>
                    n $Id: GaussNewtonOptimizer.java 1458323 2013-03-19 14:51:30Z erans $                    
                </@version>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <declaration name="useLU" type="boolean" line="53"/>
            <javadoc line="53">
                Indicator for using LU decomposition.                
            </javadoc>
            <javadoc line="56">
                Simple constructor with default settings.
                 * The normal equations will be solved using LU decomposition.                
                <@param>
                    m checker Convergence checker.                    
                </@param>
            </javadoc>
            <method name="GaussNewtonOptimizer" type="constructor" line="62"/>
            <javadoc line="66">
                @param useLU If {@code true}, the normal equations will be solved
                 * using LU decomposition, otherwise they will be solved using QR
                 * decomposition.                
                <@param>
                    m checker Convergence checker.                    
                </@param>
            </javadoc>
            <method name="GaussNewtonOptimizer" type="constructor" line="73"/>
            <javadoc line="78">
                {@inheritDoc}                
            </javadoc>
            <method name="doOptimize" type="PointVectorValuePair" line="80">
                <comment line="81">
                    Computation will be useless without a checker (see &quot;for-loop&quot;).                    
                </comment>
                <comment line="81">
                    nal int nR = targetValues.length; // Number of observed data.                    
                </comment>
                <comment line="81">
                    Diagonal of the weight matrix.                    
                </comment>
                <comment line="81">
                    iterate until convergence is reached                    
                </comment>
                <comment line="81">
                    Must never happen.                    
                </comment>
                <declaration name="checker" type="ConvergenceChecker&lt;PointVectorValuePair&gt;" line="83"/>
                <scope line="87"/>
                <declaration name="targetValues" type="double[]" line="91"/>
                <declaration name="nR" type="int" line="92"/>
                <declaration name="weightMatrix" type="RealMatrix" line="94"/>
                <declaration name="residualsWeights" type="double[]" line="96"/>
                <scope line="97"/>
                <declaration name="currentPoint" type="double[]" line="101"/>
                <declaration name="nC" type="int" line="102"/>
                <declaration name="current" type="PointVectorValuePair" line="105"/>
                <scope line="106">
                    <declaration name="previous" type="PointVectorValuePair" line="110"/>
                    <declaration name="currentObjective" type="double[]" line="112"/>
                    <declaration name="currentResiduals" type="double[]" line="113"/>
                    <declaration name="weightedJacobian" type="RealMatrix" line="114"/>
                    <declaration name="b" type="double[]" line="118"/>
                    <declaration name="a" type="double[][]" line="119"/>
                    <scope line="120">
                        <declaration name="grad" type="double[]" line="122"/>
                        <declaration name="weight" type="double" line="123"/>
                        <declaration name="residual" type="double" line="124"/>
                        <declaration name="wr" type="double" line="127"/>
                        <scope line="128"/>
                        <scope line="133">
                            <declaration name="ak" type="double[]" line="134"/>
                            <declaration name="wgk" type="double" line="135"/>
                            <scope line="136"/>
                        </scope>
                    </scope>
                    <scope line="142">
                        <declaration name="mA" type="RealMatrix" line="144"/>
                        <declaration name="solver" type="DecompositionSolver" line="145"/>
                        <declaration name="dX" type="double[]" line="148"/>
                        <scope line="150"/>
                    </scope>
                    <scope line="153"/>
                    <scope line="158">
                        <scope line="160"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="170">
                @throws MathUnsupportedOperationException if bounds were passed to the{@link #optimize(OptimizationData[]) optimize} method.                
            </javadoc>
            <method name="checkParameters" type="void" line="174">
                <scope line="176"/>
            </method>
        </class>
    </source>