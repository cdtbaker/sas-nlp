<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <interface name="FieldMatrix">
            <implements interface="AnyMatrix"/>
            <javadoc line="31">
                Interface defining field-valued matrix with basic algebraic operations.
                 * &lt;p&gt;
                 * Matrix element indexing is 0-based -- e.g., &lt;code&gt;getEntry(0, 0)&lt;/code&gt;
                 * returns the element in the first row, first column of the matrix.&lt;/p&gt;                
                <@param>
                    m<T>
                     *  the type of the field elements                    
                </@param>
                <@version>
                    n $Id: FieldMatrix.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <method name="getField" type="Field<T>" line="41"/>
            <javadoc line="41">
                Get the type of field elements of the matrix.                
                <@return>
                    n the type of field elements of the matrix.                    
                </@return>
            </javadoc>
            <method name="createMatrix" type="FieldMatrix<T>" line="48"/>
            <javadoc line="48">
                Create a new FieldMatrix&lt;T&gt; of the same type as the instance with
                 * the supplied row and column dimensions.                
                <@param>
                    m rowDimension  the number of rows in the new matrix                    
                </@param>
                <@param>
                    m columnDimension  the number of columns in the new matrix                    
                </@param>
                <@return>
                    n a new matrix of the same type as the instance                    
                </@return>
                <@throws>
                    s NotStrictlyPositiveException if row or column dimension is not
                     * positive.                    
                </@throws>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="copy" type="FieldMatrix<T>" line="62"/>
            <javadoc line="62">
                Make a (deep) copy of this.                
                <@return>
                    n a copy of this matrix.                    
                </@return>
            </javadoc>
            <method name="add" type="FieldMatrix<T>" line="69"/>
            <javadoc line="69">
                Compute the sum of this and m.                
                <@param>
                    m m Matrix to be added.                    
                </@param>
                <@return>
                    n {@code this} + {@code m}.                    
                </@return>
                <@throws>
                    s MatrixDimensionMismatchException if {@code m} is not the same
                     * size as {@code this} matrix.                    
                </@throws>
            </javadoc>
            <method name="subtract" type="FieldMatrix<T>" line="79"/>
            <javadoc line="79">
                Subtract {@code m} from this matrix.                
                <@param>
                    m m Matrix to be subtracted.                    
                </@param>
                <@return>
                    n {@code this} - {@code m}.                    
                </@return>
                <@throws>
                    s MatrixDimensionMismatchException if {@code m} is not the same
                     * size as {@code this} matrix.                    
                </@throws>
            </javadoc>
            <method name="scalarAdd" type="FieldMatrix<T>" line="89"/>
            <javadoc line="89">
                Increment each entry of this matrix.                
                <@param>
                    m d Value to be added to each entry.                    
                </@param>
                <@return>
                    n {@code d} + {@code this}.                    
                </@return>
            </javadoc>
            <method name="scalarMultiply" type="FieldMatrix<T>" line="97"/>
            <javadoc line="97">
                Multiply each entry by {@code d}.                
                <@param>
                    m d Value to multiply all entries by.                    
                </@param>
                <@return>
                    n {@code d} * {@code this}.                    
                </@return>
            </javadoc>
            <method name="multiply" type="FieldMatrix<T>" line="105"/>
            <javadoc line="105">
                Postmultiply this matrix by {@code m}.                
                <@param>
                    m m  Matrix to postmultiply by.                    
                </@param>
                <@return>
                    n {@code this} * {@code m}.                    
                </@return>
                <@throws>
                    s DimensionMismatchException if the number of columns of{@code this} matrix is not equal to the number of rows of matrix{@code m}.                    
                </@throws>
            </javadoc>
            <method name="preMultiply" type="FieldMatrix<T>" line="116"/>
            <javadoc line="116">
                Premultiply this matrix by {@code m}.                
                <@param>
                    m m Matrix to premultiply by.                    
                </@param>
                <@return>
                    n {@code m} * {@code this}.                    
                </@return>
                <@throws>
                    s DimensionMismatchException if the number of columns of {@code m}differs from the number of rows of {@code this} matrix.                    
                </@throws>
            </javadoc>
            <method name="power" type="FieldMatrix<T>" line="126"/>
            <javadoc line="126">
                Returns the result multiplying this with itself &lt;code&gt;p&lt;/code&gt; times.
                 * Depending on the type of the field elements, T, instability for high
                 * powers might occur.                
                <@param>
                    m p raise this to power p                    
                </@param>
                <@return>
                    n this^p                    
                </@return>
                <@throws>
                    s NotPositiveException if {@code p < 0}                    
                </@throws>
                <@throws>
                    s NonSquareMatrixException if {@code this matrix} is not square                    
                </@throws>
            </javadoc>
            <method name="getData" type="T[][]" line="139"/>
            <javadoc line="139">
                Returns matrix entries as a two-dimensional array.                
                <@return>
                    n a 2-dimensional array of entries.                    
                </@return>
            </javadoc>
            <method name="getSubMatrix" type="FieldMatrix<T>" line="146"/>
            <javadoc line="146">
                Get a submatrix. Rows and columns are indicated
                 * counting from 0 to n - 1.                
                <@param>
                    m startRow Initial row index                    
                </@param>
                <@param>
                    m endRow Final row index (inclusive)                    
                </@param>
                <@param>
                    m startColumn Initial column index                    
                </@param>
                <@param>
                    m endColumn Final column index (inclusive)                    
                </@param>
                <@return>
                    n the matrix containing the data of the specified rows and columns.                    
                </@return>
                <@throws>
                    s NumberIsTooSmallException is {@code endRow < startRow} of{@code endColumn < startColumn}.                    
                </@throws>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
            </javadoc>
            <method name="getSubMatrix" type="FieldMatrix<T>" line="162"/>
            <javadoc line="162">
                Get a submatrix. Rows and columns are indicated
                 * counting from 0 to n - 1.                
                <@param>
                    m selectedRows Array of row indices.                    
                </@param>
                <@param>
                    m selectedColumns Array of column indices.                    
                </@param>
                <@return>
                    n the matrix containing the data in the
                     * specified rows and columns.                    
                </@return>
                <@throws>
                    s NoDataException if {@code selectedRows} or{@code selectedColumns} is empty                    
                </@throws>
                <@throws>
                    s NullArgumentException if {@code selectedRows} or{@code selectedColumns} is {@code null}.                    
                </@throws>
                <@throws>
                    s OutOfRangeException if row or column selections are not valid.                    
                </@throws>
            </javadoc>
            <method name="copySubMatrix" type="void" line="179"/>
            <javadoc line="179">
                Copy a submatrix. Rows and columns are indicated
                 * counting from 0 to n-1.                
                <@param>
                    m startRow Initial row index.                    
                </@param>
                <@param>
                    m endRow Final row index (inclusive).                    
                </@param>
                <@param>
                    m startColumn Initial column index.                    
                </@param>
                <@param>
                    m endColumn Final column index (inclusive).                    
                </@param>
                <@param>
                    m destination The arrays where the submatrix data should be copied
                     * (if larger than rows/columns counts, only the upper-left part will be used).                    
                </@param>
                <@throws>
                    s MatrixDimensionMismatchException if the dimensions of{@code destination} do not match those of {@code this}.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException is {@code endRow < startRow} of{@code endColumn < startColumn}.                    
                </@throws>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
                <@exception>
                    n IllegalArgumentException if the destination array is too small.                    
                </@exception>
            </javadoc>
            <method name="copySubMatrix" type="void" line="201"/>
            <javadoc line="201">
                Copy a submatrix. Rows and columns are indicated
                 * counting from 0 to n - 1.                
                <@param>
                    m selectedRows Array of row indices.                    
                </@param>
                <@param>
                    m selectedColumns Array of column indices.                    
                </@param>
                <@param>
                    m destination Arrays where the submatrix data should be copied
                     * (if larger than rows/columns counts, only the upper-left part will be used)                    
                </@param>
                <@throws>
                    s MatrixDimensionMismatchException if the dimensions of{@code destination} do not match those of {@code this}.                    
                </@throws>
                <@throws>
                    s NoDataException if {@code selectedRows} or{@code selectedColumns} is empty                    
                </@throws>
                <@throws>
                    s NullArgumentException if {@code selectedRows} or{@code selectedColumns} is {@code null}.                    
                </@throws>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
            </javadoc>
            <method name="setSubMatrix" type="void" line="221"/>
            <javadoc line="221">
                Replace the submatrix starting at {@code (row, column)} using data in the
                 * input {@code subMatrix} array. Indexes are 0-based.
                 * &lt;p&gt;
                 * Example:&lt;br&gt;
                 * Starting with
                 * &lt;pre&gt;
                 * 1  2  3  4
                 * 5  6  7  8
                 * 9  0  1  2
                 * &lt;/pre&gt;
                 * and &lt;code&gt;subMatrix = {{3, 4} {5,6}}&lt;/code&gt;, invoking
                 * &lt;code&gt;setSubMatrix(subMatrix,1,1))&lt;/code&gt; will result in
                 * &lt;pre&gt;
                 * 1  2  3  4
                 * 5  3  4  8
                 * 9  5  6  2
                 * &lt;/pre&gt;
                 * &lt;/p&gt;                
                <@param>
                    m subMatrix Array containing the submatrix replacement data.                    
                </@param>
                <@param>
                    m row Row coordinate of the top-left element to be replaced.                    
                </@param>
                <@param>
                    m column Column coordinate of the top-left element to be replaced.                    
                </@param>
                <@throws>
                    s OutOfRangeException if {@code subMatrix} does not fit into this
                     * matrix from element in {@code (row, column)}.                    
                </@throws>
                <@throws>
                    s NoDataException if a row or column of {@code subMatrix} is empty.                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if {@code subMatrix} is not
                     * rectangular (not all rows have the same length).                    
                </@throws>
                <@throws>
                    s NullArgumentException if {@code subMatrix} is {@code null}.                    
                </@throws>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="getRowMatrix" type="FieldMatrix<T>" line="260"/>
            <javadoc line="260">
                Get the entries in row number {@code row}as a row matrix.                
                <@param>
                    m row Row to be fetched.                    
                </@param>
                <@return>
                    n a row matrix.                    
                </@return>
                <@throws>
                    s OutOfRangeException if the specified row index is invalid.                    
                </@throws>
            </javadoc>
            <method name="setRowMatrix" type="void" line="270"/>
            <javadoc line="270">
                Set the entries in row number {@code row}as a row matrix.                
                <@param>
                    m row Row to be set.                    
                </@param>
                <@param>
                    m matrix Row matrix (must have one row and the same number
                     * of columns as the instance).                    
                </@param>
                <@throws>
                    s OutOfRangeException if the specified row index is invalid.                    
                </@throws>
                <@throws>
                    s MatrixDimensionMismatchExceptionif the matrix dimensions do not match one instance row.                    
                </@throws>
            </javadoc>
            <method name="getColumnMatrix" type="FieldMatrix<T>" line="284"/>
            <javadoc line="284">
                Get the entries in column number {@code column}as a column matrix.                
                <@param>
                    m column Column to be fetched.                    
                </@param>
                <@return>
                    n a column matrix.                    
                </@return>
                <@throws>
                    s OutOfRangeException if the specified column index is invalid.                    
                </@throws>
            </javadoc>
            <method name="setColumnMatrix" type="void" line="294"/>
            <javadoc line="294">
                Set the entries in column number {@code column}as a column matrix.                
                <@param>
                    m column Column to be set.                    
                </@param>
                <@param>
                    m matrix column matrix (must have one column and the same
                     * number of rows as the instance).                    
                </@param>
                <@throws>
                    s OutOfRangeException if the specified column index is invalid.                    
                </@throws>
                <@throws>
                    s MatrixDimensionMismatchException if the matrix dimensions do
                     * not match one instance column.                    
                </@throws>
            </javadoc>
            <method name="getRowVector" type="FieldVector<T>" line="308"/>
            <javadoc line="308">
                Get the entries in row number {@code row}as a vector.                
                <@param>
                    m row Row to be fetched                    
                </@param>
                <@return>
                    n a row vector.                    
                </@return>
                <@throws>
                    s OutOfRangeException if the specified row index is invalid.                    
                </@throws>
            </javadoc>
            <method name="setRowVector" type="void" line="318"/>
            <javadoc line="318">
                Set the entries in row number {@code row}as a vector.                
                <@param>
                    m row Row to be set.                    
                </@param>
                <@param>
                    m vector row vector (must have the same number of columns
                     * as the instance).                    
                </@param>
                <@throws>
                    s OutOfRangeException if the specified row index is invalid.                    
                </@throws>
                <@throws>
                    s MatrixDimensionMismatchException if the vector dimension does not
                     * match one instance row.                    
                </@throws>
            </javadoc>
            <method name="getColumnVector" type="FieldVector<T>" line="332"/>
            <javadoc line="332">
                Returns the entries in column number {@code column}as a vector.                
                <@param>
                    m column Column to be fetched.                    
                </@param>
                <@return>
                    n a column vector.                    
                </@return>
                <@throws>
                    s OutOfRangeException if the specified column index is invalid.                    
                </@throws>
            </javadoc>
            <method name="setColumnVector" type="void" line="342"/>
            <javadoc line="342">
                Set the entries in column number {@code column}as a vector.                
                <@param>
                    m column Column to be set.                    
                </@param>
                <@param>
                    m vector Column vector (must have the same number of rows
                     * as the instance).                    
                </@param>
                <@throws>
                    s OutOfRangeException if the specified column index is invalid.                    
                </@throws>
                <@throws>
                    s MatrixDimensionMismatchException if the vector dimension does not
                     * match one instance column.                    
                </@throws>
            </javadoc>
            <method name="getRow" type="T[]" line="356"/>
            <javadoc line="356">
                Get the entries in row number {@code row} as an array.                
                <@param>
                    m row Row to be fetched.                    
                </@param>
                <@return>
                    n array of entries in the row.                    
                </@return>
                <@throws>
                    s OutOfRangeException if the specified row index is not valid.                    
                </@throws>
            </javadoc>
            <method name="setRow" type="void" line="365"/>
            <javadoc line="365">
                Set the entries in row number {@code row}as a row matrix.                
                <@param>
                    m row Row to be set.                    
                </@param>
                <@param>
                    m array Row matrix (must have the same number of columns as
                     * the instance).                    
                </@param>
                <@throws>
                    s OutOfRangeException if the specified row index is invalid.                    
                </@throws>
                <@throws>
                    s MatrixDimensionMismatchException if the array size does not match
                     * one instance row.                    
                </@throws>
            </javadoc>
            <method name="getColumn" type="T[]" line="379"/>
            <javadoc line="379">
                Get the entries in column number {@code col} as an array.                
                <@param>
                    m column the column to be fetched                    
                </@param>
                <@return>
                    n array of entries in the column                    
                </@return>
                <@throws>
                    s OutOfRangeException if the specified column index is not valid.                    
                </@throws>
            </javadoc>
            <method name="setColumn" type="void" line="388"/>
            <javadoc line="388">
                Set the entries in column number {@code column}as a column matrix.                
                <@param>
                    m column the column to be set                    
                </@param>
                <@param>
                    m array column array (must have the same number of rows as the instance)                    
                </@param>
                <@throws>
                    s OutOfRangeException if the specified column index is invalid.                    
                </@throws>
                <@throws>
                    s MatrixDimensionMismatchException if the array size does not match
                     * one instance column.                    
                </@throws>
            </javadoc>
            <method name="getEntry" type="T" line="401"/>
            <javadoc line="401">
                Returns the entry in the specified row and column.                
                <@param>
                    m row  row location of entry to be fetched                    
                </@param>
                <@param>
                    m column  column location of entry to be fetched                    
                </@param>
                <@return>
                    n matrix entry in row,column                    
                </@return>
                <@throws>
                    s OutOfRangeException if the row or column index is not valid.                    
                </@throws>
            </javadoc>
            <method name="setEntry" type="void" line="411"/>
            <javadoc line="411">
                Set the entry in the specified row and column.                
                <@param>
                    m row  row location of entry to be set                    
                </@param>
                <@param>
                    m column  column location of entry to be set                    
                </@param>
                <@param>
                    m value matrix entry to be set in row,column                    
                </@param>
                <@throws>
                    s OutOfRangeException if the row or column index is not valid.                    
                </@throws>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="addToEntry" type="void" line="422"/>
            <javadoc line="422">
                Change an entry in the specified row and column.                
                <@param>
                    m row Row location of entry to be set.                    
                </@param>
                <@param>
                    m column Column location of entry to be set.                    
                </@param>
                <@param>
                    m increment Value to add to the current matrix entry in{@code (row, column)}.                    
                </@param>
                <@throws>
                    s OutOfRangeException if the row or column index is not valid.                    
                </@throws>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="multiplyEntry" type="void" line="434"/>
            <javadoc line="434">
                Change an entry in the specified row and column.                
                <@param>
                    m row Row location of entry to be set.                    
                </@param>
                <@param>
                    m column Column location of entry to be set.                    
                </@param>
                <@param>
                    m factor Multiplication factor for the current matrix entry
                     * in {@code (row,column)}                    
                </@param>
                <@throws>
                    s OutOfRangeException if the row or column index is not valid.                    
                </@throws>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="transpose" type="FieldMatrix<T>" line="446"/>
            <javadoc line="446">
                Returns the transpose of this matrix.                
                <@return>
                    n transpose matrix                    
                </@return>
            </javadoc>
            <method name="getTrace" type="T" line="453"/>
            <javadoc line="453">
                Returns the &lt;a href=&quot;http://mathworld.wolfram.com/MatrixTrace.html&quot;&gt;
                 * trace&lt;/a&gt; of the matrix (the sum of the elements on the main diagonal).                
                <@return>
                    n trace                    
                </@return>
                <@throws>
                    s NonSquareMatrixException if the matrix is not square.                    
                </@throws>
            </javadoc>
            <method name="operate" type="T[]" line="462"/>
            <javadoc line="462">
                Returns the result of multiplying this by the vector {@code v}.                
                <@param>
                    m v the vector to operate on                    
                </@param>
                <@return>
                    n {@code this * v}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if the number of columns of{@code this} matrix is not equal to the size of the vector {@code v}.                    
                </@throws>
            </javadoc>
            <method name="operate" type="FieldVector<T>" line="472"/>
            <javadoc line="472">
                Returns the result of multiplying this by the vector {@code v}.                
                <@param>
                    m v the vector to operate on                    
                </@param>
                <@return>
                    n {@code this * v}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if the number of columns of{@code this} matrix is not equal to the size of the vector {@code v}.                    
                </@throws>
            </javadoc>
            <method name="preMultiply" type="T[]" line="482"/>
            <javadoc line="482">
                Returns the (row) vector result of premultiplying this by the vector{@code v}.                
                <@param>
                    m v the row vector to premultiply by                    
                </@param>
                <@return>
                    n {@code v * this}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if the number of rows of {@code this}matrix is not equal to the size of the vector {@code v}                    
                </@throws>
            </javadoc>
            <method name="preMultiply" type="FieldVector<T>" line="493"/>
            <javadoc line="493">
                Returns the (row) vector result of premultiplying this by the vector{@code v}.                
                <@param>
                    m v the row vector to premultiply by                    
                </@param>
                <@return>
                    n {@code v * this}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if the number of rows of {@code this}matrix is not equal to the size of the vector {@code v}                    
                </@throws>
            </javadoc>
            <method name="walkInRowOrder" type="T" line="504"/>
            <javadoc line="504">
                Visit (and possibly change) all matrix entries in row order.
                 * &lt;p&gt;Row order starts at upper left and iterating through all elements
                 * of a row from left to right before going to the leftmost element
                 * of the next row.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInRowOrder" type="T" line="526"/>
            <javadoc line="526">
                Visit (but don&apos;t change) all matrix entries in row order.
                 * &lt;p&gt;Row order starts at upper left and iterating through all elements
                 * of a row from left to right before going to the leftmost element
                 * of the next row.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInRowOrder" type="T" line="548"/>
            <javadoc line="548">
                Visit (and possibly change) some matrix entries in row order.
                 * &lt;p&gt;Row order starts at upper left and iterating through all elements
                 * of a row from left to right before going to the leftmost element
                 * of the next row.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@param>
                    m startRow Initial row index                    
                </@param>
                <@param>
                    m endRow Final row index (inclusive)                    
                </@param>
                <@param>
                    m startColumn Initial column index                    
                </@param>
                <@param>
                    m endColumn Final column index                    
                </@param>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </@throws>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInRowOrder" type="T" line="579"/>
            <javadoc line="579">
                Visit (but don&apos;t change) some matrix entries in row order.
                 * &lt;p&gt;Row order starts at upper left and iterating through all elements
                 * of a row from left to right before going to the leftmost element
                 * of the next row.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@param>
                    m startRow Initial row index                    
                </@param>
                <@param>
                    m endRow Final row index (inclusive)                    
                </@param>
                <@param>
                    m startColumn Initial column index                    
                </@param>
                <@param>
                    m endColumn Final column index                    
                </@param>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </@throws>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInColumnOrder" type="T" line="610"/>
            <javadoc line="610">
                Visit (and possibly change) all matrix entries in column order.
                 * &lt;p&gt;Column order starts at upper left and iterating through all elements
                 * of a column from top to bottom before going to the topmost element
                 * of the next column.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInColumnOrder" type="T" line="632"/>
            <javadoc line="632">
                Visit (but don&apos;t change) all matrix entries in column order.
                 * &lt;p&gt;Column order starts at upper left and iterating through all elements
                 * of a column from top to bottom before going to the topmost element
                 * of the next column.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInColumnOrder" type="T" line="654"/>
            <javadoc line="654">
                Visit (and possibly change) some matrix entries in column order.
                 * &lt;p&gt;Column order starts at upper left and iterating through all elements
                 * of a column from top to bottom before going to the topmost element
                 * of the next column.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@param>
                    m startRow Initial row index                    
                </@param>
                <@param>
                    m endRow Final row index (inclusive)                    
                </@param>
                <@param>
                    m startColumn Initial column index                    
                </@param>
                <@param>
                    m endColumn Final column index                    
                </@param>
                <@throws>
                    s NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </@throws>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInColumnOrder" type="T" line="685"/>
            <javadoc line="685">
                Visit (but don&apos;t change) some matrix entries in column order.
                 * &lt;p&gt;Column order starts at upper left and iterating through all elements
                 * of a column from top to bottom before going to the topmost element
                 * of the next column.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@param>
                    m startRow Initial row index                    
                </@param>
                <@param>
                    m endRow Final row index (inclusive)                    
                </@param>
                <@param>
                    m startColumn Initial column index                    
                </@param>
                <@param>
                    m endColumn Final column index                    
                </@param>
                <@throws>
                    s NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </@throws>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInOptimizedOrder" type="T" line="716"/>
            <javadoc line="716">
                Visit (and possibly change) all matrix entries using the fastest possible order.
                 * &lt;p&gt;The fastest walking order depends on the exact matrix class. It may be
                 * different from traditional row or column orders.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInOptimizedOrder" type="T" line="737"/>
            <javadoc line="737">
                Visit (but don&apos;t change) all matrix entries using the fastest possible order.
                 * &lt;p&gt;The fastest walking order depends on the exact matrix class. It may be
                 * different from traditional row or column orders.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInOptimizedOrder" type="T" line="758"/>
            <javadoc line="758">
                Visit (and possibly change) some matrix entries using the fastest possible order.
                 * &lt;p&gt;The fastest walking order depends on the exact matrix class. It may be
                 * different from traditional row or column orders.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@param>
                    m startRow Initial row index                    
                </@param>
                <@param>
                    m endRow Final row index (inclusive)                    
                </@param>
                <@param>
                    m startColumn Initial column index                    
                </@param>
                <@param>
                    m endColumn Final column index (inclusive)                    
                </@param>
                <@throws>
                    s NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </@throws>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
            <method name="walkInOptimizedOrder" type="T" line="788"/>
            <javadoc line="788">
                Visit (but don&apos;t change) some matrix entries using the fastest possible order.
                 * &lt;p&gt;The fastest walking order depends on the exact matrix class. It may be
                 * different from traditional row or column orders.&lt;/p&gt;                
                <@param>
                    m visitor visitor used to process all matrix entries                    
                </@param>
                <@param>
                    m startRow Initial row index                    
                </@param>
                <@param>
                    m endRow Final row index (inclusive)                    
                </@param>
                <@param>
                    m startColumn Initial column index                    
                </@param>
                <@param>
                    m endColumn Final column index (inclusive)                    
                </@param>
                <@throws>
                    s NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </@throws>
                <@throws>
                    s OutOfRangeException if the indices are not valid.                    
                </@throws>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </@see>
                <@see>
                    e #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </@see>
                <@return>
                    n the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
                     * of the walk                    
                </@return>
            </javadoc>
        </interface>
    </source>