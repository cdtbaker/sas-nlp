<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.sampling">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInput"/>
        <import package="java.io.ObjectOutput"/>
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.ode.EquationsMapper"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="NordsieckStepInterpolator" extends="AbstractStepInterpolator" line="30">
            <javadoc line="30">
                This class implements an interpolator for integrators using Nordsieck representation.
                 * &lt;p&gt;This interpolator computes dense output around the current point.
                 * The interpolation equation is based on Taylor series formulas.                
                <@see>
                    e org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator                    
                </@see>
                <@see>
                    e org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator                    
                </@see>
                <@version>
                    n $Id: NordsieckStepInterpolator.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="44"/>
            <javadoc line="44">
                Serializable version identifier                
            </javadoc>
            <declaration name="stateVariation" type="double[]" line="47"/>
            <javadoc line="47">
                State variation.                
            </javadoc>
            <declaration name="scalingH" type="double" line="50"/>
            <javadoc line="50">
                Step size used in the first scaled derivative and Nordsieck vector.                
            </javadoc>
            <declaration name="referenceTime" type="double" line="53"/>
            <javadoc line="53">
                Reference time for all arrays.
                 * &lt;p&gt;Sometimes, the reference time is the same as previousTime,
                 * sometimes it is the same as currentTime, so we use a separate
                 * field to avoid any confusion.
                 * &lt;/p&gt;                
            </javadoc>
            <declaration name="scaled" type="double[]" line="61"/>
            <javadoc line="61">
                First scaled derivative.                
            </javadoc>
            <declaration name="nordsieck" type="Array2DRowRealMatrix" line="64"/>
            <javadoc line="64">
                Nordsieck vector.                
            </javadoc>
            <javadoc line="67">
                Simple constructor.
                 * This constructor builds an instance that is not usable yet, the{@link AbstractStepInterpolator#reinitialize} method should be called
                 * before using the instance in order to initialize the internal arrays. This
                 * constructor is used only in order to delay the initialization in
                 * some cases.                
            </javadoc>
            <method name="NordsieckStepInterpolator" type="constructor" line="74"/>
            <javadoc line="77">
                Copy constructor.                
                <@param>
                    m interpolator interpolator to copy from. The copy is a deep
                     * copy: its arrays are separated from the original arrays of the
                     * instance                    
                </@param>
            </javadoc>
            <method name="NordsieckStepInterpolator" type="constructor" line="82">
                <scope line="86"/>
                <scope line="89"/>
                <scope line="92"/>
            </method>
            <javadoc line="97">
                {@inheritDoc}                
            </javadoc>
            <method name="doCopy" type="StepInterpolator" line="99"/>
            <javadoc line="103">
                Reinitialize the instance.
                 * &lt;p&gt;Beware that all arrays &lt;em&gt;must&lt;/em&gt; be references to integrator
                 * arrays, in order to ensure proper update without copy.&lt;/p&gt;                
                <@param>
                    m y reference to the integrator array holding the state at
                     * the end of the step                    
                </@param>
                <@param>
                    m forward integration direction indicator                    
                </@param>
                <@param>
                    m primaryMapper equations mapper for the primary equations set                    
                </@param>
                <@param>
                    m secondaryMappers equations mappers for the secondary equations sets                    
                </@param>
            </javadoc>
            <method name="reinitialize" type="void" line="115"/>
            <javadoc line="120">
                Reinitialize the instance.
                 * &lt;p&gt;Beware that all arrays &lt;em&gt;must&lt;/em&gt; be references to integrator
                 * arrays, in order to ensure proper update without copy.&lt;/p&gt;                
                <@param>
                    m time time at which all arrays are defined                    
                </@param>
                <@param>
                    m stepSize step size used in the scaled and nordsieck arrays                    
                </@param>
                <@param>
                    m scaledDerivative reference to the integrator array holding the first
                     * scaled derivative                    
                </@param>
                <@param>
                    m nordsieckVector reference to the integrator matrix holding the
                     * nordsieck vector                    
                </@param>
            </javadoc>
            <method name="reinitialize" type="void" line="132">
                <comment line="133">
                    make sure the state and derivatives will depend on the new arrays                    
                </comment>
            </method>
            <javadoc line="143">
                Rescale the instance.
                 * &lt;p&gt;Since the scaled and Nordiseck arrays are shared with the caller,
                 * this method has the side effect of rescaling this arrays in the caller too.&lt;/p&gt;                
                <@param>
                    m stepSize new step size to use in the scaled and nordsieck arrays                    
                </@param>
            </javadoc>
            <method name="rescale" type="void" line="148">
                <declaration name="ratio" type="double" line="150"/>
                <scope line="151"/>
                <declaration name="nData" type="double[][]" line="155"/>
                <declaration name="power" type="double" line="156"/>
                <scope line="157">
                    <declaration name="nDataI" type="double[]" line="159"/>
                    <scope line="160"/>
                </scope>
            </method>
            <javadoc line="169">
                Get the state vector variation from current to interpolated state.
                 * &lt;p&gt;This method is aimed at computing y(t&lt;sub&gt;interpolation&lt;/sub&gt;)
                 * -y(t&lt;sub&gt;current&lt;/sub&gt;) accurately by avoiding the cancellation errors
                 * that would occur if the subtraction were performed explicitly.&lt;/p&gt;
                 * &lt;p&gt;The returned vector is a reference to a reused array, so
                 * it should not be modified and it should be copied if it needs
                 * to be preserved across several calls.&lt;/p&gt;                
                <@return>
                    n state vector at time {@link #getInterpolatedTime}                    
                </@return>
                <@see>
                    e #getInterpolatedDerivatives()                    
                </@see>
                <@exception>
                    n MaxCountExceededException if the number of functions evaluations is exceeded                    
                </@exception>
            </javadoc>
            <method name="getInterpolatedStateVariation" type="double[]" line="181">
                <comment line="182">
                    compute and ignore interpolated state                    
                </comment>
                <comment line="182">
                    to make sure state variation is computed as a side effect                    
                </comment>
            </method>
            <javadoc line="188">
                {@inheritDoc}                
            </javadoc>
            <method name="computeInterpolatedStateAndDerivatives" type="void" line="190">
                <comment line="191">
                    apply Taylor formula from high order to low order,                    
                </comment>
                <comment line="191">
                    for the sake of numerical accuracy                    
                </comment>
                <declaration name="x" type="double" line="192"/>
                <declaration name="normalizedAbscissa" type="double" line="193"/>
                <declaration name="nData" type="double[][]" line="200"/>
                <scope line="201">
                    <declaration name="order" type="int" line="202"/>
                    <declaration name="nDataI" type="double[]" line="203"/>
                    <declaration name="power" type="double" line="204"/>
                    <scope line="205">
                        <declaration name="d" type="double" line="206"/>
                    </scope>
                </scope>
                <scope line="212"/>
            </method>
            <javadoc line="221">
                {@inheritDoc}                
            </javadoc>
            <method name="writeExternal" type="void" line="224">
                <comment line="225">
                    save the state of the base class                    
                </comment>
                <comment line="225">
                    save the local attributes                    
                </comment>
                <comment line="225">
                    we don&apos;t save state variation, it will be recomputed                    
                </comment>
                <declaration name="n" type="int" line="233"/>
                <scope line="234"/>
                <scope line="236">
                    <scope line="238"/>
                </scope>
                <scope line="243"/>
                <scope line="245"/>
            </method>
            <javadoc line="254">
                {@inheritDoc}                
            </javadoc>
            <method name="readExternal" type="void" line="257">
                <comment line="258">
                    read the base class                    
                </comment>
                <comment line="258">
                    read the local attributes                    
                </comment>
                <declaration name="t" type="double" line="260"/>
                <declaration name="n" type="int" line="266"/>
                <declaration name="hasScaled" type="boolean" line="267"/>
                <scope line="268">
                    <scope line="270"/>
                </scope>
                <scope line="273"/>
                <declaration name="hasNordsieck" type="boolean" line="277"/>
                <scope line="278"/>
                <scope line="280"/>
                <scope line="284"/>
                <scope line="288"/>
            </method>
        </class>
    </source>