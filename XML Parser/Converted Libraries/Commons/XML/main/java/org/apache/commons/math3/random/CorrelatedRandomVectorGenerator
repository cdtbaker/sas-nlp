<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.random">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.RectangularCholeskyDecomposition"/>
        <class name="CorrelatedRandomVectorGenerator" line="24">
            <implements interface="RandomVectorGenerator"/>
            <javadoc line="24">
                A {@link RandomVectorGenerator} that generates vectors with with
                 * correlated components.
                 * &lt;p&gt;Random vectors with correlated components are built by combining
                 * the uncorrelated components of another random vector in such a way that
                 * the resulting correlations are the ones specified by a positive
                 * definite covariance matrix.&lt;/p&gt;
                 * &lt;p&gt;The main use for correlated random vector generation is for Monte-Carlo
                 * simulation of physical problems with several variables, for example to
                 * generate error vectors to be added to a nominal vector. A particularly
                 * interesting case is when the generated vector should be drawn from a &lt;a
                 * href=&quot;http://en.wikipedia.org/wiki/Multivariate_normal_distribution&quot;&gt;
                 * Multivariate Normal Distribution&lt;/a&gt;. The approach using a Cholesky
                 * decomposition is quite usual in this case. However, it can be extended
                 * to other cases as long as the underlying random generator provides{@link NormalizedRandomGenerator normalized values} like {@link GaussianRandomGenerator} or {@link UniformRandomGenerator}.&lt;/p&gt;
                 * &lt;p&gt;Sometimes, the covariance matrix for a given simulation is not
                 * strictly positive definite. This means that the correlations are
                 * not all independent from each other. In this case, however, the non
                 * strictly positive elements found during the Cholesky decomposition
                 * of the covariance matrix should not be negative either, they
                 * should be null. Another non-conventional extension handling this case
                 * is used here. Rather than computing &lt;code&gt;C = U&lt;sup&gt;T&lt;/sup&gt;.U&lt;/code&gt;
                 * where &lt;code&gt;C&lt;/code&gt; is the covariance matrix and &lt;code&gt;U&lt;/code&gt;
                 * is an upper-triangular matrix, we compute &lt;code&gt;C = B.B&lt;sup&gt;T&lt;/sup&gt;&lt;/code&gt;
                 * where &lt;code&gt;B&lt;/code&gt; is a rectangular matrix having
                 * more rows than columns. The number of columns of &lt;code&gt;B&lt;/code&gt; is
                 * the rank of the covariance matrix, and it is the dimension of the
                 * uncorrelated random vector that is needed to compute the component
                 * of the correlated vector. This class handles this situation
                 * automatically.&lt;/p&gt;                
                <@version>
                    n $Id: CorrelatedRandomVectorGenerator.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
                <@since>
                    e 1.2                    
                </@since>
            </javadoc>
            <declaration name="mean" type="double[]" line="63"/>
            <javadoc line="63">
                Mean vector.                
            </javadoc>
            <declaration name="generator" type="NormalizedRandomGenerator" line="65"/>
            <javadoc line="65">
                Underlying generator.                
            </javadoc>
            <declaration name="normalized" type="double[]" line="67"/>
            <javadoc line="67">
                Storage for the normalized vector.                
            </javadoc>
            <declaration name="root" type="RealMatrix" line="69"/>
            <javadoc line="69">
                Root of the covariance matrix.                
            </javadoc>
            <javadoc line="72">
                Builds a correlated random vector generator from its mean
                 * vector and covariance matrix.                
                <@param>
                    m mean Expected mean values for all components.                    
                </@param>
                <@param>
                    m covariance Covariance matrix.                    
                </@param>
                <@param>
                    m small Diagonal elements threshold under which  column are
                     * considered to be dependent on previous ones and are discarded                    
                </@param>
                <@param>
                    m generator underlying generator for uncorrelated normalized
                     * components.                    
                </@param>
                <@throws>
                    s org.apache.commons.math3.linear.NonPositiveDefiniteMatrixExceptionif the covariance matrix is not strictly positive definite.                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if the mean and covariance
                     * arrays dimensions do not match.                    
                </@throws>
            </javadoc>
            <method name="CorrelatedRandomVectorGenerator" type="constructor" line="89">
                <declaration name="order" type="int" line="90"/>
                <scope line="91"/>
                <declaration name="decomposition" type="RectangularCholeskyDecomposition" line="96"/>
            </method>
            <javadoc line="105">
                Builds a null mean random correlated vector generator from its
                 * covariance matrix.                
                <@param>
                    m covariance Covariance matrix.                    
                </@param>
                <@param>
                    m small Diagonal elements threshold under which  column are
                     * considered to be dependent on previous ones and are discarded.                    
                </@param>
                <@param>
                    m generator Underlying generator for uncorrelated normalized
                     * components.                    
                </@param>
                <@throws>
                    s org.apache.commons.math3.linear.NonPositiveDefiniteMatrixExceptionif the covariance matrix is not strictly positive definite.                    
                </@throws>
            </javadoc>
            <method name="CorrelatedRandomVectorGenerator" type="constructor" line="118">
                <declaration name="order" type="int" line="119"/>
                <scope line="121"/>
                <declaration name="decomposition" type="RectangularCholeskyDecomposition" line="125"/>
            </method>
            <javadoc line="134">
                Get the underlying normalized components generator.                
                <@return>
                    n underlying uncorrelated components generator                    
                </@return>
            </javadoc>
            <method name="getGenerator" type="NormalizedRandomGenerator" line="137"/>
            <javadoc line="141">
                Get the rank of the covariance matrix.
                 * The rank is the number of independent rows in the covariance
                 * matrix, it is also the number of columns of the root matrix.                
                <@return>
                    n rank of the square matrix.                    
                </@return>
                <@see>
                    e #getRootMatrix()                    
                </@see>
            </javadoc>
            <method name="getRank" type="int" line="147"/>
            <javadoc line="151">
                Get the root of the covariance matrix.
                 * The root is the rectangular matrix &lt;code&gt;B&lt;/code&gt; such that
                 * the covariance matrix is equal to &lt;code&gt;B.B&lt;sup&gt;T&lt;/sup&gt;&lt;/code&gt;                
                <@return>
                    n root of the square matrix                    
                </@return>
                <@see>
                    e #getRank()                    
                </@see>
            </javadoc>
            <method name="getRootMatrix" type="RealMatrix" line="157"/>
            <javadoc line="161">
                Generate a correlated random vector.                
                <@return>
                    n a random vector as an array of double. The returned array
                     * is created at each call, the caller can do what it wants with it.                    
                </@return>
            </javadoc>
            <method name="nextVector" type="double[]" line="165">
                <comment line="166">
                    generate uncorrelated vector                    
                </comment>
                <comment line="166">
                    compute correlated vector                    
                </comment>
                <scope line="168"/>
                <declaration name="correlated" type="double[]" line="173"/>
                <scope line="174">
                    <scope line="176"/>
                </scope>
            </method>
        </class>
    </source>