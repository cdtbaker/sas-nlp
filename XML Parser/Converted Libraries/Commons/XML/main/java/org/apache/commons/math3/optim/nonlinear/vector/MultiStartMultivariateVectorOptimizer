<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.vector">
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Comparator"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.RealVector"/>
        <import package="org.apache.commons.math3.linear.ArrayRealVector"/>
        <import package="org.apache.commons.math3.random.RandomVectorGenerator"/>
        <import package="org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer"/>
        <import package="org.apache.commons.math3.optim.PointVectorValuePair"/>
        <class name="MultiStartMultivariateVectorOptimizer" extends="BaseMultiStartMultivariateOptimizer<PointVectorValuePair>" line="32">
            <javadoc line="32">
                Multi-start optimizer for a (vector) model function.
                 * This class wraps an optimizer in order to use it several times in
                 * turn with different starting points (trying to avoid being trapped
                 * in a local extremum when looking for a global one).                
                <@version>
                    n $Id: MultiStartMultivariateVectorOptimizer.java 1435539 2013-01-19 13:27:24Z tn $                    
                </@version>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="optimizer" type="MultivariateVectorOptimizer" line="44"/>
            <javadoc line="44">
                Underlying optimizer.                
            </javadoc>
            <declaration name="optima" type="List&lt;PointVectorValuePair&gt;" line="46"/>
            <javadoc line="46">
                Found optima.                
            </javadoc>
            <javadoc line="49">
                Create a multi-start optimizer from a single-start optimizer.                
                <@param>
                    m optimizer Single-start optimizer to wrap.                    
                </@param>
                <@param>
                    m starts Number of starts to perform.
                     * If {@code starts == 1}, the result will be same as if {@code optimizer}is called directly.                    
                </@param>
                <@param>
                    m generator Random vector generator to use for restarts.                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code optimizer} or {@code generator}is {@code null}.                    
                </@throws>
                <@throws>
                    s NotStrictlyPositiveException if {@code starts < 1}.                    
                </@throws>
            </javadoc>
            <method name="MultiStartMultivariateVectorOptimizer" type="constructor" line="65"/>
            <javadoc line="70">
                {@inheritDoc}                
            </javadoc>
            <method name="getOptima" type="PointVectorValuePair[]" line="74"/>
            <javadoc line="79">
                {@inheritDoc}                
            </javadoc>
            <method name="store" type="void" line="83"/>
            <javadoc line="87">
                {@inheritDoc}                
            </javadoc>
            <method name="clear" type="void" line="91"/>
            <javadoc line="95">
                @return a comparator for sorting the optima.                
            </javadoc>
            <method name="getPairComparator" type="Comparator<PointVectorValuePair>" line="98">
                <anonymous_class line="99">
                    <declaration name="target" type="RealVector" line="100"/>
                    <declaration name="weight" type="RealMatrix" line="101"/>
                    <method name="compare" type="int" line="104">
                        <scope line="105"/>
                        <scope line="107"/>
                    </method>
                    <method name="weightedResidual" type="double" line="114">
                        <declaration name="v" type="RealVector" line="115"/>
                        <declaration name="r" type="RealVector" line="116"/>
                    </method>
                </anonymous_class>
            </method>
        </class>
    </source>