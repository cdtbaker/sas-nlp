<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.direct">
        <import package="java.util.Comparator"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <class name="MultiDirectionalSimplex" extends="AbstractSimplex" line="25">
            <javadoc line="25">
                This class implements the multi-directional direct search method.                
                <@version>
                    n $Id: MultiDirectionalSimplex.java 1422230 2012-12-15 12:11:13Z erans $                    
                </@version>
                <@deprecated>
                    d As of 3.1 (to be removed in 4.0).                    
                </@deprecated>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="DEFAULT_KHI" type="double" line="34"/>
            <javadoc line="34">
                Default value for {@link #khi}: {@value}.                
            </javadoc>
            <declaration name="DEFAULT_GAMMA" type="double" line="36"/>
            <javadoc line="36">
                Default value for {@link #gamma}: {@value}.                
            </javadoc>
            <declaration name="khi" type="double" line="38"/>
            <javadoc line="38">
                Expansion coefficient.                
            </javadoc>
            <declaration name="gamma" type="double" line="40"/>
            <javadoc line="40">
                Contraction coefficient.                
            </javadoc>
            <javadoc line="43">
                Build a multi-directional simplex with default coefficients.
                 * The default values are 2.0 for khi and 0.5 for gamma.                
                <@param>
                    m n Dimension of the simplex.                    
                </@param>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="49"/>
            <javadoc line="53">
                Build a multi-directional simplex with default coefficients.
                 * The default values are 2.0 for khi and 0.5 for gamma.                
                <@param>
                    m n Dimension of the simplex.                    
                </@param>
                <@param>
                    m sideLength Length of the sides of the default (hypercube)
                     * simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </@param>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="61"/>
            <javadoc line="65">
                Build a multi-directional simplex with specified coefficients.                
                <@param>
                    m n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </@param>
                <@param>
                    m khi Expansion coefficient.                    
                </@param>
                <@param>
                    m gamma Contraction coefficient.                    
                </@param>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="74"/>
            <javadoc line="78">
                Build a multi-directional simplex with specified coefficients.                
                <@param>
                    m n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </@param>
                <@param>
                    m sideLength Length of the sides of the default (hypercube)
                     * simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </@param>
                <@param>
                    m khi Expansion coefficient.                    
                </@param>
                <@param>
                    m gamma Contraction coefficient.                    
                </@param>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="89"/>
            <javadoc line="96">
                Build a multi-directional simplex with default coefficients.
                 * The default values are 2.0 for khi and 0.5 for gamma.                
                <@param>
                    m steps Steps along the canonical axes representing box edges.
                     * They may be negative but not zero. See                    
                </@param>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="103"/>
            <javadoc line="107">
                Build a multi-directional simplex with specified coefficients.                
                <@param>
                    m steps Steps along the canonical axes representing box edges.
                     * They may be negative but not zero. See{@link AbstractSimplex#AbstractSimplex(double[])}.                    
                </@param>
                <@param>
                    m khi Expansion coefficient.                    
                </@param>
                <@param>
                    m gamma Contraction coefficient.                    
                </@param>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="117"/>
            <javadoc line="124">
                Build a multi-directional simplex with default coefficients.
                 * The default values are 2.0 for khi and 0.5 for gamma.                
                <@param>
                    m referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.                    
                </@param>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="131"/>
            <javadoc line="135">
                Build a multi-directional simplex with specified coefficients.                
                <@param>
                    m referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.                    
                </@param>
                <@param>
                    m khi Expansion coefficient.                    
                </@param>
                <@param>
                    m gamma Contraction coefficient.                    
                </@param>
                <@throws>
                    s org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif the reference simplex does not contain at least one point.                    
                </@throws>
                <@throws>
                    s org.apache.commons.math3.exception.DimensionMismatchExceptionif there is a dimension mismatch in the reference simplex.                    
                </@throws>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="148"/>
            <javadoc line="155">
                {@inheritDoc}                
            </javadoc>
            <method name="iterate" type="void" line="158">
                <comment line="159">
                    Save the original simplex.                    
                </comment>
                <comment line="159">
                    Perform a reflection step.                    
                </comment>
                <comment line="159">
                    Compute the contracted simplex.                    
                </comment>
                <declaration name="original" type="PointValuePair[]" line="160"/>
                <declaration name="best" type="PointValuePair" line="161"/>
                <declaration name="reflected" type="PointValuePair" line="164"/>
                <scope line="166">
                    <declaration name="reflectedSimplex" type="PointValuePair[]" line="168"/>
                    <declaration name="expanded" type="PointValuePair" line="169"/>
                    <scope line="171"/>
                </scope>
            </method>
            <javadoc line="184">
                Compute and evaluate a new simplex.                
                <@param>
                    m evaluationFunction Evaluation function.                    
                </@param>
                <@param>
                    m original Original simplex (to be preserved).                    
                </@param>
                <@param>
                    m coeff Linear coefficient.                    
                </@param>
                <@param>
                    m comparator Comparator to use to sort simplex vertices from best
                     * to poorest.                    
                </@param>
                <@return>
                    n the best point in the transformed simplex.                    
                </@return>
                <@throws>
                    s org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximal number of evaluations is exceeded.                    
                </@throws>
            </javadoc>
            <method name="evaluateNewSimplex" type="PointValuePair" line="199">
                <comment line="200">
                    Perform a linear transformation on all the simplex points,                    
                </comment>
                <comment line="200">
                    except the first one.                    
                </comment>
                <comment line="200">
                    Evaluate the simplex.                    
                </comment>
                <declaration name="xSmallest" type="double[]" line="200"/>
                <declaration name="dim" type="int" line="204"/>
                <scope line="205">
                    <declaration name="xOriginal" type="double[]" line="206"/>
                    <declaration name="xTransformed" type="double[]" line="207"/>
                    <scope line="208"/>
                </scope>
            </method>
        </class>
    </source>