<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <class name="NevilleInterpolator" line="26">
            <implements interface="UnivariateInterpolator"/>
            <implements interface="Serializable"/>
            <javadoc line="26">
                Implements the &lt;a href=&quot;http://mathworld.wolfram.com/NevillesAlgorithm.html&quot;&gt;
                 * Neville&apos;s Algorithm&lt;/a&gt; for interpolation of real univariate functions. For
                 * reference, see &lt;b&gt;Introduction to Numerical Analysis&lt;/b&gt;, ISBN 038795452X,
                 * chapter 2.
                 * &lt;p&gt;
                 * The actual code of Neville&apos;s algorithm is in PolynomialFunctionLagrangeForm,
                 * this class provides an easy-to-use interface to it.&lt;/p&gt;                
                <@version>
                    n $Id: NevilleInterpolator.java 1379904 2012-09-01 23:54:52Z erans $                    
                </@version>
                <@since>
                    e 1.2                    
                </@since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="41"/>
            <javadoc line="41">
                serializable version identifier                
            </javadoc>
            <javadoc line="44">
                Computes an interpolating function for the data set.                
                <@param>
                    m x Interpolating points.                    
                </@param>
                <@param>
                    m y Interpolating values.                    
                </@param>
                <@return>
                    n a function which interpolates the data set                    
                </@return>
                <@throws>
                    s DimensionMismatchException if the array lengths are different.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the number of points is less than 2.                    
                </@throws>
                <@throws>
                    s NonMonotonicSequenceException if two abscissae have the same
                     * value.                    
                </@throws>
            </javadoc>
            <method name="interpolate" type="PolynomialFunctionLagrangeForm" line="58"/>
        </class>
    </source>