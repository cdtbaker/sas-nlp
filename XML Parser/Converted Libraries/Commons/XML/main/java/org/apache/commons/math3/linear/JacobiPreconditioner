<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.analysis.function.Sqrt"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="JacobiPreconditioner" line="22">
            <extends class="RealLinearOperator"/>
            <javadoc line="22">
                This class implements the standard Jacobi (diagonal) preconditioner. For a
                  matrix A&lt;sub&gt;ij&lt;/sub&gt;, this preconditioner is
                  M = diag(1 / A&lt;sub&gt;11&lt;/sub&gt;, 1 / A&lt;sub&gt;22&lt;/sub&gt;, &amp;hellip;).                
                <@version>
                    n $Id: JacobiPreconditioner.java 1422195 2012-12-15 06:45:18Z psteitz $                    
                </@version>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="diag" type="ArrayRealVector" line="32"/>
            <javadoc line="32">
                The diagonal coefficients of the preconditioner.                
            </javadoc>
            <javadoc line="35">
                Creates a new instance of this class.                
                <@param>
                    m diag the diagonal coefficients of the linear operator to be
                      preconditioned                    
                </@param>
                <@param>
                    m deep {@code true} if a deep copy of the above array should be
                      performed                    
                </@param>
            </javadoc>
            <method name="JacobiPreconditioner" type="constructor" line="43">
                <params>
                    <param name="diag" type="double[]"/>
                    <param name="deep" type="boolean"/>
                </params>
            </method>
            <javadoc line="47">
                Creates a new instance of this class. This method extracts the diagonal
                  coefficients of the specified linear operator. If {@code a} does not
                  extend {@link AbstractRealMatrix}, then the coefficients of the
                  underlying matrix are not accessible, coefficient extraction is made by
                  matrix-vector products with the basis vectors (and might therefore take
                  some time). With matrices, direct entry access is carried out.                
                <@param>
                    m a the linear operator for which the preconditioner should be built                    
                </@param>
                <@return>
                    n the diagonal preconditioner made of the inverse of the diagonal
                      coefficients of the specified linear operator                    
                </@return>
                <@throws>
                    s NonSquareOperatorException if {@code a} is not square                    
                </@throws>
            </javadoc>
            <method name="create" type="JacobiPreconditioner" line="61">
                <params>
                    <param name="a" type="RealLinearOperator"/>
                </params>
                <declaration name="n" type="int" line="62"/>
                <scope line="63"/>
                <declaration name="diag" type="double[]" line="66"/>
                <scope line="67">
                    <declaration name="m" type="AbstractRealMatrix" line="68"/>
                    <scope line="69"/>
                </scope>
                <scope line="72">
                    <declaration name="x" type="ArrayRealVector" line="73"/>
                    <scope line="74"/>
                </scope>
            </method>
            <javadoc line="83">
                {@inheritDoc}                
            </javadoc>
            <method name="getColumnDimension" type="int" line="85"/>
            <javadoc line="89">
                {@inheritDoc}                
            </javadoc>
            <method name="getRowDimension" type="int" line="91"/>
            <javadoc line="95">
                {@inheritDoc}                
            </javadoc>
            <method name="operate" type="RealVector" line="97">
                <params>
                    <param name="x" type="RealVector"/>
                </params>
                <comment line="98">
                    Dimension check is carried out by ebeDivide                    
                </comment>
            </method>
            <javadoc line="104">
                Returns the square root of {@code this} diagonal operator. More
                  precisely, this method returns
                  P = diag(1 / &amp;radic;A&lt;sub&gt;11&lt;/sub&gt;, 1 / &amp;radic;A&lt;sub&gt;22&lt;/sub&gt;, &amp;hellip;).                
                <@return>
                    n the square root of {@code this} preconditioner                    
                </@return>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="sqrt" type="RealLinearOperator" line="112">
                <declaration name="sqrtDiag" type="RealVector" line="113"/>
                <anonymous_class line="114">
                    <javadoc line="115">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="operate" type="RealVector" line="117">
                        <params>
                            <param name="x" type="RealVector"/>
                        </params>
                    </method>
                    <javadoc line="123">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getRowDimension" type="int" line="125"/>
                    <javadoc line="129">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getColumnDimension" type="int" line="131"/>
                </anonymous_class>
            </method>
        </class>
    </source>