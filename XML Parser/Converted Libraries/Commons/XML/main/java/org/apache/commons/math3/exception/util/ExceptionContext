<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.exception.util">
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Set"/>
        <import package="java.util.Map"/>
        <import package="java.io.IOException"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.util.HashMap"/>
        <import package="java.text.MessageFormat"/>
        <import package="java.util.Locale"/>
        <class name="ExceptionContext" line="31">
            <implements interface="Serializable"/>
            <javadoc line="31">
                Class that contains the actual implementation of the functionality mandated
                  by the {@link ExceptionContext} interface.
                  All Commons Math exceptions delegate the interface&apos;s methods to this class.                
                <@since>
                    e 3.0                    
                </@since>
                <@version>
                    n $Id: ExceptionContext.java 1364388 2012-07-22 18:16:43Z tn $                    
                </@version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="40"/>
            <javadoc line="40">
                Serializable version Id.                
            </javadoc>
            <declaration name="throwable" type="Throwable" line="42"/>
            <javadoc line="42">
                The throwable to which this context refers to.                
            </javadoc>
            <declaration name="msgPatterns" type="List&lt;Localizable&gt;" line="46"/>
            <javadoc line="46">
                Various informations that enrich the informative message.                
            </javadoc>
            <declaration name="msgArguments" type="List&lt;Object[]&gt;" line="50"/>
            <javadoc line="50">
                Various informations that enrich the informative message.
                  The arguments will replace the corresponding place-holders in{@link #msgPatterns}.                
            </javadoc>
            <declaration name="context" type="Map&lt;String,Object&gt;" line="56"/>
            <javadoc line="56">
                Arbitrary context information.                
            </javadoc>
            <javadoc line="61">
                Simple constructor.                
                <@param>
                    m throwable the exception this context refers too                    
                </@param>
            </javadoc>
            <method name="ExceptionContext" type="constructor" line="64">
                <params>
                    <param name="throwable" type="Throwable"/>
                </params>
            </method>
            <javadoc line="71">
                Get a reference to the exception to which the context relates.                
                <@return>
                    n a reference to the exception to which the context relates                    
                </@return>
            </javadoc>
            <method name="getThrowable" type="Throwable" line="74"/>
            <javadoc line="78">
                Adds a message.                
                <@param>
                    m pattern Message pattern.                    
                </@param>
                <@param>
                    m arguments Values for replacing the placeholders in the message
                      pattern.                    
                </@param>
            </javadoc>
            <method name="addMessage" type="void" line="86">
                <params>
                    <param name="pattern" type="Localizable"/>
                    <param name="arguments" type="Object"/>
                </params>
            </method>
            <javadoc line="91">
                Sets the context (key, value) pair.
                  Keys are assumed to be unique within an instance. If the same key is
                  assigned a new value, the previous one will be lost.                
                <@param>
                    m key Context key (not null).                    
                </@param>
                <@param>
                    m value Context value.                    
                </@param>
            </javadoc>
            <method name="setValue" type="void" line="99">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="103">
                Gets the value associated to the given context key.                
                <@param>
                    m key Context key.                    
                </@param>
                <@return>
                    n the context value or {@code null} if the key does not exist.                    
                </@return>
            </javadoc>
            <method name="getValue" type="Object" line="109">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <javadoc line="113">
                Gets all the keys stored in the exception                
                <@return>
                    n the set of keys.                    
                </@return>
            </javadoc>
            <method name="getKeys" type="Set<String>" line="118"/>
            <javadoc line="122">
                Gets the default message.                
                <@return>
                    n the message.                    
                </@return>
            </javadoc>
            <method name="getMessage" type="String" line="127"/>
            <javadoc line="131">
                Gets the message in the default locale.                
                <@return>
                    n the localized message.                    
                </@return>
            </javadoc>
            <method name="getLocalizedMessage" type="String" line="136"/>
            <javadoc line="140">
                Gets the message in a specified locale.                
                <@param>
                    m locale Locale in which the message should be translated.                    
                </@param>
                <@return>
                    n the localized message.                    
                </@return>
            </javadoc>
            <method name="getMessage" type="String" line="146">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="150">
                Gets the message in a specified locale.                
                <@param>
                    m locale Locale in which the message should be translated.                    
                </@param>
                <@param>
                    m separator Separator inserted between the message parts.                    
                </@param>
                <@return>
                    n the localized message.                    
                </@return>
            </javadoc>
            <method name="getMessage" type="String" line="158">
                <params>
                    <param name="locale" type="Locale"/>
                    <param name="separator" type="String"/>
                </params>
            </method>
            <javadoc line="162">
                Builds a message string.                
                <@param>
                    m locale Locale in which the message should be translated.                    
                </@param>
                <@param>
                    m separator Message separator.                    
                </@param>
                <@return>
                    n a localized message string.                    
                </@return>
            </javadoc>
            <method name="buildMessage" type="String" line="170">
                <params>
                    <param name="locale" type="Locale"/>
                    <param name="separator" type="String"/>
                </params>
                <declaration name="sb" type="StringBuilder" line="171"/>
                <declaration name="count" type="int" line="172"/>
                <declaration name="len" type="int" line="173"/>
                <scope line="174">
                    <declaration name="pat" type="Localizable" line="175"/>
                    <declaration name="args" type="Object[]" line="176"/>
                    <declaration name="fmt" type="MessageFormat" line="177"/>
                    <scope line="180"/>
                </scope>
            </method>
            <javadoc line="189">
                Serialize this object to the given stream.                
                <@param>
                    m out Stream.                    
                </@param>
                <@throws>
                    s IOException This should never happen.                    
                </@throws>
            </javadoc>
            <method name="writeObject" type="void" line="196">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="201">
                Deserialize this object from the given stream.                
                <@param>
                    m in Stream.                    
                </@param>
                <@throws>
                    s IOException This should never happen.                    
                </@throws>
                <@throws>
                    s ClassNotFoundException This should never happen.                    
                </@throws>
            </javadoc>
            <method name="readObject" type="void" line="210">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="216">
                Serialize  {@link #msgPatterns} and {@link #msgArguments}.                
                <@param>
                    m out Stream.                    
                </@param>
                <@throws>
                    s IOException This should never happen.                    
                </@throws>
            </javadoc>
            <method name="serializeMessages" type="void" line="223">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <comment line="224">
                    Step 1.                    
                </comment>
                <comment line="224">
                    Step 2.                    
                </comment>
                <declaration name="len" type="int" line="225"/>
                <scope line="228">
                    <declaration name="pat" type="Localizable" line="229"/>
                    <declaration name="args" type="Object[]" line="232"/>
                    <declaration name="aLen" type="int" line="233"/>
                    <scope line="236">
                        <scope line="237"/>
                        <scope line="240"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="248">
                Deserialize {@link #msgPatterns} and {@link #msgArguments}.                
                <@param>
                    m in Stream.                    
                </@param>
                <@throws>
                    s IOException This should never happen.                    
                </@throws>
                <@throws>
                    s ClassNotFoundException This should never happen.                    
                </@throws>
            </javadoc>
            <method name="deSerializeMessages" type="void" line="257">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <comment line="258">
                    Step 1.                    
                </comment>
                <comment line="258">
                    Step 2.                    
                </comment>
                <declaration name="len" type="int" line="259"/>
                <scope line="263">
                    <declaration name="pat" type="Localizable" line="265"/>
                    <declaration name="aLen" type="int" line="268"/>
                    <declaration name="args" type="Object[]" line="269"/>
                    <scope line="270"/>
                </scope>
            </method>
            <javadoc line="278">
                Serialize {@link #context}.                
                <@param>
                    m out Stream.                    
                </@param>
                <@throws>
                    s IOException This should never happen.                    
                </@throws>
            </javadoc>
            <method name="serializeContext" type="void" line="285">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <comment line="286">
                    Step 1.                    
                </comment>
                <declaration name="len" type="int" line="287"/>
                <scope line="289">
                    <declaration name="value" type="Object" line="292"/>
                    <scope line="293"/>
                    <scope line="296"/>
                </scope>
            </method>
            <javadoc line="303">
                Deserialize {@link #context}.                
                <@param>
                    m in Stream.                    
                </@param>
                <@throws>
                    s IOException This should never happen.                    
                </@throws>
                <@throws>
                    s ClassNotFoundException This should never happen.                    
                </@throws>
            </javadoc>
            <method name="deSerializeContext" type="void" line="312">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <comment line="313">
                    Step 1.                    
                </comment>
                <declaration name="len" type="int" line="314"/>
                <scope line="316">
                    <declaration name="key" type="String" line="318"/>
                    <declaration name="value" type="Object" line="320"/>
                </scope>
            </method>
            <javadoc line="325">
                Replaces a non-serializable object with an error message string.                
                <@param>
                    m obj Object that does not implement the {@code Serializable}interface.                    
                </@param>
                <@return>
                    n a string that mentions which class could not be serialized.                    
                </@return>
            </javadoc>
            <method name="nonSerializableReplacement" type="String" line="332">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
        </class>
    </source>