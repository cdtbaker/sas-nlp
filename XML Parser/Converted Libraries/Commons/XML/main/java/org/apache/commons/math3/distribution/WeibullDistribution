<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.special.Gamma"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <class name="WeibullDistribution" extends="AbstractRealDistribution" line="28">
            <javadoc line="28">
                Implementation of the Weibull distribution. This implementation uses the
                 * two parameter form of the distribution defined by
                 * &lt;a href=&quot;http://mathworld.wolfram.com/WeibullDistribution.html&quot;&gt;
                 * Weibull Distribution&lt;/a&gt;, equations (1) and (2).                
                <@see>
                    e <a href="http://en.wikipedia.org/wiki/Weibull_distribution">Weibull distribution (Wikipedia)</a>                    
                </@see>
                <@see>
                    e <a href="http://mathworld.wolfram.com/WeibullDistribution.html">Weibull distribution (MathWorld)</a>                    
                </@see>
                <@since>
                    e 1.1 (changed to concrete class in 3.0)                    
                </@since>
                <@version>
                    n $Id: WeibullDistribution.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <declaration name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" type="double" line="40"/>
            <javadoc line="40">
                Default inverse cumulative probability accuracy.                
                <@since>
                    e 2.1                    
                </@since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="45"/>
            <javadoc line="45">
                Serializable version identifier.                
            </javadoc>
            <declaration name="shape" type="double" line="47"/>
            <javadoc line="47">
                The shape parameter.                
            </javadoc>
            <declaration name="scale" type="double" line="49"/>
            <javadoc line="49">
                The scale parameter.                
            </javadoc>
            <declaration name="solverAbsoluteAccuracy" type="double" line="51"/>
            <javadoc line="51">
                Inverse cumulative probability accuracy.                
            </javadoc>
            <declaration name="numericalMean" type="double" line="53"/>
            <javadoc line="53">
                Cached numerical mean                
            </javadoc>
            <declaration name="numericalMeanIsCalculated" type="boolean" line="55"/>
            <javadoc line="55">
                Whether or not the numerical mean has been calculated                
            </javadoc>
            <declaration name="numericalVariance" type="double" line="57"/>
            <javadoc line="57">
                Cached numerical variance                
            </javadoc>
            <declaration name="numericalVarianceIsCalculated" type="boolean" line="59"/>
            <javadoc line="59">
                Whether or not the numerical variance has been calculated                
            </javadoc>
            <javadoc line="62">
                Create a Weibull distribution with the given shape and scale and a
                 * location equal to zero.                
                <@param>
                    m alpha Shape parameter.                    
                </@param>
                <@param>
                    m beta Scale parameter.                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if {@code alpha <= 0} or{@code beta <= 0}.                    
                </@throws>
            </javadoc>
            <method name="WeibullDistribution" type="constructor" line="72"/>
            <javadoc line="76">
                Create a Weibull distribution with the given shape, scale and inverse
                 * cumulative probability accuracy and a location equal to zero.                
                <@param>
                    m alpha Shape parameter.                    
                </@param>
                <@param>
                    m beta Scale parameter.                    
                </@param>
                <@param>
                    m inverseCumAccuracy Maximum absolute error in inverse
                     * cumulative probability estimates
                     * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if {@code alpha <= 0} or{@code beta <= 0}.                    
                </@throws>
                <@since>
                    e 2.1                    
                </@since>
            </javadoc>
            <method name="WeibullDistribution" type="constructor" line="90"/>
            <javadoc line="94">
                Creates a Weibull distribution.                
                <@param>
                    m rng Random number generator.                    
                </@param>
                <@param>
                    m alpha Shape parameter.                    
                </@param>
                <@param>
                    m beta Scale parameter.                    
                </@param>
                <@param>
                    m inverseCumAccuracy Maximum absolute error in inverse
                     * cumulative probability estimates
                     * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if {@code alpha <= 0} or{@code beta <= 0}.                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="WeibullDistribution" type="constructor" line="111">
                <scope line="114"/>
                <scope line="118"/>
            </method>
            <javadoc line="127">
                Access the shape parameter, {@code alpha}.                
                <@return>
                    n the shape parameter, {@code alpha}.                    
                </@return>
            </javadoc>
            <method name="getShape" type="double" line="132"/>
            <javadoc line="136">
                Access the scale parameter, {@code beta}.                
                <@return>
                    n the scale parameter, {@code beta}.                    
                </@return>
            </javadoc>
            <method name="getScale" type="double" line="141"/>
            <javadoc line="145">
                {@inheritDoc}                
            </javadoc>
            <method name="density" type="double" line="146">
                <comment line="147">
                    FastMath.pow(x  scale, shape) =
                     FastMath.pow(xscale, shape) =                    
                </comment>
                <scope line="147"/>
                <declaration name="xscale" type="double" line="151"/>
                <declaration name="xscalepow" type="double" line="152"/>
                <declaration name="xscalepowshape" type="double" line="159"/>
            </method>
            <javadoc line="164">
                {@inheritDoc}                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="165">
                <declaration name="ret" type="double" line="166"/>
                <scope line="167"/>
                <scope line="169"/>
            </method>
            <javadoc line="175">
                {@inheritDoc}Returns {@code 0} when {@code p == 0} and{@code Double.POSITIVE_INFINITY} when {@code p == 1}.                
            </javadoc>
            <method name="inverseCumulativeProbability" type="double" line="182">
                <declaration name="ret" type="double" line="183"/>
                <scope line="184"/>
                <scope line="186"/>
                <scope line="188"/>
                <scope line="190"/>
            </method>
            <javadoc line="196">
                Return the absolute accuracy setting of the solver used to estimate
                 * inverse cumulative probabilities.                
                <@return>
                    n the solver absolute accuracy.                    
                </@return>
                <@since>
                    e 2.1                    
                </@since>
            </javadoc>
            <method name="getSolverAbsoluteAccuracy" type="double" line="204"/>
            <javadoc line="208">
                {@inheritDoc}The mean is {@code scale * Gamma(1 + (1 / shape))}, where {@code Gamma()}is the Gamma-function.                
            </javadoc>
            <method name="getNumericalMean" type="double" line="214">
                <scope line="215"/>
            </method>
            <javadoc line="222">
                used by {@link #getNumericalMean()}                
                <@return>
                    n the mean of this distribution                    
                </@return>
            </javadoc>
            <method name="calculateNumericalMean" type="double" line="227">
                <declaration name="sh" type="double" line="228"/>
                <declaration name="sc" type="double" line="229"/>
            </method>
            <javadoc line="234">
                {@inheritDoc}The variance is {@code scale^2 * Gamma(1 + (2 / shape)) - mean^2}where {@code Gamma()} is the Gamma-function.                
            </javadoc>
            <method name="getNumericalVariance" type="double" line="240">
                <scope line="241"/>
            </method>
            <javadoc line="248">
                used by {@link #getNumericalVariance()}                
                <@return>
                    n the variance of this distribution                    
                </@return>
            </javadoc>
            <method name="calculateNumericalVariance" type="double" line="253">
                <declaration name="sh" type="double" line="254"/>
                <declaration name="sc" type="double" line="255"/>
                <declaration name="mn" type="double" line="256"/>
            </method>
            <javadoc line="262">
                {@inheritDoc}The lower bound of the support is always 0 no matter the parameters.                
                <@return>
                    n lower bound of the support (always 0)                    
                </@return>
            </javadoc>
            <method name="getSupportLowerBound" type="double" line="269"/>
            <javadoc line="273">
                {@inheritDoc}The upper bound of the support is always positive infinity
                 * no matter the parameters.                
                <@return>
                    n upper bound of the support (always{@code Double.POSITIVE_INFINITY})                    
                </@return>
            </javadoc>
            <method name="getSupportUpperBound" type="double" line="282"/>
            <javadoc line="286">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportLowerBoundInclusive" type="boolean" line="287"/>
            <javadoc line="291">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportUpperBoundInclusive" type="boolean" line="292"/>
            <javadoc line="296">
                {@inheritDoc}The support of this distribution is connected.                
                <@return>
                    n {@code true}                    
                </@return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="303"/>
        </class>
    </source>