<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.nonstiff">
        <import package="org.apache.commons.math3.ode.sampling.StepInterpolator"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="GillStepInterpolator" extends="RungeKuttaStepInterpolator" line="23">
            <javadoc line="23">
                This class implements a step interpolator for the Gill fourth
                 * order Runge-Kutta integrator.
                 * &lt;p&gt;This interpolator allows to compute dense output inside the last
                 * step computed. The interpolation equation is consistent with the
                 * integration scheme :
                 * &lt;ul&gt;
                 * &lt;li&gt;Using reference point at step start:&lt;br&gt;
                 * y(t&lt;sub&gt;n&lt;/sub&gt; + &amp;theta; h) = y (t&lt;sub&gt;n&lt;/sub&gt;)
                 * + &amp;theta; (h/6) [ (6 - 9 &amp;theta; + 4 &amp;theta;&lt;sup&gt;2&lt;/sup&gt;) y&apos;&lt;sub&gt;1&lt;/sub&gt;
                 * + (    6 &amp;theta; - 4 &amp;theta;&lt;sup&gt;2&lt;/sup&gt;) ((1-1/&amp;radic;2) y&apos;&lt;sub&gt;2&lt;/sub&gt; + (1+1/&amp;radic;2)) y&apos;&lt;sub&gt;3&lt;/sub&gt;)
                 * + (  - 3 &amp;theta; + 4 &amp;theta;&lt;sup&gt;2&lt;/sup&gt;) y&apos;&lt;sub&gt;4&lt;/sub&gt;
                 * ]
                 * &lt;/li&gt;
                 * &lt;li&gt;Using reference point at step start:&lt;br&gt;
                 * y(t&lt;sub&gt;n&lt;/sub&gt; + &amp;theta; h) = y (t&lt;sub&gt;n&lt;/sub&gt; + h)
                 * - (1 - &amp;theta;) (h/6) [ (1 - 5 &amp;theta; + 4 &amp;theta;&lt;sup&gt;2&lt;/sup&gt;) y&apos;&lt;sub&gt;1&lt;/sub&gt;
                 * + (2 + 2 &amp;theta; - 4 &amp;theta;&lt;sup&gt;2&lt;/sup&gt;) ((1-1/&amp;radic;2) y&apos;&lt;sub&gt;2&lt;/sub&gt; + (1+1/&amp;radic;2)) y&apos;&lt;sub&gt;3&lt;/sub&gt;)
                 * + (1 +   &amp;theta; + 4 &amp;theta;&lt;sup&gt;2&lt;/sup&gt;) y&apos;&lt;sub&gt;4&lt;/sub&gt;
                 * ]
                 * &lt;/li&gt;
                 * &lt;/ul&gt;
                 * &lt;/p&gt;
                 * where &amp;theta; belongs to [0 ; 1] and where y&apos;&lt;sub&gt;1&lt;/sub&gt; to y&apos;&lt;sub&gt;4&lt;/sub&gt;
                 * are the four evaluations of the derivatives already computed during
                 * the step.&lt;/p&gt;                
                <@see>
                    e GillIntegrator                    
                </@see>
                <@version>
                    n $Id: GillStepInterpolator.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
                <@since>
                    e 1.2                    
                </@since>
            </javadoc>
            <declaration name="ONE_MINUS_INV_SQRT_2" type="double" line="59"/>
            <javadoc line="59">
                First Gill coefficient.                
            </javadoc>
            <declaration name="ONE_PLUS_INV_SQRT_2" type="double" line="62"/>
            <javadoc line="62">
                Second Gill coefficient.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="65"/>
            <javadoc line="65">
                Serializable version identifier.                
            </javadoc>
            <javadoc line="68">
                Simple constructor.
                 * This constructor builds an instance that is not usable yet, the{@link org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#reinitialize}method should be called before using the instance in order to
                 * initialize the internal arrays. This constructor is used only
                 * in order to delay the initialization in some cases. The {@link RungeKuttaIntegrator} class uses the prototyping design pattern
                 * to create the step interpolators by cloning an uninitialized model
                 * and later initializing the copy.                
            </javadoc>
            <method name="GillStepInterpolator" type="constructor" line="79"/>
            <javadoc line="82">
                Copy constructor.                
                <@param>
                    m interpolator interpolator to copy from. The copy is a deep
                     * copy: its arrays are separated from the original arrays of the
                     * instance                    
                </@param>
            </javadoc>
            <method name="GillStepInterpolator" type="constructor" line="87"/>
            <javadoc line="91">
                {@inheritDoc}                
            </javadoc>
            <method name="doCopy" type="StepInterpolator" line="93"/>
            <javadoc line="98">
                {@inheritDoc}                
            </javadoc>
            <method name="computeInterpolatedStateAndDerivatives" type="void" line="101">
                <declaration name="twoTheta" type="double" line="103"/>
                <declaration name="fourTheta2" type="double" line="104"/>
                <declaration name="coeffDot1" type="double" line="105"/>
                <declaration name="cDot23" type="double" line="106"/>
                <declaration name="coeffDot2" type="double" line="107"/>
                <declaration name="coeffDot3" type="double" line="108"/>
                <declaration name="coeffDot4" type="double" line="109"/>
                <scope line="111">
                    <declaration name="s" type="double" line="112"/>
                    <declaration name="c23" type="double" line="113"/>
                    <declaration name="coeff1" type="double" line="114"/>
                    <declaration name="coeff2" type="double" line="115"/>
                    <declaration name="coeff3" type="double" line="116"/>
                    <declaration name="coeff4" type="double" line="117"/>
                    <scope line="118">
                        <declaration name="yDot1" type="double" line="119"/>
                        <declaration name="yDot2" type="double" line="120"/>
                        <declaration name="yDot3" type="double" line="121"/>
                        <declaration name="yDot4" type="double" line="122"/>
                    </scope>
                </scope>
                <scope line="128">
                    <declaration name="s" type="double" line="129"/>
                    <declaration name="c23" type="double" line="130"/>
                    <declaration name="coeff1" type="double" line="131"/>
                    <declaration name="coeff2" type="double" line="132"/>
                    <declaration name="coeff3" type="double" line="133"/>
                    <declaration name="coeff4" type="double" line="134"/>
                    <scope line="135">
                        <declaration name="yDot1" type="double" line="136"/>
                        <declaration name="yDot2" type="double" line="137"/>
                        <declaration name="yDot3" type="double" line="138"/>
                        <declaration name="yDot4" type="double" line="139"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>