<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.correlation">
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.BlockRealMatrix"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.Mean"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.Variance"/>
        <class name="Covariance" line="27">
            <comment line="28">
                                
            </comment>
            <javadoc line="27">
                Computes covariances for pairs of arrays or columns of a matrix.
                 * &lt;p&gt;The constructors that take &lt;code&gt;RealMatrix&lt;/code&gt; or
                 * &lt;code&gt;double[][]&lt;/code&gt; arguments generate covariance matrices.  The
                 * columns of the input matrices are assumed to represent variable values.&lt;/p&gt;
                 * &lt;p&gt;The constructor argument &lt;code&gt;biasCorrected&lt;/code&gt; determines whether or
                 * not computed covariances are bias-corrected.&lt;/p&gt;
                 * &lt;p&gt;Unbiased covariances are given by the formula&lt;/p&gt;
                 * &lt;code&gt;cov(X, Y) = &amp;Sigma;[(x&lt;sub&gt;i&lt;/sub&gt; - E(X))(y&lt;sub&gt;i&lt;/sub&gt; - E(Y))] / (n - 1)&lt;/code&gt;
                 * where &lt;code&gt;E(X)&lt;/code&gt; is the mean of &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;E(Y)&lt;/code&gt;
                 * is the mean of the &lt;code&gt;Y&lt;/code&gt; values.
                 * &lt;p&gt;Non-bias-corrected estimates use &lt;code&gt;n&lt;/code&gt; in place of &lt;code&gt;n - 1&lt;/code&gt;                
                <@version>
                    n $Id: Covariance.java 1453271 2013-03-06 10:29:51Z luc $                    
                </@version>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <declaration name="covarianceMatrix" type="RealMatrix" line="49"/>
            <javadoc line="49">
                covariance matrix                
            </javadoc>
            <declaration name="n" type="int" line="55"/>
            <javadoc line="55">
                Number of observations (length of covariate vectors)                
            </javadoc>
            <javadoc line="58">
                Create a Covariance with no data                
            </javadoc>
            <method name="Covariance" type="constructor" line="61"/>
            <javadoc line="67">
                Create a Covariance matrix from a rectangular array
                 * whose columns represent covariates.
                 * &lt;p&gt;The &lt;code&gt;biasCorrected&lt;/code&gt; parameter determines whether or not
                 * covariance estimates are bias-corrected.&lt;/p&gt;
                 * &lt;p&gt;The input array must be rectangular with at least one column
                 * and two rows.&lt;/p&gt;                
                <@param>
                    m data rectangular array with columns representing covariates                    
                </@param>
                <@param>
                    m biasCorrected true means covariances are bias-corrected                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if the input data array is not
                     * rectangular with at least two rows and one column.                    
                </@throws>
                <@throws>
                    s NotStrictlyPositiveException if the input data array is not
                     * rectangular with at least one row and one column.                    
                </@throws>
            </javadoc>
            <method name="Covariance" type="constructor" line="85"/>
            <javadoc line="89">
                Create a Covariance matrix from a rectangular array
                 * whose columns represent covariates.
                 * &lt;p&gt;The input array must be rectangular with at least one column
                 * and two rows&lt;/p&gt;                
                <@param>
                    m data rectangular array with columns representing covariates                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if the input data array is not
                     * rectangular with at least two rows and one column.                    
                </@throws>
                <@throws>
                    s NotStrictlyPositiveException if the input data array is not
                     * rectangular with at least one row and one column.                    
                </@throws>
            </javadoc>
            <method name="Covariance" type="constructor" line="103"/>
            <javadoc line="107">
                Create a covariance matrix from a matrix whose columns
                 * represent covariates.
                 * &lt;p&gt;The &lt;code&gt;biasCorrected&lt;/code&gt; parameter determines whether or not
                 * covariance estimates are bias-corrected.&lt;/p&gt;
                 * &lt;p&gt;The matrix must have at least one column and two rows&lt;/p&gt;                
                <@param>
                    m matrix matrix with columns representing covariates                    
                </@param>
                <@param>
                    m biasCorrected true means covariances are bias-corrected                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if the input matrix does not have
                     * at least two rows and one column                    
                </@throws>
            </javadoc>
            <method name="Covariance" type="constructor" line="122"/>
            <javadoc line="128">
                Create a covariance matrix from a matrix whose columns
                 * represent covariates.
                 * &lt;p&gt;The matrix must have at least one column and two rows&lt;/p&gt;                
                <@param>
                    m matrix matrix with columns representing covariates                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if the input matrix does not have
                     * at least two rows and one column                    
                </@throws>
            </javadoc>
            <method name="Covariance" type="constructor" line="138"/>
            <javadoc line="142">
                Returns the covariance matrix                
                <@return>
                    n covariance matrix                    
                </@return>
            </javadoc>
            <method name="getCovarianceMatrix" type="RealMatrix" line="147"/>
            <javadoc line="151">
                Returns the number of observations (length of covariate vectors)                
                <@return>
                    n number of observations                    
                </@return>
            </javadoc>
            <method name="getN" type="int" line="156"/>
            <javadoc line="160">
                Compute a covariance matrix from a matrix whose columns represent
                 * covariates.                
                <@param>
                    m matrix input matrix (must have at least one column and two rows)                    
                </@param>
                <@param>
                    m biasCorrected determines whether or not covariance estimates are bias-corrected                    
                </@param>
                <@return>
                    n covariance matrix                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if the matrix does not contain sufficient data                    
                </@throws>
            </javadoc>
            <method name="computeCovarianceMatrix" type="RealMatrix" line="169">
                <declaration name="dimension" type="int" line="170"/>
                <declaration name="variance" type="Variance" line="171"/>
                <declaration name="outMatrix" type="RealMatrix" line="172"/>
                <scope line="173">
                    <scope line="174">
                        <declaration name="cov" type="double" line="175"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="184">
                Create a covariance matrix from a matrix whose columns represent
                 * covariates. Covariances are computed using the bias-corrected formula.                
                <@param>
                    m matrix input matrix (must have at least one column and two rows)                    
                </@param>
                <@return>
                    n covariance matrix                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if matrix does not contain sufficient data                    
                </@throws>
                <@see>
                    e #Covariance                    
                </@see>
            </javadoc>
            <method name="computeCovarianceMatrix" type="RealMatrix" line="193"/>
            <javadoc line="197">
                Compute a covariance matrix from a rectangular array whose columns represent
                 * covariates.                
                <@param>
                    m data input array (must have at least one column and two rows)                    
                </@param>
                <@param>
                    m biasCorrected determines whether or not covariance estimates are bias-corrected                    
                </@param>
                <@return>
                    n covariance matrix                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if the data array does not contain sufficient
                     * data                    
                </@throws>
                <@throws>
                    s NotStrictlyPositiveException if the input data array is not
                     * rectangular with at least one row and one column.                    
                </@throws>
            </javadoc>
            <method name="computeCovarianceMatrix" type="RealMatrix" line="209"/>
            <javadoc line="213">
                Create a covariance matrix from a rectangular array whose columns represent
                 * covariates. Covariances are computed using the bias-corrected formula.                
                <@param>
                    m data input array (must have at least one column and two rows)                    
                </@param>
                <@return>
                    n covariance matrix                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if the data array does not contain sufficient data                    
                </@throws>
                <@throws>
                    s NotStrictlyPositiveException if the input data array is not
                     * rectangular with at least one row and one column.                    
                </@throws>
                <@see>
                    e #Covariance                    
                </@see>
            </javadoc>
            <method name="computeCovarianceMatrix" type="RealMatrix" line="224"/>
            <javadoc line="228">
                Computes the covariance between the two arrays.
                 * &lt;p&gt;Array lengths must match and the common length must be at least 2.&lt;/p&gt;                
                <@param>
                    m xArray first data array                    
                </@param>
                <@param>
                    m yArray second data array                    
                </@param>
                <@param>
                    m biasCorrected if true, returned value will be bias-corrected                    
                </@param>
                <@return>
                    n returns the covariance for the two arrays                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if the arrays lengths do not match or
                     * there is insufficient data                    
                </@throws>
            </javadoc>
            <method name="covariance" type="double" line="241">
                <declaration name="mean" type="Mean" line="242"/>
                <declaration name="result" type="double" line="243"/>
                <declaration name="length" type="int" line="244"/>
                <scope line="245"/>
                <scope line="248"/>
                <scope line="251">
                    <declaration name="xMean" type="double" line="252"/>
                    <declaration name="yMean" type="double" line="253"/>
                    <scope line="254">
                        <declaration name="xDev" type="double" line="255"/>
                        <declaration name="yDev" type="double" line="256"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="263">
                Computes the covariance between the two arrays, using the bias-corrected
                 * formula.
                 * &lt;p&gt;Array lengths must match and the common length must be at least 2.&lt;/p&gt;                
                <@param>
                    m xArray first data array                    
                </@param>
                <@param>
                    m yArray second data array                    
                </@param>
                <@return>
                    n returns the covariance for the two arrays                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if the arrays lengths do not match or
                     * there is insufficient data                    
                </@throws>
            </javadoc>
            <method name="covariance" type="double" line="276"/>
            <javadoc line="280">
                Throws MathIllegalArgumentException if the matrix does not have at least
                 * one column and two rows.                
                <@param>
                    m matrix matrix to check                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if the matrix does not contain sufficient data
                     * to compute covariance                    
                </@throws>
            </javadoc>
            <method name="checkSufficientData" type="void" line="287">
                <declaration name="nRows" type="int" line="288"/>
                <declaration name="nCols" type="int" line="289"/>
                <scope line="290"/>
            </method>
        </class>
    </source>