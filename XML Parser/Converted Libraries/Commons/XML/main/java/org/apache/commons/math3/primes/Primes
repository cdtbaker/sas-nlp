<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.primes">
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="java.util.List"/>
        <class name="Primes" line="25">
            <javadoc line="25">
                Methods related to prime numbers in the range of &lt;code&gt;int&lt;/code&gt;:
                  &lt;ul&gt;
                  &lt;li&gt;primality test&lt;/li&gt;
                  &lt;li&gt;prime number generation&lt;/li&gt;
                  &lt;li&gt;factorization&lt;/li&gt;
                  &lt;/ul&gt;                
                <@version>
                    n $Id: Primes.java 1462702 2013-03-30 04:45:52Z psteitz $                    
                </@version>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <javadoc line="38">
                Hide utility class.                
            </javadoc>
            <method name="Primes" type="constructor" line="41"/>
            <javadoc line="44">
                Primality test: tells if the argument is a (provable) prime or not.
                  &lt;p&gt;
                  It uses the Miller-Rabin probabilistic test in such a way that a result is guaranteed:
                  it uses the firsts prime numbers as successive base (see Handbook of applied cryptography
                  by Menezes, table 4.1).                
                <@param>
                    m n number to test.                    
                </@param>
                <@return>
                    n true if n is prime. (All numbers &lt; 2 return false).                    
                </@return>
            </javadoc>
            <method name="isPrime" type="boolean" line="54">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="55"/>
                <scope line="59">
                    <scope line="60"/>
                </scope>
            </method>
            <javadoc line="67">
                Return the smallest prime greater than or equal to n.                
                <@param>
                    m n a positive number.                    
                </@param>
                <@return>
                    n the smallest prime greater than or equal to n.                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if n &lt; 0.                    
                </@throws>
            </javadoc>
            <method name="nextPrime" type="int" line="74">
                <params>
                    <param name="n" type="int"/>
                </params>
                <comment line="75">
                    prepare entry in the +2, +4 loop:                    
                </comment>
                <comment line="75">
                    n should not be a multiple of 3                    
                </comment>
                <scope line="75"/>
                <scope line="78"/>
                <scope line="82"/>
                <scope line="86"/>
                <declaration name="rem" type="int" line="92"/>
                <scope line="93"/>
                <scope line="95"/>
                <scope line="99">
                    <scope line="100"/>
                    <scope line="104"/>
                </scope>
            </method>
            <javadoc line="111">
                Prime factors decomposition                
                <@param>
                    m n number to factorize: must be &ge; 2                    
                </@param>
                <@return>
                    n list of prime factors of n                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if n &lt; 2.                    
                </@throws>
            </javadoc>
            <method name="primeFactors" type="List<Integer>" line="118">
                <params>
                    <param name="n" type="int"/>
                </params>
                <comment line="119">
                    slower than trial div unless we do an awful lot of computation                    
                </comment>
                <comment line="119">
                    (then it finally gets JIT-compiled efficiently                    
                </comment>
                <comment line="119">
                    List&lt;Integer&gt; out = PollardRho.primeFactors(n);                    
                </comment>
                <scope line="120"/>
            </method>
        </class>
    </source>