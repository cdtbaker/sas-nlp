<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="SingularValueDecomposition" line="24">
            <javadoc line="24">
                Calculates the compact Singular Value Decomposition of a matrix.
                 * &lt;p&gt;
                 * The Singular Value Decomposition of matrix A is a set of three matrices: U,
                 * &amp;Sigma; and V such that A = U &amp;times; &amp;Sigma; &amp;times; V&lt;sup&gt;T&lt;/sup&gt;. Let A be
                 * a m &amp;times; n matrix, then U is a m &amp;times; p orthogonal matrix, &amp;Sigma; is a
                 * p &amp;times; p diagonal matrix with positive or null elements, V is a p &amp;times;
                 * n orthogonal matrix (hence V&lt;sup&gt;T&lt;/sup&gt; is also orthogonal) where
                 * p=min(m,n).
                 * &lt;/p&gt;
                 * &lt;p&gt;This class is similar to the class with similar name from the
                 * &lt;a href=&quot;http://math.nist.gov/javanumerics/jama/&quot;&gt;JAMA&lt;/a&gt; library, with the
                 * following changes:&lt;/p&gt;
                 * &lt;ul&gt;
                 * &lt;li&gt;the {@code norm2} method which has been renamed as {@link #getNorm()getNorm},&lt;/li&gt;
                 * &lt;li&gt;the {@code cond} method which has been renamed as {@link #getConditionNumber() getConditionNumber},&lt;/li&gt;
                 * &lt;li&gt;the {@code rank} method which has been renamed as {@link #getRank()getRank},&lt;/li&gt;
                 * &lt;li&gt;a {@link #getUT() getUT} method has been added,&lt;/li&gt;
                 * &lt;li&gt;a {@link #getVT() getVT} method has been added,&lt;/li&gt;
                 * &lt;li&gt;a {@link #getSolver() getSolver} method has been added,&lt;/li&gt;
                 * &lt;li&gt;a {@link #getCovariance(double) getCovariance} method has been added.&lt;/li&gt;
                 * &lt;/ul&gt;                
                <@see>
                    e <a href="http://mathworld.wolfram.com/SingularValueDecomposition.html">MathWorld</a>                    
                </@see>
                <@see>
                    e <a href="http://en.wikipedia.org/wiki/Singular_value_decomposition">Wikipedia</a>                    
                </@see>
                <@version>
                    n $Id: SingularValueDecomposition.java 1456931 2013-03-15 12:34:35Z luc $                    
                </@version>
                <@since>
                    e 2.0 (changed to concrete class in 3.0)                    
                </@since>
            </javadoc>
            <declaration name="EPS" type="double" line="55"/>
            <javadoc line="55">
                Relative threshold for small singular values.                
            </javadoc>
            <declaration name="TINY" type="double" line="57"/>
            <javadoc line="57">
                Absolute threshold for small singular values.                
            </javadoc>
            <declaration name="singularValues" type="double[]" line="59"/>
            <javadoc line="59">
                Computed singular values.                
            </javadoc>
            <declaration name="m" type="int" line="61"/>
            <javadoc line="61">
                max(row dimension, column dimension).                
            </javadoc>
            <declaration name="n" type="int" line="63"/>
            <javadoc line="63">
                min(row dimension, column dimension).                
            </javadoc>
            <declaration name="transposed" type="boolean" line="65"/>
            <javadoc line="65">
                Indicator for transposed matrix.                
            </javadoc>
            <declaration name="cachedU" type="RealMatrix" line="67"/>
            <javadoc line="67">
                Cached value of U matrix.                
            </javadoc>
            <declaration name="cachedUt" type="RealMatrix" line="69"/>
            <javadoc line="69">
                Cached value of transposed U matrix.                
            </javadoc>
            <declaration name="cachedS" type="RealMatrix" line="71"/>
            <javadoc line="71">
                Cached value of S (diagonal) matrix.                
            </javadoc>
            <declaration name="cachedV" type="RealMatrix" line="73"/>
            <javadoc line="73">
                Cached value of V matrix.                
            </javadoc>
            <declaration name="cachedVt" type="RealMatrix" line="75"/>
            <javadoc line="75">
                Cached value of transposed V matrix.                
            </javadoc>
            <declaration name="tol" type="double" line="77"/>
            <javadoc line="77">
                Tolerance value for small singular values, calculated once we have
                 * populated &quot;singularValues&quot;.                
            </javadoc>
            <javadoc line="83">
                Calculates the compact Singular Value Decomposition of the given matrix.                
                <@param>
                    m matrix Matrix to decompose.                    
                </@param>
            </javadoc>
            <method name="SingularValueDecomposition" type="constructor" line="88">
                <comment line="89">
                    &quot;m&quot; is always the largest dimension.                    
                </comment>
                <comment line="89">
                    Reduce A to bidiagonal form, storing the diagonal elements                    
                </comment>
                <comment line="89">
                    in s and the super-diagonal elements in e.                    
                </comment>
                <comment line="89">
                    Set up the final bidiagonal matrix or order p.                    
                </comment>
                <comment line="89">
                    Generate U.                    
                </comment>
                <comment line="89">
                    Generate V.                    
                </comment>
                <comment line="89">
                    Main iteration loop for the singular values.                    
                </comment>
                <comment line="89">
                    Set the small value tolerance used to calculate rank and pseudo-inverse                    
                </comment>
                <declaration name="A" type="double[][]" line="89"/>
                <scope line="92"/>
                <scope line="97"/>
                <declaration name="U" type="double[][]" line="105"/>
                <declaration name="V" type="double[][]" line="106"/>
                <declaration name="e" type="double[]" line="107"/>
                <declaration name="work" type="double[]" line="108"/>
                <declaration name="nct" type="int" line="111"/>
                <declaration name="nrt" type="int" line="112"/>
                <scope line="113">
                    <scope line="114">
                        <scope line="119"/>
                        <scope line="122">
                            <scope line="123"/>
                            <scope line="126"/>
                        </scope>
                    </scope>
                    <scope line="133">
                        <scope line="135">
                            <declaration name="t" type="double" line="137"/>
                            <scope line="138"/>
                            <scope line="142"/>
                        </scope>
                    </scope>
                    <scope line="150">
                        <scope line="153"/>
                    </scope>
                    <scope line="157">
                        <scope line="162"/>
                        <scope line="165">
                            <scope line="166"/>
                            <scope line="169"/>
                        </scope>
                        <scope line="176">
                            <scope line="178"/>
                            <scope line="181">
                                <scope line="182"/>
                            </scope>
                            <scope line="186">
                                <declaration name="t" type="double" line="187"/>
                                <scope line="188"/>
                            </scope>
                        </scope>
                        <scope line="196"/>
                    </scope>
                </scope>
                <declaration name="p" type="int" line="202"/>
                <scope line="203"/>
                <scope line="206"/>
                <scope line="209"/>
                <scope line="215">
                    <scope line="216"/>
                </scope>
                <scope line="221">
                    <scope line="222">
                        <scope line="223">
                            <declaration name="t" type="double" line="224"/>
                            <scope line="225"/>
                            <scope line="229"/>
                        </scope>
                        <scope line="233"/>
                        <scope line="237"/>
                    </scope>
                    <scope line="240">
                        <scope line="241"/>
                    </scope>
                </scope>
                <scope line="249">
                    <scope line="251">
                        <scope line="252">
                            <declaration name="t" type="double" line="253"/>
                            <scope line="254"/>
                            <scope line="258"/>
                        </scope>
                    </scope>
                    <scope line="263"/>
                </scope>
                <declaration name="pp" type="int" line="270"/>
                <declaration name="iter" type="int" line="271"/>
                <scope line="272">
                    <declaration name="k" type="int" line="273"/>
                    <declaration name="kase" type="int" line="274"/>
                    <scope line="284">
                        <declaration name="threshold" type="double" line="285"/>
                        <scope line="295"/>
                    </scope>
                    <scope line="302"/>
                    <scope line="304">
                        <declaration name="ks" type="int" line="305"/>
                        <scope line="306">
                            <scope line="307"/>
                            <declaration name="t" type="double" line="310"/>
                            <scope line="312"/>
                        </scope>
                        <scope line="317"/>
                        <scope line="319"/>
                        <scope line="321"/>
                    </scope>
                    <scope line="330">
                        <declaration name="f" type="double" line="331"/>
                        <scope line="333">
                            <declaration name="t" type="double" line="334"/>
                            <declaration name="cs" type="double" line="335"/>
                            <declaration name="sn" type="double" line="336"/>
                            <scope line="338"/>
                            <scope line="343"/>
                        </scope>
                    </scope>
                    <scope line="352">
                        <declaration name="f" type="double" line="353"/>
                        <scope line="355">
                            <declaration name="t" type="double" line="356"/>
                            <declaration name="cs" type="double" line="357"/>
                            <declaration name="sn" type="double" line="358"/>
                            <scope line="363"/>
                        </scope>
                    </scope>
                    <scope line="372">
                        <declaration name="maxPm1Pm2" type="double" line="374"/>
                        <declaration name="scale" type="double" line="376"/>
                        <declaration name="sp" type="double" line="380"/>
                        <declaration name="spm1" type="double" line="381"/>
                        <declaration name="epm1" type="double" line="382"/>
                        <declaration name="sk" type="double" line="383"/>
                        <declaration name="ek" type="double" line="384"/>
                        <declaration name="b" type="double" line="385"/>
                        <declaration name="c" type="double" line="386"/>
                        <declaration name="shift" type="double" line="387"/>
                        <scope line="389">
                            <scope line="391"/>
                        </scope>
                        <declaration name="f" type="double" line="396"/>
                        <declaration name="g" type="double" line="397"/>
                        <scope line="399">
                            <declaration name="t" type="double" line="400"/>
                            <declaration name="cs" type="double" line="401"/>
                            <declaration name="sn" type="double" line="402"/>
                            <scope line="403"/>
                            <scope line="411"/>
                            <scope line="424">
                                <scope line="425"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="437">
                        <scope line="439">
                            <scope line="442"/>
                        </scope>
                        <scope line="447">
                            <scope line="448"/>
                            <declaration name="t" type="double" line="451"/>
                            <scope line="454">
                                <scope line="455"/>
                            </scope>
                            <scope line="461">
                                <scope line="462"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="481"/>
                <scope line="484"/>
            </method>
            <javadoc line="490">
                Returns the matrix U of the decomposition.
                 * &lt;p&gt;U is an orthogonal matrix, i.e. its transpose is also its inverse.&lt;/p&gt;                
                <@return>
                    n the U matrix                    
                </@return>
                <@see>
                    e #getUT()                    
                </@see>
            </javadoc>
            <method name="getU" type="RealMatrix" line="496">
                <comment line="497">
                    return the cached matrix                    
                </comment>
            </method>
            <javadoc line="502">
                Returns the transpose of the matrix U of the decomposition.
                 * &lt;p&gt;U is an orthogonal matrix, i.e. its transpose is also its inverse.&lt;/p&gt;                
                <@return>
                    n the U matrix (or null if decomposed matrix is singular)                    
                </@return>
                <@see>
                    e #getU()                    
                </@see>
            </javadoc>
            <method name="getUT" type="RealMatrix" line="508">
                <comment line="509">
                    return the cached matrix                    
                </comment>
                <scope line="509"/>
            </method>
            <javadoc line="516">
                Returns the diagonal matrix &amp;Sigma; of the decomposition.
                 * &lt;p&gt;&amp;Sigma; is a diagonal matrix. The singular values are provided in
                 * non-increasing order, for compatibility with Jama.&lt;/p&gt;                
                <@return>
                    n the &Sigma; matrix                    
                </@return>
            </javadoc>
            <method name="getS" type="RealMatrix" line="522">
                <scope line="523"/>
            </method>
            <javadoc line="530">
                Returns the diagonal elements of the matrix &amp;Sigma; of the decomposition.
                 * &lt;p&gt;The singular values are provided in non-increasing order, for
                 * compatibility with Jama.&lt;/p&gt;                
                <@return>
                    n the diagonal elements of the &Sigma; matrix                    
                </@return>
            </javadoc>
            <method name="getSingularValues" type="double[]" line="536"/>
            <javadoc line="540">
                Returns the matrix V of the decomposition.
                 * &lt;p&gt;V is an orthogonal matrix, i.e. its transpose is also its inverse.&lt;/p&gt;                
                <@return>
                    n the V matrix (or null if decomposed matrix is singular)                    
                </@return>
                <@see>
                    e #getVT()                    
                </@see>
            </javadoc>
            <method name="getV" type="RealMatrix" line="546">
                <comment line="547">
                    return the cached matrix                    
                </comment>
            </method>
            <javadoc line="551">
                Returns the transpose of the matrix V of the decomposition.
                 * &lt;p&gt;V is an orthogonal matrix, i.e. its transpose is also its inverse.&lt;/p&gt;                
                <@return>
                    n the V matrix (or null if decomposed matrix is singular)                    
                </@return>
                <@see>
                    e #getV()                    
                </@see>
            </javadoc>
            <method name="getVT" type="RealMatrix" line="557">
                <comment line="558">
                    return the cached matrix                    
                </comment>
                <scope line="558"/>
            </method>
            <javadoc line="565">
                Returns the n &amp;times; n covariance matrix.
                 * &lt;p&gt;The covariance matrix is V &amp;times; J &amp;times; V&lt;sup&gt;T&lt;/sup&gt;
                 * where J is the diagonal matrix of the inverse of the squares of
                 * the singular values.&lt;/p&gt;                
                <@param>
                    m minSingularValue value below which singular values are ignored
                     * (a 0 or negative value implies all singular value will be used)                    
                </@param>
                <@return>
                    n covariance matrix                    
                </@return>
                <@exception>
                    n IllegalArgumentException if minSingularValue is larger than
                     * the largest singular value, meaning all singular values are ignored                    
                </@exception>
            </javadoc>
            <method name="getCovariance" type="RealMatrix" line="576">
                <comment line="577">
                    get the number of singular values to consider                    
                </comment>
                <declaration name="p" type="int" line="578"/>
                <declaration name="dimension" type="int" line="579"/>
                <scope line="581"/>
                <scope line="585"/>
                <declaration name="data" type="double[][]" line="590"/>
                <anonymous_class line="591">
                    <javadoc line="592">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="visit" type="void" line="595"/>
                </anonymous_class>
                <declaration name="jv" type="RealMatrix" line="600"/>
            </method>
            <javadoc line="604">
                Returns the L&lt;sub&gt;2&lt;/sub&gt; norm of the matrix.
                 * &lt;p&gt;The L&lt;sub&gt;2&lt;/sub&gt; norm is max(|A &amp;times; u|&lt;sub&gt;2&lt;/sub&gt; /
                 * |u|&lt;sub&gt;2&lt;/sub&gt;), where |.|&lt;sub&gt;2&lt;/sub&gt; denotes the vectorial 2-norm
                 * (i.e. the traditional euclidian norm).&lt;/p&gt;                
                <@return>
                    n norm                    
                </@return>
            </javadoc>
            <method name="getNorm" type="double" line="611"/>
            <javadoc line="615">
                Return the condition number of the matrix.                
                <@return>
                    n condition number of the matrix                    
                </@return>
            </javadoc>
            <method name="getConditionNumber" type="double" line="619"/>
            <javadoc line="623">
                Computes the inverse of the condition number.
                 * In cases of rank deficiency, the {@link #getConditionNumber() condition
                 * number} will become undefined.                
                <@return>
                    n the inverse of the condition number.                    
                </@return>
            </javadoc>
            <method name="getInverseConditionNumber" type="double" line="630"/>
            <javadoc line="634">
                Return the effective numerical matrix rank.
                 * &lt;p&gt;The effective numerical rank is the number of non-negligible
                 * singular values. The threshold used to identify non-negligible
                 * terms is max(m,n) &amp;times; ulp(s&lt;sub&gt;1&lt;/sub&gt;) where ulp(s&lt;sub&gt;1&lt;/sub&gt;)
                 * is the least significant bit of the largest singular value.&lt;/p&gt;                
                <@return>
                    n effective numerical matrix rank                    
                </@return>
            </javadoc>
            <method name="getRank" type="int" line="642">
                <declaration name="r" type="int" line="643"/>
                <scope line="644">
                    <scope line="645"/>
                </scope>
            </method>
            <javadoc line="652">
                Get a solver for finding the A &amp;times; X = B solution in least square sense.                
                <@return>
                    n a solver                    
                </@return>
            </javadoc>
            <method name="getSolver" type="DecompositionSolver" line="656"/>
            <class name="Solver" line="660">
                <implements interface="DecompositionSolver"/>
                <javadoc line="660">
                    Specialized solver.                    
                </javadoc>
                <declaration name="pseudoInverse" type="RealMatrix" line="662"/>
                <javadoc line="662">
                    Pseudo-inverse of the initial matrix.                    
                </javadoc>
                <declaration name="nonSingular" type="boolean" line="664"/>
                <javadoc line="664">
                    Singularity indicator.                    
                </javadoc>
                <javadoc line="667">
                    Build a solver from decomposed matrix.                    
                    <@param>
                        m singularValues Singular values.                        
                    </@param>
                    <@param>
                        m uT U<sup>T</sup> matrix of the decomposition.                        
                    </@param>
                    <@param>
                        m v V matrix of the decomposition.                        
                    </@param>
                    <@param>
                        m nonSingular Singularity indicator.                        
                    </@param>
                    <@param>
                        m tol tolerance for singular values                        
                    </@param>
                </javadoc>
                <method name="Solver" type="constructor" line="677">
                    <declaration name="suT" type="double[][]" line="678"/>
                    <scope line="679">
                        <declaration name="a" type="double" line="680"/>
                        <scope line="681"/>
                        <scope line="683"/>
                        <declaration name="suTi" type="double[]" line="686"/>
                        <scope line="687"/>
                    </scope>
                </method>
                <javadoc line="695">
                    Solve the linear equation A &amp;times; X = B in least square sense.
                     * &lt;p&gt;
                     * The m&amp;times;n matrix A may not be square, the solution X is such that
                     * ||A &amp;times; X - B|| is minimal.
                     * &lt;/p&gt;                    
                    <@param>
                        m b Right-hand side of the equation A &times; X = B                        
                    </@param>
                    <@return>
                        n a vector X that minimizes the two norm of A &times; X - B                        
                    </@return>
                    <@throws>
                        s org.apache.commons.math3.exception.DimensionMismatchExceptionif the matrices dimensions do not match.                        
                    </@throws>
                </javadoc>
                <method name="solve" type="RealVector" line="706"/>
                <javadoc line="710">
                    Solve the linear equation A &amp;times; X = B in least square sense.
                     * &lt;p&gt;
                     * The m&amp;times;n matrix A may not be square, the solution X is such that
                     * ||A &amp;times; X - B|| is minimal.
                     * &lt;/p&gt;                    
                    <@param>
                        m b Right-hand side of the equation A &times; X = B                        
                    </@param>
                    <@return>
                        n a matrix X that minimizes the two norm of A &times; X - B                        
                    </@return>
                    <@throws>
                        s org.apache.commons.math3.exception.DimensionMismatchExceptionif the matrices dimensions do not match.                        
                    </@throws>
                </javadoc>
                <method name="solve" type="RealMatrix" line="722"/>
                <javadoc line="726">
                    Check if the decomposed matrix is non-singular.                    
                    <@return>
                        n {@code true} if the decomposed matrix is non-singular.                        
                    </@return>
                </javadoc>
                <method name="isNonSingular" type="boolean" line="731"/>
                <javadoc line="735">
                    Get the pseudo-inverse of the decomposed matrix.                    
                    <@return>
                        n the inverse matrix.                        
                    </@return>
                </javadoc>
                <method name="getInverse" type="RealMatrix" line="740"/>
            </class>
        </class>
    </source>