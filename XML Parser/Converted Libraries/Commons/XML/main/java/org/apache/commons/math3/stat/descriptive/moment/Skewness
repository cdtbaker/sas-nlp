<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive.moment">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Skewness" line="27">
            <extends class="AbstractStorelessUnivariateStatistic"/>
            <implements interface="Serializable"/>
            <javadoc line="27">
                Computes the skewness of the available values.
                  &lt;p&gt;
                  We use the following (unbiased) formula to define skewness:&lt;/p&gt;
                  &lt;p&gt;
                  skewness = [n / (n -1) (n - 2)] sum[(x_i - mean)^3] / std^3 &lt;/p&gt;
                  &lt;p&gt;
                  where n is the number of values, mean is the {@link Mean} and std is the{@link StandardDeviation} &lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
                  multiple threads access an instance of this class concurrently, and at least
                  one of the threads invokes the &lt;code&gt;increment()&lt;/code&gt; or
                  &lt;code&gt;clear()&lt;/code&gt; method, it must be synchronized externally. &lt;/p&gt;                
                <@version>
                    n $Id: Skewness.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="46"/>
            <javadoc line="46">
                Serializable version identifier                
            </javadoc>
            <declaration name="moment" type="ThirdMoment" line="49"/>
            <javadoc line="49">
                Third moment on which this statistic is based                
            </javadoc>
            <declaration name="incMoment" type="boolean" line="52"/>
            <javadoc line="52">
                Determines whether or not this statistic can be incremented or cleared.
                  &lt;p&gt;
                  Statistics based on (constructed from) external moments cannot
                  be incremented or cleared.&lt;/p&gt;                
            </javadoc>
            <javadoc line="60">
                Constructs a Skewness                
            </javadoc>
            <method name="Skewness" type="constructor" line="63"/>
            <javadoc line="68">
                Constructs a Skewness with an external moment                
                <@param>
                    m m3 external moment                    
                </@param>
            </javadoc>
            <method name="Skewness" type="constructor" line="72">
                <params>
                    <param name="m3" type="ThirdMoment"/>
                </params>
            </method>
            <javadoc line="77">
                Copy constructor, creates a new {@code Skewness} identical
                  to the {@code original}                
                <@param>
                    m original the {@code Skewness} instance to copy                    
                </@param>
                <@throws>
                    s NullArgumentException if original is null                    
                </@throws>
            </javadoc>
            <method name="Skewness" type="constructor" line="84">
                <params>
                    <param name="original" type="Skewness"/>
                </params>
            </method>
            <javadoc line="88">
                {@inheritDoc}&lt;p&gt;Note that when {@link #Skewness(ThirdMoment)} is used to
                  create a Skewness, this method does nothing. In that case, the
                  ThirdMoment should be incremented directly.&lt;/p&gt;                
            </javadoc>
            <method name="increment" type="void" line="95">
                <params>
                    <param name="d" type="double"/>
                </params>
                <scope line="96"/>
            </method>
            <javadoc line="101">
                Returns the value of the statistic based on the values that have been added.
                  &lt;p&gt;
                  See {@link Skewness} for the definition used in the computation.&lt;/p&gt;                
                <@return>
                    n the skewness of the available values.                    
                </@return>
            </javadoc>
            <method name="getResult" type="double" line="109">
                <scope line="111"/>
                <declaration name="variance" type="double" line="114"/>
                <scope line="115"/>
                <scope line="117">
                    <declaration name="n0" type="double" line="118"/>
                </scope>
            </method>
            <javadoc line="124">
                {@inheritDoc}                
            </javadoc>
            <method name="getN" type="long" line="127"/>
            <javadoc line="131">
                {@inheritDoc}                
            </javadoc>
            <method name="clear" type="void" line="135">
                <scope line="136"/>
            </method>
            <javadoc line="141">
                Returns the Skewness of the entries in the specifed portion of the
                  input array.
                  &lt;p&gt;
                  See {@link Skewness} for the definition used in the computation.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <@param>
                    m values the input array                    
                </@param>
                <@param>
                    m begin the index of the first array element to include                    
                </@param>
                <@param>
                    m length the number of elements to include                    
                </@param>
                <@return>
                    n the skewness of the values or Double.NaN if length is less than
                      3                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </@throws>
            </javadoc>
            <method name="evaluate" type="double" line="159">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="160">
                    Initialize the skewness                    
                </comment>
                <declaration name="skew" type="double" line="162"/>
                <scope line="164">
                    <declaration name="mean" type="Mean" line="165"/>
                    <declaration name="m" type="double" line="167"/>
                    <declaration name="accum" type="double" line="172"/>
                    <declaration name="accum2" type="double" line="173"/>
                    <scope line="174">
                        <declaration name="d" type="double" line="175"/>
                    </scope>
                    <declaration name="variance" type="double" line="179"/>
                    <declaration name="accum3" type="double" line="181"/>
                    <scope line="182">
                        <declaration name="d" type="double" line="183"/>
                    </scope>
                    <declaration name="n0" type="double" line="189"/>
                </scope>
            </method>
            <javadoc line="197">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="Skewness" line="201">
                <comment line="202">
                    No try-catch or advertised exception because args are guaranteed non-null                    
                </comment>
                <declaration name="result" type="Skewness" line="202"/>
            </method>
            <javadoc line="208">
                Copies source to dest.
                  &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;                
                <@param>
                    m source Skewness to copy                    
                </@param>
                <@param>
                    m dest Skewness to copy to                    
                </@param>
                <@throws>
                    s NullArgumentException if either source or dest is null                    
                </@throws>
            </javadoc>
            <method name="copy" type="void" line="217">
                <params>
                    <param name="source" type="Skewness"/>
                    <param name="dest" type="Skewness"/>
                </params>
            </method>
        </class>
    </source>