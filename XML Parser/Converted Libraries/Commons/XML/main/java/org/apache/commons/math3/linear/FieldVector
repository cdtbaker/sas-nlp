<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <interface name="FieldVector">
            <javadoc line="27">
                Interface defining a field-valued vector with basic algebraic operations.
                 * &lt;p&gt;
                 * vector element indexing is 0-based -- e.g., &lt;code&gt;getEntry(0)&lt;/code&gt;
                 * returns the first element of the vector.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * The various &lt;code&gt;mapXxx&lt;/code&gt; and &lt;code&gt;mapXxxToSelf&lt;/code&gt; methods operate
                 * on vectors element-wise, i.e. they perform the same operation (adding a scalar,
                 * applying a function ...) on each element in turn. The &lt;code&gt;mapXxx&lt;/code&gt;
                 * versions create a new vector to hold the result and do not change the instance.
                 * The &lt;code&gt;mapXxxToSelf&lt;/code&gt; versions use the instance itself to store the
                 * results, so the instance is changed by these methods. In both cases, the result
                 * vector is returned by the methods, this allows to use the &lt;i&gt;fluent API&lt;/i&gt;
                 * style, like this:
                 * &lt;/p&gt;
                 * &lt;pre&gt;
                 * RealVector result = v.mapAddToSelf(3.0).mapTanToSelf().mapSquareToSelf();
                 * &lt;/pre&gt;
                 * &lt;p&gt;
                 * Note that as almost all operations on {@link FieldElement} throw {@link NullArgumentException} when operating on a null element, it is the responsibility
                 * of &lt;code&gt;FieldVector&lt;/code&gt; implementations to make sure no null elements
                 * are inserted into the vector. This must be done in all constructors and
                 * all setters.
                 * &lt;p&gt;                
                <@param>
                    m<T>
                     *  the type of the field elements                    
                </@param>
                <@version>
                    n $Id: FieldVector.java 1455233 2013-03-11 17:00:41Z luc $                    
                </@version>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="getField" type="Field<T>" line="60"/>
            <javadoc line="60">
                Get the type of field elements of the vector.                
                <@return>
                    n type of field elements of the vector                    
                </@return>
            </javadoc>
            <method name="copy" type="FieldVector<T>" line="66"/>
            <javadoc line="66">
                Returns a (deep) copy of this.                
                <@return>
                    n vector copy                    
                </@return>
            </javadoc>
            <method name="add" type="FieldVector<T>" line="72"/>
            <javadoc line="72">
                Compute the sum of {@code this} and {@code v}.                
                <@param>
                    m v vector to be added                    
                </@param>
                <@return>
                    n {@code this + v}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code v} is not the same size as {@code this}                    
                </@throws>
            </javadoc>
            <method name="subtract" type="FieldVector<T>" line="80"/>
            <javadoc line="80">
                Compute {@code this} minus {@code v}.                
                <@param>
                    m v vector to be subtracted                    
                </@param>
                <@return>
                    n {@code this - v}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code v} is not the same size as {@code this}                    
                </@throws>
            </javadoc>
            <method name="mapAdd" type="FieldVector<T>" line="88"/>
            <javadoc line="88">
                Map an addition operation to each entry.                
                <@param>
                    m d value to be added to each entry                    
                </@param>
                <@return>
                    n {@code this + d}                    
                </@return>
                <@throws>
                    s NullArgumentException if {@code d} is {@code null}.                    
                </@throws>
            </javadoc>
            <method name="mapAddToSelf" type="FieldVector<T>" line="96"/>
            <javadoc line="96">
                Map an addition operation to each entry.
                 * &lt;p&gt;The instance &lt;strong&gt;is&lt;/strong&gt; changed by this method.&lt;/p&gt;                
                <@param>
                    m d value to be added to each entry                    
                </@param>
                <@return>
                    n for convenience, return {@code this}                    
                </@return>
                <@throws>
                    s NullArgumentException if {@code d} is {@code null}.                    
                </@throws>
            </javadoc>
            <method name="mapSubtract" type="FieldVector<T>" line="105"/>
            <javadoc line="105">
                Map a subtraction operation to each entry.                
                <@param>
                    m d value to be subtracted to each entry                    
                </@param>
                <@return>
                    n {@code this - d}                    
                </@return>
                <@throws>
                    s NullArgumentException if {@code d} is {@code null}                    
                </@throws>
            </javadoc>
            <method name="mapSubtractToSelf" type="FieldVector<T>" line="113"/>
            <javadoc line="113">
                Map a subtraction operation to each entry.
                 * &lt;p&gt;The instance &lt;strong&gt;is&lt;/strong&gt; changed by this method.&lt;/p&gt;                
                <@param>
                    m d value to be subtracted to each entry                    
                </@param>
                <@return>
                    n for convenience, return {@code this}                    
                </@return>
                <@throws>
                    s NullArgumentException if {@code d} is {@code null}                    
                </@throws>
            </javadoc>
            <method name="mapMultiply" type="FieldVector<T>" line="122"/>
            <javadoc line="122">
                Map a multiplication operation to each entry.                
                <@param>
                    m d value to multiply all entries by                    
                </@param>
                <@return>
                    n {@code this * d}                    
                </@return>
                <@throws>
                    s NullArgumentException if {@code d} is {@code null}.                    
                </@throws>
            </javadoc>
            <method name="mapMultiplyToSelf" type="FieldVector<T>" line="130"/>
            <javadoc line="130">
                Map a multiplication operation to each entry.
                 * &lt;p&gt;The instance &lt;strong&gt;is&lt;/strong&gt; changed by this method.&lt;/p&gt;                
                <@param>
                    m d value to multiply all entries by                    
                </@param>
                <@return>
                    n for convenience, return {@code this}                    
                </@return>
                <@throws>
                    s NullArgumentException if {@code d} is {@code null}.                    
                </@throws>
            </javadoc>
            <method name="mapDivide" type="FieldVector<T>" line="139"/>
            <javadoc line="139">
                Map a division operation to each entry.                
                <@param>
                    m d value to divide all entries by                    
                </@param>
                <@return>
                    n {@code this / d}                    
                </@return>
                <@throws>
                    s NullArgumentException if {@code d} is {@code null}.                    
                </@throws>
                <@throws>
                    s MathArithmeticException if {@code d} is zero.                    
                </@throws>
            </javadoc>
            <method name="mapDivideToSelf" type="FieldVector<T>" line="149"/>
            <javadoc line="149">
                Map a division operation to each entry.
                 * &lt;p&gt;The instance &lt;strong&gt;is&lt;/strong&gt; changed by this method.&lt;/p&gt;                
                <@param>
                    m d value to divide all entries by                    
                </@param>
                <@return>
                    n for convenience, return {@code this}                    
                </@return>
                <@throws>
                    s NullArgumentException if {@code d} is {@code null}.                    
                </@throws>
                <@throws>
                    s MathArithmeticException if {@code d} is zero.                    
                </@throws>
            </javadoc>
            <method name="mapInv" type="FieldVector<T>" line="160"/>
            <javadoc line="160">
                Map the 1/x function to each entry.                
                <@return>
                    n a vector containing the result of applying the function to each entry.                    
                </@return>
                <@throws>
                    s MathArithmeticException if one of the entries is zero.                    
                </@throws>
            </javadoc>
            <method name="mapInvToSelf" type="FieldVector<T>" line="167"/>
            <javadoc line="167">
                Map the 1/x function to each entry.
                 * &lt;p&gt;The instance &lt;strong&gt;is&lt;/strong&gt; changed by this method.&lt;/p&gt;                
                <@return>
                    n for convenience, return {@code this}                    
                </@return>
                <@throws>
                    s MathArithmeticException if one of the entries is zero.                    
                </@throws>
            </javadoc>
            <method name="ebeMultiply" type="FieldVector<T>" line="175"/>
            <javadoc line="175">
                Element-by-element multiplication.                
                <@param>
                    m v vector by which instance elements must be multiplied                    
                </@param>
                <@return>
                    n a vector containing {@code this[i] * v[i]} for all {@code i}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code v} is not the same size as {@code this}                    
                </@throws>
            </javadoc>
            <method name="ebeDivide" type="FieldVector<T>" line="184"/>
            <javadoc line="184">
                Element-by-element division.                
                <@param>
                    m v vector by which instance elements must be divided                    
                </@param>
                <@return>
                    n a vector containing {@code this[i] / v[i]} for all {@code i}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code v} is not the same size as {@code this}                    
                </@throws>
                <@throws>
                    s MathArithmeticException if one entry of {@code v} is zero.                    
                </@throws>
            </javadoc>
            <method name="getData" type="T[]" line="194"/>
            <javadoc line="194">
                Returns vector entries as a T array.                
                <@return>
                    n T array of entries                    
                </@return>
                <@deprecated>
                    d as of 3.1, to be removed in 4.0. Please use the {@link #toArray()} method instead.                    
                </@deprecated>
            </javadoc>
            <method name="dotProduct" type="T" line="202"/>
            <javadoc line="202">
                Compute the dot product.                
                <@param>
                    m v vector with which dot product should be computed                    
                </@param>
                <@return>
                    n the scalar dot product of {@code this} and {@code v}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code v} is not the same size as {@code this}                    
                </@throws>
            </javadoc>
            <method name="projection" type="FieldVector<T>" line="210"/>
            <javadoc line="210">
                Find the orthogonal projection of this vector onto another vector.                
                <@param>
                    m v vector onto which {@code this} must be projected                    
                </@param>
                <@return>
                    n projection of {@code this} onto {@code v}                    
                </@return>
                <@throws>
                    s DimensionMismatchException if {@code v} is not the same size as {@code this}                    
                </@throws>
                <@throws>
                    s MathArithmeticException if {@code v} is the null vector.                    
                </@throws>
            </javadoc>
            <method name="outerProduct" type="FieldMatrix<T>" line="220"/>
            <javadoc line="220">
                Compute the outer product.                
                <@param>
                    m v vector with which outer product should be computed                    
                </@param>
                <@return>
                    n the matrix outer product between instance and v                    
                </@return>
            </javadoc>
            <method name="getEntry" type="T" line="227"/>
            <javadoc line="227">
                Returns the entry in the specified index.                
                <@param>
                    m index Index location of entry to be fetched.                    
                </@param>
                <@return>
                    n the vector entry at {@code index}.                    
                </@return>
                <@throws>
                    s OutOfRangeException if the index is not valid.                    
                </@throws>
                <@see>
                    e #setEntry(int,FieldElement)                    
                </@see>
            </javadoc>
            <method name="setEntry" type="void" line="237"/>
            <javadoc line="237">
                Set a single element.                
                <@param>
                    m index element index.                    
                </@param>
                <@param>
                    m value new value for the element.                    
                </@param>
                <@throws>
                    s OutOfRangeException if the index is not valid.                    
                </@throws>
                <@see>
                    e #getEntry(int)                    
                </@see>
            </javadoc>
            <method name="getDimension" type="int" line="246"/>
            <javadoc line="246">
                Returns the size of the vector.                
                <@return>
                    n size                    
                </@return>
            </javadoc>
            <method name="append" type="FieldVector<T>" line="252"/>
            <javadoc line="252">
                Construct a vector by appending a vector to this vector.                
                <@param>
                    m v vector to append to this one.                    
                </@param>
                <@return>
                    n a new vector                    
                </@return>
            </javadoc>
            <method name="append" type="FieldVector<T>" line="259"/>
            <javadoc line="259">
                Construct a vector by appending a T to this vector.                
                <@param>
                    m d T to append.                    
                </@param>
                <@return>
                    n a new vector                    
                </@return>
            </javadoc>
            <method name="getSubVector" type="FieldVector<T>" line="266"/>
            <javadoc line="266">
                Get a subvector from consecutive elements.                
                <@param>
                    m index index of first element.                    
                </@param>
                <@param>
                    m n number of elements to be retrieved.                    
                </@param>
                <@return>
                    n a vector containing n elements.                    
                </@return>
                <@throws>
                    s OutOfRangeException if the index is not valid.                    
                </@throws>
                <@throws>
                    s NotPositiveException if the number of elements if not positive.                    
                </@throws>
            </javadoc>
            <method name="setSubVector" type="void" line="277"/>
            <javadoc line="277">
                Set a set of consecutive elements.                
                <@param>
                    m index index of first element to be set.                    
                </@param>
                <@param>
                    m v vector containing the values to set.                    
                </@param>
                <@throws>
                    s OutOfRangeException if the index is not valid.                    
                </@throws>
            </javadoc>
            <method name="set" type="void" line="285"/>
            <javadoc line="285">
                Set all elements to a single value.                
                <@param>
                    m value single value to set for all elements                    
                </@param>
            </javadoc>
            <method name="toArray" type="T[]" line="291"/>
            <javadoc line="291">
                Convert the vector to a T array.
                 * &lt;p&gt;The array is independent from vector data, it&apos;s elements
                 * are copied.&lt;/p&gt;                
                <@return>
                    n array containing a copy of vector elements                    
                </@return>
            </javadoc>
        </interface>
    </source>