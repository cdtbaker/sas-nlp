<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.complex">
        <import package="java.text.FieldPosition"/>
        <import package="java.text.NumberFormat"/>
        <import package="java.text.ParsePosition"/>
        <import package="java.util.Locale"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathParseException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.CompositeFormat"/>
        <class name="ComplexFormat" line="32">
            <javadoc line="32">
                Formats a Complex number in cartesian format &quot;Re(c) + Im(c)i&quot;.  &apos;i&apos; can
                  be replaced with &apos;j&apos; (or anything else), and the number format for both real
                  and imaginary parts can be configured.                
                <@version>
                    n $Id: ComplexFormat.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <declaration name="DEFAULT_IMAGINARY_CHARACTER" type="String" line="41"/>
            <javadoc line="41">
                The default imaginary character.                
            </javadoc>
            <declaration name="imaginaryCharacter" type="String" line="43"/>
            <javadoc line="43">
                The notation used to signify the imaginary part of the complex number.                
            </javadoc>
            <declaration name="imaginaryFormat" type="NumberFormat" line="45"/>
            <javadoc line="45">
                The format used for the imaginary part.                
            </javadoc>
            <declaration name="realFormat" type="NumberFormat" line="47"/>
            <javadoc line="47">
                The format used for the real part.                
            </javadoc>
            <javadoc line="50">
                Create an instance with the default imaginary character, &apos;i&apos;, and the
                  default number format for both real and imaginary parts.                
            </javadoc>
            <method name="ComplexFormat" type="constructor" line="54"/>
            <javadoc line="60">
                Create an instance with a custom number format for both real and
                  imaginary parts.                
                <@param>
                    m format the custom format for both real and imaginary parts.                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code realFormat} is {@code null}.                    
                </@throws>
            </javadoc>
            <method name="ComplexFormat" type="constructor" line="66">
                <params>
                    <param name="format" type="NumberFormat"/>
                </params>
                <scope line="67"/>
            </method>
            <javadoc line="75">
                Create an instance with a custom number format for the real part and a
                  custom number format for the imaginary part.                
                <@param>
                    m realFormat the custom format for the real part.                    
                </@param>
                <@param>
                    m imaginaryFormat the custom format for the imaginary part.                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code imaginaryFormat} is {@code null}.                    
                </@throws>
                <@throws>
                    s NullArgumentException if {@code realFormat} is {@code null}.                    
                </@throws>
            </javadoc>
            <method name="ComplexFormat" type="constructor" line="84">
                <params>
                    <param name="realFormat" type="NumberFormat"/>
                    <param name="imaginaryFormat" type="NumberFormat"/>
                </params>
                <scope line="85"/>
                <scope line="88"/>
            </method>
            <javadoc line="97">
                Create an instance with a custom imaginary character, and the default
                  number format for both real and imaginary parts.                
                <@param>
                    m imaginaryCharacter The custom imaginary character.                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code imaginaryCharacter} is{@code null}.                    
                </@throws>
                <@throws>
                    s NoDataException if {@code imaginaryCharacter} is an
                      empty string.                    
                </@throws>
            </javadoc>
            <method name="ComplexFormat" type="constructor" line="107">
                <params>
                    <param name="imaginaryCharacter" type="String"/>
                </params>
            </method>
            <javadoc line="111">
                Create an instance with a custom imaginary character, and a custom number
                  format for both real and imaginary parts.                
                <@param>
                    m imaginaryCharacter The custom imaginary character.                    
                </@param>
                <@param>
                    m format the custom format for both real and imaginary parts.                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code imaginaryCharacter} is{@code null}.                    
                </@throws>
                <@throws>
                    s NoDataException if {@code imaginaryCharacter} is an
                      empty string.                    
                </@throws>
                <@throws>
                    s NullArgumentException if {@code format} is {@code null}.                    
                </@throws>
            </javadoc>
            <method name="ComplexFormat" type="constructor" line="123">
                <params>
                    <param name="imaginaryCharacter" type="String"/>
                    <param name="format" type="NumberFormat"/>
                </params>
            </method>
            <javadoc line="127">
                Create an instance with a custom imaginary character, a custom number
                  format for the real part, and a custom number format for the imaginary
                  part.                
                <@param>
                    m imaginaryCharacter The custom imaginary character.                    
                </@param>
                <@param>
                    m realFormat the custom format for the real part.                    
                </@param>
                <@param>
                    m imaginaryFormat the custom format for the imaginary part.                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code imaginaryCharacter} is{@code null}.                    
                </@throws>
                <@throws>
                    s NoDataException if {@code imaginaryCharacter} is an
                      empty string.                    
                </@throws>
                <@throws>
                    s NullArgumentException if {@code imaginaryFormat} is {@code null}.                    
                </@throws>
                <@throws>
                    s NullArgumentException if {@code realFormat} is {@code null}.                    
                </@throws>
            </javadoc>
            <method name="ComplexFormat" type="constructor" line="145">
                <params>
                    <param name="imaginaryCharacter" type="String"/>
                    <param name="realFormat" type="NumberFormat"/>
                    <param name="imaginaryFormat" type="NumberFormat"/>
                </params>
                <scope line="146"/>
                <scope line="149"/>
                <scope line="152"/>
                <scope line="155"/>
            </method>
            <javadoc line="164">
                Get the set of locales for which complex formats are available.
                  &lt;p&gt;This is the same set as the {@link NumberFormat} set.&lt;/p&gt;                
                <@return>
                    n available complex format locales.                    
                </@return>
            </javadoc>
            <method name="getAvailableLocales" type="Locale[]" line="169"/>
            <javadoc line="173">
                This method calls {@link #format(Object,StringBuffer,FieldPosition)}.                
                <@param>
                    m c Complex object to format.                    
                </@param>
                <@return>
                    n A formatted number in the form "Re(c) + Im(c)i".                    
                </@return>
            </javadoc>
            <method name="format" type="String" line="179">
                <params>
                    <param name="c" type="Complex"/>
                </params>
            </method>
            <javadoc line="183">
                This method calls {@link #format(Object,StringBuffer,FieldPosition)}.                
                <@param>
                    m c Double object to format.                    
                </@param>
                <@return>
                    n A formatted number.                    
                </@return>
            </javadoc>
            <method name="format" type="String" line="189">
                <params>
                    <param name="c" type="Double"/>
                </params>
            </method>
            <javadoc line="193">
                Formats a {@link Complex} object to produce a string.                
                <@param>
                    m complex the object to format.                    
                </@param>
                <@param>
                    m toAppendTo where the text is to be appended                    
                </@param>
                <@param>
                    m pos On input: an alignment field, if desired. On output: the
                      offsets of the alignment field                    
                </@param>
                <@return>
                    n the value passed in as toAppendTo.                    
                </@return>
            </javadoc>
            <method name="format" type="StringBuffer" line="203">
                <params>
                    <param name="complex" type="Complex"/>
                    <param name="toAppendTo" type="StringBuffer"/>
                    <param name="pos" type="FieldPosition"/>
                </params>
                <comment line="204">
                    format real                    
                </comment>
                <comment line="204">
                    format sign and imaginary                    
                </comment>
                <declaration name="re" type="double" line="208"/>
                <declaration name="im" type="double" line="212"/>
                <declaration name="imAppendTo" type="StringBuffer" line="213"/>
                <scope line="214"/>
                <scope line="219"/>
            </method>
            <javadoc line="229">
                Format the absolute value of the imaginary part.                
                <@param>
                    m absIm Absolute value of the imaginary part of a complex number.                    
                </@param>
                <@param>
                    m toAppendTo where the text is to be appended.                    
                </@param>
                <@param>
                    m pos On input: an alignment field, if desired. On output: the
                      offsets of the alignment field.                    
                </@param>
                <@return>
                    n the value passed in as toAppendTo.                    
                </@return>
            </javadoc>
            <method name="formatImaginary" type="StringBuffer" line="240">
                <params>
                    <param name="absIm" type="double"/>
                    <param name="toAppendTo" type="StringBuffer"/>
                    <param name="pos" type="FieldPosition"/>
                </params>
                <scope line="245"/>
            </method>
            <javadoc line="253">
                Formats a object to produce a string.  {@code obj} must be either a{@link Complex} object or a {@link Number} object.  Any other type of
                  object will result in an {@link IllegalArgumentException} being thrown.                
                <@param>
                    m obj the object to format.                    
                </@param>
                <@param>
                    m toAppendTo where the text is to be appended                    
                </@param>
                <@param>
                    m pos On input: an alignment field, if desired. On output: the
                      offsets of the alignment field                    
                </@param>
                <@return>
                    n the value passed in as toAppendTo.                    
                </@return>
                <@see>
                    e java.text.Format#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)                    
                </@see>
                <@throws>
                    s MathIllegalArgumentException is {@code obj} is not a valid type.                    
                </@throws>
            </javadoc>
            <method name="format" type="StringBuffer" line="268">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="toAppendTo" type="StringBuffer"/>
                    <param name="pos" type="FieldPosition"/>
                </params>
                <declaration name="ret" type="StringBuffer" line="270"/>
                <scope line="272"/>
                <scope line="274"/>
                <scope line="277"/>
            </method>
            <javadoc line="285">
                Access the imaginaryCharacter.                
                <@return>
                    n the imaginaryCharacter.                    
                </@return>
            </javadoc>
            <method name="getImaginaryCharacter" type="String" line="289"/>
            <javadoc line="293">
                Access the imaginaryFormat.                
                <@return>
                    n the imaginaryFormat.                    
                </@return>
            </javadoc>
            <method name="getImaginaryFormat" type="NumberFormat" line="297"/>
            <javadoc line="301">
                Returns the default complex format for the current locale.                
                <@return>
                    n the default complex format.                    
                </@return>
            </javadoc>
            <method name="getInstance" type="ComplexFormat" line="305"/>
            <javadoc line="309">
                Returns the default complex format for the given locale.                
                <@param>
                    m locale the specific locale used by the format.                    
                </@param>
                <@return>
                    n the complex format specific to the given locale.                    
                </@return>
            </javadoc>
            <method name="getInstance" type="ComplexFormat" line="314">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="f" type="NumberFormat" line="315"/>
            </method>
            <javadoc line="319">
                Returns the default complex format for the given locale.                
                <@param>
                    m locale the specific locale used by the format.                    
                </@param>
                <@param>
                    m imaginaryCharacter Imaginary character.                    
                </@param>
                <@return>
                    n the complex format specific to the given locale.                    
                </@return>
                <@throws>
                    s NullArgumentException if {@code imaginaryCharacter} is{@code null}.                    
                </@throws>
                <@throws>
                    s NoDataException if {@code imaginaryCharacter} is an
                      empty string.                    
                </@throws>
            </javadoc>
            <method name="getInstance" type="ComplexFormat" line="330">
                <params>
                    <param name="imaginaryCharacter" type="String"/>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="f" type="NumberFormat" line="331"/>
            </method>
            <javadoc line="335">
                Access the realFormat.                
                <@return>
                    n the realFormat.                    
                </@return>
            </javadoc>
            <method name="getRealFormat" type="NumberFormat" line="339"/>
            <javadoc line="343">
                Parses a string to produce a {@link Complex} object.                
                <@param>
                    m source the string to parse.                    
                </@param>
                <@return>
                    n the parsed {@link Complex} object.                    
                </@return>
                <@throws>
                    s MathParseException if the beginning of the specified string
                      cannot be parsed.                    
                </@throws>
            </javadoc>
            <method name="parse" type="Complex" line="351">
                <params>
                    <param name="source" type="String"/>
                </params>
                <declaration name="parsePosition" type="ParsePosition" line="352"/>
                <declaration name="result" type="Complex" line="353"/>
                <scope line="354"/>
            </method>
            <javadoc line="362">
                Parses a string to produce a {@link Complex} object.                
                <@param>
                    m source the string to parse                    
                </@param>
                <@param>
                    m pos input/ouput parsing parameter.                    
                </@param>
                <@return>
                    n the parsed {@link Complex} object.                    
                </@return>
            </javadoc>
            <method name="parse" type="Complex" line="369">
                <params>
                    <param name="source" type="String"/>
                    <param name="pos" type="ParsePosition"/>
                </params>
                <comment line="370">
                    parse whitespace                    
                </comment>
                <comment line="370">
                    parse real                    
                </comment>
                <comment line="370">
                    parse sign                    
                </comment>
                <comment line="370">
                    parse whitespace                    
                </comment>
                <comment line="370">
                    parse imaginary                    
                </comment>
                <comment line="370">
                    parse imaginary character                    
                </comment>
                <declaration name="initialIndex" type="int" line="370"/>
                <declaration name="re" type="Number" line="376"/>
                <scope line="377"/>
                <declaration name="startIndex" type="int" line="385"/>
                <declaration name="c" type="char" line="386"/>
                <declaration name="sign" type="int" line="387"/>
                <declaration name="im" type="Number" line="412"/>
                <scope line="413"/>
                <scope line="421"/>
            </method>
        </class>
    </source>