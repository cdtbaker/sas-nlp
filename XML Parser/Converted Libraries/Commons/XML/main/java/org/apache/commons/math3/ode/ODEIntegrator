<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode">
        <import package="java.util.Collection"/>
        <import package="org.apache.commons.math3.analysis.solvers.UnivariateSolver"/>
        <import package="org.apache.commons.math3.ode.events.EventHandler"/>
        <import package="org.apache.commons.math3.ode.sampling.StepHandler"/>
        <interface name="ODEIntegrator">
            <javadoc line="26">
                This interface defines the common parts shared by integrators
                  for first and second order differential equations.                
                <@see>
                    e FirstOrderIntegrator                    
                </@see>
                <@see>
                    e SecondOrderIntegrator                    
                </@see>
                <@version>
                    n $Id: ODEIntegrator.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="getName" type="String" line="36"/>
            <javadoc line="36">
                Get the name of the method.                
                <@return>
                    n name of the method                    
                </@return>
            </javadoc>
            <method name="addStepHandler" type="void" line="41"/>
            <javadoc line="41">
                Add a step handler to this integrator.
                  &lt;p&gt;The handler will be called by the integrator for each accepted
                  step.&lt;/p&gt;                
                <@param>
                    m handler handler for the accepted steps                    
                </@param>
                <@see>
                    e #getStepHandlers()                    
                </@see>
                <@see>
                    e #clearStepHandlers()                    
                </@see>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="getStepHandlers" type="Collection<StepHandler>" line="51"/>
            <javadoc line="51">
                Get all the step handlers that have been added to the integrator.                
                <@return>
                    n an unmodifiable collection of the added events handlers                    
                </@return>
                <@see>
                    e #addStepHandler(StepHandler)                    
                </@see>
                <@see>
                    e #clearStepHandlers()                    
                </@see>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="clearStepHandlers" type="void" line="59"/>
            <javadoc line="59">
                Remove all the step handlers that have been added to the integrator.                
                <@see>
                    e #addStepHandler(StepHandler)                    
                </@see>
                <@see>
                    e #getStepHandlers()                    
                </@see>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="addEventHandler" type="void" line="66"/>
            <javadoc line="66">
                Add an event handler to the integrator.
                  Uses a default {@link UnivariateSolver}with an absolute accuracy equal to the given convergence threshold,
                  as root-finding algorithm to detect the state events.                
                <@param>
                    m handler event handler                    
                </@param>
                <@param>
                    m maxCheckInterval maximal time interval between switching
                      function checks (this interval prevents missing sign changes in
                      case the integration steps becomes very large)                    
                </@param>
                <@param>
                    m convergence convergence threshold in the event time search                    
                </@param>
                <@param>
                    m maxIterationCount upper limit of the iteration count in
                      the event time search                    
                </@param>
                <@see>
                    e #getEventHandlers()                    
                </@see>
                <@see>
                    e #clearEventHandlers()                    
                </@see>
            </javadoc>
            <method name="addEventHandler" type="void" line="83"/>
            <javadoc line="83">
                Add an event handler to the integrator.                
                <@param>
                    m handler event handler                    
                </@param>
                <@param>
                    m maxCheckInterval maximal time interval between switching
                      function checks (this interval prevents missing sign changes in
                      case the integration steps becomes very large)                    
                </@param>
                <@param>
                    m convergence convergence threshold in the event time search                    
                </@param>
                <@param>
                    m maxIterationCount upper limit of the iteration count in
                      the event time search                    
                </@param>
                <@param>
                    m solver The root-finding algorithm to use to detect the state
                      events.                    
                </@param>
                <@see>
                    e #getEventHandlers()                    
                </@see>
                <@see>
                    e #clearEventHandlers()                    
                </@see>
            </javadoc>
            <method name="getEventHandlers" type="Collection<EventHandler>" line="100"/>
            <javadoc line="100">
                Get all the event handlers that have been added to the integrator.                
                <@return>
                    n an unmodifiable collection of the added events handlers                    
                </@return>
                <@see>
                    e #addEventHandler(EventHandler,double,double,int)                    
                </@see>
                <@see>
                    e #clearEventHandlers()                    
                </@see>
            </javadoc>
            <method name="clearEventHandlers" type="void" line="107"/>
            <javadoc line="107">
                Remove all the event handlers that have been added to the integrator.                
                <@see>
                    e #addEventHandler(EventHandler,double,double,int)                    
                </@see>
                <@see>
                    e #getEventHandlers()                    
                </@see>
            </javadoc>
            <method name="getCurrentStepStart" type="double" line="113"/>
            <javadoc line="113">
                Get the current value of the step start time t&lt;sub&gt;i&lt;/sub&gt;.
                  &lt;p&gt;This method can be called during integration (typically by
                  the object implementing the {@link FirstOrderDifferentialEquationsdifferential equations} problem) if the value of the current step that
                  is attempted is needed.&lt;/p&gt;
                  &lt;p&gt;The result is undefined if the method is called outside of
                  calls to &lt;code&gt;integrate&lt;/code&gt;.&lt;/p&gt;                
                <@return>
                    n current value of the step start time t<sub>i</sub>                    
                </@return>
            </javadoc>
            <method name="getCurrentSignedStepsize" type="double" line="124"/>
            <javadoc line="124">
                Get the current signed value of the integration stepsize.
                  &lt;p&gt;This method can be called during integration (typically by
                  the object implementing the {@link FirstOrderDifferentialEquationsdifferential equations} problem) if the signed value of the current stepsize
                  that is tried is needed.&lt;/p&gt;
                  &lt;p&gt;The result is undefined if the method is called outside of
                  calls to &lt;code&gt;integrate&lt;/code&gt;.&lt;/p&gt;                
                <@return>
                    n current signed value of the stepsize                    
                </@return>
            </javadoc>
            <method name="setMaxEvaluations" type="void" line="135"/>
            <javadoc line="135">
                Set the maximal number of differential equations function evaluations.
                  &lt;p&gt;The purpose of this method is to avoid infinite loops which can occur
                  for example when stringent error constraints are set or when lots of
                  discrete events are triggered, thus leading to many rejected steps.&lt;/p&gt;                
                <@param>
                    m maxEvaluations maximal number of function evaluations (negative
                      values are silently converted to maximal integer value, thus representing
                      almost unlimited evaluations)                    
                </@param>
            </javadoc>
            <method name="getMaxEvaluations" type="int" line="145"/>
            <javadoc line="145">
                Get the maximal number of functions evaluations.                
                <@return>
                    n maximal number of functions evaluations                    
                </@return>
            </javadoc>
            <method name="getEvaluations" type="int" line="150"/>
            <javadoc line="150">
                Get the number of evaluations of the differential equations function.
                  &lt;p&gt;
                  The number of evaluations corresponds to the last call to the
                  &lt;code&gt;integrate&lt;/code&gt; method. It is 0 if the method has not been called yet.
                  &lt;/p&gt;                
                <@return>
                    n number of evaluations of the differential equations function                    
                </@return>
            </javadoc>
        </interface>
    </source>