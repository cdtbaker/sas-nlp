<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="AbstractUnivariateStatistic" line="26">
            <implements interface="UnivariateStatistic"/>
            <javadoc line="26">
                Abstract base class for all implementations of the{@link UnivariateStatistic} interface.
                 * &lt;p&gt;
                 * Provides a default implementation of &lt;code&gt;evaluate(double[]),&lt;/code&gt;
                 * delegating to &lt;code&gt;evaluate(double[], int, int)&lt;/code&gt; in the natural way.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * Also includes a &lt;code&gt;test&lt;/code&gt; method that performs generic parameter
                 * validation for the &lt;code&gt;evaluate&lt;/code&gt; methods.&lt;/p&gt;                
                <@version>
                    n $Id: AbstractUnivariateStatistic.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <declaration name="storedData" type="double[]" line="42"/>
            <javadoc line="42">
                Stored data.                
            </javadoc>
            <javadoc line="45">
                Set the data array.
                 * &lt;p&gt;
                 * The stored value is a copy of the parameter array, not the array itself.
                 * &lt;/p&gt;                
                <@param>
                    m values data array to store (may be null to remove stored data)                    
                </@param>
                <@see>
                    e #evaluate()                    
                </@see>
            </javadoc>
            <method name="setData" type="void" line="53"/>
            <javadoc line="57">
                Get a copy of the stored data array.                
                <@return>
                    n copy of the stored data array (may be null)                    
                </@return>
            </javadoc>
            <method name="getData" type="double[]" line="61"/>
            <javadoc line="65">
                Get a reference to the stored data array.                
                <@return>
                    n reference to the stored data array (may be null)                    
                </@return>
            </javadoc>
            <method name="getDataRef" type="double[]" line="69"/>
            <javadoc line="73">
                Set the data array.  The input array is copied, not referenced.                
                <@param>
                    m values data array to store                    
                </@param>
                <@param>
                    m begin the index of the first element to include                    
                </@param>
                <@param>
                    m length the number of elements to include                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if values is null or the indices
                     * are not valid                    
                </@throws>
                <@see>
                    e #evaluate()                    
                </@see>
            </javadoc>
            <method name="setData" type="void" line="84">
                <scope line="85"/>
                <scope line="89"/>
                <scope line="93"/>
                <scope line="97"/>
            </method>
            <javadoc line="105">
                Returns the result of evaluating the statistic over the stored data.
                 * &lt;p&gt;
                 * The stored array is the one which was set by previous calls to {@link #setData(double[])}.
                 * &lt;/p&gt;                
                <@return>
                    n the value of the statistic applied to the stored data                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if the stored data array is null                    
                </@throws>
            </javadoc>
            <method name="evaluate" type="double" line="113"/>
            <javadoc line="117">
                {@inheritDoc}                
            </javadoc>
            <method name="evaluate" type="double" line="120"/>
            <method name="evaluate" type="double" line="125"/>
            <javadoc line="125">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="UnivariateStatistic" line="131"/>
            <javadoc line="131">
                {@inheritDoc}                
            </javadoc>
            <javadoc line="136">
                This method is used by &lt;code&gt;evaluate(double[], int, int)&lt;/code&gt; methods
                 * to verify that the input parameters designate a subarray of positive length.
                 * &lt;p&gt;
                 * &lt;ul&gt;
                 * &lt;li&gt;returns &lt;code&gt;true&lt;/code&gt; iff the parameters designate a subarray of
                 * positive length&lt;/li&gt;
                 * &lt;li&gt;throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null or
                 * or the indices are invalid&lt;/li&gt;
                 * &lt;li&gt;returns &lt;code&gt;false&lt;/li&gt; if the array is non-null, but
                 * &lt;code&gt;length&lt;/code&gt; is 0.
                 * &lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m values the input array                    
                </@param>
                <@param>
                    m begin index of the first array element to include                    
                </@param>
                <@param>
                    m length the number of elements to include                    
                </@param>
                <@return>
                    n true if the parameters are valid and designate a subarray of positive length                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if the indices are invalid or the array is null                    
                </@throws>
            </javadoc>
            <method name="test" type="boolean" line="158"/>
            <javadoc line="162">
                This method is used by &lt;code&gt;evaluate(double[], int, int)&lt;/code&gt; methods
                 * to verify that the input parameters designate a subarray of positive length.
                 * &lt;p&gt;
                 * &lt;ul&gt;
                 * &lt;li&gt;returns &lt;code&gt;true&lt;/code&gt; iff the parameters designate a subarray of
                 * non-negative length&lt;/li&gt;
                 * &lt;li&gt;throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null or
                 * or the indices are invalid&lt;/li&gt;
                 * &lt;li&gt;returns &lt;code&gt;false&lt;/li&gt; if the array is non-null, but
                 * &lt;code&gt;length&lt;/code&gt; is 0 unless &lt;code&gt;allowEmpty&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;
                 * &lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m values the input array                    
                </@param>
                <@param>
                    m begin index of the first array element to include                    
                </@param>
                <@param>
                    m length the number of elements to include                    
                </@param>
                <@param>
                    m allowEmpty if <code>true</code> then zero length arrays are allowed                    
                </@param>
                <@return>
                    n true if the parameters are valid                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if the indices are invalid or the array is null                    
                </@throws>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <method name="test" type="boolean" line="184">
                <scope line="186"/>
                <scope line="190"/>
                <scope line="194"/>
                <scope line="198"/>
                <scope line="203"/>
            </method>
            <javadoc line="211">
                This method is used by &lt;code&gt;evaluate(double[], double[], int, int)&lt;/code&gt; methods
                 * to verify that the begin and length parameters designate a subarray of positive length
                 * and the weights are all non-negative, non-NaN, finite, and not all zero.
                 * &lt;p&gt;
                 * &lt;ul&gt;
                 * &lt;li&gt;returns &lt;code&gt;true&lt;/code&gt; iff the parameters designate a subarray of
                 * positive length and the weights array contains legitimate values.&lt;/li&gt;
                 * &lt;li&gt;throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if any of the following are true:
                 * &lt;ul&gt;&lt;li&gt;the values array is null&lt;/li&gt;
                 * &lt;li&gt;the weights array is null&lt;/li&gt;
                 * &lt;li&gt;the weights array does not have the same length as the values array&lt;/li&gt;
                 * &lt;li&gt;the weights array contains one or more infinite values&lt;/li&gt;
                 * &lt;li&gt;the weights array contains one or more NaN values&lt;/li&gt;
                 * &lt;li&gt;the weights array contains negative values&lt;/li&gt;
                 * &lt;li&gt;the start and length arguments do not determine a valid array&lt;/li&gt;&lt;/ul&gt;
                 * &lt;/li&gt;
                 * &lt;li&gt;returns &lt;code&gt;false&lt;/li&gt; if the array is non-null, but
                 * &lt;code&gt;length&lt;/code&gt; is 0.
                 * &lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m values the input array                    
                </@param>
                <@param>
                    m weights the weights array                    
                </@param>
                <@param>
                    m begin index of the first array element to include                    
                </@param>
                <@param>
                    m length the number of elements to include                    
                </@param>
                <@return>
                    n true if the parameters are valid and designate a subarray of positive length                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if the indices are invalid or the array is null                    
                </@throws>
                <@since>
                    e 2.1                    
                </@since>
            </javadoc>
            <method name="test" type="boolean" line="244"/>
            <javadoc line="248">
                This method is used by &lt;code&gt;evaluate(double[], double[], int, int)&lt;/code&gt; methods
                 * to verify that the begin and length parameters designate a subarray of positive length
                 * and the weights are all non-negative, non-NaN, finite, and not all zero.
                 * &lt;p&gt;
                 * &lt;ul&gt;
                 * &lt;li&gt;returns &lt;code&gt;true&lt;/code&gt; iff the parameters designate a subarray of
                 * non-negative length and the weights array contains legitimate values.&lt;/li&gt;
                 * &lt;li&gt;throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if any of the following are true:
                 * &lt;ul&gt;&lt;li&gt;the values array is null&lt;/li&gt;
                 * &lt;li&gt;the weights array is null&lt;/li&gt;
                 * &lt;li&gt;the weights array does not have the same length as the values array&lt;/li&gt;
                 * &lt;li&gt;the weights array contains one or more infinite values&lt;/li&gt;
                 * &lt;li&gt;the weights array contains one or more NaN values&lt;/li&gt;
                 * &lt;li&gt;the weights array contains negative values&lt;/li&gt;
                 * &lt;li&gt;the start and length arguments do not determine a valid array&lt;/li&gt;&lt;/ul&gt;
                 * &lt;/li&gt;
                 * &lt;li&gt;returns &lt;code&gt;false&lt;/li&gt; if the array is non-null, but
                 * &lt;code&gt;length&lt;/code&gt; is 0 unless &lt;code&gt;allowEmpty&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.
                 * &lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m values the input array.                    
                </@param>
                <@param>
                    m weights the weights array.                    
                </@param>
                <@param>
                    m begin index of the first array element to include.                    
                </@param>
                <@param>
                    m length the number of elements to include.                    
                </@param>
                <@param>
                    m allowEmpty if {@code true} than allow zero length arrays to pass.                    
                </@param>
                <@return>
                    n {@code true} if the parameters are valid.                    
                </@return>
                <@throws>
                    s NullArgumentException if either of the arrays are null                    
                </@throws>
                <@throws>
                    s MathIllegalArgumentException if the array indices are not valid,
                     * the weights array contains NaN, infinite or negative elements, or there
                     * are no positive weights.                    
                </@throws>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <method name="test" type="boolean" line="282">
                <scope line="284"/>
                <scope line="288"/>
                <declaration name="containsPositiveWeight" type="boolean" line="292"/>
                <scope line="293">
                    <scope line="294"/>
                    <scope line="297"/>
                    <scope line="300"/>
                    <scope line="303"/>
                </scope>
                <scope line="308"/>
            </method>
        </class>
    </source>