<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.fitting">
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialFunction"/>
        <import package="org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer"/>
        <class name="PolynomialFitter" extends="CurveFitter<PolynomialFunction.Parametric>" line="23">
            <javadoc line="23">
                Polynomial fitting is a very simple case of {@link CurveFitter curve fitting}.
                 * The estimated coefficients are the polynomial coefficients (see the{@link #fit(double[]) fit} method).                
                <@version>
                    n $Id: PolynomialFitter.java 1422313 2012-12-15 18:53:41Z psteitz $                    
                </@version>
                <@deprecated>
                    d As of 3.1 (to be removed in 4.0).                    
                </@deprecated>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <declaration name="degree" type="int" line="34"/>
            <javadoc line="34">
                Polynomial degree.                
                <@deprecated>
                    d                    
                </@deprecated>
            </javadoc>
            <javadoc line="40">
                Simple constructor.
                 * &lt;p&gt;The polynomial fitter built this way are complete polynomials,
                 * ie. a n-degree polynomial has n+1 coefficients.&lt;/p&gt;                
                <@param>
                    m degree Maximal degree of the polynomial.                    
                </@param>
                <@param>
                    m optimizer Optimizer to use for the fitting.                    
                </@param>
                <@deprecated>
                    d Since 3.1 (to be removed in 4.0). Please use{@link #PolynomialFitter(DifferentiableMultivariateVectorOptimizer)} instead.                    
                </@deprecated>
            </javadoc>
            <method name="PolynomialFitter" type="constructor" line="51"/>
            <javadoc line="56">
                Simple constructor.                
                <@param>
                    m optimizer Optimizer to use for the fitting.                    
                </@param>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="PolynomialFitter" type="constructor" line="62">
                <comment line="63">
                    gree = -1; // To avoid compilation error until the instance variable is removed.                    
                </comment>
            </method>
            <javadoc line="67">
                Get the polynomial fitting the weighted (x, y) points.                
                <@return>
                    n the coefficients of the polynomial that best fits the observed points.                    
                </@return>
                <@throws>
                    s org.apache.commons.math3.exception.ConvergenceExceptionif the algorithm failed to converge.                    
                </@throws>
                <@deprecated>
                    d Since 3.1 (to be removed in 4.0). Please use {@link #fit(double[])} instead.                    
                </@deprecated>
            </javadoc>
            <method name="fit" type="double[]" line="76"/>
            <javadoc line="80">
                Get the coefficients of the polynomial fitting the weighted data points.
                 * The degree of the fitting polynomial is {@code guess.length - 1}.                
                <@param>
                    m guess First guess for the coefficients. They must be sorted in
                     * increasing order of the polynomial's degree.                    
                </@param>
                <@param>
                    m maxEval Maximum number of evaluations of the polynomial.                    
                </@param>
                <@return>
                    n the coefficients of the polynomial that best fits the observed points.                    
                </@return>
                <@throws>
                    s org.apache.commons.math3.exception.TooManyEvaluationsException if
                     * the number of evaluations exceeds {@code maxEval}.                    
                </@throws>
                <@throws>
                    s org.apache.commons.math3.exception.ConvergenceExceptionif the algorithm failed to converge.                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="fit" type="double[]" line="94"/>
            <javadoc line="98">
                Get the coefficients of the polynomial fitting the weighted data points.
                 * The degree of the fitting polynomial is {@code guess.length - 1}.                
                <@param>
                    m guess First guess for the coefficients. They must be sorted in
                     * increasing order of the polynomial's degree.                    
                </@param>
                <@return>
                    n the coefficients of the polynomial that best fits the observed points.                    
                </@return>
                <@throws>
                    s org.apache.commons.math3.exception.ConvergenceExceptionif the algorithm failed to converge.                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="fit" type="double[]" line="109"/>
        </class>
    </source>