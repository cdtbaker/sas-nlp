<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="org.apache.commons.math3.analysis.TrivariateFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="TricubicSplineInterpolatingFunction" line="26">
            <implements interface="TrivariateFunction"/>
            <javadoc line="26">
                Function that implements the
                  &lt;a href=&quot;http://en.wikipedia.org/wiki/Tricubic_interpolation&quot;&gt;
                  tricubic spline interpolation&lt;/a&gt;, as proposed in
                  &lt;quote&gt;
                  Tricubic interpolation in three dimensions&lt;br/&gt;
                  F. Lekien and J. Marsden&lt;br/&gt;
                  &lt;em&gt;Int. J. Numer. Meth. Engng&lt;/em&gt; 2005; &lt;b&gt;63&lt;/b&gt;:455-471
                  &lt;/quote&gt;                
                <@since>
                    e 2.2                    
                </@since>
                <@version>
                    n $Id: TricubicSplineInterpolatingFunction.java 1385314 2012-09-16 16:35:49Z tn $                    
                </@version>
            </javadoc>
            <declaration name="AINV" type="double[][]" line="41"/>
            <javadoc line="41">
                Matrix to compute the spline coefficients from the function values
                  and function derivatives values                
            </javadoc>
            <declaration name="xval" type="double[]" line="112"/>
            <javadoc line="112">
                Samples x-coordinates                
            </javadoc>
            <declaration name="yval" type="double[]" line="114"/>
            <javadoc line="114">
                Samples y-coordinates                
            </javadoc>
            <declaration name="zval" type="double[]" line="116"/>
            <javadoc line="116">
                Samples z-coordinates                
            </javadoc>
            <declaration name="splines" type="TricubicSplineFunction[][][]" line="118"/>
            <javadoc line="118">
                Set of cubic splines pacthing the whole data grid                
            </javadoc>
            <javadoc line="121">
                @param x Sample values of the x-coordinate, in increasing order.                
                <@param>
                    m y Sample values of the y-coordinate, in increasing order.                    
                </@param>
                <@param>
                    m z Sample values of the y-coordinate, in increasing order.                    
                </@param>
                <@param>
                    m f Values of the function on every grid point.                    
                </@param>
                <@param>
                    m dFdX Values of the partial derivative of function with respect to x on every grid point.                    
                </@param>
                <@param>
                    m dFdY Values of the partial derivative of function with respect to y on every grid point.                    
                </@param>
                <@param>
                    m dFdZ Values of the partial derivative of function with respect to z on every grid point.                    
                </@param>
                <@param>
                    m d2FdXdY Values of the cross partial derivative of function on every grid point.                    
                </@param>
                <@param>
                    m d2FdXdZ Values of the cross partial derivative of function on every grid point.                    
                </@param>
                <@param>
                    m d2FdYdZ Values of the cross partial derivative of function on every grid point.                    
                </@param>
                <@param>
                    m d3FdXdYdZ Values of the cross partial derivative of function on every grid point.                    
                </@param>
                <@throws>
                    s NoDataException if any of the arrays has zero length.                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if the various arrays do not contain the expected number of elements.                    
                </@throws>
                <@throws>
                    s NonMonotonicSequenceException if {@code x}, {@code y} or {@code z} are not strictly increasing.                    
                </@throws>
            </javadoc>
            <method name="TricubicSplineInterpolatingFunction" type="constructor" line="150">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double[]"/>
                    <param name="z" type="double[]"/>
                    <param name="f" type="double[][][]"/>
                    <param name="dFdX" type="double[][][]"/>
                    <param name="dFdY" type="double[][][]"/>
                    <param name="dFdZ" type="double[][][]"/>
                    <param name="d2FdXdY" type="double[][][]"/>
                    <param name="d2FdXdZ" type="double[][][]"/>
                    <param name="d2FdYdZ" type="double[][][]"/>
                    <param name="d3FdXdYdZ" type="double[][][]"/>
                </params>
                <declaration name="xLen" type="int" line="151"/>
                <declaration name="yLen" type="int" line="152"/>
                <declaration name="zLen" type="int" line="153"/>
                <scope line="155"/>
                <scope line="158"/>
                <scope line="161"/>
                <scope line="164"/>
                <scope line="167"/>
                <scope line="170"/>
                <scope line="173"/>
                <scope line="176"/>
                <scope line="179"/>
                <declaration name="lastI" type="int" line="191"/>
                <declaration name="lastJ" type="int" line="192"/>
                <declaration name="lastK" type="int" line="193"/>
                <scope line="196">
                    <scope line="197"/>
                    <scope line="200"/>
                    <scope line="203"/>
                    <scope line="206"/>
                    <scope line="209"/>
                    <scope line="212"/>
                    <scope line="215"/>
                    <scope line="218"/>
                    <declaration name="ip1" type="int" line="222"/>
                    <scope line="223">
                        <scope line="224"/>
                        <scope line="227"/>
                        <scope line="230"/>
                        <scope line="233"/>
                        <scope line="236"/>
                        <scope line="239"/>
                        <scope line="242"/>
                        <scope line="245"/>
                        <declaration name="jp1" type="int" line="249"/>
                        <scope line="250">
                            <declaration name="kp1" type="int" line="251"/>
                            <declaration name="beta" type="double[]" line="253"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="301">
                {@inheritDoc}                
                <@throws>
                    s OutOfRangeException if any of the variables is outside its interpolation range.                    
                </@throws>
            </javadoc>
            <method name="value" type="double" line="307">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="z" type="double"/>
                </params>
                <declaration name="i" type="int" line="308"/>
                <scope line="309"/>
                <declaration name="j" type="int" line="312"/>
                <scope line="313"/>
                <declaration name="k" type="int" line="316"/>
                <scope line="317"/>
                <declaration name="xN" type="double" line="321"/>
                <declaration name="yN" type="double" line="322"/>
                <declaration name="zN" type="double" line="323"/>
            </method>
            <javadoc line="328">
                @param c Coordinate.                
                <@param>
                    m val Coordinate samples.                    
                </@param>
                <@return>
                    n the index in {@code val} corresponding to the interval containing {@code c}, or {@code -1}if {@code c} is out of the range defined by the end values of {@code val}.                    
                </@return>
            </javadoc>
            <method name="searchIndex" type="int" line="334">
                <params>
                    <param name="c" type="double"/>
                    <param name="val" type="double[]"/>
                </params>
                <scope line="335"/>
                <declaration name="max" type="int" line="339"/>
                <scope line="340">
                    <scope line="341"/>
                </scope>
            </method>
            <javadoc line="349">
                Compute the spline coefficients from the list of function values and
                  function partial derivatives values at the four corners of a grid
                  element. They must be specified in the following order:
                  &lt;ul&gt;
                  &lt;li&gt;f(0,0,0)&lt;/li&gt;
                  &lt;li&gt;f(1,0,0)&lt;/li&gt;
                  &lt;li&gt;f(0,1,0)&lt;/li&gt;
                  &lt;li&gt;f(1,1,0)&lt;/li&gt;
                  &lt;li&gt;f(0,0,1)&lt;/li&gt;
                  &lt;li&gt;f(1,0,1)&lt;/li&gt;
                  &lt;li&gt;f(0,1,1)&lt;/li&gt;
                  &lt;li&gt;f(1,1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(0,0,0)&lt;/li&gt;
                  &lt;li&gt;... &lt;em&gt;(same order as above)&lt;/em&gt;&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(1,1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(0,0,0)&lt;/li&gt;
                  &lt;li&gt;... &lt;em&gt;(same order as above)&lt;/em&gt;&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(1,1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;z&lt;/sub&gt;(0,0,0)&lt;/li&gt;
                  &lt;li&gt;... &lt;em&gt;(same order as above)&lt;/em&gt;&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;z&lt;/sub&gt;(1,1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(0,0,0)&lt;/li&gt;
                  &lt;li&gt;... &lt;em&gt;(same order as above)&lt;/em&gt;&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(1,1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xz&lt;/sub&gt;(0,0,0)&lt;/li&gt;
                  &lt;li&gt;... &lt;em&gt;(same order as above)&lt;/em&gt;&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xz&lt;/sub&gt;(1,1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;yz&lt;/sub&gt;(0,0,0)&lt;/li&gt;
                  &lt;li&gt;... &lt;em&gt;(same order as above)&lt;/em&gt;&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;yz&lt;/sub&gt;(1,1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xyz&lt;/sub&gt;(0,0,0)&lt;/li&gt;
                  &lt;li&gt;... &lt;em&gt;(same order as above)&lt;/em&gt;&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xyz&lt;/sub&gt;(1,1,1)&lt;/li&gt;
                  &lt;/ul&gt;
                  where the subscripts indicate the partial derivative with respect to
                  the corresponding variable(s).                
                <@param>
                    m beta List of function values and function partial derivatives values.                    
                </@param>
                <@return>
                    n the spline coefficients.                    
                </@return>
            </javadoc>
            <method name="computeSplineCoefficients" type="double[]" line="397">
                <params>
                    <param name="beta" type="double[]"/>
                </params>
                <declaration name="sz" type="int" line="398"/>
                <declaration name="a" type="double[]" line="399"/>
                <scope line="401">
                    <declaration name="result" type="double" line="402"/>
                    <declaration name="row" type="double[]" line="403"/>
                    <scope line="404"/>
                </scope>
            </method>
        </class>
        <class name="TricubicSplineFunction" line="414">
            <implements interface="TrivariateFunction"/>
            <javadoc line="414">
                3D-spline function.                
                <@version>
                    n $Id: TricubicSplineInterpolatingFunction.java 1385314 2012-09-16 16:35:49Z tn $                    
                </@version>
            </javadoc>
            <declaration name="N" type="short" line="421"/>
            <javadoc line="421">
                Number of points.                
            </javadoc>
            <declaration name="a" type="double[][][]" line="423"/>
            <javadoc line="423">
                Coefficients                
            </javadoc>
            <javadoc line="426">
                @param aV List of spline coefficients.                
            </javadoc>
            <method name="TricubicSplineFunction" type="constructor" line="429">
                <params>
                    <param name="aV" type="double[]"/>
                </params>
                <scope line="430">
                    <scope line="431">
                        <scope line="432"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="439">
                @param x x-coordinate of the interpolation point.                
                <@param>
                    m y y-coordinate of the interpolation point.                    
                </@param>
                <@param>
                    m z z-coordinate of the interpolation point.                    
                </@param>
                <@return>
                    n the interpolated value.                    
                </@return>
                <@throws>
                    s OutOfRangeException if {@code x}, {@code y} or{@code z} are not in the interval {@code [0, 1]}.                    
                </@throws>
            </javadoc>
            <method name="value" type="double" line="448">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="z" type="double"/>
                </params>
                <scope line="449"/>
                <scope line="452"/>
                <scope line="455"/>
                <declaration name="x2" type="double" line="459"/>
                <declaration name="x3" type="double" line="460"/>
                <declaration name="pX" type="double[]" line="461"/>
                <declaration name="y2" type="double" line="463"/>
                <declaration name="y3" type="double" line="464"/>
                <declaration name="pY" type="double[]" line="465"/>
                <declaration name="z2" type="double" line="467"/>
                <declaration name="z3" type="double" line="468"/>
                <declaration name="pZ" type="double[]" line="469"/>
                <declaration name="result" type="double" line="471"/>
                <scope line="472">
                    <scope line="473">
                        <scope line="474"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>