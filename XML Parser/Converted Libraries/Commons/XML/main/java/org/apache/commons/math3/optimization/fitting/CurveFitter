<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.fitting">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction"/>
        <import package="org.apache.commons.math3.analysis.MultivariateMatrixFunction"/>
        <import package="org.apache.commons.math3.analysis.ParametricUnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction"/>
        <import package="org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer"/>
        <import package="org.apache.commons.math3.optimization.MultivariateDifferentiableVectorOptimizer"/>
        <import package="org.apache.commons.math3.optimization.PointVectorValuePair"/>
        <class name="CurveFitter" line="32">
            <javadoc line="32">
                Fitter for parametric univariate real functions y = f(x).
                 * &lt;br/&gt;
                 * When a univariate real function y = f(x) does depend on some
                 * unknown parameters p&lt;sub&gt;0&lt;/sub&gt;, p&lt;sub&gt;1&lt;/sub&gt; ... p&lt;sub&gt;n-1&lt;/sub&gt;,
                 * this class can be used to find these parameters. It does this
                 * by &lt;em&gt;fitting&lt;/em&gt; the curve so it remains very close to a set of
                 * observed points (x&lt;sub&gt;0&lt;/sub&gt;, y&lt;sub&gt;0&lt;/sub&gt;), (x&lt;sub&gt;1&lt;/sub&gt;,
                 * y&lt;sub&gt;1&lt;/sub&gt;) ... (x&lt;sub&gt;k-1&lt;/sub&gt;, y&lt;sub&gt;k-1&lt;/sub&gt;). This fitting
                 * is done by finding the parameters values that minimizes the objective
                 * function &amp;sum;(y&lt;sub&gt;i&lt;/sub&gt;-f(x&lt;sub&gt;i&lt;/sub&gt;))&lt;sup&gt;2&lt;/sup&gt;. This is
                 * really a least squares problem.                
                <@param>
                    m<T>
                     *  Function to use for the fit.                    
                </@param>
                <@version>
                    n $Id: CurveFitter.java 1422230 2012-12-15 12:11:13Z erans $                    
                </@version>
                <@deprecated>
                    d As of 3.1 (to be removed in 4.0).                    
                </@deprecated>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <declaration name="oldOptimizer" type="DifferentiableMultivariateVectorOptimizer" line="53"/>
            <javadoc line="53">
                Optimizer to use for the fitting.                
                <@deprecated>
                    d as of 3.1 replaced by {@link #optimizer}                    
                </@deprecated>
            </javadoc>
            <declaration name="optimizer" type="MultivariateDifferentiableVectorOptimizer" line="59"/>
            <javadoc line="59">
                Optimizer to use for the fitting.                
            </javadoc>
            <declaration name="observations" type="List&lt;WeightedObservedPoint&gt;" line="62"/>
            <javadoc line="62">
                Observed points.                
            </javadoc>
            <javadoc line="65">
                Simple constructor.                
                <@param>
                    m optimizer optimizer to use for the fitting                    
                </@param>
                <@deprecated>
                    d as of 3.1 replaced by {@link #CurveFitter(MultivariateDifferentiableVectorOptimizer)}                    
                </@deprecated>
            </javadoc>
            <method name="CurveFitter" type="constructor" line="69"/>
            <javadoc line="75">
                Simple constructor.                
                <@param>
                    m optimizer optimizer to use for the fitting                    
                </@param>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="CurveFitter" type="constructor" line="79"/>
            <javadoc line="85">
                Add an observed (x,y) point to the sample with unit weight.
                 * &lt;p&gt;Calling this method is equivalent to call{@code addObservedPoint(1.0, x, y)}.&lt;/p&gt;                
                <@param>
                    m x abscissa of the point                    
                </@param>
                <@param>
                    m y observed value of the point at x, after fitting we should
                     * have f(x) as close as possible to this value                    
                </@param>
                <@see>
                    e #addObservedPoint(double,double,double)                    
                </@see>
                <@see>
                    e #addObservedPoint(WeightedObservedPoint)                    
                </@see>
                <@see>
                    e #getObservations()                    
                </@see>
            </javadoc>
            <method name="addObservedPoint" type="void" line="95"/>
            <javadoc line="99">
                Add an observed weighted (x,y) point to the sample.                
                <@param>
                    m weight weight of the observed point in the fit                    
                </@param>
                <@param>
                    m x abscissa of the point                    
                </@param>
                <@param>
                    m y observed value of the point at x, after fitting we should
                     * have f(x) as close as possible to this value                    
                </@param>
                <@see>
                    e #addObservedPoint(double,double)                    
                </@see>
                <@see>
                    e #addObservedPoint(WeightedObservedPoint)                    
                </@see>
                <@see>
                    e #getObservations()                    
                </@see>
            </javadoc>
            <method name="addObservedPoint" type="void" line="108"/>
            <javadoc line="112">
                Add an observed weighted (x,y) point to the sample.                
                <@param>
                    m observed observed point to add                    
                </@param>
                <@see>
                    e #addObservedPoint(double,double)                    
                </@see>
                <@see>
                    e #addObservedPoint(double,double,double)                    
                </@see>
                <@see>
                    e #getObservations()                    
                </@see>
            </javadoc>
            <method name="addObservedPoint" type="void" line="118"/>
            <javadoc line="122">
                Get the observed points.                
                <@return>
                    n observed points                    
                </@return>
                <@see>
                    e #addObservedPoint(double,double)                    
                </@see>
                <@see>
                    e #addObservedPoint(double,double,double)                    
                </@see>
                <@see>
                    e #addObservedPoint(WeightedObservedPoint)                    
                </@see>
            </javadoc>
            <method name="getObservations" type="WeightedObservedPoint[]" line="128"/>
            <javadoc line="132">
                Remove all observations.                
            </javadoc>
            <method name="clearObservations" type="void" line="135"/>
            <javadoc line="139">
                Fit a curve.
                 * This method compute the coefficients of the curve that best
                 * fit the sample of observed points previously given through calls
                 * to the {@link #addObservedPoint(WeightedObservedPoint)addObservedPoint} method.                
                <@param>
                    m f parametric function to fit.                    
                </@param>
                <@param>
                    m initialGuess first guess of the function parameters.                    
                </@param>
                <@return>
                    n the fitted parameters.                    
                </@return>
                <@throws>
                    s org.apache.commons.math3.exception.DimensionMismatchExceptionif the start point dimension is wrong.                    
                </@throws>
            </javadoc>
            <method name="fit" type="double[]" line="152"/>
            <javadoc line="156">
                Fit a curve.
                 * This method compute the coefficients of the curve that best
                 * fit the sample of observed points previously given through calls
                 * to the {@link #addObservedPoint(WeightedObservedPoint)addObservedPoint} method.                
                <@param>
                    m f parametric function to fit.                    
                </@param>
                <@param>
                    m initialGuess first guess of the function parameters.                    
                </@param>
                <@param>
                    m maxEval Maximum number of function evaluations.                    
                </@param>
                <@return>
                    n the fitted parameters.                    
                </@return>
                <@throws>
                    s org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the number of allowed evaluations is exceeded.                    
                </@throws>
                <@throws>
                    s org.apache.commons.math3.exception.DimensionMismatchExceptionif the start point dimension is wrong.                    
                </@throws>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <method name="fit" type="double[]" line="174">
                <comment line="175">
                    prepare least squares problem                    
                </comment>
                <comment line="175">
                    perform the fit                    
                </comment>
                <comment line="175">
                    extract the coefficients                    
                </comment>
                <declaration name="target" type="double[]" line="176"/>
                <declaration name="weights" type="double[]" line="177"/>
                <declaration name="i" type="int" line="178"/>
                <scope line="179"/>
                <declaration name="optimum" type="PointVectorValuePair" line="186"/>
                <scope line="187"/>
                <scope line="191"/>
            </method>
            <class name="OldTheoreticalValuesFunction" line="200">
                <implements interface="DifferentiableMultivariateVectorFunction"/>
                <javadoc line="200">
                    Vectorial function computing function theoretical values.                    
                </javadoc>
                <declaration name="f" type="ParametricUnivariateFunction" line="204"/>
                <javadoc line="204">
                    Function to fit.                    
                </javadoc>
                <javadoc line="207">
                    Simple constructor.                    
                    <@param>
                        m f function to fit.                        
                    </@param>
                </javadoc>
                <method name="OldTheoreticalValuesFunction" type="constructor" line="210"/>
                <javadoc line="214">
                    {@inheritDoc}                    
                </javadoc>
                <method name="jacobian" type="MultivariateMatrixFunction" line="215">
                    <anonymous_class line="216">
                        <method name="value" type="double[][]" line="217">
                            <declaration name="jacobian" type="double[][]" line="218"/>
                            <declaration name="i" type="int" line="220"/>
                            <scope line="221"/>
                        </method>
                    </anonymous_class>
                </method>
                <javadoc line="230">
                    {@inheritDoc}                    
                </javadoc>
                <method name="value" type="double[]" line="231">
                    <comment line="232">
                        compute the residuals                        
                    </comment>
                    <comment line="258">
                        compute the residuals                        
                    </comment>
                    <declaration name="values" type="double[]" line="233"/>
                    <declaration name="i" type="int" line="234"/>
                    <scope line="235"/>
                </method>
            </class>
            <class name="TheoreticalValuesFunction" line="243">
                <implements interface="MultivariateDifferentiableVectorFunction"/>
                <javadoc line="243">
                    Vectorial function computing function theoretical values.                    
                </javadoc>
                <declaration name="f" type="ParametricUnivariateFunction" line="246"/>
                <javadoc line="246">
                    Function to fit.                    
                </javadoc>
                <javadoc line="249">
                    Simple constructor.                    
                    <@param>
                        m f function to fit.                        
                    </@param>
                </javadoc>
                <method name="TheoreticalValuesFunction" type="constructor" line="252"/>
                <javadoc line="256">
                    {@inheritDoc}                    
                </javadoc>
                <method name="value" type="double[]" line="257">
                    <comment line="232">
                        compute the residuals                        
                    </comment>
                    <comment line="258">
                        compute the residuals                        
                    </comment>
                    <declaration name="values" type="double[]" line="259"/>
                    <declaration name="i" type="int" line="260"/>
                    <scope line="261"/>
                </method>
                <javadoc line="268">
                    {@inheritDoc}                    
                </javadoc>
                <method name="value" type="DerivativeStructure[]" line="269">
                    <comment line="270">
                        extract parameters                        
                    </comment>
                    <comment line="270">
                        compute the residuals                        
                    </comment>
                    <declaration name="parameters" type="double[]" line="272"/>
                    <scope line="273"/>
                    <declaration name="values" type="DerivativeStructure[]" line="278"/>
                    <declaration name="i" type="int" line="279"/>
                    <scope line="280">
                        <declaration name="vi" type="DerivativeStructure" line="284"/>
                        <scope line="285"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>