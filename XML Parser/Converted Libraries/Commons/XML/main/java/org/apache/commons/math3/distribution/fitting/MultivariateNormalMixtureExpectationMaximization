<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution.fitting">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.distribution.MultivariateNormalDistribution"/>
        <import package="org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution"/>
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.SingularMatrixException"/>
        <import package="org.apache.commons.math3.stat.correlation.Covariance"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.util.Pair"/>
        <class name="MultivariateNormalMixtureExpectationMaximization" line="37">
            <javadoc line="37">
                Expectation-Maximization&lt;/a&gt; algorithm for fitting the parameters of
                  multivariate normal mixture model distributions.
                  This implementation is pure original code based on &lt;a
                  href=&quot;https://www.ee.washington.edu/techsite/papers/documents/UWEETR-2010-0002.pdf&quot;&gt;
                  EM Demystified: An Expectation-Maximization Tutorial&lt;/a&gt; by Yihua Chen and Maya R. Gupta,
                  Department of Electrical Engineering, University of Washington, Seattle, WA 98195.
                  It was verified using external tools like &lt;a
                  href=&quot;http://cran.r-project.org/web/packages/mixtools/index.html&quot;&gt;CRAN Mixtools&lt;/a&gt;
                  (see the JUnit test cases) but it is &lt;strong&gt;not&lt;/strong&gt; based on Mixtools code at all.
                  The discussion of the origin of this class can be seen in the comments of the &lt;a
                  href=&quot;https://issues.apache.org/jira/browse/MATH-817&quot;&gt;MATH-817&lt;/a&gt; JIRA issue.                
                <@version>
                    n $Id: MultivariateNormalMixtureExpectationMaximization.java 1462508 2013-03-29 15:50:47Z luc $                    
                </@version>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <declaration name="DEFAULT_MAX_ITERATIONS" type="int" line="54"/>
            <javadoc line="54">
                Default maximum number of iterations allowed per fitting process.                
            </javadoc>
            <declaration name="DEFAULT_THRESHOLD" type="double" line="58"/>
            <javadoc line="58">
                Default convergence threshold for fitting.                
            </javadoc>
            <declaration name="data" type="double[][]" line="62"/>
            <javadoc line="62">
                The data to fit.                
            </javadoc>
            <declaration name="fittedModel" type="MixtureMultivariateNormalDistribution" line="66"/>
            <javadoc line="66">
                The model fit against the data.                
            </javadoc>
            <declaration name="logLikelihood" type="double" line="70"/>
            <javadoc line="70">
                The log likelihood of the data given the fitted model.                
            </javadoc>
            <javadoc line="75">
                Creates an object to fit a multivariate normal mixture model to data.                
                <@param>
                    m data Data to use in fitting procedure                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if data has no rows                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if rows of data have different numbers
                      of columns                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if the number of columns in the data is
                      less than 2                    
                </@throws>
            </javadoc>
            <method name="MultivariateNormalMixtureExpectationMaximization" type="constructor" line="88">
                <params>
                    <param name="data" type="double[][]"/>
                </params>
                <scope line="89"/>
                <scope line="95">
                    <scope line="96"/>
                    <scope line="101"/>
                </scope>
            </method>
            <javadoc line="109">
                Fit a mixture model to the data supplied to the constructor.
                  The quality of the fit depends on the concavity of the data provided to
                  the constructor and the initial mixture provided to this function. If the
                  data has many local optima, multiple runs of the fitting function with
                  different initial mixtures may be required to find the optimal solution.
                  If a SingularMatrixException is encountered, it is possible that another
                  initialization would work.                
                <@param>
                    m initialMixture Model containing initial values of weights and
                      multivariate normals                    
                </@param>
                <@param>
                    m maxIterations Maximum iterations allowed for fit                    
                </@param>
                <@param>
                    m threshold Convergence threshold computed as difference in
                      logLikelihoods between successive iterations                    
                </@param>
                <@throws>
                    s SingularMatrixException if any component's covariance matrix is
                      singular during fitting                    
                </@throws>
                <@throws>
                    s NotStrictlyPositiveException if numComponents is less than one
                      or threshold is less than Double.MIN_VALUE                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if initialMixture mean vector and data
                      number of columns are not equal                    
                </@throws>
            </javadoc>
            <method name="fit" type="void" line="136">
                <params>
                    <param name="initialMixture" type="MixtureMultivariateNormalDistribution"/>
                    <param name="maxIterations" type="int"/>
                    <param name="threshold" type="double"/>
                </params>
                <comment line="137">
                    Number of data columns. Jagged data already rejected in constructor,                    
                </comment>
                <comment line="137">
                    so we can assume the lengths of each row are equal.                    
                </comment>
                <comment line="137">
                    Initialize model to fit to initial mixture.                    
                </comment>
                <scope line="137"/>
                <scope line="141"/>
                <declaration name="n" type="int" line="145"/>
                <declaration name="numCols" type="int" line="149"/>
                <declaration name="k" type="int" line="150"/>
                <declaration name="numMeanColumns" type="int" line="152"/>
                <scope line="155"/>
                <declaration name="numIterations" type="int" line="159"/>
                <declaration name="previousLogLikelihood" type="double" line="160"/>
                <scope line="168">
                    <declaration name="sumLogLikelihood" type="double" line="170"/>
                    <declaration name="components" type="List&lt;Pair&lt;Double,MultivariateNormalDistribution&gt;&gt;" line="173"/>
                    <declaration name="weights" type="double[]" line="177"/>
                    <declaration name="mvns" type="MultivariateNormalDistribution[]" line="179"/>
                    <scope line="181"/>
                    <declaration name="gamma" type="double[][]" line="190"/>
                    <declaration name="gammaSums" type="double[]" line="193"/>
                    <declaration name="gammaDataProdSums" type="double[][]" line="196"/>
                    <scope line="198">
                        <declaration name="rowDensity" type="double" line="199"/>
                        <scope line="202">
                            <scope line="206"/>
                        </scope>
                    </scope>
                    <declaration name="newWeights" type="double[]" line="216"/>
                    <declaration name="newMeans" type="double[][]" line="217"/>
                    <scope line="219">
                        <scope line="221"/>
                    </scope>
                    <declaration name="newCovMats" type="RealMatrix[]" line="227"/>
                    <scope line="228"/>
                    <scope line="231">
                        <scope line="232">
                            <declaration name="vec" type="RealMatrix" line="233"/>
                            <declaration name="dataCov" type="RealMatrix" line="235"/>
                        </scope>
                    </scope>
                    <declaration name="newCovMatArrays" type="double[][][]" line="242"/>
                    <scope line="243"/>
                </scope>
                <scope line="254"/>
            </method>
            <javadoc line="260">
                Fit a mixture model to the data supplied to the constructor.
                  The quality of the fit depends on the concavity of the data provided to
                  the constructor and the initial mixture provided to this function. If the
                  data has many local optima, multiple runs of the fitting function with
                  different initial mixtures may be required to find the optimal solution.
                  If a SingularMatrixException is encountered, it is possible that another
                  initialization would work.                
                <@param>
                    m initialMixture Model containing initial values of weights and
                      multivariate normals                    
                </@param>
                <@throws>
                    s SingularMatrixException if any component's covariance matrix is
                      singular during fitting                    
                </@throws>
                <@throws>
                    s NotStrictlyPositiveException if numComponents is less than one or
                      threshold is less than Double.MIN_VALUE                    
                </@throws>
            </javadoc>
            <method name="fit" type="void" line="279">
                <params>
                    <param name="initialMixture" type="MixtureMultivariateNormalDistribution"/>
                </params>
            </method>
            <javadoc line="283">
                Helper method to create a multivariate normal mixture model which can be
                  used to initialize {@link #fit(MixtureMultivariateNormalDistribution)}.
                  This method uses the data supplied to the constructor to try to determine
                  a good mixture model at which to start the fit, but it is not guaranteed
                  to supply a model which will find the optimal solution or even converge.                
                <@param>
                    m data Data to estimate distribution                    
                </@param>
                <@param>
                    m numComponents Number of components for estimated mixture                    
                </@param>
                <@return>
                    n Multivariate normal mixture model estimated from the data                    
                </@return>
                <@throws>
                    s NumberIsTooLargeException if {@code numComponents} is greater
                      than the number of data rows.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if {@code numComponents < 2}.                    
                </@throws>
                <@throws>
                    s NotStrictlyPositiveException if data has less than 2 rows                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if rows of data have different numbers
                      of columns                    
                </@throws>
            </javadoc>
            <method name="estimate" type="MixtureMultivariateNormalDistribution" line="304">
                <params>
                    <param name="data" type="double[][]"/>
                    <param name="numComponents" type="int"/>
                </params>
                <comment line="305">
                    sort the data                    
                </comment>
                <comment line="305">
                    uniform weight for each bin                    
                </comment>
                <comment line="305">
                    components of mixture model to be created                    
                </comment>
                <comment line="305">
                    create a component based on data in each bin                    
                </comment>
                <scope line="305"/>
                <scope line="308"/>
                <scope line="311"/>
                <declaration name="numRows" type="int" line="315"/>
                <declaration name="numCols" type="int" line="316"/>
                <declaration name="sortedData" type="DataRow[]" line="319"/>
                <scope line="320"/>
                <declaration name="weight" type="double" line="326"/>
                <declaration name="components" type="List&lt;Pair&lt;Double,MultivariateNormalDistribution&gt;&gt;" line="329"/>
                <scope line="333">
                    <declaration name="minIndex" type="int" line="335"/>
                    <declaration name="maxIndex" type="int" line="338"/>
                    <declaration name="numBinRows" type="int" line="341"/>
                    <declaration name="binData" type="double[][]" line="344"/>
                    <declaration name="columnMeans" type="double[]" line="347"/>
                    <scope line="350">
                        <scope line="351">
                            <declaration name="val" type="double" line="352"/>
                        </scope>
                    </scope>
                    <declaration name="covMat" type="double[][]" line="361"/>
                    <declaration name="mvn" type="MultivariateNormalDistribution" line="363"/>
                </scope>
            </method>
            <javadoc line="372">
                Gets the log likelihood of the data under the fitted model.                
                <@return>
                    n Log likelihood of data or zero of no data has been fit                    
                </@return>
            </javadoc>
            <method name="getLogLikelihood" type="double" line="377"/>
            <javadoc line="381">
                Gets the fitted model.                
                <@return>
                    n fitted model or {@code null} if no fit has been performed yet.                    
                </@return>
            </javadoc>
            <method name="getFittedModel" type="MixtureMultivariateNormalDistribution" line="386"/>
            <class name="DataRow" line="390">
                <implements interface="Comparable">
                    <type_params>
                        <type_param name="DataRow"/>
                    </type_params>
                </implements>
                <javadoc line="390">
                    Class used for sorting user-supplied data.                    
                </javadoc>
                <declaration name="row" type="double[]" line="394"/>
                <javadoc line="394">
                    One data row.                    
                </javadoc>
                <declaration name="mean" type="Double" line="396"/>
                <javadoc line="396">
                    Mean of the data row.                    
                </javadoc>
                <javadoc line="399">
                    Create a data row.                    
                    <@param>
                        m data Data to use for the row                        
                    </@param>
                </javadoc>
                <method name="DataRow" type="constructor" line="403">
                    <params>
                        <param name="data" type="double[]"/>
                    </params>
                    <comment line="404">
                        Store reference.                        
                    </comment>
                    <comment line="404">
                        Compute mean.                        
                    </comment>
                    <scope line="408"/>
                </method>
                <javadoc line="414">
                    Compare two data rows.                    
                    <@param>
                        m other The other row                        
                    </@param>
                    <@return>
                        n int for sorting                        
                    </@return>
                </javadoc>
                <method name="compareTo" type="int" line="419">
                    <params>
                        <param name="other" type="DataRow"/>
                    </params>
                </method>
                <javadoc line="423">
                    {@inheritDoc}                    
                </javadoc>
                <method name="equals" type="boolean" line="425">
                    <params>
                        <param name="other" type="Object"/>
                    </params>
                    <scope line="427"/>
                    <scope line="431"/>
                </method>
                <javadoc line="439">
                    {@inheritDoc}                    
                </javadoc>
                <method name="hashCode" type="int" line="441"/>
                <javadoc line="444">
                    Get a data row.                    
                    <@return>
                        n data row array                        
                    </@return>
                </javadoc>
                <method name="getRow" type="double[]" line="448"/>
            </class>
        </class>
    </source>