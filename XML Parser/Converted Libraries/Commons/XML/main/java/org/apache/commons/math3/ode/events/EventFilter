<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.events">
        <import package="java.util.Arrays"/>
        <class name="EventFilter" line="22">
            <implements interface="EventHandler"/>
            <javadoc line="22">
                Wrapper used to detect only increasing or decreasing events.
                  &lt;p&gt;General {@link EventHandler events} are defined implicitely
                  by a {@link EventHandler#g(double,double[]) g function} crossing
                  zero. This function needs to be continuous in the event neighborhood,
                  and its sign must remain consistent between events. This implies that
                  during an ODE integration, events triggered are alternately events
                  for which the function increases from negative to positive values,
                  and events for which the function decreases from positive to
                  negative values.
                  &lt;/p&gt;
                  &lt;p&gt;Sometimes, users are only interested in one type of event (say
                  increasing events for example) and not in the other type. In these
                  cases, looking precisely for all events location and triggering
                  events that will later be ignored is a waste of computing time.&lt;/p&gt;
                  &lt;p&gt;Users can wrap a regular {@link EventHandler event handler} in
                  an instance of this class and provide this wrapping instance to
                  the {@link org.apache.commons.math3.ode.FirstOrderIntegrator ODE solver}in order to avoid wasting time looking for uninteresting events.
                  The wrapper will intercept the calls to the {@link EventHandler#g(double,double[]) g function} and to the {@link EventHandler#eventOccurred(double,double[],boolean)eventOccurred} method in order to ignore uninteresting events. The
                  wrapped regular {@link EventHandler event handler} will the see only
                  the interesting events, i.e. either only {@code increasing} events or{@code decreasing} events. the number of calls to the {@link EventHandler#g(double,double[]) g function} will also be reduced.&lt;/p&gt;                
                <@version>
                    n $Id: EventFilter.java 1458491 2013-03-19 20:13:11Z luc $                    
                </@version>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <declaration name="HISTORY_SIZE" type="int" line="58"/>
            <javadoc line="58">
                Number of past transformers updates stored.                
            </javadoc>
            <declaration name="rawHandler" type="EventHandler" line="61"/>
            <javadoc line="61">
                Wrapped event handler.                
            </javadoc>
            <declaration name="filter" type="FilterType" line="64"/>
            <javadoc line="64">
                Filter to use.                
            </javadoc>
            <declaration name="transformers" type="Transformer[]" line="67"/>
            <javadoc line="67">
                Transformers of the g function.                
            </javadoc>
            <declaration name="updates" type="double[]" line="70"/>
            <javadoc line="70">
                Update time of the transformers.                
            </javadoc>
            <declaration name="forward" type="boolean" line="73"/>
            <javadoc line="73">
                Indicator for forward integration.                
            </javadoc>
            <declaration name="extremeT" type="double" line="76"/>
            <javadoc line="76">
                Extreme time encountered so far.                
            </javadoc>
            <javadoc line="79">
                Wrap an {@link EventHandler event handler}.                
                <@param>
                    m rawHandler event handler to wrap                    
                </@param>
                <@param>
                    m filter filter to use                    
                </@param>
            </javadoc>
            <method name="EventFilter" type="constructor" line="83">
                <params>
                    <param name="rawHandler" type="EventHandler"/>
                    <param name="filter" type="FilterType"/>
                </params>
            </method>
            <javadoc line="90">
                {@inheritDoc}                
            </javadoc>
            <method name="init" type="void" line="91">
                <params>
                    <param name="t0" type="double"/>
                    <param name="y0" type="double[]"/>
                    <param name="t" type="double"/>
                </params>
                <comment line="92">
                    delegate to raw handler                    
                </comment>
                <comment line="92">
                    initialize events triggering logic                    
                </comment>
            </method>
            <javadoc line="104">
                {@inheritDoc}                
            </javadoc>
            <method name="g" type="double" line="105">
                <params>
                    <param name="t" type="double"/>
                    <param name="y" type="double[]"/>
                </params>
                <comment line="106">
                    search which transformer should be applied to g                    
                </comment>
                <declaration name="rawG" type="double" line="107"/>
                <scope line="110">
                    <declaration name="last" type="int" line="111"/>
                    <scope line="112">
                        <declaration name="previous" type="Transformer" line="116"/>
                        <declaration name="next" type="Transformer" line="117"/>
                        <scope line="118"/>
                    </scope>
                    <scope line="136">
                        <scope line="140">
                            <scope line="141"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="150">
                    <scope line="151">
                        <declaration name="previous" type="Transformer" line="155"/>
                        <declaration name="next" type="Transformer" line="156"/>
                        <scope line="157"/>
                    </scope>
                    <scope line="175">
                        <scope line="179">
                            <scope line="180"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="193">
                {@inheritDoc}                
            </javadoc>
            <method name="eventOccurred" type="Action" line="194">
                <params>
                    <param name="t" type="double"/>
                    <param name="y" type="double[]"/>
                    <param name="increasing" type="boolean"/>
                </params>
                <comment line="195">
                    delegate to raw handler, fixing increasing status on the fly                    
                </comment>
            </method>
            <javadoc line="199">
                {@inheritDoc}                
            </javadoc>
            <method name="resetState" type="void" line="200">
                <params>
                    <param name="t" type="double"/>
                    <param name="y" type="double[]"/>
                </params>
                <comment line="201">
                    delegate to raw handler                    
                </comment>
            </method>
        </class>
    </source>