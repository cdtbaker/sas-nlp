<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv">
        <import package="java.util.Arrays"/>
        <import package="java.util.Comparator"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.ZeroException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.optim.OptimizationData"/>
        <class name="AbstractSimplex" line="34">
            <implements interface="OptimizationData"/>
            <javadoc line="34">
                This class implements the simplex concept.
                  It is intended to be used in conjunction with {@link SimplexOptimizer}.
                  &lt;br/&gt;
                  The initial configuration of the simplex is set by the constructors{@link #AbstractSimplex(double[])} or {@link #AbstractSimplex(double[][])}.
                  The other {@link #AbstractSimplex(int) constructor} will set all steps
                  to 1, thus building a default configuration from a unit hypercube.
                  &lt;br/&gt;
                  Users &lt;em&gt;must&lt;/em&gt; call the {@link #build(double[]) build} method in order
                  to create the data structure that will be acted on by the other methods of
                  this class.                
                <@see>
                    e SimplexOptimizer                    
                </@see>
                <@version>
                    n $Id: AbstractSimplex.java 1435539 2013-01-19 13:27:24Z tn $                    
                </@version>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="simplex" type="PointValuePair[]" line="52"/>
            <javadoc line="52">
                Simplex.                
            </javadoc>
            <declaration name="startConfiguration" type="double[][]" line="54"/>
            <javadoc line="54">
                Start simplex configuration.                
            </javadoc>
            <declaration name="dimension" type="int" line="56"/>
            <javadoc line="56">
                Simplex dimension (must be equal to {@code simplex.length - 1}).                
            </javadoc>
            <javadoc line="59">
                Build a unit hypercube simplex.                
                <@param>
                    m n Dimension of the simplex.                    
                </@param>
            </javadoc>
            <method name="AbstractSimplex" type="constructor" line="64">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="68">
                Build a hypercube simplex with the given side length.                
                <@param>
                    m n Dimension of the simplex.                    
                </@param>
                <@param>
                    m sideLength Length of the sides of the hypercube.                    
                </@param>
            </javadoc>
            <method name="AbstractSimplex" type="constructor" line="75">
                <params>
                    <param name="n" type="int"/>
                    <param name="sideLength" type="double"/>
                </params>
            </method>
            <javadoc line="79">
                The start configuration for simplex is built from a box parallel to
                  the canonical axes of the space. The simplex is the subset of vertices
                  of a box parallel to the canonical axes. It is built as the path followed
                  while traveling from one vertex of the box to the diagonally opposite
                  vertex moving only along the box edges. The first vertex of the box will
                  be located at the start point of the optimization.
                  As an example, in dimension 3 a simplex has 4 vertices. Setting the
                  steps to (1, 10, 2) and the start point to (1, 1, 1) would imply the
                  start simplex would be: { (1, 1, 1), (2, 1, 1), (2, 11, 1), (2, 11, 3) }.
                  The first vertex would be set to the start point at (1, 1, 1) and the
                  last vertex would be set to the diagonally opposite vertex at (2, 11, 3).                
                <@param>
                    m steps Steps along the canonical axes representing box edges. They
                      may be negative but not zero.                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code steps} is {@code null}.                    
                </@throws>
                <@throws>
                    s ZeroException if one of the steps is zero.                    
                </@throws>
            </javadoc>
            <method name="AbstractSimplex" type="constructor" line="97">
                <params>
                    <param name="steps" type="double[]"/>
                </params>
                <comment line="98">
                    Only the relative position of the n final vertices with respect                    
                </comment>
                <comment line="98">
                    to the first one are stored.                    
                </comment>
                <scope line="98"/>
                <scope line="101"/>
                <scope line="109">
                    <declaration name="vertexI" type="double[]" line="110"/>
                    <scope line="111">
                        <scope line="112"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="120">
                The real initial simplex will be set up by moving the reference
                  simplex such that its first point is located at the start point of the
                  optimization.                
                <@param>
                    m referenceSimplex Reference simplex.                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if the reference simplex does not
                      contain at least one point.                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if there is a dimension mismatch
                      in the reference simplex.                    
                </@throws>
                <@throws>
                    s IllegalArgumentException if one of its vertices is duplicated.                    
                </@throws>
            </javadoc>
            <method name="AbstractSimplex" type="constructor" line="132">
                <params>
                    <param name="referenceSimplex" type="double[][]"/>
                </params>
                <comment line="133">
                    Only the relative position of the n final vertices with respect                    
                </comment>
                <comment line="133">
                    to the first one are stored.                    
                </comment>
                <comment line="133">
                    Loop over vertices.                    
                </comment>
                <scope line="133"/>
                <declaration name="ref0" type="double[]" line="142"/>
                <scope line="145">
                    <declaration name="refI" type="double[]" line="146"/>
                    <scope line="149"/>
                    <scope line="152">
                        <declaration name="refJ" type="double[]" line="153"/>
                        <declaration name="allEquals" type="boolean" line="154"/>
                        <scope line="155">
                            <scope line="156"/>
                        </scope>
                        <scope line="161"/>
                    </scope>
                    <scope line="168">
                        <declaration name="confI" type="double[]" line="169"/>
                        <scope line="170"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="177">
                Get simplex dimension.                
                <@return>
                    n the dimension of the simplex.                    
                </@return>
            </javadoc>
            <method name="getDimension" type="int" line="182"/>
            <javadoc line="186">
                Get simplex size.
                  After calling the {@link #build(double[]) build} method, this method will
                  will be equivalent to {@code getDimension() + 1}.                
                <@return>
                    n the size of the simplex.                    
                </@return>
            </javadoc>
            <method name="getSize" type="int" line="193"/>
            <method name="iterate" type="void" line="197"/>
            <javadoc line="197">
                Compute the next simplex of the algorithm.                
                <@param>
                    m evaluationFunction Evaluation function.                    
                </@param>
                <@param>
                    m comparator Comparator to use to sort simplex vertices from best
                      to worst.                    
                </@param>
                <@throws>
                    s org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the algorithm fails to converge.                    
                </@throws>
            </javadoc>
            <javadoc line="209">
                Build an initial simplex.                
                <@param>
                    m startPoint First point of the simplex.                    
                </@param>
                <@throws>
                    s DimensionMismatchException if the start point does not match
                      simplex dimension.                    
                </@throws>
            </javadoc>
            <method name="build" type="void" line="216">
                <params>
                    <param name="startPoint" type="double[]"/>
                </params>
                <comment line="217">
                    Set first vertex.                    
                </comment>
                <comment line="217">
                    Set remaining vertices.                    
                </comment>
                <scope line="217"/>
                <scope line="226">
                    <declaration name="confI" type="double[]" line="227"/>
                    <declaration name="vertexI" type="double[]" line="228"/>
                    <scope line="229"/>
                </scope>
            </method>
            <javadoc line="236">
                Evaluate all the non-evaluated points of the simplex.                
                <@param>
                    m evaluationFunction Evaluation function.                    
                </@param>
                <@param>
                    m comparator Comparator to use to sort simplex vertices from best to worst.                    
                </@param>
                <@throws>
                    s org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximal number of evaluations is exceeded.                    
                </@throws>
            </javadoc>
            <method name="evaluate" type="void" line="245">
                <params>
                    <param name="evaluationFunction" type="MultivariateFunction"/>
                    <param name="comparator" type="Comparator<PointValuePair>"/>
                </params>
                <comment line="246">
                    Evaluate the objective function at all non-evaluated simplex points.                    
                </comment>
                <comment line="246">
                    Sort the simplex from best to worst.                    
                </comment>
                <scope line="247">
                    <declaration name="vertex" type="PointValuePair" line="248"/>
                    <declaration name="point" type="double[]" line="249"/>
                    <scope line="250"/>
                </scope>
            </method>
            <javadoc line="259">
                Replace the worst point of the simplex by a new point.                
                <@param>
                    m pointValuePair Point to insert.                    
                </@param>
                <@param>
                    m comparator Comparator to use for sorting the simplex vertices
                      from best to worst.                    
                </@param>
            </javadoc>
            <method name="replaceWorstPoint" type="void" line="267">
                <params>
                    <param name="pointValuePair" type="PointValuePair"/>
                    <param name="comparator" type="Comparator<PointValuePair>"/>
                </params>
                <scope line="268">
                    <scope line="269">
                        <declaration name="tmp" type="PointValuePair" line="270"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="278">
                Get the points of the simplex.                
                <@return>
                    n all the simplex points.                    
                </@return>
            </javadoc>
            <method name="getPoints" type="PointValuePair[]" line="283">
                <declaration name="copy" type="PointValuePair[]" line="284"/>
            </method>
            <javadoc line="289">
                Get the simplex point stored at the requested {@code index}.                
                <@param>
                    m index Location.                    
                </@param>
                <@return>
                    n the point at location {@code index}.                    
                </@return>
            </javadoc>
            <method name="getPoint" type="PointValuePair" line="295">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="297"/>
            </method>
            <javadoc line="303">
                Store a new point at location {@code index}.
                  Note that no deep-copy of {@code point} is performed.                
                <@param>
                    m index Location.                    
                </@param>
                <@param>
                    m point New value.                    
                </@param>
            </javadoc>
            <method name="setPoint" type="void" line="310">
                <params>
                    <param name="index" type="int"/>
                    <param name="point" type="PointValuePair"/>
                </params>
                <scope line="312"/>
            </method>
            <javadoc line="318">
                Replace all points.
                  Note that no deep-copy of {@code points} is performed.                
                <@param>
                    m points New Points.                    
                </@param>
            </javadoc>
            <method name="setPoints" type="void" line="324">
                <params>
                    <param name="points" type="PointValuePair[]"/>
                </params>
                <scope line="325"/>
            </method>
            <javadoc line="331">
                Create steps for a unit hypercube.                
                <@param>
                    m n Dimension of the hypercube.                    
                </@param>
                <@param>
                    m sideLength Length of the sides of the hypercube.                    
                </@param>
                <@return>
                    n the steps.                    
                </@return>
            </javadoc>
            <method name="createHypercubeSteps" type="double[]" line="339">
                <params>
                    <param name="n" type="int"/>
                    <param name="sideLength" type="double"/>
                </params>
                <declaration name="steps" type="double[]" line="340"/>
                <scope line="341"/>
            </method>
        </class>
    </source>