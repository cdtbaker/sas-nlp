<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.threed">
        <import package="java.text.FieldPosition"/>
        <import package="java.text.NumberFormat"/>
        <import package="java.text.ParsePosition"/>
        <import package="java.util.Locale"/>
        <import package="org.apache.commons.math3.exception.MathParseException"/>
        <import package="org.apache.commons.math3.geometry.Vector"/>
        <import package="org.apache.commons.math3.geometry.VectorFormat"/>
        <import package="org.apache.commons.math3.util.CompositeFormat"/>
        <class name="Vector3DFormat" line="30">
            <extends class="VectorFormat">
                <type_params>
                    <type_param name="Euclidean3D"/>
                </type_params>
            </extends>
            <javadoc line="30">
                Formats a 3D vector in components list format &quot;{x; y; z}&quot;.
                  &lt;p&gt;The prefix and suffix &quot;{&quot; and &quot;}&quot; and the separator &quot;; &quot; can be replaced by
                  any user-defined strings. The number format for components can be configured.&lt;/p&gt;
                  &lt;p&gt;White space is ignored at parse time, even if it is in the prefix, suffix
                  or separator specifications. So even if the default separator does include a space
                  character that is used at format time, both input string &quot;{1;1;1}&quot; and
                  &quot; { 1 ; 1 ; 1 } &quot; will be parsed without error and the same vector will be
                  returned. In the second case, however, the parse position after parsing will be
                  just after the closing curly brace, i.e. just before the trailing space.&lt;/p&gt;                
                <@version>
                    n $Id: Vector3DFormat.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <javadoc line="45">
                Create an instance with default settings.
                  &lt;p&gt;The instance uses the default prefix, suffix and separator:
                  &quot;{&quot;, &quot;}&quot;, and &quot;; &quot; and the default number format for components.&lt;/p&gt;                
            </javadoc>
            <method name="Vector3DFormat" type="constructor" line="50"/>
            <javadoc line="55">
                Create an instance with a custom number format for components.                
                <@param>
                    m format the custom format for components.                    
                </@param>
            </javadoc>
            <method name="Vector3DFormat" type="constructor" line="59">
                <params>
                    <param name="format" type="NumberFormat"/>
                </params>
            </method>
            <javadoc line="63">
                Create an instance with custom prefix, suffix and separator.                
                <@param>
                    m prefix prefix to use instead of the default "{"                    
                </@param>
                <@param>
                    m suffix suffix to use instead of the default "}"                    
                </@param>
                <@param>
                    m separator separator to use instead of the default "; "                    
                </@param>
            </javadoc>
            <method name="Vector3DFormat" type="constructor" line="70">
                <params>
                    <param name="prefix" type="String"/>
                    <param name="suffix" type="String"/>
                    <param name="separator" type="String"/>
                </params>
            </method>
            <javadoc line="74">
                Create an instance with custom prefix, suffix, separator and format
                  for components.                
                <@param>
                    m prefix prefix to use instead of the default "{"                    
                </@param>
                <@param>
                    m suffix suffix to use instead of the default "}"                    
                </@param>
                <@param>
                    m separator separator to use instead of the default "; "                    
                </@param>
                <@param>
                    m format the custom format for components.                    
                </@param>
            </javadoc>
            <method name="Vector3DFormat" type="constructor" line="83">
                <params>
                    <param name="prefix" type="String"/>
                    <param name="suffix" type="String"/>
                    <param name="separator" type="String"/>
                    <param name="format" type="NumberFormat"/>
                </params>
            </method>
            <javadoc line="87">
                Returns the default 3D vector format for the current locale.                
                <@return>
                    n the default 3D vector format.                    
                </@return>
            </javadoc>
            <method name="getInstance" type="Vector3DFormat" line="91"/>
            <javadoc line="95">
                Returns the default 3D vector format for the given locale.                
                <@param>
                    m locale the specific locale used by the format.                    
                </@param>
                <@return>
                    n the 3D vector format specific to the given locale.                    
                </@return>
            </javadoc>
            <method name="getInstance" type="Vector3DFormat" line="100">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="104">
                Formats a {@link Vector3D} object to produce a string.                
                <@param>
                    m vector the object to format.                    
                </@param>
                <@param>
                    m toAppendTo where the text is to be appended                    
                </@param>
                <@param>
                    m pos On input: an alignment field, if desired. On output: the
                      offsets of the alignment field                    
                </@param>
                <@return>
                    n the value passed in as toAppendTo.                    
                </@return>
            </javadoc>
            <method name="format" type="StringBuffer" line="114">
                <params>
                    <param name="vector" type="Vector<Euclidean3D>"/>
                    <param name="toAppendTo" type="StringBuffer"/>
                    <param name="pos" type="FieldPosition"/>
                </params>
                <declaration name="v3" type="Vector3D" line="115"/>
            </method>
            <javadoc line="119">
                Parses a string to produce a {@link Vector3D} object.                
                <@param>
                    m source the string to parse                    
                </@param>
                <@return>
                    n the parsed {@link Vector3D} object.                    
                </@return>
                <@throws>
                    s MathParseException if the beginning of the specified string
                      cannot be parsed.                    
                </@throws>
            </javadoc>
            <method name="parse" type="Vector3D" line="127">
                <params>
                    <param name="source" type="String"/>
                </params>
                <declaration name="parsePosition" type="ParsePosition" line="128"/>
                <declaration name="result" type="Vector3D" line="129"/>
                <scope line="130"/>
            </method>
            <javadoc line="138">
                Parses a string to produce a {@link Vector3D} object.                
                <@param>
                    m source the string to parse                    
                </@param>
                <@param>
                    m pos input/ouput parsing parameter.                    
                </@param>
                <@return>
                    n the parsed {@link Vector3D} object.                    
                </@return>
            </javadoc>
            <method name="parse" type="Vector3D" line="145">
                <params>
                    <param name="source" type="String"/>
                    <param name="pos" type="ParsePosition"/>
                </params>
                <declaration name="coordinates" type="double[]" line="146"/>
                <scope line="147"/>
            </method>
        </class>
    </source>