<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode">
        <import package="java.lang.reflect.Array"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="JacobianMatrices" line="29">
            <javadoc line="29">
                This class defines a set of {@link SecondaryEquations secondary equations} to
                  compute the Jacobian matrices with respect to the initial state vector and, if
                  any, to some parameters of the primary ODE set.
                  &lt;p&gt;
                  It is intended to be packed into an {@link ExpandableStatefulODE}in conjunction with a primary set of ODE, which may be:
                  &lt;ul&gt;
                  &lt;li&gt;a {@link FirstOrderDifferentialEquations}&lt;/li&gt;
                  &lt;li&gt;a {@link MainStateJacobianProvider}&lt;/li&gt;
                  &lt;/ul&gt;
                  In order to compute Jacobian matrices with respect to some parameters of the
                  primary ODE set, the following parameter Jacobian providers may be set:
                  &lt;ul&gt;
                  &lt;li&gt;a {@link ParameterJacobianProvider}&lt;/li&gt;
                  &lt;li&gt;a {@link ParameterizedODE}&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <@see>
                    e ExpandableStatefulODE                    
                </@see>
                <@see>
                    e FirstOrderDifferentialEquations                    
                </@see>
                <@see>
                    e MainStateJacobianProvider                    
                </@see>
                <@see>
                    e ParameterJacobianProvider                    
                </@see>
                <@see>
                    e ParameterizedODE                    
                </@see>
                <@version>
                    n $Id: JacobianMatrices.java 1422447 2012-12-16 01:38:40Z psteitz $                    
                </@version>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="efode" type="ExpandableStatefulODE" line="59"/>
            <javadoc line="59">
                Expandable first order differential equation.                
            </javadoc>
            <declaration name="index" type="int" line="62"/>
            <javadoc line="62">
                Index of the instance in the expandable set.                
            </javadoc>
            <declaration name="jode" type="MainStateJacobianProvider" line="65"/>
            <javadoc line="65">
                FODE with exact primary Jacobian computation skill.                
            </javadoc>
            <declaration name="pode" type="ParameterizedODE" line="68"/>
            <javadoc line="68">
                FODE without exact parameter Jacobian computation skill.                
            </javadoc>
            <declaration name="stateDim" type="int" line="71"/>
            <javadoc line="71">
                Main state vector dimension.                
            </javadoc>
            <declaration name="selectedParameters" type="ParameterConfiguration[]" line="74"/>
            <javadoc line="74">
                Selected parameters for parameter Jacobian computation.                
            </javadoc>
            <declaration name="jacobianProviders" type="List&lt;ParameterJacobianProvider&gt;" line="77"/>
            <javadoc line="77">
                FODE with exact parameter Jacobian computation skill.                
            </javadoc>
            <declaration name="paramDim" type="int" line="80"/>
            <javadoc line="80">
                Parameters dimension.                
            </javadoc>
            <declaration name="dirtyParameter" type="boolean" line="83"/>
            <javadoc line="83">
                Boolean for selected parameters consistency.                
            </javadoc>
            <declaration name="matricesData" type="double[]" line="86"/>
            <javadoc line="86">
                State and parameters Jacobian matrices in a row.                
            </javadoc>
            <javadoc line="89">
                Simple constructor for a secondary equations set computing Jacobian matrices.
                  &lt;p&gt;
                  Parameters must belong to the supported ones given by {@link Parameterizable#getParametersNames()}, so the primary set of differential
                  equations must be {@link Parameterizable}.
                  &lt;/p&gt;
                  &lt;p&gt;Note that each selection clears the previous selected parameters.&lt;/p&gt;                
                <@param>
                    m fode the primary first order differential equations set to extend                    
                </@param>
                <@param>
                    m hY step used for finite difference computation with respect to state vector                    
                </@param>
                <@param>
                    m parameters parameters to consider for Jacobian matrices processing
                      (may be null if parameters Jacobians is not desired)                    
                </@param>
                <@exception>
                    n DimensionMismatchException if there is a dimension mismatch between
                      the steps array {@code hY} and the equation dimension                    
                </@exception>
            </javadoc>
            <method name="JacobianMatrices" type="constructor" line="106">
                <params>
                    <param name="fode" type="FirstOrderDifferentialEquations"/>
                    <param name="hY" type="double[]"/>
                    <param name="parameters" type="String"/>
                </params>
            </method>
            <javadoc line="110">
                Simple constructor for a secondary equations set computing Jacobian matrices.
                  &lt;p&gt;
                  Parameters must belong to the supported ones given by {@link Parameterizable#getParametersNames()}, so the primary set of differential
                  equations must be {@link Parameterizable}.
                  &lt;/p&gt;
                  &lt;p&gt;Note that each selection clears the previous selected parameters.&lt;/p&gt;                
                <@param>
                    m jode the primary first order differential equations set to extend                    
                </@param>
                <@param>
                    m parameters parameters to consider for Jacobian matrices processing
                      (may be null if parameters Jacobians is not desired)                    
                </@param>
            </javadoc>
            <method name="JacobianMatrices" type="constructor" line="123">
                <params>
                    <param name="jode" type="MainStateJacobianProvider"/>
                    <param name="parameters" type="String"/>
                </params>
                <comment line="124">
                    set the default initial state Jacobian to the identity                    
                </comment>
                <comment line="124">
                    and the default initial parameters Jacobian to the null matrix                    
                </comment>
                <scope line="133"/>
                <scope line="136">
                    <scope line="138"/>
                </scope>
                <scope line="150"/>
            </method>
            <javadoc line="156">
                Register the variational equations for the Jacobians matrices to the expandable set.                
                <@param>
                    m expandable expandable set into which variational equations should be registered                    
                </@param>
                <@throws>
                    s DimensionMismatchException if the dimension of the partial state does not
                      match the selected equations set dimension                    
                </@throws>
                <@exception>
                    n MismatchedEquations if the primary set of the expandable set does
                      not match the one used to build the instance                    
                </@exception>
                <@see>
                    e ExpandableStatefulODE#addSecondaryEquations(SecondaryEquations)                    
                </@see>
            </javadoc>
            <method name="registerVariationalEquations" type="void" line="165">
                <params>
                    <param name="expandable" type="ExpandableStatefulODE"/>
                </params>
                <comment line="166">
                    safety checks                    
                </comment>
                <declaration name="ode" type="FirstOrderDifferentialEquations" line="168"/>
                <scope line="171"/>
            </method>
            <javadoc line="181">
                Add a parameter Jacobian provider.                
                <@param>
                    m provider the parameter Jacobian provider to compute exactly the parameter Jacobian matrix                    
                </@param>
            </javadoc>
            <method name="addParameterJacobianProvider" type="void" line="184">
                <params>
                    <param name="provider" type="ParameterJacobianProvider"/>
                </params>
            </method>
            <javadoc line="188">
                Set a parameter Jacobian provider.                
                <@param>
                    m parameterizedOde the parameterized ODE to compute the parameter Jacobian matrix using finite differences                    
                </@param>
            </javadoc>
            <method name="setParameterizedODE" type="void" line="191">
                <params>
                    <param name="parameterizedOde" type="ParameterizedODE"/>
                </params>
            </method>
            <javadoc line="196">
                Set the step associated to a parameter in order to compute by finite
                  difference the Jacobian matrix.
                  &lt;p&gt;
                  Needed if and only if the primary ODE set is a {@link ParameterizedODE}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Given a non zero parameter value pval for the parameter, a reasonable value
                  for such a step is {@code pval  FastMath.sqrt(Precision.EPSILON)}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  A zero value for such a step doesn&apos;t enable to compute the parameter Jacobian matrix.
                  &lt;/p&gt;                
                <@param>
                    m parameter parameter to consider for Jacobian processing                    
                </@param>
                <@param>
                    m hP step for Jacobian finite difference computation w.r.t. the specified parameter                    
                </@param>
                <@see>
                    e ParameterizedODE                    
                </@see>
                <@exception>
                    n UnknownParameterException if the parameter is not supported                    
                </@exception>
            </javadoc>
            <method name="setParameterStep" type="void" line="214">
                <params>
                    <param name="parameter" type="String"/>
                    <param name="hP" type="double"/>
                </params>
                <scope line="216">
                    <scope line="217"/>
                </scope>
            </method>
            <javadoc line="228">
                Set the initial value of the Jacobian matrix with respect to state.
                  &lt;p&gt;
                  If this method is not called, the initial value of the Jacobian
                  matrix with respect to state is set to identity.
                  &lt;/p&gt;                
                <@param>
                    m dYdY0 initial Jacobian matrix w.r.t. state                    
                </@param>
                <@exception>
                    n DimensionMismatchException if matrix dimensions are incorrect                    
                </@exception>
            </javadoc>
            <method name="setInitialMainStateJacobian" type="void" line="237">
                <params>
                    <param name="dYdY0" type="double[][]"/>
                </params>
                <comment line="238">
                    Check dimensions                    
                </comment>
                <comment line="238">
                    store the matrix in row major order as a single dimension array                    
                </comment>
                <declaration name="i" type="int" line="244"/>
                <scope line="245"/>
                <scope line="250"/>
            </method>
            <javadoc line="256">
                Set the initial value of a column of the Jacobian matrix with respect to one parameter.
                  &lt;p&gt;
                  If this method is not called for some parameter, the initial value of
                  the column of the Jacobian matrix with respect to this parameter is set to zero.
                  &lt;/p&gt;                
                <@param>
                    m pName parameter name                    
                </@param>
                <@param>
                    m dYdP initial Jacobian column vector with respect to the parameter                    
                </@param>
                <@exception>
                    n UnknownParameterException if a parameter is not supported                    
                </@exception>
                <@throws>
                    s DimensionMismatchException if the column vector does not match state dimension                    
                </@throws>
            </javadoc>
            <method name="setInitialParameterJacobian" type="void" line="267">
                <params>
                    <param name="pName" type="String"/>
                    <param name="dYdP" type="double[]"/>
                </params>
                <comment line="268">
                    Check dimensions                    
                </comment>
                <comment line="268">
                    store the column in a global single dimension array                    
                </comment>
                <declaration name="i" type="int" line="273"/>
                <scope line="274">
                    <scope line="275">
                        <scope line="277"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="289">
                Get the current value of the Jacobian matrix with respect to state.                
                <@param>
                    m dYdY0 current Jacobian matrix with respect to state.                    
                </@param>
            </javadoc>
            <method name="getCurrentMainSetJacobian" type="void" line="292">
                <params>
                    <param name="dYdY0" type="double[][]"/>
                </params>
                <comment line="293">
                    get current state for this set of equations from the expandable fode                    
                </comment>
                <declaration name="p" type="double[]" line="295"/>
                <declaration name="j" type="int" line="297"/>
                <scope line="298"/>
            </method>
            <javadoc line="305">
                Get the current value of the Jacobian matrix with respect to one parameter.                
                <@param>
                    m pName name of the parameter for the computed Jacobian matrix                    
                </@param>
                <@param>
                    m dYdP current Jacobian matrix with respect to the named parameter                    
                </@param>
            </javadoc>
            <method name="getCurrentParameterJacobian" type="void" line="309">
                <params>
                    <param name="pName" type="String"/>
                    <param name="dYdP" type="double[]"/>
                </params>
                <comment line="310">
                    get current state for this set of equations from the expandable fode                    
                </comment>
                <declaration name="p" type="double[]" line="312"/>
                <declaration name="i" type="int" line="314"/>
                <scope line="315">
                    <scope line="316"/>
                </scope>
            </method>
            <javadoc line="325">
                Check array dimensions.                
                <@param>
                    m expected expected dimension                    
                </@param>
                <@param>
                    m array (may be null if expected is 0)                    
                </@param>
                <@throws>
                    s DimensionMismatchException if the array dimension does not match the expected one                    
                </@throws>
            </javadoc>
            <method name="checkDimension" type="void" line="331">
                <params>
                    <param name="expected" type="int"/>
                    <param name="array" type="Object"/>
                </params>
                <declaration name="arrayDimension" type="int" line="332"/>
                <scope line="333"/>
            </method>
            <class name="JacobiansSecondaryEquations" line="338">
                <implements interface="SecondaryEquations"/>
                <javadoc line="338">
                    Local implementation of secondary equations.
                      &lt;p&gt;
                      This class is an inner class to ensure proper scheduling of calls
                      by forcing the use of {@link JacobianMatrices#registerVariationalEquations(ExpandableStatefulODE)}.
                      &lt;/p&gt;                    
                </javadoc>
                <javadoc line="346">
                    {@inheritDoc}                    
                </javadoc>
                <method name="getDimension" type="int" line="347"/>
                <javadoc line="351">
                    {@inheritDoc}                    
                </javadoc>
                <method name="computeDerivatives" type="void" line="354">
                    <params>
                        <param name="t" type="double"/>
                        <param name="y" type="double[]"/>
                        <param name="yDot" type="double[]"/>
                        <param name="z" type="double[]"/>
                        <param name="zDot" type="double[]"/>
                    </params>
                    <comment line="355">
                        Lazy initialization                        
                    </comment>
                    <comment line="355">
                        variational equations:                        
                    </comment>
                    <comment line="355">
                        from d[dy/dt]/dy0 and d[dy/dt]/dp to d[dy/dy0]/dt and d[dy/dp]/dt                        
                    </comment>
                    <comment line="355">
                        compute Jacobian matrix with respect to primary state                        
                    </comment>
                    <comment line="355">
                        Dispatch Jacobian matrix in the compound secondary state vector                        
                    </comment>
                    <scope line="357"/>
                    <declaration name="dFdY" type="double[][]" line="366"/>
                    <scope line="370">
                        <declaration name="dFdYi" type="double[]" line="371"/>
                        <scope line="372">
                            <declaration name="s" type="double" line="373"/>
                            <declaration name="startIndex" type="int" line="374"/>
                            <declaration name="zIndex" type="int" line="375"/>
                            <scope line="376"/>
                        </scope>
                    </scope>
                    <scope line="384">
                        <declaration name="dFdP" type="double[]" line="386"/>
                        <declaration name="startIndex" type="int" line="387"/>
                        <scope line="388">
                            <declaration name="found" type="boolean" line="389"/>
                            <scope line="390">
                                <declaration name="provider" type="ParameterJacobianProvider" line="391"/>
                                <scope line="392">
                                    <scope line="395">
                                        <declaration name="dFdYi" type="double[]" line="396"/>
                                        <declaration name="zIndex" type="int" line="397"/>
                                        <declaration name="s" type="double" line="398"/>
                                        <scope line="399"/>
                                    </scope>
                                </scope>
                            </scope>
                            <scope line="408"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="MainStateJacobianWrapper" line="418">
                <implements interface="MainStateJacobianProvider"/>
                <javadoc line="418">
                    Wrapper class to compute jacobian matrices by finite differences for ODE
                      which do not compute them by themselves.                    
                </javadoc>
                <declaration name="ode" type="FirstOrderDifferentialEquations" line="423"/>
                <javadoc line="423">
                    Raw ODE without jacobians computation skill to be wrapped into a MainStateJacobianProvider.                    
                </javadoc>
                <declaration name="hY" type="double[]" line="426"/>
                <javadoc line="426">
                    Steps for finite difference computation of the jacobian df/dy w.r.t. state.                    
                </javadoc>
                <javadoc line="429">
                    Wrap a {@link FirstOrderDifferentialEquations} into a {@link MainStateJacobianProvider}.                    
                    <@param>
                        m ode original ODE problem, without jacobians computation skill                        
                    </@param>
                    <@param>
                        m hY step sizes to compute the jacobian df/dy                        
                    </@param>
                    <@see>
                        e JacobianMatrices#setMainStateSteps(double[])                        
                    </@see>
                    <@exception>
                        n DimensionMismatchException if there is a dimension mismatch between
                          the steps array {@code hY} and the equation dimension                        
                    </@exception>
                </javadoc>
                <method name="MainStateJacobianWrapper" type="constructor" line="438">
                    <params>
                        <param name="ode" type="FirstOrderDifferentialEquations"/>
                        <param name="hY" type="double[]"/>
                    </params>
                    <scope line="441"/>
                </method>
                <javadoc line="446">
                    {@inheritDoc}                    
                </javadoc>
                <method name="getDimension" type="int" line="447"/>
                <javadoc line="451">
                    {@inheritDoc}                    
                </javadoc>
                <method name="computeDerivatives" type="void" line="453">
                    <params>
                        <param name="t" type="double"/>
                        <param name="y" type="double[]"/>
                        <param name="yDot" type="double[]"/>
                    </params>
                </method>
                <javadoc line="457">
                    {@inheritDoc}                    
                </javadoc>
                <method name="computeMainStateJacobian" type="void" line="459">
                    <params>
                        <param name="t" type="double"/>
                        <param name="y" type="double[]"/>
                        <param name="yDot" type="double[]"/>
                        <param name="dFdY" type="double[][]"/>
                    </params>
                    <declaration name="n" type="int" line="461"/>
                    <declaration name="tmpDot" type="double[]" line="462"/>
                    <scope line="464">
                        <declaration name="savedYj" type="double" line="465"/>
                        <scope line="468"/>
                    </scope>
                </method>
            </class>
            <class name="MismatchedEquations" line="477">
                <extends class="MathIllegalArgumentException"/>
                <javadoc line="477">
                    Special exception for equations mismatch.                    
                    <@since>
                        e 3.1                        
                    </@since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="483"/>
                <javadoc line="483">
                    Serializable UID.                    
                </javadoc>
                <javadoc line="486">
                    Simple constructor.                    
                </javadoc>
                <method name="MismatchedEquations" type="constructor" line="487"/>
            </class>
        </class>
    </source>