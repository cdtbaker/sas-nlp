<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.univariate">
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.optimization.AbstractConvergenceChecker"/>
        <class name="SimpleUnivariateValueChecker" extends="AbstractConvergenceChecker<UnivariatePointValuePair>" line="24">
            <javadoc line="24">
                Simple implementation of the{@link org.apache.commons.math3.optimization.ConvergenceChecker} interface
                 * that uses only objective function values.
                 * Convergence is considered to have been reached if either the relative
                 * difference between the objective function values is smaller than a
                 * threshold or if either the absolute difference between the objective
                 * function values is smaller than another threshold.
                 * &lt;br/&gt;
                 * The {@link #converged(int,UnivariatePointValuePair,UnivariatePointValuePair)converged} method will also return {@code true} if the number of iterations
                 * has been set (see {@link #SimpleUnivariateValueChecker(double,double,int)this constructor}).                
                <@version>
                    n $Id: SimpleUnivariateValueChecker.java 1462503 2013-03-29 15:48:27Z luc $                    
                </@version>
                <@deprecated>
                    d As of 3.1 (to be removed in 4.0).                    
                </@deprecated>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <declaration name="ITERATION_CHECK_DISABLED" type="int" line="46"/>
            <javadoc line="46">
                If {@link #maxIterationCount} is set to this value, the number of
                 * iterations will never cause{@link #converged(int,UnivariatePointValuePair,UnivariatePointValuePair)}to return {@code true}.                
            </javadoc>
            <declaration name="maxIterationCount" type="int" line="53"/>
            <javadoc line="53">
                Number of iterations after which the{@link #converged(int,UnivariatePointValuePair,UnivariatePointValuePair)}method will return true (unless the check is disabled).                
            </javadoc>
            <javadoc line="60">
                Build an instance with default thresholds.                
                <@deprecated>
                    d See {@link AbstractConvergenceChecker#AbstractConvergenceChecker()}                    
                </@deprecated>
            </javadoc>
            <method name="SimpleUnivariateValueChecker" type="constructor" line="65"/>
            <javadoc line="69">
                Build an instance with specified thresholds.
                 * In order to perform only relative checks, the absolute tolerance
                 * must be set to a negative value. In order to perform only absolute
                 * checks, the relative tolerance must be set to a negative value.                
                <@param>
                    m relativeThreshold relative tolerance threshold                    
                </@param>
                <@param>
                    m absoluteThreshold absolute tolerance threshold                    
                </@param>
            </javadoc>
            <method name="SimpleUnivariateValueChecker" type="constructor" line="79"/>
            <javadoc line="84">
                Builds an instance with specified thresholds.
                 * In order to perform only relative checks, the absolute tolerance
                 * must be set to a negative value. In order to perform only absolute
                 * checks, the relative tolerance must be set to a negative value.                
                <@param>
                    m relativeThreshold relative tolerance threshold                    
                </@param>
                <@param>
                    m absoluteThreshold absolute tolerance threshold                    
                </@param>
                <@param>
                    m maxIter Maximum iteration count.                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if {@code maxIter <= 0}.                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="SimpleUnivariateValueChecker" type="constructor" line="100">
                <scope line="103"/>
            </method>
            <javadoc line="109">
                Check if the optimization algorithm has converged considering the
                 * last two points.
                 * This method may be called several time from the same algorithm
                 * iteration with different points. This can be detected by checking the
                 * iteration number at each call if needed. Each time this method is
                 * called, the previous and current point correspond to points with the
                 * same role at each iteration, so they can be compared. As an example,
                 * simplex-based algorithms call this method for all points of the simplex,
                 * not only for the best or worst ones.                
                <@param>
                    m iteration Index of current iteration                    
                </@param>
                <@param>
                    m previous Best point in the previous iteration.                    
                </@param>
                <@param>
                    m current Best point in the current iteration.                    
                </@param>
                <@return>
                    n {@code true} if the algorithm has converged.                    
                </@return>
            </javadoc>
            <method name="converged" type="boolean" line="128">
                <scope line="129"/>
                <declaration name="p" type="double" line="133"/>
                <declaration name="c" type="double" line="134"/>
                <declaration name="difference" type="double" line="135"/>
                <declaration name="size" type="double" line="136"/>
            </method>
        </class>
    </source>