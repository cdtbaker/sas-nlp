<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.correlation">
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.linear.BlockRealMatrix"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.stat.ranking.NaNStrategy"/>
        <import package="org.apache.commons.math3.stat.ranking.NaturalRanking"/>
        <import package="org.apache.commons.math3.stat.ranking.RankingAlgorithm"/>
        <class name="SpearmansCorrelation" line="34">
            <javadoc line="34">
                Spearman&apos;s rank correlation. This implementation performs a rank
                 * transformation on the input data and then computes {@link PearsonsCorrelation}on the ranked data.
                 * &lt;p&gt;
                 * By default, ranks are computed using {@link NaturalRanking} with default
                 * strategies for handling NaNs and ties in the data (NaNs maximal, ties averaged).
                 * The ranking algorithm can be set using a constructor argument.                
                <@since>
                    e 2.0                    
                </@since>
                <@version>
                    n $Id: SpearmansCorrelation.java 1461822 2013-03-27 19:44:22Z tn $                    
                </@version>
            </javadoc>
            <declaration name="data" type="RealMatrix" line="48"/>
            <javadoc line="48">
                Input data                
            </javadoc>
            <declaration name="rankingAlgorithm" type="RankingAlgorithm" line="51"/>
            <javadoc line="51">
                Ranking algorithm                
            </javadoc>
            <declaration name="rankCorrelation" type="PearsonsCorrelation" line="54"/>
            <javadoc line="54">
                Rank correlation                
            </javadoc>
            <javadoc line="57">
                Create a SpearmansCorrelation without data.                
            </javadoc>
            <method name="SpearmansCorrelation" type="constructor" line="60"/>
            <javadoc line="64">
                Create a SpearmansCorrelation with the given ranking algorithm.
                 * &lt;p&gt;
                 * From version 4.0 onwards this constructor will throw an exception
                 * if the provided {@link NaturalRanking} uses a {@link NaNStrategy#REMOVED} strategy.                
                <@param>
                    m rankingAlgorithm ranking algorithm                    
                </@param>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="SpearmansCorrelation" type="constructor" line="73"/>
            <javadoc line="79">
                Create a SpearmansCorrelation from the given data matrix.                
                <@param>
                    m dataMatrix matrix of data with columns representing
                     * variables to correlate                    
                </@param>
            </javadoc>
            <method name="SpearmansCorrelation" type="constructor" line="85"/>
            <javadoc line="89">
                Create a SpearmansCorrelation with the given input data matrix
                 * and ranking algorithm.
                 * &lt;p&gt;
                 * From version 4.0 onwards this constructor will throw an exception
                 * if the provided {@link NaturalRanking} uses a {@link NaNStrategy#REMOVED} strategy.                
                <@param>
                    m dataMatrix matrix of data with columns representing
                     * variables to correlate                    
                </@param>
                <@param>
                    m rankingAlgorithm ranking algorithm                    
                </@param>
            </javadoc>
            <method name="SpearmansCorrelation" type="constructor" line="100"/>
            <javadoc line="106">
                Calculate the Spearman Rank Correlation Matrix.                
                <@return>
                    n Spearman Rank Correlation Matrix                    
                </@return>
            </javadoc>
            <method name="getCorrelationMatrix" type="RealMatrix" line="111"/>
            <javadoc line="115">
                Returns a {@link PearsonsCorrelation} instance constructed from the
                 * ranked input data. That is,
                 * &lt;code&gt;new SpearmansCorrelation(matrix).getRankCorrelation()&lt;/code&gt;
                 * is equivalent to
                 * &lt;code&gt;new PearsonsCorrelation(rankTransform(matrix))&lt;/code&gt; where
                 * &lt;code&gt;rankTransform(matrix)&lt;/code&gt; is the result of applying the
                 * configured &lt;code&gt;RankingAlgorithm&lt;/code&gt; to each of the columns of
                 * &lt;code&gt;matrix.&lt;/code&gt;                
                <@return>
                    n PearsonsCorrelation among ranked column data                    
                </@return>
            </javadoc>
            <method name="getRankCorrelation" type="PearsonsCorrelation" line="127"/>
            <javadoc line="131">
                Computes the Spearman&apos;s rank correlation matrix for the columns of the
                 * input matrix.                
                <@param>
                    m matrix matrix with columns representing variables to correlate                    
                </@param>
                <@return>
                    n correlation matrix                    
                </@return>
            </javadoc>
            <method name="computeCorrelationMatrix" type="RealMatrix" line="138">
                <declaration name="matrixCopy" type="RealMatrix" line="139"/>
            </method>
            <javadoc line="143">
                Computes the Spearman&apos;s rank correlation matrix for the columns of the
                 * input rectangular array.  The columns of the array represent values
                 * of variables to be correlated.                
                <@param>
                    m matrix matrix with columns representing variables to correlate                    
                </@param>
                <@return>
                    n correlation matrix                    
                </@return>
            </javadoc>
            <method name="computeCorrelationMatrix" type="RealMatrix" line="151"/>
            <javadoc line="155">
                Computes the Spearman&apos;s rank correlation coefficient between the two arrays.                
                <@param>
                    m xArray first data array                    
                </@param>
                <@param>
                    m yArray second data array                    
                </@param>
                <@return>
                    n Returns Spearman's rank correlation coefficient for the two arrays                    
                </@return>
                <@throws>
                    s DimensionMismatchException if the arrays lengths do not match                    
                </@throws>
                <@throws>
                    s MathIllegalArgumentException if the array length is less than 2                    
                </@throws>
            </javadoc>
            <method name="correlation" type="double" line="164">
                <scope line="165"/>
                <scope line="167"/>
                <scope line="170">
                    <declaration name="x" type="double[]" line="171"/>
                    <declaration name="y" type="double[]" line="172"/>
                    <scope line="174">
                        <declaration name="nanPositions" type="Set&lt;Integer&gt;" line="175"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="187">
                Applies rank transform to each of the columns of &lt;code&gt;matrix&lt;/code&gt;
                 * using the current &lt;code&gt;rankingAlgorithm&lt;/code&gt;.                
                <@param>
                    m matrix matrix to transform                    
                </@param>
                <@return>
                    n a rank-transformed matrix                    
                </@return>
            </javadoc>
            <method name="rankTransform" type="RealMatrix" line="194">
                <declaration name="transformed" type="RealMatrix" line="195"/>
                <scope line="198">
                    <declaration name="nanPositions" type="Set&lt;Integer&gt;" line="199"/>
                    <scope line="200"/>
                    <scope line="205">
                        <scope line="208"/>
                    </scope>
                </scope>
                <scope line="214"/>
                <scope line="218"/>
            </method>
            <javadoc line="225">
                Returns a list containing the indices of NaN values in the input array.                
                <@param>
                    m input the input array                    
                </@param>
                <@return>
                    n a list of NaN positions in the input array                    
                </@return>
            </javadoc>
            <method name="getNaNPositions" type="List<Integer>" line="231">
                <declaration name="positions" type="List&lt;Integer&gt;" line="232"/>
                <scope line="233">
                    <scope line="234"/>
                </scope>
            </method>
            <javadoc line="241">
                Removes all values from the input array at the specified indices.                
                <@param>
                    m input the input array                    
                </@param>
                <@param>
                    m indices a set containing the indices to be removed                    
                </@param>
                <@return>
                    n the input array without the values at the specified indices                    
                </@return>
            </javadoc>
            <method name="removeValues" type="double[]" line="248">
                <scope line="249"/>
                <declaration name="result" type="double[]" line="252"/>
                <scope line="253">
                    <scope line="254"/>
                </scope>
            </method>
        </class>
    </source>