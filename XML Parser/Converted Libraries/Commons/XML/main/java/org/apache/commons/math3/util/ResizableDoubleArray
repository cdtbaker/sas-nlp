<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.io.Serializable"/>
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.MathInternalError"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="ResizableDoubleArray" line="30">
            <implements interface="DoubleArray"/>
            <implements interface="Serializable"/>
            <javadoc line="30">
                &lt;p&gt;
                 * A variable length {@link DoubleArray} implementation that automatically
                 * handles expanding and contracting its internal storage array as elements
                 * are added and removed.
                 * &lt;/p&gt;
                 * &lt;h3&gt;Important note: Usage should not assume that this class is thread-safe
                 * even though some of the methods are {@code synchronized}.
                 * This qualifier will be dropped in the next major release (4.0).&lt;/h3&gt;
                 * &lt;p&gt;
                 * The internal storage array starts with capacity determined by the{@code initialCapacity} property, which can be set by the constructor.
                 * The default initial capacity is 16.  Adding elements using{@link #addElement(double)} appends elements to the end of the array.
                 * When there are no open entries at the end of the internal storage array,
                 * the array is expanded.  The size of the expanded array depends on the{@code expansionMode} and {@code expansionFactor} properties.
                 * The {@code expansionMode} determines whether the size of the array is
                 * multiplied by the {@code expansionFactor}({@link ExpansionMode#MULTIPLICATIVE}) or if the expansion is additive
                 * ({@link ExpansionMode#ADDITIVE} -- {@code expansionFactor} storage
                 * locations added).
                 * The default {@code expansionMode} is {@code MULTIPLICATIVE} and the default{@code expansionFactor} is 2.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * The {@link #addElementRolling(double)} method adds a new element to the end
                 * of the internal storage array and adjusts the &quot;usable window&quot; of the
                 * internal array forward by one position (effectively making what was the
                 * second element the first, and so on).  Repeated activations of this method
                 * (or activation of {@link #discardFrontElements(int)}) will effectively orphan
                 * the storage locations at the beginning of the internal storage array.  To
                 * reclaim this storage, each time one of these methods is activated, the size
                 * of the internal storage array is compared to the number of addressable
                 * elements (the {@code numElements} property) and if the difference
                 * is too large, the internal array is contracted to size{@code numElements + 1}.  The determination of when the internal
                 * storage array is &quot;too large&quot; depends on the {@code expansionMode} and{@code contractionFactor} properties.  If  the {@code expansionMode}is {@code MULTIPLICATIVE}, contraction is triggered when the
                 * ratio between storage array length and {@code numElements} exceeds{@code contractionFactor.}  If the {@code expansionMode}is {@code ADDITIVE}, the number of excess storage locations
                 * is compared to {@code contractionFactor}.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * To avoid cycles of expansions and contractions, the{@code expansionFactor} must not exceed the {@code contractionFactor}.
                 * Constructors and mutators for both of these properties enforce this
                 * requirement, throwing a {@code MathIllegalArgumentException} if it is
                 * violated.
                 * &lt;/p&gt;                
                <@version>
                    n $Id: ResizableDoubleArray.java 1462504 2013-03-29 15:48:57Z luc $                    
                </@version>
            </javadoc>
            <declaration name="ADDITIVE_MODE" type="int" line="85"/>
            <javadoc line="85">
                Additive expansion mode.                
                <@deprecated>
                    d As of 3.1. Please use {@link ExpansionMode#ADDITIVE} instead.                    
                </@deprecated>
            </javadoc>
            <declaration name="MULTIPLICATIVE_MODE" type="int" line="90"/>
            <javadoc line="90">
                Multiplicative expansion mode.                
                <@deprecated>
                    d As of 3.1. Please use {@link ExpansionMode#MULTIPLICATIVE} instead.                    
                </@deprecated>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="95"/>
            <javadoc line="95">
                Serializable version identifier.                
            </javadoc>
            <declaration name="DEFAULT_INITIAL_CAPACITY" type="int" line="98"/>
            <javadoc line="98">
                Default value for initial capacity.                
            </javadoc>
            <declaration name="DEFAULT_EXPANSION_FACTOR" type="double" line="100"/>
            <javadoc line="100">
                Default value for array size modifier.                
            </javadoc>
            <declaration name="DEFAULT_CONTRACTION_DELTA" type="double" line="102"/>
            <javadoc line="102">
                Default value for the difference between {@link #contractionCriterion}and {@link #expansionFactor}.                
            </javadoc>
            <declaration name="contractionCriterion" type="double" line="108"/>
            <javadoc line="108">
                The contraction criteria determines when the internal array will be
                 * contracted to fit the number of elements contained in the element
                 * array + 1.                
            </javadoc>
            <declaration name="expansionFactor" type="double" line="115"/>
            <javadoc line="115">
                The expansion factor of the array.  When the array needs to be expanded,
                 * the new array size will be{@code internalArray.length * expansionFactor}if {@code expansionMode} is set to MULTIPLICATIVE_MODE, or{@code internalArray.length + expansionFactor} if{@code expansionMode} is set to ADDITIVE_MODE.                
            </javadoc>
            <declaration name="expansionMode" type="ExpansionMode" line="125"/>
            <javadoc line="125">
                Determines whether array expansion by {@code expansionFactor}is additive or multiplicative.                
            </javadoc>
            <declaration name="internalArray" type="double[]" line="131"/>
            <javadoc line="131">
                The internal storage array.                
            </javadoc>
            <declaration name="numElements" type="int" line="136"/>
            <javadoc line="136">
                The number of addressable elements in the array.  Note that this
                 * has nothing to do with the length of the internal storage array.                
            </javadoc>
            <declaration name="startIndex" type="int" line="142"/>
            <javadoc line="142">
                The position of the first addressable element in the internal storage
                 * array.  The addressable elements in the array are{@code internalArray[startIndex],...,internalArray[startIndex + numElements - 1]}.                
            </javadoc>
            <javadoc line="149">
                Specification of expansion algorithm.                
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <javadoc line="154">
                Multiplicative expansion mode.                
            </javadoc>
            <javadoc line="156">
                Additive expansion mode.                
            </javadoc>
            <javadoc line="160">
                Creates an instance with default properties.
                 * &lt;ul&gt;
                 * &lt;li&gt;{@code initialCapacity = 16}&lt;/li&gt;
                 * &lt;li&gt;{@code expansionMode = MULTIPLICATIVE}&lt;/li&gt;
                 * &lt;li&gt;{@code expansionFactor = 2.0}&lt;/li&gt;
                 * &lt;li&gt;{@code contractionCriterion = 2.5}&lt;/li&gt;
                 * &lt;/ul&gt;                
            </javadoc>
            <method name="ResizableDoubleArray" type="constructor" line="169"/>
            <javadoc line="173">
                Creates an instance with the specified initial capacity.
                 * Other properties take default values:
                 * &lt;ul&gt;
                 * &lt;li&gt;{@code expansionMode = MULTIPLICATIVE}&lt;/li&gt;
                 * &lt;li&gt;{@code expansionFactor = 2.0}&lt;/li&gt;
                 * &lt;li&gt;{@code contractionCriterion = 2.5}&lt;/li&gt;
                 * &lt;/ul&gt;                
                <@param>
                    m initialCapacity Initial size of the internal storage array.                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if {@code initialCapacity <= 0}.                    
                </@throws>
            </javadoc>
            <method name="ResizableDoubleArray" type="constructor" line="185"/>
            <javadoc line="189">
                Creates an instance from an existing {@code double[]} with the
                 * initial capacity and numElements corresponding to the size of
                 * the supplied {@code double[]} array.
                 * If the supplied array is null, a new empty array with the default
                 * initial capacity will be created.
                 * The input array is copied, not referenced.
                 * Other properties take default values:
                 * &lt;ul&gt;
                 * &lt;li&gt;{@code initialCapacity = 16}&lt;/li&gt;
                 * &lt;li&gt;{@code expansionMode = MULTIPLICATIVE}&lt;/li&gt;
                 * &lt;li&gt;{@code expansionFactor = 2.0}&lt;/li&gt;
                 * &lt;li&gt;{@code contractionCriterion = 2.5}&lt;/li&gt;
                 * &lt;/ul&gt;                
                <@param>
                    m initialArray initial array                    
                </@param>
                <@since>
                    e 2.2                    
                </@since>
            </javadoc>
            <method name="ResizableDoubleArray" type="constructor" line="207"/>
            <javadoc line="215">
                Creates an instance with the specified initial capacity
                 * and expansion factor.
                 * The remaining properties take default values:
                 * &lt;ul&gt;
                 * &lt;li&gt;{@code expansionMode = MULTIPLICATIVE}&lt;/li&gt;
                 * &lt;li&gt;{@code contractionCriterion = 0.5 + expansionFactor}&lt;/li&gt;
                 * &lt;/ul&gt;
                 * &lt;br/&gt;
                 * Throws IllegalArgumentException if the following conditions are
                 * not met:
                 * &lt;ul&gt;
                 * &lt;li&gt;{@code initialCapacity &gt; 0}&lt;/li&gt;
                 * &lt;li&gt;{@code expansionFactor &gt; 1}&lt;/li&gt;
                 * &lt;/ul&gt;                
                <@param>
                    m initialCapacity Initial size of the internal storage array.                    
                </@param>
                <@param>
                    m expansionFactor The array will be expanded based on this
                     * parameter.                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if parameters are not valid.                    
                </@throws>
                <@deprecated>
                    d As of 3.1. Please use{@link #ResizableDoubleArray(int,double)} instead.                    
                </@deprecated>
            </javadoc>
            <method name="ResizableDoubleArray" type="constructor" line="241"/>
            <javadoc line="246">
                Creates an instance with the specified initial capacity
                 * and expansion factor.
                 * The remaining properties take default values:
                 * &lt;ul&gt;
                 * &lt;li&gt;{@code expansionMode = MULTIPLICATIVE}&lt;/li&gt;
                 * &lt;li&gt;{@code contractionCriterion = 0.5 + expansionFactor}&lt;/li&gt;
                 * &lt;/ul&gt;
                 * &lt;br/&gt;
                 * Throws IllegalArgumentException if the following conditions are
                 * not met:
                 * &lt;ul&gt;
                 * &lt;li&gt;{@code initialCapacity &gt; 0}&lt;/li&gt;
                 * &lt;li&gt;{@code expansionFactor &gt; 1}&lt;/li&gt;
                 * &lt;/ul&gt;                
                <@param>
                    m initialCapacity Initial size of the internal storage array.                    
                </@param>
                <@param>
                    m expansionFactor The array will be expanded based on this
                     * parameter.                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if parameters are not valid.                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="ResizableDoubleArray" type="constructor" line="270"/>
            <javadoc line="276">
                Creates an instance with the specified initialCapacity,
                 * expansionFactor, and contractionCriterion.
                 * The expansion mode will default to {@code MULTIPLICATIVE}.
                 * &lt;br/&gt;
                 * Throws IllegalArgumentException if the following conditions are
                 * not met:
                 * &lt;ul&gt;
                 * &lt;li&gt;{@code initialCapacity &gt; 0}&lt;/li&gt;
                 * &lt;li&gt;{@code expansionFactor &gt; 1}&lt;/li&gt;
                 * &lt;li&gt;{@code contractionCriterion &gt;= expansionFactor}&lt;/li&gt;
                 * &lt;/ul&gt;                
                <@param>
                    m initialCapacity Initial size of the internal storage array..                    
                </@param>
                <@param>
                    m expansionFactor The array will be expanded based on this
                     * parameter.                    
                </@param>
                <@param>
                    m contractionCriteria Contraction criteria.                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if parameters are not valid.                    
                </@throws>
                <@deprecated>
                    d As of 3.1. Please use{@link #ResizableDoubleArray(int,double,double)} instead.                    
                </@deprecated>
            </javadoc>
            <method name="ResizableDoubleArray" type="constructor" line="301"/>
            <javadoc line="307">
                Creates an instance with the specified initial capacity,
                 * expansion factor, and contraction criteria.
                 * The expansion mode will default to {@code MULTIPLICATIVE}.
                 * &lt;br/&gt;
                 * Throws IllegalArgumentException if the following conditions are
                 * not met:
                 * &lt;ul&gt;
                 * &lt;li&gt;{@code initialCapacity &gt; 0}&lt;/li&gt;
                 * &lt;li&gt;{@code expansionFactor &gt; 1}&lt;/li&gt;
                 * &lt;li&gt;{@code contractionCriterion &gt;= expansionFactor}&lt;/li&gt;
                 * &lt;/ul&gt;                
                <@param>
                    m initialCapacity Initial size of the internal storage array..                    
                </@param>
                <@param>
                    m expansionFactor The array will be expanded based on this
                     * parameter.                    
                </@param>
                <@param>
                    m contractionCriterion Contraction criterion.                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if the parameters are not valid.                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="ResizableDoubleArray" type="constructor" line="330"/>
            <javadoc line="338">
                &lt;p&gt;
                 * Create a ResizableArray with the specified properties.&lt;/p&gt;
                 * &lt;p&gt;
                 * Throws IllegalArgumentException if the following conditions are
                 * not met:
                 * &lt;ul&gt;
                 * &lt;li&gt;&lt;code&gt;initialCapacity &gt; 0&lt;/code&gt;&lt;/li&gt;
                 * &lt;li&gt;&lt;code&gt;expansionFactor &gt; 1&lt;/code&gt;&lt;/li&gt;
                 * &lt;li&gt;&lt;code&gt;contractionFactor &gt;= expansionFactor&lt;/code&gt;&lt;/li&gt;
                 * &lt;li&gt;&lt;code&gt;expansionMode in {MULTIPLICATIVE_MODE, ADDITIVE_MODE}&lt;/code&gt;
                 * &lt;/li&gt;
                 * &lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m initialCapacity the initial size of the internal storage array                    
                </@param>
                <@param>
                    m expansionFactor the array will be expanded based on this
                     * parameter                    
                </@param>
                <@param>
                    m contractionCriteria the contraction Criteria                    
                </@param>
                <@param>
                    m expansionMode  the expansion mode                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if parameters are not valid                    
                </@throws>
                <@deprecated>
                    d As of 3.1. Please use{@link #ResizableDoubleArray(int,double,double,ExpansionMode,double[])}instead.                    
                </@deprecated>
            </javadoc>
            <method name="ResizableDoubleArray" type="constructor" line="363">
                <comment line="364">
                    XXX Just ot retain the expected failure in a unit test.                    
                </comment>
                <comment line="364">
                    With the new &quot;enum&quot;, that test will become obsolete.                    
                </comment>
            </method>
            <javadoc line="376">
                Creates an instance with the specified properties.
                 * &lt;br/&gt;
                 * Throws MathIllegalArgumentException if the following conditions are
                 * not met:
                 * &lt;ul&gt;
                 * &lt;li&gt;{@code initialCapacity &gt; 0}&lt;/li&gt;
                 * &lt;li&gt;{@code expansionFactor &gt; 1}&lt;/li&gt;
                 * &lt;li&gt;{@code contractionCriterion &gt;= expansionFactor}&lt;/li&gt;
                 * &lt;/ul&gt;                
                <@param>
                    m initialCapacity Initial size of the internal storage array.                    
                </@param>
                <@param>
                    m expansionFactor The array will be expanded based on this
                     * parameter.                    
                </@param>
                <@param>
                    m contractionCriterion Contraction criteria.                    
                </@param>
                <@param>
                    m expansionMode Expansion mode.                    
                </@param>
                <@param>
                    m data Initial contents of the array.                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if the parameters are not valid.                    
                </@throws>
            </javadoc>
            <method name="ResizableDoubleArray" type="constructor" line="400">
                <scope line="401"/>
                <scope line="414"/>
            </method>
            <javadoc line="419">
                Copy constructor.  Creates a new ResizableDoubleArray that is a deep,
                 * fresh copy of the original. Needs to acquire synchronization lock
                 * on original.  Original may not be null; otherwise a {@link NullArgumentException}is thrown.                
                <@param>
                    m original array to copy                    
                </@param>
                <@exception>
                    n NullArgumentException if original is null                    
                </@exception>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="ResizableDoubleArray" type="constructor" line="430"/>
            <javadoc line="435">
                Adds an element to the end of this expandable array.                
                <@param>
                    m value Value to be added to end of array.                    
                </@param>
            </javadoc>
            <method name="addElement" type="void" line="440">
                <scope line="441"/>
            </method>
            <javadoc line="447">
                Adds several element to the end of this expandable array.                
                <@param>
                    m values Values to be added to end of array.                    
                </@param>
                <@since>
                    e 2.2                    
                </@since>
            </javadoc>
            <method name="addElements" type="void" line="453">
                <declaration name="tempArray" type="double[]" line="454"/>
            </method>
            <javadoc line="462">
                &lt;p&gt;
                 * Adds an element to the end of the array and removes the first
                 * element in the array.  Returns the discarded first element.
                 * The effect is similar to a push operation in a FIFO queue.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * Example: If the array contains the elements 1, 2, 3, 4 (in that order)
                 * and addElementRolling(5) is invoked, the result is an array containing
                 * the entries 2, 3, 4, 5 and the value returned is 1.
                 * &lt;/p&gt;                
                <@param>
                    m value Value to be added to the array.                    
                </@param>
                <@return>
                    n the value which has been discarded or "pushed" out of the array
                     * by this rolling insert.                    
                </@return>
            </javadoc>
            <method name="addElementRolling" type="double" line="478">
                <comment line="479">
                    Increment the start index                    
                </comment>
                <comment line="479">
                    Add the new value                    
                </comment>
                <comment line="479">
                    Check the contraction criterion.                    
                </comment>
                <declaration name="discarded" type="double" line="479"/>
                <scope line="481"/>
                <scope line="491"/>
            </method>
            <javadoc line="497">
                Substitutes &lt;code&gt;value&lt;/code&gt; for the most recently added value.
                 * Returns the value that has been replaced. If the array is empty (i.e.
                 * if {@link #numElements} is zero), an IllegalStateException is thrown.                
                <@param>
                    m value New value to substitute for the most recently added value                    
                </@param>
                <@return>
                    n the value that has been replaced in the array.                    
                </@return>
                <@throws>
                    s MathIllegalStateException if the array is empty                    
                </@throws>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="substituteMostRecentElement" type="double" line="508">
                <scope line="509"/>
                <declaration name="substIndex" type="int" line="514"/>
                <declaration name="discarded" type="double" line="515"/>
            </method>
            <javadoc line="522">
                Checks the expansion factor and the contraction criterion and throws an
                 * IllegalArgumentException if the contractionCriteria is less than the
                 * expansionCriteria                
                <@param>
                    m expansion factor to be checked                    
                </@param>
                <@param>
                    m contraction criteria to be checked                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if the contractionCriteria is less than
                     * the expansionCriteria.                    
                </@throws>
                <@deprecated>
                    d As of 3.1. Please use{@link #checkContractExpand(double,double)} instead.                    
                </@deprecated>
            </javadoc>
            <method name="checkContractExpand" type="void" line="535"/>
            <javadoc line="540">
                Checks the expansion factor and the contraction criterion and raises
                 * an exception if the contraction criterion is smaller than the
                 * expansion criterion.                
                <@param>
                    m contraction Criterion to be checked.                    
                </@param>
                <@param>
                    m expansion Factor to be checked.                    
                </@param>
                <@throws>
                    s NumberIsTooSmallException if {@code contraction < expansion}.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if {@code contraction <= 1}.                    
                </@throws>
                <@throws>
                    s NumberIsTooSmallException if {@code expansion <= 1 }.                    
                </@throws>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="checkContractExpand" type="void" line="554">
                <scope line="555">
                    <declaration name="e" type="NumberIsTooSmallException" line="556"/>
                </scope>
                <scope line="562">
                    <declaration name="e" type="NumberIsTooSmallException" line="563"/>
                </scope>
                <scope line="569">
                    <declaration name="e" type="NumberIsTooSmallException" line="570"/>
                </scope>
            </method>
            <javadoc line="577">
                Clear the array contents, resetting the number of elements to zero.                
            </javadoc>
            <method name="clear" type="void" line="580"/>
            <javadoc line="585">
                Contracts the storage array to the (size of the element set) + 1 - to
                 * avoid a zero length array. This function also resets the startIndex to
                 * zero.                
            </javadoc>
            <method name="contract" type="void" line="590">
                <comment line="591">
                    Copy and swap - copy only the element array from the src array.                    
                </comment>
                <comment line="591">
                    Reset the start index to zero                    
                </comment>
                <declaration name="tempArray" type="double[]" line="591"/>
            </method>
            <javadoc line="601">
                Discards the &lt;code&gt;i&lt;/code&gt; initial elements of the array.  For example,
                 * if the array contains the elements 1,2,3,4, invoking
                 * &lt;code&gt;discardFrontElements(2)&lt;/code&gt; will cause the first two elements
                 * to be discarded, leaving 3,4 in the array.  Throws illegalArgumentException
                 * if i exceeds numElements.                
                <@param>
                    m i  the number of elements to discard from the front of the array                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if i is greater than numElements.                    
                </@throws>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="discardFrontElements" type="void" line="613"/>
            <javadoc line="617">
                Discards the &lt;code&gt;i&lt;/code&gt; last elements of the array.  For example,
                 * if the array contains the elements 1,2,3,4, invoking
                 * &lt;code&gt;discardMostRecentElements(2)&lt;/code&gt; will cause the last two elements
                 * to be discarded, leaving 1,2 in the array.  Throws illegalArgumentException
                 * if i exceeds numElements.                
                <@param>
                    m i  the number of elements to discard from the end of the array                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if i is greater than numElements.                    
                </@throws>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="discardMostRecentElements" type="void" line="629"/>
            <javadoc line="633">
                Discards the &lt;code&gt;i&lt;/code&gt; first or last elements of the array,
                 * depending on the value of &lt;code&gt;front&lt;/code&gt;.
                 * For example, if the array contains the elements 1,2,3,4, invoking
                 * &lt;code&gt;discardExtremeElements(2,false)&lt;/code&gt; will cause the last two elements
                 * to be discarded, leaving 1,2 in the array.
                 * For example, if the array contains the elements 1,2,3,4, invoking
                 * &lt;code&gt;discardExtremeElements(2,true)&lt;/code&gt; will cause the first two elements
                 * to be discarded, leaving 3,4 in the array.
                 * Throws illegalArgumentException
                 * if i exceeds numElements.                
                <@param>
                    m i  the number of elements to discard from the front/end of the array                    
                </@param>
                <@param>
                    m front true if elements are to be discarded from the front
                     * of the array, false if elements are to be discarded from the end
                     * of the array                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if i is greater than numElements.                    
                </@throws>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="discardExtremeElements" type="void" line="654">
                <scope line="655"/>
                <scope line="659"/>
                <scope line="663">
                    <scope line="666"/>
                </scope>
                <scope line="670"/>
            </method>
            <javadoc line="675">
                Expands the internal storage array using the expansion factor.
                 * &lt;p&gt;
                 * if &lt;code&gt;expansionMode&lt;/code&gt; is set to MULTIPLICATIVE_MODE,
                 * the new array size will be &lt;code&gt;internalArray.length * expansionFactor.&lt;/code&gt;
                 * If &lt;code&gt;expansionMode&lt;/code&gt; is set to ADDITIVE_MODE,  the length
                 * after expansion will be &lt;code&gt;internalArray.length + expansionFactor&lt;/code&gt;
                 * &lt;/p&gt;                
            </javadoc>
            <method name="expand" type="void" line="684">
                <comment line="685">
                    notice the use of FastMath.ceil(), this guarantees that we will always                    
                </comment>
                <comment line="685">
                    have an array of at least currentSize + 1.   Assume that the                    
                </comment>
                <comment line="685">
                    current initial capacity is 1 and the expansion factor                    
                </comment>
                <comment line="685">
                    is 1.000000000000000001.  The newly calculated size will be                    
                </comment>
                <comment line="685">
                    rounded up to 2 after the multiplication is performed.                    
                </comment>
                <comment line="685">
                    Copy and swap                    
                </comment>
                <declaration name="newSize" type="int" line="690"/>
                <scope line="691"/>
                <scope line="693"/>
                <declaration name="tempArray" type="double[]" line="696"/>
            </method>
            <javadoc line="703">
                Expands the internal storage array to the specified size.                
                <@param>
                    m size Size of the new internal storage array.                    
                </@param>
            </javadoc>
            <method name="expandTo" type="void" line="708">
                <comment line="709">
                    Copy and swap                    
                </comment>
                <declaration name="tempArray" type="double[]" line="709"/>
            </method>
            <javadoc line="715">
                The contraction criteria defines when the internal array will contract
                 * to store only the number of elements in the element array.
                 * If  the &lt;code&gt;expansionMode&lt;/code&gt; is &lt;code&gt;MULTIPLICATIVE_MODE&lt;/code&gt;,
                 * contraction is triggered when the ratio between storage array length
                 * and &lt;code&gt;numElements&lt;/code&gt; exceeds &lt;code&gt;contractionFactor&lt;/code&gt;.
                 * If the &lt;code&gt;expansionMode&lt;/code&gt; is &lt;code&gt;ADDITIVE_MODE&lt;/code&gt;, the
                 * number of excess storage locations is compared to
                 * &lt;code&gt;contractionFactor.&lt;/code&gt;                
                <@return>
                    n the contraction criteria used to reclaim memory.                    
                </@return>
                <@deprecated>
                    d As of 3.1. Please use {@link #getContractionCriterion()}instead.                    
                </@deprecated>
            </javadoc>
            <method name="getContractionCriteria" type="float" line="730"/>
            <javadoc line="734">
                The contraction criterion defines when the internal array will contract
                 * to store only the number of elements in the element array.
                 * If  the &lt;code&gt;expansionMode&lt;/code&gt; is &lt;code&gt;MULTIPLICATIVE_MODE&lt;/code&gt;,
                 * contraction is triggered when the ratio between storage array length
                 * and &lt;code&gt;numElements&lt;/code&gt; exceeds &lt;code&gt;contractionFactor&lt;/code&gt;.
                 * If the &lt;code&gt;expansionMode&lt;/code&gt; is &lt;code&gt;ADDITIVE_MODE&lt;/code&gt;, the
                 * number of excess storage locations is compared to
                 * &lt;code&gt;contractionFactor.&lt;/code&gt;                
                <@return>
                    n the contraction criterion used to reclaim memory.                    
                </@return>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="getContractionCriterion" type="double" line="747"/>
            <javadoc line="751">
                Returns the element at the specified index                
                <@param>
                    m index index to fetch a value from                    
                </@param>
                <@return>
                    n value stored at the specified index                    
                </@return>
                <@throws>
                    s ArrayIndexOutOfBoundsException if <code>index</code> is less than
                     * zero or is greater than <code>getNumElements() - 1</code>.                    
                </@throws>
            </javadoc>
            <method name="getElement" type="double" line="759">
                <scope line="760"/>
                <scope line="762"/>
                <scope line="764"/>
            </method>
            <javadoc line="769">
                Returns a double array containing the elements of this
                 * &lt;code&gt;ResizableArray&lt;/code&gt;.  This method returns a copy, not a
                 * reference to the underlying array, so that changes made to the returned
                 * array have no effect on this &lt;code&gt;ResizableArray.&lt;/code&gt;                
                <@return>
                    n the double array.                    
                </@return>
            </javadoc>
            <method name="getElements" type="double[]" line="776">
                <declaration name="elementArray" type="double[]" line="777"/>
            </method>
            <javadoc line="782">
                The expansion factor controls the size of a new array when an array
                 * needs to be expanded.  The &lt;code&gt;expansionMode&lt;/code&gt;
                 * determines whether the size of the array is multiplied by the
                 * &lt;code&gt;expansionFactor&lt;/code&gt; (MULTIPLICATIVE_MODE) or if
                 * the expansion is additive (ADDITIVE_MODE -- &lt;code&gt;expansionFactor&lt;/code&gt;
                 * storage locations added).  The default &lt;code&gt;expansionMode&lt;/code&gt; is
                 * MULTIPLICATIVE_MODE and the default &lt;code&gt;expansionFactor&lt;/code&gt;
                 * is 2.0.                
                <@return>
                    n the expansion factor of this expandable double array                    
                </@return>
                <@deprecated>
                    d As of 3.1. Return type will be changed to "double" in 4.0.                    
                </@deprecated>
            </javadoc>
            <method name="getExpansionFactor" type="float" line="796"/>
            <javadoc line="800">
                The expansion mode determines whether the internal storage
                 * array grows additively or multiplicatively when it is expanded.                
                <@return>
                    n the expansion mode.                    
                </@return>
                <@deprecated>
                    d As of 3.1. Return value to be changed to{@link ExpansionMode} in 4.0.                    
                </@deprecated>
            </javadoc>
            <method name="getExpansionMode" type="int" line="808"/>
            <javadoc line="819">
                Notice the package scope on this method.   This method is simply here
                 * for the JUnit test, it allows us check if the expansion is working
                 * properly after a number of expansions.  This is not meant to be a part
                 * of the public interface of this class.                
                <@return>
                    n the length of the internal storage array.                    
                </@return>
                <@deprecated>
                    d As of 3.1. Please use {@link #getCapacity()} instead.                    
                </@deprecated>
            </javadoc>
            <method name="getInternalLength" type="int" line="829"/>
            <javadoc line="833">
                Gets the currently allocated size of the internal data structure used
                 * for storing elements.
                 * This is not to be confused with {@link #getNumElements() the number of
                 * elements actually stored}.                
                <@return>
                    n the length of the internal array.                    
                </@return>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="getCapacity" type="int" line="842"/>
            <javadoc line="846">
                Returns the number of elements currently in the array.  Please note
                 * that this is different from the length of the internal storage array.                
                <@return>
                    n the number of elements.                    
                </@return>
            </javadoc>
            <method name="getNumElements" type="int" line="852"/>
            <javadoc line="856">
                Returns the internal storage array.  Note that this method returns
                 * a reference to the internal storage array, not a copy, and to correctly
                 * address elements of the array, the &lt;code&gt;startIndex&lt;/code&gt; is
                 * required (available via the {@link #start} method).  This method should
                 * only be used in cases where copying the internal array is not practical.
                 * The {@link #getElements} method should be used in all other cases.                
                <@return>
                    n the internal storage array used by this object                    
                </@return>
                <@since>
                    e 2.0                    
                </@since>
                <@deprecated>
                    d As of 3.1.                    
                </@deprecated>
            </javadoc>
            <method name="getInternalValues" type="double[]" line="870"/>
            <javadoc line="874">
                Provides &lt;em&gt;direct&lt;/em&gt; access to the internal storage array.
                 * Please note that this method returns a reference to this object&apos;s
                 * storage array, not a copy.
                 * &lt;br/&gt;
                 * To correctly address elements of the array, the &quot;start index&quot; is
                 * required (available via the {@link #getStartIndex() getStartIndex}method.
                 * &lt;br/&gt;
                 * This method should only be used to avoid copying the internal array.
                 * The returned value &lt;em&gt;must&lt;/em&gt; be used for reading only; other
                 * uses could lead to this object becoming inconsistent.
                 * &lt;br/&gt;
                 * The {@link #getElements} method has no such limitation since it
                 * returns a copy of this array&apos;s addressable elements.                
                <@return>
                    n the internal storage array used by this object.                    
                </@return>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="getArrayRef" type="double[]" line="893"/>
            <javadoc line="897">
                Returns the &quot;start index&quot; of the internal array.
                 * This index is the position of the first addressable element in the
                 * internal storage array.
                 * The addressable elements in the array are at indices contained in
                 * the interval [{@link #getStartIndex()},{@link #getStartIndex()} + {@link #getNumElements()} - 1].                
                <@return>
                    n the start index.                    
                </@return>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="getStartIndex" type="int" line="908"/>
            <javadoc line="912">
                Sets the contraction criteria.                
                <@param>
                    m contractionCriteria contraction criteria                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if the contractionCriteria is less than
                     * the expansionCriteria.                    
                </@throws>
                <@deprecated>
                    d As of 3.1 (to be removed in 4.0 as field will become "final").                    
                </@deprecated>
            </javadoc>
            <method name="setContractionCriteria" type="void" line="922">
                <scope line="924"/>
            </method>
            <javadoc line="929">
                Performs an operation on the addressable elements of the array.                
                <@param>
                    m f Function to be applied on this array.                    
                </@param>
                <@return>
                    n the result.                    
                </@return>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="compute" type="double" line="936">
                <declaration name="array" type="double[]" line="937"/>
                <declaration name="start" type="int" line="938"/>
                <declaration name="num" type="int" line="939"/>
                <scope line="940"/>
            </method>
            <javadoc line="948">
                Sets the element at the specified index.  If the specified index is greater than
                 * &lt;code&gt;getNumElements() - 1&lt;/code&gt;, the &lt;code&gt;numElements&lt;/code&gt; property
                 * is increased to &lt;code&gt;index +1&lt;/code&gt; and additional storage is allocated
                 * (if necessary) for the new element and all  (uninitialized) elements
                 * between the new element and the previous end of the array).                
                <@param>
                    m index index to store a value in                    
                </@param>
                <@param>
                    m value value to store at the specified index                    
                </@param>
                <@throws>
                    s ArrayIndexOutOfBoundsException if {@code index < 0}.                    
                </@throws>
            </javadoc>
            <method name="setElement" type="void" line="959">
                <scope line="960"/>
                <scope line="963"/>
                <scope line="966"/>
            </method>
            <javadoc line="972">
                Sets the expansionFactor.  Throws IllegalArgumentException if the
                 * the following conditions are not met:
                 * &lt;ul&gt;
                 * &lt;li&gt;&lt;code&gt;expansionFactor &gt; 1&lt;/code&gt;&lt;/li&gt;
                 * &lt;li&gt;&lt;code&gt;contractionFactor &gt;= expansionFactor&lt;/code&gt;&lt;/li&gt;
                 * &lt;/ul&gt;                
                <@param>
                    m expansionFactor the new expansion factor value.                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if expansionFactor is <= 1 or greater
                     * than contractionFactor                    
                </@throws>
                <@deprecated>
                    d As of 3.1 (to be removed in 4.0 as field will become "final").                    
                </@deprecated>
            </javadoc>
            <method name="setExpansionFactor" type="void" line="985">
                <comment line="986">
                    The check above verifies that the expansion factor is &gt; 1.0;                    
                </comment>
                <scope line="988"/>
            </method>
            <javadoc line="993">
                Sets the &lt;code&gt;expansionMode&lt;/code&gt;. The specified value must be one of
                 * ADDITIVE_MODE, MULTIPLICATIVE_MODE.                
                <@param>
                    m expansionMode The expansionMode to set.                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if the specified mode value is not valid.                    
                </@throws>
                <@deprecated>
                    d As of 3.1. Please use {@link #setExpansionMode(ExpansionMode)} instead.                    
                </@deprecated>
            </javadoc>
            <method name="setExpansionMode" type="void" line="1003">
                <scope line="1005"/>
                <scope line="1010">
                    <scope line="1011"/>
                    <scope line="1013"/>
                </scope>
            </method>
            <javadoc line="1019">
                Sets the {@link ExpansionMode expansion mode}.                
                <@param>
                    m expansionMode Expansion mode to use for resizing the array.                    
                </@param>
                <@deprecated>
                    d As of 3.1 (to be removed in 4.0 as field will become "final").                    
                </@deprecated>
            </javadoc>
            <method name="setExpansionMode" type="void" line="1026"/>
            <javadoc line="1030">
                Sets the initial capacity.  Should only be invoked by constructors.                
                <@param>
                    m initialCapacity of the array                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if <code>initialCapacity</code> is not
                     * positive.                    
                </@throws>
                <@deprecated>
                    d As of 3.1, this is a no-op.                    
                </@deprecated>
            </javadoc>
            <method name="setInitialCapacity" type="void" line="1040">
                <comment line="1041">
                    Body removed in 3.1.                    
                </comment>
            </method>
            <javadoc line="1044">
                This function allows you to control the number of elements contained
                 * in this array, and can be used to &quot;throw out&quot; the last n values in an
                 * array. This function will also expand the internal array as needed.                
                <@param>
                    m i a new number of elements                    
                </@param>
                <@throws>
                    s MathIllegalArgumentException if <code>i</code> is negative.                    
                </@throws>
            </javadoc>
            <method name="setNumElements" type="void" line="1053">
                <comment line="1054">
                    If index is negative thrown an error.                    
                </comment>
                <comment line="1054">
                    Test the new num elements, check to see if the array needs to be                    
                </comment>
                <comment line="1054">
                    expanded to accommodate this new number of elements.                    
                </comment>
                <comment line="1054">
                    Set the new number of elements to new value.                    
                </comment>
                <scope line="1055"/>
                <declaration name="newSize" type="int" line="1063"/>
                <scope line="1064"/>
            </method>
            <javadoc line="1072">
                Returns true if the internal storage array has too many unused
                 * storage positions.                
                <@return>
                    n true if array satisfies the contraction criteria                    
                </@return>
            </javadoc>
            <method name="shouldContract" type="boolean" line="1078">
                <scope line="1079"/>
                <scope line="1081"/>
            </method>
            <javadoc line="1086">
                Returns the starting index of the internal array.  The starting index is
                 * the position of the first addressable element in the internal storage
                 * array.  The addressable elements in the array are &lt;code&gt;
                 * internalArray[startIndex],...,internalArray[startIndex + numElements -1]
                 * &lt;/code&gt;                
                <@return>
                    n the starting index.                    
                </@return>
                <@deprecated>
                    d As of 3.1.                    
                </@deprecated>
            </javadoc>
            <method name="start" type="int" line="1097"/>
            <javadoc line="1101">
                &lt;p&gt;Copies source to dest, copying the underlying data, so dest is
                 * a new, independent copy of source.  Does not contract before
                 * the copy.&lt;/p&gt;
                 * &lt;p&gt;Obtains synchronization locks on both source and dest
                 * (in that order) before performing the copy.&lt;/p&gt;
                 * &lt;p&gt;Neither source nor dest may be null; otherwise a {@link NullArgumentException}is thrown&lt;/p&gt;                
                <@param>
                    m source ResizableDoubleArray to copy                    
                </@param>
                <@param>
                    m dest ResizableArray to replace with a copy of the source array                    
                </@param>
                <@exception>
                    n NullArgumentException if either source or dest is null                    
                </@exception>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="copy" type="void" line="1120">
                <scope line="1123">
                    <scope line="1124"/>
                </scope>
            </method>
            <javadoc line="1137">
                Returns a copy of the ResizableDoubleArray.  Does not contract before
                 * the copy, so the returned object is an exact copy of this.                
                <@return>
                    n a new ResizableDoubleArray with the same data and configuration
                     * properties as this                    
                </@return>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="copy" type="ResizableDoubleArray" line="1145">
                <declaration name="result" type="ResizableDoubleArray" line="1146"/>
            </method>
            <javadoc line="1151">
                Returns true iff object is a ResizableDoubleArray with the same properties
                 * as this and an identical internal storage array.                
                <@param>
                    m object object to be compared for equality with this                    
                </@param>
                <@return>
                    n true iff object is a ResizableDoubleArray with the same data and
                     * properties as this                    
                </@return>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="equals" type="boolean" line="1161">
                <scope line="1162"/>
                <scope line="1165"/>
                <scope line="1168">
                    <scope line="1169">
                        <declaration name="result" type="boolean" line="1170"/>
                        <declaration name="other" type="ResizableDoubleArray" line="1171"/>
                        <scope line="1177"/>
                        <scope line="1179"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1186">
                Returns a hash code consistent with equals.                
                <@return>
                    n the hash code representing this {@code ResizableDoubleArray}.                    
                </@return>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <method name="hashCode" type="int" line="1193">
                <declaration name="hashData" type="int[]" line="1194"/>
            </method>
        </class>
    </source>