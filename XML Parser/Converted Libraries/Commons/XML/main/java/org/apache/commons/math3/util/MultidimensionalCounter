<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <class name="MultidimensionalCounter" line="24">
            <implements interface="Iterable">
                <type_params>
                    <type_param name="Integer"/>
                </type_params>
            </implements>
            <javadoc line="24">
                Converter between unidimensional storage structure and multidimensional
                  conceptual structure.
                  This utility will convert from indices in a multidimensional structure
                  to the corresponding index in a one-dimensional array. For example,
                  assuming that the ranges (in 3 dimensions) of indices are 2, 4 and 3,
                  the following correspondences, between 3-tuples indices and unidimensional
                  indices, will hold:
                  &lt;ul&gt;
                  &lt;li&gt;(0, 0, 0) corresponds to 0&lt;/li&gt;
                  &lt;li&gt;(0, 0, 1) corresponds to 1&lt;/li&gt;
                  &lt;li&gt;(0, 0, 2) corresponds to 2&lt;/li&gt;
                  &lt;li&gt;(0, 1, 0) corresponds to 3&lt;/li&gt;
                  &lt;li&gt;...&lt;/li&gt;
                  &lt;li&gt;(1, 0, 0) corresponds to 12&lt;/li&gt;
                  &lt;li&gt;...&lt;/li&gt;
                  &lt;li&gt;(1, 3, 2) corresponds to 23&lt;/li&gt;
                  &lt;/ul&gt;                
                <@since>
                    e 2.2                    
                </@since>
                <@version>
                    n $Id: MultidimensionalCounter.java 1382887 2012-09-10 14:37:27Z luc $                    
                </@version>
            </javadoc>
            <declaration name="dimension" type="int" line="47"/>
            <javadoc line="47">
                Number of dimensions.                
            </javadoc>
            <declaration name="uniCounterOffset" type="int[]" line="51"/>
            <javadoc line="51">
                Offset for each dimension.                
            </javadoc>
            <declaration name="size" type="int[]" line="55"/>
            <javadoc line="55">
                Counter sizes.                
            </javadoc>
            <declaration name="totalSize" type="int" line="59"/>
            <javadoc line="59">
                Total number of (one-dimensional) slots.                
            </javadoc>
            <declaration name="last" type="int" line="63"/>
            <javadoc line="63">
                Index of last dimension.                
            </javadoc>
            <class name="Iterator" line="68">
                <implements interface="java.util.Iterator">
                    <type_params>
                        <type_param name="Integer"/>
                    </type_params>
                </implements>
                <javadoc line="68">
                    Perform iteration over the multidimensional counter.                    
                </javadoc>
                <declaration name="counter" type="int[]" line="72"/>
                <javadoc line="72">
                    Multidimensional counter.                    
                </javadoc>
                <declaration name="count" type="int" line="76"/>
                <javadoc line="76">
                    Unidimensional counter.                    
                </javadoc>
                <javadoc line="81">
                    Create an iterator                    
                    <@see>
                        e #iterator()                        
                    </@see>
                </javadoc>
                <method name="Iterator" type="constructor" line="85"/>
                <javadoc line="89">
                    {@inheritDoc}                    
                </javadoc>
                <method name="hasNext" type="boolean" line="92">
                    <scope line="93">
                        <scope line="94"/>
                    </scope>
                </method>
                <javadoc line="101">
                    @return the unidimensional count after the counter has been
                      incremented by {@code 1}.                    
                </javadoc>
                <method name="next" type="Integer" line="105">
                    <scope line="106">
                        <scope line="107"/>
                        <scope line="109"/>
                    </scope>
                </method>
                <javadoc line="118">
                    Get the current unidimensional counter slot.                    
                    <@return>
                        n the index within the unidimensionl counter.                        
                    </@return>
                </javadoc>
                <method name="getCount" type="int" line="123"/>
                <javadoc line="126">
                    Get the current multidimensional counter slots.                    
                    <@return>
                        n the indices within the multidimensional counter.                        
                    </@return>
                </javadoc>
                <method name="getCounts" type="int[]" line="131"/>
                <javadoc line="135">
                    Get the current count in the selected dimension.                    
                    <@param>
                        m dim Dimension index.                        
                    </@param>
                    <@return>
                        n the count at the corresponding index for the current state
                          of the iterator.                        
                    </@return>
                    <@throws>
                        s IndexOutOfBoundsException if {@code index} is not in the
                          correct interval (as defined by the length of the argument in the{@link MultidimensionalCounter#MultidimensionalCounter(int[])constructor of the enclosing class}).                        
                    </@throws>
                </javadoc>
                <method name="getCount" type="int" line="146">
                    <params>
                        <param name="dim" type="int"/>
                    </params>
                </method>
                <javadoc line="150">
                    @throws UnsupportedOperationException                    
                </javadoc>
                <method name="remove" type="void" line="153"/>
            </class>
            <javadoc line="158">
                Create a counter.                
                <@param>
                    m size Counter sizes (number of slots in each dimension).                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if one of the sizes is
                      negative or zero.                    
                </@throws>
            </javadoc>
            <method name="MultidimensionalCounter" type="constructor" line="165">
                <params>
                    <param name="size" type="int"/>
                </params>
                <declaration name="tS" type="int" line="172"/>
                <scope line="173">
                    <declaration name="count" type="int" line="174"/>
                    <scope line="175"/>
                </scope>
                <scope line="183"/>
            </method>
            <javadoc line="190">
                Create an iterator over this counter.                
                <@return>
                    n the iterator.                    
                </@return>
            </javadoc>
            <method name="iterator" type="Iterator" line="195"/>
            <javadoc line="199">
                Get the number of dimensions of the multidimensional counter.                
                <@return>
                    n the number of dimensions.                    
                </@return>
            </javadoc>
            <method name="getDimension" type="int" line="204"/>
            <javadoc line="208">
                Convert to multidimensional counter.                
                <@param>
                    m index Index in unidimensional counter.                    
                </@param>
                <@return>
                    n the multidimensional counts.                    
                </@return>
                <@throws>
                    s OutOfRangeException if {@code index} is not between{@code 0} and the value returned by {@link #getSize()} (excluded).                    
                </@throws>
            </javadoc>
            <method name="getCounts" type="int[]" line="216">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="218"/>
                <declaration name="indices" type="int[]" line="222"/>
                <declaration name="count" type="int" line="224"/>
                <scope line="225">
                    <declaration name="idx" type="int" line="226"/>
                    <declaration name="offset" type="int" line="227"/>
                    <scope line="228"/>
                </scope>
            </method>
            <javadoc line="242">
                Convert to unidimensional counter.                
                <@param>
                    m c Indices in multidimensional counter.                    
                </@param>
                <@return>
                    n the index within the unidimensionl counter.                    
                </@return>
                <@throws>
                    s DimensionMismatchException if the size of {@code c}does not match the size of the array given in the constructor.                    
                </@throws>
                <@throws>
                    s OutOfRangeException if a value of {@code c} is not in
                      the range of the corresponding dimension, as defined in the{@link MultidimensionalCounter#MultidimensionalCounter(int...) constructor}.                    
                </@throws>
            </javadoc>
            <method name="getCount" type="int" line="254">
                <params>
                    <param name="c" type="int"/>
                </params>
                <scope line="255"/>
                <declaration name="count" type="int" line="258"/>
                <scope line="259">
                    <declaration name="index" type="int" line="260"/>
                    <scope line="262"/>
                </scope>
            </method>
            <javadoc line="270">
                Get the total number of elements.                
                <@return>
                    n the total size of the unidimensional counter.                    
                </@return>
            </javadoc>
            <method name="getSize" type="int" line="275"/>
            <javadoc line="278">
                Get the number of multidimensional counter slots in each dimension.                
                <@return>
                    n the sizes of the multidimensional counter in each dimension.                    
                </@return>
            </javadoc>
            <method name="getSizes" type="int[]" line="283"/>
            <javadoc line="287">
                {@inheritDoc}                
            </javadoc>
            <method name="toString" type="String" line="291">
                <declaration name="sb" type="StringBuilder" line="292"/>
                <scope line="293"/>
            </method>
        </class>
    </source>