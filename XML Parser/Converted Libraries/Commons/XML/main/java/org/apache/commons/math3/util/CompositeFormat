<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.text.FieldPosition"/>
        <import package="java.text.NumberFormat"/>
        <import package="java.text.ParsePosition"/>
        <import package="java.util.Locale"/>
        <class name="CompositeFormat" line="24">
            <javadoc line="24">
                Base class for formatters of composite objects (complex numbers, vectors ...).                
                <@version>
                    n $Id: CompositeFormat.java 1462503 2013-03-29 15:48:27Z luc $                    
                </@version>
            </javadoc>
            <javadoc line="31">
                Class contains only static methods.                
            </javadoc>
            <method name="CompositeFormat" type="constructor" line="34"/>
            <javadoc line="36">
                Create a default number format.  The default number format is based on{@link NumberFormat#getInstance()} with the only customizing that the
                 * maximum number of fraction digits is set to 10.                
                <@return>
                    n the default number format.                    
                </@return>
            </javadoc>
            <method name="getDefaultNumberFormat" type="NumberFormat" line="42"/>
            <javadoc line="46">
                Create a default number format.  The default number format is based on{@link NumberFormat#getInstance(java.util.Locale)} with the only
                 * customizing that the maximum number of fraction digits is set to 10.                
                <@param>
                    m locale the specific locale used by the format.                    
                </@param>
                <@return>
                    n the default number format specific to the given locale.                    
                </@return>
            </javadoc>
            <method name="getDefaultNumberFormat" type="NumberFormat" line="53">
                <declaration name="nf" type="NumberFormat" line="54"/>
            </method>
            <javadoc line="59">
                Parses &lt;code&gt;source&lt;/code&gt; until a non-whitespace character is found.                
                <@param>
                    m source the string to parse                    
                </@param>
                <@param>
                    m pos input/output parsing parameter.  On output, <code>pos</code>
                     * holds the index of the next non-whitespace character.                    
                </@param>
            </javadoc>
            <method name="parseAndIgnoreWhitespace" type="void" line="67"/>
            <javadoc line="72">
                Parses &lt;code&gt;source&lt;/code&gt; until a non-whitespace character is found.                
                <@param>
                    m source the string to parse                    
                </@param>
                <@param>
                    m pos input/output parsing parameter.                    
                </@param>
                <@return>
                    n the first non-whitespace character.                    
                </@return>
            </javadoc>
            <method name="parseNextCharacter" type="char" line="80">
                <declaration name="index" type="int" line="81"/>
                <declaration name="n" type="int" line="82"/>
                <declaration name="ret" type="char" line="83"/>
                <scope line="85">
                    <declaration name="c" type="char" line="86"/>
                    <scope line="87"/>
                    <scope line="92"/>
                </scope>
            </method>
            <javadoc line="100">
                Parses &lt;code&gt;source&lt;/code&gt; for special double values.  These values
                 * include Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY.                
                <@param>
                    m source the string to parse                    
                </@param>
                <@param>
                    m value the special value to parse.                    
                </@param>
                <@param>
                    m pos input/output parsing parameter.                    
                </@param>
                <@return>
                    n the special number.                    
                </@return>
            </javadoc>
            <method name="parseNumber" type="Number" line="110">
                <declaration name="ret" type="Number" line="111"/>
                <declaration name="sb" type="StringBuilder" line="113"/>
                <declaration name="n" type="int" line="118"/>
                <declaration name="startIndex" type="int" line="119"/>
                <declaration name="endIndex" type="int" line="120"/>
                <scope line="122"/>
            </method>
            <javadoc line="130">
                Parses &lt;code&gt;source&lt;/code&gt; for a number.  This method can parse normal,
                 * numeric values as well as special values.  These special values include
                 * Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY.                
                <@param>
                    m source the string to parse                    
                </@param>
                <@param>
                    m format the number format used to parse normal, numeric values.                    
                </@param>
                <@param>
                    m pos input/output parsing parameter.                    
                </@param>
                <@return>
                    n the parsed number.                    
                </@return>
            </javadoc>
            <method name="parseNumber" type="Number" line="141">
                <comment line="142">
                    check for error parsing number                    
                </comment>
                <declaration name="startIndex" type="int" line="142"/>
                <declaration name="number" type="Number" line="143"/>
                <declaration name="endIndex" type="int" line="144"/>
                <scope line="147">
                    <declaration name="special" type="double[]" line="149"/>
                    <scope line="152">
                        <scope line="154"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="163">
                Parse &lt;code&gt;source&lt;/code&gt; for an expected fixed string.                
                <@param>
                    m source the string to parse                    
                </@param>
                <@param>
                    m expected expected string                    
                </@param>
                <@param>
                    m pos input/output parsing parameter.                    
                </@param>
                <@return>
                    n true if the expected string was there                    
                </@return>
            </javadoc>
            <method name="parseFixedstring" type="boolean" line="172">
                <comment line="173">
                    the string was here                    
                </comment>
                <declaration name="startIndex" type="int" line="174"/>
                <declaration name="endIndex" type="int" line="175"/>
                <scope line="178"/>
            </method>
            <javadoc line="190">
                Formats a double value to produce a string.  In general, the value is
                 * formatted using the formatting rules of &lt;code&gt;format&lt;/code&gt;.  There are
                 * three exceptions to this:
                 * &lt;ol&gt;
                 * &lt;li&gt;NaN is formatted as &apos;(NaN)&apos;&lt;/li&gt;
                 * &lt;li&gt;Positive infinity is formatted as &apos;(Infinity)&apos;&lt;/li&gt;
                 * &lt;li&gt;Negative infinity is formatted as &apos;(-Infinity)&apos;&lt;/li&gt;
                 * &lt;/ol&gt;                
                <@param>
                    m value the double to format.                    
                </@param>
                <@param>
                    m format the format used.                    
                </@param>
                <@param>
                    m toAppendTo where the text is to be appended                    
                </@param>
                <@param>
                    m pos On input: an alignment field, if desired. On output: the
                     * offsets of the alignment field                    
                </@param>
                <@return>
                    n the value passed in as toAppendTo.                    
                </@return>
            </javadoc>
            <method name="formatDouble" type="StringBuffer" line="209">
                <scope line="210"/>
                <scope line="214"/>
            </method>
        </class>
    </source>