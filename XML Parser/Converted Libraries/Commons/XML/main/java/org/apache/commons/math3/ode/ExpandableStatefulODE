<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <class name="ExpandableStatefulODE" line="26">
            <javadoc line="26">
                This class represents a combined set of first order differential equations,
                  with at least a primary set of equations expandable by some sets of secondary
                  equations.
                  &lt;p&gt;
                  One typical use case is the computation of the Jacobian matrix for some ODE.
                  In this case, the primary set of equations corresponds to the raw ODE, and we
                  add to this set another bunch of secondary equations which represent the Jacobian
                  matrix of the primary set.
                  &lt;/p&gt;
                  &lt;p&gt;
                  We want the integrator to use &lt;em&gt;only&lt;/em&gt; the primary set to estimate the
                  errors and hence the step sizes. It should &lt;em&gt;not&lt;/em&gt; use the secondary
                  equations in this computation. The {@link AbstractIntegrator integrator} will
                  be able to know where the primary set ends and so where the secondary sets begin.
                  &lt;/p&gt;                
                <@see>
                    e FirstOrderDifferentialEquations                    
                </@see>
                <@see>
                    e JacobianMatrices                    
                </@see>
                <@version>
                    n $Id: ExpandableStatefulODE.java 1463680 2013-04-02 19:02:55Z luc $                    
                </@version>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="primary" type="FirstOrderDifferentialEquations" line="52"/>
            <javadoc line="52">
                Primary differential equation.                
            </javadoc>
            <declaration name="primaryMapper" type="EquationsMapper" line="55"/>
            <javadoc line="55">
                Mapper for primary equation.                
            </javadoc>
            <declaration name="time" type="double" line="58"/>
            <javadoc line="58">
                Time.                
            </javadoc>
            <declaration name="primaryState" type="double[]" line="61"/>
            <javadoc line="61">
                State.                
            </javadoc>
            <declaration name="primaryStateDot" type="double[]" line="64"/>
            <javadoc line="64">
                State derivative.                
            </javadoc>
            <declaration name="components" type="List&lt;SecondaryComponent&gt;" line="67"/>
            <javadoc line="67">
                Components of the expandable ODE.                
            </javadoc>
            <javadoc line="70">
                Build an expandable set from its primary ODE set.                
                <@param>
                    m primary the primary set of differential equations to be integrated.                    
                </@param>
            </javadoc>
            <method name="ExpandableStatefulODE" type="constructor" line="73">
                <params>
                    <param name="primary" type="FirstOrderDifferentialEquations"/>
                </params>
                <declaration name="n" type="int" line="74"/>
            </method>
            <javadoc line="83">
                Get the primary set of differential equations.                
                <@return>
                    n primary set of differential equations                    
                </@return>
            </javadoc>
            <method name="getPrimary" type="FirstOrderDifferentialEquations" line="86"/>
            <javadoc line="90">
                Return the dimension of the complete set of equations.
                  &lt;p&gt;
                  The complete set of equations correspond to the primary set plus all secondary sets.
                  &lt;/p&gt;                
                <@return>
                    n dimension of the complete set of equations                    
                </@return>
            </javadoc>
            <method name="getTotalDimension" type="int" line="96">
                <scope line="97"/>
                <scope line="100">
                    <declaration name="lastMapper" type="EquationsMapper" line="102"/>
                </scope>
            </method>
            <javadoc line="107">
                Get the current time derivative of the complete state vector.                
                <@param>
                    m t current value of the independent <I>time</I> variable                    
                </@param>
                <@param>
                    m y array containing the current value of the complete state vector                    
                </@param>
                <@param>
                    m yDot placeholder array where to put the time derivative of the complete state vector                    
                </@param>
                <@exception>
                    n MaxCountExceededException if the number of functions evaluations is exceeded                    
                </@exception>
                <@exception>
                    n DimensionMismatchException if arrays dimensions do not match equations settings                    
                </@exception>
            </javadoc>
            <method name="computeDerivatives" type="void" line="115">
                <params>
                    <param name="t" type="double"/>
                    <param name="y" type="double[]"/>
                    <param name="yDot" type="double[]"/>
                </params>
                <comment line="116">
                    compute derivatives of the primary equations                    
                </comment>
                <comment line="116">
                    Add contribution for secondary equations                    
                </comment>
                <scope line="122"/>
            </method>
            <javadoc line="133">
                Add a set of secondary equations to be integrated along with the primary set.                
                <@param>
                    m secondary secondary equations set                    
                </@param>
                <@return>
                    n index of the secondary equation in the expanded state                    
                </@return>
            </javadoc>
            <method name="addSecondaryEquations" type="int" line="137">
                <params>
                    <param name="secondary" type="SecondaryEquations"/>
                </params>
                <declaration name="firstIndex" type="int" line="139"/>
                <scope line="140"/>
                <scope line="144">
                    <declaration name="last" type="SecondaryComponent" line="145"/>
                </scope>
            </method>
            <javadoc line="155">
                Get an equations mapper for the primary equations set.                
                <@return>
                    n mapper for the primary set                    
                </@return>
                <@see>
                    e #getSecondaryMappers()                    
                </@see>
            </javadoc>
            <method name="getPrimaryMapper" type="EquationsMapper" line="159"/>
            <javadoc line="163">
                Get the equations mappers for the secondary equations sets.                
                <@return>
                    n equations mappers for the secondary equations sets                    
                </@return>
                <@see>
                    e #getPrimaryMapper()                    
                </@see>
            </javadoc>
            <method name="getSecondaryMappers" type="EquationsMapper[]" line="167">
                <declaration name="mappers" type="EquationsMapper[]" line="168"/>
                <scope line="169"/>
            </method>
            <javadoc line="175">
                Set current time.                
                <@param>
                    m time current time                    
                </@param>
            </javadoc>
            <method name="setTime" type="void" line="178">
                <params>
                    <param name="time" type="double"/>
                </params>
            </method>
            <javadoc line="182">
                Get current time.                
                <@return>
                    n current time                    
                </@return>
            </javadoc>
            <method name="getTime" type="double" line="185"/>
            <javadoc line="189">
                Set primary part of the current state.                
                <@param>
                    m primaryState primary part of the current state                    
                </@param>
                <@throws>
                    s DimensionMismatchException if the dimension of the array does not
                      match the primary set                    
                </@throws>
            </javadoc>
            <method name="setPrimaryState" type="void" line="194">
                <params>
                    <param name="primaryState" type="double[]"/>
                </params>
                <comment line="195">
                    safety checks                    
                </comment>
                <comment line="195">
                    set the data                    
                </comment>
                <scope line="197"/>
            </method>
            <javadoc line="206">
                Get primary part of the current state.                
                <@return>
                    n primary part of the current state                    
                </@return>
            </javadoc>
            <method name="getPrimaryState" type="double[]" line="209"/>
            <javadoc line="213">
                Get primary part of the current state derivative.                
                <@return>
                    n primary part of the current state derivative                    
                </@return>
            </javadoc>
            <method name="getPrimaryStateDot" type="double[]" line="216"/>
            <javadoc line="220">
                Set secondary part of the current state.                
                <@param>
                    m index index of the part to set as returned by {@link #addSecondaryEquations(SecondaryEquations)}                    
                </@param>
                <@param>
                    m secondaryState secondary part of the current state                    
                </@param>
                <@throws>
                    s DimensionMismatchException if the dimension of the partial state does not
                      match the selected equations set dimension                    
                </@throws>
            </javadoc>
            <method name="setSecondaryState" type="void" line="228">
                <params>
                    <param name="index" type="int"/>
                    <param name="secondaryState" type="double[]"/>
                </params>
                <comment line="229">
                    get either the secondary state                    
                </comment>
                <comment line="229">
                    safety checks                    
                </comment>
                <comment line="229">
                    set the data                    
                </comment>
                <declaration name="localArray" type="double[]" line="231"/>
                <scope line="234"/>
            </method>
            <javadoc line="243">
                Get secondary part of the current state.                
                <@param>
                    m index index of the part to set as returned by {@link #addSecondaryEquations(SecondaryEquations)}                    
                </@param>
                <@return>
                    n secondary part of the current state                    
                </@return>
            </javadoc>
            <method name="getSecondaryState" type="double[]" line="248">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="252">
                Get secondary part of the current state derivative.                
                <@param>
                    m index index of the part to set as returned by {@link #addSecondaryEquations(SecondaryEquations)}                    
                </@param>
                <@return>
                    n secondary part of the current state derivative                    
                </@return>
            </javadoc>
            <method name="getSecondaryStateDot" type="double[]" line="257">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="261">
                Set the complete current state.                
                <@param>
                    m completeState complete current state to copy data from                    
                </@param>
                <@throws>
                    s DimensionMismatchException if the dimension of the complete state does not
                      match the complete equations sets dimension                    
                </@throws>
            </javadoc>
            <method name="setCompleteState" type="void" line="267">
                <params>
                    <param name="completeState" type="double[]"/>
                </params>
                <comment line="268">
                    safety checks                    
                </comment>
                <comment line="268">
                    set the data                    
                </comment>
                <scope line="270"/>
                <scope line="276"/>
            </method>
            <javadoc line="282">
                Get the complete current state.                
                <@return>
                    n complete current state                    
                </@return>
                <@throws>
                    s DimensionMismatchException if the dimension of the complete state does not
                      match the complete equations sets dimension                    
                </@throws>
            </javadoc>
            <method name="getCompleteState" type="double[]" line="287">
                <comment line="288">
                    allocate complete array                    
                </comment>
                <comment line="288">
                    set the data                    
                </comment>
                <declaration name="completeState" type="double[]" line="290"/>
                <scope line="294"/>
            </method>
            <class name="SecondaryComponent" line="302">
                <javadoc line="302">
                    Components of the compound stateful ODE.                    
                </javadoc>
                <declaration name="equation" type="SecondaryEquations" line="305"/>
                <javadoc line="305">
                    Secondary differential equation.                    
                </javadoc>
                <declaration name="mapper" type="EquationsMapper" line="308"/>
                <javadoc line="308">
                    Mapper between local and complete arrays.                    
                </javadoc>
                <declaration name="state" type="double[]" line="311"/>
                <javadoc line="311">
                    State.                    
                </javadoc>
                <declaration name="stateDot" type="double[]" line="314"/>
                <javadoc line="314">
                    State derivative.                    
                </javadoc>
                <javadoc line="317">
                    Simple constructor.                    
                    <@param>
                        m equation secondary differential equation                        
                    </@param>
                    <@param>
                        m firstIndex index to use for the first element in the complete arrays                        
                    </@param>
                </javadoc>
                <method name="SecondaryComponent" type="constructor" line="321">
                    <params>
                        <param name="equation" type="SecondaryEquations"/>
                        <param name="firstIndex" type="int"/>
                    </params>
                    <declaration name="n" type="int" line="322"/>
                </method>
            </class>
        </class>
    </source>