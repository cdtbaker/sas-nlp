<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.primes">
        <import package="java.math.BigInteger"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="SmallPrimes" line="26">
            <javadoc line="26">
                Utility methods to work on primes within the &lt;code&gt;int&lt;/code&gt; range.                
                <@version>
                    n $Id: SmallPrimes.java 1462702 2013-03-30 04:45:52Z psteitz $                    
                </@version>
                <@since>
                    e 3.2                    
                </@since>
            </javadoc>
            <declaration name="PRIMES" type="int[]" line="33"/>
            <javadoc line="33">
                The first 512 prime numbers.
                 * &lt;p&gt;
                 * It contains all primes smaller or equal to the cubic square of Integer.MAX_VALUE.
                 * As a result, &lt;code&gt;int&lt;/code&gt; numbers which are not reduced by those primes are guaranteed
                 * to be either prime or semi prime.                
            </javadoc>
            <declaration name="PRIMES_LAST" type="int" line="68"/>
            <javadoc line="68">
                The last number in PRIMES.                
            </javadoc>
            <javadoc line="71">
                Hide utility class.                
            </javadoc>
            <method name="SmallPrimes" type="constructor" line="74"/>
            <javadoc line="77">
                Extract small factors.                
                <@param>
                    m n the number to factor, must be &gt; 0.                    
                </@param>
                <@param>
                    m factors the list where to add the factors.                    
                </@param>
                <@return>
                    n the part of n which remains to be factored, it is either a prime or a semi-prime                    
                </@return>
            </javadoc>
            <method name="smallTrialDivision" type="int" line="83">
                <scope line="84">
                    <scope line="85"/>
                </scope>
            </method>
            <javadoc line="93">
                Extract factors in the range &lt;code&gt;PRIME_LAST+2&lt;/code&gt; to &lt;code&gt;maxFactors&lt;/code&gt;.                
                <@param>
                    m n the number to factorize, must be >= PRIME_LAST+2 and must not contain any factor below PRIME_LAST+2                    
                </@param>
                <@param>
                    m maxFactor the upper bound of trial division: if it is reached, the method gives up and returns n.                    
                </@param>
                <@param>
                    m factors the list where to add the factors.                    
                </@param>
                <@return>
                    n  n or 1 if factorization is completed.                    
                </@return>
            </javadoc>
            <method name="boundedTrialDivision" type="int" line="100">
                <comment line="101">
                    no check is done about n &gt;= f                    
                </comment>
                <declaration name="f" type="int" line="101"/>
                <scope line="103">
                    <scope line="104"/>
                    <scope line="110"/>
                </scope>
                <scope line="117"/>
            </method>
            <javadoc line="123">
                Factorization by trial division.                
                <@param>
                    m n the number to factor                    
                </@param>
                <@return>
                    n the list of prime factors of n                    
                </@return>
            </javadoc>
            <method name="trialDivision" type="List<Integer>" line="128">
                <comment line="129">
                    here we are sure that n is either a prime or a semi prime                    
                </comment>
                <declaration name="factors" type="List&lt;Integer&gt;" line="129"/>
                <scope line="131"/>
                <declaration name="bound" type="int" line="135"/>
            </method>
            <javadoc line="140">
                Miller-Rabin probabilistic primality test for int type, used in such a way that a result is always guaranteed.
                 * &lt;p&gt;
                 * It uses the prime numbers as successive base therefore it is guaranteed to be always correct.
                 * (see Handbook of applied cryptography by Menezes, table 4.1)                
                <@param>
                    m n number to test: an odd integer &ge; 3                    
                </@param>
                <@return>
                    n true if n is prime. false if n is definitely composite.                    
                </@return>
            </javadoc>
            <method name="millerRabinPrimeTest" type="boolean" line="149">
                <comment line="150">
                    r must be odd, it is not checked here                    
                </comment>
                <comment line="150">
                    // works up to 3.2 billion, int range stops at 2.7 so we are safe :-)                    
                </comment>
                <comment line="150">
                    turn true; // definitely prime                    
                </comment>
                <declaration name="nMinus1" type="int" line="150"/>
                <declaration name="s" type="int" line="151"/>
                <declaration name="r" type="int" line="152"/>
                <declaration name="t" type="int" line="154"/>
                <scope line="155"/>
                <scope line="158"/>
                <scope line="161"/>
                <declaration name="br" type="BigInteger" line="164"/>
                <declaration name="bn" type="BigInteger" line="165"/>
                <scope line="167">
                    <declaration name="a" type="BigInteger" line="168"/>
                    <declaration name="bPow" type="BigInteger" line="169"/>
                    <declaration name="y" type="int" line="170"/>
                    <scope line="171">
                        <declaration name="j" type="int" line="172"/>
                        <scope line="173">
                            <declaration name="square" type="long" line="174"/>
                            <scope line="176"/>
                        </scope>
                        <scope line="181"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>