<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.integration.gauss">
        <import package="java.util.Map"/>
        <import package="java.util.TreeMap"/>
        <import package="org.apache.commons.math3.util.Pair"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="BaseRuleFactory" line="26">
            <javadoc line="26">
                Base class for rules that determines the integration nodes and their
                 * weights.
                 * Subclasses must implement the {@link #computeRule(int) computeRule} method.                
                <@param>
                    m<T>
                     *  Type of the number used to represent the points and weights of
                     * the quadrature rules.                    
                </@param>
                <@since>
                    e 3.1                    
                </@since>
                <@version>
                    n $Id: BaseRuleFactory.java 1455194 2013-03-11 15:45:54Z luc $                    
                </@version>
            </javadoc>
            <declaration name="pointsAndWeights" type="Map&lt;Integer,Pair&lt;T[],T[]&gt;&gt;" line="38"/>
            <javadoc line="38">
                List of points and weights, indexed by the order of the rule.                
            </javadoc>
            <declaration name="pointsAndWeightsDouble" type="Map&lt;Integer,Pair&lt;double[],double[]&gt;&gt;" line="41"/>
            <javadoc line="41">
                Cache for double-precision rules.                
            </javadoc>
            <javadoc line="45">
                Gets a copy of the quadrature rule with the given number of integration
                 * points.                
                <@param>
                    m numberOfPoints Number of integration points.                    
                </@param>
                <@return>
                    n a copy of the integration rule.                    
                </@return>
                <@throws>
                    s NotStrictlyPositiveException if {@code numberOfPoints < 1}.                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if the elements of the rule pair do not
                     * have the same length.                    
                </@throws>
            </javadoc>
            <method name="getRule" type="Pair<double[],double[]>" line="56">
                <comment line="57">
                    Try to obtain the rule from the cache.                    
                </comment>
                <comment line="57">
                    Return a copy.                    
                </comment>
                <scope line="58"/>
                <declaration name="cached" type="Pair&lt;double[],double[]&gt;" line="64"/>
                <scope line="66">
                    <declaration name="rule" type="Pair&lt;T[],T[]&gt;" line="70"/>
                </scope>
            </method>
            <javadoc line="82">
                Gets a rule.
                 * Synchronization ensures that rules will be computed and added to the
                 * cache at most once.
                 * The returned rule is a reference into the cache.                
                <@param>
                    m numberOfPoints Order of the rule to be retrieved.                    
                </@param>
                <@return>
                    n the points and weights corresponding to the given order.                    
                </@return>
                <@throws>
                    s DimensionMismatchException if the elements of the rule pair do not
                     * have the same length.                    
                </@throws>
            </javadoc>
            <method name="getRuleInternal" type="Pair<T[],T[]>" line="94">
                <declaration name="rule" type="Pair&lt;T[],T[]&gt;" line="95"/>
                <scope line="96"/>
            </method>
            <javadoc line="104">
                Stores a rule.                
                <@param>
                    m rule Rule to be stored.                    
                </@param>
                <@throws>
                    s DimensionMismatchException if the elements of the pair do not
                     * have the same length.                    
                </@throws>
            </javadoc>
            <method name="addRule" type="void" line="111">
                <scope line="112"/>
            </method>
            <method name="computeRule" type="Pair<T[],T[]>" line="120"/>
            <javadoc line="120">
                Computes the rule for the given order.                
                <@param>
                    m numberOfPoints Order of the rule to be computed.                    
                </@param>
                <@return>
                    n the computed rule.                    
                </@return>
                <@throws>
                    s DimensionMismatchException if the elements of the pair do not
                     * have the same length.                    
                </@throws>
            </javadoc>
            <javadoc line="131">
                Converts the from the actual {@code Number} type to {@code double}                
                <@param>
                    m<T>
                     *  Type of the number used to represent the points and
                     * weights of the quadrature rules.                    
                </@param>
                <@param>
                    m rule Points and weights.                    
                </@param>
                <@return>
                    n points and weights as {@code double}s.                    
                </@return>
            </javadoc>
            <method name="convertToDouble" type="Pair<double[],double[]>" line="139">
                <declaration name="pT" type="T[]" line="140"/>
                <declaration name="wT" type="T[]" line="141"/>
                <declaration name="len" type="int" line="143"/>
                <declaration name="pD" type="double[]" line="144"/>
                <declaration name="wD" type="double[]" line="145"/>
                <scope line="147"/>
            </method>
        </class>
    </source>