<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.direct">
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.function.Logit"/>
        <import package="org.apache.commons.math3.analysis.function.Sigmoid"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="MultivariateFunctionMappingAdapter" line="29">
            <implements interface="MultivariateFunction"/>
            <javadoc line="29">
                &lt;p&gt;Adapter for mapping bounded {@link MultivariateFunction} to unbounded ones.&lt;/p&gt;
                  &lt;p&gt;
                  This adapter can be used to wrap functions subject to simple bounds on
                  parameters so they can be used by optimizers that do &lt;em&gt;not&lt;/em&gt; directly
                  support simple bounds.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The principle is that the user function that will be wrapped will see its
                  parameters bounded as required, i.e when its {@code value} method is called
                  with argument array {@code point}, the elements array will fulfill requirement{@code lower[i] &lt;= point[i] &lt;= upper[i]} for all i. Some of the components
                  may be unbounded or bounded only on one side if the corresponding bound is
                  set to an infinite value. The optimizer will not manage the user function by
                  itself, but it will handle this adapter and it is this adapter that will take
                  care the bounds are fulfilled. The adapter {@link #value(double[])} method will
                  be called by the optimizer with unbound parameters, and the adapter will map
                  the unbounded value to the bounded range using appropriate functions like{@link Sigmoid} for double bounded elements for example.
                  &lt;/p&gt;
                  &lt;p&gt;
                  As the optimizer sees only unbounded parameters, it should be noted that the
                  start point or simplex expected by the optimizer should be unbounded, so the
                  user is responsible for converting his bounded point to unbounded by calling{@link #boundedToUnbounded(double[])} before providing them to the optimizer.
                  For the same reason, the point returned by the {@link org.apache.commons.math3.optimization.BaseMultivariateOptimizer#optimize(int,MultivariateFunction,org.apache.commons.math3.optimization.GoalType,double[])}method is unbounded. So to convert this point to bounded, users must call{@link #unboundedToBounded(double[])} by themselves!&lt;/p&gt;
                  &lt;p&gt;
                  This adapter is only a poor man solution to simple bounds optimization constraints
                  that can be used with simple optimizers like {@link SimplexOptimizer} with {@link NelderMeadSimplex} or {@link MultiDirectionalSimplex}. A better solution is to use
                  an optimizer that directly supports simple bounds like {@link CMAESOptimizer} or{@link BOBYQAOptimizer}. One caveat of this poor man solution is that behavior near
                  the bounds may be numerically unstable as bounds are mapped from infinite values.
                  Another caveat is that convergence values are evaluated by the optimizer with respect
                  to unbounded variables, so there will be scales differences when converted to bounded
                  variables.
                  &lt;/p&gt;                
                <@see>
                    e MultivariateFunctionPenaltyAdapter                    
                </@see>
                <@version>
                    n $Id: MultivariateFunctionMappingAdapter.java 1422230 2012-12-15 12:11:13Z erans $                    
                </@version>
                <@deprecated>
                    d As of 3.1 (to be removed in 4.0).                    
                </@deprecated>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="bounded" type="MultivariateFunction" line="82"/>
            <javadoc line="82">
                Underlying bounded function.                
            </javadoc>
            <declaration name="mappers" type="Mapper[]" line="85"/>
            <javadoc line="85">
                Mapping functions.                
            </javadoc>
            <javadoc line="88">
                Simple constructor.                
                <@param>
                    m bounded bounded function                    
                </@param>
                <@param>
                    m lower lower bounds for each element of the input parameters array
                      (some elements may be set to {@code Double.NEGATIVE_INFINITY} for
                      unbounded values)                    
                </@param>
                <@param>
                    m upper upper bounds for each element of the input parameters array
                      (some elements may be set to {@code Double.POSITIVE_INFINITY} for
                      unbounded values)                    
                </@param>
                <@exception>
                    n DimensionMismatchException if lower and upper bounds are not
                      consistent, either according to dimension or to values                    
                </@exception>
            </javadoc>
            <method name="MultivariateFunctionMappingAdapter" type="constructor" line="100">
                <params>
                    <param name="bounded" type="MultivariateFunction"/>
                    <param name="lower" type="double[]"/>
                    <param name="upper" type="double[]"/>
                </params>
                <comment line="101">
                    safety checks                    
                </comment>
                <scope line="105"/>
                <scope line="108">
                    <scope line="110"/>
                </scope>
                <scope line="117">
                    <scope line="118">
                        <scope line="119"/>
                        <scope line="122"/>
                    </scope>
                    <scope line="126">
                        <scope line="127"/>
                        <scope line="130"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="139">
                Map an array from unbounded to bounded.                
                <@param>
                    m point unbounded value                    
                </@param>
                <@return>
                    n bounded value                    
                </@return>
            </javadoc>
            <method name="unboundedToBounded" type="double[]" line="143">
                <params>
                    <param name="point" type="double[]"/>
                </params>
                <comment line="144">
                    map unbounded input point to bounded point                    
                </comment>
                <declaration name="mapped" type="double[]" line="146"/>
                <scope line="147"/>
            </method>
            <javadoc line="155">
                Map an array from bounded to unbounded.                
                <@param>
                    m point bounded value                    
                </@param>
                <@return>
                    n unbounded value                    
                </@return>
            </javadoc>
            <method name="boundedToUnbounded" type="double[]" line="159">
                <params>
                    <param name="point" type="double[]"/>
                </params>
                <comment line="160">
                    map bounded input point to unbounded point                    
                </comment>
                <declaration name="mapped" type="double[]" line="162"/>
                <scope line="163"/>
            </method>
            <javadoc line="171">
                Compute the underlying function value from an unbounded point.
                  &lt;p&gt;
                  This method simply bounds the unbounded point using the mappings
                  set up at construction and calls the underlying function using
                  the bounded point.
                  &lt;/p&gt;                
                <@param>
                    m point unbounded value                    
                </@param>
                <@return>
                    n underlying function value                    
                </@return>
                <@see>
                    e #unboundedToBounded(double[])                    
                </@see>
            </javadoc>
            <method name="value" type="double" line="181">
                <params>
                    <param name="point" type="double[]"/>
                </params>
            </method>
            <interface name="Mapper">
                <javadoc line="185">
                    Mapping interface.                    
                </javadoc>
                <method name="unboundedToBounded" type="double" line="188"/>
                <javadoc line="188">
                    Map a value from unbounded to bounded.                    
                    <@param>
                        m y unbounded value                        
                    </@param>
                    <@return>
                        n bounded value                        
                    </@return>
                </javadoc>
                <method name="boundedToUnbounded" type="double" line="194"/>
                <javadoc line="194">
                    Map a value from bounded to unbounded.                    
                    <@param>
                        m x bounded value                        
                    </@param>
                    <@return>
                        n unbounded value                        
                    </@return>
                </javadoc>
            </interface>
            <class name="NoBoundsMapper" line="202">
                <implements interface="Mapper"/>
                <javadoc line="202">
                    Local class for no bounds mapping.                    
                </javadoc>
                <javadoc line="205">
                    Simple constructor.                    
                </javadoc>
                <method name="NoBoundsMapper" type="constructor" line="207"/>
                <javadoc line="210">
                    {@inheritDoc}                    
                </javadoc>
                <method name="unboundedToBounded" type="double" line="211">
                    <params>
                        <param name="y" type="double"/>
                    </params>
                </method>
                <javadoc line="215">
                    {@inheritDoc}                    
                </javadoc>
                <method name="boundedToUnbounded" type="double" line="216">
                    <params>
                        <param name="x" type="double"/>
                    </params>
                </method>
            </class>
            <class name="LowerBoundMapper" line="222">
                <implements interface="Mapper"/>
                <javadoc line="222">
                    Local class for lower bounds mapping.                    
                </javadoc>
                <declaration name="lower" type="double" line="225"/>
                <javadoc line="225">
                    Low bound.                    
                </javadoc>
                <javadoc line="228">
                    Simple constructor.                    
                    <@param>
                        m lower lower bound                        
                    </@param>
                </javadoc>
                <method name="LowerBoundMapper" type="constructor" line="231">
                    <params>
                        <param name="lower" type="double"/>
                    </params>
                </method>
                <javadoc line="235">
                    {@inheritDoc}                    
                </javadoc>
                <method name="unboundedToBounded" type="double" line="236">
                    <params>
                        <param name="y" type="double"/>
                    </params>
                </method>
                <javadoc line="240">
                    {@inheritDoc}                    
                </javadoc>
                <method name="boundedToUnbounded" type="double" line="241">
                    <params>
                        <param name="x" type="double"/>
                    </params>
                </method>
            </class>
            <class name="UpperBoundMapper" line="247">
                <implements interface="Mapper"/>
                <javadoc line="247">
                    Local class for upper bounds mapping.                    
                </javadoc>
                <declaration name="upper" type="double" line="250"/>
                <javadoc line="250">
                    Upper bound.                    
                </javadoc>
                <javadoc line="253">
                    Simple constructor.                    
                    <@param>
                        m upper upper bound                        
                    </@param>
                </javadoc>
                <method name="UpperBoundMapper" type="constructor" line="256">
                    <params>
                        <param name="upper" type="double"/>
                    </params>
                </method>
                <javadoc line="260">
                    {@inheritDoc}                    
                </javadoc>
                <method name="unboundedToBounded" type="double" line="261">
                    <params>
                        <param name="y" type="double"/>
                    </params>
                </method>
                <javadoc line="265">
                    {@inheritDoc}                    
                </javadoc>
                <method name="boundedToUnbounded" type="double" line="266">
                    <params>
                        <param name="x" type="double"/>
                    </params>
                </method>
            </class>
            <class name="LowerUpperBoundMapper" line="272">
                <implements interface="Mapper"/>
                <javadoc line="272">
                    Local class for lower and bounds mapping.                    
                </javadoc>
                <declaration name="boundingFunction" type="UnivariateFunction" line="275"/>
                <javadoc line="275">
                    Function from unbounded to bounded.                    
                </javadoc>
                <declaration name="unboundingFunction" type="UnivariateFunction" line="278"/>
                <javadoc line="278">
                    Function from bounded to unbounded.                    
                </javadoc>
                <javadoc line="281">
                    Simple constructor.                    
                    <@param>
                        m lower lower bound                        
                    </@param>
                    <@param>
                        m upper upper bound                        
                    </@param>
                </javadoc>
                <method name="LowerUpperBoundMapper" type="constructor" line="285">
                    <params>
                        <param name="lower" type="double"/>
                        <param name="upper" type="double"/>
                    </params>
                </method>
                <javadoc line="290">
                    {@inheritDoc}                    
                </javadoc>
                <method name="unboundedToBounded" type="double" line="291">
                    <params>
                        <param name="y" type="double"/>
                    </params>
                </method>
                <javadoc line="295">
                    {@inheritDoc}                    
                </javadoc>
                <method name="boundedToUnbounded" type="double" line="296">
                    <params>
                        <param name="x" type="double"/>
                    </params>
                </method>
            </class>
        </class>
    </source>