<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="TricubicSplineInterpolator" line="25">
            <implements interface="TrivariateGridInterpolator"/>
            <javadoc line="25">
                Generates a tricubic interpolating function.                
                <@since>
                    e 2.2                    
                </@since>
                <@version>
                    n $Id: TricubicSplineInterpolator.java 1455194 2013-03-11 15:45:54Z luc $                    
                </@version>
            </javadoc>
            <javadoc line="33">
                {@inheritDoc}                
            </javadoc>
            <method name="interpolate" type="TricubicSplineInterpolatingFunction" line="41">
                <params>
                    <param name="xval" type="double[]"/>
                    <param name="yval" type="double[]"/>
                    <param name="zval" type="double[]"/>
                    <param name="fval" type="double[][][]"/>
                </params>
                <comment line="42">
                    Samples, re-ordered as (z, x, y) and (y, z, x) tuplets                    
                </comment>
                <comment line="42">
                    fvalXY[k][i][j] = f(xval[i], yval[j], zval[k])                    
                </comment>
                <comment line="42">
                    fvalZX[j][k][i] = f(xval[i], yval[j], zval[k])                    
                </comment>
                <comment line="42">
                    For each line x[i] (0 &lt;= i &lt; xLen), construct a 2D spline in y and z                    
                </comment>
                <comment line="42">
                    For each line y[j] (0 &lt;= j &lt; yLen), construct a 2D spline in z and x                    
                </comment>
                <comment line="42">
                    For each line z[k] (0 &lt;= k &lt; zLen), construct a 2D spline in x and y                    
                </comment>
                <comment line="42">
                    Partial derivatives wrt x and wrt y                    
                </comment>
                <comment line="42">
                    Partial derivatives wrt y and wrt z                    
                </comment>
                <comment line="42">
                    Partial derivatives wrt x and wrt z                    
                </comment>
                <comment line="42">
                    Third partial cross-derivatives                    
                </comment>
                <comment line="42">
                    Create the interpolating splines                    
                </comment>
                <scope line="42"/>
                <scope line="45"/>
                <declaration name="xLen" type="int" line="53"/>
                <declaration name="yLen" type="int" line="54"/>
                <declaration name="zLen" type="int" line="55"/>
                <declaration name="fvalXY" type="double[][][]" line="60"/>
                <declaration name="fvalZX" type="double[][][]" line="61"/>
                <scope line="62">
                    <scope line="63"/>
                    <scope line="67">
                        <scope line="68"/>
                        <scope line="72">
                            <declaration name="v" type="double" line="73"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="bsi" type="BicubicSplineInterpolator" line="80"/>
                <declaration name="xSplineYZ" type="BicubicSplineInterpolatingFunction[]" line="83"/>
                <scope line="85"/>
                <declaration name="ySplineZX" type="BicubicSplineInterpolatingFunction[]" line="90"/>
                <scope line="92"/>
                <declaration name="zSplineXY" type="BicubicSplineInterpolatingFunction[]" line="97"/>
                <scope line="99"/>
                <declaration name="dFdX" type="double[][][]" line="104"/>
                <declaration name="dFdY" type="double[][][]" line="105"/>
                <declaration name="d2FdXdY" type="double[][][]" line="106"/>
                <scope line="107">
                    <declaration name="f" type="BicubicSplineInterpolatingFunction" line="108"/>
                    <scope line="109">
                        <declaration name="x" type="double" line="110"/>
                        <scope line="111">
                            <declaration name="y" type="double" line="112"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="dFdZ" type="double[][][]" line="121"/>
                <declaration name="d2FdYdZ" type="double[][][]" line="122"/>
                <scope line="123">
                    <declaration name="f" type="BicubicSplineInterpolatingFunction" line="124"/>
                    <scope line="125">
                        <declaration name="y" type="double" line="126"/>
                        <scope line="127">
                            <declaration name="z" type="double" line="128"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="d2FdZdX" type="double[][][]" line="136"/>
                <scope line="137">
                    <declaration name="f" type="BicubicSplineInterpolatingFunction" line="138"/>
                    <scope line="139">
                        <declaration name="z" type="double" line="140"/>
                        <scope line="141">
                            <declaration name="x" type="double" line="142"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="d3FdXdYdZ" type="double[][][]" line="149"/>
                <scope line="150">
                    <declaration name="nI" type="int" line="151"/>
                    <declaration name="pI" type="int" line="152"/>
                    <scope line="153">
                        <declaration name="nJ" type="int" line="154"/>
                        <declaration name="pJ" type="int" line="155"/>
                        <scope line="156">
                            <declaration name="nK" type="int" line="157"/>
                            <declaration name="pK" type="int" line="158"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="177">
                Compute the next index of an array, clipping if necessary.
                  It is assumed (but not checked) that {@code i} is larger than or equal to 0}.                
                <@param>
                    m i Index                    
                </@param>
                <@param>
                    m max Upper limit of the array                    
                </@param>
                <@return>
                    n the next index                    
                </@return>
            </javadoc>
            <method name="nextIndex" type="int" line="185">
                <params>
                    <param name="i" type="int"/>
                    <param name="max" type="int"/>
                </params>
                <declaration name="index" type="int" line="186"/>
            </method>
            <javadoc line="189">
                Compute the previous index of an array, clipping if necessary.
                  It is assumed (but not checked) that {@code i} is smaller than the size of the array.                
                <@param>
                    m i Index                    
                </@param>
                <@return>
                    n the previous index                    
                </@return>
            </javadoc>
            <method name="previousIndex" type="int" line="196">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="index" type="int" line="197"/>
            </method>
        </class>
    </source>