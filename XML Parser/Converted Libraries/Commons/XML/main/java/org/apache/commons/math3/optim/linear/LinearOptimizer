<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.linear">
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="org.apache.commons.math3.exception.TooManyIterationsException"/>
        <import package="org.apache.commons.math3.optim.OptimizationData"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer"/>
        <class name="LinearOptimizer" extends="MultivariateOptimizer" line="26">
            <javadoc line="26">
                Base class for implementing linear optimizers.                
                <@version>
                    n $Id: LinearOptimizer.java 1443444 2013-02-07 12:41:36Z erans $                    
                </@version>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <declaration name="function" type="LinearObjectiveFunction" line="34"/>
            <javadoc line="34">
                Linear objective function.                
            </javadoc>
            <declaration name="linearConstraints" type="Collection&lt;LinearConstraint&gt;" line="38"/>
            <javadoc line="38">
                Linear constraints.                
            </javadoc>
            <declaration name="nonNegative" type="boolean" line="42"/>
            <javadoc line="42">
                Whether to restrict the variables to non-negative values.                
            </javadoc>
            <javadoc line="47">
                Simple constructor with default settings.                
            </javadoc>
            <method name="LinearOptimizer" type="constructor" line="51">
                <comment line="52">
                    per(null); // No convergence checker.                    
                </comment>
            </method>
            <javadoc line="55">
                @return {@code true} if the variables are restricted to non-negative values.                
            </javadoc>
            <method name="isRestrictedToNonNegative" type="boolean" line="58"/>
            <javadoc line="62">
                @return the optimization type.                
            </javadoc>
            <method name="getFunction" type="LinearObjectiveFunction" line="65"/>
            <javadoc line="69">
                @return the optimization type.                
            </javadoc>
            <method name="getConstraints" type="Collection<LinearConstraint>" line="72"/>
            <javadoc line="76">
                {@inheritDoc}                
                <@param>
                    m optData Optimization data. In addition to those documented in{@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])MultivariateOptimizer}, this method will register the following data:
                     * <ul>
                     * <li>{@link LinearObjectiveFunction}</li>
                     * <li>{@link LinearConstraintSet}</li>
                     * <li>{@link NonNegativeConstraint}</li>
                     * </ul>                    
                </@param>
                <@return>
                    n {@inheritDoc}                    
                </@return>
                <@throws>
                    s TooManyIterationsException if the maximal number of
                     * iterations is exceeded.                    
                </@throws>
            </javadoc>
            <method name="optimize" type="PointValuePair" line="93">
                <comment line="94">
                    Set up base class and perform computation.                    
                </comment>
            </method>
            <javadoc line="98">
                Scans the list of (required and optional) optimization data that
                 * characterize the problem.                
                <@param>
                    m optData Optimization data.
                     * The following data will be looked for:
                     * <ul>
                     * <li>{@link LinearObjectiveFunction}</li>
                     * <li>{@link LinearConstraintSet}</li>
                     * <li>{@link NonNegativeConstraint}</li>
                     * </ul>                    
                </@param>
            </javadoc>
            <method name="parseOptimizationData" type="void" line="111">
                <comment line="112">
                    Allow base class to register its own data.                    
                </comment>
                <comment line="112">
                    The existing values (as set by the previous call) are reused if                    
                </comment>
                <comment line="112">
                    not provided in the argument list.                    
                </comment>
                <scope line="117">
                    <scope line="118"/>
                    <scope line="122"/>
                    <scope line="126"/>
                </scope>
            </method>
        </class>
    </source>