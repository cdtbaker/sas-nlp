<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive.rank">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Max" extends="AbstractStorelessUnivariateStatistic" line="26">
            <implements interface="Serializable"/>
            <javadoc line="26">
                Returns the maximum of the available values.
                 * &lt;p&gt;
                 * &lt;ul&gt;
                 * &lt;li&gt;The result is &lt;code&gt;NaN&lt;/code&gt; iff all values are &lt;code&gt;NaN&lt;/code&gt;
                 * (i.e. &lt;code&gt;NaN&lt;/code&gt; values have no impact on the value of the statistic).&lt;/li&gt;
                 * &lt;li&gt;If any of the values equals &lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt;,
                 * the result is &lt;code&gt;Double.POSITIVE_INFINITY.&lt;/code&gt;&lt;/li&gt;
                 * &lt;/ul&gt;&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
                 * multiple threads access an instance of this class concurrently, and at least
                 * one of the threads invokes the &lt;code&gt;increment()&lt;/code&gt; or
                 * &lt;code&gt;clear()&lt;/code&gt; method, it must be synchronized externally.&lt;/p&gt;                
                <@version>
                    n $Id: Max.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="45"/>
            <javadoc line="45">
                Serializable version identifier                
            </javadoc>
            <declaration name="n" type="long" line="48"/>
            <javadoc line="48">
                Number of values that have been added                
            </javadoc>
            <declaration name="value" type="double" line="51"/>
            <javadoc line="51">
                Current value of the statistic                
            </javadoc>
            <javadoc line="54">
                Create a Max instance                
            </javadoc>
            <method name="Max" type="constructor" line="57"/>
            <javadoc line="62">
                Copy constructor, creates a new {@code Max} identical
                 * to the {@code original}                
                <@param>
                    m original the {@code Max} instance to copy                    
                </@param>
                <@throws>
                    s NullArgumentException if original is null                    
                </@throws>
            </javadoc>
            <method name="Max" type="constructor" line="69"/>
            <javadoc line="73">
                {@inheritDoc}                
            </javadoc>
            <method name="increment" type="void" line="77">
                <scope line="78"/>
            </method>
            <javadoc line="84">
                {@inheritDoc}                
            </javadoc>
            <method name="clear" type="void" line="88"/>
            <javadoc line="93">
                {@inheritDoc}                
            </javadoc>
            <method name="getResult" type="double" line="97"/>
            <javadoc line="101">
                {@inheritDoc}                
            </javadoc>
            <method name="getN" type="long" line="104"/>
            <javadoc line="108">
                Returns the maximum of the entries in the specified portion of
                 * the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                 * is empty.
                 * &lt;p&gt;
                 * Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null or
                 * the array index parameters are not valid.&lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;ul&gt;
                 * &lt;li&gt;The result is &lt;code&gt;NaN&lt;/code&gt; iff all values are &lt;code&gt;NaN&lt;/code&gt;
                 * (i.e. &lt;code&gt;NaN&lt;/code&gt; values have no impact on the value of the statistic).&lt;/li&gt;
                 * &lt;li&gt;If any of the values equals &lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt;,
                 * the result is &lt;code&gt;Double.POSITIVE_INFINITY.&lt;/code&gt;&lt;/li&gt;
                 * &lt;/ul&gt;&lt;/p&gt;                
                <@param>
                    m values the input array                    
                </@param>
                <@param>
                    m begin index of the first array element to include                    
                </@param>
                <@param>
                    m length the number of elements to include                    
                </@param>
                <@return>
                    n the maximum of the values or Double.NaN if length = 0                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException if the array is null or the array index
                     * parameters are not valid                    
                </@throws>
            </javadoc>
            <method name="evaluate" type="double" line="132">
                <declaration name="max" type="double" line="133"/>
                <scope line="134">
                    <scope line="136">
                        <scope line="137"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="145">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="Max" line="149">
                <comment line="150">
                    No try-catch or advertised exception because args are non-null                    
                </comment>
                <declaration name="result" type="Max" line="150"/>
            </method>
            <javadoc line="156">
                Copies source to dest.
                 * &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;                
                <@param>
                    m source Max to copy                    
                </@param>
                <@param>
                    m dest Max to copy to                    
                </@param>
                <@throws>
                    s NullArgumentException if either source or dest is null                    
                </@throws>
            </javadoc>
            <method name="copy" type="void" line="165"/>
        </class>
    </source>