<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.random">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="MersenneTwister" extends="BitsStreamGenerator" line="24">
            <implements interface="Serializable"/>
            <javadoc line="24">
                This class implements a powerful pseudo-random number generator
                 * developed by Makoto Matsumoto and Takuji Nishimura during
                 * 1996-1997.
                 * &lt;p&gt;This generator features an extremely long period
                 * (2&lt;sup&gt;19937&lt;/sup&gt;-1) and 623-dimensional equidistribution up to 32
                 * bits accuracy. The home page for this generator is located at &lt;a
                 * href=&quot;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html&quot;&gt;
                 * http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html&lt;/a&gt;.&lt;/p&gt;
                 * &lt;p&gt;This generator is described in a paper by Makoto Matsumoto and
                 * Takuji Nishimura in 1998: &lt;a
                 * href=&quot;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/ARTICLES/mt.pdf&quot;&gt;Mersenne
                 * Twister: A 623-Dimensionally Equidistributed Uniform Pseudo-Random
                 * Number Generator&lt;/a&gt;, ACM Transactions on Modeling and Computer
                 * Simulation, Vol. 8, No. 1, January 1998, pp 3--30&lt;/p&gt;
                 * &lt;p&gt;This class is mainly a Java port of the 2002-01-26 version of
                 * the generator written in C by Makoto Matsumoto and Takuji
                 * Nishimura. Here is their original copyright:&lt;/p&gt;
                 * &lt;table border=&quot;0&quot; width=&quot;80%&quot; cellpadding=&quot;10&quot; align=&quot;center&quot; bgcolor=&quot;#E0E0E0&quot;&gt;
                 * &lt;tr&gt;&lt;td&gt;Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
                 * All rights reserved.&lt;/td&gt;&lt;/tr&gt;
                 * &lt;tr&gt;&lt;td&gt;Redistribution and use in source and binary forms, with or without
                 * modification, are permitted provided that the following conditions
                 * are met:
                 * &lt;ol&gt;
                 * &lt;li&gt;Redistributions of source code must retain the above copyright
                 * notice, this list of conditions and the following disclaimer.&lt;/li&gt;
                 * &lt;li&gt;Redistributions in binary form must reproduce the above copyright
                 * notice, this list of conditions and the following disclaimer in the
                 * documentation and/or other materials provided with the distribution.&lt;/li&gt;
                 * &lt;li&gt;The names of its contributors may not be used to endorse or promote
                 * products derived from this software without specific prior written
                 * permission.&lt;/li&gt;
                 * &lt;/ol&gt;&lt;/td&gt;&lt;/tr&gt;
                 * &lt;tr&gt;&lt;td&gt;&lt;strong&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
                 * CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES,
                 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
                 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                 * DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
                 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
                 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
                 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
                 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
                 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
                 * DAMAGE.&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
                 * &lt;/table&gt;                
                <@version>
                    n $Id: MersenneTwister.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="84"/>
            <javadoc line="84">
                Serializable version identifier.                
            </javadoc>
            <declaration name="N" type="int" line="87"/>
            <javadoc line="87">
                Size of the bytes pool.                
            </javadoc>
            <declaration name="M" type="int" line="90"/>
            <javadoc line="90">
                Period second parameter.                
            </javadoc>
            <declaration name="MAG01" type="int[]" line="93"/>
            <javadoc line="93">
                X * MATRIX_A for X = {0, 1}.                
            </javadoc>
            <declaration name="mt" type="int[]" line="96"/>
            <javadoc line="96">
                Bytes pool.                
            </javadoc>
            <declaration name="mti" type="int" line="99"/>
            <javadoc line="99">
                Current index in the bytes pool.                
            </javadoc>
            <javadoc line="102">
                Creates a new random number generator.
                 * &lt;p&gt;The instance is initialized using the current time plus the
                 * system identity hash code of this instance as the seed.&lt;/p&gt;                
            </javadoc>
            <method name="MersenneTwister" type="constructor" line="106"/>
            <javadoc line="111">
                Creates a new random number generator using a single int seed.                
                <@param>
                    m seed the initial seed (32 bits integer)                    
                </@param>
            </javadoc>
            <method name="MersenneTwister" type="constructor" line="114"/>
            <javadoc line="119">
                Creates a new random number generator using an int array seed.                
                <@param>
                    m seed the initial seed (32 bits integers array), if null
                     * the seed of the generator will be related to the current time                    
                </@param>
            </javadoc>
            <method name="MersenneTwister" type="constructor" line="123"/>
            <javadoc line="128">
                Creates a new random number generator using a single long seed.                
                <@param>
                    m seed the initial seed (64 bits integer)                    
                </@param>
            </javadoc>
            <method name="MersenneTwister" type="constructor" line="131"/>
            <javadoc line="136">
                Reinitialize the generator as if just built with the given int seed.
                 * &lt;p&gt;The state of the generator is exactly the same as a new
                 * generator built with the same seed.&lt;/p&gt;                
                <@param>
                    m seed the initial seed (32 bits integer)                    
                </@param>
            </javadoc>
            <method name="setSeed" type="void" line="142">
                <comment line="143">
                    we use a long masked by 0xffffffffL as a poor man unsigned int                    
                </comment>
                <comment line="143">
                    NB: unlike original C code, we are working with java longs, the cast below makes masking unnecessary                    
                </comment>
                <comment line="143">
                    ear(); // Clear normal deviate cache                    
                </comment>
                <declaration name="longMT" type="long" line="144"/>
                <scope line="147"/>
            </method>
            <javadoc line="157">
                Reinitialize the generator as if just built with the given int array seed.
                 * &lt;p&gt;The state of the generator is exactly the same as a new
                 * generator built with the same seed.&lt;/p&gt;                
                <@param>
                    m seed the initial seed (32 bits integers array), if null
                     * the seed of the generator will be the current system time plus the
                     * system identity hash code of this instance                    
                </@param>
            </javadoc>
            <method name="setSeed" type="void" line="165">
                <comment line="166">
                    [0] = 0x80000000; // MSB is 1; assuring non-zero initial array                    
                </comment>
                <comment line="166">
                    ear(); // Clear normal deviate cache                    
                </comment>
                <scope line="167"/>
                <declaration name="i" type="int" line="173"/>
                <declaration name="j" type="int" line="174"/>
                <scope line="176">
                    <declaration name="l0" type="long" line="177"/>
                    <declaration name="l1" type="long" line="178"/>
                    <declaration name="l" type="long" line="179"/>
                    <scope line="182"/>
                    <scope line="186"/>
                </scope>
                <scope line="191">
                    <declaration name="l0" type="long" line="192"/>
                    <declaration name="l1" type="long" line="193"/>
                    <declaration name="l" type="long" line="194"/>
                    <scope line="197"/>
                </scope>
            </method>
            <javadoc line="209">
                Reinitialize the generator as if just built with the given long seed.
                 * &lt;p&gt;The state of the generator is exactly the same as a new
                 * generator built with the same seed.&lt;/p&gt;                
                <@param>
                    m seed the initial seed (64 bits integer)                    
                </@param>
            </javadoc>
            <method name="setSeed" type="void" line="215"/>
            <javadoc line="219">
                Generate next pseudorandom number.
                 * &lt;p&gt;This method is the core generation algorithm. It is used by all the
                 * public generation methods for the various primitive types {@link #nextBoolean()}, {@link #nextBytes(byte[])}, {@link #nextDouble()},{@link #nextFloat()}, {@link #nextGaussian()}, {@link #nextInt()},{@link #next(int)} and {@link #nextLong()}.&lt;/p&gt;                
                <@param>
                    m bits number of random bits to produce                    
                </@param>
                <@return>
                    n random bits generated                    
                </@return>
            </javadoc>
            <method name="next" type="int" line="229">
                <comment line="230">
                    tempering                    
                </comment>
                <declaration name="y" type="int" line="231"/>
                <scope line="233">
                    <declaration name="mtNext" type="int" line="234"/>
                    <scope line="235">
                        <declaration name="mtCurr" type="int" line="236"/>
                    </scope>
                    <scope line="241">
                        <declaration name="mtCurr" type="int" line="242"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>