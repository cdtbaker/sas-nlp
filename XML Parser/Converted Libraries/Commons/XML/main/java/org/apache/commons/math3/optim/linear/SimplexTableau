<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.linear">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="java.util.TreeSet"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.MatrixUtils"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.RealVector"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.GoalType"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="SimplexTableau" line="39">
            <implements interface="Serializable"/>
            <javadoc line="39">
                A tableau for use in the Simplex method.
                 * &lt;p&gt;
                 * Example:
                 * &lt;pre&gt;
                 * W |  Z |  x1 |  x2 |  x- | s1 |  s2 |  a1 |  RHS
                 * ---------------------------------------------------
                 * -1    0    0     0     0     0     0     1     0   &amp;lt;= phase 1 objective
                 * 0    1   -15   -10    0     0     0     0     0   &amp;lt;= phase 2 objective
                 * 0    0    1     0     0     1     0     0     2   &amp;lt;= constraint 1
                 * 0    0    0     1     0     0     1     0     3   &amp;lt;= constraint 2
                 * 0    0    1     1     0     0     0     1     4   &amp;lt;= constraint 3
                 * &lt;/pre&gt;
                 * W: Phase 1 objective function&lt;/br&gt;
                 * Z: Phase 2 objective function&lt;/br&gt;
                 * x1 &amp;amp; x2: Decision variables&lt;/br&gt;
                 * x-: Extra decision variable to allow for negative values&lt;/br&gt;
                 * s1 &amp;amp; s2: Slack/Surplus variables&lt;/br&gt;
                 * a1: Artificial variable&lt;/br&gt;
                 * RHS: Right hand side&lt;/br&gt;
                 * &lt;/p&gt;                
                <@version>
                    n $Id: SimplexTableau.java 1435810 2013-01-20 10:04:45Z tn $                    
                </@version>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <declaration name="NEGATIVE_VAR_COLUMN_LABEL" type="String" line="66"/>
            <javadoc line="66">
                Column label for negative vars.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="69"/>
            <javadoc line="69">
                Serializable version identifier.                
            </javadoc>
            <declaration name="f" type="LinearObjectiveFunction" line="72"/>
            <javadoc line="72">
                Linear objective function.                
            </javadoc>
            <declaration name="constraints" type="List&lt;LinearConstraint&gt;" line="75"/>
            <javadoc line="75">
                Linear constraints.                
            </javadoc>
            <declaration name="restrictToNonNegative" type="boolean" line="78"/>
            <javadoc line="78">
                Whether to restrict the variables to non-negative values.                
            </javadoc>
            <declaration name="columnLabels" type="List&lt;String&gt;" line="81"/>
            <javadoc line="81">
                The variables each column represents                
            </javadoc>
            <declaration name="tableau" type="RealMatrix" line="84"/>
            <javadoc line="84">
                Simple tableau.                
            </javadoc>
            <declaration name="numDecisionVariables" type="int" line="87"/>
            <javadoc line="87">
                Number of decision variables.                
            </javadoc>
            <declaration name="numSlackVariables" type="int" line="90"/>
            <javadoc line="90">
                Number of slack variables.                
            </javadoc>
            <declaration name="numArtificialVariables" type="int" line="93"/>
            <javadoc line="93">
                Number of artificial variables.                
            </javadoc>
            <declaration name="epsilon" type="double" line="96"/>
            <javadoc line="96">
                Amount of error to accept when checking for optimality.                
            </javadoc>
            <declaration name="maxUlps" type="int" line="99"/>
            <javadoc line="99">
                Amount of error to accept in floating point comparisons.                
            </javadoc>
            <declaration name="cutOff" type="double" line="102"/>
            <javadoc line="102">
                Cut-off value for entries in the tableau.                
            </javadoc>
            <javadoc line="105">
                Builds a tableau for a linear problem.                
                <@param>
                    m f Linear objective function.                    
                </@param>
                <@param>
                    m constraints Linear constraints.                    
                </@param>
                <@param>
                    m goalType Optimization goal: either {@link GoalType#MAXIMIZE}or {@link GoalType#MINIMIZE}.                    
                </@param>
                <@param>
                    m restrictToNonNegative Whether to restrict the variables to non-negative values.                    
                </@param>
                <@param>
                    m epsilon Amount of error to accept when checking for optimality.                    
                </@param>
            </javadoc>
            <method name="SimplexTableau" type="constructor" line="119"/>
            <javadoc line="124">
                Build a tableau for a linear problem.                
                <@param>
                    m f linear objective function                    
                </@param>
                <@param>
                    m constraints linear constraints                    
                </@param>
                <@param>
                    m goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}                    
                </@param>
                <@param>
                    m restrictToNonNegative whether to restrict the variables to non-negative values                    
                </@param>
                <@param>
                    m epsilon amount of error to accept when checking for optimality                    
                </@param>
                <@param>
                    m maxUlps amount of error to accept in floating point comparisons                    
                </@param>
            </javadoc>
            <method name="SimplexTableau" type="constructor" line="138"/>
            <javadoc line="142">
                Build a tableau for a linear problem.                
                <@param>
                    m f linear objective function                    
                </@param>
                <@param>
                    m constraints linear constraints                    
                </@param>
                <@param>
                    m goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}                    
                </@param>
                <@param>
                    m restrictToNonNegative whether to restrict the variables to non-negative values                    
                </@param>
                <@param>
                    m epsilon amount of error to accept when checking for optimality                    
                </@param>
                <@param>
                    m maxUlps amount of error to accept in floating point comparisons                    
                </@param>
                <@param>
                    m cutOff the cut-off value for tableau entries                    
                </@param>
            </javadoc>
            <method name="SimplexTableau" type="constructor" line="158"/>
            <javadoc line="175">
                Initialize the labels for the columns.                
            </javadoc>
            <method name="initializeColumnLabels" type="void" line="178">
                <scope line="179"/>
                <scope line="183"/>
                <scope line="186"/>
                <scope line="189"/>
                <scope line="192"/>
            </method>
            <javadoc line="198">
                Create the tableau by itself.                
                <@param>
                    m maximize if true, goal is to maximize the objective function                    
                </@param>
                <@return>
                    n created tableau                    
                </@return>
            </javadoc>
            <method name="createTableau" type="RealMatrix" line="203">
                <comment line="204">
                    create a matrix of the correct size                    
                </comment>
                <comment line="204">
                    mArtificialVariables + getNumObjectiveFunctions() + 1; // + 1 is for RHS                    
                </comment>
                <comment line="204">
                    initialize the objective function rows                    
                </comment>
                <comment line="204">
                    initialize the constraint rows                    
                </comment>
                <declaration name="width" type="int" line="206"/>
                <declaration name="height" type="int" line="208"/>
                <declaration name="matrix" type="Array2DRowRealMatrix" line="209"/>
                <scope line="212"/>
                <declaration name="zIndex" type="int" line="215"/>
                <declaration name="objectiveCoefficients" type="RealVector" line="217"/>
                <scope line="223"/>
                <declaration name="slackVar" type="int" line="229"/>
                <declaration name="artificialVar" type="int" line="230"/>
                <scope line="231">
                    <declaration name="constraint" type="LinearConstraint" line="232"/>
                    <declaration name="row" type="int" line="233"/>
                    <scope line="239"/>
                    <scope line="248"/>
                    <scope line="250"/>
                    <scope line="256"/>
                </scope>
            </method>
            <javadoc line="266">
                Get new versions of the constraints which have positive right hand sides.                
                <@param>
                    m originalConstraints original (not normalized) constraints                    
                </@param>
                <@return>
                    n new versions of the constraints                    
                </@return>
            </javadoc>
            <method name="normalizeConstraints" type="List<LinearConstraint>" line="271">
                <declaration name="normalized" type="List&lt;LinearConstraint&gt;" line="272"/>
                <scope line="273"/>
            </method>
            <javadoc line="279">
                Get a new equation equivalent to this one with a positive right hand side.                
                <@param>
                    m constraint reference constraint                    
                </@param>
                <@return>
                    n new equation                    
                </@return>
            </javadoc>
            <method name="normalize" type="LinearConstraint" line="284">
                <scope line="285"/>
            </method>
            <javadoc line="294">
                Get the number of objective functions in this tableau.                
                <@return>
                    n 2 for Phase 1.  1 for Phase 2.                    
                </@return>
            </javadoc>
            <method name="getNumObjectiveFunctions" type="int" line="298"/>
            <javadoc line="302">
                Get a count of constraints corresponding to a specified relationship.                
                <@param>
                    m relationship relationship to count                    
                </@param>
                <@return>
                    n number of constraint with the specified relationship                    
                </@return>
            </javadoc>
            <method name="getConstraintTypeCounts" type="int" line="307">
                <declaration name="count" type="int" line="308"/>
                <scope line="309">
                    <scope line="310"/>
                </scope>
            </method>
            <javadoc line="317">
                Get the -1 times the sum of all coefficients in the given array.                
                <@param>
                    m coefficients coefficients to sum                    
                </@param>
                <@return>
                    n the -1 times the sum of all coefficients in the given array.                    
                </@return>
            </javadoc>
            <method name="getInvertedCoefficientSum" type="double" line="322">
                <declaration name="sum" type="double" line="323"/>
                <scope line="324"/>
            </method>
            <javadoc line="330">
                Checks whether the given column is basic.                
                <@param>
                    m col index of the column to check                    
                </@param>
                <@return>
                    n the row that the variable is basic in.  null if the column is not basic                    
                </@return>
            </javadoc>
            <method name="getBasicRow" type="Integer" line="335">
                <declaration name="row" type="Integer" line="336"/>
                <scope line="337">
                    <declaration name="entry" type="double" line="338"/>
                    <scope line="339"/>
                    <scope line="341"/>
                </scope>
            </method>
            <javadoc line="348">
                Removes the phase 1 objective function, positive cost non-artificial variables,
                 * and the non-basic artificial variables from this tableau.                
            </javadoc>
            <method name="dropPhase1Objective" type="void" line="352">
                <comment line="353">
                    positive cost non-artificial variables                    
                </comment>
                <comment line="353">
                    non-basic artificial variables                    
                </comment>
                <comment line="353">
                    remove the columns in reverse order so the indices are correct                    
                </comment>
                <scope line="353"/>
                <declaration name="columnsToDrop" type="Set&lt;Integer&gt;" line="357"/>
                <scope line="361">
                    <declaration name="entry" type="double" line="362"/>
                    <scope line="363"/>
                </scope>
                <scope line="369">
                    <declaration name="col" type="int" line="370"/>
                    <scope line="371"/>
                </scope>
                <declaration name="matrix" type="double[][]" line="376"/>
                <scope line="377">
                    <declaration name="col" type="int" line="378"/>
                    <scope line="379">
                        <scope line="380"/>
                    </scope>
                </scope>
                <declaration name="drop" type="Integer[]" line="387"/>
                <scope line="388"/>
            </method>
            <javadoc line="396">
                @param src the source array                
                <@param>
                    m dest the destination array                    
                </@param>
            </javadoc>
            <method name="copyArray" type="void" line="400"/>
            <javadoc line="404">
                Returns whether the problem is at an optimal state.                
                <@return>
                    n whether the model has been solved                    
                </@return>
            </javadoc>
            <method name="isOptimal" type="boolean" line="408">
                <scope line="409">
                    <declaration name="entry" type="double" line="410"/>
                    <scope line="411"/>
                </scope>
            </method>
            <javadoc line="418">
                Get the current solution.                
                <@return>
                    n current solution                    
                </@return>
            </javadoc>
            <method name="getSolution" type="PointValuePair" line="422">
                <declaration name="negativeVarColumn" type="int" line="423"/>
                <declaration name="negativeVarBasicRow" type="Integer" line="424"/>
                <declaration name="mostNegative" type="double" line="425"/>
                <declaration name="basicRows" type="Set&lt;Integer&gt;" line="427"/>
                <declaration name="coefficients" type="double[]" line="428"/>
                <scope line="429">
                    <declaration name="colIndex" type="int" line="430"/>
                    <scope line="431"/>
                    <declaration name="basicRow" type="Integer" line="435"/>
                    <scope line="436"/>
                    <scope line="441"/>
                    <scope line="445"/>
                </scope>
            </method>
            <javadoc line="455">
                Subtracts a multiple of one row from another.
                 * &lt;p&gt;
                 * After application of this operation, the following will hold:
                 * &lt;pre&gt;minuendRow = minuendRow - multiple * subtrahendRow&lt;/pre&gt;                
                <@param>
                    m dividendRow index of the row                    
                </@param>
                <@param>
                    m divisor value of the divisor                    
                </@param>
            </javadoc>
            <method name="divideRow" type="void" line="464">
                <scope line="465"/>
            </method>
            <javadoc line="470">
                Subtracts a multiple of one row from another.
                 * &lt;p&gt;
                 * After application of this operation, the following will hold:
                 * &lt;pre&gt;minuendRow = minuendRow - multiple * subtrahendRow&lt;/pre&gt;                
                <@param>
                    m minuendRow row index                    
                </@param>
                <@param>
                    m subtrahendRow row index                    
                </@param>
                <@param>
                    m multiple multiplication factor                    
                </@param>
            </javadoc>
            <method name="subtractRow" type="void" line="481">
                <scope line="482">
                    <declaration name="result" type="double" line="483"/>
                    <scope line="485"/>
                </scope>
            </method>
            <javadoc line="492">
                Get the width of the tableau.                
                <@return>
                    n width of the tableau                    
                </@return>
            </javadoc>
            <method name="getWidth" type="int" line="496"/>
            <javadoc line="500">
                Get the height of the tableau.                
                <@return>
                    n height of the tableau                    
                </@return>
            </javadoc>
            <method name="getHeight" type="int" line="504"/>
            <javadoc line="508">
                Get an entry of the tableau.                
                <@param>
                    m row row index                    
                </@param>
                <@param>
                    m column column index                    
                </@param>
                <@return>
                    n entry at (row, column)                    
                </@return>
            </javadoc>
            <method name="getEntry" type="double" line="514"/>
            <javadoc line="518">
                Set an entry of the tableau.                
                <@param>
                    m row row index                    
                </@param>
                <@param>
                    m column column index                    
                </@param>
                <@param>
                    m value for the entry                    
                </@param>
            </javadoc>
            <method name="setEntry" type="void" line="525"/>
            <javadoc line="529">
                Get the offset of the first slack variable.                
                <@return>
                    n offset of the first slack variable                    
                </@return>
            </javadoc>
            <method name="getSlackVariableOffset" type="int" line="533"/>
            <javadoc line="537">
                Get the offset of the first artificial variable.                
                <@return>
                    n offset of the first artificial variable                    
                </@return>
            </javadoc>
            <method name="getArtificialVariableOffset" type="int" line="541"/>
            <javadoc line="545">
                Get the offset of the right hand side.                
                <@return>
                    n offset of the right hand side                    
                </@return>
            </javadoc>
            <method name="getRhsOffset" type="int" line="549"/>
            <javadoc line="553">
                Get the number of decision variables.
                 * &lt;p&gt;
                 * If variables are not restricted to positive values, this will include 1 extra decision variable to represent
                 * the absolute value of the most negative variable.                
                <@return>
                    n number of decision variables                    
                </@return>
                <@see>
                    e #getOriginalNumDecisionVariables()                    
                </@see>
            </javadoc>
            <method name="getNumDecisionVariables" type="int" line="562"/>
            <javadoc line="566">
                Get the original number of decision variables.                
                <@return>
                    n original number of decision variables                    
                </@return>
                <@see>
                    e #getNumDecisionVariables()                    
                </@see>
            </javadoc>
            <method name="getOriginalNumDecisionVariables" type="int" line="571"/>
            <javadoc line="575">
                Get the number of slack variables.                
                <@return>
                    n number of slack variables                    
                </@return>
            </javadoc>
            <method name="getNumSlackVariables" type="int" line="579"/>
            <javadoc line="583">
                Get the number of artificial variables.                
                <@return>
                    n number of artificial variables                    
                </@return>
            </javadoc>
            <method name="getNumArtificialVariables" type="int" line="587"/>
            <javadoc line="591">
                Get the tableau data.                
                <@return>
                    n tableau data                    
                </@return>
            </javadoc>
            <method name="getData" type="double[][]" line="595"/>
            <method name="equals" type="boolean" line="600">
                <scope line="602"/>
                <scope line="606">
                    <declaration name="rhs" type="SimplexTableau" line="607"/>
                </scope>
            </method>
            <method name="hashCode" type="int" line="622"/>
            <javadoc line="634">
                Serialize the instance.                
                <@param>
                    m oos stream where object should be written                    
                </@param>
                <@throws>
                    s IOException if object cannot be written to stream                    
                </@throws>
            </javadoc>
            <method name="writeObject" type="void" line="640"/>
            <javadoc line="645">
                Deserialize the instance.                
                <@param>
                    m ois stream from which the object should be read                    
                </@param>
                <@throws>
                    s ClassNotFoundException if a class in the stream cannot be found                    
                </@throws>
                <@throws>
                    s IOException if object cannot be read from the stream                    
                </@throws>
            </javadoc>
            <method name="readObject" type="void" line="652"/>
        </class>
    </source>