<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.twod">
        <import package="java.awt.geom.AffineTransform"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.geometry.Vector"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.Vector1D"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Embedding"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Hyperplane"/>
        <import package="org.apache.commons.math3.geometry.partitioning.SubHyperplane"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Transform"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Line" line="35">
            <implements interface="Hyperplane&lt;Euclidean2D&gt;"/>
            <implements interface="Embedding&lt;Euclidean2D,Euclidean1D&gt;"/>
            <javadoc line="35">
                This class represents an oriented line in the 2D plane.
                 * &lt;p&gt;An oriented line can be defined either by prolongating a line
                 * segment between two points past these points, or by one point and
                 * an angular direction (in trigonometric orientation).&lt;/p&gt;
                 * &lt;p&gt;Since it is oriented the two half planes at its two sides are
                 * unambiguously identified as a left half plane and a right half
                 * plane. This can be used to identify the interior and the exterior
                 * in a simple way by local properties only when part of a line is
                 * used to define part of a polygon boundary.&lt;/p&gt;
                 * &lt;p&gt;A line can also be used to completely define a reference frame
                 * in the plane. It is sufficient to select one specific point in the
                 * line (the orthogonal projection of the original reference frame on
                 * the line) and to use the unit vector in the line direction and the
                 * orthogonal vector oriented from left half plane to right half
                 * plane. We define two coordinates by the process, the
                 * &lt;em&gt;abscissa&lt;/em&gt; along the line, and the &lt;em&gt;offset&lt;/em&gt; across
                 * the line. All points of the plane are uniquely identified by these
                 * two coordinates. The line is the set of points at zero offset, the
                 * left half plane is the set of points with negative offsets and the
                 * right half plane is the set of points with positive offsets.&lt;/p&gt;                
                <@version>
                    n $Id: Line.java 1422195 2012-12-15 06:45:18Z psteitz $                    
                </@version>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="angle" type="double" line="64"/>
            <javadoc line="64">
                Angle with respect to the abscissa axis.                
            </javadoc>
            <declaration name="cos" type="double" line="67"/>
            <javadoc line="67">
                Cosine of the line angle.                
            </javadoc>
            <declaration name="sin" type="double" line="70"/>
            <javadoc line="70">
                Sine of the line angle.                
            </javadoc>
            <declaration name="originOffset" type="double" line="73"/>
            <javadoc line="73">
                Offset of the frame origin.                
            </javadoc>
            <javadoc line="76">
                Build a line from two points.
                 * &lt;p&gt;The line is oriented from p1 to p2&lt;/p&gt;                
                <@param>
                    m p1 first point                    
                </@param>
                <@param>
                    m p2 second point                    
                </@param>
            </javadoc>
            <method name="Line" type="constructor" line="81"/>
            <javadoc line="85">
                Build a line from a point and an angle.                
                <@param>
                    m p point belonging to the line                    
                </@param>
                <@param>
                    m angle angle of the line with respect to abscissa axis                    
                </@param>
            </javadoc>
            <method name="Line" type="constructor" line="89"/>
            <javadoc line="93">
                Build a line from its internal characteristics.                
                <@param>
                    m angle angle of the line with respect to abscissa axis                    
                </@param>
                <@param>
                    m cos cosine of the angle                    
                </@param>
                <@param>
                    m sin sine of the angle                    
                </@param>
                <@param>
                    m originOffset offset of the origin                    
                </@param>
            </javadoc>
            <method name="Line" type="constructor" line="99"/>
            <javadoc line="106">
                Copy constructor.
                 * &lt;p&gt;The created instance is completely independent from the
                 * original instance, it is a deep copy.&lt;/p&gt;                
                <@param>
                    m line line to copy                    
                </@param>
            </javadoc>
            <method name="Line" type="constructor" line="111"/>
            <javadoc line="118">
                {@inheritDoc}                
            </javadoc>
            <method name="copySelf" type="Line" line="119"/>
            <javadoc line="123">
                Reset the instance as if built from two points.
                 * &lt;p&gt;The line is oriented from p1 to p2&lt;/p&gt;                
                <@param>
                    m p1 first point                    
                </@param>
                <@param>
                    m p2 second point                    
                </@param>
            </javadoc>
            <method name="reset" type="void" line="128">
                <declaration name="dx" type="double" line="129"/>
                <declaration name="dy" type="double" line="130"/>
                <declaration name="d" type="double" line="131"/>
                <scope line="132"/>
                <scope line="137"/>
            </method>
            <javadoc line="145">
                Reset the instance as if built from a line and an angle.                
                <@param>
                    m p point belonging to the line                    
                </@param>
                <@param>
                    m alpha angle of the line with respect to abscissa axis                    
                </@param>
            </javadoc>
            <method name="reset" type="void" line="149"/>
            <javadoc line="156">
                Revert the instance.                
            </javadoc>
            <method name="revertSelf" type="void" line="158">
                <scope line="159"/>
                <scope line="161"/>
            </method>
            <javadoc line="169">
                Get the reverse of the instance.
                 * &lt;p&gt;Get a line with reversed orientation with respect to the
                 * instance. A new object is built, the instance is untouched.&lt;/p&gt;                
                <@return>
                    n a new line, with orientation opposite to the instance orientation                    
                </@return>
            </javadoc>
            <method name="getReverse" type="Line" line="174"/>
            <javadoc line="179">
                {@inheritDoc}                
            </javadoc>
            <method name="toSubSpace" type="Vector1D" line="180">
                <declaration name="p2" type="Vector2D" line="181"/>
            </method>
            <javadoc line="185">
                {@inheritDoc}                
            </javadoc>
            <method name="toSpace" type="Vector2D" line="186">
                <declaration name="abscissa" type="double" line="187"/>
            </method>
            <javadoc line="192">
                Get the intersection point of the instance and another line.                
                <@param>
                    m other other line                    
                </@param>
                <@return>
                    n intersection point of the instance and the other line
                     * or null if there are no intersection points                    
                </@return>
            </javadoc>
            <method name="intersection" type="Vector2D" line="197">
                <declaration name="d" type="double" line="198"/>
                <scope line="199"/>
            </method>
            <javadoc line="206">
                {@inheritDoc}                
            </javadoc>
            <method name="wholeHyperplane" type="SubLine" line="207"/>
            <javadoc line="211">
                Build a region covering the whole space.                
                <@return>
                    n a region containing the instance (really a {@link PolygonsSet PolygonsSet} instance)                    
                </@return>
            </javadoc>
            <method name="wholeSpace" type="PolygonsSet" line="215"/>
            <javadoc line="219">
                Get the offset (oriented distance) of a parallel line.
                 * &lt;p&gt;This method should be called only for parallel lines otherwise
                 * the result is not meaningful.&lt;/p&gt;
                 * &lt;p&gt;The offset is 0 if both lines are the same, it is
                 * positive if the line is on the right side of the instance and
                 * negative if it is on the left side, according to its natural
                 * orientation.&lt;/p&gt;                
                <@param>
                    m line line to check                    
                </@param>
                <@return>
                    n offset of the line                    
                </@return>
            </javadoc>
            <method name="getOffset" type="double" line="229"/>
            <javadoc line="234">
                {@inheritDoc}                
            </javadoc>
            <method name="getOffset" type="double" line="235">
                <declaration name="p2" type="Vector2D" line="236"/>
            </method>
            <javadoc line="240">
                {@inheritDoc}                
            </javadoc>
            <method name="sameOrientationAs" type="boolean" line="241">
                <declaration name="otherL" type="Line" line="242"/>
            </method>
            <javadoc line="246">
                Get one point from the plane.                
                <@param>
                    m abscissa desired abscissa for the point                    
                </@param>
                <@param>
                    m offset desired offset for the point                    
                </@param>
                <@return>
                    n one point in the plane, with given abscissa and offset
                     * relative to the line                    
                </@return>
            </javadoc>
            <method name="getPointAt" type="Vector2D" line="252">
                <declaration name="x" type="double" line="253"/>
                <declaration name="dOffset" type="double" line="254"/>
            </method>
            <javadoc line="258">
                Check if the line contains a point.                
                <@param>
                    m p point to check                    
                </@param>
                <@return>
                    n true if p belongs to the line                    
                </@return>
            </javadoc>
            <method name="contains" type="boolean" line="262"/>
            <javadoc line="266">
                Compute the distance between the instance and a point.
                 * &lt;p&gt;This is a shortcut for invoking FastMath.abs(getOffset(p)),
                 * and provides consistency with what is in the
                 * org.apache.commons.math3.geometry.euclidean.threed.Line class.&lt;/p&gt;                
                <@param>
                    m p to check                    
                </@param>
                <@return>
                    n distance between the instance and the point                    
                </@return>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="distance" type="double" line="275"/>
            <javadoc line="279">
                Check the instance is parallel to another line.                
                <@param>
                    m line other line to check                    
                </@param>
                <@return>
                    n true if the instance is parallel to the other line
                     * (they can have either the same or opposite orientations)                    
                </@return>
            </javadoc>
            <method name="isParallelTo" type="boolean" line="284"/>
            <javadoc line="288">
                Translate the line to force it passing by a point.                
                <@param>
                    m p point by which the line should pass                    
                </@param>
            </javadoc>
            <method name="translateToPoint" type="void" line="291"/>
            <javadoc line="295">
                Get the angle of the line.                
                <@return>
                    n the angle of the line with respect to the abscissa axis                    
                </@return>
            </javadoc>
            <method name="getAngle" type="double" line="298"/>
            <javadoc line="302">
                Set the angle of the line.                
                <@param>
                    m angle new angle of the line with respect to the abscissa axis                    
                </@param>
            </javadoc>
            <method name="setAngle" type="void" line="305"/>
            <javadoc line="311">
                Get the offset of the origin.                
                <@return>
                    n the offset of the origin                    
                </@return>
            </javadoc>
            <method name="getOriginOffset" type="double" line="314"/>
            <javadoc line="318">
                Set the offset of the origin.                
                <@param>
                    m offset offset of the origin                    
                </@param>
            </javadoc>
            <method name="setOriginOffset" type="void" line="321"/>
            <javadoc line="325">
                Get a {@link org.apache.commons.math3.geometry.partitioning.TransformTransform} embedding an affine transform.                
                <@param>
                    m transform affine transform to embed (must be inversible
                     * otherwise the {@link org.apache.commons.math3.geometry.partitioning.Transform#apply(Hyperplane)apply(Hyperplane)} method would work only for some lines, and
                     * fail for other ones)                    
                </@param>
                <@return>
                    n a new transform that can be applied to either {@link Vector2D Vector2D}, {@link Line Line} or {@link org.apache.commons.math3.geometry.partitioning.SubHyperplaneSubHyperplane} instances                    
                </@return>
                <@exception>
                    n MathIllegalArgumentException if the transform is non invertible                    
                </@exception>
            </javadoc>
            <method name="getTransform" type="Transform<Euclidean2D,Euclidean1D>" line="339"/>
            <class name="LineTransform" line="343">
                <comment line="344">
                    CHECKSTYLE: stop JavadocVariable check                    
                </comment>
                <comment line="344">
                    CHECKSTYLE: resume JavadocVariable check                    
                </comment>
                <implements interface="Transform&lt;Euclidean2D,Euclidean1D&gt;"/>
                <javadoc line="343">
                    Class embedding an affine transform.
                     * &lt;p&gt;This class is used in order to apply an affine transform to a
                     * line. Using a specific object allow to perform some computations
                     * on the transform only once even if the same transform is to be
                     * applied to a large number of lines (for example to a large
                     * polygon)./&lt;p&gt;                    
                </javadoc>
                <declaration name="cXX" type="double" line="353"/>
                <declaration name="cXY" type="double" line="354"/>
                <declaration name="cX1" type="double" line="355"/>
                <declaration name="cYX" type="double" line="356"/>
                <declaration name="cYY" type="double" line="357"/>
                <declaration name="cY1" type="double" line="358"/>
                <declaration name="c1Y" type="double" line="360"/>
                <declaration name="c1X" type="double" line="361"/>
                <declaration name="c11" type="double" line="362"/>
                <javadoc line="365">
                    Build an affine line transform from a n {@code AffineTransform}.                    
                    <@param>
                        m transform transform to use (must be invertible otherwise
                         * the {@link LineTransform#apply(Hyperplane)} method would work
                         * only for some lines, and fail for other ones)                        
                    </@param>
                    <@exception>
                        n MathIllegalArgumentException if the transform is non invertible                        
                    </@exception>
                </javadoc>
                <method name="LineTransform" type="constructor" line="371">
                    <declaration name="m" type="double[]" line="373"/>
                    <scope line="386"/>
                </method>
                <javadoc line="392">
                    {@inheritDoc}                    
                </javadoc>
                <method name="apply" type="Vector2D" line="393">
                    <declaration name="p2D" type="Vector2D" line="394"/>
                    <declaration name="x" type="double" line="395"/>
                    <declaration name="y" type="double" line="396"/>
                </method>
                <javadoc line="401">
                    {@inheritDoc}                    
                </javadoc>
                <method name="apply" type="Line" line="402">
                    <declaration name="line" type="Line" line="403"/>
                    <declaration name="rOffset" type="double" line="404"/>
                    <declaration name="rCos" type="double" line="405"/>
                    <declaration name="rSin" type="double" line="406"/>
                    <declaration name="inv" type="double" line="407"/>
                </method>
                <javadoc line="413">
                    {@inheritDoc}                    
                </javadoc>
                <method name="apply" type="SubHyperplane<Euclidean1D>" line="416">
                    <declaration name="op" type="OrientedPoint" line="417"/>
                    <declaration name="originalLine" type="Line" line="418"/>
                    <declaration name="transformedLine" type="Line" line="419"/>
                    <declaration name="newLoc" type="Vector1D" line="420"/>
                </method>
            </class>
        </class>
    </source>