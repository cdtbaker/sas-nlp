<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.text.FieldPosition"/>
        <import package="java.text.NumberFormat"/>
        <import package="java.text.ParsePosition"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="java.util.Locale"/>
        <import package="org.apache.commons.math3.exception.MathParseException"/>
        <import package="org.apache.commons.math3.util.CompositeFormat"/>
        <class name="RealVectorFormat" line="30">
            <javadoc line="30">
                Formats a vector in components list format &quot;{v0; v1; ...; vk-1}&quot;.
                 * &lt;p&gt;The prefix and suffix &quot;{&quot; and &quot;}&quot; and the separator &quot;; &quot; can be replaced by
                 * any user-defined strings. The number format for components can be configured.&lt;/p&gt;
                 * &lt;p&gt;White space is ignored at parse time, even if it is in the prefix, suffix
                 * or separator specifications. So even if the default separator does include a space
                 * character that is used at format time, both input string &quot;{1;1;1}&quot; and
                 * &quot; { 1 ; 1 ; 1 } &quot; will be parsed without error and the same vector will be
                 * returned. In the second case, however, the parse position after parsing will be
                 * just after the closing curly brace, i.e. just before the trailing space.&lt;/p&gt;                
                <@version>
                    n $Id: RealVectorFormat.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <declaration name="DEFAULT_PREFIX" type="String" line="46"/>
            <javadoc line="46">
                The default prefix: &quot;{&quot;.                
            </javadoc>
            <declaration name="DEFAULT_SUFFIX" type="String" line="48"/>
            <javadoc line="48">
                The default suffix: &quot;}&quot;.                
            </javadoc>
            <declaration name="DEFAULT_SEPARATOR" type="String" line="50"/>
            <javadoc line="50">
                The default separator: &quot;, &quot;.                
            </javadoc>
            <declaration name="prefix" type="String" line="52"/>
            <javadoc line="52">
                Prefix.                
            </javadoc>
            <declaration name="suffix" type="String" line="54"/>
            <javadoc line="54">
                Suffix.                
            </javadoc>
            <declaration name="separator" type="String" line="56"/>
            <javadoc line="56">
                Separator.                
            </javadoc>
            <declaration name="trimmedPrefix" type="String" line="58"/>
            <javadoc line="58">
                Trimmed prefix.                
            </javadoc>
            <declaration name="trimmedSuffix" type="String" line="60"/>
            <javadoc line="60">
                Trimmed suffix.                
            </javadoc>
            <declaration name="trimmedSeparator" type="String" line="62"/>
            <javadoc line="62">
                Trimmed separator.                
            </javadoc>
            <declaration name="format" type="NumberFormat" line="64"/>
            <javadoc line="64">
                The format used for components.                
            </javadoc>
            <javadoc line="67">
                Create an instance with default settings.
                 * &lt;p&gt;The instance uses the default prefix, suffix and separator:
                 * &quot;{&quot;, &quot;}&quot;, and &quot;; &quot; and the default number format for components.&lt;/p&gt;                
            </javadoc>
            <method name="RealVectorFormat" type="constructor" line="72"/>
            <javadoc line="77">
                Create an instance with a custom number format for components.                
                <@param>
                    m format the custom format for components.                    
                </@param>
            </javadoc>
            <method name="RealVectorFormat" type="constructor" line="81"/>
            <javadoc line="85">
                Create an instance with custom prefix, suffix and separator.                
                <@param>
                    m prefix prefix to use instead of the default "{"                    
                </@param>
                <@param>
                    m suffix suffix to use instead of the default "}"                    
                </@param>
                <@param>
                    m separator separator to use instead of the default "; "                    
                </@param>
            </javadoc>
            <method name="RealVectorFormat" type="constructor" line="92"/>
            <javadoc line="97">
                Create an instance with custom prefix, suffix, separator and format
                 * for components.                
                <@param>
                    m prefix prefix to use instead of the default "{"                    
                </@param>
                <@param>
                    m suffix suffix to use instead of the default "}"                    
                </@param>
                <@param>
                    m separator separator to use instead of the default "; "                    
                </@param>
                <@param>
                    m format the custom format for components.                    
                </@param>
            </javadoc>
            <method name="RealVectorFormat" type="constructor" line="106"/>
            <javadoc line="116">
                Get the set of locales for which real vectors formats are available.
                 * &lt;p&gt;This is the same set as the {@link NumberFormat} set.&lt;/p&gt;                
                <@return>
                    n available real vector format locales.                    
                </@return>
            </javadoc>
            <method name="getAvailableLocales" type="Locale[]" line="121"/>
            <javadoc line="125">
                Get the format prefix.                
                <@return>
                    n format prefix.                    
                </@return>
            </javadoc>
            <method name="getPrefix" type="String" line="129"/>
            <javadoc line="133">
                Get the format suffix.                
                <@return>
                    n format suffix.                    
                </@return>
            </javadoc>
            <method name="getSuffix" type="String" line="137"/>
            <javadoc line="141">
                Get the format separator between components.                
                <@return>
                    n format separator.                    
                </@return>
            </javadoc>
            <method name="getSeparator" type="String" line="145"/>
            <javadoc line="149">
                Get the components format.                
                <@return>
                    n components format.                    
                </@return>
            </javadoc>
            <method name="getFormat" type="NumberFormat" line="153"/>
            <javadoc line="157">
                Returns the default real vector format for the current locale.                
                <@return>
                    n the default real vector format.                    
                </@return>
            </javadoc>
            <method name="getInstance" type="RealVectorFormat" line="161"/>
            <javadoc line="165">
                Returns the default real vector format for the given locale.                
                <@param>
                    m locale the specific locale used by the format.                    
                </@param>
                <@return>
                    n the real vector format specific to the given locale.                    
                </@return>
            </javadoc>
            <method name="getInstance" type="RealVectorFormat" line="170"/>
            <javadoc line="174">
                This method calls {@link #format(RealVector,StringBuffer,FieldPosition)}.                
                <@param>
                    m v RealVector object to format.                    
                </@param>
                <@return>
                    n a formatted vector.                    
                </@return>
            </javadoc>
            <method name="format" type="String" line="180"/>
            <javadoc line="184">
                Formats a {@link RealVector} object to produce a string.                
                <@param>
                    m vector the object to format.                    
                </@param>
                <@param>
                    m toAppendTo where the text is to be appended                    
                </@param>
                <@param>
                    m pos On input: an alignment field, if desired. On output: the
                     * offsets of the alignment field                    
                </@param>
                <@return>
                    n the value passed in as toAppendTo.                    
                </@return>
            </javadoc>
            <method name="format" type="StringBuffer" line="193">
                <comment line="194">
                    format prefix                    
                </comment>
                <comment line="194">
                    format components                    
                </comment>
                <comment line="194">
                    format suffix                    
                </comment>
                <scope line="202">
                    <scope line="203"/>
                </scope>
            </method>
            <javadoc line="215">
                Parse a string to produce a {@link RealVector} object.                
                <@param>
                    m source String to parse.                    
                </@param>
                <@return>
                    n the parsed {@link RealVector} object.                    
                </@return>
                <@throws>
                    s MathParseException if the beginning of the specified string
                     * cannot be parsed.                    
                </@throws>
            </javadoc>
            <method name="parse" type="ArrayRealVector" line="223">
                <declaration name="parsePosition" type="ParsePosition" line="224"/>
                <declaration name="result" type="ArrayRealVector" line="225"/>
                <scope line="226"/>
            </method>
            <javadoc line="234">
                Parse a string to produce a {@link RealVector} object.                
                <@param>
                    m source String to parse.                    
                </@param>
                <@param>
                    m pos input/ouput parsing parameter.                    
                </@param>
                <@return>
                    n the parsed {@link RealVector} object.                    
                </@return>
            </javadoc>
            <method name="parse" type="ArrayRealVector" line="241">
                <comment line="242">
                    parse prefix                    
                </comment>
                <comment line="242">
                    parse components                    
                </comment>
                <comment line="242">
                    parse suffix                    
                </comment>
                <comment line="242">
                    build vector                    
                </comment>
                <declaration name="initialIndex" type="int" line="242"/>
                <scope line="246"/>
                <declaration name="components" type="List&lt;Number&gt;" line="251"/>
                <scope line="252">
                    <scope line="254">
                        <scope line="256"/>
                    </scope>
                    <scope line="261">
                        <declaration name="component" type="Number" line="263"/>
                        <scope line="264"/>
                        <scope line="266"/>
                    </scope>
                </scope>
                <scope line="278"/>
                <declaration name="data" type="double[]" line="283"/>
                <scope line="284"/>
            </method>
        </class>
    </source>