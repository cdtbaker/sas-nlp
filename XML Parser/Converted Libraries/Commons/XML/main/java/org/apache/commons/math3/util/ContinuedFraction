<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="ContinuedFraction" line="23">
            <javadoc line="23">
                Provides a generic means to evaluate continued fractions.  Subclasses simply
                  provided the a and b coefficients to evaluate the continued fraction.
                  &lt;p&gt;
                  References:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;http://mathworld.wolfram.com/ContinuedFraction.html&quot;&gt;
                  Continued Fraction&lt;/a&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <@version>
                    n $Id: ContinuedFraction.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <declaration name="DEFAULT_EPSILON" type="double" line="38"/>
            <javadoc line="38">
                Maximum allowed numerical error.                
            </javadoc>
            <javadoc line="41">
                Default constructor.                
            </javadoc>
            <method name="ContinuedFraction" type="constructor" line="44"/>
            <method name="getA" type="double" line="48"/>
            <javadoc line="48">
                Access the n-th a coefficient of the continued fraction.  Since a can be
                  a function of the evaluation point, x, that is passed in as well.                
                <@param>
                    m n the coefficient index to retrieve.                    
                </@param>
                <@param>
                    m x the evaluation point.                    
                </@param>
                <@return>
                    n the n-th a coefficient.                    
                </@return>
            </javadoc>
            <method name="getB" type="double" line="57"/>
            <javadoc line="57">
                Access the n-th b coefficient of the continued fraction.  Since b can be
                  a function of the evaluation point, x, that is passed in as well.                
                <@param>
                    m n the coefficient index to retrieve.                    
                </@param>
                <@param>
                    m x the evaluation point.                    
                </@param>
                <@return>
                    n the n-th b coefficient.                    
                </@return>
            </javadoc>
            <javadoc line="66">
                Evaluates the continued fraction at the value x.                
                <@param>
                    m x the evaluation point.                    
                </@param>
                <@return>
                    n the value of the continued fraction evaluated at x.                    
                </@return>
                <@throws>
                    s ConvergenceException if the algorithm fails to converge.                    
                </@throws>
            </javadoc>
            <method name="evaluate" type="double" line="72">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="76">
                Evaluates the continued fraction at the value x.                
                <@param>
                    m x the evaluation point.                    
                </@param>
                <@param>
                    m epsilon maximum error allowed.                    
                </@param>
                <@return>
                    n the value of the continued fraction evaluated at x.                    
                </@return>
                <@throws>
                    s ConvergenceException if the algorithm fails to converge.                    
                </@throws>
            </javadoc>
            <method name="evaluate" type="double" line="83">
                <params>
                    <param name="x" type="double"/>
                    <param name="epsilon" type="double"/>
                </params>
            </method>
            <javadoc line="87">
                Evaluates the continued fraction at the value x.                
                <@param>
                    m x the evaluation point.                    
                </@param>
                <@param>
                    m maxIterations maximum number of convergents                    
                </@param>
                <@return>
                    n the value of the continued fraction evaluated at x.                    
                </@return>
                <@throws>
                    s ConvergenceException if the algorithm fails to converge.                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if maximal number of iterations is reached                    
                </@throws>
            </javadoc>
            <method name="evaluate" type="double" line="96">
                <params>
                    <param name="x" type="double"/>
                    <param name="maxIterations" type="int"/>
                </params>
            </method>
            <javadoc line="100">
                Evaluates the continued fraction at the value x.
                  &lt;p&gt;
                  The implementation of this method is based on the modified Lentz algorithm as described
                  on page 18 ff. in:
                  &lt;ul&gt;
                  &lt;li&gt;
                  I. J. Thompson,  A. R. Barnett. &quot;Coulomb and Bessel Functions of Complex Arguments and Order.&quot;
                  &lt;a target=&quot;_blank&quot; href=&quot;http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf&quot;&gt;
                  http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf&lt;/a&gt;
                  &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;b&gt;Note:&lt;/b&gt; the implementation uses the terms a&lt;sub&gt;i&lt;/sub&gt; and b&lt;sub&gt;i&lt;/sub&gt; as defined in
                  &lt;a href=&quot;http://mathworld.wolfram.com/ContinuedFraction.html&quot;&gt;Continued Fraction @ MathWorld&lt;/a&gt;.
                  &lt;/p&gt;                
                <@param>
                    m x the evaluation point.                    
                </@param>
                <@param>
                    m epsilon maximum error allowed.                    
                </@param>
                <@param>
                    m maxIterations maximum number of convergents                    
                </@param>
                <@return>
                    n the value of the continued fraction evaluated at x.                    
                </@return>
                <@throws>
                    s ConvergenceException if the algorithm fails to converge.                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if maximal number of iterations is reached                    
                </@throws>
            </javadoc>
            <method name="evaluate" type="double" line="124">
                <params>
                    <param name="x" type="double"/>
                    <param name="epsilon" type="double"/>
                    <param name="maxIterations" type="int"/>
                </params>
                <comment line="125">
                    use the value of small as epsilon criteria for zero checks                    
                </comment>
                <declaration name="small" type="double" line="125"/>
                <declaration name="hPrev" type="double" line="126"/>
                <scope line="129"/>
                <declaration name="n" type="int" line="133"/>
                <declaration name="dPrev" type="double" line="134"/>
                <declaration name="cPrev" type="double" line="135"/>
                <declaration name="hN" type="double" line="136"/>
                <scope line="138">
                    <declaration name="a" type="double" line="139"/>
                    <declaration name="b" type="double" line="140"/>
                    <declaration name="dN" type="double" line="142"/>
                    <scope line="143"/>
                    <declaration name="cN" type="double" line="146"/>
                    <scope line="147"/>
                    <declaration name="deltaN" type="double" line="152"/>
                    <scope line="155"/>
                    <scope line="159"/>
                    <scope line="164"/>
                </scope>
                <scope line="174"/>
            </method>
        </class>
    </source>