<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.threed">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.Interval"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.Vector1D"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Region.Location"/>
        <class name="SubLine" line="28">
            <javadoc line="28">
                This class represents a subset of a {@link Line}.                
                <@version>
                    n $Id: SubLine.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="line" type="Line" line="34"/>
            <javadoc line="34">
                Underlying line.                
            </javadoc>
            <declaration name="remainingRegion" type="IntervalsSet" line="37"/>
            <javadoc line="37">
                Remaining region of the hyperplane.                
            </javadoc>
            <javadoc line="40">
                Simple constructor.                
                <@param>
                    m line underlying line                    
                </@param>
                <@param>
                    m remainingRegion remaining region of the line                    
                </@param>
            </javadoc>
            <method name="SubLine" type="constructor" line="44"/>
            <javadoc line="49">
                Create a sub-line from two endpoints.                
                <@param>
                    m start start point                    
                </@param>
                <@param>
                    m end end point                    
                </@param>
                <@exception>
                    n MathIllegalArgumentException if the points are equal                    
                </@exception>
            </javadoc>
            <method name="SubLine" type="constructor" line="55"/>
            <javadoc line="59">
                Create a sub-line from a segment.                
                <@param>
                    m segment single segment forming the sub-line                    
                </@param>
                <@exception>
                    n MathIllegalArgumentException if the segment endpoints are equal                    
                </@exception>
            </javadoc>
            <method name="SubLine" type="constructor" line="63"/>
            <javadoc line="67">
                Get the endpoints of the sub-line.
                 * &lt;p&gt;
                 * A subline may be any arbitrary number of disjoints segments, so the endpoints
                 * are provided as a list of endpoint pairs. Each element of the list represents
                 * one segment, and each segment contains a start point at index 0 and an end point
                 * at index 1. If the sub-line is unbounded in the negative infinity direction,
                 * the start point of the first segment will have infinite coordinates. If the
                 * sub-line is unbounded in the positive infinity direction, the end point of the
                 * last segment will have infinite coordinates. So a sub-line covering the whole
                 * line will contain just one row and both elements of this row will have infinite
                 * coordinates. If the sub-line is empty, the returned list will contain 0 segments.
                 * &lt;/p&gt;                
                <@return>
                    n list of segments endpoints                    
                </@return>
            </javadoc>
            <method name="getSegments" type="List<Segment>" line="81">
                <declaration name="list" type="List&lt;Interval&gt;" line="83"/>
                <declaration name="segments" type="List&lt;Segment&gt;" line="84"/>
                <scope line="86">
                    <declaration name="start" type="Vector3D" line="87"/>
                    <declaration name="end" type="Vector3D" line="88"/>
                </scope>
            </method>
            <javadoc line="96">
                Get the intersection of the instance and another sub-line.
                 * &lt;p&gt;
                 * This method is related to the {@link Line#intersection(Line)intersection} method in the {@link Line Line} class, but in addition
                 * to compute the point along infinite lines, it also checks the point
                 * lies on both sub-line ranges.
                 * &lt;/p&gt;                
                <@param>
                    m subLine other sub-line which may intersect instance                    
                </@param>
                <@param>
                    m includeEndPoints if true, endpoints are considered to belong to
                     * instance (i.e. they are closed sets) and may be returned, otherwise endpoints
                     * are considered to not belong to instance (i.e. they are open sets) and intersection
                     * occurring on endpoints lead to null being returned                    
                </@param>
                <@return>
                    n the intersection point if there is one, null if the sub-lines don't intersect                    
                </@return>
            </javadoc>
            <method name="intersection" type="Vector3D" line="110">
                <comment line="111">
                    compute the intersection on infinite line                    
                </comment>
                <comment line="111">
                    check location of point with respect to first sub-line                    
                </comment>
                <comment line="111">
                    check location of point with respect to second sub-line                    
                </comment>
                <declaration name="v1D" type="Vector3D" line="113"/>
                <declaration name="loc1" type="Location" line="116"/>
                <declaration name="loc2" type="Location" line="119"/>
                <scope line="121"/>
                <scope line="123"/>
            </method>
            <javadoc line="129">
                Build an interval set from two points.                
                <@param>
                    m start start point                    
                </@param>
                <@param>
                    m end end point                    
                </@param>
                <@return>
                    n an interval set                    
                </@return>
                <@exception>
                    n MathIllegalArgumentException if the points are equal                    
                </@exception>
            </javadoc>
            <method name="buildIntervalSet" type="IntervalsSet" line="136">
                <declaration name="line" type="Line" line="137"/>
            </method>
        </class>
    </source>