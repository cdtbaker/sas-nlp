<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fraction">
        <import package="java.math.BigInteger"/>
        <import package="java.text.FieldPosition"/>
        <import package="java.text.NumberFormat"/>
        <import package="java.text.ParsePosition"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <class name="ProperBigFractionFormat" extends="BigFractionFormat" line="27">
            <javadoc line="27">
                Formats a BigFraction number in proper format.  The number format for each of
                 * the whole number, numerator and, denominator can be configured.
                 * &lt;p&gt;
                 * Minus signs are only allowed in the whole number part - i.e.,
                 * &quot;-3 1/2&quot; is legitimate and denotes -7/2, but &quot;-3 -1/2&quot; is invalid and
                 * will result in a &lt;code&gt;ParseException&lt;/code&gt;.&lt;/p&gt;                
                <@since>
                    e 1.1                    
                </@since>
                <@version>
                    n $Id: ProperBigFractionFormat.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="40"/>
            <javadoc line="40">
                Serializable version identifier                
            </javadoc>
            <declaration name="wholeFormat" type="NumberFormat" line="43"/>
            <javadoc line="43">
                The format used for the whole number.                
            </javadoc>
            <javadoc line="46">
                Create a proper formatting instance with the default number format for
                 * the whole, numerator, and denominator.                
            </javadoc>
            <method name="ProperBigFractionFormat" type="constructor" line="50"/>
            <javadoc line="54">
                Create a proper formatting instance with a custom number format for the
                 * whole, numerator, and denominator.                
                <@param>
                    m format the custom format for the whole, numerator, and
                     * denominator.                    
                </@param>
            </javadoc>
            <method name="ProperBigFractionFormat" type="constructor" line="60"/>
            <javadoc line="64">
                Create a proper formatting instance with a custom number format for each
                 * of the whole, numerator, and denominator.                
                <@param>
                    m wholeFormat the custom format for the whole.                    
                </@param>
                <@param>
                    m numeratorFormat the custom format for the numerator.                    
                </@param>
                <@param>
                    m denominatorFormat the custom format for the denominator.                    
                </@param>
            </javadoc>
            <method name="ProperBigFractionFormat" type="constructor" line="73"/>
            <javadoc line="78">
                Formats a {@link BigFraction} object to produce a string.  The BigFraction
                 * is output in proper format.                
                <@param>
                    m fraction the object to format.                    
                </@param>
                <@param>
                    m toAppendTo where the text is to be appended                    
                </@param>
                <@param>
                    m pos On input: an alignment field, if desired. On output: the
                     * offsets of the alignment field                    
                </@param>
                <@return>
                    n the value passed in as toAppendTo.                    
                </@return>
            </javadoc>
            <method name="format" type="StringBuffer" line="90">
                <declaration name="num" type="BigInteger" line="95"/>
                <declaration name="den" type="BigInteger" line="96"/>
                <declaration name="whole" type="BigInteger" line="97"/>
                <scope line="100">
                    <scope line="103"/>
                </scope>
            </method>
            <javadoc line="114">
                Access the whole format.                
                <@return>
                    n the whole format.                    
                </@return>
            </javadoc>
            <method name="getWholeFormat" type="NumberFormat" line="118"/>
            <javadoc line="122">
                Parses a string to produce a {@link BigFraction} object.  This method
                 * expects the string to be formatted as a proper BigFraction.
                 * &lt;p&gt;
                 * Minus signs are only allowed in the whole number part - i.e.,
                 * &quot;-3 1/2&quot; is legitimate and denotes -7/2, but &quot;-3 -1/2&quot; is invalid and
                 * will result in a &lt;code&gt;ParseException&lt;/code&gt;.&lt;/p&gt;                
                <@param>
                    m source the string to parse                    
                </@param>
                <@param>
                    m pos input/ouput parsing parameter.                    
                </@param>
                <@return>
                    n the parsed {@link BigFraction} object.                    
                </@return>
            </javadoc>
            <method name="parse" type="BigFraction" line="135">
                <comment line="136">
                    try to parse improper BigFraction                    
                </comment>
                <comment line="136">
                    parse whitespace                    
                </comment>
                <comment line="136">
                    parse whole                    
                </comment>
                <comment line="136">
                    parse whitespace                    
                </comment>
                <comment line="136">
                    parse numerator                    
                </comment>
                <comment line="136">
                    parse &apos;/&apos;                    
                </comment>
                <comment line="136">
                    parse whitespace                    
                </comment>
                <comment line="136">
                    parse denominator                    
                </comment>
                <declaration name="ret" type="BigFraction" line="137"/>
                <scope line="138"/>
                <declaration name="initialIndex" type="int" line="142"/>
                <declaration name="whole" type="BigInteger" line="148"/>
                <scope line="149"/>
                <declaration name="num" type="BigInteger" line="161"/>
                <scope line="162"/>
                <scope line="170"/>
                <declaration name="startIndex" type="int" line="177"/>
                <declaration name="c" type="char" line="178"/>
                <declaration name="den" type="BigInteger" line="200"/>
                <scope line="201"/>
                <scope line="209"/>
                <declaration name="wholeIsNeg" type="boolean" line="215"/>
                <scope line="216"/>
                <scope line="220"/>
            </method>
            <javadoc line="228">
                Modify the whole format.                
                <@param>
                    m format The new whole format value.                    
                </@param>
                <@throws>
                    s NullArgumentException if {@code format} is {@code null}.                    
                </@throws>
            </javadoc>
            <method name="setWholeFormat" type="void" line="233">
                <scope line="234"/>
            </method>
        </class>
    </source>