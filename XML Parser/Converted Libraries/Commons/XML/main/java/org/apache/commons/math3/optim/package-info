<?xml version="1.0" encoding="UTF-8"?>
    <source package="
 * <p>
 * Generally, optimizers are algorithms that will either{@link org.apache.commons.math3.optim.nonlinear.scalar.GoalType#MINIMIZE minimize} or{@link org.apache.commons.math3.optim.nonlinear.scalar.GoalType#MAXIMIZE maximize}a scalar function, called the{@link org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction <em>objective
 * function</em>}.
 * <br/>
 * For some scalar objective functions the gradient can be computed (analytically
 * or numerically). Algorithms that use this knowledge are defined in the{@link org.apache.commons.math3.optim.nonlinear.scalar.gradient} package.
 * The algorithms that do not need this additional information are located in
 * the {@link org.apache.commons.math3.optim.nonlinear.scalar.noderiv} package.
 * </p>
 * <p>
 * Some problems are solved more efficiently by algorithms that, instead of an
 * objective function, need access to a{@link org.apache.commons.math3.optim.nonlinear.vector.ModelFunction<em>model function</em>}: such a model predicts a set of values which the
 * algorithm tries to match with a set of given{@link org.apache.commons.math3.optim.nonlinear.vector.Target target values}.
 * Those algorithms are located in the{@link org.apache.commons.math3.optim.nonlinear.vector} package.
 * <br/>
 * Algorithms that also require the{@link org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobianJacobian matrix of the model} are located in the{@link org.apache.commons.math3.optim.nonlinear.vector.jacobian} package.
 * <br/>
 * The {@link org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizernon-linear least-squares optimizers} are a specialization of the the latter,
 * that minimize the distance (called <em>cost</em> or <em>&chi">
        <javadoc line="18">
            &lt;p&gt;
             * Generally, optimizers are algorithms that will either{@link org.apache.commons.math3.optim.nonlinear.scalar.GoalType#MINIMIZE minimize} or{@link org.apache.commons.math3.optim.nonlinear.scalar.GoalType#MAXIMIZE maximize}a scalar function, called the{@link org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction &lt;em&gt;objective
             * function&lt;/em&gt;}.
             * &lt;br/&gt;
             * For some scalar objective functions the gradient can be computed (analytically
             * or numerically). Algorithms that use this knowledge are defined in the{@link org.apache.commons.math3.optim.nonlinear.scalar.gradient} package.
             * The algorithms that do not need this additional information are located in
             * the {@link org.apache.commons.math3.optim.nonlinear.scalar.noderiv} package.
             * &lt;/p&gt;
             * &lt;p&gt;
             * Some problems are solved more efficiently by algorithms that, instead of an
             * objective function, need access to a{@link org.apache.commons.math3.optim.nonlinear.vector.ModelFunction&lt;em&gt;model function&lt;/em&gt;}: such a model predicts a set of values which the
             * algorithm tries to match with a set of given{@link org.apache.commons.math3.optim.nonlinear.vector.Target target values}.
             * Those algorithms are located in the{@link org.apache.commons.math3.optim.nonlinear.vector} package.
             * &lt;br/&gt;
             * Algorithms that also require the{@link org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobianJacobian matrix of the model} are located in the{@link org.apache.commons.math3.optim.nonlinear.vector.jacobian} package.
             * &lt;br/&gt;
             * The {@link org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizernon-linear least-squares optimizers} are a specialization of the the latter,
             * that minimize the distance (called &lt;em&gt;cost&lt;/em&gt; or &lt;em&gt;&amp;chi;&lt;sup&gt;2&lt;/sup&gt;&lt;/em&gt;)
             * between model and observations.
             * &lt;br/&gt;
             * For cases where the Jacobian cannot be provided, a utility class will{@link org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverterconvert} a (vector) model into a (scalar) objective function.
             * &lt;/p&gt;
             * &lt;p&gt;
             * This package provides common functionality for the optimization algorithms.
             * Abstract classes ({@link org.apache.commons.math3.optim.BaseOptimizer} and{@link org.apache.commons.math3.optim.BaseMultivariateOptimizer}) contain
             * boiler-plate code for storing {@link org.apache.commons.math3.optim.MaxEvalevaluations} and {@link org.apache.commons.math3.optim.MaxIter iterations}counters and a user-defined{@link org.apache.commons.math3.optim.ConvergenceChecker convergence checker}.
             * &lt;/p&gt;
             * &lt;p&gt;
             * For each of the optimizer types, there is a special implementation that
             * wraps an optimizer instance and provides a &quot;multi-start&quot; feature: it calls
             * the underlying optimizer several times with different starting points and
             * returns the best optimum found, or all optima if so desired.
             * This could be useful to avoid being trapped in a local extremum.
             * &lt;/p&gt;            
        </javadoc>
    </source>