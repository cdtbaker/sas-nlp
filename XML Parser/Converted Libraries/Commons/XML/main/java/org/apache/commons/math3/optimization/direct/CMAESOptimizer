<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.direct">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.EigenDecomposition"/>
        <import package="org.apache.commons.math3.linear.MatrixUtils"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.optimization.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optimization.OptimizationData"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.optimization.MultivariateOptimizer"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.optimization.SimpleValueChecker"/>
        <import package="org.apache.commons.math3.random.MersenneTwister"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="CMAESOptimizer" extends="BaseAbstractMultivariateSimpleBoundsOptimizer<MultivariateFunction>" line="44">
            <comment line="45">
                global search parameters                
            </comment>
            <comment line="45">
                ivate int lambda; // population size                
            </comment>
            <comment line="45">
                termination criteria                
            </comment>
            <comment line="45">
                selection strategy parameters                
            </comment>
            <comment line="45">
                ivate int mu; //                
            </comment>
            <comment line="45">
                ivate double mueff; //                
            </comment>
            <comment line="45">
                dynamic strategy parameters and constants                
            </comment>
            <comment line="45">
                CMA internal values - updated each generation                
            </comment>
            <comment line="45">
                -----Matrix utility functions similar to the Matlab build in functions------                
            </comment>
            <implements interface="MultivariateOptimizer"/>
            <javadoc line="44">
                &lt;p&gt;An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)
                 * for non-linear, non-convex, non-smooth, global function minimization.
                 * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method
                 * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or
                 * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local
                 * optima, outlier, etc.) of the objective function. Like a
                 * quasi-Newton method, the CMA-ES learns and applies a variable metric
                 * on the underlying search space. Unlike a quasi-Newton method, the
                 * CMA-ES neither estimates nor uses gradients, making it considerably more
                 * reliable in terms of finding a good, or even close to optimal, solution.&lt;/p&gt;
                 * &lt;p&gt;In general, on smooth objective functions the CMA-ES is roughly ten times
                 * slower than BFGS (counting objective function evaluations, no gradients provided).
                 * For up to &lt;math&gt;N=10&lt;/math&gt; variables also the derivative-free simplex
                 * direct search method (Nelder and Mead) can be faster, but it is
                 * far less reliable than CMA-ES.&lt;/p&gt;
                 * &lt;p&gt;The CMA-ES is particularly well suited for non-separable
                 * and/or badly conditioned problems. To observe the advantage of CMA compared
                 * to a conventional evolution strategy, it will usually take about
                 * &lt;math&gt;30 N&lt;/math&gt; function evaluations. On difficult problems the complete
                 * optimization (a single run) is expected to take &lt;em&gt;roughly&lt;/em&gt; between
                 * &lt;math&gt;30 N&lt;/math&gt; and &lt;math&gt;300 N&lt;sup&gt;2&lt;/sup&gt;&lt;/math&gt;
                 * function evaluations.&lt;/p&gt;
                 * &lt;p&gt;This implementation is translated and adapted from the Matlab version
                 * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.&lt;/p&gt;
                 * For more information, please refer to the following links:
                 * &lt;ul&gt;
                 * &lt;li&gt;&lt;a href=&quot;http://www.lri.fr/~hansen/cmaes.m&quot;&gt;Matlab code&lt;/a&gt;&lt;/li&gt;
                 * &lt;li&gt;&lt;a href=&quot;http://www.lri.fr/~hansen/cmaesintro.html&quot;&gt;Introduction to CMA-ES&lt;/a&gt;&lt;/li&gt;
                 * &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/CMA-ES&quot;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
                 * &lt;/ul&gt;                
                <@version>
                    n $Id: CMAESOptimizer.java 1462503 2013-03-29 15:48:27Z luc $                    
                </@version>
                <@deprecated>
                    d As of 3.1 (to be removed in 4.0).                    
                </@deprecated>
                <@since>
                    e 3.0                    
                </@since>
            </javadoc>
            <declaration name="DEFAULT_CHECKFEASABLECOUNT" type="int" line="89"/>
            <javadoc line="89">
                Default value for {@link #checkFeasableCount}: {@value}.                
            </javadoc>
            <declaration name="DEFAULT_STOPFITNESS" type="double" line="91"/>
            <javadoc line="91">
                Default value for {@link #stopFitness}: {@value}.                
            </javadoc>
            <declaration name="DEFAULT_ISACTIVECMA" type="boolean" line="93"/>
            <javadoc line="93">
                Default value for {@link #isActiveCMA}: {@value}.                
            </javadoc>
            <declaration name="DEFAULT_MAXITERATIONS" type="int" line="95"/>
            <javadoc line="95">
                Default value for {@link #maxIterations}: {@value}.                
            </javadoc>
            <declaration name="DEFAULT_DIAGONALONLY" type="int" line="97"/>
            <javadoc line="97">
                Default value for {@link #diagonalOnly}: {@value}.                
            </javadoc>
            <declaration name="DEFAULT_RANDOMGENERATOR" type="RandomGenerator" line="99"/>
            <javadoc line="99">
                Default value for {@link #random}.                
            </javadoc>
            <declaration name="lambda" type="int" line="103"/>
            <javadoc line="103">
                Population size, offspring number. The primary strategy parameter to play
                 * with, which can be increased from its default value. Increasing the
                 * population size improves global search properties in exchange to speed.
                 * Speed decreases, as a rule, at most linearly with increasing population
                 * size. It is advisable to begin with the default small population size.                
            </javadoc>
            <declaration name="isActiveCMA" type="boolean" line="111"/>
            <javadoc line="111">
                Covariance update mechanism, default is active CMA. isActiveCMA = true
                 * turns on &quot;active CMA&quot; with a negative update of the covariance matrix and
                 * checks for positive definiteness. OPTS.CMA.active = 2 does not check for
                 * pos. def. and is numerically faster. Active CMA usually speeds up the
                 * adaptation.                
            </javadoc>
            <declaration name="checkFeasableCount" type="int" line="119"/>
            <javadoc line="119">
                Determines how often a new random offspring is generated in case it is
                 * not feasible / beyond the defined limits, default is 0.                
            </javadoc>
            <declaration name="inputSigma" type="double[]" line="124"/>
            <javadoc line="124">
                @see Sigma                
            </javadoc>
            <declaration name="dimension" type="int" line="128"/>
            <javadoc line="128">
                Number of objective variables/problem dimension                
            </javadoc>
            <declaration name="diagonalOnly" type="int" line="130"/>
            <javadoc line="130">
                Defines the number of initial iterations, where the covariance matrix
                 * remains diagonal and the algorithm has internally linear time complexity.
                 * diagonalOnly = 1 means keeping the covariance matrix always diagonal and
                 * this setting also exhibits linear space complexity. This can be
                 * particularly useful for dimension &gt; 100.                
                <@see>
                    e <a href="http://hal.archives-ouvertes.fr/inria-00287367/en">A Simple Modification in CMA-ES</a>                    
                </@see>
            </javadoc>
            <declaration name="isMinimize" type="boolean" line="139"/>
            <javadoc line="139">
                Number of objective variables/problem dimension                
            </javadoc>
            <declaration name="generateStatistics" type="boolean" line="141"/>
            <javadoc line="141">
                Indicates whether statistic data is collected.                
            </javadoc>
            <declaration name="maxIterations" type="int" line="145"/>
            <javadoc line="145">
                Maximal number of iterations allowed.                
            </javadoc>
            <declaration name="stopFitness" type="double" line="147"/>
            <javadoc line="147">
                Limit for fitness value.                
            </javadoc>
            <declaration name="stopTolUpX" type="double" line="149"/>
            <javadoc line="149">
                Stop if x-changes larger stopTolUpX.                
            </javadoc>
            <declaration name="stopTolX" type="double" line="151"/>
            <javadoc line="151">
                Stop if x-change smaller stopTolX.                
            </javadoc>
            <declaration name="stopTolFun" type="double" line="153"/>
            <javadoc line="153">
                Stop if fun-changes smaller stopTolFun.                
            </javadoc>
            <declaration name="stopTolHistFun" type="double" line="155"/>
            <javadoc line="155">
                Stop if back fun-changes smaller stopTolHistFun.                
            </javadoc>
            <declaration name="mu" type="int" line="159"/>
            <javadoc line="159">
                Number of parents/points for recombination.                
            </javadoc>
            <declaration name="logMu2" type="double" line="161"/>
            <javadoc line="161">
                log(mu + 0.5), stored for efficiency.                
            </javadoc>
            <declaration name="weights" type="RealMatrix" line="163"/>
            <javadoc line="163">
                Array for weighted recombination.                
            </javadoc>
            <declaration name="mueff" type="double" line="165"/>
            <javadoc line="165">
                Variance-effectiveness of sum w_i x_i.                
            </javadoc>
            <declaration name="sigma" type="double" line="169"/>
            <javadoc line="169">
                Overall standard deviation - search volume.                
            </javadoc>
            <declaration name="cc" type="double" line="171"/>
            <javadoc line="171">
                Cumulation constant.                
            </javadoc>
            <declaration name="cs" type="double" line="173"/>
            <javadoc line="173">
                Cumulation constant for step-size.                
            </javadoc>
            <declaration name="damps" type="double" line="175"/>
            <javadoc line="175">
                Damping for step-size.                
            </javadoc>
            <declaration name="ccov1" type="double" line="177"/>
            <javadoc line="177">
                Learning rate for rank-one update.                
            </javadoc>
            <declaration name="ccovmu" type="double" line="179"/>
            <javadoc line="179">
                Learning rate for rank-mu update&apos;                
            </javadoc>
            <declaration name="chiN" type="double" line="181"/>
            <javadoc line="181">
                Expectation of ||N(0,I)|| == norm(randn(N,1)).                
            </javadoc>
            <declaration name="ccov1Sep" type="double" line="183"/>
            <javadoc line="183">
                Learning rate for rank-one update - diagonalOnly                
            </javadoc>
            <declaration name="ccovmuSep" type="double" line="185"/>
            <javadoc line="185">
                Learning rate for rank-mu update - diagonalOnly                
            </javadoc>
            <declaration name="xmean" type="RealMatrix" line="189"/>
            <javadoc line="189">
                Objective variables.                
            </javadoc>
            <declaration name="pc" type="RealMatrix" line="191"/>
            <javadoc line="191">
                Evolution path.                
            </javadoc>
            <declaration name="ps" type="RealMatrix" line="193"/>
            <javadoc line="193">
                Evolution path for sigma.                
            </javadoc>
            <declaration name="normps" type="double" line="195"/>
            <javadoc line="195">
                Norm of ps, stored for efficiency.                
            </javadoc>
            <declaration name="B" type="RealMatrix" line="197"/>
            <javadoc line="197">
                Coordinate system.                
            </javadoc>
            <declaration name="D" type="RealMatrix" line="199"/>
            <javadoc line="199">
                Scaling.                
            </javadoc>
            <declaration name="BD" type="RealMatrix" line="201"/>
            <javadoc line="201">
                B*D, stored for efficiency.                
            </javadoc>
            <declaration name="diagD" type="RealMatrix" line="203"/>
            <javadoc line="203">
                Diagonal of sqrt(D), stored for efficiency.                
            </javadoc>
            <declaration name="C" type="RealMatrix" line="205"/>
            <javadoc line="205">
                Covariance matrix.                
            </javadoc>
            <declaration name="diagC" type="RealMatrix" line="207"/>
            <javadoc line="207">
                Diagonal of C, used for diagonalOnly.                
            </javadoc>
            <declaration name="iterations" type="int" line="209"/>
            <javadoc line="209">
                Number of iterations already performed.                
            </javadoc>
            <declaration name="fitnessHistory" type="double[]" line="212"/>
            <javadoc line="212">
                History queue of best values.                
            </javadoc>
            <declaration name="historySize" type="int" line="214"/>
            <javadoc line="214">
                Size of history queue of best values.                
            </javadoc>
            <declaration name="random" type="RandomGenerator" line="217"/>
            <javadoc line="217">
                Random generator.                
            </javadoc>
            <declaration name="statisticsSigmaHistory" type="List&lt;Double&gt;" line="220"/>
            <javadoc line="220">
                History of sigma values.                
            </javadoc>
            <declaration name="statisticsMeanHistory" type="List&lt;RealMatrix&gt;" line="222"/>
            <javadoc line="222">
                History of mean matrix.                
            </javadoc>
            <declaration name="statisticsFitnessHistory" type="List&lt;Double&gt;" line="224"/>
            <javadoc line="224">
                History of fitness values.                
            </javadoc>
            <declaration name="statisticsDHistory" type="List&lt;RealMatrix&gt;" line="226"/>
            <javadoc line="226">
                History of D matrix.                
            </javadoc>
            <javadoc line="229">
                Default constructor, uses default parameters                
                <@deprecated>
                    d As of version 3.1: Parameter {@code lambda} must be
                     * passed with the call to {@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])optimize} (whereas in the current code it is set to an undocumented value).                    
                </@deprecated>
            </javadoc>
            <method name="CMAESOptimizer" type="constructor" line="236"/>
            <javadoc line="240">
                @param lambda Population size.                
                <@deprecated>
                    d As of version 3.1: Parameter {@code lambda} must be
                     * passed with the call to {@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])optimize} (whereas in the current code it is set to an undocumented value)..                    
                </@deprecated>
            </javadoc>
            <method name="CMAESOptimizer" type="constructor" line="246"/>
            <javadoc line="253">
                @param lambda Population size.                
                <@param>
                    m inputSigma Initial standard deviations to sample new points
                     * around the initial guess.                    
                </@param>
                <@deprecated>
                    d As of version 3.1: Parameters {@code lambda} and {@code inputSigma} must be
                     * passed with the call to {@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])optimize}.                    
                </@deprecated>
            </javadoc>
            <method name="CMAESOptimizer" type="constructor" line="262"/>
            <javadoc line="268">
                @param lambda Population size.                
                <@param>
                    m inputSigma Initial standard deviations to sample new points
                     * around the initial guess.                    
                </@param>
                <@param>
                    m maxIterations Maximal number of iterations.                    
                </@param>
                <@param>
                    m stopFitness Whether to stop if objective function value is smaller than{@code stopFitness}.                    
                </@param>
                <@param>
                    m isActiveCMA Chooses the covariance matrix update method.                    
                </@param>
                <@param>
                    m diagonalOnly Number of initial iterations, where the covariance matrix
                     * remains diagonal.                    
                </@param>
                <@param>
                    m checkFeasableCount Determines how often new random objective variables are
                     * generated in case they are out of bounds.                    
                </@param>
                <@param>
                    m random Random generator.                    
                </@param>
                <@param>
                    m generateStatistics Whether statistic data is collected.                    
                </@param>
                <@deprecated>
                    d See {@link SimpleValueChecker#SimpleValueChecker()}                    
                </@deprecated>
            </javadoc>
            <method name="CMAESOptimizer" type="constructor" line="288"/>
            <javadoc line="294">
                @param lambda Population size.                
                <@param>
                    m inputSigma Initial standard deviations to sample new points
                     * around the initial guess.                    
                </@param>
                <@param>
                    m maxIterations Maximal number of iterations.                    
                </@param>
                <@param>
                    m stopFitness Whether to stop if objective function value is smaller than{@code stopFitness}.                    
                </@param>
                <@param>
                    m isActiveCMA Chooses the covariance matrix update method.                    
                </@param>
                <@param>
                    m diagonalOnly Number of initial iterations, where the covariance matrix
                     * remains diagonal.                    
                </@param>
                <@param>
                    m checkFeasableCount Determines how often new random objective variables are
                     * generated in case they are out of bounds.                    
                </@param>
                <@param>
                    m random Random generator.                    
                </@param>
                <@param>
                    m generateStatistics Whether statistic data is collected.                    
                </@param>
                <@param>
                    m checker Convergence checker.                    
                </@param>
                <@deprecated>
                    d As of version 3.1: Parameters {@code lambda} and {@code inputSigma} must be
                     * passed with the call to {@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])optimize}.                    
                </@deprecated>
            </javadoc>
            <method name="CMAESOptimizer" type="constructor" line="318"/>
            <javadoc line="331">
                @param maxIterations Maximal number of iterations.                
                <@param>
                    m stopFitness Whether to stop if objective function value is smaller than{@code stopFitness}.                    
                </@param>
                <@param>
                    m isActiveCMA Chooses the covariance matrix update method.                    
                </@param>
                <@param>
                    m diagonalOnly Number of initial iterations, where the covariance matrix
                     * remains diagonal.                    
                </@param>
                <@param>
                    m checkFeasableCount Determines how often new random objective variables are
                     * generated in case they are out of bounds.                    
                </@param>
                <@param>
                    m random Random generator.                    
                </@param>
                <@param>
                    m generateStatistics Whether statistic data is collected.                    
                </@param>
                <@param>
                    m checker Convergence checker.                    
                </@param>
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="CMAESOptimizer" type="constructor" line="353"/>
            <javadoc line="364">
                @return History of sigma values.                
            </javadoc>
            <method name="getStatisticsSigmaHistory" type="List<Double>" line="367"/>
            <javadoc line="371">
                @return History of mean matrix.                
            </javadoc>
            <method name="getStatisticsMeanHistory" type="List<RealMatrix>" line="374"/>
            <javadoc line="378">
                @return History of fitness values.                
            </javadoc>
            <method name="getStatisticsFitnessHistory" type="List<Double>" line="381"/>
            <javadoc line="385">
                @return History of D matrix.                
            </javadoc>
            <method name="getStatisticsDHistory" type="List<RealMatrix>" line="388"/>
            <class name="Sigma" line="392">
                <implements interface="OptimizationData"/>
                <javadoc line="392">
                    Input sigma values.
                     * They define the initial coordinate-wise standard deviations for
                     * sampling new search points around the initial guess.
                     * It is suggested to set them to the estimated distance from the
                     * initial to the desired optimum.
                     * Small values induce the search to be more local (and very small
                     * values are more likely to find a local optimum close to the initial
                     * guess).
                     * Too small values might however lead to early termination.                    
                    <@since>
                        e 3.1                        
                    </@since>
                </javadoc>
                <declaration name="sigma" type="double[]" line="405"/>
                <javadoc line="405">
                    Sigma values.                    
                </javadoc>
                <javadoc line="408">
                    @param s Sigma values.                    
                    <@throws>
                        s NotPositiveException if any of the array entries is smaller
                         * than zero.                        
                    </@throws>
                </javadoc>
                <method name="Sigma" type="constructor" line="414">
                    <scope line="415">
                        <scope line="416"/>
                    </scope>
                </method>
                <javadoc line="424">
                    @return the sigma values.                    
                </javadoc>
                <method name="getSigma" type="double[]" line="427"/>
            </class>
            <class name="PopulationSize" line="432">
                <implements interface="OptimizationData"/>
                <javadoc line="432">
                    Population size.
                     * The number of offspring is the primary strategy parameter.
                     * In the absence of better clues, a good default could be an
                     * integer close to {@code 4 + 3 ln(n)}, where {@code n} is the
                     * number of optimized parameters.
                     * Increasing the population size improves global search properties
                     * at the expense of speed (which in general decreases at most
                     * linearly with increasing population size).                    
                    <@since>
                        e 3.1                        
                    </@since>
                </javadoc>
                <declaration name="lambda" type="int" line="444"/>
                <javadoc line="444">
                    Population size.                    
                </javadoc>
                <javadoc line="447">
                    @param size Population size.                    
                    <@throws>
                        s NotStrictlyPositiveException if {@code size <= 0}.                        
                    </@throws>
                </javadoc>
                <method name="PopulationSize" type="constructor" line="452">
                    <scope line="453"/>
                </method>
                <javadoc line="459">
                    @return the population size.                    
                </javadoc>
                <method name="getPopulationSize" type="int" line="462"/>
            </class>
            <javadoc line="467">
                Optimize an objective function.                
                <@param>
                    m maxEval Allowed number of evaluations of the objective function.                    
                </@param>
                <@param>
                    m f Objective function.                    
                </@param>
                <@param>
                    m goalType Optimization type.                    
                </@param>
                <@param>
                    m optData Optimization data. The following data will be looked for:
                     * <ul>
                     * <li>{@link org.apache.commons.math3.optimization.InitialGuess InitialGuess}</li>
                     * <li>{@link Sigma}</li>
                     * <li>{@link PopulationSize}</li>
                     * </ul>                    
                </@param>
                <@return>
                    n the point/value pair giving the optimal value for objective
                     * function.                    
                </@return>
            </javadoc>
            <method name="optimizeInternal" type="PointValuePair" line="485">
                <comment line="486">
                    Scan &quot;optData&quot; for the input specific to this optimizer.                    
                </comment>
                <comment line="486">
                    The parent&apos;s method will retrieve the common parameters from                    
                </comment>
                <comment line="486">
                    &quot;optData&quot; and call &quot;doOptimize&quot;.                    
                </comment>
            </method>
            <javadoc line="494">
                {@inheritDoc}                
            </javadoc>
            <method name="doOptimize" type="PointValuePair" line="496">
                <comment line="497">
                    -------------------- Initialization --------------------------------                    
                </comment>
                <comment line="497">
                    number of objective variables/problem dimension                    
                </comment>
                <comment line="497">
                    -------------------- Generation Loop --------------------------------                    
                </comment>
                <declaration name="fitfun" type="FitnessFunction" line="500"/>
                <declaration name="guess" type="double[]" line="501"/>
                <declaration name="bestValue" type="double" line="506"/>
                <declaration name="optimum" type="PointValuePair" line="508"/>
                <declaration name="lastResult" type="PointValuePair" line="510"/>
                <scope line="515">
                    <declaration name="arz" type="RealMatrix" line="517"/>
                    <declaration name="arx" type="RealMatrix" line="518"/>
                    <declaration name="fitness" type="double[]" line="519"/>
                    <scope line="521">
                        <declaration name="arxk" type="RealMatrix" line="522"/>
                        <scope line="523">
                            <scope line="524"/>
                            <scope line="527"/>
                            <scope line="532"/>
                        </scope>
                        <scope line="539"/>
                        <scope line="541"/>
                    </scope>
                    <declaration name="arindex" type="int[]" line="546"/>
                    <declaration name="xold" type="RealMatrix" line="548"/>
                    <declaration name="bestArx" type="RealMatrix" line="549"/>
                    <declaration name="bestArz" type="RealMatrix" line="551"/>
                    <declaration name="zmean" type="RealMatrix" line="552"/>
                    <declaration name="hsig" type="boolean" line="553"/>
                    <scope line="554"/>
                    <scope line="556"/>
                    <declaration name="bestFitness" type="double" line="561"/>
                    <declaration name="worstFitness" type="double" line="562"/>
                    <scope line="563">
                        <scope line="569"/>
                    </scope>
                    <scope line="575"/>
                    <declaration name="sqrtDiagC" type="double[]" line="578"/>
                    <declaration name="pcCol" type="double[]" line="579"/>
                    <scope line="580">
                        <scope line="581"/>
                        <scope line="584"/>
                    </scope>
                    <scope line="588">
                        <scope line="589"/>
                    </scope>
                    <declaration name="historyBest" type="double" line="593"/>
                    <declaration name="historyWorst" type="double" line="594"/>
                    <scope line="597"/>
                    <scope line="601"/>
                    <scope line="605"/>
                    <scope line="609">
                        <declaration name="current" type="PointValuePair" line="610"/>
                        <scope line="614"/>
                    </scope>
                    <scope line="620"/>
                    <scope line="624"/>
                    <scope line="630"/>
                </scope>
            </method>
            <javadoc line="640">
                Scans the list of (required and optional) optimization data that
                 * characterize the problem.                
                <@param>
                    m optData Optimization data. The following data will be looked for:
                     * <ul>
                     * <li>{@link Sigma}</li>
                     * <li>{@link PopulationSize}</li>
                     * </ul>                    
                </@param>
            </javadoc>
            <method name="parseOptimizationData" type="void" line="650">
                <comment line="651">
                    The existing values (as set by the previous call) are reused if                    
                </comment>
                <comment line="651">
                    not provided in the argument list.                    
                </comment>
                <scope line="653">
                    <scope line="654"/>
                    <scope line="658"/>
                </scope>
            </method>
            <javadoc line="665">
                Checks dimensions and values of boundaries and inputSigma if defined.                
            </javadoc>
            <method name="checkParameters" type="void" line="668">
                <declaration name="init" type="double[]" line="669"/>
                <declaration name="lB" type="double[]" line="670"/>
                <declaration name="uB" type="double[]" line="671"/>
                <scope line="673">
                    <scope line="674"/>
                    <scope line="677">
                        <scope line="678"/>
                        <scope line="682"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="689">
                Initialization of the dynamic search parameters                
                <@param>
                    m guess Initial guess for the arguments of the fitness function.                    
                </@param>
            </javadoc>
            <method name="initializeCMA" type="void" line="694">
                <comment line="695">
                    initialize sigma                    
                </comment>
                <comment line="695">
                    gma = max(insigma); // overall standard deviation                    
                </comment>
                <comment line="695">
                    initialize termination criteria                    
                </comment>
                <comment line="695">
                    initialize selection strategy parameters                    
                </comment>
                <comment line="695">
                    = lambda / 2; // number of parents/points for recombination                    
                </comment>
                <comment line="695">
                    eff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i                    
                </comment>
                <comment line="695">
                    initialize dynamic strategy parameters and constants                    
                </comment>
                <comment line="695">
                    - dimension / (1e-6 + maxIterations)) + cs; // minor increment                    
                </comment>
                <comment line="695">
                    intialize CMA internal values - updated each generation                    
                </comment>
                <comment line="695">
                    ean = MatrixUtils.createColumnRealMatrix(guess); // objective variables                    
                </comment>
                <comment line="695">
                    = zeros(dimension, 1); // evolution paths for C and sigma                    
                </comment>
                <comment line="695">
                    = zeros(dimension, 1); // B defines the coordinate system                    
                </comment>
                <comment line="695">
                    = ones(dimension, 1); // diagonal D defines the scaling                    
                </comment>
                <comment line="695">
                    = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance                    
                </comment>
                <comment line="695">
                    tnessHistory = new double[historySize]; // history of fitness values                    
                </comment>
                <scope line="695"/>
                <declaration name="sigmaArray" type="double[][]" line="701"/>
                <scope line="702"/>
                <declaration name="insigma" type="RealMatrix" line="707"/>
                <declaration name="sumw" type="double" line="720"/>
                <declaration name="sumwq" type="double" line="721"/>
                <scope line="722">
                    <declaration name="w" type="double" line="723"/>
                </scope>
                <scope line="759"/>
            </method>
            <javadoc line="764">
                Update of the evolution paths ps and pc.                
                <@param>
                    m zmean Weighted row matrix of the gaussian random numbers generating
                     * the current offspring.                    
                </@param>
                <@param>
                    m xold xmean matrix of the previous generation.                    
                </@param>
                <@return>
                    n hsig flag indicating a small correction.                    
                </@return>
            </javadoc>
            <method name="updateEvolutionPaths" type="boolean" line="772">
                <declaration name="hsig" type="boolean" line="777"/>
                <scope line="781"/>
            </method>
            <javadoc line="787">
                Update of the covariance matrix C for diagonalOnly &gt; 0                
                <@param>
                    m hsig Flag indicating a small correction.                    
                </@param>
                <@param>
                    m bestArz Fitness-sorted matrix of the gaussian random values of the
                     * current offspring.                    
                </@param>
            </javadoc>
            <method name="updateCovarianceDiagonalOnly" type="void" line="795">
                <comment line="796">
                    minor correction if hsig==false                    
                </comment>
                <comment line="796">
                    agD = sqrt(diagC); // replaces eig(C)                    
                </comment>
                <declaration name="oldFac" type="double" line="797"/>
                <scope line="805"/>
            </method>
            <javadoc line="814">
                Update of the covariance matrix C.                
                <@param>
                    m hsig Flag indicating a small correction.                    
                </@param>
                <@param>
                    m bestArx Fitness-sorted matrix of the argument vectors producing the
                     * current offspring.                    
                </@param>
                <@param>
                    m arz Unsorted matrix containing the gaussian random values of the
                     * current offspring.                    
                </@param>
                <@param>
                    m arindex Indices indicating the fitness-order of the current offspring.                    
                </@param>
                <@param>
                    m xold xmean matrix of the previous generation.                    
                </@param>
            </javadoc>
            <method name="updateCovariance" type="void" line="827">
                <declaration name="negccov" type="double" line="828"/>
                <scope line="829">
                    <declaration name="arpos" type="RealMatrix" line="830"/>
                    <declaration name="roneu" type="RealMatrix" line="832"/>
                    <declaration name="oldFac" type="double" line="835"/>
                    <scope line="837">
                        <declaration name="negminresidualvariance" type="double" line="843"/>
                        <declaration name="negalphaold" type="double" line="845"/>
                        <declaration name="arReverseIndex" type="int[]" line="847"/>
                        <declaration name="arzneg" type="RealMatrix" line="848"/>
                        <declaration name="arnorms" type="RealMatrix" line="849"/>
                        <declaration name="idxnorms" type="int[]" line="850"/>
                        <declaration name="arnormsSorted" type="RealMatrix" line="851"/>
                        <declaration name="idxReverse" type="int[]" line="852"/>
                        <declaration name="arnormsReverse" type="RealMatrix" line="853"/>
                        <declaration name="idxInv" type="int[]" line="855"/>
                        <declaration name="arnormsInv" type="RealMatrix" line="856"/>
                        <declaration name="negcovMax" type="double" line="858"/>
                        <scope line="860"/>
                        <declaration name="artmp" type="RealMatrix" line="864"/>
                        <declaration name="Cneg" type="RealMatrix" line="865"/>
                    </scope>
                    <scope line="874"/>
                </scope>
            </method>
            <javadoc line="886">
                Update B and D from C.                
                <@param>
                    m negccov Negative covariance factor.                    
                </@param>
            </javadoc>
            <method name="updateBD" type="void" line="891">
                <scope line="893">
                    <declaration name="eig" type="EigenDecomposition" line="897"/>
                    <scope line="901">
                        <scope line="902">
                            <scope line="903"/>
                        </scope>
                        <declaration name="tfac" type="double" line="907"/>
                    </scope>
                    <scope line="911">
                        <declaration name="tfac" type="double" line="912"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="922">
                Pushes the current best fitness value in a history queue.                
                <@param>
                    m vals History queue.                    
                </@param>
                <@param>
                    m val Current best fitness value.                    
                </@param>
            </javadoc>
            <method name="push" type="void" line="928">
                <scope line="929"/>
            </method>
            <javadoc line="935">
                Sorts fitness values.                
                <@param>
                    m doubles Array of values to be sorted.                    
                </@param>
                <@return>
                    n a sorted array of indices pointing into doubles.                    
                </@return>
            </javadoc>
            <method name="sortedIndices" type="int[]" line="941">
                <declaration name="dis" type="DoubleIndex[]" line="942"/>
                <scope line="943"/>
                <declaration name="indices" type="int[]" line="947"/>
                <scope line="948"/>
            </method>
            <class name="DoubleIndex" line="954">
                <implements interface="Comparable&lt;DoubleIndex&gt;"/>
                <javadoc line="954">
                    Used to sort fitness values. Sorting is always in lower value first
                     * order.                    
                </javadoc>
                <declaration name="value" type="double" line="959"/>
                <javadoc line="959">
                    Value to compare.                    
                </javadoc>
                <declaration name="index" type="int" line="961"/>
                <javadoc line="961">
                    Index into sorted array.                    
                </javadoc>
                <javadoc line="964">
                    @param value Value to compare.                    
                    <@param>
                        m index Index into sorted array.                        
                    </@param>
                </javadoc>
                <method name="DoubleIndex" type="constructor" line="968"/>
                <javadoc line="973">
                    {@inheritDoc}                    
                </javadoc>
                <method name="compareTo" type="int" line="974"/>
                <javadoc line="978">
                    {@inheritDoc}                    
                </javadoc>
                <method name="equals" type="boolean" line="980">
                    <scope line="982"/>
                    <scope line="986"/>
                </method>
                <javadoc line="993">
                    {@inheritDoc}                    
                </javadoc>
                <method name="hashCode" type="int" line="995">
                    <declaration name="bits" type="long" line="996"/>
                </method>
            </class>
            <class name="FitnessFunction" line="1001">
                <javadoc line="1001">
                    Normalizes fitness values to the range [0,1]. Adds a penalty to the
                     * fitness value if out of range. The penalty is adjusted by calling
                     * setValueRange().                    
                </javadoc>
                <declaration name="valueRange" type="double" line="1007"/>
                <javadoc line="1007">
                    Determines the penalty for boundary violations                    
                </javadoc>
                <declaration name="isRepairMode" type="boolean" line="1009"/>
                <javadoc line="1009">
                    Flag indicating whether the objective variables are forced into their
                     * bounds if defined                    
                </javadoc>
                <javadoc line="1015">
                    Simple constructor.                    
                </javadoc>
                <method name="FitnessFunction" type="constructor" line="1017"/>
                <javadoc line="1022">
                    @param point Normalized objective variables.                    
                    <@return>
                        n the objective value + penalty for violated bounds.                        
                    </@return>
                </javadoc>
                <method name="value" type="double" line="1026">
                    <declaration name="value" type="double" line="1027"/>
                    <scope line="1028">
                        <declaration name="repaired" type="double[]" line="1029"/>
                    </scope>
                    <scope line="1032"/>
                </method>
                <javadoc line="1038">
                    @param x Normalized objective variables.                    
                    <@return>
                        n {@code true} if in bounds.                        
                    </@return>
                </javadoc>
                <method name="isFeasible" type="boolean" line="1042">
                    <declaration name="lB" type="double[]" line="1043"/>
                    <declaration name="uB" type="double[]" line="1044"/>
                    <scope line="1046">
                        <scope line="1047"/>
                        <scope line="1050"/>
                    </scope>
                </method>
                <javadoc line="1057">
                    @param valueRange Adjusts the penalty computation.                    
                </javadoc>
                <method name="setValueRange" type="void" line="1060"/>
                <javadoc line="1064">
                    @param x Normalized objective variables.                    
                    <@return>
                        n the repaired (i.e. all in bounds) objective variables.                        
                    </@return>
                </javadoc>
                <method name="repair" type="double[]" line="1068">
                    <declaration name="lB" type="double[]" line="1069"/>
                    <declaration name="uB" type="double[]" line="1070"/>
                    <declaration name="repaired" type="double[]" line="1072"/>
                    <scope line="1073">
                        <scope line="1074"/>
                        <scope line="1076"/>
                        <scope line="1078"/>
                    </scope>
                </method>
                <javadoc line="1085">
                    @param x Normalized objective variables.                    
                    <@param>
                        m repaired Repaired objective variables.                        
                    </@param>
                    <@return>
                        n Penalty value according to the violation of the bounds.                        
                    </@return>
                </javadoc>
                <method name="penalty" type="double" line="1090">
                    <declaration name="penalty" type="double" line="1091"/>
                    <scope line="1092">
                        <declaration name="diff" type="double" line="1093"/>
                    </scope>
                </method>
            </class>
            <javadoc line="1102">
                @param m Input matrix                
                <@return>
                    n Matrix representing the element-wise logarithm of m.                    
                </@return>
            </javadoc>
            <method name="log" type="RealMatrix" line="1106">
                <declaration name="d" type="double[][]" line="1107"/>
                <scope line="1108">
                    <scope line="1109"/>
                </scope>
            </method>
            <javadoc line="1116">
                @param m Input matrix.                
                <@return>
                    n Matrix representing the element-wise square root of m.                    
                </@return>
            </javadoc>
            <method name="sqrt" type="RealMatrix" line="1120">
                <declaration name="d" type="double[][]" line="1121"/>
                <scope line="1122">
                    <scope line="1123"/>
                </scope>
            </method>
            <javadoc line="1130">
                @param m Input matrix.                
                <@return>
                    n Matrix representing the element-wise square of m.                    
                </@return>
            </javadoc>
            <method name="square" type="RealMatrix" line="1134">
                <declaration name="d" type="double[][]" line="1135"/>
                <scope line="1136">
                    <scope line="1137">
                        <declaration name="e" type="double" line="1138"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1145">
                @param m Input matrix 1.                
                <@param>
                    m n Input matrix 2.                    
                </@param>
                <@return>
                    n the matrix where the elements of m and n are element-wise multiplied.                    
                </@return>
            </javadoc>
            <method name="times" type="RealMatrix" line="1150">
                <declaration name="d" type="double[][]" line="1151"/>
                <scope line="1152">
                    <scope line="1153"/>
                </scope>
            </method>
            <javadoc line="1160">
                @param m Input matrix 1.                
                <@param>
                    m n Input matrix 2.                    
                </@param>
                <@return>
                    n Matrix where the elements of m and n are element-wise divided.                    
                </@return>
            </javadoc>
            <method name="divide" type="RealMatrix" line="1165">
                <declaration name="d" type="double[][]" line="1166"/>
                <scope line="1167">
                    <scope line="1168"/>
                </scope>
            </method>
            <javadoc line="1175">
                @param m Input matrix.                
                <@param>
                    m cols Columns to select.                    
                </@param>
                <@return>
                    n Matrix representing the selected columns.                    
                </@return>
            </javadoc>
            <method name="selectColumns" type="RealMatrix" line="1180">
                <declaration name="d" type="double[][]" line="1181"/>
                <scope line="1182">
                    <scope line="1183"/>
                </scope>
            </method>
            <javadoc line="1190">
                @param m Input matrix.                
                <@param>
                    m k Diagonal position.                    
                </@param>
                <@return>
                    n Upper triangular part of matrix.                    
                </@return>
            </javadoc>
            <method name="triu" type="RealMatrix" line="1195">
                <declaration name="d" type="double[][]" line="1196"/>
                <scope line="1197">
                    <scope line="1198"/>
                </scope>
            </method>
            <javadoc line="1205">
                @param m Input matrix.                
                <@return>
                    n Row matrix representing the sums of the rows.                    
                </@return>
            </javadoc>
            <method name="sumRows" type="RealMatrix" line="1209">
                <declaration name="d" type="double[][]" line="1210"/>
                <scope line="1211">
                    <declaration name="sum" type="double" line="1212"/>
                    <scope line="1213"/>
                </scope>
            </method>
            <javadoc line="1221">
                @param m Input matrix.                
                <@return>
                    n the diagonal n-by-n matrix if m is a column matrix or the column
                     * matrix representing the diagonal if m is a n-by-n matrix.                    
                </@return>
            </javadoc>
            <method name="diag" type="RealMatrix" line="1226">
                <scope line="1227">
                    <declaration name="d" type="double[][]" line="1228"/>
                    <scope line="1229"/>
                </scope>
                <scope line="1233">
                    <declaration name="d" type="double[][]" line="1234"/>
                    <scope line="1235"/>
                </scope>
            </method>
            <javadoc line="1242">
                Copies a column from m1 to m2.                
                <@param>
                    m m1 Source matrix.                    
                </@param>
                <@param>
                    m col1 Source column.                    
                </@param>
                <@param>
                    m m2 Target matrix.                    
                </@param>
                <@param>
                    m col2 Target column.                    
                </@param>
            </javadoc>
            <method name="copyColumn" type="void" line="1251">
                <scope line="1252"/>
            </method>
            <javadoc line="1257">
                @param n Number of rows.                
                <@param>
                    m m Number of columns.                    
                </@param>
                <@return>
                    n n-by-m matrix filled with 1.                    
                </@return>
            </javadoc>
            <method name="ones" type="RealMatrix" line="1262">
                <declaration name="d" type="double[][]" line="1263"/>
                <scope line="1264"/>
            </method>
            <javadoc line="1270">
                @param n Number of rows.                
                <@param>
                    m m Number of columns.                    
                </@param>
                <@return>
                    n n-by-m matrix of 0 values out of diagonal, and 1 values on
                     * the diagonal.                    
                </@return>
            </javadoc>
            <method name="eye" type="RealMatrix" line="1276">
                <declaration name="d" type="double[][]" line="1277"/>
                <scope line="1278">
                    <scope line="1279"/>
                </scope>
            </method>
            <javadoc line="1286">
                @param n Number of rows.                
                <@param>
                    m m Number of columns.                    
                </@param>
                <@return>
                    n n-by-m matrix of zero values.                    
                </@return>
            </javadoc>
            <method name="zeros" type="RealMatrix" line="1291"/>
            <javadoc line="1295">
                @param mat Input matrix.                
                <@param>
                    m n Number of row replicates.                    
                </@param>
                <@param>
                    m m Number of column replicates.                    
                </@param>
                <@return>
                    n a matrix which replicates the input matrix in both directions.                    
                </@return>
            </javadoc>
            <method name="repmat" type="RealMatrix" line="1301">
                <declaration name="rd" type="int" line="1302"/>
                <declaration name="cd" type="int" line="1303"/>
                <declaration name="d" type="double[][]" line="1304"/>
                <scope line="1305">
                    <scope line="1306"/>
                </scope>
            </method>
            <javadoc line="1313">
                @param start Start value.                
                <@param>
                    m end End value.                    
                </@param>
                <@param>
                    m step Step size.                    
                </@param>
                <@return>
                    n a sequence as column matrix.                    
                </@return>
            </javadoc>
            <method name="sequence" type="RealMatrix" line="1319">
                <declaration name="size" type="int" line="1320"/>
                <declaration name="d" type="double[][]" line="1321"/>
                <declaration name="value" type="double" line="1322"/>
                <scope line="1323"/>
            </method>
            <javadoc line="1330">
                @param m Input matrix.                
                <@return>
                    n the maximum of the matrix element values.                    
                </@return>
            </javadoc>
            <method name="max" type="double" line="1334">
                <declaration name="max" type="double" line="1335"/>
                <scope line="1336">
                    <scope line="1337">
                        <declaration name="e" type="double" line="1338"/>
                        <scope line="1339"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1347">
                @param m Input matrix.                
                <@return>
                    n the minimum of the matrix element values.                    
                </@return>
            </javadoc>
            <method name="min" type="double" line="1351">
                <declaration name="min" type="double" line="1352"/>
                <scope line="1353">
                    <scope line="1354">
                        <declaration name="e" type="double" line="1355"/>
                        <scope line="1356"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1364">
                @param m Input array.                
                <@return>
                    n the maximum of the array values.                    
                </@return>
            </javadoc>
            <method name="max" type="double" line="1368">
                <declaration name="max" type="double" line="1369"/>
                <scope line="1370">
                    <scope line="1371"/>
                </scope>
            </method>
            <javadoc line="1378">
                @param m Input array.                
                <@return>
                    n the minimum of the array values.                    
                </@return>
            </javadoc>
            <method name="min" type="double" line="1382">
                <declaration name="min" type="double" line="1383"/>
                <scope line="1384">
                    <scope line="1385"/>
                </scope>
            </method>
            <javadoc line="1392">
                @param indices Input index array.                
                <@return>
                    n the inverse of the mapping defined by indices.                    
                </@return>
            </javadoc>
            <method name="inverse" type="int[]" line="1396">
                <declaration name="inverse" type="int[]" line="1397"/>
                <scope line="1398"/>
            </method>
            <javadoc line="1404">
                @param indices Input index array.                
                <@return>
                    n the indices in inverse order (last is first).                    
                </@return>
            </javadoc>
            <method name="reverse" type="int[]" line="1408">
                <declaration name="reverse" type="int[]" line="1409"/>
                <scope line="1410"/>
            </method>
            <javadoc line="1416">
                @param size Length of random array.                
                <@return>
                    n an array of Gaussian random numbers.                    
                </@return>
            </javadoc>
            <method name="randn" type="double[]" line="1420">
                <declaration name="randn" type="double[]" line="1421"/>
                <scope line="1422"/>
            </method>
            <javadoc line="1428">
                @param size Number of rows.                
                <@param>
                    m popSize Population size.                    
                </@param>
                <@return>
                    n a 2-dimensional matrix of Gaussian random numbers.                    
                </@return>
            </javadoc>
            <method name="randn1" type="RealMatrix" line="1433">
                <declaration name="d" type="double[][]" line="1434"/>
                <scope line="1435">
                    <scope line="1436"/>
                </scope>
            </method>
        </class>
    </source>