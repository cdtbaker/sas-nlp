<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.inference">
        <import package="org.apache.commons.math3.distribution.ChiSquaredDistribution"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.ZeroException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="ChiSquareTest" line="31">
            <javadoc line="31">
                Implements Chi-Square test statistics.
                  &lt;p&gt;This implementation handles both known and unknown distributions.&lt;/p&gt;
                  &lt;p&gt;Two samples tests can be used when the distribution is unknown &lt;i&gt;a priori&lt;/i&gt;
                  but provided by one sample, or when the hypothesis under test is that the two
                  samples come from the same underlying distribution.&lt;/p&gt;                
                <@version>
                    n $Id: ChiSquareTest.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
            </javadoc>
            <javadoc line="44">
                Construct a ChiSquareTest                
            </javadoc>
            <method name="ChiSquareTest" type="constructor" line="47"/>
            <javadoc line="51">
                Computes the &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm&quot;&gt;
                  Chi-Square statistic&lt;/a&gt; comparing &lt;code&gt;observed&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt;
                  frequency counts.
                  &lt;p&gt;
                  This statistic can be used to perform a Chi-Square test evaluating the null
                  hypothesis that the observed counts follow the expected distribution.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;Expected counts must all be positive.
                  &lt;/li&gt;
                  &lt;li&gt;Observed counts must all be &amp;ge; 0.
                  &lt;/li&gt;
                  &lt;li&gt;The observed and expected arrays must have the same length and
                  their common length must be at least 2.
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;
                  If any of the preconditions are not met, an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.&lt;/p&gt;
                  &lt;p&gt;&lt;strong&gt;Note: &lt;/strong&gt;This implementation rescales the
                  &lt;code&gt;expected&lt;/code&gt; array if necessary to ensure that the sum of the
                  expected and observed counts are equal.&lt;/p&gt;                
                <@param>
                    m observed array of observed frequency counts                    
                </@param>
                <@param>
                    m expected array of expected frequency counts                    
                </@param>
                <@return>
                    n chiSquare test statistic                    
                </@return>
                <@throws>
                    s NotPositiveException if <code>observed</code> has negative entries                    
                </@throws>
                <@throws>
                    s NotStrictlyPositiveException if <code>expected</code> has entries that are
                      not strictly positive                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if the arrays length is less than 2                    
                </@throws>
            </javadoc>
            <method name="chiSquare" type="double" line="83">
                <params>
                    <param name="expected" type="double[]"/>
                    <param name="observed" type="long[]"/>
                </params>
                <scope line="85"/>
                <scope line="88"/>
                <declaration name="sumExpected" type="double" line="94"/>
                <declaration name="sumObserved" type="double" line="95"/>
                <scope line="96"/>
                <declaration name="ratio" type="double" line="100"/>
                <declaration name="rescale" type="boolean" line="101"/>
                <scope line="102"/>
                <declaration name="sumSq" type="double" line="106"/>
                <scope line="107">
                    <scope line="108">
                        <declaration name="dev" type="double" line="109"/>
                    </scope>
                    <scope line="111">
                        <declaration name="dev" type="double" line="112"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="120">
                Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or &lt;a href=
                  &quot;http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue&quot;&gt;
                  p-value&lt;/a&gt;, associated with a
                  &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm&quot;&gt;
                  Chi-square goodness of fit test&lt;/a&gt; comparing the &lt;code&gt;observed&lt;/code&gt;
                  frequency counts to those in the &lt;code&gt;expected&lt;/code&gt; array.
                  &lt;p&gt;
                  The number returned is the smallest significance level at which one can reject
                  the null hypothesis that the observed counts conform to the frequency distribution
                  described by the expected counts.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;Expected counts must all be positive.
                  &lt;/li&gt;
                  &lt;li&gt;Observed counts must all be &amp;ge; 0.
                  &lt;/li&gt;
                  &lt;li&gt;The observed and expected arrays must have the same length and
                  their common length must be at least 2.
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;
                  If any of the preconditions are not met, an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.&lt;/p&gt;
                  &lt;p&gt;&lt;strong&gt;Note: &lt;/strong&gt;This implementation rescales the
                  &lt;code&gt;expected&lt;/code&gt; array if necessary to ensure that the sum of the
                  expected and observed counts are equal.&lt;/p&gt;                
                <@param>
                    m observed array of observed frequency counts                    
                </@param>
                <@param>
                    m expected array of expected frequency counts                    
                </@param>
                <@return>
                    n p-value                    
                </@return>
                <@throws>
                    s NotPositiveException if <code>observed</code> has negative entries                    
                </@throws>
                <@throws>
                    s NotStrictlyPositiveException if <code>expected</code> has entries that are
                      not strictly positive                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if the arrays length is less than 2                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if an error occurs computing the p-value                    
                </@throws>
            </javadoc>
            <method name="chiSquareTest" type="double" line="157">
                <params>
                    <param name="expected" type="double[]"/>
                    <param name="observed" type="long[]"/>
                </params>
                <declaration name="distribution" type="ChiSquaredDistribution" line="159"/>
            </method>
            <javadoc line="164">
                Performs a &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm&quot;&gt;
                  Chi-square goodness of fit test&lt;/a&gt; evaluating the null hypothesis that the
                  observed counts conform to the frequency distribution described by the expected
                  counts, with significance level &lt;code&gt;alpha&lt;/code&gt;.  Returns true iff the null
                  hypothesis can be rejected with 100  (1 - alpha) percent confidence.
                  &lt;p&gt;
                  &lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
                  To test the hypothesis that &lt;code&gt;observed&lt;/code&gt; follows
                  &lt;code&gt;expected&lt;/code&gt; at the 99% level, use &lt;/p&gt;&lt;p&gt;
                  &lt;code&gt;chiSquareTest(expected, observed, 0.01) &lt;/code&gt;&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;Expected counts must all be positive.
                  &lt;/li&gt;
                  &lt;li&gt;Observed counts must all be &amp;ge; 0.
                  &lt;/li&gt;
                  &lt;li&gt;The observed and expected arrays must have the same length and
                  their common length must be at least 2.
                  &lt;li&gt; &lt;code&gt; 0 &amp;lt; alpha &amp;lt; 0.5 &lt;/code&gt;
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;
                  If any of the preconditions are not met, an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.&lt;/p&gt;
                  &lt;p&gt;&lt;strong&gt;Note: &lt;/strong&gt;This implementation rescales the
                  &lt;code&gt;expected&lt;/code&gt; array if necessary to ensure that the sum of the
                  expected and observed counts are equal.&lt;/p&gt;                
                <@param>
                    m observed array of observed frequency counts                    
                </@param>
                <@param>
                    m expected array of expected frequency counts                    
                </@param>
                <@param>
                    m alpha significance level of the test                    
                </@param>
                <@return>
                    n true iff null hypothesis can be rejected with confidence
                      1 - alpha                    
                </@return>
                <@throws>
                    s NotPositiveException if <code>observed</code> has negative entries                    
                </@throws>
                <@throws>
                    s NotStrictlyPositiveException if <code>expected</code> has entries that are
                      not strictly positive                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if the arrays length is less than 2                    
                </@throws>
                <@throws>
                    s OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if an error occurs computing the p-value                    
                </@throws>
            </javadoc>
            <method name="chiSquareTest" type="boolean" line="206">
                <params>
                    <param name="expected" type="double[]"/>
                    <param name="observed" type="long[]"/>
                    <param name="alpha" type="double"/>
                </params>
                <scope line="208"/>
            </method>
            <javadoc line="216">
                Computes the Chi-Square statistic associated with a
                  &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/prc/section4/prc45.htm&quot;&gt;
                  chi-square test of independence&lt;/a&gt; based on the input &lt;code&gt;counts&lt;/code&gt;
                  array, viewed as a two-way table.
                  &lt;p&gt;
                  The rows of the 2-way table are
                  &lt;code&gt;count[0], ... , count[count.length - 1] &lt;/code&gt;&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;All counts must be &amp;ge; 0.
                  &lt;/li&gt;
                  &lt;li&gt;The count array must be rectangular (i.e. all count[i] subarrays
                  must have the same length).
                  &lt;/li&gt;
                  &lt;li&gt;The 2-way table represented by &lt;code&gt;counts&lt;/code&gt; must have at
                  least 2 columns and at least 2 rows.
                  &lt;/li&gt;
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;
                  If any of the preconditions are not met, an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.&lt;/p&gt;                
                <@param>
                    m counts array representation of 2-way table                    
                </@param>
                <@return>
                    n chiSquare test statistic                    
                </@return>
                <@throws>
                    s NullArgumentException if the array is null                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if the array is not rectangular                    
                </@throws>
                <@throws>
                    s NotPositiveException if {@code counts} has negative entries                    
                </@throws>
            </javadoc>
            <method name="chiSquare" type="double" line="246">
                <params>
                    <param name="counts" type="long[][]"/>
                </params>
                <comment line="247">
                    compute row, column and total sums                    
                </comment>
                <comment line="247">
                    compute expected counts and chi-square                    
                </comment>
                <declaration name="nRows" type="int" line="249"/>
                <declaration name="nCols" type="int" line="250"/>
                <declaration name="rowSum" type="double[]" line="253"/>
                <declaration name="colSum" type="double[]" line="254"/>
                <declaration name="total" type="double" line="255"/>
                <scope line="256">
                    <scope line="257"/>
                </scope>
                <declaration name="sumSq" type="double" line="265"/>
                <declaration name="expected" type="double" line="266"/>
                <scope line="267">
                    <scope line="268"/>
                </scope>
            </method>
            <javadoc line="278">
                Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or &lt;a href=
                  &quot;http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue&quot;&gt;
                  p-value&lt;/a&gt;, associated with a
                  &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/prc/section4/prc45.htm&quot;&gt;
                  chi-square test of independence&lt;/a&gt; based on the input &lt;code&gt;counts&lt;/code&gt;
                  array, viewed as a two-way table.
                  &lt;p&gt;
                  The rows of the 2-way table are
                  &lt;code&gt;count[0], ... , count[count.length - 1] &lt;/code&gt;&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;All counts must be &amp;ge; 0.
                  &lt;/li&gt;
                  &lt;li&gt;The count array must be rectangular (i.e. all count[i] subarrays must have
                  the same length).
                  &lt;/li&gt;
                  &lt;li&gt;The 2-way table represented by &lt;code&gt;counts&lt;/code&gt; must have at least 2
                  columns and at least 2 rows.
                  &lt;/li&gt;
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;
                  If any of the preconditions are not met, an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.&lt;/p&gt;                
                <@param>
                    m counts array representation of 2-way table                    
                </@param>
                <@return>
                    n p-value                    
                </@return>
                <@throws>
                    s NullArgumentException if the array is null                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if the array is not rectangular                    
                </@throws>
                <@throws>
                    s NotPositiveException if {@code counts} has negative entries                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if an error occurs computing the p-value                    
                </@throws>
            </javadoc>
            <method name="chiSquareTest" type="double" line="311">
                <params>
                    <param name="counts" type="long[][]"/>
                </params>
                <declaration name="df" type="double" line="314"/>
                <declaration name="distribution" type="ChiSquaredDistribution" line="315"/>
            </method>
            <javadoc line="321">
                Performs a &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/prc/section4/prc45.htm&quot;&gt;
                  chi-square test of independence&lt;/a&gt; evaluating the null hypothesis that the
                  classifications represented by the counts in the columns of the input 2-way table
                  are independent of the rows, with significance level &lt;code&gt;alpha&lt;/code&gt;.
                  Returns true iff the null hypothesis can be rejected with 100  (1 - alpha) percent
                  confidence.
                  &lt;p&gt;
                  The rows of the 2-way table are
                  &lt;code&gt;count[0], ... , count[count.length - 1] &lt;/code&gt;&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
                  To test the null hypothesis that the counts in
                  &lt;code&gt;count[0], ... , count[count.length - 1] &lt;/code&gt;
                  all correspond to the same underlying probability distribution at the 99% level, use&lt;/p&gt;
                  &lt;p&gt;&lt;code&gt;chiSquareTest(counts, 0.01)&lt;/code&gt;&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;All counts must be &amp;ge; 0.
                  &lt;/li&gt;
                  &lt;li&gt;The count array must be rectangular (i.e. all count[i] subarrays must have the
                  same length).&lt;/li&gt;
                  &lt;li&gt;The 2-way table represented by &lt;code&gt;counts&lt;/code&gt; must have at least 2 columns and
                  at least 2 rows.&lt;/li&gt;
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;
                  If any of the preconditions are not met, an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.&lt;/p&gt;                
                <@param>
                    m counts array representation of 2-way table                    
                </@param>
                <@param>
                    m alpha significance level of the test                    
                </@param>
                <@return>
                    n true iff null hypothesis can be rejected with confidence
                      1 - alpha                    
                </@return>
                <@throws>
                    s NullArgumentException if the array is null                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if the array is not rectangular                    
                </@throws>
                <@throws>
                    s NotPositiveException if {@code counts} has any negative entries                    
                </@throws>
                <@throws>
                    s OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if an error occurs computing the p-value                    
                </@throws>
            </javadoc>
            <method name="chiSquareTest" type="boolean" line="361">
                <params>
                    <param name="counts" type="long[][]"/>
                    <param name="alpha" type="double"/>
                </params>
                <scope line="363"/>
            </method>
            <javadoc line="371">
                &lt;p&gt;Computes a
                  &lt;a href=&quot;http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/chi2samp.htm&quot;&gt;
                  Chi-Square two sample test statistic&lt;/a&gt; comparing bin frequency counts
                  in &lt;code&gt;observed1&lt;/code&gt; and &lt;code&gt;observed2&lt;/code&gt;.  The
                  sums of frequency counts in the two samples are not required to be the
                  same.  The formula used to compute the test statistic is&lt;/p&gt;
                  &lt;code&gt;
                  &amp;sum;[(K  observed1[i] - observed2[i]/K)&lt;sup&gt;2&lt;/sup&gt; / (observed1[i] + observed2[i])]
                  &lt;/code&gt; where
                  &lt;br/&gt;&lt;code&gt;K = &amp;sqrt;[&amp;sum(observed2 / &amp;sum;(observed1)]&lt;/code&gt;
                  &lt;/p&gt;
                  &lt;p&gt;This statistic can be used to perform a Chi-Square test evaluating the
                  null hypothesis that both observed counts follow the same distribution.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;Observed counts must be non-negative.
                  &lt;/li&gt;
                  &lt;li&gt;Observed counts for a specific bin must not both be zero.
                  &lt;/li&gt;
                  &lt;li&gt;Observed counts for a specific sample must not all be 0.
                  &lt;/li&gt;
                  &lt;li&gt;The arrays &lt;code&gt;observed1&lt;/code&gt; and &lt;code&gt;observed2&lt;/code&gt; must have
                  the same length and their common length must be at least 2.
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;
                  If any of the preconditions are not met, an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.&lt;/p&gt;                
                <@param>
                    m observed1 array of observed frequency counts of the first data set                    
                </@param>
                <@param>
                    m observed2 array of observed frequency counts of the second data set                    
                </@param>
                <@return>
                    n chiSquare test statistic                    
                </@return>
                <@throws>
                    s DimensionMismatchException the the length of the arrays does not match                    
                </@throws>
                <@throws>
                    s NotPositiveException if any entries in <code>observed1</code> or
                      <code>observed2</code> are negative                    
                </@throws>
                <@throws>
                    s ZeroException if either all counts of <code>observed1</code> or
                      <code>observed2</code> are zero, or if the count at some index is zero
                      for both arrays                    
                </@throws>
                <@since>
                    e 1.2                    
                </@since>
            </javadoc>
            <method name="chiSquareDataSetsComparison" type="double" line="411">
                <params>
                    <param name="observed1" type="long[]"/>
                    <param name="observed2" type="long[]"/>
                </params>
                <comment line="412">
                    Make sure lengths are same                    
                </comment>
                <comment line="412">
                    Ensure non-negative counts                    
                </comment>
                <comment line="412">
                    Compute and compare count sums                    
                </comment>
                <comment line="412">
                    Ensure neither sample is uniformly 0                    
                </comment>
                <comment line="412">
                    Compare and compute weight only if different                    
                </comment>
                <comment line="412">
                    Compute ChiSquare statistic                    
                </comment>
                <scope line="414"/>
                <scope line="417"/>
                <declaration name="countSum1" type="long" line="426"/>
                <declaration name="countSum2" type="long" line="427"/>
                <declaration name="unequalCounts" type="boolean" line="428"/>
                <declaration name="weight" type="double" line="429"/>
                <scope line="430"/>
                <scope line="435"/>
                <scope line="440"/>
                <declaration name="sumSq" type="double" line="444"/>
                <declaration name="dev" type="double" line="445"/>
                <declaration name="obs1" type="double" line="446"/>
                <declaration name="obs2" type="double" line="447"/>
                <scope line="448">
                    <scope line="449"/>
                    <scope line="451">
                        <scope line="454"/>
                        <scope line="456"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="465">
                &lt;p&gt;Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or &lt;a href=
                  &quot;http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue&quot;&gt;
                  p-value&lt;/a&gt;, associated with a Chi-Square two sample test comparing
                  bin frequency counts in &lt;code&gt;observed1&lt;/code&gt; and
                  &lt;code&gt;observed2&lt;/code&gt;.
                  &lt;/p&gt;
                  &lt;p&gt;The number returned is the smallest significance level at which one
                  can reject the null hypothesis that the observed counts conform to the
                  same distribution.
                  &lt;/p&gt;
                  &lt;p&gt;See {@link #chiSquareDataSetsComparison(long[],long[])} for details
                  on the formula used to compute the test statistic. The degrees of
                  of freedom used to perform the test is one less than the common length
                  of the input observed count arrays.
                  &lt;/p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;Observed counts must be non-negative.
                  &lt;/li&gt;
                  &lt;li&gt;Observed counts for a specific bin must not both be zero.
                  &lt;/li&gt;
                  &lt;li&gt;Observed counts for a specific sample must not all be 0.
                  &lt;/li&gt;
                  &lt;li&gt;The arrays &lt;code&gt;observed1&lt;/code&gt; and &lt;code&gt;observed2&lt;/code&gt; must
                  have the same length and
                  their common length must be at least 2.
                  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
                  If any of the preconditions are not met, an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.&lt;/p&gt;                
                <@param>
                    m observed1 array of observed frequency counts of the first data set                    
                </@param>
                <@param>
                    m observed2 array of observed frequency counts of the second data set                    
                </@param>
                <@return>
                    n p-value                    
                </@return>
                <@throws>
                    s DimensionMismatchException the the length of the arrays does not match                    
                </@throws>
                <@throws>
                    s NotPositiveException if any entries in <code>observed1</code> or
                      <code>observed2</code> are negative                    
                </@throws>
                <@throws>
                    s ZeroException if either all counts of <code>observed1</code> or
                      <code>observed2</code> are zero, or if the count at the same index is zero
                      for both arrays                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if an error occurs computing the p-value                    
                </@throws>
                <@since>
                    e 1.2                    
                </@since>
            </javadoc>
            <method name="chiSquareTestDataSetsComparison" type="double" line="509">
                <params>
                    <param name="observed1" type="long[]"/>
                    <param name="observed2" type="long[]"/>
                </params>
                <declaration name="distribution" type="ChiSquaredDistribution" line="511"/>
            </method>
            <javadoc line="518">
                &lt;p&gt;Performs a Chi-Square two sample test comparing two binned data
                  sets. The test evaluates the null hypothesis that the two lists of
                  observed counts conform to the same frequency distribution, with
                  significance level &lt;code&gt;alpha&lt;/code&gt;.  Returns true iff the null
                  hypothesis can be rejected with 100  (1 - alpha) percent confidence.
                  &lt;/p&gt;
                  &lt;p&gt;See {@link #chiSquareDataSetsComparison(long[],long[])} for
                  details on the formula used to compute the Chisquare statistic used
                  in the test. The degrees of of freedom used to perform the test is
                  one less than the common length of the input observed count arrays.
                  &lt;/p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;Observed counts must be non-negative.
                  &lt;/li&gt;
                  &lt;li&gt;Observed counts for a specific bin must not both be zero.
                  &lt;/li&gt;
                  &lt;li&gt;Observed counts for a specific sample must not all be 0.
                  &lt;/li&gt;
                  &lt;li&gt;The arrays &lt;code&gt;observed1&lt;/code&gt; and &lt;code&gt;observed2&lt;/code&gt; must
                  have the same length and their common length must be at least 2.
                  &lt;/li&gt;
                  &lt;li&gt; &lt;code&gt; 0 &lt; alpha &lt; 0.5 &lt;/code&gt;
                  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
                  If any of the preconditions are not met, an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.&lt;/p&gt;                
                <@param>
                    m observed1 array of observed frequency counts of the first data set                    
                </@param>
                <@param>
                    m observed2 array of observed frequency counts of the second data set                    
                </@param>
                <@param>
                    m alpha significance level of the test                    
                </@param>
                <@return>
                    n true iff null hypothesis can be rejected with confidence
                      1 - alpha                    
                </@return>
                <@throws>
                    s DimensionMismatchException the the length of the arrays does not match                    
                </@throws>
                <@throws>
                    s NotPositiveException if any entries in <code>observed1</code> or
                      <code>observed2</code> are negative                    
                </@throws>
                <@throws>
                    s ZeroException if either all counts of <code>observed1</code> or
                      <code>observed2</code> are zero, or if the count at the same index is zero
                      for both arrays                    
                </@throws>
                <@throws>
                    s OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]                    
                </@throws>
                <@throws>
                    s MaxCountExceededException if an error occurs performing the test                    
                </@throws>
                <@since>
                    e 1.2                    
                </@since>
            </javadoc>
            <method name="chiSquareTestDataSetsComparison" type="boolean" line="564">
                <params>
                    <param name="observed1" type="long[]"/>
                    <param name="observed2" type="long[]"/>
                    <param name="alpha" type="double"/>
                </params>
                <scope line="567"/>
            </method>
            <javadoc line="575">
                Checks to make sure that the input long[][] array is rectangular,
                  has at least 2 rows and 2 columns, and has all non-negative entries.                
                <@param>
                    m in input 2-way table to check                    
                </@param>
                <@throws>
                    s NullArgumentException if the array is null                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if the array is not valid                    
                </@throws>
                <@throws>
                    s NotPositiveException if the array contains any negative entries                    
                </@throws>
            </javadoc>
            <method name="checkArray" type="void" line="586">
                <params>
                    <param name="in" type="long[][]"/>
                </params>
                <scope line="588"/>
                <scope line="592"/>
            </method>
        </class>
    </source>