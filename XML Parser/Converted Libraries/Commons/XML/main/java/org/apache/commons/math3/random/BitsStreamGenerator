<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.random">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="BitsStreamGenerator" line="24">
            <implements interface="RandomGenerator"/>
            <implements interface="Serializable"/>
            <javadoc line="24">
                Base class for random number generators that generates bits streams.                
                <@version>
                    n $Id: BitsStreamGenerator.java 1454897 2013-03-10 19:02:54Z luc $                    
                </@version>
                <@since>
                    e 2.0                    
                </@since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="32"/>
            <javadoc line="32">
                Serializable version identifier                
            </javadoc>
            <declaration name="nextGaussian" type="double" line="34"/>
            <javadoc line="34">
                Next gaussian.                
            </javadoc>
            <javadoc line="37">
                Creates a new random number generator.                
            </javadoc>
            <method name="BitsStreamGenerator" type="constructor" line="40"/>
            <method name="setSeed" type="void" line="44"/>
            <javadoc line="44">
                {@inheritDoc}                
            </javadoc>
            <method name="setSeed" type="void" line="47"/>
            <javadoc line="47">
                {@inheritDoc}                
            </javadoc>
            <method name="setSeed" type="void" line="50"/>
            <javadoc line="50">
                {@inheritDoc}                
            </javadoc>
            <method name="next" type="int" line="53"/>
            <javadoc line="53">
                Generate next pseudorandom number.
                  &lt;p&gt;This method is the core generation algorithm. It is used by all the
                  public generation methods for the various primitive types {@link #nextBoolean()}, {@link #nextBytes(byte[])}, {@link #nextDouble()},{@link #nextFloat()}, {@link #nextGaussian()}, {@link #nextInt()},{@link #next(int)} and {@link #nextLong()}.&lt;/p&gt;                
                <@param>
                    m bits number of random bits to produce                    
                </@param>
                <@return>
                    n random bits generated                    
                </@return>
            </javadoc>
            <javadoc line="64">
                {@inheritDoc}                
            </javadoc>
            <method name="nextBoolean" type="boolean" line="65"/>
            <javadoc line="69">
                {@inheritDoc}                
            </javadoc>
            <method name="nextBytes" type="void" line="70">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
                <declaration name="i" type="int" line="71"/>
                <declaration name="iEnd" type="int" line="72"/>
                <scope line="73">
                    <declaration name="random" type="int" line="74"/>
                </scope>
                <declaration name="random" type="int" line="81"/>
                <scope line="82"/>
            </method>
            <javadoc line="88">
                {@inheritDoc}                
            </javadoc>
            <method name="nextDouble" type="double" line="89">
                <declaration name="high" type="long" line="90"/>
                <declaration name="low" type="int" line="91"/>
            </method>
            <javadoc line="95">
                {@inheritDoc}                
            </javadoc>
            <method name="nextFloat" type="float" line="96"/>
            <javadoc line="100">
                {@inheritDoc}                
            </javadoc>
            <method name="nextGaussian" type="double" line="101">
                <declaration name="random" type="double" line="103"/>
                <scope line="104">
                    <declaration name="x" type="double" line="106"/>
                    <declaration name="y" type="double" line="107"/>
                    <declaration name="alpha" type="double" line="108"/>
                    <declaration name="r" type="double" line="109"/>
                </scope>
                <scope line="112"/>
            </method>
            <javadoc line="122">
                {@inheritDoc}                
            </javadoc>
            <method name="nextInt" type="int" line="123"/>
            <javadoc line="127">
                {@inheritDoc}&lt;p&gt;This default implementation is copied from Apache Harmony
                  java.util.Random (r929253).&lt;/p&gt;
                  &lt;p&gt;Implementation notes: &lt;ul&gt;
                  &lt;li&gt;If n is a power of 2, this method returns{@code (int) ((n  (long) next(31)) &gt;&gt; 31)}.&lt;/li&gt;
                  &lt;li&gt;If n is not a power of 2, what is returned is {@code next(31) % n}with {@code next(31)} values rejected (i.e. regenerated) until a
                  value that is larger than the remainder of {@code Integer.MAX_VALUE / n}is generated. Rejection of this initial segment is necessary to ensure
                  a uniform distribution.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
            </javadoc>
            <method name="nextInt" type="int" line="142">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="143">
                    <scope line="144"/>
                    <declaration name="bits" type="int" line="147"/>
                    <declaration name="val" type="int" line="148"/>
                    <scope line="149"/>
                </scope>
            </method>
            <javadoc line="158">
                {@inheritDoc}                
            </javadoc>
            <method name="nextLong" type="long" line="159">
                <declaration name="high" type="long" line="160"/>
                <declaration name="low" type="long" line="161"/>
            </method>
            <javadoc line="165">
                Returns a pseudorandom, uniformly distributed &lt;tt&gt;long&lt;/tt&gt; value
                  between 0 (inclusive) and the specified value (exclusive), drawn from
                  this random number generator&apos;s sequence.                
                <@param>
                    m n the bound on the random number to be returned.  Must be
                      positive.                    
                </@param>
                <@return>
                    n  a pseudorandom, uniformly distributed <tt>long</tt>
                      value between 0 (inclusive) and n (exclusive).                    
                </@return>
                <@throws>
                    s IllegalArgumentException  if n is not positive.                    
                </@throws>
            </javadoc>
            <method name="nextLong" type="long" line="176">
                <params>
                    <param name="n" type="long"/>
                </params>
                <scope line="177">
                    <declaration name="bits" type="long" line="178"/>
                    <declaration name="val" type="long" line="179"/>
                    <scope line="180"/>
                </scope>
            </method>
            <javadoc line="190">
                Clears the cache used by the default implementation of{@link #nextGaussian}.                
            </javadoc>
            <method name="clear" type="void" line="194"/>
        </class>
    </source>