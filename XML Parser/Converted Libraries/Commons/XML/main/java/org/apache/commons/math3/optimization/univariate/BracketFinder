<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.univariate">
        <import package="org.apache.commons.math3.util.Incrementor"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <class name="BracketFinder" line="26">
            <javadoc line="26">
                Provide an interval that brackets a local optimum of a function.
                 * This code is based on a Python implementation (from &lt;em&gt;SciPy&lt;/em&gt;,
                 * module {@code optimize.py} v0.5).                
                <@version>
                    n $Id: BracketFinder.java 1422230 2012-12-15 12:11:13Z erans $                    
                </@version>
                <@deprecated>
                    d As of 3.1 (to be removed in 4.0).                    
                </@deprecated>
                <@since>
                    e 2.2                    
                </@since>
            </javadoc>
            <declaration name="EPS_MIN" type="double" line="37"/>
            <javadoc line="37">
                Tolerance to avoid division by zero.                
            </javadoc>
            <declaration name="GOLD" type="double" line="39"/>
            <javadoc line="39">
                Golden section.                
            </javadoc>
            <declaration name="growLimit" type="double" line="43"/>
            <javadoc line="43">
                Factor for expanding the interval.                
            </javadoc>
            <declaration name="evaluations" type="Incrementor" line="47"/>
            <javadoc line="47">
                Counter for function evaluations.                
            </javadoc>
            <declaration name="lo" type="double" line="51"/>
            <javadoc line="51">
                Lower bound of the bracket.                
            </javadoc>
            <declaration name="hi" type="double" line="55"/>
            <javadoc line="55">
                Higher bound of the bracket.                
            </javadoc>
            <declaration name="mid" type="double" line="59"/>
            <javadoc line="59">
                Point inside the bracket.                
            </javadoc>
            <declaration name="fLo" type="double" line="63"/>
            <javadoc line="63">
                Function value at {@link #lo}.                
            </javadoc>
            <declaration name="fHi" type="double" line="67"/>
            <javadoc line="67">
                Function value at {@link #hi}.                
            </javadoc>
            <declaration name="fMid" type="double" line="71"/>
            <javadoc line="71">
                Function value at {@link #mid}.                
            </javadoc>
            <javadoc line="76">
                Constructor with default values {@code 100, 50} (see the{@link #BracketFinder(double,int) other constructor}).                
            </javadoc>
            <method name="BracketFinder" type="constructor" line="80"/>
            <javadoc line="84">
                Create a bracketing interval finder.                
                <@param>
                    m growLimit Expanding factor.                    
                </@param>
                <@param>
                    m maxEvaluations Maximum number of evaluations allowed for finding
                     * a bracketing interval.                    
                </@param>
            </javadoc>
            <method name="BracketFinder" type="constructor" line="92">
                <scope line="93"/>
                <scope line="96"/>
            </method>
            <javadoc line="104">
                Search new points that bracket a local optimum of the function.                
                <@param>
                    m func Function whose optimum should be bracketed.                    
                </@param>
                <@param>
                    m goal {@link GoalType Goal type}.                    
                </@param>
                <@param>
                    m xA Initial point.                    
                </@param>
                <@param>
                    m xB Initial point.                    
                </@param>
                <@throws>
                    s TooManyEvaluationsException if the maximum number of evaluations
                     * is exceeded.                    
                </@throws>
            </javadoc>
            <method name="search" type="void" line="114">
                <declaration name="isMinim" type="boolean" line="116"/>
                <declaration name="fA" type="double" line="118"/>
                <declaration name="fB" type="double" line="119"/>
                <scope line="122">
                    <declaration name="tmp" type="double" line="124"/>
                </scope>
                <declaration name="xC" type="double" line="133"/>
                <declaration name="fC" type="double" line="134"/>
                <scope line="136">
                    <declaration name="tmp1" type="double" line="137"/>
                    <declaration name="tmp2" type="double" line="138"/>
                    <declaration name="val" type="double" line="140"/>
                    <declaration name="denom" type="double" line="141"/>
                    <declaration name="w" type="double" line="143"/>
                    <declaration name="wLim" type="double" line="144"/>
                    <declaration name="fW" type="double" line="146"/>
                    <scope line="147">
                        <scope line="151"/>
                        <scope line="159"/>
                    </scope>
                    <scope line="166"/>
                    <scope line="169">
                        <scope line="173"/>
                    </scope>
                    <scope line="181"/>
                </scope>
                <scope line="201">
                    <declaration name="tmp" type="double" line="202"/>
                </scope>
            </method>
            <javadoc line="212">
                @return the number of evalutations.                
            </javadoc>
            <method name="getMaxEvaluations" type="int" line="215"/>
            <javadoc line="219">
                @return the number of evalutations.                
            </javadoc>
            <method name="getEvaluations" type="int" line="222"/>
            <javadoc line="226">
                @return the lower bound of the bracket.                
                <@see>
                    e #getFLo()                    
                </@see>
            </javadoc>
            <method name="getLo" type="double" line="230"/>
            <javadoc line="234">
                Get function value at {@link #getLo()}.                
                <@return>
                    n function value at {@link #getLo()}                    
                </@return>
            </javadoc>
            <method name="getFLo" type="double" line="238"/>
            <javadoc line="242">
                @return the higher bound of the bracket.                
                <@see>
                    e #getFHi()                    
                </@see>
            </javadoc>
            <method name="getHi" type="double" line="246"/>
            <javadoc line="250">
                Get function value at {@link #getHi()}.                
                <@return>
                    n function value at {@link #getHi()}                    
                </@return>
            </javadoc>
            <method name="getFHi" type="double" line="254"/>
            <javadoc line="258">
                @return a point in the middle of the bracket.                
                <@see>
                    e #getFMid()                    
                </@see>
            </javadoc>
            <method name="getMid" type="double" line="262"/>
            <javadoc line="266">
                Get function value at {@link #getMid()}.                
                <@return>
                    n function value at {@link #getMid()}                    
                </@return>
            </javadoc>
            <method name="getFMid" type="double" line="270"/>
            <javadoc line="274">
                @param f Function.                
                <@param>
                    m x Argument.                    
                </@param>
                <@return>
                    n {@code f(x)}                    
                </@return>
                <@throws>
                    s TooManyEvaluationsException if the maximal number of evaluations is
                     * exceeded.                    
                </@throws>
            </javadoc>
            <method name="eval" type="double" line="281">
                <scope line="282"/>
                <scope line="284"/>
            </method>
        </class>
    </source>