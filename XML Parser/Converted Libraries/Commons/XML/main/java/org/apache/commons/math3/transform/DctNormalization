<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.transform">
        <javadoc line="19">
            This enumeration defines the various types of normalizations that can be
             * applied to discrete cosine transforms (DCT). The exact definition of these
             * normalizations is detailed below.            
            <@see>
                e FastCosineTransformer                
            </@see>
            <@version>
                n $Id: DctNormalization.java 1385310 2012-09-16 16:32:10Z tn $                
            </@version>
            <@since>
                e 3.0                
            </@since>
        </javadoc>
        <javadoc line="29">
            Should be passed to the constructor of {@link FastCosineTransformer}to use the &lt;em&gt;standard&lt;/em&gt; normalization convention.  The standard
             * DCT-I normalization convention is defined as follows
             * &lt;ul&gt;
             * &lt;li&gt;forward transform:
             * y&lt;sub&gt;n&lt;/sub&gt; = (1/2) [x&lt;sub&gt;0&lt;/sub&gt; + (-1)&lt;sup&gt;n&lt;/sup&gt;x&lt;sub&gt;N-1&lt;/sub&gt;]
             * + &amp;sum;&lt;sub&gt;k=1&lt;/sub&gt;&lt;sup&gt;N-2&lt;/sup&gt;
             * x&lt;sub&gt;k&lt;/sub&gt; cos[&amp;pi; nk / (N - 1)],&lt;/li&gt;
             * &lt;li&gt;inverse transform:
             * x&lt;sub&gt;k&lt;/sub&gt; = [1 / (N - 1)] [y&lt;sub&gt;0&lt;/sub&gt;
             * + (-1)&lt;sup&gt;k&lt;/sup&gt;y&lt;sub&gt;N-1&lt;/sub&gt;]
             * + [2 / (N - 1)] &amp;sum;&lt;sub&gt;n=1&lt;/sub&gt;&lt;sup&gt;N-2&lt;/sup&gt;
             * y&lt;sub&gt;n&lt;/sub&gt; cos[&amp;pi; nk / (N - 1)],&lt;/li&gt;
             * &lt;/ul&gt;
             * where N is the size of the data sample.            
        </javadoc>
        <javadoc line="48">
            Should be passed to the constructor of {@link FastCosineTransformer}to use the &lt;em&gt;orthogonal&lt;/em&gt; normalization convention. The orthogonal
             * DCT-I normalization convention is defined as follows
             * &lt;ul&gt;
             * &lt;li&gt;forward transform:
             * y&lt;sub&gt;n&lt;/sub&gt; = [2(N - 1)]&lt;sup&gt;-1/2&lt;/sup&gt; [x&lt;sub&gt;0&lt;/sub&gt;
             * + (-1)&lt;sup&gt;n&lt;/sup&gt;x&lt;sub&gt;N-1&lt;/sub&gt;]
             * + [2 / (N - 1)]&lt;sup&gt;1/2&lt;/sup&gt; &amp;sum;&lt;sub&gt;k=1&lt;/sub&gt;&lt;sup&gt;N-2&lt;/sup&gt;
             * x&lt;sub&gt;k&lt;/sub&gt; cos[&amp;pi; nk / (N - 1)],&lt;/li&gt;
             * &lt;li&gt;inverse transform:
             * x&lt;sub&gt;k&lt;/sub&gt; = [2(N - 1)]&lt;sup&gt;-1/2&lt;/sup&gt; [y&lt;sub&gt;0&lt;/sub&gt;
             * + (-1)&lt;sup&gt;k&lt;/sup&gt;y&lt;sub&gt;N-1&lt;/sub&gt;]
             * + [2 / (N - 1)]&lt;sup&gt;1/2&lt;/sup&gt; &amp;sum;&lt;sub&gt;n=1&lt;/sub&gt;&lt;sup&gt;N-2&lt;/sup&gt;
             * y&lt;sub&gt;n&lt;/sub&gt; cos[&amp;pi; nk / (N - 1)],&lt;/li&gt;
             * &lt;/ul&gt;
             * which makes the transform orthogonal. N is the size of the data sample.            
        </javadoc>
    </source>