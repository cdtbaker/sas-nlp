<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.util.OpenIntToDoubleHashMap"/>
        <class name="OpenMapRealMatrix" extends="AbstractRealMatrix" line="28">
            <implements interface="SparseRealMatrix"/>
            <implements interface="Serializable"/>
            <javadoc line="28">
                Sparse matrix implementation based on an open addressed map.                
                <@version>
                    n $Id: OpenMapRealMatrix.java 1416643 2012-12-03 19:37:14Z tn $                    
                </@version>
                <@since>
                    e 2.0                    
                </@since>
                <@deprecated>
                    d As of version 3.1, this class is deprecated, for reasons exposed
                     * in this JIRA
                     * <a href="https://issues.apache.org/jira/browse/MATH-870">ticket</a>. This
                     * class will be removed in version 4.0.                    
                </@deprecated>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="42"/>
            <javadoc line="42">
                Serializable version identifier.                
            </javadoc>
            <declaration name="rows" type="int" line="44"/>
            <javadoc line="44">
                Number of rows of the matrix.                
            </javadoc>
            <declaration name="columns" type="int" line="46"/>
            <javadoc line="46">
                Number of columns of the matrix.                
            </javadoc>
            <declaration name="entries" type="OpenIntToDoubleHashMap" line="48"/>
            <javadoc line="48">
                Storage for (sparse) matrix elements.                
            </javadoc>
            <javadoc line="51">
                Build a sparse matrix with the supplied row and column dimensions.                
                <@param>
                    m rowDimension Number of rows of the matrix.                    
                </@param>
                <@param>
                    m columnDimension Number of columns of the matrix.                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if row or column dimension is not
                     * positive.                    
                </@throws>
                <@throws>
                    s NumberIsTooLargeException if the total number of entries of the
                     * matrix is larger than {@code Integer.MAX_VALUE}.                    
                </@throws>
            </javadoc>
            <method name="OpenMapRealMatrix" type="constructor" line="62">
                <declaration name="lRow" type="long" line="64"/>
                <declaration name="lCol" type="long" line="65"/>
                <scope line="66"/>
            </method>
            <javadoc line="74">
                Build a matrix by copying another one.                
                <@param>
                    m matrix matrix to copy.                    
                </@param>
            </javadoc>
            <method name="OpenMapRealMatrix" type="constructor" line="79"/>
            <javadoc line="85">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="OpenMapRealMatrix" line="87"/>
            <javadoc line="91">
                {@inheritDoc}                
                <@throws>
                    s NumberIsTooLargeException if the total number of entries of the
                     * matrix is larger than {@code Integer.MAX_VALUE}.                    
                </@throws>
            </javadoc>
            <method name="createMatrix" type="OpenMapRealMatrix" line="99"/>
            <javadoc line="103">
                {@inheritDoc}                
            </javadoc>
            <method name="getColumnDimension" type="int" line="105"/>
            <javadoc line="109">
                Compute the sum of this matrix and {@code m}.                
                <@param>
                    m m Matrix to be added.                    
                </@param>
                <@return>
                    n {@code this} + {@code m}.                    
                </@return>
                <@throws>
                    s MatrixDimensionMismatchException if {@code m} is not the same
                     * size as {@code this}.                    
                </@throws>
            </javadoc>
            <method name="add" type="OpenMapRealMatrix" line="118">
                <declaration name="out" type="OpenMapRealMatrix" line="122"/>
                <scope line="123">
                    <declaration name="row" type="int" line="125"/>
                    <declaration name="col" type="int" line="126"/>
                </scope>
            </method>
            <javadoc line="134">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="OpenMapRealMatrix" line="137">
                <scope line="138"/>
                <scope line="140"/>
            </method>
            <javadoc line="145">
                Subtract {@code m} from this matrix.                
                <@param>
                    m m Matrix to be subtracted.                    
                </@param>
                <@return>
                    n {@code this} - {@code m}.                    
                </@return>
                <@throws>
                    s MatrixDimensionMismatchException if {@code m} is not the same
                     * size as {@code this}.                    
                </@throws>
            </javadoc>
            <method name="subtract" type="OpenMapRealMatrix" line="154">
                <declaration name="out" type="OpenMapRealMatrix" line="157"/>
                <scope line="158">
                    <declaration name="row" type="int" line="160"/>
                    <declaration name="col" type="int" line="161"/>
                </scope>
            </method>
            <javadoc line="168">
                {@inheritDoc}                
                <@throws>
                    s NumberIsTooLargeException if {@code m} is an{@code OpenMapRealMatrix}, and the total number of entries of the product
                     * is larger than {@code Integer.MAX_VALUE}.                    
                </@throws>
            </javadoc>
            <method name="multiply" type="RealMatrix" line="177">
                <scope line="178"/>
                <scope line="180">
                    <declaration name="outCols" type="int" line="184"/>
                    <declaration name="out" type="BlockRealMatrix" line="185"/>
                    <scope line="186">
                        <declaration name="value" type="double" line="188"/>
                        <declaration name="key" type="int" line="189"/>
                        <declaration name="i" type="int" line="190"/>
                        <declaration name="k" type="int" line="191"/>
                        <scope line="192"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="201">
                Postmultiply this matrix by {@code m}.                
                <@param>
                    m m Matrix to postmultiply by.                    
                </@param>
                <@return>
                    n {@code this} * {@code m}.                    
                </@return>
                <@throws>
                    s DimensionMismatchException if the number of rows of {@code m}differ from the number of columns of {@code this} matrix.                    
                </@throws>
                <@throws>
                    s NumberIsTooLargeException if the total number of entries of the
                     * product is larger than {@code Integer.MAX_VALUE}.                    
                </@throws>
            </javadoc>
            <method name="multiply" type="OpenMapRealMatrix" line="212">
                <comment line="213">
                    Safety check.                    
                </comment>
                <declaration name="outCols" type="int" line="216"/>
                <declaration name="out" type="OpenMapRealMatrix" line="217"/>
                <scope line="218">
                    <declaration name="value" type="double" line="220"/>
                    <declaration name="key" type="int" line="221"/>
                    <declaration name="i" type="int" line="222"/>
                    <declaration name="k" type="int" line="223"/>
                    <scope line="224">
                        <declaration name="rightKey" type="int" line="225"/>
                        <scope line="226">
                            <declaration name="outKey" type="int" line="227"/>
                            <declaration name="outValue" type="double" line="228"/>
                            <scope line="230"/>
                            <scope line="232"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="242">
                {@inheritDoc}                
            </javadoc>
            <method name="getEntry" type="double" line="244"/>
            <javadoc line="250">
                {@inheritDoc}                
            </javadoc>
            <method name="getRowDimension" type="int" line="252"/>
            <javadoc line="256">
                {@inheritDoc}                
            </javadoc>
            <method name="setEntry" type="void" line="259">
                <scope line="262"/>
                <scope line="264"/>
            </method>
            <javadoc line="269">
                {@inheritDoc}                
            </javadoc>
            <method name="addToEntry" type="void" line="272">
                <declaration name="key" type="int" line="275"/>
                <declaration name="value" type="double" line="276"/>
                <scope line="277"/>
                <scope line="279"/>
            </method>
            <javadoc line="284">
                {@inheritDoc}                
            </javadoc>
            <method name="multiplyEntry" type="void" line="287">
                <declaration name="key" type="int" line="290"/>
                <declaration name="value" type="double" line="291"/>
                <scope line="292"/>
                <scope line="294"/>
            </method>
            <javadoc line="299">
                Compute the key to access a matrix element                
                <@param>
                    m row row index of the matrix element                    
                </@param>
                <@param>
                    m column column index of the matrix element                    
                </@param>
                <@return>
                    n key within the map to access the matrix element                    
                </@return>
            </javadoc>
            <method name="computeKey" type="int" line="305"/>
        </class>
    </source>