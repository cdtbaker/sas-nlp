<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.random">
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="UnitSphereRandomVectorGenerator" line="23">
            <implements interface="RandomVectorGenerator"/>
            <javadoc line="23">
                Generate random vectors isotropically located on the surface of a sphere.                
                <@since>
                    e 2.1                    
                </@since>
                <@version>
                    n $Id: UnitSphereRandomVectorGenerator.java 1444500 2013-02-10 08:10:40Z tn $                    
                </@version>
            </javadoc>
            <declaration name="rand" type="RandomGenerator" line="32"/>
            <javadoc line="32">
                RNG used for generating the individual components of the vectors.                
            </javadoc>
            <declaration name="dimension" type="int" line="36"/>
            <javadoc line="36">
                Space dimension.                
            </javadoc>
            <javadoc line="41">
                @param dimension Space dimension.                
                <@param>
                    m rand RNG for the individual components of the vectors.                    
                </@param>
            </javadoc>
            <method name="UnitSphereRandomVectorGenerator" type="constructor" line="46"/>
            <javadoc line="50">
                Create an object that will use a default RNG ({@link MersenneTwister}),
                 * in order to generate the individual components.                
                <@param>
                    m dimension Space dimension.                    
                </@param>
            </javadoc>
            <method name="UnitSphereRandomVectorGenerator" type="constructor" line="56"/>
            <javadoc line="60">
                {@inheritDoc}                
            </javadoc>
            <method name="nextVector" type="double[]" line="61">
                <comment line="62">
                    See http://mathworld.wolfram.com/SpherePointPicking.html for example.                    
                </comment>
                <comment line="62">
                    Pick a point by choosing a standard Gaussian for each element, and then                    
                </comment>
                <comment line="62">
                    normalizing to unit length.                    
                </comment>
                <declaration name="v" type="double[]" line="62"/>
                <declaration name="normSq" type="double" line="67"/>
                <scope line="68">
                    <declaration name="comp" type="double" line="69"/>
                </scope>
                <declaration name="f" type="double" line="74"/>
                <scope line="75"/>
            </method>
        </class>
    </source>