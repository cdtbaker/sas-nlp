<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.genetics">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <class name="NPointCrossover" line="29">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="CrossoverPolicy"/>
            <javadoc line="29">
                N-point crossover policy. For each iteration a random crossover point is
                  selected and the first part from each parent is copied to the corresponding
                  child, and the second parts are copied crosswise.
                  Example (2-point crossover):
                  &lt;pre&gt;
                  -C- denotes a crossover point
                  -C-       -C-                         -C-        -C-
                  p1 = (1 0  | 1 0 0 1 | 0 1 1)    X    p2 = (0 1  | 1 0 1 0  | 1 1 1)
                  \----/ \-------/ \-----/              \----/ \--------/ \-----/
                  ||      ()       ||                  ||      ()       ||
                  VV      ()      VV                  VV      ()        VV
                  /----\ /--------\ /-----\             /----\ /--------\ /-----\
                  c1 = (1 0  | 1 0 1 0  | 0 1 1)    X   c2 = (0 1  | 1 0 0 1  | 0 1 1)
                  &lt;/pre&gt;
                  This policy works only on {@link AbstractListChromosome}, and therefore it
                  is parameterized by T. Moreover, the chromosomes must have same lengths.                
                <@param>
                    m<T>
                       generic type of the {@link AbstractListChromosome}s for crossover                    
                </@param>
                <@since>
                    e 3.1                    
                </@since>
                <@version>
                    n $Id: NPointCrossover.java 1385297 2012-09-16 16:05:57Z tn $                    
                </@version>
            </javadoc>
            <declaration name="crossoverPoints" type="int" line="55"/>
            <javadoc line="55">
                The number of crossover points.                
            </javadoc>
            <javadoc line="58">
                Creates a new {@link NPointCrossover} policy using the given number of points.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: the number of crossover points must be &amp;lt; &lt;code&gt;chromosome length - 1&lt;/code&gt;.
                  This condition can only be checked at runtime, as the chromosome length is not known in advance.                
                <@param>
                    m crossoverPoints the number of crossover points                    
                </@param>
                <@throws>
                    s NotStrictlyPositiveException if the number of {@code crossoverPoints} is not strictly positive                    
                </@throws>
            </javadoc>
            <method name="NPointCrossover" type="constructor" line="67">
                <params>
                    <param name="crossoverPoints" type="int"/>
                </params>
                <scope line="68"/>
            </method>
            <javadoc line="74">
                Returns the number of crossover points used by this {@link CrossoverPolicy}.                
                <@return>
                    n the number of crossover points                    
                </@return>
            </javadoc>
            <method name="getCrossoverPoints" type="int" line="79"/>
            <javadoc line="83">
                Performs a N-point crossover. N random crossover points are selected and are used
                  to divide the parent chromosomes into segments. The segments are copied in alternate
                  order from the two parents to the corresponding child chromosomes.
                  Example (2-point crossover):
                  &lt;pre&gt;
                  -C- denotes a crossover point
                  -C-       -C-                         -C-        -C-
                  p1 = (1 0  | 1 0 0 1 | 0 1 1)    X    p2 = (0 1  | 1 0 1 0  | 1 1 1)
                  \----/ \-------/ \-----/              \----/ \--------/ \-----/
                  ||      ()       ||                  ||      ()       ||
                  VV      ()      VV                  VV      ()        VV
                  /----\ /--------\ /-----\             /----\ /--------\ /-----\
                  c1 = (1 0  | 1 0 1 0  | 0 1 1)    X   c2 = (0 1  | 1 0 0 1  | 0 1 1)
                  &lt;/pre&gt;                
                <@param>
                    m first first parent (p1)                    
                </@param>
                <@param>
                    m second second parent (p2)                    
                </@param>
                <@return>
                    n pair of two children (c1,c2)                    
                </@return>
                <@throws>
                    s MathIllegalArgumentException iff one of the chromosomes is
                      not an instance of {@link AbstractListChromosome}                    
                </@throws>
                <@throws>
                    s DimensionMismatchException if the length of the two chromosomes is different                    
                </@throws>
            </javadoc>
            <method name="crossover" type="ChromosomePair" line="109">
                <params>
                    <param name="first" type="Chromosome"/>
                    <param name="second" type="Chromosome"/>
                </params>
                <scope line="111"/>
            </method>
            <javadoc line="117">
                Helper for {@link #crossover(Chromosome,Chromosome)}. Performs the actual crossover.                
                <@param>
                    m first the first chromosome                    
                </@param>
                <@param>
                    m second the second chromosome                    
                </@param>
                <@return>
                    n the pair of new chromosomes that resulted from the crossover                    
                </@return>
                <@throws>
                    s DimensionMismatchException if the length of the two chromosomes is different                    
                </@throws>
                <@throws>
                    s NumberIsTooLargeException if the number of crossoverPoints is too large for the actual chromosomes                    
                </@throws>
            </javadoc>
            <method name="mate" type="ChromosomePair" line="128">
                <params>
                    <param name="first" type="AbstractListChromosome<T>"/>
                    <param name="second" type="AbstractListChromosome<T>"/>
                </params>
                <comment line="129">
                    array representations of the parents                    
                </comment>
                <comment line="129">
                    and of the children                    
                </comment>
                <comment line="129">
                    copy the last segment                    
                </comment>
                <declaration name="length" type="int" line="130"/>
                <scope line="131"/>
                <scope line="134"/>
                <declaration name="parent1Rep" type="List&lt;T&gt;" line="139"/>
                <declaration name="parent2Rep" type="List&lt;T&gt;" line="140"/>
                <declaration name="child1Rep" type="ArrayList&lt;T&gt;" line="142"/>
                <declaration name="child2Rep" type="ArrayList&lt;T&gt;" line="143"/>
                <declaration name="random" type="RandomGenerator" line="145"/>
                <declaration name="c1" type="ArrayList&lt;T&gt;" line="147"/>
                <declaration name="c2" type="ArrayList&lt;T&gt;" line="148"/>
                <declaration name="remainingPoints" type="int" line="150"/>
                <declaration name="lastIndex" type="int" line="151"/>
                <scope line="152">
                    <declaration name="crossoverIndex" type="int" line="154"/>
                    <scope line="157"/>
                    <declaration name="tmp" type="ArrayList&lt;T&gt;" line="163"/>
                </scope>
                <scope line="171"/>
            </method>
        </class>
    </source>