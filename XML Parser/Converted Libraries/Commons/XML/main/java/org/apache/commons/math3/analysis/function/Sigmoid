<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.function">
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.analysis.FunctionUtils"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.DifferentiableUnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.ParametricUnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="Sigmoid" line="32">
            <implements interface="UnivariateDifferentiableFunction"/>
            <implements interface="DifferentiableUnivariateFunction"/>
            <javadoc line="32">
                &lt;a href=&quot;http://en.wikipedia.org/wiki/Sigmoid_function&quot;&gt;
                 * Sigmoid&lt;/a&gt; function.
                 * It is the inverse of the {@link Logit logit} function.
                 * A more flexible version, the generalised logistic, is implemented
                 * by the {@link Logistic} class.                
                <@since>
                    e 3.0                    
                </@since>
                <@version>
                    n $Id: Sigmoid.java 1455194 2013-03-11 15:45:54Z luc $                    
                </@version>
            </javadoc>
            <declaration name="lo" type="double" line="43"/>
            <javadoc line="43">
                Lower asymptote.                
            </javadoc>
            <declaration name="hi" type="double" line="45"/>
            <javadoc line="45">
                Higher asymptote.                
            </javadoc>
            <javadoc line="48">
                Usual sigmoid function, where the lower asymptote is 0 and the higher
                 * asymptote is 1.                
            </javadoc>
            <method name="Sigmoid" type="constructor" line="52"/>
            <javadoc line="56">
                Sigmoid function.                
                <@param>
                    m lo Lower asymptote.                    
                </@param>
                <@param>
                    m hi Higher asymptote.                    
                </@param>
            </javadoc>
            <method name="Sigmoid" type="constructor" line="63"/>
            <javadoc line="68">
                {@inheritDoc}                
                <@deprecated>
                    d as of 3.1, replaced by {@link #value(DerivativeStructure)}                    
                </@deprecated>
            </javadoc>
            <method name="derivative" type="UnivariateFunction" line="72"/>
            <javadoc line="76">
                {@inheritDoc}                
            </javadoc>
            <method name="value" type="double" line="77"/>
            <class name="Parametric" line="81">
                <implements interface="ParametricUnivariateFunction"/>
                <javadoc line="81">
                    Parametric function where the input array contains the parameters of
                     * the logit function, ordered as follows:
                     * &lt;ul&gt;
                     * &lt;li&gt;Lower asymptote&lt;/li&gt;
                     * &lt;li&gt;Higher asymptote&lt;/li&gt;
                     * &lt;/ul&gt;                    
                </javadoc>
                <javadoc line="90">
                    Computes the value of the sigmoid at {@code x}.                    
                    <@param>
                        m x Value for which the function must be computed.                        
                    </@param>
                    <@param>
                        m param Values of lower asymptote and higher asymptote.                        
                    </@param>
                    <@return>
                        n the value of the function.                        
                    </@return>
                    <@throws>
                        s NullArgumentException if {@code param} is {@code null}.                        
                    </@throws>
                    <@throws>
                        s DimensionMismatchException if the size of {@code param} is
                         * not 2.                        
                    </@throws>
                </javadoc>
                <method name="value" type="double" line="102"/>
                <javadoc line="107">
                    Computes the value of the gradient at {@code x}.
                     * The components of the gradient vector are the partial
                     * derivatives of the function with respect to each of the
                     * &lt;em&gt;parameters&lt;/em&gt; (lower asymptote and higher asymptote).                    
                    <@param>
                        m x Value at which the gradient must be computed.                        
                    </@param>
                    <@param>
                        m param Values for lower asymptote and higher asymptote.                        
                    </@param>
                    <@return>
                        n the gradient vector at {@code x}.                        
                    </@return>
                    <@throws>
                        s NullArgumentException if {@code param} is {@code null}.                        
                    </@throws>
                    <@throws>
                        s DimensionMismatchException if the size of {@code param} is
                         * not 2.                        
                    </@throws>
                </javadoc>
                <method name="gradient" type="double[]" line="122">
                    <declaration name="invExp1" type="double" line="125"/>
                </method>
                <javadoc line="130">
                    Validates parameters to ensure they are appropriate for the evaluation of
                     * the {@link #value(double,double[])} and {@link #gradient(double,double[])}methods.                    
                    <@param>
                        m param Values for lower and higher asymptotes.                        
                    </@param>
                    <@throws>
                        s NullArgumentException if {@code param} is {@code null}.                        
                    </@throws>
                    <@throws>
                        s DimensionMismatchException if the size of {@code param} is
                         * not 2.                        
                    </@throws>
                </javadoc>
                <method name="validateParameters" type="void" line="142">
                    <scope line="143"/>
                    <scope line="146"/>
                </method>
            </class>
            <javadoc line="152">
                @param x Value at which to compute the sigmoid.                
                <@param>
                    m lo Lower asymptote.                    
                </@param>
                <@param>
                    m hi Higher asymptote.                    
                </@param>
                <@return>
                    n the value of the sigmoid function at {@code x}.                    
                </@return>
            </javadoc>
            <method name="value" type="double" line="160"/>
            <javadoc line="164">
                {@inheritDoc}                
                <@since>
                    e 3.1                    
                </@since>
            </javadoc>
            <method name="value" type="DerivativeStructure" line="168">
                <declaration name="f" type="double[]" line="170"/>
                <declaration name="exp" type="double" line="171"/>
                <scope line="172"/>
                <scope line="178">
                    <declaration name="p" type="double[]" line="186"/>
                    <declaration name="inv" type="double" line="188"/>
                    <declaration name="coeff" type="double" line="189"/>
                    <scope line="190">
                        <declaration name="v" type="double" line="193"/>
                        <scope line="195">
                            <scope line="197"/>
                            <scope line="199"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>