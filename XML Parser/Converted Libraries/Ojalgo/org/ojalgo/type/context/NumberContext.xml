<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.type.context">
  <import name="java.math.BigDecimal" />
  <import name="java.math.MathContext" />
  <import name="java.math.RoundingMode" />
  <import name="java.text.DecimalFormat" />
  <import name="java.text.Format" />
  <import name="java.text.NumberFormat" />
  <import name="java.util.Locale" />
  <import name="org.ojalgo.ProgrammingError" />
  <import name="org.ojalgo.constant.BigMath" />
  <import name="org.ojalgo.constant.PrimitiveMath" />
  <import name="org.ojalgo.function.PrimitiveFunction" />
  <import name="org.ojalgo.function.UnaryFunction" />
  <import name="org.ojalgo.scalar.ComplexNumber" />
  <import name="org.ojalgo.scalar.RationalNumber" />
  <import name="org.ojalgo.type.TypeUtils" />
  <import name="org.ojalgo.type.format.NumberStyle" />
  <class name="NumberContext" extends="FormatContext<Number>" startLine="42">
    <javadoc>
      <text>* <p>
 * Think of this as a {@linkplain MathContext} that specifies both precision and scale. Numeric data types
 * (non-integers) in databases are specified using precison and scale. While doing maths the precision is all that
 * matters, but before sending a number to a database, or printing/displaying it, rounding to a specified scale is
 * desireable.
 * </p>
 * <p>
 * The enforce methods first enforce the precision and then set the scale. It is possible that this will create a number
 * with trailing zeros and more digits than the precision allows. It is also possible to define a context with a scale
 * that is larger than the precision. This is NOT how precision and scale is used with numeric types in databases.
 * </p></text>
      <author>apete</author>
    </javadoc>
    <interface name="Enforceable" startLine="59">
      <method name="enforce" type="N" startLine="61" endLine="61" />
      <interface name="FormatPattern" startLine="65">
        <method name="toLocalizedPattern" type="String" startLine="67" endLine="67" />
        <method name="toPattern" type="String" startLine="69" endLine="69" />
        <declaration type="MathContext" name="DEFAULT_MATH" />
        <declaration type="NumberStyle" name="DEFAULT_STYLE" />
        <method type="NumberContext" name="getCurrency" startLine="77" endLine="85">
          <declaration type="NumberFormat" name="tmpFormat" />
          <declaration type="int" name="tmpPrecision" />
          <declaration type="int" name="tmpScale" />
          <declaration type="RoundingMode" name="tmpRoundingMode" />
        </method>
        <method type="NumberContext" name="getGeneral" startLine="87" endLine="95">
          <declaration type="NumberFormat" name="tmpFormat" />
          <declaration type="int" name="tmpPrecision" />
          <declaration type="int" name="tmpScale" />
          <declaration type="RoundingMode" name="tmpRoundingMode" />
        </method>
        <method type="NumberContext" name="getGeneral" startLine="97" endLine="105">
          <declaration type="NumberFormat" name="tmpFormat" />
          <declaration type="int" name="tmpPrecision" />
          <declaration type="int" name="tmpScale" />
          <declaration type="RoundingMode" name="tmpRoundingMode" />
        </method>
        <method type="NumberContext" name="getGeneral" startLine="107" endLine="115">
          <declaration type="NumberFormat" name="tmpFormat" />
          <declaration type="int" name="tmpPrecision" />
          <declaration type="int" name="tmpScale" />
          <declaration type="RoundingMode" name="tmpRoundingMode" />
        </method>
        <javadoc>
          <text>* The scale will be set to half the precision.</text>
        </javadoc>
        <method type="NumberContext" name="getGeneral" startLine="120" endLine="128">
          <declaration type="NumberFormat" name="tmpFormat" />
          <declaration type="int" name="tmpPrecision" />
          <declaration type="int" name="tmpScale" />
          <declaration type="RoundingMode" name="tmpRoundingMode" />
        </method>
        <method type="NumberContext" name="getInteger" startLine="130" endLine="138">
          <declaration type="NumberFormat" name="tmpFormat" />
          <declaration type="int" name="tmpPrecision" />
          <declaration type="int" name="tmpScale" />
          <declaration type="RoundingMode" name="tmpRoundingMode" />
        </method>
        <method type="NumberContext" name="getMath" startLine="140" endLine="148">
          <declaration type="NumberFormat" name="tmpFormat" />
          <declaration type="int" name="tmpPrecision" />
          <declaration type="int" name="tmpScale" />
          <declaration type="RoundingMode" name="tmpRoundingMode" />
        </method>
        <javadoc>
          <text>* The scale will be set to the same as the precision.</text>
        </javadoc>
        <method type="NumberContext" name="getMath" startLine="153" endLine="161">
          <declaration type="NumberFormat" name="tmpFormat" />
          <declaration type="int" name="tmpPrecision" />
          <declaration type="int" name="tmpScale" />
          <declaration type="RoundingMode" name="tmpRoundingMode" />
        </method>
        <method type="NumberContext" name="getPercent" startLine="163" endLine="171">
          <declaration type="NumberFormat" name="tmpFormat" />
          <declaration type="int" name="tmpPrecision" />
          <declaration type="int" name="tmpScale" />
          <declaration type="RoundingMode" name="tmpRoundingMode" />
        </method>
        <method type="NumberContext" name="getPercent" startLine="173" endLine="175" />
        <method type="Format" name="toFormat" startLine="177" endLine="179" />
        <method type="double" name="error" startLine="181" endLine="183" />
        <declaration type="double" name="myError" />
        <declaration type="MathContext" name="myMathContext" />
        <declaration type="int" name="myPrecision" />
        <declaration type="double" name="myPrecisionError" />
        <declaration type="RoundingMode" name="myRoundingMode" />
        <declaration type="int" name="myScale" />
        <declaration type="double" name="myScaleError" />
        <declaration type="double" name="myScaleFactor" />
        <method type="constructor" name="NumberContext" startLine="195" endLine="197" />
        <method type="constructor" name="NumberContext" startLine="199" endLine="218">
          <declaration type="int" name="tmpMax" />
          <declaration type="int" name="tmpMin" />
          <declaration type="int" name="tmpErrExp" />
        </method>
        <method type="constructor" name="NumberContext" startLine="220" endLine="222" />
        <method type="constructor" name="NumberContext" startLine="224" endLine="226" />
        <method type="constructor" name="NumberContext" startLine="228" endLine="230" />
        <method type="constructor" name="NumberContext" startLine="232" endLine="234" />
        <method type="constructor" name="NumberContext" startLine="237" endLine="240" />
        <javadoc>
          <text>* Will first enforce the precision, and then the scale. Both operations will comply with the rounding mode.</text>
        </javadoc>
        <method type="BigDecimal" name="enforce" startLine="245" endLine="262">
          <declaration type="BigDecimal" name="retVal" />
          <scope startLine="249" endLine="251" />
          <scope startLine="253" endLine="255" />
          <scope startLine="257" endLine="259" />
          <scope startLine="259" endLine="261" />
        </method>
        <javadoc>
          <text>* Does not enforce the precision and does not use the specified rounding mode. The precision is given by the type
 * double and the rounding mode is always "half even" as given by {@linkplain StrictMath#rint(double)}.</text>
        </javadoc>
        <method type="double" name="enforce" startLine="268" endLine="270" />
        <method type="Number" name="enforce" startLine="273" endLine="283">
          <scope startLine="274" endLine="276" />
          <scope startLine="276" endLine="278" />
          <scope startLine="278" endLine="280" />
          <scope startLine="280" endLine="282" />
        </method>
        <javadoc>
          <see>java.lang.Object#equals(java.lang.Object)</see>
        </javadoc>
        <method type="boolean" name="equals" startLine="289" endLine="324">
          <scope startLine="290" endLine="292" />
          <scope startLine="293" endLine="295" />
          <scope startLine="296" endLine="298" />
          <declaration type="NumberContext" name="other" />
          <scope startLine="300" endLine="304">
            <scope startLine="301" endLine="303" />
          </scope>
          <scope startLine="304" endLine="306" />
          <scope startLine="307" endLine="309" />
          <scope startLine="310" endLine="314">
            <scope startLine="311" endLine="313" />
          </scope>
          <scope startLine="314" endLine="316" />
          <scope startLine="317" endLine="319" />
          <scope startLine="320" endLine="322" />
        </method>
        <javadoc>
          <deprecated>v35</deprecated>
        </javadoc>
        <method type="double" name="error" startLine="330" endLine="332" />
        <method type="UnaryFunction<BigDecimal>" name="getBigEnforceFunction" startLine="334" endLine="345">
          <method type="BigDecimal" name="invoke" startLine="337" endLine="339" />
          <method type="double" name="invoke" startLine="341" endLine="343" />
        </method>
        <method type="UnaryFunction<BigDecimal>" name="getBigRoundFunction" startLine="347" endLine="358">
          <method type="BigDecimal" name="invoke" startLine="350" endLine="352" />
          <method type="double" name="invoke" startLine="354" endLine="356" />
        </method>
        <method type="UnaryFunction<ComplexNumber>" name="getComplexEnforceFunction" startLine="360" endLine="371">
          <method type="ComplexNumber" name="invoke" startLine="363" endLine="365" />
          <method type="double" name="invoke" startLine="367" endLine="369" />
        </method>
        <method type="UnaryFunction<ComplexNumber>" name="getComplexRoundFunction" startLine="373" endLine="384">
          <method type="ComplexNumber" name="invoke" startLine="376" endLine="378" />
          <method type="double" name="invoke" startLine="380" endLine="382" />
        </method>
        <method type="MathContext" name="getMathContext" startLine="386" endLine="388" />
        <method type="int" name="getPrecision" startLine="390" endLine="392" />
        <method type="UnaryFunction<Double>" name="getPrimitiveEnforceFunction" startLine="394" endLine="405">
          <method type="double" name="invoke" startLine="397" endLine="399" />
          <method type="Double" name="invoke" startLine="401" endLine="403" />
        </method>
        <method type="UnaryFunction<Double>" name="getPrimitiveRoundFunction" startLine="407" endLine="418">
          <method type="double" name="invoke" startLine="410" endLine="412" />
          <method type="Double" name="invoke" startLine="414" endLine="416" />
        </method>
        <method type="UnaryFunction<RationalNumber>" name="getRationalEnforceFunction" startLine="420" endLine="431">
          <method type="double" name="invoke" startLine="423" endLine="425" />
          <method type="RationalNumber" name="invoke" startLine="427" endLine="429" />
        </method>
        <method type="UnaryFunction<RationalNumber>" name="getRationalRoundFunction" startLine="433" endLine="444">
          <method type="double" name="invoke" startLine="436" endLine="438" />
          <method type="RationalNumber" name="invoke" startLine="440" endLine="442" />
        </method>
        <method type="RoundingMode" name="getRoundingMode" startLine="446" endLine="448" />
        <method type="int" name="getScale" startLine="450" endLine="452" />
        <javadoc>
          <see>java.lang.Object#hashCode()</see>
        </javadoc>
        <method type="int" name="hashCode" startLine="458" endLine="469">
          <declaration type="int" name="prime" />
          <declaration type="int" name="result" />
          <declaration type="long" name="temp" />
        </method>
        <method type="boolean" name="isSmallComparedTo" startLine="471" endLine="477">
          <scope startLine="472" endLine="474" />
          <scope startLine="474" endLine="476" />
        </method>
        <method type="boolean" name="isSmallError" startLine="479" endLine="481" />
        <method type="boolean" name="isZero" startLine="483" endLine="485" />
        <method type="NumberContext" name="newFormat" startLine="487" endLine="489" />
        <method type="NumberContext" name="newMathContext" startLine="491" endLine="493" />
        <method type="NumberContext" name="newPrecision" startLine="495" endLine="497" />
        <method type="NumberContext" name="newRoundingMode" startLine="499" endLine="501" />
        <method type="NumberContext" name="newScale" startLine="503" endLine="505" />
        <javadoc>
          <text>* Will create an "enforced" BigDecimal instance.</text>
        </javadoc>
        <method type="BigDecimal" name="toBigDecimal" startLine="510" endLine="512" />
        <javadoc>
          <text>* Works with {@linkplain DecimalFormat} and {@linkplain FormatPattern} implementations. In other cases it returns
 * null.</text>
        </javadoc>
        <method type="String" name="toLocalizedPattern" startLine="518" endLine="529">
          <declaration type="String" name="retVal" />
          <scope startLine="522" endLine="524" />
          <scope startLine="524" endLine="526" />
        </method>
        <javadoc>
          <text>* Works with {@linkplain DecimalFormat} and {@linkplain FormatPattern} implementations. In other cases it returns
 * null.</text>
        </javadoc>
        <method type="String" name="toPattern" startLine="535" endLine="546">
          <declaration type="String" name="retVal" />
          <scope startLine="539" endLine="541" />
          <scope startLine="541" endLine="543" />
        </method>
        <method type="String" name="toString" startLine="549" endLine="551" />
        <method type="void" name="configureFormat" startLine="554" endLine="571">
          <scope startLine="556" endLine="570">
            <declaration type="DecimalFormat" name="tmpDF" />
            <declaration type="int" name="tmpModScale" />
            <scope startLine="565" endLine="567" />
            <scope startLine="567" endLine="569" />
          </scope>
        </method>
        <method type="String" name="handleFormatException" startLine="574" endLine="576" />
        <method type="Number" name="handleParseException" startLine="579" endLine="581" />
      </interface>
    </interface>
  </class>
</source>
