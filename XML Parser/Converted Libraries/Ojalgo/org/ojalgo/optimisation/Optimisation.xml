<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.optimisation">
  <import name="java.io.PrintStream" />
  <import name="java.io.Serializable" />
  <import name="java.math.BigDecimal" />
  <import name="java.math.RoundingMode" />
  <import name="java.util.Iterator" />
  <import name="org.ojalgo.ProgrammingError" />
  <import name="org.ojalgo.access.Access1D" />
  <import name="org.ojalgo.access.Iterator1D" />
  <import name="org.ojalgo.matrix.store.PrimitiveDenseStore" />
  <import name="org.ojalgo.netio.BasicLogger" />
  <import name="org.ojalgo.optimisation.integer.IntegerSolver" />
  <import name="org.ojalgo.type.CalendarDateUnit" />
  <import name="org.ojalgo.type.TypeUtils" />
  <import name="org.ojalgo.type.context.NumberContext" />
  <interface name="Optimisation" startLine="40">
    <interface name="Constraint" startLine="42">
      <implements name="Optimisation" />
      <javadoc>
        <text>* Constraint</text>
        <author>apete</author>
      </javadoc>
      <method name="getLowerLimit" type="BigDecimal" startLine="49" endLine="52" />
      <javadoc>
        <text>* May return null</text>
      </javadoc>
      <method name="getUpperLimit" type="BigDecimal" startLine="54" endLine="57" />
      <javadoc>
        <text>* May return null</text>
      </javadoc>
      <method name="isConstraint" type="boolean" startLine="59" endLine="62" />
      <javadoc>
        <text>* The Constraint has a lower or an upper limit (possibly both).</text>
      </javadoc>
      <method name="isEqualityConstraint" type="boolean" startLine="64" endLine="67" />
      <javadoc>
        <text>* The Constraint has both a lower limit and an upper limit, and they are equal.</text>
      </javadoc>
      <method name="isLowerConstraint" type="boolean" startLine="69" endLine="72" />
      <javadoc>
        <text>* The Constraint has a lower limit, and the upper limit (if it exists) is different.</text>
      </javadoc>
      <method name="isUpperConstraint" type="boolean" startLine="74" endLine="77" />
      <javadoc>
        <text>* The Constraint has an upper limit, and the lower limit (if it exists) is different.</text>
      </javadoc>
      <interface name="Model" startLine="81">
        <implements name="Optimisation" />
        <method name="maximise" type="Optimisation.Result" startLine="83" endLine="83" />
        <method name="minimise" type="Optimisation.Result" startLine="85" endLine="85" />
        <method name="validate" type="boolean" startLine="87" endLine="91" />
        <javadoc>
          <return>true If eveything is ok</return>
          <return>false The model is structurally ok, but the "value" breaks constraints - the solution is infeasible.</return>
        </javadoc>
        <interface name="Objective" startLine="95">
          <implements name="Optimisation" />
          <javadoc>
            <text>* Objective</text>
            <author>apete</author>
          </javadoc>
          <method name="getContributionWeight" type="BigDecimal" startLine="102" endLine="105" />
          <javadoc>
            <text>* May return null</text>
          </javadoc>
          <method name="isObjective" type="boolean" startLine="107" endLine="110" />
          <javadoc>
            <return>true if this objective has a non zero contribution weight.</return>
          </javadoc>
          <class name="Options" startLine="114">
            <implements name="Optimisation" />
            <implements name="Cloneable" />
            <javadoc>
              <text>* Which {@linkplain Solver} to debug. Null means ALL solvers. This setting is only relevant if{@link #debug_stream} has been set.</text>
            </javadoc>
            <declaration type="Class<? extends Optimisation.Solver>" name="debug_solver" />
            <javadoc>
              <text>* If this is null nothing is printed, if it is not null then debug statements are printed to that PrintStream.</text>
            </javadoc>
            <declaration type="PrintStream" name="debug_stream" />
            <javadoc>
              <text>* Used to determine if a variable value is integer or not.</text>
            </javadoc>
            <declaration type="NumberContext" name="integer" />
            <javadoc>
              <text>* The maximmum number of iterations allowed for the solve() command.</text>
            </javadoc>
            <declaration type="int" name="iterations_abort" />
            <javadoc>
              <text>* Calculations will be terminated after this number of iterations if a feasible solution has been found. If no
 * feasible solution has been found calculations will continue until one is found or{@linkplain #iterations_abort} is reached. This option is, probably, only of interest with the{@linkplain IntegerSolver}.</text>
            </javadoc>
            <declaration type="int" name="iterations_suffice" />
            <javadoc>
              <text>* The (relative) MIP gap is the difference between the best integer solution found so far and a node's
 * non-integer solution, relative to the optimal value. If the gap is smaller than this value, then the
 * corresponding branch i terminated as it is deemed unlikely or too "expensive" to find better integer
 * solutions there.</text>
            </javadoc>
            <declaration type="double" name="mip_gap" />
            <javadoc>
              <text>* Used to compare/check objective function values (incl. temporary, phase 1, objectives).</text>
            </javadoc>
            <declaration type="NumberContext" name="objective" />
            <javadoc>
              <text>* For display only!</text>
            </javadoc>
            <declaration type="NumberContext" name="print" />
            <javadoc>
              <text>* Problem parameters; constraints and objectives The numbers used to state/describe the problem, incl. when/if
 * these are transformed during the solution algorithm.</text>
            </javadoc>
            <declaration type="NumberContext" name="problem" />
            <javadoc>
              <text>* Used to determine if a constraint is violated or not. Essentially this context determines if the various
 * validate(...) methods will return true or false. Calculate the slack - zero if the constraint is "active" -
 * and check the sign.</text>
            </javadoc>
            <declaration type="NumberContext" name="slack" />
            <javadoc>
              <text>* Used when copying the solver's solution back to the model (converting from double to BigDecimal). Variable
 * values, dual variable values, lagrange multipliers...</text>
            </javadoc>
            <declaration type="NumberContext" name="solution" />
            <javadoc>
              <text>* The maximmum number of millis allowed for the solve() command. Executions will be aborted regardless of if a
 * solution has been found or not.</text>
            </javadoc>
            <declaration type="long" name="time_abort" />
            <javadoc>
              <text>* Calculations will be terminated after this amount of time if a feasible solution has been found. If no
 * feasible solution has been found calculations will continue until one is found or {@linkplain #time_abort} is
 * reached. This option is , probably, only of interest with the {@linkplain IntegerSolver}.</text>
            </javadoc>
            <declaration type="long" name="time_suffice" />
            <javadoc>
              <text>* If true models and solvers will validate data at various points. Validation is turned off by default. Turning
 * it on will significantly slow down execution - even very expensive validation may be performed.</text>
            </javadoc>
            <declaration type="boolean" name="validate" />
            <method type="constructor" name="Options" startLine="201" endLine="203" />
            <method type="Options" name="copy" startLine="205" endLine="211">
              <scope startLine="206" endLine="208" />
              <scope startLine="208" endLine="210" />
            </method>
            <method type="void" name="debug" startLine="213" endLine="217" />
            <method type="Object" name="clone" startLine="220" endLine="222" />
            <class name="Result" startLine="225">
              <implements name="Optimisation" />
              <implements name="Access1D<BigDecimal>" />
              <implements name="Comparable<Optimisation.Result>" />
              <implements name="Serializable" />
              <declaration type="int[]" name="myActiveSet" />
              <declaration type="int[]" name="myBasis" />
              <declaration type="Access1D<?>" name="mySolution" />
              <declaration type="Optimisation.State" name="myState" />
              <declaration type="double" name="myValue" />
              <method type="constructor" name="Result" startLine="234" endLine="236" />
              <method type="constructor" name="Result" startLine="238" endLine="248" />
              <method type="constructor" name="Result" startLine="250" endLine="252" />
              <method type="Result" name="activeSet" startLine="254" endLine="257" />
              <method type="Result" name="basis" startLine="259" endLine="262" />
              <method type="int" name="compareTo" startLine="264" endLine="275">
                <declaration type="double" name="tmpRefValue" />
                <scope startLine="268" endLine="270" />
                <scope startLine="270" endLine="272" />
                <scope startLine="272" endLine="274" />
              </method>
              <method type="long" name="count" startLine="277" endLine="279" />
              <method type="double" name="doubleValue" startLine="281" endLine="283" />
              <method type="boolean" name="equals" startLine="286" endLine="304">
                <scope startLine="287" endLine="289" />
                <scope startLine="290" endLine="292" />
                <scope startLine="293" endLine="295" />
                <declaration type="Result" name="other" />
                <scope startLine="297" endLine="299" />
                <scope startLine="300" endLine="302" />
              </method>
              <method type="BigDecimal" name="get" startLine="306" endLine="308" />
              <method type="int[]" name="getActiveSet" startLine="310" endLine="312" />
              <method type="int[]" name="getBasis" startLine="314" endLine="316" />
              <method type="Optimisation.State" name="getState" startLine="318" endLine="320" />
              <method type="double" name="getValue" startLine="322" endLine="324" />
              <method type="int" name="hashCode" startLine="327" endLine="335">
                <declaration type="int" name="prime" />
                <declaration type="int" name="result" />
                <declaration type="long" name="temp" />
              </method>
              <method type="boolean" name="isActiveSetDefined" startLine="337" endLine="339" />
              <method type="boolean" name="isBasisDefined" startLine="341" endLine="343" />
              <method type="Iterator<BigDecimal>" name="iterator" startLine="345" endLine="347" />
              <method type="int" name="size" startLine="349" endLine="351" />
              <method type="String" name="toString" startLine="354" endLine="356" />
              <interface name="Solver" startLine="359">
                <implements name="Optimisation" />
                <javadoc>
                  <text>* <p>
 * An {@linkplain Optimisation.Solver} instance implements a specific optimisation algorithm. Typically each
 * algorithm solves problems of (at least) one problem category. {@linkplain Optimisation.Model} represents a
 * problem category.
 * </p>
 * <p>
 * A solver internally works with primitive double.
 * </p></text>
                  <author>apete</author>
                </javadoc>
                <method name="solve" type="Optimisation.Result" startLine="373" endLine="373" />
                <method name="solve" type="Optimisation.Result" startLine="375" endLine="375" />
                <javadoc>
                  <text>* Approximate and/or Intermediate solution - Iteration point Probably infeasible, but still "good"</text>
                </javadoc>
                <javadoc>
                  <text>* Unique (and optimal) solution - there is no other solution that is equal or better</text>
                </javadoc>
                <javadoc>
                  <text>* Failed</text>
                </javadoc>
                <javadoc>
                  <text>* Solved - a solution that complies with all constraints</text>
                </javadoc>
                <javadoc>
                  <text>* Optimal, but not distinct solution - there are other solutions that are equal, but not better.</text>
                </javadoc>
                <javadoc>
                  <text>* No solution that complies with all constraints exists</text>
                </javadoc>
                <javadoc>
                  <text>* Model/problem components/entities are invalid</text>
                </javadoc>
                <javadoc>
                  <text>* Optimal solution - there is no better</text>
                </javadoc>
                <javadoc>
                  <text>* There's an infinite number of feasible solutions and no bound on the objective function value</text>
                </javadoc>
                <javadoc>
                  <text>* New/changed problem</text>
                </javadoc>
                <javadoc>
                  <text>* Model/problem components/entities are valid</text>
                </javadoc>
                <declaration type="int" name="myValue" />
                <method type="constructor" name="State" startLine="438" endLine="440" />
                <method type="boolean" name="isDistinct" startLine="442" endLine="444" />
                <javadoc>
                  <text>* FAILED, INVALID, INFEASIBLE, UNBOUNDED or INDISTINCT</text>
                </javadoc>
                <method type="boolean" name="isFailure" startLine="449" endLine="451" />
                <method type="boolean" name="isFeasible" startLine="453" endLine="455" />
                <method type="boolean" name="isOptimal" startLine="457" endLine="459" />
                <javadoc>
                  <text>* VALID, APPROXIMATE, FEASIBLE, OPTIMAL or DISTINCT</text>
                </javadoc>
                <method type="boolean" name="isSuccess" startLine="464" endLine="466" />
                <javadoc>
                  <text>* UNEXPLORED</text>
                </javadoc>
                <method type="boolean" name="isUnexplored" startLine="471" endLine="473" />
                <method type="boolean" name="isValid" startLine="475" endLine="477" />
                <method type="int" name="absValue" startLine="479" endLine="481" />
              </interface>
            </class>
            <comment>Objective Function Value</comment>
          </class>
        </interface>
      </interface>
    </interface>
  </interface>
</source>
