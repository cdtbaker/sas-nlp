<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.optimisation">
  <import name="java.math.BigDecimal" />
  <import name="java.math.RoundingMode" />
  <import name="java.util.Collection" />
  <import name="java.util.HashMap" />
  <import name="java.util.HashSet" />
  <import name="java.util.List" />
  <import name="java.util.Map.Entry" />
  <import name="java.util.Set" />
  <import name="org.ojalgo.ProgrammingError" />
  <import name="org.ojalgo.access.Access1D" />
  <import name="org.ojalgo.access.Access2D" />
  <import name="org.ojalgo.constant.BigMath" />
  <import name="org.ojalgo.constant.PrimitiveMath" />
  <import name="org.ojalgo.function.BigFunction" />
  <import name="org.ojalgo.function.BinaryFunction" />
  <import name="org.ojalgo.function.PrimitiveFunction" />
  <import name="org.ojalgo.function.UnaryFunction" />
  <import name="org.ojalgo.function.aggregator.AggregatorCollection" />
  <import name="org.ojalgo.function.aggregator.AggregatorFunction" />
  <import name="org.ojalgo.function.aggregator.BigAggregator" />
  <import name="org.ojalgo.function.multiary.CompoundFunction" />
  <import name="org.ojalgo.function.multiary.ConstantFunction" />
  <import name="org.ojalgo.function.multiary.LinearFunction" />
  <import name="org.ojalgo.function.multiary.MultiaryFunction" />
  <import name="org.ojalgo.function.multiary.QuadraticFunction" />
  <import name="org.ojalgo.matrix.store.MatrixStore" />
  <import name="org.ojalgo.matrix.store.PrimitiveDenseStore" />
  <import name="org.ojalgo.type.TypeUtils" />
  <import name="org.ojalgo.type.context.NumberContext" />
  <class name="Expression" extends="ModelEntity<Expression>" startLine="55">
    <javadoc>
      <text>* <p>
 * Think of an Expression as one constraint or a component to the objective function. An expression becomes a linear
 * expression as soon as you set a linear factor. Setting a quadratic factor turns it into a quadratic expression. If
 * you set both linear and quadratic factors it is a compound expression, and if you set neither it is an empty
 * expression. Currently the solvers supplied by ojAlgo can only handle linear constraint expressions. The objective
 * function can be linear, quadratic or compound. Empty expressions makes no sense...
 * </p>
 * <p>
 * An expression is turned into a constraint by setting a lower and/or upper limit. Use{@linkplain ModelEntity#lower(BigDecimal)}, {@linkplain ModelEntity#upper(BigDecimal)} or{@linkplain ModelEntity#level(BigDecimal)}. An expression is made part of (contributing to) the objective function by
 * setting a contribution weight. Use {@linkplain ModelEntity#weight(BigDecimal)}. The contribution weight can be set to
 * anything except zero (0.0). Often you may just want to set it to one (1.0). Other values can be used to balance
 * multiple expressions Contributing to the objective function.
 * </p></text>
      <author>apete</author>
    </javadoc>
    <class name="Index" startLine="76">
      <implements name="Comparable<Index>" />
      <declaration type="int" name="index" />
      <method type="constructor" name="Index" startLine="80" endLine="85" />
      <method type="constructor" name="Index" startLine="88" endLine="90" />
      <method type="int" name="compareTo" startLine="92" endLine="94" />
      <method type="boolean" name="equals" startLine="97" endLine="112">
        <scope startLine="98" endLine="100" />
        <scope startLine="101" endLine="103" />
        <scope startLine="104" endLine="106" />
        <declaration type="Index" name="other" />
        <scope startLine="108" endLine="110" />
      </method>
      <method type="int" name="hashCode" startLine="115" endLine="120">
        <declaration type="int" name="prime" />
        <declaration type="int" name="result" />
      </method>
      <method type="String" name="toString" startLine="123" endLine="125" />
      <class name="RowColumn" startLine="129">
        <implements name="Comparable<RowColumn>" />
        <declaration type="int" name="column" />
        <declaration type="int" name="row" />
        <method type="constructor" name="RowColumn" startLine="134" endLine="140" />
        <method type="constructor" name="RowColumn" startLine="143" endLine="145" />
        <method type="int" name="compareTo" startLine="147" endLine="157">
          <scope startLine="149" endLine="153" />
          <scope startLine="153" endLine="156" />
        </method>
        <method type="boolean" name="equals" startLine="160" endLine="178">
          <scope startLine="161" endLine="163" />
          <scope startLine="164" endLine="166" />
          <scope startLine="167" endLine="169" />
          <declaration type="RowColumn" name="other" />
          <scope startLine="171" endLine="173" />
          <scope startLine="174" endLine="176" />
        </method>
        <method type="int" name="hashCode" startLine="181" endLine="187">
          <declaration type="int" name="prime" />
          <declaration type="int" name="result" />
        </method>
        <method type="String" name="toString" startLine="190" endLine="192" />
        <declaration type="int" name="myAdjustmentExponent" />
        <declaration type="boolean" name="myInfeasible" />
        <declaration type="HashMap<Index,BigDecimal>" name="myLinear" />
        <declaration type="ExpressionsBasedModel" name="myModel" />
        <declaration type="HashMap<RowColumn,BigDecimal>" name="myQuadratic" />
        <declaration type="boolean" name="myRedundant" />
        <declaration type="boolean" name="myShallowCopy" />
        <method type="constructor" name="Expression" startLine="206" endLine="211" />
        <method type="constructor" name="Expression" startLine="214" endLine="219" />
        <method type="constructor" name="Expression" startLine="221" endLine="244">
          <scope startLine="227" endLine="237" />
          <scope startLine="237" endLine="243" />
        </method>
        <method type="constructor" name="Expression" startLine="246" endLine="260" />
        <method type="BigDecimal" name="evaluate" startLine="262" endLine="279">
          <declaration type="BigDecimal" name="retVal" />
          <declaration type="BigDecimal" name="tmpFactor" />
          <scope startLine="268" endLine="271" />
          <scope startLine="273" endLine="276" />
        </method>
        <method type="double" name="evaluateLessThanZero" startLine="281" endLine="292">
          <declaration type="double" name="tmpBody" />
          <scope startLine="285" endLine="287" />
          <scope startLine="287" endLine="289" />
          <scope startLine="289" endLine="291" />
        </method>
        <method type="double" name="evaluateMoreThanZero" startLine="294" endLine="305">
          <declaration type="double" name="tmpBody" />
          <scope startLine="298" endLine="300" />
          <scope startLine="300" endLine="302" />
          <scope startLine="302" endLine="304" />
        </method>
        <method type="MatrixStore<Double>" name="getAdjustedGradient" startLine="307" endLine="329">
          <declaration type="PrimitiveDenseStore" name="retVal" />
          <declaration type="BinaryFunction<Double>" name="tmpBaseFunc" />
          <declaration type="double" name="tmpAdjustedFactor" />
          <declaration type="UnaryFunction<Double>" name="tmpModFunc" />
          <scope startLine="314" endLine="320" />
          <scope startLine="322" endLine="326" />
        </method>
        <method type="MatrixStore<Double>" name="getAdjustedHessian" startLine="331" endLine="345">
          <declaration type="int" name="tmpCountVariables" />
          <declaration type="PrimitiveDenseStore" name="retVal" />
          <declaration type="BinaryFunction<Double>" name="tmpBaseFunc" />
          <declaration type="UnaryFunction<Double>" name="tmpModFunc" />
          <scope startLine="338" endLine="342" />
        </method>
        <method type="double" name="getAdjustedLinearFactor" startLine="347" endLine="349" />
        <method type="double" name="getAdjustedLinearFactor" startLine="351" endLine="353" />
        <method type="double" name="getAdjustedLinearFactor" startLine="355" endLine="357" />
        <method type="double" name="getAdjustedQuadraticFactor" startLine="359" endLine="361" />
        <method type="double" name="getAdjustedQuadraticFactor" startLine="363" endLine="365" />
        <method type="double" name="getAdjustedQuadraticFactor" startLine="367" endLine="369" />
        <javadoc>
          <return>compensated for fixed varables and adjusted</return>
        </javadoc>
        <method type="double" name="getCompensatedLowerLimit" startLine="374" endLine="376" />
        <javadoc>
          <return>compensated for fixed varables and adjusted</return>
        </javadoc>
        <method type="double" name="getCompensatedUpperLimit" startLine="381" endLine="383" />
        <method type="BigDecimal" name="getLinearFactor" startLine="385" endLine="387" />
        <method type="BigDecimal" name="getLinearFactor" startLine="389" endLine="391" />
        <method type="BigDecimal" name="getLinearFactor" startLine="393" endLine="395" />
        <method type="Set<Expression.Index>" name="getLinearFactorKeys" startLine="397" endLine="399" />
        <method type="BigDecimal" name="getQuadraticFactor" startLine="401" endLine="403" />
        <method type="BigDecimal" name="getQuadraticFactor" startLine="405" endLine="407" />
        <method type="BigDecimal" name="getQuadraticFactor" startLine="409" endLine="411" />
        <method type="Set<Expression.RowColumn>" name="getQuadraticFactorKeys" startLine="413" endLine="415" />
        <method type="boolean" name="isAnyLinearFactorNonZero" startLine="417" endLine="419" />
        <method type="boolean" name="isAnyQuadraticFactorNonZero" startLine="421" endLine="423" />
        <method type="boolean" name="isFunctionCompound" startLine="425" endLine="427" />
        <method type="boolean" name="isFunctionLinear" startLine="429" endLine="431" />
        <method type="boolean" name="isFunctionQuadratic" startLine="433" endLine="435" />
        <method type="boolean" name="isFunctionZero" startLine="437" endLine="439" />
        <javadoc>
          <text>* Will set the quadratic and linear factors to an expression that measures (the square of) the distance from the
 * given point.</text>
          <param>variables The relevant variables</param>
          <param>aPoint The point to measure from</param>
        </javadoc>
        <method type="void" name="setCompoundFactorsOffset" startLine="448" endLine="469">
          <declaration type="int" name="tmpLength" />
          <scope startLine="452" endLine="454" />
          <declaration type="BigDecimal" name="tmpLinearWeight" />
          <declaration type="Variable" name="tmpVariable" />
          <declaration type="BigDecimal" name="tmpVal" />
          <scope startLine="460" endLine="468" />
        </method>
        <method type="void" name="setLinearFactor" startLine="471" endLine="489">
          <scope startLine="473" endLine="485">
            <declaration type="BigDecimal" name="tmpValue" />
            <scope startLine="477" endLine="479" />
            <scope startLine="479" endLine="481" />
          </scope>
          <scope startLine="485" endLine="488" />
        </method>
        <method type="void" name="setLinearFactor" startLine="491" endLine="493" />
        <method type="void" name="setLinearFactor" startLine="495" endLine="497" />
        <method type="void" name="setLinearFactors" startLine="499" endLine="510">
          <declaration type="int" name="tmpLimit" />
          <scope startLine="503" endLine="505" />
          <scope startLine="507" endLine="509" />
        </method>
        <javadoc>
          <text>* Will set the linear factors to a simple sum expression - all factors equal 1.0.</text>
          <param>variables The relevant variables</param>
        </javadoc>
        <method type="void" name="setLinearFactorsSimple" startLine="517" endLine="521">
          <scope startLine="518" endLine="520" />
        </method>
        <method type="void" name="setQuadraticFactor" startLine="523" endLine="525" />
        <method type="void" name="setQuadraticFactor" startLine="527" endLine="545">
          <scope startLine="529" endLine="541">
            <declaration type="BigDecimal" name="tmpValue" />
            <scope startLine="533" endLine="535" />
            <scope startLine="535" endLine="537" />
          </scope>
          <scope startLine="541" endLine="544" />
        </method>
        <method type="void" name="setQuadraticFactor" startLine="547" endLine="549" />
        <method type="void" name="setQuadraticFactors" startLine="551" endLine="565">
          <declaration type="int" name="tmpLimit" />
          <scope startLine="555" endLine="557" />
          <scope startLine="559" endLine="564">
            <declaration type="Variable" name="tmpVar2" />
            <scope startLine="561" endLine="563" />
          </scope>
        </method>
        <method type="MultiaryFunction<Double>" name="toFunction" startLine="567" endLine="578">
          <scope startLine="569" endLine="571" />
          <scope startLine="571" endLine="573" />
          <scope startLine="573" endLine="575" />
          <scope startLine="575" endLine="577" />
        </method>
        <method type="boolean" name="validate" startLine="580" endLine="585">
          <declaration type="BigDecimal" name="tmpValue" />
        </method>
        <method type="BigDecimal" name="convert" startLine="587" endLine="613">
          <scope startLine="589" endLine="609">
            <scope startLine="591" endLine="604">
              <declaration type="int" name="tmpAdjExp" />
              <scope startLine="595" endLine="599" />
              <scope startLine="599" endLine="602" />
            </scope>
            <scope startLine="604" endLine="607" />
          </scope>
          <scope startLine="609" endLine="612" />
        </method>
        <method type="double" name="evaluateBody" startLine="615" endLine="632">
          <declaration type="double" name="retVal" />
          <declaration type="double" name="tmpAdjustedFactor" />
          <scope startLine="621" endLine="624" />
          <scope startLine="626" endLine="629" />
        </method>
        <method type="void" name="appendMiddlePart" startLine="634" endLine="645">
          <scope startLine="640" endLine="644" />
        </method>
        <method type="void" name="destroy" startLine="648" endLine="656">
          <scope startLine="652" endLine="655" />
        </method>
        <method type="int" name="getAdjustmentExponent" startLine="659" endLine="693">
          <scope startLine="661" endLine="690">
            <declaration type="AggregatorCollection<BigDecimal>" name="tmpCollection" />
            <declaration type="AggregatorFunction<BigDecimal>" name="tmpLargestAggr" />
            <declaration type="AggregatorFunction<BigDecimal>" name="tmpSmallestAggr" />
            <scope startLine="667" endLine="670" />
            <scope startLine="672" endLine="675" />
            <declaration type="BigDecimal" name="tmpLowerLimit" />
            <scope startLine="678" endLine="681" />
            <declaration type="BigDecimal" name="tmpUpperLimit" />
            <scope startLine="684" endLine="687" />
          </scope>
        </method>
        <method type="void" name="appendToString" startLine="695" endLine="704">
          <scope startLine="698" endLine="700" />
          <scope startLine="700" endLine="702" />
        </method>
        <method type="BigDecimal" name="calculateFixedValue" startLine="706" endLine="732">
          <declaration type="BigDecimal" name="retVal" />
          <scope startLine="710" endLine="729">
            <declaration type="BigDecimal" name="tmpFactor" />
            <declaration type="BigDecimal" name="tmpValue" />
            <declaration type="BigDecimal" name="tmpContribution" />
            <scope startLine="716" endLine="718" />
            <scope startLine="720" endLine="724">
              <scope startLine="721" endLine="723" />
            </scope>
            <scope startLine="724" endLine="728">
              <scope startLine="725" endLine="727" />
            </scope>
          </scope>
        </method>
        <method type="BigDecimal" name="compensateLowerLimit" startLine="734" endLine="746">
          <declaration type="BigDecimal" name="tmpFixed" />
          <scope startLine="738" endLine="742" />
          <scope startLine="742" endLine="745" />
        </method>
        <method type="BigDecimal" name="compensateUpperLimit" startLine="748" endLine="760">
          <declaration type="BigDecimal" name="tmpFixed" />
          <scope startLine="752" endLine="756" />
          <scope startLine="756" endLine="759" />
        </method>
        <method type="Expression" name="copy" startLine="762" endLine="764" />
        <method type="int" name="countLinearFactors" startLine="766" endLine="768" />
        <method type="int" name="countQuadraticFactors" startLine="770" endLine="772" />
        <method type="CompoundFunction<Double>" name="getCompoundFunction" startLine="774" endLine="791">
          <declaration type="CompoundFunction<Double>" name="retVal" />
          <scope startLine="778" endLine="782">
            <scope startLine="779" endLine="781" />
          </scope>
          <scope startLine="784" endLine="788">
            <scope startLine="785" endLine="787" />
          </scope>
        </method>
        <method type="HashMap<Index,BigDecimal>" name="getLinear" startLine="793" endLine="795" />
        <method type="BigDecimal" name="getLinearFactor" startLine="797" endLine="799" />
        <method type="LinearFunction<Double>" name="getLinearFunction" startLine="801" endLine="812">
          <declaration type="LinearFunction<Double>" name="retVal" />
          <scope startLine="805" endLine="809">
            <scope startLine="806" endLine="808" />
          </scope>
        </method>
        <method type="ExpressionsBasedModel" name="getModel" startLine="814" endLine="816" />
        <method type="HashMap<RowColumn,BigDecimal>" name="getQuadratic" startLine="818" endLine="820" />
        <method type="BigDecimal" name="getQuadraticFactor" startLine="822" endLine="824" />
        <method type="QuadraticFunction<Double>" name="getQuadraticFunction" startLine="826" endLine="837">
          <declaration type="QuadraticFunction<Double>" name="retVal" />
          <scope startLine="830" endLine="834">
            <scope startLine="831" endLine="833" />
          </scope>
        </method>
        <method type="ConstantFunction<Double>" name="getZeroFunction" startLine="839" endLine="841" />
        <method type="boolean" name="isInfeasible" startLine="843" endLine="845" />
        <method type="boolean" name="isRedundant" startLine="847" endLine="849" />
        <javadoc>
          <return>true if this expression was changed from not redundant to redundant</return>
        </javadoc>
        <method type="boolean" name="simplify" startLine="854" endLine="986">
          <declaration type="boolean" name="tmpInitiallyRedundant" />
          <declaration type="Set<Index>" name="tmpFixedVariables" />
          <scope startLine="860" endLine="981">
            <declaration type="BigDecimal" name="tmpFixedValue" />
            <scope startLine="864" endLine="975">
              <declaration type="HashSet<Index>" name="tmpLinear" />
              <scope startLine="870" endLine="882">
                <scope startLine="875" endLine="878" />
                <scope startLine="878" endLine="880" />
              </scope>
              <scope startLine="882" endLine="971">
                <declaration type="Index" name="tmpIndex" />
                <declaration type="Variable" name="tmpVariable" />
                <declaration type="BigDecimal" name="tmpFactor" />
                <scope startLine="890" endLine="904">
                  <declaration type="BigDecimal" name="tmpCompensatedLevel" />
                  <declaration type="BigDecimal" name="tmpSolutionValue" />
                  <scope startLine="897" endLine="900" />
                  <scope startLine="900" endLine="902" />
                </scope>
                <scope startLine="904" endLine="965">
                  <declaration type="BigDecimal" name="tmpLowerLimit" />
                  <declaration type="BigDecimal" name="tmpUpperLimit" />
                  <declaration type="BigDecimal" name="tmpCompensatedLower" />
                  <declaration type="BigDecimal" name="tmpCompensatedUpper" />
                  <declaration type="BigDecimal" name="tmpLowerSolution" />
                  <declaration type="BigDecimal" name="tmpUpperSolution" />
                  <scope startLine="919" endLine="923">
                    <declaration type="BigDecimal" name="tmpVal" />
                  </scope>
                  <declaration type="BigDecimal" name="tmpOldLower" />
                  <declaration type="BigDecimal" name="tmpOldUpper" />
                  <declaration type="BigDecimal" name="tmpNewLower" />
                  <scope startLine="929" endLine="935">
                    <scope startLine="930" endLine="932" />
                    <scope startLine="932" endLine="934" />
                  </scope>
                  <declaration type="BigDecimal" name="tmpNewUpper" />
                  <scope startLine="938" endLine="944">
                    <scope startLine="939" endLine="941" />
                    <scope startLine="941" endLine="943" />
                  </scope>
                  <scope startLine="946" endLine="953">
                    <scope startLine="947" endLine="949" />
                    <scope startLine="950" endLine="952" />
                  </scope>
                  <scope startLine="956" endLine="959" />
                  <scope startLine="959" endLine="961" />
                </scope>
                <scope startLine="967" endLine="970" />
              </scope>
            </scope>
            <scope startLine="975" endLine="979" />
            <comment>This constraint can possibly be reduced to 0 or 1 remaining linear factors</comment>
            <comment>The fixed variables are part of this expression</comment>
            <comment>This constraint has 0 remaining free variable</comment>
            <comment>It is entirely redundant</comment>
            <comment>This constraint has 1 remaining free variable</comment>
            <comment>The lower/upper limits can be transferred to that variable, and the expression marked as redundant</comment>
            <comment>Simple case with equality constraint</comment>
            <comment>More general case</comment>
            <comment>BasicLogger.logDebug("{} < {} -> {} < {} ( {} < {} )", tmpOldLower, tmpOldUpper, tmpNewLower, tmpNewUpper, tmpLowerSolution,</comment>
            <comment>tmpUpperSolution);</comment>
            <comment>Didn't change anything: No fixed value</comment>
          </scope>
          <scope startLine="981" endLine="985">
            <comment>Didn't change anything: Already redundant, quadratic or not enough fixed variables</comment>
          </scope>
        </method>
      </class>
    </class>
  </class>
</source>
