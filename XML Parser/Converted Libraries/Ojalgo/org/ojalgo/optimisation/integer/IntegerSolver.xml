<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.optimisation.integer">
  <import name="static org.ojalgo.constant.PrimitiveMath.*" />
  <import name="java.math.BigDecimal" />
  <import name="java.util.Collections" />
  <import name="java.util.HashSet" />
  <import name="java.util.List" />
  <import name="java.util.Set" />
  <import name="java.util.concurrent.RecursiveTask" />
  <import name="java.util.concurrent.atomic.AtomicInteger" />
  <import name="org.ojalgo.RecoverableCondition" />
  <import name="org.ojalgo.array.SimpleArray" />
  <import name="org.ojalgo.array.SimpleArray.Primitive" />
  <import name="org.ojalgo.concurrent.DaemonPoolExecutor" />
  <import name="org.ojalgo.constant.PrimitiveMath" />
  <import name="org.ojalgo.matrix.store.MatrixStore" />
  <import name="org.ojalgo.matrix.store.PrimitiveDenseStore" />
  <import name="org.ojalgo.optimisation.ExpressionsBasedModel" />
  <import name="org.ojalgo.optimisation.GenericSolver" />
  <import name="org.ojalgo.optimisation.Optimisation" />
  <import name="org.ojalgo.optimisation.Variable" />
  <import name="org.ojalgo.type.TypeUtils" />
  <class name="IntegerSolver" extends="GenericSolver" startLine="47">
    <javadoc>
      <text>* IntegerSolver</text>
      <author>apete</author>
    </javadoc>
    <class name="BranchAndBoundNodeTask" extends="RecursiveTask<Boolean>" startLine="54">
      <declaration type="NodeKey" name="myKey" />
      <method type="constructor" name="BranchAndBoundNodeTask" startLine="58" endLine="63" />
      <method type="constructor" name="BranchAndBoundNodeTask" startLine="65" endLine="70" />
      <method type="String" name="toString" startLine="73" endLine="75" />
      <method type="Boolean" name="compute" startLine="78" endLine="201">
        <scope startLine="80" endLine="84" />
        <scope startLine="86" endLine="91">
          <scope startLine="87" endLine="89" />
        </scope>
        <scope startLine="93" endLine="98">
          <scope startLine="94" endLine="96" />
        </scope>
        <scope startLine="98" endLine="100" />
        <scope startLine="102" endLine="107">
          <scope startLine="103" endLine="105" />
        </scope>
        <declaration type="ExpressionsBasedModel" name="tmpModel" />
        <declaration type="Optimisation.Result" name="tmpResult" />
        <scope startLine="112" endLine="114" />
        <scope startLine="114" endLine="116" />
        <scope startLine="118" endLine="194">
          <scope startLine="119" endLine="121" />
          <scope startLine="123" endLine="132" />
          <declaration type="int" name="tmpBranchIndex" />
          <declaration type="double" name="tmpSolutionValue" />
          <scope startLine="137" endLine="154">
            <scope startLine="138" endLine="140" />
            <declaration type="Optimisation.Result" name="tmpIntegerSolutionResult" />
            <scope startLine="146" endLine="148" />
          </scope>
          <scope startLine="154" endLine="192">
            <scope startLine="155" endLine="157" />
            <declaration type="double" name="tmpVariableValue" />
            <scope startLine="161" endLine="187">
              <scope startLine="162" endLine="165" />
              <declaration type="BranchAndBoundNodeTask" name="tmpLowerBranchTask" />
              <declaration type="BranchAndBoundNodeTask" name="tmpUpperBranchTask" />
              <declaration type="boolean" name="tmpLowerBranchValue" />
              <scope startLine="179" endLine="181" />
              <scope startLine="181" endLine="185" />
            </scope>
            <scope startLine="187" endLine="191">
              <scope startLine="188" endLine="190" />
            </scope>
          </scope>
          <comment>This should not be possible. There is a bug somewhere.</comment>
          <comment>IntegerSolver.this.logDebug(myKey.toString());</comment>
          <comment>IntegerSolver.this.logDebug(tmpModel.toString());</comment>
          <comment>final GenericSolver tmpDefaultSolver = tmpModel.getDefaultSolver();</comment>
          <comment>tmpDefaultSolver.solve();</comment>
          <comment>IntegerSolver.this.logDebug(tmpDefaultSolver.toString());</comment>
          <comment>BasicLogger.logDebug();</comment>
          <comment>BasicLogger.logDebug(IntegerSolver.this.toString());</comment>
          <comment>BasicLogger.logDebug(DaemonPoolExecutor.INSTANCE.toString());</comment>
          <comment>return tmpLowerBranchTask.compute() && tmpUpperBranchTask.compute();</comment>
        </scope>
        <scope startLine="194" endLine="198">
          <scope startLine="195" endLine="197" />
        </scope>
      </method>
      <method type="BranchAndBoundNodeTask" name="createLowerBranch" startLine="203" endLine="209">
        <declaration type="double" name="tmpParentValue" />
        <declaration type="NodeKey" name="tmpKey" />
      </method>
      <method type="BranchAndBoundNodeTask" name="createUpperBranch" startLine="211" endLine="217">
        <declaration type="double" name="tmpParentValue" />
        <declaration type="NodeKey" name="tmpKey" />
      </method>
      <method type="NodeKey" name="getKey" startLine="219" endLine="221" />
      <method type="ExpressionsBasedModel" name="getModel" startLine="223" endLine="254">
        <declaration type="ExpressionsBasedModel" name="retVal" />
        <declaration type="int[]" name="tmpIntegerIndeces" />
        <scope startLine="228" endLine="241">
          <declaration type="BigDecimal" name="tmpLowerBound" />
          <declaration type="BigDecimal" name="tmpUpperBound" />
          <declaration type="Variable" name="tmpVariable" />
          <declaration type="BigDecimal" name="tmpValue" />
          <scope startLine="238" endLine="240" />
        </scope>
        <scope startLine="243" endLine="251">
          <declaration type="double" name="tmpBestValue" />
          <declaration type="double" name="tmpGap" />
          <scope startLine="246" endLine="248" />
          <scope startLine="248" endLine="250" />
        </scope>
      </method>
      <class name="NodeStatistics" startLine="258">
        <declaration type="AtomicInteger" name="myTruncated" />
        <declaration type="AtomicInteger" name="myAbandoned" />
        <declaration type="AtomicInteger" name="myInfeasible" />
        <declaration type="AtomicInteger" name="myFailed" />
        <declaration type="AtomicInteger" name="myExhausted" />
        <declaration type="AtomicInteger" name="myBranched" />
        <javadoc>
          <text>* Node never evaluated (sub/node problem never solved)</text>
        </javadoc>
        <method type="boolean" name="abandoned" startLine="270" endLine="273" />
        <javadoc>
          <text>* Node evaluated, but solution not integer. Estimate still possible to find better integer solution. Created 2
 * new branches.</text>
        </javadoc>
        <method type="boolean" name="branched" startLine="279" endLine="282" />
        <javadoc>
          <text>* Node evaluated, but solution not integer. Estimate NOT possible to find better integer solution.</text>
        </javadoc>
        <method type="boolean" name="exhausted" startLine="287" endLine="290" />
        <method type="boolean" name="failed" startLine="292" endLine="295" />
        <method type="boolean" name="feasible" startLine="297" endLine="300" />
        <method type="boolean" name="infeasible" startLine="302" endLine="305" />
        <method type="boolean" name="truncated" startLine="307" endLine="310" />
        <method type="int" name="getCreated" startLine="312" endLine="314" />
        <method type="int" name="getEvaluated" startLine="316" endLine="318" />
        <class name="RootTask" extends="RecursiveTask<Boolean>" startLine="322">
          <method type="Boolean" name="compute" startLine="325" endLine="345">
            <declaration type="ExpressionsBasedModel" name="tmpIntegerModel" />
            <declaration type="NodeKey" name="tmpRootKey" />
            <declaration type="ExpressionsBasedModel" name="tmpRelaxedModel" />
            <declaration type="List<Variable>" name="tmpVariables" />
            <scope startLine="335" endLine="338">
              <declaration type="Variable" name="tmpVariable" />
            </scope>
            <scope startLine="340" endLine="342" />
          </method>
          <class name="Subtask" extends="RecursiveTask<Boolean>" startLine="349">
            <method type="Boolean" name="compute" startLine="352" endLine="354" />
            <method type="IntegerSolver" name="make" startLine="358" endLine="360" />
            <declaration type="Optimisation.Result" name="myBestResultSoFar" />
            <declaration type="Set<NodeKey>" name="myExploredNodes" />
            <declaration type="int[]" name="myIntegerIndeces" />
            <declaration type="AtomicInteger" name="myIntegerSolutionsCount" />
            <declaration type="boolean" name="myMinimisation" />
            <method type="constructor" name="IntegerSolver" startLine="369" endLine="385">
              <declaration type="List<Variable>" name="tmpIntegerVariables" />
              <scope startLine="379" endLine="382">
                <declaration type="Variable" name="tmpVariable" />
              </scope>
              <comment>options.debug = System.out;</comment>
            </method>
            <method type="Result" name="solve" startLine="387" endLine="419">
              <scope startLine="389" endLine="391" />
              <declaration type="BranchAndBoundNodeTask" name="tmpNodeTask" />
              <declaration type="boolean" name="tmpNormalExit" />
              <declaration type="Optimisation.Result" name="retVal" />
              <scope startLine="401" endLine="409">
                <scope startLine="403" endLine="405" />
                <scope startLine="405" endLine="407" />
              </scope>
              <scope startLine="409" endLine="416">
                <scope startLine="411" endLine="413" />
                <scope startLine="413" endLine="415" />
              </scope>
            </method>
            <method type="String" name="toString" startLine="422" endLine="424" />
            <method type="MatrixStore<Double>" name="extractSolution" startLine="427" endLine="429" />
            <method type="boolean" name="initialise" startLine="432" endLine="434" />
            <method type="boolean" name="needsAnotherIteration" startLine="437" endLine="439" />
            <method type="boolean" name="validate" startLine="442" endLine="461">
              <declaration type="boolean" name="retVal" />
              <scope startLine="447" endLine="454">
                <scope startLine="449" endLine="452" />
              </scope>
              <scope startLine="454" endLine="458" />
            </method>
            <method type="int" name="countExploredNodes" startLine="463" endLine="465" />
            <method type="int" name="countIntegerSolutions" startLine="467" endLine="469" />
            <method type="Optimisation.Result" name="getBestResultSoFar" startLine="471" endLine="485">
              <scope startLine="473" endLine="477" />
              <scope startLine="477" endLine="484">
                <declaration type="State" name="tmpSate" />
                <declaration type="double" name="tmpValue" />
                <declaration type="Primitive" name="tmpMakePrimitive" />
              </scope>
            </method>
            <method type="int" name="getGlobalIndex" startLine="487" endLine="489" />
            <method type="int[]" name="getIntegerIndeces" startLine="491" endLine="493" />
            <method type="int" name="identifyNonIntegerVariable" startLine="495" endLine="517">
              <declaration type="MatrixStore<Double>" name="tmpGradient" />
              <declaration type="int" name="retVal" />
              <declaration type="double" name="tmpFraction" />
              <declaration type="double" name="tmpMaxFraction" />
              <scope startLine="504" endLine="514">
                <scope startLine="509" endLine="512" />
              </scope>
            </method>
            <method type="boolean" name="isExplored" startLine="519" endLine="521" />
            <method type="boolean" name="isGoodEnoughToContinueBranching" startLine="523" endLine="550">
              <scope startLine="528" endLine="532" />
              <scope startLine="532" endLine="549">
                <declaration type="double" name="tmpBestIntegerValue" />
                <declaration type="double" name="tmpMipGap" />
                <scope startLine="544" endLine="546" />
                <scope startLine="546" endLine="548" />
                <comment>BasicLogger.logDebug("MIP relaxed={} integer={} gap={}", nonIntegerValue, tmpBestIntegerValue, tmpMipGap);</comment>
                <comment>BasicLogger.logDebug("Daemons existing: {}, active: {}, idle: {} queued submitions: {} queued tasks: {}",</comment>
                <comment>DaemonPoolExecutor.INSTANCE.countExistingDaemons(), DaemonPoolExecutor.INSTANCE.countActiveDaemons(),</comment>
                <comment>DaemonPoolExecutor.INSTANCE.countIdleDaemons(), DaemonPoolExecutor.INSTANCE.getQueuedSubmissionCount(),</comment>
                <comment>DaemonPoolExecutor.INSTANCE.getQueuedTaskCount());</comment>
              </scope>
              <comment>BasicLogger.logDebug();</comment>
              <comment>BasicLogger.logDebug("Iterations: {}, Integer solutions: {}", this.countIterations(), this.countIntegerSolutions());</comment>
            </method>
            <method type="boolean" name="isIntegerSolutionFound" startLine="552" endLine="554" />
            <method type="boolean" name="isIterationNecessary" startLine="556" endLine="569">
              <scope startLine="558" endLine="562" />
              <scope startLine="562" endLine="568">
                <declaration type="int" name="tmpIterations" />
                <declaration type="long" name="tmpTime" />
              </scope>
            </method>
            <method type="void" name="markAsExplored" startLine="571" endLine="573" />
            <method type="void" name="storeResult" startLine="575" endLine="594">
              <scope startLine="579" endLine="583" />
              <scope startLine="583" endLine="587" />
              <scope startLine="587" endLine="590" />
              <comment>BasicLogger.logDebug("Store: " + aResult.toString());</comment>
            </method>
          </class>
        </class>
      </class>
    </class>
  </class>
</source>
