<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.optimisation.mps">
  <import name="static org.ojalgo.constant.BigMath.*" />
  <import name="java.io.BufferedReader" />
  <import name="java.io.File" />
  <import name="java.io.FileNotFoundException" />
  <import name="java.io.FileReader" />
  <import name="java.io.IOException" />
  <import name="java.math.BigDecimal" />
  <import name="java.util.Collection" />
  <import name="java.util.HashMap" />
  <import name="java.util.HashSet" />
  <import name="java.util.Set" />
  <import name="org.ojalgo.optimisation.AbstractModel" />
  <import name="org.ojalgo.optimisation.ExpressionsBasedModel" />
  <import name="org.ojalgo.optimisation.GenericSolver" />
  <import name="org.ojalgo.optimisation.ModelEntity" />
  <import name="org.ojalgo.optimisation.Optimisation" />
  <class name="MathProgSysModel" extends="AbstractModel<GenericSolver>" startLine="43">
    <javadoc>
      <text>* Mathematical Programming System (MPS) Model</text>
      <author>apete</author>
    </javadoc>
    <class name="Column" extends="ModelEntity<MathProgSysModel.Column>" startLine="50">
      <declaration type="boolean" name="myActivator" />
      <declaration type="HashMap<String,BigDecimal>" name="myElements" />
      <declaration type="boolean" name="myInteger" />
      <method type="constructor" name="Column" startLine="57" endLine="62" />
      <method type="constructor" name="Column" startLine="64" endLine="72" />
      <method type="Column" name="bound" startLine="74" endLine="169">
        <scope startLine="88" endLine="90" />
        <scope startLine="110" endLine="112" />
        <scope startLine="120" endLine="122" />
        <scope startLine="145" endLine="147" />
        <scope startLine="157" endLine="159" />
      </method>
      <method type="Set<String>" name="getElementKeys" startLine="171" endLine="173" />
      <method type="String" name="getNameForActivator" startLine="175" endLine="177" />
      <method type="String" name="getNameForNegativePart" startLine="179" endLine="185">
        <scope startLine="180" endLine="182" />
        <scope startLine="182" endLine="184" />
      </method>
      <method type="String" name="getNameForPositivePart" startLine="187" endLine="193">
        <scope startLine="188" endLine="190" />
        <scope startLine="190" endLine="192" />
      </method>
      <method type="BigDecimal" name="getRowValue" startLine="195" endLine="197" />
      <method type="boolean" name="hasNegativePart" startLine="199" endLine="202">
        <declaration type="BigDecimal" name="tmpLowerLimit" />
      </method>
      <method type="boolean" name="hasPositivePart" startLine="204" endLine="207">
        <declaration type="BigDecimal" name="tmpUpperLimit" />
      </method>
      <method type="boolean" name="isInteger" startLine="209" endLine="211" />
      <method type="boolean" name="needsActivator" startLine="213" endLine="215" />
      <method type="void" name="setInteger" startLine="217" endLine="219" />
      <method type="BigDecimal" name="setRowValue" startLine="221" endLine="223" />
      <method type="int" name="getAdjustmentExponent" startLine="226" endLine="228" />
      <class name="Row" extends="ModelEntity<MathProgSysModel.Row>" startLine="232">
        <declaration type="RowType" name="type" />
        <method type="constructor" name="Row" startLine="236" endLine="250">
          <scope startLine="242" endLine="244" />
          <scope startLine="244" endLine="246" />
          <comment>0.0 is the default RHS value</comment>
        </method>
        <method type="constructor" name="Row" startLine="252" endLine="257" />
        <method type="constructor" name="Row" startLine="259" endLine="264" />
        <method type="Row" name="range" startLine="266" endLine="306">
          <declaration type="int" name="tmpSignum" />
          <scope startLine="273" endLine="275" />
          <scope startLine="275" endLine="277" />
        </method>
        <method type="Row" name="rhs" startLine="308" endLine="343" />
        <method type="int" name="getAdjustmentExponent" startLine="346" endLine="348" />
        <declaration type="String" name="COMMENT" />
        <declaration type="String" name="EMPTY" />
        <declaration type="String" name="SPACE" />
        <method type="MathProgSysModel" name="makeFromFile" startLine="356" endLine="392">
          <declaration type="String" name="tmpLine" />
          <declaration type="FileSection" name="tmpSection" />
          <declaration type="MathProgSysModel" name="retVal" />
          <scope startLine="362" endLine="385">
            <declaration type="BufferedReader" name="tmpBufferedFileReader" />
            <scope startLine="370" endLine="381">
              <scope startLine="374" endLine="376" />
              <scope startLine="376" endLine="378" />
              <scope startLine="378" endLine="380" />
            </scope>
            <comment>readLine is a bit quirky :</comment>
            <comment>it returns the content of a line MINUS the newline.</comment>
            <comment>it returns null only for the END of the stream.</comment>
            <comment>it returns an empty String if two newlines appear in a row.</comment>
            <comment>BasicLogger.logDebug("Line: {}.", tmpLine);</comment>
            <comment>Skip this line</comment>
          </scope>
          <scope startLine="385" endLine="387" />
          <scope startLine="387" endLine="389" />
        </method>
        <declaration type="HashMap<String,Column>" name="myColumns" />
        <declaration type="int[]" name="myFieldLimits" />
        <declaration type="String[]" name="myFields" />
        <declaration type="boolean" name="myIntegerMarker" />
        <declaration type="String" name="myNameInFile" />
        <declaration type="HashMap<String,Row>" name="myRows" />
        <method type="constructor" name="MathProgSysModel" startLine="401" endLine="406" />
        <method type="void" name="destroy" startLine="409" endLine="412">
          <comment>TODO Auto-generated method stub</comment>
        </method>
        <javadoc>
          <see>#getActivatorVariableColumns()</see>
          <see>#getNegativeVariableColumns()</see>
          <see>#getPositiveVariableColumns()</see>
        </javadoc>
        <method type="Column[]" name="getActivatorVariableColumns" startLine="419" endLine="430">
          <declaration type="HashSet<Column>" name="tmpSelection" />
          <scope startLine="423" endLine="427">
            <scope startLine="424" endLine="426" />
          </scope>
        </method>
        <method type="Row[]" name="getConstraintRows" startLine="432" endLine="444">
          <declaration type="HashSet<Row>" name="tmpSelection" />
          <declaration type="Collection<Row>" name="tmpValues" />
          <scope startLine="437" endLine="441">
            <scope startLine="438" endLine="440" />
          </scope>
        </method>
        <method type="GenericSolver" name="getDefaultSolver" startLine="446" endLine="448" />
        <method type="Row[]" name="getExpressionRows" startLine="450" endLine="455">
          <declaration type="Collection<Row>" name="tmpValues" />
        </method>
        <method type="String" name="getName" startLine="457" endLine="459" />
        <javadoc>
          <see>#getActivatorVariableColumns()</see>
          <see>#getNegativeVariableColumns()</see>
          <see>#getPositiveVariableColumns()</see>
        </javadoc>
        <method type="Column[]" name="getNegativeVariableColumns" startLine="466" endLine="477">
          <declaration type="HashSet<Column>" name="tmpSelection" />
          <scope startLine="470" endLine="474">
            <scope startLine="471" endLine="473" />
          </scope>
        </method>
        <method type="Row" name="getObjectiveRow" startLine="479" endLine="488">
          <scope startLine="481" endLine="485">
            <scope startLine="482" endLine="484" />
          </scope>
        </method>
        <javadoc>
          <see>#getActivatorVariableColumns()</see>
          <see>#getNegativeVariableColumns()</see>
          <see>#getPositiveVariableColumns()</see>
        </javadoc>
        <method type="Column[]" name="getPositiveVariableColumns" startLine="495" endLine="506">
          <declaration type="HashSet<Column>" name="tmpSelection" />
          <scope startLine="499" endLine="503">
            <scope startLine="500" endLine="502" />
          </scope>
        </method>
        <method type="Optimisation.Result" name="maximise" startLine="508" endLine="510" />
        <method type="Optimisation.Result" name="minimise" startLine="512" endLine="514" />
        <method type="boolean" name="validate" startLine="516" endLine="518" />
        <method type="void" name="extractFields" startLine="520" endLine="531">
          <declaration type="int" name="tmpLength" />
          <declaration type="int" name="tmpFirst" />
          <declaration type="int" name="tmpLimit" />
          <scope startLine="526" endLine="530" />
        </method>
        <method type="FileSection" name="identifySection" startLine="533" endLine="564">
          <declaration type="int" name="tmpSplit" />
          <declaration type="String" name="tmpSection" />
          <declaration type="String" name="tmpArgument" />
          <scope startLine="538" endLine="541" />
          <scope startLine="541" endLine="544" />
          <declaration type="FileSection" name="retVal" />
          <comment>BasicLogger.logDebug("Section: {},\tArgument: {}.", tmpSection, tmpArgument);</comment>
        </method>
        <method type="void" name="parseSectionLine" startLine="566" endLine="662">
          <scope startLine="580" endLine="582" />
          <declaration type="Row" name="aConstraint" />
          <scope startLine="599" endLine="607">
            <scope startLine="601" endLine="603" />
            <scope startLine="603" endLine="605" />
          </scope>
          <scope startLine="607" endLine="624">
            <scope startLine="609" endLine="611" />
            <declaration type="Column" name="tmpColumn" />
            <scope startLine="616" endLine="618" />
            <scope startLine="620" endLine="622" />
          </scope>
          <scope startLine="632" endLine="634" />
          <scope startLine="642" endLine="644" />
          <comment>BasicLogger.logDebug("{}: {}.", aSection, Arrays.toString(myFields));</comment>
        </method>
      </class>
    </class>
  </class>
</source>
