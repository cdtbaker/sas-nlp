<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.optimisation">
  <import name="static org.ojalgo.constant.BigMath.*" />
  <import name="java.math.BigDecimal" />
  <import name="java.util.*" />
  <import name="org.ojalgo.access.Access1D" />
  <import name="org.ojalgo.array.Array1D" />
  <import name="org.ojalgo.constant.PrimitiveMath" />
  <import name="org.ojalgo.function.multiary.MultiaryFunction" />
  <import name="org.ojalgo.optimisation.Expression.Index" />
  <import name="org.ojalgo.optimisation.integer.IntegerSolver" />
  <import name="org.ojalgo.optimisation.linear.LinearSolver" />
  <import name="org.ojalgo.optimisation.mps.MathProgSysModel" />
  <import name="org.ojalgo.optimisation.quadratic.QuadraticSolver" />
  <import name="org.ojalgo.type.context.NumberContext" />
  <class name="ExpressionsBasedModel" extends="AbstractModel<GenericSolver>" startLine="40">
    <javadoc>
      <text>* <p>
 * Lets you construct optimisation problems by combining mathematical expressions (in terms of variables). Each
 * expression or variable can be a constraint and/or contribute to the objective function. An expression or variable is
 * turned into a constraint by setting a lower and/or upper limit. Use {@linkplain ModelEntity#lower(BigDecimal)},{@linkplain ModelEntity#upper(BigDecimal)} or {@linkplain ModelEntity#level(BigDecimal)}. An expression or variable
 * is made part of (contributing to) the objective function by setting a contribution weight. Use{@linkplain ModelEntity#weight(BigDecimal)}.
 * </p>
 * <p>
 * You may think of variables as simple (the simplest possible) expressions, and of expressions as weighted combinations
 * of variables. They are both model entities and it is as such they can be turned into constraints and set to
 * contribute to the objective function. Alternatively you may choose to disregard the fact that variables are model
 * entities and simply treat them as index values. In this case everything (constraints and objective) needs to be
 * defined using expressions.
 * </p>
 * Basic instructions:
 * <ol>
 * <li>Define (create) a set of variables. Set contribution weights and lower/upper limits as needed.</li>
 * <li>Create a model using that set of variables.</li>
 * <li>Add expressions to the model. The model is the expression factory. Set contribution weights and lower/upper
 * limits as needed.</li>
 * <li>Instantiate a solver using the model. (Call {@linkplain #getDefaultSolver()})</li>
 * <li>Solve!</li>
 * </ol>
 * There are some restrictions on the models you can create:
 * <ul>
 * <li>No quadratic constraints</li>
 * </ul>
 * The plan is that future versions should not have any restrictions like these.</text>
      <author>apete</author>
    </javadoc>
    <declaration type="String" name="NEW_LINE" />
    <declaration type="String" name="START_END" />
    <declaration type="String" name="OBJ_FUNC_AS_CONSTR_NAME" />
    <method type="ExpressionsBasedModel" name="make" startLine="81" endLine="194">
      <declaration type="MathProgSysModel.Column[]" name="tmpActCols" />
      <declaration type="MathProgSysModel.Column[]" name="tmpNegCols" />
      <declaration type="MathProgSysModel.Column[]" name="tmpPosCols" />
      <declaration type="MathProgSysModel.Row[]" name="tmpAllRows" />
      <declaration type="int" name="tmpCountActCols" />
      <declaration type="int" name="tmpCountNegCols" />
      <declaration type="int" name="tmpCountPosCols" />
      <declaration type="int" name="tmpCountAllRows" />
      <declaration type="MathProgSysModel.Row" name="tmpRow" />
      <declaration type="MathProgSysModel.Column" name="tmpCol" />
      <declaration type="Variable" name="tmpVar" />
      <declaration type="Expression" name="tmpExpr" />
      <declaration type="int" name="tmpIndex" />
      <declaration type="Variable[]" name="tmpVariables" />
      <scope startLine="107" endLine="113" />
      <scope startLine="114" endLine="125">
        <declaration type="BigDecimal" name="tmpLowerLimit" />
        <declaration type="BigDecimal" name="tmpUpperLimit" />
      </scope>
      <scope startLine="126" endLine="137">
        <declaration type="BigDecimal" name="tmpLowerLimit" />
        <declaration type="BigDecimal" name="tmpUpperLimit" />
      </scope>
      <declaration type="ExpressionsBasedModel" name="retVal" />
      <declaration type="Expression[]" name="tmpExpressions" />
      <declaration type="String[]" name="tmpExpressionNames" />
      <scope startLine="145" endLine="153" />
      <declaration type="Expression[]" name="tmpActExpressions" />
      <declaration type="String[]" name="tmpActExpressionNames" />
      <scope startLine="158" endLine="170">
        <scope startLine="166" endLine="169" />
      </scope>
      <scope startLine="172" endLine="181">
        <scope startLine="175" endLine="180">
          <scope startLine="177" endLine="179" />
        </scope>
      </scope>
      <scope startLine="182" endLine="191">
        <scope startLine="185" endLine="190">
          <scope startLine="187" endLine="189" />
        </scope>
      </scope>
      <comment>Define various local variables</comment>
      <comment>Create the LinearModel variables</comment>
      <comment>Instantiate the LinearModel</comment>
    </method>
    <method type="void" name="presolve" startLine="196" endLine="204">
      <scope startLine="198" endLine="203">
        <scope startLine="199" endLine="202" />
      </scope>
    </method>
    <declaration type="boolean" name="myWorkCopy" />
    <declaration type="HashMap<String,Expression>" name="myExpressions" />
    <declaration type="HashSet<Index>" name="myFixedVariables" />
    <declaration type="int[]" name="myFreeIndeces" />
    <declaration type="List<Variable>" name="myFreeVariables" />
    <declaration type="int[]" name="myIntegerIndeces" />
    <declaration type="List<Variable>" name="myIntegerVariables" />
    <declaration type="int[]" name="myNegativeIndeces" />
    <declaration type="List<Variable>" name="myNegativeVariables" />
    <declaration type="Expression" name="myObjectiveExpression" />
    <declaration type="MultiaryFunction<Double>" name="myObjectiveFunction" />
    <declaration type="int[]" name="myPositiveIndeces" />
    <declaration type="List<Variable>" name="myPositiveVariables" />
    <declaration type="ArrayList<Variable>" name="myVariables" />
    <method type="constructor" name="ExpressionsBasedModel" startLine="222" endLine="227" />
    <method type="constructor" name="ExpressionsBasedModel" startLine="229" endLine="238">
      <scope startLine="233" endLine="235" />
    </method>
    <method type="constructor" name="ExpressionsBasedModel" startLine="240" endLine="249">
      <scope startLine="244" endLine="246" />
    </method>
    <method type="constructor" name="ExpressionsBasedModel" startLine="252" endLine="254" />
    <method type="constructor" name="ExpressionsBasedModel" startLine="256" endLine="277">
      <scope startLine="262" endLine="264" />
      <scope startLine="266" endLine="268" />
      <scope startLine="270" endLine="276" />
    </method>
    <method type="Expression" name="addExpression" startLine="279" endLine="286">
      <declaration type="Expression" name="retVal" />
    </method>
    <method type="void" name="addVariable" startLine="288" endLine="295">
      <scope startLine="289" endLine="291" />
      <scope startLine="291" endLine="294" />
    </method>
    <method type="void" name="addVariables" startLine="297" endLine="301">
      <scope startLine="298" endLine="300" />
    </method>
    <method type="ExpressionsBasedModel" name="copy" startLine="303" endLine="305" />
    <method type="int" name="countExpressions" startLine="307" endLine="309" />
    <method type="int" name="countVariables" startLine="311" endLine="313" />
    <method type="void" name="destroy" startLine="316" endLine="331">
      <scope startLine="320" endLine="322" />
      <scope startLine="325" endLine="327" />
    </method>
    <method type="GenericSolver" name="getDefaultSolver" startLine="333" endLine="349">
      <scope startLine="337" endLine="341" />
      <scope startLine="341" endLine="345" />
      <scope startLine="345" endLine="348" />
    </method>
    <method type="Expression" name="getExpression" startLine="351" endLine="353" />
    <method type="Collection<Expression>" name="getExpressions" startLine="355" endLine="357" />
    <method type="Set<Index>" name="getFixedVariables" startLine="359" endLine="361" />
    <javadoc>
      <return>A list of the variables that are not fixed at a specific value</return>
    </javadoc>
    <method type="List<Variable>" name="getFreeVariables" startLine="366" endLine="373">
      <scope startLine="368" endLine="370" />
    </method>
    <javadoc>
      <return>A list of the variables that are not fixed at a specific value and are marked as integer variables</return>
    </javadoc>
    <method type="List<Variable>" name="getIntegerVariables" startLine="378" endLine="385">
      <scope startLine="380" endLine="382" />
    </method>
    <javadoc>
      <return>A list of the variables that are not fixed at a specific value and whos range include negative values</return>
    </javadoc>
    <method type="List<Variable>" name="getNegativeVariables" startLine="390" endLine="397">
      <scope startLine="392" endLine="394" />
    </method>
    <method type="Expression" name="getObjectiveExpression" startLine="399" endLine="447">
      <scope startLine="401" endLine="444">
        <declaration type="Variable" name="tmpVariable" />
        <scope startLine="406" endLine="412">
          <scope startLine="409" endLine="411" />
        </scope>
        <declaration type="BigDecimal" name="tmpOldVal" />
        <declaration type="BigDecimal" name="tmpDiff" />
        <declaration type="BigDecimal" name="tmpNewVal" />
        <scope startLine="418" endLine="443">
          <scope startLine="420" endLine="442">
            <declaration type="BigDecimal" name="tmpContributionWeight" />
            <declaration type="boolean" name="tmpNotOne" />
            <scope startLine="425" endLine="432">
              <scope startLine="426" endLine="431" />
            </scope>
            <scope startLine="434" endLine="441">
              <scope startLine="435" endLine="440" />
            </scope>
          </scope>
        </scope>
        <comment>To avoid multiplication by 1.0</comment>
      </scope>
    </method>
    <method type="MultiaryFunction<Double>" name="getObjectiveFunction" startLine="449" endLine="456">
      <scope startLine="451" endLine="453" />
    </method>
    <javadoc>
      <return>A list of the variables that are not fixed at a specific value and whos range include positive values
 * and/or zero</return>
    </javadoc>
    <method type="List<Variable>" name="getPositiveVariables" startLine="462" endLine="469">
      <scope startLine="464" endLine="466" />
    </method>
    <method type="Variable" name="getVariable" startLine="471" endLine="473" />
    <method type="List<Variable>" name="getVariables" startLine="475" endLine="477" />
    <method type="Access1D<BigDecimal>" name="getVariableValues" startLine="479" endLine="497">
      <declaration type="int" name="tmpSize" />
      <declaration type="Array1D<BigDecimal>" name="retVal" />
      <declaration type="BigDecimal" name="tmpVal" />
      <scope startLine="486" endLine="494">
        <scope startLine="489" endLine="491" />
        <scope startLine="491" endLine="493" />
      </scope>
    </method>
    <method type="int" name="indexOf" startLine="499" endLine="501" />
    <javadoc>
      <param>index General, global, variable index</param>
      <return>Local index among the positive variables. -1 indicates the variable is not a positive variable.</return>
    </javadoc>
    <method type="int" name="indexOfFreeVariable" startLine="507" endLine="509" />
    <method type="int" name="indexOfFreeVariable" startLine="511" endLine="513" />
    <javadoc>
      <param>index General, global, variable index</param>
      <return>Local index among the integer variables. -1 indicates the variable is not an integer variable.</return>
    </javadoc>
    <method type="int" name="indexOfIntegerVariable" startLine="519" endLine="521" />
    <method type="int" name="indexOfIntegerVariable" startLine="523" endLine="525" />
    <javadoc>
      <param>index General, global, variable index</param>
      <return>Local index among the negative variables. -1 indicates the variable is not a negative variable.</return>
    </javadoc>
    <method type="int" name="indexOfNegativeVariable" startLine="531" endLine="533" />
    <method type="int" name="indexOfNegativeVariable" startLine="535" endLine="537" />
    <javadoc>
      <param>index General, global, variable index</param>
      <return>Local index among the positive variables. -1 indicates the variable is not a positive variable.</return>
    </javadoc>
    <method type="int" name="indexOfPositiveVariable" startLine="543" endLine="545" />
    <method type="int" name="indexOfPositiveVariable" startLine="547" endLine="549" />
    <method type="boolean" name="isAnyExpressionQuadratic" startLine="551" endLine="568">
      <declaration type="boolean" name="retVal" />
      <declaration type="String" name="tmpType" />
      <scope startLine="562" endLine="565" />
      <comment>final int tmpLength = myExpressions.size();</comment>
      <comment>for (int i = 0; !retVal && (i < tmpLength); i++) {</comment>
      <comment>retVal |= myExpressions.get(i).hasQuadratic();</comment>
      <comment>}</comment>
    </method>
    <method type="boolean" name="isAnyVariableFixed" startLine="570" endLine="572" />
    <method type="boolean" name="isAnyVariableInteger" startLine="574" endLine="585">
      <declaration type="boolean" name="retVal" />
      <declaration type="int" name="tmpLength" />
      <scope startLine="580" endLine="582" />
    </method>
    <method type="boolean" name="isWorkCopy" startLine="587" endLine="589" />
    <method type="void" name="limitObjective" startLine="591" endLine="600">
      <declaration type="Expression" name="tmpEpression" />
      <scope startLine="594" endLine="597" />
    </method>
    <method type="void" name="markActiveInequalityConstraints" startLine="602" endLine="615">
      <scope startLine="604" endLine="606" />
      <scope startLine="608" endLine="610" />
      <scope startLine="612" endLine="614" />
    </method>
    <method type="Optimisation.Result" name="maximise" startLine="617" endLine="624">
      <declaration type="Result" name="tmpSolverResult" />
    </method>
    <method type="Optimisation.Result" name="minimise" startLine="626" endLine="633">
      <declaration type="Result" name="tmpSolverResult" />
    </method>
    <method type="ExpressionsBasedModel" name="relax" startLine="635" endLine="644">
      <declaration type="ExpressionsBasedModel" name="retVal" />
      <scope startLine="639" endLine="641" />
    </method>
    <javadoc>
      <text>* Linear equality constrained expressions.</text>
    </javadoc>
    <method type="List<Expression>" name="selectExpressionsLinearEquality" startLine="649" endLine="660">
      <declaration type="List<Expression>" name="retVal" />
      <scope startLine="653" endLine="657">
        <scope startLine="654" endLine="656" />
      </scope>
    </method>
    <javadoc>
      <text>* Linear lower constrained expressions.</text>
    </javadoc>
    <method type="List<Expression>" name="selectExpressionsLinearLower" startLine="665" endLine="676">
      <declaration type="List<Expression>" name="retVal" />
      <scope startLine="669" endLine="673">
        <scope startLine="670" endLine="672" />
      </scope>
    </method>
    <javadoc>
      <text>* Linear upper constrained expressions.</text>
    </javadoc>
    <method type="List<Expression>" name="selectExpressionsLinearUpper" startLine="681" endLine="692">
      <declaration type="List<Expression>" name="retVal" />
      <scope startLine="685" endLine="689">
        <scope startLine="686" endLine="688" />
      </scope>
    </method>
    <javadoc>
      <text>* Quadratic (and/or compound) equality constrained expressions.</text>
    </javadoc>
    <method type="List<Expression>" name="selectExpressionsQuadraticEquality" startLine="697" endLine="708">
      <declaration type="List<Expression>" name="retVal" />
      <scope startLine="701" endLine="705">
        <scope startLine="702" endLine="704" />
      </scope>
    </method>
    <javadoc>
      <text>* Quadratic (and/or compound) lower constrained expressions.</text>
    </javadoc>
    <method type="List<Expression>" name="selectExpressionsQuadraticLower" startLine="713" endLine="724">
      <declaration type="List<Expression>" name="retVal" />
      <scope startLine="717" endLine="721">
        <scope startLine="718" endLine="720" />
      </scope>
    </method>
    <javadoc>
      <text>* Quadratic (and/or compound) upper constrained expressions.</text>
    </javadoc>
    <method type="List<Expression>" name="selectExpressionsQuadraticUpper" startLine="729" endLine="740">
      <declaration type="List<Expression>" name="retVal" />
      <scope startLine="733" endLine="737">
        <scope startLine="734" endLine="736" />
      </scope>
    </method>
    <method type="List<Variable>" name="selectVariablesFreeLower" startLine="742" endLine="753">
      <declaration type="List<Variable>" name="retVal" />
      <scope startLine="746" endLine="750">
        <scope startLine="747" endLine="749" />
      </scope>
    </method>
    <method type="List<Variable>" name="selectVariablesFreeUpper" startLine="755" endLine="766">
      <declaration type="List<Variable>" name="retVal" />
      <scope startLine="759" endLine="763">
        <scope startLine="760" endLine="762" />
      </scope>
    </method>
    <method type="List<Variable>" name="selectVariablesNegativeLower" startLine="768" endLine="779">
      <declaration type="List<Variable>" name="retVal" />
      <scope startLine="772" endLine="776">
        <scope startLine="773" endLine="775" />
      </scope>
    </method>
    <method type="List<Variable>" name="selectVariablesNegativeUpper" startLine="781" endLine="792">
      <declaration type="List<Variable>" name="retVal" />
      <scope startLine="785" endLine="789">
        <scope startLine="786" endLine="788" />
      </scope>
    </method>
    <method type="List<Variable>" name="selectVariablesPositiveLower" startLine="794" endLine="805">
      <declaration type="List<Variable>" name="retVal" />
      <scope startLine="798" endLine="802">
        <scope startLine="799" endLine="801" />
      </scope>
    </method>
    <method type="List<Variable>" name="selectVariablesPositiveUpper" startLine="807" endLine="818">
      <declaration type="List<Variable>" name="retVal" />
      <scope startLine="811" endLine="815">
        <scope startLine="812" endLine="814" />
      </scope>
    </method>
    <method type="Optimisation.Result" name="solve" startLine="820" endLine="867">
      <declaration type="Optimisation.Result" name="retVal" />
      <scope startLine="826" endLine="835">
        <declaration type="Access1D<BigDecimal>" name="tmpSolution" />
        <declaration type="double" name="tmpValue" />
        <declaration type="State" name="tmpState" />
      </scope>
      <scope startLine="835" endLine="854">
        <declaration type="Access1D<BigDecimal>" name="tmpSolution" />
        <scope startLine="839" endLine="846">
          <declaration type="double" name="tmpValue" />
          <declaration type="State" name="tmpState" />
        </scope>
        <scope startLine="846" endLine="852">
          <declaration type="double" name="tmpValue" />
          <declaration type="State" name="tmpState" />
        </scope>
      </scope>
      <scope startLine="854" endLine="864">
        <declaration type="GenericSolver" name="tmpSolver" />
        <comment>if (options.validate && retVal.getState().isFeasible() && !this.validate(retVal)) {</comment>
        <comment>retVal = new Optimisation.Result(Optimisation.State.FAILED, retVal);</comment>
        <comment>}</comment>
      </scope>
    </method>
    <method type="String" name="toString" startLine="870" endLine="885">
      <declaration type="StringBuilder" name="retVal" />
      <scope startLine="874" endLine="877" />
      <scope startLine="879" endLine="882" />
    </method>
    <method type="boolean" name="validate" startLine="887" endLine="900">
      <declaration type="boolean" name="retVal" />
      <scope startLine="891" endLine="893" />
      <scope startLine="895" endLine="897" />
    </method>
    <method type="boolean" name="validate" startLine="902" endLine="904" />
    <method type="boolean" name="validate" startLine="906" endLine="921">
      <declaration type="int" name="tmpSize" />
      <declaration type="boolean" name="retVal" />
      <scope startLine="912" endLine="914" />
      <scope startLine="916" endLine="918" />
    </method>
    <method type="boolean" name="validate" startLine="923" endLine="925" />
    <method type="void" name="categoriseVariables" startLine="927" endLine="982">
      <declaration type="int" name="tmpLength" />
      <scope startLine="947" endLine="976">
        <declaration type="Variable" name="tmpVariable" />
        <scope startLine="951" endLine="956" />
        <scope startLine="956" endLine="975">
          <scope startLine="961" endLine="964" />
          <scope startLine="966" endLine="969" />
          <scope startLine="971" endLine="974" />
        </scope>
      </scope>
    </method>
    <method type="Optimisation.Result" name="handleResult" startLine="984" endLine="1005">
      <declaration type="NumberContext" name="tmpSolutionContext" />
      <declaration type="int" name="tmpSize" />
      <scope startLine="989" endLine="994">
        <declaration type="Variable" name="tmpVariable" />
        <scope startLine="991" endLine="993" />
      </scope>
      <declaration type="Access1D<BigDecimal>" name="tmpSolution" />
      <declaration type="Optimisation.State" name="tmpState" />
      <declaration type="double" name="tmpValue" />
      <scope startLine="1000" endLine="1002">
        <comment>TODO && this.validate(tmpSolution, options.slack)</comment>
      </scope>
    </method>
    <method type="void" name="flushCaches" startLine="1007" endLine="1025">
      <scope startLine="1009" endLine="1012" />
    </method>
    <method type="boolean" name="addFixedVariable" startLine="1027" endLine="1029" />
    <method type="boolean" name="isFixed" startLine="1031" endLine="1033" />
    <method type="boolean" name="isInfeasible" startLine="1035" endLine="1042">
      <scope startLine="1036" endLine="1040">
        <scope startLine="1037" endLine="1039" />
      </scope>
    </method>
    <method type="void" name="presolve" startLine="1044" endLine="1049" />
  </class>
</source>
