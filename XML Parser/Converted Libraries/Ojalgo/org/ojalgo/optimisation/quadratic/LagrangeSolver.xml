<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.optimisation.quadratic">
  <import name="static org.ojalgo.constant.PrimitiveMath.*" />
  <import name="static org.ojalgo.function.PrimitiveFunction.*" />
  <import name="org.ojalgo.function.UnaryFunction" />
  <import name="org.ojalgo.function.aggregator.Aggregator" />
  <import name="org.ojalgo.function.aggregator.AggregatorFunction" />
  <import name="org.ojalgo.function.aggregator.PrimitiveAggregator" />
  <import name="org.ojalgo.matrix.decomposition.*" />
  <import name="org.ojalgo.matrix.store.AboveBelowStore" />
  <import name="org.ojalgo.matrix.store.LeftRightStore" />
  <import name="org.ojalgo.matrix.store.MatrixStore" />
  <import name="org.ojalgo.matrix.store.PhysicalStore" />
  <import name="org.ojalgo.matrix.store.ZeroStore" />
  <import name="org.ojalgo.optimisation.ExpressionsBasedModel" />
  <import name="org.ojalgo.optimisation.Optimisation" />
  <class name="LagrangeSolver" extends="QuadraticSolver" startLine="40">
    <javadoc>
      <author>apete</author>
    </javadoc>
    <declaration type="LU<Double>" name="myLU" />
    <declaration type="SingularValue<Double>" name="mySingularValue" />
    <method type="constructor" name="LagrangeSolver" startLine="48" endLine="50" />
    <method type="void" name="extractSolution" startLine="52" endLine="66">
      <declaration type="MatrixStore<Double>" name="tmpSolutionX" />
      <declaration type="int" name="tmpCountVariables" />
      <declaration type="int" name="tmpCountEqualityConstraints" />
      <scope startLine="59" endLine="61" />
      <scope startLine="63" endLine="65" />
    </method>
    <method type="Builder" name="makeBuilder" startLine="68" endLine="116">
      <declaration type="Builder" name="tmpBuilder" />
      <declaration type="MatrixStore<Double>" name="tmpQ" />
      <declaration type="MatrixStore<Double>" name="tmpC" />
      <scope startLine="74" endLine="87">
        <declaration type="PhysicalStore<Double>" name="tmpCopyQ" />
        <declaration type="double" name="tmpLargest" />
        <declaration type="double" name="tmpRelativelySmall" />
        <declaration type="double" name="tmpPracticalLimit" />
        <declaration type="double" name="tmpSmallToAdd" />
        <declaration type="UnaryFunction<Double>" name="tmpFunc" />
      </scope>
      <scope startLine="89" endLine="111">
        <declaration type="MatrixStore<Double>" name="tmpAE" />
        <declaration type="MatrixStore<Double>" name="tmpBE" />
        <declaration type="int" name="tmpZeroSize" />
        <declaration type="MatrixStore<Double>" name="tmpUpperLeftAE" />
        <declaration type="MatrixStore<Double>" name="tmpUpperRightAE" />
        <declaration type="MatrixStore<Double>" name="tmpLowerLefAE" />
        <declaration type="MatrixStore<Double>" name="tmpLowerRightAE" />
        <declaration type="MatrixStore<Double>" name="tmpSubAE" />
        <declaration type="MatrixStore<Double>" name="tmpUpperBE" />
        <declaration type="MatrixStore<Double>" name="tmpLowerBE" />
        <declaration type="MatrixStore<Double>" name="tmpSubBE" />
      </scope>
      <scope startLine="111" endLine="114" />
    </method>
    <method type="void" name="performIteration" startLine="118" endLine="185">
      <declaration type="MatrixStore<Double>" name="tmpAE" />
      <declaration type="MatrixStore<Double>" name="tmpBE" />
      <declaration type="DecompositionStore<Double>" name="tmpX" />
      <scope startLine="127" endLine="139">
        <scope startLine="129" endLine="131" />
        <declaration type="MatrixStore<Double>" name="tmpSolution" />
        <scope startLine="135" endLine="137" />
      </scope>
      <scope startLine="139" endLine="184">
        <scope startLine="141" endLine="143" />
        <scope startLine="147" endLine="173">
          <scope startLine="149" endLine="151" />
          <declaration type="MatrixStore<Double>" name="tmpSolution" />
          <scope startLine="155" endLine="157" />
          <declaration type="AggregatorFunction<Double>" name="tmpFrobNormCalc" />
          <declaration type="MatrixStore<Double>" name="tmpSlack" />
          <scope startLine="163" endLine="171">
            <scope startLine="165" endLine="167" />
          </scope>
        </scope>
        <scope startLine="173" endLine="183">
          <scope startLine="175" endLine="177" />
        </scope>
        <comment>throw new IllegalArgumentException("Couldn't solve this problem!");</comment>
      </scope>
    </method>
    <method type="boolean" name="initialise" startLine="188" endLine="192" />
    <method type="boolean" name="needsAnotherIteration" startLine="195" endLine="197" />
    <method type="void" name="performIteration" startLine="200" endLine="230">
      <declaration type="Builder" name="tmpBuilder" />
      <scope startLine="206" endLine="212" />
      <scope startLine="212" endLine="229">
        <scope startLine="218" endLine="224" />
        <scope startLine="224" endLine="228" />
      </scope>
    </method>
    <method type="boolean" name="validate" startLine="233" endLine="283">
      <declaration type="boolean" name="retVal" />
      <scope startLine="238" endLine="276">
        <declaration type="MatrixStore<Double>" name="tmpQ" />
        <declaration type="Cholesky<Double>" name="tmpCholesky" />
        <scope startLine="245" endLine="260">
          <declaration type="Eigenvalue<Double>" name="tmpEigenvalue" />
          <declaration type="MatrixStore<Double>" name="tmpD" />
          <scope startLine="253" endLine="258">
            <scope startLine="254" endLine="257" />
          </scope>
        </scope>
        <scope startLine="262" endLine="274" />
        <comment>Not positive definite. Check if at least positive semidefinite.</comment>
        <comment>Q ok, check AE</comment>
        <comment>final MatrixStore<Double> tmpAE = this.getAE();</comment>
        <comment />
        <comment>final LU<Double> tmpLU = LUDecomposition.makePrimitive();</comment>
        <comment>tmpLU.compute(tmpAE);</comment>
        <comment />
        <comment>if (tmpLU.getRank() != tmpAE.getRowDim()) {</comment>
        <comment>retVal = false;</comment>
        <comment>this.setState(State.INVALID);</comment>
        <comment>}</comment>
      </scope>
      <scope startLine="276" endLine="280" />
    </method>
  </class>
</source>
