<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.optimisation.quadratic">
  <import name="static org.ojalgo.function.PrimitiveFunction.*" />
  <import name="java.math.BigDecimal" />
  <import name="java.util.List" />
  <import name="java.util.Set" />
  <import name="org.ojalgo.array.Array1D" />
  <import name="org.ojalgo.function.BinaryFunction" />
  <import name="org.ojalgo.function.UnaryFunction" />
  <import name="org.ojalgo.matrix.store.MatrixStore" />
  <import name="org.ojalgo.matrix.store.PhysicalStore" />
  <import name="org.ojalgo.matrix.store.PrimitiveDenseStore" />
  <import name="org.ojalgo.optimisation.BaseSolver" />
  <import name="org.ojalgo.optimisation.Expression" />
  <import name="org.ojalgo.optimisation.Expression.Index" />
  <import name="org.ojalgo.optimisation.ExpressionsBasedModel" />
  <import name="org.ojalgo.optimisation.ModelEntity" />
  <import name="org.ojalgo.optimisation.Optimisation" />
  <import name="org.ojalgo.optimisation.Variable" />
  <import name="org.ojalgo.type.IndexSelector" />
  <class name="QuadraticSolver" extends="BaseSolver" startLine="45">
    <javadoc>
      <text>* QuadraticSolver solves optimisation problems of the form:
 * <p>
 * min 1/2 [X]<sup>T</sup>[Q][X] - [C]<sup>T</sup>[X]<br>
 * when [AE][X] == [BE]<br>
 * and [AI][X] <= [BI]
 * </p>
 * <p>
 * The matrix [Q] is assumed to be symmetric (it must be made that way) and:
 * <ul>
 * <li>If [Q] is positive semidefinite, then the objective function is convex: In this case the quadratic program has a
 * global minimizer if there exists some feasible vector [X] (satisfying the constraints) and if the objective function
 * is bounded below on the feasible region.</li>
 * <li>If [Q] is positive definite and the problem has a feasible solution, then the global minimizer is unique.</li>
 * </ul>
 * </p>
 * <p>
 * You construct instances by using the {@linkplain Builder} class. It will return an appropriate subclass for you. It's
 * recommended that you first create a {@linkplain ExpressionsBasedModel} and feed that to the {@linkplain Builder}.
 * Alternatively you can directly call {@linkplain ExpressionsBasedModel#getDefaultSolver()} or even{@linkplain ExpressionsBasedModel#minimise()} or {@linkplain ExpressionsBasedModel#maximise()} on the model.
 * </p></text>
      <author>apete</author>
    </javadoc>
    <class name="Builder" extends="AbstractBuilder<QuadraticSolver.Builder,QuadraticSolver>" startLine="72">
      <method type="constructor" name="Builder" startLine="74" endLine="76" />
      <method type="constructor" name="Builder" startLine="78" endLine="80" />
      <method type="constructor" name="Builder" startLine="82" endLine="87" />
      <method type="constructor" name="Builder" startLine="89" endLine="91" />
      <method type="constructor" name="Builder" startLine="93" endLine="95" />
      <method type="constructor" name="Builder" startLine="97" endLine="99" />
      <method type="QuadraticSolver" name="build" startLine="102" endLine="115">
        <declaration type="ExpressionsBasedModel" name="tmpModel" />
        <scope startLine="106" endLine="108" />
        <scope startLine="108" endLine="111">
          <comment>return new NullspaceSolver(tmpModel, options, this);</comment>
        </scope>
        <scope startLine="111" endLine="113" />
      </method>
      <method type="QuadraticSolver.Builder" name="equalities" startLine="118" endLine="120" />
      <method type="QuadraticSolver.Builder" name="inequalities" startLine="123" endLine="125" />
      <method type="QuadraticSolver.Builder" name="inequalities" startLine="128" endLine="130" />
      <method type="Builder" name="objective" startLine="133" endLine="135" />
      <declaration type="PhysicalStore.Factory<Double,PrimitiveDenseStore>" name="FACTORY" />
      <method type="QuadraticSolver" name="make" startLine="141" endLine="146">
        <declaration type="QuadraticSolver.Builder" name="tmpBuilder" />
      </method>
      <method type="void" name="copy" startLine="149" endLine="317">
        <declaration type="List<Variable>" name="tmpFreeVariables" />
        <declaration type="Set<Index>" name="tmpFixedVariables" />
        <declaration type="int" name="tmpFreeVarDim" />
        <declaration type="Array1D<Double>" name="tmpCurrentSolution" />
        <scope startLine="156" endLine="161">
          <declaration type="BigDecimal" name="tmpValue" />
          <scope startLine="158" endLine="160" />
        </scope>
        <declaration type="Optimisation.Result" name="tmpKickStarter" />
        <declaration type="List<Expression>" name="tmpEqExpr" />
        <declaration type="int" name="tmpEqExprDim" />
        <scope startLine="169" endLine="188">
          <declaration type="PhysicalStore<Double>" name="tmpAE" />
          <declaration type="PhysicalStore<Double>" name="tmpBE" />
          <scope startLine="174" endLine="185">
            <declaration type="Expression" name="tmpExpression" />
            <scope startLine="178" endLine="183">
              <declaration type="int" name="tmpIndex" />
              <scope startLine="180" endLine="182" />
            </scope>
          </scope>
        </scope>
        <declaration type="Expression" name="tmpObjExpr" />
        <declaration type="PhysicalStore<Double>" name="tmpQ" />
        <scope startLine="195" endLine="209">
          <declaration type="BinaryFunction<Double>" name="tmpBaseFunc" />
          <declaration type="UnaryFunction<Double>" name="tmpModifier" />
          <scope startLine="200" endLine="208">
            <declaration type="int" name="tmpRow" />
            <declaration type="int" name="tmpColumn" />
            <scope startLine="203" endLine="207" />
          </scope>
        </scope>
        <declaration type="PhysicalStore<Double>" name="tmpC" />
        <scope startLine="212" endLine="229">
          <scope startLine="214" endLine="221">
            <scope startLine="215" endLine="220">
              <declaration type="int" name="tmpIndex" />
              <scope startLine="217" endLine="219" />
            </scope>
          </scope>
          <scope startLine="221" endLine="228">
            <scope startLine="222" endLine="227">
              <declaration type="int" name="tmpIndex" />
              <scope startLine="224" endLine="226" />
            </scope>
          </scope>
        </scope>
        <declaration type="List<Expression>" name="tmpUpExpr" />
        <declaration type="int" name="tmpUpExprDim" />
        <declaration type="List<Variable>" name="tmpUpVar" />
        <declaration type="int" name="tmpUpVarDim" />
        <declaration type="List<Expression>" name="tmpLoExpr" />
        <declaration type="int" name="tmpLoExprDim" />
        <declaration type="List<Variable>" name="tmpLoVar" />
        <declaration type="int" name="tmpLoVarDim" />
        <scope startLine="245" endLine="314">
          <declaration type="ModelEntity<?>[]" name="tmpEntities" />
          <declaration type="PhysicalStore<Double>" name="tmpUAI" />
          <declaration type="PhysicalStore<Double>" name="tmpUBI" />
          <scope startLine="252" endLine="264">
            <scope startLine="253" endLine="263">
              <declaration type="Expression" name="tmpExpression" />
              <scope startLine="255" endLine="260">
                <declaration type="int" name="tmpIndex" />
                <scope startLine="257" endLine="259" />
              </scope>
            </scope>
          </scope>
          <scope startLine="266" endLine="273">
            <scope startLine="267" endLine="272">
              <declaration type="Variable" name="tmpVariable" />
            </scope>
          </scope>
          <declaration type="PhysicalStore<Double>" name="tmpLAI" />
          <declaration type="PhysicalStore<Double>" name="tmpLBI" />
          <scope startLine="278" endLine="290">
            <scope startLine="279" endLine="289">
              <declaration type="Expression" name="tmpExpression" />
              <scope startLine="281" endLine="286">
                <declaration type="int" name="tmpIndex" />
                <scope startLine="283" endLine="285" />
              </scope>
            </scope>
          </scope>
          <scope startLine="292" endLine="299">
            <scope startLine="293" endLine="298">
              <declaration type="Variable" name="tmpVariable" />
            </scope>
          </scope>
          <declaration type="MatrixStore<Double>" name="tmpAI" />
          <declaration type="MatrixStore<Double>" name="tmpBI" />
          <declaration type="IndexSelector" name="tmpSelector" />
          <scope startLine="307" endLine="311">
            <scope startLine="308" endLine="310" />
          </scope>
        </scope>
        <comment>AE & BE</comment>
        <comment>Q & C</comment>
        <comment>AI & BI</comment>
      </method>
      <method type="constructor" name="QuadraticSolver" startLine="319" endLine="321" />
      <method type="Optimisation.Result" name="solve" startLine="323" endLine="363">
        <scope startLine="325" endLine="350">
          <declaration type="boolean" name="tmpContinue" />
          <scope startLine="329" endLine="331" />
          <scope startLine="333" endLine="335" />
          <scope startLine="337" endLine="348">
            <scope startLine="341" endLine="347" />
          </scope>
        </scope>
        <scope startLine="350" endLine="360">
          <scope startLine="352" endLine="354" />
        </scope>
      </method>
      <method type="MatrixStore<Double>" name="extractSolution" startLine="366" endLine="395">
        <declaration type="ExpressionsBasedModel" name="tmpModel" />
        <scope startLine="370" endLine="391">
          <declaration type="List<Variable>" name="tmpFreeVariables" />
          <declaration type="Set<Index>" name="tmpFixedVariables" />
          <declaration type="PrimitiveDenseStore" name="retVal" />
          <scope startLine="377" endLine="379" />
          <declaration type="MatrixStore<Double>" name="tmpSolutionX" />
          <scope startLine="382" endLine="387">
            <declaration type="Variable" name="tmpVariable" />
            <declaration type="int" name="tmpIndexOf" />
          </scope>
        </scope>
        <scope startLine="391" endLine="394" />
      </method>
      <method name="performIteration" type="void" startLine="397" endLine="397" />
      <method type="MatrixStore<Double>" name="getSolutionLE" startLine="399" endLine="401" />
      <method type="MatrixStore<Double>" name="getSolutionLI" startLine="403" endLine="405" />
      <method type="MatrixStore<Double>" name="getSolutionX" startLine="407" endLine="409" />
    </class>
  </class>
</source>
