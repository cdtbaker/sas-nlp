<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.matrix.decomposition.task">
  <import name="java.math.BigDecimal" />
  <import name="org.ojalgo.access.Access2D" />
  <import name="org.ojalgo.matrix.MatrixUtils" />
  <import name="org.ojalgo.matrix.decomposition.CholeskyDecomposition" />
  <import name="org.ojalgo.matrix.decomposition.DecompositionStore" />
  <import name="org.ojalgo.matrix.decomposition.LUDecomposition" />
  <import name="org.ojalgo.matrix.decomposition.QRDecomposition" />
  <import name="org.ojalgo.matrix.decomposition.SingularValueDecomposition" />
  <import name="org.ojalgo.matrix.store.MatrixStore" />
  <import name="org.ojalgo.scalar.ComplexNumber" />
  <interface name="SolverTask" startLine="36">
    <implements name="DecompositionTask<N>" />
    <class name="Factory" startLine="38">
      <method type="SolverTask<N>" name="make" startLine="40" endLine="42" />
      <method name="make" type="SolverTask<N>" startLine="44" endLine="44" />
      <method type="SolverTask<BigDecimal>" name="make" startLine="51" endLine="61">
        <scope startLine="52" endLine="54" />
        <scope startLine="54" endLine="56" />
        <scope startLine="56" endLine="58" />
        <scope startLine="58" endLine="60" />
      </method>
      <declaration type="Factory<BigDecimal>" name="BIG" />
      <method type="SolverTask<ComplexNumber>" name="make" startLine="69" endLine="79">
        <scope startLine="70" endLine="72" />
        <scope startLine="72" endLine="74" />
        <scope startLine="74" endLine="76" />
        <scope startLine="76" endLine="78" />
      </method>
      <declaration type="Factory<ComplexNumber>" name="COMPLEX" />
      <method type="SolverTask<Double>" name="make" startLine="86" endLine="128">
        <scope startLine="87" endLine="102">
          <declaration type="long" name="tmpDim" />
          <scope startLine="89" endLine="91" />
          <scope startLine="91" endLine="93" />
          <scope startLine="93" endLine="95" />
          <scope startLine="95" endLine="97" />
          <scope startLine="97" endLine="99" />
          <scope startLine="99" endLine="101" />
        </scope>
        <scope startLine="102" endLine="127">
          <declaration type="long" name="tmpDim" />
          <scope startLine="104" endLine="118">
            <scope startLine="105" endLine="107" />
            <scope startLine="107" endLine="109" />
            <scope startLine="109" endLine="111" />
            <scope startLine="111" endLine="113" />
            <scope startLine="113" endLine="115" />
            <scope startLine="115" endLine="117" />
          </scope>
          <scope startLine="118" endLine="124">
            <scope startLine="119" endLine="121" />
            <scope startLine="121" endLine="123" />
          </scope>
          <scope startLine="124" endLine="126" />
        </scope>
      </method>
      <declaration type="Factory<Double>" name="PRIMITIVE" />
      <method name="preallocate" type="DecompositionStore<N>" startLine="132" endLine="145" />
      <javadoc>
        <text>* <p>
 * Implementiong this method is optional.
 * </p>
 * Will create a {@linkplain DecompositionStore} instance suitable for use with{@link #solve(Access2D,DecompositionStore)}. When solving an equation system [A][X]=[B] ([mxn][nxb]=[mxb]) the
 * preallocated memory/matrix will typically be either mxb or nxb (if A is square then there is no doubt).</text>
        <param>templateBody</param>
        <param>templateRHS</param>
        <return />
        <throws>UnsupportedOperationException When/if this feature is not implemented</throws>
      </javadoc>
      <method name="solve" type="MatrixStore<N>" startLine="147" endLine="150" />
      <javadoc>
        <text>* [A][X]=[B] or [this][return]=[aRHS]</text>
      </javadoc>
      <method name="solve" type="MatrixStore<N>" startLine="152" endLine="170" />
      <javadoc>
        <text>* <p>
 * Implementiong this method is optional.
 * </p>
 * <p>
 * Exactly how a specific implementation makes use of <code>preallocated</code> is not specified by this interface.
 * It must be documented for each implementation.
 * </p>
 * <p>
 * Should produce the same results as calling {@link #solve(Access2D)}.
 * </p></text>
        <param>rhs The Right Hand Side, wont be modfied</param>
        <param>preallocated Preallocated memory for the results, possibly some intermediate results. You must assume this
 * is modified, but you cannot assume it will contain the full/final/correct solution.</param>
        <return>The solution</return>
        <throws>UnsupportedOperationException When/if this feature is not implemented</throws>
      </javadoc>
    </class>
  </interface>
</source>
