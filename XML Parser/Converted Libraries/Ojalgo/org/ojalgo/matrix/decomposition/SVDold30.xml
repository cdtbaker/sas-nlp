<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.matrix.decomposition">
  <import name="java.math.BigDecimal" />
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="java.util.concurrent.Callable" />
  <import name="java.util.concurrent.ExecutionException" />
  <import name="java.util.concurrent.Future" />
  <import name="org.ojalgo.ProgrammingError" />
  <import name="org.ojalgo.access.Access2D" />
  <import name="org.ojalgo.array.Array1D" />
  <import name="org.ojalgo.array.Array2D" />
  <import name="org.ojalgo.concurrent.DaemonPoolExecutor" />
  <import name="org.ojalgo.constant.BigMath" />
  <import name="org.ojalgo.constant.PrimitiveMath" />
  <import name="org.ojalgo.function.BigFunction" />
  <import name="org.ojalgo.function.ComplexFunction" />
  <import name="org.ojalgo.function.PrimitiveFunction" />
  <import name="org.ojalgo.matrix.MatrixUtils" />
  <import name="org.ojalgo.matrix.store.BigDenseStore" />
  <import name="org.ojalgo.matrix.store.ComplexDenseStore" />
  <import name="org.ojalgo.matrix.store.MatrixStore" />
  <import name="org.ojalgo.matrix.store.PhysicalStore" />
  <import name="org.ojalgo.matrix.store.PrimitiveDenseStore" />
  <import name="org.ojalgo.matrix.transformation.Rotation" />
  <import name="org.ojalgo.scalar.ComplexNumber" />
  <import name="org.ojalgo.scalar.Scalar" />
  <import name="org.ojalgo.type.TypeUtils" />
  <import name="org.ojalgo.type.context.NumberContext" />
  <class name="SVDold30" extends="SingularValueDecomposition<N>" startLine="53">
    <javadoc>
      <text>* Samma som orginalet, but without QR. Instead Householder directly. Wasn't faster. Try going directly to bidiagonal
 * instead. Based SVDold2, but with GenericRotaion replaced with Rotation.</text>
      <author>apete</author>
    </javadoc>
    <class name="Big" extends="SVDold30<BigDecimal>" startLine="61">
      <method type="constructor" name="Big" startLine="63" endLine="65" />
      <method type="Rotation<BigDecimal>[]" name="rotations" startLine="69" endLine="116">
        <declaration type="BigDecimal" name="a00" />
        <declaration type="BigDecimal" name="a01" />
        <declaration type="BigDecimal" name="a10" />
        <declaration type="BigDecimal" name="a11" />
        <declaration type="BigDecimal" name="x" />
        <declaration type="BigDecimal" name="y" />
        <declaration type="BigDecimal" name="t" />
        <declaration type="BigDecimal" name="cg" />
        <declaration type="BigDecimal" name="sg" />
        <scope startLine="85" endLine="88" />
        <scope startLine="88" endLine="91" />
        <scope startLine="91" endLine="95">
          <comment>cot</comment>
        </scope>
        <scope startLine="95" endLine="99">
          <comment>tan</comment>
        </scope>
        <declaration type="BigDecimal" name="b00" />
        <declaration type="BigDecimal" name="b11" />
        <declaration type="BigDecimal" name="b2" />
        <declaration type="BigDecimal" name="cj" />
        <declaration type="BigDecimal" name="sj" />
        <comment>tan, cot or something temporary</comment>
        <comment>Symmetrise - Givens</comment>
        <comment>cos Givens</comment>
        <comment>sin Givens</comment>
        <comment>b01 + b10</comment>
        <comment>Annihilate - Jacobi</comment>
        <comment>Cos Jacobi</comment>
        <comment>Sin Jacobi</comment>
        <comment>Jacobi</comment>
        <comment>Givens - Jacobi</comment>
      </method>
      <class name="Complex" extends="SVDold30<ComplexNumber>" startLine="120">
        <method type="constructor" name="Complex" startLine="122" endLine="124" />
        <method type="Rotation<ComplexNumber>[]" name="rotations" startLine="128" endLine="175">
          <declaration type="ComplexNumber" name="a00" />
          <declaration type="ComplexNumber" name="a01" />
          <declaration type="ComplexNumber" name="a10" />
          <declaration type="ComplexNumber" name="a11" />
          <declaration type="ComplexNumber" name="x" />
          <declaration type="ComplexNumber" name="y" />
          <declaration type="ComplexNumber" name="t" />
          <declaration type="ComplexNumber" name="cg" />
          <declaration type="ComplexNumber" name="sg" />
          <scope startLine="144" endLine="147" />
          <scope startLine="147" endLine="150" />
          <scope startLine="150" endLine="154">
            <comment>cot</comment>
          </scope>
          <scope startLine="154" endLine="158">
            <comment>tan</comment>
          </scope>
          <declaration type="ComplexNumber" name="b00" />
          <declaration type="ComplexNumber" name="b11" />
          <declaration type="ComplexNumber" name="b2" />
          <declaration type="ComplexNumber" name="cj" />
          <declaration type="ComplexNumber" name="sj" />
          <comment>tan, cot or something temporary</comment>
          <comment>Symmetrise - Givens</comment>
          <comment>cos Givens</comment>
          <comment>sin Givens</comment>
          <comment>b01 + b10</comment>
          <comment>Annihilate - Jacobi</comment>
          <comment>Cos Jacobi</comment>
          <comment>Sin Jacobi</comment>
          <comment>Jacobi</comment>
          <comment>Givens - Jacobi</comment>
        </method>
        <class name="Primitive" extends="SVDold30<Double>" startLine="179">
          <method type="constructor" name="Primitive" startLine="181" endLine="183" />
          <method type="Rotation<Double>[]" name="rotations" startLine="186" endLine="233">
            <declaration type="double" name="a00" />
            <declaration type="double" name="a01" />
            <declaration type="double" name="a10" />
            <declaration type="double" name="a11" />
            <declaration type="double" name="x" />
            <declaration type="double" name="y" />
            <declaration type="double" name="t" />
            <declaration type="double" name="cg" />
            <declaration type="double" name="sg" />
            <scope startLine="202" endLine="205" />
            <scope startLine="205" endLine="208" />
            <scope startLine="208" endLine="212">
              <comment>cot</comment>
            </scope>
            <scope startLine="212" endLine="216">
              <comment>tan</comment>
            </scope>
            <declaration type="double" name="b00" />
            <declaration type="double" name="b11" />
            <declaration type="double" name="b2" />
            <declaration type="double" name="cj" />
            <declaration type="double" name="sj" />
            <comment>tan, cot or something temporary</comment>
            <comment>Symmetrise - Givens</comment>
            <comment>cos Givens</comment>
            <comment>sin Givens</comment>
            <comment>b01 + b10</comment>
            <comment>tan Jacobi</comment>
            <comment>Annihilate - Jacobi</comment>
            <comment>cos Jacobi</comment>
            <comment>sin Jacobi</comment>
            <comment>Jacobi</comment>
            <comment>Givens - Jacobi</comment>
          </method>
          <declaration type="Future<PhysicalStore<N>>" name="myFutureQ1" />
          <declaration type="Future<PhysicalStore<N>>" name="myFutureQ2" />
          <declaration type="List<Rotation<N>>" name="myQ1Rotations" />
          <declaration type="List<Rotation<N>>" name="myQ2Rotations" />
          <method type="constructor" name="SVDold30" startLine="242" endLine="244" />
          <method type="boolean" name="equals" startLine="246" endLine="248" />
          <method type="boolean" name="isOrdered" startLine="250" endLine="252" />
          <method type="boolean" name="isSolvable" startLine="254" endLine="256" />
          <method type="void" name="reset" startLine="259" endLine="268" />
          <method type="MatrixStore<N>" name="solve" startLine="271" endLine="273" />
          <method type="boolean" name="doCompute" startLine="277" endLine="389">
            <declaration type="int" name="tmpMinDim" />
            <declaration type="DecompositionStore<N>" name="tmpSimilar" />
            <declaration type="Rotation<N>[]" name="tmpRotations" />
            <declaration type="N" name="tmpZero" />
            <declaration type="boolean" name="tmpNotAllZeros" />
            <scope startLine="296" endLine="326">
              <declaration type="int" name="i" />
              <scope startLine="302" endLine="325">
                <scope startLine="303" endLine="324">
                  <scope startLine="306" endLine="320" />
                </scope>
              </scope>
              <comment>for (int i0 = tmpMinDim - 1; i0 > 0; i0--) {  Performs much slower</comment>
              <comment>BasicLogger.logDebug("Iter-" + ++iter + " D", myD);</comment>
            </scope>
            <declaration type="double" name="tmpSingularValue" />
            <scope startLine="329" endLine="350">
              <scope startLine="331" endLine="335" />
              <scope startLine="335" endLine="339" />
              <scope startLine="339" endLine="347">
                <declaration type="Scalar<N>" name="tmpDiagSclr" />
                <declaration type="N" name="tmpSignum" />
              </scope>
            </scope>
            <method type="PhysicalStore<N>" name="call" startLine="356" endLine="368">
              <declaration type="PhysicalStore<N>" name="retVal" />
              <declaration type="List<Rotation<N>>" name="tmpRotations" />
              <declaration type="int" name="tmpLimit" />
              <scope startLine="363" endLine="365" />
            </method>
            <method type="PhysicalStore<N>" name="call" startLine="373" endLine="385">
              <declaration type="PhysicalStore<N>" name="retVal" />
              <declaration type="List<Rotation<N>>" name="tmpRotations" />
              <declaration type="int" name="tmpLimit" />
              <scope startLine="380" endLine="382" />
            </method>
            <comment>[Givens - Jacobi, Jacobi]</comment>
            <comment>int iter = 0;</comment>
            <comment>BasicLogger.logDebug(this.getClass().toString());</comment>
            <comment>BasicLogger.logDebug("Init D", myD);</comment>
          </method>
          <method type="DiagonalAccess<N>" name="extractSimilar" startLine="391" endLine="409">
            <declaration type="Array2D<N>" name="tmpArray2D" />
            <declaration type="Array1D<N>" name="tmpMain" />
            <scope startLine="397" endLine="403">
              <declaration type="Array1D<N>" name="tmpSuper" />
            </scope>
            <scope startLine="403" endLine="408">
              <declaration type="Array1D<N>" name="tmpSub" />
            </scope>
          </method>
          <method type="MatrixStore<N>" name="makeD" startLine="412" endLine="423">
            <comment>final int tmpMinDim = this..getMinDim();</comment>
            <comment />
            <comment>final PhysicalStore<N> retVal = this.makeZero(tmpMinDim, tmpMinDim);</comment>
            <comment />
            <comment>for (int ij = 0; ij < tmpMinDim; ij++) {</comment>
            <comment>retVal.set(ij, ij, myD.get(ij, ij));</comment>
            <comment>}</comment>
          </method>
          <method type="MatrixStore<N>" name="makeQ1" startLine="426" endLine="434">
            <scope startLine="427" endLine="429" />
            <scope startLine="429" endLine="431" />
            <scope startLine="431" endLine="433" />
          </method>
          <method type="MatrixStore<N>" name="makeQ2" startLine="437" endLine="445">
            <scope startLine="438" endLine="440" />
            <scope startLine="440" endLine="442" />
            <scope startLine="442" endLine="444" />
          </method>
          <method type="Array1D<Double>" name="makeSingularValues" startLine="448" endLine="451">
            <comment>TODO Auto-generated method stub</comment>
          </method>
          <method name="rotations" type="Rotation<N>[]" startLine="453" endLine="453" />
        </class>
      </class>
    </class>
  </class>
</source>
