<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.matrix.decomposition">
  <import name="org.ojalgo.access.Access2D" />
  <import name="org.ojalgo.array.Array1D" />
  <import name="org.ojalgo.matrix.decomposition.task.DeterminantTask" />
  <import name="org.ojalgo.matrix.store.MatrixStore" />
  <import name="org.ojalgo.scalar.ComplexNumber" />
  <interface name="Eigenvalue" startLine="30">
    <implements name="MatrixDecomposition<N>" />
    <implements name="DeterminantTask<N>" />
    <javadoc>
      <text>* [A] = [V][D][V]<sup>-1</sup> ([A][V] = [V][D])
 * <ul>
 * <li>[A] = any square matrix.</li>
 * <li>[V] = contains the eigenvectors as columns.</li>
 * <li>[D] = a diagonal matrix with the eigenvalues on the diagonal (possibly in blocks).</li>
 * </ul>
 * <p>
 * [A] is normal if [A][A]<sup>H</sup> = [A]<sup>H</sup>[A], and [A] is normal if and only if there exists a unitary
 * matrix [Q] such that [A] = [Q][D][Q]<sup>H</sup>. Hermitian matrices are normal.
 * </p>
 * <p>
 * [V] and [D] can always be calculated in the sense that they will satisfy [A][V] = [V][D], but it is not always
 * possible to calculate [V]<sup>-1</sup>. (Check the rank and/or the condition number of [V] to determine the validity
 * of [V][D][V]<sup>-1</sup>.)
 * </p></text>
      <author>apete</author>
    </javadoc>
    <method name="compute" type="boolean" startLine="51" endLine="56" />
    <javadoc>
      <param>matrix A matrix to decompose</param>
      <param>eigenvaluesOnly No need to calculate eigenvectors</param>
      <return>true/false if the computation succeeded or not</return>
    </javadoc>
    <method name="getD" type="MatrixStore<N>" startLine="58" endLine="70" />
    <javadoc>
      <text>* The only requirements on [D] are that it should contain the eigenvalues and that [A][V] = [V][D]. The ordering of
 * the eigenvalues is not specified.
 * <ul>
 * <li>If [A] is real and symmetric then [D] is (purely) diagonal with real eigenvalues.</li>
 * <li>If [A] is real but not symmetric then [D] is block-diagonal with real eigenvalues in 1-by-1 blocks and
 * complex eigenvalues in 2-by-2 blocks.</li>
 * <li>If [A] is complex then [D] is (purely) diagonal with complex eigenvalues.</li>
 * </ul></text>
      <return>The (block) diagonal eigenvalue matrix.</return>
    </javadoc>
    <method name="getDeterminant" type="N" startLine="72" endLine="79" />
    <javadoc>
      <text>* <p>
 * A matrix' determinant is the product of its eigenvalues.
 * </p></text>
      <return>The matrix' determinant</return>
    </javadoc>
    <method name="getEigenvalues" type="Array1D<ComplexNumber>" startLine="81" endLine="92" />
    <javadoc>
      <text>* <p>
 * Even for real matrices the eigenvalues are potentially complex numbers. Typically they need to be expressed as
 * complex numbers when [A] is not symmetric.
 * </p>
 * <p>
 * The eigenvalues in this array should be ordered in descending order - largest (modulus) first.
 * </p></text>
      <return>The eigenvalues in an ordered array.</return>
    </javadoc>
    <method name="getTrace" type="ComplexNumber" startLine="94" endLine="100" />
    <javadoc>
      <text>* A matrix' trace is the sum of the diagonal elements. It is also the sum of the eigenvalues. This method should
 * return the sum of the eigenvalues.</text>
      <return>The matrix' trace</return>
    </javadoc>
    <method name="getV" type="MatrixStore<N>" startLine="102" endLine="107" />
    <javadoc>
      <text>* The columns of [V] represent the eigenvectors of [A] in the sense that [A][V] = [V][D].</text>
      <return>The eigenvector matrix.</return>
    </javadoc>
    <method name="isHermitian" type="boolean" startLine="109" endLine="112" />
    <javadoc>
      <text>* If [A] is hermitian then [V][D][V]<sup>-1</sup> becomes [Q][D][Q]<sup>H</sup>...</text>
    </javadoc>
    <method name="isOrdered" type="boolean" startLine="114" endLine="120" />
    <javadoc>
      <text>* The eigenvalues in D (and the eigenvectors in V) are not necessarily ordered. This is a property of the
 * algorithm/implementation, not the data.</text>
      <return>true if they are ordered</return>
    </javadoc>
  </interface>
</source>
