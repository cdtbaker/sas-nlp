<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.matrix.decomposition">
  <import name="java.math.BigDecimal" />
  <import name="org.ojalgo.access.Access2D" />
  <import name="org.ojalgo.array.Array1D" />
  <import name="org.ojalgo.array.SimpleArray" />
  <import name="org.ojalgo.constant.PrimitiveMath" />
  <import name="org.ojalgo.matrix.MatrixUtils" />
  <import name="org.ojalgo.matrix.store.BigDenseStore" />
  <import name="org.ojalgo.matrix.store.ComplexDenseStore" />
  <import name="org.ojalgo.matrix.store.MatrixStore" />
  <import name="org.ojalgo.matrix.store.PrimitiveDenseStore" />
  <import name="org.ojalgo.scalar.ComplexNumber" />
  <import name="org.ojalgo.type.context.NumberContext" />
  <class name="SVDnew32" extends="SingularValueDecomposition<N>" startLine="38">
    <javadoc>
      <text>* Orginalet, sedan ett tag Based on SVDnew2, but with transposing so that calculations are always made on a matrix that
 * "isAspectRationNormal". Based on SVDnew5, but with Rotation replaced by the new alternative.</text>
      <author>apete</author>
    </javadoc>
    <class name="Big" extends="SVDnew32<BigDecimal>" startLine="46">
      <method type="constructor" name="Big" startLine="48" endLine="50" />
      <class name="Complex" extends="SVDnew32<ComplexNumber>" startLine="54">
        <method type="constructor" name="Complex" startLine="56" endLine="58" />
        <class name="Primitive" extends="SVDnew32<Double>" startLine="62">
          <method type="constructor" name="Primitive" startLine="64" endLine="66" />
          <method type="void" name="doCase1" startLine="70" endLine="95">
            <declaration type="double" name="f" />
            <declaration type="double" name="t" />
            <declaration type="double" name="cs" />
            <declaration type="double" name="sn" />
            <scope startLine="79" endLine="94">
              <scope startLine="86" endLine="89" />
              <scope startLine="91" endLine="93" />
            </scope>
          </method>
          <method type="void" name="doCase2" startLine="97" endLine="120">
            <declaration type="double" name="f" />
            <declaration type="double" name="t" />
            <declaration type="double" name="cs" />
            <declaration type="double" name="sn" />
            <scope startLine="106" endLine="119">
              <scope startLine="116" endLine="118" />
            </scope>
          </method>
          <method type="void" name="doCase3" startLine="122" endLine="188">
            <declaration type="int" name="indPm1" />
            <declaration type="int" name="indPm2" />
            <declaration type="double" name="scale" />
            <declaration type="double" name="sPm1" />
            <declaration type="double" name="sPm2" />
            <declaration type="double" name="ePm2" />
            <declaration type="double" name="sK" />
            <declaration type="double" name="eK" />
            <declaration type="double" name="b" />
            <declaration type="double" name="c" />
            <declaration type="double" name="shift" />
            <scope startLine="141" endLine="143" />
            <declaration type="double" name="f" />
            <declaration type="double" name="g" />
            <declaration type="double" name="t" />
            <declaration type="double" name="cs" />
            <declaration type="double" name="sn" />
            <scope startLine="154" endLine="185">
              <scope startLine="159" endLine="161" />
              <scope startLine="167" endLine="170" />
              <scope startLine="181" endLine="184" />
            </scope>
            <comment>Calculate the shift.</comment>
            <comment>Chase zeros.</comment>
          </method>
          <method type="void" name="doCase4" startLine="190" endLine="228">
            <declaration type="int" name="tmpDiagDim" />
            <declaration type="double" name="tmpSk" />
            <scope startLine="196" endLine="204">
              <scope startLine="199" endLine="203" />
              <comment>aQ2.modifyColumn(0, k, PrimitiveFunction.NEGATE);</comment>
            </scope>
            <scope startLine="204" endLine="206">
              <comment>To get rid of negative zeros</comment>
            </scope>
            <declaration type="int" name="tmpK" />
            <scope startLine="211" endLine="227">
              <scope startLine="212" endLine="214" />
              <declaration type="double" name="t" />
              <scope startLine="219" endLine="221" />
              <scope startLine="222" endLine="224" />
            </scope>
            <comment>Make the singular values positive.</comment>
            <comment>Order the singular values.</comment>
          </method>
          <method type="Array1D<Double>" name="toDiagonal" startLine="230" endLine="326">
            <declaration type="int" name="tmpDiagDim" />
            <declaration type="double[]" name="s" />
            <declaration type="double[]" name="e" />
            <declaration type="int" name="tmpOffLength" />
            <scope startLine="237" endLine="239" />
            <declaration type="int" name="kase" />
            <declaration type="int" name="k" />
            <declaration type="int" name="p" />
            <scope startLine="245" endLine="322">
              <scope startLine="260" endLine="268">
                <scope startLine="261" endLine="263" />
                <scope startLine="264" endLine="267" />
              </scope>
              <scope startLine="269" endLine="271" />
              <scope startLine="271" endLine="291">
                <declaration type="int" name="ks" />
                <scope startLine="273" endLine="282">
                  <scope startLine="274" endLine="276" />
                  <declaration type="double" name="t" />
                  <scope startLine="278" endLine="281" />
                </scope>
                <scope startLine="283" endLine="285" />
                <scope startLine="285" endLine="287" />
                <scope startLine="287" endLine="290" />
              </scope>
              <comment />
              <comment>This section of the program inspects for negligible elements in the s and e arrays.</comment>
              <comment>On completion the variables kase and k are set as follows:</comment>
              <comment />
              <comment>kase = 1     if s[p] and e[k-1] are negligible and k<p                           => deflate negligible s[p]</comment>
              <comment>kase = 2     if s[k] is negligible and k<p                                       => split at negligible s[k]</comment>
              <comment>kase = 3     if e[k-1] is negligible, k<p, and s(k)...s(p) are not negligible    => perform QR-step</comment>
              <comment>kase = 4     if e[p-1] is negligible                                             => convergence.</comment>
              <comment />
              <comment>Perform the task indicated by kase.</comment>
              <comment>Deflate negligible s[p]</comment>
              <comment>Split at negligible s[k]</comment>
              <comment>Perform QR-step.</comment>
              <comment>Convergence</comment>
              <comment>switch</comment>
              <comment>while</comment>
            </scope>
            <comment>s</comment>
            <comment>e</comment>
            <comment>Main iteration loop for the singular values.</comment>
            <comment>return new PrimitiveArray(s).asArray1D();</comment>
          </method>
          <method type="constructor" name="SVDnew32" startLine="328" endLine="330" />
          <method type="boolean" name="equals" startLine="332" endLine="334" />
          <method type="boolean" name="isOrdered" startLine="336" endLine="338" />
          <method type="boolean" name="isSolvable" startLine="340" endLine="342" />
          <method type="MatrixStore<N>" name="solve" startLine="345" endLine="347" />
          <method type="boolean" name="doCompute" startLine="350" endLine="372">
            <declaration type="DiagonalAccess<N>" name="tmpBidiagonal" />
            <declaration type="DecompositionStore<N>" name="tmpQ1" />
            <declaration type="DecompositionStore<N>" name="tmpQ2" />
            <declaration type="Array1D<Double>" name="tmpDiagonal" />
            <comment>if (this.isTransposed()) {</comment>
            <comment>this.setQ1(tmpQ2);</comment>
            <comment>this.setQ2(tmpQ1);</comment>
            <comment>} else {</comment>
            <comment>this.setQ1(tmpQ1);</comment>
            <comment>this.setQ2(tmpQ2);</comment>
            <comment>}</comment>
          </method>
          <method type="MatrixStore<N>" name="makeD" startLine="375" endLine="377" />
          <method type="MatrixStore<N>" name="makeQ1" startLine="380" endLine="382" />
          <method type="MatrixStore<N>" name="makeQ2" startLine="385" endLine="387" />
          <method type="Array1D<Double>" name="makeSingularValues" startLine="390" endLine="392" />
        </class>
      </class>
    </class>
  </class>
</source>
