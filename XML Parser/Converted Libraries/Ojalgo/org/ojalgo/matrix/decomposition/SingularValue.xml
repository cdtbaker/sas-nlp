<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.matrix.decomposition">
  <import name="org.ojalgo.access.Access2D" />
  <import name="org.ojalgo.array.Array1D" />
  <import name="org.ojalgo.matrix.store.MatrixStore" />
  <interface name="SingularValue" startLine="28">
    <implements name="MatrixDecomposition<N>" />
    <javadoc>
      <text>* Singular Value: [A] = [Q1][D][Q2]<sup>T</sup> Decomposes [this] into [Q1], [D] and [Q2] where:
 * <ul>
 * <li>[Q1] is an orthogonal matrix. The columns are the left, orthonormal, singular vectors of [this]. Its columns are
 * the eigenvectors of [A][A]<sup>T</sup>, and therefore has the same number of rows as [this].</li>
 * <li>[D] is a diagonal matrix. The elements on the diagonal are the singular values of [this]. It is either square or
 * has the same dimensions as [this]. The singular values of [this] are the square roots of the nonzero eigenvalues of
 * [A][A]<sup>T</sup> and [A]<sup>T</sup>[A] (they are the same)</li>
 * <li>[Q2] is an orthogonal matrix. The columns are the right, orthonormal, singular vectors of [this]. Its columns are
 * the eigenvectors of [A][A]<sup>T</sup>, and therefore has the same number of rows as [this] has columns.</li>
 * <li>[this] = [Q1][D][Q2]<sup>T</sup></li>
 * </ul>
 * A singular values decomposition always exists.</text>
      <author>apete</author>
    </javadoc>
    <method name="compute" type="boolean" startLine="46" endLine="52" />
    <javadoc>
      <param>matrix A matrix to decompose</param>
      <param>singularValuesOnly No need to calculate eigenvectors</param>
      <param>fullSize TODO</param>
      <return>true/false if the computation succeeded or not</return>
    </javadoc>
    <method name="getCondition" type="double" startLine="54" endLine="59" />
    <javadoc>
      <text>* The condition number.</text>
      <return>The largest singular value divided by the smallest singular value.</return>
    </javadoc>
    <method name="getD" type="MatrixStore<N>" startLine="61" endLine="64" />
    <javadoc>
      <return>The diagonal matrix of singular values.</return>
    </javadoc>
    <method name="getFrobeniusNorm" type="double" startLine="66" endLine="71" />
    <javadoc>
      <text>* Sometimes also called the Schatten 2-norm or Hilbert-Schmidt norm.</text>
      <return>The square root of the sum of squares of the singular values.</return>
    </javadoc>
    <method name="getKyFanNorm" type="double" startLine="73" endLine="85" />
    <javadoc>
      <text>* <p>
 * Ky Fan k-norm.
 * </p>
 * <p>
 * The first Ky Fan k-norm is the operator norm (the largest singular value), and the last is called the trace norm
 * (the sum of all singular values).
 * </p></text>
      <param>k The number of singular values to add up.</param>
      <return>The sum of the k largest singular values.</return>
    </javadoc>
    <method name="getOperatorNorm" type="double" startLine="87" endLine="90" />
    <javadoc>
      <return>2-norm</return>
    </javadoc>
    <method name="getQ1" type="MatrixStore<N>" startLine="92" endLine="100" />
    <javadoc>
      <text>* If [A] is m-by-n and its rank is r, then:
 * <ul>
 * <li>The first r columns of [Q1] span the column space, range or image of [A].</li>
 * <li>The last m-r columns of [Q1] span the left nullspace or cokernel of [A].</li>
 * </ul>
 * Calculating the QR decomposition of [A] is a faster alternative.</text>
    </javadoc>
    <method name="getQ2" type="MatrixStore<N>" startLine="102" endLine="110" />
    <javadoc>
      <text>* If [A] is m-by-n and its rank is r, then:
 * <ul>
 * <li>The first r columns of [Q2] span the row space or coimage of [A].</li>
 * <li>The last n-r columns of [Q2] span the nullspace or kernel of [A].</li>
 * </ul>
 * Calculating the QR decomposition of [A]<sup>T</sup> is a faster alternative.</text>
    </javadoc>
    <method name="getRank" type="int" startLine="112" endLine="117" />
    <javadoc>
      <text>* Effective numerical matrix rank.</text>
      <return>The number of nonnegligible singular values.</return>
    </javadoc>
    <method name="getSingularValues" type="Array1D<Double>" startLine="119" endLine="122" />
    <javadoc>
      <return>The singular values ordered in descending order.</return>
    </javadoc>
    <method name="getTraceNorm" type="double" startLine="124" endLine="124" />
    <method name="isOrdered" type="boolean" startLine="126" endLine="126" />
  </interface>
</source>
