<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.matrix.decomposition">
  <import name="java.util.Iterator" />
  <import name="org.ojalgo.access.Access2D" />
  <import name="org.ojalgo.access.Iterator1D" />
  <import name="org.ojalgo.array.Array1D" />
  <import name="org.ojalgo.array.Array2D" />
  <import name="org.ojalgo.array.SimpleArray" />
  <import name="org.ojalgo.constant.PrimitiveMath" />
  <import name="org.ojalgo.matrix.store.PhysicalStore" />
  <import name="org.ojalgo.matrix.transformation.Householder" />
  <import name="org.ojalgo.scalar.ComplexNumber" />
  <interface name="DecompositionStore" startLine="36">
    <implements name="PhysicalStore<N>" />
    <javadoc>
      <text>* <p>
 * Only classes that will act as a delegate to a {@linkplain MatrixDecomposition} implementation from this package
 * should implement this interface. The interface specifications are entirely dictated by the classes in this package.
 * </p>
 * <p>
 * Do not use it for anything else!
 * </p></text>
      <author>apete</author>
    </javadoc>
    <class name="HouseholderReference" startLine="49">
      <implements name="Householder<N>" />
      <declaration type="int" name="col" />
      <declaration type="int" name="row" />
      <declaration type="Householder.Big" name="myBigWorker" />
      <declaration type="boolean" name="myColumn" />
      <declaration type="Householder.Complex" name="myComplexWorker" />
      <declaration type="Householder.Primitive" name="myPrimitiveWorker" />
      <declaration type="DecompositionStore<N>" name="myStore" />
      <method type="constructor" name="HouseholderReference" startLine="60" endLine="62" />
      <method type="constructor" name="HouseholderReference" startLine="64" endLine="70" />
      <method type="long" name="count" startLine="72" endLine="74" />
      <method type="double" name="doubleValue" startLine="76" endLine="94">
        <scope startLine="77" endLine="85">
          <scope startLine="78" endLine="80" />
          <scope startLine="80" endLine="82" />
          <scope startLine="82" endLine="84" />
        </scope>
        <scope startLine="85" endLine="93">
          <scope startLine="86" endLine="88" />
          <scope startLine="88" endLine="90" />
          <scope startLine="90" endLine="92" />
        </scope>
      </method>
      <method type="int" name="first" startLine="96" endLine="98" />
      <method type="N" name="get" startLine="100" endLine="118">
        <scope startLine="101" endLine="109">
          <scope startLine="102" endLine="104" />
          <scope startLine="104" endLine="106" />
          <scope startLine="106" endLine="108" />
        </scope>
        <scope startLine="109" endLine="117">
          <scope startLine="110" endLine="112" />
          <scope startLine="112" endLine="114" />
          <scope startLine="114" endLine="116" />
        </scope>
      </method>
      <method type="N" name="get" startLine="120" endLine="138">
        <scope startLine="121" endLine="129">
          <scope startLine="122" endLine="124" />
          <scope startLine="124" endLine="126" />
          <scope startLine="126" endLine="128" />
        </scope>
        <scope startLine="129" endLine="137">
          <scope startLine="130" endLine="132" />
          <scope startLine="132" endLine="134" />
          <scope startLine="134" endLine="136" />
        </scope>
      </method>
      <method type="Householder.Big" name="getBigWorker" startLine="140" endLine="151">
        <scope startLine="142" endLine="148">
          <scope startLine="143" endLine="145" />
          <scope startLine="145" endLine="147" />
        </scope>
      </method>
      <method type="Householder.Complex" name="getComplexWorker" startLine="153" endLine="164">
        <scope startLine="155" endLine="161">
          <scope startLine="156" endLine="158" />
          <scope startLine="158" endLine="160" />
        </scope>
      </method>
      <method type="Householder.Primitive" name="getPrimitiveWorker" startLine="166" endLine="177">
        <scope startLine="168" endLine="174">
          <scope startLine="169" endLine="171" />
          <scope startLine="171" endLine="173" />
        </scope>
      </method>
      <method type="boolean" name="isZero" startLine="179" endLine="185">
        <scope startLine="180" endLine="182" />
        <scope startLine="182" endLine="184" />
      </method>
      <method type="Iterator<N>" name="iterator" startLine="187" endLine="189" />
      <method type="int" name="size" startLine="191" endLine="197">
        <scope startLine="192" endLine="194" />
        <scope startLine="194" endLine="196" />
      </method>
      <method type="String" name="toString" startLine="200" endLine="214">
        <declaration type="StringBuilder" name="retVal" />
        <declaration type="int" name="tmpLastIndex" />
        <scope startLine="205" endLine="208" />
      </method>
      <method name="applyCholesky" type="void" startLine="218" endLine="221" />
      <javadoc>
        <text>* Cholesky transformations</text>
      </javadoc>
      <method name="applyLU" type="void" startLine="223" endLine="226" />
      <javadoc>
        <text>* LU transformations</text>
      </javadoc>
      <method name="asArray2D" type="Array2D<N>" startLine="228" endLine="228" />
      <method name="computeInPlaceSchur" type="Array1D<ComplexNumber>" startLine="230" endLine="230" />
      <method name="divideAndCopyColumn" type="void" startLine="232" endLine="232" />
      <method name="generateApplyAndCopyHouseholderColumn" type="boolean" startLine="234" endLine="234" />
      <method name="generateApplyAndCopyHouseholderRow" type="boolean" startLine="236" endLine="236" />
      <method name="getIndexOfLargestInColumn" type="int" startLine="238" endLine="238" />
      <method name="negateColumn" type="void" startLine="240" endLine="240" />
      <method name="rotateRight" type="void" startLine="242" endLine="242" />
      <method name="setToIdentity" type="void" startLine="244" endLine="244" />
      <method name="substituteBackwards" type="void" startLine="246" endLine="258" />
      <javadoc>
        <text>* Will solve the equation system [A][X]=[B] where:
 * <ul>
 * <li>[aBody][this]=[this] is [A][X]=[B] ("this" is the right hand side, and it will be overwritten with the
 * solution).</li>
 * <li>[A] is upper/right triangular</li>
 * </ul></text>
        <param>aBody The equation system body parameters [A]</param>
        <param>conjugated true if the upper/right part of aBody is actually stored in the lower/left part of the matrix,
 * and the elements conjugated.</param>
      </javadoc>
      <method name="substituteForwards" type="void" startLine="260" endLine="271" />
      <javadoc>
        <text>* Will solve the equation system [A][X]=[B] where:
 * <ul>
 * <li>[aBody][this]=[this] is [A][X]=[B] ("this" is the right hand side, and it will be overwritten with the
 * solution).</li>
 * <li>[A] is lower/left triangular</li>
 * </ul></text>
        <param>aBody The equation system body parameters [A]</param>
        <param>onesOnDiagonal true if aBody as ones on the diagonal</param>
      </javadoc>
      <method name="transformSymmetric" type="void" startLine="273" endLine="273" />
      <method name="tred2" type="void" startLine="275" endLine="275" />
    </class>
  </interface>
</source>
