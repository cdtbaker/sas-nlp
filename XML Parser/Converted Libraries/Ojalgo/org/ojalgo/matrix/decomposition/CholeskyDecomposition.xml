<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.matrix.decomposition">
  <import name="java.math.BigDecimal" />
  <import name="org.ojalgo.access.Access2D" />
  <import name="org.ojalgo.array.SimpleArray" />
  <import name="org.ojalgo.function.UnaryFunction" />
  <import name="org.ojalgo.function.aggregator.AggregatorFunction" />
  <import name="org.ojalgo.matrix.MatrixUtils" />
  <import name="org.ojalgo.matrix.jama.JamaCholesky" />
  <import name="org.ojalgo.matrix.store.BigDenseStore" />
  <import name="org.ojalgo.matrix.store.ComplexDenseStore" />
  <import name="org.ojalgo.matrix.store.MatrixStore" />
  <import name="org.ojalgo.matrix.store.PrimitiveDenseStore" />
  <import name="org.ojalgo.scalar.ComplexNumber" />
  <import name="org.ojalgo.type.context.NumberContext" />
  <class name="CholeskyDecomposition" extends="InPlaceDecomposition<N>" startLine="39">
    <implements name="Cholesky<N>" />
    <javadoc>
      <text>* You create instances of (some subclass of) this class by calling one of the static factory methods:{@linkplain #makeBig()}, {@linkplain #makeComplex()}, {@linkplain #makePrimitive()} or {@linkplain #makeJama()}.</text>
      <author>apete</author>
    </javadoc>
    <class name="Big" extends="CholeskyDecomposition<BigDecimal>" startLine="47">
      <method type="constructor" name="Big" startLine="49" endLine="51" />
      <class name="Complex" extends="CholeskyDecomposition<ComplexNumber>" startLine="55">
        <method type="constructor" name="Complex" startLine="57" endLine="59" />
        <class name="Primitive" extends="CholeskyDecomposition<Double>" startLine="63">
          <method type="constructor" name="Primitive" startLine="65" endLine="67" />
          <method type="Cholesky<N>" name="make" startLine="72" endLine="89">
            <declaration type="N" name="tmpNumber" />
            <scope startLine="76" endLine="78" />
            <scope startLine="78" endLine="80" />
            <scope startLine="80" endLine="86">
              <scope startLine="81" endLine="83" />
              <scope startLine="83" endLine="85" />
              <comment>64,16,16</comment>
            </scope>
            <scope startLine="86" endLine="88" />
          </method>
          <method type="Cholesky<BigDecimal>" name="makeBig" startLine="91" endLine="93" />
          <method type="Cholesky<ComplexNumber>" name="makeComplex" startLine="95" endLine="97" />
          <method type="Cholesky<Double>" name="makeJama" startLine="99" endLine="101" />
          <method type="Cholesky<Double>" name="makePrimitive" startLine="103" endLine="105" />
          <declaration type="boolean" name="mySPD" />
          <method type="constructor" name="CholeskyDecomposition" startLine="109" endLine="111" />
          <method type="N" name="calculateDeterminant" startLine="113" endLine="116" />
          <method type="boolean" name="compute" startLine="118" endLine="120" />
          <method type="boolean" name="compute" startLine="122" endLine="166">
            <declaration type="DecompositionStore<N>" name="tmpInPlace" />
            <declaration type="int" name="tmpRowDim" />
            <declaration type="int" name="tmpColDim" />
            <declaration type="int" name="tmpMinDim" />
            <declaration type="boolean" name="tmpPositiveDefinite" />
            <declaration type="SimpleArray<N>" name="tmpMultipliers" />
            <scope startLine="138" endLine="140" />
            <declaration type="UnaryFunction<N>" name="tmpSqrtFunc" />
            <scope startLine="145" endLine="163">
              <scope startLine="148" endLine="159" />
              <scope startLine="159" endLine="162" />
              <comment>Do the calculations...</comment>
              <comment>Calculate multipliers and copy to local column</comment>
              <comment>Current column, below the diagonal</comment>
              <comment>Remaining columns, below the diagonal</comment>
            </scope>
            <comment>true if (Hermitian) Positive Definite</comment>
            <comment>Check if hermitian, maybe</comment>
            <comment>Main loop - along the diagonal</comment>
          </method>
          <method type="boolean" name="equals" startLine="168" endLine="170" />
          <method type="N" name="getDeterminant" startLine="172" endLine="179">
            <declaration type="AggregatorFunction<N>" name="tmpAggrFunc" />
          </method>
          <method type="MatrixStore<N>" name="getInverse" startLine="182" endLine="184" />
          <method type="MatrixStore<N>" name="getInverse" startLine="187" endLine="191" />
          <method type="MatrixStore<N>" name="getL" startLine="193" endLine="195" />
          <method type="boolean" name="isFullSize" startLine="197" endLine="199" />
          <method type="boolean" name="isSolvable" startLine="201" endLine="203" />
          <method type="boolean" name="isSPD" startLine="205" endLine="207" />
          <method type="MatrixStore<N>" name="reconstruct" startLine="209" endLine="211" />
          <method type="void" name="reset" startLine="214" endLine="219" />
          <javadoc>
            <text>* Solves [this][X] = [aRHS] by first solving
 * <pre>
 * [L][Y] = [aRHS]
 * </pre>
 * and then
 * <pre>
 * [U][X] = [Y]
 * </pre>
 * .</text>
            <param>rhs The right hand side</param>
            <return>[X] The solution will be written to "preallocated" and then returned.</return>
            <see>org.ojalgo.matrix.decomposition.AbstractDecomposition#solve(Access2D,org.ojalgo.matrix.decomposition.DecompositionStore)</see>
          </javadoc>
          <method type="MatrixStore<N>" name="solve" startLine="242" endLine="252">
            <declaration type="DecompositionStore<N>" name="tmpBody" />
          </method>
          <method type="MatrixStore<N>" name="invert" startLine="254" endLine="262">
            <declaration type="DecompositionStore<N>" name="tmpBody" />
          </method>
        </class>
      </class>
    </class>
  </class>
</source>
