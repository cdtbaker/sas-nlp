<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.matrix.decomposition">
  <import name="org.ojalgo.access.Access2D" />
  <import name="org.ojalgo.array.Array1D" />
  <import name="org.ojalgo.constant.PrimitiveMath" />
  <import name="org.ojalgo.function.BinaryFunction" />
  <import name="org.ojalgo.function.aggregator.AggregatorFunction" />
  <import name="org.ojalgo.function.aggregator.ComplexAggregator" />
  <import name="org.ojalgo.matrix.MatrixUtils" />
  <import name="org.ojalgo.matrix.store.MatrixStore" />
  <import name="org.ojalgo.matrix.store.PhysicalStore" />
  <import name="org.ojalgo.matrix.store.PrimitiveDenseStore" />
  <import name="org.ojalgo.scalar.ComplexNumber" />
  <import name="org.ojalgo.type.context.NumberContext" />
  <class name="NonsymmetricEvD" extends="EigenvalueDecomposition<N>" startLine="37">
    <class name="Primitive" extends="NonsymmetricEvD<Double>" startLine="39">
      <javadoc>
        <text>* Eigenvalues and eigenvectors of a real matrix.
 * <P>
 * If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is diagonal and the eigenvector matrix V is
 * orthogonal. I.e. A = V.times(D.times(V.transpose())) and V.times(V.transpose()) equals the identity matrix.
 * <P>
 * If A is not symmetric, then the eigenvalue matrix D is block diagonal with the real eigenvalues in 1-by-1 blocks
 * and any complex eigenvalues, lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda]. The columns of V
 * represent the eigenvectors in the sense that A*V = V*D, i.e. A.times(V) equals V.times(D). The matrix V may be
 * badly conditioned, or even singular, so the validity of the equation A = V*D*inverse(V) depends upon V.cond().</text>
      </javadoc>
      <method type="constructor" name="Primitive" startLine="52" endLine="54" />
      <method type="constructor" name="NonsymmetricEvD" startLine="58" endLine="60" />
      <method type="boolean" name="compute" startLine="62" endLine="64" />
      <method type="boolean" name="equals" startLine="66" endLine="68" />
      <method type="N" name="getDeterminant" startLine="70" endLine="77">
        <declaration type="AggregatorFunction<ComplexNumber>" name="tmpVisitor" />
      </method>
      <method type="MatrixStore<N>" name="getInverse" startLine="79" endLine="81" />
      <method type="MatrixStore<N>" name="getInverse" startLine="83" endLine="85" />
      <method type="ComplexNumber" name="getTrace" startLine="87" endLine="94">
        <declaration type="AggregatorFunction<ComplexNumber>" name="tmpVisitor" />
      </method>
      <method type="boolean" name="isFullSize" startLine="96" endLine="98" />
      <method type="boolean" name="isHermitian" startLine="100" endLine="102" />
      <method type="boolean" name="isOrdered" startLine="104" endLine="106" />
      <method type="boolean" name="isSolvable" startLine="108" endLine="110" />
      <method type="boolean" name="doNonsymmetric" startLine="113" endLine="151">
        <declaration type="int" name="tmpDiagDim" />
        <declaration type="DecompositionStore<N>" name="tmpMtrxA" />
        <declaration type="DecompositionStore<N>" name="tmpV" />
        <declaration type="Array1D<ComplexNumber>" name="tmpEigenvalues" />
        <declaration type="PhysicalStore<N>" name="tmpD" />
        <declaration type="ComplexNumber" name="tmpValue" />
        <declaration type="double" name="tmpImaginary" />
        <scope startLine="129" endLine="141">
          <scope startLine="136" endLine="138" />
          <scope startLine="138" endLine="140" />
        </scope>
        <comment>BasicLogger.logDebug("Eigenvalues: {}", tmpEigenvalues);</comment>
        <comment>BasicLogger.logDebug("D", tmpD);</comment>
        <comment>BasicLogger.logDebug("THIS", tmpMtrxA);</comment>
      </method>
      <method type="boolean" name="doSymmetric" startLine="154" endLine="156" />
      <method type="MatrixStore<N>" name="makeD" startLine="159" endLine="161" />
      <method type="Array1D<ComplexNumber>" name="makeEigenvalues" startLine="164" endLine="166" />
      <method type="MatrixStore<N>" name="makeInverse" startLine="168" endLine="189">
        <declaration type="MatrixStore<N>" name="tmpV" />
        <declaration type="MatrixStore<N>" name="tmpD" />
        <declaration type="int" name="tmpDim" />
        <declaration type="PhysicalStore<N>" name="tmpMtrx" />
        <declaration type="N" name="tmpZero" />
        <declaration type="BinaryFunction<N>" name="tmpDivide" />
        <scope startLine="180" endLine="186">
          <scope startLine="181" endLine="183" />
          <scope startLine="183" endLine="185" />
        </scope>
      </method>
      <method type="MatrixStore<N>" name="makeV" startLine="192" endLine="194" />
    </class>
  </class>
</source>
