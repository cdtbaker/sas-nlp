<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.matrix.store.operation">
  <import name="static org.ojalgo.constant.PrimitiveMath.*" />
  <import name="java.math.BigDecimal" />
  <import name="org.ojalgo.concurrent.DivideAndConquer" />
  <import name="org.ojalgo.constant.BigMath" />
  <import name="org.ojalgo.constant.PrimitiveMath" />
  <import name="org.ojalgo.function.BigFunction" />
  <import name="org.ojalgo.function.ComplexFunction" />
  <import name="org.ojalgo.matrix.transformation.Householder" />
  <import name="org.ojalgo.scalar.ComplexNumber" />
  <class name="HouseholderHermitian" extends="MatrixOperation" startLine="36">
    <javadoc>
      <text>* Performs Householder transformation from both sides simultaneously
 * assuming that [A] is hermitian (square symmetric) [A] = [A]<sup>H</sup>.
 * Will only read from and write to the lower/left triangular part of [A].</text>
      <author>apete</author>
    </javadoc>
    <declaration type="int" name="THRESHOLD" />
    <method type="void" name="invoke" startLine="48" endLine="101">
      <declaration type="BigDecimal[]" name="tmpVector" />
      <declaration type="int" name="tmpFirst" />
      <declaration type="int" name="tmpLength" />
      <declaration type="BigDecimal" name="tmpBeta" />
      <declaration type="int" name="tmpCount" />
      <scope startLine="56" endLine="68">
        <declaration type="DivideAndConquer" name="tmpConqurer" />
        <method type="void" name="conquer" startLine="61" endLine="63" />
      </scope>
      <scope startLine="68" endLine="71" />
      <declaration type="BigDecimal" name="tmpVal" />
      <scope startLine="74" endLine="77">
        <comment>tmpVal += tmpVector[c] * aWorker[c];</comment>
      </scope>
      <scope startLine="80" endLine="83">
        <comment>aWorker[c] = tmpBeta * (aWorker[c] - (tmpVal * tmpVector[c]));</comment>
      </scope>
      <scope startLine="85" endLine="97">
        <declaration type="DivideAndConquer" name="tmpConqurer" />
        <method type="void" name="conquer" startLine="90" endLine="92" />
      </scope>
      <scope startLine="97" endLine="100" />
      <comment>tmpVal *= (tmpBeta / TWO);</comment>
    </method>
    <method type="void" name="invoke" startLine="103" endLine="156">
      <declaration type="ComplexNumber[]" name="tmpVector" />
      <declaration type="int" name="tmpFirst" />
      <declaration type="int" name="tmpLength" />
      <declaration type="ComplexNumber" name="tmpBeta" />
      <declaration type="int" name="tmpCount" />
      <scope startLine="111" endLine="123">
        <declaration type="DivideAndConquer" name="tmpConqurer" />
        <method type="void" name="conquer" startLine="116" endLine="118" />
      </scope>
      <scope startLine="123" endLine="126" />
      <declaration type="ComplexNumber" name="tmpVal" />
      <scope startLine="129" endLine="132">
        <comment>tmpVal += tmpVector[c] * aWorker[c];</comment>
      </scope>
      <scope startLine="135" endLine="138">
        <comment>aWorker[c] = tmpBeta * (aWorker[c] - (tmpVal * tmpVector[c]));</comment>
      </scope>
      <scope startLine="140" endLine="152">
        <declaration type="DivideAndConquer" name="tmpConqurer" />
        <method type="void" name="conquer" startLine="145" endLine="147" />
      </scope>
      <scope startLine="152" endLine="155" />
      <comment>tmpVal *= (tmpBeta / TWO);</comment>
    </method>
    <method type="void" name="invoke" startLine="158" endLine="208">
      <declaration type="double[]" name="tmpVector" />
      <declaration type="int" name="tmpFirst" />
      <declaration type="int" name="tmpLength" />
      <declaration type="double" name="tmpBeta" />
      <declaration type="int" name="tmpCount" />
      <scope startLine="166" endLine="178">
        <declaration type="DivideAndConquer" name="tmpConqurer" />
        <method type="void" name="conquer" startLine="171" endLine="173" />
      </scope>
      <scope startLine="178" endLine="181" />
      <declaration type="double" name="tmpVal" />
      <scope startLine="184" endLine="186" />
      <scope startLine="188" endLine="190" />
      <scope startLine="192" endLine="204">
        <declaration type="DivideAndConquer" name="tmpConqurer" />
        <method type="void" name="conquer" startLine="197" endLine="199" />
      </scope>
      <scope startLine="204" endLine="207" />
    </method>
    <method type="void" name="tred2j" startLine="210" endLine="355">
      <declaration type="int" name="n" />
      <declaration type="double" name="scale" />
      <declaration type="double" name="h" />
      <declaration type="double" name="f" />
      <declaration type="double" name="g" />
      <declaration type="double" name="hh" />
      <declaration type="int" name="tmpRowDim" />
      <declaration type="int" name="tmpLast" />
      <scope startLine="240" endLine="242" />
      <scope startLine="245" endLine="316">
        <declaration type="int" name="l" />
        <scope startLine="252" endLine="254" />
        <scope startLine="256" endLine="265">
          <scope startLine="259" endLine="263" />
        </scope>
        <scope startLine="265" endLine="314">
          <scope startLine="268" endLine="271" />
          <scope startLine="274" endLine="276" />
          <scope startLine="280" endLine="282" />
          <scope startLine="286" endLine="295">
            <scope startLine="290" endLine="293" />
          </scope>
          <scope startLine="297" endLine="300" />
          <scope startLine="302" endLine="304" />
          <scope startLine="305" endLine="313">
            <scope startLine="308" endLine="310" />
          </scope>
        </scope>
        <comment>row index of target householder point</comment>
        <comment>col index of target householder point</comment>
        <comment>Calc the norm of the row/col to zero out</comment>
        <comment>Skip generation, already zero</comment>
        <comment>Are both needed?</comment>
        <comment>Could cause cache-misses</comment>
        <comment>Generate Householder vector.</comment>
        <comment>can be optimised, too many array read/write ops</comment>
        <comment>Apply similarity transformation to remaining columns.</comment>
        <comment>Remaing refers to all columns "before" the target col</comment>
        <comment>access the same element in z twice</comment>
      </scope>
      <scope startLine="319" endLine="353">
        <scope startLine="321" endLine="345">
          <declaration type="int" name="l" />
          <scope startLine="328" endLine="341">
            <scope startLine="329" endLine="331" />
            <scope startLine="332" endLine="340">
              <scope startLine="334" endLine="336" />
              <scope startLine="337" endLine="339" />
            </scope>
          </scope>
          <scope startLine="342" endLine="344" />
        </scope>
        <scope startLine="346" endLine="349" />
      </scope>
      <comment>Symmetric Householder reduction to tridiagonal form.
The original version of this code was taken from JAMA.
That code is in turn derived from the Algol procedures tred2
by Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
Fortran subroutine in EISPACK.
tred2 is also described in Numerical Recipes. Parameters and
variables are names are choosen to match what is used there.

z is the original matrix [A] that will be overwritten with [Q]
d will hold the main diagonal of the tridiagonal result
e will hold the off (super and sub) diagonals of the tridiagonal result</comment>
      <comment>Copy the last column (same as the last row) of z to d</comment>
      <comment>The last row/column is the first to be worked on in the main loop</comment>
      <comment>Householder reduction to tridiagonal form.</comment>
      <comment>Accumulate transformations.</comment>
    </method>
    <method type="void" name="tred2nr" startLine="357" endLine="450">
      <declaration type="int" name="n" />
      <declaration type="int" name="l" />
      <declaration type="int" name="tmpRowDim" />
      <declaration type="double" name="scale" />
      <declaration type="double" name="h" />
      <declaration type="double" name="hh" />
      <declaration type="double" name="g" />
      <declaration type="double" name="f" />
      <scope startLine="369" endLine="422">
        <scope startLine="376" endLine="418">
          <scope startLine="378" endLine="380" />
          <scope startLine="382" endLine="384" />
          <scope startLine="384" endLine="417">
            <scope startLine="385" endLine="388" />
            <scope startLine="395" endLine="408">
              <scope startLine="396" endLine="398" />
              <scope startLine="400" endLine="402" />
              <scope startLine="403" endLine="405" />
            </scope>
            <scope startLine="410" endLine="416">
              <scope startLine="413" endLine="415" />
            </scope>
          </scope>
        </scope>
        <scope startLine="418" endLine="420" />
      </scope>
      <scope startLine="423" endLine="425" />
      <scope startLine="427" endLine="449">
        <scope startLine="428" endLine="446">
          <scope startLine="429" endLine="439">
            <scope startLine="430" endLine="438">
              <scope startLine="432" endLine="434" />
              <scope startLine="435" endLine="437" />
            </scope>
          </scope>
          <scope startLine="442" endLine="445" />
        </scope>
        <scope startLine="446" endLine="448" />
      </scope>
    </method>
    <method type="constructor" name="HouseholderHermitian" startLine="452" endLine="454" />
  </class>
</source>
