<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.matrix">
  <import name="java.math.BigDecimal" />
  <import name="java.util.Iterator" />
  <import name="org.ojalgo.access.Access1D" />
  <import name="org.ojalgo.access.Access2D" />
  <import name="org.ojalgo.access.AccessUtils" />
  <import name="org.ojalgo.access.Iterator1D" />
  <import name="org.ojalgo.array.Array1D" />
  <import name="org.ojalgo.constant.PrimitiveMath" />
  <import name="org.ojalgo.matrix.decomposition.*" />
  <import name="org.ojalgo.matrix.store.ComplexDenseStore" />
  <import name="org.ojalgo.matrix.store.MatrixStore" />
  <import name="org.ojalgo.matrix.store.PhysicalStore" />
  <import name="org.ojalgo.matrix.store.operation.*" />
  <import name="org.ojalgo.random.Uniform" />
  <import name="org.ojalgo.scalar.ComplexNumber" />
  <import name="org.ojalgo.type.TypeUtils" />
  <import name="org.ojalgo.type.context.NumberContext" />
  <class name="MatrixUtils" startLine="43">
    <method type="boolean" name="equals" startLine="45" endLine="90">
      <declaration type="int" name="tmpRowDim" />
      <declaration type="int" name="tmpColDim" />
      <declaration type="MatrixStore<N>" name="tmpQ1" />
      <declaration type="MatrixStore<N>" name="tmpD" />
      <declaration type="MatrixStore<N>" name="tmpQ2" />
      <declaration type="MatrixStore<N>" name="tmpConjugatedQ1" />
      <declaration type="MatrixStore<N>" name="tmpConjugatedQ2" />
      <declaration type="MatrixStore<N>" name="tmpThis" />
      <declaration type="MatrixStore<N>" name="tmpThat" />
      <declaration type="boolean" name="retVal" />
      <scope startLine="63" endLine="69" />
      <scope startLine="72" endLine="78" />
      <scope startLine="81" endLine="87" />
      <comment>Check that it's possible to reconstruct the original matrix.</comment>
      <comment>If Q1 is square, then check if it is orthogonal/unitary.</comment>
      <comment>If Q2 is square, then check if it is orthogonal/unitary.</comment>
    </method>
    <method type="boolean" name="equals" startLine="92" endLine="101">
      <declaration type="boolean" name="retVal" />
      <declaration type="MatrixStore<N>" name="tmpL" />
    </method>
    <method type="boolean" name="equals" startLine="103" endLine="113">
      <declaration type="MatrixStore<N>" name="tmpD" />
      <declaration type="MatrixStore<N>" name="tmpV" />
      <declaration type="MatrixStore<N>" name="tmpStore1" />
      <declaration type="MatrixStore<N>" name="tmpStore2" />
      <comment>Check that [A][V] == [V][D] ([A] == [V][D][V]<sup>T</sup> is not always true)</comment>
    </method>
    <method type="boolean" name="equals" startLine="115" endLine="124">
      <declaration type="MatrixStore<N>" name="tmpH" />
      <declaration type="MatrixStore<N>" name="tmpQ" />
      <declaration type="MatrixStore<N>" name="tmpStore1" />
      <declaration type="MatrixStore<N>" name="tmpStore2" />
    </method>
    <method type="boolean" name="equals" startLine="126" endLine="133">
      <declaration type="MatrixStore<N>" name="tmpL" />
      <declaration type="MatrixStore<N>" name="tmpU" />
      <declaration type="int[]" name="tmpPivotOrder" />
    </method>
    <method type="boolean" name="equals" startLine="135" endLine="143">
      <declaration type="MatrixStore<N>" name="tmpQ" />
      <declaration type="MatrixStore<N>" name="tmpR" />
      <declaration type="MatrixStore<N>" name="tmpStore" />
    </method>
    <method type="boolean" name="equals" startLine="145" endLine="155">
      <declaration type="MatrixStore<N>" name="tmpU" />
      <declaration type="MatrixStore<N>" name="tmpQ" />
      <declaration type="MatrixStore<N>" name="tmpStore1" />
      <declaration type="MatrixStore<N>" name="tmpStore2" />
      <comment>Check that [A][Q] == [Q][U] ([A] == [Q][U][Q]<sup>T</sup> is not always true)</comment>
    </method>
    <method type="boolean" name="equals" startLine="157" endLine="217">
      <declaration type="int" name="tmpRowDim" />
      <declaration type="int" name="tmpColDim" />
      <declaration type="MatrixStore<N>" name="tmpQ1" />
      <declaration type="MatrixStore<N>" name="tmpD" />
      <declaration type="MatrixStore<N>" name="tmpQ2" />
      <declaration type="MatrixStore<N>" name="tmpThis" />
      <declaration type="MatrixStore<N>" name="tmpThat" />
      <declaration type="boolean" name="retVal" />
      <scope startLine="172" endLine="178" />
      <scope startLine="181" endLine="187" />
      <scope startLine="190" endLine="196" />
      <scope startLine="199" endLine="201" />
      <scope startLine="204" endLine="214">
        <declaration type="Array1D<Double>" name="tmpSV" />
        <scope startLine="206" endLine="208" />
        <scope startLine="209" endLine="213">
          <scope startLine="210" endLine="212" />
        </scope>
      </scope>
      <comment>Check that [A][Q2] == [Q1][D]</comment>
      <comment>If Q1 is square, then check if it is orthogonal/unitary.</comment>
      <comment>If Q2 is square, then check if it is orthogonal/unitary.</comment>
      <comment>Check the pseudoinverse.</comment>
      <comment>Check that the singular values are sorted in descending order</comment>
    </method>
    <method type="boolean" name="equals" startLine="219" endLine="225">
      <comment>Check that [A] == [Q][D][Q]<sup>T</sup></comment>
      <comment>Check that Q is orthogonal/unitary...</comment>
    </method>
    <method type="int" name="hashCode" startLine="227" endLine="229" />
    <method type="int" name="hashCode" startLine="231" endLine="233" />
    <method type="boolean" name="isHermitian" startLine="235" endLine="268">
      <declaration type="long" name="tmpRowDim" />
      <declaration type="long" name="tmpColDim" />
      <declaration type="Number" name="tmpElement" />
      <declaration type="boolean" name="retVal" />
      <scope startLine="244" endLine="258">
        <declaration type="ComplexNumber" name="tmpLowerLeft" />
        <declaration type="ComplexNumber" name="tmpUpperRight" />
        <scope startLine="249" endLine="256">
          <scope startLine="251" endLine="255" />
        </scope>
      </scope>
      <scope startLine="258" endLine="265">
        <scope startLine="260" endLine="264">
          <scope startLine="261" endLine="263" />
        </scope>
      </scope>
    </method>
    <method type="boolean" name="isLowerLeftShaded" startLine="270" endLine="272" />
    <method type="boolean" name="isNormal" startLine="274" endLine="279">
      <declaration type="MatrixStore<N>" name="tmpConjugate" />
    </method>
    <method type="boolean" name="isUpperRightShaded" startLine="281" endLine="283" />
    <method type="int[]" name="makeDecreasingRange" startLine="285" endLine="291">
      <declaration type="int[]" name="retVal" />
      <scope startLine="287" endLine="289" />
    </method>
    <method type="int[]" name="makeIncreasingRange" startLine="293" endLine="299">
      <declaration type="int[]" name="retVal" />
      <scope startLine="295" endLine="297" />
    </method>
    <method type="PhysicalStore<ComplexNumber>" name="makeRandomComplexStore" startLine="301" endLine="314">
      <declaration type="PhysicalStore<ComplexNumber>" name="retVal" />
      <declaration type="Uniform" name="tmpArgGen" />
      <scope startLine="307" endLine="311">
        <scope startLine="308" endLine="310" />
      </scope>
    </method>
    <method type="int[]" name="makeRange" startLine="316" endLine="318" />
    <method type="int" name="max" startLine="320" endLine="326">
      <declaration type="int" name="retVal" />
      <scope startLine="322" endLine="324" />
    </method>
    <method type="int" name="min" startLine="328" endLine="334">
      <declaration type="int" name="retVal" />
      <scope startLine="330" endLine="332" />
    </method>
    <method type="MatrixStore<N>" name="reconstruct" startLine="336" endLine="338" />
    <method type="MatrixStore<N>" name="reconstruct" startLine="340" endLine="343">
      <declaration type="MatrixStore<N>" name="tmpL" />
    </method>
    <method type="MatrixStore<N>" name="reconstruct" startLine="345" endLine="348">
      <declaration type="MatrixStore<N>" name="tmpV" />
    </method>
    <method type="MatrixStore<N>" name="reconstruct" startLine="350" endLine="354">
      <declaration type="MatrixStore<N>" name="tmpQ" />
      <declaration type="MatrixStore<N>" name="tmpH" />
    </method>
    <method type="MatrixStore<N>" name="reconstruct" startLine="356" endLine="358" />
    <method type="MatrixStore<N>" name="reconstruct" startLine="360" endLine="362" />
    <method type="MatrixStore<N>" name="reconstruct" startLine="364" endLine="367">
      <declaration type="MatrixStore<N>" name="tmpQ" />
    </method>
    <method type="MatrixStore<N>" name="reconstruct" startLine="369" endLine="371" />
    <method type="MatrixStore<N>" name="reconstruct" startLine="373" endLine="376">
      <declaration type="MatrixStore<N>" name="tmpQ" />
    </method>
    <method type="void" name="setAllOperationThresholds" startLine="378" endLine="407" />
    <method type="String" name="toString" startLine="409" endLine="446">
      <declaration type="StringBuilder" name="retVal" />
      <declaration type="int" name="tmpRowDim" />
      <declaration type="int" name="tmpColDim" />
      <scope startLine="419" endLine="443">
        <scope startLine="425" endLine="427" />
        <scope startLine="430" endLine="439">
          <scope startLine="436" endLine="438" />
        </scope>
        <comment>First element</comment>
        <comment>Rest of the first row</comment>
        <comment>For each of the remaining rows</comment>
        <comment>First column</comment>
        <comment>Remaining columns</comment>
        <comment>Finish</comment>
      </scope>
    </method>
    <method type="Access2D<BigDecimal>" name="wrapBigAccess2D" startLine="448" endLine="496">
      <method type="long" name="count" startLine="451" endLine="453" />
      <method type="long" name="countColumns" startLine="455" endLine="457" />
      <method type="long" name="countRows" startLine="459" endLine="461" />
      <method type="double" name="doubleValue" startLine="463" endLine="465" />
      <method type="double" name="doubleValue" startLine="467" endLine="469" />
      <method type="BigDecimal" name="get" startLine="471" endLine="473" />
      <method type="BigDecimal" name="get" startLine="475" endLine="477" />
      <method type="int" name="getColDim" startLine="479" endLine="481" />
      <method type="int" name="getRowDim" startLine="483" endLine="485" />
      <method type="Iterator<BigDecimal>" name="iterator" startLine="487" endLine="489" />
      <method type="int" name="size" startLine="491" endLine="493" />
    </method>
    <method type="Access2D<ComplexNumber>" name="wrapComplexAccess2D" startLine="498" endLine="546">
      <method type="long" name="count" startLine="501" endLine="503" />
      <method type="long" name="countColumns" startLine="505" endLine="507" />
      <method type="long" name="countRows" startLine="509" endLine="511" />
      <method type="double" name="doubleValue" startLine="513" endLine="515" />
      <method type="double" name="doubleValue" startLine="517" endLine="519" />
      <method type="ComplexNumber" name="get" startLine="521" endLine="523" />
      <method type="ComplexNumber" name="get" startLine="525" endLine="527" />
      <method type="int" name="getColDim" startLine="529" endLine="531" />
      <method type="int" name="getRowDim" startLine="533" endLine="535" />
      <method type="Iterator<ComplexNumber>" name="iterator" startLine="537" endLine="539" />
      <method type="int" name="size" startLine="541" endLine="543" />
    </method>
    <method type="Access2D<Double>" name="wrapPrimitiveAccess2D" startLine="548" endLine="596">
      <method type="long" name="count" startLine="551" endLine="553" />
      <method type="long" name="countColumns" startLine="555" endLine="557" />
      <method type="long" name="countRows" startLine="559" endLine="561" />
      <method type="double" name="doubleValue" startLine="563" endLine="565" />
      <method type="double" name="doubleValue" startLine="567" endLine="569" />
      <method type="Double" name="get" startLine="571" endLine="573" />
      <method type="Double" name="get" startLine="575" endLine="577" />
      <method type="int" name="getColDim" startLine="579" endLine="581" />
      <method type="int" name="getRowDim" startLine="583" endLine="585" />
      <method type="Iterator<Double>" name="iterator" startLine="587" endLine="589" />
      <method type="int" name="size" startLine="591" endLine="593" />
    </method>
    <method type="constructor" name="MatrixUtils" startLine="598" endLine="600" />
  </class>
</source>
