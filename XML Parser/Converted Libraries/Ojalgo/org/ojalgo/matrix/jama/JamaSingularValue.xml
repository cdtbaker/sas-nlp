<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.matrix.jama">
  <import name="org.ojalgo.ProgrammingError" />
  <import name="org.ojalgo.access.Access1D" />
  <import name="org.ojalgo.access.Access2D" />
  <import name="org.ojalgo.array.Array1D" />
  <import name="org.ojalgo.constant.PrimitiveMath" />
  <import name="org.ojalgo.matrix.MatrixUtils" />
  <import name="org.ojalgo.matrix.decomposition.SingularValue" />
  <import name="org.ojalgo.matrix.store.MatrixStore" />
  <import name="org.ojalgo.type.TypeUtils" />
  <import name="org.ojalgo.type.context.NumberContext" />
  <class name="JamaSingularValue" extends="JamaAbstractDecomposition" startLine="35">
    <implements name="SingularValue<Double>" />
    <javadoc>
      <text>* This class adapts JAMA's SingularValueDecomposition to ojAlgo's{@linkplain SingularValue} interface.
 * speed: 52.641s</text>
      <author>apete</author>
    </javadoc>
    <declaration type="SingularValueDecomposition" name="myDelegate" />
    <declaration type="boolean" name="myTransposed" />
    <declaration type="JamaMatrix" name="myPseudoinverse" />
    <javadoc>
      <text>* Not recommended to use this constructor directly.
 * Consider using the static factory method{@linkplain org.ojalgo.matrix.decomposition.SingularValueDecomposition#makeJama()}instead.</text>
    </javadoc>
    <method type="constructor" name="JamaSingularValue" startLine="56" endLine="58" />
    <method type="boolean" name="compute" startLine="60" endLine="67">
      <declaration type="Matrix" name="tmpCast" />
    </method>
    <method type="boolean" name="equals" startLine="69" endLine="71" />
    <method type="double" name="getCondition" startLine="73" endLine="75" />
    <method type="JamaMatrix" name="getD" startLine="77" endLine="79" />
    <method type="double" name="getFrobeniusNorm" startLine="81" endLine="94">
      <declaration type="double" name="retVal" />
      <declaration type="double" name="tmpVal" />
      <declaration type="Array1D<Double>" name="tmpSingularValues" />
      <scope startLine="88" endLine="91" />
    </method>
    <method type="JamaMatrix" name="getInverse" startLine="97" endLine="122">
      <scope startLine="99" endLine="119">
        <declaration type="double[][]" name="tmpQ1" />
        <declaration type="double[]" name="tmpSingular" />
        <declaration type="Matrix" name="tmpMtrx" />
        <scope startLine="106" endLine="116">
          <scope startLine="107" endLine="111">
            <scope startLine="108" endLine="110" />
          </scope>
          <scope startLine="111" endLine="115">
            <scope startLine="112" endLine="114" />
          </scope>
        </scope>
      </scope>
    </method>
    <method type="double" name="getKyFanNorm" startLine="124" endLine="136">
      <declaration type="double" name="retVal" />
      <declaration type="Array1D<Double>" name="tmpSingularValues" />
      <declaration type="int" name="tmpK" />
      <scope startLine="131" endLine="133" />
    </method>
    <method type="double" name="getOperatorNorm" startLine="138" endLine="140" />
    <method type="JamaMatrix" name="getQ1" startLine="142" endLine="144" />
    <method type="JamaMatrix" name="getQ2" startLine="146" endLine="148" />
    <method type="int" name="getRank" startLine="150" endLine="152" />
    <method type="Array1D<Double>" name="getSingularValues" startLine="154" endLine="156" />
    <method type="double" name="getTraceNorm" startLine="158" endLine="160" />
    <method type="boolean" name="isAspectRatioNormal" startLine="162" endLine="164" />
    <method type="boolean" name="isComputed" startLine="166" endLine="168" />
    <method type="boolean" name="isFullSize" startLine="170" endLine="172" />
    <method type="boolean" name="isOrdered" startLine="174" endLine="176" />
    <method type="boolean" name="isSolvable" startLine="178" endLine="180" />
    <method type="MatrixStore<Double>" name="reconstruct" startLine="182" endLine="184" />
    <method type="void" name="reset" startLine="186" endLine="191" />
    <javadoc>
      <text>* Internally this implementation uses the pseudoinverse that is recreated 
 * with every call.</text>
    </javadoc>
    <method type="JamaMatrix" name="solve" startLine="198" endLine="200" />
    <method type="String" name="toString" startLine="203" endLine="205" />
    <method type="boolean" name="compute" startLine="208" endLine="210" />
    <method type="boolean" name="compute" startLine="212" endLine="227">
      <declaration type="Matrix" name="tmpMtrx" />
      <scope startLine="216" endLine="219" />
      <scope startLine="219" endLine="222" />
    </method>
    <method type="Matrix" name="solve" startLine="230" endLine="233" />
  </class>
</source>
