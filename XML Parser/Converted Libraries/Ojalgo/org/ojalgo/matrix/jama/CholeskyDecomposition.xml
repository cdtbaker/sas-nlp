<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.matrix.jama">
  <class name="CholeskyDecomposition" startLine="3">
    <implements name="java.io.Serializable" />
    <javadoc>
      <text>* Cholesky Decomposition.
 * <P>
 * For a symmetric, positive definite matrix A, the Cholesky decomposition
 * is an lower triangular matrix L so that A = L*L'.
 * <P>
 * If the matrix is not symmetric or positive definite, the constructor
 * returns a partial decomposition and sets an internal flag that may
 * be queried by the isSPD() method.</text>
    </javadoc>
    <javadoc>
      <text>* Array for internal storage of decomposition.</text>
      <serial>internal array storage.</serial>
    </javadoc>
    <declaration type="double[][]" name="L" />
    <javadoc>
      <text>* Row and column dimension (square matrix).</text>
      <serial>matrix dimension.</serial>
    </javadoc>
    <declaration type="int" name="n" />
    <javadoc>
      <text>* Symmetric and positive definite flag.</text>
      <serial>is symmetric and positive definite flag.</serial>
    </javadoc>
    <declaration type="boolean" name="isspd" />
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Cholesky algorithm for symmetric and positive definite matrix.
 * Structure to access L and isspd flag.</text>
      <param>Arg   Square, symmetric matrix.</param>
    </javadoc>
    <method type="constructor" name="CholeskyDecomposition" startLine="111" endLine="139">
      <declaration type="double[][]" name="A" />
      <scope startLine="119" endLine="138">
        <declaration type="double[]" name="Lrowj" />
        <declaration type="double" name="d" />
        <scope startLine="122" endLine="131">
          <declaration type="double[]" name="Lrowk" />
          <declaration type="double" name="s" />
          <scope startLine="125" endLine="127" />
        </scope>
        <scope startLine="135" endLine="137" />
      </scope>
      <comment>Initialize.</comment>
      <comment>Main loop.</comment>
    </method>
    <javadoc>
      <text>* Return triangular factor.</text>
      <return>L</return>
    </javadoc>
    <method type="Matrix" name="getL" startLine="145" endLine="147" />
    <javadoc>
      <text>* Is the matrix symmetric and positive definite?</text>
      <return>true if A is symmetric and positive definite.</return>
    </javadoc>
    <method type="boolean" name="isSPD" startLine="153" endLine="155" />
    <javadoc>
      <text>* Solve A*X = B</text>
      <param>B   A Matrix with as many rows as A and any number of columns.</param>
      <return>X so that L*L'*X = B</return>
      <exception>IllegalArgumentException  Matrix row dimensions must agree.</exception>
      <exception>RuntimeException  Matrix is not symmetric positive definite.</exception>
    </javadoc>
    <method type="Matrix" name="solve" startLine="164" endLine="197">
      <scope startLine="165" endLine="167" />
      <scope startLine="168" endLine="170" />
      <declaration type="double[][]" name="X" />
      <declaration type="int" name="nx" />
      <scope startLine="177" endLine="184">
        <scope startLine="178" endLine="183">
          <scope startLine="179" endLine="181" />
        </scope>
      </scope>
      <scope startLine="187" endLine="194">
        <scope startLine="188" endLine="193">
          <scope startLine="189" endLine="191" />
        </scope>
      </scope>
      <comment>Copy right hand side.</comment>
      <comment>Solve L*Y = B;</comment>
      <comment>Solve L'*X = Y;</comment>
    </method>
    <comment>------------------------
Class variables
 ------------------------</comment>
    <comment>------------------------
Constructor
 ------------------------</comment>
    <comment>------------------------
Temporary, experimental code.
 ------------------------ \

\ Right Triangular Cholesky Decomposition.
<P>
For a symmetric, positive definite matrix A, the Right Cholesky
decomposition is an upper triangular matrix R so that A = R'R.
This constructor computes R with the Fortran inspired column oriented
algorithm used in LINPACK and MATLAB.  In Java, we suspect a row oriented,
lower triangular decomposition is faster.  We have temporarily included
this constructor here until timing experiments confirm this suspicion.
\

\ Array for internal storage of right triangular decomposition. \
private transient double[][] R;

\ Cholesky algorithm for symmetric and positive definite matrix.
@param  A           Square, symmetric matrix.
@param  rightflag   Actual value ignored.
@return             Structure to access R and isspd flag.
\

public CholeskyDecomposition (Matrix Arg, int rightflag) {
 Initialize.
double[][] A = Arg.getArray();
n = Arg.getColumnDimension();
R = new double[n][n];
isspd = (Arg.getColumnDimension() == n);
 Main loop.
for (int j = 0; j < n; j++) {
double d = 0.0;
for (int k = 0; k < j; k++) {
double s = A[k][j];
for (int i = 0; i < k; i++) {
s = s - R[i][k]R[i][j];
}
R[k][j] = s = sR[k][k];
d = d + ss;
isspd = isspd & (A[k][j] == A[j][k]);
}
d = A[j][j] - d;
isspd = isspd & (d > 0.0);
R[j][j] = Math.sqrt(Math.max(d,0.0));
for (int k = j+1; k < n; k++) {
R[k][j] = 0.0;
}
}
}

\ Return upper triangular factor.
@return     R
\

public Matrix getR () {
return new Matrix(R,n,n);
}

\ ------------------------
End of temporary code.
 ------------------------</comment>
    <comment>------------------------
Public Methods
 ------------------------</comment>
  </class>
</source>
