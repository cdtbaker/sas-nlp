<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.matrix.jama">
  <class name="EigenvalueDecomposition" startLine="3">
    <implements name="java.io.Serializable" />
    <javadoc>
      <text>* Eigenvalues and eigenvectors of a real matrix. 
 * <P>
 * If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
 * diagonal and the eigenvector matrix V is orthogonal.
 * I.e. A = V.times(D.times(V.transpose())) and 
 * V.times(V.transpose()) equals the identity matrix.
 * <P>
 * If A is not symmetric, then the eigenvalue matrix D is block diagonal
 * with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
 * lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
 * columns of V represent the eigenvectors in the sense that A*V = V*D,
 * i.e. A.times(V) equals V.times(D).  The matrix V may be badly
 * conditioned, or even singular, so the validity of the equation
 * A = V*D*inverse(V) depends upon V.cond().</text>
    </javadoc>
    <javadoc>
      <text>* Row and column dimension (square matrix).</text>
      <serial>matrix dimension.</serial>
    </javadoc>
    <declaration type="int" name="n" />
    <javadoc>
      <text>* Symmetry flag.</text>
      <serial>internal symmetry flag.</serial>
    </javadoc>
    <declaration type="boolean" name="issymmetric" />
    <javadoc>
      <text>* Arrays for internal storage of eigenvalues.</text>
      <serial>internal storage of eigenvalues.</serial>
    </javadoc>
    <declaration type="double[]" name="d" />
    <javadoc>
      <text>* Array for internal storage of eigenvectors.</text>
      <serial>internal storage of eigenvectors.</serial>
    </javadoc>
    <declaration type="double[][]" name="V" />
    <javadoc>
      <text>* Array for internal storage of nonsymmetric Hessenberg form.</text>
      <serial>internal storage of nonsymmetric Hessenberg form.</serial>
    </javadoc>
    <declaration type="double[][]" name="H" />
    <javadoc>
      <text>* Working storage for nonsymmetric algorithm.</text>
      <serial>working storage for nonsymmetric algorithm.</serial>
    </javadoc>
    <declaration type="double[]" name="ort" />
    <declaration type="double" name="cdivr" />
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Check for symmetry, then construct the eigenvalue decomposition
 * Structure to access D and V.</text>
      <param>Arg    Square matrix</param>
    </javadoc>
    <method type="constructor" name="EigenvalueDecomposition" startLine="74" endLine="117">
      <declaration type="double[][]" name="A" />
      <scope startLine="82" endLine="86">
        <scope startLine="83" endLine="85" />
      </scope>
      <scope startLine="88" endLine="101">
        <scope startLine="89" endLine="93">
          <scope startLine="90" endLine="92" />
        </scope>
        <comment>Tridiagonalize.</comment>
        <comment>Diagonalize.</comment>
      </scope>
      <scope startLine="101" endLine="116">
        <scope startLine="105" endLine="109">
          <scope startLine="106" endLine="108" />
        </scope>
        <comment>Reduce to Hessenberg form.</comment>
        <comment>Reduce Hessenberg to real Schur form.</comment>
      </scope>
    </method>
    <method type="constructor" name="EigenvalueDecomposition" startLine="119" endLine="155">
      <declaration type="double[][]" name="A" />
      <scope startLine="126" endLine="139">
        <scope startLine="127" endLine="131">
          <scope startLine="128" endLine="130" />
        </scope>
        <comment>Tridiagonalize.</comment>
        <comment>Diagonalize.</comment>
      </scope>
      <scope startLine="139" endLine="154">
        <scope startLine="143" endLine="147">
          <scope startLine="144" endLine="146" />
        </scope>
        <comment>Reduce to Hessenberg form.</comment>
        <comment>Reduce Hessenberg to real Schur form.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Return the block diagonal eigenvalue matrix</text>
      <return>D</return>
    </javadoc>
    <method type="Matrix" name="getD" startLine="163" endLine="178">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="D" />
      <scope startLine="166" endLine="176">
        <scope startLine="167" endLine="169" />
        <scope startLine="171" endLine="173" />
        <scope startLine="173" endLine="175" />
      </scope>
    </method>
    <javadoc>
      <text>* Return the imaginary parts of the eigenvalues</text>
      <return>imag(diag(D))</return>
    </javadoc>
    <method type="double[]" name="getImagEigenvalues" startLine="184" endLine="186" />
    <javadoc>
      <text>* Return the real parts of the eigenvalues</text>
      <return>real(diag(D))</return>
    </javadoc>
    <method type="double[]" name="getRealEigenvalues" startLine="194" endLine="196" />
    <javadoc>
      <text>* Return the eigenvector matrix</text>
      <return>V</return>
    </javadoc>
    <method type="Matrix" name="getV" startLine="206" endLine="208" />
    <method type="void" name="cdiv" startLine="214" endLine="227">
      <declaration type="double" name="r" />
      <scope startLine="216" endLine="221" />
      <scope startLine="221" endLine="226" />
    </method>
    <method type="void" name="hqr2" startLine="229" endLine="664">
      <declaration type="int" name="nn" />
      <declaration type="int" name="n" />
      <declaration type="int" name="low" />
      <declaration type="int" name="high" />
      <declaration type="double" name="eps" />
      <declaration type="double" name="exshift" />
      <declaration type="double" name="p" />
      <declaration type="double" name="norm" />
      <scope startLine="249" endLine="257">
        <scope startLine="250" endLine="253" />
        <scope startLine="254" endLine="256" />
      </scope>
      <declaration type="int" name="iter" />
      <scope startLine="262" endLine="507">
        <declaration type="int" name="l" />
        <scope startLine="267" endLine="276">
          <scope startLine="269" endLine="271" />
          <scope startLine="272" endLine="274" />
        </scope>
        <scope startLine="281" endLine="290" />
        <scope startLine="290" endLine="359">
          <scope startLine="301" endLine="348">
            <scope startLine="302" endLine="304" />
            <scope startLine="304" endLine="306" />
            <scope startLine="309" endLine="311" />
            <scope startLine="324" endLine="328" />
            <scope startLine="332" endLine="336" />
            <scope startLine="340" endLine="344" />
          </scope>
          <scope startLine="348" endLine="353" />
        </scope>
        <scope startLine="359" endLine="506">
          <scope startLine="366" endLine="369" />
          <scope startLine="373" endLine="381">
            <scope startLine="375" endLine="377" />
          </scope>
          <scope startLine="385" endLine="400">
            <scope startLine="388" endLine="399">
              <scope startLine="390" endLine="392" />
              <scope startLine="394" endLine="396" />
            </scope>
          </scope>
          <declaration type="int" name="m" />
          <scope startLine="407" endLine="426">
            <scope startLine="418" endLine="420" />
            <scope startLine="422" endLine="424" />
          </scope>
          <scope startLine="428" endLine="433">
            <scope startLine="430" endLine="432" />
          </scope>
          <scope startLine="437" endLine="505">
            <declaration type="boolean" name="notlast" />
            <scope startLine="439" endLine="450">
              <scope startLine="444" endLine="446" />
            </scope>
            <scope startLine="453" endLine="455" />
            <scope startLine="456" endLine="504">
              <scope startLine="457" endLine="459" />
              <scope startLine="459" endLine="461" />
              <scope startLine="471" endLine="479">
                <scope startLine="473" endLine="476" />
              </scope>
              <scope startLine="483" endLine="491">
                <scope startLine="485" endLine="488" />
              </scope>
              <scope startLine="495" endLine="503">
                <scope startLine="497" endLine="500" />
              </scope>
            </scope>
          </scope>
        </scope>
        <comment>Look for single small sub-diagonal element</comment>
        <comment>Check for convergence</comment>
        <comment>One root found</comment>
        <comment>Two roots found</comment>
        <comment>Real pair</comment>
        <comment>Row modification</comment>
        <comment>Column modification</comment>
        <comment>Accumulate transformations</comment>
        <comment>Complex pair</comment>
        <comment>No convergence yet</comment>
        <comment>Form shift</comment>
        <comment>Wilkinson's original ad hoc shift</comment>
        <comment>MATLAB's new ad hoc shift</comment>
        <comment>(Could check iteration count here.)</comment>
        <comment>Look for two consecutive small sub-diagonal elements</comment>
        <comment>Double QR step involving rows l:n and columns m:n</comment>
        <comment>Row modification</comment>
        <comment>Column modification</comment>
        <comment>Accumulate transformations</comment>
        <comment>(s != 0)</comment>
        <comment>k loop</comment>
        <comment>check convergence</comment>
        <comment>while (n >= low)</comment>
      </scope>
      <scope startLine="511" endLine="513" />
      <scope startLine="515" endLine="641">
        <scope startLine="521" endLine="570">
          <declaration type="int" name="l" />
          <scope startLine="524" endLine="566">
            <scope startLine="527" endLine="529" />
            <scope startLine="530" endLine="533" />
            <scope startLine="533" endLine="565">
              <scope startLine="535" endLine="544">
                <scope startLine="536" endLine="538" />
                <scope startLine="538" endLine="540" />
              </scope>
              <scope startLine="544" endLine="555">
                <scope startLine="550" endLine="552" />
                <scope startLine="552" endLine="554" />
              </scope>
              <scope startLine="560" endLine="564">
                <scope startLine="561" endLine="563" />
              </scope>
            </scope>
          </scope>
        </scope>
        <scope startLine="570" endLine="640">
          <declaration type="int" name="l" />
          <scope startLine="575" endLine="578" />
          <scope startLine="578" endLine="582" />
          <scope startLine="585" endLine="639">
            <declaration type="double" name="ra" />
            <scope startLine="589" endLine="592" />
            <scope startLine="595" endLine="599" />
            <scope startLine="599" endLine="638">
              <scope startLine="601" endLine="605" />
              <scope startLine="605" endLine="627">
                <scope startLine="613" endLine="615" />
                <scope startLine="619" endLine="622" />
                <scope startLine="622" endLine="626" />
              </scope>
              <scope startLine="632" endLine="637">
                <scope startLine="633" endLine="636" />
              </scope>
            </scope>
          </scope>
        </scope>
        <comment>Real vector</comment>
        <comment>Solve real equations</comment>
        <comment>Overflow control</comment>
        <comment>Complex vector</comment>
        <comment>Last vector component imaginary so matrix is triangular</comment>
        <comment>Solve complex equations</comment>
        <comment>Overflow control</comment>
      </scope>
      <scope startLine="645" endLine="651">
        <scope startLine="646" endLine="650">
          <scope startLine="647" endLine="649" />
        </scope>
      </scope>
      <scope startLine="655" endLine="663">
        <scope startLine="656" endLine="662">
          <scope startLine="658" endLine="660" />
        </scope>
      </scope>
      <comment>This is derived from the Algol procedure hqr2,</comment>
      <comment>by Martin and Wilkinson, Handbook for Auto. Comp.,</comment>
      <comment>Vol.ii-Linear Algebra, and the corresponding</comment>
      <comment>Fortran subroutine in EISPACK.</comment>
      <comment>Initialize</comment>
      <comment>Store roots isolated by balanc and compute matrix norm</comment>
      <comment>Outer loop over eigenvalue index</comment>
      <comment>Backsubstitute to find vectors of upper triangular form</comment>
      <comment>Vectors of isolated roots</comment>
      <comment>Back transformation to get eigenvectors of original matrix</comment>
    </method>
    <method type="void" name="orthes" startLine="666" endLine="755">
      <declaration type="int" name="low" />
      <declaration type="int" name="high" />
      <scope startLine="676" endLine="727">
        <declaration type="double" name="scale" />
        <scope startLine="681" endLine="683" />
        <scope startLine="684" endLine="726">
          <declaration type="double" name="h" />
          <scope startLine="689" endLine="692" />
          <declaration type="double" name="g" />
          <scope startLine="694" endLine="696" />
          <scope startLine="703" endLine="712">
            <declaration type="double" name="f" />
            <scope startLine="705" endLine="707" />
            <scope startLine="709" endLine="711" />
          </scope>
          <scope startLine="714" endLine="723">
            <declaration type="double" name="f" />
            <scope startLine="716" endLine="718" />
            <scope startLine="720" endLine="722" />
          </scope>
        </scope>
        <comment>Scale column.</comment>
        <comment>Compute Householder transformation.</comment>
        <comment>Apply Householder similarity transformation</comment>
        <comment>H = (I-u*u'/h)*H*(I-u*u')/h)</comment>
      </scope>
      <scope startLine="731" endLine="735">
        <scope startLine="732" endLine="734" />
      </scope>
      <scope startLine="737" endLine="754">
        <scope startLine="738" endLine="753">
          <scope startLine="739" endLine="741" />
          <scope startLine="742" endLine="752">
            <declaration type="double" name="g" />
            <scope startLine="744" endLine="746" />
            <scope startLine="749" endLine="751" />
          </scope>
        </scope>
        <comment>Double division avoids possible underflow</comment>
      </scope>
      <comment>This is derived from the Algol procedures orthes and ortran,</comment>
      <comment>by Martin and Wilkinson, Handbook for Auto. Comp.,</comment>
      <comment>Vol.ii-Linear Algebra, and the corresponding</comment>
      <comment>Fortran subroutines in EISPACK.</comment>
      <comment>Accumulate transformations (Algol's ortran).</comment>
    </method>
    <method type="void" name="tql2" startLine="757" endLine="873">
      <scope startLine="764" endLine="766" />
      <declaration type="double" name="f" />
      <declaration type="double" name="tst1" />
      <declaration type="double" name="eps" />
      <scope startLine="772" endLine="850">
        <declaration type="int" name="m" />
        <scope startLine="778" endLine="783">
          <scope startLine="779" endLine="781" />
        </scope>
        <scope startLine="788" endLine="847">
          <declaration type="int" name="iter" />
          <scope startLine="790" endLine="846">
            <declaration type="double" name="g" />
            <declaration type="double" name="p" />
            <declaration type="double" name="r" />
            <scope startLine="798" endLine="800" />
            <declaration type="double" name="dl1" />
            <declaration type="double" name="h" />
            <scope startLine="805" endLine="807" />
            <declaration type="double" name="c" />
            <declaration type="double" name="c2" />
            <declaration type="double" name="c3" />
            <declaration type="double" name="el1" />
            <declaration type="double" name="s" />
            <declaration type="double" name="s2" />
            <scope startLine="819" endLine="839">
              <scope startLine="834" endLine="838" />
            </scope>
          </scope>
        </scope>
        <comment>Find small subdiagonal element</comment>
        <comment>If m == l, d[l] is an eigenvalue,</comment>
        <comment>otherwise, iterate.</comment>
        <comment>(Could check iteration count here.)</comment>
        <comment>Compute implicit shift</comment>
        <comment>Implicit QL transformation.</comment>
        <comment>Accumulate transformation.</comment>
        <comment>Check for convergence.</comment>
      </scope>
      <scope startLine="854" endLine="872">
        <declaration type="int" name="k" />
        <declaration type="double" name="p" />
        <scope startLine="857" endLine="862">
          <scope startLine="858" endLine="861" />
        </scope>
        <scope startLine="863" endLine="871">
          <scope startLine="866" endLine="870" />
        </scope>
      </scope>
      <comment>This is derived from the Algol procedures tql2, by</comment>
      <comment>Bowdler, Martin, Reinsch, and Wilkinson, Handbook for</comment>
      <comment>Auto. Comp., Vol.ii-Linear Algebra, and the corresponding</comment>
      <comment>Fortran subroutine in EISPACK.</comment>
      <comment>Sort eigenvalues and corresponding vectors.</comment>
    </method>
    <method type="void" name="tred2" startLine="875" endLine="988">
      <scope startLine="882" endLine="884" />
      <scope startLine="888" endLine="956">
        <declaration type="double" name="scale" />
        <declaration type="double" name="h" />
        <scope startLine="894" endLine="896" />
        <scope startLine="897" endLine="904">
          <scope startLine="899" endLine="903" />
        </scope>
        <scope startLine="904" endLine="954">
          <scope startLine="908" endLine="911" />
          <declaration type="double" name="f" />
          <declaration type="double" name="g" />
          <scope startLine="914" endLine="916" />
          <scope startLine="920" endLine="922" />
          <scope startLine="926" endLine="935">
            <scope startLine="930" endLine="933" />
          </scope>
          <scope startLine="937" endLine="940" />
          <declaration type="double" name="hh" />
          <scope startLine="942" endLine="944" />
          <scope startLine="945" endLine="953">
            <scope startLine="948" endLine="950" />
          </scope>
        </scope>
        <comment>Scale to avoid under/overflow.</comment>
        <comment>Generate Householder vector.</comment>
        <comment>Apply similarity transformation to remaining columns.</comment>
      </scope>
      <scope startLine="960" endLine="981">
        <declaration type="double" name="h" />
        <scope startLine="964" endLine="977">
          <scope startLine="965" endLine="967" />
          <scope startLine="968" endLine="976">
            <declaration type="double" name="g" />
            <scope startLine="970" endLine="972" />
            <scope startLine="973" endLine="975" />
          </scope>
        </scope>
        <scope startLine="978" endLine="980" />
      </scope>
      <scope startLine="982" endLine="985" />
      <comment>This is derived from the Algol procedures tred2 by</comment>
      <comment>Bowdler, Martin, Reinsch, and Wilkinson, Handbook for</comment>
      <comment>Auto. Comp., Vol.ii-Linear Algebra, and the corresponding</comment>
      <comment>Fortran subroutine in EISPACK.</comment>
      <comment>Householder reduction to tridiagonal form.</comment>
      <comment>Accumulate transformations.</comment>
    </method>
    <method type="boolean" name="isSymmetric" startLine="990" endLine="992" />
    <comment>------------------------
Class variables
 ------------------------</comment>
    <comment>------------------------
Private Methods
 ------------------------</comment>
    <comment>Symmetric Householder reduction to tridiagonal form.</comment>
    <comment>Symmetric tridiagonal QL algorithm.</comment>
    <comment>Nonsymmetric reduction to Hessenberg form.</comment>
    <comment>Complex scalar division.</comment>
    <comment>Nonsymmetric reduction from Hessenberg to real Schur form.</comment>
    <comment>------------------------
Constructor
 ------------------------</comment>
    <comment>------------------------
Public Methods
 ------------------------</comment>
  </class>
</source>
