<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.matrix.jama">
  <import name="java.io.BufferedReader" />
  <import name="java.io.PrintWriter" />
  <import name="java.io.StreamTokenizer" />
  <import name="java.text.DecimalFormat" />
  <import name="java.text.DecimalFormatSymbols" />
  <import name="java.text.NumberFormat" />
  <import name="java.util.Locale" />
  <class name="Matrix" startLine="11">
    <implements name="Cloneable" />
    <implements name="java.io.Serializable" />
    <javadoc>
      <text>* Jama = Java Matrix class.
 * <P>
 * The Java Matrix Class provides the fundamental operations of numerical
 * linear algebra.  Various constructors create Matrices from two dimensional
 * arrays of double precision floating point numbers.  Various "gets" and
 * "sets" provide access to submatrices and matrix elements.  Several methods 
 * implement basic matrix arithmetic, including matrix addition and
 * multiplication, matrix norms, and element-by-element array operations.
 * Methods for reading and printing matrices are also included.  All the
 * operations in this version of the Matrix Class involve real matrices.
 * Complex matrices may be handled in a future version.
 * <P>
 * Five fundamental matrix decompositions, which consist of pairs or triples
 * of matrices, permutation vectors, and the like, produce results in five
 * decomposition classes.  These decompositions are accessed by the Matrix
 * class to compute solutions of simultaneous linear equations, determinants,
 * inverses and other matrix functions.  The five decompositions are:
 * <P><UL>
 * <LI>Cholesky Decomposition of symmetric, positive definite matrices.
 * <LI>LU Decomposition of rectangular matrices.
 * <LI>QR Decomposition of rectangular matrices.
 * <LI>Singular Value Decomposition of rectangular matrices.
 * <LI>Eigenvalue Decomposition of both symmetric and nonsymmetric square matrices.
 * </UL>
 * <DL>
 * <DT><B>Example of use:</B></DT>
 * <P>
 * <DD>Solve a linear system A x = b and compute the residual norm, ||b - A x||.
 * <P><PRE>
 * double[][] vals = {{1.,2.,3},{4.,5.,6.},{7.,8.,10.}};
 * Matrix A = new Matrix(vals);
 * Matrix b = Matrix.random(3,1);
 * Matrix x = A.solve(b);
 * Matrix r = A.times(x).minus(b);
 * double rnorm = r.normInf();
 * </PRE></DD>
 * </DL></text>
      <author>The MathWorks, Inc. and the National Institute of Standards and Technology.</author>
      <version>5 August 1998</version>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Construct a matrix from a copy of a 2-D array.</text>
      <param>A    Two-dimensional array of doubles.</param>
      <exception>IllegalArgumentException All rows must have the same length</exception>
    </javadoc>
    <method type="Matrix" name="constructWithCopy" startLine="67" endLine="81">
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <scope startLine="72" endLine="79">
        <scope startLine="73" endLine="75" />
        <scope startLine="76" endLine="78" />
      </scope>
    </method>
    <javadoc>
      <text>* Generate identity matrix</text>
      <param>m    Number of rows.</param>
      <param>n    Number of colums.</param>
      <return>An m-by-n matrix with ones on the diagonal and zeros elsewhere.</return>
    </javadoc>
    <method type="Matrix" name="identity" startLine="93" endLine="102">
      <declaration type="Matrix" name="A" />
      <declaration type="double[][]" name="X" />
      <scope startLine="96" endLine="100">
        <scope startLine="97" endLine="99" />
      </scope>
    </method>
    <javadoc>
      <text>* Generate matrix with random elements</text>
      <param>m    Number of rows.</param>
      <param>n    Number of colums.</param>
      <return>An m-by-n matrix with uniformly distributed random elements.</return>
    </javadoc>
    <method type="Matrix" name="random" startLine="110" endLine="119">
      <declaration type="Matrix" name="A" />
      <declaration type="double[][]" name="X" />
      <scope startLine="113" endLine="117">
        <scope startLine="114" endLine="116" />
      </scope>
    </method>
    <javadoc>
      <text>* Read a matrix from a stream.  The format is the same the print method,
 * so printed matrices can be read back in (provided they were printed using
 * US Locale).  Elements are separated by
 * whitespace, all the elements for each row appear on a single line,
 * the last row is followed by a blank line.</text>
      <param>input the input stream.</param>
    </javadoc>
    <method type="Matrix" name="read" startLine="129" endLine="180">
      <declaration type="StreamTokenizer" name="tokenizer" />
      <declaration type="java.util.Vector<Double>" name="vD" />
      <scope startLine="145" endLine="147" />
      <scope startLine="148" endLine="150" />
      <scope startLine="151" endLine="153">
        <comment>Read & store 1st row.</comment>
      </scope>
      <declaration type="int" name="n" />
      <declaration type="double[]" name="row" />
      <scope startLine="157" endLine="159" />
      <declaration type="java.util.Vector<double[]>[]" name="v" />
      <scope startLine="162" endLine="175">
        <declaration type="int" name="j" />
        <scope startLine="166" endLine="171">
          <scope startLine="167" endLine="169" />
        </scope>
        <scope startLine="172" endLine="174" />
        <comment>While non-empty lines</comment>
      </scope>
      <declaration type="int" name="m" />
      <declaration type="double[][][]" name="A" />
      <comment>Although StreamTokenizer will parse numbers, it doesn't recognize</comment>
      <comment>scientific notation (E or D); however, Double.valueOf does.</comment>
      <comment>The strategy here is to disable StreamTokenizer's number parsing.</comment>
      <comment>We'll only get whitespace delimited words, EOL's and EOF's.</comment>
      <comment>These words should all be numbers, for Double.valueOf to parse.</comment>
      <comment>Ignore initial empty lines</comment>
      <comment>Now we've got the number of columns!</comment>
      <comment>Start storing rows instead of columns.</comment>
      <comment>Now we've got the number of rows.</comment>
      <comment>copy the rows out of the vector</comment>
    </method>
    <javadoc>
      <text>* Array for internal storage of elements.</text>
      <serial>internal array storage.</serial>
    </javadoc>
    <declaration type="double[][]" name="A" />
    <javadoc>
      <text>* Row and column dimensions.</text>
      <serial>row dimension.</serial>
      <serial>column dimension.</serial>
    </javadoc>
    <declaration type="int" name="m" />
    <javadoc>
      <text>* Construct a matrix from a one-dimensional packed array</text>
      <param>vals One-dimensional array of doubles, packed by columns (ala Fortran).</param>
      <param>m    Number of rows.</param>
      <exception>IllegalArgumentException Array length must be a multiple of m.</exception>
    </javadoc>
    <method type="constructor" name="Matrix" startLine="203" endLine="215">
      <scope startLine="206" endLine="208" />
      <scope startLine="210" endLine="214">
        <scope startLine="211" endLine="213" />
      </scope>
    </method>
    <javadoc>
      <text>* Construct a matrix from a 2-D array.</text>
      <param>A    Two-dimensional array of doubles.</param>
      <exception>IllegalArgumentException All rows must have the same length</exception>
      <see>#constructWithCopy</see>
    </javadoc>
    <method type="constructor" name="Matrix" startLine="223" endLine="232">
      <scope startLine="226" endLine="230">
        <scope startLine="227" endLine="229" />
      </scope>
    </method>
    <javadoc>
      <text>* Construct a matrix quickly without checking arguments.</text>
      <param>A    Two-dimensional array of doubles.</param>
      <param>m    Number of rows.</param>
      <param>n    Number of colums.</param>
    </javadoc>
    <method type="constructor" name="Matrix" startLine="240" endLine="244" />
    <javadoc>
      <text>* Construct an m-by-n matrix of zeros.</text>
      <param>m    Number of rows.</param>
      <param>n    Number of colums.</param>
    </javadoc>
    <method type="constructor" name="Matrix" startLine="251" endLine="255" />
    <javadoc>
      <text>* Construct an m-by-n constant matrix.</text>
      <param>m    Number of rows.</param>
      <param>n    Number of colums.</param>
      <param>s    Fill the matrix with this scalar value.</param>
    </javadoc>
    <method type="constructor" name="Matrix" startLine="263" endLine="272">
      <scope startLine="267" endLine="271">
        <scope startLine="268" endLine="270" />
      </scope>
    </method>
    <javadoc>
      <text>* Element-by-element left division, C = A.\B</text>
      <param>B    another matrix</param>
      <return>A.\B</return>
    </javadoc>
    <method type="Matrix" name="arrayLeftDivide" startLine="279" endLine="289">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <scope startLine="283" endLine="287">
        <scope startLine="284" endLine="286" />
      </scope>
    </method>
    <javadoc>
      <text>* Element-by-element left division in place, A = A.\B</text>
      <param>B    another matrix</param>
      <return>A.\B</return>
    </javadoc>
    <method type="Matrix" name="arrayLeftDivideEquals" startLine="296" endLine="304">
      <scope startLine="298" endLine="302">
        <scope startLine="299" endLine="301" />
      </scope>
    </method>
    <javadoc>
      <text>* Element-by-element right division, C = A./B</text>
      <param>B    another matrix</param>
      <return>A./B</return>
    </javadoc>
    <method type="Matrix" name="arrayRightDivide" startLine="311" endLine="321">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <scope startLine="315" endLine="319">
        <scope startLine="316" endLine="318" />
      </scope>
    </method>
    <javadoc>
      <text>* Element-by-element right division in place, A = A./B</text>
      <param>B    another matrix</param>
      <return>A./B</return>
    </javadoc>
    <method type="Matrix" name="arrayRightDivideEquals" startLine="328" endLine="336">
      <scope startLine="330" endLine="334">
        <scope startLine="331" endLine="333" />
      </scope>
    </method>
    <javadoc>
      <text>* Element-by-element multiplication, C = A.*B</text>
      <param>B    another matrix</param>
      <return>A.*B</return>
    </javadoc>
    <method type="Matrix" name="arrayTimes" startLine="343" endLine="353">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <scope startLine="347" endLine="351">
        <scope startLine="348" endLine="350" />
      </scope>
    </method>
    <javadoc>
      <text>* Element-by-element multiplication in place, A = A.*B</text>
      <param>B    another matrix</param>
      <return>A.*B</return>
    </javadoc>
    <method type="Matrix" name="arrayTimesEquals" startLine="360" endLine="368">
      <scope startLine="362" endLine="366">
        <scope startLine="363" endLine="365" />
      </scope>
    </method>
    <javadoc>
      <text>* Cholesky Decomposition</text>
      <return>CholeskyDecomposition</return>
      <see>CholeskyDecomposition</see>
    </javadoc>
    <method type="CholeskyDecomposition" name="chol" startLine="375" endLine="377" />
    <javadoc>
      <text>* Clone the Matrix object.</text>
    </javadoc>
    <method type="Object" name="clone" startLine="383" endLine="385" />
    <javadoc>
      <text>* Matrix condition (2 norm)</text>
      <return>ratio of largest to smallest singular value.</return>
    </javadoc>
    <method type="double" name="cond" startLine="391" endLine="393" />
    <javadoc>
      <text>* Make a deep copy of a matrix</text>
    </javadoc>
    <method type="Matrix" name="copy" startLine="398" endLine="407">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <scope startLine="401" endLine="405">
        <scope startLine="402" endLine="404" />
      </scope>
    </method>
    <javadoc>
      <text>* Matrix determinant</text>
      <return>determinant</return>
    </javadoc>
    <method type="double" name="det" startLine="413" endLine="415" />
    <javadoc>
      <text>* Eigenvalue Decomposition</text>
      <return>EigenvalueDecomposition</return>
      <see>EigenvalueDecomposition</see>
    </javadoc>
    <method type="EigenvalueDecomposition" name="eig" startLine="422" endLine="424" />
    <javadoc>
      <text>* Get a single element.</text>
      <param>i    Row index.</param>
      <param>j    Column index.</param>
      <return>A(i,j)</return>
      <exception>ArrayIndexOutOfBoundsException</exception>
    </javadoc>
    <method type="double" name="get" startLine="433" endLine="435" />
    <javadoc>
      <text>* Access the internal two-dimensional array.</text>
      <return>Pointer to the two-dimensional array of matrix elements.</return>
    </javadoc>
    <method type="double[][]" name="getArray" startLine="441" endLine="443" />
    <javadoc>
      <text>* Copy the internal two-dimensional array.</text>
      <return>Two-dimensional array copy of matrix elements.</return>
    </javadoc>
    <method type="double[][]" name="getArrayCopy" startLine="449" endLine="457">
      <declaration type="double[][]" name="C" />
      <scope startLine="451" endLine="455">
        <scope startLine="452" endLine="454" />
      </scope>
    </method>
    <javadoc>
      <text>* Get column dimension.</text>
      <return>n, the number of columns.</return>
    </javadoc>
    <method type="int" name="getColumnDimension" startLine="463" endLine="465" />
    <javadoc>
      <text>* Make a one-dimensional column packed copy of the internal array.</text>
      <return>Matrix elements packed in a one-dimensional array by columns.</return>
    </javadoc>
    <method type="double[]" name="getColumnPackedCopy" startLine="471" endLine="479">
      <declaration type="double[]" name="vals" />
      <scope startLine="473" endLine="477">
        <scope startLine="474" endLine="476" />
      </scope>
    </method>
    <javadoc>
      <text>* Get a submatrix.</text>
      <param>i0   Initial row index</param>
      <param>i1   Final row index</param>
      <param>j0   Initial column index</param>
      <param>j1   Final column index</param>
      <return>A(i0:i1,j0:j1)</return>
      <exception>ArrayIndexOutOfBoundsException Submatrix indices</exception>
    </javadoc>
    <method type="Matrix" name="getMatrix" startLine="490" endLine="503">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="B" />
      <scope startLine="493" endLine="499">
        <scope startLine="494" endLine="498">
          <scope startLine="495" endLine="497" />
        </scope>
      </scope>
      <scope startLine="499" endLine="501" />
    </method>
    <javadoc>
      <text>* Get a submatrix.</text>
      <param>i0   Initial row index</param>
      <param>i1   Final row index</param>
      <param>c    Array of column indices.</param>
      <return>A(i0:i1,c(:))</return>
      <exception>ArrayIndexOutOfBoundsException Submatrix indices</exception>
    </javadoc>
    <method type="Matrix" name="getMatrix" startLine="513" endLine="526">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="B" />
      <scope startLine="516" endLine="522">
        <scope startLine="517" endLine="521">
          <scope startLine="518" endLine="520" />
        </scope>
      </scope>
      <scope startLine="522" endLine="524" />
    </method>
    <javadoc>
      <text>* Get a submatrix.</text>
      <param>r    Array of row indices.</param>
      <param>j0   Initial column index</param>
      <param>j1   Final column index</param>
      <return>A(r(:),j0:j1)</return>
      <exception>ArrayIndexOutOfBoundsException Submatrix indices</exception>
    </javadoc>
    <method type="Matrix" name="getMatrix" startLine="536" endLine="549">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="B" />
      <scope startLine="539" endLine="545">
        <scope startLine="540" endLine="544">
          <scope startLine="541" endLine="543" />
        </scope>
      </scope>
      <scope startLine="545" endLine="547" />
    </method>
    <javadoc>
      <text>* Get a submatrix.</text>
      <param>r    Array of row indices.</param>
      <param>c    Array of column indices.</param>
      <return>A(r(:),c(:))</return>
      <exception>ArrayIndexOutOfBoundsException Submatrix indices</exception>
    </javadoc>
    <method type="Matrix" name="getMatrix" startLine="558" endLine="571">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="B" />
      <scope startLine="561" endLine="567">
        <scope startLine="562" endLine="566">
          <scope startLine="563" endLine="565" />
        </scope>
      </scope>
      <scope startLine="567" endLine="569" />
    </method>
    <javadoc>
      <text>* Get row dimension.</text>
      <return>m, the number of rows.</return>
    </javadoc>
    <method type="int" name="getRowDimension" startLine="577" endLine="579" />
    <javadoc>
      <text>* Make a one-dimensional row packed copy of the internal array.</text>
      <return>Matrix elements packed in a one-dimensional array by rows.</return>
    </javadoc>
    <method type="double[]" name="getRowPackedCopy" startLine="585" endLine="593">
      <declaration type="double[]" name="vals" />
      <scope startLine="587" endLine="591">
        <scope startLine="588" endLine="590" />
      </scope>
    </method>
    <javadoc>
      <text>* Matrix inverse or pseudoinverse</text>
      <return>inverse(A) if A is square, pseudoinverse otherwise.</return>
    </javadoc>
    <method type="Matrix" name="inverse" startLine="599" endLine="601" />
    <javadoc>
      <text>* LU Decomposition</text>
      <return>LUDecomposition</return>
      <see>LUDecomposition</see>
    </javadoc>
    <method type="LUDecomposition" name="lu" startLine="608" endLine="610" />
    <javadoc>
      <text>* C = A - B</text>
      <param>B    another matrix</param>
      <return>A - B</return>
    </javadoc>
    <method type="Matrix" name="minus" startLine="617" endLine="627">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <scope startLine="621" endLine="625">
        <scope startLine="622" endLine="624" />
      </scope>
    </method>
    <javadoc>
      <text>* A = A - B</text>
      <param>B    another matrix</param>
      <return>A - B</return>
    </javadoc>
    <method type="Matrix" name="minusEquals" startLine="634" endLine="642">
      <scope startLine="636" endLine="640">
        <scope startLine="637" endLine="639" />
      </scope>
    </method>
    <javadoc>
      <text>* One norm</text>
      <return>maximum column sum.</return>
    </javadoc>
    <method type="double" name="norm1" startLine="648" endLine="658">
      <declaration type="double" name="f" />
      <scope startLine="650" endLine="656">
        <declaration type="double" name="s" />
        <scope startLine="652" endLine="654" />
      </scope>
    </method>
    <javadoc>
      <text>* Two norm</text>
      <return>maximum singular value.</return>
    </javadoc>
    <method type="double" name="norm2" startLine="664" endLine="666" />
    <javadoc>
      <text>* Frobenius norm</text>
      <return>sqrt of sum of squares of all elements.</return>
    </javadoc>
    <method type="double" name="normF" startLine="672" endLine="680">
      <declaration type="double" name="f" />
      <scope startLine="674" endLine="678">
        <scope startLine="675" endLine="677" />
      </scope>
    </method>
    <javadoc>
      <text>* Infinity norm</text>
      <return>maximum row sum.</return>
    </javadoc>
    <method type="double" name="normInf" startLine="686" endLine="696">
      <declaration type="double" name="f" />
      <scope startLine="688" endLine="694">
        <declaration type="double" name="s" />
        <scope startLine="690" endLine="692" />
      </scope>
    </method>
    <javadoc>
      <text>* C = A + B</text>
      <param>B    another matrix</param>
      <return>A + B</return>
    </javadoc>
    <method type="Matrix" name="plus" startLine="703" endLine="713">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <scope startLine="707" endLine="711">
        <scope startLine="708" endLine="710" />
      </scope>
    </method>
    <javadoc>
      <text>* A = A + B</text>
      <param>B    another matrix</param>
      <return>A + B</return>
    </javadoc>
    <method type="Matrix" name="plusEquals" startLine="720" endLine="728">
      <scope startLine="722" endLine="726">
        <scope startLine="723" endLine="725" />
      </scope>
    </method>
    <javadoc>
      <text>* Print the matrix to stdout.   Line the elements up in columns
 * with a Fortran-like 'Fw.d' style format.</text>
      <param>w    Column width.</param>
      <param>d    Number of digits after the decimal.</param>
    </javadoc>
    <method type="void" name="print" startLine="736" endLine="738" />
    <javadoc>
      <text>* Print the matrix to stdout.  Line the elements up in columns.
 * Use the format object, and right justify within columns of width
 * characters.
 * Note that is the matrix is to be read back in, you probably will want
 * to use a NumberFormat that is set to US Locale.</text>
      <param>format A  Formatting object for individual elements.</param>
      <param>width     Field width for each column.</param>
      <see>java.text.DecimalFormat#setDecimalFormatSymbols</see>
    </javadoc>
    <method type="void" name="print" startLine="750" endLine="752" />
    <javadoc>
      <text>* Print the matrix to the output stream.   Line the elements up in
 * columns with a Fortran-like 'Fw.d' style format.</text>
      <param>output Output stream.</param>
      <param>w      Column width.</param>
      <param>d      Number of digits after the decimal.</param>
    </javadoc>
    <method type="void" name="print" startLine="761" endLine="769">
      <declaration type="DecimalFormat" name="format" />
    </method>
    <javadoc>
      <text>* Print the matrix to the output stream.  Line the elements up in columns.
 * Use the format object, and right justify within columns of width
 * characters.
 * Note that is the matrix is to be read back in, you probably will want
 * to use a NumberFormat that is set to US Locale.</text>
      <param>output the output stream.</param>
      <param>format A formatting object to format the matrix elements</param>
      <param>width  Column width.</param>
      <see>java.text.DecimalFormat#setDecimalFormatSymbols</see>
    </javadoc>
    <method type="void" name="print" startLine="782" endLine="796">
      <scope startLine="784" endLine="794">
        <scope startLine="785" endLine="792">
          <declaration type="String" name="s" />
          <declaration type="int" name="padding" />
          <scope startLine="788" endLine="790" />
        </scope>
        <comment>format the number</comment>
        <comment>At _least_ 1 space</comment>
      </scope>
      <comment>start on new line.</comment>
      <comment>end with blank line.</comment>
    </method>
    <javadoc>
      <text>* QR Decomposition</text>
      <return>QRDecomposition</return>
      <see>QRDecomposition</see>
    </javadoc>
    <method type="QRDecomposition" name="qr" startLine="803" endLine="805" />
    <javadoc>
      <text>* Matrix rank</text>
      <return>effective numerical rank, obtained from SVD.</return>
    </javadoc>
    <method type="int" name="rank" startLine="811" endLine="813" />
    <javadoc>
      <text>* Set a single element.</text>
      <param>i    Row index.</param>
      <param>j    Column index.</param>
      <param>s    A(i,j).</param>
      <exception>ArrayIndexOutOfBoundsException</exception>
    </javadoc>
    <method type="void" name="set" startLine="822" endLine="824" />
    <javadoc>
      <text>* Set a submatrix.</text>
      <param>i0   Initial row index</param>
      <param>i1   Final row index</param>
      <param>j0   Initial column index</param>
      <param>j1   Final column index</param>
      <param>X    A(i0:i1,j0:j1)</param>
      <exception>ArrayIndexOutOfBoundsException Submatrix indices</exception>
    </javadoc>
    <method type="void" name="setMatrix" startLine="835" endLine="845">
      <scope startLine="836" endLine="842">
        <scope startLine="837" endLine="841">
          <scope startLine="838" endLine="840" />
        </scope>
      </scope>
      <scope startLine="842" endLine="844" />
    </method>
    <javadoc>
      <text>* Set a submatrix.</text>
      <param>i0   Initial row index</param>
      <param>i1   Final row index</param>
      <param>c    Array of column indices.</param>
      <param>X    A(i0:i1,c(:))</param>
      <exception>ArrayIndexOutOfBoundsException Submatrix indices</exception>
    </javadoc>
    <method type="void" name="setMatrix" startLine="855" endLine="865">
      <scope startLine="856" endLine="862">
        <scope startLine="857" endLine="861">
          <scope startLine="858" endLine="860" />
        </scope>
      </scope>
      <scope startLine="862" endLine="864" />
    </method>
    <javadoc>
      <text>* Set a submatrix.</text>
      <param>r    Array of row indices.</param>
      <param>j0   Initial column index</param>
      <param>j1   Final column index</param>
      <param>X    A(r(:),j0:j1)</param>
      <exception>ArrayIndexOutOfBoundsException Submatrix indices</exception>
    </javadoc>
    <method type="void" name="setMatrix" startLine="875" endLine="885">
      <scope startLine="876" endLine="882">
        <scope startLine="877" endLine="881">
          <scope startLine="878" endLine="880" />
        </scope>
      </scope>
      <scope startLine="882" endLine="884" />
    </method>
    <javadoc>
      <text>* Set a submatrix.</text>
      <param>r    Array of row indices.</param>
      <param>c    Array of column indices.</param>
      <param>X    A(r(:),c(:))</param>
      <exception>ArrayIndexOutOfBoundsException Submatrix indices</exception>
    </javadoc>
    <method type="void" name="setMatrix" startLine="894" endLine="904">
      <scope startLine="895" endLine="901">
        <scope startLine="896" endLine="900">
          <scope startLine="897" endLine="899" />
        </scope>
      </scope>
      <scope startLine="901" endLine="903" />
    </method>
    <javadoc>
      <text>* Solve A*X = B</text>
      <param>B    right hand side</param>
      <return>solution if A is square, least squares solution otherwise</return>
    </javadoc>
    <method type="Matrix" name="solve" startLine="911" endLine="913" />
    <javadoc>
      <text>* Solve X*A = B, which is also A'*X' = B'</text>
      <param>B    right hand side</param>
      <return>solution if A is square, least squares solution otherwise.</return>
    </javadoc>
    <method type="Matrix" name="solveTranspose" startLine="920" endLine="922" />
    <javadoc>
      <text>* Singular Value Decomposition</text>
      <return>SingularValueDecomposition</return>
      <see>SingularValueDecomposition</see>
    </javadoc>
    <method type="SingularValueDecomposition" name="svd" startLine="929" endLine="931" />
    <javadoc>
      <text>* Multiply a matrix by a scalar, C = s*A</text>
      <param>s    scalar</param>
      <return>s*A</return>
    </javadoc>
    <method type="Matrix" name="times" startLine="938" endLine="947">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <scope startLine="941" endLine="945">
        <scope startLine="942" endLine="944" />
      </scope>
    </method>
    <javadoc>
      <text>* Linear algebraic matrix multiplication, A * B</text>
      <param>B    another matrix</param>
      <return>Matrix product, A * B</return>
      <exception>IllegalArgumentException Matrix inner dimensions must agree.</exception>
    </javadoc>
    <method type="Matrix" name="times" startLine="955" endLine="976">
      <scope startLine="956" endLine="958" />
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <declaration type="double[]" name="Bcolj" />
      <scope startLine="962" endLine="974">
        <scope startLine="963" endLine="965" />
        <scope startLine="966" endLine="973">
          <declaration type="double[]" name="Arowi" />
          <declaration type="double" name="s" />
          <scope startLine="969" endLine="971" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Multiply a matrix by a scalar in place, A = s*A</text>
      <param>s    scalar</param>
      <return>replace A by s*A</return>
    </javadoc>
    <method type="Matrix" name="timesEquals" startLine="983" endLine="990">
      <scope startLine="984" endLine="988">
        <scope startLine="985" endLine="987" />
      </scope>
    </method>
    <javadoc>
      <text>* Matrix trace.</text>
      <return>sum of the diagonal elements.</return>
    </javadoc>
    <method type="double" name="trace" startLine="1001" endLine="1007">
      <declaration type="double" name="t" />
      <scope startLine="1003" endLine="1005" />
    </method>
    <javadoc>
      <text>* Matrix transpose.</text>
      <return>A'</return>
    </javadoc>
    <method type="Matrix" name="transpose" startLine="1013" endLine="1022">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <scope startLine="1016" endLine="1020">
        <scope startLine="1017" endLine="1019" />
      </scope>
    </method>
    <javadoc>
      <text>* Unary minus</text>
      <return>-A</return>
    </javadoc>
    <method type="Matrix" name="uminus" startLine="1032" endLine="1041">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <scope startLine="1035" endLine="1039">
        <scope startLine="1036" endLine="1038" />
      </scope>
    </method>
    <javadoc>
      <text>* Check if size(A) == size(B)</text>
    </javadoc>
    <method type="void" name="checkMatrixDimensions" startLine="1045" endLine="1049">
      <scope startLine="1046" endLine="1048" />
    </method>
    <comment>------------------------
Class variables
 ------------------------</comment>
    <comment>------------------------
Constructors
 ------------------------</comment>
    <comment>------------------------
Public Methods
 ------------------------</comment>
    <comment>DecimalFormat is a little disappointing coming from Fortran or C's printf.</comment>
    <comment>Since it doesn't pad on the left, the elements will come out different</comment>
    <comment>widths.  Consequently, we'll pass the desired column width in as an</comment>
    <comment>argument and do the extra padding ourselves.</comment>
    <comment>------------------------
Private Methods
 ------------------------</comment>
  </class>
</source>
