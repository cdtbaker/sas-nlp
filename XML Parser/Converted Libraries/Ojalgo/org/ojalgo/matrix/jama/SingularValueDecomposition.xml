<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.matrix.jama">
  <class name="SingularValueDecomposition" startLine="3">
    <implements name="java.io.Serializable" />
    <javadoc>
      <text>* Singular Value Decomposition.
 * <P>
 * For an m-by-n matrix A with m >= n, the singular value decomposition is
 * an m-by-n orthogonal matrix U, an n-by-n diagonal matrix S, and
 * an n-by-n orthogonal matrix V so that A = U*S*V'.
 * <P>
 * The singular values, sigma[k] = S[k][k], are ordered so that
 * sigma[0] >= sigma[1] >= ... >= sigma[n-1].
 * <P>
 * The singular value decompostion always exists, so the constructor will
 * never fail.  The matrix condition number and the effective numerical
 * rank can be computed from this decomposition.</text>
    </javadoc>
    <javadoc>
      <text>* Arrays for internal storage of U and V.</text>
      <serial>internal storage of U.</serial>
      <serial>internal storage of V.</serial>
    </javadoc>
    <declaration type="double[][]" name="U" />
    <javadoc>
      <text>* Array for internal storage of singular values.</text>
      <serial>internal storage of singular values.</serial>
    </javadoc>
    <declaration type="double[]" name="s" />
    <javadoc>
      <text>* Row and column dimensions.</text>
      <serial>row dimension.</serial>
      <serial>column dimension.</serial>
    </javadoc>
    <declaration type="int" name="m" />
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Construct the singular value decomposition
 * Structure to access U, S and V.</text>
      <param>Arg    Rectangular matrix</param>
    </javadoc>
    <method type="constructor" name="SingularValueDecomposition" startLine="55" endLine="57" />
    <method type="constructor" name="SingularValueDecomposition" startLine="59" endLine="478">
      <declaration type="double[][]" name="A" />
      <declaration type="int" name="nu" />
      <declaration type="double[]" name="e" />
      <declaration type="double[]" name="work" />
      <declaration type="int" name="nct" />
      <declaration type="int" name="nrt" />
      <scope startLine="84" endLine="182">
        <scope startLine="85" endLine="104">
          <scope startLine="91" endLine="93" />
          <scope startLine="94" endLine="102">
            <scope startLine="95" endLine="97" />
            <scope startLine="98" endLine="100" />
          </scope>
        </scope>
        <scope startLine="105" endLine="124">
          <scope startLine="106" endLine="118">
            <declaration type="double" name="t" />
            <scope startLine="111" endLine="113" />
            <scope startLine="115" endLine="117" />
          </scope>
        </scope>
        <scope startLine="125" endLine="133">
          <scope startLine="130" endLine="132" />
        </scope>
        <scope startLine="134" endLine="181">
          <scope startLine="140" endLine="142" />
          <scope startLine="143" endLine="151">
            <scope startLine="144" endLine="146" />
            <scope startLine="147" endLine="149" />
          </scope>
          <scope startLine="153" endLine="171">
            <scope startLine="157" endLine="159" />
            <scope startLine="160" endLine="164">
              <scope startLine="161" endLine="163" />
            </scope>
            <scope startLine="165" endLine="170">
              <declaration type="double" name="t" />
              <scope startLine="167" endLine="169" />
            </scope>
          </scope>
          <scope startLine="172" endLine="180">
            <scope startLine="177" endLine="179" />
          </scope>
        </scope>
        <comment>Compute the transformation for the k-th column and</comment>
        <comment>place the k-th diagonal in s[k].</comment>
        <comment>Compute 2-norm of k-th column without under/overflow.</comment>
        <comment>Apply the transformation.</comment>
        <comment>Place the k-th row of A into e for the</comment>
        <comment>subsequent calculation of the row transformation.</comment>
        <comment>Place the transformation in U for subsequent back</comment>
        <comment>multiplication.</comment>
        <comment>Compute the k-th row transformation and place the</comment>
        <comment>k-th super-diagonal in e[k].</comment>
        <comment>Compute 2-norm without under/overflow.</comment>
        <comment>Apply the transformation.</comment>
        <comment>Place the transformation in V for subsequent</comment>
        <comment>back multiplication.</comment>
      </scope>
      <declaration type="int" name="p" />
      <scope startLine="187" endLine="189" />
      <scope startLine="190" endLine="192" />
      <scope startLine="193" endLine="195" />
      <scope startLine="200" endLine="233">
        <scope startLine="201" endLine="206">
          <scope startLine="202" endLine="204" />
        </scope>
        <scope startLine="207" endLine="232">
          <scope startLine="208" endLine="226">
            <scope startLine="209" endLine="218">
              <declaration type="double" name="t" />
              <scope startLine="211" endLine="213" />
              <scope startLine="215" endLine="217" />
            </scope>
            <scope startLine="219" endLine="221" />
            <scope startLine="223" endLine="225" />
          </scope>
          <scope startLine="226" endLine="231">
            <scope startLine="227" endLine="229" />
          </scope>
        </scope>
      </scope>
      <scope startLine="237" endLine="256">
        <scope startLine="238" endLine="255">
          <scope startLine="239" endLine="250">
            <scope startLine="240" endLine="249">
              <declaration type="double" name="t" />
              <scope startLine="242" endLine="244" />
              <scope startLine="246" endLine="248" />
            </scope>
          </scope>
          <scope startLine="251" endLine="253" />
        </scope>
      </scope>
      <declaration type="int" name="pp" />
      <declaration type="int" name="iter" />
      <declaration type="double" name="eps" />
      <declaration type="double" name="tiny" />
      <scope startLine="264" endLine="477">
        <declaration type="int" name="k" />
        <scope startLine="279" endLine="287">
          <scope startLine="280" endLine="282" />
          <scope startLine="283" endLine="286" />
        </scope>
        <scope startLine="288" endLine="290" />
        <scope startLine="290" endLine="310">
          <declaration type="int" name="ks" />
          <scope startLine="292" endLine="301">
            <scope startLine="293" endLine="295" />
            <declaration type="double" name="t" />
            <scope startLine="297" endLine="300" />
          </scope>
          <scope startLine="302" endLine="304" />
          <scope startLine="304" endLine="306" />
          <scope startLine="306" endLine="309" />
        </scope>
        <scope startLine="319" endLine="339">
          <declaration type="double" name="f" />
          <scope startLine="322" endLine="338">
            <declaration type="double" name="t" />
            <declaration type="double" name="cs" />
            <declaration type="double" name="sn" />
            <scope startLine="327" endLine="330" />
            <scope startLine="331" endLine="337">
              <scope startLine="332" endLine="336" />
            </scope>
          </scope>
        </scope>
        <scope startLine="344" endLine="362">
          <declaration type="double" name="f" />
          <scope startLine="347" endLine="361">
            <declaration type="double" name="t" />
            <declaration type="double" name="cs" />
            <declaration type="double" name="sn" />
            <scope startLine="354" endLine="360">
              <scope startLine="355" endLine="359" />
            </scope>
          </scope>
        </scope>
        <scope startLine="367" endLine="429">
          <declaration type="double" name="scale" />
          <declaration type="double" name="sp" />
          <declaration type="double" name="spm1" />
          <declaration type="double" name="epm1" />
          <declaration type="double" name="sk" />
          <declaration type="double" name="ek" />
          <declaration type="double" name="b" />
          <declaration type="double" name="c" />
          <declaration type="double" name="shift" />
          <scope startLine="381" endLine="387">
            <scope startLine="383" endLine="385" />
          </scope>
          <declaration type="double" name="f" />
          <declaration type="double" name="g" />
          <scope startLine="393" endLine="426">
            <declaration type="double" name="t" />
            <declaration type="double" name="cs" />
            <declaration type="double" name="sn" />
            <scope startLine="397" endLine="399" />
            <scope startLine="404" endLine="410">
              <scope startLine="405" endLine="409" />
            </scope>
            <scope startLine="419" endLine="425">
              <scope startLine="420" endLine="424" />
            </scope>
          </scope>
        </scope>
        <scope startLine="434" endLine="474">
          <scope startLine="438" endLine="445">
            <scope startLine="440" endLine="444">
              <scope startLine="441" endLine="443" />
            </scope>
          </scope>
          <scope startLine="449" endLine="471">
            <scope startLine="450" endLine="452" />
            <declaration type="double" name="t" />
            <scope startLine="456" endLine="462">
              <scope startLine="457" endLine="461" />
            </scope>
            <scope startLine="463" endLine="469">
              <scope startLine="464" endLine="468" />
            </scope>
          </scope>
        </scope>
        <comment>Here is where a test for too many iterations would go.</comment>
        <comment>This section of the program inspects for</comment>
        <comment>negligible elements in the s and e arrays.  On</comment>
        <comment>completion the variables kase and k are set as follows.</comment>
        <comment>kase = 1     if s(p) and e[k-1] are negligible and k<p</comment>
        <comment>kase = 2     if s(k) is negligible and k<p</comment>
        <comment>kase = 3     if e[k-1] is negligible, k<p, and</comment>
        <comment>s(k), ..., s(p) are not negligible (qr step).</comment>
        <comment>kase = 4     if e(p-1) is negligible (convergence).</comment>
        <comment>Perform the task indicated by kase.</comment>
        <comment>Deflate negligible s(p).</comment>
        <comment>Split at negligible s(k).</comment>
        <comment>Perform one qr step.</comment>
        <comment>Calculate the shift.</comment>
        <comment>Chase zeros.</comment>
        <comment>Convergence.</comment>
        <comment>Make the singular values positive.</comment>
        <comment>Order the singular values.</comment>
      </scope>
      <comment>Derived from LINPACK code.</comment>
      <comment>Initialize.</comment>
      <comment>Apparently the failing cases are only a proper subset of (m<n),
so let's not throw error.  Correct fix to come later?
if (m<n) {
throw new IllegalArgumentException("Jama SVD only works for m >= n"); }</comment>
      <comment>Reduce A to bidiagonal form, storing the diagonal elements</comment>
      <comment>in s and the super-diagonal elements in e.</comment>
      <comment>Set up the final bidiagonal matrix or order p.</comment>
      <comment>If required, generate U.</comment>
      <comment>If required, generate V.</comment>
      <comment>Main iteration loop for the singular values.</comment>
    </method>
    <javadoc>
      <text>* Two norm condition number</text>
      <return>max(S)/min(S)</return>
    </javadoc>
    <method type="double" name="cond" startLine="484" endLine="486" />
    <javadoc>
      <text>* Return the diagonal matrix of singular values</text>
      <return>S</return>
    </javadoc>
    <method type="Matrix" name="getS" startLine="492" endLine="502">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="S" />
      <scope startLine="495" endLine="500">
        <scope startLine="496" endLine="498" />
      </scope>
    </method>
    <javadoc>
      <text>* Return the one-dimensional array of singular values</text>
      <return>diagonal of S.</return>
    </javadoc>
    <method type="double[]" name="getSingularValues" startLine="508" endLine="510" />
    <javadoc>
      <text>* Return the left singular vectors</text>
      <return>U</return>
    </javadoc>
    <method type="Matrix" name="getU" startLine="516" endLine="518" />
    <javadoc>
      <text>* Return the right singular vectors</text>
      <return>V</return>
    </javadoc>
    <method type="Matrix" name="getV" startLine="524" endLine="526" />
    <javadoc>
      <text>* Two norm</text>
      <return>max(S)</return>
    </javadoc>
    <method type="double" name="norm2" startLine="532" endLine="534" />
    <javadoc>
      <text>* Effective numerical matrix rank</text>
      <return>Number of nonnegligible singular values.</return>
    </javadoc>
    <method type="int" name="rank" startLine="540" endLine="550">
      <declaration type="double" name="eps" />
      <declaration type="double" name="tol" />
      <declaration type="int" name="r" />
      <scope startLine="544" endLine="548">
        <scope startLine="545" endLine="547" />
      </scope>
    </method>
    <comment>------------------------
Class variables
 ------------------------</comment>
    <comment>------------------------
Constructor
 ------------------------</comment>
    <comment>------------------------
Public Methods
 ------------------------</comment>
  </class>
</source>
