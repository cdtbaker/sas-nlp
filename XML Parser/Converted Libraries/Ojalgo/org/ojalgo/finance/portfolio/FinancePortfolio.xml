<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.finance.portfolio">
  <import name="static org.ojalgo.constant.PrimitiveMath.*" />
  <import name="java.math.BigDecimal" />
  <import name="java.util.List" />
  <import name="org.ojalgo.constant.PrimitiveMath" />
  <import name="org.ojalgo.function.PrimitiveFunction" />
  <import name="org.ojalgo.matrix.BasicMatrix" />
  <import name="org.ojalgo.matrix.BasicMatrix.Factory" />
  <import name="org.ojalgo.matrix.PrimitiveMatrix" />
  <import name="org.ojalgo.random.RandomUtils" />
  <import name="org.ojalgo.random.process.GeometricBrownianMotion" />
  <import name="org.ojalgo.type.StandardType" />
  <import name="org.ojalgo.type.TypeUtils" />
  <import name="org.ojalgo.type.context.NumberContext" />
  <class name="FinancePortfolio" startLine="40">
    <implements name="Comparable<FinancePortfolio>" />
    <javadoc>
      <text>* A FinancePortfolio is primarily a set of portfolio asset weights.</text>
      <author>apete</author>
    </javadoc>
    <interface name="Context" startLine="47">
      <method name="calculatePortfolioReturn" type="double" startLine="49" endLine="49" />
      <method name="calculatePortfolioVariance" type="double" startLine="51" endLine="51" />
      <method name="getAssetReturns" type="BasicMatrix<?>" startLine="53" endLine="53" />
      <method name="getAssetVolatilities" type="BasicMatrix<?>" startLine="55" endLine="55" />
      <method name="getCorrelations" type="BasicMatrix<?>" startLine="57" endLine="57" />
      <method name="getCovariances" type="BasicMatrix<?>" startLine="59" endLine="59" />
      <method name="size" type="int" startLine="61" endLine="61" />
      <declaration type="Factory<PrimitiveMatrix>" name="MATRIX_FACTORY" />
      <declaration type="NumberContext" name="WEIGHT_CONTEXT" />
      <method type="constructor" name="FinancePortfolio" startLine="69" endLine="71" />
      <method type="int" name="compareTo" startLine="73" endLine="75" />
      <method type="GeometricBrownianMotion" name="forecast" startLine="77" endLine="85">
        <declaration type="double" name="tmpInitialValue" />
        <declaration type="double" name="tmpExpectedValue" />
        <declaration type="double" name="tmpValueVariance" />
        <declaration type="double" name="tmpHorizon" />
      </method>
      <method type="double" name="getConformance" startLine="87" endLine="97">
        <declaration type="BasicMatrix<?>" name="tmpMyWeights" />
        <declaration type="BasicMatrix<?>" name="tmpRefWeights" />
        <declaration type="double" name="tmpNumerator" />
        <declaration type="double" name="tmpDenom1" />
        <declaration type="double" name="tmpDenom2" />
      </method>
      <method type="double" name="getLossProbability" startLine="99" endLine="101" />
      <method type="double" name="getLossProbability" startLine="103" endLine="111">
        <declaration type="GeometricBrownianMotion" name="tmpProc" />
        <declaration type="double" name="tmpDoubleValue" />
        <declaration type="double" name="tmpValue" />
      </method>
      <method name="getMeanReturn" type="double" startLine="113" endLine="118" />
      <javadoc>
        <text>* The mean/expected return of this instrument. May return either the absolute or excess return of the instrument.
 * The context in which an instance is used should make it clear which. Calling {@linkplain #shift(Number)} with an
 * appropriate argument will transform between absolute and excess return.</text>
      </javadoc>
      <javadoc>
        <text>* The instrument's return variance. Subclasses must override either {@linkplain #getReturnVariance()} or{@linkplain #getVolatility()}.</text>
      </javadoc>
      <method type="double" name="getReturnVariance" startLine="124" endLine="127">
        <declaration type="double" name="tmpVolatility" />
      </method>
      <method type="double" name="getSharpeRatio" startLine="129" endLine="131" />
      <method type="double" name="getSharpeRatio" startLine="133" endLine="139">
        <scope startLine="134" endLine="136" />
        <scope startLine="136" endLine="138" />
      </method>
      <javadoc>
        <text>* Value at Risk (VaR) is the maximum loss not exceeded with a given probability defined as the confidence level,
 * over a given period of time.</text>
      </javadoc>
      <method type="double" name="getValueAtRisk" startLine="145" endLine="154">
        <declaration type="double" name="aReturn" />
        <declaration type="double" name="aStdDev" />
        <declaration type="double" name="tmpConfidenceScale" />
        <declaration type="double" name="tmpTimePeriod" />
      </method>
      <method type="double" name="getValueAtRisk95" startLine="156" endLine="158" />
      <javadoc>
        <text>* Volatility refers to the standard deviation of the change in value of an asset with a specific time horizon. It
 * is often used to quantify the risk of the asset over that time period. Subclasses must override either{@linkplain #getReturnVariance()} or {@linkplain #getVolatility()}.</text>
      </javadoc>
      <method type="double" name="getVolatility" startLine="165" endLine="167" />
      <method name="getWeights" type="List<BigDecimal>" startLine="169" endLine="175" />
      <javadoc>
        <text>* This method returns a list of the weights of the Portfolio's contained assets. An asset weight is NOT restricted
 * to being a share/percentage - it can be anything. Most subclasses do however assume that the list of asset
 * weights are shares/percentages that sum up to 100%. Calling {@linkplain #normalise()} will transform any set of
 * weights to that form.</text>
      </javadoc>
      <javadoc>
        <text>* Normalised weights Portfolio</text>
      </javadoc>
      <method type="FinancePortfolio" name="normalise" startLine="180" endLine="182" />
      <method type="String" name="toString" startLine="185" endLine="188" />
      <method name="reset" type="void" startLine="190" endLine="190" />
    </interface>
  </class>
</source>
