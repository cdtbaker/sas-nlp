<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.finance.portfolio">
  <import name="java.math.BigDecimal" />
  <import name="org.ojalgo.ProgrammingError" />
  <import name="org.ojalgo.array.ArrayUtils" />
  <import name="org.ojalgo.constant.BigMath" />
  <import name="org.ojalgo.finance.FinanceUtils" />
  <import name="org.ojalgo.matrix.BasicMatrix" />
  <import name="org.ojalgo.matrix.PrimitiveMatrix" />
  <import name="org.ojalgo.scalar.BigScalar" />
  <import name="org.ojalgo.scalar.Scalar" />
  <import name="org.ojalgo.type.TypeUtils" />
  <class name="MarketEquilibrium" startLine="36">
    <javadoc>
      <text>* MarketEquilibrium translates between the market portfolio weights and the equilibrium excess returns. The only things
 * needed to do those translations are the covariance matrix and the risk aversion factor - that's what you need to
 * supply when you instantiate this class.</text>
      <see>#calculateAssetReturns(BasicMatrix)</see>
      <see>#calculateAssetWeights(BasicMatrix)</see>
      <author>apete</author>
    </javadoc>
    <declaration type="BigDecimal" name="DEFAULT_RISK_AVERSION" />
    <declaration type="String" name="STRING_ZERO" />
    <declaration type="String" name="SYMBOL" />
    <javadoc>
      <text>* Calculates the portfolio return using the input asset weights and returns.</text>
    </javadoc>
    <method type="Scalar<?>" name="calculatePortfolioReturn" startLine="54" endLine="56" />
    <method type="String[]" name="makeSymbols" startLine="58" endLine="74">
      <declaration type="String[]" name="retVal" />
      <declaration type="int" name="tmpMaxLength" />
      <declaration type="String" name="tmpNumberString" />
      <scope startLine="65" endLine="71">
        <scope startLine="67" endLine="69" />
      </scope>
    </method>
    <declaration type="String[]" name="myAssetKeys" />
    <declaration type="BasicMatrix<?>" name="myCovariances" />
    <declaration type="BigDecimal" name="myRiskAversion" />
    <method type="constructor" name="MarketEquilibrium" startLine="80" endLine="82" />
    <method type="constructor" name="MarketEquilibrium" startLine="84" endLine="86" />
    <method type="constructor" name="MarketEquilibrium" startLine="88" endLine="95" />
    <method type="constructor" name="MarketEquilibrium" startLine="97" endLine="104" />
    <method type="constructor" name="MarketEquilibrium" startLine="107" endLine="112" />
    <method type="constructor" name="MarketEquilibrium" startLine="114" endLine="116" />
    <javadoc>
      <text>* If the input vector of asset weights are the weights of the market portfolio, then the ouput is the equilibrium
 * excess returns.</text>
    </javadoc>
    <method type="BasicMatrix<?>" name="calculateAssetReturns" startLine="122" endLine="125">
      <declaration type="BasicMatrix<?>" name="tmpAssetWeights" />
    </method>
    <javadoc>
      <text>* If the input vector of returns are the equilibrium excess returns then the output is the market portfolio
 * weights. This is unconstrained optimisation - there are no constraints on the resulting instrument weights.</text>
    </javadoc>
    <method type="BasicMatrix<?>" name="calculateAssetWeights" startLine="131" endLine="138">
      <declaration type="BasicMatrix<?>" name="tmpAssetWeights" />
      <scope startLine="133" endLine="135" />
      <scope startLine="135" endLine="137" />
    </method>
    <javadoc>
      <text>* Calculates the portfolio variance using the input instrument weights.</text>
    </javadoc>
    <method type="Scalar<?>" name="calculatePortfolioVariance" startLine="143" endLine="157">
      <declaration type="BasicMatrix<?>" name="tmpLeft" />
      <declaration type="BasicMatrix<?>" name="tmpRight" />
      <scope startLine="148" endLine="151" />
      <scope startLine="151" endLine="154" />
    </method>
    <javadoc>
      <text>* Will set the risk aversion factor to the best fit for an observed pair of market portfolio asset weights and
 * equilibrium/historical excess returns.</text>
    </javadoc>
    <method type="void" name="calibrate" startLine="163" endLine="168">
      <declaration type="Scalar<?>" name="tmpImpliedRiskAversion" />
    </method>
    <javadoc>
      <text>* Equivalent to copying, but additionally the covariance matrix will be cleaned of negative and very small
 * eigenvalues to make it positive definite.</text>
    </javadoc>
    <method type="MarketEquilibrium" name="clean" startLine="174" endLine="182">
      <declaration type="PrimitiveMatrix" name="tmpAssetVolatilities" />
      <declaration type="PrimitiveMatrix" name="tmpCleanedCorrelations" />
      <declaration type="PrimitiveMatrix" name="tmpCovariances" />
    </method>
    <method type="MarketEquilibrium" name="copy" startLine="184" endLine="186" />
    <method type="String" name="getAssetKey" startLine="188" endLine="190" />
    <method type="String[]" name="getAssetKeys" startLine="192" endLine="194" />
    <method type="BasicMatrix<?>" name="getCovariances" startLine="196" endLine="198" />
    <method type="Scalar<?>" name="getRiskAversion" startLine="200" endLine="202" />
    <method type="void" name="setRiskAversion" startLine="204" endLine="215">
      <declaration type="BigDecimal" name="tmpFactor" />
      <scope startLine="208" endLine="210" />
      <scope startLine="210" endLine="212" />
      <scope startLine="212" endLine="214" />
    </method>
    <method type="int" name="size" startLine="217" endLine="219" />
    <method type="BasicMatrix<?>" name="toCorrelations" startLine="221" endLine="223" />
    <javadoc>
      <text>* Will calculate the risk aversion factor that is the best fit for an observed pair of market portfolio weights and
 * equilibrium/historical excess returns.</text>
    </javadoc>
    <method type="Scalar<?>" name="calculateImpliedRiskAversion" startLine="229" endLine="240">
      <declaration type="Scalar<?>" name="retVal" />
      <scope startLine="233" endLine="235" />
      <scope startLine="235" endLine="237" />
    </method>
    <comment>Don't change the default!</comment>
  </class>
</source>
