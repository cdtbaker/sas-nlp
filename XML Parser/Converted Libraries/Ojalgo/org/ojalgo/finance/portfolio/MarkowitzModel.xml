<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.finance.portfolio">
  <import name="static org.ojalgo.constant.BigMath.*" />
  <import name="java.math.BigDecimal" />
  <import name="java.util.Arrays" />
  <import name="java.util.HashMap" />
  <import name="java.util.List" />
  <import name="java.util.Map" />
  <import name="org.ojalgo.ProgrammingError" />
  <import name="org.ojalgo.access.Access1D" />
  <import name="org.ojalgo.matrix.BasicMatrix" />
  <import name="org.ojalgo.optimisation.Expression" />
  <import name="org.ojalgo.optimisation.ExpressionsBasedModel" />
  <import name="org.ojalgo.optimisation.Optimisation" />
  <import name="org.ojalgo.optimisation.Optimisation.State" />
  <import name="org.ojalgo.optimisation.Variable" />
  <import name="org.ojalgo.scalar.Scalar" />
  <import name="org.ojalgo.type.TypeUtils" />
  <class name="MarkowitzModel" extends="EquilibriumModel" startLine="43">
    <javadoc>
      <text>* <p>
 * The Markowitz model, in this class, is defined as:
 * </p>
 * <p>
 * min (RAF/2) [w]<sup>T</sup>[C][w] - [w]<sup>T</sup>[r] <br>
 * subject to |[w]| = 1
 * </p>
 * <p>
 * RAF stands for Risk Aversion Factor. Instead of specifying a desired risk or return level you specify a level of risk
 * aversion that is used to balance the risk and return.
 * </p>
 * <p>
 * The expected returns for each of the assets must be excess returns. Otherwise this formulation is wrong.
 * </p>
 * <p>
 * The total weights of all assets will always be 100%, but shorting can be allowed or not according to your preference.
 * ( {@linkplain #setShortingAllowed(boolean)} ) In addition you may set lower and upper limits on any individual
 * instrument. ( {@linkplain #setLowerLimit(int,BigDecimal)} and {@linkplain #setUpperLimit(int,BigDecimal)} )
 * </p>
 * <p>
 * Risk-free asset: That means there is no excess return and zero variance. Don't (try to) include a risk-free asset
 * here.
 * </p>
 * <p>
 * Do not worry about the minus sign in front of the return part of the objective function - it is handled/negated for
 * you. When you're asked to supply the expected excess returns you should supply precisely that.
 * </p>
 * <p>
 * Basic usage instructions
 * </p>
 * After you've instantiated the MarkowitzModel you need to do one of three different things:
 * <ol>
 * <li>{@link #setRiskAversion(Number)} unless this was already set in the {@link MarketEquilibrium} or{@link FinancePortfolio.Context} used to instantiate the MarkowitzModel</li>
 * <li>{@link #setTargetReturn(BigDecimal)}</li>
 * <li>{@link #setTargetVariance(BigDecimal)}</li>
 * </ol>
 * <p>
 * Optionally you may {@linkplain #setLowerLimit(int,BigDecimal)}, {@linkplain #setUpperLimit(int,BigDecimal)} or{@linkplain #setShortingAllowed(boolean)}.
 * </p>
 * <p>
 * To get the optimal asset weighs you simply call {@link #getWeights()} or {@link #getAssetWeights()}.
 * </p></text>
      <author>apete</author>
    </javadoc>
    <declaration type="double" name="_0_000005" />
    <declaration type="String" name="BALANCE" />
    <declaration type="String" name="RETURN" />
    <declaration type="String" name="VARIANCE" />
    <declaration type="HashMap<int[],LowerUpper>" name="myConstraints" />
    <declaration type="BasicMatrix<?>" name="myExpectedExcessReturns" />
    <declaration type="ExpressionsBasedModel" name="myOptimisationModel" />
    <declaration type="State" name="myOptimisationState" />
    <declaration type="boolean" name="myShortingAllowed" />
    <declaration type="BigDecimal" name="myTargetReturn" />
    <declaration type="BigDecimal" name="myTargetVariance" />
    <declaration type="Variable[]" name="myVariables" />
    <method type="constructor" name="MarkowitzModel" startLine="107" endLine="109" />
    <method type="constructor" name="MarkowitzModel" startLine="111" endLine="123">
      <declaration type="String[]" name="tmpSymbols" />
      <scope startLine="119" endLine="122" />
    </method>
    <method type="constructor" name="MarkowitzModel" startLine="125" endLine="141">
      <declaration type="String[]" name="tmpSymbols" />
      <scope startLine="133" endLine="136" />
      <scope startLine="138" endLine="140" />
    </method>
    <method type="constructor" name="MarkowitzModel" startLine="144" endLine="152" />
    <javadoc>
      <text>* Will add a constraint on the sum of the asset weights specified by the asset indices. Either (but not both) of
 * the limits may be null.</text>
    </javadoc>
    <method type="LowerUpper" name="addConstraint" startLine="158" endLine="160" />
    <method type="void" name="clearAllConstraints" startLine="162" endLine="165" />
    <method type="State" name="getOptimisationState" startLine="167" endLine="172">
      <scope startLine="168" endLine="170" />
    </method>
    <method type="void" name="setLowerLimit" startLine="174" endLine="177" />
    <method type="void" name="setShortingAllowed" startLine="179" endLine="182" />
    <javadoc>
      <text>* <p>
 * Will set the target return to whatever you input and the target variance to <code>null</code>.
 * </p>
 * <p>
 * Setting the target return implies that you disregard the risk aversion factor and want the minimum risk portfolio
 * with return that is equal to or greater than the target.
 * </p>
 * <p>
 * By setting the target return too high it is possible to define an infeasible optimisation problem. It is in fact
 * (in combination with setting lower and upper bounds on the instrument weights) very easy to do so without
 * realising it.
 * </p>
 * <p>
 * Setting a target return is not recommnded. It's much better to modify the risk aversion factor.
 * </p></text>
      <see>#setTargetVariance(BigDecimal)</see>
    </javadoc>
    <method type="void" name="setTargetReturn" startLine="203" endLine="207" />
    <javadoc>
      <text>* <p>
 * Will set the target variance to whatever you input and the target return to <code>null</code>.
 * </p>
 * <p>
 * Setting the target variance implies that you disregard the risk aversion factor and want the maximum return
 * portfolio with risk that is equal to or as close to the target as possible.
 * </p>
 * <p>
 * A target variance isn't an infeasibility risk the way a return target is. The algorithm will return a solution,
 * but there is no guaranty the portfolio variance is equal to or less than the target (as one may expect).
 * </p>
 * <p>
 * There is a performance penalty for setting a target variance as the underlying optimisation model has to be
 * solved several (many) times with different pararmeters (different risk aversion factors).
 * </p>
 * <p>
 * Setting a target variance is not recommnded. It's much better to modify the risk aversion factor.
 * </p></text>
      <see>#setTargetReturn(BigDecimal)</see>
    </javadoc>
    <method type="void" name="setTargetVariance" startLine="231" endLine="235" />
    <method type="void" name="setUpperLimit" startLine="237" endLine="240" />
    <method type="String" name="toString" startLine="243" endLine="250">
      <scope startLine="245" endLine="247" />
    </method>
    <method type="ExpressionsBasedModel" name="generateOptimisationModel" startLine="252" endLine="304">
      <declaration type="Variable[]" name="tmpVariables" />
      <scope startLine="255" endLine="260">
        <scope startLine="257" endLine="259" />
      </scope>
      <declaration type="ExpressionsBasedModel" name="retVal" />
      <declaration type="Expression" name="tmpVarianceExpression" />
      <declaration type="BasicMatrix<?>" name="tmpCovariances" />
      <scope startLine="266" endLine="270">
        <scope startLine="267" endLine="269" />
      </scope>
      <declaration type="Expression" name="tmpBalanceExpression" />
      <scope startLine="274" endLine="276" />
      <scope startLine="279" endLine="287">
        <declaration type="Expression" name="tmpReturnExpression" />
        <scope startLine="282" endLine="284" />
      </scope>
      <scope startLine="289" endLine="299">
        <declaration type="int[]" name="tmpKey" />
        <declaration type="LowerUpper" name="tmpValue" />
        <declaration type="Expression" name="tmpExpr" />
        <scope startLine="295" endLine="297" />
      </scope>
      <comment>retVal.options.debug(QuadraticSolver.class);</comment>
    </method>
    <method type="Optimisation.Result" name="optimise" startLine="306" endLine="430">
      <declaration type="Optimisation.Result" name="retVal" />
      <scope startLine="310" endLine="315" />
      <scope startLine="315" endLine="415">
        <declaration type="BigDecimal" name="tmpRiskAversion" />
        <declaration type="BigDecimal" name="tmpReturn" />
        <declaration type="BigDecimal" name="tmpVariance" />
        <declaration type="BigDecimal" name="tmpLowRiskAversion" />
        <declaration type="BigDecimal" name="tmpLowReturn" />
        <declaration type="BigDecimal" name="tmpLowVariance" />
        <declaration type="BigDecimal" name="tmpHighRiskAversion" />
        <declaration type="BigDecimal" name="tmpHighReturn" />
        <declaration type="BigDecimal" name="tmpHighVariance" />
        <declaration type="BigDecimal" name="tmpTargetDiff" />
        <scope startLine="338" endLine="355" />
        <scope startLine="355" endLine="371" />
        <declaration type="int" name="tmpIterCount" />
        <scope startLine="375" endLine="413">
          <scope startLine="382" endLine="407">
            <scope startLine="388" endLine="392" />
            <scope startLine="392" endLine="396" />
          </scope>
          <scope startLine="407" endLine="411" />
        </scope>
        <comment>BasicLogger.logDebug();</comment>
        <comment>BasicLogger.logDebug("Iter:   {}", tmpIterCount);</comment>
        <comment>BasicLogger.logDebug("Low:    {}", tmpLowVariance);</comment>
        <comment>BasicLogger.logDebug("Target: {}", myTargetVariance);</comment>
        <comment>BasicLogger.logDebug("High:   {}", tmpHighVariance);</comment>
        <comment>BasicLogger.logDebug("Diff:   {}", tmpTargetDiff);</comment>
      </scope>
      <scope startLine="415" endLine="419" />
      <scope startLine="421" endLine="427">
        <declaration type="List<Variable>" name="tmpVariables" />
        <scope startLine="423" endLine="426">
          <declaration type="BigDecimal" name="tmpBigDecimal" />
        </scope>
      </scope>
    </method>
    <method type="BasicMatrix<?>" name="calculateAssetReturns" startLine="433" endLine="435" />
    <javadoc>
      <text>* Constrained optimisation.</text>
    </javadoc>
    <method type="BasicMatrix<?>" name="calculateAssetWeights" startLine="441" endLine="448">
      <declaration type="Optimisation.Result" name="tmpResult" />
    </method>
    <method type="void" name="reset" startLine="451" endLine="457" />
    <method type="Scalar<?>" name="calculatePortfolioReturn" startLine="459" endLine="461" />
    <method type="Scalar<?>" name="calculatePortfolioVariance" startLine="463" endLine="465" />
  </class>
</source>
