<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.function.multiary">
  <import name="org.ojalgo.access.Access1D" />
  <import name="org.ojalgo.function.Function" />
  <import name="org.ojalgo.matrix.store.MatrixStore" />
  <import name="org.ojalgo.matrix.store.PhysicalStore" />
  <interface name="MultiaryFunction" startLine="29">
    <implements name="Function<N>" />
    <interface name="Constant" startLine="31">
      <implements name="MultiaryFunction<N>" />
      <method name="constant" type="F" startLine="33" endLine="33" />
      <method name="getConstant" type="N" startLine="35" endLine="35" />
      <method name="setConstant" type="void" startLine="37" endLine="37" />
      <interface name="Linear" startLine="41">
        <implements name="MultiaryFunction<N>" />
        <method name="linear" type="PhysicalStore<N>" startLine="43" endLine="43" />
        <interface name="Quadratic" startLine="47">
          <implements name="MultiaryFunction<N>" />
          <method name="quadratic" type="PhysicalStore<N>" startLine="49" endLine="49" />
          <method name="arity" type="int" startLine="53" endLine="53" />
          <method name="dim" type="int" startLine="55" endLine="59" />
          <javadoc>
            <deprecated>Since v35. Use {@link #arity()} instead</deprecated>
          </javadoc>
          <method name="getGradient" type="MatrixStore<N>" startLine="61" endLine="79" />
          <javadoc>
            <text>* The gradient of a scalar field is a vector field that points in the
 * direction of the greatest rate of increase of the scalar field, and whose
 * magnitude is that rate of increase. In simple terms, the variation in
 * space of any quantity can be represented (e.g. graphically) by a slope.
 * The gradient represents the steepness and direction of that slope.
 * The Jacobian is a generalization of the gradient. Gradients are only
 * defined on scalar-valued functions, but Jacobians are defined on vector-
 * valued functions.
 * When f is real-valued (i.e., f : Rn → R) the derivative Df(x) is a 1 × n
 * matrix, i.e., it is a row vector. Its transpose is called the gradient of
 * the function: ∇f(x) = Df(x)T , which is a (column) vector, i.e., in Rn.
 * Its components are the partial derivatives of f: The first-order
 * approximation of f at a point x ∈ int dom f can be expressed as (the affine
 * function of z) f(x) + ∇f(x)T (z − x).</text>
          </javadoc>
          <method name="getHessian" type="MatrixStore<N>" startLine="81" endLine="92" />
          <javadoc>
            <text>* The Hessian matrix or Hessian is a square matrix of second-order partial
 * derivatives of a function. It describes the local curvature of a function
 * of many variables.
 * The Hessian is the Jacobian of the gradient.
 * The second-order approximation of f, at or near x, is the quadratic
 * function of z defined by
 * f(z) = f(x) + ∇f(x)T (z − x) + (1/2)(z − x)T ∇2f(x)(z − x)</text>
          </javadoc>
          <method name="invoke" type="N" startLine="94" endLine="94" />
        </interface>
      </interface>
    </interface>
  </interface>
</source>
