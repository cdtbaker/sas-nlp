<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ojalgo.random.process">
  <import name="static org.ojalgo.constant.PrimitiveMath.*" />
  <import name="java.util.ArrayList" />
  <import name="java.util.Collection" />
  <import name="java.util.List" />
  <import name="java.util.TreeSet" />
  <import name="org.ojalgo.array.Array2D" />
  <import name="org.ojalgo.random.ContinuousDistribution" />
  <import name="org.ojalgo.random.Distribution" />
  <import name="org.ojalgo.type.keyvalue.ComparableToDouble" />
  <class name="AbstractProcess" startLine="36">
    <implements name="RandomProcess<D>" />
    <declaration type="TreeSet<ComparableToDouble<Double>>" name="myObservations" />
    <method type="constructor" name="AbstractProcess" startLine="40" endLine="42" />
    <method type="boolean" name="addObservation" startLine="44" endLine="46" />
    <javadoc>
      <text>* Equivalent to calling {@link #getDistribution(double)} with argumant
 * <code>1.0</code>, and then {@link Distribution#getExpected()}.</text>
    </javadoc>
    <method type="double" name="getExpected" startLine="52" endLine="54" />
    <javadoc>
      <text>* The same thing can be achieved by first calling {@link #getDistribution(double)}with argumant <code>1.0</code>, and then {@link ContinuousDistribution#getQuantile(double)}(but with different input argument).</text>
    </javadoc>
    <method type="double" name="getLowerConfidenceQuantile" startLine="61" endLine="63" />
    <javadoc>
      <text>* Equivalent to calling {@link #getDistribution(double)} with argumant
 * <code>1.0</code>, and then {@link Distribution#getStandardDeviation()}.</text>
    </javadoc>
    <method type="double" name="getStandardDeviation" startLine="69" endLine="71" />
    <javadoc>
      <text>* The same thing can be achieved by first calling {@link #getDistribution(double)}with argumant <code>1.0</code>, and then {@link ContinuousDistribution#getQuantile(double)}(but with different input argument).</text>
    </javadoc>
    <method type="double" name="getUpperConfidenceQuantile" startLine="78" endLine="80" />
    <method type="double" name="getValue" startLine="82" endLine="84" />
    <javadoc>
      <text>* Equivalent to calling {@link #getDistribution(double)} with argumant
 * <code>1.0</code>, and then {@link Distribution#getVariance()}.</text>
    </javadoc>
    <method type="double" name="getVariance" startLine="90" endLine="92" />
    <method type="void" name="setValue" startLine="94" endLine="100">
      <scope startLine="95" endLine="97" />
      <scope startLine="97" endLine="99" />
    </method>
    <javadoc>
      <return>An array of sample sets. The array has aNumberOfSteps
 * elements, and each sample set has aNumberOfRealisations samples.</return>
    </javadoc>
    <method type="RandomProcess.SimulationResults" name="simulate" startLine="106" endLine="123">
      <declaration type="List<ComparableToDouble<Double>>" name="tmpInitialState" />
      <declaration type="double" name="tmpInitialValue" />
      <declaration type="Array2D<Double>" name="tmpRealisationValues" />
      <scope startLine="113" endLine="120">
        <declaration type="double" name="tmpCurrentValue" />
        <scope startLine="115" endLine="118" />
      </scope>
    </method>
    <method name="getNormalisedRandomIncrement" type="double" startLine="125" endLine="125" />
    <method type="void" name="setObservations" startLine="127" endLine="130" />
    <method name="step" type="double" startLine="132" endLine="132" />
    <method name="getExpected" type="double" startLine="134" endLine="134" />
    <method name="getLowerConfidenceQuantile" type="double" startLine="136" endLine="136" />
    <method type="TreeSet<ComparableToDouble<Double>>" name="getObservations" startLine="138" endLine="140" />
    <method name="getStandardDeviation" type="double" startLine="142" endLine="142" />
    <method name="getUpperConfidenceQuantile" type="double" startLine="144" endLine="144" />
    <method name="getVariance" type="double" startLine="146" endLine="146" />
    <method type="double" name="step" startLine="148" endLine="150" />
  </class>
</source>
