<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.random.process">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.List"/>
        <import package="java.util.TreeSet"/>
        <import package="org.ojalgo.array.Array2D"/>
        <import package="org.ojalgo.random.ContinuousDistribution"/>
        <import package="org.ojalgo.random.Distribution"/>
        <import package="org.ojalgo.type.keyvalue.ComparableToDouble"/>
        <class name="AbstractProcess" line="36">
            <implements interface="RandomProcess&lt;D&gt;"/>
            <declaration name="myObservations" type="TreeSet&lt;ComparableToDouble&lt;Double&gt;&gt;" line="38"/>
            <method name="AbstractProcess" type="constructor" line="40"/>
            <method name="addObservation" type="boolean" line="44"/>
            <javadoc line="48">
                Equivalent to calling {@link #getDistribution(double)} with argumant
                 * &lt;code&gt;1.0&lt;/code&gt;, and then {@link Distribution#getExpected()}.                
            </javadoc>
            <method name="getExpected" type="double" line="52"/>
            <javadoc line="56">
                The same thing can be achieved by first calling {@link #getDistribution(double)}with argumant &lt;code&gt;1.0&lt;/code&gt;, and then {@link ContinuousDistribution#getQuantile(double)}(but with different input argument).                
            </javadoc>
            <method name="getLowerConfidenceQuantile" type="double" line="61"/>
            <javadoc line="65">
                Equivalent to calling {@link #getDistribution(double)} with argumant
                 * &lt;code&gt;1.0&lt;/code&gt;, and then {@link Distribution#getStandardDeviation()}.                
            </javadoc>
            <method name="getStandardDeviation" type="double" line="69"/>
            <javadoc line="73">
                The same thing can be achieved by first calling {@link #getDistribution(double)}with argumant &lt;code&gt;1.0&lt;/code&gt;, and then {@link ContinuousDistribution#getQuantile(double)}(but with different input argument).                
            </javadoc>
            <method name="getUpperConfidenceQuantile" type="double" line="78"/>
            <method name="getValue" type="double" line="82"/>
            <javadoc line="86">
                Equivalent to calling {@link #getDistribution(double)} with argumant
                 * &lt;code&gt;1.0&lt;/code&gt;, and then {@link Distribution#getVariance()}.                
            </javadoc>
            <method name="getVariance" type="double" line="90"/>
            <method name="setValue" type="void" line="94">
                <scope line="95"/>
                <scope line="97"/>
            </method>
            <javadoc line="102">
                @return An array of sample sets. The array has aNumberOfSteps
                 * elements, and each sample set has aNumberOfRealisations samples.                
            </javadoc>
            <method name="simulate" type="RandomProcess.SimulationResults" line="106">
                <declaration name="tmpInitialState" type="List&lt;ComparableToDouble&lt;Double&gt;&gt;" line="108"/>
                <declaration name="tmpInitialValue" type="double" line="109"/>
                <declaration name="tmpRealisationValues" type="Array2D&lt;Double&gt;" line="111"/>
                <scope line="113">
                    <declaration name="tmpCurrentValue" type="double" line="114"/>
                    <scope line="115"/>
                </scope>
            </method>
            <method name="getNormalisedRandomIncrement" type="double" line="125"/>
            <method name="setObservations" type="void" line="127"/>
            <method name="step" type="double" line="132"/>
            <method name="getExpected" type="double" line="134"/>
            <method name="getLowerConfidenceQuantile" type="double" line="136"/>
            <method name="getObservations" type="TreeSet<ComparableToDouble<Double>>" line="138"/>
            <method name="getStandardDeviation" type="double" line="142"/>
            <method name="getUpperConfidenceQuantile" type="double" line="144"/>
            <method name="getVariance" type="double" line="146"/>
            <method name="step" type="double" line="148"/>
        </class>
    </source>