<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.store">
        <import package="org.ojalgo.function.ComplexFunction"/>
        <import package="java.util.List"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.access.AccessUtils"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.array.Array2D"/>
        <import package="org.ojalgo.array.ComplexArray"/>
        <import package="org.ojalgo.array.SimpleArray"/>
        <import package="org.ojalgo.concurrent.DivideAndConquer"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.ComplexFunction"/>
        <import package="org.ojalgo.function.FunctionSet"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.VoidFunction"/>
        <import package="org.ojalgo.function.aggregator.Aggregator"/>
        <import package="org.ojalgo.function.aggregator.AggregatorCollection"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.function.aggregator.ComplexAggregator"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.decomposition.DecompositionStore"/>
        <import package="org.ojalgo.matrix.store.operation"/>
        <import package="org.ojalgo.matrix.transformation.Householder"/>
        <import package="org.ojalgo.matrix.transformation.Rotation"/>
        <import package="org.ojalgo.random.RandomNumber"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="ComplexDenseStore" extends="ComplexArray" line="56">
            <implements interface="PhysicalStore&lt;ComplexNumber&gt;"/>
            <implements interface="DecompositionStore&lt;ComplexNumber&gt;"/>
            <javadoc line="56">
                A {@linkplain ComplexNumber} implementation of {@linkplain PhysicalStore}.                
                <@author>
                    r apete                    
                </@author>
            </javadoc>
            <interface name="ComplexMultiplyBoth">
                <method name="invoke" type="void" line="65"/>
            </interface>
            <interface name="ComplexMultiplyLeft">
                <method name="invoke" type="void" line="71"/>
            </interface>
            <interface name="ComplexMultiplyRight">
                <method name="invoke" type="void" line="77"/>
            </interface>
            <declaration name="FACTORY" type="DecompositionStore.Factory&lt;ComplexNumber,ComplexDenseStore&gt;" line="81"/>
            <anonymous_class line="81">
                <method name="aggregator" type="AggregatorCollection<ComplexNumber>" line="83"/>
                <method name="columns" type="ComplexDenseStore" line="87">
                    <declaration name="tmpRowDim" type="int" line="89"/>
                    <declaration name="tmpColDim" type="int" line="90"/>
                    <declaration name="tmpData" type="ComplexNumber[]" line="92"/>
                    <declaration name="tmpColumn" type="Access1D&lt;?&gt;" line="94"/>
                    <scope line="95">
                        <scope line="97"/>
                    </scope>
                </method>
                <method name="columns" type="ComplexDenseStore" line="105">
                    <declaration name="tmpRowDim" type="int" line="107"/>
                    <declaration name="tmpColDim" type="int" line="108"/>
                    <declaration name="tmpData" type="ComplexNumber[]" line="110"/>
                    <declaration name="tmpColumn" type="double[]" line="112"/>
                    <scope line="113">
                        <scope line="115"/>
                    </scope>
                </method>
                <method name="columns" type="ComplexDenseStore" line="123">
                    <declaration name="tmpRowDim" type="int" line="125"/>
                    <declaration name="tmpColDim" type="int" line="126"/>
                    <declaration name="tmpData" type="ComplexNumber[]" line="128"/>
                    <declaration name="tmpColumn" type="List&lt;? extends Number&gt;" line="130"/>
                    <scope line="131">
                        <scope line="133"/>
                    </scope>
                </method>
                <method name="columns" type="ComplexDenseStore" line="141">
                    <declaration name="tmpRowDim" type="int" line="143"/>
                    <declaration name="tmpColDim" type="int" line="144"/>
                    <declaration name="tmpData" type="ComplexNumber[]" line="146"/>
                    <declaration name="tmpColumn" type="Number[]" line="148"/>
                    <scope line="149">
                        <scope line="151"/>
                    </scope>
                </method>
                <method name="conjugate" type="ComplexDenseStore" line="159">
                    <declaration name="retVal" type="ComplexDenseStore" line="161"/>
                </method>
                <method name="copy" type="ComplexDenseStore" line="168">
                    <declaration name="retVal" type="ComplexDenseStore" line="170"/>
                </method>
                <method name="function" type="FunctionSet<ComplexNumber>" line="177"/>
                <javadoc line="181">
                    @deprecated Use {@link #aggregator()} instead                    
                </javadoc>
                <method name="getAggregatorCollection" type="AggregatorCollection<ComplexNumber>" line="185"/>
                <javadoc line="189">
                    @deprecated Use {@link #function()} instead                    
                </javadoc>
                <method name="getFunctionSet" type="FunctionSet<ComplexNumber>" line="193"/>
                <javadoc line="197">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getNumber" type="ComplexNumber" line="201"/>
                <javadoc line="205">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getNumber" type="ComplexNumber" line="209"/>
                <javadoc line="213">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getStaticOne" type="Scalar<ComplexNumber>" line="217"/>
                <javadoc line="221">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getStaticZero" type="Scalar<ComplexNumber>" line="225"/>
                <method name="makeArray" type="SimpleArray.Complex" line="229"/>
                <method name="makeEye" type="ComplexDenseStore" line="233">
                    <declaration name="retVal" type="ComplexDenseStore" line="235"/>
                </method>
                <method name="makeHouseholder" type="Householder.Complex" line="242"/>
                <method name="makeRandom" type="ComplexDenseStore" line="246">
                    <declaration name="tmpRowDim" type="int" line="248"/>
                    <declaration name="tmpColDim" type="int" line="249"/>
                    <declaration name="tmpLength" type="int" line="251"/>
                    <declaration name="tmpData" type="ComplexNumber[]" line="253"/>
                    <scope line="255"/>
                </method>
                <method name="makeRotation" type="Rotation.Complex" line="262"/>
                <method name="makeRotation" type="Rotation.Complex" line="266"/>
                <method name="makeZero" type="ComplexDenseStore" line="270"/>
                <method name="rows" type="ComplexDenseStore" line="274">
                    <declaration name="tmpRowDim" type="int" line="276"/>
                    <declaration name="tmpColDim" type="int" line="277"/>
                    <declaration name="tmpData" type="ComplexNumber[]" line="279"/>
                    <declaration name="tmpRow" type="Access1D&lt;?&gt;" line="281"/>
                    <scope line="282">
                        <scope line="284"/>
                    </scope>
                </method>
                <method name="rows" type="ComplexDenseStore" line="292">
                    <declaration name="tmpRowDim" type="int" line="294"/>
                    <declaration name="tmpColDim" type="int" line="295"/>
                    <declaration name="tmpData" type="ComplexNumber[]" line="297"/>
                    <declaration name="tmpRow" type="double[]" line="299"/>
                    <scope line="300">
                        <scope line="302"/>
                    </scope>
                </method>
                <method name="rows" type="ComplexDenseStore" line="310">
                    <declaration name="tmpRowDim" type="int" line="312"/>
                    <declaration name="tmpColDim" type="int" line="313"/>
                    <declaration name="tmpData" type="ComplexNumber[]" line="315"/>
                    <declaration name="tmpRow" type="List&lt;? extends Number&gt;" line="317"/>
                    <scope line="318">
                        <scope line="320"/>
                    </scope>
                </method>
                <method name="rows" type="ComplexDenseStore" line="328">
                    <declaration name="tmpRowDim" type="int" line="330"/>
                    <declaration name="tmpColDim" type="int" line="331"/>
                    <declaration name="tmpData" type="ComplexNumber[]" line="333"/>
                    <declaration name="tmpRow" type="Number[]" line="335"/>
                    <scope line="336">
                        <scope line="338"/>
                    </scope>
                </method>
                <method name="scalar" type="Scalar.Factory<ComplexNumber>" line="346"/>
                <javadoc line="350">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="toScalar" type="Scalar<ComplexNumber>" line="354"/>
                <javadoc line="358">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="toScalar" type="Scalar<ComplexNumber>" line="362"/>
                <method name="transpose" type="ComplexDenseStore" line="366">
                    <declaration name="retVal" type="ComplexDenseStore" line="368"/>
                </method>
            </anonymous_class>
            <method name="cast" type="ComplexDenseStore" line="376">
                <scope line="377"/>
                <scope line="379"/>
                <scope line="381"/>
            </method>
            <method name="cast" type="Householder.Complex" line="386">
                <scope line="387"/>
                <scope line="389"/>
                <scope line="391"/>
            </method>
            <method name="cast" type="Rotation.Complex" line="396">
                <scope line="397"/>
                <scope line="399"/>
            </method>
            <declaration name="multiplyBoth" type="ComplexMultiplyBoth" line="404"/>
            <declaration name="multiplyLeft" type="ComplexMultiplyLeft" line="406"/>
            <declaration name="multiplyRight" type="ComplexMultiplyRight" line="408"/>
            <declaration name="myColDim" type="int" line="410"/>
            <declaration name="myRowDim" type="int" line="412"/>
            <declaration name="myUtility" type="Array2D&lt;ComplexNumber&gt;" line="413"/>
            <method name="ComplexDenseStore" type="constructor" line="415"/>
            <method name="ComplexDenseStore" type="constructor" line="429"/>
            <method name="ComplexDenseStore" type="constructor" line="443"/>
            <method name="ComplexDenseStore" type="constructor" line="457"/>
            <method name="aggregateAll" type="ComplexNumber" line="471">
                <declaration name="tmpRowDim" type="int" line="473"/>
                <declaration name="tmpColDim" type="int" line="474"/>
                <declaration name="tmpMainAggr" type="AggregatorFunction&lt;ComplexNumber&gt;" line="476"/>
                <scope line="478">
                    <anonymous_class line="480">
                        <method name="conquer" type="void" line="483">
                            <declaration name="tmpPartAggr" type="AggregatorFunction&lt;ComplexNumber&gt;" line="485"/>
                            <scope line="489"/>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="480"/>
                </scope>
                <scope line="497"/>
            </method>
            <method name="applyCholesky" type="void" line="505">
                <declaration name="tmpData" type="ComplexNumber[]" line="507"/>
                <declaration name="tmpColumn" type="ComplexNumber[]" line="508"/>
                <scope line="510">
                    <anonymous_class line="512">
                        <method name="conquer" type="void" line="515"/>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="512"/>
                </scope>
                <scope line="522"/>
            </method>
            <method name="applyLU" type="void" line="528">
                <declaration name="tmpData" type="ComplexNumber[]" line="530"/>
                <declaration name="tmpColumn" type="ComplexNumber[]" line="531"/>
                <scope line="533">
                    <anonymous_class line="535">
                        <method name="conquer" type="void" line="538"/>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="535"/>
                </scope>
                <scope line="545"/>
            </method>
            <method name="asArray2D" type="Array2D<ComplexNumber>" line="551"/>
            <method name="asList" type="Array1D<ComplexNumber>" line="555"/>
            <method name="builder" type="MatrixStore.Builder<ComplexNumber>" line="559"/>
            <method name="caxpy" type="void" line="563"/>
            <method name="computeInPlaceSchur" type="Array1D<ComplexNumber>" line="567"/>
            <method name="conjugate" type="ComplexDenseStore" line="571">
                <declaration name="retVal" type="ComplexDenseStore" line="573"/>
            </method>
            <method name="copy" type="ComplexDenseStore" line="580"/>
            <method name="countColumns" type="long" line="584"/>
            <method name="countRows" type="long" line="588"/>
            <method name="divideAndCopyColumn" type="void" line="592">
                <declaration name="tmpData" type="ComplexNumber[]" line="594"/>
                <declaration name="tmpRowDim" type="int" line="595"/>
                <declaration name="tmpDestination" type="ComplexNumber[]" line="597"/>
                <declaration name="tmpIndex" type="int" line="599"/>
                <declaration name="tmpDenominator" type="ComplexNumber" line="600"/>
                <scope line="602"/>
            </method>
            <method name="doubleValue" type="double" line="608"/>
            <method name="equals" type="boolean" line="612"/>
            <method name="equals" type="boolean" line="618">
                <scope line="619"/>
                <scope line="621"/>
            </method>
            <method name="exchangeColumns" type="void" line="626"/>
            <method name="exchangeRows" type="void" line="630"/>
            <method name="factory" type="PhysicalStore.Factory<ComplexNumber,ComplexDenseStore>" line="634"/>
            <method name="fillByMultiplying" type="void" line="638">
                <declaration name="tmpComplexity" type="int" line="640"/>
                <declaration name="tmpProductData" type="ComplexNumber[]" line="642"/>
                <scope line="644"/>
                <scope line="646"/>
                <scope line="648"/>
            </method>
            <method name="fillColumn" type="void" line="653"/>
            <method name="fillConjugated" type="void" line="657">
                <declaration name="tmpRowDim" type="int" line="659"/>
                <declaration name="tmpColDim" type="int" line="660"/>
                <scope line="662">
                    <anonymous_class line="664">
                        <method name="conquer" type="void" line="667"/>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="664"/>
                </scope>
                <scope line="675"/>
            </method>
            <method name="fillDiagonal" type="void" line="681"/>
            <method name="fillMatching" type="void" line="685">
                <declaration name="tmpRowDim" type="int" line="687"/>
                <declaration name="tmpColDim" type="int" line="688"/>
                <scope line="690">
                    <anonymous_class line="692">
                        <method name="conquer" type="void" line="695"/>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="692"/>
                </scope>
                <scope line="703"/>
            </method>
            <method name="fillMatching" type="void" line="709">
                <declaration name="tmpRowDim" type="int" line="711"/>
                <declaration name="tmpColDim" type="int" line="712"/>
                <scope line="714">
                    <anonymous_class line="716">
                        <method name="conquer" type="void" line="719"/>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="716"/>
                </scope>
                <scope line="727"/>
            </method>
            <method name="fillMatching" type="void" line="733">
                <declaration name="tmpRowDim" type="int" line="735"/>
                <declaration name="tmpColDim" type="int" line="736"/>
                <scope line="738">
                    <anonymous_class line="740">
                        <method name="conquer" type="void" line="743"/>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="740"/>
                </scope>
                <scope line="751"/>
            </method>
            <method name="fillMatching" type="void" line="757">
                <declaration name="tmpRowDim" type="int" line="759"/>
                <declaration name="tmpColDim" type="int" line="760"/>
                <scope line="762">
                    <anonymous_class line="764">
                        <method name="conquer" type="void" line="767"/>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="764"/>
                </scope>
                <scope line="775"/>
            </method>
            <method name="fillRow" type="void" line="781"/>
            <method name="fillTransposed" type="void" line="785">
                <declaration name="tmpRowDim" type="int" line="787"/>
                <declaration name="tmpColDim" type="int" line="788"/>
                <scope line="790">
                    <anonymous_class line="792">
                        <method name="conquer" type="void" line="795"/>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="792"/>
                </scope>
                <scope line="803"/>
            </method>
            <method name="generateApplyAndCopyHouseholderColumn" type="boolean" line="809"/>
            <method name="generateApplyAndCopyHouseholderRow" type="boolean" line="813"/>
            <method name="get" type="ComplexNumber" line="817"/>
            <method name="getColDim" type="int" line="821"/>
            <method name="getIndexOfLargestInColumn" type="int" line="825"/>
            <method name="getMaxDim" type="int" line="829"/>
            <method name="getMinDim" type="int" line="833"/>
            <method name="getRowDim" type="int" line="837"/>
            <method name="hashCode" type="int" line="842"/>
            <method name="isAbsolute" type="boolean" line="846"/>
            <method name="isAbsolute" type="boolean" line="850"/>
            <method name="isInfinite" type="boolean" line="854"/>
            <method name="isLowerLeftShaded" type="boolean" line="858"/>
            <method name="isNaN" type="boolean" line="862"/>
            <method name="isPositive" type="boolean" line="866"/>
            <method name="isPositive" type="boolean" line="870"/>
            <method name="isReal" type="boolean" line="874"/>
            <method name="isReal" type="boolean" line="878"/>
            <method name="isUpperRightShaded" type="boolean" line="882"/>
            <method name="isZero" type="boolean" line="886"/>
            <method name="isZero" type="boolean" line="890"/>
            <method name="maxpy" type="void" line="894">
                <declaration name="tmpRowDim" type="int" line="896"/>
                <declaration name="tmpColDim" type="int" line="897"/>
                <scope line="899">
                    <anonymous_class line="901">
                        <method name="conquer" type="void" line="904"/>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="901"/>
                </scope>
                <scope line="912"/>
            </method>
            <method name="modifyAll" type="void" line="919">
                <declaration name="tmpRowDim" type="int" line="921"/>
                <declaration name="tmpColDim" type="int" line="922"/>
                <scope line="924">
                    <anonymous_class line="926">
                        <method name="conquer" type="void" line="929"/>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="926"/>
                </scope>
                <scope line="937"/>
            </method>
            <method name="modifyColumn" type="void" line="943"/>
            <method name="modifyColumn" type="void" line="947"/>
            <method name="modifyDiagonal" type="void" line="951"/>
            <method name="modifyDiagonal" type="void" line="955"/>
            <method name="modifyOne" type="void" line="959">
                <declaration name="tmpValue" type="ComplexNumber" line="961"/>
            </method>
            <method name="modifyRow" type="void" line="968"/>
            <method name="modifyRow" type="void" line="972"/>
            <method name="multiplyLeft" type="MatrixStore<ComplexNumber>" line="976">
                <declaration name="retVal" type="ComplexDenseStore" line="978"/>
            </method>
            <method name="multiplyRight" type="MatrixStore<ComplexNumber>" line="985">
                <declaration name="retVal" type="ComplexDenseStore" line="987"/>
            </method>
            <method name="negateColumn" type="void" line="994"/>
            <method name="raxpy" type="void" line="998"/>
            <method name="rotateRight" type="void" line="1002"/>
            <method name="set" type="void" line="1006"/>
            <method name="set" type="void" line="1010"/>
            <method name="setToIdentity" type="void" line="1014"/>
            <method name="substituteBackwards" type="void" line="1019">
                <declaration name="tmpRowDim" type="int" line="1021"/>
                <declaration name="tmpColDim" type="int" line="1022"/>
                <scope line="1024">
                    <anonymous_class line="1026">
                        <method name="conquer" type="void" line="1029"/>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1026"/>
                </scope>
                <scope line="1037"/>
            </method>
            <method name="substituteForwards" type="void" line="1043">
                <declaration name="tmpRowDim" type="int" line="1045"/>
                <declaration name="tmpColDim" type="int" line="1046"/>
                <scope line="1048">
                    <anonymous_class line="1050">
                        <method name="conquer" type="void" line="1053"/>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1050"/>
                </scope>
                <scope line="1061"/>
            </method>
            <method name="toScalar" type="Scalar<ComplexNumber>" line="1067"/>
            <method name="toString" type="String" line="1072"/>
            <method name="transformLeft" type="void" line="1076">
                <declaration name="tmpTransf" type="Householder.Complex" line="1078"/>
                <declaration name="tmpData" type="ComplexNumber[]" line="1080"/>
                <declaration name="tmpRowDim" type="int" line="1082"/>
                <declaration name="tmpColDim" type="int" line="1083"/>
                <scope line="1085">
                    <anonymous_class line="1087">
                        <method name="conquer" type="void" line="1090"/>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1087"/>
                </scope>
                <scope line="1098"/>
            </method>
            <method name="transformLeft" type="void" line="1104">
                <declaration name="tmpTransf" type="Rotation.Complex" line="1106"/>
                <declaration name="tmpLow" type="int" line="1108"/>
                <declaration name="tmpHigh" type="int" line="1109"/>
                <scope line="1111">
                    <scope line="1112"/>
                    <scope line="1114"/>
                </scope>
                <scope line="1117">
                    <scope line="1118"/>
                    <scope line="1120"/>
                    <scope line="1122"/>
                </scope>
            </method>
            <method name="transformRight" type="void" line="1128">
                <declaration name="tmpTransf" type="Householder.Complex" line="1130"/>
                <declaration name="tmpData" type="ComplexNumber[]" line="1132"/>
                <declaration name="tmpRowDim" type="int" line="1134"/>
                <declaration name="tmpColDim" type="int" line="1135"/>
                <scope line="1137">
                    <anonymous_class line="1139">
                        <method name="conquer" type="void" line="1142"/>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1139"/>
                </scope>
                <scope line="1150"/>
            </method>
            <method name="transformRight" type="void" line="1156">
                <declaration name="tmpTransf" type="Rotation.Complex" line="1158"/>
                <declaration name="tmpLow" type="int" line="1160"/>
                <declaration name="tmpHigh" type="int" line="1161"/>
                <scope line="1163">
                    <scope line="1164"/>
                    <scope line="1166"/>
                </scope>
                <scope line="1169">
                    <scope line="1170"/>
                    <scope line="1172"/>
                    <scope line="1174"/>
                </scope>
            </method>
            <method name="transformSymmetric" type="void" line="1180"/>
            <method name="transpose" type="ComplexDenseStore" line="1184">
                <declaration name="retVal" type="ComplexDenseStore" line="1186"/>
            </method>
            <method name="tred2" type="void" line="1193"/>
            <method name="visitAll" type="void" line="1198"/>
            <method name="visitColumn" type="void" line="1202"/>
            <method name="visitColumn" type="void" line="1206"/>
            <method name="visitDiagonal" type="void" line="1210"/>
            <method name="visitDiagonal" type="void" line="1214"/>
            <method name="visitRow" type="void" line="1218"/>
            <method name="visitRow" type="void" line="1222"/>
        </class>
    </source>