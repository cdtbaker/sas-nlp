<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.store">
        <import package="java.io.Serializable"/>
        <import package="java.util.List"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.array.SimpleArray"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.FunctionSet"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.aggregator.AggregatorCollection"/>
        <import package="org.ojalgo.matrix.transformation.Householder"/>
        <import package="org.ojalgo.matrix.transformation.Rotation"/>
        <import package="org.ojalgo.random.RandomNumber"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <interface name="PhysicalStore">
            <implements interface="MatrixStore&lt;N&gt;"/>
            <implements interface="Access2D.Elements"/>
            <implements interface="Access2D.Fillable&lt;N&gt;"/>
            <implements interface="Access2D.Modifiable&lt;N&gt;"/>
            <implements interface="Access2D.Visitable&lt;N&gt;"/>
            <javadoc line="39">
                &lt;p&gt;
                 * PhysicalStore:s, as opposed to MatrixStore:s, are mutable. The vast majorty of the methods defined here return void
                 * and none return {@linkplain PhysicalStore} or {@linkplain MatrixStore}.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * This interface and its implementations are central to ojAlgo.
                 * &lt;/p&gt;                
                <@author>
                    r apete                    
                </@author>
            </javadoc>
            <interface name="Factory">
                <implements interface="Access2D.Factory&lt;I&gt;"/>
                <implements interface="Serializable"/>
                <method name="aggregator" type="AggregatorCollection<N>" line="54"/>
                <method name="conjugate" type="I" line="56"/>
                <method name="function" type="FunctionSet<N>" line="58"/>
                <method name="getAggregatorCollection" type="AggregatorCollection<N>" line="60"/>
                <javadoc line="60">
                    @deprecated v35 Use {@link #aggregator()} instead                    
                </javadoc>
                <method name="getFunctionSet" type="FunctionSet<N>" line="66"/>
                <javadoc line="66">
                    @deprecated v35 Use {@link #function()} instead                    
                </javadoc>
                <method name="getNumber" type="N" line="72"/>
                <javadoc line="72">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getNumber" type="N" line="78"/>
                <javadoc line="78">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getStaticOne" type="Scalar<N>" line="84"/>
                <javadoc line="84">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getStaticZero" type="Scalar<N>" line="90"/>
                <javadoc line="90">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="makeArray" type="SimpleArray<N>" line="96"/>
                <method name="makeHouseholder" type="Householder<N>" line="98"/>
                <method name="makeRotation" type="Rotation<N>" line="100"/>
                <method name="makeRotation" type="Rotation<N>" line="102"/>
                <method name="scalar" type="Scalar.Factory<N>" line="104"/>
                <method name="toScalar" type="Scalar<N>" line="106"/>
                <javadoc line="106">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="toScalar" type="Scalar<N>" line="112"/>
                <javadoc line="112">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="transpose" type="I" line="118"/>
            </interface>
            <declaration name="PRIMITIVE" type="Factory&lt;Double,PhysicalStore&lt;Double&gt;&gt;" line="122"/>
            <anonymous_class line="122">
                <method name="aggregator" type="AggregatorCollection<Double>" line="124"/>
                <method name="columns" type="PhysicalStore<Double>" line="128"/>
                <method name="columns" type="PhysicalStore<Double>" line="132">
                    <comment line="133">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="columns" type="PhysicalStore<Double>" line="137">
                    <comment line="138">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="columns" type="PhysicalStore<Double>" line="142">
                    <comment line="143">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="conjugate" type="PhysicalStore<Double>" line="147">
                    <comment line="148">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="copy" type="PhysicalStore<Double>" line="152">
                    <comment line="153">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="function" type="FunctionSet<Double>" line="157">
                    <comment line="158">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="getAggregatorCollection" type="AggregatorCollection<Double>" line="162">
                    <comment line="163">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="getFunctionSet" type="FunctionSet<Double>" line="167">
                    <comment line="168">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="getNumber" type="Double" line="172">
                    <comment line="173">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="getNumber" type="Double" line="177">
                    <comment line="178">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="getStaticOne" type="Scalar<Double>" line="182">
                    <comment line="183">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="getStaticZero" type="Scalar<Double>" line="187">
                    <comment line="188">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="makeArray" type="SimpleArray<Double>" line="192">
                    <comment line="193">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="makeEye" type="PhysicalStore<Double>" line="197">
                    <comment line="198">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="makeHouseholder" type="Householder<Double>" line="202">
                    <comment line="203">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="makeRandom" type="PhysicalStore<Double>" line="207">
                    <comment line="208">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="makeRotation" type="Rotation<Double>" line="212">
                    <comment line="213">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="makeRotation" type="Rotation<Double>" line="217">
                    <comment line="218">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="makeZero" type="PhysicalStore<Double>" line="222">
                    <comment line="223">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="rows" type="PhysicalStore<Double>" line="227">
                    <comment line="228">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="rows" type="PhysicalStore<Double>" line="232">
                    <comment line="233">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="rows" type="PhysicalStore<Double>" line="237">
                    <comment line="238">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="rows" type="PhysicalStore<Double>" line="242">
                    <comment line="243">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="scalar" type="org.ojalgo.scalar.Scalar.Factory<Double>" line="247">
                    <comment line="248">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="toScalar" type="Scalar<Double>" line="252">
                    <comment line="253">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="toScalar" type="Scalar<Double>" line="257">
                    <comment line="258">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
                <method name="transpose" type="PhysicalStore<Double>" line="262">
                    <comment line="263">
                        TODO Auto-generated method stub                        
                    </comment>
                </method>
            </anonymous_class>
            <method name="asList" type="List<N>" line="268"/>
            <javadoc line="268">
                @return The elements of the physical store as a fixed size (1 dimensional) list. The elements may be accessed
                 * either row or colomn major.                
            </javadoc>
            <method name="caxpy" type="void" line="274"/>
            <javadoc line="274">
                &lt;p&gt;
                 * &lt;b&gt;c&lt;/b&gt;olumn &lt;b&gt;a&lt;/b&gt; * &lt;b&gt;x&lt;/b&gt; &lt;b&gt;p&lt;/b&gt;lus &lt;b&gt;y&lt;/b&gt;
                 * &lt;/p&gt;
                 * [this(*,aColY)] = aSclrA [this(*,aColX)] + [this(*,aColY)]                
                <@deprecated>
                    d v32 Let me know if you need this                    
                </@deprecated>
            </javadoc>
            <method name="exchangeColumns" type="void" line="285"/>
            <method name="exchangeRows" type="void" line="287"/>
            <method name="fillByMultiplying" type="void" line="289"/>
            <method name="fillConjugated" type="void" line="291"/>
            <method name="fillMatching" type="void" line="293"/>
            <method name="fillMatching" type="void" line="295"/>
            <javadoc line="295">
                &lt;p&gt;
                 * Will replace the elements of [this] with the results of element wise invocation of the input binary funtion:
                 * &lt;/p&gt;
                 * &lt;code&gt;this(i,j) = aFunc.invoke(aLeftArg(i,j),aRightArg(i,j))&lt;/code&gt;                
            </javadoc>
            <method name="fillMatching" type="void" line="303"/>
            <javadoc line="303">
                &lt;p&gt;
                 * Will replace the elements of [this] with the results of element wise invocation of the input binary funtion:
                 * &lt;/p&gt;
                 * &lt;code&gt;this(i,j) = aFunc.invoke(aLeftArg(i,j),aRightArg))&lt;/code&gt;                
            </javadoc>
            <method name="fillMatching" type="void" line="311"/>
            <javadoc line="311">
                &lt;p&gt;
                 * Will replace the elements of [this] with the results of element wise invocation of the input binary funtion:
                 * &lt;/p&gt;
                 * &lt;code&gt;this(i,j) = aFunc.invoke(aLeftArg,aRightArg(i,j))&lt;/code&gt;                
            </javadoc>
            <method name="fillTransposed" type="void" line="319"/>
            <method name="maxpy" type="void" line="321"/>
            <javadoc line="321">
                &lt;p&gt;
                 * &lt;b&gt;m&lt;/b&gt;atrix &lt;b&gt;a&lt;/b&gt; * &lt;b&gt;x&lt;/b&gt; &lt;b&gt;p&lt;/b&gt;lus &lt;b&gt;y&lt;/b&gt;
                 * &lt;/p&gt;
                 * [this] = aSclrA [aMtrxX] + [this]                
                <@deprecated>
                    d v32 Let me know if you need this                    
                </@deprecated>
            </javadoc>
            <method name="modifyOne" type="void" line="332"/>
            <method name="raxpy" type="void" line="334"/>
            <javadoc line="334">
                &lt;p&gt;
                 * &lt;b&gt;r&lt;/b&gt;ow &lt;b&gt;a&lt;/b&gt; * &lt;b&gt;x&lt;/b&gt; &lt;b&gt;p&lt;/b&gt;lus &lt;b&gt;y&lt;/b&gt;
                 * &lt;/p&gt;
                 * [this(aRowY,*)] = aSclrA [this(aRowX,*)] + [this(aRowY,*)]                
                <@deprecated>
                    d v32 Let me know if you need this                    
                </@deprecated>
            </javadoc>
            <method name="transformLeft" type="void" line="345"/>
            <method name="transformLeft" type="void" line="347"/>
            <javadoc line="347">
                &lt;p&gt;
                 * As in {@link MatrixStore#multiplyLeft(MatrixStore)} where the left/parameter matrix is a plane rotation.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * Multiplying by a plane rotation from the left means that [this] gets two of its rows updated to new combinations
                 * of those two (current) rows.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * There are two ways to transpose/invert a rotation. Either you negate the angle or you interchange the two indeces
                 * that define the rotation plane.
                 * &lt;/p&gt;                
                <@see>
                    e #transformRight(Rotation)                    
                </@see>
            </javadoc>
            <method name="transformRight" type="void" line="364"/>
            <method name="transformRight" type="void" line="366"/>
            <javadoc line="366">
                &lt;p&gt;
                 * As in {@link MatrixStore#multiplyRight(MatrixStore)} where the right/parameter matrix is a plane rotation.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * Multiplying by a plane rotation from the right means that [this] gets two of its columns updated to new
                 * combinations of those two (current) columns.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * There result is undefined if the two input indeces are the same (in which case the rotation plane is undefined).
                 * &lt;/p&gt;                
                <@see>
                    e #transformLeft(Rotation)                    
                </@see>
            </javadoc>
        </interface>
    </source>