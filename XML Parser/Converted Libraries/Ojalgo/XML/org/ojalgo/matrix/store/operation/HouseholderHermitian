<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.store.operation">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.concurrent.DivideAndConquer"/>
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.BigFunction"/>
        <import package="org.ojalgo.function.ComplexFunction"/>
        <import package="org.ojalgo.matrix.transformation.Householder"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <class name="HouseholderHermitian" extends="MatrixOperation" line="36">
            <javadoc line="36">
                Performs Householder transformation from both sides simultaneously
                 * assuming that [A] is hermitian (square symmetric) [A] = [A]&lt;sup&gt;H&lt;/sup&gt;.
                 * Will only read from and write to the lower/left triangular part of [A].                
                <@author>
                    r apete                    
                </@author>
            </javadoc>
            <declaration name="THRESHOLD" type="int" line="46"/>
            <method name="invoke" type="void" line="48">
                <comment line="49">
                    tmpVal *= (tmpBeta / TWO);                    
                </comment>
                <declaration name="tmpVector" type="BigDecimal[]" line="50"/>
                <declaration name="tmpFirst" type="int" line="51"/>
                <declaration name="tmpLength" type="int" line="52"/>
                <declaration name="tmpBeta" type="BigDecimal" line="53"/>
                <declaration name="tmpCount" type="int" line="54"/>
                <scope line="56">
                    <anonymous_class line="58">
                        <method name="conquer" type="void" line="61"/>
                    </anonymous_class>
                    <declaration name="tmpConqurer" type="DivideAndConquer" line="58"/>
                </scope>
                <scope line="68"/>
                <declaration name="tmpVal" type="BigDecimal" line="73"/>
                <scope line="74"/>
                <scope line="80"/>
                <scope line="85">
                    <anonymous_class line="87">
                        <method name="conquer" type="void" line="90"/>
                    </anonymous_class>
                    <declaration name="tmpConqurer" type="DivideAndConquer" line="87"/>
                </scope>
                <scope line="97"/>
            </method>
            <method name="invoke" type="void" line="103">
                <comment line="104">
                    tmpVal *= (tmpBeta / TWO);                    
                </comment>
                <declaration name="tmpVector" type="ComplexNumber[]" line="105"/>
                <declaration name="tmpFirst" type="int" line="106"/>
                <declaration name="tmpLength" type="int" line="107"/>
                <declaration name="tmpBeta" type="ComplexNumber" line="108"/>
                <declaration name="tmpCount" type="int" line="109"/>
                <scope line="111">
                    <anonymous_class line="113">
                        <method name="conquer" type="void" line="116"/>
                    </anonymous_class>
                    <declaration name="tmpConqurer" type="DivideAndConquer" line="113"/>
                </scope>
                <scope line="123"/>
                <declaration name="tmpVal" type="ComplexNumber" line="128"/>
                <scope line="129"/>
                <scope line="135"/>
                <scope line="140">
                    <anonymous_class line="142">
                        <method name="conquer" type="void" line="145"/>
                    </anonymous_class>
                    <declaration name="tmpConqurer" type="DivideAndConquer" line="142"/>
                </scope>
                <scope line="152"/>
            </method>
            <method name="invoke" type="void" line="158">
                <declaration name="tmpVector" type="double[]" line="160"/>
                <declaration name="tmpFirst" type="int" line="161"/>
                <declaration name="tmpLength" type="int" line="162"/>
                <declaration name="tmpBeta" type="double" line="163"/>
                <declaration name="tmpCount" type="int" line="164"/>
                <scope line="166">
                    <anonymous_class line="168">
                        <method name="conquer" type="void" line="171"/>
                    </anonymous_class>
                    <declaration name="tmpConqurer" type="DivideAndConquer" line="168"/>
                </scope>
                <scope line="178"/>
                <declaration name="tmpVal" type="double" line="183"/>
                <scope line="184"/>
                <scope line="188"/>
                <scope line="192">
                    <anonymous_class line="194">
                        <method name="conquer" type="void" line="197"/>
                    </anonymous_class>
                    <declaration name="tmpConqurer" type="DivideAndConquer" line="194"/>
                </scope>
                <scope line="204"/>
            </method>
            <method name="tred2j" type="void" line="210">
                <comment line="211">
                    Symmetric Householder reduction to tridiagonal form.
                    The original version of this code was taken from JAMA.
                    That code is in turn derived from the Algol procedures tred2
                    by Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
                    Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
                    Fortran subroutine in EISPACK.
                    tred2 is also described in Numerical Recipes. Parameters and
                    variables are names are choosen to match what is used there.
                    
                    z is the original matrix [A] that will be overwritten with [Q]
                    d will hold the main diagonal of the tridiagonal result
                    e will hold the off (super and sub) diagonals of the tridiagonal result                    
                </comment>
                <comment line="211">
                    Copy the last column (same as the last row) of z to d                    
                </comment>
                <comment line="211">
                    The last row/column is the first to be worked on in the main loop                    
                </comment>
                <comment line="211">
                    Householder reduction to tridiagonal form.                    
                </comment>
                <comment line="211">
                    Accumulate transformations.                    
                </comment>
                <declaration name="n" type="int" line="227"/>
                <declaration name="scale" type="double" line="229"/>
                <declaration name="h" type="double" line="230"/>
                <declaration name="f" type="double" line="231"/>
                <declaration name="g" type="double" line="232"/>
                <declaration name="hh" type="double" line="233"/>
                <declaration name="tmpRowDim" type="int" line="235"/>
                <declaration name="tmpLast" type="int" line="236"/>
                <scope line="240"/>
                <scope line="245">
                    <declaration name="l" type="int" line="247"/>
                    <scope line="252"/>
                    <scope line="256">
                        <scope line="259"/>
                    </scope>
                    <scope line="265">
                        <scope line="268"/>
                        <scope line="274"/>
                        <scope line="280"/>
                        <scope line="286">
                            <scope line="290"/>
                        </scope>
                        <scope line="297"/>
                        <scope line="302"/>
                        <scope line="305">
                            <scope line="308"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="319">
                    <scope line="321">
                        <declaration name="l" type="int" line="323"/>
                        <scope line="328">
                            <scope line="329"/>
                            <scope line="332">
                                <scope line="334"/>
                                <scope line="337"/>
                            </scope>
                        </scope>
                        <scope line="342"/>
                    </scope>
                    <scope line="346"/>
                </scope>
            </method>
            <method name="tred2nr" type="void" line="357">
                <declaration name="n" type="int" line="359"/>
                <declaration name="l" type="int" line="360"/>
                <declaration name="tmpRowDim" type="int" line="361"/>
                <declaration name="scale" type="double" line="363"/>
                <declaration name="h" type="double" line="364"/>
                <declaration name="hh" type="double" line="365"/>
                <declaration name="g" type="double" line="366"/>
                <declaration name="f" type="double" line="367"/>
                <scope line="369">
                    <scope line="376">
                        <scope line="378"/>
                        <scope line="382"/>
                        <scope line="384">
                            <scope line="385"/>
                            <scope line="395">
                                <scope line="396"/>
                                <scope line="400"/>
                                <scope line="403"/>
                            </scope>
                            <scope line="410">
                                <scope line="413"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="418"/>
                </scope>
                <scope line="423"/>
                <scope line="427">
                    <scope line="428">
                        <scope line="429">
                            <scope line="430">
                                <scope line="432"/>
                                <scope line="435"/>
                            </scope>
                        </scope>
                        <scope line="442"/>
                    </scope>
                    <scope line="446"/>
                </scope>
            </method>
            <method name="HouseholderHermitian" type="constructor" line="452"/>
        </class>
    </source>