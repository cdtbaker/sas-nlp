<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.decomposition">
        <import package="java.util.Iterator"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.access.Iterator1D"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.array.Array2D"/>
        <import package="org.ojalgo.array.SimpleArray"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.matrix.transformation.Householder"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <interface name="DecompositionStore">
            <implements interface="PhysicalStore&lt;N&gt;"/>
            <javadoc line="36">
                &lt;p&gt;
                 * Only classes that will act as a delegate to a {@linkplain MatrixDecomposition} implementation from this package
                 * should implement this interface. The interface specifications are entirely dictated by the classes in this package.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * Do not use it for anything else!
                 * &lt;/p&gt;                
                <@author>
                    r apete                    
                </@author>
            </javadoc>
            <class name="HouseholderReference" line="49">
                <implements interface="Householder&lt;N&gt;"/>
                <declaration name="col" type="int" line="51"/>
                <declaration name="row" type="int" line="52"/>
                <declaration name="myBigWorker" type="Householder.Big" line="53"/>
                <declaration name="myColumn" type="boolean" line="54"/>
                <declaration name="myComplexWorker" type="Householder.Complex" line="55"/>
                <declaration name="myPrimitiveWorker" type="Householder.Primitive" line="56"/>
                <declaration name="myStore" type="DecompositionStore&lt;N&gt;" line="57"/>
                <method name="HouseholderReference" type="constructor" line="60"/>
                <method name="HouseholderReference" type="constructor" line="64"/>
                <method name="count" type="long" line="72"/>
                <method name="doubleValue" type="double" line="76">
                    <scope line="77">
                        <scope line="78"/>
                        <scope line="80"/>
                        <scope line="82"/>
                    </scope>
                    <scope line="85">
                        <scope line="86"/>
                        <scope line="88"/>
                        <scope line="90"/>
                    </scope>
                </method>
                <method name="first" type="int" line="96"/>
                <method name="get" type="N" line="100">
                    <scope line="101">
                        <scope line="102"/>
                        <scope line="104"/>
                        <scope line="106"/>
                    </scope>
                    <scope line="109">
                        <scope line="110"/>
                        <scope line="112"/>
                        <scope line="114"/>
                    </scope>
                </method>
                <method name="get" type="N" line="120">
                    <scope line="121">
                        <scope line="122"/>
                        <scope line="124"/>
                        <scope line="126"/>
                    </scope>
                    <scope line="129">
                        <scope line="130"/>
                        <scope line="132"/>
                        <scope line="134"/>
                    </scope>
                </method>
                <method name="getBigWorker" type="Householder.Big" line="140">
                    <scope line="142">
                        <scope line="143"/>
                        <scope line="145"/>
                    </scope>
                </method>
                <method name="getComplexWorker" type="Householder.Complex" line="153">
                    <scope line="155">
                        <scope line="156"/>
                        <scope line="158"/>
                    </scope>
                </method>
                <method name="getPrimitiveWorker" type="Householder.Primitive" line="166">
                    <scope line="168">
                        <scope line="169"/>
                        <scope line="171"/>
                    </scope>
                </method>
                <method name="isZero" type="boolean" line="179">
                    <scope line="180"/>
                    <scope line="182"/>
                </method>
                <method name="iterator" type="Iterator<N>" line="187"/>
                <method name="size" type="int" line="191">
                    <scope line="192"/>
                    <scope line="194"/>
                </method>
                <method name="toString" type="String" line="200">
                    <declaration name="retVal" type="StringBuilder" line="202"/>
                    <declaration name="tmpLastIndex" type="int" line="204"/>
                    <scope line="205"/>
                </method>
            </class>
            <method name="applyCholesky" type="void" line="218"/>
            <javadoc line="218">
                Cholesky transformations                
            </javadoc>
            <method name="applyLU" type="void" line="223"/>
            <javadoc line="223">
                LU transformations                
            </javadoc>
            <method name="asArray2D" type="Array2D<N>" line="228"/>
            <method name="computeInPlaceSchur" type="Array1D<ComplexNumber>" line="230"/>
            <method name="divideAndCopyColumn" type="void" line="232"/>
            <method name="generateApplyAndCopyHouseholderColumn" type="boolean" line="234"/>
            <method name="generateApplyAndCopyHouseholderRow" type="boolean" line="236"/>
            <method name="getIndexOfLargestInColumn" type="int" line="238"/>
            <method name="negateColumn" type="void" line="240"/>
            <method name="rotateRight" type="void" line="242"/>
            <method name="setToIdentity" type="void" line="244"/>
            <method name="substituteBackwards" type="void" line="246"/>
            <javadoc line="246">
                Will solve the equation system [A][X]=[B] where:
                 * &lt;ul&gt;
                 * &lt;li&gt;[aBody][this]=[this] is [A][X]=[B] (&quot;this&quot; is the right hand side, and it will be overwritten with the
                 * solution).&lt;/li&gt;
                 * &lt;li&gt;[A] is upper/right triangular&lt;/li&gt;
                 * &lt;/ul&gt;                
                <@param>
                    m aBody The equation system body parameters [A]                    
                </@param>
                <@param>
                    m conjugated true if the upper/right part of aBody is actually stored in the lower/left part of the matrix,
                     * and the elements conjugated.                    
                </@param>
            </javadoc>
            <method name="substituteForwards" type="void" line="260"/>
            <javadoc line="260">
                Will solve the equation system [A][X]=[B] where:
                 * &lt;ul&gt;
                 * &lt;li&gt;[aBody][this]=[this] is [A][X]=[B] (&quot;this&quot; is the right hand side, and it will be overwritten with the
                 * solution).&lt;/li&gt;
                 * &lt;li&gt;[A] is lower/left triangular&lt;/li&gt;
                 * &lt;/ul&gt;                
                <@param>
                    m aBody The equation system body parameters [A]                    
                </@param>
                <@param>
                    m onesOnDiagonal true if aBody as ones on the diagonal                    
                </@param>
            </javadoc>
            <method name="transformSymmetric" type="void" line="273"/>
            <method name="tred2" type="void" line="275"/>
        </interface>
    </source>