<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.decomposition">
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.jama.JamaSingularValue"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.netio.BasicLogger"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <class name="SingularValueDecomposition" extends="AbstractDecomposition<N>" line="37">
            <implements interface="SingularValue&lt;N&gt;"/>
            <javadoc line="37">
                You create instances of (some subclass of) this class by calling one of the static factory methods:{@linkplain #makeBig()}, {@linkplain #makeComplex()}, {@linkplain #makePrimitive()}, {@linkplain #makeAlternative()}or {@linkplain #makeJama()}.                
                <@author>
                    r apete                    
                </@author>
            </javadoc>
            <method name="make" type="SingularValue<N>" line="47">
                <declaration name="tmpNumber" type="N" line="49"/>
                <scope line="51"/>
                <scope line="55"/>
                <scope line="59">
                    <declaration name="tmpMaxDim" type="int" line="61"/>
                    <scope line="63"/>
                    <scope line="67"/>
                </scope>
                <scope line="72"/>
            </method>
            <method name="makeAlternative" type="SingularValue<Double>" line="78"/>
            <method name="makeBig" type="SingularValue<BigDecimal>" line="82"/>
            <method name="makeComplex" type="SingularValue<ComplexNumber>" line="86"/>
            <method name="makeJama" type="SingularValue<Double>" line="90"/>
            <method name="makePrimitive" type="SingularValue<Double>" line="94"/>
            <declaration name="myBidiagonal" type="BidiagonalDecomposition&lt;N&gt;" line="98"/>
            <declaration name="myD" type="MatrixStore&lt;N&gt;" line="99"/>
            <declaration name="myQ1" type="MatrixStore&lt;N&gt;" line="100"/>
            <declaration name="myQ2" type="MatrixStore&lt;N&gt;" line="101"/>
            <declaration name="mySingularValues" type="Array1D&lt;Double&gt;" line="102"/>
            <declaration name="mySingularValuesOnly" type="boolean" line="103"/>
            <declaration name="myTransposed" type="boolean" line="104"/>
            <declaration name="myInverse" type="MatrixStore&lt;N&gt;" line="105"/>
            <declaration name="myFullSize" type="boolean" line="106"/>
            <method name="SingularValueDecomposition" type="constructor" line="109"/>
            <method name="SingularValueDecomposition" type="constructor" line="114"/>
            <method name="compute" type="boolean" line="121"/>
            <method name="compute" type="boolean" line="125">
                <scope line="129"/>
                <scope line="131"/>
                <declaration name="retVal" type="boolean" line="138"/>
                <scope line="140"/>
                <scope line="144"/>
            </method>
            <method name="getCondition" type="double" line="156">
                <declaration name="tmpSingularValues" type="Array1D&lt;Double&gt;" line="158"/>
            </method>
            <method name="getD" type="MatrixStore<N>" line="163">
                <scope line="165"/>
            </method>
            <method name="getFrobeniusNorm" type="double" line="172">
                <declaration name="retVal" type="double" line="174"/>
                <declaration name="tmpSingularValues" type="Array1D&lt;Double&gt;" line="176"/>
                <declaration name="tmpVal" type="double" line="177"/>
                <scope line="179"/>
            </method>
            <method name="getInverse" type="MatrixStore<N>" line="187">
                <scope line="189">
                    <declaration name="tmpQ1" type="MatrixStore&lt;N&gt;" line="191"/>
                    <declaration name="tmpD" type="MatrixStore&lt;N&gt;" line="192"/>
                    <declaration name="tmpRowDim" type="int" line="194"/>
                    <declaration name="tmpColDim" type="int" line="195"/>
                    <declaration name="tmpMtrx" type="PhysicalStore&lt;N&gt;" line="197"/>
                    <declaration name="tmpSingularValue" type="double" line="201"/>
                    <scope line="202">
                        <scope line="203"/>
                        <scope line="205">
                            <scope line="207"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getInverse" type="MatrixStore<N>" line="219">
                <scope line="221">
                    <declaration name="tmpQ1" type="MatrixStore&lt;N&gt;" line="223"/>
                    <declaration name="tmpD" type="MatrixStore&lt;N&gt;" line="224"/>
                    <declaration name="tmpRowDim" type="int" line="226"/>
                    <declaration name="tmpColDim" type="int" line="227"/>
                    <declaration name="tmpMtrx" type="PhysicalStore&lt;N&gt;" line="229"/>
                    <declaration name="tmpZero" type="N" line="231"/>
                    <declaration name="tmpSingularValue" type="N" line="233"/>
                    <scope line="234">
                        <scope line="235"/>
                        <scope line="237">
                            <scope line="239"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getKyFanNorm" type="double" line="251">
                <declaration name="tmpSingularValues" type="Array1D&lt;Double&gt;" line="253"/>
                <declaration name="retVal" type="double" line="255"/>
                <scope line="257"/>
            </method>
            <method name="getOperatorNorm" type="double" line="264"/>
            <method name="getQ1" type="MatrixStore<N>" line="268">
                <scope line="270">
                    <scope line="271"/>
                    <scope line="273"/>
                </scope>
            </method>
            <method name="getQ2" type="MatrixStore<N>" line="281">
                <scope line="283">
                    <scope line="284"/>
                    <scope line="286"/>
                </scope>
            </method>
            <method name="getRank" type="int" line="294">
                <comment line="295">
                    Tolerance based on min-dim but should be max-dim                    
                </comment>
                <declaration name="tmpSingularValues" type="Array1D&lt;Double&gt;" line="296"/>
                <declaration name="retVal" type="int" line="297"/>
                <declaration name="tmpTolerance" type="double" line="300"/>
                <scope line="302">
                    <scope line="303"/>
                    <scope line="305"/>
                </scope>
            </method>
            <method name="getSingularValues" type="Array1D<Double>" line="313">
                <scope line="315"/>
            </method>
            <method name="getTraceNorm" type="double" line="322"/>
            <method name="isAspectRatioNormal" type="boolean" line="327"/>
            <method name="isFullSize" type="boolean" line="331"/>
            <method name="preallocate" type="DecompositionStore<N>" line="335"/>
            <method name="reconstruct" type="MatrixStore<N>" line="339"/>
            <method name="reset" type="void" line="344"/>
            <method name="solve" type="MatrixStore<N>" line="361"/>
            <method name="solve" type="MatrixStore<N>" line="365"/>
            <method name="computeBidiagonal" type="boolean" line="370"/>
            <method name="doCompute" type="boolean" line="374"/>
            <method name="getBidiagonalAccessD" type="DiagonalAccess<N>" line="376"/>
            <method name="getBidiagonalQ1" type="DecompositionStore<N>" line="380"/>
            <method name="getBidiagonalQ2" type="DecompositionStore<N>" line="384"/>
            <method name="isTransposed" type="boolean" line="388"/>
            <method name="makeD" type="MatrixStore<N>" line="392"/>
            <method name="makeQ1" type="MatrixStore<N>" line="394"/>
            <method name="makeQ2" type="MatrixStore<N>" line="396"/>
            <method name="makeSingularValues" type="Array1D<Double>" line="398"/>
            <method name="setD" type="void" line="400"/>
            <method name="setQ1" type="void" line="404"/>
            <method name="setQ2" type="void" line="408"/>
            <method name="setSingularValues" type="void" line="412"/>
        </class>
    </source>