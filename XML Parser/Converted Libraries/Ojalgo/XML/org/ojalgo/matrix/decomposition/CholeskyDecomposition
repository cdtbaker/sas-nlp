<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.decomposition">
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.array.SimpleArray"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.jama.JamaCholesky"/>
        <import package="org.ojalgo.matrix.store.BigDenseStore"/>
        <import package="org.ojalgo.matrix.store.ComplexDenseStore"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="CholeskyDecomposition" extends="InPlaceDecomposition<N>" line="39">
            <implements interface="Cholesky&lt;N&gt;"/>
            <javadoc line="39">
                You create instances of (some subclass of) this class by calling one of the static factory methods:{@linkplain #makeBig()}, {@linkplain #makeComplex()}, {@linkplain #makePrimitive()} or {@linkplain #makeJama()}.                
                <@author>
                    r apete                    
                </@author>
            </javadoc>
            <class name="Big" extends="CholeskyDecomposition<BigDecimal>" line="47">
                <method name="Big" type="constructor" line="49"/>
            </class>
            <class name="Complex" extends="CholeskyDecomposition<ComplexNumber>" line="55">
                <method name="Complex" type="constructor" line="57"/>
            </class>
            <class name="Primitive" extends="CholeskyDecomposition<Double>" line="63">
                <method name="Primitive" type="constructor" line="65"/>
            </class>
            <method name="make" type="Cholesky<N>" line="72">
                <declaration name="tmpNumber" type="N" line="74"/>
                <scope line="76"/>
                <scope line="78"/>
                <scope line="80">
                    <scope line="81"/>
                    <scope line="83"/>
                </scope>
                <scope line="86"/>
            </method>
            <method name="makeBig" type="Cholesky<BigDecimal>" line="91"/>
            <method name="makeComplex" type="Cholesky<ComplexNumber>" line="95"/>
            <method name="makeJama" type="Cholesky<Double>" line="99"/>
            <method name="makePrimitive" type="Cholesky<Double>" line="103"/>
            <declaration name="mySPD" type="boolean" line="107"/>
            <method name="CholeskyDecomposition" type="constructor" line="109"/>
            <method name="calculateDeterminant" type="N" line="113"/>
            <method name="compute" type="boolean" line="118"/>
            <method name="compute" type="boolean" line="122">
                <comment line="123">
                    true if (Hermitian) Positive Definite                    
                </comment>
                <comment line="123">
                    Check if hermitian, maybe                    
                </comment>
                <comment line="123">
                    Main loop - along the diagonal                    
                </comment>
                <declaration name="tmpInPlace" type="DecompositionStore&lt;N&gt;" line="126"/>
                <declaration name="tmpRowDim" type="int" line="128"/>
                <declaration name="tmpColDim" type="int" line="129"/>
                <declaration name="tmpMinDim" type="int" line="130"/>
                <declaration name="tmpPositiveDefinite" type="boolean" line="133"/>
                <declaration name="tmpMultipliers" type="SimpleArray&lt;N&gt;" line="135"/>
                <scope line="138"/>
                <declaration name="tmpSqrtFunc" type="UnaryFunction&lt;N&gt;" line="142"/>
                <scope line="145">
                    <scope line="148"/>
                    <scope line="159"/>
                </scope>
            </method>
            <method name="equals" type="boolean" line="168"/>
            <method name="getDeterminant" type="N" line="172">
                <declaration name="tmpAggrFunc" type="AggregatorFunction&lt;N&gt;" line="174"/>
            </method>
            <method name="getInverse" type="MatrixStore<N>" line="182"/>
            <method name="getInverse" type="MatrixStore<N>" line="187"/>
            <method name="getL" type="MatrixStore<N>" line="193"/>
            <method name="isFullSize" type="boolean" line="197"/>
            <method name="isSolvable" type="boolean" line="201"/>
            <method name="isSPD" type="boolean" line="205"/>
            <method name="reconstruct" type="MatrixStore<N>" line="209"/>
            <method name="reset" type="void" line="214"/>
            <javadoc line="221">
                Solves [this][X] = [aRHS] by first solving
                 * &lt;pre&gt;
                 * [L][Y] = [aRHS]
                 * &lt;/pre&gt;
                 * and then
                 * &lt;pre&gt;
                 * [U][X] = [Y]
                 * &lt;/pre&gt;
                 * .                
                <@param>
                    m rhs The right hand side                    
                </@param>
                <@return>
                    n [X] The solution will be written to "preallocated" and then returned.                    
                </@return>
                <@see>
                    e org.ojalgo.matrix.decomposition.AbstractDecomposition#solve(Access2D,org.ojalgo.matrix.decomposition.DecompositionStore)                    
                </@see>
            </javadoc>
            <method name="solve" type="MatrixStore<N>" line="242">
                <declaration name="tmpBody" type="DecompositionStore&lt;N&gt;" line="246"/>
            </method>
            <method name="invert" type="MatrixStore<N>" line="254">
                <declaration name="tmpBody" type="DecompositionStore&lt;N&gt;" line="256"/>
            </method>
        </class>
    </source>