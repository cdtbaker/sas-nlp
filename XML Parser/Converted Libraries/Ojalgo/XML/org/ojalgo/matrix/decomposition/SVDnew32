<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.decomposition">
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.array.SimpleArray"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.store.BigDenseStore"/>
        <import package="org.ojalgo.matrix.store.ComplexDenseStore"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="SVDnew32" extends="SingularValueDecomposition<N>" line="38">
            <javadoc line="38">
                Orginalet, sedan ett tag Based on SVDnew2, but with transposing so that calculations are always made on a matrix that
                 * &quot;isAspectRationNormal&quot;. Based on SVDnew5, but with Rotation replaced by the new alternative.                
                <@author>
                    r apete                    
                </@author>
            </javadoc>
            <class name="Big" extends="SVDnew32<BigDecimal>" line="46">
                <method name="Big" type="constructor" line="48"/>
            </class>
            <class name="Complex" extends="SVDnew32<ComplexNumber>" line="54">
                <method name="Complex" type="constructor" line="56"/>
            </class>
            <class name="Primitive" extends="SVDnew32<Double>" line="62">
                <method name="Primitive" type="constructor" line="64"/>
            </class>
            <method name="doCase1" type="void" line="70">
                <declaration name="f" type="double" line="72"/>
                <declaration name="t" type="double" line="75"/>
                <declaration name="cs" type="double" line="76"/>
                <declaration name="sn" type="double" line="77"/>
                <scope line="79">
                    <scope line="86"/>
                    <scope line="91"/>
                </scope>
            </method>
            <method name="doCase2" type="void" line="97">
                <declaration name="f" type="double" line="99"/>
                <declaration name="t" type="double" line="102"/>
                <declaration name="cs" type="double" line="103"/>
                <declaration name="sn" type="double" line="104"/>
                <scope line="106">
                    <scope line="116"/>
                </scope>
            </method>
            <method name="doCase3" type="void" line="122">
                <comment line="123">
                    Calculate the shift.                    
                </comment>
                <comment line="123">
                    Chase zeros.                    
                </comment>
                <declaration name="indPm1" type="int" line="124"/>
                <declaration name="indPm2" type="int" line="125"/>
                <declaration name="scale" type="double" line="128"/>
                <declaration name="sPm1" type="double" line="131"/>
                <declaration name="sPm2" type="double" line="132"/>
                <declaration name="ePm2" type="double" line="133"/>
                <declaration name="sK" type="double" line="134"/>
                <declaration name="eK" type="double" line="135"/>
                <declaration name="b" type="double" line="137"/>
                <declaration name="c" type="double" line="138"/>
                <declaration name="shift" type="double" line="140"/>
                <scope line="141"/>
                <declaration name="f" type="double" line="146"/>
                <declaration name="g" type="double" line="147"/>
                <declaration name="t" type="double" line="149"/>
                <declaration name="cs" type="double" line="150"/>
                <declaration name="sn" type="double" line="151"/>
                <scope line="154">
                    <scope line="159"/>
                    <scope line="167"/>
                    <scope line="181"/>
                </scope>
            </method>
            <method name="doCase4" type="void" line="190">
                <comment line="191">
                    Make the singular values positive.                    
                </comment>
                <comment line="191">
                    Order the singular values.                    
                </comment>
                <declaration name="tmpDiagDim" type="int" line="192"/>
                <declaration name="tmpSk" type="double" line="195"/>
                <scope line="196">
                    <scope line="199"/>
                </scope>
                <scope line="204"/>
                <declaration name="tmpK" type="int" line="209"/>
                <scope line="211">
                    <scope line="212"/>
                    <declaration name="t" type="double" line="215"/>
                    <scope line="219"/>
                    <scope line="222"/>
                </scope>
            </method>
            <method name="toDiagonal" type="Array1D<Double>" line="230">
                <comment line="231">
                    nal double[] s = bidiagonal.mainDiagonal.toRawCopy(); // s                    
                </comment>
                <comment line="231">
                    nal double[] e = new double[tmpDiagDim]; // e                    
                </comment>
                <comment line="231">
                    Main iteration loop for the singular values.                    
                </comment>
                <comment line="231">
                    // while                    
                </comment>
                <comment line="231">
                    return new PrimitiveArray(s).asArray1D();                    
                </comment>
                <declaration name="tmpDiagDim" type="int" line="232"/>
                <declaration name="s" type="double[]" line="234"/>
                <declaration name="e" type="double[]" line="235"/>
                <declaration name="tmpOffLength" type="int" line="236"/>
                <scope line="237"/>
                <declaration name="kase" type="int" line="242"/>
                <declaration name="k" type="int" line="243"/>
                <declaration name="p" type="int" line="244"/>
                <scope line="245">
                    <scope line="260">
                        <scope line="261"/>
                        <scope line="264"/>
                    </scope>
                    <scope line="269"/>
                    <scope line="271">
                        <declaration name="ks" type="int" line="272"/>
                        <scope line="273">
                            <scope line="274"/>
                            <declaration name="t" type="double" line="277"/>
                            <scope line="278"/>
                        </scope>
                        <scope line="283"/>
                        <scope line="285"/>
                        <scope line="287"/>
                    </scope>
                </scope>
            </method>
            <method name="SVDnew32" type="constructor" line="328"/>
            <method name="equals" type="boolean" line="332"/>
            <method name="isOrdered" type="boolean" line="336"/>
            <method name="isSolvable" type="boolean" line="340"/>
            <method name="solve" type="MatrixStore<N>" line="345"/>
            <method name="doCompute" type="boolean" line="350">
                <comment line="351">
                    if (this.isTransposed()) {                    
                </comment>
                <comment line="351">
                    this.setQ1(tmpQ2);                    
                </comment>
                <comment line="351">
                    this.setQ2(tmpQ1);                    
                </comment>
                <comment line="351">
                    } else {                    
                </comment>
                <comment line="351">
                    this.setQ1(tmpQ1);                    
                </comment>
                <comment line="351">
                    this.setQ2(tmpQ2);                    
                </comment>
                <comment line="351">
                    }                    
                </comment>
                <declaration name="tmpBidiagonal" type="DiagonalAccess&lt;N&gt;" line="354"/>
                <declaration name="tmpQ1" type="DecompositionStore&lt;N&gt;" line="356"/>
                <declaration name="tmpQ2" type="DecompositionStore&lt;N&gt;" line="357"/>
                <declaration name="tmpDiagonal" type="Array1D&lt;Double&gt;" line="359"/>
            </method>
            <method name="makeD" type="MatrixStore<N>" line="375"/>
            <method name="makeQ1" type="MatrixStore<N>" line="380"/>
            <method name="makeQ2" type="MatrixStore<N>" line="385"/>
            <method name="makeSingularValues" type="Array1D<Double>" line="390"/>
        </class>
    </source>