<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.decomposition">
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.matrix.decomposition.task.DeterminantTask"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <interface name="QR">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <implements interface="MatrixDecomposition">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="DeterminantTask">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <javadoc line="28">
                QR: [A] = [Q][R] Decomposes [this] into [Q] and [R] where:
                  &lt;ul&gt;
                  &lt;li&gt;[Q] is an orthogonal matrix (orthonormal columns). It has the same number of rows as [this].&lt;/li&gt;
                  &lt;li&gt;[R] is a right (upper) triangular matrix. It has the same number of columns as [this].&lt;/li&gt;
                  &lt;li&gt;[this] = [Q][R]&lt;/li&gt;
                  &lt;/ul&gt;
                  Note: Either Q or R will be square. The interface does not specify which.                
                <@author>
                    r apete                    
                </@author>
            </javadoc>
            <method name="compute" type="boolean" line="41"/>
            <javadoc line="41">
                @param matrix A matrix to decompose                
                <@return>
                    n true if the computation suceeded; false if not                    
                </@return>
            </javadoc>
            <method name="getDeterminant" type="N" line="47"/>
            <method name="getQ" type="MatrixStore<N>" line="49"/>
            <method name="getR" type="MatrixStore<N>" line="51"/>
            <method name="getRank" type="int" line="53"/>
            <method name="isFullColumnRank" type="boolean" line="55"/>
            <javadoc line="55">
                The QR decompostion always exists, even if the matrix does not have full column rank, so the compute method will
                  never fail. The primary use of the QR decomposition is in the least squares solution of overdetermined systems of
                  simultaneous linear equations. This will fail if the matrix does not have full column rank. The rank must be
                  equal to the number of columns.                
            </javadoc>
        </interface>
    </source>