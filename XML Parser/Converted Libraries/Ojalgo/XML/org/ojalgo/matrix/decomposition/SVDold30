<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.decomposition">
        <import package="java.math.BigDecimal"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="java.util.concurrent.Callable"/>
        <import package="java.util.concurrent.ExecutionException"/>
        <import package="java.util.concurrent.Future"/>
        <import package="org.ojalgo.ProgrammingError"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.array.Array2D"/>
        <import package="org.ojalgo.concurrent.DaemonPoolExecutor"/>
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.BigFunction"/>
        <import package="org.ojalgo.function.ComplexFunction"/>
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.store.BigDenseStore"/>
        <import package="org.ojalgo.matrix.store.ComplexDenseStore"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.matrix.transformation.Rotation"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="SVDold30" line="53">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <extends class="SingularValueDecomposition">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </extends>
            <javadoc line="53">
                Samma som orginalet, but without QR. Instead Householder directly. Wasn&apos;t faster. Try going directly to bidiagonal
                  instead. Based SVDold2, but with GenericRotaion replaced with Rotation.                
                <@author>
                    r apete                    
                </@author>
            </javadoc>
            <class name="Big" line="61">
                <extends class="SVDold30">
                    <type_params>
                        <type_param name="BigDecimal"/>
                    </type_params>
                </extends>
                <method name="Big" type="constructor" line="63"/>
                <method name="rotations" type="Rotation<BigDecimal>[]" line="69">
                    <params>
                        <param name="aStore" type="PhysicalStore<BigDecimal>"/>
                        <param name="aLowInd" type="int"/>
                        <param name="aHighInd" type="int"/>
                        <param name="retVal" type="Rotation<BigDecimal>[]"/>
                    </params>
                    <comment line="70">
                        gDecimal t; // tan, cot or something temporary                        
                    </comment>
                    <comment line="70">
                        Symmetrise - Givens                        
                    </comment>
                    <comment line="70">
                        nal BigDecimal cg; // cos Givens                        
                    </comment>
                    <comment line="70">
                        nal BigDecimal sg; // sin Givens                        
                    </comment>
                    <comment line="70">
                        nal BigDecimal b2 = cg.multiply(a01.add(a10)).add(sg.multiply(a11.subtract(a00))); // b01 + b10                        
                    </comment>
                    <comment line="70">
                        Annihilate - Jacobi                        
                    </comment>
                    <comment line="70">
                        nal BigDecimal cj = BigFunction.DIVIDE.invoke(BigMath.ONE, BigFunction.SQRT1PX2.invoke(t)); // Cos Jacobi                        
                    </comment>
                    <comment line="70">
                        nal BigDecimal sj = cj.multiply(t); // Sin Jacobi                        
                    </comment>
                    <comment line="70">
                        tVal[1] = new Rotation.Big(aLowInd, aHighInd, cj, sj); // Jacobi                        
                    </comment>
                    <comment line="70">
                        tVal[0] = new Rotation.Big(aLowInd, aHighInd, cj.multiply(cg).add(sj.multiply(sg)), cj.multiply(sg).subtract(sj.multiply(cg))); // Givens - Jacobi                        
                    </comment>
                    <declaration name="a00" type="BigDecimal" line="71"/>
                    <declaration name="a01" type="BigDecimal" line="72"/>
                    <declaration name="a10" type="BigDecimal" line="73"/>
                    <declaration name="a11" type="BigDecimal" line="74"/>
                    <declaration name="x" type="BigDecimal" line="76"/>
                    <declaration name="y" type="BigDecimal" line="77"/>
                    <declaration name="t" type="BigDecimal" line="79"/>
                    <declaration name="cg" type="BigDecimal" line="82"/>
                    <declaration name="sg" type="BigDecimal" line="83"/>
                    <scope line="85"/>
                    <scope line="88"/>
                    <scope line="91"/>
                    <scope line="95"/>
                    <declaration name="b00" type="BigDecimal" line="101"/>
                    <declaration name="b11" type="BigDecimal" line="102"/>
                    <declaration name="b2" type="BigDecimal" line="103"/>
                    <declaration name="cj" type="BigDecimal" line="109"/>
                    <declaration name="sj" type="BigDecimal" line="110"/>
                </method>
            </class>
            <class name="Complex" line="120">
                <extends class="SVDold30">
                    <type_params>
                        <type_param name="ComplexNumber"/>
                    </type_params>
                </extends>
                <method name="Complex" type="constructor" line="122"/>
                <method name="rotations" type="Rotation<ComplexNumber>[]" line="128">
                    <params>
                        <param name="aStore" type="PhysicalStore<ComplexNumber>"/>
                        <param name="aLowInd" type="int"/>
                        <param name="aHighInd" type="int"/>
                        <param name="retVal" type="Rotation<ComplexNumber>[]"/>
                    </params>
                    <comment line="129">
                        mplexNumber t; // tan, cot or something temporary                        
                    </comment>
                    <comment line="129">
                        Symmetrise - Givens                        
                    </comment>
                    <comment line="129">
                        nal ComplexNumber cg; // cos Givens                        
                    </comment>
                    <comment line="129">
                        nal ComplexNumber sg; // sin Givens                        
                    </comment>
                    <comment line="129">
                        nal ComplexNumber b2 = cg.multiply(a01.add(a10)).add(sg.multiply(a11.subtract(a00))); // b01 + b10                        
                    </comment>
                    <comment line="129">
                        Annihilate - Jacobi                        
                    </comment>
                    <comment line="129">
                        nal ComplexNumber cj = ComplexFunction.SQRT1PX2.invoke(t).invert(); // Cos Jacobi                        
                    </comment>
                    <comment line="129">
                        nal ComplexNumber sj = cj.multiply(t); // Sin Jacobi                        
                    </comment>
                    <comment line="129">
                        tVal[1] = new Rotation.Complex(aLowInd, aHighInd, cj, sj); // Jacobi                        
                    </comment>
                    <comment line="129">
                        tVal[0] = new Rotation.Complex(aLowInd, aHighInd, cj.multiply(cg).add(sj.multiply(sg)), cj.multiply(sg).subtract(sj.multiply(cg))); // Givens - Jacobi                        
                    </comment>
                    <declaration name="a00" type="ComplexNumber" line="130"/>
                    <declaration name="a01" type="ComplexNumber" line="131"/>
                    <declaration name="a10" type="ComplexNumber" line="132"/>
                    <declaration name="a11" type="ComplexNumber" line="133"/>
                    <declaration name="x" type="ComplexNumber" line="135"/>
                    <declaration name="y" type="ComplexNumber" line="136"/>
                    <declaration name="t" type="ComplexNumber" line="138"/>
                    <declaration name="cg" type="ComplexNumber" line="141"/>
                    <declaration name="sg" type="ComplexNumber" line="142"/>
                    <scope line="144"/>
                    <scope line="147"/>
                    <scope line="150"/>
                    <scope line="154"/>
                    <declaration name="b00" type="ComplexNumber" line="160"/>
                    <declaration name="b11" type="ComplexNumber" line="161"/>
                    <declaration name="b2" type="ComplexNumber" line="162"/>
                    <declaration name="cj" type="ComplexNumber" line="168"/>
                    <declaration name="sj" type="ComplexNumber" line="169"/>
                </method>
            </class>
            <class name="Primitive" line="179">
                <extends class="SVDold30">
                    <type_params>
                        <type_param name="Double"/>
                    </type_params>
                </extends>
                <method name="Primitive" type="constructor" line="181"/>
                <method name="rotations" type="Rotation<Double>[]" line="186">
                    <params>
                        <param name="aStore" type="PhysicalStore<Double>"/>
                        <param name="aLowInd" type="int"/>
                        <param name="aHighInd" type="int"/>
                        <param name="retVal" type="Rotation<Double>[]"/>
                    </params>
                    <comment line="187">
                        uble t; // tan, cot or something temporary                        
                    </comment>
                    <comment line="187">
                        Symmetrise - Givens                        
                    </comment>
                    <comment line="187">
                        nal double cg; // cos Givens                        
                    </comment>
                    <comment line="187">
                        nal double sg; // sin Givens                        
                    </comment>
                    <comment line="187">
                        nal double b2 = (cg * (a01 + a10)) + (sg * (a11 - a00)); // b01 + b10                        
                    </comment>
                    <comment line="187">
                        = Math.signum(t) / (PrimitiveFunction.SQRT1PX2.invoke(t) + Math.abs(t)); // tan Jacobi                        
                    </comment>
                    <comment line="187">
                        Annihilate - Jacobi                        
                    </comment>
                    <comment line="187">
                        nal double cj = PrimitiveMath.ONE / PrimitiveFunction.SQRT1PX2.invoke(t); // cos Jacobi                        
                    </comment>
                    <comment line="187">
                        nal double sj = cj * t; // sin Jacobi                        
                    </comment>
                    <comment line="187">
                        tVal[1] = new Rotation.Primitive(aLowInd, aHighInd, cj, sj); // Jacobi                        
                    </comment>
                    <comment line="187">
                        tVal[0] = new Rotation.Primitive(aLowInd, aHighInd, ((cj * cg) + (sj * sg)), ((cj * sg) - (sj * cg))); // Givens - Jacobi                        
                    </comment>
                    <declaration name="a00" type="double" line="188"/>
                    <declaration name="a01" type="double" line="189"/>
                    <declaration name="a10" type="double" line="190"/>
                    <declaration name="a11" type="double" line="191"/>
                    <declaration name="x" type="double" line="193"/>
                    <declaration name="y" type="double" line="194"/>
                    <declaration name="t" type="double" line="196"/>
                    <declaration name="cg" type="double" line="199"/>
                    <declaration name="sg" type="double" line="200"/>
                    <scope line="202"/>
                    <scope line="205"/>
                    <scope line="208"/>
                    <scope line="212"/>
                    <declaration name="b00" type="double" line="218"/>
                    <declaration name="b11" type="double" line="219"/>
                    <declaration name="b2" type="double" line="220"/>
                    <declaration name="cj" type="double" line="226"/>
                    <declaration name="sj" type="double" line="227"/>
                </method>
            </class>
            <declaration name="myFutureQ1" type="Future&lt;PhysicalStore&lt;N&gt;&gt;" line="237"/>
            <declaration name="myFutureQ2" type="Future&lt;PhysicalStore&lt;N&gt;&gt;" line="238"/>
            <declaration name="myQ1Rotations" type="List&lt;Rotation&lt;N&gt;&gt;" line="239"/>
            <declaration name="myQ2Rotations" type="List&lt;Rotation&lt;N&gt;&gt;" line="240"/>
            <method name="SVDold30" type="constructor" line="242">
                <params>
                    <param name="aFactory" type="DecompositionStore.Factory<N,? extends DecompositionStore<N>>"/>
                    <param name="aBidiagonal" type="BidiagonalDecomposition<N>"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="246">
                <params>
                    <param name="aStore" type="MatrixStore<N>"/>
                    <param name="context" type="NumberContext"/>
                </params>
            </method>
            <method name="isOrdered" type="boolean" line="250"/>
            <method name="isSolvable" type="boolean" line="254"/>
            <method name="reset" type="void" line="259"/>
            <method name="solve" type="MatrixStore<N>" line="271">
                <params>
                    <param name="rhs" type="Access2D<N>"/>
                </params>
            </method>
            <method name="doCompute" type="boolean" line="277">
                <params>
                    <param name="aStore" type="Access2D<?>"/>
                    <param name="singularValuesOnly" type="boolean"/>
                    <param name="fullSize" type="boolean"/>
                </params>
                <comment line="278">
                    tation&lt;N&gt;[] tmpRotations = new Rotation[2]; // [Givens - Jacobi, Jacobi]                    
                </comment>
                <comment line="278">
                    int iter = 0;                    
                </comment>
                <comment line="278">
                    BasicLogger.logDebug(this.getClass().toString());                    
                </comment>
                <comment line="278">
                    BasicLogger.logDebug(&quot;Init D&quot;, myD);                    
                </comment>
                <declaration name="tmpMinDim" type="int" line="279"/>
                <declaration name="tmpSimilar" type="DecompositionStore&lt;N&gt;" line="283"/>
                <declaration name="tmpRotations" type="Rotation&lt;N&gt;[]" line="288"/>
                <declaration name="tmpZero" type="N" line="294"/>
                <declaration name="tmpNotAllZeros" type="boolean" line="295"/>
                <scope line="296">
                    <declaration name="i" type="int" line="300"/>
                    <scope line="302">
                        <scope line="303">
                            <scope line="306"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="tmpSingularValue" type="double" line="328"/>
                <scope line="329">
                    <scope line="331"/>
                    <scope line="335"/>
                    <scope line="339">
                        <declaration name="tmpDiagSclr" type="Scalar&lt;N&gt;" line="341"/>
                        <declaration name="tmpSignum" type="N" line="342"/>
                    </scope>
                </scope>
                <anonymous_class line="354">
                    <method name="call" type="PhysicalStore<N>" line="356">
                        <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="358"/>
                        <declaration name="tmpRotations" type="List&lt;Rotation&lt;N&gt;&gt;" line="360"/>
                        <declaration name="tmpLimit" type="int" line="362"/>
                        <scope line="363"/>
                    </method>
                </anonymous_class>
                <anonymous_class line="371">
                    <method name="call" type="PhysicalStore<N>" line="373">
                        <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="375"/>
                        <declaration name="tmpRotations" type="List&lt;Rotation&lt;N&gt;&gt;" line="377"/>
                        <declaration name="tmpLimit" type="int" line="379"/>
                        <scope line="380"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="extractSimilar" type="DiagonalAccess<N>" line="391">
                <params>
                    <param name="aStore" type="PhysicalStore<N>"/>
                    <param name="aNormalAspectRatio" type="boolean"/>
                </params>
                <declaration name="tmpArray2D" type="Array2D&lt;N&gt;" line="393"/>
                <declaration name="tmpMain" type="Array1D&lt;N&gt;" line="395"/>
                <scope line="397">
                    <declaration name="tmpSuper" type="Array1D&lt;N&gt;" line="399"/>
                </scope>
                <scope line="403">
                    <declaration name="tmpSub" type="Array1D&lt;N&gt;" line="405"/>
                </scope>
            </method>
            <method name="makeD" type="MatrixStore<N>" line="412">
                <comment line="413">
                    final int tmpMinDim = this..getMinDim();                    
                </comment>
                <comment line="413">
                                        
                </comment>
                <comment line="413">
                    final PhysicalStore&lt;N&gt; retVal = this.makeZero(tmpMinDim, tmpMinDim);                    
                </comment>
                <comment line="413">
                                        
                </comment>
                <comment line="413">
                    for (int ij = 0; ij &lt; tmpMinDim; ij++) {                    
                </comment>
                <comment line="413">
                    retVal.set(ij, ij, myD.get(ij, ij));                    
                </comment>
                <comment line="413">
                    }                    
                </comment>
            </method>
            <method name="makeQ1" type="MatrixStore<N>" line="426">
                <scope line="427"/>
                <scope line="429"/>
                <scope line="431"/>
            </method>
            <method name="makeQ2" type="MatrixStore<N>" line="437">
                <scope line="438"/>
                <scope line="440"/>
                <scope line="442"/>
            </method>
            <method name="makeSingularValues" type="Array1D<Double>" line="448">
                <comment line="449">
                    TODO Auto-generated method stub                    
                </comment>
            </method>
            <method name="rotations" type="Rotation<N>[]" line="453"/>
        </class>
    </source>