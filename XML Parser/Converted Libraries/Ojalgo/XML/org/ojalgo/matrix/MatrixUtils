<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix">
        <import package="java.math.BigDecimal"/>
        <import package="java.util.Iterator"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.access.AccessUtils"/>
        <import package="org.ojalgo.access.Iterator1D"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.matrix.decomposition"/>
        <import package="org.ojalgo.matrix.store.ComplexDenseStore"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.matrix.store.operation"/>
        <import package="org.ojalgo.random.Uniform"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="MatrixUtils" line="43">
            <method name="equals" type="boolean" line="45">
                <params>
                    <param name="matrix" type="MatrixStore<N>"/>
                    <param name="decomposition" type="Bidiagonal<N>"/>
                    <param name="context" type="NumberContext"/>
                </params>
                <comment line="46">
                    Check that it&apos;s possible to reconstruct the original matrix.                    
                </comment>
                <comment line="46">
                    If Q1 is square, then check if it is orthogonal/unitary.                    
                </comment>
                <comment line="46">
                    If Q2 is square, then check if it is orthogonal/unitary.                    
                </comment>
                <declaration name="tmpRowDim" type="int" line="47"/>
                <declaration name="tmpColDim" type="int" line="48"/>
                <declaration name="tmpQ1" type="MatrixStore&lt;N&gt;" line="50"/>
                <declaration name="tmpD" type="MatrixStore&lt;N&gt;" line="51"/>
                <declaration name="tmpQ2" type="MatrixStore&lt;N&gt;" line="52"/>
                <declaration name="tmpConjugatedQ1" type="MatrixStore&lt;N&gt;" line="54"/>
                <declaration name="tmpConjugatedQ2" type="MatrixStore&lt;N&gt;" line="55"/>
                <declaration name="tmpThis" type="MatrixStore&lt;N&gt;" line="57"/>
                <declaration name="tmpThat" type="MatrixStore&lt;N&gt;" line="58"/>
                <declaration name="retVal" type="boolean" line="60"/>
                <scope line="63"/>
                <scope line="72"/>
                <scope line="81"/>
            </method>
            <method name="equals" type="boolean" line="92">
                <params>
                    <param name="matrix" type="MatrixStore<N>"/>
                    <param name="decomposition" type="Cholesky<N>"/>
                    <param name="context" type="NumberContext"/>
                </params>
                <declaration name="retVal" type="boolean" line="94"/>
                <declaration name="tmpL" type="MatrixStore&lt;N&gt;" line="96"/>
            </method>
            <method name="equals" type="boolean" line="103">
                <params>
                    <param name="matrix" type="MatrixStore<N>"/>
                    <param name="decomposition" type="Eigenvalue<N>"/>
                    <param name="context" type="NumberContext"/>
                </params>
                <comment line="104">
                    Check that [A][V] == [V][D] ([A] == [V][D][V]&lt;sup&gt;T&lt;/sup&gt; is not always true)                    
                </comment>
                <declaration name="tmpD" type="MatrixStore&lt;N&gt;" line="105"/>
                <declaration name="tmpV" type="MatrixStore&lt;N&gt;" line="106"/>
                <declaration name="tmpStore1" type="MatrixStore&lt;N&gt;" line="109"/>
                <declaration name="tmpStore2" type="MatrixStore&lt;N&gt;" line="110"/>
            </method>
            <method name="equals" type="boolean" line="115">
                <params>
                    <param name="matrix" type="MatrixStore<N>"/>
                    <param name="decomposition" type="Hessenberg<N>"/>
                    <param name="context" type="NumberContext"/>
                </params>
                <declaration name="tmpH" type="MatrixStore&lt;N&gt;" line="117"/>
                <declaration name="tmpQ" type="MatrixStore&lt;N&gt;" line="118"/>
                <declaration name="tmpStore1" type="MatrixStore&lt;N&gt;" line="120"/>
                <declaration name="tmpStore2" type="MatrixStore&lt;N&gt;" line="121"/>
            </method>
            <method name="equals" type="boolean" line="126">
                <params>
                    <param name="matrix" type="MatrixStore<N>"/>
                    <param name="decomposition" type="LU<N>"/>
                    <param name="context" type="NumberContext"/>
                </params>
                <declaration name="tmpL" type="MatrixStore&lt;N&gt;" line="128"/>
                <declaration name="tmpU" type="MatrixStore&lt;N&gt;" line="129"/>
                <declaration name="tmpPivotOrder" type="int[]" line="130"/>
            </method>
            <method name="equals" type="boolean" line="135">
                <params>
                    <param name="matrix" type="MatrixStore<N>"/>
                    <param name="decomposition" type="QR<N>"/>
                    <param name="context" type="NumberContext"/>
                </params>
                <declaration name="tmpQ" type="MatrixStore&lt;N&gt;" line="137"/>
                <declaration name="tmpR" type="MatrixStore&lt;N&gt;" line="138"/>
                <declaration name="tmpStore" type="MatrixStore&lt;N&gt;" line="140"/>
            </method>
            <method name="equals" type="boolean" line="145">
                <params>
                    <param name="matrix" type="MatrixStore<N>"/>
                    <param name="decomposition" type="Schur<N>"/>
                    <param name="context" type="NumberContext"/>
                </params>
                <comment line="146">
                    Check that [A][Q] == [Q][U] ([A] == [Q][U][Q]&lt;sup&gt;T&lt;/sup&gt; is not always true)                    
                </comment>
                <declaration name="tmpU" type="MatrixStore&lt;N&gt;" line="147"/>
                <declaration name="tmpQ" type="MatrixStore&lt;N&gt;" line="148"/>
                <declaration name="tmpStore1" type="MatrixStore&lt;N&gt;" line="151"/>
                <declaration name="tmpStore2" type="MatrixStore&lt;N&gt;" line="152"/>
            </method>
            <method name="equals" type="boolean" line="157">
                <params>
                    <param name="matrix" type="MatrixStore<N>"/>
                    <param name="decomposition" type="SingularValue<N>"/>
                    <param name="context" type="NumberContext"/>
                </params>
                <comment line="158">
                    Check that [A][Q2] == [Q1][D]                    
                </comment>
                <comment line="158">
                    If Q1 is square, then check if it is orthogonal/unitary.                    
                </comment>
                <comment line="158">
                    If Q2 is square, then check if it is orthogonal/unitary.                    
                </comment>
                <comment line="158">
                    Check the pseudoinverse.                    
                </comment>
                <comment line="158">
                    Check that the singular values are sorted in descending order                    
                </comment>
                <declaration name="tmpRowDim" type="int" line="159"/>
                <declaration name="tmpColDim" type="int" line="160"/>
                <declaration name="tmpQ1" type="MatrixStore&lt;N&gt;" line="162"/>
                <declaration name="tmpD" type="MatrixStore&lt;N&gt;" line="163"/>
                <declaration name="tmpQ2" type="MatrixStore&lt;N&gt;" line="164"/>
                <declaration name="tmpThis" type="MatrixStore&lt;N&gt;" line="166"/>
                <declaration name="tmpThat" type="MatrixStore&lt;N&gt;" line="167"/>
                <declaration name="retVal" type="boolean" line="169"/>
                <scope line="172"/>
                <scope line="181"/>
                <scope line="190"/>
                <scope line="199"/>
                <scope line="204">
                    <declaration name="tmpSV" type="Array1D&lt;Double&gt;" line="205"/>
                    <scope line="206"/>
                    <scope line="209">
                        <scope line="210"/>
                    </scope>
                </scope>
            </method>
            <method name="equals" type="boolean" line="219">
                <params>
                    <param name="matrix" type="MatrixStore<N>"/>
                    <param name="decomposition" type="Tridiagonal<N>"/>
                    <param name="context" type="NumberContext"/>
                </params>
                <comment line="220">
                    Check that [A] == [Q][D][Q]&lt;sup&gt;T&lt;/sup&gt;                    
                </comment>
                <comment line="220">
                    Check that Q is orthogonal/unitary...                    
                </comment>
            </method>
            <method name="hashCode" type="int" line="227">
                <params>
                    <param name="matrix" type="BasicMatrix<N>"/>
                </params>
            </method>
            <method name="hashCode" type="int" line="231">
                <params>
                    <param name="matrix" type="MatrixStore<N>"/>
                </params>
            </method>
            <method name="isHermitian" type="boolean" line="235">
                <params>
                    <param name="matrix" type="Access2D<?>"/>
                </params>
                <declaration name="tmpRowDim" type="long" line="237"/>
                <declaration name="tmpColDim" type="long" line="238"/>
                <declaration name="tmpElement" type="Number" line="240"/>
                <declaration name="retVal" type="boolean" line="242"/>
                <scope line="244">
                    <declaration name="tmpLowerLeft" type="ComplexNumber" line="246"/>
                    <declaration name="tmpUpperRight" type="ComplexNumber" line="247"/>
                    <scope line="249">
                        <scope line="251"/>
                    </scope>
                </scope>
                <scope line="258">
                    <scope line="260">
                        <scope line="261"/>
                    </scope>
                </scope>
            </method>
            <method name="isLowerLeftShaded" type="boolean" line="270">
                <params>
                    <param name="anAccess" type="Access1D<?>"/>
                </params>
            </method>
            <method name="isNormal" type="boolean" line="274">
                <params>
                    <param name="matrix" type="MatrixStore<N>"/>
                </params>
                <declaration name="tmpConjugate" type="MatrixStore&lt;N&gt;" line="276"/>
            </method>
            <method name="isUpperRightShaded" type="boolean" line="281">
                <params>
                    <param name="anAccess" type="Access1D<?>"/>
                </params>
            </method>
            <method name="makeDecreasingRange" type="int[]" line="285">
                <params>
                    <param name="aFirst" type="int"/>
                    <param name="aCount" type="int"/>
                </params>
                <declaration name="retVal" type="int[]" line="286"/>
                <scope line="287"/>
            </method>
            <method name="makeIncreasingRange" type="int[]" line="293">
                <params>
                    <param name="aFirst" type="int"/>
                    <param name="aCount" type="int"/>
                </params>
                <declaration name="retVal" type="int[]" line="294"/>
                <scope line="295"/>
            </method>
            <method name="makeRandomComplexStore" type="PhysicalStore<ComplexNumber>" line="301">
                <params>
                    <param name="aRowDim" type="int"/>
                    <param name="aColDim" type="int"/>
                </params>
                <declaration name="retVal" type="PhysicalStore&lt;ComplexNumber&gt;" line="303"/>
                <declaration name="tmpArgGen" type="Uniform" line="305"/>
                <scope line="307">
                    <scope line="308"/>
                </scope>
            </method>
            <method name="makeRange" type="int[]" line="316">
                <params>
                    <param name="anInd" type="int"/>
                </params>
            </method>
            <method name="max" type="int" line="320">
                <params>
                    <param name="values" type="int"/>
                </params>
                <declaration name="retVal" type="int" line="321"/>
                <scope line="322"/>
            </method>
            <method name="min" type="int" line="328">
                <params>
                    <param name="values" type="int"/>
                </params>
                <declaration name="retVal" type="int" line="329"/>
                <scope line="330"/>
            </method>
            <method name="reconstruct" type="MatrixStore<N>" line="336">
                <params>
                    <param name="decomposition" type="Bidiagonal<N>"/>
                </params>
            </method>
            <method name="reconstruct" type="MatrixStore<N>" line="340">
                <params>
                    <param name="decomposition" type="Cholesky<N>"/>
                </params>
                <declaration name="tmpL" type="MatrixStore&lt;N&gt;" line="341"/>
            </method>
            <method name="reconstruct" type="MatrixStore<N>" line="345">
                <params>
                    <param name="decomposition" type="Eigenvalue<N>"/>
                </params>
                <declaration name="tmpV" type="MatrixStore&lt;N&gt;" line="346"/>
            </method>
            <method name="reconstruct" type="MatrixStore<N>" line="350">
                <params>
                    <param name="decomposition" type="Hessenberg<N>"/>
                </params>
                <declaration name="tmpQ" type="MatrixStore&lt;N&gt;" line="351"/>
                <declaration name="tmpH" type="MatrixStore&lt;N&gt;" line="352"/>
            </method>
            <method name="reconstruct" type="MatrixStore<N>" line="356">
                <params>
                    <param name="decomposition" type="LU<N>"/>
                </params>
            </method>
            <method name="reconstruct" type="MatrixStore<N>" line="360">
                <params>
                    <param name="decomposition" type="QR<N>"/>
                </params>
            </method>
            <method name="reconstruct" type="MatrixStore<N>" line="364">
                <params>
                    <param name="decomposition" type="Schur<N>"/>
                </params>
                <declaration name="tmpQ" type="MatrixStore&lt;N&gt;" line="365"/>
            </method>
            <method name="reconstruct" type="MatrixStore<N>" line="369">
                <params>
                    <param name="decomposition" type="SingularValue<N>"/>
                </params>
            </method>
            <method name="reconstruct" type="MatrixStore<N>" line="373">
                <params>
                    <param name="decomposition" type="Tridiagonal<N>"/>
                </params>
                <declaration name="tmpQ" type="MatrixStore&lt;N&gt;" line="374"/>
            </method>
            <method name="setAllOperationThresholds" type="void" line="378">
                <params>
                    <param name="aValue" type="int"/>
                </params>
            </method>
            <method name="toString" type="String" line="409">
                <params>
                    <param name="matrix" type="Access2D<?>"/>
                </params>
                <declaration name="retVal" type="StringBuilder" line="411"/>
                <declaration name="tmpRowDim" type="int" line="413"/>
                <declaration name="tmpColDim" type="int" line="414"/>
                <scope line="419">
                    <scope line="425"/>
                    <scope line="430">
                        <scope line="436"/>
                    </scope>
                </scope>
            </method>
            <method name="wrapBigAccess2D" type="Access2D<BigDecimal>" line="448">
                <params>
                    <param name="matrix" type="BasicMatrix<?>"/>
                </params>
                <anonymous_class line="449">
                    <method name="count" type="long" line="451"/>
                    <method name="countColumns" type="long" line="455"/>
                    <method name="countRows" type="long" line="459"/>
                    <method name="doubleValue" type="double" line="463">
                        <params>
                            <param name="anInd" type="long"/>
                        </params>
                    </method>
                    <method name="doubleValue" type="double" line="467">
                        <params>
                            <param name="aRow" type="long"/>
                            <param name="aCol" type="long"/>
                        </params>
                    </method>
                    <method name="get" type="BigDecimal" line="471">
                        <params>
                            <param name="index" type="long"/>
                        </params>
                    </method>
                    <method name="get" type="BigDecimal" line="475">
                        <params>
                            <param name="aRow" type="long"/>
                            <param name="aCol" type="long"/>
                        </params>
                    </method>
                    <method name="getColDim" type="int" line="479"/>
                    <method name="getRowDim" type="int" line="483"/>
                    <method name="iterator" type="Iterator<BigDecimal>" line="487"/>
                    <method name="size" type="int" line="491"/>
                </anonymous_class>
            </method>
            <method name="wrapComplexAccess2D" type="Access2D<ComplexNumber>" line="498">
                <params>
                    <param name="matrix" type="BasicMatrix<?>"/>
                </params>
                <anonymous_class line="499">
                    <method name="count" type="long" line="501"/>
                    <method name="countColumns" type="long" line="505"/>
                    <method name="countRows" type="long" line="509"/>
                    <method name="doubleValue" type="double" line="513">
                        <params>
                            <param name="anInd" type="long"/>
                        </params>
                    </method>
                    <method name="doubleValue" type="double" line="517">
                        <params>
                            <param name="aRow" type="long"/>
                            <param name="aCol" type="long"/>
                        </params>
                    </method>
                    <method name="get" type="ComplexNumber" line="521">
                        <params>
                            <param name="index" type="long"/>
                        </params>
                    </method>
                    <method name="get" type="ComplexNumber" line="525">
                        <params>
                            <param name="aRow" type="long"/>
                            <param name="aCol" type="long"/>
                        </params>
                    </method>
                    <method name="getColDim" type="int" line="529"/>
                    <method name="getRowDim" type="int" line="533"/>
                    <method name="iterator" type="Iterator<ComplexNumber>" line="537"/>
                    <method name="size" type="int" line="541"/>
                </anonymous_class>
            </method>
            <method name="wrapPrimitiveAccess2D" type="Access2D<Double>" line="548">
                <params>
                    <param name="matrix" type="BasicMatrix<?>"/>
                </params>
                <anonymous_class line="549">
                    <method name="count" type="long" line="551"/>
                    <method name="countColumns" type="long" line="555"/>
                    <method name="countRows" type="long" line="559"/>
                    <method name="doubleValue" type="double" line="563">
                        <params>
                            <param name="anInd" type="long"/>
                        </params>
                    </method>
                    <method name="doubleValue" type="double" line="567">
                        <params>
                            <param name="aRow" type="long"/>
                            <param name="aCol" type="long"/>
                        </params>
                    </method>
                    <method name="get" type="Double" line="571">
                        <params>
                            <param name="index" type="long"/>
                        </params>
                    </method>
                    <method name="get" type="Double" line="575">
                        <params>
                            <param name="aRow" type="long"/>
                            <param name="aCol" type="long"/>
                        </params>
                    </method>
                    <method name="getColDim" type="int" line="579"/>
                    <method name="getRowDim" type="int" line="583"/>
                    <method name="iterator" type="Iterator<Double>" line="587"/>
                    <method name="size" type="int" line="591"/>
                </anonymous_class>
            </method>
            <method name="MatrixUtils" type="constructor" line="598"/>
        </class>
    </source>