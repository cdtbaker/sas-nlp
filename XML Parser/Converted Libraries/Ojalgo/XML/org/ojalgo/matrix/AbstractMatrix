<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix">
        <import package="java.io.Serializable"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="org.ojalgo.ProgrammingError"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.access.AccessUtils"/>
        <import package="org.ojalgo.access.Iterator1D"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.aggregator.Aggregator"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.matrix.decomposition.Eigenvalue"/>
        <import package="org.ojalgo.matrix.decomposition.EigenvalueDecomposition"/>
        <import package="org.ojalgo.matrix.decomposition.LU"/>
        <import package="org.ojalgo.matrix.decomposition.LUDecomposition"/>
        <import package="org.ojalgo.matrix.decomposition.QR"/>
        <import package="org.ojalgo.matrix.decomposition.QRDecomposition"/>
        <import package="org.ojalgo.matrix.decomposition.SingularValue"/>
        <import package="org.ojalgo.matrix.decomposition.SingularValueDecomposition"/>
        <import package="org.ojalgo.matrix.store"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="AbstractMatrix" extends="Object" line="52">
            <implements interface="BasicMatrix&lt;N&gt;"/>
            <implements interface="Serializable"/>
            <javadoc line="52">
                ArbitraryMatrix                
                <@author>
                    r apete                    
                </@author>
            </javadoc>
            <declaration name="myEigenvalue" type="Eigenvalue&lt;N&gt;" line="59"/>
            <declaration name="myHashCode" type="int" line="60"/>
            <declaration name="myLU" type="LU&lt;N&gt;" line="61"/>
            <declaration name="myPhysicalFactory" type="PhysicalStore.Factory&lt;N,? extends PhysicalStore&lt;N&gt;&gt;" line="62"/>
            <declaration name="myQR" type="QR&lt;N&gt;" line="63"/>
            <declaration name="mySingularValue" type="SingularValue&lt;N&gt;" line="64"/>
            <declaration name="myStore" type="MatrixStore&lt;N&gt;" line="65"/>
            <method name="AbstractMatrix" type="constructor" line="68"/>
            <method name="AbstractMatrix" type="constructor" line="75"/>
            <method name="add" type="I" line="83">
                <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="87"/>
            </method>
            <method name="add" type="I" line="94">
                <declaration name="tmpDiff" type="MatrixStore&lt;N&gt;" line="96"/>
            </method>
            <method name="add" type="I" line="101">
                <declaration name="tmpPhysicalFactory" type="PhysicalStore.Factory&lt;N,?&gt;" line="103"/>
                <declaration name="tmpDiff" type="SingleStore&lt;N&gt;" line="105"/>
            </method>
            <method name="add" type="I" line="110">
                <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="112"/>
            </method>
            <method name="conjugate" type="I" line="119">
                <declaration name="retVal" type="MatrixStore&lt;N&gt;" line="121"/>
                <scope line="123"/>
                <scope line="125"/>
            </method>
            <method name="copyToBuilder" type="Access2D.Builder<I>" line="132"/>
            <method name="count" type="long" line="136"/>
            <method name="countColumns" type="long" line="140"/>
            <method name="countRows" type="long" line="144"/>
            <method name="divide" type="I" line="148">
                <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="150"/>
            </method>
            <method name="divideElements" type="I" line="157">
                <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="161"/>
            </method>
            <method name="doubleValue" type="double" line="168"/>
            <method name="doubleValue" type="double" line="172"/>
            <method name="equals" type="boolean" line="176"/>
            <method name="equals" type="boolean" line="181">
                <scope line="182"/>
                <scope line="184"/>
            </method>
            <method name="flushCache" type="void" line="189"/>
            <method name="get" type="N" line="199"/>
            <method name="get" type="N" line="203"/>
            <method name="get" type="N" line="207"/>
            <method name="getColDim" type="int" line="211">
                <comment line="212">
                    TODO Make protected when no longer in interface                    
                </comment>
            </method>
            <method name="getColumnsRange" type="I" line="216"/>
            <method name="getCondition" type="Scalar<N>" line="220"/>
            <method name="getDeterminant" type="Scalar<N>" line="224"/>
            <method name="getEigenvalues" type="List<ComplexNumber>" line="228"/>
            <javadoc line="232">
                @see org.ojalgo.matrix.BasicMatrix#getFrobeniusNorm()                
            </javadoc>
            <method name="getFrobeniusNorm" type="Scalar<N>" line="235">
                <scope line="237"/>
                <scope line="241"/>
            </method>
            <method name="getInfinityNorm" type="Scalar<N>" line="247">
                <declaration name="retVal" type="double" line="249"/>
                <declaration name="tmpRowSumAggr" type="AggregatorFunction&lt;N&gt;" line="250"/>
                <declaration name="tmpRowDim" type="int" line="252"/>
                <scope line="253"/>
            </method>
            <method name="getKyFanNorm" type="Scalar<N>" line="262"/>
            <method name="getOneNorm" type="Scalar<N>" line="266">
                <declaration name="retVal" type="double" line="268"/>
                <declaration name="tmpColSumAggr" type="AggregatorFunction&lt;N&gt;" line="269"/>
                <declaration name="tmpColDim" type="int" line="271"/>
                <scope line="272"/>
            </method>
            <method name="getOperatorNorm" type="Scalar<N>" line="281"/>
            <method name="getRank" type="int" line="285">
                <scope line="286"/>
                <scope line="288"/>
                <scope line="290"/>
            </method>
            <method name="getRowDim" type="int" line="295">
                <comment line="296">
                    TODO Make protected when no longer in interface                    
                </comment>
            </method>
            <method name="getRowsRange" type="I" line="300"/>
            <method name="getSingularValues" type="List<Double>" line="304"/>
            <method name="getTrace" type="Scalar<N>" line="308">
                <declaration name="tmpAggr" type="AggregatorFunction&lt;N&gt;" line="310"/>
            </method>
            <method name="getTraceNorm" type="Scalar<N>" line="317"/>
            <method name="getVectorNorm" type="Scalar<N>" line="321"/>
            <method name="hashCode" type="int" line="344">
                <scope line="345"/>
            </method>
            <method name="invert" type="I" line="351">
                <declaration name="retVal" type="MatrixStore&lt;N&gt;" line="353"/>
                <scope line="355"/>
                <scope line="357"/>
                <scope line="359"/>
            </method>
            <method name="isEmpty" type="boolean" line="366"/>
            <method name="isFat" type="boolean" line="370"/>
            <method name="isFullRank" type="boolean" line="374"/>
            <method name="isHermitian" type="boolean" line="378"/>
            <method name="isScalar" type="boolean" line="382"/>
            <method name="isSquare" type="boolean" line="386"/>
            <method name="isSymmetric" type="boolean" line="390"/>
            <method name="isTall" type="boolean" line="394"/>
            <method name="isVector" type="boolean" line="398"/>
            <method name="iterator" type="Iterator<N>" line="402"/>
            <method name="mergeColumns" type="I" line="406"/>
            <method name="mergeRows" type="I" line="413"/>
            <method name="modify" type="I" line="420">
                <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="422"/>
            </method>
            <method name="multiply" type="I" line="429">
                <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="431"/>
            </method>
            <method name="multiplyElements" type="I" line="438">
                <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="442"/>
            </method>
            <method name="multiplyLeft" type="I" line="449"/>
            <method name="multiplyRight" type="I" line="456"/>
            <method name="multiplyVectors" type="Scalar<N>" line="463">
                <scope line="464"/>
                <scope line="466"/>
                <scope line="468"/>
            </method>
            <method name="negate" type="I" line="473">
                <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="475"/>
            </method>
            <method name="selectColumns" type="I" line="482"/>
            <method name="selectRows" type="I" line="486"/>
            <method name="size" type="int" line="490"/>
            <method name="solve" type="I" line="494">
                <declaration name="retVal" type="MatrixStore&lt;N&gt;" line="496"/>
                <scope line="498"/>
                <scope line="500"/>
                <scope line="502"/>
            </method>
            <method name="subtract" type="I" line="509">
                <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="513"/>
            </method>
            <method name="subtract" type="I" line="520">
                <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="522"/>
            </method>
            <method name="toBigStore" type="PhysicalStore<BigDecimal>" line="529"/>
            <method name="toComplexStore" type="PhysicalStore<ComplexNumber>" line="533"/>
            <method name="toListOfColumns" type="List<BasicMatrix<N>>" line="537">
                <declaration name="tmpColDim" type="int" line="539"/>
                <declaration name="retVal" type="List&lt;BasicMatrix&lt;N&gt;&gt;" line="541"/>
                <scope line="543"/>
            </method>
            <method name="toListOfElements" type="List<N>" line="550"/>
            <method name="toListOfRows" type="List<BasicMatrix<N>>" line="554">
                <declaration name="tmpRowDim" type="int" line="556"/>
                <declaration name="retVal" type="List&lt;BasicMatrix&lt;N&gt;&gt;" line="558"/>
                <scope line="560"/>
            </method>
            <method name="toPrimitiveStore" type="PhysicalStore<Double>" line="567"/>
            <method name="toScalar" type="Scalar<N>" line="571"/>
            <method name="toString" type="String" line="576"/>
            <method name="transpose" type="I" line="580">
                <declaration name="retVal" type="MatrixStore&lt;N&gt;" line="582"/>
                <scope line="584"/>
                <scope line="586"/>
            </method>
            <method name="getComputedEigenvalue" type="Eigenvalue<N>" line="593">
                <declaration name="retVal" type="Eigenvalue&lt;N&gt;" line="595"/>
                <scope line="597"/>
            </method>
            <method name="getComputedLU" type="LU<N>" line="604">
                <declaration name="retVal" type="LU&lt;N&gt;" line="606"/>
                <scope line="608"/>
            </method>
            <method name="getComputedQR" type="QR<N>" line="615">
                <declaration name="retVal" type="QR&lt;N&gt;" line="617"/>
                <scope line="619"/>
            </method>
            <method name="getComputedSingularValue" type="SingularValue<N>" line="626">
                <declaration name="retVal" type="SingularValue&lt;N&gt;" line="628"/>
                <scope line="630"/>
            </method>
            <method name="getEigenvalue" type="Eigenvalue<N>" line="637">
                <scope line="639"/>
            </method>
            <method name="getLU" type="LU<N>" line="646">
                <scope line="647"/>
            </method>
            <method name="getQR" type="QR<N>" line="653">
                <scope line="654"/>
            </method>
            <method name="getSingularValue" type="SingularValue<N>" line="660">
                <scope line="661"/>
            </method>
            <method name="getFactory" type="MatrixFactory<N,I>" line="667"/>
            <method name="getPhysicalFactory" type="PhysicalStore.Factory<N,? extends PhysicalStore<N>>" line="669"/>
            <method name="getStore" type="MatrixStore<N>" line="673"/>
            <method name="getStoreFrom" type="MatrixStore<N>" line="677"/>
        </class>
    </source>