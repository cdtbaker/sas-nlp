<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.jama">
        <import package="org.ojalgo.ProgrammingError"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.decomposition.SingularValue"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="JamaSingularValue" line="35">
            <extends class="JamaAbstractDecomposition"/>
            <implements interface="SingularValue">
                <type_params>
                    <type_param name="Double"/>
                </type_params>
            </implements>
            <javadoc line="35">
                This class adapts JAMA&apos;s SingularValueDecomposition to ojAlgo&apos;s{@linkplain SingularValue} interface.
                  speed: 52.641s                
                <@author>
                    r apete                    
                </@author>
            </javadoc>
            <declaration name="myDelegate" type="SingularValueDecomposition" line="46"/>
            <declaration name="myTransposed" type="boolean" line="47"/>
            <declaration name="myPseudoinverse" type="JamaMatrix" line="48"/>
            <javadoc line="50">
                Not recommended to use this constructor directly.
                  Consider using the static factory method{@linkplain org.ojalgo.matrix.decomposition.SingularValueDecomposition#makeJama()}instead.                
            </javadoc>
            <method name="JamaSingularValue" type="constructor" line="56"/>
            <method name="compute" type="boolean" line="60">
                <params>
                    <param name="matrix" type="Access2D<?>"/>
                    <param name="singularValuesOnly" type="boolean"/>
                    <param name="fullSize" type="boolean"/>
                </params>
                <declaration name="tmpCast" type="Matrix" line="64"/>
            </method>
            <method name="equals" type="boolean" line="69">
                <params>
                    <param name="aStore" type="MatrixStore<Double>"/>
                    <param name="context" type="NumberContext"/>
                </params>
            </method>
            <method name="getCondition" type="double" line="73"/>
            <method name="getD" type="JamaMatrix" line="77"/>
            <method name="getFrobeniusNorm" type="double" line="81">
                <declaration name="retVal" type="double" line="83"/>
                <declaration name="tmpVal" type="double" line="84"/>
                <declaration name="tmpSingularValues" type="Array1D&lt;Double&gt;" line="86"/>
                <scope line="88"/>
            </method>
            <method name="getInverse" type="JamaMatrix" line="97">
                <scope line="99">
                    <declaration name="tmpQ1" type="double[][]" line="101"/>
                    <declaration name="tmpSingular" type="double[]" line="102"/>
                    <declaration name="tmpMtrx" type="Matrix" line="104"/>
                    <scope line="106">
                        <scope line="107">
                            <scope line="108"/>
                        </scope>
                        <scope line="111">
                            <scope line="112"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getKyFanNorm" type="double" line="124">
                <params>
                    <param name="k" type="int"/>
                </params>
                <declaration name="retVal" type="double" line="126"/>
                <declaration name="tmpSingularValues" type="Array1D&lt;Double&gt;" line="128"/>
                <declaration name="tmpK" type="int" line="129"/>
                <scope line="131"/>
            </method>
            <method name="getOperatorNorm" type="double" line="138"/>
            <method name="getQ1" type="JamaMatrix" line="142"/>
            <method name="getQ2" type="JamaMatrix" line="146"/>
            <method name="getRank" type="int" line="150"/>
            <method name="getSingularValues" type="Array1D<Double>" line="154"/>
            <method name="getTraceNorm" type="double" line="158"/>
            <method name="isAspectRatioNormal" type="boolean" line="162"/>
            <method name="isComputed" type="boolean" line="166"/>
            <method name="isFullSize" type="boolean" line="170"/>
            <method name="isOrdered" type="boolean" line="174"/>
            <method name="isSolvable" type="boolean" line="178"/>
            <method name="reconstruct" type="MatrixStore<Double>" line="182"/>
            <method name="reset" type="void" line="186"/>
            <javadoc line="193">
                Internally this implementation uses the pseudoinverse that is recreated 
                  with every call.                
            </javadoc>
            <method name="solve" type="JamaMatrix" line="198">
                <params>
                    <param name="rhs" type="Access2D<Double>"/>
                </params>
            </method>
            <method name="toString" type="String" line="203"/>
            <method name="compute" type="boolean" line="208">
                <params>
                    <param name="aDelegate" type="Matrix"/>
                </params>
            </method>
            <method name="compute" type="boolean" line="212">
                <params>
                    <param name="aDelegate" type="Matrix"/>
                    <param name="singularValuesOnly" type="boolean"/>
                </params>
                <declaration name="tmpMtrx" type="Matrix" line="214"/>
                <scope line="216"/>
                <scope line="219"/>
            </method>
            <method name="solve" type="Matrix" line="230">
                <params>
                    <param name="aRHS" type="Matrix"/>
                </params>
            </method>
        </class>
    </source>