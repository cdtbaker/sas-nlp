<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.function">
        <class name="FunctionSet" line="24">
            <method name="FunctionSet" type="constructor" line="26"/>
            <method name="abs" type="UnaryFunction<N>" line="30"/>
            <javadoc line="30">
                @see StrictMath#abs(double)                
            </javadoc>
            <method name="acos" type="UnaryFunction<N>" line="35"/>
            <javadoc line="35">
                @see StrictMath#acos(double)                
            </javadoc>
            <method name="acosh" type="UnaryFunction<N>" line="40"/>
            <method name="add" type="BinaryFunction<N>" line="42"/>
            <javadoc line="42">
                +                
            </javadoc>
            <method name="asin" type="UnaryFunction<N>" line="47"/>
            <javadoc line="47">
                @see StrictMath#asin(double)                
            </javadoc>
            <method name="asinh" type="UnaryFunction<N>" line="52"/>
            <method name="atan" type="UnaryFunction<N>" line="54"/>
            <javadoc line="54">
                @see StrictMath#atan(double)                
            </javadoc>
            <method name="atanh" type="UnaryFunction<N>" line="59"/>
            <method name="cardinality" type="UnaryFunction<N>" line="61"/>
            <method name="conjugate" type="UnaryFunction<N>" line="63"/>
            <method name="cos" type="UnaryFunction<N>" line="65"/>
            <javadoc line="65">
                @see StrictMath#cos(double)                
            </javadoc>
            <method name="cosh" type="UnaryFunction<N>" line="70"/>
            <javadoc line="70">
                @see StrictMath#cosh(double)                
            </javadoc>
            <method name="divide" type="BinaryFunction<N>" line="75"/>
            <javadoc line="75">
                /                
            </javadoc>
            <method name="exp" type="UnaryFunction<N>" line="80"/>
            <javadoc line="80">
                @see StrictMath#exp(double)                
            </javadoc>
            <method name="expm1" type="UnaryFunction<N>" line="85"/>
            <javadoc line="85">
                @see StrictMath#expm1(double)                
            </javadoc>
            <method name="hypot" type="BinaryFunction<N>" line="90"/>
            <javadoc line="90">
                @see StrictMath#hypot(double,double)                
            </javadoc>
            <method name="invert" type="UnaryFunction<N>" line="95"/>
            <method name="log" type="UnaryFunction<N>" line="97"/>
            <javadoc line="97">
                @see StrictMath#log(double)                
            </javadoc>
            <method name="log10" type="UnaryFunction<N>" line="102"/>
            <javadoc line="102">
                @see StrictMath#log10(double)                
            </javadoc>
            <method name="log1p" type="UnaryFunction<N>" line="107"/>
            <javadoc line="107">
                @see StrictMath#log1p(double)                
            </javadoc>
            <method name="max" type="BinaryFunction<N>" line="112"/>
            <javadoc line="112">
                @see StrictMath#max(double,double)                
            </javadoc>
            <method name="min" type="BinaryFunction<N>" line="117"/>
            <javadoc line="117">
                @see StrictMath#min(double,double)                
            </javadoc>
            <method name="multiply" type="BinaryFunction<N>" line="122"/>
            <javadoc line="122">
                *                
            </javadoc>
            <method name="negate" type="UnaryFunction<N>" line="127"/>
            <method name="pow" type="BinaryFunction<N>" line="129"/>
            <javadoc line="129">
                @see StrictMath#pow(double,double)                
            </javadoc>
            <method name="power" type="ParameterFunction<N>" line="134"/>
            <method name="root" type="ParameterFunction<N>" line="136"/>
            <method name="scale" type="ParameterFunction<N>" line="138"/>
            <method name="signum" type="UnaryFunction<N>" line="140"/>
            <javadoc line="140">
                @see StrictMath#signum(double)                
            </javadoc>
            <method name="sin" type="UnaryFunction<N>" line="145"/>
            <javadoc line="145">
                @see StrictMath#sin(double)                
            </javadoc>
            <method name="sinh" type="UnaryFunction<N>" line="150"/>
            <javadoc line="150">
                @see StrictMath#sinh(double)                
            </javadoc>
            <method name="sqrt" type="UnaryFunction<N>" line="155"/>
            <javadoc line="155">
                @see StrictMath#sqrt(double)                
            </javadoc>
            <method name="sqrt1px2" type="UnaryFunction<N>" line="160"/>
            <javadoc line="160">
                @return sqrt(1.0 + x&lt;sup&gt;2&lt;/sup&gt;)                
            </javadoc>
            <method name="subtract" type="BinaryFunction<N>" line="165"/>
            <javadoc line="165">
                -                
            </javadoc>
            <method name="tan" type="UnaryFunction<N>" line="170"/>
            <javadoc line="170">
                @see StrictMath#tan(double)                
            </javadoc>
            <method name="tanh" type="UnaryFunction<N>" line="175"/>
            <javadoc line="175">
                @see StrictMath#tanh(double)                
            </javadoc>
            <method name="value" type="UnaryFunction<N>" line="180"/>
        </class>
    </source>