<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.type.context">
        <import package="java.math.BigDecimal"/>
        <import package="java.math.MathContext"/>
        <import package="java.math.RoundingMode"/>
        <import package="java.text.DecimalFormat"/>
        <import package="java.text.Format"/>
        <import package="java.text.NumberFormat"/>
        <import package="java.util.Locale"/>
        <import package="org.ojalgo.ProgrammingError"/>
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.RationalNumber"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <import package="org.ojalgo.type.format.NumberStyle"/>
        <class name="NumberContext" extends="FormatContext<Number>" line="42">
            <javadoc line="42">
                &lt;p&gt;
                 * Think of this as a {@linkplain MathContext} that specifies both precision and scale. Numeric data types
                 * (non-integers) in databases are specified using precison and scale. While doing maths the precision is all that
                 * matters, but before sending a number to a database, or printing/displaying it, rounding to a specified scale is
                 * desireable.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * The enforce methods first enforce the precision and then set the scale. It is possible that this will create a number
                 * with trailing zeros and more digits than the precision allows. It is also possible to define a context with a scale
                 * that is larger than the precision. This is NOT how precision and scale is used with numeric types in databases.
                 * &lt;/p&gt;                
                <@author>
                    r apete                    
                </@author>
            </javadoc>
            <interface name="Enforceable">
                <method name="enforce" type="N" line="61"/>
            </interface>
            <interface name="FormatPattern">
                <method name="toLocalizedPattern" type="String" line="67"/>
                <method name="toPattern" type="String" line="69"/>
            </interface>
            <declaration name="DEFAULT_MATH" type="MathContext" line="73"/>
            <declaration name="DEFAULT_STYLE" type="NumberStyle" line="75"/>
            <method name="getCurrency" type="NumberContext" line="77">
                <declaration name="tmpFormat" type="NumberFormat" line="79"/>
                <declaration name="tmpPrecision" type="int" line="80"/>
                <declaration name="tmpScale" type="int" line="81"/>
                <declaration name="tmpRoundingMode" type="RoundingMode" line="82"/>
            </method>
            <method name="getGeneral" type="NumberContext" line="87">
                <declaration name="tmpFormat" type="NumberFormat" line="89"/>
                <declaration name="tmpPrecision" type="int" line="90"/>
                <declaration name="tmpScale" type="int" line="91"/>
                <declaration name="tmpRoundingMode" type="RoundingMode" line="92"/>
            </method>
            <method name="getGeneral" type="NumberContext" line="97">
                <declaration name="tmpFormat" type="NumberFormat" line="99"/>
                <declaration name="tmpPrecision" type="int" line="100"/>
                <declaration name="tmpScale" type="int" line="101"/>
                <declaration name="tmpRoundingMode" type="RoundingMode" line="102"/>
            </method>
            <method name="getGeneral" type="NumberContext" line="107">
                <declaration name="tmpFormat" type="NumberFormat" line="109"/>
                <declaration name="tmpPrecision" type="int" line="110"/>
                <declaration name="tmpScale" type="int" line="111"/>
                <declaration name="tmpRoundingMode" type="RoundingMode" line="112"/>
            </method>
            <javadoc line="117">
                The scale will be set to half the precision.                
            </javadoc>
            <method name="getGeneral" type="NumberContext" line="120">
                <declaration name="tmpFormat" type="NumberFormat" line="122"/>
                <declaration name="tmpPrecision" type="int" line="123"/>
                <declaration name="tmpScale" type="int" line="124"/>
                <declaration name="tmpRoundingMode" type="RoundingMode" line="125"/>
            </method>
            <method name="getInteger" type="NumberContext" line="130">
                <declaration name="tmpFormat" type="NumberFormat" line="132"/>
                <declaration name="tmpPrecision" type="int" line="133"/>
                <declaration name="tmpScale" type="int" line="134"/>
                <declaration name="tmpRoundingMode" type="RoundingMode" line="135"/>
            </method>
            <method name="getMath" type="NumberContext" line="140">
                <declaration name="tmpFormat" type="NumberFormat" line="142"/>
                <declaration name="tmpPrecision" type="int" line="143"/>
                <declaration name="tmpScale" type="int" line="144"/>
                <declaration name="tmpRoundingMode" type="RoundingMode" line="145"/>
            </method>
            <javadoc line="150">
                The scale will be set to the same as the precision.                
            </javadoc>
            <method name="getMath" type="NumberContext" line="153">
                <declaration name="tmpFormat" type="NumberFormat" line="155"/>
                <declaration name="tmpPrecision" type="int" line="156"/>
                <declaration name="tmpScale" type="int" line="157"/>
                <declaration name="tmpRoundingMode" type="RoundingMode" line="158"/>
            </method>
            <method name="getPercent" type="NumberContext" line="163">
                <declaration name="tmpFormat" type="NumberFormat" line="165"/>
                <declaration name="tmpPrecision" type="int" line="166"/>
                <declaration name="tmpScale" type="int" line="167"/>
                <declaration name="tmpRoundingMode" type="RoundingMode" line="168"/>
            </method>
            <method name="getPercent" type="NumberContext" line="173"/>
            <method name="toFormat" type="Format" line="177"/>
            <method name="error" type="double" line="181"/>
            <declaration name="myError" type="double" line="185"/>
            <declaration name="myMathContext" type="MathContext" line="186"/>
            <declaration name="myPrecision" type="int" line="187"/>
            <declaration name="myPrecisionError" type="double" line="188"/>
            <declaration name="myRoundingMode" type="RoundingMode" line="189"/>
            <declaration name="myScale" type="int" line="190"/>
            <declaration name="myScaleError" type="double" line="191"/>
            <declaration name="myScaleFactor" type="double" line="193"/>
            <method name="NumberContext" type="constructor" line="195"/>
            <method name="NumberContext" type="constructor" line="199">
                <declaration name="tmpMax" type="int" line="214"/>
                <declaration name="tmpMin" type="int" line="215"/>
                <declaration name="tmpErrExp" type="int" line="216"/>
            </method>
            <method name="NumberContext" type="constructor" line="220"/>
            <method name="NumberContext" type="constructor" line="224"/>
            <method name="NumberContext" type="constructor" line="228"/>
            <method name="NumberContext" type="constructor" line="232"/>
            <method name="NumberContext" type="constructor" line="237"/>
            <javadoc line="242">
                Will first enforce the precision, and then the scale. Both operations will comply with the rounding mode.                
            </javadoc>
            <method name="enforce" type="BigDecimal" line="245">
                <declaration name="retVal" type="BigDecimal" line="247"/>
                <scope line="249"/>
                <scope line="253"/>
                <scope line="257"/>
                <scope line="259"/>
            </method>
            <javadoc line="264">
                Does not enforce the precision and does not use the specified rounding mode. The precision is given by the type
                 * double and the rounding mode is always &quot;half even&quot; as given by {@linkplain StrictMath#rint(double)}.                
            </javadoc>
            <method name="enforce" type="double" line="268"/>
            <method name="enforce" type="Number" line="273">
                <scope line="274"/>
                <scope line="276"/>
                <scope line="278"/>
                <scope line="280"/>
            </method>
            <javadoc line="285">
                @see java.lang.Object#equals(java.lang.Object)                
            </javadoc>
            <method name="equals" type="boolean" line="289">
                <scope line="290"/>
                <scope line="293"/>
                <scope line="296"/>
                <declaration name="other" type="NumberContext" line="299"/>
                <scope line="300">
                    <scope line="301"/>
                </scope>
                <scope line="304"/>
                <scope line="307"/>
                <scope line="310">
                    <scope line="311"/>
                </scope>
                <scope line="314"/>
                <scope line="317"/>
                <scope line="320"/>
            </method>
            <javadoc line="326">
                @deprecated v35                
            </javadoc>
            <method name="error" type="double" line="330"/>
            <method name="getBigEnforceFunction" type="UnaryFunction<BigDecimal>" line="334">
                <anonymous_class line="335">
                    <method name="invoke" type="BigDecimal" line="337"/>
                    <method name="invoke" type="double" line="341"/>
                </anonymous_class>
            </method>
            <method name="getBigRoundFunction" type="UnaryFunction<BigDecimal>" line="347">
                <anonymous_class line="348">
                    <method name="invoke" type="BigDecimal" line="350"/>
                    <method name="invoke" type="double" line="354"/>
                </anonymous_class>
            </method>
            <method name="getComplexEnforceFunction" type="UnaryFunction<ComplexNumber>" line="360">
                <anonymous_class line="361">
                    <method name="invoke" type="ComplexNumber" line="363"/>
                    <method name="invoke" type="double" line="367"/>
                </anonymous_class>
            </method>
            <method name="getComplexRoundFunction" type="UnaryFunction<ComplexNumber>" line="373">
                <anonymous_class line="374">
                    <method name="invoke" type="ComplexNumber" line="376"/>
                    <method name="invoke" type="double" line="380"/>
                </anonymous_class>
            </method>
            <method name="getMathContext" type="MathContext" line="386"/>
            <method name="getPrecision" type="int" line="390"/>
            <method name="getPrimitiveEnforceFunction" type="UnaryFunction<Double>" line="394">
                <anonymous_class line="395">
                    <method name="invoke" type="double" line="397"/>
                    <method name="invoke" type="Double" line="401"/>
                </anonymous_class>
            </method>
            <method name="getPrimitiveRoundFunction" type="UnaryFunction<Double>" line="407">
                <anonymous_class line="408">
                    <method name="invoke" type="double" line="410"/>
                    <method name="invoke" type="Double" line="414"/>
                </anonymous_class>
            </method>
            <method name="getRationalEnforceFunction" type="UnaryFunction<RationalNumber>" line="420">
                <anonymous_class line="421">
                    <method name="invoke" type="double" line="423"/>
                    <method name="invoke" type="RationalNumber" line="427"/>
                </anonymous_class>
            </method>
            <method name="getRationalRoundFunction" type="UnaryFunction<RationalNumber>" line="433">
                <anonymous_class line="434">
                    <method name="invoke" type="double" line="436"/>
                    <method name="invoke" type="RationalNumber" line="440"/>
                </anonymous_class>
            </method>
            <method name="getRoundingMode" type="RoundingMode" line="446"/>
            <method name="getScale" type="int" line="450"/>
            <javadoc line="454">
                @see java.lang.Object#hashCode()                
            </javadoc>
            <method name="hashCode" type="int" line="458">
                <declaration name="prime" type="int" line="459"/>
                <declaration name="result" type="int" line="460"/>
                <declaration name="temp" type="long" line="465"/>
            </method>
            <method name="isSmallComparedTo" type="boolean" line="471">
                <scope line="472"/>
                <scope line="474"/>
            </method>
            <method name="isSmallError" type="boolean" line="479"/>
            <method name="isZero" type="boolean" line="483"/>
            <method name="newFormat" type="NumberContext" line="487"/>
            <method name="newMathContext" type="NumberContext" line="491"/>
            <method name="newPrecision" type="NumberContext" line="495"/>
            <method name="newRoundingMode" type="NumberContext" line="499"/>
            <method name="newScale" type="NumberContext" line="503"/>
            <javadoc line="507">
                Will create an &quot;enforced&quot; BigDecimal instance.                
            </javadoc>
            <method name="toBigDecimal" type="BigDecimal" line="510"/>
            <javadoc line="514">
                Works with {@linkplain DecimalFormat} and {@linkplain FormatPattern} implementations. In other cases it returns
                 * null.                
            </javadoc>
            <method name="toLocalizedPattern" type="String" line="518">
                <declaration name="retVal" type="String" line="520"/>
                <scope line="522"/>
                <scope line="524"/>
            </method>
            <javadoc line="531">
                Works with {@linkplain DecimalFormat} and {@linkplain FormatPattern} implementations. In other cases it returns
                 * null.                
            </javadoc>
            <method name="toPattern" type="String" line="535">
                <declaration name="retVal" type="String" line="537"/>
                <scope line="539"/>
                <scope line="541"/>
            </method>
            <method name="toString" type="String" line="549"/>
            <method name="configureFormat" type="void" line="554">
                <scope line="556">
                    <declaration name="tmpDF" type="DecimalFormat" line="558"/>
                    <declaration name="tmpModScale" type="int" line="560"/>
                    <scope line="565"/>
                    <scope line="567"/>
                </scope>
            </method>
            <method name="handleFormatException" type="String" line="574"/>
            <method name="handleParseException" type="Number" line="579"/>
        </class>
    </source>