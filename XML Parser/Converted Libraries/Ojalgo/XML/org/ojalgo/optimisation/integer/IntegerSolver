<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.optimisation.integer">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="java.util.concurrent.RecursiveTask"/>
        <import package="java.util.concurrent.atomic.AtomicInteger"/>
        <import package="org.ojalgo.RecoverableCondition"/>
        <import package="org.ojalgo.array.SimpleArray"/>
        <import package="org.ojalgo.array.SimpleArray.Primitive"/>
        <import package="org.ojalgo.concurrent.DaemonPoolExecutor"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.optimisation.ExpressionsBasedModel"/>
        <import package="org.ojalgo.optimisation.GenericSolver"/>
        <import package="org.ojalgo.optimisation.Optimisation"/>
        <import package="org.ojalgo.optimisation.Variable"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <class name="IntegerSolver" extends="GenericSolver" line="47">
            <javadoc line="47">
                IntegerSolver                
                <@author>
                    r apete                    
                </@author>
            </javadoc>
            <class name="BranchAndBoundNodeTask" extends="RecursiveTask<Boolean>" line="54">
                <declaration name="myKey" type="NodeKey" line="56"/>
                <method name="BranchAndBoundNodeTask" type="constructor" line="58"/>
                <method name="BranchAndBoundNodeTask" type="constructor" line="65"/>
                <method name="toString" type="String" line="73"/>
                <method name="compute" type="Boolean" line="78">
                    <scope line="80"/>
                    <scope line="86">
                        <scope line="87"/>
                    </scope>
                    <scope line="93">
                        <scope line="94"/>
                    </scope>
                    <scope line="98"/>
                    <scope line="102">
                        <scope line="103"/>
                    </scope>
                    <declaration name="tmpModel" type="ExpressionsBasedModel" line="109"/>
                    <declaration name="tmpResult" type="Optimisation.Result" line="110"/>
                    <scope line="112"/>
                    <scope line="114"/>
                    <scope line="118">
                        <scope line="119"/>
                        <scope line="123"/>
                        <declaration name="tmpBranchIndex" type="int" line="134"/>
                        <declaration name="tmpSolutionValue" type="double" line="135"/>
                        <scope line="137">
                            <scope line="138"/>
                            <declaration name="tmpIntegerSolutionResult" type="Optimisation.Result" line="142"/>
                            <scope line="146"/>
                        </scope>
                        <scope line="154">
                            <scope line="155"/>
                            <declaration name="tmpVariableValue" type="double" line="159"/>
                            <scope line="161">
                                <scope line="162"/>
                                <declaration name="tmpLowerBranchTask" type="BranchAndBoundNodeTask" line="170"/>
                                <declaration name="tmpUpperBranchTask" type="BranchAndBoundNodeTask" line="171"/>
                                <declaration name="tmpLowerBranchValue" type="boolean" line="177"/>
                                <scope line="179"/>
                                <scope line="181"/>
                            </scope>
                            <scope line="187">
                                <scope line="188"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="194">
                        <scope line="195"/>
                    </scope>
                </method>
                <method name="createLowerBranch" type="BranchAndBoundNodeTask" line="203">
                    <declaration name="tmpParentValue" type="double" line="205"/>
                    <declaration name="tmpKey" type="NodeKey" line="206"/>
                </method>
                <method name="createUpperBranch" type="BranchAndBoundNodeTask" line="211">
                    <declaration name="tmpParentValue" type="double" line="213"/>
                    <declaration name="tmpKey" type="NodeKey" line="214"/>
                </method>
                <method name="getKey" type="NodeKey" line="219"/>
                <method name="getModel" type="ExpressionsBasedModel" line="223">
                    <declaration name="retVal" type="ExpressionsBasedModel" line="225"/>
                    <declaration name="tmpIntegerIndeces" type="int[]" line="227"/>
                    <scope line="228">
                        <declaration name="tmpLowerBound" type="BigDecimal" line="230"/>
                        <declaration name="tmpUpperBound" type="BigDecimal" line="231"/>
                        <declaration name="tmpVariable" type="Variable" line="233"/>
                        <declaration name="tmpValue" type="BigDecimal" line="237"/>
                        <scope line="238"/>
                    </scope>
                    <scope line="243">
                        <declaration name="tmpBestValue" type="double" line="244"/>
                        <declaration name="tmpGap" type="double" line="245"/>
                        <scope line="246"/>
                        <scope line="248"/>
                    </scope>
                </method>
            </class>
            <class name="NodeStatistics" line="258">
                <declaration name="myTruncated" type="AtomicInteger" line="260"/>
                <declaration name="myAbandoned" type="AtomicInteger" line="261"/>
                <declaration name="myInfeasible" type="AtomicInteger" line="262"/>
                <declaration name="myFailed" type="AtomicInteger" line="263"/>
                <declaration name="myExhausted" type="AtomicInteger" line="264"/>
                <declaration name="myBranched" type="AtomicInteger" line="265"/>
                <javadoc line="267">
                    Node never evaluated (sub/node problem never solved)                    
                </javadoc>
                <method name="abandoned" type="boolean" line="270"/>
                <javadoc line="275">
                    Node evaluated, but solution not integer. Estimate still possible to find better integer solution. Created 2
                     * new branches.                    
                </javadoc>
                <method name="branched" type="boolean" line="279"/>
                <javadoc line="284">
                    Node evaluated, but solution not integer. Estimate NOT possible to find better integer solution.                    
                </javadoc>
                <method name="exhausted" type="boolean" line="287"/>
                <method name="failed" type="boolean" line="292"/>
                <method name="feasible" type="boolean" line="297"/>
                <method name="infeasible" type="boolean" line="302"/>
                <method name="truncated" type="boolean" line="307"/>
                <method name="getCreated" type="int" line="312"/>
                <method name="getEvaluated" type="int" line="316"/>
            </class>
            <class name="RootTask" extends="RecursiveTask<Boolean>" line="322">
                <method name="compute" type="Boolean" line="325">
                    <declaration name="tmpIntegerModel" type="ExpressionsBasedModel" line="327"/>
                    <declaration name="tmpRootKey" type="NodeKey" line="329"/>
                    <declaration name="tmpRelaxedModel" type="ExpressionsBasedModel" line="331"/>
                    <declaration name="tmpVariables" type="List&lt;Variable&gt;" line="333"/>
                    <scope line="335">
                        <declaration name="tmpVariable" type="Variable" line="336"/>
                    </scope>
                    <scope line="340"/>
                </method>
            </class>
            <class name="Subtask" extends="RecursiveTask<Boolean>" line="349">
                <method name="compute" type="Boolean" line="352"/>
            </class>
            <method name="make" type="IntegerSolver" line="358"/>
            <declaration name="myBestResultSoFar" type="Optimisation.Result" line="362"/>
            <declaration name="myExploredNodes" type="Set&lt;NodeKey&gt;" line="364"/>
            <declaration name="myIntegerIndeces" type="int[]" line="365"/>
            <declaration name="myIntegerSolutionsCount" type="AtomicInteger" line="366"/>
            <declaration name="myMinimisation" type="boolean" line="367"/>
            <method name="IntegerSolver" type="constructor" line="369">
                <comment line="370">
                    options.debug = System.out;                    
                </comment>
                <declaration name="tmpIntegerVariables" type="List&lt;Variable&gt;" line="375"/>
                <scope line="379">
                    <declaration name="tmpVariable" type="Variable" line="380"/>
                </scope>
            </method>
            <method name="solve" type="Result" line="387">
                <scope line="389"/>
                <declaration name="tmpNodeTask" type="BranchAndBoundNodeTask" line="395"/>
                <declaration name="tmpNormalExit" type="boolean" line="397"/>
                <declaration name="retVal" type="Optimisation.Result" line="399"/>
                <scope line="401">
                    <scope line="403"/>
                    <scope line="405"/>
                </scope>
                <scope line="409">
                    <scope line="411"/>
                    <scope line="413"/>
                </scope>
            </method>
            <method name="toString" type="String" line="422"/>
            <method name="extractSolution" type="MatrixStore<Double>" line="427"/>
            <method name="initialise" type="boolean" line="432"/>
            <method name="needsAnotherIteration" type="boolean" line="437"/>
            <method name="validate" type="boolean" line="442">
                <declaration name="retVal" type="boolean" line="444"/>
                <scope line="447">
                    <scope line="449"/>
                </scope>
                <scope line="454"/>
            </method>
            <method name="countExploredNodes" type="int" line="463"/>
            <method name="countIntegerSolutions" type="int" line="467"/>
            <method name="getBestResultSoFar" type="Optimisation.Result" line="471">
                <scope line="473"/>
                <scope line="477">
                    <declaration name="tmpSate" type="State" line="479"/>
                    <declaration name="tmpValue" type="double" line="480"/>
                    <declaration name="tmpMakePrimitive" type="Primitive" line="481"/>
                </scope>
            </method>
            <method name="getGlobalIndex" type="int" line="487"/>
            <method name="getIntegerIndeces" type="int[]" line="491"/>
            <method name="identifyNonIntegerVariable" type="int" line="495">
                <declaration name="tmpGradient" type="MatrixStore&lt;Double&gt;" line="497"/>
                <declaration name="retVal" type="int" line="499"/>
                <declaration name="tmpFraction" type="double" line="501"/>
                <declaration name="tmpMaxFraction" type="double" line="502"/>
                <scope line="504">
                    <scope line="509"/>
                </scope>
            </method>
            <method name="isExplored" type="boolean" line="519"/>
            <method name="isGoodEnoughToContinueBranching" type="boolean" line="523">
                <comment line="524">
                    BasicLogger.logDebug();                    
                </comment>
                <comment line="524">
                    BasicLogger.logDebug(&quot;Iterations: {}, Integer solutions: {}&quot;, this.countIterations(), this.countIntegerSolutions());                    
                </comment>
                <scope line="528"/>
                <scope line="532">
                    <declaration name="tmpBestIntegerValue" type="double" line="534"/>
                    <declaration name="tmpMipGap" type="double" line="536"/>
                    <scope line="544"/>
                    <scope line="546"/>
                </scope>
            </method>
            <method name="isIntegerSolutionFound" type="boolean" line="552"/>
            <method name="isIterationNecessary" type="boolean" line="556">
                <scope line="558"/>
                <scope line="562">
                    <declaration name="tmpIterations" type="int" line="564"/>
                    <declaration name="tmpTime" type="long" line="565"/>
                </scope>
            </method>
            <method name="markAsExplored" type="void" line="571"/>
            <method name="storeResult" type="void" line="575">
                <comment line="576">
                    BasicLogger.logDebug(&quot;Store: &quot; + aResult.toString());                    
                </comment>
                <scope line="579"/>
                <scope line="583"/>
                <scope line="587"/>
            </method>
        </class>
    </source>