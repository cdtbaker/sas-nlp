<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.optimisation">
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.multiary.MultiaryFunction"/>
        <import package="org.ojalgo.optimisation.Expression.Index"/>
        <import package="org.ojalgo.optimisation.integer.IntegerSolver"/>
        <import package="org.ojalgo.optimisation.linear.LinearSolver"/>
        <import package="org.ojalgo.optimisation.mps.MathProgSysModel"/>
        <import package="org.ojalgo.optimisation.quadratic.QuadraticSolver"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="ExpressionsBasedModel" extends="AbstractModel<GenericSolver>" line="40">
            <javadoc line="40">
                &lt;p&gt;
                 * Lets you construct optimisation problems by combining mathematical expressions (in terms of variables). Each
                 * expression or variable can be a constraint and/or contribute to the objective function. An expression or variable is
                 * turned into a constraint by setting a lower and/or upper limit. Use {@linkplain ModelEntity#lower(BigDecimal)},{@linkplain ModelEntity#upper(BigDecimal)} or {@linkplain ModelEntity#level(BigDecimal)}. An expression or variable
                 * is made part of (contributing to) the objective function by setting a contribution weight. Use{@linkplain ModelEntity#weight(BigDecimal)}.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * You may think of variables as simple (the simplest possible) expressions, and of expressions as weighted combinations
                 * of variables. They are both model entities and it is as such they can be turned into constraints and set to
                 * contribute to the objective function. Alternatively you may choose to disregard the fact that variables are model
                 * entities and simply treat them as index values. In this case everything (constraints and objective) needs to be
                 * defined using expressions.
                 * &lt;/p&gt;
                 * Basic instructions:
                 * &lt;ol&gt;
                 * &lt;li&gt;Define (create) a set of variables. Set contribution weights and lower/upper limits as needed.&lt;/li&gt;
                 * &lt;li&gt;Create a model using that set of variables.&lt;/li&gt;
                 * &lt;li&gt;Add expressions to the model. The model is the expression factory. Set contribution weights and lower/upper
                 * limits as needed.&lt;/li&gt;
                 * &lt;li&gt;Instantiate a solver using the model. (Call {@linkplain #getDefaultSolver()})&lt;/li&gt;
                 * &lt;li&gt;Solve!&lt;/li&gt;
                 * &lt;/ol&gt;
                 * There are some restrictions on the models you can create:
                 * &lt;ul&gt;
                 * &lt;li&gt;No quadratic constraints&lt;/li&gt;
                 * &lt;/ul&gt;
                 * The plan is that future versions should not have any restrictions like these.                
                <@author>
                    r apete                    
                </@author>
            </javadoc>
            <declaration name="NEW_LINE" type="String" line="75"/>
            <declaration name="START_END" type="String" line="77"/>
            <declaration name="OBJ_FUNC_AS_CONSTR_NAME" type="String" line="79"/>
            <method name="make" type="ExpressionsBasedModel" line="81">
                <comment line="82">
                    Define various local variables                    
                </comment>
                <comment line="82">
                    Create the LinearModel variables                    
                </comment>
                <comment line="82">
                    Instantiate the LinearModel                    
                </comment>
                <declaration name="tmpActCols" type="MathProgSysModel.Column[]" line="83"/>
                <declaration name="tmpNegCols" type="MathProgSysModel.Column[]" line="84"/>
                <declaration name="tmpPosCols" type="MathProgSysModel.Column[]" line="85"/>
                <declaration name="tmpAllRows" type="MathProgSysModel.Row[]" line="86"/>
                <declaration name="tmpCountActCols" type="int" line="93"/>
                <declaration name="tmpCountNegCols" type="int" line="94"/>
                <declaration name="tmpCountPosCols" type="int" line="95"/>
                <declaration name="tmpCountAllRows" type="int" line="96"/>
                <declaration name="tmpRow" type="MathProgSysModel.Row" line="99"/>
                <declaration name="tmpCol" type="MathProgSysModel.Column" line="100"/>
                <declaration name="tmpVar" type="Variable" line="101"/>
                <declaration name="tmpExpr" type="Expression" line="102"/>
                <declaration name="tmpIndex" type="int" line="103"/>
                <declaration name="tmpVariables" type="Variable[]" line="106"/>
                <scope line="107"/>
                <scope line="114">
                    <declaration name="tmpLowerLimit" type="BigDecimal" line="119"/>
                    <declaration name="tmpUpperLimit" type="BigDecimal" line="120"/>
                </scope>
                <scope line="126">
                    <declaration name="tmpLowerLimit" type="BigDecimal" line="131"/>
                    <declaration name="tmpUpperLimit" type="BigDecimal" line="132"/>
                </scope>
                <declaration name="retVal" type="ExpressionsBasedModel" line="140"/>
                <declaration name="tmpExpressions" type="Expression[]" line="142"/>
                <declaration name="tmpExpressionNames" type="String[]" line="143"/>
                <scope line="145"/>
                <declaration name="tmpActExpressions" type="Expression[]" line="155"/>
                <declaration name="tmpActExpressionNames" type="String[]" line="156"/>
                <scope line="158">
                    <scope line="166"/>
                </scope>
                <scope line="172">
                    <scope line="175">
                        <scope line="177"/>
                    </scope>
                </scope>
                <scope line="182">
                    <scope line="185">
                        <scope line="187"/>
                    </scope>
                </scope>
            </method>
            <method name="presolve" type="void" line="196">
                <scope line="198">
                    <scope line="199"/>
                </scope>
            </method>
            <declaration name="myWorkCopy" type="boolean" line="206"/>
            <declaration name="myExpressions" type="HashMap&lt;String,Expression&gt;" line="208"/>
            <declaration name="myFixedVariables" type="HashSet&lt;Index&gt;" line="209"/>
            <declaration name="myFreeIndeces" type="int[]" line="210"/>
            <declaration name="myFreeVariables" type="List&lt;Variable&gt;" line="211"/>
            <declaration name="myIntegerIndeces" type="int[]" line="212"/>
            <declaration name="myIntegerVariables" type="List&lt;Variable&gt;" line="213"/>
            <declaration name="myNegativeIndeces" type="int[]" line="214"/>
            <declaration name="myNegativeVariables" type="List&lt;Variable&gt;" line="215"/>
            <declaration name="myObjectiveExpression" type="Expression" line="216"/>
            <declaration name="myObjectiveFunction" type="MultiaryFunction&lt;Double&gt;" line="217"/>
            <declaration name="myPositiveIndeces" type="int[]" line="218"/>
            <declaration name="myPositiveVariables" type="List&lt;Variable&gt;" line="219"/>
            <declaration name="myVariables" type="ArrayList&lt;Variable&gt;" line="220"/>
            <method name="ExpressionsBasedModel" type="constructor" line="222"/>
            <method name="ExpressionsBasedModel" type="constructor" line="229">
                <scope line="233"/>
            </method>
            <method name="ExpressionsBasedModel" type="constructor" line="240">
                <scope line="244"/>
            </method>
            <method name="ExpressionsBasedModel" type="constructor" line="252"/>
            <method name="ExpressionsBasedModel" type="constructor" line="256">
                <scope line="262"/>
                <scope line="266"/>
                <scope line="270"/>
            </method>
            <method name="addExpression" type="Expression" line="279">
                <declaration name="retVal" type="Expression" line="281"/>
            </method>
            <method name="addVariable" type="void" line="288">
                <scope line="289"/>
                <scope line="291"/>
            </method>
            <method name="addVariables" type="void" line="297">
                <scope line="298"/>
            </method>
            <method name="copy" type="ExpressionsBasedModel" line="303"/>
            <method name="countExpressions" type="int" line="307"/>
            <method name="countVariables" type="int" line="311"/>
            <method name="destroy" type="void" line="316">
                <scope line="320"/>
                <scope line="325"/>
            </method>
            <method name="getDefaultSolver" type="GenericSolver" line="333">
                <scope line="337"/>
                <scope line="341"/>
                <scope line="345"/>
            </method>
            <method name="getExpression" type="Expression" line="351"/>
            <method name="getExpressions" type="Collection<Expression>" line="355"/>
            <method name="getFixedVariables" type="Set<Index>" line="359"/>
            <javadoc line="363">
                @return A list of the variables that are not fixed at a specific value                
            </javadoc>
            <method name="getFreeVariables" type="List<Variable>" line="366">
                <scope line="368"/>
            </method>
            <javadoc line="375">
                @return A list of the variables that are not fixed at a specific value and are marked as integer variables                
            </javadoc>
            <method name="getIntegerVariables" type="List<Variable>" line="378">
                <scope line="380"/>
            </method>
            <javadoc line="387">
                @return A list of the variables that are not fixed at a specific value and whos range include negative values                
            </javadoc>
            <method name="getNegativeVariables" type="List<Variable>" line="390">
                <scope line="392"/>
            </method>
            <method name="getObjectiveExpression" type="Expression" line="399">
                <scope line="401">
                    <declaration name="tmpVariable" type="Variable" line="405"/>
                    <scope line="406">
                        <scope line="409"/>
                    </scope>
                    <declaration name="tmpOldVal" type="BigDecimal" line="414"/>
                    <declaration name="tmpDiff" type="BigDecimal" line="415"/>
                    <declaration name="tmpNewVal" type="BigDecimal" line="416"/>
                    <scope line="418">
                        <scope line="420">
                            <declaration name="tmpContributionWeight" type="BigDecimal" line="422"/>
                            <declaration name="tmpNotOne" type="boolean" line="423"/>
                            <scope line="425">
                                <scope line="426"/>
                            </scope>
                            <scope line="434">
                                <scope line="435"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getObjectiveFunction" type="MultiaryFunction<Double>" line="449">
                <scope line="451"/>
            </method>
            <javadoc line="458">
                @return A list of the variables that are not fixed at a specific value and whos range include positive values
                 * and/or zero                
            </javadoc>
            <method name="getPositiveVariables" type="List<Variable>" line="462">
                <scope line="464"/>
            </method>
            <method name="getVariable" type="Variable" line="471"/>
            <method name="getVariables" type="List<Variable>" line="475"/>
            <method name="getVariableValues" type="Access1D<BigDecimal>" line="479">
                <declaration name="tmpSize" type="int" line="481"/>
                <declaration name="retVal" type="Array1D&lt;BigDecimal&gt;" line="483"/>
                <declaration name="tmpVal" type="BigDecimal" line="485"/>
                <scope line="486">
                    <scope line="489"/>
                    <scope line="491"/>
                </scope>
            </method>
            <method name="indexOf" type="int" line="499"/>
            <javadoc line="503">
                @param index General, global, variable index                
                <@return>
                    n Local index among the positive variables. -1 indicates the variable is not a positive variable.                    
                </@return>
            </javadoc>
            <method name="indexOfFreeVariable" type="int" line="507"/>
            <method name="indexOfFreeVariable" type="int" line="511"/>
            <javadoc line="515">
                @param index General, global, variable index                
                <@return>
                    n Local index among the integer variables. -1 indicates the variable is not an integer variable.                    
                </@return>
            </javadoc>
            <method name="indexOfIntegerVariable" type="int" line="519"/>
            <method name="indexOfIntegerVariable" type="int" line="523"/>
            <javadoc line="527">
                @param index General, global, variable index                
                <@return>
                    n Local index among the negative variables. -1 indicates the variable is not a negative variable.                    
                </@return>
            </javadoc>
            <method name="indexOfNegativeVariable" type="int" line="531"/>
            <method name="indexOfNegativeVariable" type="int" line="535"/>
            <javadoc line="539">
                @param index General, global, variable index                
                <@return>
                    n Local index among the positive variables. -1 indicates the variable is not a positive variable.                    
                </@return>
            </javadoc>
            <method name="indexOfPositiveVariable" type="int" line="543"/>
            <method name="indexOfPositiveVariable" type="int" line="547"/>
            <method name="isAnyExpressionQuadratic" type="boolean" line="551">
                <comment line="552">
                    final int tmpLength = myExpressions.size();                    
                </comment>
                <comment line="552">
                    for (int i = 0; !retVal &amp;&amp; (i &lt; tmpLength); i++) {                    
                </comment>
                <comment line="552">
                    retVal |= myExpressions.get(i).hasQuadratic();                    
                </comment>
                <comment line="552">
                    }                    
                </comment>
                <declaration name="retVal" type="boolean" line="553"/>
                <declaration name="tmpType" type="String" line="561"/>
                <scope line="562"/>
            </method>
            <method name="isAnyVariableFixed" type="boolean" line="570"/>
            <method name="isAnyVariableInteger" type="boolean" line="574">
                <declaration name="retVal" type="boolean" line="576"/>
                <declaration name="tmpLength" type="int" line="578"/>
                <scope line="580"/>
            </method>
            <method name="isWorkCopy" type="boolean" line="587"/>
            <method name="limitObjective" type="void" line="591">
                <declaration name="tmpEpression" type="Expression" line="593"/>
                <scope line="594"/>
            </method>
            <method name="markActiveInequalityConstraints" type="void" line="602">
                <scope line="604"/>
                <scope line="608"/>
                <scope line="612"/>
            </method>
            <method name="maximise" type="Optimisation.Result" line="617">
                <declaration name="tmpSolverResult" type="Result" line="621"/>
            </method>
            <method name="minimise" type="Optimisation.Result" line="626">
                <declaration name="tmpSolverResult" type="Result" line="630"/>
            </method>
            <method name="relax" type="ExpressionsBasedModel" line="635">
                <declaration name="retVal" type="ExpressionsBasedModel" line="637"/>
                <scope line="639"/>
            </method>
            <javadoc line="646">
                Linear equality constrained expressions.                
            </javadoc>
            <method name="selectExpressionsLinearEquality" type="List<Expression>" line="649">
                <declaration name="retVal" type="List&lt;Expression&gt;" line="651"/>
                <scope line="653">
                    <scope line="654"/>
                </scope>
            </method>
            <javadoc line="662">
                Linear lower constrained expressions.                
            </javadoc>
            <method name="selectExpressionsLinearLower" type="List<Expression>" line="665">
                <declaration name="retVal" type="List&lt;Expression&gt;" line="667"/>
                <scope line="669">
                    <scope line="670"/>
                </scope>
            </method>
            <javadoc line="678">
                Linear upper constrained expressions.                
            </javadoc>
            <method name="selectExpressionsLinearUpper" type="List<Expression>" line="681">
                <declaration name="retVal" type="List&lt;Expression&gt;" line="683"/>
                <scope line="685">
                    <scope line="686"/>
                </scope>
            </method>
            <javadoc line="694">
                Quadratic (and/or compound) equality constrained expressions.                
            </javadoc>
            <method name="selectExpressionsQuadraticEquality" type="List<Expression>" line="697">
                <declaration name="retVal" type="List&lt;Expression&gt;" line="699"/>
                <scope line="701">
                    <scope line="702"/>
                </scope>
            </method>
            <javadoc line="710">
                Quadratic (and/or compound) lower constrained expressions.                
            </javadoc>
            <method name="selectExpressionsQuadraticLower" type="List<Expression>" line="713">
                <declaration name="retVal" type="List&lt;Expression&gt;" line="715"/>
                <scope line="717">
                    <scope line="718"/>
                </scope>
            </method>
            <javadoc line="726">
                Quadratic (and/or compound) upper constrained expressions.                
            </javadoc>
            <method name="selectExpressionsQuadraticUpper" type="List<Expression>" line="729">
                <declaration name="retVal" type="List&lt;Expression&gt;" line="731"/>
                <scope line="733">
                    <scope line="734"/>
                </scope>
            </method>
            <method name="selectVariablesFreeLower" type="List<Variable>" line="742">
                <declaration name="retVal" type="List&lt;Variable&gt;" line="744"/>
                <scope line="746">
                    <scope line="747"/>
                </scope>
            </method>
            <method name="selectVariablesFreeUpper" type="List<Variable>" line="755">
                <declaration name="retVal" type="List&lt;Variable&gt;" line="757"/>
                <scope line="759">
                    <scope line="760"/>
                </scope>
            </method>
            <method name="selectVariablesNegativeLower" type="List<Variable>" line="768">
                <declaration name="retVal" type="List&lt;Variable&gt;" line="770"/>
                <scope line="772">
                    <scope line="773"/>
                </scope>
            </method>
            <method name="selectVariablesNegativeUpper" type="List<Variable>" line="781">
                <declaration name="retVal" type="List&lt;Variable&gt;" line="783"/>
                <scope line="785">
                    <scope line="786"/>
                </scope>
            </method>
            <method name="selectVariablesPositiveLower" type="List<Variable>" line="794">
                <declaration name="retVal" type="List&lt;Variable&gt;" line="796"/>
                <scope line="798">
                    <scope line="799"/>
                </scope>
            </method>
            <method name="selectVariablesPositiveUpper" type="List<Variable>" line="807">
                <declaration name="retVal" type="List&lt;Variable&gt;" line="809"/>
                <scope line="811">
                    <scope line="812"/>
                </scope>
            </method>
            <method name="solve" type="Optimisation.Result" line="820">
                <declaration name="retVal" type="Optimisation.Result" line="822"/>
                <scope line="826">
                    <declaration name="tmpSolution" type="Access1D&lt;BigDecimal&gt;" line="828"/>
                    <declaration name="tmpValue" type="double" line="830"/>
                    <declaration name="tmpState" type="State" line="831"/>
                </scope>
                <scope line="835">
                    <declaration name="tmpSolution" type="Access1D&lt;BigDecimal&gt;" line="837"/>
                    <scope line="839">
                        <declaration name="tmpValue" type="double" line="841"/>
                        <declaration name="tmpState" type="State" line="842"/>
                    </scope>
                    <scope line="846">
                        <declaration name="tmpValue" type="double" line="848"/>
                        <declaration name="tmpState" type="State" line="849"/>
                    </scope>
                </scope>
                <scope line="854">
                    <declaration name="tmpSolver" type="GenericSolver" line="856"/>
                </scope>
            </method>
            <method name="toString" type="String" line="870">
                <declaration name="retVal" type="StringBuilder" line="872"/>
                <scope line="874"/>
                <scope line="879"/>
            </method>
            <method name="validate" type="boolean" line="887">
                <declaration name="retVal" type="boolean" line="889"/>
                <scope line="891"/>
                <scope line="895"/>
            </method>
            <method name="validate" type="boolean" line="902"/>
            <method name="validate" type="boolean" line="906">
                <declaration name="tmpSize" type="int" line="908"/>
                <declaration name="retVal" type="boolean" line="910"/>
                <scope line="912"/>
                <scope line="916"/>
            </method>
            <method name="validate" type="boolean" line="923"/>
            <method name="categoriseVariables" type="void" line="927">
                <declaration name="tmpLength" type="int" line="929"/>
                <scope line="947">
                    <declaration name="tmpVariable" type="Variable" line="949"/>
                    <scope line="951"/>
                    <scope line="956">
                        <scope line="961"/>
                        <scope line="966"/>
                        <scope line="971"/>
                    </scope>
                </scope>
            </method>
            <method name="handleResult" type="Optimisation.Result" line="984">
                <declaration name="tmpSolutionContext" type="NumberContext" line="986"/>
                <declaration name="tmpSize" type="int" line="988"/>
                <scope line="989">
                    <declaration name="tmpVariable" type="Variable" line="990"/>
                    <scope line="991"/>
                </scope>
                <declaration name="tmpSolution" type="Access1D&lt;BigDecimal&gt;" line="996"/>
                <declaration name="tmpState" type="Optimisation.State" line="997"/>
                <declaration name="tmpValue" type="double" line="998"/>
                <scope line="1000"/>
            </method>
            <method name="flushCaches" type="void" line="1007">
                <scope line="1009"/>
            </method>
            <method name="addFixedVariable" type="boolean" line="1027"/>
            <method name="isFixed" type="boolean" line="1031"/>
            <method name="isInfeasible" type="boolean" line="1035">
                <scope line="1036">
                    <scope line="1037"/>
                </scope>
            </method>
            <method name="presolve" type="void" line="1044"/>
        </class>
    </source>