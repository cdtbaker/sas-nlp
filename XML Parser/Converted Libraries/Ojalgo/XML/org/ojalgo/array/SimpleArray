<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.array">
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Iterator1D"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.RationalNumber"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <class name="SimpleArray" line="36">
            <implements interface="Access1D&lt;N&gt;"/>
            <implements interface="Access1D.Fillable&lt;N&gt;"/>
            <javadoc line="36">
                The purpose of (use case for) this class is to provide a minimal class
                 * that implements the {@link Access1D} interface and is mutable. Further
                 * the user can assume that an ArrayAccess&lt;BigDecimal&gt; instance really
                 * is an ArrayAccess.Big instance (and correspondingly for Double,
                 * ComplexNumber and RationalNumber). Therefore it is safe to type cast and
                 * reference the data attribute. Further this class allows you to,
                 * with generics, mix primitive value arrays and object reference arrays.                
                <@author>
                    r apete                    
                </@author>
            </javadoc>
            <class name="Big" extends="SimpleArray<BigDecimal>" line="49">
                <declaration name="data" type="BigDecimal[]" line="51"/>
                <method name="Big" type="constructor" line="53"/>
                <method name="Big" type="constructor" line="60"/>
                <method name="doubleValue" type="double" line="68"/>
                <method name="fillAll" type="void" line="72"/>
                <method name="fillRange" type="void" line="76">
                    <scope line="77"/>
                </method>
                <method name="get" type="BigDecimal" line="82"/>
                <method name="set" type="BigDecimal" line="86">
                    <declaration name="retVal" type="BigDecimal" line="87"/>
                </method>
                <method name="set" type="void" line="92"/>
                <method name="set" type="void" line="96"/>
            </class>
            <class name="Complex" extends="SimpleArray<ComplexNumber>" line="102">
                <declaration name="data" type="ComplexNumber[]" line="104"/>
                <method name="Complex" type="constructor" line="106"/>
                <method name="Complex" type="constructor" line="113"/>
                <method name="doubleValue" type="double" line="121"/>
                <method name="fillAll" type="void" line="125"/>
                <method name="fillRange" type="void" line="129">
                    <scope line="130"/>
                </method>
                <method name="get" type="ComplexNumber" line="135"/>
                <method name="set" type="ComplexNumber" line="139">
                    <declaration name="retVal" type="ComplexNumber" line="140"/>
                </method>
                <method name="set" type="void" line="145"/>
                <method name="set" type="void" line="149"/>
            </class>
            <class name="Primitive" extends="SimpleArray<Double>" line="155">
                <declaration name="data" type="double[]" line="157"/>
                <method name="Primitive" type="constructor" line="159"/>
                <method name="Primitive" type="constructor" line="166"/>
                <method name="doubleValue" type="double" line="173"/>
                <method name="fillAll" type="void" line="177"/>
                <method name="fillRange" type="void" line="181">
                    <scope line="182"/>
                </method>
                <method name="get" type="Double" line="187"/>
                <method name="set" type="Double" line="191">
                    <declaration name="retVal" type="double" line="192"/>
                </method>
                <method name="set" type="void" line="197"/>
                <method name="set" type="void" line="201"/>
            </class>
            <class name="Rational" extends="SimpleArray<RationalNumber>" line="207">
                <declaration name="data" type="RationalNumber[]" line="209"/>
                <method name="Rational" type="constructor" line="211"/>
                <method name="Rational" type="constructor" line="219"/>
                <method name="doubleValue" type="double" line="226"/>
                <method name="fillAll" type="void" line="230"/>
                <method name="fillRange" type="void" line="234">
                    <scope line="235"/>
                </method>
                <method name="get" type="RationalNumber" line="240"/>
                <method name="set" type="RationalNumber" line="244">
                    <declaration name="retVal" type="RationalNumber" line="245"/>
                </method>
                <method name="set" type="void" line="250"/>
                <method name="set" type="void" line="254"/>
            </class>
            <method name="makeBig" type="SimpleArray.Big" line="260"/>
            <method name="makeComplex" type="SimpleArray.Complex" line="264"/>
            <method name="makePrimitive" type="SimpleArray.Primitive" line="268"/>
            <method name="makeRational" type="SimpleArray.Rational" line="272"/>
            <method name="wrapBig" type="SimpleArray.Big" line="276"/>
            <method name="wrapComplex" type="SimpleArray.Complex" line="280"/>
            <method name="wrapPrimitive" type="SimpleArray.Primitive" line="284"/>
            <method name="wrapRational" type="SimpleArray.Rational" line="288"/>
            <declaration name="length" type="int" line="292"/>
            <method name="SimpleArray" type="constructor" line="295"/>
            <method name="SimpleArray" type="constructor" line="299"/>
            <method name="count" type="long" line="306"/>
            <method name="iterator" type="Iterator<N>" line="310"/>
            <method name="size" type="int" line="314"/>
        </class>
    </source>