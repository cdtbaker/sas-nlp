MatrixToolkit/xml/main/java/no/uib/cipr/matrix/AbstractBandMatrix.xml
245	Traversal first down the columns, then the rows

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/AbstractDenseMatrix.xml
49	We know that numRows and numColumns is positive from the super constructor.
131	using instanceof results in weird problems with implementations that mask some values

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/AbstractMatrix.xml
733	Maxvalue
798	Output into coordinate format. Indices start from 1 instead of 0
843	Traversal first down the columns, then the rows

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/AbstractPackMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/AbstractSymmBandMatrix.xml
107	Allocate factorization matrix. The factorization matrix will be large enough to accomodate any pivots

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/AbstractSymmDenseMatrix.xml
216	Allocate factorization matrix
220	Query optimal workspace
227	Allocate workspace
235	Solve

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/AbstractSymmPackMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/AbstractTriangBandMatrix.xml
85	y = alpha*x
88	y = A*y
104	y = alpha*x
107	y = A*y

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/AbstractTriangDenseMatrix.xml
137	y = alpha*x
140	y = A*z
156	y = alpha*x
159	y = A'*y
177	C = alpha*A*C
196	C = alpha*A'*C
232	Different argument checking to support Hessenberg type matrices for solvers such as GMRES
282	uplo == UpLo.Upper

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/AbstractTriangPackMatrix.xml
80	y = alpha*x
83	y = A*z
99	y = alpha*x
102	y = A*z
173	uplo == UpLo.Upper

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/AbstractVector.xml
191	Infinity
238	Output into coordinate format. Indices start from 1 instead of 0

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/BandCholesky.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/BandLU.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/BandMatrix.xml
215	Allocate factorization matrix. The factorization matrix will be large enough to accomodate any pivots

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/DenseCholesky.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/DenseLU.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/DenseMatrix.xml
100	Start with a zero-sized matrix
103	Get matrix information. Use the header if present, else use a safe default
113	Resize the matrix to correct size
118	Check that the matrix is in an acceptable format
126	Read the entries, in either coordinate or array format
129	Read coordinate data
136	Shift indices from 1-offset to 0-offset
140	Store them
145	info.isArray()
148	Put in missing entries from symmetry or skew symmetry
240	Ensure correct sizes
246	Copy the contents
261	Copy the contents
419	We allow non-square matrices, as we then use a least-squares solver
446	We allow non-square matrices, as we then use a least-squares solver
493	Allocate temporary solution matrix
501	Query optimal workspace
508	Allocate workspace
517	Compute the factorization
526	Extract the solution

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/DenseVector.xml
54	Start with a zero-sized vector
57	Get vector information. Use the header if present, else use a safe default
66	Resize the vector to correct size
70	Check that the vector is in an acceptable format
78	Read the entries
81	Read coordinate data
87	Shift indices from 1-offset to 0-offset
90	Store them
95	info.isArray()

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/DenseVectorSub.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/Diag.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/EVD.xml
83	Allocate space for the decomposition
97	Find the needed workspace
104	Allocate workspace

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/GivensRotation.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/io/MatrixInfo.xml
259	This should never happen
271	This should never happen

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/io/MatrixSize.xml
85	We do this to avoid overflows

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/io/MatrixVectorReader.xml
75	Parse numbers as words
79	Characters as words
82	Skip comments
85	Skip whitespace and newlines
129	Read header
133	This will always be "matrix"
137	Sparse or dense?
146	Dataformat
159	Matrix pattern
173	Pack together. This also verifies the format
188	Read header
192	This will always be "vector"
196	Sparse or dense?
205	Dataformat
218	Pack together. This also verifies the format
229	Read a line, then skip back
245	Line length equal 1024 at most
261	Always read the matrix size
264	For coordinate matrices we also read the number of entries
295	Always read the vector size
298	For coordinate vectors we also read the number of entries

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/io/MatrixVectorWriter.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/io/VectorInfo.xml
182	This should never happen

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/io/VectorSize.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/JobEig.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/JobEigRange.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/JobSVD.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/LowerSPDBandMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/LowerSPDDenseMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/LowerSPDPackMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/LowerSymmBandMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/LowerSymmDenseMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/LowerSymmPackMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/LowerTriangBandMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/LowerTriangDenseMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/LowerTriangPackMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/LQ.xml
49	Query optimal workspace. First for computing the factorization
64	Workspace needed for generating an explicit orthogonal matrix
103	Calculate factorisation, and extract the triangular factor
118	Generate the orthogonal matrix

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/Matrices.xml
32	No need to instantiate
633	Sort the rows
639	Found
640	Diagonal
643	Off diagonal
648	Ensure the diagonal is set. This is necessary in case of missing rows
661	Sort the columns
667	Found
668	Diagonal
671	Off diagonal
676	Ensure the diagonal is set. This is necessary in case of missing columns

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/Matrix.xml
743	TODO: this is a bit of a hack shouldn't need to know about the internals of netlib

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/MatrixEntry.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/MatrixNotSPDException.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/MatrixSingularException.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/NotConvergedException.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/OrthogonalComputer.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/PackCholesky.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/PermutationMatrix.xml
49	the instantaneous permutations to perform (zero-indexed) http:en.wikipedia.org/wiki/Permutation_matrix
55	permutations - instantaneous (zero-indexed) pivots - sequential (fortran-indexed)

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/QL.xml
49	Query optimal workspace. First for computing the factorization
64	Workspace needed for generating an explicit orthogonal matrix
103	Calculate factorisation, and extract the triangular factor
119	Generate the orthogonal matrix

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/QR.xml
49	Query optimal workspace. First for computing the factorization
64	Workspace needed for generating an explicit orthogonal matrix
103	Calculate factorisation, and extract the triangular factor
118	Generate the orthogonal matrix

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/QRP.xml
93	Query optimal workspace. First for computing the factorization
97	Workspace needed for generating an explicit orthogonal matrix
126	copy A values in Afact
135	Calculate factorisation
144	Get R from Afact
154	Calculate the rank based on a precision EPS
163	Explicit the orthogonal matrix
176	Adjust the permutation to zero offset

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/RQ.xml
49	Query optimal workspace. First for computing the factorization
64	Workspace needed for generating an explicit orthogonal matrix
103	Calculate factorisation, and extract the triangular factor
118	Generate the orthogonal matrix

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/Side.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/AbstractIterationMonitor.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/AbstractIterativeSolver.xml
94	nothing to do

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/AMG.xml
241	Create the aggregates
244	If no aggregates were created, no interpolation operator will be created, and the setup phase stops
249	Create an interpolation operator using smoothing. This also creates the Galerkin operator
257	Copy to array storage
269	Create a LU decomposition of the smallest Galerkin matrix
274	Allocate vectors at each level
285	Set up the SSOR relaxation schemes
308	Presmoothings
313	Compute the residual
316	Restrict to the next coarser level
319	Recurse to next level
323	Add residual correction by prolongation
326	Postsmoothings
408	Initialization. Remove isolated nodes from the aggregates
414	Startup aggregation. Use disjoint strongly coupled neighborhoods as the initial aggregate approximation
421	Enlargment of the aggregates. Add nodes to each aggregate based on how strongly connected the nodes are to a given aggregate
428	Handling of the remenants. Put all remaining unallocated nodes into new aggregates defined by the intersection of N and R
544	Skip non-free nodes
548	See if all nodes in the current N-set are free
553	Create an aggregate out of N[i]
571	Contains the aggregates each node is coupled to
576	Find which aggregate each node is coupled to. This is used for the intersection between Ni and Ck
582	Number of nodes in the intersection between each C and Ni
587	Skip non-free nodes
591	Find the number of nodes intersecting Ni and every C, and keep a track on the largest overlap
597	The k-index is to an aggregate coupled to node j
606	Add the node to the proper C-set, and mark it as used Also, check if the node actually does couple to a set
625	Skip non-free nodes
629	Create new aggregate from the nodes in N[i] which are free
678	Create the tentative prolongation, in compressed form
681	Apply Jacobi smoothing to the prolongator
687	Smooth the operator by a damped Jacobi method
691	Form a compressed column storage for the operator
694	Create the Galerkin operator using a slow method
698	Use the aggregates as-is
704	Create the Galerkin operator using a fast method
707	Form an explicit interpolation operator
759	Determine the sparsity pattern of I
774	Populate it with numerical entries
817	Allocate the interpolation (prolongation) operator It is stored by columns, so the maps take row-indices as keys
830	Apply the damped Jacobi smoother
839	Calculate A*Pt, except for the diagonal
848	Off-diagonal, include only strong couplings, and add the weak couplings to the diagonal
858	Subtract the weak couplings from the diagonal part of A*Pt
861	Scale by omega and the inverse of the diagonal (damping)
866	Set to (I-omega*D^{-1}*A)*Pt
869	This has formed a whole row of P=(I-omega*D^{-1}*A)*Pt Store the non-zeros into the sparse structure
902	Expand column 'k' of I to dense storage
907	Form column 'k' of A*I
910	Form column 'k' of I'*A*I
913	Store non-zeros into Ac

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/ArpackSym.xml
99	used for initial residual (if info != 0) and eventually the output residual
102	Lanczos basis vectors
104	Arnoldi reverse communication
106	private work array
116	could be refactored to handle the other types of mode
137	highest first
137	highest first

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/Arrays.xml
32	No need to instantiate
125	Zero length array?
132	Last index
135	The usual binary search
147	No direct match, but an inf/sup was found
150	No inf/sup, return at the end of the array
152	One past end
154	One before start

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/BiCG.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/BiCGstab.xml
91	temp = p - omega * v
94	p = r + beta * temp = r + beta * (p - omega * v)

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/CG.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/CGS.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/Chebyshev.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/CompColMatrix.xml
68	Start with a zero-sized matrix
71	Get matrix information. Use the header if present, else just assume that the matrix stores real numbers without any symmetry
80	Check that the matrix is in an acceptable format
91	Resize the matrix to correct size
96	Start reading entries
103	Shift the indices from 1 based to 0 based
107	Find the number of entries on each column
115	Allocate some more in case of symmetry
129	Create the sparse matrix structure
132	Insert the entries
136	Put in extra entries from symmetry or skew symmetry
287	y = 1/alpha * y
290	y = A*x + y
295	y = alpha*y = alpha*A*x + y
408	Find first non-empty column
430	Next position is in the same column
434	Next position is at the following (non-empty) column

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/CompDiagMatrix.xml
63	Start with a zero-sized matrix
66	Get matrix information. Use the header if present, else use a safe default
76	Resize the matrix to correct size
80	Check that the matrix is in an acceptable format
91	Start reading entries
97	Shift the indices from 1 based to 0 based
101	Find all the diagonals so that we can preallocate
111	Convert into an integer array
120	Create the structure with preallocation
123	Insert the entries
127	Put in missing entries from symmetry or skew symmetry
153	Keep the diagonal indices sorted
270	Check if the diagonal is already present
276	Need to allocate new diagonal. Get the diagonal size
279	Allocate new primary structure
284	Move data from the old into the new structure
295	Update pointers
410	Move along current diagonal
414	Move to the next diagonal

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/CompRowMatrix.xml
70	Start with a zero-sized matrix
73	Get matrix information. Use the header if present, else just assume that the matrix stores real numbers without any symmetry
82	Check that the matrix is in an acceptable format
93	Resize the matrix to correct size
98	Start reading entries
105	Shift the indices from 1 based to 0 based
109	Find the number of entries on each row
117	Allocate some more in case of symmetry
131	Create the sparse matrix structure
134	Insert the entries
138	Put in extra entries from symmetry or skew symmetry
285	optimised a little bit to avoid zeros in rows, but not to exploit sparsity of matrix B
303	check dimensions
305	can't assume this, unfortunately
309	DenseVector optimisations
322	use sparsity of matrix (not vector), as get(,) is slow TODO: additional optimisations for mult(ISparseVector, Vector) note that this would require Sparse BLAS, e.g. BLAS_DUSDOT(,,,,) @see http:www.netlib.org/blas/blast-forum/chapter3.pdf
385	y = 1/alpha * y
388	y = A'x + y
393	y = alpha*y = alpha*A'x + y
465	Reallocate matrix structure, if necessary
490	Find first non-empty row
511	Next position is in the same row
515	Next position is at the following (non-empty) row

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/DefaultIterationMonitor.xml
136	Store initial residual
140	Check for convergence
144	Check for divergence
155	Neither convergence nor divergence

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/DiagonalPreconditioner.xml
72	Avoid zero-division

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/FlexCompColMatrix.xml
122	y = 1/alpha * y
125	y = A*x + y
135	y = alpha*y = alpha * A'x + y

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/FlexCompRowMatrix.xml
132	y = 1/alpha * y
135	y = A'x + y
145	y = alpha*y = alpha * A'x + y

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/GMRES.xml
137	Outer iteration
144	Inner iteration
157	QR factorization of H using Givens rotations
166	Update solution in current subspace

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/ICC.xml
69	R'y = b, y = R'\b
72	Rx = R'\b = y
89	Internal CRS matrix storage
94	Temporary storage of a dense row
97	Find the indices to the diagonal entries
100	Go down along the main diagonal
103	Expand current row to dense storage
110	Get the current diagonal entry
117	Elimination factor
123	Traverse the sparse row i, reducing on row k
128	Store the row back into the factorisation matrix

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/ILU.xml
66	Ly = b, y = L\b
69	Ux = L\b = y
74	U'y = b, y = U'\b
77	L'x = U'\b = y
90	Internal CRS matrix storage
95	Find the indices to the diagonal entries
98	Go down along the main diagonal
102	Get the current diagonal entry
110	Elimination factor
113	Traverse the sparse row i, reducing on row k

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/ILUT.xml
122	Ly = b, y = L\b
125	Ux = L\b = y
130	U'y = b, y = U'\b
133	L'x = U'\b = y
149	Find the indices to the diagonal entries
160	Get row i
163	Drop tolerance on current row
166	Store in dense format
171	Get row k
183	Check for small elimination entry
187	Traverse the sparse row k, reducing row i
191	The above has overwritten LUik, so remedy that
195	Store back into the LU matrix, dropping as needed
198	Update diagonal index on row i if it is outdated
233	Number of entries in the lower and upper part of the original matrix
243	Entries in the L part of the vector
249	Entries in the U part of the vector
255	Sort in descending order
259	Always keep the diagonal
262	Keep at most nl+p lower entries
268	Keep at most nu+p upper entries
291	Descending order, so keep the largest entries first
331	Get row i
336	xi = bi - sum[j<i] Lij * xj
358	Get row i
363	At this stage, x[i] is known, so move it over to the right hand side for the remaining equations
400	Get row i
406	xi = (bi - sum[j>i] Uij * xj) / Uii
428	Get row i
434	Solve for the current entry
437	Move this known solution over to the right hand side for the remaining equations

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/IR.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/ISparseVector.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/IterationMonitor.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/IterationReporter.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/IterativeSolver.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/IterativeSolverNotConvergedException.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/LinkedSparseMatrix.xml
38	java.util.LinkedList is doubly linked and therefore too heavyweight.
47	there is a lot of duplicated code in this class between row and col linkages, but subtle differences make it extremely difficult to factor away.
253	avoids object creation
365	TODO: optimise matrix mults based on RHS Matrix
60	true if node exists, it's row tail exists, and has this row/col
65	true if node exists, it's col tail exists, and has this row/col
141	returns the node that either references this index, or should reference it if inserted.
154	helper for findPreceeding
60	true if node exists, it's row tail exists, and has this row/col
65	true if node exists, it's col tail exists, and has this row/col
141	returns the node that either references this index, or should reference it if inserted.
154	helper for findPreceeding
60	true if node exists, it's row tail exists, and has this row/col
65	true if node exists, it's col tail exists, and has this row/col
141	returns the node that either references this index, or should reference it if inserted.
154	helper for findPreceeding

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/MatrixIterationMonitor.xml
104	Store initial residual
108	Check for convergence
112	Check for divergence
123	Neither convergence nor divergence

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/NoIterationReporter.xml
32	void
36	void

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/OutputIterationReporter.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/Preconditioner.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/QMR.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/SparseVector.xml
161	TODO: should we check against zero when setting zeros?
191	Try to find column index
194	Found
201	Check available memory
204	If zero-length, use new length of 1, else double the bandwidth
207	Copy existing data into new arrays
214	All ok, make room for insertion
218	Put in new structure
222	Update pointers
226	Return insertion index
244	Quick return if possible
325	could run compact, or return subarray compact();
345	catches zero entries
351	Copy only non-zero entries

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/SSOR.xml
135	Find the indices to the diagonal entries
158	Forward sweep (xd oldest, xx halfiterate)
173	Stop here if the reverse sweep was not requested
179	Backward sweep (xx oldest, xd halfiterate)
198	Assume a symmetric matrix

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/SuperIterator.xml
58	Try to be somewhat fault tolerant
64	This moves the next pointer to a non-empty iterable
68	Then we move the current pointer in the same way
72	Finally, move the next one step ahead if possible
93	A wrapped object containing the relevant index and data
96	Move current if necessary
99	Move the next pointer

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/UnitLowerCompRowMatrix.xml
59	xi = bi - sum[j<i] Lij * xj
81	At this stage, x[i] is known, so move it over to the right hand side for the remaining equations

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/sparse/UpperCompRowMatrix.xml
59	xi = (bi - sum[j>i] Uij * xj) / Uii
81	Solve for the current entry
84	Move this known solution over to the right hand side for the remaining equations

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/SPDTridiagMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/SVD.xml
95	Allocate space for the decomposition
105	Find workspace requirements
108	Query optimal workspace
116	Allocate workspace

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/SymmBandEVD.xml
79	Find the needed workspace
86	Allocate workspace

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/SymmDenseEVD.xml
133	Find the needed workspace
141	Allocate workspace

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/SymmEVD.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/SymmPackEVD.xml
79	Find the needed workspace
86	Allocate workspace

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/SymmTridiagEVD.xml
114	Find the needed workspace
122	Allocate workspace

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/SymmTridiagMatrix.xml
292	Move in the band
296	Move to the off-diagonal (twice)
302	If the off-diagonals are zero-sized, we are done This happens if the matrix is 1*1
308	Set row index
314	Set column index

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/Transpose.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/TridiagMatrix.xml
258	Move in the band
262	Move to the next band
271	If the off-diagonals are zero-sized, we are done This happens if the matrix is 1*1
277	Set row index
283	Set column index

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/UnitLowerTriangBandMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/UnitLowerTriangDenseMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/UnitLowerTriangPackMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/UnitUpperTriangBandMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/UnitUpperTriangDenseMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/UnitUpperTriangPackMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/UpLo.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/UpperSPDBandMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/UpperSPDDenseMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/UpperSPDPackMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/UpperSymmBandMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/UpperSymmDenseMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/UpperSymmPackMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/UpperTriangBandMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/UpperTriangDenseMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/UpperTriangPackMatrix.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/Vector.xml

MatrixToolkit/xml/main/java/no/uib/cipr/matrix/VectorEntry.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/BandCholeskyTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/BandLUTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/BandMatrixTest.xml
53	Not supported
58	Not supported

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/DenseCholeskyTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/DenseLUTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/DenseMatrixTest.xml
80	The issue here is that we should not allow matrices with more than Integer.MAX_VALUE entries.

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/DenseVectorSubTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/DenseVectorTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/io/MatrixVectorIoTest.xml
63	find first valid row
69	enter the remainder of data as currentRow

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/LowerSPDBandMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/LowerSPDDenseMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/LowerSPDPackMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/LowerSymmBandMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/LowerSymmDenseMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/LowerSymmPackMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/LowerTriangBandMatrixTest.xml
42	This ensures non-singularity

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/LowerTriangDenseMatrixTest.xml
41	This ensures non-singularity

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/LowerTriangPackMatrixTest.xml
41	This ensures non-singularity

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/LQTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/MatrixTestAbstract.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/OrthogonalTestAbstract.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/PackCholeskyTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/PermutationMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/QLTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/QRPTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/QRTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/RQTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/SingularvalueTest.xml
76	Compute U*S*Vt
80	Check that A=U*S*Vt

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/ArpackSymTest.xml
33	exact match of eigenvector / eigenvalue is not important for random matrices as the eigenvectors should always be the Euclidean directions

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/BiCGDiagonalTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/BiCGILUTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/BiCGstabDiagonalTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/BiCGstabILUTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/BiCGstabILUTTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/BiCGstabTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/BiCGTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/CGAMGTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/CGDiagonalTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/CGICCTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/CGSDiagonalTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/CGSILUTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/CGSILUTTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/CGSSORTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/CGSTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/CGTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/ChebyshevAMGTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/ChebyshevDiagonalTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/ChebyshevICCTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/ChebyshevSSORTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/ChebyshevTest.xml
38	Get the extremal eigenvalues

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/CompColMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/CompDiagMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/CompRowMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/FlexCompColMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/FlexCompRowMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/GMRESDiagonalTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/GMRESILUTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/GMRESILUTTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/GMRESTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/ICCTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/ILUTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/ILUTTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/IncompleteFactorizationTestAbstract.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/IterativeSolverTestAbstract.xml
102	Create solver and preconditioner
108	Compute the correct right hand sides
112	Store x for later. It is overwritten
115	Randomize the inital solution vector
122	Create an arbitrary matrix
128	Make it non-singular

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/LinkedSparseMatrixTest.xml
55	log.info(node.toString());
61	log.info(node.toString());
159	to be fair, we reuse the same matrix values
169	all attempts to measure memory usage failed
186	using compressedooms
207	these are to keep lots of refs above alive from GC

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/QMRDiagonalTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/QMRILUTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/QMRILUTTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/QMRTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/SparseMatrixTestAbstract.xml
39	Not applicable
44	Not applicable
49	Not applicable
54	Not applicable

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/SparseStructImmutableMatrixTestAbstract.xml
40	Not applicable
45	Not applicable
50	Not applicable
55	Not applicable

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/SparseVectorTest.xml
51	MTJ subtlety in getIndex() for SparseVector. before calling getIndex(), you must call compact()... implementations may choose to do nothing in this call, but the Intel extended LAPACK implementations (and MTJ's SparseVector) require it. An alternative to vector.getIndex() is VectorMethods.getIndex(Vector) which will wrap this for you. It can take an arbitrary Vector and if it can be cast to a SparseVector will compact it and use its getIndex() method instead. (just so you're aware of this). Sam.
62	check that "infinite dimensions" doesn't use infinite memory
68	check that creating with double[] with zeros works
78	NOTE: must compact before calling getIndex()!!! vector.compact();
92	vectorTF.getUsed() returns 5

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/sparse/SPDIterativeSolverTestAbstract.xml
39	Create a symmetrical matrix
45	Need positive eigenvalues

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/SPDTridiagMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/SquareDenseMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/StructImmutableMatrixTestAbstract.xml
35	Not supported
40	Not supported
45	Not supported
50	Not supported
55	Not supported
60	Not supported
65	Not supported
70	Not supported
75	Not supported
80	Not supported
85	Not supported
90	Not supported
95	Not supported
100	Not supported
105	Not supported
110	Not supported
115	Not supported
120	Not supported
125	Not supported
130	Not supported
135	Not supported
140	Not supported

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/SymmBandEigenvalueTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/SymmDenseEigenvalueTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/SymmEigenvalueTestAbstract.xml
60	A*X
63	lambda*X
69	Check that A*X=lambda*X

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/SymmetricMatrixTestAbstract.xml
35	Not supported
40	Not supported
45	Not supported
50	Not supported
55	Not supported
60	Not supported

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/SymmPackEigenvalueTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/SymmTridiagEigenvalueTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/SymmTridiagMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/TriangMatrixTestAbstract.xml
35	Not supported

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/TridiagMatrixTest.xml
44	Not supported
49	Not supported

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/UnitLowerTriangBandMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/UnitLowerTriangDenseMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/UnitLowerTriangPackMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/UnitTriangMatrixTestAbstract.xml
37	Not applicable to unit triangular matrices
41	Not applicable to unit triangular matrices
45	Not applicable to unit triangular matrices
59	Not applicable to unit triangular matrices
64	Not applicable to unit triangular matrices
69	Not applicable to unit triangular matrices
74	Not applicable to unit triangular matrices

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/UnitUpperTriangBandMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/UnitUpperTriangDenseMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/UnitUpperTriangPackMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/UpperSPDBandMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/UpperSPDDenseMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/UpperSPDPackMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/UpperSymmBandMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/UpperSymmDenseMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/UpperSymmPackMatrixTest.xml

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/UpperTriangBandMatrixTest.xml
42	This ensures non-singularity

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/UpperTriangDenseMatrixTest.xml
41	This ensures non-singularity

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/UpperTriangPackMatrixTest.xml
41	This ensures non-singularity

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/Utilities.xml
37	No need to instantiate

MatrixToolkit/xml/test/java/no/uib/cipr/matrix/VectorTestAbstract.xml
123	Test for Vector set(Vector)
130	Test for Vector set(double, Vector)
138	Test for Vector set(Vector)
145	Test for Vector set(double, Vector)
159	Test for Vector add(double, Vector)
167	Test for Vector add(Vector)
174	Test for Vector add(double, Vector)
182	Test for Vector add(Vector)

