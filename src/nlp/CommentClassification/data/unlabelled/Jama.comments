Jama/xml/CholeskyDecomposition.xml
16	------------------------ Class variables
35	------------------------ Constructor
75	------------------------ Temporary, experimental code. ------------------------ \  \ Right Triangular Cholesky Decomposition. <P> For a symmetric, positive definite matrix A, the Right Cholesky decomposition is an upper triangular matrix R so that A = R'R. This constructor computes R with the Fortran inspired column oriented algorithm used in LINPACK and MATLAB.  In Java, we suspect a row oriented, lower triangular decomposition is faster.  We have temporarily included this constructor here until timing experiments confirm this suspicion. \  \ Array for internal storage of right triangular decomposition. \ private transient double[][] R;  \ Cholesky algorithm for symmetric and positive definite matrix. @param  A           Square, symmetric matrix. @param  rightflag   Actual value ignored. @return             Structure to access R and isspd flag. \  public CholeskyDecomposition (Matrix Arg, int rightflag) { Initialize. double[][] A = Arg.getArray(); n = Arg.getColumnDimension(); R = new double[n][n]; isspd = (Arg.getColumnDimension() == n); Main loop. for (int j = 0; j < n; j++) { double d = 0.0; for (int k = 0; k < j; k++) { double s = A[k][j]; for (int i = 0; i < k; i++) { s = s - R[i][k]R[i][j]; } R[k][j] = s = sR[k][k]; d = d + ss; isspd = isspd & (A[k][j] == A[j][k]); } d = A[j][j] - d; isspd = isspd & (d > 0.0); R[j][j] = Math.sqrt(Math.max(d,0.0)); for (int k = j+1; k < n; k++) { R[k][j] = 0.0; } } }  \ Return upper triangular factor. @return     R \  public Matrix getR () { return new Matrix(R,n,n); }  \ ------------------------ End of temporary code.
137	------------------------ Public Methods
47	Initialize.
52	Main loop.
172	Copy right hand side.
176	Solve L*Y = B;
186	Solve L'*X = Y;

Jama/xml/EigenvalueDecomposition.xml
23	------------------------ Class variables
57	------------------------ Private Methods
61	Symmetric Householder reduction to tridiagonal form.
178	Symmetric tridiagonal QL algorithm.
298	Nonsymmetric reduction to Hessenberg form.
392	Complex scalar division.
411	Nonsymmetric reduction from Hessenberg to real Schur form.
854	------------------------ Constructor
908	------------------------ Public Methods
65	This is derived from the Algol procedures tred2 by Bowdler, Martin, Reinsch, and Wilkinson, Handbook for Auto. Comp., Vol.ii-Linear Algebra, and the corresponding Fortran subroutine in EISPACK.
74	Householder reduction to tridiagonal form.
78	Scale to avoid under/overflow.
94	Generate Householder vector.
112	Apply similarity transformation to remaining columns.
146	Accumulate transformations.
182	This is derived from the Algol procedures tql2, by Bowdler, Martin, Reinsch, and Wilkinson, Handbook for Auto. Comp., Vol.ii-Linear Algebra, and the corresponding Fortran subroutine in EISPACK.
197	Find small subdiagonal element
208	If m == l, d[l] is an eigenvalue, otherwise, iterate.
214	(Could check iteration count here.)
216	Compute implicit shift
233	Implicit QL transformation.
255	Accumulate transformation.
267	Check for convergence.
275	Sort eigenvalues and corresponding vectors.
302	This is derived from the Algol procedures orthes and ortran, by Martin and Wilkinson, Handbook for Auto. Comp., Vol.ii-Linear Algebra, and the corresponding Fortran subroutines in EISPACK.
312	Scale column.
320	Compute Householder transformation.
334	Apply Householder similarity transformation H = (I-u*u'/h)*H*(I-u*u')/h)
363	Accumulate transformations (Algol's ortran).
381	Double division avoids possible underflow
415	This is derived from the Algol procedure hqr2, by Martin and Wilkinson, Handbook for Auto. Comp., Vol.ii-Linear Algebra, and the corresponding Fortran subroutine in EISPACK.
420	Initialize
430	Store roots isolated by balanc and compute matrix norm
443	Outer loop over eigenvalue index
448	Look for single small sub-diagonal element
462	Check for convergence One root found
472	Two roots found
483	Real pair
506	Row modification
514	Column modification
522	Accumulate transformations
530	Complex pair
541	No convergence yet
545	Form shift
555	Wilkinson's original ad hoc shift
567	MATLAB's new ad hoc shift
586	(Could check iteration count here.)
588	Look for two consecutive small sub-diagonal elements
620	Double QR step involving rows l:n and columns m:n
655	Row modification
667	Column modification
679	Accumulate transformations
690	(s != 0)
691	k loop
692	check convergence
693	while (n >= low)
695	Backsubstitute to find vectors of upper triangular form
705	Real vector
728	Solve real equations
743	Overflow control
754	Complex vector
759	Last vector component imaginary so matrix is triangular
793	Solve complex equations
816	Overflow control
830	Vectors of isolated roots
840	Back transformation to get eigenvectors of original matrix
884	Tridiagonalize.
887	Diagonalize.
900	Reduce to Hessenberg form.
903	Reduce Hessenberg to real Schur form.

Jama/xml/examples/MagicSquareExample.xml
16	Odd order
27	Doubly Even Order
40	Singly Even Order
102	| Tests LU, QR, SVD and symmetric Eig decompositions. | |   n       = order of magic square. |   trace   = diagonal sum, should be the magic sum, (n^3 + n)2. |   max_eig = maximum eigenvalue of (A + A')2, should equal trace. |   rank    = linear algebraic rank, |             should equal n if n is odd, be less than n if n is even. |   cond    = L_2 condition number, ratio of singular values. |   lu_res  = test of LU factorization, norm1(LU-A(p,:))(neps). |   qr_res  = test of QR factorization, norm1(QR-A)(neps).

Jama/xml/LUDecomposition.xml
19	------------------------ Class variables
40	------------------------ Constructor
116	------------------------ Temporary, experimental code. ------------------------ \  \ LU Decomposition, computed by Gaussian elimination. <P> This constructor computes L and U with the "daxpy"-based elimination algorithm used in LINPACK and MATLAB.  In Java, we suspect the dot-product, Crout algorithm will be faster.  We have temporarily included this constructor until timing experiments confirm this suspicion. <P> @param  A             Rectangular matrix @param  linpackflag   Use Gaussian elimination.  Actual value ignored. @return               Structure to access L, U and piv. \  public LUDecomposition (Matrix A, int linpackflag) { Initialize. LU = A.getArrayCopy(); m = A.getRowDimension(); n = A.getColumnDimension(); piv = new int[m]; for (int i = 0; i < m; i++) { piv[i] = i; } pivsign = 1; Main loop. for (int k = 0; k < n; k++) { Find pivot. int p = k; for (int i = k+1; i < m; i++) { if (Math.abs(LU[i][k]) > Math.abs(LU[p][k])) { p = i; } } Exchange if necessary. if (p != k) { for (int j = 0; j < n; j++) { double t = LU[p][j]; LU[p][j] = LU[k][j]; LU[k][j] = t; } int t = piv[p]; piv[p] = piv[k]; piv[k] = t; pivsign = -pivsign; } Compute multipliers and eliminate k-th column. if (LU[k][k] != 0.0) { for (int i = k+1; i < m; i++) { LU[i][k] = LU[k][k]; for (int j = k+1; j < n; j++) { LU[i][j] -= LU[i][k]LU[k][j]; } } } } }  \ ------------------------ End of temporary code.
175	------------------------ Public Methods
51	Use a "left-looking", dot-product, Crout/Doolittle algorithm.
64	Outer loop.
68	Make a copy of the j-th column to localize references.
74	Apply previous transformations.
79	Most of the time is spent in the following dot product.
90	Find pivot and exchange if necessary.
106	Compute multipliers.
286	Copy right hand side with pivoting
291	Solve L*Y = B(piv,:)
299	Solve U*X = Y;

Jama/xml/Matrix.xml
59	------------------------ Class variables
74	------------------------ Constructors
155	------------------------ Public Methods
947	DecimalFormat is a little disappointing coming from Fortran or C's printf. Since it doesn't pad on the left, the elements will come out different widths.  Consequently, we'll pass the desired column width in as an argument and do the extra padding ourselves.
1034	------------------------ Private Methods
964	start on new line.
967	format the number
968	At _least_ 1 space
975	end with blank line.
989	Although StreamTokenizer will parse numbers, it doesn't recognize scientific notation (E or D); however, Double.valueOf does. The strategy here is to disable StreamTokenizer's number parsing. We'll only get whitespace delimited words, EOL's and EOF's. These words should all be numbers, for Double.valueOf to parse.
1001	Ignore initial empty lines
1006	Read & store 1st row.
1009	Now we've got the number of columns!
1011	extract the elements of the 1st row.
1014	Start storing rows instead of columns.
1016	While non-empty lines
1027	Now we've got the number of rows.
1029	copy the rows out of the vector

Jama/xml/QRDecomposition.xml
20	------------------------ Class variables
40	------------------------ Constructor
90	------------------------ Public Methods
50	Initialize.
56	Main loop.
58	Compute 2-norm of k-th column without under/overflow.
65	Form k-th Householder vector.
74	Apply transformation to remaining columns.
189	Copy right hand side
193	Compute Y = transpose(Q)*B
206	Solve R*X = Y;

Jama/xml/SingularValueDecomposition.xml
21	------------------------ Class variables
42	------------------------ Constructor
473	------------------------ Public Methods
53	Derived from LINPACK code. Initialize.
59	Apparently the failing cases are only a proper subset of (m<n), so let's not throw error.  Correct fix to come later? if (m<n) { throw new IllegalArgumentException("Jama SVD only works for m >= n"); }
73	Reduce A to bidiagonal form, storing the diagonal elements in s and the super-diagonal elements in e.
81	Compute the transformation for the k-th column and place the k-th diagonal in s[k]. Compute 2-norm of k-th column without under/overflow.
102	Apply the transformation.
114	Place the k-th row of A into e for the subsequent calculation of the row transformation.
121	Place the transformation in U for subsequent back multiplication.
130	Compute the k-th row transformation and place the k-th super-diagonal in e[k]. Compute 2-norm without under/overflow.
149	Apply the transformation.
168	Place the transformation in V for subsequent back multiplication.
178	Set up the final bidiagonal matrix or order p.
192	If required, generate U.
229	If required, generate V.
252	Main iteration loop for the singular values.
261	Here is where a test for too many iterations would go.
263	This section of the program inspects for negligible elements in the s and e arrays.  On completion the variables kase and k are set as follows.
267	kase = 1     if s(p) and e[k-1] are negligible and k<p kase = 2     if s(k) is negligible and k<p kase = 3     if e[k-1] is negligible, k<p, and s(k), ..., s(p) are not negligible (qr step). kase = 4     if e(p-1) is negligible (convergence).
309	Perform the task indicated by kase.
313	Deflate negligible s(p).
338	Split at negligible s(k).
361	Perform one qr step.
365	Calculate the shift.
388	Chase zeros.
429	Convergence.
433	Make the singular values positive.
444	Order the singular values.

Jama/xml/test/TestMatrix.xml
34	Uncomment this to test IO in a different locale. Locale.setDefault(Locale.GERMAN);
71	Constructors and constructor-like methods: double[], int double[][] int, int int, int, double int, int, double[][] constructWithCopy(double[][]) random(int,int) identity(int)
94	check that exception is thrown in default constructor
106	check that exception is thrown in constructWithCopy
140	Access Methods: getColumnDimension() getRowDimension() getArray() getArrayCopy() getColumnPackedCopy() getRowPackedCopy() get(int,int) getMatrix(int,int,int,int) getMatrix(int,int,int[]) getMatrix(int[],int,int) getMatrix(int[],int[]) set(int,int,double) setMatrix(int,int,int,int,Matrix) setMatrix(int,int,int[],Matrix) setMatrix(int[],int,int,Matrix) setMatrix(int[],int[],Matrix)
162	Various get methods:
330	Various set methods:
460	Array-like methods: minus minusEquals plus plusEquals arrayLeftDivide arrayLeftDivideEquals arrayRightDivide arrayRightDivideEquals arrayTimes arrayTimesEquals uminus
625	IO methods: read print serializable: writeObject readObject
688	LA methods: transpose times cond rank det trace norm1 norm2 normF normInf solve solveTranspose inverse chol eig lu qr svd
952	Use format Fw.d for all elements.

Jama/xml/util/Maths.xml

