JScience/xml/javax/measure/converter/AddConverter.xml

JScience/xml/javax/measure/converter/ConversionException.xml

JScience/xml/javax/measure/converter/LogConverter.xml

JScience/xml/javax/measure/converter/MultiplyConverter.xml

JScience/xml/javax/measure/converter/RationalConverter.xml
95	Long overflows.

JScience/xml/javax/measure/converter/UnitConverter.xml

JScience/xml/javax/measure/DecimalMeasure.xml
166	Non-linear and not an offset, convert the double value.

JScience/xml/javax/measure/Measurable.xml

JScience/xml/javax/measure/Measure.xml
328	No conversion, returns value directly.
417	No conversion, returns value directly.

JScience/xml/javax/measure/MeasureFormat.xml
60	Holds default implementation.
92	Measure using Compound unit have no separators in their representation.
100	The unit in which the value is stated.
116	Cannot parse.
119	No unit.
124	No unit.
125	Skips separator.

JScience/xml/javax/measure/quantity/Acceleration.xml

JScience/xml/javax/measure/quantity/AmountOfSubstance.xml

JScience/xml/javax/measure/quantity/Angle.xml

JScience/xml/javax/measure/quantity/AngularAcceleration.xml

JScience/xml/javax/measure/quantity/AngularVelocity.xml

JScience/xml/javax/measure/quantity/Area.xml

JScience/xml/javax/measure/quantity/CatalyticActivity.xml

JScience/xml/javax/measure/quantity/DataAmount.xml

JScience/xml/javax/measure/quantity/DataRate.xml

JScience/xml/javax/measure/quantity/Dimensionless.xml

JScience/xml/javax/measure/quantity/Duration.xml

JScience/xml/javax/measure/quantity/DynamicViscosity.xml

JScience/xml/javax/measure/quantity/ElectricCapacitance.xml

JScience/xml/javax/measure/quantity/ElectricCharge.xml

JScience/xml/javax/measure/quantity/ElectricConductance.xml

JScience/xml/javax/measure/quantity/ElectricCurrent.xml

JScience/xml/javax/measure/quantity/ElectricInductance.xml

JScience/xml/javax/measure/quantity/ElectricPotential.xml

JScience/xml/javax/measure/quantity/ElectricResistance.xml

JScience/xml/javax/measure/quantity/Energy.xml

JScience/xml/javax/measure/quantity/Force.xml

JScience/xml/javax/measure/quantity/Frequency.xml

JScience/xml/javax/measure/quantity/Illuminance.xml

JScience/xml/javax/measure/quantity/KinematicViscosity.xml

JScience/xml/javax/measure/quantity/Length.xml

JScience/xml/javax/measure/quantity/LuminousFlux.xml

JScience/xml/javax/measure/quantity/LuminousIntensity.xml

JScience/xml/javax/measure/quantity/MagneticFlux.xml

JScience/xml/javax/measure/quantity/MagneticFluxDensity.xml

JScience/xml/javax/measure/quantity/Mass.xml

JScience/xml/javax/measure/quantity/MassFlowRate.xml

JScience/xml/javax/measure/quantity/Power.xml

JScience/xml/javax/measure/quantity/Pressure.xml

JScience/xml/javax/measure/quantity/Quantity.xml
30	No method - Tagging interface.

JScience/xml/javax/measure/quantity/RadiationDoseAbsorbed.xml

JScience/xml/javax/measure/quantity/RadiationDoseEffective.xml

JScience/xml/javax/measure/quantity/RadioactiveActivity.xml

JScience/xml/javax/measure/quantity/SolidAngle.xml

JScience/xml/javax/measure/quantity/Temperature.xml

JScience/xml/javax/measure/quantity/Torque.xml

JScience/xml/javax/measure/quantity/Velocity.xml

JScience/xml/javax/measure/quantity/Volume.xml

JScience/xml/javax/measure/quantity/VolumetricDensity.xml

JScience/xml/javax/measure/quantity/VolumetricFlowRate.xml

JScience/xml/javax/measure/unit/AlternateUnit.xml
121	Implements abstract method.
55	Checks if the symbol is associated to a different unit.
66	OK, same unit.
118	Symbols are unique.

JScience/xml/javax/measure/unit/BaseUnit.xml
57	Checks if the symbol is associated to a different unit.

JScience/xml/javax/measure/unit/CompoundUnit.xml

JScience/xml/javax/measure/unit/DerivedUnit.xml

JScience/xml/javax/measure/unit/Dimension.xml

JScience/xml/javax/measure/unit/NonSI.xml
58	(1/mol).
63	(C).
81	///////////////// Dimensionless /
99	/////////////////////// Amount of substance /
110	////////// Length
200	//////////// Duration
262	//////// Mass
310	/////////////////// Electric charge /
327	e/mol
337	/////////////// Temperature /
354	///////// Angle /
394	//////////// Velocity
436	//////////////// Acceleration
447	//////// Area
461	Exact.
463	/////////////// Data Amount /
479	//////////////////// Electric current
491	////////// Energy
508	/////////////// Illuminance /
518	///////////////// Magnetic Flux /
528	///////////////////////// Magnetic Flux Density /
538	///////// Force /
563	///////// Power /
574	//////////// Pressure
605	/////////////////////////// Radiation dose absorbed /
621	//////////////////////// Radioactive activity
639	/////////////// Solid angle /
650	////////// Volume
703	///////////// Viscosity /
724	////////// Others
735	/////////////////// Collection View /

JScience/xml/javax/measure/unit/ProductUnit.xml
84	Merges left elements with right elements.
97	No duplicate.
108	Appends remaining right elements not merged.
123	Returns or creates instance.
295	Two products are equals if they have the same elements regardless of the elements' order.
323	Implements abstract method.
365	Negative power.
323	Implements abstract method.

JScience/xml/javax/measure/unit/SI.xml
61	////////////// BASE UNITS
135	////////////////////////////// SI DERIVED ALTERNATE UNITS
347	//////////////////////////// SI DERIVED PRODUCT UNITS
415	/////////////// SI PREFIXES /
639	/////////////////// Collection View /
663	Holds prefix converters (optimization).

JScience/xml/javax/measure/unit/SystemOfUnits.xml

JScience/xml/javax/measure/unit/TransformedUnit.xml
105	Implements abstract method.
110	Implements abstract method.
115	Implements abstract method.

JScience/xml/javax/measure/unit/Unit.xml
74	//////////////////////////////////////////////////// Contract methods (for sub-classes to implement).
487	//////////////////// GENERAL CONTRACT
193	Product of units.
222	Use dimensional transforms.
227	Transform between SystemUnit and BaseUnits is Identity.
258	Product of units.
271	Negative power.
439	n < 0
455	n < 0

JScience/xml/javax/measure/unit/UnitFormat.xml
781	////////////////////////////////////////////////////////////////////////// Initializes the standard unit database for SI units.
845	////////////////////////////////////////////////////////////////////////// To be moved in resource bundle in future release (locale dependent).
73	TBD: Implement Locale Format.
85	TBD - Provide UCUM implementation.
189	When retroweaver is used to produce 1.4 binaries.
209	Should never happen.
303	Returns the name for the specified unit or null if product unit.
362	Returns the unit for the specified name.
371	////////////////////////// Parsing.
634	////////////////////////// Formatting.
303	Returns the name for the specified unit or null if product unit.
362	Returns the unit for the specified name.
371	////////////////////////// Parsing.
634	////////////////////////// Formatting.
305	Searches label database.
322	We could use parentheses whenever baseUnits is an instanceof ProductUnit, but most ProductUnits have aliases, so we'd end up with a lot of unnecessary parentheses.
348	Other converters.
353	Compound unit.
359	Product unit.
646	Product unit.
650	Write positive exponents first.
656	Separator.
667	Write negative exponents.
670	e.g. 1/s
683	Separator.
700	Write exponent.
702	Square
704	Cubic
706	Use general exponent form.
303	Returns the name for the specified unit or null if product unit.
362	Returns the unit for the specified name.
371	////////////////////////// Parsing.
634	////////////////////////// Formatting.
727	First search if specific ASCII name should be used.
731	Else returns default name.
737	First search if specific ASCII name.
741	Else returns default mapping.
758	Separator.
765	Use general exponent form.

JScience/xml/javax/measure/VectorMeasure.xml
133	Holds 2-dimensional implementation.
178	Holds 3-dimensional implementation.
225	Holds multi-dimensional implementation.

JScience/xml/org/jscience/economics/money/Currency.xml

JScience/xml/org/jscience/economics/money/Money.xml

JScience/xml/org/jscience/geography/coordinates/Altitude.xml
96	OpenGIS Interface.
101	OpenGIS Interface.
111	Implements Scalar<Length>
117	Implements Scalar<Length>
122	Implements Scalar<Length>
134	Default serialization.

JScience/xml/org/jscience/geography/coordinates/CompoundCoordinates.xml
92	OpenGIS Interface.
97	OpenGIS Interface.
112	Default serialization.

JScience/xml/org/jscience/geography/coordinates/Coordinates.xml
47	/////////// OpenGIS /

JScience/xml/org/jscience/geography/coordinates/crs/CompoundCRS.xml

JScience/xml/org/jscience/geography/coordinates/crs/CoordinateReferenceSystem.xml
83	General implementation using absolute position as intermediary.
133	/////////// OpenGIS /
207	Default coordinates axis.
260	Default coordinates axis.

JScience/xml/org/jscience/geography/coordinates/crs/CoordinatesConverter.xml

JScience/xml/org/jscience/geography/coordinates/crs/GeocentricCRS.xml

JScience/xml/org/jscience/geography/coordinates/crs/GeographicCRS.xml

JScience/xml/org/jscience/geography/coordinates/crs/ProjectedCRS.xml

JScience/xml/org/jscience/geography/coordinates/crs/ReferenceEllipsoid.xml

JScience/xml/org/jscience/geography/coordinates/crs/TemporalCRS.xml

JScience/xml/org/jscience/geography/coordinates/crs/VerticalCRS.xml

JScience/xml/org/jscience/geography/coordinates/Height.xml
96	OpenGIS Interface.
101	OpenGIS Interface.
111	Implements Scalar<Length>
117	Implements Scalar<Length>
122	Implements Scalar<Length>
135	Default serialization.

JScience/xml/org/jscience/geography/coordinates/LatLong.xml
151	OpenGIS Interface.
156	OpenGIS Interface.
169	Implements Realtime.
174	Default serialization.
103	Other angle unit.

JScience/xml/org/jscience/geography/coordinates/Time.xml
122	OpenGIS Interface.
127	OpenGIS Interface.
137	Implements Scalar<Duration>
143	Implements Scalar<Duration>
148	Implements Scalar<Duration>
155	Implements Realtime.
160	Default serialization.

JScience/xml/org/jscience/geography/coordinates/UTM.xml
109	NOTE: The calculations in this class use power series expansions. The naming convention is to include the power in the name of the term, so that the square of K0 is 'K02', the cube is 'K03', etc.
284	OpenGIS Interface.
289	OpenGIS Interface.
756	Default serialization.
147	UTM or UPS?
370	UPS longitude zones
380	X latitude exceptions
395	V latitude exceptions
416	polar zones
420	X latitude zone exceptions
424	V latitude zone exceptions
513	southern hemisphere -- add false northing
516	northern hemisphere -- no false northing
582	southern hemisphere
585	northern hemisphere
589	footpoint latitude
693	check for zeroes (the poles)
701	compute longitude
709	compute latitude

JScience/xml/org/jscience/geography/coordinates/XYZ.xml
222	OpenGIS Interface.
227	OpenGIS Interface.
248	Default serialization.
75	conventional result if xy == 0.0...

JScience/xml/org/jscience/JScience.xml
77	Forbids derivation.
162	Still exact.
163	No more exact.
213	m
214	m/s
215	s
217	Note: Most likely the compiler get v * t out of the loop.
227	Selects a relativistic model for dimension checking (typically at start-up).
230	Length and Duration can be added.
235	Energy is compatible with mass (E=mc2)
243	///////////////////////////////////////////////////////////////////// Calculates the cost of a car trip in Europe for an American tourist. /
247	Use currency symbols instead of ISO-4217 codes.
248	Use "$" symbol instead of currency code ("USD")
249	Use "€" symbol instead of currency code ("EUR")
251	Sets exchange rates.
253	1.0 € = 1.17 $
255	Calculates trip cost.
257	20 mi/gal.
258	1.2 €/L
259	400 km
262	Displays cost.
270	1% precision.
271	1% precision.
272	±0.01 V fluctuation.
274	Equations:  U0 = U1 + U2       |1  1  0 |   |U1|   |U0| U1 = R1 * I    =>  |-1 0  R1| * |U2| = |0 | U2 = R2 * I        |0 -1  R2|   |I |   |0 |  A      *  X   =  B
294	Defines two local variables (x, y).
298	f(x) = 1 + 2x + ix²
308	Calculates expression.
317	Simple Lat/Long to UTM conversion.
324	Lat/Long to XYZ conversion (assume height of zero).
330	Compound coordinates - Lat/Long/Alt to XYZ conversion.
338	Even more compounding...
349	2.0000..00
351	Assumes 100 exact digits for exact numbers.
365	Avoids impacting others threads.
526	Local setting.
553	Warming up.
560	Warming up.
565	Checks results.
578	Warming up.
601	Nbr of rows.
603	Nbr of columns.
648	1 s
663	4 digits precision.

JScience/xml/org/jscience/mathematics/function/Constant.xml

JScience/xml/org/jscience/mathematics/function/DiscreteFunction.xml

JScience/xml/org/jscience/mathematics/function/Function.xml
66	TODO: Implements XMLSerializable.
330	Merges the variable from the specified function into a single table.
378	Function composition (default implementation).
446	Function derivative (default implementation).
504	Function integral (default implementation).
562	Function addition (default implementation).
637	Function addition (default implementation).
717	Function multiplication (default implementation).
791	Function multiplication (default implementation).
187	Restores previous variable value.
302	Iteration.
418	Chain rule: http://en.wikipedia.org/wiki/Chain_rule
762	Product rule: http://en.wikipedia.org/wiki/Product_rule (support for non-commutative multiplications). r' = d(f·g) = f'g + fg'
840	Quotient rule: http://en.wikipedia.org/wiki/Quotient_rule with support for non-commutative multiplications. r = f/g,  rg = f, r'g + rg' = f' (produt rule) r' = (f' - rg')/g, r' = (f' - (f/g)g')/g

JScience/xml/org/jscience/mathematics/function/FunctionException.xml

JScience/xml/org/jscience/mathematics/function/Interpolator.xml
61	Searches exact.
66	Searches surrounding points/values.
74	Interpolates.

JScience/xml/org/jscience/mathematics/function/Polynomial.xml
271	////////////////////////////////////////////////////////////// Overrides parent method potentially returning polynomials
174	Remove entry (be careful iterating)
177	Move back to previous entry.
178	To be used if constant polynomial.
182	Else the current coefficient is correct.
264	power = 0
298	Returns zero.
310	Iteration.
366	We multiply all terms togethers, the resulting product will hold all variabgles (powers are always positive).

JScience/xml/org/jscience/mathematics/function/RationalFunction.xml
29	Holds the factory for rational functions.
196	//////////////////////////////////////////////////////////////////// Overrides parent method potentially returning rational functions

JScience/xml/org/jscience/mathematics/function/Term.xml
378	Iteration.

JScience/xml/org/jscience/mathematics/function/Variable.xml

JScience/xml/org/jscience/mathematics/number/Calculus.xml
200	Multiplies by k, add to z if shift != 0
98	Equals to -1 if borrow.
103	Equals to -1 if borrow.
105	Copies rest of x to z.
109	Calculates size.
203	32 bits.
204	31 bits
206	63 bits
209	Adds carry.
210	63 bits.
212	63 bits.
214	Splits words in [31 bits][32 bits]
216	32 bits
217	31 bits
219	Adds low.
220	64 bits
222	64 bits.
226	Adds middle.
227	64 bits.
229	64 bits.
233	Adds high to carry.
288	Recursive.

JScience/xml/org/jscience/mathematics/number/Complex.xml
55	Reads real part.
58	Reads separator.
65	Reads imaginary part.
114	Nothing to do, immutable.

JScience/xml/org/jscience/mathematics/number/Float64.xml
48	Nothing to do, immutable.

JScience/xml/org/jscience/mathematics/number/FloatingPoint.xml
71	Nothing to do, immutable.
193	Find the exponent e such as: value == x.xxx * 10^e
194	18 digits significand.
207	Use same format as Real.
383	Ensures that exp is even.
489	some random number
490	This is a random prime - the same as in LargeInteger.hashCode() We return _significand.mod(p).times(10.pow(-exp) mod p)
497	modInverse of 10 mod p
561	Scale down.
562	Negative.
577	Maintains unicity.

JScience/xml/org/jscience/mathematics/number/Integer64.xml
48	Nothing to do, immutable.

JScience/xml/org/jscience/mathematics/number/LargeInteger.xml
1091	Indicates if bits lost when shifting right the two's-complement representation (affects only negative numbers).
1336	////////////////////// Parsing/Formatting
130	Nothing to do, immutable.
236	Ensures result is large enough (takes into account potential extra bits during negative to positive conversion).
247	End of word reached.
249	In range [-8..-1]
253	Calculates size.
258	special case for -1
262	Converts one's-complement to two's-complement if negative.
263	Adds ONE.
290	-1 if borrow
296	End of word reached.
300	-1 if borrow
302	In range [-8..-1]
314	End of word reached.
317	In range [-8..-1]
322	ZERO
570	Adds smallest in size to largest.
573	Switches that sign.
590	Switches that sign.
591	Always subtract the smallest to the largest.
618	Always multiply the smallest to the largest.
620	Direct times(long) multiplication.
622	Conventional multiplication.
628	Karatsuba (sequential).
630	this = a + 2^(n*63) b, that = c + 2^(n*63) d
633	Optimization for square (a == c, b == d).
641	li = a*c + ((a+b)*(c+d)-(a*c+b*d)) 2^n + b*d 2^2n
644	Karatsuba (concurrent).
646	this = a + 2^(63*n) b, that = c + 2^(63*n) d
649	Optimization for square (a == c, b == d).
658	this = a + 2^n b,   that = c + 2^n d
665	result = a*c + ((a+b)*(c+d)-(a*c+b*d)) 2^n + b*d 2^2n
691	Else zero.
719	Size 2.
754	Calculates remainder, corrects for result +/- 1 error.
770	Setups result and remainder.
793	abs(divisor) would overflow.
834	Straight calculation.
839	Newton iteration (x = 2 * x - x^2 * this).
840	Estimate.
864	First approximation.
912	Extended Euclidian Algorithm
932	(a != 1) || (a != -1)
959	Iteration.
973	exp == 0
991	Works with local (modifiable) copies of the inputs.
993	abs()
995	abs()
997	Euclidian algorithm until u, v about the same size.
1007	Binary GCD Implementation adapted from http:en.wikipedia.org/wiki/Binary_GCD_algorithm
1014	From here on, u is always odd.
1016	Now u and v are both odd, so diff(u, v) is even. Let u = min(u, v), v = diff(u, v)/2.
1024	Swaps.
1044	n - wordShift * 63
1095	n - wordShift * 63
1118	Works with positive n.
1120	n - wordShift * 63
1121	All bits have been shifted.
1144	Approx.
1154	Multiplies by 2^n
1156	n - 63 * wordShift
1160	n < 0
1162	Divides by 2^n
1164	n - 63 * wordShift
1165	All bits would be shifted.
1170	Divides by 5^n
1235	1327144033 is just an appropriately large prime; 1050537101 is 263 mod 1327144033 . The result is this.mod(1327144033) .
1257	bitLength > 63 bits.
1271	Calculates bits length (ignores sign).
1275	Keep 63 most significant bits.
1292	Compares sign.
1297	Same sign, compares size.
1302	Same size.
1318	size <= 1
1384	Reads up to digitsCount at a time.
1392	Resizes.
1405	Reached end.
1411	No more digit.
1413	Restore end index.
1462	Direct long formatting.
1469	Writes high.
1476	Writes low.

JScience/xml/org/jscience/mathematics/number/ModuloInteger.xml
221	///////////////////// Factory creation. /
65	Nothing to do, immutable.

JScience/xml/org/jscience/mathematics/number/Number.xml

JScience/xml/org/jscience/mathematics/number/Rational.xml
50	Nothing to do, immutable.
144	TODO Use TextFormat...
151	No divisor.
374	Avoid negative numbers (ref. bitLength)
377	Normalize to 63 bits (minimum).
381	Normalizes the divisor to 63 bits.
387	Normalizes the dividend to 63 bits.

JScience/xml/org/jscience/mathematics/number/Real.xml
92	Unique (0 ± 1E2147483647)
85	Nothing to do, immutable.
203	Find the exponent e such as: value == x.xxx * 10^e
204	18 digits significand.
237	TODO Use TextFormat...
437	Adds to the real with smallest exponent.
438	>= 0
485	Exponent overflow.
549	Encompasses 0
554	Exponent overflow.
620	Odd exponent.
657	Scientific notation.
721	Shift the significand to a >18 digits integer (long compatible).
756	Small error.
766	Maintains unicity.

JScience/xml/org/jscience/mathematics/structure/Field.xml

JScience/xml/org/jscience/mathematics/structure/GroupAdditive.xml

JScience/xml/org/jscience/mathematics/structure/GroupMultiplicative.xml

JScience/xml/org/jscience/mathematics/structure/Ring.xml

JScience/xml/org/jscience/mathematics/structure/Structure.xml

JScience/xml/org/jscience/mathematics/structure/VectorSpace.xml

JScience/xml/org/jscience/mathematics/structure/VectorSpaceNormed.xml

JScience/xml/org/jscience/mathematics/vector/ComplexMatrix.xml
258	Logic to multiply two matrices.
416	///////////////////// Factory creation. /
157	Else transposed.
217	Returns more specialized type.
249	Creates a mxp matrix in transposed form (p columns vectors of size m)
250	Transposed.
298	Direct calculation.
309	Concurrent/Recursive calculation.
362	Swaps i,j

JScience/xml/org/jscience/mathematics/vector/ComplexVector.xml
298	///////////////////////////// Package Private Utilities /

JScience/xml/org/jscience/mathematics/vector/DenseMatrix.xml
272	Logic to multiply two matrices.
457	///////////////////////////// Package Private Utilities /
469	///////////////////// Factory creation. /
171	Else transposed.
231	Returns more specialized type.
263	Creates a mxp matrix in transposed form (p columns vectors of size m)
264	Transposed.
313	Direct calculation.
324	Concurrent/Recursive calculation.
377	Swaps i,j
418	Number of columns,
419	Number of rows.
421	Row index.

JScience/xml/org/jscience/mathematics/vector/DenseVector.xml
190	///////////////////// Factory creation. /
150	Returns more specialized type.
169	Reduces memory allocation / garbage collection.

JScience/xml/org/jscience/mathematics/vector/DimensionException.xml

JScience/xml/org/jscience/mathematics/vector/Float64Matrix.xml
259	Logic to multiply two matrices.
419	///////////////////// Factory creation. /
158	Else transposed.
218	Returns more specialized type.
250	Creates a mxp matrix in transposed form (p columns vectors of size m)
251	Transposed.
299	Direct calculation.
311	Concurrent/Recursive calculation.
364	Swaps i,j

JScience/xml/org/jscience/mathematics/vector/Float64Vector.xml
300	///////////////////////////// Package Private Utilities /

JScience/xml/org/jscience/mathematics/vector/LUDecomposition.xml
391	///////////////////// Factory creation. /
59	Zero
61	Zero
129	Main loop.
134	Pivoting enabled.
135	Rearranges the rows so that the absolutely largest elements of the matrix source in each column lies in the diagonal.
144	Exchanges.
157	Computes multipliers and eliminate k-th column.
160	Multiplicative order is important for non-commutative elements.
205	Copies B with pivoting.
214	Solves L * Y = pivot(B)
225	Solves U * X = Y;
260	Calculates inv(U).
278	Solves inv(A) * L = inv(U)
292	Swaps columns (reverses pivots permutations).

JScience/xml/org/jscience/mathematics/vector/Matrix.xml
95	Nothing to do.
334	Default implementation.
350	Iteration.
362	Identity.

JScience/xml/org/jscience/mathematics/vector/SparseMatrix.xml
506	///////////////////// Factory creation. /
216	Else transposed.
288	Returns more specialized type.
323	Creates a mxp matrix in transposed form (p columns vectors of size m)
329	M is transposed.
355	Multiply adjoint elements with 1 / determinant.
373	Expansion by minors (also known as Laplacian) This algorithm is division free but too slow for dense matrix.
406	Swaps i,j
421	Position shifted (index minus one).
423	Else don't copy element at j.
455	Number of columns,
456	Number of rows.
458	Row index.

JScience/xml/org/jscience/mathematics/vector/SparseVector.xml
259	///////////////////// Factory creation. /

JScience/xml/org/jscience/mathematics/vector/Vector.xml

JScience/xml/org/jscience/physics/amount/Amount.xml
84	////////////////////////////////////////////////////////////////////////////// Note: In the future, Amount might be abstract (with more measure types) We don't provide public constructors, factory methods should be used.
858	Implements Quantity.
864	Implements Quantity.
877	///////////////// Lookup tables /
985	//////////////////// Factory Creation
130	Exact.
142	Nothing to do.
380	No conversion necessary.
385	Exact conversion.
552	Both around zero.
574	Only one exact inverse: one
579	Encompass zero.
728	Iteration.

JScience/xml/org/jscience/physics/amount/AmountException.xml

JScience/xml/org/jscience/physics/amount/AmountFormat.xml
154	Exact digits.
177	Exact!
187	Error specified.
241	Exact digits.
265	TBD
297	Exact digits.

JScience/xml/org/jscience/physics/amount/Constants.xml
147	4π×10−7 N/A²

JScience/xml/org/jscience/physics/model/HighEnergyModel.xml
44	Implements Dimension.Model
50	Implements Dimension.Model
56	// SPEED_OF_LIGHT (METRE / SECOND) = 1 SI.SECOND.setDimension(SI.NANO(SI.SECOND), new MultiplyConverter(1E9)); SI.METRE.setDimension(SI.NANO(SI.SECOND), new MultiplyConverter(1E9 / c));  ENERGY = m²·kg/s² = kg·c² SI.KILOGRAM.setDimension(SI.GIGA(NonSI.ELECTRON_VOLT), new MultiplyConverter(c * c / ePlus / 1E9));  BOLTZMANN (JOULE / KELVIN = (KILOGRAM / C^2 ) / KELVIN) = 1 SI.KELVIN.setDimension(SI.GIGA(NonSI.ELECTRON_VOLT), new MultiplyConverter(k / ePlus / 1E9));  ELEMENTARY_CHARGE (SECOND * AMPERE) = 1 SI.AMPERE.setDimension(Unit.ONE.divide(SI.NANO(SI.SECOND)), new MultiplyConverter(1E-9 / ePlus));  SI.MOLE.setDimension(SI.MOLE, Converter.IDENTITY); SI.CANDELA.setDimension(SI.CANDELA, Converter.IDENTITY);

JScience/xml/org/jscience/physics/model/NaturalModel.xml
46	Implements Dimension.Model
52	Implements Dimension.Model
57	// H_BAR (SECOND * JOULE = SECOND * (KILOGRAM / C^2 )) = 1 SPEED_OF_LIGHT (METRE / SECOND) = 1 BOLTZMANN (JOULE / KELVIN = (KILOGRAM / C^2 ) / KELVIN) = 1 MAGNETIC CONSTANT (NEWTON / AMPERE^2) = 1 GRAVITATIONAL CONSTANT (METRE^3 / KILOGRAM / SECOND^2) = 1 SI.SECOND.setDimension(NONE, new MultiplyConverter((c * c) * MathLib.sqrt(c / (hBar * G)))); SI.METRE.setDimension(NONE, new MultiplyConverter(c * MathLib.sqrt(c / (hBar * G)))); SI.KILOGRAM.setDimension(NONE, new MultiplyConverter(MathLib.sqrt(G / (hBar * c)))); SI.KELVIN.setDimension(NONE, new MultiplyConverter(k * MathLib.sqrt(G / (hBar * c)) / (c * c))); SI.AMPERE.setDimension(NONE, new MultiplyConverter(MathLib.sqrt(µ0 * G) / (c * c))); SI.MOLE.setDimension(AMOUNT_OF_SUBSTANCE, Converter.IDENTITY); SI.CANDELA.setDimension(LUMINOUS_INTENSITY, Converter.IDENTITY);

JScience/xml/org/jscience/physics/model/PhysicalModel.xml

JScience/xml/org/jscience/physics/model/QuantumModel.xml
43	Implements Dimension.Model
49	Implements Dimension.Model
55	// ENERGY = m²·kg/s² = kg·c² SI.KILOGRAM.setDimension(SI.GIGA(NonSI.ELECTRON_VOLT), new MultiplyConverter(1E-9 * c * c / ePlus));  H_BAR (SECOND * JOULE = SECOND * (KILOGRAM / C^2 )) = 1 SI.SECOND.setDimension(Unit.ONE.divide(SI.GIGA(NonSI.ELECTRON_VOLT)), new MultiplyConverter(1E9 * ePlus / hBar));  SPEED_OF_LIGHT (METRE / SECOND) = 1 SI.METRE.setDimension(Unit.ONE.divide(SI.GIGA(NonSI.ELECTRON_VOLT)), new MultiplyConverter(1E9 * ePlus / (c * hBar)));  BOLTZMANN (JOULE / KELVIN = (KILOGRAM / C^2 ) / KELVIN) = 1 SI.KELVIN.setDimension(SI.GIGA(NonSI.ELECTRON_VOLT), new MultiplyConverter(1E-9 * k / ePlus));  MAGNETIC CONSTANT (NEWTON / AMPERE^2) = 1 SI.AMPERE.setDimension(SI.GIGA(NonSI.ELECTRON_VOLT), new MultiplyConverter(1E-9 * MathLib.sqrt(µ0 * c * hBar) / ePlus));  SI.MOLE.setDimension(SI.MOLE, Converter.IDENTITY); SI.CANDELA.setDimension(SI.CANDELA, Converter.IDENTITY);

JScience/xml/org/jscience/physics/model/RelativisticModel.xml
45	Implements Dimension.Model
51	Implements Dimension.Model

JScience/xml/org/jscience/physics/model/StandardModel.xml
42	Implements Dimension.Model
47	Implements Dimension.Model

JScience/xml/org/opengis/referencing/cs/CoordinateSystemAxis.xml
35	@UML(identifier="CS_CoordinateSystemAxis", specification=ISO_19111)

