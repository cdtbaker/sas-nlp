package sasnlp.nlpstats.core;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

public class NGramParser {

	private static String nGramExists(String needle, Map<String, Integer> ngrams) {
		return ngrams.containsKey(needle);
	}

	private int ngramLength = 2;
	private int ngramCount = 0;

	private Map<String, Integer> ngrams = new HashMap<String, Integer>();

	public NGramParser(int nGramSize) {
		this.ngramLength = nGramSize;
	}

	public void parse(List<String> wl, boolean withSentenceEndsStarts, int skips) {
		this.addListOfWords(wl, 0, withSentenceEndsStarts, skips);
	}

	public static boolean isInteger(String s) {
		try {
			Integer.parseInt(s);
		} catch (NumberFormatException e) {
			return false;
		}
		return true;
	}

	public void addListOfWords(List<String> list, int toSkip,
			boolean withSentenceEndsStarts, int skips) {

			for (int l = 0; l <= skips; l++) {
				loopK : for (int i = ngramLength - 1; i < list.size(); i++) {
					
					if(i - (ngramLength + l - 1) < 0)
					{
						continue loopK;
					}
					NGram ngram = new NGram();

					for (int j = (ngramLength + l - 1); j + l >= 0 && j >= 0; j--) {
						 
						if(i - j >= 0)
						{
							
							String s = list.get(i - j);
							if (!isInteger(s))
								ngram.add(new Word(s, 1));
							else
								ngram.add(new Word(s, 2));
						}
						else
						{
							System.out.println("  Invalid");
							ngram = new NGram();
						}
					}

					System.out.println("> Built: " + ngram);
					
					if(ngram.ngram.size() == ngramLength)
					{
						storeNGram(ngram);
					}
					
					for(int startingword = 1; startingword <= (ngramLength + l - 2); startingword++)
					{
						if(l == 1) {
							System.out.println(startingword);
							
							storeNGram(   cloneAndSkipNGram(ngram, startingword)   );
						}
						
						for(int remwords = startingword + 1; remwords <= (ngramLength + l - 2); remwords++)
						{
							if(l > 1) {
								System.out.println(startingword + " and " + remwords);
								storeNGram(   cloneAndSkipNGram(ngram, startingword, remwords)   );
							}
						}
					}
				}
			
		}
	}
	
	public NGram cloneAndSkipNGram(NGram ngram, Integer...skips)
	{
		HashMap<Integer, Word> newNGram = new HashMap<Integer, Word>();
		
		int index = 0;
		
		for(int i = 0; i < ngram.ngram.size(); i++)
		{
			if(!Arrays.asList(skips).contains(index))
			{
				Word w = new Word(ngram.ngram.get(index).type);
				for(String s : ngram.ngram.get(index).words)
				{
					w.words.add(s);
				}
				newNGram.put(index, w);
			}
			
			index++;
		}
		
		
		NGram newn = new NGram();
		newn.ngram = newNGram;

		
		return newn;
	}
	
	public void storeNGram(NGram ngram) {
		NGram existingngram = nGramExists(ngram, ngrams);
		if (existingngram == null) {
			ngrams.put(ngram, new Integer(0));
		} else {
			for (Entry<Integer, Word> x : existingngram.ngram
					.entrySet()) {
				if (x.getValue().type == 2) {
					x.getValue().addValue(
							ngram.ngram.get(x.getKey()).words
									.get(0));
				}
			}

			ngrams.put(existingngram, ngrams.get(existingngram) + 1);
		}

		ngramCount++;
	}

	public int getNgramCount() {
		return ngramCount;
	}

	public Map<String, Integer> getNGramMap() {
		Map<String, Integer> result = new HashMap<String, Integer>();

		for (Entry<NGram, Integer> x : ngrams.entrySet()) {
			result.put(x.getKey().toString(), x.getValue() + 1);
		}

		return result;
	}
}