<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.type.context">
        <import package="java.math.BigDecimal"/>
        <import package="java.math.MathContext"/>
        <import package="java.math.RoundingMode"/>
        <import package="java.text.DecimalFormat"/>
        <import package="java.text.Format"/>
        <import package="java.text.NumberFormat"/>
        <import package="java.util.Locale"/>
        <import package="org.ojalgo.ProgrammingError"/>
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.RationalNumber"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <import package="org.ojalgo.type.format.NumberStyle"/>
        <class name="NumberContext" line="18">
            <extends class="FormatContext">
                <type_params>
                    <type_param name="Number"/>
                </type_params>
            </extends>
            <javadoc line="18">
                &lt;p&gt;
                  Think of this as a {@linkplain MathContext} that specifies both precision and scale. Numeric data types
                  (non-integers) in databases are specified using precison and scale. While doing maths the precision is all that
                  matters, but before sending a number to a database, or printing/displaying it, rounding to a specified scale is
                  desireable.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The enforce methods first enforce the precision and then set the scale. It is possible that this will create a number
                  with trailing zeros and more digits than the precision allows. It is also possible to define a context with a scale
                  that is larger than the precision. This is NOT how precision and scale is used with numeric types in databases.
                  &lt;/p&gt;                
                <author>
                    apete                    
                </author>
            </javadoc>
            <interface name="Enforceable">
                <type_params>
                    <type_param name="N"/>
                </type_params>
                <method name="enforce" type="N" line="34"/>
            </interface>
            <interface name="FormatPattern">
                <method name="toLocalizedPattern" type="String" line="37"/>
                <method name="toPattern" type="String" line="38"/>
            </interface>
            <declaration name="DEFAULT_MATH" type="MathContext" line="40"/>
            <declaration name="DEFAULT_STYLE" type="NumberStyle" line="41"/>
            <method name="getCurrency" type="NumberContext" line="42">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="tmpFormat" type="NumberFormat" line="43"/>
                <declaration name="tmpPrecision" type="int" line="44"/>
                <declaration name="tmpScale" type="int" line="45"/>
                <declaration name="tmpRoundingMode" type="RoundingMode" line="46"/>
            </method>
            <method name="getGeneral" type="NumberContext" line="49">
                <params>
                    <param name="scale" type="int"/>
                </params>
                <declaration name="tmpFormat" type="NumberFormat" line="50"/>
                <declaration name="tmpPrecision" type="int" line="51"/>
                <declaration name="tmpScale" type="int" line="52"/>
                <declaration name="tmpRoundingMode" type="RoundingMode" line="53"/>
            </method>
            <method name="getGeneral" type="NumberContext" line="56">
                <params>
                    <param name="aPrecision" type="int"/>
                    <param name="scale" type="int"/>
                </params>
                <declaration name="tmpFormat" type="NumberFormat" line="57"/>
                <declaration name="tmpPrecision" type="int" line="58"/>
                <declaration name="tmpScale" type="int" line="59"/>
                <declaration name="tmpRoundingMode" type="RoundingMode" line="60"/>
            </method>
            <method name="getGeneral" type="NumberContext" line="63">
                <params>
                    <param name="scale" type="int"/>
                    <param name="aRoundingMode" type="RoundingMode"/>
                </params>
                <declaration name="tmpFormat" type="NumberFormat" line="64"/>
                <declaration name="tmpPrecision" type="int" line="65"/>
                <declaration name="tmpScale" type="int" line="66"/>
                <declaration name="tmpRoundingMode" type="RoundingMode" line="67"/>
            </method>
            <javadoc line="70">
                The scale will be set to half the precision.                
            </javadoc>
            <method name="getGeneral" type="NumberContext" line="73">
                <params>
                    <param name="context" type="MathContext"/>
                </params>
                <declaration name="tmpFormat" type="NumberFormat" line="74"/>
                <declaration name="tmpPrecision" type="int" line="75"/>
                <declaration name="tmpScale" type="int" line="76"/>
                <declaration name="tmpRoundingMode" type="RoundingMode" line="77"/>
            </method>
            <method name="getInteger" type="NumberContext" line="80">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="tmpFormat" type="NumberFormat" line="81"/>
                <declaration name="tmpPrecision" type="int" line="82"/>
                <declaration name="tmpScale" type="int" line="83"/>
                <declaration name="tmpRoundingMode" type="RoundingMode" line="84"/>
            </method>
            <method name="getMath" type="NumberContext" line="87">
                <params>
                    <param name="aPrecisionAndScale" type="int"/>
                    <param name="aRoundingMode" type="RoundingMode"/>
                </params>
                <declaration name="tmpFormat" type="NumberFormat" line="88"/>
                <declaration name="tmpPrecision" type="int" line="89"/>
                <declaration name="tmpScale" type="int" line="90"/>
                <declaration name="tmpRoundingMode" type="RoundingMode" line="91"/>
            </method>
            <javadoc line="94">
                The scale will be set to the same as the precision.                
            </javadoc>
            <method name="getMath" type="NumberContext" line="97">
                <params>
                    <param name="context" type="MathContext"/>
                </params>
                <declaration name="tmpFormat" type="NumberFormat" line="98"/>
                <declaration name="tmpPrecision" type="int" line="99"/>
                <declaration name="tmpScale" type="int" line="100"/>
                <declaration name="tmpRoundingMode" type="RoundingMode" line="101"/>
            </method>
            <method name="getPercent" type="NumberContext" line="104">
                <params>
                    <param name="scale" type="int"/>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="tmpFormat" type="NumberFormat" line="105"/>
                <declaration name="tmpPrecision" type="int" line="106"/>
                <declaration name="tmpScale" type="int" line="107"/>
                <declaration name="tmpRoundingMode" type="RoundingMode" line="108"/>
            </method>
            <method name="getPercent" type="NumberContext" line="111">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <method name="toFormat" type="Format" line="114">
                <params>
                    <param name="style" type="NumberStyle"/>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <method name="error" type="double" line="117">
                <params>
                    <param name="exponent" type="int"/>
                </params>
            </method>
            <declaration name="myError" type="double" line="120"/>
            <declaration name="myMathContext" type="MathContext" line="121"/>
            <declaration name="myPrecision" type="int" line="122"/>
            <declaration name="myPrecisionError" type="double" line="123"/>
            <declaration name="myRoundingMode" type="RoundingMode" line="124"/>
            <declaration name="myScale" type="int" line="125"/>
            <declaration name="myScaleError" type="double" line="126"/>
            <declaration name="myScaleFactor" type="double" line="127"/>
            <method name="NumberContext" type="constructor" line="128"/>
            <method name="NumberContext" type="constructor" line="131">
                <params>
                    <param name="format" type="Format"/>
                    <param name="precision" type="int"/>
                    <param name="scale" type="int"/>
                    <param name="roundingMode" type="RoundingMode"/>
                </params>
                <declaration name="tmpMax" type="int" line="140"/>
                <declaration name="tmpMin" type="int" line="141"/>
                <declaration name="tmpErrExp" type="int" line="142"/>
            </method>
            <method name="NumberContext" type="constructor" line="145">
                <params>
                    <param name="precision" type="int"/>
                    <param name="scale" type="int"/>
                    <param name="roundingMode" type="RoundingMode"/>
                </params>
            </method>
            <method name="NumberContext" type="constructor" line="148">
                <params>
                    <param name="scale" type="int"/>
                    <param name="roundingMode" type="RoundingMode"/>
                </params>
            </method>
            <method name="NumberContext" type="constructor" line="151">
                <params>
                    <param name="aNumberContextToCopy" type="NumberContext"/>
                    <param name="aDifferentRoundingMode" type="RoundingMode"/>
                </params>
            </method>
            <method name="NumberContext" type="constructor" line="154">
                <params>
                    <param name="aRoundingMode" type="RoundingMode"/>
                </params>
            </method>
            <method name="NumberContext" type="constructor" line="157">
                <params>
                    <param name="format" type="Format"/>
                </params>
            </method>
            <javadoc line="161">
                Will first enforce the precision, and then the scale. Both operations will comply with the rounding mode.                
            </javadoc>
            <method name="enforce" type="BigDecimal" line="164">
                <params>
                    <param name="number" type="BigDecimal"/>
                </params>
                <declaration name="retVal" type="BigDecimal" line="165"/>
                <scope line="166"/>
                <scope line="169"/>
                <scope line="172"/>
                <scope line="175"/>
            </method>
            <javadoc line="179">
                Does not enforce the precision and does not use the specified rounding mode. The precision is given by the type
                  double and the rounding mode is always &quot;half even&quot; as given by {@linkplain StrictMath#rint(double)}.                
            </javadoc>
            <method name="enforce" type="double" line="183">
                <params>
                    <param name="number" type="double"/>
                </params>
            </method>
            <method name="enforce" type="Number" line="186">
                <params>
                    <param name="object" type="Number"/>
                </params>
                <scope line="187"/>
                <scope line="190"/>
                <scope line="193"/>
                <scope line="196"/>
            </method>
            <javadoc line="200">
                @see java.lang.Object#equals(java.lang.Object)                
            </javadoc>
            <method name="equals" type="boolean" line="203">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="204"/>
                <scope line="207"/>
                <scope line="210"/>
                <declaration name="other" type="NumberContext" line="213"/>
                <scope line="214">
                    <scope line="215"/>
                </scope>
                <scope line="219"/>
                <scope line="222"/>
                <scope line="225">
                    <scope line="226"/>
                </scope>
                <scope line="230"/>
                <scope line="233"/>
                <scope line="236"/>
            </method>
            <javadoc line="241">
                @deprecated v35                
            </javadoc>
            <method name="error" type="double" line="244"/>
            <method name="getBigEnforceFunction" type="UnaryFunction<BigDecimal>" line="247">
                <anonymous_class line="248">
                    <method name="invoke" type="BigDecimal" line="249">
                        <params>
                            <param name="arg" type="BigDecimal"/>
                        </params>
                    </method>
                    <method name="invoke" type="double" line="252">
                        <params>
                            <param name="arg" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <method name="getBigRoundFunction" type="UnaryFunction<BigDecimal>" line="258">
                <anonymous_class line="259">
                    <method name="invoke" type="BigDecimal" line="260">
                        <params>
                            <param name="arg" type="BigDecimal"/>
                        </params>
                    </method>
                    <method name="invoke" type="double" line="263">
                        <params>
                            <param name="arg" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <method name="getComplexEnforceFunction" type="UnaryFunction<ComplexNumber>" line="269">
                <anonymous_class line="270">
                    <method name="invoke" type="ComplexNumber" line="271">
                        <params>
                            <param name="arg" type="ComplexNumber"/>
                        </params>
                    </method>
                    <method name="invoke" type="double" line="274">
                        <params>
                            <param name="arg" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <method name="getComplexRoundFunction" type="UnaryFunction<ComplexNumber>" line="280">
                <anonymous_class line="281">
                    <method name="invoke" type="ComplexNumber" line="282">
                        <params>
                            <param name="arg" type="ComplexNumber"/>
                        </params>
                    </method>
                    <method name="invoke" type="double" line="285">
                        <params>
                            <param name="arg" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <method name="getMathContext" type="MathContext" line="291"/>
            <method name="getPrecision" type="int" line="294"/>
            <method name="getPrimitiveEnforceFunction" type="UnaryFunction<Double>" line="297">
                <anonymous_class line="298">
                    <method name="invoke" type="double" line="299">
                        <params>
                            <param name="arg" type="double"/>
                        </params>
                    </method>
                    <method name="invoke" type="Double" line="302">
                        <params>
                            <param name="arg" type="Double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <method name="getPrimitiveRoundFunction" type="UnaryFunction<Double>" line="308">
                <anonymous_class line="309">
                    <method name="invoke" type="double" line="310">
                        <params>
                            <param name="arg" type="double"/>
                        </params>
                    </method>
                    <method name="invoke" type="Double" line="313">
                        <params>
                            <param name="arg" type="Double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <method name="getRationalEnforceFunction" type="UnaryFunction<RationalNumber>" line="319">
                <anonymous_class line="320">
                    <method name="invoke" type="double" line="321">
                        <params>
                            <param name="arg" type="double"/>
                        </params>
                    </method>
                    <method name="invoke" type="RationalNumber" line="324">
                        <params>
                            <param name="arg" type="RationalNumber"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <method name="getRationalRoundFunction" type="UnaryFunction<RationalNumber>" line="330">
                <anonymous_class line="331">
                    <method name="invoke" type="double" line="332">
                        <params>
                            <param name="arg" type="double"/>
                        </params>
                    </method>
                    <method name="invoke" type="RationalNumber" line="335">
                        <params>
                            <param name="arg" type="RationalNumber"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <method name="getRoundingMode" type="RoundingMode" line="341"/>
            <method name="getScale" type="int" line="344"/>
            <javadoc line="347">
                @see java.lang.Object#hashCode()                
            </javadoc>
            <method name="hashCode" type="int" line="350">
                <declaration name="prime" type="int" line="351"/>
                <declaration name="result" type="int" line="352"/>
                <declaration name="temp" type="long" line="357"/>
            </method>
            <method name="isSmallComparedTo" type="boolean" line="362">
                <params>
                    <param name="reference" type="double"/>
                    <param name="value" type="double"/>
                </params>
                <scope line="363"/>
                <scope line="366"/>
            </method>
            <method name="isSmallError" type="boolean" line="370">
                <params>
                    <param name="expected" type="double"/>
                    <param name="actual" type="double"/>
                </params>
            </method>
            <method name="isZero" type="boolean" line="373">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="newFormat" type="NumberContext" line="376">
                <params>
                    <param name="style" type="NumberStyle"/>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <method name="newMathContext" type="NumberContext" line="379">
                <params>
                    <param name="context" type="MathContext"/>
                </params>
            </method>
            <method name="newPrecision" type="NumberContext" line="382">
                <params>
                    <param name="precision" type="int"/>
                </params>
            </method>
            <method name="newRoundingMode" type="NumberContext" line="385">
                <params>
                    <param name="mode" type="RoundingMode"/>
                </params>
            </method>
            <method name="newScale" type="NumberContext" line="388">
                <params>
                    <param name="scale" type="int"/>
                </params>
            </method>
            <javadoc line="391">
                Will create an &quot;enforced&quot; BigDecimal instance.                
            </javadoc>
            <method name="toBigDecimal" type="BigDecimal" line="394">
                <params>
                    <param name="number" type="double"/>
                </params>
            </method>
            <javadoc line="397">
                Works with {@linkplain DecimalFormat} and {@linkplain FormatPattern} implementations. In other cases it returns
                  null.                
            </javadoc>
            <method name="toLocalizedPattern" type="String" line="401">
                <declaration name="retVal" type="String" line="402"/>
                <scope line="403"/>
                <scope line="406"/>
            </method>
            <javadoc line="411">
                Works with {@linkplain DecimalFormat} and {@linkplain FormatPattern} implementations. In other cases it returns
                  null.                
            </javadoc>
            <method name="toPattern" type="String" line="415">
                <declaration name="retVal" type="String" line="416"/>
                <scope line="417"/>
                <scope line="420"/>
            </method>
            <method name="toString" type="String" line="425"/>
            <method name="configureFormat" type="void" line="428">
                <params>
                    <param name="format" type="Format"/>
                    <param name="object" type="Object"/>
                </params>
                <scope line="429">
                    <declaration name="tmpDF" type="DecimalFormat" line="430"/>
                    <declaration name="tmpModScale" type="int" line="431"/>
                    <scope line="434"/>
                    <scope line="437"/>
                </scope>
            </method>
            <method name="handleFormatException" type="String" line="442">
                <params>
                    <param name="format" type="Format"/>
                    <param name="object" type="Object"/>
                </params>
            </method>
            <method name="handleParseException" type="Number" line="445">
                <params>
                    <param name="format" type="Format"/>
                    <param name="string" type="String"/>
                </params>
            </method>
        </class>
    </source>