<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.optimisation.convex">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="org.ojalgo.function.aggregator.Aggregator"/>
        <import package="org.ojalgo.matrix.decomposition.Cholesky"/>
        <import package="org.ojalgo.matrix.decomposition.CholeskyDecomposition"/>
        <import package="org.ojalgo.matrix.decomposition.Eigenvalue"/>
        <import package="org.ojalgo.matrix.decomposition.EigenvalueDecomposition"/>
        <import package="org.ojalgo.matrix.decomposition.QR"/>
        <import package="org.ojalgo.matrix.decomposition.QRDecomposition"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.matrix.store.ZeroStore"/>
        <class name="KKTSolver" line="39">
            <extends class="Object"/>
            <comment line="154">
                ≈1.0E-15                
            </comment>
            <javadoc line="39">
                When the KKT matrix is nonsingular, there is a unique optimal primal-dual pair (x,l). If the KKT matrix is singular,
                  but the KKT system is still solvable, any solution yields an optimal pair (x,l). If the KKT system is not solvable,
                  the quadratic optimization problem is unbounded below or infeasible.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="Input" line="48">
                <declaration name="myA" type="MatrixStore&amp;lt;Double&amp;gt;" line="50"/>
                <declaration name="myB" type="MatrixStore&amp;lt;Double&amp;gt;" line="51"/>
                <declaration name="myC" type="MatrixStore&amp;lt;Double&amp;gt;" line="52"/>
                <declaration name="myQ" type="MatrixStore&amp;lt;Double&amp;gt;" line="53"/>
                <javadoc line="55">
                    | Q | = | C |                    
                    <param>
                        Q                        
                    </param>
                    <param>
                        C                        
                    </param>
                </javadoc>
                <method name="Input" type="constructor" line="61">
                    <params>
                        <param name="Q" type="MatrixStore&lt;Double&gt;"/>
                        <param name="C" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                </method>
                <javadoc line="65">
                    | Q | A&lt;sup&gt;T&lt;/sup&gt; | = | C | &lt;br&gt;
                      | A | 0 | = | B |                    
                    <param>
                        Q                        
                    </param>
                    <param>
                        C                        
                    </param>
                    <param>
                        A                        
                    </param>
                    <param>
                        B                        
                    </param>
                </javadoc>
                <method name="Input" type="constructor" line="74">
                    <params>
                        <param name="Q" type="MatrixStore&lt;Double&gt;"/>
                        <param name="C" type="MatrixStore&lt;Double&gt;"/>
                        <param name="A" type="MatrixStore&lt;Double&gt;"/>
                        <param name="B" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                </method>
                <method name="getA" type="MatrixStore&lt;Double&gt;" line="84"/>
                <method name="getB" type="MatrixStore&lt;Double&gt;" line="88"/>
                <method name="getC" type="MatrixStore&lt;Double&gt;" line="92"/>
                <method name="getKKT" type="MatrixStore&lt;Double&gt;" line="96">
                    <scope line="97"/>
                    <scope line="99"/>
                </method>
                <method name="getQ" type="MatrixStore&lt;Double&gt;" line="104"/>
                <method name="getRHS" type="MatrixStore&lt;Double&gt;" line="108">
                    <scope line="109"/>
                    <scope line="111"/>
                </method>
                <method name="isConstrained" type="boolean" line="116"/>
            </class>
            <class name="Output" line="122">
                <declaration name="myL" type="MatrixStore&amp;lt;Double&amp;gt;" line="124"/>
                <declaration name="mySolvable" type="boolean" line="125"/>
                <declaration name="myX" type="MatrixStore&amp;lt;Double&amp;gt;" line="126"/>
                <method name="Output" type="constructor" line="128">
                    <params>
                        <param name="X" type="MatrixStore&lt;Double&gt;"/>
                        <param name="L" type="MatrixStore&lt;Double&gt;"/>
                        <param name="solvable" type="boolean"/>
                    </params>
                </method>
                <method name="getL" type="MatrixStore&lt;Double&gt;" line="137"/>
                <method name="getX" type="MatrixStore&lt;Double&gt;" line="141"/>
                <method name="isSolvable" type="boolean" line="145"/>
            </class>
            <declaration name="SCALE" type="double" line="151"/>
            <declaration name="SMALL" type="double" line="153"/>
            <declaration name="myCalculationC" type="PrimitiveDenseStore" line="155"/>
            <declaration name="myCalculationQ" type="PrimitiveDenseStore" line="156"/>
            <declaration name="myCholesky" type="Cholesky&amp;lt;Double&amp;gt;" line="158"/>
            <declaration name="myQR" type="QR&amp;lt;Double&amp;gt;" line="159"/>
            <method name="KKTSolver" type="constructor" line="161"/>
            <method name="KKTSolver" type="constructor" line="169">
                <params>
                    <param name="template" type="KKTSolver.Input"/>
                </params>
            </method>
            <method name="solve" type="Output" line="177">
                <params>
                    <param name="input" type="Input"/>
                </params>
            </method>
            <method name="solve" type="Output" line="181">
                <params>
                    <param name="input" type="Input"/>
                    <param name="validate" type="boolean"/>
                </params>
                <comment line="199">
                    Unconstrained                    
                </comment>
                <comment line="205">
                    Only 1 possible solution                    
                </comment>
                <comment line="209">
                    TODO Shouldn&apos;t have to do this. Can solve directly with the already calculöated  myQR.compute(tmpA).                    
                </comment>
                <comment line="214">
                    Actual optimisation problem                    
                </comment>
                <comment line="233">
                    Negated Schur complement                    
                </comment>
                <comment line="242">
                    BasicLogger.debug(&quot;Negated Schur complement QR&quot;);
                                        BasicLogger.debug(&quot;Q&quot;, myQR.getQ());
                                        BasicLogger.debug(&quot;R&quot;, myQR.getR());                    
                </comment>
                <comment line="247">
                    BasicLogger.debug(&quot;Q Cholesky&quot;);
                                    BasicLogger.debug(&quot;L&quot;, myCholesky.getL());                    
                </comment>
                <declaration name="tmpQ" type="MatrixStore&amp;lt;Double&amp;gt;" line="183"/>
                <declaration name="tmpC" type="MatrixStore&amp;lt;Double&amp;gt;" line="184"/>
                <declaration name="tmpA" type="MatrixStore&amp;lt;Double&amp;gt;" line="185"/>
                <declaration name="tmpB" type="MatrixStore&amp;lt;Double&amp;gt;" line="186"/>
                <declaration name="tmpSolvable" type="boolean" line="188"/>
                <scope line="190"/>
                <declaration name="tmpX" type="MatrixStore&amp;lt;Double&amp;gt;" line="194"/>
                <declaration name="tmpL" type="MatrixStore&amp;lt;Double&amp;gt;" line="195"/>
                <scope line="197"/>
                <scope line="203"/>
                <scope line="212">
                    <declaration name="tmpSize" type="int" line="215"/>
                    <declaration name="tmpLargestQ" type="double" line="216"/>
                    <declaration name="tmpCalcQ" type="PrimitiveDenseStore" line="218"/>
                    <declaration name="tmpCalcC" type="PrimitiveDenseStore" line="219"/>
                    <scope line="223"/>
                    <scope line="227">
                        <declaration name="tmpInvQAT" type="MatrixStore&amp;lt;Double&amp;gt;" line="229"/>
                        <declaration name="tmpInvQC" type="MatrixStore&amp;lt;Double&amp;gt;" line="230"/>
                        <declaration name="tmpS" type="MatrixStore&amp;lt;Double&amp;gt;" line="233"/>
                        <scope line="236"/>
                        <scope line="240"/>
                    </scope>
                    <scope line="245"/>
                </scope>
            </method>
            <method name="validate" type="boolean" line="255">
                <params>
                    <param name="input" type="Input"/>
                </params>
                <scope line="257"/>
                <scope line="263"/>
            </method>
            <method name="doValidate" type="void" line="269">
                <params>
                    <param name="input" type="Input"/>
                </params>
                <comment line="287">
                    Not positive definite. Check if at least positive semidefinite.                    
                </comment>
                <declaration name="tmpQ" type="MatrixStore&amp;lt;Double&amp;gt;" line="271"/>
                <declaration name="tmpC" type="MatrixStore&amp;lt;Double&amp;gt;" line="272"/>
                <declaration name="tmpA" type="MatrixStore&amp;lt;Double&amp;gt;" line="273"/>
                <declaration name="tmpB" type="MatrixStore&amp;lt;Double&amp;gt;" line="274"/>
                <scope line="276"/>
                <scope line="280"/>
                <scope line="285">
                    <declaration name="tmpEvD" type="Eigenvalue&amp;lt;Double&amp;gt;" line="288"/>
                    <declaration name="tmpD" type="MatrixStore&amp;lt;Double&amp;gt;" line="292"/>
                    <declaration name="tmpLength" type="int" line="296"/>
                    <scope line="297">
                        <scope line="298"/>
                    </scope>
                </scope>
                <scope line="304">
                    <scope line="306"/>
                </scope>
            </method>
            <method name="getCalculationC" type="PrimitiveDenseStore" line="312">
                <params>
                    <param name="inputC" type="MatrixStore&lt;Double&gt;"/>
                </params>
                <scope line="313"/>
                <scope line="315"/>
            </method>
            <method name="getCalculationQ" type="PrimitiveDenseStore" line="321">
                <params>
                    <param name="inputQ" type="MatrixStore&lt;Double&gt;"/>
                </params>
                <scope line="322"/>
                <scope line="324"/>
            </method>
        </class>
    </source>