<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.optimisation.convex">
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.optimisation.BaseSolver"/>
        <import package="org.ojalgo.optimisation.Expression"/>
        <import package="org.ojalgo.optimisation.Expression.Index"/>
        <import package="org.ojalgo.optimisation.ExpressionsBasedModel"/>
        <import package="org.ojalgo.optimisation.ModelEntity"/>
        <import package="org.ojalgo.optimisation.Optimisation"/>
        <import package="org.ojalgo.optimisation.Variable"/>
        <import package="org.ojalgo.type.IndexSelector"/>
        <class name="ConvexSolver" line="45">
            <extends class="BaseSolver"/>
            <javadoc line="45">
                QuadraticSolver solves optimisation problems of the form:
                  &lt;p&gt;
                  min 1/2 [X]&lt;sup&gt;T&lt;/sup&gt;[Q][X] - [C]&lt;sup&gt;T&lt;/sup&gt;[X]&lt;br&gt;
                  when [AE][X] == [BE]&lt;br&gt;
                  and [AI][X] &lt;= [BI]
                  &lt;/p&gt;
                  &lt;p&gt;
                  The matrix [Q] is assumed to be symmetric (it must be made that way) and:
                  &lt;ul&gt;
                  &lt;li&gt;If [Q] is positive semidefinite, then the objective function is convex: In this case the quadratic program has a
                  global minimizer if there exists some feasible vector [X] (satisfying the constraints) and if the objective function
                  is bounded below on the feasible region.&lt;/li&gt;
                  &lt;li&gt;If [Q] is positive definite and the problem has a feasible solution, then the global minimizer is unique.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  You construct instances by using the {@linkplain Builder} class. It will return an appropriate subclass for you. It&apos;s
                  recommended that you first create a {@linkplain ExpressionsBasedModel} and feed that to the {@linkplain Builder}.
                  Alternatively you can directly call {@linkplain ExpressionsBasedModel#getDefaultSolver()} or even{@linkplain ExpressionsBasedModel#minimise()} or {@linkplain ExpressionsBasedModel#maximise()} on the model.
                  &lt;/p&gt;                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="Builder" line="72">
                <extends class="AbstractBuilder">
                    <type_params>
                        <type_param name="ConvexSolver.Builder"/>
                        <type_param name="ConvexSolver"/>
                    </type_params>
                </extends>
                <method name="Builder" type="constructor" line="74">
                    <params>
                        <param name="Q" type="MatrixStore&lt;Double&gt;"/>
                        <param name="C" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="78"/>
                <method name="Builder" type="constructor" line="82">
                    <params>
                        <param name="matrices" type="ConvexSolver.Builder"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="86">
                    <params>
                        <param name="aModel" type="ExpressionsBasedModel"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="93">
                    <params>
                        <param name="C" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="97">
                    <params>
                        <param name="aMtrxArr" type="MatrixStore&lt;Double&gt;[]"/>
                    </params>
                </method>
                <method name="build" type="ConvexSolver" line="102">
                    <params>
                        <param name="options" type="Optimisation.Options"/>
                    </params>
                    <comment line="112">
                        return new LagrangeSolver2(tmpModel, options, this);                        
                    </comment>
                    <comment line="114">
                        return new NullspaceSolver(tmpModel, options, this);                        
                    </comment>
                    <declaration name="tmpModel" type="ExpressionsBasedModel" line="106"/>
                    <scope line="108"/>
                    <scope line="110"/>
                    <scope line="114"/>
                </method>
                <method name="equalities" type="ConvexSolver.Builder" line="121">
                    <params>
                        <param name="AE" type="MatrixStore&lt;Double&gt;"/>
                        <param name="BE" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                </method>
                <method name="inequalities" type="ConvexSolver.Builder" line="126">
                    <params>
                        <param name="AI" type="MatrixStore&lt;Double&gt;"/>
                        <param name="BI" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                </method>
                <method name="inequalities" type="ConvexSolver.Builder" line="131">
                    <params>
                        <param name="AI" type="MatrixStore&lt;Double&gt;"/>
                        <param name="BI" type="MatrixStore&lt;Double&gt;"/>
                        <param name="originatingEntities" type="ModelEntity&lt;?&gt;[]"/>
                    </params>
                </method>
                <method name="objective" type="Builder" line="136">
                    <params>
                        <param name="Q" type="MatrixStore&lt;Double&gt;"/>
                        <param name="C" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                </method>
            </class>
            <method name="make" type="ConvexSolver" line="142">
                <params>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                </params>
                <declaration name="tmpBuilder" type="ConvexSolver.Builder" line="144"/>
            </method>
            <method name="copy" type="void" line="150">
                <params>
                    <param name="sourceModel" type="ExpressionsBasedModel"/>
                    <param name="destinationBuilder" type="ConvexSolver.Builder"/>
                </params>
                <comment line="166">
                    AE &amp; BE                    
                </comment>
                <comment line="192">
                    Q &amp; C                    
                </comment>
                <comment line="235">
                    AI &amp; BI                    
                </comment>
                <comment line="319">
                    destinationBuilder.setKickStarter(null);                    
                </comment>
                <declaration name="tmpFreeVariables" type="List&amp;lt;Variable&amp;gt;" line="152"/>
                <declaration name="tmpFixedVariables" type="Set&amp;lt;Index&amp;gt;" line="153"/>
                <declaration name="tmpFreeVarDim" type="int" line="154"/>
                <declaration name="tmpCurrentSolution" type="Array1D&amp;lt;Double&amp;gt;" line="156"/>
                <scope line="157">
                    <declaration name="tmpValue" type="BigDecimal" line="158"/>
                    <scope line="159"/>
                </scope>
                <declaration name="tmpKickStarter" type="Optimisation.Result" line="163"/>
                <declaration name="tmpEqExpr" type="List&amp;lt;Expression&amp;gt;" line="167"/>
                <declaration name="tmpEqExprDim" type="int" line="168"/>
                <scope line="170">
                    <declaration name="tmpAE" type="PhysicalStore&amp;lt;Double&amp;gt;" line="172"/>
                    <declaration name="tmpBE" type="PhysicalStore&amp;lt;Double&amp;gt;" line="173"/>
                    <scope line="175">
                        <declaration name="tmpExpression" type="Expression" line="177"/>
                        <scope line="179">
                            <declaration name="tmpIndex" type="int" line="180"/>
                            <scope line="181"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="tmpObjExpr" type="Expression" line="193"/>
                <declaration name="tmpQ" type="PhysicalStore&amp;lt;Double&amp;gt;" line="195"/>
                <scope line="196">
                    <declaration name="tmpBaseFunc" type="BinaryFunction&amp;lt;Double&amp;gt;" line="199"/>
                    <declaration name="tmpModifier" type="UnaryFunction&amp;lt;Double&amp;gt;" line="200"/>
                    <scope line="201">
                        <declaration name="tmpRow" type="int" line="202"/>
                        <declaration name="tmpColumn" type="int" line="203"/>
                        <scope line="204"/>
                    </scope>
                </scope>
                <declaration name="tmpC" type="PhysicalStore&amp;lt;Double&amp;gt;" line="212"/>
                <scope line="213">
                    <scope line="215">
                        <scope line="216">
                            <declaration name="tmpIndex" type="int" line="217"/>
                            <scope line="218"/>
                        </scope>
                    </scope>
                    <scope line="222">
                        <scope line="223">
                            <declaration name="tmpIndex" type="int" line="224"/>
                            <scope line="225"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="tmpUpExpr" type="List&amp;lt;Expression&amp;gt;" line="236"/>
                <declaration name="tmpUpExprDim" type="int" line="237"/>
                <declaration name="tmpUpVar" type="List&amp;lt;Variable&amp;gt;" line="238"/>
                <declaration name="tmpUpVarDim" type="int" line="239"/>
                <declaration name="tmpLoExpr" type="List&amp;lt;Expression&amp;gt;" line="241"/>
                <declaration name="tmpLoExprDim" type="int" line="242"/>
                <declaration name="tmpLoVar" type="List&amp;lt;Variable&amp;gt;" line="243"/>
                <declaration name="tmpLoVarDim" type="int" line="244"/>
                <scope line="246">
                    <declaration name="tmpEntities" type="ModelEntity&amp;lt;?&amp;gt;[]" line="248"/>
                    <declaration name="tmpUAI" type="PhysicalStore&amp;lt;Double&amp;gt;" line="250"/>
                    <declaration name="tmpUBI" type="PhysicalStore&amp;lt;Double&amp;gt;" line="251"/>
                    <scope line="253">
                        <scope line="254">
                            <declaration name="tmpExpression" type="Expression" line="255"/>
                            <scope line="256">
                                <declaration name="tmpIndex" type="int" line="257"/>
                                <scope line="258"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="267">
                        <scope line="268">
                            <declaration name="tmpVariable" type="Variable" line="269"/>
                        </scope>
                    </scope>
                    <declaration name="tmpLAI" type="PhysicalStore&amp;lt;Double&amp;gt;" line="276"/>
                    <declaration name="tmpLBI" type="PhysicalStore&amp;lt;Double&amp;gt;" line="277"/>
                    <scope line="279">
                        <scope line="280">
                            <declaration name="tmpExpression" type="Expression" line="281"/>
                            <scope line="282">
                                <declaration name="tmpIndex" type="int" line="283"/>
                                <scope line="284"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="293">
                        <scope line="294">
                            <declaration name="tmpVariable" type="Variable" line="295"/>
                        </scope>
                    </scope>
                    <declaration name="tmpAI" type="MatrixStore&amp;lt;Double&amp;gt;" line="302"/>
                    <declaration name="tmpBI" type="MatrixStore&amp;lt;Double&amp;gt;" line="303"/>
                    <declaration name="tmpSelector" type="IndexSelector" line="307"/>
                    <scope line="308">
                        <scope line="309"/>
                    </scope>
                </scope>
            </method>
            <declaration name="myDelegateSolver" type="KKTSolver" line="321"/>
            <declaration name="FACTORY" type="PhysicalStore.Factory&amp;lt;Double,PrimitiveDenseStore&amp;gt;" line="323"/>
            <method name="ConvexSolver" type="constructor" line="325">
                <params>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                    <param name="solverOptions" type="Optimisation.Options"/>
                    <param name="matrices" type="ConvexSolver.Builder"/>
                </params>
            </method>
            <method name="solve" type="Optimisation.Result" line="329">
                <params>
                    <param name="kickStarter" type="Optimisation.Result"/>
                </params>
                <declaration name="tmpContinue" type="boolean" line="331"/>
                <scope line="333"/>
                <scope line="337"/>
                <scope line="341">
                    <scope line="345"/>
                </scope>
            </method>
            <method name="extractSolution" type="MatrixStore&lt;Double&gt;" line="358">
                <declaration name="tmpModel" type="ExpressionsBasedModel" line="360"/>
                <scope line="362">
                    <declaration name="tmpFreeVariables" type="List&amp;lt;Variable&amp;gt;" line="364"/>
                    <declaration name="tmpFixedVariables" type="Set&amp;lt;Index&amp;gt;" line="365"/>
                    <declaration name="retVal" type="PrimitiveDenseStore" line="367"/>
                    <scope line="369"/>
                    <declaration name="tmpSolutionX" type="MatrixStore&amp;lt;Double&amp;gt;" line="373"/>
                    <scope line="374">
                        <declaration name="tmpVariable" type="Variable" line="375"/>
                        <declaration name="tmpIndexOf" type="int" line="376"/>
                    </scope>
                </scope>
                <scope line="383"/>
            </method>
            <method name="performIteration" type="void" line="389"/>
            <method name="validate" type="boolean" line="392"/>
            <method name="buildDelegateSolverInput" type="KKTSolver.Input" line="397"/>
            <method name="getDelegateSolver" type="KKTSolver" line="399">
                <params>
                    <param name="templeate" type="KKTSolver.Input"/>
                </params>
                <scope line="400"/>
            </method>
            <method name="getSolutionLE" type="MatrixStore&lt;Double&gt;" line="406"/>
            <method name="getSolutionLI" type="MatrixStore&lt;Double&gt;" line="410">
                <params>
                    <param name="active" type="int"/>
                </params>
            </method>
            <method name="getSolutionX" type="MatrixStore&lt;Double&gt;" line="414"/>
        </class>
    </source>