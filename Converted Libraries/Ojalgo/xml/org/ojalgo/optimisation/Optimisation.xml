<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.optimisation">
        <import package="java.io.PrintStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.math.RoundingMode"/>
        <import package="java.util.Iterator"/>
        <import package="org.ojalgo.ProgrammingError"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Iterator1D"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.netio.BasicLogger"/>
        <import package="org.ojalgo.optimisation.integer.IntegerSolver"/>
        <import package="org.ojalgo.type.CalendarDateUnit"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <interface name="Optimisation">
            <interface name="Constraint">
                <implements interface="Optimisation"/>
                <comment line="233">
                    Objective Function Value                    
                </comment>
                <javadoc line="42">
                    Constraint                    
                    <author>
                        apete                        
                    </author>
                </javadoc>
                <method name="getLowerLimit" type="BigDecimal" line="49"/>
                <javadoc line="49">
                    May return null                    
                </javadoc>
                <method name="getUpperLimit" type="BigDecimal" line="54"/>
                <javadoc line="54">
                    May return null                    
                </javadoc>
                <method name="isConstraint" type="boolean" line="59"/>
                <javadoc line="59">
                    The Constraint has a lower or an upper limit (possibly both).                    
                </javadoc>
                <method name="isEqualityConstraint" type="boolean" line="64"/>
                <javadoc line="64">
                    The Constraint has both a lower limit and an upper limit, and they are equal.                    
                </javadoc>
                <method name="isLowerConstraint" type="boolean" line="69"/>
                <javadoc line="69">
                    The Constraint has a lower limit, and the upper limit (if it exists) is different.                    
                </javadoc>
                <method name="isUpperConstraint" type="boolean" line="74"/>
                <javadoc line="74">
                    The Constraint has an upper limit, and the lower limit (if it exists) is different.                    
                </javadoc>
            </interface>
            <interface name="Model">
                <implements interface="Optimisation"/>
                <comment line="233">
                    Objective Function Value                    
                </comment>
                <method name="maximise" type="Optimisation.Result" line="83"/>
                <method name="minimise" type="Optimisation.Result" line="85"/>
                <method name="validate" type="boolean" line="87"/>
                <javadoc line="87">
                    @return true If eveything is ok                    
                    <return>
                        false The model is structurally ok, but the &quot;value&quot; breaks constraints - the solution is infeasible.                        
                    </return>
                </javadoc>
            </interface>
            <interface name="Objective">
                <implements interface="Optimisation"/>
                <comment line="233">
                    Objective Function Value                    
                </comment>
                <javadoc line="95">
                    Objective                    
                    <author>
                        apete                        
                    </author>
                </javadoc>
                <method name="getContributionWeight" type="BigDecimal" line="102"/>
                <javadoc line="102">
                    May return null                    
                </javadoc>
                <method name="isObjective" type="boolean" line="107"/>
                <javadoc line="107">
                    @return true if this objective has a non zero contribution weight.                    
                </javadoc>
            </interface>
            <class name="Options" line="114">
                <comment line="233">
                    Objective Function Value                    
                </comment>
                <implements interface="Optimisation"/>
                <implements interface="Cloneable"/>
                <declaration name="debug_solver" type="Class&lt;? extends Optimisation.Solver&gt;" line="116"/>
                <javadoc line="116">
                    Which {@linkplain Solver} to debug. Null means ALL solvers. This setting is only relevant if{@link #debug_stream} has been set.                    
                </javadoc>
                <declaration name="debug_stream" type="PrintStream" line="122"/>
                <javadoc line="122">
                    If this is null nothing is printed, if it is not null then debug statements are printed to that PrintStream.                    
                </javadoc>
                <declaration name="integer" type="NumberContext" line="127"/>
                <javadoc line="127">
                    Used to determine if a variable value is integer or not.                    
                </javadoc>
                <declaration name="iterations_abort" type="int" line="132"/>
                <javadoc line="132">
                    The maximmum number of iterations allowed for the solve() command.                    
                </javadoc>
                <declaration name="iterations_suffice" type="int" line="137"/>
                <javadoc line="137">
                    Calculations will be terminated after this number of iterations if a feasible solution has been found. If no
                      feasible solution has been found calculations will continue until one is found or{@linkplain #iterations_abort} is reached. This option is, probably, only of interest with the{@linkplain IntegerSolver}.                    
                </javadoc>
                <declaration name="mip_gap" type="double" line="145"/>
                <javadoc line="145">
                    The (relative) MIP gap is the difference between the best integer solution found so far and a node&apos;s
                      non-integer solution, relative to the optimal value. If the gap is smaller than this value, then the
                      corresponding branch i terminated as it is deemed unlikely or too &quot;expensive&quot; to find better integer
                      solutions there.                    
                </javadoc>
                <declaration name="objective" type="NumberContext" line="153"/>
                <javadoc line="153">
                    Used to compare/check objective function values (incl. temporary, phase 1, objectives).                    
                </javadoc>
                <declaration name="print" type="NumberContext" line="158"/>
                <javadoc line="158">
                    For display only!                    
                </javadoc>
                <declaration name="problem" type="NumberContext" line="163"/>
                <javadoc line="163">
                    Problem parameters; constraints and objectives The numbers used to state/describe the problem, incl. when/if
                      these are transformed during the solution algorithm.                    
                </javadoc>
                <declaration name="slack" type="NumberContext" line="169"/>
                <javadoc line="169">
                    Used to determine if a constraint is violated or not. Essentially this context determines if the various
                      validate(...) methods will return true or false. Calculate the slack - zero if the constraint is &quot;active&quot; -
                      and check the sign.                    
                </javadoc>
                <declaration name="solution" type="NumberContext" line="176"/>
                <javadoc line="176">
                    Used when copying the solver&apos;s solution back to the model (converting from double to BigDecimal). Variable
                      values, dual variable values, lagrange multipliers...                    
                </javadoc>
                <declaration name="time_abort" type="long" line="182"/>
                <javadoc line="182">
                    The maximmum number of millis allowed for the solve() command. Executions will be aborted regardless of if a
                      solution has been found or not.                    
                </javadoc>
                <declaration name="time_suffice" type="long" line="188"/>
                <javadoc line="188">
                    Calculations will be terminated after this amount of time if a feasible solution has been found. If no
                      feasible solution has been found calculations will continue until one is found or {@linkplain #time_abort} is
                      reached. This option is , probably, only of interest with the {@linkplain IntegerSolver}.                    
                </javadoc>
                <declaration name="validate" type="boolean" line="195"/>
                <javadoc line="195">
                    If true models and solvers will validate data at various points. Validation is turned off by default. Turning
                      it on will significantly slow down execution - even very expensive validation may be performed.                    
                </javadoc>
                <method name="Options" type="constructor" line="201"/>
                <method name="copy" type="Options" line="205">
                    <scope line="206"/>
                    <scope line="208"/>
                </method>
                <method name="debug" type="void" line="213">
                    <params>
                        <param name="solver" type="Class<? extends Optimisation.Solver>"/>
                    </params>
                </method>
                <method name="clone" type="Object" line="220"/>
            </class>
            <class name="Result" line="225">
                <comment line="233">
                    Objective Function Value                    
                </comment>
                <implements interface="Optimisation"/>
                <implements interface="Access1D">
                    <type_params>
                        <type_param name="BigDecimal"/>
                    </type_params>
                </implements>
                <implements interface="Comparable">
                    <type_params>
                        <type_param name="Optimisation.Result"/>
                    </type_params>
                </implements>
                <implements interface="Serializable"/>
                <declaration name="myActiveSet" type="int[]" line="227"/>
                <declaration name="myBasis" type="int[]" line="228"/>
                <declaration name="mySolution" type="Access1D&lt;?&gt;" line="230"/>
                <declaration name="myState" type="Optimisation.State" line="231"/>
                <declaration name="myValue" type="double" line="232"/>
                <method name="Result" type="constructor" line="234">
                    <params>
                        <param name="state" type="Optimisation.State"/>
                        <param name="solution" type="Access1D<?>"/>
                    </params>
                </method>
                <method name="Result" type="constructor" line="238">
                    <params>
                        <param name="state" type="Optimisation.State"/>
                        <param name="value" type="double"/>
                        <param name="solution" type="Access1D<?>"/>
                    </params>
                </method>
                <method name="Result" type="constructor" line="250">
                    <params>
                        <param name="state" type="Optimisation.State"/>
                        <param name="result" type="Optimisation.Result"/>
                    </params>
                </method>
                <method name="activeSet" type="Result" line="254">
                    <params>
                        <param name="activeSet" type="int[]"/>
                    </params>
                </method>
                <method name="basis" type="Result" line="259">
                    <params>
                        <param name="basis" type="int[]"/>
                    </params>
                </method>
                <method name="compareTo" type="int" line="264">
                    <params>
                        <param name="reference" type="Result"/>
                    </params>
                    <declaration name="tmpRefValue" type="double" line="266"/>
                    <scope line="268"/>
                    <scope line="270"/>
                    <scope line="272"/>
                </method>
                <method name="count" type="long" line="277"/>
                <method name="doubleValue" type="double" line="281">
                    <params>
                        <param name="anInd" type="long"/>
                    </params>
                </method>
                <method name="equals" type="boolean" line="286">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="287"/>
                    <scope line="290"/>
                    <scope line="293"/>
                    <declaration name="other" type="Result" line="296"/>
                    <scope line="297"/>
                    <scope line="300"/>
                </method>
                <method name="get" type="BigDecimal" line="306">
                    <params>
                        <param name="index" type="long"/>
                    </params>
                </method>
                <method name="getActiveSet" type="int[]" line="310"/>
                <method name="getBasis" type="int[]" line="314"/>
                <method name="getState" type="Optimisation.State" line="318"/>
                <method name="getValue" type="double" line="322"/>
                <method name="hashCode" type="int" line="327">
                    <declaration name="prime" type="int" line="328"/>
                    <declaration name="result" type="int" line="329"/>
                    <declaration name="temp" type="long" line="331"/>
                </method>
                <method name="isActiveSetDefined" type="boolean" line="337"/>
                <method name="isBasisDefined" type="boolean" line="341"/>
                <method name="iterator" type="Iterator<BigDecimal>" line="345"/>
                <method name="size" type="int" line="349"/>
                <method name="toString" type="String" line="354"/>
            </class>
            <interface name="Solver">
                <implements interface="Optimisation"/>
                <comment line="233">
                    Objective Function Value                    
                </comment>
                <javadoc line="359">
                    &lt;p&gt;
                      An {@linkplain Optimisation.Solver} instance implements a specific optimisation algorithm. Typically each
                      algorithm solves problems of (at least) one problem category. {@linkplain Optimisation.Model} represents a
                      problem category.
                      &lt;/p&gt;
                      &lt;p&gt;
                      A solver internally works with primitive double.
                      &lt;/p&gt;                    
                    <author>
                        apete                        
                    </author>
                </javadoc>
                <method name="solve" type="Optimisation.Result" line="373"/>
                <method name="solve" type="Optimisation.Result" line="375"/>
            </interface>
            <javadoc line="381">
                Approximate and/or Intermediate solution - Iteration point Probably infeasible, but still &quot;good&quot;                
            </javadoc>
            <javadoc line="386">
                Unique (and optimal) solution - there is no other solution that is equal or better                
            </javadoc>
            <javadoc line="391">
                Failed                
            </javadoc>
            <javadoc line="396">
                Solved - a solution that complies with all constraints                
            </javadoc>
            <javadoc line="401">
                Optimal, but not distinct solution - there are other solutions that are equal, but not better.                
            </javadoc>
            <javadoc line="406">
                No solution that complies with all constraints exists                
            </javadoc>
            <javadoc line="411">
                Model/problem components/entities are invalid                
            </javadoc>
            <javadoc line="416">
                Optimal solution - there is no better                
            </javadoc>
            <javadoc line="421">
                There&apos;s an infinite number of feasible solutions and no bound on the objective function value                
            </javadoc>
            <javadoc line="426">
                New/changed problem                
            </javadoc>
            <javadoc line="431">
                Model/problem components/entities are valid                
            </javadoc>
            <declaration name="myValue" type="int" line="436"/>
            <method name="State" type="constructor" line="438">
                <params>
                    <param name="aValue" type="int"/>
                </params>
            </method>
            <method name="isDistinct" type="boolean" line="442"/>
            <javadoc line="446">
                FAILED, INVALID, INFEASIBLE, UNBOUNDED or INDISTINCT                
            </javadoc>
            <method name="isFailure" type="boolean" line="449"/>
            <method name="isFeasible" type="boolean" line="453"/>
            <method name="isOptimal" type="boolean" line="457"/>
            <javadoc line="461">
                VALID, APPROXIMATE, FEASIBLE, OPTIMAL or DISTINCT                
            </javadoc>
            <method name="isSuccess" type="boolean" line="464"/>
            <javadoc line="468">
                UNEXPLORED                
            </javadoc>
            <method name="isUnexplored" type="boolean" line="471"/>
            <method name="isValid" type="boolean" line="475"/>
            <method name="absValue" type="int" line="479"/>
        </interface>
    </source>