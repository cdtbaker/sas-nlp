<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.optimisation.quadratic">
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.optimisation.BaseSolver"/>
        <import package="org.ojalgo.optimisation.Expression"/>
        <import package="org.ojalgo.optimisation.Expression.Index"/>
        <import package="org.ojalgo.optimisation.ExpressionsBasedModel"/>
        <import package="org.ojalgo.optimisation.ModelEntity"/>
        <import package="org.ojalgo.optimisation.Optimisation"/>
        <import package="org.ojalgo.optimisation.Variable"/>
        <import package="org.ojalgo.type.IndexSelector"/>
        <class name="QuadraticSolver" line="20">
            <extends class="BaseSolver"/>
            <javadoc line="20">
                QuadraticSolver solves optimisation problems of the form:
                  &lt;p&gt;
                  min 1/2 [X]&lt;sup&gt;T&lt;/sup&gt;[Q][X] - [C]&lt;sup&gt;T&lt;/sup&gt;[X]&lt;br&gt;
                  when [AE][X] == [BE]&lt;br&gt;
                  and [AI][X] &lt;= [BI]
                  &lt;/p&gt;
                  &lt;p&gt;
                  The matrix [Q] is assumed to be symmetric (it must be made that way) and:
                  &lt;ul&gt;
                  &lt;li&gt;If [Q] is positive semidefinite, then the objective function is convex: In this case the quadratic program has a
                  global minimizer if there exists some feasible vector [X] (satisfying the constraints) and if the objective function
                  is bounded below on the feasible region.&lt;/li&gt;
                  &lt;li&gt;If [Q] is positive definite and the problem has a feasible solution, then the global minimizer is unique.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  You construct instances by using the {@linkplain Builder} class. It will return an appropriate subclass for you. It&apos;s
                  recommended that you first create a {@linkplain ExpressionsBasedModel} and feed that to the {@linkplain Builder}.
                  Alternatively you can directly call {@linkplain ExpressionsBasedModel#getDefaultSolver()} or even{@linkplain ExpressionsBasedModel#minimise()} or {@linkplain ExpressionsBasedModel#maximise()} on the model.
                  &lt;/p&gt;                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="Builder" line="44">
                <extends class="AbstractBuilder">
                    <type_params>
                        <type_param name="QuadraticSolver.Builder"/>
                        <type_param name="QuadraticSolver"/>
                    </type_params>
                </extends>
                <method name="Builder" type="constructor" line="45">
                    <params>
                        <param name="Q" type="MatrixStore<Double>"/>
                        <param name="C" type="MatrixStore<Double>"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="48"/>
                <method name="Builder" type="constructor" line="51">
                    <params>
                        <param name="aModel" type="ExpressionsBasedModel"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="55">
                    <params>
                        <param name="C" type="MatrixStore<Double>"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="58">
                    <params>
                        <param name="aMtrxArr" type="MatrixStore<Double>[]"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="61">
                    <params>
                        <param name="matrices" type="QuadraticSolver.Builder"/>
                    </params>
                </method>
                <method name="build" type="QuadraticSolver" line="64">
                    <params>
                        <param name="options" type="Optimisation.Options"/>
                    </params>
                    <declaration name="tmpModel" type="ExpressionsBasedModel" line="65"/>
                    <scope line="66"/>
                    <scope line="69"/>
                    <scope line="72"/>
                </method>
                <method name="equalities" type="QuadraticSolver.Builder" line="76">
                    <params>
                        <param name="AE" type="MatrixStore<Double>"/>
                        <param name="BE" type="MatrixStore<Double>"/>
                    </params>
                </method>
                <method name="inequalities" type="QuadraticSolver.Builder" line="79">
                    <params>
                        <param name="AI" type="MatrixStore<Double>"/>
                        <param name="BI" type="MatrixStore<Double>"/>
                    </params>
                </method>
                <method name="inequalities" type="QuadraticSolver.Builder" line="82">
                    <params>
                        <param name="AI" type="MatrixStore<Double>"/>
                        <param name="BI" type="MatrixStore<Double>"/>
                        <param name="originatingEntities" type="ModelEntity<?>[]"/>
                    </params>
                </method>
                <method name="objective" type="Builder" line="85">
                    <params>
                        <param name="Q" type="MatrixStore<Double>"/>
                        <param name="C" type="MatrixStore<Double>"/>
                    </params>
                </method>
            </class>
            <declaration name="FACTORY" type="PhysicalStore.Factory&lt;Double,PrimitiveDenseStore&gt;" line="89"/>
            <method name="make" type="QuadraticSolver" line="90">
                <params>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                </params>
                <declaration name="tmpBuilder" type="QuadraticSolver.Builder" line="91"/>
            </method>
            <method name="copy" type="void" line="94">
                <params>
                    <param name="sourceModel" type="ExpressionsBasedModel"/>
                    <param name="destinationBuilder" type="QuadraticSolver.Builder"/>
                </params>
                <declaration name="tmpFreeVariables" type="List&lt;Variable&gt;" line="95"/>
                <declaration name="tmpFixedVariables" type="Set&lt;Index&gt;" line="96"/>
                <declaration name="tmpFreeVarDim" type="int" line="97"/>
                <declaration name="tmpCurrentSolution" type="Array1D&lt;Double&gt;" line="98"/>
                <scope line="99">
                    <declaration name="tmpValue" type="BigDecimal" line="100"/>
                    <scope line="101"/>
                </scope>
                <declaration name="tmpKickStarter" type="Optimisation.Result" line="105"/>
                <declaration name="tmpEqExpr" type="List&lt;Expression&gt;" line="106"/>
                <declaration name="tmpEqExprDim" type="int" line="107"/>
                <scope line="108">
                    <declaration name="tmpAE" type="PhysicalStore&lt;Double&gt;" line="109"/>
                    <declaration name="tmpBE" type="PhysicalStore&lt;Double&gt;" line="110"/>
                    <scope line="111">
                        <declaration name="tmpExpression" type="Expression" line="112"/>
                        <scope line="113">
                            <declaration name="tmpIndex" type="int" line="114"/>
                            <scope line="115"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="tmpObjExpr" type="Expression" line="123"/>
                <declaration name="tmpQ" type="PhysicalStore&lt;Double&gt;" line="124"/>
                <scope line="125">
                    <declaration name="tmpBaseFunc" type="BinaryFunction&lt;Double&gt;" line="127"/>
                    <declaration name="tmpModifier" type="UnaryFunction&lt;Double&gt;" line="128"/>
                    <scope line="129">
                        <declaration name="tmpRow" type="int" line="130"/>
                        <declaration name="tmpColumn" type="int" line="131"/>
                        <scope line="132"/>
                    </scope>
                </scope>
                <declaration name="tmpC" type="PhysicalStore&lt;Double&gt;" line="139"/>
                <scope line="140">
                    <scope line="142">
                        <scope line="143">
                            <declaration name="tmpIndex" type="int" line="144"/>
                            <scope line="145"/>
                        </scope>
                    </scope>
                    <scope line="150">
                        <scope line="151">
                            <declaration name="tmpIndex" type="int" line="152"/>
                            <scope line="153"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="tmpUpExpr" type="List&lt;Expression&gt;" line="160"/>
                <declaration name="tmpUpExprDim" type="int" line="161"/>
                <declaration name="tmpUpVar" type="List&lt;Variable&gt;" line="162"/>
                <declaration name="tmpUpVarDim" type="int" line="163"/>
                <declaration name="tmpLoExpr" type="List&lt;Expression&gt;" line="164"/>
                <declaration name="tmpLoExprDim" type="int" line="165"/>
                <declaration name="tmpLoVar" type="List&lt;Variable&gt;" line="166"/>
                <declaration name="tmpLoVarDim" type="int" line="167"/>
                <scope line="168">
                    <declaration name="tmpEntities" type="ModelEntity&lt;?&gt;[]" line="169"/>
                    <declaration name="tmpUAI" type="PhysicalStore&lt;Double&gt;" line="170"/>
                    <declaration name="tmpUBI" type="PhysicalStore&lt;Double&gt;" line="171"/>
                    <scope line="172">
                        <scope line="173">
                            <declaration name="tmpExpression" type="Expression" line="174"/>
                            <scope line="175">
                                <declaration name="tmpIndex" type="int" line="176"/>
                                <scope line="177"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="185">
                        <scope line="186">
                            <declaration name="tmpVariable" type="Variable" line="187"/>
                        </scope>
                    </scope>
                    <declaration name="tmpLAI" type="PhysicalStore&lt;Double&gt;" line="193"/>
                    <declaration name="tmpLBI" type="PhysicalStore&lt;Double&gt;" line="194"/>
                    <scope line="195">
                        <scope line="196">
                            <declaration name="tmpExpression" type="Expression" line="197"/>
                            <scope line="198">
                                <declaration name="tmpIndex" type="int" line="199"/>
                                <scope line="200"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="208">
                        <scope line="209">
                            <declaration name="tmpVariable" type="Variable" line="210"/>
                        </scope>
                    </scope>
                    <declaration name="tmpAI" type="MatrixStore&lt;Double&gt;" line="216"/>
                    <declaration name="tmpBI" type="MatrixStore&lt;Double&gt;" line="217"/>
                    <declaration name="tmpSelector" type="IndexSelector" line="219"/>
                    <scope line="220">
                        <scope line="221"/>
                    </scope>
                </scope>
            </method>
            <method name="QuadraticSolver" type="constructor" line="229">
                <params>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                    <param name="solverOptions" type="Optimisation.Options"/>
                    <param name="matrices" type="QuadraticSolver.Builder"/>
                </params>
            </method>
            <method name="solve" type="Optimisation.Result" line="232">
                <params>
                    <param name="kickStart" type="Optimisation.Result"/>
                </params>
                <scope line="233">
                    <declaration name="tmpContinue" type="boolean" line="234"/>
                    <scope line="235"/>
                    <scope line="238"/>
                    <scope line="241">
                        <scope line="243"/>
                    </scope>
                </scope>
                <scope line="250">
                    <scope line="251"/>
                </scope>
            </method>
            <method name="extractSolution" type="MatrixStore<Double>" line="261">
                <declaration name="tmpModel" type="ExpressionsBasedModel" line="262"/>
                <scope line="263">
                    <declaration name="tmpFreeVariables" type="List&lt;Variable&gt;" line="264"/>
                    <declaration name="tmpFixedVariables" type="Set&lt;Index&gt;" line="265"/>
                    <declaration name="retVal" type="PrimitiveDenseStore" line="266"/>
                    <scope line="267"/>
                    <declaration name="tmpSolutionX" type="MatrixStore&lt;Double&gt;" line="270"/>
                    <scope line="271">
                        <declaration name="tmpVariable" type="Variable" line="272"/>
                        <declaration name="tmpIndexOf" type="int" line="273"/>
                    </scope>
                </scope>
                <scope line="278"/>
            </method>
            <method name="performIteration" type="void" line="282"/>
            <method name="getSolutionLE" type="MatrixStore<Double>" line="283"/>
            <method name="getSolutionLI" type="MatrixStore<Double>" line="286">
                <params>
                    <param name="active" type="int"/>
                </params>
            </method>
            <method name="getSolutionX" type="MatrixStore<Double>" line="289"/>
        </class>
    </source>