<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.optimisation.quadratic">
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.optimisation.BaseSolver"/>
        <import package="org.ojalgo.optimisation.Expression"/>
        <import package="org.ojalgo.optimisation.Expression.Index"/>
        <import package="org.ojalgo.optimisation.ExpressionsBasedModel"/>
        <import package="org.ojalgo.optimisation.ModelEntity"/>
        <import package="org.ojalgo.optimisation.Optimisation"/>
        <import package="org.ojalgo.optimisation.Variable"/>
        <import package="org.ojalgo.type.IndexSelector"/>
        <class name="QuadraticSolver" line="45">
            <extends class="BaseSolver"/>
            <javadoc line="45">
                QuadraticSolver solves optimisation problems of the form:
                  &lt;p&gt;
                  min 1/2 [X]&lt;sup&gt;T&lt;/sup&gt;[Q][X] - [C]&lt;sup&gt;T&lt;/sup&gt;[X]&lt;br&gt;
                  when [AE][X] == [BE]&lt;br&gt;
                  and [AI][X] &lt;= [BI]
                  &lt;/p&gt;
                  &lt;p&gt;
                  The matrix [Q] is assumed to be symmetric (it must be made that way) and:
                  &lt;ul&gt;
                  &lt;li&gt;If [Q] is positive semidefinite, then the objective function is convex: In this case the quadratic program has a
                  global minimizer if there exists some feasible vector [X] (satisfying the constraints) and if the objective function
                  is bounded below on the feasible region.&lt;/li&gt;
                  &lt;li&gt;If [Q] is positive definite and the problem has a feasible solution, then the global minimizer is unique.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  You construct instances by using the {@linkplain Builder} class. It will return an appropriate subclass for you. It&apos;s
                  recommended that you first create a {@linkplain ExpressionsBasedModel} and feed that to the {@linkplain Builder}.
                  Alternatively you can directly call {@linkplain ExpressionsBasedModel#getDefaultSolver()} or even{@linkplain ExpressionsBasedModel#minimise()} or {@linkplain ExpressionsBasedModel#maximise()} on the model.
                  &lt;/p&gt;                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="Builder" line="72">
                <extends class="AbstractBuilder">
                    <type_params>
                        <type_param name="QuadraticSolver.Builder"/>
                        <type_param name="QuadraticSolver"/>
                    </type_params>
                </extends>
                <method name="Builder" type="constructor" line="74">
                    <params>
                        <param name="Q" type="MatrixStore&lt;Double&gt;"/>
                        <param name="C" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="78"/>
                <method name="Builder" type="constructor" line="82">
                    <params>
                        <param name="aModel" type="ExpressionsBasedModel"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="89">
                    <params>
                        <param name="C" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="93">
                    <params>
                        <param name="aMtrxArr" type="MatrixStore&lt;Double&gt;[]"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="97">
                    <params>
                        <param name="matrices" type="QuadraticSolver.Builder"/>
                    </params>
                </method>
                <method name="build" type="QuadraticSolver" line="102">
                    <params>
                        <param name="options" type="Optimisation.Options"/>
                    </params>
                    <comment line="112">
                        return new LagrangeSolver2(tmpModel, options, this);                        
                    </comment>
                    <comment line="114">
                        return new NullspaceSolver(tmpModel, options, this);                        
                    </comment>
                    <declaration name="tmpModel" type="ExpressionsBasedModel" line="106"/>
                    <scope line="108"/>
                    <scope line="110"/>
                    <scope line="114"/>
                </method>
                <method name="equalities" type="QuadraticSolver.Builder" line="121">
                    <params>
                        <param name="AE" type="MatrixStore&lt;Double&gt;"/>
                        <param name="BE" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                </method>
                <method name="inequalities" type="QuadraticSolver.Builder" line="126">
                    <params>
                        <param name="AI" type="MatrixStore&lt;Double&gt;"/>
                        <param name="BI" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                </method>
                <method name="inequalities" type="QuadraticSolver.Builder" line="131">
                    <params>
                        <param name="AI" type="MatrixStore&lt;Double&gt;"/>
                        <param name="BI" type="MatrixStore&lt;Double&gt;"/>
                        <param name="originatingEntities" type="ModelEntity&lt;?&gt;[]"/>
                    </params>
                </method>
                <method name="objective" type="Builder" line="136">
                    <params>
                        <param name="Q" type="MatrixStore&lt;Double&gt;"/>
                        <param name="C" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                </method>
            </class>
            <declaration name="FACTORY" type="PhysicalStore.Factory&amp;lt;Double,PrimitiveDenseStore&amp;gt;" line="142"/>
            <method name="make" type="QuadraticSolver" line="144">
                <params>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                </params>
                <declaration name="tmpBuilder" type="QuadraticSolver.Builder" line="146"/>
            </method>
            <method name="copy" type="void" line="152">
                <params>
                    <param name="sourceModel" type="ExpressionsBasedModel"/>
                    <param name="destinationBuilder" type="QuadraticSolver.Builder"/>
                </params>
                <comment line="168">
                    AE &amp; BE                    
                </comment>
                <comment line="194">
                    Q &amp; C                    
                </comment>
                <comment line="237">
                    AI &amp; BI                    
                </comment>
                <declaration name="tmpFreeVariables" type="List&amp;lt;Variable&amp;gt;" line="154"/>
                <declaration name="tmpFixedVariables" type="Set&amp;lt;Index&amp;gt;" line="155"/>
                <declaration name="tmpFreeVarDim" type="int" line="156"/>
                <declaration name="tmpCurrentSolution" type="Array1D&amp;lt;Double&amp;gt;" line="158"/>
                <scope line="159">
                    <declaration name="tmpValue" type="BigDecimal" line="160"/>
                    <scope line="161"/>
                </scope>
                <declaration name="tmpKickStarter" type="Optimisation.Result" line="165"/>
                <declaration name="tmpEqExpr" type="List&amp;lt;Expression&amp;gt;" line="169"/>
                <declaration name="tmpEqExprDim" type="int" line="170"/>
                <scope line="172">
                    <declaration name="tmpAE" type="PhysicalStore&amp;lt;Double&amp;gt;" line="174"/>
                    <declaration name="tmpBE" type="PhysicalStore&amp;lt;Double&amp;gt;" line="175"/>
                    <scope line="177">
                        <declaration name="tmpExpression" type="Expression" line="179"/>
                        <scope line="181">
                            <declaration name="tmpIndex" type="int" line="182"/>
                            <scope line="183"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="tmpObjExpr" type="Expression" line="195"/>
                <declaration name="tmpQ" type="PhysicalStore&amp;lt;Double&amp;gt;" line="197"/>
                <scope line="198">
                    <declaration name="tmpBaseFunc" type="BinaryFunction&amp;lt;Double&amp;gt;" line="201"/>
                    <declaration name="tmpModifier" type="UnaryFunction&amp;lt;Double&amp;gt;" line="202"/>
                    <scope line="203">
                        <declaration name="tmpRow" type="int" line="204"/>
                        <declaration name="tmpColumn" type="int" line="205"/>
                        <scope line="206"/>
                    </scope>
                </scope>
                <declaration name="tmpC" type="PhysicalStore&amp;lt;Double&amp;gt;" line="214"/>
                <scope line="215">
                    <scope line="217">
                        <scope line="218">
                            <declaration name="tmpIndex" type="int" line="219"/>
                            <scope line="220"/>
                        </scope>
                    </scope>
                    <scope line="224">
                        <scope line="225">
                            <declaration name="tmpIndex" type="int" line="226"/>
                            <scope line="227"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="tmpUpExpr" type="List&amp;lt;Expression&amp;gt;" line="238"/>
                <declaration name="tmpUpExprDim" type="int" line="239"/>
                <declaration name="tmpUpVar" type="List&amp;lt;Variable&amp;gt;" line="240"/>
                <declaration name="tmpUpVarDim" type="int" line="241"/>
                <declaration name="tmpLoExpr" type="List&amp;lt;Expression&amp;gt;" line="243"/>
                <declaration name="tmpLoExprDim" type="int" line="244"/>
                <declaration name="tmpLoVar" type="List&amp;lt;Variable&amp;gt;" line="245"/>
                <declaration name="tmpLoVarDim" type="int" line="246"/>
                <scope line="248">
                    <declaration name="tmpEntities" type="ModelEntity&amp;lt;?&amp;gt;[]" line="250"/>
                    <declaration name="tmpUAI" type="PhysicalStore&amp;lt;Double&amp;gt;" line="252"/>
                    <declaration name="tmpUBI" type="PhysicalStore&amp;lt;Double&amp;gt;" line="253"/>
                    <scope line="255">
                        <scope line="256">
                            <declaration name="tmpExpression" type="Expression" line="257"/>
                            <scope line="258">
                                <declaration name="tmpIndex" type="int" line="259"/>
                                <scope line="260"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="269">
                        <scope line="270">
                            <declaration name="tmpVariable" type="Variable" line="271"/>
                        </scope>
                    </scope>
                    <declaration name="tmpLAI" type="PhysicalStore&amp;lt;Double&amp;gt;" line="278"/>
                    <declaration name="tmpLBI" type="PhysicalStore&amp;lt;Double&amp;gt;" line="279"/>
                    <scope line="281">
                        <scope line="282">
                            <declaration name="tmpExpression" type="Expression" line="283"/>
                            <scope line="284">
                                <declaration name="tmpIndex" type="int" line="285"/>
                                <scope line="286"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="295">
                        <scope line="296">
                            <declaration name="tmpVariable" type="Variable" line="297"/>
                        </scope>
                    </scope>
                    <declaration name="tmpAI" type="MatrixStore&amp;lt;Double&amp;gt;" line="304"/>
                    <declaration name="tmpBI" type="MatrixStore&amp;lt;Double&amp;gt;" line="305"/>
                    <declaration name="tmpSelector" type="IndexSelector" line="309"/>
                    <scope line="310">
                        <scope line="311"/>
                    </scope>
                </scope>
            </method>
            <method name="QuadraticSolver" type="constructor" line="322">
                <params>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                    <param name="solverOptions" type="Optimisation.Options"/>
                    <param name="matrices" type="QuadraticSolver.Builder"/>
                </params>
            </method>
            <method name="solve" type="Optimisation.Result" line="326">
                <params>
                    <param name="kickStarter" type="Optimisation.Result"/>
                </params>
                <scope line="328">
                    <declaration name="tmpContinue" type="boolean" line="330"/>
                    <scope line="332"/>
                    <scope line="336"/>
                    <scope line="340">
                        <scope line="344"/>
                    </scope>
                </scope>
                <scope line="353">
                    <scope line="355"/>
                </scope>
            </method>
            <method name="extractSolution" type="MatrixStore&lt;Double&gt;" line="369">
                <declaration name="tmpModel" type="ExpressionsBasedModel" line="371"/>
                <scope line="373">
                    <declaration name="tmpFreeVariables" type="List&amp;lt;Variable&amp;gt;" line="375"/>
                    <declaration name="tmpFixedVariables" type="Set&amp;lt;Index&amp;gt;" line="376"/>
                    <declaration name="retVal" type="PrimitiveDenseStore" line="378"/>
                    <scope line="380"/>
                    <declaration name="tmpSolutionX" type="MatrixStore&amp;lt;Double&amp;gt;" line="384"/>
                    <scope line="385">
                        <declaration name="tmpVariable" type="Variable" line="386"/>
                        <declaration name="tmpIndexOf" type="int" line="387"/>
                    </scope>
                </scope>
                <scope line="394"/>
            </method>
            <method name="performIteration" type="void" line="400"/>
            <method name="getSolutionLE" type="MatrixStore&lt;Double&gt;" line="402"/>
            <method name="getSolutionLI" type="MatrixStore&lt;Double&gt;" line="406">
                <params>
                    <param name="active" type="int"/>
                </params>
            </method>
            <method name="getSolutionX" type="MatrixStore&lt;Double&gt;" line="410"/>
        </class>
    </source>