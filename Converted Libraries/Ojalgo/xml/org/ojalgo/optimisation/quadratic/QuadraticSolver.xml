<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.optimisation.quadratic">
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.optimisation.BaseSolver"/>
        <import package="org.ojalgo.optimisation.Expression"/>
        <import package="org.ojalgo.optimisation.Expression.Index"/>
        <import package="org.ojalgo.optimisation.ExpressionsBasedModel"/>
        <import package="org.ojalgo.optimisation.ModelEntity"/>
        <import package="org.ojalgo.optimisation.Optimisation"/>
        <import package="org.ojalgo.optimisation.Variable"/>
        <import package="org.ojalgo.type.IndexSelector"/>
        <class name="QuadraticSolver" line="45">
            <extends class="BaseSolver"/>
            <javadoc line="45">
                QuadraticSolver solves optimisation problems of the form:
                  &lt;p&gt;
                  min 1/2 [X]&lt;sup&gt;T&lt;/sup&gt;[Q][X] - [C]&lt;sup&gt;T&lt;/sup&gt;[X]&lt;br&gt;
                  when [AE][X] == [BE]&lt;br&gt;
                  and [AI][X] &lt;= [BI]
                  &lt;/p&gt;
                  &lt;p&gt;
                  The matrix [Q] is assumed to be symmetric (it must be made that way) and:
                  &lt;ul&gt;
                  &lt;li&gt;If [Q] is positive semidefinite, then the objective function is convex: In this case the quadratic program has a
                  global minimizer if there exists some feasible vector [X] (satisfying the constraints) and if the objective function
                  is bounded below on the feasible region.&lt;/li&gt;
                  &lt;li&gt;If [Q] is positive definite and the problem has a feasible solution, then the global minimizer is unique.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  You construct instances by using the {@linkplain Builder} class. It will return an appropriate subclass for you. It&apos;s
                  recommended that you first create a {@linkplain ExpressionsBasedModel} and feed that to the {@linkplain Builder}.
                  Alternatively you can directly call {@linkplain ExpressionsBasedModel#getDefaultSolver()} or even{@linkplain ExpressionsBasedModel#minimise()} or {@linkplain ExpressionsBasedModel#maximise()} on the model.
                  &lt;/p&gt;                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="Builder" line="72">
                <extends class="AbstractBuilder">
                    <type_params>
                        <type_param name="QuadraticSolver.Builder"/>
                        <type_param name="QuadraticSolver"/>
                    </type_params>
                </extends>
                <method name="Builder" type="constructor" line="74">
                    <params>
                        <param name="Q" type="MatrixStore<Double>"/>
                        <param name="C" type="MatrixStore<Double>"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="78"/>
                <method name="Builder" type="constructor" line="82">
                    <params>
                        <param name="aModel" type="ExpressionsBasedModel"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="89">
                    <params>
                        <param name="C" type="MatrixStore<Double>"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="93">
                    <params>
                        <param name="aMtrxArr" type="MatrixStore<Double>[]"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="97">
                    <params>
                        <param name="matrices" type="QuadraticSolver.Builder"/>
                    </params>
                </method>
                <method name="build" type="QuadraticSolver" line="102">
                    <params>
                        <param name="options" type="Optimisation.Options"/>
                    </params>
                    <comment line="110">
                        return new NullspaceSolver(tmpModel, options, this);                        
                    </comment>
                    <declaration name="tmpModel" type="ExpressionsBasedModel" line="104"/>
                    <scope line="106"/>
                    <scope line="108"/>
                    <scope line="111"/>
                </method>
                <method name="equalities" type="QuadraticSolver.Builder" line="118">
                    <params>
                        <param name="AE" type="MatrixStore<Double>"/>
                        <param name="BE" type="MatrixStore<Double>"/>
                    </params>
                </method>
                <method name="inequalities" type="QuadraticSolver.Builder" line="123">
                    <params>
                        <param name="AI" type="MatrixStore<Double>"/>
                        <param name="BI" type="MatrixStore<Double>"/>
                    </params>
                </method>
                <method name="inequalities" type="QuadraticSolver.Builder" line="128">
                    <params>
                        <param name="AI" type="MatrixStore<Double>"/>
                        <param name="BI" type="MatrixStore<Double>"/>
                        <param name="originatingEntities" type="ModelEntity<?>[]"/>
                    </params>
                </method>
                <method name="objective" type="Builder" line="133">
                    <params>
                        <param name="Q" type="MatrixStore<Double>"/>
                        <param name="C" type="MatrixStore<Double>"/>
                    </params>
                </method>
            </class>
            <declaration name="FACTORY" type="PhysicalStore.Factory&lt;Double,PrimitiveDenseStore&gt;" line="139"/>
            <method name="make" type="QuadraticSolver" line="141">
                <params>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                </params>
                <declaration name="tmpBuilder" type="QuadraticSolver.Builder" line="143"/>
            </method>
            <method name="copy" type="void" line="149">
                <params>
                    <param name="sourceModel" type="ExpressionsBasedModel"/>
                    <param name="destinationBuilder" type="QuadraticSolver.Builder"/>
                </params>
                <comment line="164">
                    AE &amp; BE                    
                </comment>
                <comment line="190">
                    Q &amp; C                    
                </comment>
                <comment line="233">
                    AI &amp; BI                    
                </comment>
                <declaration name="tmpFreeVariables" type="List&lt;Variable&gt;" line="151"/>
                <declaration name="tmpFixedVariables" type="Set&lt;Index&gt;" line="152"/>
                <declaration name="tmpFreeVarDim" type="int" line="153"/>
                <declaration name="tmpCurrentSolution" type="Array1D&lt;Double&gt;" line="155"/>
                <scope line="156">
                    <declaration name="tmpValue" type="BigDecimal" line="157"/>
                    <scope line="158"/>
                </scope>
                <declaration name="tmpKickStarter" type="Optimisation.Result" line="162"/>
                <declaration name="tmpEqExpr" type="List&lt;Expression&gt;" line="166"/>
                <declaration name="tmpEqExprDim" type="int" line="167"/>
                <scope line="169">
                    <declaration name="tmpAE" type="PhysicalStore&lt;Double&gt;" line="171"/>
                    <declaration name="tmpBE" type="PhysicalStore&lt;Double&gt;" line="172"/>
                    <scope line="174">
                        <declaration name="tmpExpression" type="Expression" line="176"/>
                        <scope line="178">
                            <declaration name="tmpIndex" type="int" line="179"/>
                            <scope line="180"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="tmpObjExpr" type="Expression" line="192"/>
                <declaration name="tmpQ" type="PhysicalStore&lt;Double&gt;" line="194"/>
                <scope line="195">
                    <declaration name="tmpBaseFunc" type="BinaryFunction&lt;Double&gt;" line="198"/>
                    <declaration name="tmpModifier" type="UnaryFunction&lt;Double&gt;" line="199"/>
                    <scope line="200">
                        <declaration name="tmpRow" type="int" line="201"/>
                        <declaration name="tmpColumn" type="int" line="202"/>
                        <scope line="203"/>
                    </scope>
                </scope>
                <declaration name="tmpC" type="PhysicalStore&lt;Double&gt;" line="211"/>
                <scope line="212">
                    <scope line="214">
                        <scope line="215">
                            <declaration name="tmpIndex" type="int" line="216"/>
                            <scope line="217"/>
                        </scope>
                    </scope>
                    <scope line="221">
                        <scope line="222">
                            <declaration name="tmpIndex" type="int" line="223"/>
                            <scope line="224"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="tmpUpExpr" type="List&lt;Expression&gt;" line="235"/>
                <declaration name="tmpUpExprDim" type="int" line="236"/>
                <declaration name="tmpUpVar" type="List&lt;Variable&gt;" line="237"/>
                <declaration name="tmpUpVarDim" type="int" line="238"/>
                <declaration name="tmpLoExpr" type="List&lt;Expression&gt;" line="240"/>
                <declaration name="tmpLoExprDim" type="int" line="241"/>
                <declaration name="tmpLoVar" type="List&lt;Variable&gt;" line="242"/>
                <declaration name="tmpLoVarDim" type="int" line="243"/>
                <scope line="245">
                    <declaration name="tmpEntities" type="ModelEntity&lt;?&gt;[]" line="247"/>
                    <declaration name="tmpUAI" type="PhysicalStore&lt;Double&gt;" line="249"/>
                    <declaration name="tmpUBI" type="PhysicalStore&lt;Double&gt;" line="250"/>
                    <scope line="252">
                        <scope line="253">
                            <declaration name="tmpExpression" type="Expression" line="254"/>
                            <scope line="255">
                                <declaration name="tmpIndex" type="int" line="256"/>
                                <scope line="257"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="266">
                        <scope line="267">
                            <declaration name="tmpVariable" type="Variable" line="268"/>
                        </scope>
                    </scope>
                    <declaration name="tmpLAI" type="PhysicalStore&lt;Double&gt;" line="275"/>
                    <declaration name="tmpLBI" type="PhysicalStore&lt;Double&gt;" line="276"/>
                    <scope line="278">
                        <scope line="279">
                            <declaration name="tmpExpression" type="Expression" line="280"/>
                            <scope line="281">
                                <declaration name="tmpIndex" type="int" line="282"/>
                                <scope line="283"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="292">
                        <scope line="293">
                            <declaration name="tmpVariable" type="Variable" line="294"/>
                        </scope>
                    </scope>
                    <declaration name="tmpAI" type="MatrixStore&lt;Double&gt;" line="301"/>
                    <declaration name="tmpBI" type="MatrixStore&lt;Double&gt;" line="302"/>
                    <declaration name="tmpSelector" type="IndexSelector" line="306"/>
                    <scope line="307">
                        <scope line="308"/>
                    </scope>
                </scope>
            </method>
            <method name="QuadraticSolver" type="constructor" line="319">
                <params>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                    <param name="solverOptions" type="Optimisation.Options"/>
                    <param name="matrices" type="QuadraticSolver.Builder"/>
                </params>
            </method>
            <method name="solve" type="Optimisation.Result" line="323">
                <params>
                    <param name="kickStart" type="Optimisation.Result"/>
                </params>
                <scope line="325">
                    <declaration name="tmpContinue" type="boolean" line="327"/>
                    <scope line="329"/>
                    <scope line="333"/>
                    <scope line="337">
                        <scope line="341"/>
                    </scope>
                </scope>
                <scope line="350">
                    <scope line="352"/>
                </scope>
            </method>
            <method name="extractSolution" type="MatrixStore<Double>" line="366">
                <declaration name="tmpModel" type="ExpressionsBasedModel" line="368"/>
                <scope line="370">
                    <declaration name="tmpFreeVariables" type="List&lt;Variable&gt;" line="372"/>
                    <declaration name="tmpFixedVariables" type="Set&lt;Index&gt;" line="373"/>
                    <declaration name="retVal" type="PrimitiveDenseStore" line="375"/>
                    <scope line="377"/>
                    <declaration name="tmpSolutionX" type="MatrixStore&lt;Double&gt;" line="381"/>
                    <scope line="382">
                        <declaration name="tmpVariable" type="Variable" line="383"/>
                        <declaration name="tmpIndexOf" type="int" line="384"/>
                    </scope>
                </scope>
                <scope line="391"/>
            </method>
            <method name="performIteration" type="void" line="397"/>
            <method name="getSolutionLE" type="MatrixStore<Double>" line="399"/>
            <method name="getSolutionLI" type="MatrixStore<Double>" line="403">
                <params>
                    <param name="active" type="int"/>
                </params>
            </method>
            <method name="getSolutionX" type="MatrixStore<Double>" line="407"/>
        </class>
    </source>