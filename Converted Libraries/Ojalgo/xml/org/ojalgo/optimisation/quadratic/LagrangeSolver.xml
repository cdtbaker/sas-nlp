<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.optimisation.quadratic">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.aggregator.Aggregator"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.function.aggregator.PrimitiveAggregator"/>
        <import package="org.ojalgo.matrix.decomposition"/>
        <import package="org.ojalgo.matrix.store.AboveBelowStore"/>
        <import package="org.ojalgo.matrix.store.LeftRightStore"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.matrix.store.ZeroStore"/>
        <import package="org.ojalgo.optimisation.ExpressionsBasedModel"/>
        <import package="org.ojalgo.optimisation.Optimisation"/>
        <class name="LagrangeSolver" line="40">
            <extends class="QuadraticSolver"/>
            <javadoc line="40">
                @author apete                
            </javadoc>
            <declaration name="myLU" type="LU&amp;lt;Double&amp;gt;" line="45"/>
            <declaration name="mySingularValue" type="SingularValue&amp;lt;Double&amp;gt;" line="46"/>
            <method name="LagrangeSolver" type="constructor" line="48">
                <params>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                    <param name="solverOptions" type="Optimisation.Options"/>
                    <param name="matrices" type="QuadraticSolver.Builder"/>
                </params>
            </method>
            <method name="extractSolution" type="void" line="52">
                <params>
                    <param name="aSolver" type="Builder"/>
                </params>
                <declaration name="tmpSolutionX" type="MatrixStore&amp;lt;Double&amp;gt;" line="54"/>
                <declaration name="tmpCountVariables" type="int" line="56"/>
                <declaration name="tmpCountEqualityConstraints" type="int" line="57"/>
                <scope line="59"/>
                <scope line="63"/>
            </method>
            <method name="makeBuilder" type="Builder" line="68">
                <params>
                    <param name="addSmallDiagonal" type="boolean"/>
                </params>
                <comment line="102">
                    tmpUpperLeftAE = tmpUpperLeftAE.builder().superimpose(0, 0, tmpUpperRightAE.multiplyRight(tmpLowerLefAE)).build();                    
                </comment>
                <comment line="111">
                    tmpUpperBE = tmpUpperBE.builder().superimpose(0, 0, tmpUpperRightAE.multiplyRight(tmpLowerBE)).build();                    
                </comment>
                <declaration name="tmpBuilder" type="Builder" line="69"/>
                <declaration name="tmpQ" type="MatrixStore&amp;lt;Double&amp;gt;" line="71"/>
                <declaration name="tmpC" type="MatrixStore&amp;lt;Double&amp;gt;" line="72"/>
                <scope line="74">
                    <declaration name="tmpCopyQ" type="PhysicalStore&amp;lt;Double&amp;gt;" line="76"/>
                    <declaration name="tmpLargest" type="double" line="78"/>
                    <declaration name="tmpRelativelySmall" type="double" line="79"/>
                    <declaration name="tmpPracticalLimit" type="double" line="80"/>
                    <declaration name="tmpSmallToAdd" type="double" line="81"/>
                    <declaration name="tmpFunc" type="UnaryFunction&amp;lt;Double&amp;gt;" line="83"/>
                </scope>
                <scope line="89">
                    <declaration name="tmpAE" type="MatrixStore&amp;lt;Double&amp;gt;" line="91"/>
                    <declaration name="tmpBE" type="MatrixStore&amp;lt;Double&amp;gt;" line="92"/>
                    <declaration name="tmpZeroSize" type="int" line="94"/>
                    <declaration name="tmpUpperLeftAE" type="MatrixStore&amp;lt;Double&amp;gt;" line="96"/>
                    <declaration name="tmpUpperRightAE" type="MatrixStore&amp;lt;Double&amp;gt;" line="97"/>
                    <declaration name="tmpLowerLeftAE" type="MatrixStore&amp;lt;Double&amp;gt;" line="98"/>
                    <declaration name="tmpLowerRightAE" type="MatrixStore&amp;lt;Double&amp;gt;" line="99"/>
                    <declaration name="tmpAbowe" type="LeftRightStore&amp;lt;Double&amp;gt;" line="103"/>
                    <declaration name="tmpBelow" type="LeftRightStore&amp;lt;Double&amp;gt;" line="104"/>
                    <declaration name="tmpSubAE" type="MatrixStore&amp;lt;Double&amp;gt;" line="105"/>
                    <declaration name="tmpUpperBE" type="MatrixStore&amp;lt;Double&amp;gt;" line="107"/>
                    <declaration name="tmpLowerBE" type="MatrixStore&amp;lt;Double&amp;gt;" line="108"/>
                    <declaration name="tmpSubBE" type="MatrixStore&amp;lt;Double&amp;gt;" line="112"/>
                </scope>
                <scope line="116"/>
            </method>
            <method name="performIteration" type="void" line="123">
                <params>
                    <param name="builder" type="Builder"/>
                </params>
                <comment line="188">
                    throw new IllegalArgumentException(&quot;Couldn&apos;t solve this problem!&quot;);                    
                </comment>
                <declaration name="tmpAE" type="MatrixStore&amp;lt;Double&amp;gt;" line="125"/>
                <declaration name="tmpBE" type="MatrixStore&amp;lt;Double&amp;gt;" line="126"/>
                <declaration name="tmpX" type="DecompositionStore&amp;lt;Double&amp;gt;" line="128"/>
                <scope line="132">
                    <scope line="134"/>
                    <declaration name="tmpSolution" type="MatrixStore&amp;lt;Double&amp;gt;" line="138"/>
                    <scope line="140"/>
                </scope>
                <scope line="144">
                    <scope line="146"/>
                    <scope line="152">
                        <scope line="154"/>
                        <declaration name="tmpSolution" type="MatrixStore&amp;lt;Double&amp;gt;" line="158"/>
                        <scope line="160"/>
                        <declaration name="tmpFrobNormCalc" type="AggregatorFunction&amp;lt;Double&amp;gt;" line="164"/>
                        <declaration name="tmpSlack" type="MatrixStore&amp;lt;Double&amp;gt;" line="165"/>
                        <scope line="168">
                            <scope line="170"/>
                        </scope>
                    </scope>
                    <scope line="178">
                        <scope line="180"/>
                    </scope>
                </scope>
            </method>
            <method name="initialise" type="boolean" line="193">
                <params>
                    <param name="kickStart" type="Result"/>
                </params>
            </method>
            <method name="needsAnotherIteration" type="boolean" line="200"/>
            <method name="performIteration" type="void" line="205">
                <declaration name="tmpBuilder" type="Builder" line="207"/>
                <scope line="211"/>
                <scope line="217">
                    <scope line="223"/>
                    <scope line="229"/>
                </scope>
            </method>
            <method name="validate" type="boolean" line="238">
                <comment line="252">
                    Not positive definite. Check if at least positive semidefinite.                    
                </comment>
                <comment line="270">
                    Q ok, check AE                    
                </comment>
                <comment line="272">
                    final MatrixStore&lt;Double&gt; tmpAE = this.getAE();
                    
                                    final LU&lt;Double&gt; tmpLU = LUDecomposition.makePrimitive();
                                    tmpLU.compute(tmpAE);
                    
                                    if (tmpLU.getRank() != tmpAE.getRowDim()) {
                                        retVal = false;
                                        this.setState(State.INVALID);
                                    }                    
                </comment>
                <declaration name="retVal" type="boolean" line="240"/>
                <scope line="243">
                    <declaration name="tmpQ" type="MatrixStore&amp;lt;Double&amp;gt;" line="245"/>
                    <declaration name="tmpCholesky" type="Cholesky&amp;lt;Double&amp;gt;" line="247"/>
                    <scope line="250">
                        <declaration name="tmpEigenvalue" type="Eigenvalue&amp;lt;Double&amp;gt;" line="253"/>
                        <declaration name="tmpD" type="MatrixStore&amp;lt;Double&amp;gt;" line="256"/>
                        <declaration name="tmpLength" type="int" line="258"/>
                        <scope line="259">
                            <scope line="260"/>
                        </scope>
                    </scope>
                    <scope line="268"/>
                </scope>
                <scope line="282"/>
            </method>
        </class>
    </source>