<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.optimisation">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.ProgrammingError"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.function.aggregator.PrimitiveAggregator"/>
        <import package="org.ojalgo.matrix.PrimitiveMatrix"/>
        <import package="org.ojalgo.matrix.decomposition.DecompositionStore"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.matrix.store.ZeroStore"/>
        <class name="BaseSolver" line="40">
            <extends class="GenericSolver"/>
            <class name="AbstractBuilder" line="42">
                <type_params>
                    <type_param name="B"/>
                    <type_param name="S"/>
                </type_params>
                <implements interface="Cloneable"/>
                <declaration name="myModel" type="ExpressionsBasedModel" line="44"/>
                <declaration name="myAE" type="MatrixStore.Builder&lt;Double&gt;" line="46"/>
                <declaration name="myBE" type="MatrixStore.Builder&lt;Double&gt;" line="47"/>
                <declaration name="myQ" type="MatrixStore.Builder&lt;Double&gt;" line="48"/>
                <declaration name="myC" type="MatrixStore.Builder&lt;Double&gt;" line="49"/>
                <declaration name="myAI" type="MatrixStore.Builder&lt;Double&gt;" line="50"/>
                <declaration name="myBI" type="MatrixStore.Builder&lt;Double&gt;" line="51"/>
                <declaration name="myX" type="DecompositionStore&lt;Double&gt;" line="53"/>
                <declaration name="myLE" type="PhysicalStore&lt;Double&gt;" line="54"/>
                <declaration name="myLI" type="PhysicalStore&lt;Double&gt;" line="55"/>
                <declaration name="myInequalityEnities" type="ModelEntity&lt;?&gt;[]" line="57"/>
                <declaration name="myKickStarter" type="Optimisation.Result" line="58"/>
                <method name="AbstractBuilder" type="constructor" line="60"/>
                <method name="AbstractBuilder" type="constructor" line="67">
                    <params>
                        <param name="matrices" type="BaseSolver.AbstractBuilder<?,?>"/>
                    </params>
                    <scope line="73"/>
                    <scope line="77">
                        <scope line="78"/>
                        <scope line="80"/>
                    </scope>
                    <scope line="85"/>
                </method>
                <method name="AbstractBuilder" type="constructor" line="90">
                    <params>
                        <param name="aModel" type="ExpressionsBasedModel"/>
                    </params>
                </method>
                <method name="AbstractBuilder" type="constructor" line="97">
                    <params>
                        <param name="C" type="MatrixStore<Double>"/>
                    </params>
                </method>
                <method name="AbstractBuilder" type="constructor" line="113">
                    <params>
                        <param name="Q" type="MatrixStore<Double>"/>
                        <param name="C" type="MatrixStore<Double>"/>
                    </params>
                    <scope line="123"/>
                    <scope line="125"/>
                </method>
                <method name="AbstractBuilder" type="constructor" line="133">
                    <params>
                        <param name="aMtrxArr" type="MatrixStore<Double>[]"/>
                    </params>
                    <scope line="139"/>
                    <scope line="143">
                        <scope line="144"/>
                        <scope line="146"/>
                    </scope>
                    <scope line="151"/>
                </method>
                <javadoc line="156">
                    Will rescale problem parameters to minimise rounding and
                      representation errors.                    
                </javadoc>
                <method name="balance" type="B" line="161">
                    <scope line="163"/>
                    <scope line="167"/>
                    <scope line="171"/>
                </method>
                <method name="build" type="S" line="178"/>
                <method name="build" type="S" line="182"/>
                <method name="copy" type="BaseSolver.AbstractBuilder<B,S>" line="185">
                    <scope line="186"/>
                    <scope line="188"/>
                </method>
                <method name="countEqualityConstraints" type="int" line="193"/>
                <method name="countInequalityConstraints" type="int" line="197"/>
                <method name="countVariables" type="int" line="201">
                    <declaration name="retVal" type="int" line="203"/>
                    <scope line="205"/>
                    <scope line="207"/>
                    <scope line="209"/>
                    <scope line="211"/>
                    <scope line="213"/>
                </method>
                <javadoc line="220">
                    [AE][X] == [BE]                    
                </javadoc>
                <method name="getAE" type="MatrixStore<Double>" line="223">
                    <scope line="224"/>
                    <scope line="226"/>
                </method>
                <javadoc line="231">
                    [AI][X] &lt;= [BI]                    
                </javadoc>
                <method name="getAI" type="MatrixStore<Double>" line="234">
                    <scope line="235"/>
                    <scope line="237"/>
                </method>
                <javadoc line="242">
                    [AE][X] == [BE]                    
                </javadoc>
                <method name="getBE" type="MatrixStore<Double>" line="245">
                    <scope line="246"/>
                    <scope line="248"/>
                </method>
                <javadoc line="253">
                    [AI][X] &lt;= [BI]                    
                </javadoc>
                <method name="getBI" type="MatrixStore<Double>" line="256">
                    <scope line="257"/>
                    <scope line="259"/>
                </method>
                <javadoc line="264">
                    Linear objective: [C]                    
                </javadoc>
                <method name="getC" type="MatrixStore<Double>" line="267">
                    <scope line="268"/>
                    <scope line="270"/>
                </method>
                <method name="getInequalityEnities" type="ModelEntity<?>[]" line="275"/>
                <method name="getKickStarter" type="Optimisation.Result" line="279"/>
                <javadoc line="283">
                    Lagrange multipliers / dual variables for Equalities                    
                </javadoc>
                <method name="getLE" type="PhysicalStore<Double>" line="286">
                    <scope line="287"/>
                </method>
                <javadoc line="293">
                    Lagrange multipliers / dual variables for Inequalities                    
                </javadoc>
                <method name="getLI" type="PhysicalStore<Double>" line="296">
                    <scope line="297"/>
                </method>
                <javadoc line="303">
                    Lagrange multipliers / dual variables for selected inequalities                    
                </javadoc>
                <method name="getLI" type="MatrixStore<Double>" line="306">
                    <params>
                        <param name="rowSelector" type="int"/>
                    </params>
                    <declaration name="tmpLI" type="PhysicalStore&lt;Double&gt;" line="307"/>
                    <scope line="308"/>
                    <scope line="310"/>
                </method>
                <javadoc line="315">
                    Quadratic objective: [Q]                    
                </javadoc>
                <method name="getQ" type="MatrixStore<Double>" line="318">
                    <scope line="319"/>
                    <scope line="321"/>
                </method>
                <javadoc line="326">
                    Slack for Equalities: [SE] = [BE] - [AE][X]                    
                </javadoc>
                <method name="getSE" type="PhysicalStore<Double>" line="329">
                    <declaration name="retVal" type="PhysicalStore&lt;Double&gt;" line="331"/>
                    <scope line="333"/>
                </method>
                <javadoc line="343">
                    Slack for Inequalities: [SI] = [BI] - [AI][X]                    
                </javadoc>
                <method name="getSI" type="PhysicalStore<Double>" line="346">
                    <declaration name="retVal" type="PhysicalStore&lt;Double&gt;" line="348"/>
                    <scope line="350"/>
                </method>
                <javadoc line="360">
                    Selected Slack for Inequalities                    
                </javadoc>
                <method name="getSI" type="MatrixStore<Double>" line="363">
                    <params>
                        <param name="aRowSelector" type="int"/>
                    </params>
                    <declaration name="tmpSI" type="PhysicalStore&lt;Double&gt;" line="364"/>
                    <scope line="365"/>
                    <scope line="367"/>
                </method>
                <javadoc line="372">
                    Solution / Variables: [X]                    
                </javadoc>
                <method name="getX" type="DecompositionStore<Double>" line="375">
                    <scope line="376"/>
                </method>
                <method name="hasEqualityConstraints" type="boolean" line="382"/>
                <method name="hasInequalityConstraints" type="boolean" line="386"/>
                <method name="hasObjective" type="boolean" line="390"/>
                <method name="isInequalityEnitiesSet" type="boolean" line="394"/>
                <method name="isKickStarterSet" type="boolean" line="398"/>
                <method name="resetLE" type="void" line="402">
                    <scope line="403"/>
                </method>
                <method name="resetLI" type="void" line="408">
                    <scope line="409"/>
                </method>
                <method name="resetX" type="void" line="414">
                    <scope line="415"/>
                </method>
                <method name="setKickStarter" type="void" line="420">
                    <params>
                        <param name="kickStarter" type="Optimisation.Result"/>
                    </params>
                </method>
                <method name="setLE" type="void" line="424">
                    <params>
                        <param name="index" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="setLI" type="void" line="428">
                    <params>
                        <param name="index" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="setX" type="void" line="432">
                    <params>
                        <param name="index" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="toString" type="String" line="437">
                    <declaration name="retVal" type="StringBuilder" line="439"/>
                </method>
                <method name="balanceEqualityConstraints" type="void" line="468">
                    <declaration name="tmpBody" type="PhysicalStore&lt;Double&gt;" line="470"/>
                    <declaration name="tmpRHS" type="PhysicalStore&lt;Double&gt;" line="471"/>
                </method>
                <method name="balanceInequalityConstraints" type="void" line="481">
                    <declaration name="tmpBody" type="PhysicalStore&lt;Double&gt;" line="483"/>
                    <declaration name="tmpRHS" type="PhysicalStore&lt;Double&gt;" line="484"/>
                </method>
                <method name="balanceMatrices" type="double" line="494">
                    <params>
                        <param name="someMatrices" type="PhysicalStore<Double>[]"/>
                    </params>
                    <declaration name="tmpLargestAggr" type="AggregatorFunction&lt;Double&gt;" line="496"/>
                    <declaration name="tmpSmallestAggr" type="AggregatorFunction&lt;Double&gt;" line="497"/>
                    <scope line="499">
                        <scope line="500"/>
                    </scope>
                    <declaration name="tmpExponent" type="double" line="506"/>
                    <declaration name="tmpFactor" type="double" line="507"/>
                    <declaration name="tmpModifier" type="UnaryFunction&lt;Double&gt;" line="509"/>
                    <scope line="511">
                        <scope line="512"/>
                    </scope>
                </method>
                <method name="balanceObjective" type="void" line="521">
                    <declaration name="tmpMatrices" type="PhysicalStore&lt;Double&gt;[]" line="523"/>
                    <scope line="525"/>
                    <scope line="528"/>
                </method>
                <method name="balanceRows" type="void" line="540">
                    <params>
                        <param name="tmpBody" type="PhysicalStore<Double>"/>
                        <param name="tmpRHS" type="PhysicalStore<Double>"/>
                        <param name="assertPositiveRHS" type="boolean"/>
                    </params>
                    <declaration name="tmpLargestAggr" type="AggregatorFunction&lt;Double&gt;" line="542"/>
                    <declaration name="tmpSmallestAggr" type="AggregatorFunction&lt;Double&gt;" line="543"/>
                    <declaration name="tmpExponent" type="double" line="545"/>
                    <declaration name="tmpFactor" type="double" line="546"/>
                    <declaration name="tmpModifier" type="UnaryFunction&lt;Double&gt;" line="548"/>
                    <scope line="550">
                        <scope line="563"/>
                    </scope>
                </method>
                <method name="validate" type="void" line="574">
                    <scope line="576">
                        <scope line="578"/>
                        <scope line="580"/>
                        <scope line="582"/>
                        <scope line="584"/>
                        <scope line="586"/>
                    </scope>
                    <scope line="590"/>
                    <scope line="596">
                        <scope line="598"/>
                        <scope line="602"/>
                        <scope line="604"/>
                    </scope>
                    <scope line="608"/>
                    <scope line="614">
                        <scope line="616"/>
                        <scope line="618"/>
                        <scope line="620"/>
                        <scope line="622"/>
                        <scope line="624"/>
                    </scope>
                    <scope line="628"/>
                </method>
                <method name="clone" type="Object" line="637">
                    <declaration name="retVal" type="BaseSolver.AbstractBuilder&lt;B,S&gt;" line="639"/>
                    <scope line="641"/>
                    <scope line="645"/>
                    <scope line="649"/>
                </method>
                <method name="equalities" type="B" line="657">
                    <params>
                        <param name="AE" type="MatrixStore<Double>"/>
                        <param name="BE" type="MatrixStore<Double>"/>
                    </params>
                    <scope line="659"/>
                    <scope line="661"/>
                    <scope line="665"/>
                    <scope line="667"/>
                </method>
                <method name="getModel" type="ExpressionsBasedModel" line="674"/>
                <method name="inequalities" type="B" line="678">
                    <params>
                        <param name="AI" type="MatrixStore<Double>"/>
                        <param name="BI" type="MatrixStore<Double>"/>
                    </params>
                </method>
                <method name="inequalities" type="B" line="683">
                    <params>
                        <param name="AI" type="MatrixStore<Double>"/>
                        <param name="BI" type="MatrixStore<Double>"/>
                        <param name="originatingEntities" type="ModelEntity<?>[]"/>
                    </params>
                    <scope line="685">
                        <scope line="687">
                            <declaration name="tmpOldEntities" type="ModelEntity&lt;?&gt;[]" line="688"/>
                            <scope line="690"/>
                            <scope line="693"/>
                        </scope>
                    </scope>
                    <scope line="697"/>
                    <scope line="702"/>
                    <scope line="704"/>
                </method>
                <method name="objective" type="B" line="712">
                    <params>
                        <param name="C" type="MatrixStore<Double>"/>
                    </params>
                </method>
                <method name="objective" type="B" line="721">
                    <params>
                        <param name="Q" type="MatrixStore<Double>"/>
                        <param name="C" type="MatrixStore<Double>"/>
                    </params>
                    <scope line="724"/>
                    <scope line="726"/>
                </method>
            </class>
            <declaration name="myMatrices" type="BaseSolver.AbstractBuilder&lt;?,?&gt;" line="735"/>
            <method name="BaseSolver" type="constructor" line="738">
                <params>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                    <param name="solverOptions" type="Options"/>
                </params>
            </method>
            <method name="BaseSolver" type="constructor" line="742">
                <params>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                    <param name="solverOptions" type="Optimisation.Options"/>
                    <param name="matrices" type="BaseSolver.AbstractBuilder<?,?>"/>
                </params>
                <comment line="749">
                    options.debug = System.out;                    
                </comment>
            </method>
            <method name="relax" type="BaseSolver" line="751">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <comment line="753">
                    TODO Auto-generated method stub                    
                </comment>
            </method>
            <method name="solve" type="Optimisation.Result" line="757"/>
            <method name="toString" type="String" line="762"/>
            <method name="countEqualityConstraints" type="int" line="766"/>
            <method name="countInequalityConstraints" type="int" line="770"/>
            <method name="countVariables" type="int" line="774"/>
            <method name="fillX" type="void" line="778">
                <params>
                    <param name="solution" type="Access1D<?>"/>
                </params>
                <scope line="779"/>
            </method>
            <method name="getAE" type="MatrixStore<Double>" line="784"/>
            <method name="getAI" type="MatrixStore<Double>" line="788"/>
            <method name="getBE" type="MatrixStore<Double>" line="792"/>
            <method name="getBI" type="MatrixStore<Double>" line="796"/>
            <method name="getC" type="MatrixStore<Double>" line="800"/>
            <method name="getInequalityEnities" type="ModelEntity<?>[]" line="804"/>
            <method name="getLE" type="PhysicalStore<Double>" line="808"/>
            <method name="getLI" type="MatrixStore<Double>" line="812">
                <params>
                    <param name="aRowSelector" type="int"/>
                </params>
            </method>
            <method name="getQ" type="MatrixStore<Double>" line="816"/>
            <method name="getSE" type="PhysicalStore<Double>" line="820"/>
            <method name="getSI" type="MatrixStore<Double>" line="824">
                <params>
                    <param name="aRowSelector" type="int"/>
                </params>
            </method>
            <method name="getX" type="DecompositionStore<Double>" line="828"/>
            <method name="hasEqualityConstraints" type="boolean" line="832"/>
            <method name="hasInequalityConstraints" type="boolean" line="836"/>
            <method name="hasObjective" type="boolean" line="840"/>
            <method name="resetLE" type="void" line="844"/>
            <method name="resetLI" type="void" line="848"/>
            <method name="resetX" type="void" line="852"/>
            <method name="setLE" type="void" line="856">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="setLI" type="void" line="860">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="setX" type="void" line="864">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
        </class>
    </source>