<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.optimisation">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.ProgrammingError"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.function.aggregator.PrimitiveAggregator"/>
        <import package="org.ojalgo.matrix.PrimitiveMatrix"/>
        <import package="org.ojalgo.matrix.decomposition.DecompositionStore"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.matrix.store.ZeroStore"/>
        <class name="BaseSolver" line="16">
            <extends class="GenericSolver"/>
            <class name="AbstractBuilder" line="17">
                <type_params>
                    <type_param name="B"/>
                    <type_param name="S"/>
                </type_params>
                <implements interface="Cloneable"/>
                <declaration name="myModel" type="ExpressionsBasedModel" line="18"/>
                <declaration name="myAE" type="MatrixStore.Builder&lt;Double&gt;" line="19"/>
                <declaration name="myBE" type="MatrixStore.Builder&lt;Double&gt;" line="20"/>
                <declaration name="myQ" type="MatrixStore.Builder&lt;Double&gt;" line="21"/>
                <declaration name="myC" type="MatrixStore.Builder&lt;Double&gt;" line="22"/>
                <declaration name="myAI" type="MatrixStore.Builder&lt;Double&gt;" line="23"/>
                <declaration name="myBI" type="MatrixStore.Builder&lt;Double&gt;" line="24"/>
                <declaration name="myX" type="DecompositionStore&lt;Double&gt;" line="25"/>
                <declaration name="myLE" type="PhysicalStore&lt;Double&gt;" line="26"/>
                <declaration name="myLI" type="PhysicalStore&lt;Double&gt;" line="27"/>
                <declaration name="myInequalityEnities" type="ModelEntity&lt;?&gt;[]" line="28"/>
                <declaration name="myKickStarter" type="Optimisation.Result" line="29"/>
                <method name="AbstractBuilder" type="constructor" line="30"/>
                <method name="AbstractBuilder" type="constructor" line="34">
                    <params>
                        <param name="matrices" type="BaseSolver.AbstractBuilder<?,?>"/>
                    </params>
                    <scope line="37"/>
                    <scope line="40">
                        <scope line="41"/>
                        <scope line="44"/>
                    </scope>
                    <scope line="48"/>
                </method>
                <method name="AbstractBuilder" type="constructor" line="52">
                    <params>
                        <param name="aModel" type="ExpressionsBasedModel"/>
                    </params>
                </method>
                <method name="AbstractBuilder" type="constructor" line="56">
                    <params>
                        <param name="C" type="MatrixStore<Double>"/>
                    </params>
                </method>
                <method name="AbstractBuilder" type="constructor" line="66">
                    <params>
                        <param name="Q" type="MatrixStore<Double>"/>
                        <param name="C" type="MatrixStore<Double>"/>
                    </params>
                    <scope line="72"/>
                    <scope line="75"/>
                </method>
                <method name="AbstractBuilder" type="constructor" line="81">
                    <params>
                        <param name="aMtrxArr" type="MatrixStore<Double>[]"/>
                    </params>
                    <scope line="84"/>
                    <scope line="87">
                        <scope line="88"/>
                        <scope line="91"/>
                    </scope>
                    <scope line="95"/>
                </method>
                <javadoc line="99">
                    Will rescale problem parameters to minimise rounding and
                      representation errors.                    
                </javadoc>
                <method name="balance" type="B" line="103">
                    <scope line="104"/>
                    <scope line="107"/>
                    <scope line="110"/>
                </method>
                <method name="build" type="S" line="115"/>
                <method name="build" type="S" line="118"/>
                <method name="copy" type="BaseSolver.AbstractBuilder<B,S>" line="119">
                    <scope line="120"/>
                    <scope line="123"/>
                </method>
                <method name="countEqualityConstraints" type="int" line="127"/>
                <method name="countInequalityConstraints" type="int" line="130"/>
                <method name="countVariables" type="int" line="133">
                    <declaration name="retVal" type="int" line="134"/>
                    <scope line="135"/>
                    <scope line="138"/>
                    <scope line="141"/>
                    <scope line="144"/>
                    <scope line="147"/>
                </method>
                <javadoc line="152">
                    [AE][X] == [BE]                    
                </javadoc>
                <method name="getAE" type="MatrixStore<Double>" line="155">
                    <scope line="156"/>
                    <scope line="159"/>
                </method>
                <javadoc line="163">
                    [AI][X] &lt;= [BI]                    
                </javadoc>
                <method name="getAI" type="MatrixStore<Double>" line="166">
                    <scope line="167"/>
                    <scope line="170"/>
                </method>
                <javadoc line="174">
                    [AE][X] == [BE]                    
                </javadoc>
                <method name="getBE" type="MatrixStore<Double>" line="177">
                    <scope line="178"/>
                    <scope line="181"/>
                </method>
                <javadoc line="185">
                    [AI][X] &lt;= [BI]                    
                </javadoc>
                <method name="getBI" type="MatrixStore<Double>" line="188">
                    <scope line="189"/>
                    <scope line="192"/>
                </method>
                <javadoc line="196">
                    Linear objective: [C]                    
                </javadoc>
                <method name="getC" type="MatrixStore<Double>" line="199">
                    <scope line="200"/>
                    <scope line="203"/>
                </method>
                <method name="getInequalityEnities" type="ModelEntity<?>[]" line="207"/>
                <method name="getKickStarter" type="Optimisation.Result" line="210"/>
                <javadoc line="213">
                    Lagrange multipliers / dual variables for Equalities                    
                </javadoc>
                <method name="getLE" type="PhysicalStore<Double>" line="216">
                    <scope line="217"/>
                </method>
                <javadoc line="222">
                    Lagrange multipliers / dual variables for Inequalities                    
                </javadoc>
                <method name="getLI" type="PhysicalStore<Double>" line="225">
                    <scope line="226"/>
                </method>
                <javadoc line="231">
                    Lagrange multipliers / dual variables for selected inequalities                    
                </javadoc>
                <method name="getLI" type="MatrixStore<Double>" line="234">
                    <params>
                        <param name="rowSelector" type="int"/>
                    </params>
                    <declaration name="tmpLI" type="PhysicalStore&lt;Double&gt;" line="235"/>
                    <scope line="236"/>
                    <scope line="239"/>
                </method>
                <javadoc line="243">
                    Quadratic objective: [Q]                    
                </javadoc>
                <method name="getQ" type="MatrixStore<Double>" line="246">
                    <scope line="247"/>
                    <scope line="250"/>
                </method>
                <javadoc line="254">
                    Slack for Equalities: [SE] = [BE] - [AE][X]                    
                </javadoc>
                <method name="getSE" type="PhysicalStore<Double>" line="257">
                    <declaration name="retVal" type="PhysicalStore&lt;Double&gt;" line="258"/>
                    <scope line="259"/>
                </method>
                <javadoc line="265">
                    Slack for Inequalities: [SI] = [BI] - [AI][X]                    
                </javadoc>
                <method name="getSI" type="PhysicalStore<Double>" line="268">
                    <declaration name="retVal" type="PhysicalStore&lt;Double&gt;" line="269"/>
                    <scope line="270"/>
                </method>
                <javadoc line="276">
                    Selected Slack for Inequalities                    
                </javadoc>
                <method name="getSI" type="MatrixStore<Double>" line="279">
                    <params>
                        <param name="aRowSelector" type="int"/>
                    </params>
                    <declaration name="tmpSI" type="PhysicalStore&lt;Double&gt;" line="280"/>
                    <scope line="281"/>
                    <scope line="284"/>
                </method>
                <javadoc line="288">
                    Solution / Variables: [X]                    
                </javadoc>
                <method name="getX" type="DecompositionStore<Double>" line="291">
                    <scope line="292"/>
                </method>
                <method name="hasEqualityConstraints" type="boolean" line="297"/>
                <method name="hasInequalityConstraints" type="boolean" line="300"/>
                <method name="hasObjective" type="boolean" line="303"/>
                <method name="isInequalityEnitiesSet" type="boolean" line="306"/>
                <method name="isKickStarterSet" type="boolean" line="309"/>
                <method name="resetLE" type="void" line="312">
                    <scope line="313"/>
                </method>
                <method name="resetLI" type="void" line="317">
                    <scope line="318"/>
                </method>
                <method name="resetX" type="void" line="322">
                    <scope line="323"/>
                </method>
                <method name="setKickStarter" type="void" line="327">
                    <params>
                        <param name="kickStarter" type="Optimisation.Result"/>
                    </params>
                </method>
                <method name="setLE" type="void" line="330">
                    <params>
                        <param name="index" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="setLI" type="void" line="333">
                    <params>
                        <param name="index" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="setX" type="void" line="336">
                    <params>
                        <param name="index" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="toString" type="String" line="339">
                    <declaration name="retVal" type="StringBuilder" line="340"/>
                </method>
                <method name="balanceEqualityConstraints" type="void" line="355">
                    <declaration name="tmpBody" type="PhysicalStore&lt;Double&gt;" line="356"/>
                    <declaration name="tmpRHS" type="PhysicalStore&lt;Double&gt;" line="357"/>
                </method>
                <method name="balanceInequalityConstraints" type="void" line="363">
                    <declaration name="tmpBody" type="PhysicalStore&lt;Double&gt;" line="364"/>
                    <declaration name="tmpRHS" type="PhysicalStore&lt;Double&gt;" line="365"/>
                </method>
                <method name="balanceMatrices" type="double" line="371">
                    <params>
                        <param name="someMatrices" type="PhysicalStore<Double>[]"/>
                    </params>
                    <declaration name="tmpLargestAggr" type="AggregatorFunction&lt;Double&gt;" line="372"/>
                    <declaration name="tmpSmallestAggr" type="AggregatorFunction&lt;Double&gt;" line="373"/>
                    <scope line="374">
                        <scope line="375"/>
                    </scope>
                    <declaration name="tmpExponent" type="double" line="380"/>
                    <declaration name="tmpFactor" type="double" line="381"/>
                    <declaration name="tmpModifier" type="UnaryFunction&lt;Double&gt;" line="382"/>
                    <scope line="383">
                        <scope line="384"/>
                    </scope>
                </method>
                <method name="balanceObjective" type="void" line="390">
                    <declaration name="tmpMatrices" type="PhysicalStore&lt;Double&gt;[]" line="391"/>
                    <scope line="392"/>
                    <scope line="395"/>
                </method>
                <method name="balanceRows" type="void" line="403">
                    <params>
                        <param name="tmpBody" type="PhysicalStore<Double>"/>
                        <param name="tmpRHS" type="PhysicalStore<Double>"/>
                        <param name="assertPositiveRHS" type="boolean"/>
                    </params>
                    <declaration name="tmpLargestAggr" type="AggregatorFunction&lt;Double&gt;" line="404"/>
                    <declaration name="tmpSmallestAggr" type="AggregatorFunction&lt;Double&gt;" line="405"/>
                    <declaration name="tmpExponent" type="double" line="406"/>
                    <declaration name="tmpFactor" type="double" line="407"/>
                    <declaration name="tmpModifier" type="UnaryFunction&lt;Double&gt;" line="408"/>
                    <scope line="409">
                        <scope line="418"/>
                    </scope>
                </method>
                <method name="validate" type="void" line="426">
                    <scope line="427">
                        <scope line="428"/>
                        <scope line="431"/>
                        <scope line="434"/>
                        <scope line="437"/>
                        <scope line="440"/>
                    </scope>
                    <scope line="444"/>
                    <scope line="448">
                        <scope line="449"/>
                        <scope line="452"/>
                        <scope line="455"/>
                    </scope>
                    <scope line="459"/>
                    <scope line="463">
                        <scope line="464"/>
                        <scope line="467"/>
                        <scope line="470"/>
                        <scope line="473"/>
                        <scope line="476"/>
                    </scope>
                    <scope line="480"/>
                </method>
                <method name="clone" type="Object" line="485">
                    <declaration name="retVal" type="BaseSolver.AbstractBuilder&lt;B,S&gt;" line="486"/>
                    <scope line="487"/>
                    <scope line="490"/>
                    <scope line="493"/>
                </method>
                <method name="equalities" type="B" line="498">
                    <params>
                        <param name="AE" type="MatrixStore<Double>"/>
                        <param name="BE" type="MatrixStore<Double>"/>
                    </params>
                    <scope line="499"/>
                    <scope line="502"/>
                    <scope line="505"/>
                    <scope line="508"/>
                </method>
                <method name="getModel" type="ExpressionsBasedModel" line="513"/>
                <method name="inequalities" type="B" line="516">
                    <params>
                        <param name="AI" type="MatrixStore<Double>"/>
                        <param name="BI" type="MatrixStore<Double>"/>
                    </params>
                </method>
                <method name="inequalities" type="B" line="519">
                    <params>
                        <param name="AI" type="MatrixStore<Double>"/>
                        <param name="BI" type="MatrixStore<Double>"/>
                        <param name="originatingEntities" type="ModelEntity<?>[]"/>
                    </params>
                    <scope line="520">
                        <scope line="522">
                            <declaration name="tmpOldEntities" type="ModelEntity&lt;?&gt;[]" line="523"/>
                            <scope line="525"/>
                            <scope line="528"/>
                        </scope>
                    </scope>
                    <scope line="533"/>
                    <scope line="537"/>
                    <scope line="540"/>
                </method>
                <method name="objective" type="B" line="545">
                    <params>
                        <param name="C" type="MatrixStore<Double>"/>
                    </params>
                </method>
                <method name="objective" type="B" line="550">
                    <params>
                        <param name="Q" type="MatrixStore<Double>"/>
                        <param name="C" type="MatrixStore<Double>"/>
                    </params>
                    <scope line="552"/>
                    <scope line="555"/>
                </method>
            </class>
            <declaration name="myMatrices" type="BaseSolver.AbstractBuilder&lt;?,?&gt;" line="561"/>
            <method name="BaseSolver" type="constructor" line="562">
                <params>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                    <param name="solverOptions" type="Options"/>
                </params>
            </method>
            <method name="BaseSolver" type="constructor" line="565">
                <params>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                    <param name="solverOptions" type="Optimisation.Options"/>
                    <param name="matrices" type="BaseSolver.AbstractBuilder<?,?>"/>
                </params>
            </method>
            <method name="relax" type="BaseSolver" line="569">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <method name="solve" type="Optimisation.Result" line="572"/>
            <method name="toString" type="String" line="575"/>
            <method name="countEqualityConstraints" type="int" line="578"/>
            <method name="countInequalityConstraints" type="int" line="581"/>
            <method name="countVariables" type="int" line="584"/>
            <method name="fillX" type="void" line="587">
                <params>
                    <param name="solution" type="Access1D<?>"/>
                </params>
                <scope line="588"/>
            </method>
            <method name="getAE" type="MatrixStore<Double>" line="592"/>
            <method name="getAI" type="MatrixStore<Double>" line="595"/>
            <method name="getBE" type="MatrixStore<Double>" line="598"/>
            <method name="getBI" type="MatrixStore<Double>" line="601"/>
            <method name="getC" type="MatrixStore<Double>" line="604"/>
            <method name="getInequalityEnities" type="ModelEntity<?>[]" line="607"/>
            <method name="getLE" type="PhysicalStore<Double>" line="610"/>
            <method name="getLI" type="MatrixStore<Double>" line="613">
                <params>
                    <param name="aRowSelector" type="int"/>
                </params>
            </method>
            <method name="getQ" type="MatrixStore<Double>" line="616"/>
            <method name="getSE" type="PhysicalStore<Double>" line="619"/>
            <method name="getSI" type="MatrixStore<Double>" line="622">
                <params>
                    <param name="aRowSelector" type="int"/>
                </params>
            </method>
            <method name="getX" type="DecompositionStore<Double>" line="625"/>
            <method name="hasEqualityConstraints" type="boolean" line="628"/>
            <method name="hasInequalityConstraints" type="boolean" line="631"/>
            <method name="hasObjective" type="boolean" line="634"/>
            <method name="resetLE" type="void" line="637"/>
            <method name="resetLI" type="void" line="640"/>
            <method name="resetX" type="void" line="643"/>
            <method name="setLE" type="void" line="646">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="setLI" type="void" line="649">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="setX" type="void" line="652">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
        </class>
    </source>