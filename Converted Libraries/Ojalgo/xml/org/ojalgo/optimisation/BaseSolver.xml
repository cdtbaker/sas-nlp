<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.optimisation">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.ProgrammingError"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.function.aggregator.PrimitiveAggregator"/>
        <import package="org.ojalgo.matrix.PrimitiveMatrix"/>
        <import package="org.ojalgo.matrix.decomposition.DecompositionStore"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.matrix.store.ZeroStore"/>
        <class name="BaseSolver" line="40">
            <extends class="GenericSolver"/>
            <class name="AbstractBuilder" line="42">
                <type_params>
                    <type_param name="B"/>
                    <type_param name="S"/>
                </type_params>
                <implements interface="Cloneable"/>
                <declaration name="myModel" type="ExpressionsBasedModel" line="44"/>
                <declaration name="myAE" type="MatrixStore.Builder&amp;lt;Double&amp;gt;" line="46"/>
                <declaration name="myBE" type="MatrixStore.Builder&amp;lt;Double&amp;gt;" line="47"/>
                <declaration name="myQ" type="MatrixStore.Builder&amp;lt;Double&amp;gt;" line="48"/>
                <declaration name="myC" type="MatrixStore.Builder&amp;lt;Double&amp;gt;" line="49"/>
                <declaration name="myAI" type="MatrixStore.Builder&amp;lt;Double&amp;gt;" line="50"/>
                <declaration name="myBI" type="MatrixStore.Builder&amp;lt;Double&amp;gt;" line="51"/>
                <declaration name="myX" type="DecompositionStore&amp;lt;Double&amp;gt;" line="53"/>
                <declaration name="myLE" type="PhysicalStore&amp;lt;Double&amp;gt;" line="54"/>
                <declaration name="myLI" type="PhysicalStore&amp;lt;Double&amp;gt;" line="55"/>
                <declaration name="myInequalityEnities" type="ModelEntity&amp;lt;?&amp;gt;[]" line="57"/>
                <declaration name="myKickStarter" type="Optimisation.Result" line="58"/>
                <method name="AbstractBuilder" type="constructor" line="60"/>
                <method name="AbstractBuilder" type="constructor" line="67">
                    <params>
                        <param name="matrices" type="BaseSolver.AbstractBuilder&lt;?,?&gt;"/>
                    </params>
                    <scope line="73"/>
                    <scope line="77">
                        <scope line="78"/>
                        <scope line="80"/>
                    </scope>
                    <scope line="85"/>
                </method>
                <method name="AbstractBuilder" type="constructor" line="90">
                    <params>
                        <param name="model" type="ExpressionsBasedModel"/>
                    </params>
                </method>
                <method name="AbstractBuilder" type="constructor" line="97">
                    <params>
                        <param name="C" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                </method>
                <method name="AbstractBuilder" type="constructor" line="113">
                    <params>
                        <param name="Q" type="MatrixStore&lt;Double&gt;"/>
                        <param name="C" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                    <scope line="123"/>
                    <scope line="125"/>
                </method>
                <method name="AbstractBuilder" type="constructor" line="133">
                    <params>
                        <param name="matrices" type="MatrixStore&lt;Double&gt;[]"/>
                    </params>
                    <scope line="139"/>
                    <scope line="143">
                        <scope line="144"/>
                        <scope line="146"/>
                    </scope>
                    <scope line="151"/>
                </method>
                <javadoc line="156">
                    Will rescale problem parameters to minimise rounding and representation errors.                    
                </javadoc>
                <method name="balance" type="B" line="160">
                    <scope line="162"/>
                    <scope line="166"/>
                    <scope line="170"/>
                </method>
                <method name="build" type="S" line="177"/>
                <method name="build" type="S" line="181"/>
                <method name="copy" type="BaseSolver.AbstractBuilder&lt;B,S&gt;" line="184">
                    <scope line="185"/>
                    <scope line="187"/>
                </method>
                <method name="countEqualityConstraints" type="int" line="192"/>
                <method name="countInequalityConstraints" type="int" line="196"/>
                <method name="countVariables" type="int" line="200">
                    <declaration name="retVal" type="int" line="202"/>
                    <scope line="204"/>
                    <scope line="206"/>
                    <scope line="208"/>
                    <scope line="210"/>
                    <scope line="212"/>
                </method>
                <javadoc line="219">
                    [AE][X] == [BE]                    
                </javadoc>
                <method name="getAE" type="MatrixStore&lt;Double&gt;" line="222">
                    <scope line="223"/>
                    <scope line="225"/>
                </method>
                <javadoc line="230">
                    [AI][X] &lt;= [BI]                    
                </javadoc>
                <method name="getAI" type="MatrixStore&lt;Double&gt;" line="233">
                    <scope line="234"/>
                    <scope line="236"/>
                </method>
                <javadoc line="241">
                    [AE][X] == [BE]                    
                </javadoc>
                <method name="getBE" type="MatrixStore&lt;Double&gt;" line="244">
                    <scope line="245"/>
                    <scope line="247"/>
                </method>
                <javadoc line="252">
                    [AI][X] &lt;= [BI]                    
                </javadoc>
                <method name="getBI" type="MatrixStore&lt;Double&gt;" line="255">
                    <scope line="256"/>
                    <scope line="258"/>
                </method>
                <javadoc line="263">
                    Linear objective: [C]                    
                </javadoc>
                <method name="getC" type="MatrixStore&lt;Double&gt;" line="266">
                    <scope line="267"/>
                    <scope line="269"/>
                </method>
                <method name="getInequalityEnities" type="ModelEntity&lt;?&gt;[]" line="274"/>
                <method name="getKickStarter" type="Optimisation.Result" line="278"/>
                <javadoc line="282">
                    Lagrange multipliers / dual variables for Equalities                    
                </javadoc>
                <method name="getLE" type="PhysicalStore&lt;Double&gt;" line="285">
                    <scope line="286"/>
                </method>
                <javadoc line="292">
                    Lagrange multipliers / dual variables for Inequalities                    
                </javadoc>
                <method name="getLI" type="PhysicalStore&lt;Double&gt;" line="295">
                    <scope line="296"/>
                </method>
                <javadoc line="302">
                    Lagrange multipliers / dual variables for selected inequalities                    
                </javadoc>
                <method name="getLI" type="MatrixStore&lt;Double&gt;" line="305">
                    <params>
                        <param name="rowSelector" type="int"/>
                    </params>
                    <declaration name="tmpLI" type="PhysicalStore&amp;lt;Double&amp;gt;" line="306"/>
                    <scope line="307"/>
                    <scope line="309"/>
                </method>
                <javadoc line="314">
                    Quadratic objective: [Q]                    
                </javadoc>
                <method name="getQ" type="MatrixStore&lt;Double&gt;" line="317">
                    <scope line="318"/>
                    <scope line="320"/>
                </method>
                <javadoc line="325">
                    Slack for Equalities: [SE] = [BE] - [AE][X]                    
                </javadoc>
                <method name="getSE" type="PhysicalStore&lt;Double&gt;" line="328">
                    <declaration name="retVal" type="PhysicalStore&amp;lt;Double&amp;gt;" line="330"/>
                    <scope line="332"/>
                </method>
                <javadoc line="342">
                    Slack for Inequalities: [SI] = [BI] - [AI][X]                    
                </javadoc>
                <method name="getSI" type="PhysicalStore&lt;Double&gt;" line="345">
                    <declaration name="retVal" type="PhysicalStore&amp;lt;Double&amp;gt;" line="347"/>
                    <scope line="349"/>
                </method>
                <javadoc line="359">
                    Selected Slack for Inequalities                    
                </javadoc>
                <method name="getSI" type="MatrixStore&lt;Double&gt;" line="362">
                    <params>
                        <param name="aRowSelector" type="int"/>
                    </params>
                    <declaration name="tmpSI" type="PhysicalStore&amp;lt;Double&amp;gt;" line="363"/>
                    <scope line="364"/>
                    <scope line="366"/>
                </method>
                <javadoc line="371">
                    Solution / Variables: [X]                    
                </javadoc>
                <method name="getX" type="DecompositionStore&lt;Double&gt;" line="374">
                    <scope line="375"/>
                </method>
                <method name="hasEqualityConstraints" type="boolean" line="381"/>
                <method name="hasInequalityConstraints" type="boolean" line="385"/>
                <method name="hasObjective" type="boolean" line="389"/>
                <method name="isInequalityEnitiesSet" type="boolean" line="393"/>
                <method name="isKickStarterSet" type="boolean" line="397"/>
                <method name="isX" type="boolean" line="401"/>
                <method name="resetLE" type="void" line="405">
                    <scope line="406"/>
                </method>
                <method name="resetLI" type="void" line="411">
                    <scope line="412"/>
                </method>
                <method name="resetX" type="void" line="417">
                    <scope line="418"/>
                </method>
                <method name="setKickStarter" type="void" line="423">
                    <params>
                        <param name="kickStarter" type="Optimisation.Result"/>
                    </params>
                </method>
                <method name="setLE" type="void" line="427">
                    <params>
                        <param name="index" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="setLI" type="void" line="431">
                    <params>
                        <param name="index" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="setX" type="void" line="435">
                    <params>
                        <param name="index" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="toString" type="String" line="440">
                    <declaration name="retVal" type="StringBuilder" line="442"/>
                </method>
                <method name="balanceEqualityConstraints" type="void" line="471">
                    <declaration name="tmpBody" type="PhysicalStore&amp;lt;Double&amp;gt;" line="473"/>
                    <declaration name="tmpRHS" type="PhysicalStore&amp;lt;Double&amp;gt;" line="474"/>
                </method>
                <method name="balanceInequalityConstraints" type="void" line="484">
                    <declaration name="tmpBody" type="PhysicalStore&amp;lt;Double&amp;gt;" line="486"/>
                    <declaration name="tmpRHS" type="PhysicalStore&amp;lt;Double&amp;gt;" line="487"/>
                </method>
                <method name="balanceMatrices" type="double" line="497">
                    <params>
                        <param name="someMatrices" type="PhysicalStore&lt;Double&gt;[]"/>
                    </params>
                    <declaration name="tmpLargestAggr" type="AggregatorFunction&amp;lt;Double&amp;gt;" line="499"/>
                    <declaration name="tmpSmallestAggr" type="AggregatorFunction&amp;lt;Double&amp;gt;" line="500"/>
                    <scope line="502">
                        <scope line="503"/>
                    </scope>
                    <declaration name="tmpExponent" type="double" line="509"/>
                    <declaration name="tmpFactor" type="double" line="510"/>
                    <declaration name="tmpModifier" type="UnaryFunction&amp;lt;Double&amp;gt;" line="512"/>
                    <scope line="514">
                        <scope line="515"/>
                    </scope>
                </method>
                <method name="balanceObjective" type="void" line="524">
                    <declaration name="tmpMatrices" type="PhysicalStore&amp;lt;Double&amp;gt;[]" line="526"/>
                    <scope line="528"/>
                    <scope line="531"/>
                </method>
                <method name="balanceRows" type="void" line="543">
                    <params>
                        <param name="tmpBody" type="PhysicalStore&lt;Double&gt;"/>
                        <param name="tmpRHS" type="PhysicalStore&lt;Double&gt;"/>
                        <param name="assertPositiveRHS" type="boolean"/>
                    </params>
                    <declaration name="tmpLargestAggr" type="AggregatorFunction&amp;lt;Double&amp;gt;" line="545"/>
                    <declaration name="tmpSmallestAggr" type="AggregatorFunction&amp;lt;Double&amp;gt;" line="546"/>
                    <declaration name="tmpExponent" type="double" line="548"/>
                    <declaration name="tmpFactor" type="double" line="549"/>
                    <declaration name="tmpModifier" type="UnaryFunction&amp;lt;Double&amp;gt;" line="551"/>
                    <scope line="553">
                        <scope line="566"/>
                    </scope>
                </method>
                <method name="clone" type="Object" line="579">
                    <declaration name="retVal" type="BaseSolver.AbstractBuilder&amp;lt;B,S&amp;gt;" line="581"/>
                    <scope line="583"/>
                    <scope line="587"/>
                    <scope line="591"/>
                </method>
                <method name="equalities" type="B" line="599">
                    <params>
                        <param name="AE" type="MatrixStore&lt;Double&gt;"/>
                        <param name="BE" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                    <scope line="601"/>
                    <scope line="603"/>
                    <scope line="607"/>
                    <scope line="609"/>
                </method>
                <method name="getModel" type="ExpressionsBasedModel" line="616"/>
                <method name="inequalities" type="B" line="620">
                    <params>
                        <param name="AI" type="MatrixStore&lt;Double&gt;"/>
                        <param name="BI" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                </method>
                <method name="inequalities" type="B" line="625">
                    <params>
                        <param name="AI" type="MatrixStore&lt;Double&gt;"/>
                        <param name="BI" type="MatrixStore&lt;Double&gt;"/>
                        <param name="originatingEntities" type="ModelEntity&lt;?&gt;[]"/>
                    </params>
                    <scope line="627">
                        <scope line="629">
                            <declaration name="tmpOldEntities" type="ModelEntity&amp;lt;?&amp;gt;[]" line="630"/>
                            <scope line="632"/>
                            <scope line="635"/>
                        </scope>
                    </scope>
                    <scope line="639"/>
                    <scope line="644"/>
                    <scope line="646"/>
                </method>
                <method name="objective" type="B" line="654">
                    <params>
                        <param name="C" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                </method>
                <method name="objective" type="B" line="663">
                    <params>
                        <param name="Q" type="MatrixStore&lt;Double&gt;"/>
                        <param name="C" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                    <scope line="666"/>
                    <scope line="668"/>
                </method>
                <method name="validate" type="void" line="675">
                    <scope line="677">
                        <scope line="679"/>
                        <scope line="681"/>
                        <scope line="683"/>
                        <scope line="685"/>
                        <scope line="687"/>
                    </scope>
                    <scope line="691"/>
                    <scope line="697">
                        <scope line="699"/>
                        <scope line="703"/>
                        <scope line="705"/>
                    </scope>
                    <scope line="709"/>
                    <scope line="715">
                        <scope line="717"/>
                        <scope line="719"/>
                        <scope line="721"/>
                        <scope line="723"/>
                        <scope line="725"/>
                    </scope>
                    <scope line="729"/>
                </method>
            </class>
            <declaration name="myMatrices" type="BaseSolver.AbstractBuilder&amp;lt;?,?&amp;gt;" line="738"/>
            <method name="BaseSolver" type="constructor" line="741">
                <params>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                    <param name="solverOptions" type="Options"/>
                </params>
            </method>
            <method name="BaseSolver" type="constructor" line="745">
                <params>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                    <param name="solverOptions" type="Optimisation.Options"/>
                    <param name="matrices" type="BaseSolver.AbstractBuilder&lt;?,?&gt;"/>
                </params>
            </method>
            <method name="solve" type="Optimisation.Result" line="753"/>
            <method name="toString" type="String" line="758"/>
            <method name="countEqualityConstraints" type="int" line="762"/>
            <method name="countInequalityConstraints" type="int" line="766"/>
            <method name="countVariables" type="int" line="770"/>
            <method name="fillX" type="void" line="774">
                <params>
                    <param name="solution" type="Access1D&lt;?&gt;"/>
                </params>
                <scope line="775"/>
            </method>
            <method name="getAE" type="MatrixStore&lt;Double&gt;" line="780"/>
            <method name="getAI" type="MatrixStore&lt;Double&gt;" line="784"/>
            <method name="getBE" type="MatrixStore&lt;Double&gt;" line="788"/>
            <method name="getBI" type="MatrixStore&lt;Double&gt;" line="792"/>
            <method name="getC" type="MatrixStore&lt;Double&gt;" line="796"/>
            <method name="getInequalityEnities" type="ModelEntity&lt;?&gt;[]" line="800"/>
            <method name="getLE" type="PhysicalStore&lt;Double&gt;" line="804"/>
            <method name="getLI" type="MatrixStore&lt;Double&gt;" line="808">
                <params>
                    <param name="aRowSelector" type="int"/>
                </params>
            </method>
            <method name="getQ" type="MatrixStore&lt;Double&gt;" line="812"/>
            <method name="getSE" type="PhysicalStore&lt;Double&gt;" line="816"/>
            <method name="getSI" type="MatrixStore&lt;Double&gt;" line="820">
                <params>
                    <param name="aRowSelector" type="int"/>
                </params>
            </method>
            <method name="getX" type="DecompositionStore&lt;Double&gt;" line="824"/>
            <method name="hasEqualityConstraints" type="boolean" line="828"/>
            <method name="hasInequalityConstraints" type="boolean" line="832"/>
            <method name="hasObjective" type="boolean" line="836"/>
            <method name="isX" type="boolean" line="840"/>
            <method name="resetLE" type="void" line="844"/>
            <method name="resetLI" type="void" line="848"/>
            <method name="resetX" type="void" line="852"/>
            <method name="setLE" type="void" line="856">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="setLI" type="void" line="860">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="setX" type="void" line="864">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
        </class>
    </source>