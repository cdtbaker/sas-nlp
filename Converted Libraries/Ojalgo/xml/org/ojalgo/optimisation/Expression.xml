<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.optimisation">
        <import package="java.math.BigDecimal"/>
        <import package="java.math.RoundingMode"/>
        <import package="java.util.Collection"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Map.Entry"/>
        <import package="java.util.Set"/>
        <import package="org.ojalgo.ProgrammingError"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.BigFunction"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.aggregator.AggregatorCollection"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.function.aggregator.BigAggregator"/>
        <import package="org.ojalgo.function.multiary.CompoundFunction"/>
        <import package="org.ojalgo.function.multiary.ConstantFunction"/>
        <import package="org.ojalgo.function.multiary.LinearFunction"/>
        <import package="org.ojalgo.function.multiary.MultiaryFunction"/>
        <import package="org.ojalgo.function.multiary.QuadraticFunction"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="Expression" line="31">
            <extends class="ModelEntity">
                <type_params>
                    <type_param name="Expression"/>
                </type_params>
            </extends>
            <javadoc line="31">
                &lt;p&gt;
                  Think of an Expression as one constraint or a component to the objective function. An expression becomes a linear
                  expression as soon as you set a linear factor. Setting a quadratic factor turns it into a quadratic expression. If
                  you set both linear and quadratic factors it is a compound expression, and if you set neither it is an empty
                  expression. Currently the solvers supplied by ojAlgo can only handle linear constraint expressions. The objective
                  function can be linear, quadratic or compound. Empty expressions makes no sense...
                  &lt;/p&gt;
                  &lt;p&gt;
                  An expression is turned into a constraint by setting a lower and/or upper limit. Use{@linkplain ModelEntity#lower(BigDecimal)}, {@linkplain ModelEntity#upper(BigDecimal)} or{@linkplain ModelEntity#level(BigDecimal)}. An expression is made part of (contributing to) the objective function by
                  setting a contribution weight. Use {@linkplain ModelEntity#weight(BigDecimal)}. The contribution weight can be set to
                  anything except zero (0.0). Often you may just want to set it to one (1.0). Other values can be used to balance
                  multiple expressions Contributing to the objective function.
                  &lt;/p&gt;                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="Index" line="48">
                <implements interface="Comparable">
                    <type_params>
                        <type_param name="Index"/>
                    </type_params>
                </implements>
                <declaration name="index" type="int" line="49"/>
                <method name="Index" type="constructor" line="50">
                    <params>
                        <param name="anIndex" type="int"/>
                    </params>
                </method>
                <method name="Index" type="constructor" line="54"/>
                <method name="compareTo" type="int" line="57">
                    <params>
                        <param name="ref" type="Index"/>
                    </params>
                </method>
                <method name="equals" type="boolean" line="60">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="61"/>
                    <scope line="64"/>
                    <scope line="67"/>
                    <declaration name="other" type="Index" line="70"/>
                    <scope line="71"/>
                </method>
                <method name="hashCode" type="int" line="76">
                    <declaration name="prime" type="int" line="77"/>
                    <declaration name="result" type="int" line="78"/>
                </method>
                <method name="toString" type="String" line="82"/>
            </class>
            <class name="RowColumn" line="86">
                <implements interface="Comparable">
                    <type_params>
                        <type_param name="RowColumn"/>
                    </type_params>
                </implements>
                <declaration name="column" type="int" line="87"/>
                <declaration name="row" type="int" line="88"/>
                <method name="RowColumn" type="constructor" line="89">
                    <params>
                        <param name="aRow" type="int"/>
                        <param name="aCol" type="int"/>
                    </params>
                </method>
                <method name="RowColumn" type="constructor" line="94"/>
                <method name="compareTo" type="int" line="97">
                    <params>
                        <param name="ref" type="RowColumn"/>
                    </params>
                    <scope line="98"/>
                    <scope line="101"/>
                </method>
                <method name="equals" type="boolean" line="105">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="106"/>
                    <scope line="109"/>
                    <scope line="112"/>
                    <declaration name="other" type="RowColumn" line="115"/>
                    <scope line="116"/>
                    <scope line="119"/>
                </method>
                <method name="hashCode" type="int" line="124">
                    <declaration name="prime" type="int" line="125"/>
                    <declaration name="result" type="int" line="126"/>
                </method>
                <method name="toString" type="String" line="131"/>
            </class>
            <declaration name="myAdjustmentExponent" type="int" line="135"/>
            <declaration name="myInfeasible" type="boolean" line="136"/>
            <declaration name="myLinear" type="HashMap&lt;Index,BigDecimal&gt;" line="137"/>
            <declaration name="myModel" type="ExpressionsBasedModel" line="138"/>
            <declaration name="myQuadratic" type="HashMap&lt;RowColumn,BigDecimal&gt;" line="139"/>
            <declaration name="myRedundant" type="boolean" line="140"/>
            <declaration name="myShallowCopy" type="boolean" line="141"/>
            <method name="Expression" type="constructor" line="142">
                <params>
                    <param name="entityToCopy" type="Expression"/>
                </params>
            </method>
            <method name="Expression" type="constructor" line="146">
                <params>
                    <param name="aName" type="String"/>
                </params>
            </method>
            <method name="Expression" type="constructor" line="150">
                <params>
                    <param name="entityToCopy" type="Expression"/>
                    <param name="destinationModel" type="ExpressionsBasedModel"/>
                    <param name="deep" type="boolean"/>
                </params>
                <scope line="153"/>
                <scope line="160"/>
            </method>
            <method name="Expression" type="constructor" line="166">
                <params>
                    <param name="aName" type="String"/>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                </params>
            </method>
            <method name="evaluate" type="BigDecimal" line="176">
                <params>
                    <param name="point" type="Access1D<BigDecimal>"/>
                </params>
                <declaration name="retVal" type="BigDecimal" line="177"/>
                <declaration name="tmpFactor" type="BigDecimal" line="178"/>
                <scope line="179"/>
                <scope line="183"/>
            </method>
            <method name="evaluateLessThanZero" type="double" line="189">
                <params>
                    <param name="point" type="Access1D<?>"/>
                </params>
                <declaration name="tmpBody" type="double" line="190"/>
                <scope line="191"/>
                <scope line="194"/>
                <scope line="197"/>
            </method>
            <method name="evaluateMoreThanZero" type="double" line="201">
                <params>
                    <param name="point" type="Access1D<?>"/>
                </params>
                <declaration name="tmpBody" type="double" line="202"/>
                <scope line="203"/>
                <scope line="206"/>
                <scope line="209"/>
            </method>
            <method name="getAdjustedGradient" type="MatrixStore<Double>" line="213">
                <params>
                    <param name="point" type="Access1D<?>"/>
                </params>
                <declaration name="retVal" type="PrimitiveDenseStore" line="214"/>
                <declaration name="tmpBaseFunc" type="BinaryFunction&lt;Double&gt;" line="215"/>
                <declaration name="tmpAdjustedFactor" type="double" line="216"/>
                <declaration name="tmpModFunc" type="UnaryFunction&lt;Double&gt;" line="217"/>
                <scope line="218"/>
                <scope line="225"/>
            </method>
            <method name="getAdjustedHessian" type="MatrixStore<Double>" line="232">
                <declaration name="tmpCountVariables" type="int" line="233"/>
                <declaration name="retVal" type="PrimitiveDenseStore" line="234"/>
                <declaration name="tmpBaseFunc" type="BinaryFunction&lt;Double&gt;" line="235"/>
                <declaration name="tmpModFunc" type="UnaryFunction&lt;Double&gt;" line="236"/>
                <scope line="237"/>
            </method>
            <method name="getAdjustedLinearFactor" type="double" line="244">
                <params>
                    <param name="aKey" type="Index"/>
                </params>
            </method>
            <method name="getAdjustedLinearFactor" type="double" line="247">
                <params>
                    <param name="aVar" type="int"/>
                </params>
            </method>
            <method name="getAdjustedLinearFactor" type="double" line="250">
                <params>
                    <param name="aVar" type="Variable"/>
                </params>
            </method>
            <method name="getAdjustedQuadraticFactor" type="double" line="253">
                <params>
                    <param name="aVar1" type="int"/>
                    <param name="aVar2" type="int"/>
                </params>
            </method>
            <method name="getAdjustedQuadraticFactor" type="double" line="256">
                <params>
                    <param name="aKey" type="RowColumn"/>
                </params>
            </method>
            <method name="getAdjustedQuadraticFactor" type="double" line="259">
                <params>
                    <param name="aVar1" type="Variable"/>
                    <param name="aVar2" type="Variable"/>
                </params>
            </method>
            <javadoc line="262">
                @return compensated for fixed varables and adjusted                
            </javadoc>
            <method name="getCompensatedLowerLimit" type="double" line="265">
                <params>
                    <param name="fixedVariables" type="Collection<Index>"/>
                </params>
            </method>
            <javadoc line="268">
                @return compensated for fixed varables and adjusted                
            </javadoc>
            <method name="getCompensatedUpperLimit" type="double" line="271">
                <params>
                    <param name="fixedVariables" type="Collection<Index>"/>
                </params>
            </method>
            <method name="getLinearFactor" type="BigDecimal" line="274">
                <params>
                    <param name="aKey" type="Index"/>
                </params>
            </method>
            <method name="getLinearFactor" type="BigDecimal" line="277">
                <params>
                    <param name="aVar" type="int"/>
                </params>
            </method>
            <method name="getLinearFactor" type="BigDecimal" line="280">
                <params>
                    <param name="aVar" type="Variable"/>
                </params>
            </method>
            <method name="getLinearFactorKeys" type="Set<Expression.Index>" line="283"/>
            <method name="getQuadraticFactor" type="BigDecimal" line="286">
                <params>
                    <param name="aVar1" type="int"/>
                    <param name="aVar2" type="int"/>
                </params>
            </method>
            <method name="getQuadraticFactor" type="BigDecimal" line="289">
                <params>
                    <param name="aKey" type="RowColumn"/>
                </params>
            </method>
            <method name="getQuadraticFactor" type="BigDecimal" line="292">
                <params>
                    <param name="aRowVar" type="Variable"/>
                    <param name="aColVar" type="Variable"/>
                </params>
            </method>
            <method name="getQuadraticFactorKeys" type="Set<Expression.RowColumn>" line="295"/>
            <method name="isAnyLinearFactorNonZero" type="boolean" line="298"/>
            <method name="isAnyQuadraticFactorNonZero" type="boolean" line="301"/>
            <method name="isFunctionCompound" type="boolean" line="304"/>
            <method name="isFunctionLinear" type="boolean" line="307"/>
            <method name="isFunctionQuadratic" type="boolean" line="310"/>
            <method name="isFunctionZero" type="boolean" line="313"/>
            <javadoc line="316">
                Will set the quadratic and linear factors to an expression that measures (the square of) the distance from the
                  given point.                
                <param>
                    variables The relevant variables                    
                </param>
                <param>
                    aPoint The point to measure from                    
                </param>
            </javadoc>
            <method name="setCompoundFactorsOffset" type="void" line="322">
                <params>
                    <param name="variables" type="List<Variable>"/>
                    <param name="aPoint" type="Access1D<?>"/>
                </params>
                <declaration name="tmpLength" type="int" line="323"/>
                <scope line="324"/>
                <declaration name="tmpLinearWeight" type="BigDecimal" line="327"/>
                <declaration name="tmpVariable" type="Variable" line="328"/>
                <declaration name="tmpVal" type="BigDecimal" line="329"/>
                <scope line="330"/>
            </method>
            <method name="setLinearFactor" type="void" line="337">
                <params>
                    <param name="aKey" type="Index"/>
                    <param name="aValue" type="Number"/>
                </params>
                <scope line="338">
                    <declaration name="tmpValue" type="BigDecimal" line="339"/>
                    <scope line="340"/>
                    <scope line="343"/>
                </scope>
                <scope line="348"/>
            </method>
            <method name="setLinearFactor" type="void" line="352">
                <params>
                    <param name="aVar" type="int"/>
                    <param name="aValue" type="Number"/>
                </params>
            </method>
            <method name="setLinearFactor" type="void" line="355">
                <params>
                    <param name="aVar" type="Variable"/>
                    <param name="aValue" type="Number"/>
                </params>
            </method>
            <method name="setLinearFactors" type="void" line="358">
                <params>
                    <param name="variables" type="List<Variable>"/>
                    <param name="factors" type="Access1D<?>"/>
                </params>
                <declaration name="tmpLimit" type="int" line="359"/>
                <scope line="360"/>
                <scope line="363"/>
            </method>
            <javadoc line="367">
                Will set the linear factors to a simple sum expression - all factors equal 1.0.                
                <param>
                    variables The relevant variables                    
                </param>
            </javadoc>
            <method name="setLinearFactorsSimple" type="void" line="371">
                <params>
                    <param name="variables" type="List<Variable>"/>
                </params>
                <scope line="372"/>
            </method>
            <method name="setQuadraticFactor" type="void" line="376">
                <params>
                    <param name="aVar1" type="int"/>
                    <param name="aVar2" type="int"/>
                    <param name="aValue" type="Number"/>
                </params>
            </method>
            <method name="setQuadraticFactor" type="void" line="379">
                <params>
                    <param name="aKey" type="RowColumn"/>
                    <param name="aValue" type="Number"/>
                </params>
                <scope line="380">
                    <declaration name="tmpValue" type="BigDecimal" line="381"/>
                    <scope line="382"/>
                    <scope line="385"/>
                </scope>
                <scope line="390"/>
            </method>
            <method name="setQuadraticFactor" type="void" line="394">
                <params>
                    <param name="aVar1" type="Variable"/>
                    <param name="aVar2" type="Variable"/>
                    <param name="aValue" type="Number"/>
                </params>
            </method>
            <method name="setQuadraticFactors" type="void" line="397">
                <params>
                    <param name="variables" type="List<Variable>"/>
                    <param name="factors" type="Access2D<?>"/>
                </params>
                <declaration name="tmpLimit" type="int" line="398"/>
                <scope line="399"/>
                <scope line="402">
                    <declaration name="tmpVar2" type="Variable" line="403"/>
                    <scope line="404"/>
                </scope>
            </method>
            <method name="toFunction" type="MultiaryFunction<Double>" line="409">
                <scope line="410"/>
                <scope line="413"/>
                <scope line="416"/>
                <scope line="419"/>
            </method>
            <method name="validate" type="boolean" line="423">
                <params>
                    <param name="solution" type="Access1D<BigDecimal>"/>
                    <param name="context" type="NumberContext"/>
                </params>
                <declaration name="tmpValue" type="BigDecimal" line="424"/>
            </method>
            <method name="convert" type="BigDecimal" line="427">
                <params>
                    <param name="value" type="BigDecimal"/>
                    <param name="adjusted" type="boolean"/>
                </params>
                <scope line="428">
                    <scope line="429">
                        <declaration name="tmpAdjExp" type="int" line="430"/>
                        <scope line="431"/>
                        <scope line="434"/>
                    </scope>
                    <scope line="438"/>
                </scope>
                <scope line="442"/>
            </method>
            <method name="evaluateBody" type="double" line="446">
                <params>
                    <param name="point" type="Access1D<?>"/>
                </params>
                <declaration name="retVal" type="double" line="447"/>
                <declaration name="tmpAdjustedFactor" type="double" line="448"/>
                <scope line="449"/>
                <scope line="453"/>
            </method>
            <method name="appendMiddlePart" type="void" line="459">
                <params>
                    <param name="aStringBuilder" type="StringBuilder"/>
                    <param name="aCurrentState" type="Access1D<BigDecimal>"/>
                </params>
                <scope line="463"/>
            </method>
            <method name="destroy" type="void" line="469">
                <scope line="471"/>
            </method>
            <method name="getAdjustmentExponent" type="int" line="476">
                <scope line="477">
                    <declaration name="tmpCollection" type="AggregatorCollection&lt;BigDecimal&gt;" line="478"/>
                    <declaration name="tmpLargestAggr" type="AggregatorFunction&lt;BigDecimal&gt;" line="479"/>
                    <declaration name="tmpSmallestAggr" type="AggregatorFunction&lt;BigDecimal&gt;" line="480"/>
                    <scope line="481"/>
                    <scope line="485"/>
                    <declaration name="tmpLowerLimit" type="BigDecimal" line="489"/>
                    <scope line="490"/>
                    <declaration name="tmpUpperLimit" type="BigDecimal" line="494"/>
                    <scope line="495"/>
                </scope>
            </method>
            <method name="appendToString" type="void" line="503">
                <params>
                    <param name="aStringBuilder" type="StringBuilder"/>
                    <param name="aCurrentState" type="Access1D<BigDecimal>"/>
                </params>
                <scope line="505"/>
                <scope line="508"/>
            </method>
            <method name="calculateFixedValue" type="BigDecimal" line="513">
                <params>
                    <param name="fixedVariables" type="Collection<Index>"/>
                </params>
                <declaration name="retVal" type="BigDecimal" line="514"/>
                <scope line="515">
                    <declaration name="tmpFactor" type="BigDecimal" line="516"/>
                    <declaration name="tmpValue" type="BigDecimal" line="517"/>
                    <declaration name="tmpContribution" type="BigDecimal" line="518"/>
                    <scope line="519"/>
                    <scope line="522">
                        <scope line="523"/>
                    </scope>
                    <scope line="527">
                        <scope line="528"/>
                    </scope>
                </scope>
            </method>
            <method name="compensateLowerLimit" type="BigDecimal" line="535">
                <params>
                    <param name="fixedVariables" type="Collection<Index>"/>
                </params>
                <declaration name="tmpFixed" type="BigDecimal" line="536"/>
                <scope line="537"/>
                <scope line="540"/>
            </method>
            <method name="compensateUpperLimit" type="BigDecimal" line="544">
                <params>
                    <param name="fixedVariables" type="Collection<Index>"/>
                </params>
                <declaration name="tmpFixed" type="BigDecimal" line="545"/>
                <scope line="546"/>
                <scope line="549"/>
            </method>
            <method name="copy" type="Expression" line="553">
                <params>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                    <param name="deep" type="boolean"/>
                </params>
            </method>
            <method name="countLinearFactors" type="int" line="556"/>
            <method name="countQuadraticFactors" type="int" line="559"/>
            <method name="getCompoundFunction" type="CompoundFunction<Double>" line="562">
                <declaration name="retVal" type="CompoundFunction&lt;Double&gt;" line="563"/>
                <scope line="564">
                    <scope line="565"/>
                </scope>
                <scope line="569">
                    <scope line="570"/>
                </scope>
            </method>
            <method name="getLinear" type="HashMap<Index,BigDecimal>" line="576"/>
            <method name="getLinearFactor" type="BigDecimal" line="579">
                <params>
                    <param name="key" type="Index"/>
                    <param name="adjusted" type="boolean"/>
                </params>
            </method>
            <method name="getLinearFunction" type="LinearFunction<Double>" line="582">
                <declaration name="retVal" type="LinearFunction&lt;Double&gt;" line="583"/>
                <scope line="584">
                    <scope line="585"/>
                </scope>
            </method>
            <method name="getModel" type="ExpressionsBasedModel" line="591"/>
            <method name="getQuadratic" type="HashMap<RowColumn,BigDecimal>" line="594"/>
            <method name="getQuadraticFactor" type="BigDecimal" line="597">
                <params>
                    <param name="key" type="RowColumn"/>
                    <param name="adjusted" type="boolean"/>
                </params>
            </method>
            <method name="getQuadraticFunction" type="QuadraticFunction<Double>" line="600">
                <declaration name="retVal" type="QuadraticFunction&lt;Double&gt;" line="601"/>
                <scope line="602">
                    <scope line="603"/>
                </scope>
            </method>
            <method name="getZeroFunction" type="ConstantFunction<Double>" line="609"/>
            <method name="isInfeasible" type="boolean" line="612"/>
            <method name="isRedundant" type="boolean" line="615"/>
            <javadoc line="618">
                @return true if this expression was changed from not redundant to redundant                
            </javadoc>
            <method name="simplify" type="boolean" line="621">
                <declaration name="tmpInitiallyRedundant" type="boolean" line="623"/>
                <declaration name="tmpFixedVariables" type="Set&lt;Index&gt;" line="624"/>
                <scope line="625">
                    <declaration name="tmpFixedValue" type="BigDecimal" line="626"/>
                    <scope line="627">
                        <declaration name="tmpLinear" type="HashSet&lt;Index&gt;" line="628"/>
                        <scope line="630">
                            <scope line="632"/>
                            <scope line="636"/>
                        </scope>
                        <scope line="640">
                            <declaration name="tmpIndex" type="Index" line="641"/>
                            <declaration name="tmpVariable" type="Variable" line="642"/>
                            <declaration name="tmpFactor" type="BigDecimal" line="643"/>
                            <scope line="644">
                                <declaration name="tmpCompensatedLevel" type="BigDecimal" line="645"/>
                                <declaration name="tmpSolutionValue" type="BigDecimal" line="646"/>
                                <scope line="648"/>
                                <scope line="652"/>
                            </scope>
                            <scope line="656">
                                <declaration name="tmpLowerLimit" type="BigDecimal" line="657"/>
                                <declaration name="tmpUpperLimit" type="BigDecimal" line="658"/>
                                <declaration name="tmpCompensatedLower" type="BigDecimal" line="659"/>
                                <declaration name="tmpCompensatedUpper" type="BigDecimal" line="660"/>
                                <declaration name="tmpLowerSolution" type="BigDecimal" line="661"/>
                                <declaration name="tmpUpperSolution" type="BigDecimal" line="662"/>
                                <scope line="663">
                                    <declaration name="tmpVal" type="BigDecimal" line="664"/>
                                </scope>
                                <declaration name="tmpOldLower" type="BigDecimal" line="668"/>
                                <declaration name="tmpOldUpper" type="BigDecimal" line="669"/>
                                <declaration name="tmpNewLower" type="BigDecimal" line="670"/>
                                <scope line="671">
                                    <scope line="672"/>
                                    <scope line="675"/>
                                </scope>
                                <declaration name="tmpNewUpper" type="BigDecimal" line="679"/>
                                <scope line="680">
                                    <scope line="681"/>
                                    <scope line="684"/>
                                </scope>
                                <scope line="688">
                                    <scope line="689"/>
                                    <scope line="692"/>
                                </scope>
                                <scope line="697"/>
                                <scope line="701"/>
                            </scope>
                            <scope line="705"/>
                        </scope>
                    </scope>
                    <scope line="712"/>
                </scope>
                <scope line="716"/>
            </method>
        </class>
    </source>