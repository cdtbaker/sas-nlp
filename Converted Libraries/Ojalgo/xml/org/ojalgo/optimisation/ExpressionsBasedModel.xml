<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.optimisation">
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.multiary.MultiaryFunction"/>
        <import package="org.ojalgo.optimisation.Expression.Index"/>
        <import package="org.ojalgo.optimisation.integer.IntegerSolver"/>
        <import package="org.ojalgo.optimisation.linear.LinearSolver"/>
        <import package="org.ojalgo.optimisation.mps.MathProgSysModel"/>
        <import package="org.ojalgo.optimisation.quadratic.QuadraticSolver"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="ExpressionsBasedModel" line="15">
            <extends class="AbstractModel">
                <type_params>
                    <type_param name="GenericSolver"/>
                </type_params>
            </extends>
            <javadoc line="15">
                &lt;p&gt;
                  Lets you construct optimisation problems by combining mathematical expressions (in terms of variables). Each
                  expression or variable can be a constraint and/or contribute to the objective function. An expression or variable is
                  turned into a constraint by setting a lower and/or upper limit. Use {@linkplain ModelEntity#lower(BigDecimal)},{@linkplain ModelEntity#upper(BigDecimal)} or {@linkplain ModelEntity#level(BigDecimal)}. An expression or variable
                  is made part of (contributing to) the objective function by setting a contribution weight. Use{@linkplain ModelEntity#weight(BigDecimal)}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  You may think of variables as simple (the simplest possible) expressions, and of expressions as weighted combinations
                  of variables. They are both model entities and it is as such they can be turned into constraints and set to
                  contribute to the objective function. Alternatively you may choose to disregard the fact that variables are model
                  entities and simply treat them as index values. In this case everything (constraints and objective) needs to be
                  defined using expressions.
                  &lt;/p&gt;
                  Basic instructions:
                  &lt;ol&gt;
                  &lt;li&gt;Define (create) a set of variables. Set contribution weights and lower/upper limits as needed.&lt;/li&gt;
                  &lt;li&gt;Create a model using that set of variables.&lt;/li&gt;
                  &lt;li&gt;Add expressions to the model. The model is the expression factory. Set contribution weights and lower/upper
                  limits as needed.&lt;/li&gt;
                  &lt;li&gt;Instantiate a solver using the model. (Call {@linkplain #getDefaultSolver()})&lt;/li&gt;
                  &lt;li&gt;Solve!&lt;/li&gt;
                  &lt;/ol&gt;
                  There are some restrictions on the models you can create:
                  &lt;ul&gt;
                  &lt;li&gt;No quadratic constraints&lt;/li&gt;
                  &lt;/ul&gt;
                  The plan is that future versions should not have any restrictions like these.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <declaration name="NEW_LINE" type="String" line="46"/>
            <declaration name="START_END" type="String" line="47"/>
            <declaration name="OBJ_FUNC_AS_CONSTR_NAME" type="String" line="48"/>
            <method name="make" type="ExpressionsBasedModel" line="49">
                <params>
                    <param name="aModel" type="MathProgSysModel"/>
                </params>
                <declaration name="tmpActCols" type="MathProgSysModel.Column[]" line="50"/>
                <declaration name="tmpNegCols" type="MathProgSysModel.Column[]" line="51"/>
                <declaration name="tmpPosCols" type="MathProgSysModel.Column[]" line="52"/>
                <declaration name="tmpAllRows" type="MathProgSysModel.Row[]" line="53"/>
                <declaration name="tmpCountActCols" type="int" line="58"/>
                <declaration name="tmpCountNegCols" type="int" line="59"/>
                <declaration name="tmpCountPosCols" type="int" line="60"/>
                <declaration name="tmpCountAllRows" type="int" line="61"/>
                <declaration name="tmpRow" type="MathProgSysModel.Row" line="62"/>
                <declaration name="tmpCol" type="MathProgSysModel.Column" line="63"/>
                <declaration name="tmpVar" type="Variable" line="64"/>
                <declaration name="tmpExpr" type="Expression" line="65"/>
                <declaration name="tmpIndex" type="int" line="66"/>
                <declaration name="tmpVariables" type="Variable[]" line="67"/>
                <scope line="68"/>
                <scope line="73">
                    <declaration name="tmpLowerLimit" type="BigDecimal" line="76"/>
                    <declaration name="tmpUpperLimit" type="BigDecimal" line="77"/>
                </scope>
                <scope line="81">
                    <declaration name="tmpLowerLimit" type="BigDecimal" line="84"/>
                    <declaration name="tmpUpperLimit" type="BigDecimal" line="85"/>
                </scope>
                <declaration name="retVal" type="ExpressionsBasedModel" line="89"/>
                <declaration name="tmpExpressions" type="Expression[]" line="90"/>
                <declaration name="tmpExpressionNames" type="String[]" line="91"/>
                <scope line="92"/>
                <declaration name="tmpActExpressions" type="Expression[]" line="101"/>
                <declaration name="tmpActExpressionNames" type="String[]" line="102"/>
                <scope line="103">
                    <scope line="110"/>
                </scope>
                <scope line="115">
                    <scope line="118">
                        <scope line="120"/>
                    </scope>
                </scope>
                <scope line="125">
                    <scope line="128">
                        <scope line="130"/>
                    </scope>
                </scope>
            </method>
            <method name="presolve" type="void" line="137">
                <params>
                    <param name="model" type="ExpressionsBasedModel"/>
                </params>
                <scope line="138">
                    <scope line="139"/>
                </scope>
            </method>
            <declaration name="myWorkCopy" type="boolean" line="145"/>
            <declaration name="myExpressions" type="HashMap&lt;String,Expression&gt;" line="146"/>
            <declaration name="myFixedVariables" type="HashSet&lt;Index&gt;" line="147"/>
            <declaration name="myFreeIndeces" type="int[]" line="148"/>
            <declaration name="myFreeVariables" type="List&lt;Variable&gt;" line="149"/>
            <declaration name="myIntegerIndeces" type="int[]" line="150"/>
            <declaration name="myIntegerVariables" type="List&lt;Variable&gt;" line="151"/>
            <declaration name="myNegativeIndeces" type="int[]" line="152"/>
            <declaration name="myNegativeVariables" type="List&lt;Variable&gt;" line="153"/>
            <declaration name="myObjectiveExpression" type="Expression" line="154"/>
            <declaration name="myObjectiveFunction" type="MultiaryFunction&lt;Double&gt;" line="155"/>
            <declaration name="myPositiveIndeces" type="int[]" line="156"/>
            <declaration name="myPositiveVariables" type="List&lt;Variable&gt;" line="157"/>
            <declaration name="myVariables" type="ArrayList&lt;Variable&gt;" line="158"/>
            <method name="ExpressionsBasedModel" type="constructor" line="159"/>
            <method name="ExpressionsBasedModel" type="constructor" line="163">
                <params>
                    <param name="someVariables" type="Collection<? extends Variable>"/>
                </params>
                <scope line="165"/>
            </method>
            <method name="ExpressionsBasedModel" type="constructor" line="170">
                <params>
                    <param name="someVariables" type="Variable[]"/>
                </params>
                <scope line="172"/>
            </method>
            <method name="ExpressionsBasedModel" type="constructor" line="177">
                <params>
                    <param name="someOptions" type="Options"/>
                </params>
            </method>
            <method name="ExpressionsBasedModel" type="constructor" line="180">
                <params>
                    <param name="modelToCopy" type="ExpressionsBasedModel"/>
                    <param name="workCopy" type="boolean"/>
                </params>
                <scope line="183"/>
                <scope line="186"/>
                <scope line="189"/>
            </method>
            <method name="addExpression" type="Expression" line="195">
                <params>
                    <param name="aName" type="String"/>
                </params>
                <declaration name="retVal" type="Expression" line="196"/>
            </method>
            <method name="addVariable" type="void" line="200">
                <params>
                    <param name="aVariable" type="Variable"/>
                </params>
                <scope line="201"/>
                <scope line="204"/>
            </method>
            <method name="addVariables" type="void" line="209">
                <params>
                    <param name="someVariables" type="Collection<? extends Variable>"/>
                </params>
                <scope line="210"/>
            </method>
            <method name="copy" type="ExpressionsBasedModel" line="214"/>
            <method name="countExpressions" type="int" line="217"/>
            <method name="countVariables" type="int" line="220"/>
            <method name="destroy" type="void" line="223">
                <scope line="225"/>
                <scope line="229"/>
            </method>
            <method name="getDefaultSolver" type="GenericSolver" line="235">
                <scope line="237"/>
                <scope line="240"/>
                <scope line="243"/>
            </method>
            <method name="getExpression" type="Expression" line="247">
                <params>
                    <param name="aName" type="String"/>
                </params>
            </method>
            <method name="getExpressions" type="Collection<Expression>" line="250"/>
            <method name="getFixedVariables" type="Set<Index>" line="253"/>
            <javadoc line="256">
                @return A list of the variables that are not fixed at a specific value                
            </javadoc>
            <method name="getFreeVariables" type="List<Variable>" line="259">
                <scope line="260"/>
            </method>
            <javadoc line="265">
                @return A list of the variables that are not fixed at a specific value and are marked as integer variables                
            </javadoc>
            <method name="getIntegerVariables" type="List<Variable>" line="268">
                <scope line="269"/>
            </method>
            <javadoc line="274">
                @return A list of the variables that are not fixed at a specific value and whos range include negative values                
            </javadoc>
            <method name="getNegativeVariables" type="List<Variable>" line="277">
                <scope line="278"/>
            </method>
            <method name="getObjectiveExpression" type="Expression" line="283">
                <scope line="284">
                    <declaration name="tmpVariable" type="Variable" line="286"/>
                    <scope line="287">
                        <scope line="289"/>
                    </scope>
                    <declaration name="tmpOldVal" type="BigDecimal" line="293"/>
                    <declaration name="tmpDiff" type="BigDecimal" line="294"/>
                    <declaration name="tmpNewVal" type="BigDecimal" line="295"/>
                    <scope line="296">
                        <scope line="297">
                            <declaration name="tmpContributionWeight" type="BigDecimal" line="298"/>
                            <declaration name="tmpNotOne" type="boolean" line="299"/>
                            <scope line="300">
                                <scope line="301"/>
                            </scope>
                            <scope line="308">
                                <scope line="309"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getObjectiveFunction" type="MultiaryFunction<Double>" line="321">
                <scope line="322"/>
            </method>
            <javadoc line="327">
                @return A list of the variables that are not fixed at a specific value and whos range include positive values
                  and/or zero                
            </javadoc>
            <method name="getPositiveVariables" type="List<Variable>" line="331">
                <scope line="332"/>
            </method>
            <method name="getVariable" type="Variable" line="337">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getVariables" type="List<Variable>" line="340"/>
            <method name="getVariableValues" type="Access1D<BigDecimal>" line="343">
                <declaration name="tmpSize" type="int" line="344"/>
                <declaration name="retVal" type="Array1D&lt;BigDecimal&gt;" line="345"/>
                <declaration name="tmpVal" type="BigDecimal" line="346"/>
                <scope line="347">
                    <scope line="349"/>
                    <scope line="352"/>
                </scope>
            </method>
            <method name="indexOf" type="int" line="358">
                <params>
                    <param name="aVariable" type="Variable"/>
                </params>
            </method>
            <javadoc line="361">
                @param index General, global, variable index                
                <return>
                    Local index among the positive variables. -1 indicates the variable is not a positive variable.                    
                </return>
            </javadoc>
            <method name="indexOfFreeVariable" type="int" line="365">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="indexOfFreeVariable" type="int" line="368">
                <params>
                    <param name="aVariable" type="Variable"/>
                </params>
            </method>
            <javadoc line="371">
                @param index General, global, variable index                
                <return>
                    Local index among the integer variables. -1 indicates the variable is not an integer variable.                    
                </return>
            </javadoc>
            <method name="indexOfIntegerVariable" type="int" line="375">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="indexOfIntegerVariable" type="int" line="378">
                <params>
                    <param name="aVariable" type="Variable"/>
                </params>
            </method>
            <javadoc line="381">
                @param index General, global, variable index                
                <return>
                    Local index among the negative variables. -1 indicates the variable is not a negative variable.                    
                </return>
            </javadoc>
            <method name="indexOfNegativeVariable" type="int" line="385">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="indexOfNegativeVariable" type="int" line="388">
                <params>
                    <param name="aVariable" type="Variable"/>
                </params>
            </method>
            <javadoc line="391">
                @param index General, global, variable index                
                <return>
                    Local index among the positive variables. -1 indicates the variable is not a positive variable.                    
                </return>
            </javadoc>
            <method name="indexOfPositiveVariable" type="int" line="395">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="indexOfPositiveVariable" type="int" line="398">
                <params>
                    <param name="aVariable" type="Variable"/>
                </params>
            </method>
            <method name="isAnyExpressionQuadratic" type="boolean" line="401">
                <declaration name="retVal" type="boolean" line="402"/>
                <declaration name="tmpType" type="String" line="403"/>
                <scope line="404"/>
            </method>
            <method name="isAnyVariableFixed" type="boolean" line="410"/>
            <method name="isAnyVariableInteger" type="boolean" line="413">
                <declaration name="retVal" type="boolean" line="414"/>
                <declaration name="tmpLength" type="int" line="415"/>
                <scope line="416"/>
            </method>
            <method name="isWorkCopy" type="boolean" line="421"/>
            <method name="limitObjective" type="void" line="424">
                <params>
                    <param name="lower" type="BigDecimal"/>
                    <param name="upper" type="BigDecimal"/>
                </params>
                <declaration name="tmpEpression" type="Expression" line="425"/>
                <scope line="426"/>
            </method>
            <method name="markActiveInequalityConstraints" type="void" line="432">
                <params>
                    <param name="activeInequalityEntities" type="Collection<ModelEntity<?>>"/>
                </params>
                <scope line="433"/>
                <scope line="436"/>
                <scope line="439"/>
            </method>
            <method name="maximise" type="Optimisation.Result" line="443">
                <declaration name="tmpSolverResult" type="Result" line="445"/>
            </method>
            <method name="minimise" type="Optimisation.Result" line="448">
                <declaration name="tmpSolverResult" type="Result" line="450"/>
            </method>
            <method name="relax" type="ExpressionsBasedModel" line="453">
                <params>
                    <param name="inPlace" type="boolean"/>
                </params>
                <declaration name="retVal" type="ExpressionsBasedModel" line="454"/>
                <scope line="455"/>
            </method>
            <javadoc line="460">
                Linear equality constrained expressions.                
            </javadoc>
            <method name="selectExpressionsLinearEquality" type="List<Expression>" line="463">
                <declaration name="retVal" type="List&lt;Expression&gt;" line="464"/>
                <scope line="465">
                    <scope line="466"/>
                </scope>
            </method>
            <javadoc line="472">
                Linear lower constrained expressions.                
            </javadoc>
            <method name="selectExpressionsLinearLower" type="List<Expression>" line="475">
                <declaration name="retVal" type="List&lt;Expression&gt;" line="476"/>
                <scope line="477">
                    <scope line="478"/>
                </scope>
            </method>
            <javadoc line="484">
                Linear upper constrained expressions.                
            </javadoc>
            <method name="selectExpressionsLinearUpper" type="List<Expression>" line="487">
                <declaration name="retVal" type="List&lt;Expression&gt;" line="488"/>
                <scope line="489">
                    <scope line="490"/>
                </scope>
            </method>
            <javadoc line="496">
                Quadratic (and/or compound) equality constrained expressions.                
            </javadoc>
            <method name="selectExpressionsQuadraticEquality" type="List<Expression>" line="499">
                <declaration name="retVal" type="List&lt;Expression&gt;" line="500"/>
                <scope line="501">
                    <scope line="502"/>
                </scope>
            </method>
            <javadoc line="508">
                Quadratic (and/or compound) lower constrained expressions.                
            </javadoc>
            <method name="selectExpressionsQuadraticLower" type="List<Expression>" line="511">
                <declaration name="retVal" type="List&lt;Expression&gt;" line="512"/>
                <scope line="513">
                    <scope line="514"/>
                </scope>
            </method>
            <javadoc line="520">
                Quadratic (and/or compound) upper constrained expressions.                
            </javadoc>
            <method name="selectExpressionsQuadraticUpper" type="List<Expression>" line="523">
                <declaration name="retVal" type="List&lt;Expression&gt;" line="524"/>
                <scope line="525">
                    <scope line="526"/>
                </scope>
            </method>
            <method name="selectVariablesFreeLower" type="List<Variable>" line="532">
                <declaration name="retVal" type="List&lt;Variable&gt;" line="533"/>
                <scope line="534">
                    <scope line="535"/>
                </scope>
            </method>
            <method name="selectVariablesFreeUpper" type="List<Variable>" line="541">
                <declaration name="retVal" type="List&lt;Variable&gt;" line="542"/>
                <scope line="543">
                    <scope line="544"/>
                </scope>
            </method>
            <method name="selectVariablesNegativeLower" type="List<Variable>" line="550">
                <declaration name="retVal" type="List&lt;Variable&gt;" line="551"/>
                <scope line="552">
                    <scope line="553"/>
                </scope>
            </method>
            <method name="selectVariablesNegativeUpper" type="List<Variable>" line="559">
                <declaration name="retVal" type="List&lt;Variable&gt;" line="560"/>
                <scope line="561">
                    <scope line="562"/>
                </scope>
            </method>
            <method name="selectVariablesPositiveLower" type="List<Variable>" line="568">
                <declaration name="retVal" type="List&lt;Variable&gt;" line="569"/>
                <scope line="570">
                    <scope line="571"/>
                </scope>
            </method>
            <method name="selectVariablesPositiveUpper" type="List<Variable>" line="577">
                <declaration name="retVal" type="List&lt;Variable&gt;" line="578"/>
                <scope line="579">
                    <scope line="580"/>
                </scope>
            </method>
            <method name="solve" type="Optimisation.Result" line="586">
                <declaration name="retVal" type="Optimisation.Result" line="587"/>
                <scope line="589">
                    <declaration name="tmpSolution" type="Access1D&lt;BigDecimal&gt;" line="590"/>
                    <declaration name="tmpValue" type="double" line="591"/>
                    <declaration name="tmpState" type="State" line="592"/>
                </scope>
                <scope line="595">
                    <declaration name="tmpSolution" type="Access1D&lt;BigDecimal&gt;" line="596"/>
                    <scope line="597">
                        <declaration name="tmpValue" type="double" line="598"/>
                        <declaration name="tmpState" type="State" line="599"/>
                    </scope>
                    <scope line="602">
                        <declaration name="tmpValue" type="double" line="603"/>
                        <declaration name="tmpState" type="State" line="604"/>
                    </scope>
                </scope>
                <scope line="608">
                    <declaration name="tmpSolver" type="GenericSolver" line="609"/>
                </scope>
            </method>
            <method name="toString" type="String" line="614">
                <declaration name="retVal" type="StringBuilder" line="615"/>
                <scope line="616"/>
                <scope line="620"/>
            </method>
            <method name="validate" type="boolean" line="626">
                <declaration name="retVal" type="boolean" line="627"/>
                <scope line="628"/>
                <scope line="631"/>
            </method>
            <method name="validate" type="boolean" line="636">
                <params>
                    <param name="solution" type="Access1D<BigDecimal>"/>
                </params>
            </method>
            <method name="validate" type="boolean" line="639">
                <params>
                    <param name="solution" type="Access1D<BigDecimal>"/>
                    <param name="context" type="NumberContext"/>
                </params>
                <declaration name="tmpSize" type="int" line="640"/>
                <declaration name="retVal" type="boolean" line="641"/>
                <scope line="642"/>
                <scope line="645"/>
            </method>
            <method name="validate" type="boolean" line="650">
                <params>
                    <param name="context" type="NumberContext"/>
                </params>
            </method>
            <method name="categoriseVariables" type="void" line="653">
                <declaration name="tmpLength" type="int" line="654"/>
                <scope line="667">
                    <declaration name="tmpVariable" type="Variable" line="668"/>
                    <scope line="669"/>
                    <scope line="673">
                        <scope line="676"/>
                        <scope line="680"/>
                        <scope line="684"/>
                    </scope>
                </scope>
            </method>
            <method name="handleResult" type="Optimisation.Result" line="695">
                <params>
                    <param name="solverResult" type="Result"/>
                </params>
                <declaration name="tmpSolutionContext" type="NumberContext" line="696"/>
                <declaration name="tmpSize" type="int" line="697"/>
                <scope line="698">
                    <declaration name="tmpVariable" type="Variable" line="699"/>
                    <scope line="700"/>
                </scope>
                <declaration name="tmpSolution" type="Access1D&lt;BigDecimal&gt;" line="704"/>
                <declaration name="tmpState" type="Optimisation.State" line="705"/>
                <declaration name="tmpValue" type="double" line="706"/>
                <scope line="707"/>
            </method>
            <method name="flushCaches" type="void" line="711">
                <scope line="712"/>
            </method>
            <method name="addFixedVariable" type="boolean" line="725">
                <params>
                    <param name="index" type="Index"/>
                </params>
            </method>
            <method name="isFixed" type="boolean" line="728"/>
            <method name="isInfeasible" type="boolean" line="731">
                <scope line="732">
                    <scope line="733"/>
                </scope>
            </method>
            <method name="presolve" type="void" line="739"/>
        </class>
    </source>