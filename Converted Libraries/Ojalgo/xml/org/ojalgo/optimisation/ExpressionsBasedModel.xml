<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.optimisation">
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="org.ojalgo.function.multiary.MultiaryFunction"/>
        <import package="org.ojalgo.optimisation.Expression.Index"/>
        <import package="org.ojalgo.optimisation.convex.ConvexSolver"/>
        <import package="org.ojalgo.optimisation.integer.OldIntegerSolver"/>
        <import package="org.ojalgo.optimisation.linear.LinearSolver"/>
        <import package="org.ojalgo.optimisation.mps.MathProgSysModel"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="ExpressionsBasedModel" line="40">
            <extends class="AbstractModel">
                <type_params>
                    <type_param name="GenericSolver"/>
                </type_params>
            </extends>
            <javadoc line="40">
                &lt;p&gt;
                  Lets you construct optimisation problems by combining mathematical expressions (in terms of variables). Each
                  expression or variable can be a constraint and/or contribute to the objective function. An expression or variable is
                  turned into a constraint by setting a lower and/or upper limit. Use {@linkplain ModelEntity#lower(BigDecimal)},{@linkplain ModelEntity#upper(BigDecimal)} or {@linkplain ModelEntity#level(BigDecimal)}. An expression or variable
                  is made part of (contributing to) the objective function by setting a contribution weight. Use{@linkplain ModelEntity#weight(BigDecimal)}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  You may think of variables as simple (the simplest possible) expressions, and of expressions as weighted combinations
                  of variables. They are both model entities and it is as such they can be turned into constraints and set to
                  contribute to the objective function. Alternatively you may choose to disregard the fact that variables are model
                  entities and simply treat them as index values. In this case everything (constraints and objective) needs to be
                  defined using expressions.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Basic instructions:
                  &lt;ol&gt;
                  &lt;li&gt;Define (create) a set of variables. Set contribution weights and lower/upper limits as needed.&lt;/li&gt;
                  &lt;li&gt;Create a model using that set of variables.&lt;/li&gt;
                  &lt;li&gt;Add expressions to the model. The model is the expression factory. Set contribution weights and lower/upper
                  limits as needed.&lt;/li&gt;
                  &lt;li&gt;Solve your problem using either minimise() or maximise()&lt;/li&gt;
                  &lt;/ol&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  This class actually does something for you compared to using the solvers directly:
                  &lt;ol&gt;
                  &lt;li&gt;You can model your problems without worrying about specific solver requirements.&lt;/li&gt;
                  &lt;li&gt;It knows which solver to use.&lt;/li&gt;
                  &lt;li&gt;It knows how to use that solver.&lt;/li&gt;
                  &lt;li&gt;It has a presolver that tries to simplify the problem before invoking a solver (sometimes it turns out there is
                  no need to invoke a solver at all).&lt;/li&gt;
                  &lt;li&gt;When/if needed it scales problem parameters, before creating solver specific data structures, to minimize
                  numerical problems in the solvers.&lt;/li&gt;
                  &lt;li&gt;It&apos;s the only way to access the integer solver.&lt;/li&gt;
                  &lt;/ol&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  There are some restrictions on the models you can create:
                  &lt;ul&gt;
                  &lt;li&gt;No quadratic constraints&lt;/li&gt;
                  &lt;/ul&gt;
                  The plan is that future versions should not have any restrictions like these.
                  &lt;/p&gt;                
                <author>
                    apete                    
                </author>
            </javadoc>
            <method name="make" type="ExpressionsBasedModel" line="91">
                <params>
                    <param name="aModel" type="MathProgSysModel"/>
                </params>
                <comment line="109">
                    Define various local variables                    
                </comment>
                <comment line="116">
                    Create the LinearModel variables                    
                </comment>
                <comment line="150">
                    Instantiate the LinearModel                    
                </comment>
                <declaration name="tmpActCols" type="MathProgSysModel.Column[]" line="93"/>
                <declaration name="tmpNegCols" type="MathProgSysModel.Column[]" line="94"/>
                <declaration name="tmpPosCols" type="MathProgSysModel.Column[]" line="95"/>
                <declaration name="tmpAllRows" type="MathProgSysModel.Row[]" line="96"/>
                <declaration name="tmpCountActCols" type="int" line="103"/>
                <declaration name="tmpCountNegCols" type="int" line="104"/>
                <declaration name="tmpCountPosCols" type="int" line="105"/>
                <declaration name="tmpCountAllRows" type="int" line="106"/>
                <declaration name="tmpRow" type="MathProgSysModel.Row" line="109"/>
                <declaration name="tmpCol" type="MathProgSysModel.Column" line="110"/>
                <declaration name="tmpVar" type="Variable" line="111"/>
                <declaration name="tmpExpr" type="Expression" line="112"/>
                <declaration name="tmpIndex" type="int" line="113"/>
                <declaration name="tmpVariables" type="Variable[]" line="116"/>
                <scope line="117"/>
                <scope line="124">
                    <declaration name="tmpLowerLimit" type="BigDecimal" line="129"/>
                    <declaration name="tmpUpperLimit" type="BigDecimal" line="130"/>
                </scope>
                <scope line="136">
                    <declaration name="tmpLowerLimit" type="BigDecimal" line="141"/>
                    <declaration name="tmpUpperLimit" type="BigDecimal" line="142"/>
                </scope>
                <declaration name="retVal" type="ExpressionsBasedModel" line="150"/>
                <declaration name="tmpExpressions" type="Expression[]" line="152"/>
                <declaration name="tmpExpressionNames" type="String[]" line="153"/>
                <scope line="155"/>
                <declaration name="tmpActExpressions" type="Expression[]" line="165"/>
                <declaration name="tmpActExpressionNames" type="String[]" line="166"/>
                <scope line="168">
                    <scope line="176"/>
                </scope>
                <scope line="182">
                    <scope line="185">
                        <scope line="187"/>
                    </scope>
                </scope>
                <scope line="192">
                    <scope line="195">
                        <scope line="197"/>
                    </scope>
                </scope>
            </method>
            <method name="presolve" type="void" line="206">
                <params>
                    <param name="model" type="ExpressionsBasedModel"/>
                </params>
                <scope line="208">
                    <scope line="209"/>
                </scope>
            </method>
            <declaration name="NEW_LINE" type="String" line="216"/>
            <declaration name="START_END" type="String" line="218"/>
            <declaration name="OBJ_FUNC_AS_CONSTR_NAME" type="String" line="220"/>
            <declaration name="myWorkCopy" type="boolean" line="222"/>
            <declaration name="myExpressions" type="HashMap&amp;lt;String,Expression&amp;gt;" line="224"/>
            <declaration name="myFixedVariables" type="HashSet&amp;lt;Index&amp;gt;" line="225"/>
            <declaration name="myFreeIndices" type="int[]" line="226"/>
            <declaration name="myFreeVariables" type="List&amp;lt;Variable&amp;gt;" line="227"/>
            <declaration name="myIntegerIndices" type="int[]" line="228"/>
            <declaration name="myIntegerVariables" type="List&amp;lt;Variable&amp;gt;" line="229"/>
            <declaration name="myNegativeIndices" type="int[]" line="230"/>
            <declaration name="myNegativeVariables" type="List&amp;lt;Variable&amp;gt;" line="231"/>
            <declaration name="myObjectiveExpression" type="Expression" line="232"/>
            <declaration name="myObjectiveFunction" type="MultiaryFunction.TwiceDifferentiable&amp;lt;Double&amp;gt;" line="233"/>
            <declaration name="myPositiveIndices" type="int[]" line="234"/>
            <declaration name="myPositiveVariables" type="List&amp;lt;Variable&amp;gt;" line="235"/>
            <declaration name="myVariables" type="ArrayList&amp;lt;Variable&amp;gt;" line="236"/>
            <method name="ExpressionsBasedModel" type="constructor" line="238"/>
            <method name="ExpressionsBasedModel" type="constructor" line="245">
                <params>
                    <param name="someVariables" type="Collection&lt;? extends Variable&gt;"/>
                </params>
                <scope line="249"/>
            </method>
            <method name="ExpressionsBasedModel" type="constructor" line="256">
                <params>
                    <param name="someVariables" type="Variable[]"/>
                </params>
                <scope line="260"/>
            </method>
            <method name="ExpressionsBasedModel" type="constructor" line="268">
                <params>
                    <param name="someOptions" type="Options"/>
                </params>
            </method>
            <method name="ExpressionsBasedModel" type="constructor" line="272">
                <params>
                    <param name="modelToCopy" type="ExpressionsBasedModel"/>
                    <param name="workCopy" type="boolean"/>
                </params>
                <scope line="278"/>
                <scope line="282"/>
                <scope line="286"/>
            </method>
            <method name="addExpression" type="Expression" line="295">
                <params>
                    <param name="aName" type="String"/>
                </params>
                <declaration name="retVal" type="Expression" line="297"/>
            </method>
            <method name="addVariable" type="void" line="304">
                <params>
                    <param name="aVariable" type="Variable"/>
                </params>
                <scope line="305"/>
                <scope line="307"/>
            </method>
            <method name="addVariables" type="void" line="313">
                <params>
                    <param name="someVariables" type="Collection&lt;? extends Variable&gt;"/>
                </params>
                <scope line="314"/>
            </method>
            <method name="copy" type="ExpressionsBasedModel" line="319"/>
            <method name="countExpressions" type="int" line="323"/>
            <method name="countVariables" type="int" line="327"/>
            <method name="destroy" type="void" line="332">
                <scope line="336"/>
                <scope line="341"/>
            </method>
            <method name="getDefaultSolver" type="GenericSolver" line="349">
                <comment line="357">
                    return NewIntegerSolver.make(this);                    
                </comment>
                <comment line="361">
                    return QuadraticSolver.make(this);                    
                </comment>
                <scope line="353"/>
                <scope line="358"/>
                <scope line="363"/>
            </method>
            <method name="getExpression" type="Expression" line="369">
                <params>
                    <param name="aName" type="String"/>
                </params>
            </method>
            <method name="getExpressions" type="Collection&lt;Expression&gt;" line="373"/>
            <method name="getFixedVariables" type="Set&lt;Index&gt;" line="377"/>
            <javadoc line="381">
                @return A list of the variables that are not fixed at a specific value                
            </javadoc>
            <method name="getFreeVariables" type="List&lt;Variable&gt;" line="384">
                <scope line="386"/>
            </method>
            <javadoc line="393">
                @return A list of the variables that are not fixed at a specific value and are marked as integer variables                
            </javadoc>
            <method name="getIntegerVariables" type="List&lt;Variable&gt;" line="396">
                <scope line="398"/>
            </method>
            <javadoc line="405">
                @return A list of the variables that are not fixed at a specific value and whos range include negative values                
            </javadoc>
            <method name="getNegativeVariables" type="List&lt;Variable&gt;" line="408">
                <scope line="410"/>
            </method>
            <method name="getObjectiveExpression" type="Expression" line="417">
                <comment line="442">
                    To avoid multiplication by 1.0                    
                </comment>
                <scope line="419">
                    <declaration name="tmpVariable" type="Variable" line="423"/>
                    <scope line="424">
                        <scope line="427"/>
                    </scope>
                    <declaration name="tmpOldVal" type="BigDecimal" line="432"/>
                    <declaration name="tmpDiff" type="BigDecimal" line="433"/>
                    <declaration name="tmpNewVal" type="BigDecimal" line="434"/>
                    <scope line="436">
                        <scope line="438">
                            <declaration name="tmpContributionWeight" type="BigDecimal" line="440"/>
                            <declaration name="tmpNotOne" type="boolean" line="441"/>
                            <scope line="443">
                                <scope line="444"/>
                            </scope>
                            <scope line="452">
                                <scope line="453"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getObjectiveFunction" type="MultiaryFunction.TwiceDifferentiable&lt;Double&gt;" line="467">
                <scope line="469"/>
            </method>
            <javadoc line="476">
                @return A list of the variables that are not fixed at a specific value and whos range include positive values
                  and/or zero                
            </javadoc>
            <method name="getPositiveVariables" type="List&lt;Variable&gt;" line="480">
                <scope line="482"/>
            </method>
            <method name="getVariable" type="Variable" line="489">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getVariables" type="List&lt;Variable&gt;" line="493"/>
            <method name="getVariableValues" type="Optimisation.Result" line="497"/>
            <javadoc line="501">
                Null variable values are replaced with 0.0. If any variable value is null the state is set to INFEASIBLE even if
                  zero would actually be a feasible value. The objective function value is not calculated for infeasible variable
                  values.                
            </javadoc>
            <method name="getVariableValues" type="Optimisation.Result" line="506">
                <params>
                    <param name="validationContext" type="NumberContext"/>
                </params>
                <declaration name="tmpNumberOfVariables" type="int" line="508"/>
                <declaration name="tmpSolution" type="Array1D&amp;lt;BigDecimal&amp;gt;" line="510"/>
                <declaration name="tmpNoneNull" type="boolean" line="512"/>
                <declaration name="tmpVal" type="BigDecimal" line="514"/>
                <scope line="515">
                    <scope line="519"/>
                    <scope line="521"/>
                </scope>
                <scope line="527">
                    <declaration name="tmpValue" type="double" line="528"/>
                </scope>
                <scope line="530"/>
            </method>
            <method name="indexOf" type="int" line="535">
                <params>
                    <param name="aVariable" type="Variable"/>
                </params>
            </method>
            <javadoc line="539">
                @param index General, global, variable index                
                <return>
                    Local index among the positive variables. -1 indicates the variable is not a positive variable.                    
                </return>
            </javadoc>
            <method name="indexOfFreeVariable" type="int" line="543">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="indexOfFreeVariable" type="int" line="547">
                <params>
                    <param name="aVariable" type="Variable"/>
                </params>
            </method>
            <javadoc line="551">
                @param index General, global, variable index                
                <return>
                    Local index among the integer variables. -1 indicates the variable is not an integer variable.                    
                </return>
            </javadoc>
            <method name="indexOfIntegerVariable" type="int" line="555">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="indexOfIntegerVariable" type="int" line="559">
                <params>
                    <param name="aVariable" type="Variable"/>
                </params>
            </method>
            <javadoc line="563">
                @param index General, global, variable index                
                <return>
                    Local index among the negative variables. -1 indicates the variable is not a negative variable.                    
                </return>
            </javadoc>
            <method name="indexOfNegativeVariable" type="int" line="567">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="indexOfNegativeVariable" type="int" line="571">
                <params>
                    <param name="aVariable" type="Variable"/>
                </params>
            </method>
            <javadoc line="575">
                @param index General, global, variable index                
                <return>
                    Local index among the positive variables. -1 indicates the variable is not a positive variable.                    
                </return>
            </javadoc>
            <method name="indexOfPositiveVariable" type="int" line="579">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="indexOfPositiveVariable" type="int" line="583">
                <params>
                    <param name="aVariable" type="Variable"/>
                </params>
            </method>
            <method name="isAnyExpressionQuadratic" type="boolean" line="587">
                <comment line="592">
                    final int tmpLength = myExpressions.size();                    
                </comment>
                <comment line="594">
                    for (int i = 0; !retVal &amp;&amp; (i &lt; tmpLength); i++) {
                                retVal |= myExpressions.get(i).hasQuadratic();
                            }                    
                </comment>
                <declaration name="retVal" type="boolean" line="589"/>
                <declaration name="tmpType" type="String" line="597"/>
                <scope line="598"/>
            </method>
            <method name="isAnyVariableFixed" type="boolean" line="606"/>
            <method name="isAnyVariableInteger" type="boolean" line="610">
                <declaration name="retVal" type="boolean" line="612"/>
                <declaration name="tmpLength" type="int" line="614"/>
                <scope line="616"/>
            </method>
            <method name="isWorkCopy" type="boolean" line="623"/>
            <method name="limitObjective" type="void" line="627">
                <params>
                    <param name="lower" type="BigDecimal"/>
                    <param name="upper" type="BigDecimal"/>
                </params>
                <declaration name="tmpEpression" type="Expression" line="629"/>
                <scope line="630"/>
            </method>
            <method name="markActiveInequalityConstraints" type="void" line="638">
                <params>
                    <param name="activeInequalityEntities" type="Collection&lt;ModelEntity&lt;?&gt;&gt;"/>
                </params>
                <scope line="640"/>
                <scope line="644"/>
                <scope line="648"/>
            </method>
            <method name="maximise" type="Optimisation.Result" line="653">
                <declaration name="tmpSolverResult" type="Result" line="657"/>
            </method>
            <method name="minimise" type="Optimisation.Result" line="662">
                <declaration name="tmpSolverResult" type="Result" line="666"/>
            </method>
            <method name="relax" type="ExpressionsBasedModel" line="671">
                <params>
                    <param name="inPlace" type="boolean"/>
                </params>
                <declaration name="retVal" type="ExpressionsBasedModel" line="673"/>
                <scope line="675"/>
            </method>
            <javadoc line="682">
                Linear equality constrained expressions.                
            </javadoc>
            <method name="selectExpressionsLinearEquality" type="List&lt;Expression&gt;" line="685">
                <declaration name="retVal" type="List&amp;lt;Expression&amp;gt;" line="687"/>
                <scope line="689">
                    <scope line="690"/>
                </scope>
            </method>
            <javadoc line="698">
                Linear lower constrained expressions.                
            </javadoc>
            <method name="selectExpressionsLinearLower" type="List&lt;Expression&gt;" line="701">
                <declaration name="retVal" type="List&amp;lt;Expression&amp;gt;" line="703"/>
                <scope line="705">
                    <scope line="706"/>
                </scope>
            </method>
            <javadoc line="714">
                Linear upper constrained expressions.                
            </javadoc>
            <method name="selectExpressionsLinearUpper" type="List&lt;Expression&gt;" line="717">
                <declaration name="retVal" type="List&amp;lt;Expression&amp;gt;" line="719"/>
                <scope line="721">
                    <scope line="722"/>
                </scope>
            </method>
            <javadoc line="730">
                Quadratic (and/or compound) equality constrained expressions.                
            </javadoc>
            <method name="selectExpressionsQuadraticEquality" type="List&lt;Expression&gt;" line="733">
                <declaration name="retVal" type="List&amp;lt;Expression&amp;gt;" line="735"/>
                <scope line="737">
                    <scope line="738"/>
                </scope>
            </method>
            <javadoc line="746">
                Quadratic (and/or compound) lower constrained expressions.                
            </javadoc>
            <method name="selectExpressionsQuadraticLower" type="List&lt;Expression&gt;" line="749">
                <declaration name="retVal" type="List&amp;lt;Expression&amp;gt;" line="751"/>
                <scope line="753">
                    <scope line="754"/>
                </scope>
            </method>
            <javadoc line="762">
                Quadratic (and/or compound) upper constrained expressions.                
            </javadoc>
            <method name="selectExpressionsQuadraticUpper" type="List&lt;Expression&gt;" line="765">
                <declaration name="retVal" type="List&amp;lt;Expression&amp;gt;" line="767"/>
                <scope line="769">
                    <scope line="770"/>
                </scope>
            </method>
            <method name="selectVariablesFreeLower" type="List&lt;Variable&gt;" line="778">
                <declaration name="retVal" type="List&amp;lt;Variable&amp;gt;" line="780"/>
                <scope line="782">
                    <scope line="783"/>
                </scope>
            </method>
            <method name="selectVariablesFreeUpper" type="List&lt;Variable&gt;" line="791">
                <declaration name="retVal" type="List&amp;lt;Variable&amp;gt;" line="793"/>
                <scope line="795">
                    <scope line="796"/>
                </scope>
            </method>
            <method name="selectVariablesNegativeLower" type="List&lt;Variable&gt;" line="804">
                <declaration name="retVal" type="List&amp;lt;Variable&amp;gt;" line="806"/>
                <scope line="808">
                    <scope line="809"/>
                </scope>
            </method>
            <method name="selectVariablesNegativeUpper" type="List&lt;Variable&gt;" line="817">
                <declaration name="retVal" type="List&amp;lt;Variable&amp;gt;" line="819"/>
                <scope line="821">
                    <scope line="822"/>
                </scope>
            </method>
            <method name="selectVariablesPositiveLower" type="List&lt;Variable&gt;" line="830">
                <declaration name="retVal" type="List&amp;lt;Variable&amp;gt;" line="832"/>
                <scope line="834">
                    <scope line="835"/>
                </scope>
            </method>
            <method name="selectVariablesPositiveUpper" type="List&lt;Variable&gt;" line="843">
                <declaration name="retVal" type="List&amp;lt;Variable&amp;gt;" line="845"/>
                <scope line="847">
                    <scope line="848"/>
                </scope>
            </method>
            <method name="solve" type="Optimisation.Result" line="856">
                <comment line="888">
                    if (options.validate &amp;&amp; retVal.getState().isFeasible() &amp;&amp; !this.validate(retVal)) {
                                    retVal = new Optimisation.Result(Optimisation.State.FAILED, retVal);
                                }                    
                </comment>
                <declaration name="retVal" type="Optimisation.Result" line="858"/>
                <scope line="862">
                    <declaration name="tmpSolution" type="Optimisation.Result" line="864"/>
                </scope>
                <scope line="868">
                    <declaration name="tmpSolution" type="Optimisation.Result" line="870"/>
                    <scope line="872"/>
                    <scope line="876"/>
                </scope>
                <scope line="881">
                    <declaration name="tmpSolver" type="GenericSolver" line="883"/>
                </scope>
            </method>
            <method name="toString" type="String" line="897">
                <declaration name="retVal" type="StringBuilder" line="899"/>
                <scope line="901"/>
                <scope line="906"/>
            </method>
            <method name="validate" type="boolean" line="914">
                <declaration name="retVal" type="boolean" line="916"/>
                <scope line="918"/>
                <scope line="922"/>
            </method>
            <method name="validate" type="boolean" line="929">
                <params>
                    <param name="solution" type="Access1D&lt;BigDecimal&gt;"/>
                </params>
            </method>
            <method name="validate" type="boolean" line="933">
                <params>
                    <param name="solution" type="Access1D&lt;BigDecimal&gt;"/>
                    <param name="context" type="NumberContext"/>
                </params>
                <declaration name="tmpSize" type="int" line="935"/>
                <declaration name="retVal" type="boolean" line="937"/>
                <scope line="939"/>
                <scope line="943"/>
            </method>
            <method name="validate" type="boolean" line="950">
                <params>
                    <param name="context" type="NumberContext"/>
                </params>
            </method>
            <method name="categoriseVariables" type="void" line="954">
                <declaration name="tmpLength" type="int" line="956"/>
                <scope line="974">
                    <declaration name="tmpVariable" type="Variable" line="976"/>
                    <scope line="978"/>
                    <scope line="983">
                        <scope line="988"/>
                        <scope line="993"/>
                        <scope line="998"/>
                    </scope>
                </scope>
            </method>
            <method name="handleResult" type="Optimisation.Result" line="1011">
                <params>
                    <param name="solverResult" type="Result"/>
                </params>
                <comment line="1029">
                    TODO &amp;&amp; this.validate(tmpSolution, options.slack)                    
                </comment>
                <declaration name="tmpSolutionContext" type="NumberContext" line="1013"/>
                <declaration name="tmpSize" type="int" line="1015"/>
                <scope line="1016">
                    <declaration name="tmpVariable" type="Variable" line="1017"/>
                    <scope line="1018"/>
                </scope>
                <declaration name="tmpSolution" type="Access1D&amp;lt;BigDecimal&amp;gt;" line="1023"/>
                <declaration name="tmpState" type="Optimisation.State" line="1024"/>
                <declaration name="tmpValue" type="double" line="1025"/>
                <scope line="1027"/>
            </method>
            <method name="flushCaches" type="void" line="1034">
                <scope line="1036"/>
            </method>
            <method name="addFixedVariable" type="boolean" line="1054">
                <params>
                    <param name="index" type="Index"/>
                </params>
            </method>
            <method name="isFixed" type="boolean" line="1058"/>
            <method name="isInfeasible" type="boolean" line="1062">
                <scope line="1063">
                    <scope line="1064"/>
                </scope>
            </method>
            <method name="presolve" type="void" line="1071"/>
        </class>
    </source>