<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.optimisation.integer">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util.List"/>
        <import package="java.util.concurrent.Callable"/>
        <import package="java.util.concurrent.ExecutionException"/>
        <import package="java.util.concurrent.ForkJoinTask"/>
        <import package="java.util.concurrent.PriorityBlockingQueue"/>
        <import package="org.ojalgo.OjAlgoUtils"/>
        <import package="org.ojalgo.concurrent.DaemonPoolExecutor"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.netio.BasicLogger"/>
        <import package="org.ojalgo.optimisation.ExpressionsBasedModel"/>
        <import package="org.ojalgo.optimisation.Optimisation"/>
        <import package="org.ojalgo.optimisation.Variable"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <class name="NewIntegerSolver" line="44">
            <extends class="IntegerSolver"/>
            <javadoc line="44">
                IntegerSolver                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="NodeWorker" line="51">
                <implements interface="Callable">
                    <type_params>
                        <type_param name="Boolean"/>
                    </type_params>
                </implements>
                <method name="call" type="Boolean" line="53">
                    <declaration name="tmpNodeKey" type="NodeKey" line="55"/>
                    <scope line="57"/>
                </method>
            </class>
            <method name="make" type="NewIntegerSolver" line="65">
                <params>
                    <param name="model" type="ExpressionsBasedModel"/>
                </params>
            </method>
            <declaration name="myNodesToTry" type="PriorityBlockingQueue&amp;lt;NodeKey&amp;gt;" line="69"/>
            <declaration name="myIntegerIndeces" type="int[]" line="71"/>
            <declaration name="myIntegerSignificances" type="double[]" line="72"/>
            <declaration name="normal" type="boolean" line="74"/>
            <method name="NewIntegerSolver" type="constructor" line="76">
                <params>
                    <param name="model" type="ExpressionsBasedModel"/>
                    <param name="solverOptions" type="Options"/>
                </params>
                <comment line="91">
                    options.debug = System.out;                    
                </comment>
                <declaration name="tmpIntegerVariables" type="List&amp;lt;Variable&amp;gt;" line="80"/>
                <scope line="85">
                    <declaration name="tmpVariable" type="Variable" line="86"/>
                </scope>
            </method>
            <method name="solve" type="Result" line="93">
                <params>
                    <param name="kickStarter" type="Result"/>
                </params>
                <comment line="104">
                    final boolean tmpNormalExit = DaemonPoolExecutor.INSTANCE.invoke(tmpTask);                    
                </comment>
                <comment line="106">
                    this.add(new NodeKey(this.getModel()));                    
                </comment>
                <scope line="95"/>
                <declaration name="retVal" type="Optimisation.Result" line="107"/>
                <scope line="109">
                    <scope line="111"/>
                    <scope line="113"/>
                </scope>
                <scope line="117">
                    <scope line="119"/>
                    <scope line="121"/>
                </scope>
            </method>
            <method name="toString" type="String" line="130"/>
            <method name="extractSolution" type="MatrixStore&lt;Double&gt;" line="135"/>
            <method name="initialise" type="boolean" line="140">
                <params>
                    <param name="kickStart" type="Result"/>
                </params>
            </method>
            <method name="needsAnotherIteration" type="boolean" line="145"/>
            <method name="validate" type="boolean" line="150">
                <declaration name="retVal" type="boolean" line="152"/>
                <scope line="155">
                    <scope line="157"/>
                </scope>
                <scope line="162"/>
            </method>
            <method name="add" type="boolean" line="171">
                <params>
                    <param name="e" type="NodeKey"/>
                </params>
            </method>
            <method name="compute" type="void" line="175">
                <params>
                    <param name="nodeKey" type="NodeKey"/>
                </params>
                <comment line="209">
                    This should not be possible. There is a bug somewhere.                    
                </comment>
                <comment line="211">
                    IntegerSolver.this.logDebug(myKey.toString());
                                        IntegerSolver.this.logDebug(tmpModel.toString());
                                        final GenericSolver tmpDefaultSolver = tmpModel.getDefaultSolver();
                                        tmpDefaultSolver.solve();
                                        IntegerSolver.this.logDebug(tmpDefaultSolver.toString());                    
                </comment>
                <scope line="177"/>
                <scope line="183">
                    <scope line="184"/>
                </scope>
                <scope line="190">
                    <scope line="191"/>
                </scope>
                <declaration name="tmpModel" type="ExpressionsBasedModel" line="197"/>
                <declaration name="tmpResult" type="Optimisation.Result" line="198"/>
                <scope line="202">
                    <scope line="203"/>
                    <scope line="207"/>
                    <declaration name="tmpBranchIndex" type="int" line="218"/>
                    <declaration name="tmpSolutionValue" type="double" line="219"/>
                    <scope line="221">
                        <scope line="222"/>
                        <declaration name="tmpIntegerSolutionResult" type="Optimisation.Result" line="226"/>
                        <scope line="230"/>
                    </scope>
                    <scope line="238">
                        <scope line="239"/>
                        <declaration name="tmpVariableValue" type="double" line="243"/>
                        <scope line="245">
                            <scope line="246"/>
                            <declaration name="tmpLowerBranchTask" type="NodeKey" line="254"/>
                            <declaration name="tmpUpperBranchTask" type="NodeKey" line="255"/>
                            <scope line="260"/>
                        </scope>
                        <scope line="266">
                            <scope line="267"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="273">
                    <scope line="274"/>
                </scope>
            </method>
            <method name="countExploredNodes" type="int" line="282"/>
            <method name="getGlobalIndex" type="int" line="286">
                <params>
                    <param name="integerIndex" type="int"/>
                </params>
            </method>
            <method name="getIntegerIndeces" type="int[]" line="290"/>
            <method name="getIntegerSignificance" type="double" line="294">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getNextNode" type="NodeKey" line="298">
                <comment line="301">
                    if (myMinimisation) {
                                final NodeKey retVal = myNodesToTry.first();
                                myNodesToTry.remove(retVal);
                                return retVal;
                            } else {
                                final NodeKey retVal = myNodesToTry.last();
                                myNodesToTry.remove(retVal);
                                return retVal;
                            }                    
                </comment>
            </method>
            <method name="identifyNonIntegerVariable" type="int" line="311">
                <params>
                    <param name="nodeResult" type="Optimisation.Result"/>
                    <param name="nodeKey" type="NodeKey"/>
                </params>
                <comment line="323">
                    tmpImpact = (ONE - tmpFraction) * this.getIntegerSignificance(i);                    
                </comment>
                <declaration name="retVal" type="int" line="313"/>
                <declaration name="tmpFraction" type="double" line="315"/>
                <declaration name="tmpMaxImpact" type="double" line="316"/>
                <scope line="318">
                    <scope line="325"/>
                </scope>
            </method>
            <method name="isStillNodesToTry" type="boolean" line="335"/>
            <method name="makeNodeModel" type="ExpressionsBasedModel" line="339">
                <params>
                    <param name="nodeKey" type="NodeKey"/>
                </params>
                <declaration name="retVal" type="ExpressionsBasedModel" line="341"/>
                <declaration name="tmpIntegerIndeces" type="int[]" line="343"/>
                <scope line="344">
                    <declaration name="tmpLowerBound" type="BigDecimal" line="346"/>
                    <declaration name="tmpUpperBound" type="BigDecimal" line="347"/>
                    <declaration name="tmpVariable" type="Variable" line="349"/>
                    <declaration name="tmpValue" type="BigDecimal" line="353"/>
                    <scope line="354"/>
                </scope>
                <scope line="359">
                    <declaration name="tmpBestValue" type="double" line="360"/>
                    <declaration name="tmpGap" type="double" line="361"/>
                    <scope line="362"/>
                    <scope line="364"/>
                </scope>
            </method>
            <method name="pruneNodes" type="void" line="372">
                <params>
                    <param name="integerNode" type="NodeKey"/>
                </params>
                <comment line="374">
                    if (myMinimisation) {
                                final SortedSet&lt;NodeKey&gt; tmpTail = myNodesToTry.tailSet(integerNode);
                                myNodesToTry.removeAll(tmpTail);
                            } else {
                                final SortedSet&lt;NodeKey&gt; tmpHead = myNodesToTry.headSet(integerNode);
                                myNodesToTry.removeAll(tmpHead);
                            }                    
                </comment>
            </method>
            <method name="setIntegerSignificance" type="void" line="382">
                <params>
                    <param name="index" type="int"/>
                    <param name="significance" type="double"/>
                </params>
            </method>
            <method name="setup" type="void" line="386">
                <declaration name="retVal" type="NodeKey[]" line="390"/>
                <declaration name="tmpIntegerModel" type="ExpressionsBasedModel" line="392"/>
                <declaration name="tmpIntegerVariables" type="List&amp;lt;Variable&amp;gt;" line="393"/>
                <declaration name="myKey" type="NodeKey" line="394"/>
                <declaration name="tmpRootModel" type="ExpressionsBasedModel" line="397"/>
                <declaration name="tmpRootResult" type="Result" line="398"/>
                <declaration name="tmpRootValue" type="double" line="399"/>
                <declaration name="tmpMinValue" type="double" line="401"/>
                <declaration name="tmpMaxValue" type="double" line="402"/>
                <declaration name="tmpBestValue" type="double" line="404"/>
                <declaration name="tmpSignificance" type="double[]" line="406"/>
                <scope line="408">
                    <declaration name="tmpGlobalIndex" type="int" line="410"/>
                    <declaration name="tmpVariableValue" type="double" line="411"/>
                    <declaration name="tmpLowerNodeKey" type="NodeKey" line="413"/>
                    <declaration name="tmpLowerModel" type="ExpressionsBasedModel" line="414"/>
                    <declaration name="tmpLowerResult" type="Result" line="415"/>
                    <declaration name="tmpLowerValue" type="double" line="416"/>
                    <scope line="418"/>
                    <scope line="421"/>
                    <declaration name="tmpUpperNodeKey" type="NodeKey" line="425"/>
                    <declaration name="tmpUpperModel" type="ExpressionsBasedModel" line="426"/>
                    <declaration name="tmpUpperResult" type="Result" line="427"/>
                    <declaration name="tmpUpperValue" type="double" line="428"/>
                    <scope line="430"/>
                    <scope line="433"/>
                    <scope line="437">
                        <scope line="438"/>
                        <scope line="441"/>
                    </scope>
                    <scope line="447"/>
                </scope>
                <declaration name="tmpScale" type="double" line="452"/>
                <scope line="453"/>
                <scope line="456"/>
                <scope line="460"/>
                <scope line="463"/>
                <declaration name="tmpFuture" type="ForkJoinTask&amp;lt;Boolean&amp;gt;" line="467"/>
                <scope line="469"/>
                <scope line="471"/>
            </method>
        </class>
    </source>