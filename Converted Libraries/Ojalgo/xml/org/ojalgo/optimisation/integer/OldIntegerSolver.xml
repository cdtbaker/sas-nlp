<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.optimisation.integer">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="java.util.concurrent.RecursiveTask"/>
        <import package="org.ojalgo.concurrent.DaemonPoolExecutor"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.netio.BasicLogger"/>
        <import package="org.ojalgo.optimisation.ExpressionsBasedModel"/>
        <import package="org.ojalgo.optimisation.Optimisation"/>
        <import package="org.ojalgo.optimisation.Variable"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <class name="OldIntegerSolver" line="43">
            <extends class="IntegerSolver"/>
            <javadoc line="43">
                IntegerSolver                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="BranchAndBoundNodeTask" line="50">
                <extends class="RecursiveTask">
                    <type_params>
                        <type_param name="Boolean"/>
                    </type_params>
                </extends>
                <declaration name="myKey" type="NodeKey" line="52"/>
                <method name="BranchAndBoundNodeTask" type="constructor" line="54">
                    <params>
                        <param name="key" type="NodeKey"/>
                    </params>
                </method>
                <method name="BranchAndBoundNodeTask" type="constructor" line="61"/>
                <method name="toString" type="String" line="69"/>
                <method name="compute" type="Boolean" line="74">
                    <comment line="117">
                        This should not be possible. There is a bug somewhere.                        
                    </comment>
                    <comment line="119">
                        IntegerSolver.this.logDebug(myKey.toString());
                                            IntegerSolver.this.logDebug(tmpModel.toString());
                                            final GenericSolver tmpDefaultSolver = tmpModel.getDefaultSolver();
                                            tmpDefaultSolver.solve();
                                            IntegerSolver.this.logDebug(tmpDefaultSolver.toString());                        
                    </comment>
                    <comment line="165">
                        return tmpLowerBranchTask.compute() &amp;&amp; tmpUpperBranchTask.compute();                        
                    </comment>
                    <scope line="76"/>
                    <scope line="82">
                        <scope line="83"/>
                    </scope>
                    <scope line="89">
                        <scope line="90"/>
                    </scope>
                    <scope line="94"/>
                    <scope line="98">
                        <scope line="99"/>
                    </scope>
                    <declaration name="tmpModel" type="ExpressionsBasedModel" line="105"/>
                    <declaration name="tmpResult" type="Optimisation.Result" line="106"/>
                    <scope line="110">
                        <scope line="111"/>
                        <scope line="115"/>
                        <declaration name="tmpBranchIndex" type="int" line="126"/>
                        <declaration name="tmpSolutionValue" type="double" line="127"/>
                        <scope line="129">
                            <scope line="130"/>
                            <declaration name="tmpIntegerSolutionResult" type="Optimisation.Result" line="134"/>
                            <scope line="138"/>
                        </scope>
                        <scope line="145">
                            <scope line="146"/>
                            <declaration name="tmpVariableValue" type="double" line="150"/>
                            <scope line="152">
                                <scope line="153"/>
                                <declaration name="tmpLowerBranchTask" type="BranchAndBoundNodeTask" line="161"/>
                                <declaration name="tmpUpperBranchTask" type="BranchAndBoundNodeTask" line="162"/>
                                <declaration name="tmpLowerBranchValue" type="boolean" line="168"/>
                                <scope line="170"/>
                                <scope line="172"/>
                            </scope>
                            <scope line="178">
                                <scope line="179"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="185">
                        <scope line="186"/>
                    </scope>
                </method>
                <method name="createLowerBranch" type="BranchAndBoundNodeTask" line="194">
                    <params>
                        <param name="branchIndex" type="int"/>
                        <param name="nonIntegerValue" type="double"/>
                        <param name="nodeResult" type="Optimisation.Result"/>
                    </params>
                    <declaration name="tmpParentValue" type="double" line="196"/>
                    <declaration name="tmpKey" type="NodeKey" line="197"/>
                </method>
                <method name="createUpperBranch" type="BranchAndBoundNodeTask" line="202">
                    <params>
                        <param name="branchIndex" type="int"/>
                        <param name="nonIntegerValue" type="double"/>
                        <param name="nodeResult" type="Optimisation.Result"/>
                    </params>
                    <declaration name="tmpParentValue" type="double" line="204"/>
                    <declaration name="tmpKey" type="NodeKey" line="205"/>
                </method>
                <method name="getKey" type="NodeKey" line="210"/>
                <method name="getModel" type="ExpressionsBasedModel" line="214">
                    <declaration name="retVal" type="ExpressionsBasedModel" line="216"/>
                    <declaration name="tmpIntegerIndeces" type="int[]" line="218"/>
                    <scope line="219">
                        <declaration name="tmpLowerBound" type="BigDecimal" line="221"/>
                        <declaration name="tmpUpperBound" type="BigDecimal" line="222"/>
                        <declaration name="tmpVariable" type="Variable" line="224"/>
                        <declaration name="tmpValue" type="BigDecimal" line="228"/>
                        <scope line="229"/>
                    </scope>
                    <scope line="234">
                        <declaration name="tmpBestValue" type="double" line="235"/>
                        <declaration name="tmpGap" type="double" line="236"/>
                        <scope line="237"/>
                        <scope line="239"/>
                    </scope>
                </method>
            </class>
            <method name="make" type="OldIntegerSolver" line="249">
                <params>
                    <param name="model" type="ExpressionsBasedModel"/>
                </params>
            </method>
            <declaration name="myExploredNodes" type="Set&amp;lt;NodeKey&amp;gt;" line="253"/>
            <declaration name="myIntegerIndeces" type="int[]" line="254"/>
            <method name="OldIntegerSolver" type="constructor" line="256">
                <params>
                    <param name="model" type="ExpressionsBasedModel"/>
                    <param name="solverOptions" type="Options"/>
                </params>
                <comment line="270">
                    options.debug = System.out;                    
                </comment>
                <declaration name="tmpIntegerVariables" type="List&amp;lt;Variable&amp;gt;" line="260"/>
                <scope line="264">
                    <declaration name="tmpVariable" type="Variable" line="265"/>
                </scope>
            </method>
            <method name="solve" type="Result" line="272">
                <params>
                    <param name="kickStarter" type="Result"/>
                </params>
                <scope line="274"/>
                <declaration name="tmpNodeTask" type="BranchAndBoundNodeTask" line="280"/>
                <declaration name="tmpNormalExit" type="boolean" line="282"/>
                <declaration name="retVal" type="Optimisation.Result" line="284"/>
                <scope line="286">
                    <scope line="288"/>
                    <scope line="290"/>
                </scope>
                <scope line="294">
                    <scope line="296"/>
                    <scope line="298"/>
                </scope>
            </method>
            <method name="toString" type="String" line="307"/>
            <method name="extractSolution" type="MatrixStore&lt;Double&gt;" line="312"/>
            <method name="initialise" type="boolean" line="317">
                <params>
                    <param name="kickStart" type="Result"/>
                </params>
            </method>
            <method name="needsAnotherIteration" type="boolean" line="322"/>
            <method name="validate" type="boolean" line="327">
                <declaration name="retVal" type="boolean" line="329"/>
                <scope line="332">
                    <scope line="334"/>
                </scope>
                <scope line="339"/>
            </method>
            <method name="countExploredNodes" type="int" line="348"/>
            <method name="getGlobalIndex" type="int" line="352">
                <params>
                    <param name="integerIndex" type="int"/>
                </params>
            </method>
            <method name="getIntegerIndeces" type="int[]" line="356"/>
            <method name="identifyNonIntegerVariable" type="int" line="360">
                <params>
                    <param name="nodeResult" type="Optimisation.Result"/>
                    <param name="nodeKey" type="NodeKey"/>
                </params>
                <declaration name="tmpGradient" type="MatrixStore&amp;lt;Double&amp;gt;" line="362"/>
                <declaration name="retVal" type="int" line="364"/>
                <declaration name="tmpFraction" type="double" line="366"/>
                <declaration name="tmpMaxFraction" type="double" line="367"/>
                <scope line="369">
                    <scope line="374"/>
                </scope>
            </method>
            <method name="isExplored" type="boolean" line="384">
                <params>
                    <param name="aNodeTask" type="BranchAndBoundNodeTask"/>
                </params>
            </method>
            <method name="markAsExplored" type="void" line="388">
                <params>
                    <param name="aNodeTask" type="BranchAndBoundNodeTask"/>
                </params>
            </method>
        </class>
    </source>