<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.optimisation.integer">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="java.util.concurrent.RecursiveTask"/>
        <import package="java.util.concurrent.atomic.AtomicInteger"/>
        <import package="org.ojalgo.RecoverableCondition"/>
        <import package="org.ojalgo.array.SimpleArray"/>
        <import package="org.ojalgo.array.SimpleArray.Primitive"/>
        <import package="org.ojalgo.concurrent.DaemonPoolExecutor"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.optimisation.ExpressionsBasedModel"/>
        <import package="org.ojalgo.optimisation.GenericSolver"/>
        <import package="org.ojalgo.optimisation.Optimisation"/>
        <import package="org.ojalgo.optimisation.Variable"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <class name="IntegerSolver" line="22">
            <extends class="GenericSolver"/>
            <javadoc line="22">
                IntegerSolver                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="BranchAndBoundNodeTask" line="27">
                <extends class="RecursiveTask">
                    <type_params>
                        <type_param name="Boolean"/>
                    </type_params>
                </extends>
                <declaration name="myKey" type="NodeKey" line="28"/>
                <method name="BranchAndBoundNodeTask" type="constructor" line="29">
                    <params>
                        <param name="key" type="NodeKey"/>
                    </params>
                </method>
                <method name="BranchAndBoundNodeTask" type="constructor" line="33"/>
                <method name="toString" type="String" line="37"/>
                <method name="compute" type="Boolean" line="40">
                    <scope line="41"/>
                    <scope line="46">
                        <scope line="47"/>
                    </scope>
                    <scope line="52">
                        <scope line="53"/>
                    </scope>
                    <scope line="58"/>
                    <scope line="61">
                        <scope line="62"/>
                    </scope>
                    <declaration name="tmpModel" type="ExpressionsBasedModel" line="67"/>
                    <declaration name="tmpResult" type="Optimisation.Result" line="68"/>
                    <scope line="69"/>
                    <scope line="72"/>
                    <scope line="75">
                        <scope line="76"/>
                        <scope line="79"/>
                        <declaration name="tmpBranchIndex" type="int" line="83"/>
                        <declaration name="tmpSolutionValue" type="double" line="84"/>
                        <scope line="85">
                            <scope line="86"/>
                            <declaration name="tmpIntegerSolutionResult" type="Optimisation.Result" line="89"/>
                            <scope line="91"/>
                        </scope>
                        <scope line="95">
                            <scope line="96"/>
                            <declaration name="tmpVariableValue" type="double" line="99"/>
                            <scope line="100">
                                <scope line="101"/>
                                <declaration name="tmpLowerBranchTask" type="BranchAndBoundNodeTask" line="106"/>
                                <declaration name="tmpUpperBranchTask" type="BranchAndBoundNodeTask" line="107"/>
                                <declaration name="tmpLowerBranchValue" type="boolean" line="109"/>
                                <scope line="110"/>
                                <scope line="113"/>
                            </scope>
                            <scope line="119">
                                <scope line="120"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="126">
                        <scope line="127"/>
                    </scope>
                </method>
                <method name="createLowerBranch" type="BranchAndBoundNodeTask" line="133">
                    <params>
                        <param name="branchIndex" type="int"/>
                        <param name="nonIntegerValue" type="double"/>
                        <param name="nodeResult" type="Optimisation.Result"/>
                    </params>
                    <declaration name="tmpParentValue" type="double" line="134"/>
                    <declaration name="tmpKey" type="NodeKey" line="135"/>
                </method>
                <method name="createUpperBranch" type="BranchAndBoundNodeTask" line="138">
                    <params>
                        <param name="branchIndex" type="int"/>
                        <param name="nonIntegerValue" type="double"/>
                        <param name="nodeResult" type="Optimisation.Result"/>
                    </params>
                    <declaration name="tmpParentValue" type="double" line="139"/>
                    <declaration name="tmpKey" type="NodeKey" line="140"/>
                </method>
                <method name="getKey" type="NodeKey" line="143"/>
                <method name="getModel" type="ExpressionsBasedModel" line="146">
                    <declaration name="retVal" type="ExpressionsBasedModel" line="147"/>
                    <declaration name="tmpIntegerIndeces" type="int[]" line="148"/>
                    <scope line="149">
                        <declaration name="tmpLowerBound" type="BigDecimal" line="150"/>
                        <declaration name="tmpUpperBound" type="BigDecimal" line="151"/>
                        <declaration name="tmpVariable" type="Variable" line="152"/>
                        <declaration name="tmpValue" type="BigDecimal" line="155"/>
                        <scope line="156"/>
                    </scope>
                    <scope line="160">
                        <declaration name="tmpBestValue" type="double" line="161"/>
                        <declaration name="tmpGap" type="double" line="162"/>
                        <scope line="163"/>
                        <scope line="166"/>
                    </scope>
                </method>
            </class>
            <class name="NodeStatistics" line="173">
                <declaration name="myTruncated" type="AtomicInteger" line="174"/>
                <declaration name="myAbandoned" type="AtomicInteger" line="175"/>
                <declaration name="myInfeasible" type="AtomicInteger" line="176"/>
                <declaration name="myFailed" type="AtomicInteger" line="177"/>
                <declaration name="myExhausted" type="AtomicInteger" line="178"/>
                <declaration name="myBranched" type="AtomicInteger" line="179"/>
                <javadoc line="180">
                    Node never evaluated (sub/node problem never solved)                    
                </javadoc>
                <method name="abandoned" type="boolean" line="183"/>
                <javadoc line="187">
                    Node evaluated, but solution not integer. Estimate still possible to find better integer solution. Created 2
                      new branches.                    
                </javadoc>
                <method name="branched" type="boolean" line="191"/>
                <javadoc line="195">
                    Node evaluated, but solution not integer. Estimate NOT possible to find better integer solution.                    
                </javadoc>
                <method name="exhausted" type="boolean" line="198"/>
                <method name="failed" type="boolean" line="202">
                    <params>
                        <param name="state" type="boolean"/>
                    </params>
                </method>
                <method name="feasible" type="boolean" line="206"/>
                <method name="infeasible" type="boolean" line="210">
                    <params>
                        <param name="state" type="boolean"/>
                    </params>
                </method>
                <method name="truncated" type="boolean" line="214">
                    <params>
                        <param name="state" type="boolean"/>
                    </params>
                </method>
                <method name="getCreated" type="int" line="218"/>
                <method name="getEvaluated" type="int" line="221"/>
            </class>
            <class name="RootTask" line="225">
                <extends class="RecursiveTask">
                    <type_params>
                        <type_param name="Boolean"/>
                    </type_params>
                </extends>
                <method name="compute" type="Boolean" line="226">
                    <declaration name="tmpIntegerModel" type="ExpressionsBasedModel" line="227"/>
                    <declaration name="tmpRootKey" type="NodeKey" line="228"/>
                    <declaration name="tmpRelaxedModel" type="ExpressionsBasedModel" line="229"/>
                    <declaration name="tmpVariables" type="List&lt;Variable&gt;" line="230"/>
                    <scope line="231">
                        <declaration name="tmpVariable" type="Variable" line="232"/>
                    </scope>
                    <scope line="235"/>
                </method>
            </class>
            <class name="Subtask" line="240">
                <extends class="RecursiveTask">
                    <type_params>
                        <type_param name="Boolean"/>
                    </type_params>
                </extends>
                <method name="compute" type="Boolean" line="241"/>
            </class>
            <method name="make" type="IntegerSolver" line="245">
                <params>
                    <param name="model" type="ExpressionsBasedModel"/>
                </params>
            </method>
            <declaration name="myBestResultSoFar" type="Optimisation.Result" line="248"/>
            <declaration name="myExploredNodes" type="Set&lt;NodeKey&gt;" line="249"/>
            <declaration name="myIntegerIndeces" type="int[]" line="250"/>
            <declaration name="myIntegerSolutionsCount" type="AtomicInteger" line="251"/>
            <declaration name="myMinimisation" type="boolean" line="252"/>
            <method name="IntegerSolver" type="constructor" line="253">
                <params>
                    <param name="model" type="ExpressionsBasedModel"/>
                    <param name="solverOptions" type="Options"/>
                </params>
                <declaration name="tmpIntegerVariables" type="List&lt;Variable&gt;" line="256"/>
                <scope line="258">
                    <declaration name="tmpVariable" type="Variable" line="259"/>
                </scope>
            </method>
            <method name="solve" type="Result" line="263">
                <params>
                    <param name="kickStart" type="Result"/>
                </params>
                <scope line="264"/>
                <declaration name="tmpNodeTask" type="BranchAndBoundNodeTask" line="268"/>
                <declaration name="tmpNormalExit" type="boolean" line="269"/>
                <declaration name="retVal" type="Optimisation.Result" line="270"/>
                <scope line="271">
                    <scope line="272"/>
                    <scope line="275"/>
                </scope>
                <scope line="279">
                    <scope line="280"/>
                    <scope line="283"/>
                </scope>
            </method>
            <method name="toString" type="String" line="289"/>
            <method name="extractSolution" type="MatrixStore<Double>" line="292"/>
            <method name="initialise" type="boolean" line="295">
                <params>
                    <param name="kickStart" type="Result"/>
                </params>
            </method>
            <method name="needsAnotherIteration" type="boolean" line="298"/>
            <method name="validate" type="boolean" line="301">
                <declaration name="retVal" type="boolean" line="302"/>
                <scope line="304">
                    <scope line="305"/>
                </scope>
                <scope line="310"/>
            </method>
            <method name="countExploredNodes" type="int" line="316"/>
            <method name="countIntegerSolutions" type="int" line="319"/>
            <method name="getBestResultSoFar" type="Optimisation.Result" line="322">
                <scope line="323"/>
                <scope line="326">
                    <declaration name="tmpSate" type="State" line="327"/>
                    <declaration name="tmpValue" type="double" line="328"/>
                    <declaration name="tmpMakePrimitive" type="Primitive" line="329"/>
                </scope>
            </method>
            <method name="getGlobalIndex" type="int" line="333">
                <params>
                    <param name="integerIndex" type="int"/>
                </params>
            </method>
            <method name="getIntegerIndeces" type="int[]" line="336"/>
            <method name="identifyNonIntegerVariable" type="int" line="339">
                <params>
                    <param name="nodeResult" type="Optimisation.Result"/>
                    <param name="nodeKey" type="NodeKey"/>
                </params>
                <declaration name="tmpGradient" type="MatrixStore&lt;Double&gt;" line="340"/>
                <declaration name="retVal" type="int" line="341"/>
                <declaration name="tmpFraction" type="double" line="342"/>
                <declaration name="tmpMaxFraction" type="double" line="343"/>
                <scope line="344">
                    <scope line="347"/>
                </scope>
            </method>
            <method name="isExplored" type="boolean" line="354">
                <params>
                    <param name="aNodeTask" type="BranchAndBoundNodeTask"/>
                </params>
            </method>
            <method name="isGoodEnoughToContinueBranching" type="boolean" line="357">
                <params>
                    <param name="nonIntegerValue" type="double"/>
                </params>
                <scope line="358"/>
                <scope line="361">
                    <declaration name="tmpBestIntegerValue" type="double" line="362"/>
                    <declaration name="tmpMipGap" type="double" line="363"/>
                    <scope line="364"/>
                    <scope line="367"/>
                </scope>
            </method>
            <method name="isIntegerSolutionFound" type="boolean" line="372"/>
            <method name="isIterationNecessary" type="boolean" line="375">
                <scope line="376"/>
                <scope line="379">
                    <declaration name="tmpIterations" type="int" line="380"/>
                    <declaration name="tmpTime" type="long" line="381"/>
                </scope>
            </method>
            <method name="markAsExplored" type="void" line="385">
                <params>
                    <param name="aNodeTask" type="BranchAndBoundNodeTask"/>
                </params>
            </method>
            <method name="storeResult" type="void" line="388">
                <params>
                    <param name="result" type="Optimisation.Result"/>
                </params>
                <scope line="389"/>
                <scope line="392"/>
                <scope line="395"/>
            </method>
        </class>
    </source>