<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.optimisation.linear">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore.Factory"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.matrix.store.ZeroStore"/>
        <import package="org.ojalgo.optimisation.BaseSolver"/>
        <import package="org.ojalgo.optimisation.Expression"/>
        <import package="org.ojalgo.optimisation.Expression.Index"/>
        <import package="org.ojalgo.optimisation.ExpressionsBasedModel"/>
        <import package="org.ojalgo.optimisation.Optimisation"/>
        <import package="org.ojalgo.optimisation.Variable"/>
        <import package="org.ojalgo.type.IndexSelector"/>
        <class name="LinearSolver" line="18">
            <extends class="BaseSolver"/>
            <javadoc line="18">
                LinearSolver solves optimisation problems of the (LP standard) form:
                  &lt;p&gt;
                  min [C]&lt;sup&gt;T&lt;/sup&gt;[X]&lt;br&gt;
                  when [AE][X] == [BE]&lt;br&gt;
                  and 0 &lt;= [X]&lt;br&gt;
                  and 0 &lt;= [BE]
                  &lt;/p&gt;
                  A Linear Program is in Standard Form if:
                  &lt;ul&gt;
                  &lt;li&gt;All constraints are equality constraints.&lt;/li&gt;
                  &lt;li&gt;All variables have a nonnegativity sign restriction.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Further it is required here that the constraint right hand sides are
                  nonnegative (nonnegative elements in [BE]).
                  &lt;/p&gt;&lt;p&gt;
                  You construct instances by using the {@linkplain Builder} class. It
                  will return an appropriate subclass for you. It&apos;s recommended that
                  you first create a {@linkplain ExpressionsBasedModel} and feed that to the{@linkplain Builder}. Alternatively you can directly call{@linkplain ExpressionsBasedModel#getDefaultSolver()} or even{@linkplain ExpressionsBasedModel#minimise()} or{@linkplain ExpressionsBasedModel#maximise()} on the model.
                  &lt;/p&gt;                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="Builder" line="42">
                <extends class="AbstractBuilder">
                    <type_params>
                        <type_param name="LinearSolver.Builder"/>
                        <type_param name="LinearSolver"/>
                    </type_params>
                </extends>
                <method name="Builder" type="constructor" line="43">
                    <params>
                        <param name="C" type="MatrixStore<Double>"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="46"/>
                <method name="Builder" type="constructor" line="49">
                    <params>
                        <param name="matrices" type="BaseSolver.AbstractBuilder<LinearSolver.Builder,LinearSolver>"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="52">
                    <params>
                        <param name="aModel" type="ExpressionsBasedModel"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="56">
                    <params>
                        <param name="Q" type="MatrixStore<Double>"/>
                        <param name="C" type="MatrixStore<Double>"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="59">
                    <params>
                        <param name="aMtrxArr" type="MatrixStore<Double>[]"/>
                    </params>
                </method>
                <method name="build" type="LinearSolver" line="62">
                    <params>
                        <param name="options" type="Optimisation.Options"/>
                    </params>
                    <declaration name="tmpModel" type="ExpressionsBasedModel" line="63"/>
                </method>
                <method name="equalities" type="Builder" line="66">
                    <params>
                        <param name="AE" type="MatrixStore<Double>"/>
                        <param name="BE" type="MatrixStore<Double>"/>
                    </params>
                </method>
                <method name="objective" type="Builder" line="69">
                    <params>
                        <param name="C" type="MatrixStore<Double>"/>
                    </params>
                </method>
            </class>
            <declaration name="FACTORY" type="Factory&lt;Double,PrimitiveDenseStore&gt;" line="73"/>
            <method name="make" type="LinearSolver" line="74">
                <params>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                </params>
                <declaration name="tmpBuilder" type="LinearSolver.Builder" line="75"/>
            </method>
            <method name="copy" type="void" line="78">
                <params>
                    <param name="sourceModel" type="ExpressionsBasedModel"/>
                    <param name="destinationBuilder" type="LinearSolver.Builder"/>
                </params>
                <declaration name="tmpMaximisation" type="boolean" line="79"/>
                <declaration name="tmpPosVariables" type="List&lt;Variable&gt;" line="80"/>
                <declaration name="tmpNegVariables" type="List&lt;Variable&gt;" line="81"/>
                <declaration name="tmpFixVariables" type="Set&lt;Index&gt;" line="82"/>
                <declaration name="tmpObjFunc" type="Expression" line="83"/>
                <declaration name="tmpExprsEq" type="List&lt;Expression&gt;" line="84"/>
                <declaration name="tmpExprsLo" type="List&lt;Expression&gt;" line="85"/>
                <declaration name="tmpExprsUp" type="List&lt;Expression&gt;" line="86"/>
                <declaration name="tmpVarsPosLo" type="List&lt;Variable&gt;" line="87"/>
                <declaration name="tmpVarsPosUp" type="List&lt;Variable&gt;" line="88"/>
                <declaration name="tmpVarsNegLo" type="List&lt;Variable&gt;" line="89"/>
                <declaration name="tmpVarsNegUp" type="List&lt;Variable&gt;" line="90"/>
                <declaration name="tmpConstraiCount" type="int" line="91"/>
                <declaration name="tmpProblVarCount" type="int" line="92"/>
                <declaration name="tmpSlackVarCount" type="int" line="93"/>
                <declaration name="tmpTotalVarCount" type="int" line="94"/>
                <declaration name="tmpBasis" type="int[]" line="95"/>
                <declaration name="tmpKickStarter" type="Optimisation.Result" line="96"/>
                <declaration name="tmpC" type="PhysicalStore&lt;Double&gt;" line="98"/>
                <declaration name="tmpAE" type="PhysicalStore&lt;Double&gt;" line="99"/>
                <declaration name="tmpBE" type="PhysicalStore&lt;Double&gt;" line="100"/>
                <declaration name="tmpPosVarsBaseIndex" type="int" line="103"/>
                <declaration name="tmpNegVarsBaseIndex" type="int" line="104"/>
                <declaration name="tmpSlaVarsBaseIndex" type="int" line="105"/>
                <scope line="106">
                    <declaration name="tmpFactor" type="double" line="107"/>
                    <declaration name="tmpPosInd" type="int" line="108"/>
                    <scope line="109"/>
                    <declaration name="tmpNegInd" type="int" line="112"/>
                    <scope line="113"/>
                </scope>
                <declaration name="tmpConstrBaseIndex" type="int" line="117"/>
                <declaration name="tmpCurrentSlackVarIndex" type="int" line="118"/>
                <declaration name="tmpExprsEqLength" type="int" line="119"/>
                <scope line="120">
                    <declaration name="tmpExpr" type="Expression" line="121"/>
                    <declaration name="tmpRHS" type="double" line="122"/>
                    <scope line="123">
                        <scope line="125">
                            <declaration name="tmpFactor" type="double" line="126"/>
                            <declaration name="tmpPosInd" type="int" line="127"/>
                            <scope line="128"/>
                            <declaration name="tmpNegInd" type="int" line="131"/>
                            <scope line="132"/>
                        </scope>
                    </scope>
                    <scope line="137">
                        <scope line="139">
                            <declaration name="tmpFactor" type="double" line="140"/>
                            <declaration name="tmpPosInd" type="int" line="141"/>
                            <scope line="142"/>
                            <declaration name="tmpNegInd" type="int" line="145"/>
                            <scope line="146"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="tmpExprsLoLength" type="int" line="153"/>
                <scope line="154">
                    <declaration name="tmpExpr" type="Expression" line="155"/>
                    <declaration name="tmpRHS" type="double" line="156"/>
                    <scope line="157">
                        <scope line="161">
                            <declaration name="tmpFactor" type="double" line="162"/>
                            <declaration name="tmpPosInd" type="int" line="163"/>
                            <scope line="164"/>
                            <declaration name="tmpNegInd" type="int" line="167"/>
                            <scope line="168"/>
                        </scope>
                    </scope>
                    <scope line="173">
                        <scope line="176">
                            <declaration name="tmpFactor" type="double" line="177"/>
                            <declaration name="tmpPosInd" type="int" line="178"/>
                            <scope line="179"/>
                            <declaration name="tmpNegInd" type="int" line="182"/>
                            <scope line="183"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="tmpExprsUpLength" type="int" line="190"/>
                <scope line="191">
                    <declaration name="tmpExpr" type="Expression" line="192"/>
                    <declaration name="tmpRHS" type="double" line="193"/>
                    <scope line="194">
                        <scope line="197">
                            <declaration name="tmpFactor" type="double" line="198"/>
                            <declaration name="tmpPosInd" type="int" line="199"/>
                            <scope line="200"/>
                            <declaration name="tmpNegInd" type="int" line="203"/>
                            <scope line="204"/>
                        </scope>
                    </scope>
                    <scope line="209">
                        <scope line="213">
                            <declaration name="tmpFactor" type="double" line="214"/>
                            <declaration name="tmpPosInd" type="int" line="215"/>
                            <scope line="216"/>
                            <declaration name="tmpNegInd" type="int" line="219"/>
                            <scope line="220"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="tmpVarsPosLoLength" type="int" line="227"/>
                <scope line="228">
                    <declaration name="tmpVar" type="Variable" line="229"/>
                    <declaration name="tmpKey" type="int" line="232"/>
                    <declaration name="tmpFactor" type="double" line="233"/>
                    <declaration name="tmpPosInd" type="int" line="234"/>
                    <scope line="235"/>
                    <declaration name="tmpNegInd" type="int" line="238"/>
                    <scope line="239"/>
                </scope>
                <declaration name="tmpVarsPosUpLength" type="int" line="244"/>
                <scope line="245">
                    <declaration name="tmpVar" type="Variable" line="246"/>
                    <declaration name="tmpKey" type="int" line="250"/>
                    <declaration name="tmpFactor" type="double" line="251"/>
                    <declaration name="tmpPosInd" type="int" line="252"/>
                    <scope line="253"/>
                    <declaration name="tmpNegInd" type="int" line="256"/>
                    <scope line="257"/>
                </scope>
                <declaration name="tmpVarsNegLoLength" type="int" line="262"/>
                <scope line="263">
                    <declaration name="tmpVar" type="Variable" line="264"/>
                    <declaration name="tmpKey" type="int" line="268"/>
                    <declaration name="tmpFactor" type="double" line="269"/>
                    <declaration name="tmpPosInd" type="int" line="270"/>
                    <scope line="271"/>
                    <declaration name="tmpNegInd" type="int" line="274"/>
                    <scope line="275"/>
                </scope>
                <declaration name="tmpVarsNegUpLength" type="int" line="280"/>
                <scope line="281">
                    <declaration name="tmpVar" type="Variable" line="282"/>
                    <declaration name="tmpKey" type="int" line="285"/>
                    <declaration name="tmpFactor" type="double" line="286"/>
                    <declaration name="tmpPosInd" type="int" line="287"/>
                    <scope line="288"/>
                    <declaration name="tmpNegInd" type="int" line="291"/>
                    <scope line="292"/>
                </scope>
            </method>
            <declaration name="mySelector" type="IndexSelector" line="299"/>
            <method name="LinearSolver" type="constructor" line="300">
                <params>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                    <param name="solverOptions" type="Optimisation.Options"/>
                    <param name="matrices" type="BaseSolver.AbstractBuilder<LinearSolver.Builder,LinearSolver>"/>
                </params>
            </method>
            <method name="countBasisDeficit" type="int" line="304"/>
            <method name="countConstraints" type="int" line="307"/>
            <method name="exclude" type="void" line="310">
                <params>
                    <param name="anIndexToExclude" type="int"/>
                </params>
            </method>
            <method name="excludeAll" type="void" line="313"/>
            <method name="getExcluded" type="int[]" line="316"/>
            <method name="getIncluded" type="int[]" line="319"/>
            <method name="hasConstraints" type="boolean" line="322"/>
            <method name="include" type="void" line="325">
                <params>
                    <param name="anIndexToInclude" type="int"/>
                </params>
            </method>
            <method name="include" type="void" line="328">
                <params>
                    <param name="someIndecesToInclude" type="int[]"/>
                </params>
            </method>
        </class>
    </source>