<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.optimisation.linear">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="org.ojalgo.access.AccessUtils"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore.Factory"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.matrix.store.ZeroStore"/>
        <import package="org.ojalgo.optimisation.BaseSolver"/>
        <import package="org.ojalgo.optimisation.Expression"/>
        <import package="org.ojalgo.optimisation.Expression.Index"/>
        <import package="org.ojalgo.optimisation.ExpressionsBasedModel"/>
        <import package="org.ojalgo.optimisation.Optimisation"/>
        <import package="org.ojalgo.optimisation.Variable"/>
        <import package="org.ojalgo.type.IndexSelector"/>
        <class name="LinearSolver" line="43">
            <extends class="BaseSolver"/>
            <javadoc line="43">
                LinearSolver solves optimisation problems of the (LP standard) form:
                  &lt;p&gt;
                  min [C]&lt;sup&gt;T&lt;/sup&gt;[X]&lt;br&gt;
                  when [AE][X] == [BE]&lt;br&gt;
                  and 0 &lt;= [X]&lt;br&gt;
                  and 0 &lt;= [BE]
                  &lt;/p&gt;
                  A Linear Program is in Standard Form if:
                  &lt;ul&gt;
                  &lt;li&gt;All constraints are equality constraints.&lt;/li&gt;
                  &lt;li&gt;All variables have a nonnegativity sign restriction.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Further it is required here that the constraint right hand sides are nonnegative (nonnegative elements in [BE]).
                  &lt;/p&gt;
                  &lt;p&gt;
                  You construct instances by using the {@linkplain Builder} class. It will return an appropriate subclass for you. It&apos;s
                  recommended that you first create a {@linkplain ExpressionsBasedModel} and feed that to the {@linkplain Builder}.
                  Alternatively you can directly call {@linkplain ExpressionsBasedModel#getDefaultSolver()} or even{@linkplain ExpressionsBasedModel#minimise()} or {@linkplain ExpressionsBasedModel#maximise()} on the model.
                  &lt;/p&gt;                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="Builder" line="70">
                <extends class="AbstractBuilder">
                    <type_params>
                        <type_param name="LinearSolver.Builder"/>
                        <type_param name="LinearSolver"/>
                    </type_params>
                </extends>
                <method name="Builder" type="constructor" line="72">
                    <params>
                        <param name="C" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="78"/>
                <method name="Builder" type="constructor" line="84">
                    <params>
                        <param name="matrices" type="BaseSolver.AbstractBuilder&lt;LinearSolver.Builder,LinearSolver&gt;"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="90">
                    <params>
                        <param name="aModel" type="ExpressionsBasedModel"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="97">
                    <params>
                        <param name="Q" type="MatrixStore&lt;Double&gt;"/>
                        <param name="C" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                </method>
                <method name="Builder" type="constructor" line="103">
                    <params>
                        <param name="aMtrxArr" type="MatrixStore&lt;Double&gt;[]"/>
                    </params>
                </method>
                <method name="build" type="LinearSolver" line="110">
                    <params>
                        <param name="options" type="Optimisation.Options"/>
                    </params>
                    <declaration name="tmpModel" type="ExpressionsBasedModel" line="114"/>
                </method>
                <method name="equalities" type="Builder" line="120">
                    <params>
                        <param name="AE" type="MatrixStore&lt;Double&gt;"/>
                        <param name="BE" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                </method>
                <method name="objective" type="Builder" line="125">
                    <params>
                        <param name="C" type="MatrixStore&lt;Double&gt;"/>
                    </params>
                </method>
            </class>
            <declaration name="FACTORY" type="Factory&amp;lt;Double,PrimitiveDenseStore&amp;gt;" line="130"/>
            <method name="make" type="LinearSolver" line="132">
                <params>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                </params>
                <declaration name="tmpBuilder" type="LinearSolver.Builder" line="134"/>
            </method>
            <method name="copy" type="void" line="139">
                <params>
                    <param name="sourceModel" type="ExpressionsBasedModel"/>
                    <param name="destinationBuilder" type="LinearSolver.Builder"/>
                </params>
                <declaration name="tmpMaximisation" type="boolean" line="141"/>
                <declaration name="tmpPosVariables" type="List&amp;lt;Variable&amp;gt;" line="143"/>
                <declaration name="tmpNegVariables" type="List&amp;lt;Variable&amp;gt;" line="144"/>
                <declaration name="tmpFixVariables" type="Set&amp;lt;Index&amp;gt;" line="145"/>
                <declaration name="tmpObjFunc" type="Expression" line="147"/>
                <declaration name="tmpExprsEq" type="List&amp;lt;Expression&amp;gt;" line="149"/>
                <declaration name="tmpExprsLo" type="List&amp;lt;Expression&amp;gt;" line="150"/>
                <declaration name="tmpExprsUp" type="List&amp;lt;Expression&amp;gt;" line="151"/>
                <declaration name="tmpVarsPosLo" type="List&amp;lt;Variable&amp;gt;" line="153"/>
                <declaration name="tmpVarsPosUp" type="List&amp;lt;Variable&amp;gt;" line="154"/>
                <declaration name="tmpVarsNegLo" type="List&amp;lt;Variable&amp;gt;" line="156"/>
                <declaration name="tmpVarsNegUp" type="List&amp;lt;Variable&amp;gt;" line="157"/>
                <declaration name="tmpConstraiCount" type="int" line="159"/>
                <declaration name="tmpProblVarCount" type="int" line="161"/>
                <declaration name="tmpSlackVarCount" type="int" line="162"/>
                <declaration name="tmpTotalVarCount" type="int" line="164"/>
                <declaration name="tmpBasis" type="int[]" line="166"/>
                <declaration name="tmpKickStarter" type="Optimisation.Result" line="168"/>
                <declaration name="tmpC" type="PhysicalStore&amp;lt;Double&amp;gt;" line="172"/>
                <declaration name="tmpAE" type="PhysicalStore&amp;lt;Double&amp;gt;" line="173"/>
                <declaration name="tmpBE" type="PhysicalStore&amp;lt;Double&amp;gt;" line="174"/>
                <declaration name="tmpPosVarsBaseIndex" type="int" line="179"/>
                <declaration name="tmpNegVarsBaseIndex" type="int" line="180"/>
                <declaration name="tmpSlaVarsBaseIndex" type="int" line="181"/>
                <scope line="183">
                    <declaration name="tmpFactor" type="double" line="185"/>
                    <declaration name="tmpPosInd" type="int" line="187"/>
                    <scope line="188"/>
                    <declaration name="tmpNegInd" type="int" line="192"/>
                    <scope line="193"/>
                </scope>
                <declaration name="tmpConstrBaseIndex" type="int" line="198"/>
                <declaration name="tmpCurrentSlackVarIndex" type="int" line="199"/>
                <declaration name="tmpExprsEqLength" type="int" line="201"/>
                <scope line="202">
                    <declaration name="tmpExpr" type="Expression" line="204"/>
                    <declaration name="tmpRHS" type="double" line="205"/>
                    <scope line="207">
                        <scope line="211">
                            <declaration name="tmpFactor" type="double" line="213"/>
                            <declaration name="tmpPosInd" type="int" line="215"/>
                            <scope line="216"/>
                            <declaration name="tmpNegInd" type="int" line="220"/>
                            <scope line="221"/>
                        </scope>
                    </scope>
                    <scope line="226">
                        <scope line="230">
                            <declaration name="tmpFactor" type="double" line="232"/>
                            <declaration name="tmpPosInd" type="int" line="234"/>
                            <scope line="235"/>
                            <declaration name="tmpNegInd" type="int" line="239"/>
                            <scope line="240"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="tmpExprsLoLength" type="int" line="248"/>
                <scope line="249">
                    <declaration name="tmpExpr" type="Expression" line="251"/>
                    <declaration name="tmpRHS" type="double" line="252"/>
                    <scope line="254">
                        <scope line="260">
                            <declaration name="tmpFactor" type="double" line="262"/>
                            <declaration name="tmpPosInd" type="int" line="264"/>
                            <scope line="265"/>
                            <declaration name="tmpNegInd" type="int" line="269"/>
                            <scope line="270"/>
                        </scope>
                    </scope>
                    <scope line="275">
                        <scope line="280">
                            <declaration name="tmpFactor" type="double" line="282"/>
                            <declaration name="tmpPosInd" type="int" line="284"/>
                            <scope line="285"/>
                            <declaration name="tmpNegInd" type="int" line="289"/>
                            <scope line="290"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="tmpExprsUpLength" type="int" line="298"/>
                <scope line="299">
                    <declaration name="tmpExpr" type="Expression" line="301"/>
                    <declaration name="tmpRHS" type="double" line="302"/>
                    <scope line="304">
                        <scope line="309">
                            <declaration name="tmpFactor" type="double" line="311"/>
                            <declaration name="tmpPosInd" type="int" line="313"/>
                            <scope line="314"/>
                            <declaration name="tmpNegInd" type="int" line="318"/>
                            <scope line="319"/>
                        </scope>
                    </scope>
                    <scope line="324">
                        <scope line="330">
                            <declaration name="tmpFactor" type="double" line="332"/>
                            <declaration name="tmpPosInd" type="int" line="334"/>
                            <scope line="335"/>
                            <declaration name="tmpNegInd" type="int" line="339"/>
                            <scope line="340"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="tmpVarsPosLoLength" type="int" line="348"/>
                <scope line="349">
                    <declaration name="tmpVar" type="Variable" line="351"/>
                    <declaration name="tmpKey" type="int" line="356"/>
                    <declaration name="tmpFactor" type="double" line="358"/>
                    <declaration name="tmpPosInd" type="int" line="360"/>
                    <scope line="361"/>
                    <declaration name="tmpNegInd" type="int" line="365"/>
                    <scope line="366"/>
                </scope>
                <declaration name="tmpVarsPosUpLength" type="int" line="373"/>
                <scope line="374">
                    <declaration name="tmpVar" type="Variable" line="376"/>
                    <declaration name="tmpKey" type="int" line="382"/>
                    <declaration name="tmpFactor" type="double" line="384"/>
                    <declaration name="tmpPosInd" type="int" line="386"/>
                    <scope line="387"/>
                    <declaration name="tmpNegInd" type="int" line="391"/>
                    <scope line="392"/>
                </scope>
                <declaration name="tmpVarsNegLoLength" type="int" line="399"/>
                <scope line="400">
                    <declaration name="tmpVar" type="Variable" line="402"/>
                    <declaration name="tmpKey" type="int" line="408"/>
                    <declaration name="tmpFactor" type="double" line="410"/>
                    <declaration name="tmpPosInd" type="int" line="412"/>
                    <scope line="413"/>
                    <declaration name="tmpNegInd" type="int" line="417"/>
                    <scope line="418"/>
                </scope>
                <declaration name="tmpVarsNegUpLength" type="int" line="425"/>
                <scope line="426">
                    <declaration name="tmpVar" type="Variable" line="428"/>
                    <declaration name="tmpKey" type="int" line="433"/>
                    <declaration name="tmpFactor" type="double" line="435"/>
                    <declaration name="tmpPosInd" type="int" line="437"/>
                    <scope line="438"/>
                    <declaration name="tmpNegInd" type="int" line="442"/>
                    <scope line="443"/>
                </scope>
            </method>
            <declaration name="mySelector" type="IndexSelector" line="453"/>
            <method name="LinearSolver" type="constructor" line="456">
                <params>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                    <param name="solverOptions" type="Optimisation.Options"/>
                    <param name="matrices" type="BaseSolver.AbstractBuilder&lt;LinearSolver.Builder,LinearSolver&gt;"/>
                </params>
            </method>
            <method name="countBasisDeficit" type="int" line="463"/>
            <method name="countConstraints" type="int" line="467"/>
            <method name="exclude" type="void" line="471">
                <params>
                    <param name="anIndexToExclude" type="int"/>
                </params>
            </method>
            <method name="excludeAll" type="void" line="475"/>
            <method name="getExcluded" type="int[]" line="479"/>
            <method name="getIncluded" type="int[]" line="483"/>
            <method name="hasConstraints" type="boolean" line="487"/>
            <method name="include" type="void" line="491">
                <params>
                    <param name="anIndexToInclude" type="int"/>
                </params>
            </method>
            <method name="include" type="void" line="495">
                <params>
                    <param name="someIndecesToInclude" type="int[]"/>
                </params>
            </method>
        </class>
    </source>