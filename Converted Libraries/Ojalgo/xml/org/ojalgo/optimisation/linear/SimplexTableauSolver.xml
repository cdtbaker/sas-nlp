<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.optimisation.linear">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="org.ojalgo.ProgrammingError"/>
        <import package="org.ojalgo.access.AccessUtils"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.function.aggregator.PrimitiveAggregator"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.matrix.store.ZeroStore"/>
        <import package="org.ojalgo.optimisation.Expression.Index"/>
        <import package="org.ojalgo.optimisation.ExpressionsBasedModel"/>
        <import package="org.ojalgo.optimisation.Optimisation"/>
        <import package="org.ojalgo.optimisation.Variable"/>
        <class name="SimplexTableauSolver" line="46">
            <extends class="LinearSolver"/>
            <javadoc line="46">
                SimplexTableauSolver                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="PivotPoint" line="53">
                <declaration name="myRowObjective" type="int" line="55"/>
                <declaration name="mySolver" type="SimplexTableauSolver" line="57"/>
                <declaration name="col" type="int" line="58"/>
                <declaration name="row" type="int" line="59"/>
                <method name="PivotPoint" type="constructor" line="62"/>
                <method name="PivotPoint" type="constructor" line="67">
                    <params>
                        <param name="solver" type="SimplexTableauSolver"/>
                    </params>
                </method>
                <method name="getColRHS" type="int" line="78"/>
                <method name="getRowObjective" type="int" line="82"/>
                <method name="isPhase1" type="boolean" line="86"/>
                <method name="isPhase2" type="boolean" line="90"/>
                <method name="objective" type="double" line="94"/>
                <method name="phase" type="int" line="98"/>
                <method name="reset" type="void" line="102"/>
                <method name="switchToPhase2" type="void" line="107"/>
            </class>
            <declaration name="myBasis" type="int[]" line="113"/>
            <declaration name="myPoint" type="PivotPoint" line="114"/>
            <declaration name="myTransposedTableau" type="PrimitiveDenseStore" line="115"/>
            <method name="SimplexTableauSolver" type="constructor" line="117">
                <params>
                    <param name="aModel" type="ExpressionsBasedModel"/>
                    <param name="solverOptions" type="Optimisation.Options"/>
                    <param name="matrices" type="LinearSolver.Builder"/>
                </params>
                <comment line="133">
                    myTransposedTableau = (PrimitiveDenseStore) tmpTableauBuilder.build().transpose().copy();                    
                </comment>
                <declaration name="tmpConstraintsCount" type="int" line="123"/>
                <declaration name="tmpTableauBuilder" type="MatrixStore.Builder&amp;lt;Double&amp;gt;" line="125"/>
                <scope line="128"/>
                <declaration name="tmpKickStarter" type="Result" line="135"/>
                <declaration name="tmpBasis" type="int[]" line="136"/>
                <scope line="137"/>
                <scope line="140"/>
                <scope line="144">
                    <scope line="145"/>
                </scope>
                <scope line="150"/>
            </method>
            <method name="solve" type="Result" line="155">
                <params>
                    <param name="kickStarter" type="Result"/>
                </params>
                <scope line="157">
                    <scope line="161"/>
                </scope>
            </method>
            <method name="countBasicArtificials" type="int" line="169">
                <declaration name="retVal" type="int" line="170"/>
                <declaration name="tmpLength" type="int" line="171"/>
                <scope line="172">
                    <scope line="173"/>
                </scope>
            </method>
            <method name="isTableauPrintable" type="boolean" line="180"/>
            <method name="logDebugTableau" type="void" line="184">
                <params>
                    <param name="aMessage" type="String"/>
                </params>
            </method>
            <javadoc line="189">
                Extract solution MatrixStore from the tableau                
            </javadoc>
            <method name="extractSolution" type="PhysicalStore&lt;Double&gt;" line="193">
                <declaration name="tmpCountVariables" type="int" line="195"/>
                <declaration name="tmpLength" type="int" line="199"/>
                <scope line="200">
                    <declaration name="tmpBasisIndex" type="int" line="201"/>
                    <scope line="202"/>
                </scope>
                <declaration name="tmpTableauSolution" type="PhysicalStore&amp;lt;Double&amp;gt;" line="206"/>
                <declaration name="tmpModel" type="ExpressionsBasedModel" line="208"/>
                <scope line="210">
                    <declaration name="tmpFreeVariables" type="List&amp;lt;Variable&amp;gt;" line="212"/>
                    <declaration name="tmpFixedVariables" type="Set&amp;lt;Index&amp;gt;" line="213"/>
                    <declaration name="tmpModelSolution" type="PrimitiveDenseStore" line="215"/>
                    <declaration name="tmpModelSolutionSize" type="int" line="217"/>
                    <declaration name="tmpVariablesSize" type="int" line="218"/>
                    <scope line="219"/>
                    <scope line="223"/>
                    <declaration name="tmpPositive" type="List&amp;lt;Variable&amp;gt;" line="227"/>
                    <scope line="228">
                        <declaration name="tmpIndex" type="int" line="229"/>
                    </scope>
                    <declaration name="tmpNegative" type="List&amp;lt;Variable&amp;gt;" line="233"/>
                    <scope line="234">
                        <declaration name="tmpIndex" type="int" line="235"/>
                    </scope>
                </scope>
                <scope line="241"/>
            </method>
            <method name="initialise" type="boolean" line="249">
                <params>
                    <param name="kickStart" type="Result"/>
                </params>
                <comment line="252">
                    TODO Auto-generated method stub                    
                </comment>
            </method>
            <method name="needsAnotherIteration" type="boolean" line="256">
                <scope line="258"/>
                <declaration name="retVal" type="boolean" line="262"/>
                <scope line="265">
                    <declaration name="tmpPhaseOneValue" type="double" line="267"/>
                    <scope line="269">
                        <scope line="271"/>
                    </scope>
                </scope>
                <scope line="282">
                    <scope line="286"/>
                    <scope line="290">
                        <scope line="292"/>
                        <scope line="297"/>
                    </scope>
                </scope>
                <scope line="304">
                    <scope line="306"/>
                    <scope line="311"/>
                </scope>
                <scope line="318">
                    <scope line="319"/>
                    <scope line="321"/>
                </scope>
            </method>
            <method name="validate" type="boolean" line="330">
                <declaration name="retVal" type="boolean" line="332"/>
            </method>
            <method name="findNextPivotCol" type="int" line="338">
                <comment line="356">
                    double tmpMinVal = ZERO;                    
                </comment>
                <declaration name="tmpExcluded" type="int[]" line="340"/>
                <scope line="342">
                    <scope line="343"/>
                    <scope line="346"/>
                </scope>
                <declaration name="retVal" type="int" line="351"/>
                <declaration name="tmpVal" type="double" line="353"/>
                <declaration name="tmpMinVal" type="double" line="354"/>
                <declaration name="tmpCol" type="int" line="357"/>
                <scope line="359">
                    <scope line="362">
                        <scope line="365"/>
                    </scope>
                </scope>
            </method>
            <method name="findNextPivotRow" type="int" line="374">
                <comment line="413">
                    Should always be &gt;=0.0, but very small numbers may &quot;accidentally&quot; get a negative sign.                    
                </comment>
                <declaration name="tmpNumerCol" type="int" line="376"/>
                <declaration name="tmpDenomCol" type="int" line="377"/>
                <scope line="379">
                    <scope line="380">
                        <declaration name="tmpNumerators" type="Array1D&amp;lt;Double&amp;gt;" line="381"/>
                        <declaration name="tmpDenominators" type="Array1D&amp;lt;Double&amp;gt;" line="382"/>
                        <declaration name="tmpRatios" type="Array1D&amp;lt;Double&amp;gt;" line="383"/>
                    </scope>
                    <scope line="387"/>
                </scope>
                <declaration name="retVal" type="int" line="392"/>
                <declaration name="tmpNumer" type="double" line="393"/>
                <declaration name="tmpMinRatio" type="double" line="394"/>
                <declaration name="tmpConstraintsCount" type="int" line="396"/>
                <declaration name="tmpPhase2" type="boolean" line="398"/>
                <scope line="400">
                    <declaration name="tmpSpecialCase" type="boolean" line="402"/>
                    <scope line="406"/>
                    <scope line="410">
                        <scope line="415">
                            <scope line="416"/>
                            <scope line="418"/>
                        </scope>
                        <scope line="421"/>
                    </scope>
                    <scope line="426">
                        <scope line="431"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="440">
                It&apos;s transposed for you!                
            </javadoc>
            <method name="getTableauElement" type="double" line="443">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                </params>
            </method>
            <method name="performIteration" type="void" line="447">
                <params>
                    <param name="aPivotRow" type="int"/>
                    <param name="aPivotCol" type="int"/>
                </params>
                <comment line="487">
                    Right-most column of the tableau                    
                </comment>
                <declaration name="tmpPivotElement" type="double" line="449"/>
                <declaration name="tmpPivotRHS" type="double" line="450"/>
                <scope line="452">
                    <scope line="453">
                        <declaration name="tmpPivotColVal" type="double" line="455"/>
                        <scope line="457"/>
                    </scope>
                </scope>
                <scope line="463"/>
                <scope line="465"/>
                <scope line="469"/>
                <declaration name="tmpOld" type="int" line="474"/>
                <scope line="475"/>
                <declaration name="tmpNew" type="int" line="478"/>
                <scope line="479"/>
                <scope line="484">
                    <declaration name="tmpRHS" type="Array1D&amp;lt;Double&amp;gt;" line="487"/>
                    <declaration name="tmpMinAggr" type="AggregatorFunction&amp;lt;Double&amp;gt;" line="489"/>
                    <declaration name="tmpMinVal" type="double" line="491"/>
                    <scope line="493">
                        <scope line="495"/>
                    </scope>
                    <declaration name="tmpModel" type="ExpressionsBasedModel" line="500"/>
                    <scope line="502">
                        <declaration name="tmpResult" type="Result" line="503"/>
                        <scope line="504">
                            <scope line="505"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="514">
                It&apos;s transposed for you, and only returns the part of the column corresponding to the constraints - not the
                  objective(s).                
            </javadoc>
            <method name="sliceTableauColumn" type="Array1D&lt;Double&gt;" line="518">
                <params>
                    <param name="aCol" type="int"/>
                </params>
            </method>
            <javadoc line="522">
                It&apos;s transposed for you, and only returns the part of the row corresponding to the variables - not the RHS.                
            </javadoc>
            <method name="sliceTableauRow" type="Array1D&lt;Double&gt;" line="525">
                <params>
                    <param name="aRow" type="int"/>
                </params>
            </method>
        </class>
    </source>