<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.array">
        <import package="java.util.RandomAccess"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.AccessUtils"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.ParameterFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.VoidFunction"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <class name="DenseArray" line="34">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <extends class="BasicArray">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </extends>
            <implements interface="RandomAccess"/>
            <javadoc line="34">
                Represents a single dense array - casts long indices to int.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="DenseFactory" line="41">
                <type_params>
                    <type_param name="N"/>
                </type_params>
                <extends class="ArrayFactory">
                    <type_params>
                        <type_param name="N"/>
                    </type_params>
                </extends>
                <method name="getElementSize" type="long" line="43"/>
                <method name="make" type="DenseArray&lt;N&gt;" line="45"/>
                <method name="makeStructuredZero" type="DenseArray&lt;N&gt;" line="48">
                    <params>
                        <param name="structure" type="long"/>
                    </params>
                </method>
                <method name="makeToBeFilled" type="DenseArray&lt;N&gt;" line="53">
                    <params>
                        <param name="structure" type="long"/>
                    </params>
                </method>
                <method name="zero" type="Scalar&lt;N&gt;" line="57"/>
            </class>
            <method name="DenseArray" type="constructor" line="61"/>
            <method name="count" type="long" line="65"/>
            <method name="doubleValue" type="double" line="69">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="fillAll" type="void" line="73">
                <params>
                    <param name="number" type="N"/>
                </params>
            </method>
            <method name="fillRange" type="void" line="77">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="number" type="N"/>
                </params>
            </method>
            <method name="get" type="N" line="81">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <javadoc line="85">
                @see Scalar#isAbsolute()                
            </javadoc>
            <method name="isAbsolute" type="boolean" line="88">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <javadoc line="92">
                @see Scalar#isInfinite()                
            </javadoc>
            <method name="isInfinite" type="boolean" line="95">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <javadoc line="99">
                @see Scalar#isNaN()                
            </javadoc>
            <method name="isNaN" type="boolean" line="102">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <javadoc line="106">
                @see Scalar#isPositive()                
            </javadoc>
            <method name="isPositive" type="boolean" line="109">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <javadoc line="113">
                @see Scalar#isReal()                
            </javadoc>
            <method name="isReal" type="boolean" line="116">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <javadoc line="120">
                @see Scalar#isZero()                
            </javadoc>
            <method name="isZero" type="boolean" line="123">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="set" type="void" line="127">
                <params>
                    <param name="index" type="long"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="set" type="void" line="131">
                <params>
                    <param name="index" type="long"/>
                    <param name="number" type="Number"/>
                </params>
            </method>
            <method name="doubleValue" type="double" line="135"/>
            <method name="exchange" type="void" line="137"/>
            <method name="exchange" type="void" line="140">
                <params>
                    <param name="firstA" type="long"/>
                    <param name="firstB" type="long"/>
                    <param name="step" type="long"/>
                    <param name="count" type="long"/>
                </params>
            </method>
            <method name="fill" type="void" line="144"/>
            <method name="fill" type="void" line="146"/>
            <method name="fill" type="void" line="148"/>
            <method name="fill" type="void" line="150"/>
            <method name="fill" type="void" line="153">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="step" type="long"/>
                    <param name="value" type="N"/>
                </params>
            </method>
            <method name="get" type="N" line="157"/>
            <method name="indexOfLargest" type="int" line="159"/>
            <method name="indexOfLargest" type="long" line="162">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="step" type="long"/>
                </params>
            </method>
            <method name="isAbsolute" type="boolean" line="166"/>
            <javadoc line="166">
                @see Scalar#isAbsolute()                
            </javadoc>
            <method name="isInfinite" type="boolean" line="171"/>
            <javadoc line="171">
                @see Scalar#isInfinite()                
            </javadoc>
            <method name="isNaN" type="boolean" line="176"/>
            <javadoc line="176">
                @see Scalar#isNaN()                
            </javadoc>
            <method name="isPositive" type="boolean" line="181"/>
            <javadoc line="181">
                @see Scalar#isPositive()                
            </javadoc>
            <method name="isReal" type="boolean" line="186"/>
            <javadoc line="186">
                @see Scalar#isReal()                
            </javadoc>
            <method name="isZero" type="boolean" line="191"/>
            <javadoc line="191">
                @see Scalar#isZero()                
            </javadoc>
            <method name="isZeros" type="boolean" line="196"/>
            <method name="isZeros" type="boolean" line="199">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="step" type="long"/>
                </params>
            </method>
            <method name="modify" type="void" line="203"/>
            <method name="modify" type="void" line="205"/>
            <method name="modify" type="void" line="207"/>
            <method name="modify" type="void" line="209"/>
            <method name="modify" type="void" line="211"/>
            <method name="modify" type="void" line="213"/>
            <method name="modify" type="void" line="215"/>
            <method name="modify" type="void" line="217"/>
            <method name="modify" type="void" line="219"/>
            <method name="modify" type="void" line="222">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="step" type="long"/>
                    <param name="left" type="Access1D&lt;N&gt;"/>
                    <param name="function" type="BinaryFunction&lt;N&gt;"/>
                </params>
            </method>
            <method name="modify" type="void" line="227">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="step" type="long"/>
                    <param name="function" type="BinaryFunction&lt;N&gt;"/>
                    <param name="right" type="Access1D&lt;N&gt;"/>
                </params>
            </method>
            <method name="modify" type="void" line="232">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="step" type="long"/>
                    <param name="function" type="UnaryFunction&lt;N&gt;"/>
                </params>
            </method>
            <method name="searchAscending" type="int" line="236"/>
            <javadoc line="236">
                @see java.util.Arrays#binarySearch(Object[],Object)                
                <see>
                    #sortAscending()                    
                </see>
                <throws>
                    UnsupportedOperationException if the this operation is not supported by this implementation/subclass                    
                </throws>
            </javadoc>
            <method name="set" type="void" line="243"/>
            <method name="set" type="void" line="245"/>
            <method name="size" type="int" line="247"/>
            <method name="sortAscending" type="void" line="249"/>
            <javadoc line="249">
                @see java.util.Arrays#sort(Object[])                
                <see>
                    #searchAscending(Number)                    
                </see>
                <throws>
                    UnsupportedOperationException if the this operation is not supported by this implementation/subclass                    
                </throws>
            </javadoc>
            <method name="visit" type="void" line="256"/>
            <method name="visit" type="void" line="258"/>
            <method name="visit" type="void" line="261">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="step" type="long"/>
                    <param name="visitor" type="VoidFunction&lt;N&gt;"/>
                </params>
            </method>
            <method name="newInstance" type="DenseArray&lt;N&gt;" line="265"/>
        </class>
    </source>