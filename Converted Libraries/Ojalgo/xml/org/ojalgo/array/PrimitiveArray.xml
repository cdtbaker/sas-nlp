<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.array">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="java.util.Arrays"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.BinaryFunction.FixedFirst"/>
        <import package="org.ojalgo.function.BinaryFunction.FixedSecond"/>
        <import package="org.ojalgo.function.ParameterFunction"/>
        <import package="org.ojalgo.function.ParameterFunction.FixedParameter"/>
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.VoidFunction"/>
        <import package="org.ojalgo.machine.JavaType"/>
        <import package="org.ojalgo.scalar.PrimitiveScalar"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <class name="PrimitiveArray" line="42">
            <extends class="DenseArray">
                <type_params>
                    <type_param name="Double"/>
                </type_params>
            </extends>
            <javadoc line="42">
                A one- and/or arbitrary-dimensional array of double.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <declaration name="ELEMENT_SIZE" type="long" line="49"/>
            <declaration name="FACTORY" type="DenseFactory&amp;lt;Double&amp;gt;" line="51"/>
            <anonymous_class line="51">
                <method name="getElementSize" type="long" line="54"/>
                <method name="make" type="DenseArray&lt;Double&gt;" line="59">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                </method>
                <method name="zero" type="Scalar&lt;Double&gt;" line="64"/>
            </anonymous_class>
            <method name="make" type="PrimitiveArray" line="70">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <method name="makeSegmented" type="SegmentedArray&lt;Double&gt;" line="74">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <method name="makeSegmented" type="SegmentedArray&lt;Double&gt;" line="78">
                <params>
                    <param name="count" type="long"/>
                </params>
            </method>
            <method name="wrap" type="PrimitiveArray" line="82">
                <params>
                    <param name="data" type="double[]"/>
                </params>
            </method>
            <method name="add" type="void" line="86">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="double"/>
                    <param name="right" type="double[]"/>
                </params>
                <scope line="87"/>
            </method>
            <method name="add" type="void" line="92">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="double[]"/>
                    <param name="right" type="double"/>
                </params>
                <scope line="93"/>
            </method>
            <method name="add" type="void" line="98">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="double[]"/>
                    <param name="right" type="double[]"/>
                </params>
                <scope line="99"/>
            </method>
            <method name="divide" type="void" line="104">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="double"/>
                    <param name="right" type="double[]"/>
                </params>
                <scope line="105"/>
            </method>
            <method name="divide" type="void" line="110">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="double[]"/>
                    <param name="right" type="double"/>
                </params>
                <scope line="111"/>
            </method>
            <method name="divide" type="void" line="116">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="double[]"/>
                    <param name="right" type="double[]"/>
                </params>
                <scope line="117"/>
            </method>
            <method name="multiply" type="void" line="122">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="double"/>
                    <param name="right" type="double[]"/>
                </params>
                <scope line="123"/>
            </method>
            <method name="multiply" type="void" line="128">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="double[]"/>
                    <param name="right" type="double"/>
                </params>
                <scope line="129"/>
            </method>
            <method name="multiply" type="void" line="134">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="double[]"/>
                    <param name="right" type="double[]"/>
                </params>
                <scope line="135"/>
            </method>
            <method name="negate" type="void" line="140">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="values" type="double[]"/>
                </params>
                <scope line="141"/>
            </method>
            <method name="subtract" type="void" line="146">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="double"/>
                    <param name="right" type="double[]"/>
                </params>
                <scope line="147"/>
            </method>
            <method name="subtract" type="void" line="152">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="double[]"/>
                    <param name="right" type="double"/>
                </params>
                <scope line="153"/>
            </method>
            <method name="subtract" type="void" line="158">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="double[]"/>
                    <param name="right" type="double[]"/>
                </params>
                <scope line="159"/>
            </method>
            <method name="exchange" type="void" line="164">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="firstA" type="int"/>
                    <param name="firstB" type="int"/>
                    <param name="step" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <declaration name="tmpIndexA" type="int" line="166"/>
                <declaration name="tmpIndexB" type="int" line="167"/>
                <declaration name="tmpVal" type="double" line="169"/>
                <scope line="171"/>
            </method>
            <method name="fill" type="void" line="182">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="values" type="Access1D&lt;?&gt;"/>
                </params>
                <declaration name="tmpLimit" type="int" line="183"/>
                <scope line="184"/>
            </method>
            <method name="fill" type="void" line="189">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="aVal" type="double"/>
                </params>
                <scope line="190"/>
            </method>
            <method name="invoke" type="void" line="196">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="Access1D&lt;Double&gt;"/>
                    <param name="function" type="BinaryFunction&lt;Double&gt;"/>
                    <param name="right" type="Access1D&lt;Double&gt;"/>
                </params>
                <scope line="197"/>
                <scope line="199">
                    <scope line="200"/>
                </scope>
            </method>
            <method name="invoke" type="void" line="207">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="Access1D&lt;Double&gt;"/>
                    <param name="function" type="BinaryFunction&lt;Double&gt;"/>
                    <param name="right" type="double"/>
                </params>
                <scope line="208"/>
                <scope line="210">
                    <scope line="211"/>
                </scope>
            </method>
            <method name="invoke" type="void" line="218">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="values" type="Access1D&lt;Double&gt;"/>
                    <param name="function" type="ParameterFunction&lt;Double&gt;"/>
                    <param name="aParam" type="int"/>
                </params>
                <scope line="219"/>
                <scope line="221">
                    <scope line="222"/>
                </scope>
            </method>
            <method name="invoke" type="void" line="229">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="values" type="Access1D&lt;Double&gt;"/>
                    <param name="function" type="UnaryFunction&lt;Double&gt;"/>
                </params>
                <scope line="230"/>
                <scope line="232">
                    <scope line="233"/>
                </scope>
            </method>
            <method name="invoke" type="void" line="240">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="double"/>
                    <param name="function" type="BinaryFunction&lt;Double&gt;"/>
                    <param name="right" type="Access1D&lt;Double&gt;"/>
                </params>
                <scope line="241"/>
                <scope line="243">
                    <scope line="244"/>
                </scope>
            </method>
            <method name="invoke" type="void" line="250">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="aVisitor" type="VoidFunction&lt;Double&gt;"/>
                </params>
                <scope line="251"/>
            </method>
            <method name="invoke" type="void" line="257">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="double"/>
                    <param name="function" type="BinaryFunction&lt;Double&gt;"/>
                    <param name="right" type="double[]"/>
                </params>
                <scope line="258"/>
                <scope line="260"/>
                <scope line="262"/>
                <scope line="264"/>
                <scope line="266">
                    <scope line="267"/>
                </scope>
            </method>
            <method name="invoke" type="void" line="274">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="double[]"/>
                    <param name="function" type="BinaryFunction&lt;Double&gt;"/>
                    <param name="right" type="double"/>
                </params>
                <scope line="275"/>
                <scope line="277"/>
                <scope line="279"/>
                <scope line="281"/>
                <scope line="283">
                    <scope line="284"/>
                </scope>
            </method>
            <method name="invoke" type="void" line="291">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="double[]"/>
                    <param name="function" type="BinaryFunction&lt;Double&gt;"/>
                    <param name="right" type="double[]"/>
                </params>
                <scope line="292"/>
                <scope line="294"/>
                <scope line="296"/>
                <scope line="298"/>
                <scope line="300">
                    <scope line="301"/>
                </scope>
            </method>
            <method name="invoke" type="void" line="308">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="values" type="double[]"/>
                    <param name="function" type="ParameterFunction&lt;Double&gt;"/>
                    <param name="aParam" type="int"/>
                </params>
                <scope line="309"/>
            </method>
            <method name="invoke" type="void" line="314">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="values" type="double[]"/>
                    <param name="function" type="UnaryFunction&lt;Double&gt;"/>
                </params>
                <scope line="315"/>
                <scope line="317">
                    <declaration name="tmpFunc" type="FixedFirst&amp;lt;Double&amp;gt;" line="318"/>
                </scope>
                <scope line="320">
                    <declaration name="tmpFunc" type="FixedSecond&amp;lt;Double&amp;gt;" line="321"/>
                </scope>
                <scope line="323">
                    <declaration name="tmpFunc" type="FixedParameter&amp;lt;Double&amp;gt;" line="324"/>
                </scope>
                <scope line="326">
                    <scope line="327"/>
                </scope>
            </method>
            <declaration name="data" type="double[]" line="333"/>
            <javadoc line="335">
                Array not copied! No checking!                
            </javadoc>
            <method name="PrimitiveArray" type="constructor" line="338">
                <params>
                    <param name="data" type="double[]"/>
                </params>
            </method>
            <method name="PrimitiveArray" type="constructor" line="345">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="353">
                <params>
                    <param name="anObj" type="Object"/>
                </params>
                <scope line="354"/>
                <scope line="356"/>
            </method>
            <method name="hashCode" type="int" line="362"/>
            <method name="copyOfData" type="double[]" line="366"/>
            <method name="doubleValue" type="double" line="371">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="exchange" type="void" line="376">
                <params>
                    <param name="firstA" type="int"/>
                    <param name="firstB" type="int"/>
                    <param name="step" type="int"/>
                    <param name="count" type="int"/>
                </params>
            </method>
            <method name="fill" type="void" line="380">
                <params>
                    <param name="values" type="Access1D&lt;?&gt;"/>
                </params>
            </method>
            <method name="fill" type="void" line="385">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="left" type="Access1D&lt;Double&gt;"/>
                    <param name="function" type="BinaryFunction&lt;Double&gt;"/>
                    <param name="right" type="Access1D&lt;Double&gt;"/>
                </params>
            </method>
            <method name="fill" type="void" line="390">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="left" type="Access1D&lt;Double&gt;"/>
                    <param name="function" type="BinaryFunction&lt;Double&gt;"/>
                    <param name="right" type="Double"/>
                </params>
            </method>
            <method name="fill" type="void" line="395">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="left" type="Double"/>
                    <param name="function" type="BinaryFunction&lt;Double&gt;"/>
                    <param name="right" type="Access1D&lt;Double&gt;"/>
                </params>
            </method>
            <method name="fill" type="void" line="400">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="value" type="Double"/>
                </params>
            </method>
            <method name="get" type="Double" line="405">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="indexOfLargest" type="int" line="410">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                </params>
                <declaration name="retVal" type="int" line="412"/>
                <declaration name="tmpLargest" type="double" line="413"/>
                <declaration name="tmpValue" type="double" line="414"/>
                <scope line="416">
                    <scope line="418"/>
                </scope>
            </method>
            <method name="isAbsolute" type="boolean" line="428">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="isInfinite" type="boolean" line="433">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="isNaN" type="boolean" line="438">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="isPositive" type="boolean" line="443">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="isReal" type="boolean" line="448">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="isZero" type="boolean" line="453">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="isZeros" type="boolean" line="458">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                </params>
                <declaration name="retVal" type="boolean" line="460"/>
                <scope line="462"/>
            </method>
            <method name="modify" type="void" line="470">
                <params>
                    <param name="index" type="int"/>
                    <param name="left" type="Access1D&lt;Double&gt;"/>
                    <param name="function" type="BinaryFunction&lt;Double&gt;"/>
                </params>
                <comment line="472">
                    TODO Auto-generated method stub                    
                </comment>
            </method>
            <method name="modify" type="void" line="476">
                <params>
                    <param name="index" type="int"/>
                    <param name="function" type="BinaryFunction&lt;Double&gt;"/>
                    <param name="right" type="Access1D&lt;Double&gt;"/>
                </params>
                <comment line="478">
                    TODO Auto-generated method stub                    
                </comment>
            </method>
            <method name="modify" type="void" line="482">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="Access1D&lt;Double&gt;"/>
                    <param name="function" type="BinaryFunction&lt;Double&gt;"/>
                </params>
            </method>
            <method name="modify" type="void" line="487">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="function" type="BinaryFunction&lt;Double&gt;"/>
                    <param name="right" type="Access1D&lt;Double&gt;"/>
                </params>
            </method>
            <method name="modify" type="void" line="492">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="function" type="BinaryFunction&lt;Double&gt;"/>
                    <param name="right" type="Double"/>
                </params>
            </method>
            <method name="modify" type="void" line="497">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="Double"/>
                    <param name="function" type="BinaryFunction&lt;Double&gt;"/>
                </params>
            </method>
            <method name="modify" type="void" line="502">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="function" type="ParameterFunction&lt;Double&gt;"/>
                    <param name="parameter" type="int"/>
                </params>
            </method>
            <method name="modify" type="void" line="507">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="function" type="UnaryFunction&lt;Double&gt;"/>
                </params>
            </method>
            <method name="modify" type="void" line="512">
                <params>
                    <param name="index" type="int"/>
                    <param name="function" type="UnaryFunction&lt;Double&gt;"/>
                </params>
            </method>
            <method name="searchAscending" type="int" line="517">
                <params>
                    <param name="aNmbr" type="Double"/>
                </params>
            </method>
            <method name="set" type="void" line="522">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="set" type="void" line="527">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="Number"/>
                </params>
            </method>
            <method name="size" type="int" line="532"/>
            <method name="sortAscending" type="void" line="537"/>
            <method name="toScalar" type="Scalar&lt;Double&gt;" line="542">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="visit" type="void" line="547">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="visitor" type="VoidFunction&lt;Double&gt;"/>
                </params>
            </method>
            <method name="visit" type="void" line="552">
                <params>
                    <param name="index" type="int"/>
                    <param name="visitor" type="VoidFunction&lt;Double&gt;"/>
                </params>
            </method>
            <method name="isPrimitive" type="boolean" line="557"/>
            <method name="newInstance" type="DenseArray&lt;Double&gt;" line="562">
                <params>
                    <param name="capacity" type="int"/>
                </params>
            </method>
        </class>
    </source>