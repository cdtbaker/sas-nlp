<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.array">
        <import package="java.math.BigDecimal"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.AccessUtils"/>
        <import package="org.ojalgo.access.Iterator1D"/>
        <import package="org.ojalgo.array.DenseArray.DenseFactory"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.VoidFunction"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.RationalNumber"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <class name="SparseArray" line="41">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <extends class="BasicArray">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </extends>
            <javadoc line="41">
                Sparse array - maps long indices to a localiced int.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="SparseFactory" line="48">
                <type_params>
                    <type_param name="N"/>
                </type_params>
                <extends class="ArrayFactory">
                    <type_params>
                        <type_param name="N"/>
                    </type_params>
                </extends>
                <method name="make" type="SparseArray&lt;N&gt;" line="50"/>
                <method name="makeStructuredZero" type="SparseArray&lt;N&gt;" line="53">
                    <params>
                        <param name="structure" type="long"/>
                    </params>
                </method>
                <method name="makeToBeFilled" type="SparseArray&lt;N&gt;" line="58">
                    <params>
                        <param name="structure" type="long"/>
                    </params>
                </method>
            </class>
            <declaration name="INITIAL_CAPACITY" type="int" line="64"/>
            <declaration name="BIG" type="SparseFactory&amp;lt;BigDecimal&amp;gt;" line="66"/>
            <anonymous_class line="66">
                <method name="make" type="SparseArray&lt;BigDecimal&gt;" line="69">
                    <params>
                        <param name="count" type="long"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="COMPLEX" type="SparseFactory&amp;lt;ComplexNumber&amp;gt;" line="75"/>
            <anonymous_class line="75">
                <method name="make" type="SparseArray&lt;ComplexNumber&gt;" line="78">
                    <params>
                        <param name="count" type="long"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE" type="SparseFactory&amp;lt;Double&amp;gt;" line="84"/>
            <anonymous_class line="84">
                <method name="make" type="SparseArray&lt;Double&gt;" line="87">
                    <params>
                        <param name="count" type="long"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="RATIONAL" type="SparseFactory&amp;lt;RationalNumber&amp;gt;" line="93"/>
            <anonymous_class line="93">
                <method name="make" type="SparseArray&lt;RationalNumber&gt;" line="96">
                    <params>
                        <param name="count" type="long"/>
                    </params>
                </method>
            </anonymous_class>
            <method name="makeBig" type="SparseArray&lt;BigDecimal&gt;" line="102">
                <params>
                    <param name="count" type="long"/>
                </params>
            </method>
            <method name="makeBigSegmented" type="SegmentedArray&lt;BigDecimal&gt;" line="106">
                <params>
                    <param name="count" type="long"/>
                </params>
            </method>
            <method name="makeComplex" type="SparseArray&lt;ComplexNumber&gt;" line="110">
                <params>
                    <param name="count" type="long"/>
                </params>
            </method>
            <method name="makeComplexSegmented" type="SegmentedArray&lt;ComplexNumber&gt;" line="114">
                <params>
                    <param name="count" type="long"/>
                </params>
            </method>
            <method name="makePrimitive" type="SparseArray&lt;Double&gt;" line="118">
                <params>
                    <param name="count" type="long"/>
                </params>
            </method>
            <method name="makePrimitiveSegmented" type="SegmentedArray&lt;Double&gt;" line="122">
                <params>
                    <param name="count" type="long"/>
                </params>
            </method>
            <method name="makeRational" type="SparseArray&lt;RationalNumber&gt;" line="126">
                <params>
                    <param name="count" type="long"/>
                </params>
            </method>
            <method name="makeRationalSegmented" type="SegmentedArray&lt;RationalNumber&gt;" line="130">
                <params>
                    <param name="count" type="long"/>
                </params>
            </method>
            <declaration name="myActualLength" type="int" line="134"/>
            <javadoc line="134">
                The actual number of nonzwero elements                
            </javadoc>
            <declaration name="myCount" type="long" line="138"/>
            <declaration name="myIndices" type="long[]" line="139"/>
            <declaration name="myValues" type="DenseArray&amp;lt;N&amp;gt;" line="140"/>
            <declaration name="myZeroNumber" type="N" line="142"/>
            <declaration name="myZeroScalar" type="Scalar&amp;lt;N&amp;gt;" line="143"/>
            <declaration name="myZeroValue" type="double" line="144"/>
            <method name="SparseArray" type="constructor" line="146">
                <params>
                    <param name="count" type="long"/>
                    <param name="factory" type="DenseFactory&lt;N&gt;"/>
                </params>
            </method>
            <method name="count" type="long" line="160"/>
            <method name="doubleValue" type="double" line="165">
                <params>
                    <param name="index" type="long"/>
                </params>
                <declaration name="tmpIndex" type="int" line="166"/>
                <scope line="167"/>
                <scope line="169"/>
            </method>
            <method name="fillAll" type="void" line="175">
                <params>
                    <param name="value" type="N"/>
                </params>
                <comment line="184">
                    Bad idea...                    
                </comment>
                <scope line="177"/>
                <scope line="181">
                    <declaration name="tmpSize" type="int" line="185"/>
                    <scope line="187"/>
                </scope>
            </method>
            <method name="fillRange" type="void" line="198">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="value" type="N"/>
                </params>
            </method>
            <method name="get" type="N" line="203">
                <params>
                    <param name="index" type="long"/>
                </params>
                <declaration name="tmpIndex" type="int" line="204"/>
                <scope line="205"/>
                <scope line="207"/>
            </method>
            <method name="isAbsolute" type="boolean" line="212">
                <params>
                    <param name="index" type="long"/>
                </params>
                <declaration name="tmpIndex" type="int" line="213"/>
                <scope line="214"/>
                <scope line="216"/>
            </method>
            <method name="isInfinite" type="boolean" line="221">
                <params>
                    <param name="index" type="long"/>
                </params>
                <declaration name="tmpIndex" type="int" line="222"/>
                <scope line="223"/>
                <scope line="225"/>
            </method>
            <method name="isNaN" type="boolean" line="230">
                <params>
                    <param name="index" type="long"/>
                </params>
                <declaration name="tmpIndex" type="int" line="231"/>
                <scope line="232"/>
                <scope line="234"/>
            </method>
            <method name="isPositive" type="boolean" line="239">
                <params>
                    <param name="index" type="long"/>
                </params>
                <declaration name="tmpIndex" type="int" line="240"/>
                <scope line="241"/>
                <scope line="243"/>
            </method>
            <method name="isReal" type="boolean" line="248">
                <params>
                    <param name="index" type="long"/>
                </params>
                <declaration name="tmpIndex" type="int" line="249"/>
                <scope line="250"/>
                <scope line="252"/>
            </method>
            <method name="isZero" type="boolean" line="257">
                <params>
                    <param name="index" type="long"/>
                </params>
                <declaration name="tmpIndex" type="int" line="258"/>
                <scope line="259"/>
                <scope line="261"/>
            </method>
            <method name="iterator" type="Iterator&lt;N&gt;" line="267"/>
            <method name="set" type="void" line="272">
                <params>
                    <param name="index" type="long"/>
                    <param name="value" type="double"/>
                </params>
                <comment line="278">
                    Existing value, just update                    
                </comment>
                <comment line="280">
                    values[tmpIndex] = value;                    
                </comment>
                <comment line="284">
                    Not existing value, insert new                    
                </comment>
                <comment line="291">
                    No need to grow the backing arrays                    
                </comment>
                <comment line="295">
                    values[i] = values[i - 1];                    
                </comment>
                <comment line="299">
                    values[tmpInsInd] = value;                    
                </comment>
                <comment line="305">
                    Needs to grow the backing arrays                    
                </comment>
                <declaration name="tmpIndex" type="int" line="274"/>
                <scope line="276"/>
                <scope line="282">
                    <declaration name="tmpOldIndeces" type="long[]" line="285"/>
                    <declaration name="tmpInsInd" type="int" line="287"/>
                    <scope line="289">
                        <scope line="292"/>
                    </scope>
                    <scope line="303">
                        <declaration name="tmpCapacity" type="int" line="306"/>
                        <declaration name="tmpIndices" type="long[]" line="307"/>
                        <declaration name="tmpValues" type="DenseArray&amp;lt;N&amp;gt;" line="308"/>
                        <scope line="310"/>
                        <scope line="316"/>
                        <scope line="320"/>
                    </scope>
                </scope>
            </method>
            <method name="set" type="void" line="332">
                <params>
                    <param name="index" type="long"/>
                    <param name="value" type="Number"/>
                </params>
                <comment line="338">
                    Existing value, just update                    
                </comment>
                <comment line="340">
                    values[tmpIndex] = value;                    
                </comment>
                <comment line="344">
                    Not existing value, insert new                    
                </comment>
                <comment line="351">
                    No need to grow the backing arrays                    
                </comment>
                <comment line="355">
                    values[i] = values[i - 1];                    
                </comment>
                <comment line="359">
                    values[tmpInsInd] = value;                    
                </comment>
                <comment line="365">
                    Needs to grow the backing arrays                    
                </comment>
                <comment line="373">
                    tmpValues[i] = values[i];                    
                </comment>
                <comment line="377">
                    tmpValues[tmpInsInd] = value;                    
                </comment>
                <comment line="381">
                    tmpValues[i + 1] = values[i];                    
                </comment>
                <declaration name="tmpIndex" type="int" line="334"/>
                <scope line="336"/>
                <scope line="342">
                    <declaration name="tmpOldIndeces" type="long[]" line="345"/>
                    <declaration name="tmpInsInd" type="int" line="347"/>
                    <scope line="349">
                        <scope line="352"/>
                    </scope>
                    <scope line="363">
                        <declaration name="tmpCapacity" type="int" line="366"/>
                        <declaration name="tmpIndices" type="long[]" line="367"/>
                        <declaration name="tmpValues" type="DenseArray&amp;lt;N&amp;gt;" line="368"/>
                        <scope line="370"/>
                        <scope line="378"/>
                        <scope line="384"/>
                    </scope>
                </scope>
            </method>
            <method name="exchange" type="void" line="396">
                <params>
                    <param name="firstA" type="long"/>
                    <param name="firstB" type="long"/>
                    <param name="step" type="long"/>
                    <param name="count" type="long"/>
                </params>
                <scope line="398">
                    <declaration name="tmpIndexA" type="long" line="400"/>
                    <declaration name="tmpIndexB" type="long" line="401"/>
                    <declaration name="tmpVal" type="double" line="403"/>
                    <scope line="405"/>
                </scope>
                <scope line="415">
                    <declaration name="tmpIndexA" type="long" line="417"/>
                    <declaration name="tmpIndexB" type="long" line="418"/>
                    <declaration name="tmpVal" type="N" line="420"/>
                    <scope line="422"/>
                </scope>
            </method>
            <method name="fill" type="void" line="435">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="step" type="long"/>
                    <param name="value" type="N"/>
                </params>
                <declaration name="tmpFirst" type="int" line="436"/>
                <scope line="437"/>
                <declaration name="tmpLimit" type="int" line="440"/>
                <scope line="441"/>
                <scope line="444">
                    <declaration name="tmpValue" type="double" line="445"/>
                    <scope line="446"/>
                </scope>
                <scope line="449">
                    <scope line="450"/>
                </scope>
            </method>
            <method name="indexOfLargest" type="long" line="457">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="step" type="long"/>
                </params>
                <declaration name="tmpVal" type="double" line="459"/>
                <declaration name="retVal" type="long" line="460"/>
                <scope line="462">
                    <declaration name="tmpIndex" type="long" line="463"/>
                    <scope line="464">
                        <scope line="465">
                            <scope line="466"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="isZeros" type="boolean" line="478">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="step" type="long"/>
                </params>
                <declaration name="retVal" type="boolean" line="480"/>
                <scope line="482">
                    <declaration name="tmpIndex" type="long" line="483"/>
                    <scope line="484">
                        <scope line="485"/>
                    </scope>
                </scope>
            </method>
            <method name="modify" type="void" line="495">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="step" type="long"/>
                    <param name="left" type="Access1D&lt;N&gt;"/>
                    <param name="function" type="BinaryFunction&lt;N&gt;"/>
                </params>
                <declaration name="tmpZeroValue" type="double" line="497"/>
                <scope line="499">
                    <scope line="501">
                        <declaration name="tmpIndex" type="long" line="502"/>
                        <scope line="503">
                            <scope line="504"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="510"/>
            </method>
            <method name="modify" type="void" line="517">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="step" type="long"/>
                    <param name="function" type="BinaryFunction&lt;N&gt;"/>
                    <param name="right" type="Access1D&lt;N&gt;"/>
                </params>
                <declaration name="tmpZeroValue" type="double" line="519"/>
                <scope line="521">
                    <scope line="523">
                        <declaration name="tmpIndex" type="long" line="524"/>
                        <scope line="525"/>
                    </scope>
                </scope>
                <scope line="530"/>
            </method>
            <method name="modify" type="void" line="537">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="step" type="long"/>
                    <param name="function" type="UnaryFunction&lt;N&gt;"/>
                </params>
                <declaration name="tmpZeroValue" type="double" line="539"/>
                <scope line="541">
                    <scope line="543">
                        <declaration name="tmpIndex" type="long" line="544"/>
                        <scope line="545"/>
                    </scope>
                </scope>
                <scope line="550"/>
            </method>
            <method name="toScalar" type="Scalar&lt;N&gt;" line="557">
                <params>
                    <param name="index" type="long"/>
                </params>
                <declaration name="tmpIndex" type="int" line="558"/>
                <scope line="559"/>
                <scope line="561"/>
            </method>
            <method name="visit" type="void" line="567">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="step" type="long"/>
                    <param name="visitor" type="VoidFunction&lt;N&gt;"/>
                </params>
                <declaration name="tmpOnlyOnce" type="boolean" line="568"/>
                <scope line="569">
                    <declaration name="tmpIndex" type="long" line="570"/>
                    <scope line="571"/>
                    <scope line="573"/>
                </scope>
            </method>
            <method name="densify" type="DenseArray&lt;N&gt;" line="580">
                <declaration name="retVal" type="DenseArray&amp;lt;N&amp;gt;" line="582"/>
                <scope line="584">
                    <scope line="585"/>
                </scope>
                <scope line="588">
                    <scope line="589"/>
                </scope>
            </method>
            <method name="index" type="int" line="597">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="isPrimitive" type="boolean" line="602"/>
        </class>
    </source>