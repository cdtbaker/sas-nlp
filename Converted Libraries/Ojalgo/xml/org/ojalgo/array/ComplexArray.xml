<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.array">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="java.util.Arrays"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.ParameterFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.VoidFunction"/>
        <import package="org.ojalgo.machine.MemoryEstimator"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <class name="ComplexArray" line="38">
            <extends class="DenseArray">
                <type_params>
                    <type_param name="ComplexNumber"/>
                </type_params>
            </extends>
            <javadoc line="38">
                A one- and/or arbitrary-dimensional array of {@linkplain org.ojalgo.scalar.ComplexNumber}.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <declaration name="ELEMENT_SIZE" type="long" line="45"/>
            <declaration name="FACTORY" type="DenseFactory&amp;lt;ComplexNumber&amp;gt;" line="47"/>
            <anonymous_class line="47">
                <method name="getElementSize" type="long" line="50"/>
                <method name="make" type="DenseArray&lt;ComplexNumber&gt;" line="55">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                </method>
                <method name="zero" type="Scalar&lt;ComplexNumber&gt;" line="60"/>
            </anonymous_class>
            <method name="make" type="ComplexArray" line="66">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <method name="makeSegmented" type="SegmentedArray&lt;ComplexNumber&gt;" line="70">
                <params>
                    <param name="count" type="long"/>
                </params>
            </method>
            <method name="wrap" type="ComplexArray" line="74">
                <params>
                    <param name="data" type="ComplexNumber[]"/>
                </params>
            </method>
            <method name="exchange" type="void" line="78">
                <params>
                    <param name="data" type="ComplexNumber[]"/>
                    <param name="firstA" type="int"/>
                    <param name="firstB" type="int"/>
                    <param name="step" type="int"/>
                    <param name="aCount" type="int"/>
                </params>
                <declaration name="tmpIndexA" type="int" line="80"/>
                <declaration name="tmpIndexB" type="int" line="81"/>
                <declaration name="tmpVal" type="ComplexNumber" line="83"/>
                <scope line="85"/>
            </method>
            <method name="fill" type="void" line="96">
                <params>
                    <param name="data" type="ComplexNumber[]"/>
                    <param name="value" type="Access1D&lt;?&gt;"/>
                </params>
                <declaration name="tmpLimit" type="int" line="97"/>
                <scope line="98"/>
            </method>
            <method name="fill" type="void" line="103">
                <params>
                    <param name="data" type="ComplexNumber[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="value" type="ComplexNumber"/>
                </params>
                <scope line="104"/>
            </method>
            <method name="invoke" type="void" line="110">
                <params>
                    <param name="data" type="ComplexNumber[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="Access1D&lt;ComplexNumber&gt;"/>
                    <param name="function" type="BinaryFunction&lt;ComplexNumber&gt;"/>
                    <param name="right" type="Access1D&lt;ComplexNumber&gt;"/>
                </params>
                <scope line="111"/>
            </method>
            <method name="invoke" type="void" line="117">
                <params>
                    <param name="data" type="ComplexNumber[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="Access1D&lt;ComplexNumber&gt;"/>
                    <param name="function" type="BinaryFunction&lt;ComplexNumber&gt;"/>
                    <param name="right" type="ComplexNumber"/>
                </params>
                <scope line="118"/>
            </method>
            <method name="invoke" type="void" line="124">
                <params>
                    <param name="data" type="ComplexNumber[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="value" type="Access1D&lt;ComplexNumber&gt;"/>
                    <param name="function" type="ParameterFunction&lt;ComplexNumber&gt;"/>
                    <param name="aParam" type="int"/>
                </params>
                <scope line="125"/>
            </method>
            <method name="invoke" type="void" line="131">
                <params>
                    <param name="data" type="ComplexNumber[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="value" type="Access1D&lt;ComplexNumber&gt;"/>
                    <param name="function" type="UnaryFunction&lt;ComplexNumber&gt;"/>
                </params>
                <scope line="132"/>
            </method>
            <method name="invoke" type="void" line="138">
                <params>
                    <param name="data" type="ComplexNumber[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="ComplexNumber"/>
                    <param name="function" type="BinaryFunction&lt;ComplexNumber&gt;"/>
                    <param name="right" type="Access1D&lt;ComplexNumber&gt;"/>
                </params>
                <scope line="139"/>
            </method>
            <method name="invoke" type="void" line="144">
                <params>
                    <param name="data" type="ComplexNumber[]"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="aVisitor" type="VoidFunction&lt;ComplexNumber&gt;"/>
                </params>
                <scope line="145"/>
            </method>
            <declaration name="data" type="ComplexNumber[]" line="150"/>
            <method name="ComplexArray" type="constructor" line="152">
                <params>
                    <param name="data" type="ComplexNumber[]"/>
                </params>
            </method>
            <method name="ComplexArray" type="constructor" line="159">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="168">
                <params>
                    <param name="anObj" type="Object"/>
                </params>
                <scope line="169"/>
                <scope line="171"/>
            </method>
            <method name="hashCode" type="int" line="177"/>
            <method name="copyOfData" type="ComplexNumber[]" line="181"/>
            <method name="doubleValue" type="double" line="186">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="exchange" type="void" line="191">
                <params>
                    <param name="firstA" type="int"/>
                    <param name="firstB" type="int"/>
                    <param name="step" type="int"/>
                    <param name="count" type="int"/>
                </params>
            </method>
            <method name="fill" type="void" line="195">
                <params>
                    <param name="value" type="Access1D&lt;?&gt;"/>
                </params>
            </method>
            <method name="fill" type="void" line="201">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="left" type="Access1D&lt;ComplexNumber&gt;"/>
                    <param name="function" type="BinaryFunction&lt;ComplexNumber&gt;"/>
                    <param name="right" type="Access1D&lt;ComplexNumber&gt;"/>
                </params>
            </method>
            <method name="fill" type="void" line="207">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="left" type="Access1D&lt;ComplexNumber&gt;"/>
                    <param name="function" type="BinaryFunction&lt;ComplexNumber&gt;"/>
                    <param name="right" type="ComplexNumber"/>
                </params>
            </method>
            <method name="fill" type="void" line="213">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="left" type="ComplexNumber"/>
                    <param name="function" type="BinaryFunction&lt;ComplexNumber&gt;"/>
                    <param name="right" type="Access1D&lt;ComplexNumber&gt;"/>
                </params>
            </method>
            <method name="fill" type="void" line="218">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="value" type="ComplexNumber"/>
                </params>
            </method>
            <method name="get" type="ComplexNumber" line="223">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="indexOfLargest" type="int" line="228">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                </params>
                <declaration name="retVal" type="int" line="230"/>
                <declaration name="tmpLargest" type="double" line="231"/>
                <declaration name="tmpValue" type="double" line="232"/>
                <scope line="234">
                    <scope line="236"/>
                </scope>
            </method>
            <method name="isAbsolute" type="boolean" line="246">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="isInfinite" type="boolean" line="251">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="isNaN" type="boolean" line="256">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="isPositive" type="boolean" line="261">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="isReal" type="boolean" line="266">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="isZero" type="boolean" line="271">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="isZeros" type="boolean" line="276">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                </params>
                <declaration name="retVal" type="boolean" line="278"/>
                <scope line="280"/>
            </method>
            <method name="modify" type="void" line="288">
                <params>
                    <param name="index" type="int"/>
                    <param name="left" type="Access1D&lt;ComplexNumber&gt;"/>
                    <param name="function" type="BinaryFunction&lt;ComplexNumber&gt;"/>
                </params>
                <comment line="290">
                    TODO Auto-generated method stub                    
                </comment>
            </method>
            <method name="modify" type="void" line="293">
                <params>
                    <param name="index" type="int"/>
                    <param name="function" type="BinaryFunction&lt;ComplexNumber&gt;"/>
                    <param name="right" type="Access1D&lt;ComplexNumber&gt;"/>
                </params>
                <comment line="295">
                    TODO Auto-generated method stub                    
                </comment>
            </method>
            <method name="modify" type="void" line="299">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="Access1D&lt;ComplexNumber&gt;"/>
                    <param name="function" type="BinaryFunction&lt;ComplexNumber&gt;"/>
                </params>
            </method>
            <method name="modify" type="void" line="305">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="function" type="BinaryFunction&lt;ComplexNumber&gt;"/>
                    <param name="right" type="Access1D&lt;ComplexNumber&gt;"/>
                </params>
            </method>
            <method name="modify" type="void" line="310">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="function" type="BinaryFunction&lt;ComplexNumber&gt;"/>
                    <param name="right" type="ComplexNumber"/>
                </params>
            </method>
            <method name="modify" type="void" line="315">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="left" type="ComplexNumber"/>
                    <param name="function" type="BinaryFunction&lt;ComplexNumber&gt;"/>
                </params>
            </method>
            <method name="modify" type="void" line="320">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="function" type="ParameterFunction&lt;ComplexNumber&gt;"/>
                    <param name="parameter" type="int"/>
                </params>
            </method>
            <method name="modify" type="void" line="325">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="function" type="UnaryFunction&lt;ComplexNumber&gt;"/>
                </params>
            </method>
            <method name="modify" type="void" line="330">
                <params>
                    <param name="index" type="int"/>
                    <param name="function" type="UnaryFunction&lt;ComplexNumber&gt;"/>
                </params>
            </method>
            <javadoc line="334">
                @see org.ojalgo.array.BasicArray#searchAscending(java.lang.Number)                
            </javadoc>
            <method name="searchAscending" type="int" line="338">
                <params>
                    <param name="value" type="ComplexNumber"/>
                </params>
            </method>
            <method name="set" type="void" line="343">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="set" type="void" line="348">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="Number"/>
                </params>
            </method>
            <method name="size" type="int" line="353"/>
            <method name="sortAscending" type="void" line="358"/>
            <method name="toScalar" type="ComplexNumber" line="363">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="visit" type="void" line="368">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="step" type="int"/>
                    <param name="visitor" type="VoidFunction&lt;ComplexNumber&gt;"/>
                </params>
            </method>
            <method name="visit" type="void" line="373">
                <params>
                    <param name="index" type="int"/>
                    <param name="visitor" type="VoidFunction&lt;ComplexNumber&gt;"/>
                </params>
            </method>
            <method name="isPrimitive" type="boolean" line="378"/>
            <method name="newInstance" type="DenseArray&lt;ComplexNumber&gt;" line="383">
                <params>
                    <param name="capacity" type="int"/>
                </params>
            </method>
        </class>
    </source>