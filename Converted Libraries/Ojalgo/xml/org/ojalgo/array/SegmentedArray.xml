<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.array">
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.OjAlgoUtils"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.AccessUtils"/>
        <import package="org.ojalgo.array.DenseArray.DenseFactory"/>
        <import package="org.ojalgo.array.SparseArray.SparseFactory"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.VoidFunction"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.RationalNumber"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <class name="SegmentedArray" line="39">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <extends class="BasicArray">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </extends>
            <javadoc line="39">
                Huge array - only deals with long indices. Delegates to its segments, localises indices for them.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="SegmentedFactory" line="46">
                <type_params>
                    <type_param name="N"/>
                </type_params>
                <extends class="ArrayFactory">
                    <type_params>
                        <type_param name="N"/>
                    </type_params>
                </extends>
                <method name="getDenseFactory" type="DenseArray.DenseFactory&lt;N&gt;" line="48"/>
                <method name="getSparseFactory" type="SparseArray.SparseFactory&lt;N&gt;" line="50"/>
                <method name="makeSegmented" type="SegmentedArray&lt;N&gt;" line="52">
                    <params>
                        <param name="segmentFactory" type="ArrayFactory&lt;N&gt;"/>
                        <param name="structure" type="long"/>
                    </params>
                    <comment line="57">
                        NumberOfUniformSegments                        
                    </comment>
                    <declaration name="tmpCount" type="long" line="54"/>
                    <declaration name="tmpNumberOfUniformSegments" type="int" line="56"/>
                    <declaration name="tmpUniformSegmentSize" type="long" line="57"/>
                    <declaration name="tmpMaxNumberOfSegments" type="long" line="59"/>
                    <scope line="61">
                        <declaration name="tmpNoS" type="long" line="62"/>
                        <declaration name="tmpSS" type="long" line="63"/>
                        <scope line="64"/>
                    </scope>
                    <declaration name="tmpCacheDim" type="long" line="70"/>
                    <declaration name="tmpUnits" type="long" line="71"/>
                    <scope line="72"/>
                    <declaration name="tmpShift" type="int" line="77"/>
                </method>
                <method name="makeStructuredZero" type="SegmentedArray&lt;N&gt;" line="83">
                    <params>
                        <param name="structure" type="long"/>
                    </params>
                </method>
                <method name="makeToBeFilled" type="SegmentedArray&lt;N&gt;" line="88">
                    <params>
                        <param name="structure" type="long"/>
                    </params>
                </method>
            </class>
            <declaration name="BIG" type="SegmentedFactory&amp;lt;BigDecimal&amp;gt;" line="94"/>
            <anonymous_class line="94">
                <method name="getDenseFactory" type="DenseFactory&lt;BigDecimal&gt;" line="97"/>
                <method name="getSparseFactory" type="SparseFactory&lt;BigDecimal&gt;" line="102"/>
            </anonymous_class>
            <declaration name="COMPLEX" type="SegmentedFactory&amp;lt;ComplexNumber&amp;gt;" line="108"/>
            <anonymous_class line="108">
                <method name="getDenseFactory" type="DenseFactory&lt;ComplexNumber&gt;" line="111"/>
                <method name="getSparseFactory" type="SparseFactory&lt;ComplexNumber&gt;" line="116"/>
            </anonymous_class>
            <declaration name="PRIMITIVE" type="SegmentedFactory&amp;lt;Double&amp;gt;" line="122"/>
            <anonymous_class line="122">
                <method name="getDenseFactory" type="DenseFactory&lt;Double&gt;" line="125"/>
                <method name="getSparseFactory" type="SparseFactory&lt;Double&gt;" line="130"/>
            </anonymous_class>
            <declaration name="RATIONAL" type="SegmentedFactory&amp;lt;RationalNumber&amp;gt;" line="136"/>
            <anonymous_class line="136">
                <method name="getDenseFactory" type="DenseFactory&lt;RationalNumber&gt;" line="139"/>
                <method name="getSparseFactory" type="SparseFactory&lt;RationalNumber&gt;" line="144"/>
            </anonymous_class>
            <method name="makeBigDense" type="SegmentedArray&lt;BigDecimal&gt;" line="150">
                <params>
                    <param name="count" type="long"/>
                </params>
            </method>
            <method name="makeBigSparse" type="SegmentedArray&lt;BigDecimal&gt;" line="154">
                <params>
                    <param name="count" type="long"/>
                </params>
            </method>
            <method name="makeComplexDense" type="SegmentedArray&lt;ComplexNumber&gt;" line="158">
                <params>
                    <param name="count" type="long"/>
                </params>
            </method>
            <method name="makeComplexSparse" type="SegmentedArray&lt;ComplexNumber&gt;" line="162">
                <params>
                    <param name="count" type="long"/>
                </params>
            </method>
            <method name="makePrimitiveDense" type="SegmentedArray&lt;Double&gt;" line="166">
                <params>
                    <param name="count" type="long"/>
                </params>
            </method>
            <method name="makePrimitiveSparse" type="SegmentedArray&lt;Double&gt;" line="170">
                <params>
                    <param name="count" type="long"/>
                </params>
            </method>
            <method name="makeRationalDense" type="SegmentedArray&lt;RationalNumber&gt;" line="174">
                <params>
                    <param name="count" type="long"/>
                </params>
            </method>
            <method name="makeRationalSparse" type="SegmentedArray&lt;RationalNumber&gt;" line="178">
                <params>
                    <param name="count" type="long"/>
                </params>
            </method>
            <declaration name="myIndexBits" type="int" line="182"/>
            <declaration name="myIndexMask" type="long" line="183"/>
            <declaration name="mySegments" type="BasicArray&amp;lt;N&amp;gt;[]" line="184"/>
            <declaration name="mySegmentSize" type="long" line="185"/>
            <javadoc line="185">
                All segments except the last one are assumed to (must) be of equal length. The last segment cannot be longer than
                  the others.                
            </javadoc>
            <method name="SegmentedArray" type="constructor" line="192">
                <params>
                    <param name="count" type="long"/>
                    <param name="indexBits" type="int"/>
                    <param name="segmentFactory" type="ArrayFactory&lt;N&gt;"/>
                </params>
                <comment line="197">
                    2^bits                    
                </comment>
                <declaration name="tmpSegmentSize" type="long" line="196"/>
                <declaration name="tmpNumberOfUniformSegments" type="int" line="198"/>
                <declaration name="tmpRemainder" type="long" line="199"/>
                <declaration name="tmpTotalNumberOfSegments" type="int" line="201"/>
                <scope line="204"/>
                <scope line="207"/>
            </method>
            <method name="count" type="long" line="218">
                <declaration name="tmpVal" type="int" line="219"/>
            </method>
            <method name="doubleValue" type="double" line="223">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="fillAll" type="void" line="227">
                <params>
                    <param name="value" type="N"/>
                </params>
                <scope line="228"/>
            </method>
            <method name="fillRange" type="void" line="233">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="value" type="N"/>
                </params>
                <declaration name="tmpFirstSegment" type="int" line="235"/>
                <declaration name="tmpLastSegemnt" type="int" line="236"/>
                <declaration name="tmpFirstInSegment" type="long" line="238"/>
                <scope line="240"/>
            </method>
            <method name="get" type="N" line="248">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="isAbsolute" type="boolean" line="252">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="isInfinite" type="boolean" line="256">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="isNaN" type="boolean" line="260">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="isPositive" type="boolean" line="264">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="isReal" type="boolean" line="268">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="isZero" type="boolean" line="272">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="set" type="void" line="276">
                <params>
                    <param name="index" type="long"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="set" type="void" line="280">
                <params>
                    <param name="index" type="long"/>
                    <param name="value" type="Number"/>
                </params>
            </method>
            <method name="exchange" type="void" line="285">
                <params>
                    <param name="firstA" type="long"/>
                    <param name="firstB" type="long"/>
                    <param name="step" type="long"/>
                    <param name="count" type="long"/>
                </params>
                <scope line="287">
                    <declaration name="tmpIndexA" type="long" line="289"/>
                    <declaration name="tmpIndexB" type="long" line="290"/>
                    <declaration name="tmpVal" type="double" line="292"/>
                    <scope line="294"/>
                </scope>
                <scope line="304">
                    <declaration name="tmpIndexA" type="long" line="306"/>
                    <declaration name="tmpIndexB" type="long" line="307"/>
                    <declaration name="tmpVal" type="N" line="309"/>
                    <scope line="311"/>
                </scope>
            </method>
            <method name="fill" type="void" line="324">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="step" type="long"/>
                    <param name="value" type="N"/>
                </params>
                <comment line="328">
                    Will use a continuous range of segements                    
                </comment>
                <scope line="326">
                    <declaration name="tmpFirstSegment" type="int" line="329"/>
                    <declaration name="tmpLastSegemnt" type="int" line="330"/>
                    <declaration name="tmpFirstInSegment" type="long" line="332"/>
                    <scope line="334">
                        <declaration name="tmpRemainder" type="long" line="336"/>
                    </scope>
                </scope>
                <scope line="341">
                    <declaration name="tmpValue" type="double" line="343"/>
                    <scope line="344"/>
                </scope>
                <scope line="348">
                    <scope line="350"/>
                </scope>
            </method>
            <method name="indexOfLargest" type="long" line="357">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="step" type="long"/>
                </params>
                <declaration name="tmpVal" type="double" line="359"/>
                <declaration name="retVal" type="long" line="360"/>
                <scope line="362">
                    <scope line="363"/>
                </scope>
            </method>
            <method name="isZeros" type="boolean" line="373">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="step" type="long"/>
                </params>
                <declaration name="retVal" type="boolean" line="374"/>
                <scope line="375"/>
            </method>
            <method name="modify" type="void" line="382">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="step" type="long"/>
                    <param name="left" type="Access1D&lt;N&gt;"/>
                    <param name="function" type="BinaryFunction&lt;N&gt;"/>
                </params>
                <scope line="383">
                    <scope line="384"/>
                </scope>
                <scope line="387">
                    <scope line="388"/>
                </scope>
            </method>
            <method name="modify" type="void" line="395">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="step" type="long"/>
                    <param name="function" type="BinaryFunction&lt;N&gt;"/>
                    <param name="right" type="Access1D&lt;N&gt;"/>
                </params>
                <scope line="396">
                    <scope line="397"/>
                </scope>
                <scope line="400">
                    <scope line="401"/>
                </scope>
            </method>
            <method name="modify" type="void" line="408">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="step" type="long"/>
                    <param name="function" type="UnaryFunction&lt;N&gt;"/>
                </params>
                <comment line="412">
                    Will use a continuous range of segements                    
                </comment>
                <scope line="410">
                    <declaration name="tmpFirstSegment" type="int" line="413"/>
                    <declaration name="tmpLastSegemnt" type="int" line="414"/>
                    <declaration name="tmpFirstInSegment" type="long" line="416"/>
                    <scope line="418">
                        <declaration name="tmpRemainder" type="long" line="420"/>
                    </scope>
                </scope>
                <scope line="425">
                    <scope line="427"/>
                </scope>
                <scope line="431">
                    <scope line="433"/>
                </scope>
            </method>
            <method name="toScalar" type="Scalar&lt;N&gt;" line="440">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="visit" type="void" line="445">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="step" type="long"/>
                    <param name="visitor" type="VoidFunction&lt;N&gt;"/>
                </params>
                <comment line="449">
                    Will use a continuous range of segements                    
                </comment>
                <scope line="447">
                    <declaration name="tmpFirstSegment" type="int" line="450"/>
                    <declaration name="tmpLastSegemnt" type="int" line="451"/>
                    <declaration name="tmpFirstInSegment" type="long" line="453"/>
                    <scope line="455">
                        <declaration name="tmpRemainder" type="long" line="457"/>
                    </scope>
                </scope>
                <scope line="462">
                    <scope line="464"/>
                </scope>
                <scope line="468">
                    <scope line="470"/>
                </scope>
            </method>
            <method name="isPrimitive" type="boolean" line="477"/>
        </class>
    </source>