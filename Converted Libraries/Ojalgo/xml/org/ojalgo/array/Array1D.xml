<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.array">
        <import package="java.io.Serializable"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util.AbstractList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.RandomAccess"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Iterator1D"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.ParameterFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.VoidFunction"/>
        <import package="org.ojalgo.random.RandomNumber"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.RationalNumber"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <class name="Array1D" line="44">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <extends class="AbstractList">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </extends>
            <implements interface="Access1D">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="Access1D.Elements"/>
            <implements interface="Access1D.Fillable">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="Access1D.Modifiable">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="Access1D.Visitable">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="RandomAccess"/>
            <implements interface="Serializable"/>
            <javadoc line="44">
                Array1D                
                <author>
                    apete                    
                </author>
            </javadoc>
            <interface name="Factory">
                <type_params>
                    <type_param name="N"/>
                </type_params>
                <implements interface="Access1D.Factory">
                    <type_params>
                        <type_param name="Array1D<N>"/>
                    </type_params>
                </implements>
                <method name="wrap" type="Array1D<N>" line="54"/>
            </interface>
            <declaration name="BIG" type="Array1D.Factory&lt;BigDecimal&gt;" line="58"/>
            <anonymous_class line="58">
                <method name="copy" type="Array1D<BigDecimal>" line="60">
                    <params>
                        <param name="source" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="62"/>
                    <declaration name="tmpArray" type="BigDecimal[]" line="64"/>
                    <scope line="65"/>
                </method>
                <method name="copy" type="Array1D<BigDecimal>" line="72">
                    <params>
                        <param name="source" type="double"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="74"/>
                    <declaration name="tmpArray" type="BigDecimal[]" line="76"/>
                    <scope line="77"/>
                </method>
                <method name="copy" type="Array1D<BigDecimal>" line="84">
                    <params>
                        <param name="source" type="List<? extends Number>"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="86"/>
                    <declaration name="tmpArray" type="BigDecimal[]" line="88"/>
                    <scope line="89"/>
                </method>
                <method name="copy" type="Array1D<BigDecimal>" line="96">
                    <params>
                        <param name="source" type="Number"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="98"/>
                    <declaration name="tmpArray" type="BigDecimal[]" line="100"/>
                    <scope line="101"/>
                </method>
                <method name="makeRandom" type="Array1D<BigDecimal>" line="108">
                    <params>
                        <param name="count" type="long"/>
                        <param name="distribution" type="RandomNumber"/>
                    </params>
                    <declaration name="tmpArray" type="BigDecimal[]" line="110"/>
                    <scope line="111"/>
                </method>
                <method name="makeZero" type="Array1D<BigDecimal>" line="118">
                    <params>
                        <param name="count" type="long"/>
                    </params>
                </method>
                <method name="wrap" type="Array1D<BigDecimal>" line="122">
                    <params>
                        <param name="aSimple" type="SimpleArray<BigDecimal>"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="COMPLEX" type="Array1D.Factory&lt;ComplexNumber&gt;" line="128"/>
            <anonymous_class line="128">
                <method name="copy" type="Array1D<ComplexNumber>" line="130">
                    <params>
                        <param name="source" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="132"/>
                    <declaration name="tmpArray" type="ComplexNumber[]" line="134"/>
                    <scope line="135"/>
                </method>
                <method name="copy" type="Array1D<ComplexNumber>" line="142">
                    <params>
                        <param name="source" type="double"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="144"/>
                    <declaration name="tmpArray" type="ComplexNumber[]" line="146"/>
                    <scope line="147"/>
                </method>
                <method name="copy" type="Array1D<ComplexNumber>" line="154">
                    <params>
                        <param name="source" type="List<? extends Number>"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="156"/>
                    <declaration name="tmpArray" type="ComplexNumber[]" line="158"/>
                    <scope line="159"/>
                </method>
                <method name="copy" type="Array1D<ComplexNumber>" line="166">
                    <params>
                        <param name="source" type="Number"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="168"/>
                    <declaration name="tmpArray" type="ComplexNumber[]" line="170"/>
                    <scope line="171"/>
                </method>
                <method name="makeRandom" type="Array1D<ComplexNumber>" line="178">
                    <params>
                        <param name="count" type="long"/>
                        <param name="distribution" type="RandomNumber"/>
                    </params>
                    <declaration name="tmpArray" type="ComplexNumber[]" line="180"/>
                    <scope line="181"/>
                </method>
                <method name="makeZero" type="Array1D<ComplexNumber>" line="188">
                    <params>
                        <param name="count" type="long"/>
                    </params>
                </method>
                <method name="wrap" type="Array1D<ComplexNumber>" line="192">
                    <params>
                        <param name="aSimple" type="SimpleArray<ComplexNumber>"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE" type="Array1D.Factory&lt;Double&gt;" line="198"/>
            <anonymous_class line="198">
                <method name="copy" type="Array1D<Double>" line="200">
                    <params>
                        <param name="source" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="202"/>
                    <declaration name="tmpArray" type="double[]" line="204"/>
                    <scope line="205"/>
                </method>
                <method name="copy" type="Array1D<Double>" line="212">
                    <params>
                        <param name="source" type="double"/>
                    </params>
                </method>
                <method name="copy" type="Array1D<Double>" line="216">
                    <params>
                        <param name="source" type="List<? extends Number>"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="218"/>
                    <declaration name="tmpArray" type="double[]" line="220"/>
                    <scope line="221"/>
                </method>
                <method name="copy" type="Array1D<Double>" line="228">
                    <params>
                        <param name="source" type="Number"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="230"/>
                    <declaration name="tmpArray" type="double[]" line="232"/>
                    <scope line="233"/>
                </method>
                <method name="makeRandom" type="Array1D<Double>" line="240">
                    <params>
                        <param name="count" type="long"/>
                        <param name="distribution" type="RandomNumber"/>
                    </params>
                    <declaration name="tmpArray" type="double[]" line="242"/>
                    <scope line="243"/>
                </method>
                <method name="makeZero" type="Array1D<Double>" line="250">
                    <params>
                        <param name="count" type="long"/>
                    </params>
                </method>
                <method name="wrap" type="Array1D<Double>" line="254">
                    <params>
                        <param name="aSimple" type="SimpleArray<Double>"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="RATIONAL" type="Array1D.Factory&lt;RationalNumber&gt;" line="260"/>
            <anonymous_class line="260">
                <method name="copy" type="Array1D<RationalNumber>" line="262">
                    <params>
                        <param name="source" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="264"/>
                    <declaration name="tmpArray" type="RationalNumber[]" line="266"/>
                    <scope line="267"/>
                </method>
                <method name="copy" type="Array1D<RationalNumber>" line="274">
                    <params>
                        <param name="source" type="double"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="276"/>
                    <declaration name="tmpArray" type="RationalNumber[]" line="278"/>
                    <scope line="279"/>
                </method>
                <method name="copy" type="Array1D<RationalNumber>" line="286">
                    <params>
                        <param name="source" type="List<? extends Number>"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="288"/>
                    <declaration name="tmpArray" type="RationalNumber[]" line="290"/>
                    <scope line="291"/>
                </method>
                <method name="copy" type="Array1D<RationalNumber>" line="298">
                    <params>
                        <param name="source" type="Number"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="300"/>
                    <declaration name="tmpArray" type="RationalNumber[]" line="302"/>
                    <scope line="303"/>
                </method>
                <method name="makeRandom" type="Array1D<RationalNumber>" line="310">
                    <params>
                        <param name="count" type="long"/>
                        <param name="distribution" type="RandomNumber"/>
                    </params>
                    <declaration name="tmpArray" type="RationalNumber[]" line="312"/>
                    <scope line="313"/>
                </method>
                <method name="makeZero" type="Array1D<RationalNumber>" line="320">
                    <params>
                        <param name="count" type="long"/>
                    </params>
                </method>
                <method name="wrap" type="Array1D<RationalNumber>" line="324">
                    <params>
                        <param name="aSimple" type="SimpleArray<RationalNumber>"/>
                    </params>
                </method>
            </anonymous_class>
            <method name="copyAndSort" type="T[]" line="331">
                <params>
                    <param name="anArray" type="Array1D<T>"/>
                </params>
                <declaration name="tmpLength" type="int" line="333"/>
                <declaration name="retVal" type="T[]" line="334"/>
                <scope line="336"/>
            </method>
            <declaration name="length" type="int" line="345"/>
            <declaration name="myDelegate" type="BasicArray&lt;N&gt;" line="347"/>
            <declaration name="myFirst" type="int" line="349"/>
            <declaration name="myLimit" type="int" line="350"/>
            <declaration name="myStep" type="int" line="351"/>
            <method name="Array1D" type="constructor" line="354"/>
            <method name="Array1D" type="constructor" line="358">
                <params>
                    <param name="aDelegate" type="BasicArray<N>"/>
                </params>
            </method>
            <method name="Array1D" type="constructor" line="362">
                <params>
                    <param name="aDelegate" type="BasicArray<N>"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="aStep" type="int"/>
                </params>
            </method>
            <method name="contains" type="boolean" line="376">
                <params>
                    <param name="anObj" type="Object"/>
                </params>
            </method>
            <method name="copy" type="Array1D<N>" line="381">
                <declaration name="retVal" type="BasicArray&lt;N&gt;" line="383"/>
                <scope line="385">
                    <scope line="389"/>
                </scope>
                <scope line="395">
                    <scope line="399"/>
                </scope>
                <scope line="405">
                    <scope line="409"/>
                </scope>
                <scope line="415"/>
            </method>
            <javadoc line="421">
                Creates a copy of this containing only the selected elements, in the specified order.                
            </javadoc>
            <method name="copy" type="Array1D<N>" line="425">
                <params>
                    <param name="indices" type="int"/>
                </params>
                <declaration name="retVal" type="BasicArray&lt;N&gt;" line="427"/>
                <declaration name="tmpLength" type="int" line="429"/>
                <scope line="431">
                    <scope line="435"/>
                </scope>
                <scope line="441">
                    <scope line="445"/>
                </scope>
                <scope line="451">
                    <scope line="455"/>
                </scope>
                <scope line="461"/>
            </method>
            <method name="count" type="long" line="467"/>
            <method name="doubleValue" type="double" line="471">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="fillAll" type="void" line="475">
                <params>
                    <param name="aNmbr" type="N"/>
                </params>
            </method>
            <method name="fillRange" type="void" line="479">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="value" type="N"/>
                </params>
                <declaration name="tmpFirst" type="int" line="480"/>
                <declaration name="tmpLimit" type="int" line="481"/>
            </method>
            <method name="get" type="N" line="486">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="get" type="N" line="490">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="getIndexOfLargestInRange" type="int" line="494">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                </params>
            </method>
            <method name="indexOf" type="int" line="499">
                <params>
                    <param name="anObj" type="Object"/>
                </params>
                <declaration name="tmpLength" type="int" line="500"/>
                <scope line="501">
                    <scope line="502">
                        <scope line="503"/>
                    </scope>
                </scope>
                <scope line="507">
                    <scope line="508">
                        <scope line="509"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="517">
                @see Scalar#isAbsolute()                
            </javadoc>
            <method name="isAbsolute" type="boolean" line="520">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="isAllZeros" type="boolean" line="524"/>
            <method name="isEmpty" type="boolean" line="529"/>
            <method name="isInfinite" type="boolean" line="533">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="isNaN" type="boolean" line="537">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <javadoc line="541">
                @see Scalar#isPositive()                
            </javadoc>
            <method name="isPositive" type="boolean" line="544">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="isRangeZeros" type="boolean" line="548">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                </params>
            </method>
            <javadoc line="552">
                @see Scalar#isReal()                
            </javadoc>
            <method name="isReal" type="boolean" line="555">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="isReal" type="boolean" line="559">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <javadoc line="563">
                @see Scalar#isZero()                
            </javadoc>
            <method name="isZero" type="boolean" line="566">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="isZero" type="boolean" line="570">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="iterator" type="Iterator<N>" line="575"/>
            <javadoc line="579">
                @deprecated v35 Use {@link #modifyAll(UnaryFunction)} instead                
            </javadoc>
            <method name="modifyAll" type="void" line="583">
                <params>
                    <param name="function" type="BinaryFunction<N>"/>
                    <param name="rightArg" type="N"/>
                </params>
            </method>
            <javadoc line="587">
                @deprecated v35 Use {@link #modifyAll(UnaryFunction)} instead                
            </javadoc>
            <method name="modifyAll" type="void" line="591">
                <params>
                    <param name="leftArg" type="N"/>
                    <param name="function" type="BinaryFunction<N>"/>
                </params>
            </method>
            <javadoc line="595">
                @deprecated v35 Use {@link #modifyAll(UnaryFunction)} instead                
            </javadoc>
            <method name="modifyAll" type="void" line="599">
                <params>
                    <param name="function" type="ParameterFunction<N>"/>
                    <param name="parameter" type="int"/>
                </params>
            </method>
            <method name="modifyAll" type="void" line="603">
                <params>
                    <param name="function" type="UnaryFunction<N>"/>
                </params>
            </method>
            <method name="modifyMatching" type="void" line="607">
                <params>
                    <param name="anArray" type="Access1D<N>"/>
                    <param name="function" type="BinaryFunction<N>"/>
                </params>
                <declaration name="tmpLength" type="int" line="608"/>
                <scope line="609">
                    <scope line="610"/>
                </scope>
                <scope line="613">
                    <scope line="614"/>
                </scope>
            </method>
            <method name="modifyMatching" type="void" line="620">
                <params>
                    <param name="function" type="BinaryFunction<N>"/>
                    <param name="anArray" type="Access1D<N>"/>
                </params>
                <declaration name="tmpLength" type="int" line="621"/>
                <scope line="622">
                    <scope line="623"/>
                </scope>
                <scope line="626">
                    <scope line="627"/>
                </scope>
            </method>
            <javadoc line="633">
                @deprecated v35 Use {@link #modifyRange(long,long,UnaryFunction)} instead                
            </javadoc>
            <method name="modifyRange" type="void" line="637">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="function" type="BinaryFunction<N>"/>
                    <param name="rightArg" type="N"/>
                </params>
            </method>
            <javadoc line="641">
                @deprecated v35 Use {@link #modifyRange(long,long,UnaryFunction)} instead                
            </javadoc>
            <method name="modifyRange" type="void" line="645">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="leftArg" type="N"/>
                    <param name="function" type="BinaryFunction<N>"/>
                </params>
            </method>
            <javadoc line="649">
                @deprecated v35 Use {@link #modifyRange(long,long,UnaryFunction)} instead                
            </javadoc>
            <method name="modifyRange" type="void" line="653">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="function" type="ParameterFunction<N>"/>
                    <param name="parameter" type="int"/>
                </params>
            </method>
            <method name="modifyRange" type="void" line="657">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="function" type="UnaryFunction<N>"/>
                </params>
                <declaration name="tmpFirst" type="int" line="658"/>
                <declaration name="tmpLimit" type="int" line="659"/>
            </method>
            <javadoc line="663">
                Assumes you have first called {@linkplain #sortAscending()}.                
            </javadoc>
            <method name="searchAscending" type="int" line="666">
                <params>
                    <param name="aKey" type="N"/>
                </params>
                <declaration name="tmpLength" type="int" line="668"/>
                <scope line="669">
                    <declaration name="tmpArray" type="Number[]" line="671"/>
                    <scope line="673"/>
                </scope>
                <scope line="679"/>
            </method>
            <javadoc line="684">
                Asssumes you have first called {@linkplain #sortDescending()}.                
            </javadoc>
            <method name="searchDescending" type="int" line="687">
                <params>
                    <param name="aKey" type="N"/>
                </params>
                <declaration name="tmpLength" type="int" line="689"/>
                <declaration name="tmpArray" type="Number[]" line="690"/>
                <scope line="692"/>
                <declaration name="tmpInd" type="int" line="696"/>
                <scope line="698"/>
                <scope line="700"/>
                <scope line="702"/>
            </method>
            <method name="set" type="N" line="708">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="Number"/>
                </params>
            </method>
            <method name="set" type="void" line="712">
                <params>
                    <param name="index" type="long"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="set" type="void" line="716">
                <params>
                    <param name="index" type="long"/>
                    <param name="value" type="Number"/>
                </params>
            </method>
            <method name="size" type="int" line="721"/>
            <method name="sortAscending" type="void" line="725">
                <declaration name="tmpLength" type="int" line="727"/>
                <scope line="728">
                    <declaration name="tmpArray" type="N[]" line="730"/>
                    <scope line="732"/>
                </scope>
                <scope line="735"/>
            </method>
            <method name="sortDescending" type="void" line="740">
                <declaration name="tmpArray" type="N[]" line="742"/>
                <declaration name="tmpLength" type="int" line="744"/>
                <scope line="745"/>
            </method>
            <method name="subList" type="Array1D<N>" line="751">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                </params>
            </method>
            <method name="toRawCopy" type="double[]" line="755">
                <declaration name="tmpLength" type="int" line="757"/>
                <declaration name="retVal" type="double[]" line="758"/>
                <scope line="760"/>
            </method>
            <method name="toScalar" type="Scalar<N>" line="767">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="visitAll" type="void" line="771">
                <params>
                    <param name="visitor" type="VoidFunction<N>"/>
                </params>
            </method>
            <method name="visitRange" type="void" line="775">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="visitor" type="VoidFunction<N>"/>
                </params>
                <declaration name="tmpFirst" type="int" line="776"/>
                <declaration name="tmpLimit" type="int" line="777"/>
            </method>
            <method name="getDelegate" type="BasicArray<N>" line="781"/>
        </class>
    </source>