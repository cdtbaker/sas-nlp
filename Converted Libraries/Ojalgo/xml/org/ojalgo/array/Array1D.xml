<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.array">
        <import package="java.io.Serializable"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util.AbstractList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.RandomAccess"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Iterator1D"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.ParameterFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.VoidFunction"/>
        <import package="org.ojalgo.random.RandomNumber"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.RationalNumber"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <class name="Array1D" line="20">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <extends class="AbstractList">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </extends>
            <implements interface="Access1D">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="Access1D.Elements"/>
            <implements interface="Access1D.Fillable">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="Access1D.Modifiable">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="Access1D.Visitable">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="RandomAccess"/>
            <implements interface="Serializable"/>
            <javadoc line="20">
                Array1D                
                <author>
                    apete                    
                </author>
            </javadoc>
            <interface name="Factory">
                <type_params>
                    <type_param name="N"/>
                </type_params>
                <implements interface="Access1D.Factory">
                    <type_params>
                        <type_param name="Array1D<N>"/>
                    </type_params>
                </implements>
                <method name="wrap" type="Array1D<N>" line="26"/>
            </interface>
            <declaration name="BIG" type="Array1D.Factory&lt;BigDecimal&gt;" line="28"/>
            <anonymous_class line="28">
                <method name="copy" type="Array1D<BigDecimal>" line="29">
                    <params>
                        <param name="source" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="30"/>
                    <declaration name="tmpArray" type="BigDecimal[]" line="31"/>
                    <scope line="32"/>
                </method>
                <method name="copy" type="Array1D<BigDecimal>" line="37">
                    <params>
                        <param name="source" type="double"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="38"/>
                    <declaration name="tmpArray" type="BigDecimal[]" line="39"/>
                    <scope line="40"/>
                </method>
                <method name="copy" type="Array1D<BigDecimal>" line="45">
                    <params>
                        <param name="source" type="List<? extends Number>"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="46"/>
                    <declaration name="tmpArray" type="BigDecimal[]" line="47"/>
                    <scope line="48"/>
                </method>
                <method name="copy" type="Array1D<BigDecimal>" line="53">
                    <params>
                        <param name="source" type="Number"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="54"/>
                    <declaration name="tmpArray" type="BigDecimal[]" line="55"/>
                    <scope line="56"/>
                </method>
                <method name="makeRandom" type="Array1D<BigDecimal>" line="61">
                    <params>
                        <param name="count" type="long"/>
                        <param name="distribution" type="RandomNumber"/>
                    </params>
                    <declaration name="tmpArray" type="BigDecimal[]" line="62"/>
                    <scope line="63"/>
                </method>
                <method name="makeZero" type="Array1D<BigDecimal>" line="68">
                    <params>
                        <param name="count" type="long"/>
                    </params>
                </method>
                <method name="wrap" type="Array1D<BigDecimal>" line="71">
                    <params>
                        <param name="aSimple" type="SimpleArray<BigDecimal>"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="COMPLEX" type="Array1D.Factory&lt;ComplexNumber&gt;" line="76"/>
            <anonymous_class line="76">
                <method name="copy" type="Array1D<ComplexNumber>" line="77">
                    <params>
                        <param name="source" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="78"/>
                    <declaration name="tmpArray" type="ComplexNumber[]" line="79"/>
                    <scope line="80"/>
                </method>
                <method name="copy" type="Array1D<ComplexNumber>" line="85">
                    <params>
                        <param name="source" type="double"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="86"/>
                    <declaration name="tmpArray" type="ComplexNumber[]" line="87"/>
                    <scope line="88"/>
                </method>
                <method name="copy" type="Array1D<ComplexNumber>" line="93">
                    <params>
                        <param name="source" type="List<? extends Number>"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="94"/>
                    <declaration name="tmpArray" type="ComplexNumber[]" line="95"/>
                    <scope line="96"/>
                </method>
                <method name="copy" type="Array1D<ComplexNumber>" line="101">
                    <params>
                        <param name="source" type="Number"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="102"/>
                    <declaration name="tmpArray" type="ComplexNumber[]" line="103"/>
                    <scope line="104"/>
                </method>
                <method name="makeRandom" type="Array1D<ComplexNumber>" line="109">
                    <params>
                        <param name="count" type="long"/>
                        <param name="distribution" type="RandomNumber"/>
                    </params>
                    <declaration name="tmpArray" type="ComplexNumber[]" line="110"/>
                    <scope line="111"/>
                </method>
                <method name="makeZero" type="Array1D<ComplexNumber>" line="116">
                    <params>
                        <param name="count" type="long"/>
                    </params>
                </method>
                <method name="wrap" type="Array1D<ComplexNumber>" line="119">
                    <params>
                        <param name="aSimple" type="SimpleArray<ComplexNumber>"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE" type="Array1D.Factory&lt;Double&gt;" line="124"/>
            <anonymous_class line="124">
                <method name="copy" type="Array1D<Double>" line="125">
                    <params>
                        <param name="source" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="126"/>
                    <declaration name="tmpArray" type="double[]" line="127"/>
                    <scope line="128"/>
                </method>
                <method name="copy" type="Array1D<Double>" line="133">
                    <params>
                        <param name="source" type="double"/>
                    </params>
                </method>
                <method name="copy" type="Array1D<Double>" line="136">
                    <params>
                        <param name="source" type="List<? extends Number>"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="137"/>
                    <declaration name="tmpArray" type="double[]" line="138"/>
                    <scope line="139"/>
                </method>
                <method name="copy" type="Array1D<Double>" line="144">
                    <params>
                        <param name="source" type="Number"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="145"/>
                    <declaration name="tmpArray" type="double[]" line="146"/>
                    <scope line="147"/>
                </method>
                <method name="makeRandom" type="Array1D<Double>" line="152">
                    <params>
                        <param name="count" type="long"/>
                        <param name="distribution" type="RandomNumber"/>
                    </params>
                    <declaration name="tmpArray" type="double[]" line="153"/>
                    <scope line="154"/>
                </method>
                <method name="makeZero" type="Array1D<Double>" line="159">
                    <params>
                        <param name="count" type="long"/>
                    </params>
                </method>
                <method name="wrap" type="Array1D<Double>" line="162">
                    <params>
                        <param name="aSimple" type="SimpleArray<Double>"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="RATIONAL" type="Array1D.Factory&lt;RationalNumber&gt;" line="167"/>
            <anonymous_class line="167">
                <method name="copy" type="Array1D<RationalNumber>" line="168">
                    <params>
                        <param name="source" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="169"/>
                    <declaration name="tmpArray" type="RationalNumber[]" line="170"/>
                    <scope line="171"/>
                </method>
                <method name="copy" type="Array1D<RationalNumber>" line="176">
                    <params>
                        <param name="source" type="double"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="177"/>
                    <declaration name="tmpArray" type="RationalNumber[]" line="178"/>
                    <scope line="179"/>
                </method>
                <method name="copy" type="Array1D<RationalNumber>" line="184">
                    <params>
                        <param name="source" type="List<? extends Number>"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="185"/>
                    <declaration name="tmpArray" type="RationalNumber[]" line="186"/>
                    <scope line="187"/>
                </method>
                <method name="copy" type="Array1D<RationalNumber>" line="192">
                    <params>
                        <param name="source" type="Number"/>
                    </params>
                    <declaration name="tmpSize" type="int" line="193"/>
                    <declaration name="tmpArray" type="RationalNumber[]" line="194"/>
                    <scope line="195"/>
                </method>
                <method name="makeRandom" type="Array1D<RationalNumber>" line="200">
                    <params>
                        <param name="count" type="long"/>
                        <param name="distribution" type="RandomNumber"/>
                    </params>
                    <declaration name="tmpArray" type="RationalNumber[]" line="201"/>
                    <scope line="202"/>
                </method>
                <method name="makeZero" type="Array1D<RationalNumber>" line="207">
                    <params>
                        <param name="count" type="long"/>
                    </params>
                </method>
                <method name="wrap" type="Array1D<RationalNumber>" line="210">
                    <params>
                        <param name="aSimple" type="SimpleArray<RationalNumber>"/>
                    </params>
                </method>
            </anonymous_class>
            <method name="copyAndSort" type="T[]" line="215">
                <params>
                    <param name="anArray" type="Array1D<T>"/>
                </params>
                <declaration name="tmpLength" type="int" line="216"/>
                <declaration name="retVal" type="T[]" line="217"/>
                <scope line="218"/>
            </method>
            <declaration name="length" type="int" line="224"/>
            <declaration name="myDelegate" type="BasicArray&lt;N&gt;" line="225"/>
            <declaration name="myFirst" type="int" line="226"/>
            <declaration name="myLimit" type="int" line="227"/>
            <declaration name="myStep" type="int" line="228"/>
            <method name="Array1D" type="constructor" line="229"/>
            <method name="Array1D" type="constructor" line="232">
                <params>
                    <param name="aDelegate" type="BasicArray<N>"/>
                </params>
            </method>
            <method name="Array1D" type="constructor" line="235">
                <params>
                    <param name="aDelegate" type="BasicArray<N>"/>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="aStep" type="int"/>
                </params>
            </method>
            <method name="contains" type="boolean" line="243">
                <params>
                    <param name="anObj" type="Object"/>
                </params>
            </method>
            <method name="copy" type="Array1D<N>" line="246">
                <declaration name="retVal" type="BasicArray&lt;N&gt;" line="247"/>
                <scope line="248">
                    <scope line="250"/>
                </scope>
                <scope line="255">
                    <scope line="257"/>
                </scope>
                <scope line="262">
                    <scope line="264"/>
                </scope>
                <scope line="269"/>
            </method>
            <javadoc line="273">
                Creates a copy of this containing only the selected elements, in the specified order.                
            </javadoc>
            <method name="copy" type="Array1D<N>" line="276">
                <params>
                    <param name="indices" type="int"/>
                </params>
                <declaration name="retVal" type="BasicArray&lt;N&gt;" line="277"/>
                <declaration name="tmpLength" type="int" line="278"/>
                <scope line="279">
                    <scope line="281"/>
                </scope>
                <scope line="286">
                    <scope line="288"/>
                </scope>
                <scope line="293">
                    <scope line="295"/>
                </scope>
                <scope line="300"/>
            </method>
            <method name="count" type="long" line="304"/>
            <method name="doubleValue" type="double" line="307">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="fillAll" type="void" line="310">
                <params>
                    <param name="aNmbr" type="N"/>
                </params>
            </method>
            <method name="fillRange" type="void" line="313">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="value" type="N"/>
                </params>
                <declaration name="tmpFirst" type="int" line="314"/>
                <declaration name="tmpLimit" type="int" line="315"/>
            </method>
            <method name="get" type="N" line="318">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="get" type="N" line="321">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="getIndexOfLargestInRange" type="int" line="324">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                </params>
            </method>
            <method name="indexOf" type="int" line="327">
                <params>
                    <param name="anObj" type="Object"/>
                </params>
                <declaration name="tmpLength" type="int" line="328"/>
                <scope line="329">
                    <scope line="330">
                        <scope line="331"/>
                    </scope>
                </scope>
                <scope line="336">
                    <scope line="337">
                        <scope line="338"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="345">
                @see Scalar#isAbsolute()                
            </javadoc>
            <method name="isAbsolute" type="boolean" line="348">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="isAllZeros" type="boolean" line="351"/>
            <method name="isEmpty" type="boolean" line="354"/>
            <method name="isInfinite" type="boolean" line="357">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="isNaN" type="boolean" line="360">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <javadoc line="363">
                @see Scalar#isPositive()                
            </javadoc>
            <method name="isPositive" type="boolean" line="366">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="isRangeZeros" type="boolean" line="369">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                </params>
            </method>
            <javadoc line="372">
                @see Scalar#isReal()                
            </javadoc>
            <method name="isReal" type="boolean" line="375">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="isReal" type="boolean" line="378">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <javadoc line="381">
                @see Scalar#isZero()                
            </javadoc>
            <method name="isZero" type="boolean" line="384">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="isZero" type="boolean" line="387">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="iterator" type="Iterator<N>" line="390"/>
            <javadoc line="393">
                @deprecated v35 Use {@link #modifyAll(UnaryFunction)} instead                
            </javadoc>
            <method name="modifyAll" type="void" line="396">
                <params>
                    <param name="function" type="BinaryFunction<N>"/>
                    <param name="rightArg" type="N"/>
                </params>
            </method>
            <javadoc line="399">
                @deprecated v35 Use {@link #modifyAll(UnaryFunction)} instead                
            </javadoc>
            <method name="modifyAll" type="void" line="402">
                <params>
                    <param name="leftArg" type="N"/>
                    <param name="function" type="BinaryFunction<N>"/>
                </params>
            </method>
            <javadoc line="405">
                @deprecated v35 Use {@link #modifyAll(UnaryFunction)} instead                
            </javadoc>
            <method name="modifyAll" type="void" line="408">
                <params>
                    <param name="function" type="ParameterFunction<N>"/>
                    <param name="parameter" type="int"/>
                </params>
            </method>
            <method name="modifyAll" type="void" line="411">
                <params>
                    <param name="function" type="UnaryFunction<N>"/>
                </params>
            </method>
            <method name="modifyMatching" type="void" line="414">
                <params>
                    <param name="anArray" type="Access1D<N>"/>
                    <param name="function" type="BinaryFunction<N>"/>
                </params>
                <declaration name="tmpLength" type="int" line="415"/>
                <scope line="416">
                    <scope line="417"/>
                </scope>
                <scope line="421">
                    <scope line="422"/>
                </scope>
            </method>
            <method name="modifyMatching" type="void" line="427">
                <params>
                    <param name="function" type="BinaryFunction<N>"/>
                    <param name="anArray" type="Access1D<N>"/>
                </params>
                <declaration name="tmpLength" type="int" line="428"/>
                <scope line="429">
                    <scope line="430"/>
                </scope>
                <scope line="434">
                    <scope line="435"/>
                </scope>
            </method>
            <javadoc line="440">
                @deprecated v35 Use {@link #modifyRange(long,long,UnaryFunction)} instead                
            </javadoc>
            <method name="modifyRange" type="void" line="443">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="function" type="BinaryFunction<N>"/>
                    <param name="rightArg" type="N"/>
                </params>
            </method>
            <javadoc line="446">
                @deprecated v35 Use {@link #modifyRange(long,long,UnaryFunction)} instead                
            </javadoc>
            <method name="modifyRange" type="void" line="449">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="leftArg" type="N"/>
                    <param name="function" type="BinaryFunction<N>"/>
                </params>
            </method>
            <javadoc line="452">
                @deprecated v35 Use {@link #modifyRange(long,long,UnaryFunction)} instead                
            </javadoc>
            <method name="modifyRange" type="void" line="455">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="function" type="ParameterFunction<N>"/>
                    <param name="parameter" type="int"/>
                </params>
            </method>
            <method name="modifyRange" type="void" line="458">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="function" type="UnaryFunction<N>"/>
                </params>
                <declaration name="tmpFirst" type="int" line="459"/>
                <declaration name="tmpLimit" type="int" line="460"/>
            </method>
            <javadoc line="463">
                Assumes you have first called {@linkplain #sortAscending()}.                
            </javadoc>
            <method name="searchAscending" type="int" line="466">
                <params>
                    <param name="aKey" type="N"/>
                </params>
                <declaration name="tmpLength" type="int" line="467"/>
                <scope line="468">
                    <declaration name="tmpArray" type="Number[]" line="469"/>
                    <scope line="470"/>
                </scope>
                <scope line="475"/>
            </method>
            <javadoc line="479">
                Asssumes you have first called {@linkplain #sortDescending()}.                
            </javadoc>
            <method name="searchDescending" type="int" line="482">
                <params>
                    <param name="aKey" type="N"/>
                </params>
                <declaration name="tmpLength" type="int" line="483"/>
                <declaration name="tmpArray" type="Number[]" line="484"/>
                <scope line="485"/>
                <declaration name="tmpInd" type="int" line="488"/>
                <scope line="489"/>
                <scope line="492"/>
                <scope line="495"/>
            </method>
            <method name="set" type="N" line="499">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="Number"/>
                </params>
            </method>
            <method name="set" type="void" line="502">
                <params>
                    <param name="index" type="long"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="set" type="void" line="505">
                <params>
                    <param name="index" type="long"/>
                    <param name="value" type="Number"/>
                </params>
            </method>
            <method name="size" type="int" line="508"/>
            <method name="sortAscending" type="void" line="511">
                <declaration name="tmpLength" type="int" line="512"/>
                <scope line="513">
                    <declaration name="tmpArray" type="N[]" line="514"/>
                    <scope line="515"/>
                </scope>
                <scope line="519"/>
            </method>
            <method name="sortDescending" type="void" line="523">
                <declaration name="tmpArray" type="N[]" line="524"/>
                <declaration name="tmpLength" type="int" line="525"/>
                <scope line="526"/>
            </method>
            <method name="subList" type="Array1D<N>" line="530">
                <params>
                    <param name="first" type="int"/>
                    <param name="limit" type="int"/>
                </params>
            </method>
            <method name="toRawCopy" type="double[]" line="533">
                <declaration name="tmpLength" type="int" line="534"/>
                <declaration name="retVal" type="double[]" line="535"/>
                <scope line="536"/>
            </method>
            <method name="toScalar" type="Scalar<N>" line="541">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="visitAll" type="void" line="544">
                <params>
                    <param name="visitor" type="VoidFunction<N>"/>
                </params>
            </method>
            <method name="visitRange" type="void" line="547">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="visitor" type="VoidFunction<N>"/>
                </params>
                <declaration name="tmpFirst" type="int" line="548"/>
                <declaration name="tmpLimit" type="int" line="549"/>
            </method>
            <method name="getDelegate" type="BasicArray<N>" line="552"/>
        </class>
    </source>