<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.array">
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Iterator1D"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.RationalNumber"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <class name="SimpleArray" line="36">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <implements interface="Access1D">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="Access1D.Fillable">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <javadoc line="36">
                The purpose of (use case for) this class is to provide a minimal class
                  that implements the {@link Access1D} interface and is mutable. Further
                  the user can assume that an ArrayAccess&lt;BigDecimal&gt; instance really
                  is an ArrayAccess.Big instance (and correspondingly for Double,
                  ComplexNumber and RationalNumber). Therefore it is safe to type cast and
                  reference the data attribute. Further this class allows you to,
                  with generics, mix primitive value arrays and object reference arrays.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="Big" line="49">
                <extends class="SimpleArray">
                    <type_params>
                        <type_param name="BigDecimal"/>
                    </type_params>
                </extends>
                <declaration name="data" type="BigDecimal[]" line="51"/>
                <method name="Big" type="constructor" line="53">
                    <params>
                        <param name="theData" type="BigDecimal[]"/>
                    </params>
                </method>
                <method name="Big" type="constructor" line="60">
                    <params>
                        <param name="aLength" type="int"/>
                    </params>
                </method>
                <method name="doubleValue" type="double" line="68">
                    <params>
                        <param name="index" type="long"/>
                    </params>
                </method>
                <method name="fillAll" type="void" line="72">
                    <params>
                        <param name="value" type="BigDecimal"/>
                    </params>
                </method>
                <method name="fillRange" type="void" line="76">
                    <params>
                        <param name="first" type="long"/>
                        <param name="limit" type="long"/>
                        <param name="value" type="BigDecimal"/>
                    </params>
                    <scope line="77"/>
                </method>
                <method name="get" type="BigDecimal" line="82">
                    <params>
                        <param name="index" type="long"/>
                    </params>
                </method>
                <method name="set" type="BigDecimal" line="86">
                    <params>
                        <param name="index" type="int"/>
                        <param name="value" type="Number"/>
                    </params>
                    <declaration name="retVal" type="BigDecimal" line="87"/>
                </method>
                <method name="set" type="void" line="92">
                    <params>
                        <param name="index" type="long"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="set" type="void" line="96">
                    <params>
                        <param name="index" type="long"/>
                        <param name="value" type="Number"/>
                    </params>
                </method>
            </class>
            <class name="Complex" line="102">
                <extends class="SimpleArray">
                    <type_params>
                        <type_param name="ComplexNumber"/>
                    </type_params>
                </extends>
                <declaration name="data" type="ComplexNumber[]" line="104"/>
                <method name="Complex" type="constructor" line="106">
                    <params>
                        <param name="theData" type="ComplexNumber[]"/>
                    </params>
                </method>
                <method name="Complex" type="constructor" line="113">
                    <params>
                        <param name="aLength" type="int"/>
                    </params>
                </method>
                <method name="doubleValue" type="double" line="121">
                    <params>
                        <param name="index" type="long"/>
                    </params>
                </method>
                <method name="fillAll" type="void" line="125">
                    <params>
                        <param name="value" type="ComplexNumber"/>
                    </params>
                </method>
                <method name="fillRange" type="void" line="129">
                    <params>
                        <param name="first" type="long"/>
                        <param name="limit" type="long"/>
                        <param name="value" type="ComplexNumber"/>
                    </params>
                    <scope line="130"/>
                </method>
                <method name="get" type="ComplexNumber" line="135">
                    <params>
                        <param name="index" type="long"/>
                    </params>
                </method>
                <method name="set" type="ComplexNumber" line="139">
                    <params>
                        <param name="index" type="int"/>
                        <param name="value" type="Number"/>
                    </params>
                    <declaration name="retVal" type="ComplexNumber" line="140"/>
                </method>
                <method name="set" type="void" line="145">
                    <params>
                        <param name="index" type="long"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="set" type="void" line="149">
                    <params>
                        <param name="index" type="long"/>
                        <param name="value" type="Number"/>
                    </params>
                </method>
            </class>
            <class name="Primitive" line="155">
                <extends class="SimpleArray">
                    <type_params>
                        <type_param name="Double"/>
                    </type_params>
                </extends>
                <declaration name="data" type="double[]" line="157"/>
                <method name="Primitive" type="constructor" line="159">
                    <params>
                        <param name="theData" type="double[]"/>
                    </params>
                </method>
                <method name="Primitive" type="constructor" line="166">
                    <params>
                        <param name="aLength" type="int"/>
                    </params>
                </method>
                <method name="doubleValue" type="double" line="173">
                    <params>
                        <param name="index" type="long"/>
                    </params>
                </method>
                <method name="fillAll" type="void" line="177">
                    <params>
                        <param name="value" type="Double"/>
                    </params>
                </method>
                <method name="fillRange" type="void" line="181">
                    <params>
                        <param name="first" type="long"/>
                        <param name="limit" type="long"/>
                        <param name="value" type="Double"/>
                    </params>
                    <scope line="182"/>
                </method>
                <method name="get" type="Double" line="187">
                    <params>
                        <param name="index" type="long"/>
                    </params>
                </method>
                <method name="set" type="Double" line="191">
                    <params>
                        <param name="index" type="int"/>
                        <param name="value" type="Number"/>
                    </params>
                    <declaration name="retVal" type="double" line="192"/>
                </method>
                <method name="set" type="void" line="197">
                    <params>
                        <param name="index" type="long"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="set" type="void" line="201">
                    <params>
                        <param name="index" type="long"/>
                        <param name="value" type="Number"/>
                    </params>
                </method>
            </class>
            <class name="Rational" line="207">
                <extends class="SimpleArray">
                    <type_params>
                        <type_param name="RationalNumber"/>
                    </type_params>
                </extends>
                <declaration name="data" type="RationalNumber[]" line="209"/>
                <method name="Rational" type="constructor" line="211">
                    <params>
                        <param name="aLength" type="int"/>
                    </params>
                </method>
                <method name="Rational" type="constructor" line="219">
                    <params>
                        <param name="theData" type="RationalNumber[]"/>
                    </params>
                </method>
                <method name="doubleValue" type="double" line="226">
                    <params>
                        <param name="index" type="long"/>
                    </params>
                </method>
                <method name="fillAll" type="void" line="230">
                    <params>
                        <param name="value" type="RationalNumber"/>
                    </params>
                </method>
                <method name="fillRange" type="void" line="234">
                    <params>
                        <param name="first" type="long"/>
                        <param name="limit" type="long"/>
                        <param name="value" type="RationalNumber"/>
                    </params>
                    <scope line="235"/>
                </method>
                <method name="get" type="RationalNumber" line="240">
                    <params>
                        <param name="index" type="long"/>
                    </params>
                </method>
                <method name="set" type="RationalNumber" line="244">
                    <params>
                        <param name="index" type="int"/>
                        <param name="value" type="Number"/>
                    </params>
                    <declaration name="retVal" type="RationalNumber" line="245"/>
                </method>
                <method name="set" type="void" line="250">
                    <params>
                        <param name="index" type="long"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="set" type="void" line="254">
                    <params>
                        <param name="index" type="long"/>
                        <param name="value" type="Number"/>
                    </params>
                </method>
            </class>
            <method name="makeBig" type="SimpleArray.Big" line="260">
                <params>
                    <param name="aLength" type="int"/>
                </params>
            </method>
            <method name="makeComplex" type="SimpleArray.Complex" line="264">
                <params>
                    <param name="aLength" type="int"/>
                </params>
            </method>
            <method name="makePrimitive" type="SimpleArray.Primitive" line="268">
                <params>
                    <param name="aLength" type="int"/>
                </params>
            </method>
            <method name="makeRational" type="SimpleArray.Rational" line="272">
                <params>
                    <param name="aLength" type="int"/>
                </params>
            </method>
            <method name="wrapBig" type="SimpleArray.Big" line="276">
                <params>
                    <param name="theData" type="BigDecimal[]"/>
                </params>
            </method>
            <method name="wrapComplex" type="SimpleArray.Complex" line="280">
                <params>
                    <param name="theData" type="ComplexNumber[]"/>
                </params>
            </method>
            <method name="wrapPrimitive" type="SimpleArray.Primitive" line="284">
                <params>
                    <param name="theData" type="double[]"/>
                </params>
            </method>
            <method name="wrapRational" type="SimpleArray.Rational" line="288">
                <params>
                    <param name="theData" type="RationalNumber[]"/>
                </params>
            </method>
            <declaration name="length" type="int" line="292"/>
            <method name="SimpleArray" type="constructor" line="295"/>
            <method name="SimpleArray" type="constructor" line="299">
                <params>
                    <param name="aLength" type="int"/>
                </params>
            </method>
            <method name="count" type="long" line="306"/>
            <method name="iterator" type="Iterator<N>" line="310"/>
            <method name="size" type="int" line="314"/>
        </class>
    </source>