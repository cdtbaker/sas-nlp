<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.array">
        <import package="java.io.Serializable"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.RandomAccess"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Iterator1D"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.ParameterFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.VoidFunction"/>
        <import package="org.ojalgo.netio.ASCII"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <class name="BasicArray" line="13">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <implements interface="Access1D">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="Access1D.Elements"/>
            <implements interface="Access1D.Fillable">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="Access1D.Modifiable">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="Access1D.Visitable">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="RandomAccess"/>
            <implements interface="Serializable"/>
            <javadoc line="13">
                &lt;p&gt;
                  A BasicArray is one-dimensional, but designed to easily be extended or encapsulated, and then treated as
                  arbitrary-dimensional. It stores/handles (any subclass of) {@linkplain java.lang.Number} elements depending on the
                  subclass/implementation.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This abstract class defines a set of methods to access and modify array elements. It does not &quot;know&quot; anything about
                  linear algebra or similar.
                  &lt;/p&gt;                
                <author>
                    apete                    
                </author>
            </javadoc>
            <declaration name="length" type="int" line="26"/>
            <method name="BasicArray" type="constructor" line="27"/>
            <method name="BasicArray" type="constructor" line="30">
                <params>
                    <param name="aLength" type="int"/>
                </params>
            </method>
            <method name="count" type="long" line="34"/>
            <method name="iterator" type="Iterator<N>" line="37"/>
            <method name="modifyAll" type="void" line="40">
                <params>
                    <param name="function" type="UnaryFunction<N>"/>
                </params>
            </method>
            <method name="modifyRange" type="void" line="43">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="function" type="UnaryFunction<N>"/>
                </params>
            </method>
            <method name="size" type="int" line="46"/>
            <method name="toString" type="String" line="49">
                <declaration name="retVal" type="StringBuilder" line="50"/>
                <declaration name="tmpLength" type="int" line="53"/>
                <scope line="54">
                    <scope line="56"/>
                </scope>
            </method>
            <method name="visitAll" type="void" line="66">
                <params>
                    <param name="visitor" type="VoidFunction<N>"/>
                </params>
            </method>
            <method name="visitRange" type="void" line="69">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="visitor" type="VoidFunction<N>"/>
                </params>
            </method>
            <javadoc line="72">
                &lt;p&gt;
                  A utility facade that conveniently/consistently presents the {@linkplain org.ojalgo.array.BasicArray} as a
                  one-dimensional array. Note that you will modify the actual array by accessing it through this facade.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Disregards the array structure, and simply treats it as one-domensional.
                  &lt;/p&gt;                
            </javadoc>
            <method name="asArray1D" type="Array1D<N>" line="81"/>
            <javadoc line="84">
                &lt;p&gt;
                  A utility facade that conveniently/consistently presents the {@linkplain org.ojalgo.array.BasicArray} as a
                  two-dimensional array. Note that you will modify the actual array by accessing it through this facade.
                  &lt;/p&gt;
                  &lt;p&gt;
                  If &quot;this&quot; has more than two dimensions then only the first plane of the first cube of the first... is
                  used/accessed. If this only has one dimension then everything is assumed to be in the first column of the first
                  plane of the first cube...
                  &lt;/p&gt;                
            </javadoc>
            <method name="asArray2D" type="Array2D<N>" line="95">
                <params>
                    <param name="aRowDim" type="int"/>
                    <param name="aColDim" type="int"/>
                </params>
            </method>
            <javadoc line="98">
                &lt;p&gt;
                  A utility facade that conveniently/consistently presents the {@linkplain org.ojalgo.array.BasicArray} as a
                  multi-dimensional array. Note that you will modify the actual array by accessing it through this facade.
                  &lt;/p&gt;                
            </javadoc>
            <method name="asArrayAnyD" type="ArrayAnyD<N>" line="104">
                <params>
                    <param name="aStructure" type="int[]"/>
                </params>
            </method>
            <javadoc line="107">
                &lt;p&gt;
                  A utility facade that conveniently/consistently presents the {@linkplain org.ojalgo.array.BasicArray} as a
                  multi-dimensional array. Note that you will modify the actual array by accessing it through this facade.
                  &lt;/p&gt;                
            </javadoc>
            <method name="asArrayAnyD" type="ArrayAnyD<N>" line="113">
                <params>
                    <param name="structure" type="long[]"/>
                </params>
                <declaration name="tmpStructure" type="int[]" line="114"/>
                <scope line="115"/>
            </method>
            <method name="exchange" type="void" line="120"/>
            <method name="fill" type="void" line="121"/>
            <method name="fill" type="void" line="122"/>
            <method name="fill" type="void" line="123"/>
            <method name="fill" type="void" line="124"/>
            <method name="fill" type="void" line="125"/>
            <method name="getIndexOfLargest" type="int" line="126"/>
            <method name="isReal" type="boolean" line="127"/>
            <javadoc line="127">
                @see Scalar#isReal()                
            </javadoc>
            <method name="isZero" type="boolean" line="131"/>
            <javadoc line="131">
                @see Scalar#isZero()                
            </javadoc>
            <method name="isZeros" type="boolean" line="135"/>
            <method name="modify" type="void" line="136"/>
            <method name="modify" type="void" line="137"/>
            <method name="modify" type="void" line="138"/>
            <method name="modify" type="void" line="139"/>
            <method name="modify" type="void" line="140"/>
            <method name="modify" type="void" line="141"/>
            <method name="searchAscending" type="int" line="142"/>
            <javadoc line="142">
                @see java.util.Arrays#binarySearch(Object[],Object)                
                <see>
                    #sortAscending()                    
                </see>
                <throws>
                    UnsupportedOperationException if the this operation is not supported by this implementation/subclass                    
                </throws>
            </javadoc>
            <method name="sortAscending" type="void" line="148"/>
            <javadoc line="148">
                @see java.util.Arrays#sort(Object[])                
                <see>
                    #searchAscending(Number)                    
                </see>
                <throws>
                    UnsupportedOperationException if the this operation is not supported by this implementation/subclass                    
                </throws>
            </javadoc>
            <method name="toScalar" type="Scalar<N>" line="154"/>
            <method name="visit" type="void" line="155"/>
        </class>
    </source>