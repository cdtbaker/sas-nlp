<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.array">
        <import package="java.io.Serializable"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util.Iterator"/>
        <import package="org.ojalgo.OjAlgoUtils"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.AccessUtils"/>
        <import package="org.ojalgo.access.Iterator1D"/>
        <import package="org.ojalgo.array.DenseArray.DenseFactory"/>
        <import package="org.ojalgo.array.SegmentedArray.SegmentedFactory"/>
        <import package="org.ojalgo.array.SparseArray.SparseFactory"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.VoidFunction"/>
        <import package="org.ojalgo.netio.ASCII"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.RationalNumber"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <class name="BasicArray" line="43">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <implements interface="Access1D">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="Access1D.Elements"/>
            <implements interface="Access1D.Fillable">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="Access1D.Modifiable">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="Access1D.Visitable">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <javadoc line="43">
                &lt;p&gt;
                  A BasicArray is one-dimensional, but designed to easily be extended or encapsulated, and then treated as
                  arbitrary-dimensional. It stores/handles (any subclass of) {@linkplain java.lang.Number} elements depending on the
                  subclass/implementation.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This abstract class defines a set of methods to access and modify array elements. It does not &quot;know&quot; anything about
                  linear algebra or similar.
                  &lt;/p&gt;                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="BasicFactory" line="59">
                <type_params>
                    <type_param name="N"/>
                </type_params>
                <extends class="ArrayFactory">
                    <type_params>
                        <type_param name="N"/>
                    </type_params>
                </extends>
                <method name="getDenseFactory" type="DenseArray.DenseFactory&lt;N&gt;" line="61"/>
                <method name="getSegmentedFactory" type="SegmentedArray.SegmentedFactory&lt;N&gt;" line="63"/>
                <method name="getSparseFactory" type="SparseArray.SparseFactory&lt;N&gt;" line="65"/>
                <method name="makeStructuredZero" type="BasicArray&lt;N&gt;" line="68">
                    <params>
                        <param name="structure" type="long"/>
                    </params>
                    <declaration name="tmpTotal" type="long" line="70"/>
                    <scope line="72"/>
                    <scope line="75"/>
                    <scope line="77"/>
                </method>
                <method name="makeToBeFilled" type="BasicArray&lt;N&gt;" line="84">
                    <params>
                        <param name="structure" type="long"/>
                    </params>
                    <declaration name="tmpTotal" type="long" line="86"/>
                    <scope line="88"/>
                    <scope line="90"/>
                </method>
            </class>
            <declaration name="BIG" type="BasicFactory&amp;lt;BigDecimal&amp;gt;" line="98"/>
            <anonymous_class line="98">
                <method name="getDenseFactory" type="DenseFactory&lt;BigDecimal&gt;" line="101"/>
                <method name="getSegmentedFactory" type="SegmentedFactory&lt;BigDecimal&gt;" line="106"/>
                <method name="getSparseFactory" type="SparseFactory&lt;BigDecimal&gt;" line="111"/>
            </anonymous_class>
            <declaration name="COMPLEX" type="BasicFactory&amp;lt;ComplexNumber&amp;gt;" line="117"/>
            <anonymous_class line="117">
                <method name="getDenseFactory" type="DenseFactory&lt;ComplexNumber&gt;" line="120"/>
                <method name="getSegmentedFactory" type="SegmentedFactory&lt;ComplexNumber&gt;" line="125"/>
                <method name="getSparseFactory" type="SparseFactory&lt;ComplexNumber&gt;" line="130"/>
            </anonymous_class>
            <declaration name="PRIMITIVE" type="BasicFactory&amp;lt;Double&amp;gt;" line="136"/>
            <anonymous_class line="136">
                <method name="getDenseFactory" type="DenseFactory&lt;Double&gt;" line="139"/>
                <method name="getSegmentedFactory" type="SegmentedFactory&lt;Double&gt;" line="144"/>
                <method name="getSparseFactory" type="SparseFactory&lt;Double&gt;" line="149"/>
            </anonymous_class>
            <declaration name="RATIONAL" type="BasicFactory&amp;lt;RationalNumber&amp;gt;" line="155"/>
            <anonymous_class line="155">
                <method name="getDenseFactory" type="DenseFactory&lt;RationalNumber&gt;" line="158"/>
                <method name="getSegmentedFactory" type="SegmentedFactory&lt;RationalNumber&gt;" line="163"/>
                <method name="getSparseFactory" type="SparseFactory&lt;RationalNumber&gt;" line="168"/>
            </anonymous_class>
            <method name="BasicArray" type="constructor" line="174"/>
            <method name="iterator" type="Iterator&lt;N&gt;" line="178"/>
            <method name="modifyAll" type="void" line="182">
                <params>
                    <param name="function" type="UnaryFunction&lt;N&gt;"/>
                </params>
            </method>
            <method name="modifyRange" type="void" line="186">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="function" type="UnaryFunction&lt;N&gt;"/>
                </params>
            </method>
            <method name="toString" type="String" line="191">
                <declaration name="retVal" type="StringBuilder" line="193"/>
                <declaration name="tmpLength" type="int" line="197"/>
                <scope line="198">
                    <scope line="200"/>
                </scope>
            </method>
            <method name="visitAll" type="void" line="212">
                <params>
                    <param name="visitor" type="VoidFunction&lt;N&gt;"/>
                </params>
            </method>
            <method name="visitRange" type="void" line="216">
                <params>
                    <param name="first" type="long"/>
                    <param name="limit" type="long"/>
                    <param name="visitor" type="VoidFunction&lt;N&gt;"/>
                </params>
            </method>
            <javadoc line="220">
                &lt;p&gt;
                  A utility facade that conveniently/consistently presents the {@linkplain org.ojalgo.array.BasicArray} as a
                  one-dimensional array. Note that you will modify the actual array by accessing it through this facade.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Disregards the array structure, and simply treats it as one-domensional.
                  &lt;/p&gt;                
            </javadoc>
            <method name="asArray1D" type="Array1D&lt;N&gt;" line="229"/>
            <javadoc line="233">
                &lt;p&gt;
                  A utility facade that conveniently/consistently presents the {@linkplain org.ojalgo.array.BasicArray} as a
                  two-dimensional array. Note that you will modify the actual array by accessing it through this facade.
                  &lt;/p&gt;
                  &lt;p&gt;
                  If &quot;this&quot; has more than two dimensions then only the first plane of the first cube of the first... is
                  used/accessed. If this only has one dimension then everything is assumed to be in the first column of the first
                  plane of the first cube...
                  &lt;/p&gt;                
            </javadoc>
            <method name="asArray2D" type="Array2D&lt;N&gt;" line="244">
                <params>
                    <param name="structure" type="long"/>
                </params>
            </method>
            <javadoc line="248">
                &lt;p&gt;
                  A utility facade that conveniently/consistently presents the {@linkplain org.ojalgo.array.BasicArray} as a
                  multi-dimensional array. Note that you will modify the actual array by accessing it through this facade.
                  &lt;/p&gt;                
            </javadoc>
            <method name="asArrayAnyD" type="ArrayAnyD&lt;N&gt;" line="254">
                <params>
                    <param name="structure" type="long[]"/>
                </params>
            </method>
            <method name="exchange" type="void" line="258"/>
            <method name="fill" type="void" line="260"/>
            <method name="indexOfLargest" type="long" line="262"/>
            <method name="isZeros" type="boolean" line="264"/>
            <method name="modify" type="void" line="266"/>
            <method name="modify" type="void" line="268"/>
            <method name="modify" type="void" line="270"/>
            <method name="toScalar" type="Scalar&lt;N&gt;" line="272"/>
            <method name="visit" type="void" line="274"/>
            <javadoc line="276">
                Safe to cast as DenseArray.                
            </javadoc>
            <method name="isDense" type="boolean" line="279"/>
            <method name="isPrimitive" type="boolean" line="283"/>
            <javadoc line="283">
                Primitive (double) elements                
            </javadoc>
            <javadoc line="288">
                Safe to cast as SegmentedArray.                
            </javadoc>
            <method name="isSegmented" type="boolean" line="291"/>
            <javadoc line="295">
                Safe to cast as SparseArray.                
            </javadoc>
            <method name="isSparse" type="boolean" line="298"/>
        </class>
    </source>