<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.finance.portfolio">
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.ProgrammingError"/>
        <import package="org.ojalgo.array.ArrayUtils"/>
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="org.ojalgo.finance.FinanceUtils"/>
        <import package="org.ojalgo.matrix.BasicMatrix"/>
        <import package="org.ojalgo.matrix.PrimitiveMatrix"/>
        <import package="org.ojalgo.scalar.BigScalar"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <class name="MarketEquilibrium" line="36">
            <comment line="48">
                Don&apos;t change the default!                
            </comment>
            <javadoc line="36">
                MarketEquilibrium translates between the market portfolio weights and the equilibrium excess returns. The only things
                  needed to do those translations are the covariance matrix and the risk aversion factor - that&apos;s what you need to
                  supply when you instantiate this class.                
                <see>
                    #calculateAssetReturns(BasicMatrix)                    
                </see>
                <see>
                    #calculateAssetWeights(BasicMatrix)                    
                </see>
                <author>
                    apete                    
                </author>
            </javadoc>
            <declaration name="DEFAULT_RISK_AVERSION" type="BigDecimal" line="47"/>
            <declaration name="STRING_ZERO" type="String" line="48"/>
            <declaration name="SYMBOL" type="String" line="49"/>
            <javadoc line="51">
                Calculates the portfolio return using the input asset weights and returns.                
            </javadoc>
            <method name="calculatePortfolioReturn" type="Scalar&lt;?&gt;" line="54">
                <params>
                    <param name="assetWeights" type="BasicMatrix&lt;?&gt;"/>
                    <param name="assetReturns" type="BasicMatrix&lt;?&gt;"/>
                </params>
            </method>
            <method name="makeSymbols" type="String[]" line="58">
                <params>
                    <param name="count" type="int"/>
                </params>
                <declaration name="retVal" type="String[]" line="60"/>
                <declaration name="tmpMaxLength" type="int" line="62"/>
                <declaration name="tmpNumberString" type="String" line="64"/>
                <scope line="65">
                    <scope line="67"/>
                </scope>
            </method>
            <declaration name="myAssetKeys" type="String[]" line="76"/>
            <declaration name="myCovariances" type="BasicMatrix&amp;lt;?&amp;gt;" line="77"/>
            <declaration name="myRiskAversion" type="BigDecimal" line="78"/>
            <method name="MarketEquilibrium" type="constructor" line="80">
                <params>
                    <param name="covarianceMatrix" type="BasicMatrix&lt;?&gt;"/>
                </params>
            </method>
            <method name="MarketEquilibrium" type="constructor" line="84">
                <params>
                    <param name="covarianceMatrix" type="BasicMatrix&lt;?&gt;"/>
                    <param name="riskAversionFactor" type="Number"/>
                </params>
            </method>
            <method name="MarketEquilibrium" type="constructor" line="88">
                <params>
                    <param name="assetNamesOrKeys" type="String[]"/>
                    <param name="covarianceMatrix" type="BasicMatrix&lt;?&gt;"/>
                </params>
            </method>
            <method name="MarketEquilibrium" type="constructor" line="97">
                <params>
                    <param name="assetNamesOrKeys" type="String[]"/>
                    <param name="covarianceMatrix" type="BasicMatrix&lt;?&gt;"/>
                    <param name="riskAversionFactor" type="Number"/>
                </params>
            </method>
            <method name="MarketEquilibrium" type="constructor" line="107"/>
            <method name="MarketEquilibrium" type="constructor" line="114">
                <params>
                    <param name="aMarket" type="MarketEquilibrium"/>
                </params>
            </method>
            <javadoc line="118">
                If the input vector of asset weights are the weights of the market portfolio, then the ouput is the equilibrium
                  excess returns.                
            </javadoc>
            <method name="calculateAssetReturns" type="BasicMatrix&lt;?&gt;" line="122">
                <params>
                    <param name="assetWeights" type="BasicMatrix&lt;?&gt;"/>
                </params>
                <declaration name="tmpAssetWeights" type="BasicMatrix&amp;lt;?&amp;gt;" line="123"/>
            </method>
            <javadoc line="127">
                If the input vector of returns are the equilibrium excess returns then the output is the market portfolio
                  weights. This is unconstrained optimisation - there are no constraints on the resulting instrument weights.                
            </javadoc>
            <method name="calculateAssetWeights" type="BasicMatrix&lt;?&gt;" line="131">
                <params>
                    <param name="assetReturns" type="BasicMatrix&lt;?&gt;"/>
                </params>
                <declaration name="tmpAssetWeights" type="BasicMatrix&amp;lt;?&amp;gt;" line="132"/>
                <scope line="133"/>
                <scope line="135"/>
            </method>
            <javadoc line="140">
                Calculates the portfolio variance using the input instrument weights.                
            </javadoc>
            <method name="calculatePortfolioVariance" type="Scalar&lt;?&gt;" line="143">
                <params>
                    <param name="assetWeights" type="BasicMatrix&lt;?&gt;"/>
                </params>
                <declaration name="tmpLeft" type="BasicMatrix&amp;lt;?&amp;gt;" line="145"/>
                <declaration name="tmpRight" type="BasicMatrix&amp;lt;?&amp;gt;" line="146"/>
                <scope line="148"/>
                <scope line="151"/>
            </method>
            <javadoc line="159">
                Will set the risk aversion factor to the best fit for an observed pair of market portfolio asset weights and
                  equilibrium/historical excess returns.                
            </javadoc>
            <method name="calibrate" type="void" line="163">
                <params>
                    <param name="assetWeights" type="BasicMatrix&lt;?&gt;"/>
                    <param name="assetReturns" type="BasicMatrix&lt;?&gt;"/>
                </params>
                <declaration name="tmpImpliedRiskAversion" type="Scalar&amp;lt;?&amp;gt;" line="165"/>
            </method>
            <javadoc line="170">
                Equivalent to copying, but additionally the covariance matrix will be cleaned of negative and very small
                  eigenvalues to make it positive definite.                
            </javadoc>
            <method name="clean" type="MarketEquilibrium" line="174">
                <declaration name="tmpAssetVolatilities" type="PrimitiveMatrix" line="176"/>
                <declaration name="tmpCleanedCorrelations" type="PrimitiveMatrix" line="177"/>
                <declaration name="tmpCovariances" type="PrimitiveMatrix" line="179"/>
            </method>
            <method name="copy" type="MarketEquilibrium" line="184"/>
            <method name="getAssetKey" type="String" line="188">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getAssetKeys" type="String[]" line="192"/>
            <method name="getCovariances" type="BasicMatrix&lt;?&gt;" line="196"/>
            <method name="getRiskAversion" type="Scalar&lt;?&gt;" line="200"/>
            <method name="setRiskAversion" type="void" line="204">
                <params>
                    <param name="aFactor" type="Number"/>
                </params>
                <declaration name="tmpFactor" type="BigDecimal" line="206"/>
                <scope line="208"/>
                <scope line="210"/>
                <scope line="212"/>
            </method>
            <method name="size" type="int" line="217"/>
            <method name="toCorrelations" type="BasicMatrix&lt;?&gt;" line="221"/>
            <javadoc line="225">
                Will calculate the risk aversion factor that is the best fit for an observed pair of market portfolio weights and
                  equilibrium/historical excess returns.                
            </javadoc>
            <method name="calculateImpliedRiskAversion" type="Scalar&lt;?&gt;" line="229">
                <params>
                    <param name="assetWeights" type="BasicMatrix&lt;?&gt;"/>
                    <param name="assetReturns" type="BasicMatrix&lt;?&gt;"/>
                </params>
                <declaration name="retVal" type="Scalar&amp;lt;?&amp;gt;" line="231"/>
                <scope line="233"/>
                <scope line="235"/>
            </method>
        </class>
    </source>