<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.finance.portfolio">
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.ProgrammingError"/>
        <import package="org.ojalgo.array.ArrayUtils"/>
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="org.ojalgo.finance.FinanceUtils"/>
        <import package="org.ojalgo.matrix.BasicMatrix"/>
        <import package="org.ojalgo.matrix.PrimitiveMatrix"/>
        <import package="org.ojalgo.scalar.BigScalar"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <class name="MarketEquilibrium" line="12">
            <javadoc line="12">
                MarketEquilibrium translates between the market portfolio weights and the equilibrium excess returns. The only things
                  needed to do those translations are the covariance matrix and the risk aversion factor - that&apos;s what you need to
                  supply when you instantiate this class.                
                <see>
                    #calculateAssetReturns(BasicMatrix)                    
                </see>
                <see>
                    #calculateAssetWeights(BasicMatrix)                    
                </see>
                <author>
                    apete                    
                </author>
            </javadoc>
            <declaration name="DEFAULT_RISK_AVERSION" type="BigDecimal" line="21"/>
            <declaration name="STRING_ZERO" type="String" line="22"/>
            <declaration name="SYMBOL" type="String" line="23"/>
            <javadoc line="24">
                Calculates the portfolio return using the input asset weights and returns.                
            </javadoc>
            <method name="calculatePortfolioReturn" type="Scalar<?>" line="27">
                <params>
                    <param name="assetWeights" type="BasicMatrix<?>"/>
                    <param name="assetReturns" type="BasicMatrix<?>"/>
                </params>
            </method>
            <method name="makeSymbols" type="String[]" line="30">
                <params>
                    <param name="count" type="int"/>
                </params>
                <declaration name="retVal" type="String[]" line="31"/>
                <declaration name="tmpMaxLength" type="int" line="32"/>
                <declaration name="tmpNumberString" type="String" line="33"/>
                <scope line="34">
                    <scope line="36"/>
                </scope>
            </method>
            <declaration name="myAssetKeys" type="String[]" line="43"/>
            <declaration name="myCovariances" type="BasicMatrix&lt;?&gt;" line="44"/>
            <declaration name="myRiskAversion" type="BigDecimal" line="45"/>
            <method name="MarketEquilibrium" type="constructor" line="46">
                <params>
                    <param name="covarianceMatrix" type="BasicMatrix<?>"/>
                </params>
            </method>
            <method name="MarketEquilibrium" type="constructor" line="49">
                <params>
                    <param name="covarianceMatrix" type="BasicMatrix<?>"/>
                    <param name="riskAversionFactor" type="Number"/>
                </params>
            </method>
            <method name="MarketEquilibrium" type="constructor" line="52">
                <params>
                    <param name="assetNamesOrKeys" type="String[]"/>
                    <param name="covarianceMatrix" type="BasicMatrix<?>"/>
                </params>
            </method>
            <method name="MarketEquilibrium" type="constructor" line="58">
                <params>
                    <param name="assetNamesOrKeys" type="String[]"/>
                    <param name="covarianceMatrix" type="BasicMatrix<?>"/>
                    <param name="riskAversionFactor" type="Number"/>
                </params>
            </method>
            <method name="MarketEquilibrium" type="constructor" line="64"/>
            <method name="MarketEquilibrium" type="constructor" line="68">
                <params>
                    <param name="aMarket" type="MarketEquilibrium"/>
                </params>
            </method>
            <javadoc line="71">
                If the input vector of asset weights are the weights of the market portfolio, then the ouput is the equilibrium
                  excess returns.                
            </javadoc>
            <method name="calculateAssetReturns" type="BasicMatrix<?>" line="75">
                <params>
                    <param name="assetWeights" type="BasicMatrix<?>"/>
                </params>
                <declaration name="tmpAssetWeights" type="BasicMatrix&lt;?&gt;" line="76"/>
            </method>
            <javadoc line="79">
                If the input vector of returns are the equilibrium excess returns then the output is the market portfolio
                  weights. This is unconstrained optimisation - there are no constraints on the resulting instrument weights.                
            </javadoc>
            <method name="calculateAssetWeights" type="BasicMatrix<?>" line="83">
                <params>
                    <param name="assetReturns" type="BasicMatrix<?>"/>
                </params>
                <declaration name="tmpAssetWeights" type="BasicMatrix&lt;?&gt;" line="84"/>
                <scope line="85"/>
                <scope line="88"/>
            </method>
            <javadoc line="92">
                Calculates the portfolio variance using the input instrument weights.                
            </javadoc>
            <method name="calculatePortfolioVariance" type="Scalar<?>" line="95">
                <params>
                    <param name="assetWeights" type="BasicMatrix<?>"/>
                </params>
                <declaration name="tmpLeft" type="BasicMatrix&lt;?&gt;" line="96"/>
                <declaration name="tmpRight" type="BasicMatrix&lt;?&gt;" line="97"/>
                <scope line="98"/>
                <scope line="102"/>
            </method>
            <javadoc line="108">
                Will set the risk aversion factor to the best fit for an observed pair of market portfolio asset weights and
                  equilibrium/historical excess returns.                
            </javadoc>
            <method name="calibrate" type="void" line="112">
                <params>
                    <param name="assetWeights" type="BasicMatrix<?>"/>
                    <param name="assetReturns" type="BasicMatrix<?>"/>
                </params>
                <declaration name="tmpImpliedRiskAversion" type="Scalar&lt;?&gt;" line="113"/>
            </method>
            <javadoc line="116">
                Equivalent to copying, but additionally the covariance matrix will be cleaned of negative and very small
                  eigenvalues to make it positive definite.                
            </javadoc>
            <method name="clean" type="MarketEquilibrium" line="120">
                <declaration name="tmpAssetVolatilities" type="PrimitiveMatrix" line="121"/>
                <declaration name="tmpCleanedCorrelations" type="PrimitiveMatrix" line="122"/>
                <declaration name="tmpCovariances" type="PrimitiveMatrix" line="123"/>
            </method>
            <method name="copy" type="MarketEquilibrium" line="126"/>
            <method name="getAssetKey" type="String" line="129">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getAssetKeys" type="String[]" line="132"/>
            <method name="getCovariances" type="BasicMatrix<?>" line="135"/>
            <method name="getRiskAversion" type="Scalar<?>" line="138"/>
            <method name="setRiskAversion" type="void" line="141">
                <params>
                    <param name="aFactor" type="Number"/>
                </params>
                <declaration name="tmpFactor" type="BigDecimal" line="142"/>
                <scope line="143"/>
                <scope line="146"/>
                <scope line="149"/>
            </method>
            <method name="size" type="int" line="153"/>
            <method name="toCorrelations" type="BasicMatrix<?>" line="156"/>
            <javadoc line="159">
                Will calculate the risk aversion factor that is the best fit for an observed pair of market portfolio weights and
                  equilibrium/historical excess returns.                
            </javadoc>
            <method name="calculateImpliedRiskAversion" type="Scalar<?>" line="163">
                <params>
                    <param name="assetWeights" type="BasicMatrix<?>"/>
                    <param name="assetReturns" type="BasicMatrix<?>"/>
                </params>
                <declaration name="retVal" type="Scalar&lt;?&gt;" line="164"/>
                <scope line="165"/>
                <scope line="168"/>
            </method>
        </class>
    </source>