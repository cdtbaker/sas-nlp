<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.finance.portfolio">
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="org.ojalgo.ProgrammingError"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.matrix.BasicMatrix"/>
        <import package="org.ojalgo.optimisation.Expression"/>
        <import package="org.ojalgo.optimisation.ExpressionsBasedModel"/>
        <import package="org.ojalgo.optimisation.Optimisation"/>
        <import package="org.ojalgo.optimisation.Optimisation.State"/>
        <import package="org.ojalgo.optimisation.Variable"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <class name="MarkowitzModel" line="43">
            <extends class="EquilibriumModel"/>
            <javadoc line="43">
                &lt;p&gt;
                  The Markowitz model, in this class, is defined as:
                  &lt;/p&gt;
                  &lt;p&gt;
                  min (RAF/2) [w]&lt;sup&gt;T&lt;/sup&gt;[C][w] - [w]&lt;sup&gt;T&lt;/sup&gt;[r] &lt;br&gt;
                  subject to |[w]| = 1
                  &lt;/p&gt;
                  &lt;p&gt;
                  RAF stands for Risk Aversion Factor. Instead of specifying a desired risk or return level you specify a level of risk
                  aversion that is used to balance the risk and return.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The expected returns for each of the assets must be excess returns. Otherwise this formulation is wrong.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The total weights of all assets will always be 100%, but shorting can be allowed or not according to your preference.
                  ( {@linkplain #setShortingAllowed(boolean)} ) In addition you may set lower and upper limits on any individual
                  instrument. ( {@linkplain #setLowerLimit(int,BigDecimal)} and {@linkplain #setUpperLimit(int,BigDecimal)} )
                  &lt;/p&gt;
                  &lt;p&gt;
                  Risk-free asset: That means there is no excess return and zero variance. Don&apos;t (try to) include a risk-free asset
                  here.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Do not worry about the minus sign in front of the return part of the objective function - it is handled/negated for
                  you. When you&apos;re asked to supply the expected excess returns you should supply precisely that.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Basic usage instructions
                  &lt;/p&gt;
                  After you&apos;ve instantiated the MarkowitzModel you need to do one of three different things:
                  &lt;ol&gt;
                  &lt;li&gt;{@link #setRiskAversion(Number)} unless this was already set in the {@link MarketEquilibrium} or{@link FinancePortfolio.Context} used to instantiate the MarkowitzModel&lt;/li&gt;
                  &lt;li&gt;{@link #setTargetReturn(BigDecimal)}&lt;/li&gt;
                  &lt;li&gt;{@link #setTargetVariance(BigDecimal)}&lt;/li&gt;
                  &lt;/ol&gt;
                  &lt;p&gt;
                  Optionally you may {@linkplain #setLowerLimit(int,BigDecimal)}, {@linkplain #setUpperLimit(int,BigDecimal)} or{@linkplain #setShortingAllowed(boolean)}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  To get the optimal asset weighs you simply call {@link #getWeights()} or {@link #getAssetWeights()}.
                  &lt;/p&gt;                
                <author>
                    apete                    
                </author>
            </javadoc>
            <declaration name="_0_000005" type="double" line="93"/>
            <declaration name="BALANCE" type="String" line="94"/>
            <declaration name="RETURN" type="String" line="95"/>
            <declaration name="VARIANCE" type="String" line="96"/>
            <declaration name="myConstraints" type="HashMap&lt;int[],LowerUpper&gt;" line="98"/>
            <declaration name="myExpectedExcessReturns" type="BasicMatrix&lt;?&gt;" line="99"/>
            <declaration name="myOptimisationModel" type="ExpressionsBasedModel" line="100"/>
            <declaration name="myOptimisationState" type="State" line="101"/>
            <declaration name="myShortingAllowed" type="boolean" line="102"/>
            <declaration name="myTargetReturn" type="BigDecimal" line="103"/>
            <declaration name="myTargetVariance" type="BigDecimal" line="104"/>
            <declaration name="myVariables" type="Variable[]" line="105"/>
            <method name="MarkowitzModel" type="constructor" line="107">
                <params>
                    <param name="covarianceMatrix" type="BasicMatrix<?>"/>
                    <param name="expectedExcessReturns" type="BasicMatrix<?>"/>
                </params>
            </method>
            <method name="MarkowitzModel" type="constructor" line="111">
                <params>
                    <param name="portfolioContext" type="FinancePortfolio.Context"/>
                </params>
                <declaration name="tmpSymbols" type="String[]" line="117"/>
                <scope line="119"/>
            </method>
            <method name="MarkowitzModel" type="constructor" line="125">
                <params>
                    <param name="marketEquilibrium" type="MarketEquilibrium"/>
                    <param name="expectedExcessReturns" type="BasicMatrix<?>"/>
                </params>
                <declaration name="tmpSymbols" type="String[]" line="131"/>
                <scope line="133"/>
                <scope line="138"/>
            </method>
            <method name="MarkowitzModel" type="constructor" line="144">
                <params>
                    <param name="marketEquilibrium" type="MarketEquilibrium"/>
                </params>
            </method>
            <javadoc line="154">
                Will add a constraint on the sum of the asset weights specified by the asset indices. Either (but not both) of
                  the limits may be null.                
            </javadoc>
            <method name="addConstraint" type="LowerUpper" line="158">
                <params>
                    <param name="lowerLimit" type="BigDecimal"/>
                    <param name="upperLimit" type="BigDecimal"/>
                    <param name="assetIndeces" type="int"/>
                </params>
            </method>
            <method name="clearAllConstraints" type="void" line="162"/>
            <method name="getOptimisationState" type="State" line="167">
                <scope line="168"/>
            </method>
            <method name="setLowerLimit" type="void" line="174">
                <params>
                    <param name="assetIndex" type="int"/>
                    <param name="lowerLimit" type="BigDecimal"/>
                </params>
            </method>
            <method name="setShortingAllowed" type="void" line="179">
                <params>
                    <param name="allowed" type="boolean"/>
                </params>
            </method>
            <javadoc line="184">
                &lt;p&gt;
                  Will set the target return to whatever you input and the target variance to &lt;code&gt;null&lt;/code&gt;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Setting the target return implies that you disregard the risk aversion factor and want the minimum risk portfolio
                  with return that is equal to or greater than the target.
                  &lt;/p&gt;
                  &lt;p&gt;
                  By setting the target return too high it is possible to define an infeasible optimisation problem. It is in fact
                  (in combination with setting lower and upper bounds on the instrument weights) very easy to do so without
                  realising it.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Setting a target return is not recommnded. It&apos;s much better to modify the risk aversion factor.
                  &lt;/p&gt;                
                <see>
                    #setTargetVariance(BigDecimal)                    
                </see>
            </javadoc>
            <method name="setTargetReturn" type="void" line="203">
                <params>
                    <param name="targetReturn" type="BigDecimal"/>
                </params>
            </method>
            <javadoc line="209">
                &lt;p&gt;
                  Will set the target variance to whatever you input and the target return to &lt;code&gt;null&lt;/code&gt;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Setting the target variance implies that you disregard the risk aversion factor and want the maximum return
                  portfolio with risk that is equal to or as close to the target as possible.
                  &lt;/p&gt;
                  &lt;p&gt;
                  A target variance isn&apos;t an infeasibility risk the way a return target is. The algorithm will return a solution,
                  but there is no guaranty the portfolio variance is equal to or less than the target (as one may expect).
                  &lt;/p&gt;
                  &lt;p&gt;
                  There is a performance penalty for setting a target variance as the underlying optimisation model has to be
                  solved several (many) times with different pararmeters (different risk aversion factors).
                  &lt;/p&gt;
                  &lt;p&gt;
                  Setting a target variance is not recommnded. It&apos;s much better to modify the risk aversion factor.
                  &lt;/p&gt;                
                <see>
                    #setTargetReturn(BigDecimal)                    
                </see>
            </javadoc>
            <method name="setTargetVariance" type="void" line="231">
                <params>
                    <param name="targetVariance" type="BigDecimal"/>
                </params>
            </method>
            <method name="setUpperLimit" type="void" line="237">
                <params>
                    <param name="assetIndex" type="int"/>
                    <param name="upperLimit" type="BigDecimal"/>
                </params>
            </method>
            <method name="toString" type="String" line="243">
                <scope line="245"/>
            </method>
            <method name="generateOptimisationModel" type="ExpressionsBasedModel" line="252">
                <params>
                    <param name="riskAversion" type="BigDecimal"/>
                    <param name="lowerReturnLimit" type="BigDecimal"/>
                    <param name="upperReturnLimit" type="BigDecimal"/>
                </params>
                <comment line="301">
                    retVal.options.debug(QuadraticSolver.class);                    
                </comment>
                <declaration name="tmpVariables" type="Variable[]" line="254"/>
                <scope line="255">
                    <scope line="257"/>
                </scope>
                <declaration name="retVal" type="ExpressionsBasedModel" line="262"/>
                <declaration name="tmpVarianceExpression" type="Expression" line="264"/>
                <declaration name="tmpCovariances" type="BasicMatrix&lt;?&gt;" line="265"/>
                <scope line="266">
                    <scope line="267"/>
                </scope>
                <declaration name="tmpBalanceExpression" type="Expression" line="273"/>
                <scope line="274"/>
                <scope line="279">
                    <declaration name="tmpReturnExpression" type="Expression" line="281"/>
                    <scope line="282"/>
                </scope>
                <scope line="289">
                    <declaration name="tmpKey" type="int[]" line="291"/>
                    <declaration name="tmpValue" type="LowerUpper" line="292"/>
                    <declaration name="tmpExpr" type="Expression" line="294"/>
                    <scope line="295"/>
                </scope>
            </method>
            <method name="optimise" type="Optimisation.Result" line="306">
                <comment line="400">
                    BasicLogger.logDebug();                    
                </comment>
                <comment line="401">
                    BasicLogger.logDebug(&quot;Iter:   {}&quot;, tmpIterCount);                    
                </comment>
                <comment line="402">
                    BasicLogger.logDebug(&quot;Low:    {}&quot;, tmpLowVariance);                    
                </comment>
                <comment line="403">
                    BasicLogger.logDebug(&quot;Target: {}&quot;, myTargetVariance);                    
                </comment>
                <comment line="404">
                    BasicLogger.logDebug(&quot;High:   {}&quot;, tmpHighVariance);                    
                </comment>
                <comment line="405">
                    BasicLogger.logDebug(&quot;Diff:   {}&quot;, tmpTargetDiff);                    
                </comment>
                <declaration name="retVal" type="Optimisation.Result" line="308"/>
                <scope line="310"/>
                <scope line="315">
                    <declaration name="tmpRiskAversion" type="BigDecimal" line="317"/>
                    <declaration name="tmpReturn" type="BigDecimal" line="318"/>
                    <declaration name="tmpVariance" type="BigDecimal" line="319"/>
                    <declaration name="tmpLowRiskAversion" type="BigDecimal" line="321"/>
                    <declaration name="tmpLowReturn" type="BigDecimal" line="322"/>
                    <declaration name="tmpLowVariance" type="BigDecimal" line="323"/>
                    <declaration name="tmpHighRiskAversion" type="BigDecimal" line="325"/>
                    <declaration name="tmpHighReturn" type="BigDecimal" line="326"/>
                    <declaration name="tmpHighVariance" type="BigDecimal" line="327"/>
                    <declaration name="tmpTargetDiff" type="BigDecimal" line="329"/>
                    <scope line="338"/>
                    <scope line="355"/>
                    <declaration name="tmpIterCount" type="int" line="373"/>
                    <scope line="375">
                        <scope line="382">
                            <scope line="388"/>
                            <scope line="392"/>
                        </scope>
                        <scope line="407"/>
                    </scope>
                </scope>
                <scope line="415"/>
                <scope line="421">
                    <declaration name="tmpVariables" type="List&lt;Variable&gt;" line="422"/>
                    <scope line="423">
                        <declaration name="tmpBigDecimal" type="BigDecimal" line="424"/>
                    </scope>
                </scope>
            </method>
            <method name="calculateAssetReturns" type="BasicMatrix<?>" line="433"/>
            <javadoc line="437">
                Constrained optimisation.                
            </javadoc>
            <method name="calculateAssetWeights" type="BasicMatrix<?>" line="441">
                <declaration name="tmpResult" type="Optimisation.Result" line="443"/>
            </method>
            <method name="reset" type="void" line="451"/>
            <method name="calculatePortfolioReturn" type="Scalar<?>" line="459">
                <params>
                    <param name="weightsVctr" type="Access1D<?>"/>
                    <param name="returnsVctr" type="BasicMatrix<?>"/>
                </params>
            </method>
            <method name="calculatePortfolioVariance" type="Scalar<?>" line="463">
                <params>
                    <param name="weightsVctr" type="Access1D<?>"/>
                </params>
            </method>
        </class>
    </source>