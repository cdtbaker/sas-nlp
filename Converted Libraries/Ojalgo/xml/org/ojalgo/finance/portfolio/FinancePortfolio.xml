<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.finance.portfolio">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util.List"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="org.ojalgo.matrix.BasicMatrix"/>
        <import package="org.ojalgo.matrix.BasicMatrix.Factory"/>
        <import package="org.ojalgo.matrix.PrimitiveMatrix"/>
        <import package="org.ojalgo.random.RandomUtils"/>
        <import package="org.ojalgo.random.process.GeometricBrownianMotion"/>
        <import package="org.ojalgo.type.StandardType"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="FinancePortfolio" line="40">
            <implements interface="Comparable">
                <type_params>
                    <type_param name="FinancePortfolio"/>
                </type_params>
            </implements>
            <javadoc line="40">
                A FinancePortfolio is primarily a set of portfolio asset weights.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <interface name="Context">
                <method name="calculatePortfolioReturn" type="double" line="49"/>
                <method name="calculatePortfolioVariance" type="double" line="51"/>
                <method name="getAssetReturns" type="BasicMatrix<?>" line="53"/>
                <method name="getAssetVolatilities" type="BasicMatrix<?>" line="55"/>
                <method name="getCorrelations" type="BasicMatrix<?>" line="57"/>
                <method name="getCovariances" type="BasicMatrix<?>" line="59"/>
                <method name="size" type="int" line="61"/>
            </interface>
            <declaration name="MATRIX_FACTORY" type="Factory&lt;PrimitiveMatrix&gt;" line="65"/>
            <declaration name="WEIGHT_CONTEXT" type="NumberContext" line="67"/>
            <method name="FinancePortfolio" type="constructor" line="69"/>
            <method name="compareTo" type="int" line="73">
                <params>
                    <param name="ref" type="FinancePortfolio"/>
                </params>
            </method>
            <method name="forecast" type="GeometricBrownianMotion" line="77">
                <declaration name="tmpInitialValue" type="double" line="79"/>
                <declaration name="tmpExpectedValue" type="double" line="80"/>
                <declaration name="tmpValueVariance" type="double" line="81"/>
                <declaration name="tmpHorizon" type="double" line="82"/>
            </method>
            <method name="getConformance" type="double" line="87">
                <params>
                    <param name="aReference" type="FinancePortfolio"/>
                </params>
                <declaration name="tmpMyWeights" type="BasicMatrix&lt;?&gt;" line="89"/>
                <declaration name="tmpRefWeights" type="BasicMatrix&lt;?&gt;" line="90"/>
                <declaration name="tmpNumerator" type="double" line="92"/>
                <declaration name="tmpDenom1" type="double" line="93"/>
                <declaration name="tmpDenom2" type="double" line="94"/>
            </method>
            <method name="getLossProbability" type="double" line="99"/>
            <method name="getLossProbability" type="double" line="103">
                <params>
                    <param name="aTimePeriod" type="Number"/>
                </params>
                <declaration name="tmpProc" type="GeometricBrownianMotion" line="105"/>
                <declaration name="tmpDoubleValue" type="double" line="107"/>
                <declaration name="tmpValue" type="double" line="108"/>
            </method>
            <method name="getMeanReturn" type="double" line="113"/>
            <javadoc line="113">
                The mean/expected return of this instrument. May return either the absolute or excess return of the instrument.
                  The context in which an instance is used should make it clear which. Calling {@linkplain #shift(Number)} with an
                  appropriate argument will transform between absolute and excess return.                
            </javadoc>
            <javadoc line="120">
                The instrument&apos;s return variance. Subclasses must override either {@linkplain #getReturnVariance()} or{@linkplain #getVolatility()}.                
            </javadoc>
            <method name="getReturnVariance" type="double" line="124">
                <declaration name="tmpVolatility" type="double" line="125"/>
            </method>
            <method name="getSharpeRatio" type="double" line="129"/>
            <method name="getSharpeRatio" type="double" line="133">
                <params>
                    <param name="aRiskFreeReturn" type="Number"/>
                </params>
                <scope line="134"/>
                <scope line="136"/>
            </method>
            <javadoc line="141">
                Value at Risk (VaR) is the maximum loss not exceeded with a given probability defined as the confidence level,
                  over a given period of time.                
            </javadoc>
            <method name="getValueAtRisk" type="double" line="145">
                <params>
                    <param name="aConfidenceLevel" type="Number"/>
                    <param name="aTimePeriod" type="Number"/>
                </params>
                <declaration name="aReturn" type="double" line="147"/>
                <declaration name="aStdDev" type="double" line="148"/>
                <declaration name="tmpConfidenceScale" type="double" line="150"/>
                <declaration name="tmpTimePeriod" type="double" line="151"/>
            </method>
            <method name="getValueAtRisk95" type="double" line="156"/>
            <javadoc line="160">
                Volatility refers to the standard deviation of the change in value of an asset with a specific time horizon. It
                  is often used to quantify the risk of the asset over that time period. Subclasses must override either{@linkplain #getReturnVariance()} or {@linkplain #getVolatility()}.                
            </javadoc>
            <method name="getVolatility" type="double" line="165"/>
            <method name="getWeights" type="List<BigDecimal>" line="169"/>
            <javadoc line="169">
                This method returns a list of the weights of the Portfolio&apos;s contained assets. An asset weight is NOT restricted
                  to being a share/percentage - it can be anything. Most subclasses do however assume that the list of asset
                  weights are shares/percentages that sum up to 100%. Calling {@linkplain #normalise()} will transform any set of
                  weights to that form.                
            </javadoc>
            <javadoc line="177">
                Normalised weights Portfolio                
            </javadoc>
            <method name="normalise" type="FinancePortfolio" line="180"/>
            <method name="toString" type="String" line="185"/>
            <method name="reset" type="void" line="190"/>
        </class>
    </source>