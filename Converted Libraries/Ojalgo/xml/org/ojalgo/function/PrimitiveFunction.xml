<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.function">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.ProgrammingError"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <class name="PrimitiveFunction" line="5">
            <extends class="FunctionSet">
                <type_params>
                    <type_param name="Double"/>
                </type_params>
            </extends>
            <javadoc line="5">
                Only the primitive parameter (double) methods are actually implemented.
                  The methods with the reference type parameters (Double) should delegate
                  to the primitive methods (and do nothing else).
                  The various implementations should delegate as much as possible to{@link java.lang.Math} and/or built-in Java operators.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="Binary" line="13">
                <extends class="BinaryFunction">
                    <type_params>
                        <type_param name="Double"/>
                    </type_params>
                </extends>
                <method name="invoke" type="Double" line="14">
                    <params>
                        <param name="arg1" type="Double"/>
                        <param name="arg2" type="Double"/>
                    </params>
                </method>
            </class>
            <class name="Parameter" line="18">
                <extends class="ParameterFunction">
                    <type_params>
                        <type_param name="Double"/>
                    </type_params>
                </extends>
                <method name="invoke" type="Double" line="19">
                    <params>
                        <param name="arg" type="Double"/>
                        <param name="param" type="int"/>
                    </params>
                </method>
            </class>
            <class name="Unary" line="23">
                <implements interface="UnaryFunction">
                    <type_params>
                        <type_param name="Double"/>
                    </type_params>
                </implements>
                <method name="invoke" type="Double" line="24">
                    <params>
                        <param name="arg" type="Double"/>
                    </params>
                </method>
            </class>
            <declaration name="ABS" type="UnaryFunction&lt;Double&gt;" line="28"/>
            <anonymous_class line="28">
                <method name="invoke" type="double" line="29">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="ACOS" type="UnaryFunction&lt;Double&gt;" line="34"/>
            <anonymous_class line="34">
                <method name="invoke" type="double" line="35">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="ACOSH" type="UnaryFunction&lt;Double&gt;" line="40"/>
            <anonymous_class line="40">
                <method name="invoke" type="double" line="41">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="ADD" type="BinaryFunction&lt;Double&gt;" line="46"/>
            <anonymous_class line="46">
                <method name="invoke" type="double" line="47">
                    <params>
                        <param name="arg1" type="double"/>
                        <param name="arg2" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="ASIN" type="UnaryFunction&lt;Double&gt;" line="52"/>
            <anonymous_class line="52">
                <method name="invoke" type="double" line="53">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="ASINH" type="UnaryFunction&lt;Double&gt;" line="58"/>
            <anonymous_class line="58">
                <method name="invoke" type="double" line="59">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="ATAN" type="UnaryFunction&lt;Double&gt;" line="64"/>
            <anonymous_class line="64">
                <method name="invoke" type="double" line="65">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="ATANH" type="UnaryFunction&lt;Double&gt;" line="70"/>
            <anonymous_class line="70">
                <method name="invoke" type="double" line="71">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="CARDINALITY" type="UnaryFunction&lt;Double&gt;" line="76"/>
            <anonymous_class line="76">
                <method name="invoke" type="double" line="77">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="CONJUGATE" type="UnaryFunction&lt;Double&gt;" line="82"/>
            <anonymous_class line="82">
                <method name="invoke" type="double" line="83">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="SQRT1PX2" type="UnaryFunction&lt;Double&gt;" line="88"/>
            <anonymous_class line="88">
                <method name="invoke" type="double" line="89">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="COS" type="UnaryFunction&lt;Double&gt;" line="94"/>
            <anonymous_class line="94">
                <method name="invoke" type="double" line="95">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="COSH" type="UnaryFunction&lt;Double&gt;" line="100"/>
            <anonymous_class line="100">
                <method name="invoke" type="double" line="101">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="DIVIDE" type="BinaryFunction&lt;Double&gt;" line="106"/>
            <anonymous_class line="106">
                <method name="invoke" type="double" line="107">
                    <params>
                        <param name="arg1" type="double"/>
                        <param name="arg2" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="EXP" type="UnaryFunction&lt;Double&gt;" line="112"/>
            <anonymous_class line="112">
                <method name="invoke" type="double" line="113">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="EXPM1" type="UnaryFunction&lt;Double&gt;" line="118"/>
            <anonymous_class line="118">
                <method name="invoke" type="double" line="119">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="HYPOT" type="BinaryFunction&lt;Double&gt;" line="124"/>
            <anonymous_class line="124">
                <method name="invoke" type="double" line="125">
                    <params>
                        <param name="arg1" type="double"/>
                        <param name="arg2" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="INVERT" type="UnaryFunction&lt;Double&gt;" line="130"/>
            <anonymous_class line="130">
                <method name="invoke" type="double" line="131">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="LOG" type="UnaryFunction&lt;Double&gt;" line="136"/>
            <anonymous_class line="136">
                <method name="invoke" type="double" line="137">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="LOG10" type="UnaryFunction&lt;Double&gt;" line="142"/>
            <anonymous_class line="142">
                <method name="invoke" type="double" line="143">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="LOG1P" type="UnaryFunction&lt;Double&gt;" line="148"/>
            <anonymous_class line="148">
                <method name="invoke" type="double" line="149">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="MAX" type="BinaryFunction&lt;Double&gt;" line="154"/>
            <anonymous_class line="154">
                <method name="invoke" type="double" line="155">
                    <params>
                        <param name="arg1" type="double"/>
                        <param name="arg2" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="MIN" type="BinaryFunction&lt;Double&gt;" line="160"/>
            <anonymous_class line="160">
                <method name="invoke" type="double" line="161">
                    <params>
                        <param name="arg1" type="double"/>
                        <param name="arg2" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="MULTIPLY" type="BinaryFunction&lt;Double&gt;" line="166"/>
            <anonymous_class line="166">
                <method name="invoke" type="double" line="167">
                    <params>
                        <param name="arg1" type="double"/>
                        <param name="arg2" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="NEGATE" type="UnaryFunction&lt;Double&gt;" line="172"/>
            <anonymous_class line="172">
                <method name="invoke" type="double" line="173">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="POW" type="BinaryFunction&lt;Double&gt;" line="178"/>
            <anonymous_class line="178">
                <method name="invoke" type="double" line="179">
                    <params>
                        <param name="arg1" type="double"/>
                        <param name="arg2" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="POWER" type="ParameterFunction&lt;Double&gt;" line="184"/>
            <anonymous_class line="184">
                <method name="invoke" type="double" line="185">
                    <params>
                        <param name="arg" type="double"/>
                        <param name="param" type="int"/>
                    </params>
                    <declaration name="retVal" type="double" line="186"/>
                    <scope line="187"/>
                    <scope line="190">
                        <scope line="191"/>
                    </scope>
                </method>
            </anonymous_class>
            <declaration name="ROOT" type="ParameterFunction&lt;Double&gt;" line="200"/>
            <anonymous_class line="200">
                <method name="invoke" type="double" line="201">
                    <params>
                        <param name="arg" type="double"/>
                        <param name="param" type="int"/>
                    </params>
                    <scope line="202"/>
                    <scope line="205"/>
                </method>
            </anonymous_class>
            <declaration name="SCALE" type="ParameterFunction&lt;Double&gt;" line="211"/>
            <anonymous_class line="211">
                <method name="invoke" type="double" line="212">
                    <params>
                        <param name="arg" type="double"/>
                        <param name="param" type="int"/>
                    </params>
                    <scope line="213"/>
                    <declaration name="tmpFactor" type="long" line="216"/>
                    <declaration name="tmp10" type="long" line="217"/>
                    <scope line="218"/>
                </method>
            </anonymous_class>
            <declaration name="SIGNUM" type="UnaryFunction&lt;Double&gt;" line="226"/>
            <anonymous_class line="226">
                <method name="invoke" type="double" line="227">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="SIN" type="UnaryFunction&lt;Double&gt;" line="232"/>
            <anonymous_class line="232">
                <method name="invoke" type="double" line="233">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="SINH" type="UnaryFunction&lt;Double&gt;" line="238"/>
            <anonymous_class line="238">
                <method name="invoke" type="double" line="239">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="SQRT" type="UnaryFunction&lt;Double&gt;" line="244"/>
            <anonymous_class line="244">
                <method name="invoke" type="double" line="245">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="SUBTRACT" type="BinaryFunction&lt;Double&gt;" line="250"/>
            <anonymous_class line="250">
                <method name="invoke" type="double" line="251">
                    <params>
                        <param name="arg1" type="double"/>
                        <param name="arg2" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="TAN" type="UnaryFunction&lt;Double&gt;" line="256"/>
            <anonymous_class line="256">
                <method name="invoke" type="double" line="257">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="TANH" type="UnaryFunction&lt;Double&gt;" line="262"/>
            <anonymous_class line="262">
                <method name="invoke" type="double" line="263">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="VALUE" type="UnaryFunction&lt;Double&gt;" line="268"/>
            <anonymous_class line="268">
                <method name="invoke" type="double" line="269">
                    <params>
                        <param name="arg" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="SET" type="PrimitiveFunction" line="274"/>
            <method name="getSet" type="PrimitiveFunction" line="275"/>
            <method name="PrimitiveFunction" type="constructor" line="278"/>
            <method name="abs" type="UnaryFunction<Double>" line="281"/>
            <method name="acos" type="UnaryFunction<Double>" line="284"/>
            <method name="acosh" type="UnaryFunction<Double>" line="287"/>
            <method name="add" type="BinaryFunction<Double>" line="290"/>
            <method name="asin" type="UnaryFunction<Double>" line="293"/>
            <method name="asinh" type="UnaryFunction<Double>" line="296"/>
            <method name="atan" type="UnaryFunction<Double>" line="299"/>
            <method name="atanh" type="UnaryFunction<Double>" line="302"/>
            <method name="cardinality" type="UnaryFunction<Double>" line="305"/>
            <method name="conjugate" type="UnaryFunction<Double>" line="308"/>
            <method name="cos" type="UnaryFunction<Double>" line="311"/>
            <method name="cosh" type="UnaryFunction<Double>" line="314"/>
            <method name="divide" type="BinaryFunction<Double>" line="317"/>
            <method name="exp" type="UnaryFunction<Double>" line="320"/>
            <method name="expm1" type="UnaryFunction<Double>" line="323"/>
            <method name="hypot" type="BinaryFunction<Double>" line="326"/>
            <method name="invert" type="UnaryFunction<Double>" line="329"/>
            <method name="log" type="UnaryFunction<Double>" line="332"/>
            <method name="log10" type="UnaryFunction<Double>" line="335"/>
            <method name="log1p" type="UnaryFunction<Double>" line="338"/>
            <method name="max" type="BinaryFunction<Double>" line="341"/>
            <method name="min" type="BinaryFunction<Double>" line="344"/>
            <method name="multiply" type="BinaryFunction<Double>" line="347"/>
            <method name="negate" type="UnaryFunction<Double>" line="350"/>
            <method name="pow" type="BinaryFunction<Double>" line="353"/>
            <method name="power" type="ParameterFunction<Double>" line="356"/>
            <method name="root" type="ParameterFunction<Double>" line="359"/>
            <method name="scale" type="ParameterFunction<Double>" line="362"/>
            <method name="signum" type="UnaryFunction<Double>" line="365"/>
            <method name="sin" type="UnaryFunction<Double>" line="368"/>
            <method name="sinh" type="UnaryFunction<Double>" line="371"/>
            <method name="sqrt" type="UnaryFunction<Double>" line="374"/>
            <method name="sqrt1px2" type="UnaryFunction<Double>" line="377"/>
            <method name="subtract" type="BinaryFunction<Double>" line="380"/>
            <method name="tan" type="UnaryFunction<Double>" line="383"/>
            <method name="tanh" type="UnaryFunction<Double>" line="386"/>
            <method name="value" type="UnaryFunction<Double>" line="389"/>
        </class>
    </source>