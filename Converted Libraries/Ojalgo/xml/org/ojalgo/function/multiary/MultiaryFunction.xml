<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.function.multiary">
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.function.Function"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <interface name="MultiaryFunction">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <implements interface="Function">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <interface name="Constant">
                <type_params>
                    <type_param name="N"/>
                    <type_param name="F"/>
                </type_params>
                <implements interface="MultiaryFunction">
                    <type_params>
                        <type_param name="N"/>
                    </type_params>
                </implements>
                <method name="constant" type="F" line="8"/>
                <method name="getConstant" type="N" line="9"/>
                <method name="setConstant" type="void" line="10"/>
            </interface>
            <interface name="Linear">
                <type_params>
                    <type_param name="N"/>
                </type_params>
                <implements interface="MultiaryFunction">
                    <type_params>
                        <type_param name="N"/>
                    </type_params>
                </implements>
                <method name="linear" type="PhysicalStore<N>" line="13"/>
            </interface>
            <interface name="Quadratic">
                <type_params>
                    <type_param name="N"/>
                </type_params>
                <implements interface="MultiaryFunction">
                    <type_params>
                        <type_param name="N"/>
                    </type_params>
                </implements>
                <method name="quadratic" type="PhysicalStore<N>" line="16"/>
            </interface>
            <method name="arity" type="int" line="18"/>
            <method name="dim" type="int" line="19"/>
            <javadoc line="19">
                @deprecated Since v35. Use {@link #arity()} instead                
            </javadoc>
            <method name="getGradient" type="MatrixStore<N>" line="23"/>
            <javadoc line="23">
                The gradient of a scalar field is a vector field that points in the
                  direction of the greatest rate of increase of the scalar field, and whose
                  magnitude is that rate of increase. In simple terms, the variation in
                  space of any quantity can be represented (e.g. graphically) by a slope.
                  The gradient represents the steepness and direction of that slope.
                  The Jacobian is a generalization of the gradient. Gradients are only
                  defined on scalar-valued functions, but Jacobians are defined on vector-
                  valued functions.
                  When f is real-valued (i.e., f : Rn → R) the derivative Df(x) is a 1 × n
                  matrix, i.e., it is a row vector. Its transpose is called the gradient of
                  the function: ∇f(x) = Df(x)T , which is a (column) vector, i.e., in Rn.
                  Its components are the partial derivatives of f: The first-order
                  approximation of f at a point x ∈ int dom f can be expressed as (the affine
                  function of z) f(x) + ∇f(x)T (z − x).                
            </javadoc>
            <method name="getHessian" type="MatrixStore<N>" line="40"/>
            <javadoc line="40">
                The Hessian matrix or Hessian is a square matrix of second-order partial
                  derivatives of a function. It describes the local curvature of a function
                  of many variables.
                  The Hessian is the Jacobian of the gradient.
                  The second-order approximation of f, at or near x, is the quadratic
                  function of z defined by
                  f(z) = f(x) + ∇f(x)T (z − x) + (1/2)(z − x)T ∇2f(x)(z − x)                
            </javadoc>
            <method name="invoke" type="N" line="50"/>
        </interface>
    </source>