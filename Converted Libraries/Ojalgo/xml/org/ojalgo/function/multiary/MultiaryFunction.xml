<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.function.multiary">
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.function.Function"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <interface name="MultiaryFunction">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <implements interface="Function">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <interface name="Constant">
                <type_params>
                    <type_param name="N"/>
                    <type_param name="F"/>
                </type_params>
                <implements interface="MultiaryFunction">
                    <type_params>
                        <type_param name="N"/>
                    </type_params>
                </implements>
                <method name="constant" type="F" line="33"/>
                <method name="getConstant" type="N" line="35"/>
                <method name="setConstant" type="void" line="37"/>
            </interface>
            <interface name="Convex">
                <type_params>
                    <type_param name="N"/>
                </type_params>
                <implements interface="MultiaryFunction">
                    <type_params>
                        <type_param name="N"/>
                    </type_params>
                </implements>
            </interface>
            <interface name="Linear">
                <type_params>
                    <type_param name="N"/>
                </type_params>
                <implements interface="MultiaryFunction">
                    <type_params>
                        <type_param name="N"/>
                    </type_params>
                </implements>
                <method name="linear" type="PhysicalStore&lt;N&gt;" line="47"/>
            </interface>
            <interface name="Quadratic">
                <type_params>
                    <type_param name="N"/>
                </type_params>
                <implements interface="MultiaryFunction">
                    <type_params>
                        <type_param name="N"/>
                    </type_params>
                </implements>
                <method name="quadratic" type="PhysicalStore&lt;N&gt;" line="53"/>
            </interface>
            <interface name="TwiceDifferentiable">
                <type_params>
                    <type_param name="N"/>
                </type_params>
                <implements interface="MultiaryFunction">
                    <type_params>
                        <type_param name="N"/>
                    </type_params>
                </implements>
                <javadoc line="57">
                    Twice (Continuously) Differentiable Multiary Function                    
                    <author>
                        apete                        
                    </author>
                </javadoc>
                <method name="getGradient" type="MatrixStore&lt;N&gt;" line="64"/>
                <javadoc line="64">
                    The gradient of a scalar field is a vector field that points in the direction of the greatest rate of
                      increase of the scalar field, and whose magnitude is that rate of increase. In simple terms, the variation in
                      space of any quantity can be represented (e.g. graphically) by a slope. The gradient represents the steepness
                      and direction of that slope. The Jacobian is a generalization of the gradient. Gradients are only defined on
                      scalar-valued functions, but Jacobians are defined on vector- valued functions. When f is real-valued (i.e.,
                      f : Rn → R) the derivative Df(x) is a 1 × n matrix, i.e., it is a row vector. Its transpose is called the
                      gradient of the function: ∇f(x) = Df(x)&lt;sup&gt;T&lt;/sup&gt; , which is a (column) vector, i.e., in Rn. Its components
                      are the partial derivatives of f: The first-order approximation of f at a point x ∈ int dom f can be
                      expressed as (the affine function of z) f(x) + ∇f(x)T (z − x).                    
                </javadoc>
                <method name="getHessian" type="MatrixStore&lt;N&gt;" line="77"/>
                <javadoc line="77">
                    The Hessian matrix or Hessian is a square matrix of second-order partial derivatives of a function. It
                      describes the local curvature of a function of many variables. The Hessian is the Jacobian of the gradient.
                      The second-order approximation of f, at or near x, is the quadratic function of z defined by f(z) = f(x) +
                      ∇f(x)T (z − x) + (1/2)(z − x)T ∇2f(x)(z − x)                    
                </javadoc>
                <method name="toFirstOrderApproximation" type="FirstOrderApproximation&lt;N&gt;" line="85"/>
                <method name="toSecondOrderApproximation" type="SecondOrderApproximation&lt;N&gt;" line="87"/>
            </interface>
            <method name="arity" type="int" line="91"/>
            <method name="invoke" type="N" line="93"/>
        </interface>
    </source>