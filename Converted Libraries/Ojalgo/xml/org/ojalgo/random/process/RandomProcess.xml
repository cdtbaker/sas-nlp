<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.random.process">
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.array.Array2D"/>
        <import package="org.ojalgo.random.Distribution"/>
        <import package="org.ojalgo.random.SampleSet"/>
        <import package="org.ojalgo.series.primitive.PrimitiveSeries"/>
        <interface name="RandomProcess">
            <type_params>
                <type_param name="D"/>
            </type_params>
            <javadoc line="7">
                A random/stochastic process is a collection of random variables representing
                  the evolution of some random value over &quot;time&quot;.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="SimulationResults" line="13">
                <declaration name="myInitialValue" type="double" line="14"/>
                <declaration name="myResults" type="Array2D&lt;Double&gt;" line="15"/>
                <javadoc line="16">
                    @param initialValue                    
                    <param>
                        results (Random values) scenarios/realisations/series in rows, and sample sets in columns.                        
                    </param>
                </javadoc>
                <method name="SimulationResults" type="constructor" line="20">
                    <params>
                        <param name="initialValue" type="double"/>
                        <param name="results" type="Array2D<Double>"/>
                    </params>
                </method>
                <method name="SimulationResults" type="constructor" line="25"/>
                <method name="countSampleSets" type="int" line="30"/>
                <method name="countScenarios" type="int" line="33"/>
                <method name="getInitialValue" type="double" line="36"/>
                <method name="getSampleSet" type="SampleSet" line="39">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <javadoc line="42">
                    A series representing one scenario. Each series has length
                      &quot;number of simulation steps&quot; + 1 as the series includes the initial value.                    
                </javadoc>
                <method name="getScenario" type="PrimitiveSeries" line="46">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <declaration name="tmpSlicedRow" type="Array1D&lt;Double&gt;" line="47"/>
                    <anonymous_class line="48">
                        <method name="size" type="int" line="49"/>
                        <method name="value" type="double" line="52">
                            <params>
                                <param name="index" type="int"/>
                            </params>
                            <scope line="53"/>
                            <scope line="56"/>
                        </method>
                    </anonymous_class>
                </method>
            </class>
            <method name="getDistribution" type="D" line="64"/>
            <javadoc line="64">
                Calling this method repeatedly gives the same ressult, unless
                  you call {@linkplain #step(double)} inbetween.                
                <param>
                    evaluationPoint How far into the future?                    
                </param>
                <return>
                    The distribution for the process value at that future time.                    
                </return>
            </javadoc>
            <method name="simulate" type="RandomProcess.SimulationResults" line="71"/>
            <javadoc line="71">
                @return An array of sample sets. The array has aNumberOfSteps
                  elements, and each sample set has aNumberOfRealisations samples.                
            </javadoc>
        </interface>
    </source>