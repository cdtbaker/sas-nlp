<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.random.process">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.List"/>
        <import package="java.util.TreeSet"/>
        <import package="org.ojalgo.array.Array2D"/>
        <import package="org.ojalgo.random.ContinuousDistribution"/>
        <import package="org.ojalgo.random.Distribution"/>
        <import package="org.ojalgo.type.keyvalue.ComparableToDouble"/>
        <class name="AbstractProcess" line="11">
            <type_params>
                <type_param name="D"/>
            </type_params>
            <implements interface="RandomProcess">
                <type_params>
                    <type_param name="D"/>
                </type_params>
            </implements>
            <declaration name="myObservations" type="TreeSet&lt;ComparableToDouble&lt;Double&gt;&gt;" line="12"/>
            <method name="AbstractProcess" type="constructor" line="13"/>
            <method name="addObservation" type="boolean" line="16">
                <params>
                    <param name="x" type="Double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="19">
                Equivalent to calling {@link #getDistribution(double)} with argumant
                  &lt;code&gt;1.0&lt;/code&gt;, and then {@link Distribution#getExpected()}.                
            </javadoc>
            <method name="getExpected" type="double" line="23"/>
            <javadoc line="26">
                The same thing can be achieved by first calling {@link #getDistribution(double)}with argumant &lt;code&gt;1.0&lt;/code&gt;, and then {@link ContinuousDistribution#getQuantile(double)}(but with different input argument).                
            </javadoc>
            <method name="getLowerConfidenceQuantile" type="double" line="29">
                <params>
                    <param name="aConfidence" type="double"/>
                </params>
            </method>
            <javadoc line="32">
                Equivalent to calling {@link #getDistribution(double)} with argumant
                  &lt;code&gt;1.0&lt;/code&gt;, and then {@link Distribution#getStandardDeviation()}.                
            </javadoc>
            <method name="getStandardDeviation" type="double" line="36"/>
            <javadoc line="39">
                The same thing can be achieved by first calling {@link #getDistribution(double)}with argumant &lt;code&gt;1.0&lt;/code&gt;, and then {@link ContinuousDistribution#getQuantile(double)}(but with different input argument).                
            </javadoc>
            <method name="getUpperConfidenceQuantile" type="double" line="42">
                <params>
                    <param name="aConfidence" type="double"/>
                </params>
            </method>
            <method name="getValue" type="double" line="45"/>
            <javadoc line="48">
                Equivalent to calling {@link #getDistribution(double)} with argumant
                  &lt;code&gt;1.0&lt;/code&gt;, and then {@link Distribution#getVariance()}.                
            </javadoc>
            <method name="getVariance" type="double" line="52"/>
            <method name="setValue" type="void" line="55">
                <params>
                    <param name="newValue" type="double"/>
                </params>
                <scope line="56"/>
                <scope line="59"/>
            </method>
            <javadoc line="63">
                @return An array of sample sets. The array has aNumberOfSteps
                  elements, and each sample set has aNumberOfRealisations samples.                
            </javadoc>
            <method name="simulate" type="RandomProcess.SimulationResults" line="67">
                <params>
                    <param name="numberOfRealisations" type="int"/>
                    <param name="numberOfSteps" type="int"/>
                    <param name="stepSize" type="double"/>
                </params>
                <declaration name="tmpInitialState" type="List&lt;ComparableToDouble&lt;Double&gt;&gt;" line="68"/>
                <declaration name="tmpInitialValue" type="double" line="69"/>
                <declaration name="tmpRealisationValues" type="Array2D&lt;Double&gt;" line="70"/>
                <scope line="71">
                    <declaration name="tmpCurrentValue" type="double" line="72"/>
                    <scope line="73"/>
                </scope>
            </method>
            <method name="getNormalisedRandomIncrement" type="double" line="81"/>
            <method name="setObservations" type="void" line="82">
                <params>
                    <param name="c" type="Collection<? extends ComparableToDouble<Double>>"/>
                </params>
            </method>
            <method name="step" type="double" line="86"/>
            <method name="getExpected" type="double" line="87"/>
            <method name="getLowerConfidenceQuantile" type="double" line="88"/>
            <method name="getObservations" type="TreeSet<ComparableToDouble<Double>>" line="89"/>
            <method name="getStandardDeviation" type="double" line="92"/>
            <method name="getUpperConfidenceQuantile" type="double" line="93"/>
            <method name="getVariance" type="double" line="94"/>
            <method name="step" type="double" line="95">
                <params>
                    <param name="stepSize" type="double"/>
                </params>
            </method>
        </class>
    </source>