<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.random.process">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.List"/>
        <import package="java.util.TreeSet"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.matrix.decomposition.Eigenvalue"/>
        <import package="org.ojalgo.matrix.decomposition.EigenvalueDecomposition"/>
        <import package="org.ojalgo.matrix.decomposition.MatrixDecomposition"/>
        <import package="org.ojalgo.matrix.decomposition.SingularValue"/>
        <import package="org.ojalgo.matrix.decomposition.SingularValueDecomposition"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore.Factory"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.random.Normal1D"/>
        <import package="org.ojalgo.type.keyvalue.ComparableToDouble"/>
        <class name="GaussianField" line="20">
            <type_params>
                <type_param name="K"/>
            </type_params>
            <javadoc line="20">
                A Gaussian process is a stochastic process whose realizations consist of
                  random values associated with every point in a range of times (or of space)
                  such that each such random variable has a normal distribution. Moreover,
                  every finite collection of those random variables has a multivariate normal
                  distribution.
                  A random field is a generalization of a stochastic process such that the
                  underlying parameter need no longer be a simple real or integer valued &quot;time&quot;,
                  but can instead take values that are multidimensional vectors, or points on
                  some manifold.
                  This GaussianField class is a generalization, as well as the underlying
                  implementation, of {@linkplain GaussianProcess}.
                  Prior to calling {@linkplain #getDistribution(boolean,double)} you must call{@linkplain #addObservation(double,double)} one or more times.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <interface name="Covariance">
                <type_params>
                    <type_param name="K"/>
                </type_params>
                <method name="calibrate" type="void" line="37"/>
                <method name="invoke" type="double" line="38"/>
            </interface>
            <interface name="Mean">
                <type_params>
                    <type_param name="K"/>
                </type_params>
                <method name="calibrate" type="void" line="41"/>
                <method name="invoke" type="double" line="42"/>
            </interface>
            <declaration name="FACTORY" type="Factory&lt;Double,PrimitiveDenseStore&gt;" line="44"/>
            <method name="mean" type="Mean<K>" line="45">
                <anonymous_class line="46">
                    <method name="calibrate" type="void" line="47">
                        <params>
                            <param name="observations" type="Collection<ComparableToDouble<K>>"/>
                        </params>
                    </method>
                    <method name="invoke" type="double" line="49">
                        <params>
                            <param name="anArg" type="K"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <declaration name="myCovarianceFunction" type="Covariance&lt;K&gt;" line="55"/>
            <declaration name="myMeanFunction" type="Mean&lt;K&gt;" line="56"/>
            <declaration name="myObservations" type="TreeSet&lt;ComparableToDouble&lt;K&gt;&gt;" line="57"/>
            <method name="GaussianField" type="constructor" line="58">
                <params>
                    <param name="covarFunc" type="Covariance<K>"/>
                </params>
            </method>
            <method name="GaussianField" type="constructor" line="61">
                <params>
                    <param name="meanFunc" type="Mean<K>"/>
                    <param name="covarFunc" type="Covariance<K>"/>
                </params>
            </method>
            <method name="GaussianField" type="constructor" line="64"/>
            <method name="GaussianField" type="constructor" line="67">
                <params>
                    <param name="covarFunc" type="Covariance<K>"/>
                    <param name="observations" type="TreeSet<ComparableToDouble<K>>"/>
                </params>
            </method>
            <method name="GaussianField" type="constructor" line="70">
                <params>
                    <param name="meanFunc" type="Mean<K>"/>
                    <param name="covarFunc" type="Covariance<K>"/>
                    <param name="observations" type="TreeSet<ComparableToDouble<K>>"/>
                </params>
            </method>
            <method name="addObservation" type="void" line="76">
                <params>
                    <param name="key" type="K"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="calibrate" type="void" line="79"/>
            <method name="getDistribution" type="Normal1D" line="83">
                <params>
                    <param name="cleanCovariances" type="boolean"/>
                    <param name="evaluationPoint" type="K"/>
                </params>
                <declaration name="tmpRegCoef" type="MatrixStore&lt;Double&gt;" line="84"/>
                <declaration name="tmpM1" type="MatrixStore&lt;Double&gt;" line="85"/>
                <declaration name="tmpM2differenses" type="MatrixStore&lt;Double&gt;" line="86"/>
                <declaration name="tmpLocations" type="PrimitiveDenseStore" line="87"/>
                <declaration name="tmpC11" type="MatrixStore&lt;Double&gt;" line="89"/>
                <declaration name="tmpC21" type="MatrixStore&lt;Double&gt;" line="90"/>
                <declaration name="tmpCovariances" type="PrimitiveDenseStore" line="91"/>
                <scope line="93">
                    <declaration name="tmpEvD" type="Eigenvalue&lt;Double&gt;" line="94"/>
                    <declaration name="tmpV" type="MatrixStore&lt;Double&gt;" line="96"/>
                    <declaration name="tmpD" type="PhysicalStore&lt;Double&gt;" line="97"/>
                    <declaration name="tmpLargest" type="double" line="98"/>
                    <declaration name="tmpLimit" type="double" line="99"/>
                    <scope line="100">
                        <scope line="101"/>
                    </scope>
                </scope>
            </method>
            <method name="getDistribution" type="Normal1D" line="109">
                <params>
                    <param name="evaluationPoint" type="K"/>
                </params>
            </method>
            <method name="getC11" type="MatrixStore<Double>" line="112">
                <params>
                    <param name="args" type="K[]"/>
                </params>
                <declaration name="tmpLength" type="int" line="113"/>
                <declaration name="retVal" type="PrimitiveDenseStore" line="114"/>
                <scope line="115">
                    <scope line="116"/>
                </scope>
            </method>
            <method name="getC12" type="MatrixStore<Double>" line="122">
                <params>
                    <param name="args" type="K[]"/>
                </params>
                <declaration name="tmpObservations" type="List&lt;ComparableToDouble&lt;K&gt;&gt;" line="123"/>
                <declaration name="tmpRowDim" type="int" line="124"/>
                <declaration name="tmpColDim" type="int" line="125"/>
                <declaration name="retVal" type="PrimitiveDenseStore" line="126"/>
                <scope line="127">
                    <scope line="128"/>
                </scope>
            </method>
            <method name="getC21" type="MatrixStore<Double>" line="134">
                <params>
                    <param name="args" type="K[]"/>
                </params>
                <declaration name="tmpObservations" type="List&lt;ComparableToDouble&lt;K&gt;&gt;" line="135"/>
                <declaration name="tmpRowDim" type="int" line="136"/>
                <declaration name="tmpColDim" type="int" line="137"/>
                <declaration name="retVal" type="PrimitiveDenseStore" line="138"/>
                <scope line="139">
                    <scope line="140"/>
                </scope>
            </method>
            <method name="getC22" type="MatrixDecomposition<Double>" line="146">
                <declaration name="tmpObservations" type="List&lt;ComparableToDouble&lt;K&gt;&gt;" line="147"/>
                <declaration name="tmpSize" type="int" line="148"/>
                <declaration name="tmpMatrix" type="PrimitiveDenseStore" line="149"/>
                <scope line="150">
                    <declaration name="tmpColumnKey" type="K" line="151"/>
                    <scope line="152"/>
                </scope>
                <declaration name="retVal" type="SingularValue&lt;Double&gt;" line="156"/>
            </method>
            <method name="getM1" type="MatrixStore<Double>" line="160">
                <params>
                    <param name="args" type="K[]"/>
                </params>
                <declaration name="tmpLength" type="int" line="161"/>
                <declaration name="retVal" type="PrimitiveDenseStore" line="162"/>
                <scope line="163"/>
            </method>
            <method name="getM2" type="MatrixStore<Double>" line="168">
                <declaration name="tmpObservations" type="List&lt;ComparableToDouble&lt;K&gt;&gt;" line="169"/>
                <declaration name="tmpSize" type="int" line="170"/>
                <declaration name="retVal" type="PrimitiveDenseStore" line="171"/>
                <scope line="172"/>
            </method>
            <method name="getM2differenses" type="MatrixStore<Double>" line="177">
                <declaration name="tmpObservations" type="List&lt;ComparableToDouble&lt;K&gt;&gt;" line="178"/>
                <declaration name="tmpSize" type="int" line="179"/>
                <declaration name="retVal" type="PrimitiveDenseStore" line="180"/>
                <declaration name="tmpObservation" type="ComparableToDouble&lt;K&gt;" line="181"/>
                <declaration name="tmpDiff" type="double" line="182"/>
                <scope line="183"/>
            </method>
            <method name="getObservations" type="List<ComparableToDouble<K>>" line="190"/>
            <method name="getRegressionCoefficients" type="MatrixStore<Double>" line="193">
                <params>
                    <param name="args" type="K[]"/>
                </params>
            </method>
        </class>
    </source>