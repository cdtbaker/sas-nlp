<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.random.process">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.List"/>
        <import package="java.util.TreeSet"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.matrix.decomposition.Eigenvalue"/>
        <import package="org.ojalgo.matrix.decomposition.EigenvalueDecomposition"/>
        <import package="org.ojalgo.matrix.decomposition.MatrixDecomposition"/>
        <import package="org.ojalgo.matrix.decomposition.SingularValue"/>
        <import package="org.ojalgo.matrix.decomposition.SingularValueDecomposition"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore.Factory"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.random.Normal1D"/>
        <import package="org.ojalgo.type.keyvalue.ComparableToDouble"/>
        <class name="GaussianField" line="45">
            <type_params>
                <type_param name="K"/>
            </type_params>
            <javadoc line="45">
                A Gaussian process is a stochastic process whose realizations consist of random values associated with every point in
                  a range of times (or of space) such that each such random variable has a normal distribution. Moreover, every finite
                  collection of those random variables has a multivariate normal distribution. A random field is a generalization of a
                  stochastic process such that the underlying parameter need no longer be a simple real or integer valued &quot;time&quot;, but
                  can instead take values that are multidimensional vectors, or points on some manifold. This GaussianField class is a
                  generalization, as well as the underlying implementation, of {@linkplain GaussianProcess}. Prior to calling{@linkplain #getDistribution(boolean,double)} you must call {@linkplain #addObservation(double,double)} one or more
                  times.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <interface name="Covariance">
                <type_params>
                    <type_param name="K"/>
                </type_params>
                <method name="calibrate" type="void" line="61"/>
                <method name="invoke" type="double" line="63"/>
            </interface>
            <interface name="Mean">
                <type_params>
                    <type_param name="K"/>
                </type_params>
                <method name="calibrate" type="void" line="69"/>
                <method name="invoke" type="double" line="71"/>
            </interface>
            <declaration name="FACTORY" type="Factory&amp;lt;Double,PrimitiveDenseStore&amp;gt;" line="75"/>
            <method name="mean" type="Mean&lt;K&gt;" line="77">
                <anonymous_class line="78">
                    <method name="calibrate" type="void" line="80">
                        <params>
                            <param name="observations" type="Collection&lt;ComparableToDouble&lt;K&gt;&gt;"/>
                        </params>
                    </method>
                    <method name="invoke" type="double" line="84">
                        <params>
                            <param name="anArg" type="K"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <declaration name="myCovarianceFunction" type="Covariance&amp;lt;K&amp;gt;" line="90"/>
            <declaration name="myMeanFunction" type="Mean&amp;lt;K&amp;gt;" line="91"/>
            <declaration name="myObservations" type="TreeSet&amp;lt;ComparableToDouble&amp;lt;K&amp;gt;&amp;gt;" line="93"/>
            <method name="GaussianField" type="constructor" line="96">
                <params>
                    <param name="covarFunc" type="Covariance&lt;K&gt;"/>
                </params>
            </method>
            <method name="GaussianField" type="constructor" line="100">
                <params>
                    <param name="meanFunc" type="Mean&lt;K&gt;"/>
                    <param name="covarFunc" type="Covariance&lt;K&gt;"/>
                </params>
            </method>
            <method name="GaussianField" type="constructor" line="105"/>
            <method name="GaussianField" type="constructor" line="110">
                <params>
                    <param name="covarFunc" type="Covariance&lt;K&gt;"/>
                    <param name="observations" type="TreeSet&lt;ComparableToDouble&lt;K&gt;&gt;"/>
                </params>
            </method>
            <method name="GaussianField" type="constructor" line="114">
                <params>
                    <param name="meanFunc" type="Mean&lt;K&gt;"/>
                    <param name="covarFunc" type="Covariance&lt;K&gt;"/>
                    <param name="observations" type="TreeSet&lt;ComparableToDouble&lt;K&gt;&gt;"/>
                </params>
            </method>
            <method name="addObservation" type="void" line="123">
                <params>
                    <param name="key" type="K"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="calibrate" type="void" line="127"/>
            <method name="getDistribution" type="Normal1D" line="132">
                <params>
                    <param name="cleanCovariances" type="boolean"/>
                    <param name="evaluationPoint" type="K"/>
                </params>
                <declaration name="tmpRegCoef" type="MatrixStore&amp;lt;Double&amp;gt;" line="134"/>
                <declaration name="tmpM1" type="MatrixStore&amp;lt;Double&amp;gt;" line="136"/>
                <declaration name="tmpM2differenses" type="MatrixStore&amp;lt;Double&amp;gt;" line="137"/>
                <declaration name="tmpLocations" type="PrimitiveDenseStore" line="139"/>
                <declaration name="tmpC11" type="MatrixStore&amp;lt;Double&amp;gt;" line="142"/>
                <declaration name="tmpC21" type="MatrixStore&amp;lt;Double&amp;gt;" line="143"/>
                <declaration name="tmpCovariances" type="PrimitiveDenseStore" line="145"/>
                <scope line="148">
                    <declaration name="tmpEvD" type="Eigenvalue&amp;lt;Double&amp;gt;" line="150"/>
                    <declaration name="tmpV" type="MatrixStore&amp;lt;Double&amp;gt;" line="153"/>
                    <declaration name="tmpD" type="PhysicalStore&amp;lt;Double&amp;gt;" line="154"/>
                    <declaration name="tmpLargest" type="double" line="156"/>
                    <declaration name="tmpLimit" type="double" line="157"/>
                    <declaration name="tmpLength" type="int" line="159"/>
                    <scope line="160">
                        <scope line="161"/>
                    </scope>
                </scope>
            </method>
            <method name="getDistribution" type="Normal1D" line="172">
                <params>
                    <param name="evaluationPoint" type="K"/>
                </params>
            </method>
            <method name="getC11" type="MatrixStore&lt;Double&gt;" line="176">
                <params>
                    <param name="args" type="K[]"/>
                </params>
                <declaration name="tmpLength" type="int" line="178"/>
                <declaration name="retVal" type="PrimitiveDenseStore" line="180"/>
                <scope line="182">
                    <scope line="183"/>
                </scope>
            </method>
            <method name="getC12" type="MatrixStore&lt;Double&gt;" line="191">
                <params>
                    <param name="args" type="K[]"/>
                </params>
                <declaration name="tmpObservations" type="List&amp;lt;ComparableToDouble&amp;lt;K&amp;gt;&amp;gt;" line="193"/>
                <declaration name="tmpRowDim" type="int" line="195"/>
                <declaration name="tmpColDim" type="int" line="196"/>
                <declaration name="retVal" type="PrimitiveDenseStore" line="198"/>
                <scope line="200">
                    <scope line="201"/>
                </scope>
            </method>
            <method name="getC21" type="MatrixStore&lt;Double&gt;" line="209">
                <params>
                    <param name="args" type="K[]"/>
                </params>
                <declaration name="tmpObservations" type="List&amp;lt;ComparableToDouble&amp;lt;K&amp;gt;&amp;gt;" line="211"/>
                <declaration name="tmpRowDim" type="int" line="213"/>
                <declaration name="tmpColDim" type="int" line="214"/>
                <declaration name="retVal" type="PrimitiveDenseStore" line="216"/>
                <scope line="218">
                    <scope line="219"/>
                </scope>
            </method>
            <method name="getC22" type="MatrixDecomposition&lt;Double&gt;" line="227">
                <declaration name="tmpObservations" type="List&amp;lt;ComparableToDouble&amp;lt;K&amp;gt;&amp;gt;" line="229"/>
                <declaration name="tmpSize" type="int" line="231"/>
                <declaration name="tmpMatrix" type="PrimitiveDenseStore" line="233"/>
                <scope line="235">
                    <declaration name="tmpColumnKey" type="K" line="236"/>
                    <scope line="237"/>
                </scope>
                <declaration name="retVal" type="SingularValue&amp;lt;Double&amp;gt;" line="242"/>
            </method>
            <method name="getM1" type="MatrixStore&lt;Double&gt;" line="249">
                <params>
                    <param name="args" type="K[]"/>
                </params>
                <declaration name="tmpLength" type="int" line="251"/>
                <declaration name="retVal" type="PrimitiveDenseStore" line="253"/>
                <scope line="255"/>
            </method>
            <method name="getM2" type="MatrixStore&lt;Double&gt;" line="262">
                <declaration name="tmpObservations" type="List&amp;lt;ComparableToDouble&amp;lt;K&amp;gt;&amp;gt;" line="264"/>
                <declaration name="tmpSize" type="int" line="266"/>
                <declaration name="retVal" type="PrimitiveDenseStore" line="268"/>
                <scope line="270"/>
            </method>
            <method name="getM2differenses" type="MatrixStore&lt;Double&gt;" line="277">
                <declaration name="tmpObservations" type="List&amp;lt;ComparableToDouble&amp;lt;K&amp;gt;&amp;gt;" line="279"/>
                <declaration name="tmpSize" type="int" line="281"/>
                <declaration name="retVal" type="PrimitiveDenseStore" line="283"/>
                <declaration name="tmpObservation" type="ComparableToDouble&amp;lt;K&amp;gt;" line="285"/>
                <declaration name="tmpDiff" type="double" line="286"/>
                <scope line="287"/>
            </method>
            <method name="getObservations" type="List&lt;ComparableToDouble&lt;K&gt;&gt;" line="296"/>
            <method name="getRegressionCoefficients" type="MatrixStore&lt;Double&gt;" line="300">
                <params>
                    <param name="args" type="K[]"/>
                </params>
            </method>
        </class>
    </source>