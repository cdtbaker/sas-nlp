<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.scalar">
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <interface name="Scalar">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <javadoc line="28">
                &lt;p&gt;
                  A {@linkplain Scalar} is:
                  &lt;ol&gt;
                  &lt;li&gt;An abstraction of a vector/matrix element.&lt;/li&gt;
                  &lt;li&gt;A {@linkplain Number} decorator, increasing the number of things you can do with them.&lt;/li&gt;
                  &lt;/ol&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  Theoretically it is a Field or at least a Division ring.
                  &lt;/p&gt;
                  &lt;p&gt;
                  A group is a set of elements paired with a binary operation. Four conditions called the group axioms must be
                  satisfied:
                  &lt;ol&gt;
                  &lt;li&gt;Closure: If A and B are both members of the set then the result of A op B is also a member.&lt;/li&gt;
                  &lt;li&gt;Associativity: Invocation/execution order doesn&apos;t matter - ((A op B) op C) == (A op (B op C))&lt;/li&gt;
                  &lt;li&gt;The identity property: There is an identity element in the set, I, so that I op A == A op I == A&lt;/li&gt;
                  &lt;li&gt;The inverse property: For each element in the set there must be an inverse element (opposite or reciprocal) so
                  that A&lt;sup&gt;-1&lt;/sup&gt; op A == A op A&lt;sup&gt;-1&lt;/sup&gt; == I&lt;/li&gt;
                  &lt;/ol&gt;
                  Note that commutativity is not a requirement - A op B doesn&apos;t always have to be equal to B op A. If the operation is
                  commutative then the group is called an abelian group or simply a commutative group.
                  &lt;/p&gt;
                  &lt;p&gt;
                  A ring is a commutative {@linkplain Group} (add operation) with a second binary operation (multiply) that is
                  distributive over the commutative group operation and is associative.
                  &lt;/p&gt;
                  &lt;p&gt;
                  A field is a commutative ring (even the multiplication operation) with notions of addition, subtraction,
                  multiplication, and division. Any field may be used as the scalars for a vector space, which is the standard general
                  context for linear algebra.
                  &lt;/p&gt;
                  &lt;p&gt;
                  A division ring is a ring in which division is possible. Division rings differ from fields only in that their
                  multiplication is not required to be commutative.
                  &lt;/p&gt;                
                <author>
                    apete                    
                </author>
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Operation_%28mathematics%29&quot;&gt;Operation&lt;/a&gt;                    
                </see>
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Group_%28mathematics%29&quot;&gt;Group&lt;/a&gt;                    
                </see>
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Ring_%28mathematics%29&quot;&gt;Ring&lt;/a&gt;                    
                </see>
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Field_%28mathematics%29&quot;&gt;Field&lt;/a&gt;                    
                </see>
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Division_ring&quot;&gt;Division ring&lt;/a&gt;                    
                </see>
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Vector_space&quot;&gt;Vector space&lt;/a&gt;                    
                </see>
            </javadoc>
            <interface name="Factory">
                <type_params>
                    <type_param name="N"/>
                </type_params>
                <method name="cast" type="N" line="78"/>
                <method name="cast" type="N" line="80"/>
                <method name="convert" type="Scalar&lt;N&gt;" line="82"/>
                <method name="convert" type="Scalar&lt;N&gt;" line="84"/>
                <method name="one" type="Scalar&lt;N&gt;" line="86"/>
                <javadoc line="86">
                    @return The multiplicative identity element                    
                </javadoc>
                <method name="zero" type="Scalar&lt;N&gt;" line="91"/>
                <javadoc line="91">
                    @return The additive identity element                    
                </javadoc>
            </interface>
            <method name="add" type="Scalar&lt;N&gt;" line="98"/>
            <javadoc line="98">
                @see #add(double)                
                <see>
                    #add(Number)                    
                </see>
                <see>
                    #divide(double)                    
                </see>
                <see>
                    #divide(Number)                    
                </see>
                <see>
                    #multiply(double)                    
                </see>
                <see>
                    #multiply(Number)                    
                </see>
                <see>
                    #subtract(double)                    
                </see>
                <see>
                    #subtract(Number)                    
                </see>
            </javadoc>
            <method name="add" type="Scalar&lt;N&gt;" line="110"/>
            <javadoc line="110">
                @see #add(double)                
                <see>
                    #add(Number)                    
                </see>
                <see>
                    #divide(double)                    
                </see>
                <see>
                    #divide(Number)                    
                </see>
                <see>
                    #multiply(double)                    
                </see>
                <see>
                    #multiply(Number)                    
                </see>
                <see>
                    #subtract(double)                    
                </see>
                <see>
                    #subtract(Number)                    
                </see>
            </javadoc>
            <method name="conjugate" type="Scalar&lt;N&gt;" line="122"/>
            <javadoc line="122">
                @see #conjugate()                
                <see>
                    #invert()                    
                </see>
                <see>
                    #negate()                    
                </see>
            </javadoc>
            <method name="divide" type="Scalar&lt;N&gt;" line="129"/>
            <javadoc line="129">
                @see #add(double)                
                <see>
                    #add(Number)                    
                </see>
                <see>
                    #divide(double)                    
                </see>
                <see>
                    #divide(Number)                    
                </see>
                <see>
                    #multiply(double)                    
                </see>
                <see>
                    #multiply(Number)                    
                </see>
                <see>
                    #subtract(double)                    
                </see>
                <see>
                    #subtract(Number)                    
                </see>
            </javadoc>
            <method name="divide" type="Scalar&lt;N&gt;" line="141"/>
            <javadoc line="141">
                @see #add(double)                
                <see>
                    #add(Number)                    
                </see>
                <see>
                    #divide(double)                    
                </see>
                <see>
                    #divide(Number)                    
                </see>
                <see>
                    #multiply(double)                    
                </see>
                <see>
                    #multiply(Number)                    
                </see>
                <see>
                    #subtract(double)                    
                </see>
                <see>
                    #subtract(Number)                    
                </see>
            </javadoc>
            <method name="doubleValue" type="double" line="153"/>
            <method name="getNumber" type="N" line="155"/>
            <method name="invert" type="Scalar&lt;N&gt;" line="157"/>
            <javadoc line="157">
                @see #conjugate()                
                <see>
                    #invert()                    
                </see>
                <see>
                    #negate()                    
                </see>
            </javadoc>
            <method name="isAbsolute" type="boolean" line="164"/>
            <javadoc line="164">
                @return true if this is equal to its own norm (non-negative real part and no imaginary part); otherwise false.                
                <see>
                    #isAbsolute()                    
                </see>
                <see>
                    #isInfinite()                    
                </see>
                <see>
                    #isNaN()                    
                </see>
                <see>
                    #isReal()                    
                </see>
                <see>
                    #isPositive()                    
                </see>
                <see>
                    #isZero()                    
                </see>
            </javadoc>
            <method name="isInfinite" type="boolean" line="175"/>
            <javadoc line="175">
                Not relevant for all implementations. It&apos;s essntially {@linkplain Double#isInfinite(double)}.                
                <see>
                    #isAbsolute()                    
                </see>
                <see>
                    #isInfinite()                    
                </see>
                <see>
                    #isNaN()                    
                </see>
                <see>
                    #isReal()                    
                </see>
                <see>
                    #isPositive()                    
                </see>
                <see>
                    #isZero()                    
                </see>
                <deprecated>
                    v36 Only plan to keep {@link #isAbsolute()} and {@link #isZero()}.                    
                </deprecated>
            </javadoc>
            <method name="isNaN" type="boolean" line="189"/>
            <javadoc line="189">
                Not relevant for all implementations. It&apos;s essntially {@linkplain Double#isNaN(double)}.                
                <see>
                    #isAbsolute()                    
                </see>
                <see>
                    #isInfinite()                    
                </see>
                <see>
                    #isNaN()                    
                </see>
                <see>
                    #isReal()                    
                </see>
                <see>
                    #isPositive()                    
                </see>
                <see>
                    #isZero()                    
                </see>
                <deprecated>
                    v36 Only plan to keep {@link #isAbsolute()} and {@link #isZero()}.                    
                </deprecated>
            </javadoc>
            <method name="isPositive" type="boolean" line="203"/>
            <javadoc line="203">
                Defined as {@link #isAbsolute()} but not {@link #isZero()}. A small range of values around zero are treated as
                  zeros. Values within that range are not &quot;positive&quot;. Very small positive values are not recognised as positive -
                  they&apos;re zero.                
                <return>
                    true if the real part is strictly positive (not zero) and the imaginary part negligible; otherwise false.                    
                </return>
                <see>
                    #isAbsolute()                    
                </see>
                <see>
                    #isInfinite()                    
                </see>
                <see>
                    #isNaN()                    
                </see>
                <see>
                    #isReal()                    
                </see>
                <see>
                    #isPositive()                    
                </see>
                <see>
                    #isZero()                    
                </see>
                <deprecated>
                    v36 Only plan to keep {@link #isAbsolute()} and {@link #isZero()}.                    
                </deprecated>
            </javadoc>
            <method name="isReal" type="boolean" line="220"/>
            <javadoc line="220">
                @return true if there is the imaginary part is negligible; otherwise false.                
                <see>
                    #isAbsolute()                    
                </see>
                <see>
                    #isInfinite()                    
                </see>
                <see>
                    #isNaN()                    
                </see>
                <see>
                    #isReal()                    
                </see>
                <see>
                    #isPositive()                    
                </see>
                <see>
                    #isZero()                    
                </see>
                <deprecated>
                    v36 Only plan to keep {@link #isAbsolute()} and {@link #isZero()}.                    
                </deprecated>
            </javadoc>
            <method name="isZero" type="boolean" line="233"/>
            <javadoc line="233">
                Typically a small range around zero should be interpreted as zero. The exact size of that range depends on the
                  characteristics/capabillities of the specific implementation. The potential exactness of {@link BigScalar} and{@link RationalNumber} should be reflected here as having small(er) zero-intevalls. Should never test for just
                  exact zero &lt;code&gt;==0.0&lt;/code&gt;.                
                <return>
                    true if the norm, modulus or absolute value is (practically) zero; otherwise false.                    
                </return>
                <see>
                    #isAbsolute()                    
                </see>
                <see>
                    #isInfinite()                    
                </see>
                <see>
                    #isNaN()                    
                </see>
                <see>
                    #isReal()                    
                </see>
                <see>
                    #isPositive()                    
                </see>
                <see>
                    #isZero()                    
                </see>
            </javadoc>
            <method name="multiply" type="Scalar&lt;N&gt;" line="249"/>
            <javadoc line="249">
                @see #add(double)                
                <see>
                    #add(Number)                    
                </see>
                <see>
                    #divide(double)                    
                </see>
                <see>
                    #divide(Number)                    
                </see>
                <see>
                    #multiply(double)                    
                </see>
                <see>
                    #multiply(Number)                    
                </see>
                <see>
                    #subtract(double)                    
                </see>
                <see>
                    #subtract(Number)                    
                </see>
            </javadoc>
            <method name="multiply" type="Scalar&lt;N&gt;" line="261"/>
            <javadoc line="261">
                @see #add(double)                
                <see>
                    #add(Number)                    
                </see>
                <see>
                    #divide(double)                    
                </see>
                <see>
                    #divide(Number)                    
                </see>
                <see>
                    #multiply(double)                    
                </see>
                <see>
                    #multiply(Number)                    
                </see>
                <see>
                    #subtract(double)                    
                </see>
                <see>
                    #subtract(Number)                    
                </see>
            </javadoc>
            <method name="negate" type="Scalar&lt;N&gt;" line="273"/>
            <javadoc line="273">
                @see #conjugate()                
                <see>
                    #invert()                    
                </see>
                <see>
                    #negate()                    
                </see>
            </javadoc>
            <method name="norm" type="double" line="280"/>
            <javadoc line="280">
                this = signum(this)  norm(this)                
                <return>
                    norm(this)                    
                </return>
            </javadoc>
            <method name="signum" type="Scalar&lt;N&gt;" line="287"/>
            <javadoc line="287">
                this = signum(this)  norm(this)                
                <return>
                    signum(this)                    
                </return>
            </javadoc>
            <method name="subtract" type="Scalar&lt;N&gt;" line="294"/>
            <javadoc line="294">
                @see #add(double)                
                <see>
                    #add(Number)                    
                </see>
                <see>
                    #divide(double)                    
                </see>
                <see>
                    #divide(Number)                    
                </see>
                <see>
                    #multiply(double)                    
                </see>
                <see>
                    #multiply(Number)                    
                </see>
                <see>
                    #subtract(double)                    
                </see>
                <see>
                    #subtract(Number)                    
                </see>
            </javadoc>
            <method name="subtract" type="Scalar&lt;N&gt;" line="306"/>
            <javadoc line="306">
                @see #add(double)                
                <see>
                    #add(Number)                    
                </see>
                <see>
                    #divide(double)                    
                </see>
                <see>
                    #divide(Number)                    
                </see>
                <see>
                    #multiply(double)                    
                </see>
                <see>
                    #multiply(Number)                    
                </see>
                <see>
                    #subtract(double)                    
                </see>
                <see>
                    #subtract(Number)                    
                </see>
            </javadoc>
            <method name="toBigDecimal" type="BigDecimal" line="318"/>
            <method name="toPlainString" type="String" line="320"/>
            <method name="toString" type="String" line="322"/>
        </interface>
    </source>