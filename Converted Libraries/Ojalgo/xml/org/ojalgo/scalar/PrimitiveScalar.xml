<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.scalar">
        <import package="java.math.BigDecimal"/>
        <import package="java.math.MathContext"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <import package="org.ojalgo.type.context.NumberContext.Enforceable"/>
        <class name="PrimitiveScalar" line="8">
            <extends class="AbstractScalar">
                <type_params>
                    <type_param name="Double"/>
                </type_params>
            </extends>
            <implements interface="Enforceable">
                <type_params>
                    <type_param name="PrimitiveScalar"/>
                </type_params>
            </implements>
            <declaration name="FACTORY" type="Scalar.Factory&lt;Double&gt;" line="9"/>
            <anonymous_class line="9">
                <method name="cast" type="Double" line="10">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="cast" type="Double" line="13">
                    <params>
                        <param name="number" type="Number"/>
                    </params>
                </method>
                <method name="convert" type="PrimitiveScalar" line="16">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="convert" type="PrimitiveScalar" line="19">
                    <params>
                        <param name="number" type="Number"/>
                    </params>
                </method>
                <method name="one" type="PrimitiveScalar" line="22"/>
                <method name="zero" type="PrimitiveScalar" line="25"/>
            </anonymous_class>
            <declaration name="IS_REAL" type="boolean" line="30"/>
            <declaration name="NaN" type="PrimitiveScalar" line="31"/>
            <declaration name="NEGATIVE_INFINITY" type="PrimitiveScalar" line="32"/>
            <declaration name="ONE" type="PrimitiveScalar" line="33"/>
            <declaration name="POSITIVE_INFINITY" type="PrimitiveScalar" line="34"/>
            <declaration name="ZERO" type="PrimitiveScalar" line="35"/>
            <method name="isAbsolute" type="boolean" line="36">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="isInfinite" type="boolean" line="39">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="isNaN" type="boolean" line="42">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="isPositive" type="boolean" line="45">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="isZero" type="boolean" line="48">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <declaration name="myValue" type="double" line="51"/>
            <method name="PrimitiveScalar" type="constructor" line="52">
                <params>
                    <param name="aVal" type="double"/>
                </params>
            </method>
            <method name="PrimitiveScalar" type="constructor" line="56">
                <params>
                    <param name="aNmbr" type="Number"/>
                </params>
            </method>
            <method name="PrimitiveScalar" type="constructor" line="60"/>
            <method name="add" type="Scalar<Double>" line="64">
                <params>
                    <param name="arg" type="double"/>
                </params>
            </method>
            <method name="add" type="PrimitiveScalar" line="67">
                <params>
                    <param name="arg" type="Double"/>
                </params>
            </method>
            <method name="compareTo" type="int" line="70">
                <params>
                    <param name="reference" type="Double"/>
                </params>
            </method>
            <method name="conjugate" type="PrimitiveScalar" line="73"/>
            <method name="divide" type="PrimitiveScalar" line="76">
                <params>
                    <param name="arg" type="double"/>
                </params>
            </method>
            <method name="divide" type="PrimitiveScalar" line="79">
                <params>
                    <param name="arg" type="Double"/>
                </params>
            </method>
            <method name="doubleValue" type="double" line="82"/>
            <method name="enforce" type="PrimitiveScalar" line="85">
                <params>
                    <param name="context" type="NumberContext"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="88">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="89"/>
                <scope line="92"/>
                <scope line="95"/>
                <declaration name="other" type="double" line="98"/>
                <scope line="99"/>
            </method>
            <method name="floatValue" type="float" line="104"/>
            <method name="getNumber" type="Double" line="107"/>
            <method name="hashCode" type="int" line="110">
                <declaration name="prime" type="int" line="111"/>
                <declaration name="result" type="int" line="112"/>
                <declaration name="temp" type="long" line="113"/>
            </method>
            <method name="intValue" type="int" line="118"/>
            <method name="invert" type="PrimitiveScalar" line="121"/>
            <method name="isAbsolute" type="boolean" line="124"/>
            <method name="isInfinite" type="boolean" line="127"/>
            <method name="isNaN" type="boolean" line="130"/>
            <method name="isPositive" type="boolean" line="133"/>
            <method name="isReal" type="boolean" line="136"/>
            <method name="isZero" type="boolean" line="139"/>
            <method name="longValue" type="long" line="142"/>
            <method name="multiply" type="PrimitiveScalar" line="145">
                <params>
                    <param name="arg" type="double"/>
                </params>
            </method>
            <method name="multiply" type="PrimitiveScalar" line="148">
                <params>
                    <param name="arg" type="Double"/>
                </params>
            </method>
            <method name="negate" type="PrimitiveScalar" line="151"/>
            <method name="norm" type="double" line="154"/>
            <method name="signum" type="PrimitiveScalar" line="157"/>
            <method name="subtract" type="PrimitiveScalar" line="160">
                <params>
                    <param name="arg" type="double"/>
                </params>
            </method>
            <method name="subtract" type="PrimitiveScalar" line="163">
                <params>
                    <param name="arg" type="Double"/>
                </params>
            </method>
            <method name="toBigDecimal" type="BigDecimal" line="166"/>
            <method name="toString" type="String" line="169"/>
            <method name="toString" type="String" line="172">
                <params>
                    <param name="context" type="NumberContext"/>
                </params>
            </method>
        </class>
    </source>