<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.scalar">
        <import package="java.math.BigDecimal"/>
        <import package="java.math.MathContext"/>
        <import package="java.util.Iterator"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.access.Iterator1D"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <import package="org.ojalgo.type.context.NumberContext.Enforceable"/>
        <class name="ComplexNumber" line="35">
            <extends class="AbstractScalar">
                <type_params>
                    <type_param name="ComplexNumber"/>
                </type_params>
            </extends>
            <implements interface="Enforceable">
                <type_params>
                    <type_param name="ComplexNumber"/>
                </type_params>
            </implements>
            <implements interface="Access2D">
                <type_params>
                    <type_param name="Double"/>
                </type_params>
            </implements>
            <javadoc line="35">
                ComplexNumber is an immutable complex number class. It only implements the most basic complex number operations.{@linkplain org.ojalgo.function.ComplexFunction} implements some of the more complicated ones.                
                <author>
                    apete                    
                </author>
                <see>
                    org.ojalgo.function.ComplexFunction                    
                </see>
            </javadoc>
            <declaration name="FACTORY" type="Scalar.Factory&amp;lt;ComplexNumber&amp;gt;" line="44"/>
            <anonymous_class line="44">
                <method name="cast" type="ComplexNumber" line="46">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="cast" type="ComplexNumber" line="50">
                    <params>
                        <param name="number" type="Number"/>
                    </params>
                </method>
                <method name="convert" type="ComplexNumber" line="54">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="convert" type="ComplexNumber" line="58">
                    <params>
                        <param name="number" type="Number"/>
                    </params>
                </method>
                <method name="one" type="ComplexNumber" line="62"/>
                <method name="zero" type="ComplexNumber" line="66"/>
            </anonymous_class>
            <declaration name="I" type="ComplexNumber" line="72"/>
            <declaration name="INFINITY" type="ComplexNumber" line="73"/>
            <declaration name="NEG" type="ComplexNumber" line="74"/>
            <declaration name="ONE" type="ComplexNumber" line="75"/>
            <declaration name="PRECISION" type="NumberContext" line="76"/>
            <declaration name="TWO" type="ComplexNumber" line="77"/>
            <declaration name="ZERO" type="ComplexNumber" line="78"/>
            <declaration name="ARGUMENT_TOLERANCE" type="double" line="80"/>
            <declaration name="LEFT" type="String" line="81"/>
            <declaration name="MINUS" type="String" line="82"/>
            <declaration name="PLUS" type="String" line="83"/>
            <declaration name="RIGHT" type="String" line="84"/>
            <method name="isAbsolute" type="boolean" line="86">
                <params>
                    <param name="value" type="ComplexNumber"/>
                </params>
            </method>
            <method name="isInfinite" type="boolean" line="90">
                <params>
                    <param name="value" type="ComplexNumber"/>
                </params>
            </method>
            <method name="isNaN" type="boolean" line="94">
                <params>
                    <param name="value" type="ComplexNumber"/>
                </params>
            </method>
            <method name="isPositive" type="boolean" line="98">
                <params>
                    <param name="value" type="ComplexNumber"/>
                </params>
            </method>
            <method name="isReal" type="boolean" line="102">
                <params>
                    <param name="value" type="ComplexNumber"/>
                </params>
            </method>
            <method name="isZero" type="boolean" line="106">
                <params>
                    <param name="value" type="ComplexNumber"/>
                </params>
            </method>
            <method name="makePolar" type="ComplexNumber" line="110">
                <params>
                    <param name="modulus" type="double"/>
                    <param name="argument" type="double"/>
                </params>
                <declaration name="tmpArg" type="double" line="111"/>
                <scope line="112"/>
                <scope line="115"/>
                <scope line="117"/>
                <scope line="119">
                    <declaration name="tmpRe" type="double" line="121"/>
                    <scope line="123">
                        <declaration name="tmpCos" type="double" line="125"/>
                        <scope line="127"/>
                    </scope>
                    <declaration name="tmpIm" type="double" line="132"/>
                    <scope line="134">
                        <declaration name="tmpSin" type="double" line="136"/>
                        <scope line="138"/>
                    </scope>
                </scope>
            </method>
            <method name="makeReal" type="ComplexNumber" line="147">
                <params>
                    <param name="real" type="double"/>
                </params>
            </method>
            <method name="makeRectangular" type="ComplexNumber" line="151">
                <params>
                    <param name="real" type="double"/>
                    <param name="imaginary" type="double"/>
                </params>
                <scope line="152"/>
                <scope line="154"/>
            </method>
            <declaration name="i" type="double" line="159"/>
            <declaration name="myRealForSure" type="boolean" line="161"/>
            <declaration name="myRealValue" type="double" line="163"/>
            <method name="ComplexNumber" type="constructor" line="165">
                <params>
                    <param name="real" type="double"/>
                </params>
            </method>
            <method name="ComplexNumber" type="constructor" line="176">
                <params>
                    <param name="real" type="double"/>
                    <param name="imaginary" type="double"/>
                </params>
            </method>
            <method name="ComplexNumber" type="constructor" line="187"/>
            <method name="add" type="ComplexNumber" line="191">
                <params>
                    <param name="arg" type="ComplexNumber"/>
                </params>
            </method>
            <method name="add" type="ComplexNumber" line="195">
                <params>
                    <param name="arg" type="double"/>
                </params>
            </method>
            <method name="compareTo" type="int" line="199">
                <params>
                    <param name="reference" type="ComplexNumber"/>
                </params>
                <declaration name="retVal" type="int" line="201"/>
                <scope line="203">
                    <scope line="204"/>
                </scope>
            </method>
            <method name="conjugate" type="ComplexNumber" line="212"/>
            <method name="count" type="long" line="216"/>
            <method name="countColumns" type="long" line="220"/>
            <method name="countRows" type="long" line="224"/>
            <method name="divide" type="ComplexNumber" line="228">
                <params>
                    <param name="arg" type="ComplexNumber"/>
                </params>
                <declaration name="a" type="double" line="230"/>
                <declaration name="b" type="double" line="231"/>
                <declaration name="c" type="double" line="233"/>
                <declaration name="d" type="double" line="234"/>
                <declaration name="tmpDenom" type="double" line="236"/>
                <declaration name="tmpRe" type="double" line="238"/>
                <declaration name="tmpIm" type="double" line="239"/>
            </method>
            <method name="divide" type="ComplexNumber" line="244">
                <params>
                    <param name="arg" type="double"/>
                </params>
            </method>
            <javadoc line="248">
                @see java.lang.Number#doubleValue()                
            </javadoc>
            <method name="doubleValue" type="double" line="252"/>
            <method name="doubleValue" type="double" line="256">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="doubleValue" type="double" line="271">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
                <scope line="272"/>
                <scope line="274"/>
                <scope line="276"/>
                <scope line="278"/>
            </method>
            <javadoc line="283">
                Will call {@linkplain NumberContext#enforce(double)} on the real and imaginary parts separately.                
                <see>
                    org.ojalgo.scalar.Scalar#enforce(org.ojalgo.type.context.NumberContext)                    
                </see>
            </javadoc>
            <method name="enforce" type="ComplexNumber" line="288">
                <params>
                    <param name="context" type="NumberContext"/>
                </params>
                <declaration name="tmpRe" type="double" line="290"/>
                <declaration name="tmpIm" type="double" line="291"/>
            </method>
            <method name="equals" type="boolean" line="297">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="298"/>
                <scope line="301"/>
                <scope line="304"/>
                <declaration name="other" type="ComplexNumber" line="307"/>
                <scope line="308"/>
                <scope line="311"/>
            </method>
            <javadoc line="317">
                @see java.lang.Number#floatValue()                
            </javadoc>
            <method name="floatValue" type="float" line="321"/>
            <method name="get" type="Double" line="325">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="get" type="Double" line="329">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="getArgument" type="double" line="333"/>
            <method name="getImaginary" type="double" line="337"/>
            <method name="getModulus" type="double" line="341"/>
            <method name="getNumber" type="ComplexNumber" line="345"/>
            <method name="getReal" type="double" line="349"/>
            <method name="hashCode" type="int" line="354">
                <declaration name="prime" type="int" line="355"/>
                <declaration name="result" type="int" line="356"/>
                <declaration name="temp" type="long" line="357"/>
            </method>
            <javadoc line="365">
                @see java.lang.Number#intValue()                
            </javadoc>
            <method name="intValue" type="int" line="369"/>
            <method name="invert" type="ComplexNumber" line="374"/>
            <method name="isAbsolute" type="boolean" line="378"/>
            <method name="isInfinite" type="boolean" line="382"/>
            <method name="isNaN" type="boolean" line="386"/>
            <method name="isPositive" type="boolean" line="390"/>
            <method name="isReal" type="boolean" line="394"/>
            <method name="isZero" type="boolean" line="398"/>
            <method name="iterator" type="Iterator&lt;Double&gt;" line="402"/>
            <javadoc line="406">
                @see java.lang.Number#longValue()                
            </javadoc>
            <method name="longValue" type="long" line="410"/>
            <method name="multiply" type="ComplexNumber" line="415">
                <params>
                    <param name="arg" type="ComplexNumber"/>
                </params>
                <declaration name="tmpRe" type="double" line="417"/>
                <declaration name="tmpIm" type="double" line="418"/>
            </method>
            <method name="multiply" type="ComplexNumber" line="424">
                <params>
                    <param name="arg" type="double"/>
                </params>
            </method>
            <method name="negate" type="ComplexNumber" line="429"/>
            <method name="norm" type="double" line="433"/>
            <method name="phase" type="double" line="437"/>
            <method name="signum" type="ComplexNumber" line="441">
                <scope line="442"/>
                <scope line="444"/>
            </method>
            <method name="subtract" type="ComplexNumber" line="449">
                <params>
                    <param name="arg" type="ComplexNumber"/>
                </params>
            </method>
            <method name="subtract" type="ComplexNumber" line="454">
                <params>
                    <param name="arg" type="double"/>
                </params>
            </method>
            <method name="toBigDecimal" type="BigDecimal" line="458"/>
            <javadoc line="462">
                @see java.lang.Object#toString()                
            </javadoc>
            <method name="toString" type="String" line="466">
                <declaration name="retVal" type="StringBuilder" line="468"/>
                <declaration name="tmpRe" type="double" line="470"/>
                <declaration name="tmpIm" type="double" line="471"/>
                <scope line="475"/>
                <scope line="477"/>
            </method>
            <method name="toString" type="String" line="485">
                <params>
                    <param name="context" type="NumberContext"/>
                </params>
                <declaration name="retVal" type="StringBuilder" line="487"/>
                <declaration name="tmpRe" type="BigDecimal" line="489"/>
                <declaration name="tmpIm" type="BigDecimal" line="490"/>
                <scope line="494"/>
                <scope line="496"/>
            </method>
        </class>
    </source>