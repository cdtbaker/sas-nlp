<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.scalar">
        <import package="java.math.BigDecimal"/>
        <import package="java.math.MathContext"/>
        <import package="java.util.Iterator"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.access.Iterator1D"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <import package="org.ojalgo.type.context.NumberContext.Enforceable"/>
        <class name="ComplexNumber" line="11">
            <extends class="AbstractScalar">
                <type_params>
                    <type_param name="ComplexNumber"/>
                </type_params>
            </extends>
            <implements interface="Enforceable">
                <type_params>
                    <type_param name="ComplexNumber"/>
                </type_params>
            </implements>
            <implements interface="Access2D">
                <type_params>
                    <type_param name="Double"/>
                </type_params>
            </implements>
            <javadoc line="11">
                ComplexNumber is an immutable complex number class. It only implements the most basic complex number operations.{@linkplain org.ojalgo.function.ComplexFunction} implements some of the more complicated ones.                
                <author>
                    apete                    
                </author>
                <see>
                    org.ojalgo.function.ComplexFunction                    
                </see>
            </javadoc>
            <declaration name="FACTORY" type="Scalar.Factory&lt;ComplexNumber&gt;" line="17"/>
            <anonymous_class line="17">
                <method name="cast" type="ComplexNumber" line="18">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="cast" type="ComplexNumber" line="21">
                    <params>
                        <param name="number" type="Number"/>
                    </params>
                </method>
                <method name="convert" type="ComplexNumber" line="24">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="convert" type="ComplexNumber" line="27">
                    <params>
                        <param name="number" type="Number"/>
                    </params>
                </method>
                <method name="one" type="ComplexNumber" line="30"/>
                <method name="zero" type="ComplexNumber" line="33"/>
            </anonymous_class>
            <declaration name="I" type="ComplexNumber" line="38"/>
            <declaration name="INFINITY" type="ComplexNumber" line="39"/>
            <declaration name="NEG" type="ComplexNumber" line="40"/>
            <declaration name="ONE" type="ComplexNumber" line="41"/>
            <declaration name="TWO" type="ComplexNumber" line="42"/>
            <declaration name="ZERO" type="ComplexNumber" line="43"/>
            <declaration name="LEFT" type="String" line="44"/>
            <declaration name="MINUS" type="String" line="45"/>
            <declaration name="PLUS" type="String" line="46"/>
            <declaration name="RIGHT" type="String" line="47"/>
            <declaration name="myRealForSure" type="boolean" line="48"/>
            <declaration name="ARGUMENT_TOLERANCE" type="double" line="49"/>
            <method name="isAbsolute" type="boolean" line="50">
                <params>
                    <param name="value" type="ComplexNumber"/>
                </params>
            </method>
            <method name="isInfinite" type="boolean" line="53">
                <params>
                    <param name="value" type="ComplexNumber"/>
                </params>
            </method>
            <method name="isNaN" type="boolean" line="56">
                <params>
                    <param name="value" type="ComplexNumber"/>
                </params>
            </method>
            <method name="isPositive" type="boolean" line="59">
                <params>
                    <param name="value" type="ComplexNumber"/>
                </params>
            </method>
            <method name="isReal" type="boolean" line="62">
                <params>
                    <param name="value" type="ComplexNumber"/>
                </params>
            </method>
            <method name="isZero" type="boolean" line="65">
                <params>
                    <param name="value" type="ComplexNumber"/>
                </params>
            </method>
            <method name="makePolar" type="ComplexNumber" line="68">
                <params>
                    <param name="modulus" type="double"/>
                    <param name="argument" type="double"/>
                </params>
                <declaration name="tmpArg" type="double" line="69"/>
                <scope line="70"/>
                <scope line="73"/>
                <scope line="76"/>
                <scope line="79">
                    <declaration name="tmpRe" type="double" line="80"/>
                    <scope line="81">
                        <declaration name="tmpCos" type="double" line="82"/>
                        <scope line="83"/>
                    </scope>
                    <declaration name="tmpIm" type="double" line="87"/>
                    <scope line="88">
                        <declaration name="tmpSin" type="double" line="89"/>
                        <scope line="90"/>
                    </scope>
                </scope>
            </method>
            <method name="makeReal" type="ComplexNumber" line="97">
                <params>
                    <param name="real" type="double"/>
                </params>
            </method>
            <method name="makeRectangular" type="ComplexNumber" line="100">
                <params>
                    <param name="real" type="double"/>
                    <param name="imaginary" type="double"/>
                </params>
                <scope line="101"/>
                <scope line="104"/>
            </method>
            <declaration name="i" type="double" line="108"/>
            <declaration name="myRealValue" type="double" line="109"/>
            <method name="ComplexNumber" type="constructor" line="110">
                <params>
                    <param name="real" type="double"/>
                </params>
            </method>
            <method name="ComplexNumber" type="constructor" line="116">
                <params>
                    <param name="real" type="double"/>
                    <param name="imaginary" type="double"/>
                </params>
            </method>
            <method name="ComplexNumber" type="constructor" line="122"/>
            <method name="add" type="ComplexNumber" line="125">
                <params>
                    <param name="arg" type="ComplexNumber"/>
                </params>
            </method>
            <method name="add" type="ComplexNumber" line="128">
                <params>
                    <param name="arg" type="double"/>
                </params>
            </method>
            <method name="compareTo" type="int" line="131">
                <params>
                    <param name="reference" type="ComplexNumber"/>
                </params>
                <declaration name="retVal" type="int" line="132"/>
                <scope line="133">
                    <scope line="134"/>
                </scope>
            </method>
            <method name="conjugate" type="ComplexNumber" line="140"/>
            <method name="count" type="long" line="143"/>
            <method name="countColumns" type="long" line="146"/>
            <method name="countRows" type="long" line="149"/>
            <method name="divide" type="ComplexNumber" line="152">
                <params>
                    <param name="arg" type="ComplexNumber"/>
                </params>
                <declaration name="a" type="double" line="153"/>
                <declaration name="b" type="double" line="154"/>
                <declaration name="c" type="double" line="155"/>
                <declaration name="d" type="double" line="156"/>
                <declaration name="tmpDenom" type="double" line="157"/>
                <declaration name="tmpRe" type="double" line="158"/>
                <declaration name="tmpIm" type="double" line="159"/>
            </method>
            <method name="divide" type="ComplexNumber" line="162">
                <params>
                    <param name="arg" type="double"/>
                </params>
            </method>
            <javadoc line="165">
                @see java.lang.Number#doubleValue()                
            </javadoc>
            <method name="doubleValue" type="double" line="168"/>
            <method name="doubleValue" type="double" line="171">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="doubleValue" type="double" line="185">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
                <scope line="186"/>
                <scope line="189"/>
                <scope line="192"/>
                <scope line="195"/>
            </method>
            <javadoc line="199">
                Will call {@linkplain NumberContext#enforce(double)} on the real and imaginary parts separately.                
                <see>
                    org.ojalgo.scalar.Scalar#enforce(org.ojalgo.type.context.NumberContext)                    
                </see>
            </javadoc>
            <method name="enforce" type="ComplexNumber" line="203">
                <params>
                    <param name="context" type="NumberContext"/>
                </params>
                <declaration name="tmpRe" type="double" line="204"/>
                <declaration name="tmpIm" type="double" line="205"/>
            </method>
            <method name="equals" type="boolean" line="208">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="209"/>
                <scope line="212"/>
                <scope line="215"/>
                <declaration name="other" type="ComplexNumber" line="218"/>
                <scope line="219"/>
                <scope line="222"/>
            </method>
            <javadoc line="227">
                @see java.lang.Number#floatValue()                
            </javadoc>
            <method name="floatValue" type="float" line="230"/>
            <method name="get" type="Double" line="233">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="get" type="Double" line="236">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="getArgument" type="double" line="239"/>
            <method name="getColDim" type="int" line="242"/>
            <method name="getImaginary" type="double" line="245"/>
            <method name="getModulus" type="double" line="248"/>
            <method name="getNumber" type="ComplexNumber" line="251"/>
            <method name="getReal" type="double" line="254"/>
            <method name="getRowDim" type="int" line="257"/>
            <method name="hashCode" type="int" line="260">
                <declaration name="prime" type="int" line="261"/>
                <declaration name="result" type="int" line="262"/>
                <declaration name="temp" type="long" line="263"/>
            </method>
            <javadoc line="270">
                @see java.lang.Number#intValue()                
            </javadoc>
            <method name="intValue" type="int" line="273"/>
            <method name="invert" type="ComplexNumber" line="276"/>
            <method name="isAbsolute" type="boolean" line="279"/>
            <method name="isInfinite" type="boolean" line="282"/>
            <method name="isNaN" type="boolean" line="285"/>
            <method name="isPositive" type="boolean" line="288"/>
            <method name="isReal" type="boolean" line="291"/>
            <method name="isZero" type="boolean" line="294"/>
            <method name="iterator" type="Iterator<Double>" line="297"/>
            <javadoc line="300">
                @see java.lang.Number#longValue()                
            </javadoc>
            <method name="longValue" type="long" line="303"/>
            <method name="multiply" type="ComplexNumber" line="306">
                <params>
                    <param name="arg" type="ComplexNumber"/>
                </params>
                <declaration name="tmpRe" type="double" line="307"/>
                <declaration name="tmpIm" type="double" line="308"/>
            </method>
            <method name="multiply" type="ComplexNumber" line="311">
                <params>
                    <param name="arg" type="double"/>
                </params>
            </method>
            <method name="negate" type="ComplexNumber" line="314"/>
            <method name="norm" type="double" line="317"/>
            <method name="phase" type="double" line="320"/>
            <method name="signum" type="ComplexNumber" line="323">
                <scope line="324"/>
                <scope line="327"/>
            </method>
            <method name="size" type="int" line="331"/>
            <method name="subtract" type="ComplexNumber" line="334">
                <params>
                    <param name="arg" type="ComplexNumber"/>
                </params>
            </method>
            <method name="subtract" type="ComplexNumber" line="337">
                <params>
                    <param name="arg" type="double"/>
                </params>
            </method>
            <method name="toBigDecimal" type="BigDecimal" line="340"/>
            <javadoc line="343">
                @see java.lang.Object#toString()                
            </javadoc>
            <method name="toString" type="String" line="346">
                <declaration name="retVal" type="StringBuilder" line="347"/>
                <declaration name="tmpRe" type="double" line="348"/>
                <declaration name="tmpIm" type="double" line="349"/>
                <scope line="351"/>
                <scope line="354"/>
            </method>
            <method name="toString" type="String" line="360">
                <params>
                    <param name="context" type="NumberContext"/>
                </params>
                <declaration name="retVal" type="StringBuilder" line="361"/>
                <declaration name="tmpRe" type="BigDecimal" line="362"/>
                <declaration name="tmpIm" type="BigDecimal" line="363"/>
                <scope line="365"/>
                <scope line="368"/>
            </method>
        </class>
    </source>