<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.scalar">
        <import package="java.math.BigDecimal"/>
        <import package="java.math.MathContext"/>
        <import package="java.util.Iterator"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.access.Iterator1D"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <import package="org.ojalgo.type.context.NumberContext.Enforceable"/>
        <class name="ComplexNumber" line="35">
            <extends class="AbstractScalar">
                <type_params>
                    <type_param name="ComplexNumber"/>
                </type_params>
            </extends>
            <implements interface="Enforceable">
                <type_params>
                    <type_param name="ComplexNumber"/>
                </type_params>
            </implements>
            <implements interface="Access2D">
                <type_params>
                    <type_param name="Double"/>
                </type_params>
            </implements>
            <javadoc line="35">
                ComplexNumber is an immutable complex number class. It only implements the most basic complex number operations.{@linkplain org.ojalgo.function.ComplexFunction} implements some of the more complicated ones.                
                <author>
                    apete                    
                </author>
                <see>
                    org.ojalgo.function.ComplexFunction                    
                </see>
            </javadoc>
            <declaration name="FACTORY" type="Scalar.Factory&lt;ComplexNumber&gt;" line="44"/>
            <anonymous_class line="44">
                <method name="cast" type="ComplexNumber" line="46">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="cast" type="ComplexNumber" line="50">
                    <params>
                        <param name="number" type="Number"/>
                    </params>
                </method>
                <method name="convert" type="ComplexNumber" line="54">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="convert" type="ComplexNumber" line="58">
                    <params>
                        <param name="number" type="Number"/>
                    </params>
                </method>
                <method name="one" type="ComplexNumber" line="62"/>
                <method name="zero" type="ComplexNumber" line="66"/>
            </anonymous_class>
            <declaration name="I" type="ComplexNumber" line="72"/>
            <declaration name="INFINITY" type="ComplexNumber" line="74"/>
            <declaration name="NEG" type="ComplexNumber" line="76"/>
            <declaration name="ONE" type="ComplexNumber" line="78"/>
            <declaration name="TWO" type="ComplexNumber" line="80"/>
            <declaration name="ZERO" type="ComplexNumber" line="82"/>
            <declaration name="LEFT" type="String" line="84"/>
            <declaration name="MINUS" type="String" line="86"/>
            <declaration name="PLUS" type="String" line="88"/>
            <declaration name="RIGHT" type="String" line="90"/>
            <declaration name="myRealForSure" type="boolean" line="92"/>
            <declaration name="ARGUMENT_TOLERANCE" type="double" line="94"/>
            <method name="isAbsolute" type="boolean" line="96">
                <params>
                    <param name="value" type="ComplexNumber"/>
                </params>
            </method>
            <method name="isInfinite" type="boolean" line="100">
                <params>
                    <param name="value" type="ComplexNumber"/>
                </params>
            </method>
            <method name="isNaN" type="boolean" line="104">
                <params>
                    <param name="value" type="ComplexNumber"/>
                </params>
            </method>
            <method name="isPositive" type="boolean" line="108">
                <params>
                    <param name="value" type="ComplexNumber"/>
                </params>
            </method>
            <method name="isReal" type="boolean" line="112">
                <params>
                    <param name="value" type="ComplexNumber"/>
                </params>
            </method>
            <method name="isZero" type="boolean" line="116">
                <params>
                    <param name="value" type="ComplexNumber"/>
                </params>
            </method>
            <method name="makePolar" type="ComplexNumber" line="120">
                <params>
                    <param name="modulus" type="double"/>
                    <param name="argument" type="double"/>
                </params>
                <declaration name="tmpArg" type="double" line="121"/>
                <scope line="122"/>
                <scope line="125"/>
                <scope line="127"/>
                <scope line="129">
                    <declaration name="tmpRe" type="double" line="131"/>
                    <scope line="133">
                        <declaration name="tmpCos" type="double" line="135"/>
                        <scope line="137"/>
                    </scope>
                    <declaration name="tmpIm" type="double" line="142"/>
                    <scope line="144">
                        <declaration name="tmpSin" type="double" line="146"/>
                        <scope line="148"/>
                    </scope>
                </scope>
            </method>
            <method name="makeReal" type="ComplexNumber" line="157">
                <params>
                    <param name="real" type="double"/>
                </params>
            </method>
            <method name="makeRectangular" type="ComplexNumber" line="161">
                <params>
                    <param name="real" type="double"/>
                    <param name="imaginary" type="double"/>
                </params>
                <scope line="162"/>
                <scope line="164"/>
            </method>
            <declaration name="i" type="double" line="169"/>
            <declaration name="myRealValue" type="double" line="171"/>
            <method name="ComplexNumber" type="constructor" line="173">
                <params>
                    <param name="real" type="double"/>
                </params>
            </method>
            <method name="ComplexNumber" type="constructor" line="184">
                <params>
                    <param name="real" type="double"/>
                    <param name="imaginary" type="double"/>
                </params>
            </method>
            <method name="ComplexNumber" type="constructor" line="195"/>
            <method name="add" type="ComplexNumber" line="199">
                <params>
                    <param name="arg" type="ComplexNumber"/>
                </params>
            </method>
            <method name="add" type="ComplexNumber" line="203">
                <params>
                    <param name="arg" type="double"/>
                </params>
            </method>
            <method name="compareTo" type="int" line="207">
                <params>
                    <param name="reference" type="ComplexNumber"/>
                </params>
                <declaration name="retVal" type="int" line="209"/>
                <scope line="211">
                    <scope line="212"/>
                </scope>
            </method>
            <method name="conjugate" type="ComplexNumber" line="220"/>
            <method name="count" type="long" line="224"/>
            <method name="countColumns" type="long" line="228"/>
            <method name="countRows" type="long" line="232"/>
            <method name="divide" type="ComplexNumber" line="236">
                <params>
                    <param name="arg" type="ComplexNumber"/>
                </params>
                <declaration name="a" type="double" line="238"/>
                <declaration name="b" type="double" line="239"/>
                <declaration name="c" type="double" line="241"/>
                <declaration name="d" type="double" line="242"/>
                <declaration name="tmpDenom" type="double" line="244"/>
                <declaration name="tmpRe" type="double" line="246"/>
                <declaration name="tmpIm" type="double" line="247"/>
            </method>
            <method name="divide" type="ComplexNumber" line="252">
                <params>
                    <param name="arg" type="double"/>
                </params>
            </method>
            <javadoc line="256">
                @see java.lang.Number#doubleValue()                
            </javadoc>
            <method name="doubleValue" type="double" line="260"/>
            <method name="doubleValue" type="double" line="264">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="doubleValue" type="double" line="279">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
                <scope line="280"/>
                <scope line="282"/>
                <scope line="284"/>
                <scope line="286"/>
            </method>
            <javadoc line="291">
                Will call {@linkplain NumberContext#enforce(double)} on the real and imaginary parts separately.                
                <see>
                    org.ojalgo.scalar.Scalar#enforce(org.ojalgo.type.context.NumberContext)                    
                </see>
            </javadoc>
            <method name="enforce" type="ComplexNumber" line="296">
                <params>
                    <param name="context" type="NumberContext"/>
                </params>
                <declaration name="tmpRe" type="double" line="298"/>
                <declaration name="tmpIm" type="double" line="299"/>
            </method>
            <method name="equals" type="boolean" line="305">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="306"/>
                <scope line="309"/>
                <scope line="312"/>
                <declaration name="other" type="ComplexNumber" line="315"/>
                <scope line="316"/>
                <scope line="319"/>
            </method>
            <javadoc line="325">
                @see java.lang.Number#floatValue()                
            </javadoc>
            <method name="floatValue" type="float" line="329"/>
            <method name="get" type="Double" line="333">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="get" type="Double" line="337">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="getArgument" type="double" line="341"/>
            <method name="getColDim" type="int" line="345"/>
            <method name="getImaginary" type="double" line="349"/>
            <method name="getModulus" type="double" line="353"/>
            <method name="getNumber" type="ComplexNumber" line="357"/>
            <method name="getReal" type="double" line="361"/>
            <method name="getRowDim" type="int" line="365"/>
            <method name="hashCode" type="int" line="370">
                <declaration name="prime" type="int" line="371"/>
                <declaration name="result" type="int" line="372"/>
                <declaration name="temp" type="long" line="373"/>
            </method>
            <javadoc line="381">
                @see java.lang.Number#intValue()                
            </javadoc>
            <method name="intValue" type="int" line="385"/>
            <method name="invert" type="ComplexNumber" line="390"/>
            <method name="isAbsolute" type="boolean" line="394"/>
            <method name="isInfinite" type="boolean" line="398"/>
            <method name="isNaN" type="boolean" line="402"/>
            <method name="isPositive" type="boolean" line="406"/>
            <method name="isReal" type="boolean" line="410"/>
            <method name="isZero" type="boolean" line="414"/>
            <method name="iterator" type="Iterator<Double>" line="418"/>
            <javadoc line="422">
                @see java.lang.Number#longValue()                
            </javadoc>
            <method name="longValue" type="long" line="426"/>
            <method name="multiply" type="ComplexNumber" line="431">
                <params>
                    <param name="arg" type="ComplexNumber"/>
                </params>
                <declaration name="tmpRe" type="double" line="433"/>
                <declaration name="tmpIm" type="double" line="434"/>
            </method>
            <method name="multiply" type="ComplexNumber" line="440">
                <params>
                    <param name="arg" type="double"/>
                </params>
            </method>
            <method name="negate" type="ComplexNumber" line="445"/>
            <method name="norm" type="double" line="449"/>
            <method name="phase" type="double" line="453"/>
            <method name="signum" type="ComplexNumber" line="457">
                <scope line="458"/>
                <scope line="460"/>
            </method>
            <method name="size" type="int" line="465"/>
            <method name="subtract" type="ComplexNumber" line="469">
                <params>
                    <param name="arg" type="ComplexNumber"/>
                </params>
            </method>
            <method name="subtract" type="ComplexNumber" line="474">
                <params>
                    <param name="arg" type="double"/>
                </params>
            </method>
            <method name="toBigDecimal" type="BigDecimal" line="478"/>
            <javadoc line="482">
                @see java.lang.Object#toString()                
            </javadoc>
            <method name="toString" type="String" line="486">
                <declaration name="retVal" type="StringBuilder" line="488"/>
                <declaration name="tmpRe" type="double" line="490"/>
                <declaration name="tmpIm" type="double" line="491"/>
                <scope line="495"/>
                <scope line="497"/>
            </method>
            <method name="toString" type="String" line="505">
                <params>
                    <param name="context" type="NumberContext"/>
                </params>
                <declaration name="retVal" type="StringBuilder" line="507"/>
                <declaration name="tmpRe" type="BigDecimal" line="509"/>
                <declaration name="tmpIm" type="BigDecimal" line="510"/>
                <scope line="514"/>
                <scope line="516"/>
            </method>
        </class>
    </source>