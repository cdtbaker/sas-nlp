<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix">
        <import package="java.math.BigDecimal"/>
        <import package="java.util.Iterator"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.access.AccessUtils"/>
        <import package="org.ojalgo.access.Iterator1D"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.FunctionUtils"/>
        <import package="org.ojalgo.matrix.decomposition"/>
        <import package="org.ojalgo.matrix.store.ComplexDenseStore"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.matrix.store.operation"/>
        <import package="org.ojalgo.random.Uniform"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="MatrixUtils" line="44">
            <method name="equals" type="boolean" line="46">
                <params>
                    <param name="matrix" type="MatrixStore&lt;N&gt;"/>
                    <param name="decomposition" type="Bidiagonal&lt;N&gt;"/>
                    <param name="context" type="NumberContext"/>
                </params>
                <comment line="64">
                    Check that it&apos;s possible to reconstruct the original matrix.                    
                </comment>
                <comment line="73">
                    If Q1 is square, then check if it is orthogonal/unitary.                    
                </comment>
                <comment line="82">
                    If Q2 is square, then check if it is orthogonal/unitary.                    
                </comment>
                <declaration name="tmpRowDim" type="int" line="48"/>
                <declaration name="tmpColDim" type="int" line="49"/>
                <declaration name="tmpQ1" type="MatrixStore&amp;lt;N&amp;gt;" line="51"/>
                <declaration name="tmpD" type="MatrixStore&amp;lt;N&amp;gt;" line="52"/>
                <declaration name="tmpQ2" type="MatrixStore&amp;lt;N&amp;gt;" line="53"/>
                <declaration name="tmpConjugatedQ1" type="MatrixStore&amp;lt;N&amp;gt;" line="55"/>
                <declaration name="tmpConjugatedQ2" type="MatrixStore&amp;lt;N&amp;gt;" line="56"/>
                <declaration name="tmpThis" type="MatrixStore&amp;lt;N&amp;gt;" line="58"/>
                <declaration name="tmpThat" type="MatrixStore&amp;lt;N&amp;gt;" line="59"/>
                <declaration name="retVal" type="boolean" line="61"/>
                <scope line="64"/>
                <scope line="73"/>
                <scope line="82"/>
            </method>
            <method name="equals" type="boolean" line="93">
                <params>
                    <param name="matrix" type="MatrixStore&lt;N&gt;"/>
                    <param name="decomposition" type="Cholesky&lt;N&gt;"/>
                    <param name="context" type="NumberContext"/>
                </params>
                <declaration name="retVal" type="boolean" line="95"/>
                <declaration name="tmpL" type="MatrixStore&amp;lt;N&amp;gt;" line="97"/>
            </method>
            <method name="equals" type="boolean" line="104">
                <params>
                    <param name="matrix" type="MatrixStore&lt;N&gt;"/>
                    <param name="decomposition" type="Eigenvalue&lt;N&gt;"/>
                    <param name="context" type="NumberContext"/>
                </params>
                <comment line="110">
                    Check that [A][V] == [V][D] ([A] == [V][D][V]&lt;sup&gt;T&lt;/sup&gt; is not always true)                    
                </comment>
                <declaration name="tmpD" type="MatrixStore&amp;lt;N&amp;gt;" line="106"/>
                <declaration name="tmpV" type="MatrixStore&amp;lt;N&amp;gt;" line="107"/>
                <declaration name="tmpStore1" type="MatrixStore&amp;lt;N&amp;gt;" line="110"/>
                <declaration name="tmpStore2" type="MatrixStore&amp;lt;N&amp;gt;" line="111"/>
            </method>
            <method name="equals" type="boolean" line="116">
                <params>
                    <param name="matrix" type="MatrixStore&lt;N&gt;"/>
                    <param name="decomposition" type="Hessenberg&lt;N&gt;"/>
                    <param name="context" type="NumberContext"/>
                </params>
                <declaration name="tmpH" type="MatrixStore&amp;lt;N&amp;gt;" line="118"/>
                <declaration name="tmpQ" type="MatrixStore&amp;lt;N&amp;gt;" line="119"/>
                <declaration name="tmpStore1" type="MatrixStore&amp;lt;N&amp;gt;" line="121"/>
                <declaration name="tmpStore2" type="MatrixStore&amp;lt;N&amp;gt;" line="122"/>
            </method>
            <method name="equals" type="boolean" line="127">
                <params>
                    <param name="matrix" type="MatrixStore&lt;N&gt;"/>
                    <param name="decomposition" type="LU&lt;N&gt;"/>
                    <param name="context" type="NumberContext"/>
                </params>
                <declaration name="tmpL" type="MatrixStore&amp;lt;N&amp;gt;" line="129"/>
                <declaration name="tmpU" type="MatrixStore&amp;lt;N&amp;gt;" line="130"/>
                <declaration name="tmpPivotOrder" type="int[]" line="131"/>
            </method>
            <method name="equals" type="boolean" line="136">
                <params>
                    <param name="matrix" type="MatrixStore&lt;N&gt;"/>
                    <param name="decomposition" type="QR&lt;N&gt;"/>
                    <param name="context" type="NumberContext"/>
                </params>
                <declaration name="tmpQ" type="MatrixStore&amp;lt;N&amp;gt;" line="138"/>
                <declaration name="tmpR" type="MatrixStore&amp;lt;N&amp;gt;" line="139"/>
                <declaration name="tmpStore" type="MatrixStore&amp;lt;N&amp;gt;" line="141"/>
            </method>
            <method name="equals" type="boolean" line="146">
                <params>
                    <param name="matrix" type="MatrixStore&lt;N&gt;"/>
                    <param name="decomposition" type="Schur&lt;N&gt;"/>
                    <param name="context" type="NumberContext"/>
                </params>
                <comment line="152">
                    Check that [A][Q] == [Q][U] ([A] == [Q][U][Q]&lt;sup&gt;T&lt;/sup&gt; is not always true)                    
                </comment>
                <declaration name="tmpU" type="MatrixStore&amp;lt;N&amp;gt;" line="148"/>
                <declaration name="tmpQ" type="MatrixStore&amp;lt;N&amp;gt;" line="149"/>
                <declaration name="tmpStore1" type="MatrixStore&amp;lt;N&amp;gt;" line="152"/>
                <declaration name="tmpStore2" type="MatrixStore&amp;lt;N&amp;gt;" line="153"/>
            </method>
            <method name="equals" type="boolean" line="158">
                <params>
                    <param name="matrix" type="MatrixStore&lt;N&gt;"/>
                    <param name="decomposition" type="SingularValue&lt;N&gt;"/>
                    <param name="context" type="NumberContext"/>
                </params>
                <comment line="173">
                    Check that [A][Q2] == [Q1][D]                    
                </comment>
                <comment line="182">
                    If Q1 is square, then check if it is orthogonal/unitary.                    
                </comment>
                <comment line="191">
                    If Q2 is square, then check if it is orthogonal/unitary.                    
                </comment>
                <comment line="200">
                    Check the pseudoinverse.                    
                </comment>
                <comment line="205">
                    Check that the singular values are sorted in descending order                    
                </comment>
                <declaration name="tmpRowDim" type="int" line="160"/>
                <declaration name="tmpColDim" type="int" line="161"/>
                <declaration name="tmpQ1" type="MatrixStore&amp;lt;N&amp;gt;" line="163"/>
                <declaration name="tmpD" type="MatrixStore&amp;lt;N&amp;gt;" line="164"/>
                <declaration name="tmpQ2" type="MatrixStore&amp;lt;N&amp;gt;" line="165"/>
                <declaration name="tmpThis" type="MatrixStore&amp;lt;N&amp;gt;" line="167"/>
                <declaration name="tmpThat" type="MatrixStore&amp;lt;N&amp;gt;" line="168"/>
                <declaration name="retVal" type="boolean" line="170"/>
                <scope line="173"/>
                <scope line="182"/>
                <scope line="191"/>
                <scope line="200"/>
                <scope line="205">
                    <declaration name="tmpSV" type="Array1D&amp;lt;Double&amp;gt;" line="206"/>
                    <scope line="207"/>
                    <scope line="210">
                        <scope line="211"/>
                    </scope>
                </scope>
            </method>
            <method name="equals" type="boolean" line="220">
                <params>
                    <param name="matrix" type="MatrixStore&lt;N&gt;"/>
                    <param name="decomposition" type="Tridiagonal&lt;N&gt;"/>
                    <param name="context" type="NumberContext"/>
                </params>
                <comment line="223">
                    Check that [A] == [Q][D][Q]&lt;sup&gt;T&lt;/sup&gt;                    
                </comment>
                <comment line="226">
                    Check that Q is orthogonal/unitary...                    
                </comment>
            </method>
            <method name="hashCode" type="int" line="228">
                <params>
                    <param name="matrix" type="BasicMatrix&lt;N&gt;"/>
                </params>
            </method>
            <method name="hashCode" type="int" line="232">
                <params>
                    <param name="matrix" type="MatrixStore&lt;N&gt;"/>
                </params>
            </method>
            <method name="isHermitian" type="boolean" line="236">
                <params>
                    <param name="matrix" type="Access2D&lt;?&gt;"/>
                </params>
                <declaration name="tmpRowDim" type="long" line="238"/>
                <declaration name="tmpColDim" type="long" line="239"/>
                <declaration name="tmpElement" type="Number" line="241"/>
                <declaration name="retVal" type="boolean" line="243"/>
                <scope line="245">
                    <declaration name="tmpLowerLeft" type="ComplexNumber" line="247"/>
                    <declaration name="tmpUpperRight" type="ComplexNumber" line="248"/>
                    <scope line="250">
                        <scope line="252"/>
                    </scope>
                </scope>
                <scope line="259">
                    <scope line="261">
                        <scope line="262"/>
                    </scope>
                </scope>
            </method>
            <method name="isLowerLeftShaded" type="boolean" line="271">
                <params>
                    <param name="anAccess" type="Access1D&lt;?&gt;"/>
                </params>
            </method>
            <method name="isNormal" type="boolean" line="275">
                <params>
                    <param name="matrix" type="MatrixStore&lt;N&gt;"/>
                </params>
                <declaration name="tmpConjugate" type="MatrixStore&amp;lt;N&amp;gt;" line="277"/>
            </method>
            <method name="isUpperRightShaded" type="boolean" line="282">
                <params>
                    <param name="anAccess" type="Access1D&lt;?&gt;"/>
                </params>
            </method>
            <javadoc line="286">
                @deprecated v36 Use {@link AccessUtils#makeDecreasingRange(int,int)} instead                
            </javadoc>
            <method name="makeDecreasingRange" type="int[]" line="290">
                <params>
                    <param name="first" type="int"/>
                    <param name="count" type="int"/>
                </params>
            </method>
            <javadoc line="294">
                @deprecated v36 Use {@link AccessUtils#makeIncreasingRange(int,int)} instead                
            </javadoc>
            <method name="makeIncreasingRange" type="int[]" line="298">
                <params>
                    <param name="first" type="int"/>
                    <param name="count" type="int"/>
                </params>
            </method>
            <method name="makeRandomComplexStore" type="PhysicalStore&lt;ComplexNumber&gt;" line="302">
                <params>
                    <param name="aRowDim" type="int"/>
                    <param name="aColDim" type="int"/>
                </params>
                <declaration name="retVal" type="PhysicalStore&amp;lt;ComplexNumber&amp;gt;" line="304"/>
                <declaration name="tmpArgGen" type="Uniform" line="306"/>
                <scope line="308">
                    <scope line="309"/>
                </scope>
            </method>
            <javadoc line="317">
                @deprecated v36 Use {@link FunctionUtils#max(int)} instead                
            </javadoc>
            <method name="max" type="int" line="321">
                <params>
                    <param name="values" type="int"/>
                </params>
            </method>
            <javadoc line="325">
                @deprecated v36 Use {@link FunctionUtils#min(int)} instead                
            </javadoc>
            <method name="min" type="int" line="329">
                <params>
                    <param name="values" type="int"/>
                </params>
            </method>
            <method name="reconstruct" type="MatrixStore&lt;N&gt;" line="333">
                <params>
                    <param name="decomposition" type="Bidiagonal&lt;N&gt;"/>
                </params>
            </method>
            <method name="reconstruct" type="MatrixStore&lt;N&gt;" line="337">
                <params>
                    <param name="decomposition" type="Cholesky&lt;N&gt;"/>
                </params>
                <declaration name="tmpL" type="MatrixStore&amp;lt;N&amp;gt;" line="338"/>
            </method>
            <method name="reconstruct" type="MatrixStore&lt;N&gt;" line="342">
                <params>
                    <param name="decomposition" type="Eigenvalue&lt;N&gt;"/>
                </params>
                <declaration name="tmpV" type="MatrixStore&amp;lt;N&amp;gt;" line="343"/>
            </method>
            <method name="reconstruct" type="MatrixStore&lt;N&gt;" line="347">
                <params>
                    <param name="decomposition" type="Hessenberg&lt;N&gt;"/>
                </params>
                <declaration name="tmpQ" type="MatrixStore&amp;lt;N&amp;gt;" line="348"/>
                <declaration name="tmpH" type="MatrixStore&amp;lt;N&amp;gt;" line="349"/>
            </method>
            <method name="reconstruct" type="MatrixStore&lt;N&gt;" line="353">
                <params>
                    <param name="decomposition" type="LU&lt;N&gt;"/>
                </params>
            </method>
            <method name="reconstruct" type="MatrixStore&lt;N&gt;" line="357">
                <params>
                    <param name="decomposition" type="QR&lt;N&gt;"/>
                </params>
            </method>
            <method name="reconstruct" type="MatrixStore&lt;N&gt;" line="361">
                <params>
                    <param name="decomposition" type="Schur&lt;N&gt;"/>
                </params>
                <declaration name="tmpQ" type="MatrixStore&amp;lt;N&amp;gt;" line="362"/>
            </method>
            <method name="reconstruct" type="MatrixStore&lt;N&gt;" line="366">
                <params>
                    <param name="decomposition" type="SingularValue&lt;N&gt;"/>
                </params>
            </method>
            <method name="reconstruct" type="MatrixStore&lt;N&gt;" line="370">
                <params>
                    <param name="decomposition" type="Tridiagonal&lt;N&gt;"/>
                </params>
                <declaration name="tmpQ" type="MatrixStore&amp;lt;N&amp;gt;" line="371"/>
            </method>
            <method name="setAllOperationThresholds" type="void" line="375">
                <params>
                    <param name="aValue" type="int"/>
                </params>
            </method>
            <method name="toString" type="String" line="406">
                <params>
                    <param name="matrix" type="Access2D&lt;?&gt;"/>
                </params>
                <comment line="419">
                    First element                    
                </comment>
                <comment line="422">
                    Rest of the first row                    
                </comment>
                <comment line="427">
                    For each of the remaining rows                    
                </comment>
                <comment line="430">
                    First column                    
                </comment>
                <comment line="433">
                    Remaining columns                    
                </comment>
                <comment line="439">
                    Finish                    
                </comment>
                <declaration name="retVal" type="StringBuilder" line="408"/>
                <declaration name="tmpRowDim" type="int" line="410"/>
                <declaration name="tmpColDim" type="int" line="411"/>
                <scope line="416">
                    <scope line="422"/>
                    <scope line="427">
                        <scope line="433"/>
                    </scope>
                </scope>
            </method>
            <method name="wrapBigAccess2D" type="Access2D&lt;BigDecimal&gt;" line="445">
                <params>
                    <param name="matrix" type="BasicMatrix&lt;?&gt;"/>
                </params>
                <anonymous_class line="446">
                    <method name="count" type="long" line="448"/>
                    <method name="countColumns" type="long" line="452"/>
                    <method name="countRows" type="long" line="456"/>
                    <method name="doubleValue" type="double" line="460">
                        <params>
                            <param name="anInd" type="long"/>
                        </params>
                    </method>
                    <method name="doubleValue" type="double" line="464">
                        <params>
                            <param name="aRow" type="long"/>
                            <param name="aCol" type="long"/>
                        </params>
                    </method>
                    <method name="get" type="BigDecimal" line="468">
                        <params>
                            <param name="index" type="long"/>
                        </params>
                    </method>
                    <method name="get" type="BigDecimal" line="472">
                        <params>
                            <param name="aRow" type="long"/>
                            <param name="aCol" type="long"/>
                        </params>
                    </method>
                    <method name="iterator" type="Iterator&lt;BigDecimal&gt;" line="476"/>
                    <method name="size" type="int" line="480"/>
                </anonymous_class>
            </method>
            <method name="wrapComplexAccess2D" type="Access2D&lt;ComplexNumber&gt;" line="487">
                <params>
                    <param name="matrix" type="BasicMatrix&lt;?&gt;"/>
                </params>
                <anonymous_class line="488">
                    <method name="count" type="long" line="490"/>
                    <method name="countColumns" type="long" line="494"/>
                    <method name="countRows" type="long" line="498"/>
                    <method name="doubleValue" type="double" line="502">
                        <params>
                            <param name="anInd" type="long"/>
                        </params>
                    </method>
                    <method name="doubleValue" type="double" line="506">
                        <params>
                            <param name="aRow" type="long"/>
                            <param name="aCol" type="long"/>
                        </params>
                    </method>
                    <method name="get" type="ComplexNumber" line="510">
                        <params>
                            <param name="index" type="long"/>
                        </params>
                    </method>
                    <method name="get" type="ComplexNumber" line="514">
                        <params>
                            <param name="aRow" type="long"/>
                            <param name="aCol" type="long"/>
                        </params>
                    </method>
                    <method name="iterator" type="Iterator&lt;ComplexNumber&gt;" line="518"/>
                    <method name="size" type="int" line="522"/>
                </anonymous_class>
            </method>
            <method name="wrapPrimitiveAccess2D" type="Access2D&lt;Double&gt;" line="529">
                <params>
                    <param name="matrix" type="BasicMatrix&lt;?&gt;"/>
                </params>
                <anonymous_class line="530">
                    <method name="count" type="long" line="532"/>
                    <method name="countColumns" type="long" line="536"/>
                    <method name="countRows" type="long" line="540"/>
                    <method name="doubleValue" type="double" line="544">
                        <params>
                            <param name="anInd" type="long"/>
                        </params>
                    </method>
                    <method name="doubleValue" type="double" line="548">
                        <params>
                            <param name="aRow" type="long"/>
                            <param name="aCol" type="long"/>
                        </params>
                    </method>
                    <method name="get" type="Double" line="552">
                        <params>
                            <param name="index" type="long"/>
                        </params>
                    </method>
                    <method name="get" type="Double" line="556">
                        <params>
                            <param name="aRow" type="long"/>
                            <param name="aCol" type="long"/>
                        </params>
                    </method>
                    <method name="iterator" type="Iterator&lt;Double&gt;" line="560"/>
                    <method name="size" type="int" line="564"/>
                </anonymous_class>
            </method>
            <method name="MatrixUtils" type="constructor" line="571"/>
        </class>
    </source>