<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.transformation">
        <import package="java.math.BigDecimal"/>
        <import package="java.util.Iterator"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Iterator1D"/>
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.BigFunction"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <interface name="Householder">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <implements interface="Access1D">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <class name="Big" line="36">
                <extends class="Object"/>
                <implements interface="Householder">
                    <type_params>
                        <type_param name="BigDecimal"/>
                    </type_params>
                </implements>
                <declaration name="beta" type="BigDecimal" line="38"/>
                <declaration name="first" type="int" line="39"/>
                <declaration name="vector" type="BigDecimal[]" line="40"/>
                <method name="Big" type="constructor" line="42">
                    <params>
                        <param name="aTransf" type="Householder&lt;BigDecimal&gt;"/>
                    </params>
                </method>
                <method name="Big" type="constructor" line="49">
                    <params>
                        <param name="aDim" type="int"/>
                    </params>
                </method>
                <method name="Big" type="constructor" line="59"/>
                <method name="copy" type="Householder.Big" line="63">
                    <params>
                        <param name="aSource" type="Householder&lt;BigDecimal&gt;"/>
                    </params>
                    <declaration name="tmpVector" type="BigDecimal[]" line="67"/>
                    <declaration name="tmpVal" type="BigDecimal" line="68"/>
                    <declaration name="tmpSize" type="int" line="69"/>
                    <scope line="70"/>
                </method>
                <method name="copy" type="Householder.Big" line="81">
                    <params>
                        <param name="aSource" type="Householder&lt;BigDecimal&gt;"/>
                        <param name="precalculatedBeta" type="BigDecimal"/>
                    </params>
                    <declaration name="tmpVector" type="BigDecimal[]" line="85"/>
                    <declaration name="tmpSize" type="int" line="87"/>
                    <scope line="88"/>
                </method>
                <method name="count" type="long" line="97"/>
                <method name="doubleValue" type="double" line="101">
                    <params>
                        <param name="anInd" type="long"/>
                    </params>
                </method>
                <method name="first" type="int" line="105"/>
                <method name="get" type="BigDecimal" line="109">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="get" type="BigDecimal" line="113">
                    <params>
                        <param name="index" type="long"/>
                    </params>
                </method>
                <method name="iterator" type="Iterator&lt;BigDecimal&gt;" line="117"/>
                <method name="size" type="int" line="121"/>
                <method name="toString" type="String" line="126">
                    <declaration name="retVal" type="StringBuilder" line="128"/>
                    <declaration name="tmpFirst" type="int" line="130"/>
                    <declaration name="tmpLength" type="int" line="131"/>
                    <scope line="132"/>
                    <scope line="136">
                        <scope line="138"/>
                    </scope>
                </method>
            </class>
            <class name="Complex" line="149">
                <extends class="Object"/>
                <implements interface="Householder">
                    <type_params>
                        <type_param name="ComplexNumber"/>
                    </type_params>
                </implements>
                <declaration name="beta" type="ComplexNumber" line="151"/>
                <declaration name="first" type="int" line="152"/>
                <declaration name="vector" type="ComplexNumber[]" line="153"/>
                <method name="Complex" type="constructor" line="155">
                    <params>
                        <param name="aTransf" type="Householder&lt;ComplexNumber&gt;"/>
                    </params>
                </method>
                <method name="Complex" type="constructor" line="162">
                    <params>
                        <param name="aDim" type="int"/>
                    </params>
                </method>
                <method name="Complex" type="constructor" line="172"/>
                <method name="copy" type="Householder.Complex" line="176">
                    <params>
                        <param name="aSource" type="Householder&lt;ComplexNumber&gt;"/>
                    </params>
                    <declaration name="tmpVector" type="ComplexNumber[]" line="180"/>
                    <declaration name="tmpNmbr" type="ComplexNumber" line="181"/>
                    <declaration name="tmpVal" type="double" line="182"/>
                    <declaration name="tmpSize" type="int" line="183"/>
                    <scope line="184"/>
                </method>
                <method name="copy" type="Householder.Complex" line="196">
                    <params>
                        <param name="aSource" type="Householder&lt;ComplexNumber&gt;"/>
                        <param name="precalculatedBeta" type="ComplexNumber"/>
                    </params>
                    <declaration name="tmpVector" type="ComplexNumber[]" line="200"/>
                    <declaration name="tmpSize" type="int" line="202"/>
                    <scope line="203"/>
                </method>
                <method name="count" type="long" line="212"/>
                <method name="doubleValue" type="double" line="216">
                    <params>
                        <param name="anInd" type="long"/>
                    </params>
                </method>
                <method name="first" type="int" line="220"/>
                <method name="get" type="ComplexNumber" line="224">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="get" type="ComplexNumber" line="228">
                    <params>
                        <param name="index" type="long"/>
                    </params>
                </method>
                <method name="iterator" type="Iterator&lt;ComplexNumber&gt;" line="232"/>
                <method name="size" type="int" line="236"/>
                <method name="toString" type="String" line="241">
                    <declaration name="retVal" type="StringBuilder" line="243"/>
                    <declaration name="tmpFirst" type="int" line="245"/>
                    <declaration name="tmpLength" type="int" line="246"/>
                    <scope line="247"/>
                    <scope line="251">
                        <scope line="253"/>
                    </scope>
                </method>
            </class>
            <class name="Primitive" line="264">
                <extends class="Object"/>
                <implements interface="Householder">
                    <type_params>
                        <type_param name="Double"/>
                    </type_params>
                </implements>
                <declaration name="beta" type="double" line="266"/>
                <declaration name="first" type="int" line="267"/>
                <declaration name="vector" type="double[]" line="268"/>
                <method name="Primitive" type="constructor" line="270">
                    <params>
                        <param name="aTransf" type="Householder&lt;Double&gt;"/>
                    </params>
                </method>
                <method name="Primitive" type="constructor" line="277">
                    <params>
                        <param name="aDim" type="int"/>
                    </params>
                </method>
                <method name="Primitive" type="constructor" line="287"/>
                <method name="copy" type="Householder.Primitive" line="291">
                    <params>
                        <param name="aSource" type="Householder&lt;Double&gt;"/>
                    </params>
                    <declaration name="tmpVector" type="double[]" line="295"/>
                    <declaration name="tmpVal" type="double" line="296"/>
                    <declaration name="tmpSize" type="int" line="297"/>
                    <scope line="298"/>
                </method>
                <method name="copy" type="Householder.Primitive" line="309">
                    <params>
                        <param name="aSource" type="Householder&lt;Double&gt;"/>
                        <param name="precalculatedBeta" type="double"/>
                    </params>
                    <declaration name="tmpVector" type="double[]" line="313"/>
                    <declaration name="tmpSize" type="int" line="315"/>
                    <scope line="316"/>
                </method>
                <method name="count" type="long" line="325"/>
                <method name="doubleValue" type="double" line="329">
                    <params>
                        <param name="anInd" type="long"/>
                    </params>
                </method>
                <method name="first" type="int" line="333"/>
                <method name="get" type="Double" line="337">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="get" type="Double" line="341">
                    <params>
                        <param name="index" type="long"/>
                    </params>
                </method>
                <method name="iterator" type="Iterator&lt;Double&gt;" line="345"/>
                <method name="size" type="int" line="349"/>
                <method name="toString" type="String" line="354">
                    <declaration name="retVal" type="StringBuilder" line="356"/>
                    <declaration name="tmpLastIndex" type="int" line="358"/>
                    <scope line="359"/>
                </method>
            </class>
            <method name="first" type="int" line="372"/>
            <javadoc line="372">
                Regardless of what is actually returned by {@linkplain #doubleValue(long)} and/or {@linkplain #get(long)} vector
                  elements with indeces less than &apos;first&apos; should be assumed to be, and treated as if they are, zero.                
            </javadoc>
        </interface>
    </source>