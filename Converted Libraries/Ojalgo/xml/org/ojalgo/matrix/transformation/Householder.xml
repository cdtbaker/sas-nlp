<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.transformation">
        <import package="java.math.BigDecimal"/>
        <import package="java.util.Iterator"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Iterator1D"/>
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.BigFunction"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <interface name="Householder">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <implements interface="Access1D">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <class name="Big" line="11">
                <extends class="Object"/>
                <implements interface="Householder">
                    <type_params>
                        <type_param name="BigDecimal"/>
                    </type_params>
                </implements>
                <declaration name="beta" type="BigDecimal" line="12"/>
                <declaration name="first" type="int" line="13"/>
                <declaration name="vector" type="BigDecimal[]" line="14"/>
                <method name="Big" type="constructor" line="15">
                    <params>
                        <param name="aTransf" type="Householder<BigDecimal>"/>
                    </params>
                </method>
                <method name="Big" type="constructor" line="19">
                    <params>
                        <param name="aDim" type="int"/>
                    </params>
                </method>
                <method name="Big" type="constructor" line="25"/>
                <method name="copy" type="Householder.Big" line="28">
                    <params>
                        <param name="aSource" type="Householder<BigDecimal>"/>
                    </params>
                    <declaration name="tmpVector" type="BigDecimal[]" line="30"/>
                    <declaration name="tmpVal" type="BigDecimal" line="31"/>
                    <declaration name="tmpSize" type="int" line="32"/>
                    <scope line="33"/>
                </method>
                <method name="copy" type="Householder.Big" line="41">
                    <params>
                        <param name="aSource" type="Householder<BigDecimal>"/>
                        <param name="precalculatedBeta" type="BigDecimal"/>
                    </params>
                    <declaration name="tmpVector" type="BigDecimal[]" line="43"/>
                    <declaration name="tmpSize" type="int" line="44"/>
                    <scope line="45"/>
                </method>
                <method name="count" type="long" line="51"/>
                <method name="doubleValue" type="double" line="54">
                    <params>
                        <param name="anInd" type="long"/>
                    </params>
                </method>
                <method name="first" type="int" line="57"/>
                <method name="get" type="BigDecimal" line="60">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="get" type="BigDecimal" line="63">
                    <params>
                        <param name="index" type="long"/>
                    </params>
                </method>
                <method name="iterator" type="Iterator<BigDecimal>" line="66"/>
                <method name="size" type="int" line="69"/>
                <method name="toString" type="String" line="72">
                    <declaration name="retVal" type="StringBuilder" line="73"/>
                    <declaration name="tmpFirst" type="int" line="74"/>
                    <declaration name="tmpLength" type="int" line="75"/>
                    <scope line="76"/>
                    <scope line="80">
                        <scope line="82"/>
                    </scope>
                </method>
            </class>
            <class name="Complex" line="90">
                <extends class="Object"/>
                <implements interface="Householder">
                    <type_params>
                        <type_param name="ComplexNumber"/>
                    </type_params>
                </implements>
                <declaration name="beta" type="ComplexNumber" line="91"/>
                <declaration name="first" type="int" line="92"/>
                <declaration name="vector" type="ComplexNumber[]" line="93"/>
                <method name="Complex" type="constructor" line="94">
                    <params>
                        <param name="aTransf" type="Householder<ComplexNumber>"/>
                    </params>
                </method>
                <method name="Complex" type="constructor" line="98">
                    <params>
                        <param name="aDim" type="int"/>
                    </params>
                </method>
                <method name="Complex" type="constructor" line="104"/>
                <method name="copy" type="Householder.Complex" line="107">
                    <params>
                        <param name="aSource" type="Householder<ComplexNumber>"/>
                    </params>
                    <declaration name="tmpVector" type="ComplexNumber[]" line="109"/>
                    <declaration name="tmpNmbr" type="ComplexNumber" line="110"/>
                    <declaration name="tmpVal" type="double" line="111"/>
                    <declaration name="tmpSize" type="int" line="112"/>
                    <scope line="113"/>
                </method>
                <method name="copy" type="Householder.Complex" line="122">
                    <params>
                        <param name="aSource" type="Householder<ComplexNumber>"/>
                        <param name="precalculatedBeta" type="ComplexNumber"/>
                    </params>
                    <declaration name="tmpVector" type="ComplexNumber[]" line="124"/>
                    <declaration name="tmpSize" type="int" line="125"/>
                    <scope line="126"/>
                </method>
                <method name="count" type="long" line="132"/>
                <method name="doubleValue" type="double" line="135">
                    <params>
                        <param name="anInd" type="long"/>
                    </params>
                </method>
                <method name="first" type="int" line="138"/>
                <method name="get" type="ComplexNumber" line="141">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="get" type="ComplexNumber" line="144">
                    <params>
                        <param name="index" type="long"/>
                    </params>
                </method>
                <method name="iterator" type="Iterator<ComplexNumber>" line="147"/>
                <method name="size" type="int" line="150"/>
                <method name="toString" type="String" line="153">
                    <declaration name="retVal" type="StringBuilder" line="154"/>
                    <declaration name="tmpFirst" type="int" line="155"/>
                    <declaration name="tmpLength" type="int" line="156"/>
                    <scope line="157"/>
                    <scope line="161">
                        <scope line="163"/>
                    </scope>
                </method>
            </class>
            <class name="Primitive" line="171">
                <extends class="Object"/>
                <implements interface="Householder">
                    <type_params>
                        <type_param name="Double"/>
                    </type_params>
                </implements>
                <declaration name="beta" type="double" line="172"/>
                <declaration name="first" type="int" line="173"/>
                <declaration name="vector" type="double[]" line="174"/>
                <method name="Primitive" type="constructor" line="175">
                    <params>
                        <param name="aTransf" type="Householder<Double>"/>
                    </params>
                </method>
                <method name="Primitive" type="constructor" line="179">
                    <params>
                        <param name="aDim" type="int"/>
                    </params>
                </method>
                <method name="Primitive" type="constructor" line="185"/>
                <method name="copy" type="Householder.Primitive" line="188">
                    <params>
                        <param name="aSource" type="Householder<Double>"/>
                    </params>
                    <declaration name="tmpVector" type="double[]" line="190"/>
                    <declaration name="tmpVal" type="double" line="191"/>
                    <declaration name="tmpSize" type="int" line="192"/>
                    <scope line="193"/>
                </method>
                <method name="copy" type="Householder.Primitive" line="201">
                    <params>
                        <param name="aSource" type="Householder<Double>"/>
                        <param name="precalculatedBeta" type="double"/>
                    </params>
                    <declaration name="tmpVector" type="double[]" line="203"/>
                    <declaration name="tmpSize" type="int" line="204"/>
                    <scope line="205"/>
                </method>
                <method name="count" type="long" line="211"/>
                <method name="doubleValue" type="double" line="214">
                    <params>
                        <param name="anInd" type="long"/>
                    </params>
                </method>
                <method name="first" type="int" line="217"/>
                <method name="get" type="Double" line="220">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="get" type="Double" line="223">
                    <params>
                        <param name="index" type="long"/>
                    </params>
                </method>
                <method name="iterator" type="Iterator<Double>" line="226"/>
                <method name="size" type="int" line="229"/>
                <method name="toString" type="String" line="232">
                    <declaration name="retVal" type="StringBuilder" line="233"/>
                    <declaration name="tmpLastIndex" type="int" line="234"/>
                    <scope line="235"/>
                </method>
            </class>
            <method name="first" type="int" line="244"/>
            <javadoc line="244">
                Regardless of what is actually returned by {@linkplain #doubleValue(long)} and/or {@linkplain #get(long)} vector
                  elements with indeces less than &apos;first&apos; should be assumed to be, and treated as if they are, zero.                
            </javadoc>
        </interface>
    </source>