<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.store.operation">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.concurrent.DivideAndConquer"/>
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.BigFunction"/>
        <import package="org.ojalgo.function.ComplexFunction"/>
        <import package="org.ojalgo.matrix.transformation.Householder"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <class name="HouseholderHermitian" line="11">
            <extends class="MatrixOperation"/>
            <javadoc line="11">
                Performs Householder transformation from both sides simultaneously
                  assuming that [A] is hermitian (square symmetric) [A] = [A]&lt;sup&gt;H&lt;/sup&gt;.
                  Will only read from and write to the lower/left triangular part of [A].                
                <author>
                    apete                    
                </author>
            </javadoc>
            <declaration name="THRESHOLD" type="int" line="18"/>
            <method name="invoke" type="void" line="19">
                <params>
                    <param name="aData" type="BigDecimal[]"/>
                    <param name="aHouseholder" type="Householder.Big"/>
                    <param name="aWorker" type="BigDecimal[]"/>
                </params>
                <declaration name="tmpVector" type="BigDecimal[]" line="20"/>
                <declaration name="tmpFirst" type="int" line="21"/>
                <declaration name="tmpLength" type="int" line="22"/>
                <declaration name="tmpBeta" type="BigDecimal" line="23"/>
                <declaration name="tmpCount" type="int" line="24"/>
                <scope line="25">
                    <anonymous_class line="26">
                        <method name="conquer" type="void" line="27">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConqurer" type="DivideAndConquer" line="26"/>
                </scope>
                <scope line="34"/>
                <declaration name="tmpVal" type="BigDecimal" line="37"/>
                <scope line="38"/>
                <scope line="42"/>
                <scope line="45">
                    <anonymous_class line="46">
                        <method name="conquer" type="void" line="47">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConqurer" type="DivideAndConquer" line="46"/>
                </scope>
                <scope line="54"/>
            </method>
            <method name="invoke" type="void" line="58">
                <params>
                    <param name="aData" type="ComplexNumber[]"/>
                    <param name="aHouseholder" type="Householder.Complex"/>
                    <param name="aWorker" type="ComplexNumber[]"/>
                </params>
                <declaration name="tmpVector" type="ComplexNumber[]" line="59"/>
                <declaration name="tmpFirst" type="int" line="60"/>
                <declaration name="tmpLength" type="int" line="61"/>
                <declaration name="tmpBeta" type="ComplexNumber" line="62"/>
                <declaration name="tmpCount" type="int" line="63"/>
                <scope line="64">
                    <anonymous_class line="65">
                        <method name="conquer" type="void" line="66">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConqurer" type="DivideAndConquer" line="65"/>
                </scope>
                <scope line="73"/>
                <declaration name="tmpVal" type="ComplexNumber" line="76"/>
                <scope line="77"/>
                <scope line="81"/>
                <scope line="84">
                    <anonymous_class line="85">
                        <method name="conquer" type="void" line="86">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConqurer" type="DivideAndConquer" line="85"/>
                </scope>
                <scope line="93"/>
            </method>
            <method name="invoke" type="void" line="97">
                <params>
                    <param name="aData" type="double[]"/>
                    <param name="aHouseholder" type="Householder.Primitive"/>
                    <param name="aWorker" type="double[]"/>
                </params>
                <declaration name="tmpVector" type="double[]" line="98"/>
                <declaration name="tmpFirst" type="int" line="99"/>
                <declaration name="tmpLength" type="int" line="100"/>
                <declaration name="tmpBeta" type="double" line="101"/>
                <declaration name="tmpCount" type="int" line="102"/>
                <scope line="103">
                    <anonymous_class line="104">
                        <method name="conquer" type="void" line="105">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConqurer" type="DivideAndConquer" line="104"/>
                </scope>
                <scope line="112"/>
                <declaration name="tmpVal" type="double" line="115"/>
                <scope line="116"/>
                <scope line="120"/>
                <scope line="123">
                    <anonymous_class line="124">
                        <method name="conquer" type="void" line="125">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConqurer" type="DivideAndConquer" line="124"/>
                </scope>
                <scope line="132"/>
            </method>
            <method name="tred2j" type="void" line="136">
                <params>
                    <param name="z" type="double[]"/>
                    <param name="d" type="double[]"/>
                    <param name="e" type="double[]"/>
                    <param name="yesvecs" type="boolean"/>
                </params>
                <declaration name="n" type="int" line="137"/>
                <declaration name="scale" type="double" line="138"/>
                <declaration name="h" type="double" line="139"/>
                <declaration name="f" type="double" line="140"/>
                <declaration name="g" type="double" line="141"/>
                <declaration name="hh" type="double" line="142"/>
                <declaration name="tmpRowDim" type="int" line="143"/>
                <declaration name="tmpLast" type="int" line="144"/>
                <scope line="145"/>
                <scope line="148">
                    <declaration name="l" type="int" line="149"/>
                    <scope line="151"/>
                    <scope line="154">
                        <scope line="156"/>
                    </scope>
                    <scope line="162">
                        <scope line="163"/>
                        <scope line="169"/>
                        <scope line="175"/>
                        <scope line="178">
                            <scope line="182"/>
                        </scope>
                        <scope line="189"/>
                        <scope line="194"/>
                        <scope line="197">
                            <scope line="200"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="209">
                    <scope line="210">
                        <declaration name="l" type="int" line="211"/>
                        <scope line="215">
                            <scope line="216"/>
                            <scope line="219">
                                <scope line="221"/>
                                <scope line="224"/>
                            </scope>
                        </scope>
                        <scope line="229"/>
                    </scope>
                    <scope line="233"/>
                </scope>
            </method>
            <method name="tred2nr" type="void" line="241">
                <params>
                    <param name="z" type="double[]"/>
                    <param name="d" type="double[]"/>
                    <param name="e" type="double[]"/>
                    <param name="yesvecs" type="boolean"/>
                </params>
                <declaration name="n" type="int" line="242"/>
                <declaration name="l" type="int" line="243"/>
                <declaration name="tmpRowDim" type="int" line="244"/>
                <declaration name="scale" type="double" line="245"/>
                <declaration name="h" type="double" line="246"/>
                <declaration name="hh" type="double" line="247"/>
                <declaration name="g" type="double" line="248"/>
                <declaration name="f" type="double" line="249"/>
                <scope line="250">
                    <scope line="254">
                        <scope line="255"/>
                        <scope line="258"/>
                        <scope line="261">
                            <scope line="262"/>
                            <scope line="272">
                                <scope line="273"/>
                                <scope line="277"/>
                                <scope line="280"/>
                            </scope>
                            <scope line="287">
                                <scope line="290"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="296"/>
                </scope>
                <scope line="301"/>
                <scope line="305">
                    <scope line="306">
                        <scope line="307">
                            <scope line="308">
                                <scope line="310"/>
                                <scope line="313"/>
                            </scope>
                        </scope>
                        <scope line="320"/>
                    </scope>
                    <scope line="325"/>
                </scope>
            </method>
            <method name="HouseholderHermitian" type="constructor" line="330"/>
        </class>
    </source>