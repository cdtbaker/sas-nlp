<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.store.operation">
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.concurrent.DivideAndConquer"/>
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.matrix.store.BigDenseStore.BigMultiplyRight"/>
        <import package="org.ojalgo.matrix.store.ComplexDenseStore.ComplexMultiplyRight"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore.PrimitiveMultiplyRight"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <class name="MultiplyRight" line="11">
            <extends class="MatrixOperation"/>
            <declaration name="THRESHOLD" type="int" line="12"/>
            <declaration name="BIG" type="BigMultiplyRight" line="13"/>
            <anonymous_class line="13">
                <method name="invoke" type="void" line="14">
                    <params>
                        <param name="product" type="BigDecimal[]"/>
                        <param name="left" type="BigDecimal[]"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<BigDecimal>"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="BIG_MT" type="BigMultiplyRight" line="19"/>
            <anonymous_class line="19">
                <method name="invoke" type="void" line="20">
                    <params>
                        <param name="product" type="BigDecimal[]"/>
                        <param name="left" type="BigDecimal[]"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<BigDecimal>"/>
                    </params>
                    <anonymous_class line="21">
                        <method name="conquer" type="void" line="22">
                            <params>
                                <param name="first" type="int"/>
                                <param name="limit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="21"/>
                </method>
            </anonymous_class>
            <declaration name="COMPLEX" type="ComplexMultiplyRight" line="31"/>
            <anonymous_class line="31">
                <method name="invoke" type="void" line="32">
                    <params>
                        <param name="product" type="ComplexNumber[]"/>
                        <param name="left" type="ComplexNumber[]"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<ComplexNumber>"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="COMPLEX_MT" type="ComplexMultiplyRight" line="37"/>
            <anonymous_class line="37">
                <method name="invoke" type="void" line="38">
                    <params>
                        <param name="product" type="ComplexNumber[]"/>
                        <param name="left" type="ComplexNumber[]"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<ComplexNumber>"/>
                    </params>
                    <anonymous_class line="39">
                        <method name="conquer" type="void" line="40">
                            <params>
                                <param name="first" type="int"/>
                                <param name="limit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="39"/>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE" type="PrimitiveMultiplyRight" line="49"/>
            <anonymous_class line="49">
                <method name="invoke" type="void" line="50">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="double[]"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<?>"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_1X1" type="PrimitiveMultiplyRight" line="55"/>
            <anonymous_class line="55">
                <method name="invoke" type="void" line="56">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="double[]"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmp00" type="double" line="57"/>
                    <declaration name="tmpLeftStruct" type="int" line="58"/>
                    <scope line="59"/>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_2X2" type="PrimitiveMultiplyRight" line="66"/>
            <anonymous_class line="66">
                <method name="invoke" type="void" line="67">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="double[]"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmp00" type="double" line="68"/>
                    <declaration name="tmp10" type="double" line="69"/>
                    <declaration name="tmp01" type="double" line="70"/>
                    <declaration name="tmp11" type="double" line="71"/>
                    <declaration name="tmpLeftStruct" type="int" line="72"/>
                    <declaration name="tmpIndex" type="int" line="73"/>
                    <scope line="74">
                        <declaration name="tmpLeft0" type="double" line="76"/>
                        <declaration name="tmpLeft1" type="double" line="78"/>
                        <declaration name="tmpRight0" type="double" line="80"/>
                        <declaration name="tmpRight1" type="double" line="82"/>
                    </scope>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_3X3" type="PrimitiveMultiplyRight" line="95"/>
            <anonymous_class line="95">
                <method name="invoke" type="void" line="96">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="double[]"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmp00" type="double" line="97"/>
                    <declaration name="tmp10" type="double" line="98"/>
                    <declaration name="tmp20" type="double" line="99"/>
                    <declaration name="tmp01" type="double" line="100"/>
                    <declaration name="tmp11" type="double" line="101"/>
                    <declaration name="tmp21" type="double" line="102"/>
                    <declaration name="tmp02" type="double" line="103"/>
                    <declaration name="tmp12" type="double" line="104"/>
                    <declaration name="tmp22" type="double" line="105"/>
                    <declaration name="tmpLeftStruct" type="int" line="106"/>
                    <declaration name="tmpIndex" type="int" line="107"/>
                    <scope line="108">
                        <declaration name="tmpLeft0" type="double" line="110"/>
                        <declaration name="tmpLeft1" type="double" line="112"/>
                        <declaration name="tmpLeft2" type="double" line="114"/>
                        <declaration name="tmpRight0" type="double" line="116"/>
                        <declaration name="tmpRight1" type="double" line="118"/>
                        <declaration name="tmpRight2" type="double" line="120"/>
                    </scope>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_4X4" type="PrimitiveMultiplyRight" line="143"/>
            <anonymous_class line="143">
                <method name="invoke" type="void" line="144">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="double[]"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmp00" type="double" line="145"/>
                    <declaration name="tmp10" type="double" line="146"/>
                    <declaration name="tmp20" type="double" line="147"/>
                    <declaration name="tmp30" type="double" line="148"/>
                    <declaration name="tmp01" type="double" line="149"/>
                    <declaration name="tmp11" type="double" line="150"/>
                    <declaration name="tmp21" type="double" line="151"/>
                    <declaration name="tmp31" type="double" line="152"/>
                    <declaration name="tmp02" type="double" line="153"/>
                    <declaration name="tmp12" type="double" line="154"/>
                    <declaration name="tmp22" type="double" line="155"/>
                    <declaration name="tmp32" type="double" line="156"/>
                    <declaration name="tmp03" type="double" line="157"/>
                    <declaration name="tmp13" type="double" line="158"/>
                    <declaration name="tmp23" type="double" line="159"/>
                    <declaration name="tmp33" type="double" line="160"/>
                    <declaration name="tmpLeftStruct" type="int" line="161"/>
                    <declaration name="tmpIndex" type="int" line="162"/>
                    <scope line="163">
                        <declaration name="tmpLeft0" type="double" line="165"/>
                        <declaration name="tmpLeft1" type="double" line="167"/>
                        <declaration name="tmpLeft2" type="double" line="169"/>
                        <declaration name="tmpLeft3" type="double" line="171"/>
                        <declaration name="tmpRight0" type="double" line="173"/>
                        <declaration name="tmpRight1" type="double" line="175"/>
                        <declaration name="tmpRight2" type="double" line="177"/>
                        <declaration name="tmpRight3" type="double" line="179"/>
                    </scope>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_5X5" type="PrimitiveMultiplyRight" line="216"/>
            <anonymous_class line="216">
                <method name="invoke" type="void" line="217">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="double[]"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmp00" type="double" line="218"/>
                    <declaration name="tmp10" type="double" line="219"/>
                    <declaration name="tmp20" type="double" line="220"/>
                    <declaration name="tmp30" type="double" line="221"/>
                    <declaration name="tmp40" type="double" line="222"/>
                    <declaration name="tmp01" type="double" line="223"/>
                    <declaration name="tmp11" type="double" line="224"/>
                    <declaration name="tmp21" type="double" line="225"/>
                    <declaration name="tmp31" type="double" line="226"/>
                    <declaration name="tmp41" type="double" line="227"/>
                    <declaration name="tmp02" type="double" line="228"/>
                    <declaration name="tmp12" type="double" line="229"/>
                    <declaration name="tmp22" type="double" line="230"/>
                    <declaration name="tmp32" type="double" line="231"/>
                    <declaration name="tmp42" type="double" line="232"/>
                    <declaration name="tmp03" type="double" line="233"/>
                    <declaration name="tmp13" type="double" line="234"/>
                    <declaration name="tmp23" type="double" line="235"/>
                    <declaration name="tmp33" type="double" line="236"/>
                    <declaration name="tmp43" type="double" line="237"/>
                    <declaration name="tmp04" type="double" line="238"/>
                    <declaration name="tmp14" type="double" line="239"/>
                    <declaration name="tmp24" type="double" line="240"/>
                    <declaration name="tmp34" type="double" line="241"/>
                    <declaration name="tmp44" type="double" line="242"/>
                    <declaration name="tmpLeftStruct" type="int" line="243"/>
                    <declaration name="tmpIndex" type="int" line="244"/>
                    <scope line="245">
                        <declaration name="tmpLeft0" type="double" line="247"/>
                        <declaration name="tmpLeft1" type="double" line="249"/>
                        <declaration name="tmpLeft2" type="double" line="251"/>
                        <declaration name="tmpLeft3" type="double" line="253"/>
                        <declaration name="tmpLeft4" type="double" line="255"/>
                        <declaration name="tmpRight0" type="double" line="257"/>
                        <declaration name="tmpRight1" type="double" line="259"/>
                        <declaration name="tmpRight2" type="double" line="261"/>
                        <declaration name="tmpRight3" type="double" line="263"/>
                        <declaration name="tmpRight4" type="double" line="265"/>
                    </scope>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_MT" type="PrimitiveMultiplyRight" line="320"/>
            <anonymous_class line="320">
                <method name="invoke" type="void" line="321">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="double[]"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<?>"/>
                    </params>
                    <anonymous_class line="322">
                        <method name="conquer" type="void" line="323">
                            <params>
                                <param name="first" type="int"/>
                                <param name="limit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="322"/>
                </method>
            </anonymous_class>
            <method name="getBig" type="BigMultiplyRight" line="332">
                <params>
                    <param name="rows" type="long"/>
                    <param name="columns" type="long"/>
                </params>
                <scope line="333"/>
                <scope line="336"/>
            </method>
            <method name="getComplex" type="ComplexMultiplyRight" line="340">
                <params>
                    <param name="rows" type="long"/>
                    <param name="columns" type="long"/>
                </params>
                <scope line="341"/>
                <scope line="344"/>
            </method>
            <method name="getPrimitive" type="PrimitiveMultiplyRight" line="348">
                <params>
                    <param name="rows" type="long"/>
                    <param name="columns" type="long"/>
                </params>
                <scope line="349"/>
                <scope line="352"/>
                <scope line="355"/>
                <scope line="358"/>
                <scope line="361"/>
                <scope line="364"/>
                <scope line="367"/>
            </method>
            <method name="invoke" type="void" line="371">
                <params>
                    <param name="product" type="BigDecimal[]"/>
                    <param name="firstColumn" type="int"/>
                    <param name="columnLimit" type="int"/>
                    <param name="left" type="BigDecimal[]"/>
                    <param name="complexity" type="int"/>
                    <param name="right" type="Access1D<BigDecimal>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="372"/>
                <declaration name="tmpIndexLimit" type="int" line="373"/>
                <scope line="374"/>
                <scope line="377">
                    <scope line="378"/>
                </scope>
            </method>
            <method name="invoke" type="void" line="383">
                <params>
                    <param name="product" type="ComplexNumber[]"/>
                    <param name="firstColumn" type="int"/>
                    <param name="columnLimit" type="int"/>
                    <param name="left" type="ComplexNumber[]"/>
                    <param name="complexity" type="int"/>
                    <param name="right" type="Access1D<ComplexNumber>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="384"/>
                <declaration name="tmpIndexLimit" type="int" line="385"/>
                <scope line="386"/>
                <scope line="389">
                    <scope line="390"/>
                </scope>
            </method>
            <method name="invoke" type="void" line="395">
                <params>
                    <param name="product" type="double[]"/>
                    <param name="firstColumn" type="int"/>
                    <param name="columnLimit" type="int"/>
                    <param name="left" type="double[]"/>
                    <param name="complexity" type="int"/>
                    <param name="right" type="Access1D<?>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="396"/>
                <declaration name="tmpIndexLimit" type="int" line="397"/>
                <scope line="398"/>
                <scope line="401">
                    <scope line="402"/>
                </scope>
            </method>
            <method name="MultiplyRight" type="constructor" line="407"/>
        </class>
    </source>