<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.store.operation">
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.concurrent.DivideAndConquer"/>
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.BigFunction"/>
        <import package="org.ojalgo.matrix.store.BigDenseStore.BigMultiplyLeft"/>
        <import package="org.ojalgo.matrix.store.ComplexDenseStore.ComplexMultiplyLeft"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore.PrimitiveMultiplyLeft"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <class name="MultiplyLeft" line="12">
            <extends class="MatrixOperation"/>
            <declaration name="THRESHOLD" type="int" line="13"/>
            <declaration name="BIG" type="BigMultiplyLeft" line="14"/>
            <anonymous_class line="14">
                <method name="invoke" type="void" line="15">
                    <params>
                        <param name="product" type="BigDecimal[]"/>
                        <param name="left" type="Access1D<BigDecimal>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="BigDecimal[]"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="BIG_MT" type="BigMultiplyLeft" line="20"/>
            <anonymous_class line="20">
                <method name="invoke" type="void" line="21">
                    <params>
                        <param name="product" type="BigDecimal[]"/>
                        <param name="left" type="Access1D<BigDecimal>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="BigDecimal[]"/>
                    </params>
                    <anonymous_class line="22">
                        <method name="conquer" type="void" line="23">
                            <params>
                                <param name="first" type="int"/>
                                <param name="limit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="22"/>
                </method>
            </anonymous_class>
            <declaration name="COMPLEX" type="ComplexMultiplyLeft" line="32"/>
            <anonymous_class line="32">
                <method name="invoke" type="void" line="33">
                    <params>
                        <param name="product" type="ComplexNumber[]"/>
                        <param name="left" type="Access1D<ComplexNumber>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="ComplexNumber[]"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="COMPLEX_MT" type="ComplexMultiplyLeft" line="38"/>
            <anonymous_class line="38">
                <method name="invoke" type="void" line="39">
                    <params>
                        <param name="product" type="ComplexNumber[]"/>
                        <param name="left" type="Access1D<ComplexNumber>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="ComplexNumber[]"/>
                    </params>
                    <anonymous_class line="40">
                        <method name="conquer" type="void" line="41">
                            <params>
                                <param name="first" type="int"/>
                                <param name="limit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="40"/>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE" type="PrimitiveMultiplyLeft" line="50"/>
            <anonymous_class line="50">
                <method name="invoke" type="void" line="51">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D<?>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="double[]"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_1X1" type="PrimitiveMultiplyLeft" line="56"/>
            <anonymous_class line="56">
                <method name="invoke" type="void" line="57">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D<?>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="double[]"/>
                    </params>
                    <declaration name="tmp00" type="double" line="58"/>
                    <declaration name="tmpLeftStruct" type="int" line="59"/>
                    <scope line="60"/>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_2X2" type="PrimitiveMultiplyLeft" line="67"/>
            <anonymous_class line="67">
                <method name="invoke" type="void" line="68">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D<?>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="double[]"/>
                    </params>
                    <declaration name="tmp00" type="double" line="69"/>
                    <declaration name="tmp10" type="double" line="70"/>
                    <declaration name="tmp01" type="double" line="71"/>
                    <declaration name="tmp11" type="double" line="72"/>
                    <declaration name="tmpLeftStruct" type="long" line="73"/>
                    <declaration name="tmpIndex" type="int" line="74"/>
                    <scope line="75">
                        <declaration name="tmpLeft0" type="double" line="77"/>
                        <declaration name="tmpLeft1" type="double" line="79"/>
                        <declaration name="tmpRight0" type="double" line="81"/>
                        <declaration name="tmpRight1" type="double" line="83"/>
                    </scope>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_3X3" type="PrimitiveMultiplyLeft" line="96"/>
            <anonymous_class line="96">
                <method name="invoke" type="void" line="97">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D<?>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="double[]"/>
                    </params>
                    <declaration name="tmp00" type="double" line="98"/>
                    <declaration name="tmp10" type="double" line="99"/>
                    <declaration name="tmp20" type="double" line="100"/>
                    <declaration name="tmp01" type="double" line="101"/>
                    <declaration name="tmp11" type="double" line="102"/>
                    <declaration name="tmp21" type="double" line="103"/>
                    <declaration name="tmp02" type="double" line="104"/>
                    <declaration name="tmp12" type="double" line="105"/>
                    <declaration name="tmp22" type="double" line="106"/>
                    <declaration name="tmpLeftStruct" type="long" line="107"/>
                    <declaration name="tmpIndex" type="int" line="108"/>
                    <scope line="109">
                        <declaration name="tmpLeft0" type="double" line="111"/>
                        <declaration name="tmpLeft1" type="double" line="113"/>
                        <declaration name="tmpLeft2" type="double" line="115"/>
                        <declaration name="tmpRight0" type="double" line="117"/>
                        <declaration name="tmpRight1" type="double" line="119"/>
                        <declaration name="tmpRight2" type="double" line="121"/>
                    </scope>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_4X4" type="PrimitiveMultiplyLeft" line="144"/>
            <anonymous_class line="144">
                <method name="invoke" type="void" line="145">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D<?>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="double[]"/>
                    </params>
                    <declaration name="tmp00" type="double" line="146"/>
                    <declaration name="tmp10" type="double" line="147"/>
                    <declaration name="tmp20" type="double" line="148"/>
                    <declaration name="tmp30" type="double" line="149"/>
                    <declaration name="tmp01" type="double" line="150"/>
                    <declaration name="tmp11" type="double" line="151"/>
                    <declaration name="tmp21" type="double" line="152"/>
                    <declaration name="tmp31" type="double" line="153"/>
                    <declaration name="tmp02" type="double" line="154"/>
                    <declaration name="tmp12" type="double" line="155"/>
                    <declaration name="tmp22" type="double" line="156"/>
                    <declaration name="tmp32" type="double" line="157"/>
                    <declaration name="tmp03" type="double" line="158"/>
                    <declaration name="tmp13" type="double" line="159"/>
                    <declaration name="tmp23" type="double" line="160"/>
                    <declaration name="tmp33" type="double" line="161"/>
                    <declaration name="tmpLeftStruct" type="long" line="162"/>
                    <declaration name="tmpIndex" type="int" line="163"/>
                    <scope line="164">
                        <declaration name="tmpLeft0" type="double" line="166"/>
                        <declaration name="tmpLeft1" type="double" line="168"/>
                        <declaration name="tmpLeft2" type="double" line="170"/>
                        <declaration name="tmpLeft3" type="double" line="172"/>
                        <declaration name="tmpRight0" type="double" line="174"/>
                        <declaration name="tmpRight1" type="double" line="176"/>
                        <declaration name="tmpRight2" type="double" line="178"/>
                        <declaration name="tmpRight3" type="double" line="180"/>
                    </scope>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_5X5" type="PrimitiveMultiplyLeft" line="217"/>
            <anonymous_class line="217">
                <method name="invoke" type="void" line="218">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D<?>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="double[]"/>
                    </params>
                    <declaration name="tmp00" type="double" line="219"/>
                    <declaration name="tmp10" type="double" line="220"/>
                    <declaration name="tmp20" type="double" line="221"/>
                    <declaration name="tmp30" type="double" line="222"/>
                    <declaration name="tmp40" type="double" line="223"/>
                    <declaration name="tmp01" type="double" line="224"/>
                    <declaration name="tmp11" type="double" line="225"/>
                    <declaration name="tmp21" type="double" line="226"/>
                    <declaration name="tmp31" type="double" line="227"/>
                    <declaration name="tmp41" type="double" line="228"/>
                    <declaration name="tmp02" type="double" line="229"/>
                    <declaration name="tmp12" type="double" line="230"/>
                    <declaration name="tmp22" type="double" line="231"/>
                    <declaration name="tmp32" type="double" line="232"/>
                    <declaration name="tmp42" type="double" line="233"/>
                    <declaration name="tmp03" type="double" line="234"/>
                    <declaration name="tmp13" type="double" line="235"/>
                    <declaration name="tmp23" type="double" line="236"/>
                    <declaration name="tmp33" type="double" line="237"/>
                    <declaration name="tmp43" type="double" line="238"/>
                    <declaration name="tmp04" type="double" line="239"/>
                    <declaration name="tmp14" type="double" line="240"/>
                    <declaration name="tmp24" type="double" line="241"/>
                    <declaration name="tmp34" type="double" line="242"/>
                    <declaration name="tmp44" type="double" line="243"/>
                    <declaration name="tmpLeftStruct" type="long" line="244"/>
                    <declaration name="tmpIndex" type="int" line="245"/>
                    <scope line="246">
                        <declaration name="tmpLeft0" type="double" line="248"/>
                        <declaration name="tmpLeft1" type="double" line="250"/>
                        <declaration name="tmpLeft2" type="double" line="252"/>
                        <declaration name="tmpLeft3" type="double" line="254"/>
                        <declaration name="tmpLeft4" type="double" line="256"/>
                        <declaration name="tmpRight0" type="double" line="258"/>
                        <declaration name="tmpRight1" type="double" line="260"/>
                        <declaration name="tmpRight2" type="double" line="262"/>
                        <declaration name="tmpRight3" type="double" line="264"/>
                        <declaration name="tmpRight4" type="double" line="266"/>
                    </scope>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_MT" type="PrimitiveMultiplyLeft" line="321"/>
            <anonymous_class line="321">
                <method name="invoke" type="void" line="322">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D<?>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="double[]"/>
                    </params>
                    <anonymous_class line="323">
                        <method name="conquer" type="void" line="324">
                            <params>
                                <param name="first" type="int"/>
                                <param name="limit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="323"/>
                </method>
            </anonymous_class>
            <method name="getBig" type="BigMultiplyLeft" line="333">
                <params>
                    <param name="rows" type="long"/>
                    <param name="columns" type="long"/>
                </params>
                <scope line="334"/>
                <scope line="337"/>
            </method>
            <method name="getComplex" type="ComplexMultiplyLeft" line="341">
                <params>
                    <param name="rows" type="long"/>
                    <param name="columns" type="long"/>
                </params>
                <scope line="342"/>
                <scope line="345"/>
            </method>
            <method name="getPrimitive" type="PrimitiveMultiplyLeft" line="349">
                <params>
                    <param name="rows" type="long"/>
                    <param name="columns" type="long"/>
                </params>
                <scope line="350"/>
                <scope line="353"/>
                <scope line="356"/>
                <scope line="359"/>
                <scope line="362"/>
                <scope line="365"/>
                <scope line="368"/>
            </method>
            <method name="invoke" type="void" line="372">
                <params>
                    <param name="product" type="BigDecimal[]"/>
                    <param name="firstRow" type="int"/>
                    <param name="rowLimit" type="int"/>
                    <param name="left" type="Access1D<BigDecimal>"/>
                    <param name="complexity" type="int"/>
                    <param name="right" type="BigDecimal[]"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="373"/>
                <declaration name="tmpColDim" type="int" line="374"/>
                <declaration name="tmpLeftRow" type="BigDecimal[]" line="375"/>
                <declaration name="tmpIndex" type="int" line="376"/>
                <declaration name="tmpVal" type="BigDecimal" line="377"/>
                <scope line="378">
                    <scope line="379"/>
                    <scope line="382">
                        <scope line="385"/>
                    </scope>
                </scope>
            </method>
            <method name="invoke" type="void" line="392">
                <params>
                    <param name="product" type="ComplexNumber[]"/>
                    <param name="firstRow" type="int"/>
                    <param name="rowLimit" type="int"/>
                    <param name="left" type="Access1D<ComplexNumber>"/>
                    <param name="complexity" type="int"/>
                    <param name="right" type="ComplexNumber[]"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="393"/>
                <declaration name="tmpColDim" type="int" line="394"/>
                <declaration name="tmpLeftRow" type="ComplexNumber[]" line="395"/>
                <declaration name="tmpIndex" type="int" line="396"/>
                <declaration name="tmpVal" type="ComplexNumber" line="397"/>
                <scope line="398">
                    <scope line="399"/>
                    <scope line="402">
                        <scope line="405"/>
                    </scope>
                </scope>
            </method>
            <method name="invoke" type="void" line="412">
                <params>
                    <param name="product" type="double[]"/>
                    <param name="firstRow" type="int"/>
                    <param name="rowLimit" type="int"/>
                    <param name="left" type="Access1D<?>"/>
                    <param name="complexity" type="int"/>
                    <param name="right" type="double[]"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="413"/>
                <declaration name="tmpColDim" type="int" line="414"/>
                <declaration name="tmpLeftRow" type="double[]" line="415"/>
                <declaration name="tmpIndex" type="int" line="416"/>
                <declaration name="tmpVal" type="double" line="417"/>
                <scope line="418">
                    <scope line="419"/>
                    <scope line="422">
                        <scope line="425"/>
                    </scope>
                </scope>
            </method>
            <method name="MultiplyLeft" type="constructor" line="432"/>
        </class>
    </source>