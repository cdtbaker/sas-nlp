<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.store.operation">
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.concurrent.DivideAndConquer"/>
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.BigFunction"/>
        <import package="org.ojalgo.function.FunctionUtils"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.store.BigDenseStore.BigMultiplyBoth"/>
        <import package="org.ojalgo.matrix.store.ComplexDenseStore.ComplexMultiplyBoth"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore.PrimitiveMultiplyBoth"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <class name="MultiplyBoth" line="38">
            <extends class="MatrixOperation"/>
            <declaration name="THRESHOLD" type="int" line="40"/>
            <declaration name="BIG" type="BigMultiplyBoth" line="42"/>
            <anonymous_class line="42">
                <method name="invoke" type="void" line="44">
                    <params>
                        <param name="product" type="BigDecimal[]"/>
                        <param name="left" type="Access1D&lt;BigDecimal&gt;"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D&lt;BigDecimal&gt;"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="BIG_MT" type="BigMultiplyBoth" line="50"/>
            <anonymous_class line="50">
                <method name="invoke" type="void" line="52">
                    <params>
                        <param name="product" type="BigDecimal[]"/>
                        <param name="left" type="Access1D&lt;BigDecimal&gt;"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D&lt;BigDecimal&gt;"/>
                    </params>
                    <anonymous_class line="54">
                        <method name="conquer" type="void" line="57">
                            <params>
                                <param name="first" type="int"/>
                                <param name="limit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="54"/>
                </method>
            </anonymous_class>
            <declaration name="COMPLEX" type="ComplexMultiplyBoth" line="67"/>
            <anonymous_class line="67">
                <method name="invoke" type="void" line="69">
                    <params>
                        <param name="product" type="ComplexNumber[]"/>
                        <param name="left" type="Access1D&lt;ComplexNumber&gt;"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D&lt;ComplexNumber&gt;"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="COMPLEX_MT" type="ComplexMultiplyBoth" line="75"/>
            <anonymous_class line="75">
                <method name="invoke" type="void" line="77">
                    <params>
                        <param name="product" type="ComplexNumber[]"/>
                        <param name="left" type="Access1D&lt;ComplexNumber&gt;"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D&lt;ComplexNumber&gt;"/>
                    </params>
                    <anonymous_class line="79">
                        <method name="conquer" type="void" line="82">
                            <params>
                                <param name="first" type="int"/>
                                <param name="limit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="79"/>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE" type="PrimitiveMultiplyBoth" line="92"/>
            <anonymous_class line="92">
                <method name="invoke" type="void" line="94">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D&lt;?&gt;"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D&lt;?&gt;"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_1X1" type="PrimitiveMultiplyBoth" line="100"/>
            <anonymous_class line="100">
                <method name="invoke" type="void" line="102">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D&lt;?&gt;"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D&lt;?&gt;"/>
                    </params>
                    <comment line="107">
                        The number of rows in the product- and left-matrix.                        
                    </comment>
                    <declaration name="tmp00" type="double" line="104"/>
                    <declaration name="tmpLeftStruct" type="long" line="106"/>
                    <scope line="108"/>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_2X2" type="PrimitiveMultiplyBoth" line="117"/>
            <anonymous_class line="117">
                <method name="invoke" type="void" line="119">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D&lt;?&gt;"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D&lt;?&gt;"/>
                    </params>
                    <comment line="127">
                        The number of rows in the product- and left-matrix.                        
                    </comment>
                    <declaration name="tmp00" type="double" line="121"/>
                    <declaration name="tmp10" type="double" line="122"/>
                    <declaration name="tmp01" type="double" line="123"/>
                    <declaration name="tmp11" type="double" line="124"/>
                    <declaration name="tmpLeftStruct" type="long" line="126"/>
                    <declaration name="tmpIndex" type="long" line="128"/>
                    <scope line="129">
                        <declaration name="tmpLeft0" type="double" line="132"/>
                        <declaration name="tmpLeft1" type="double" line="134"/>
                        <declaration name="tmpRight0" type="double" line="136"/>
                        <declaration name="tmpRight1" type="double" line="138"/>
                    </scope>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_3X3" type="PrimitiveMultiplyBoth" line="154"/>
            <anonymous_class line="154">
                <method name="invoke" type="void" line="156">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D&lt;?&gt;"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D&lt;?&gt;"/>
                    </params>
                    <comment line="169">
                        The number of rows in the product- and left-matrix.                        
                    </comment>
                    <declaration name="tmp00" type="double" line="158"/>
                    <declaration name="tmp10" type="double" line="159"/>
                    <declaration name="tmp20" type="double" line="160"/>
                    <declaration name="tmp01" type="double" line="161"/>
                    <declaration name="tmp11" type="double" line="162"/>
                    <declaration name="tmp21" type="double" line="163"/>
                    <declaration name="tmp02" type="double" line="164"/>
                    <declaration name="tmp12" type="double" line="165"/>
                    <declaration name="tmp22" type="double" line="166"/>
                    <declaration name="tmpLeftStruct" type="long" line="168"/>
                    <declaration name="tmpIndex" type="long" line="170"/>
                    <scope line="171">
                        <declaration name="tmpLeft0" type="double" line="174"/>
                        <declaration name="tmpLeft1" type="double" line="176"/>
                        <declaration name="tmpLeft2" type="double" line="178"/>
                        <declaration name="tmpRight0" type="double" line="180"/>
                        <declaration name="tmpRight1" type="double" line="182"/>
                        <declaration name="tmpRight2" type="double" line="184"/>
                    </scope>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_4X4" type="PrimitiveMultiplyBoth" line="210"/>
            <anonymous_class line="210">
                <method name="invoke" type="void" line="212">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D&lt;?&gt;"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D&lt;?&gt;"/>
                    </params>
                    <comment line="232">
                        The number of rows in the product- and left-matrix.                        
                    </comment>
                    <declaration name="tmp00" type="double" line="214"/>
                    <declaration name="tmp10" type="double" line="215"/>
                    <declaration name="tmp20" type="double" line="216"/>
                    <declaration name="tmp30" type="double" line="217"/>
                    <declaration name="tmp01" type="double" line="218"/>
                    <declaration name="tmp11" type="double" line="219"/>
                    <declaration name="tmp21" type="double" line="220"/>
                    <declaration name="tmp31" type="double" line="221"/>
                    <declaration name="tmp02" type="double" line="222"/>
                    <declaration name="tmp12" type="double" line="223"/>
                    <declaration name="tmp22" type="double" line="224"/>
                    <declaration name="tmp32" type="double" line="225"/>
                    <declaration name="tmp03" type="double" line="226"/>
                    <declaration name="tmp13" type="double" line="227"/>
                    <declaration name="tmp23" type="double" line="228"/>
                    <declaration name="tmp33" type="double" line="229"/>
                    <declaration name="tmpLeftStruct" type="long" line="231"/>
                    <declaration name="tmpIndex" type="long" line="233"/>
                    <scope line="234">
                        <declaration name="tmpLeft0" type="double" line="237"/>
                        <declaration name="tmpLeft1" type="double" line="239"/>
                        <declaration name="tmpLeft2" type="double" line="241"/>
                        <declaration name="tmpLeft3" type="double" line="243"/>
                        <declaration name="tmpRight0" type="double" line="245"/>
                        <declaration name="tmpRight1" type="double" line="247"/>
                        <declaration name="tmpRight2" type="double" line="249"/>
                        <declaration name="tmpRight3" type="double" line="251"/>
                    </scope>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_5X5" type="PrimitiveMultiplyBoth" line="291"/>
            <anonymous_class line="291">
                <method name="invoke" type="void" line="293">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D&lt;?&gt;"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D&lt;?&gt;"/>
                    </params>
                    <comment line="322">
                        The number of rows in the product- and left-matrix.                        
                    </comment>
                    <declaration name="tmp00" type="double" line="295"/>
                    <declaration name="tmp10" type="double" line="296"/>
                    <declaration name="tmp20" type="double" line="297"/>
                    <declaration name="tmp30" type="double" line="298"/>
                    <declaration name="tmp40" type="double" line="299"/>
                    <declaration name="tmp01" type="double" line="300"/>
                    <declaration name="tmp11" type="double" line="301"/>
                    <declaration name="tmp21" type="double" line="302"/>
                    <declaration name="tmp31" type="double" line="303"/>
                    <declaration name="tmp41" type="double" line="304"/>
                    <declaration name="tmp02" type="double" line="305"/>
                    <declaration name="tmp12" type="double" line="306"/>
                    <declaration name="tmp22" type="double" line="307"/>
                    <declaration name="tmp32" type="double" line="308"/>
                    <declaration name="tmp42" type="double" line="309"/>
                    <declaration name="tmp03" type="double" line="310"/>
                    <declaration name="tmp13" type="double" line="311"/>
                    <declaration name="tmp23" type="double" line="312"/>
                    <declaration name="tmp33" type="double" line="313"/>
                    <declaration name="tmp43" type="double" line="314"/>
                    <declaration name="tmp04" type="double" line="315"/>
                    <declaration name="tmp14" type="double" line="316"/>
                    <declaration name="tmp24" type="double" line="317"/>
                    <declaration name="tmp34" type="double" line="318"/>
                    <declaration name="tmp44" type="double" line="319"/>
                    <declaration name="tmpLeftStruct" type="long" line="321"/>
                    <declaration name="tmpIndex" type="long" line="323"/>
                    <scope line="324">
                        <declaration name="tmpLeft0" type="double" line="327"/>
                        <declaration name="tmpLeft1" type="double" line="329"/>
                        <declaration name="tmpLeft2" type="double" line="331"/>
                        <declaration name="tmpLeft3" type="double" line="333"/>
                        <declaration name="tmpLeft4" type="double" line="335"/>
                        <declaration name="tmpRight0" type="double" line="337"/>
                        <declaration name="tmpRight1" type="double" line="339"/>
                        <declaration name="tmpRight2" type="double" line="341"/>
                        <declaration name="tmpRight3" type="double" line="343"/>
                        <declaration name="tmpRight4" type="double" line="345"/>
                    </scope>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_MT" type="PrimitiveMultiplyBoth" line="403"/>
            <anonymous_class line="403">
                <method name="invoke" type="void" line="405">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D&lt;?&gt;"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D&lt;?&gt;"/>
                    </params>
                    <anonymous_class line="407">
                        <method name="conquer" type="void" line="410">
                            <params>
                                <param name="first" type="int"/>
                                <param name="limit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="407"/>
                </method>
            </anonymous_class>
            <method name="getBig" type="BigMultiplyBoth" line="420">
                <params>
                    <param name="rows" type="long"/>
                    <param name="columns" type="long"/>
                </params>
                <scope line="421"/>
                <scope line="423"/>
            </method>
            <method name="getComplex" type="ComplexMultiplyBoth" line="428">
                <params>
                    <param name="rows" type="long"/>
                    <param name="columns" type="long"/>
                </params>
                <scope line="429"/>
                <scope line="431"/>
            </method>
            <method name="getPrimitive" type="PrimitiveMultiplyBoth" line="436">
                <params>
                    <param name="rows" type="long"/>
                    <param name="columns" type="long"/>
                </params>
                <scope line="437"/>
                <scope line="439"/>
                <scope line="441"/>
                <scope line="443"/>
                <scope line="445"/>
                <scope line="447"/>
                <scope line="449"/>
            </method>
            <method name="invoke" type="void" line="455">
                <params>
                    <param name="product" type="BigDecimal[]"/>
                    <param name="firstRow" type="int"/>
                    <param name="rowLimit" type="int"/>
                    <param name="left" type="Access1D&lt;BigDecimal&gt;"/>
                    <param name="complexity" type="int"/>
                    <param name="right" type="Access1D&lt;BigDecimal&gt;"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="457"/>
                <declaration name="tmpColDim" type="int" line="458"/>
                <declaration name="tmpLeftRow" type="BigDecimal[]" line="460"/>
                <declaration name="tmpVal" type="BigDecimal" line="461"/>
                <declaration name="tmpLL" type="boolean" line="463"/>
                <declaration name="tmpLU" type="boolean" line="464"/>
                <declaration name="tmpRL" type="boolean" line="465"/>
                <declaration name="tmpRU" type="boolean" line="466"/>
                <declaration name="tmpPrune" type="boolean" line="467"/>
                <declaration name="tmpFirst" type="int" line="468"/>
                <declaration name="tmpLimit" type="int" line="469"/>
                <scope line="471">
                    <scope line="473"/>
                    <scope line="477">
                        <scope line="478"/>
                        <scope line="483"/>
                    </scope>
                </scope>
            </method>
            <method name="invoke" type="void" line="492">
                <params>
                    <param name="product" type="ComplexNumber[]"/>
                    <param name="firstRow" type="int"/>
                    <param name="rowLimit" type="int"/>
                    <param name="left" type="Access1D&lt;ComplexNumber&gt;"/>
                    <param name="complexity" type="int"/>
                    <param name="right" type="Access1D&lt;ComplexNumber&gt;"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="494"/>
                <declaration name="tmpColDim" type="int" line="495"/>
                <declaration name="tmpLeftRow" type="ComplexNumber[]" line="497"/>
                <declaration name="tmpVal" type="ComplexNumber" line="498"/>
                <declaration name="tmpLL" type="boolean" line="500"/>
                <declaration name="tmpLU" type="boolean" line="501"/>
                <declaration name="tmpRL" type="boolean" line="502"/>
                <declaration name="tmpRU" type="boolean" line="503"/>
                <declaration name="tmpPrune" type="boolean" line="504"/>
                <declaration name="tmpFirst" type="int" line="505"/>
                <declaration name="tmpLimit" type="int" line="506"/>
                <scope line="508">
                    <scope line="510"/>
                    <scope line="514">
                        <scope line="515"/>
                        <scope line="520"/>
                    </scope>
                </scope>
            </method>
            <method name="invoke" type="void" line="528">
                <params>
                    <param name="product" type="double[]"/>
                    <param name="firstRow" type="int"/>
                    <param name="rowLimit" type="int"/>
                    <param name="left" type="Access1D&lt;?&gt;"/>
                    <param name="complexity" type="int"/>
                    <param name="right" type="Access1D&lt;?&gt;"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="530"/>
                <declaration name="tmpColDim" type="int" line="531"/>
                <declaration name="tmpLeftRow" type="double[]" line="533"/>
                <declaration name="tmpVal" type="double" line="534"/>
                <declaration name="tmpLL" type="boolean" line="536"/>
                <declaration name="tmpLU" type="boolean" line="537"/>
                <declaration name="tmpRL" type="boolean" line="538"/>
                <declaration name="tmpRU" type="boolean" line="539"/>
                <declaration name="tmpPrune" type="boolean" line="540"/>
                <declaration name="tmpFirst" type="int" line="541"/>
                <declaration name="tmpLimit" type="int" line="542"/>
                <scope line="544">
                    <scope line="546"/>
                    <scope line="550">
                        <scope line="551"/>
                        <scope line="556"/>
                    </scope>
                </scope>
            </method>
            <method name="MultiplyBoth" type="constructor" line="564"/>
        </class>
    </source>