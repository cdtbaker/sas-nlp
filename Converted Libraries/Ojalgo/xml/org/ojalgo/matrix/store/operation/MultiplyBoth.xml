<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.store.operation">
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.concurrent.DivideAndConquer"/>
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.BigFunction"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.store.BigDenseStore.BigMultiplyBoth"/>
        <import package="org.ojalgo.matrix.store.ComplexDenseStore.ComplexMultiplyBoth"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore.PrimitiveMultiplyBoth"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <class name="MultiplyBoth" line="37">
            <extends class="MatrixOperation"/>
            <declaration name="THRESHOLD" type="int" line="39"/>
            <declaration name="BIG" type="BigMultiplyBoth" line="41"/>
            <anonymous_class line="41">
                <method name="invoke" type="void" line="43">
                    <params>
                        <param name="product" type="BigDecimal[]"/>
                        <param name="left" type="Access1D<BigDecimal>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<BigDecimal>"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="BIG_MT" type="BigMultiplyBoth" line="49"/>
            <anonymous_class line="49">
                <method name="invoke" type="void" line="51">
                    <params>
                        <param name="product" type="BigDecimal[]"/>
                        <param name="left" type="Access1D<BigDecimal>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<BigDecimal>"/>
                    </params>
                    <anonymous_class line="53">
                        <method name="conquer" type="void" line="56">
                            <params>
                                <param name="first" type="int"/>
                                <param name="limit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="53"/>
                </method>
            </anonymous_class>
            <declaration name="COMPLEX" type="ComplexMultiplyBoth" line="66"/>
            <anonymous_class line="66">
                <method name="invoke" type="void" line="68">
                    <params>
                        <param name="product" type="ComplexNumber[]"/>
                        <param name="left" type="Access1D<ComplexNumber>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<ComplexNumber>"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="COMPLEX_MT" type="ComplexMultiplyBoth" line="74"/>
            <anonymous_class line="74">
                <method name="invoke" type="void" line="76">
                    <params>
                        <param name="product" type="ComplexNumber[]"/>
                        <param name="left" type="Access1D<ComplexNumber>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<ComplexNumber>"/>
                    </params>
                    <anonymous_class line="78">
                        <method name="conquer" type="void" line="81">
                            <params>
                                <param name="first" type="int"/>
                                <param name="limit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="78"/>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE" type="PrimitiveMultiplyBoth" line="91"/>
            <anonymous_class line="91">
                <method name="invoke" type="void" line="93">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D<?>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<?>"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_1X1" type="PrimitiveMultiplyBoth" line="99"/>
            <anonymous_class line="99">
                <method name="invoke" type="void" line="101">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D<?>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<?>"/>
                    </params>
                    <comment line="105">
                        The number of rows in the product- and left-matrix.                        
                    </comment>
                    <declaration name="tmp00" type="double" line="103"/>
                    <declaration name="tmpLeftStruct" type="long" line="105"/>
                    <scope line="107"/>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_2X2" type="PrimitiveMultiplyBoth" line="116"/>
            <anonymous_class line="116">
                <method name="invoke" type="void" line="118">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D<?>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<?>"/>
                    </params>
                    <comment line="125">
                        The number of rows in the product- and left-matrix.                        
                    </comment>
                    <declaration name="tmp00" type="double" line="120"/>
                    <declaration name="tmp10" type="double" line="121"/>
                    <declaration name="tmp01" type="double" line="122"/>
                    <declaration name="tmp11" type="double" line="123"/>
                    <declaration name="tmpLeftStruct" type="long" line="125"/>
                    <declaration name="tmpIndex" type="long" line="127"/>
                    <scope line="128">
                        <declaration name="tmpLeft0" type="double" line="131"/>
                        <declaration name="tmpLeft1" type="double" line="133"/>
                        <declaration name="tmpRight0" type="double" line="135"/>
                        <declaration name="tmpRight1" type="double" line="137"/>
                    </scope>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_3X3" type="PrimitiveMultiplyBoth" line="153"/>
            <anonymous_class line="153">
                <method name="invoke" type="void" line="155">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D<?>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<?>"/>
                    </params>
                    <comment line="167">
                        The number of rows in the product- and left-matrix.                        
                    </comment>
                    <declaration name="tmp00" type="double" line="157"/>
                    <declaration name="tmp10" type="double" line="158"/>
                    <declaration name="tmp20" type="double" line="159"/>
                    <declaration name="tmp01" type="double" line="160"/>
                    <declaration name="tmp11" type="double" line="161"/>
                    <declaration name="tmp21" type="double" line="162"/>
                    <declaration name="tmp02" type="double" line="163"/>
                    <declaration name="tmp12" type="double" line="164"/>
                    <declaration name="tmp22" type="double" line="165"/>
                    <declaration name="tmpLeftStruct" type="long" line="167"/>
                    <declaration name="tmpIndex" type="long" line="169"/>
                    <scope line="170">
                        <declaration name="tmpLeft0" type="double" line="173"/>
                        <declaration name="tmpLeft1" type="double" line="175"/>
                        <declaration name="tmpLeft2" type="double" line="177"/>
                        <declaration name="tmpRight0" type="double" line="179"/>
                        <declaration name="tmpRight1" type="double" line="181"/>
                        <declaration name="tmpRight2" type="double" line="183"/>
                    </scope>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_4X4" type="PrimitiveMultiplyBoth" line="209"/>
            <anonymous_class line="209">
                <method name="invoke" type="void" line="211">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D<?>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<?>"/>
                    </params>
                    <comment line="230">
                        The number of rows in the product- and left-matrix.                        
                    </comment>
                    <declaration name="tmp00" type="double" line="213"/>
                    <declaration name="tmp10" type="double" line="214"/>
                    <declaration name="tmp20" type="double" line="215"/>
                    <declaration name="tmp30" type="double" line="216"/>
                    <declaration name="tmp01" type="double" line="217"/>
                    <declaration name="tmp11" type="double" line="218"/>
                    <declaration name="tmp21" type="double" line="219"/>
                    <declaration name="tmp31" type="double" line="220"/>
                    <declaration name="tmp02" type="double" line="221"/>
                    <declaration name="tmp12" type="double" line="222"/>
                    <declaration name="tmp22" type="double" line="223"/>
                    <declaration name="tmp32" type="double" line="224"/>
                    <declaration name="tmp03" type="double" line="225"/>
                    <declaration name="tmp13" type="double" line="226"/>
                    <declaration name="tmp23" type="double" line="227"/>
                    <declaration name="tmp33" type="double" line="228"/>
                    <declaration name="tmpLeftStruct" type="long" line="230"/>
                    <declaration name="tmpIndex" type="long" line="232"/>
                    <scope line="233">
                        <declaration name="tmpLeft0" type="double" line="236"/>
                        <declaration name="tmpLeft1" type="double" line="238"/>
                        <declaration name="tmpLeft2" type="double" line="240"/>
                        <declaration name="tmpLeft3" type="double" line="242"/>
                        <declaration name="tmpRight0" type="double" line="244"/>
                        <declaration name="tmpRight1" type="double" line="246"/>
                        <declaration name="tmpRight2" type="double" line="248"/>
                        <declaration name="tmpRight3" type="double" line="250"/>
                    </scope>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_5X5" type="PrimitiveMultiplyBoth" line="290"/>
            <anonymous_class line="290">
                <method name="invoke" type="void" line="292">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D<?>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<?>"/>
                    </params>
                    <comment line="320">
                        The number of rows in the product- and left-matrix.                        
                    </comment>
                    <declaration name="tmp00" type="double" line="294"/>
                    <declaration name="tmp10" type="double" line="295"/>
                    <declaration name="tmp20" type="double" line="296"/>
                    <declaration name="tmp30" type="double" line="297"/>
                    <declaration name="tmp40" type="double" line="298"/>
                    <declaration name="tmp01" type="double" line="299"/>
                    <declaration name="tmp11" type="double" line="300"/>
                    <declaration name="tmp21" type="double" line="301"/>
                    <declaration name="tmp31" type="double" line="302"/>
                    <declaration name="tmp41" type="double" line="303"/>
                    <declaration name="tmp02" type="double" line="304"/>
                    <declaration name="tmp12" type="double" line="305"/>
                    <declaration name="tmp22" type="double" line="306"/>
                    <declaration name="tmp32" type="double" line="307"/>
                    <declaration name="tmp42" type="double" line="308"/>
                    <declaration name="tmp03" type="double" line="309"/>
                    <declaration name="tmp13" type="double" line="310"/>
                    <declaration name="tmp23" type="double" line="311"/>
                    <declaration name="tmp33" type="double" line="312"/>
                    <declaration name="tmp43" type="double" line="313"/>
                    <declaration name="tmp04" type="double" line="314"/>
                    <declaration name="tmp14" type="double" line="315"/>
                    <declaration name="tmp24" type="double" line="316"/>
                    <declaration name="tmp34" type="double" line="317"/>
                    <declaration name="tmp44" type="double" line="318"/>
                    <declaration name="tmpLeftStruct" type="long" line="320"/>
                    <declaration name="tmpIndex" type="long" line="322"/>
                    <scope line="323">
                        <declaration name="tmpLeft0" type="double" line="326"/>
                        <declaration name="tmpLeft1" type="double" line="328"/>
                        <declaration name="tmpLeft2" type="double" line="330"/>
                        <declaration name="tmpLeft3" type="double" line="332"/>
                        <declaration name="tmpLeft4" type="double" line="334"/>
                        <declaration name="tmpRight0" type="double" line="336"/>
                        <declaration name="tmpRight1" type="double" line="338"/>
                        <declaration name="tmpRight2" type="double" line="340"/>
                        <declaration name="tmpRight3" type="double" line="342"/>
                        <declaration name="tmpRight4" type="double" line="344"/>
                    </scope>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_MT" type="PrimitiveMultiplyBoth" line="402"/>
            <anonymous_class line="402">
                <method name="invoke" type="void" line="404">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D<?>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<?>"/>
                    </params>
                    <anonymous_class line="406">
                        <method name="conquer" type="void" line="409">
                            <params>
                                <param name="first" type="int"/>
                                <param name="limit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="406"/>
                </method>
            </anonymous_class>
            <method name="getBig" type="BigMultiplyBoth" line="419">
                <params>
                    <param name="rows" type="long"/>
                    <param name="columns" type="long"/>
                </params>
                <scope line="420"/>
                <scope line="422"/>
            </method>
            <method name="getComplex" type="ComplexMultiplyBoth" line="427">
                <params>
                    <param name="rows" type="long"/>
                    <param name="columns" type="long"/>
                </params>
                <scope line="428"/>
                <scope line="430"/>
            </method>
            <method name="getPrimitive" type="PrimitiveMultiplyBoth" line="435">
                <params>
                    <param name="rows" type="long"/>
                    <param name="columns" type="long"/>
                </params>
                <scope line="436"/>
                <scope line="438"/>
                <scope line="440"/>
                <scope line="442"/>
                <scope line="444"/>
                <scope line="446"/>
                <scope line="448"/>
            </method>
            <method name="invoke" type="void" line="454">
                <params>
                    <param name="product" type="BigDecimal[]"/>
                    <param name="firstRow" type="int"/>
                    <param name="rowLimit" type="int"/>
                    <param name="left" type="Access1D<BigDecimal>"/>
                    <param name="complexity" type="int"/>
                    <param name="right" type="Access1D<BigDecimal>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="456"/>
                <declaration name="tmpColDim" type="int" line="457"/>
                <declaration name="tmpLeftRow" type="BigDecimal[]" line="459"/>
                <declaration name="tmpVal" type="BigDecimal" line="460"/>
                <declaration name="tmpLL" type="boolean" line="462"/>
                <declaration name="tmpLU" type="boolean" line="463"/>
                <declaration name="tmpRL" type="boolean" line="464"/>
                <declaration name="tmpRU" type="boolean" line="465"/>
                <declaration name="tmpPrune" type="boolean" line="466"/>
                <declaration name="tmpFirst" type="int" line="467"/>
                <declaration name="tmpLimit" type="int" line="468"/>
                <scope line="470">
                    <scope line="472"/>
                    <scope line="476">
                        <scope line="477"/>
                        <scope line="482"/>
                    </scope>
                </scope>
            </method>
            <method name="invoke" type="void" line="491">
                <params>
                    <param name="product" type="ComplexNumber[]"/>
                    <param name="firstRow" type="int"/>
                    <param name="rowLimit" type="int"/>
                    <param name="left" type="Access1D<ComplexNumber>"/>
                    <param name="complexity" type="int"/>
                    <param name="right" type="Access1D<ComplexNumber>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="493"/>
                <declaration name="tmpColDim" type="int" line="494"/>
                <declaration name="tmpLeftRow" type="ComplexNumber[]" line="496"/>
                <declaration name="tmpVal" type="ComplexNumber" line="497"/>
                <declaration name="tmpLL" type="boolean" line="499"/>
                <declaration name="tmpLU" type="boolean" line="500"/>
                <declaration name="tmpRL" type="boolean" line="501"/>
                <declaration name="tmpRU" type="boolean" line="502"/>
                <declaration name="tmpPrune" type="boolean" line="503"/>
                <declaration name="tmpFirst" type="int" line="504"/>
                <declaration name="tmpLimit" type="int" line="505"/>
                <scope line="507">
                    <scope line="509"/>
                    <scope line="513">
                        <scope line="514"/>
                        <scope line="519"/>
                    </scope>
                </scope>
            </method>
            <method name="invoke" type="void" line="527">
                <params>
                    <param name="product" type="double[]"/>
                    <param name="firstRow" type="int"/>
                    <param name="rowLimit" type="int"/>
                    <param name="left" type="Access1D<?>"/>
                    <param name="complexity" type="int"/>
                    <param name="right" type="Access1D<?>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="529"/>
                <declaration name="tmpColDim" type="int" line="530"/>
                <declaration name="tmpLeftRow" type="double[]" line="532"/>
                <declaration name="tmpVal" type="double" line="533"/>
                <declaration name="tmpLL" type="boolean" line="535"/>
                <declaration name="tmpLU" type="boolean" line="536"/>
                <declaration name="tmpRL" type="boolean" line="537"/>
                <declaration name="tmpRU" type="boolean" line="538"/>
                <declaration name="tmpPrune" type="boolean" line="539"/>
                <declaration name="tmpFirst" type="int" line="540"/>
                <declaration name="tmpLimit" type="int" line="541"/>
                <scope line="543">
                    <scope line="545"/>
                    <scope line="549">
                        <scope line="550"/>
                        <scope line="555"/>
                    </scope>
                </scope>
            </method>
            <method name="MultiplyBoth" type="constructor" line="563"/>
        </class>
    </source>