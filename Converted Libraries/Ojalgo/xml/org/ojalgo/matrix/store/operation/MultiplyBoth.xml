<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.store.operation">
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.concurrent.DivideAndConquer"/>
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.BigFunction"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.store.BigDenseStore.BigMultiplyBoth"/>
        <import package="org.ojalgo.matrix.store.ComplexDenseStore.ComplexMultiplyBoth"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore.PrimitiveMultiplyBoth"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <class name="MultiplyBoth" line="13">
            <extends class="MatrixOperation"/>
            <declaration name="THRESHOLD" type="int" line="14"/>
            <declaration name="BIG" type="BigMultiplyBoth" line="15"/>
            <anonymous_class line="15">
                <method name="invoke" type="void" line="16">
                    <params>
                        <param name="product" type="BigDecimal[]"/>
                        <param name="left" type="Access1D<BigDecimal>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<BigDecimal>"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="BIG_MT" type="BigMultiplyBoth" line="21"/>
            <anonymous_class line="21">
                <method name="invoke" type="void" line="22">
                    <params>
                        <param name="product" type="BigDecimal[]"/>
                        <param name="left" type="Access1D<BigDecimal>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<BigDecimal>"/>
                    </params>
                    <anonymous_class line="23">
                        <method name="conquer" type="void" line="24">
                            <params>
                                <param name="first" type="int"/>
                                <param name="limit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="23"/>
                </method>
            </anonymous_class>
            <declaration name="COMPLEX" type="ComplexMultiplyBoth" line="33"/>
            <anonymous_class line="33">
                <method name="invoke" type="void" line="34">
                    <params>
                        <param name="product" type="ComplexNumber[]"/>
                        <param name="left" type="Access1D<ComplexNumber>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<ComplexNumber>"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="COMPLEX_MT" type="ComplexMultiplyBoth" line="39"/>
            <anonymous_class line="39">
                <method name="invoke" type="void" line="40">
                    <params>
                        <param name="product" type="ComplexNumber[]"/>
                        <param name="left" type="Access1D<ComplexNumber>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<ComplexNumber>"/>
                    </params>
                    <anonymous_class line="41">
                        <method name="conquer" type="void" line="42">
                            <params>
                                <param name="first" type="int"/>
                                <param name="limit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="41"/>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE" type="PrimitiveMultiplyBoth" line="51"/>
            <anonymous_class line="51">
                <method name="invoke" type="void" line="52">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D<?>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<?>"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_1X1" type="PrimitiveMultiplyBoth" line="57"/>
            <anonymous_class line="57">
                <method name="invoke" type="void" line="58">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D<?>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmp00" type="double" line="59"/>
                    <declaration name="tmpLeftStruct" type="long" line="60"/>
                    <scope line="61"/>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_2X2" type="PrimitiveMultiplyBoth" line="68"/>
            <anonymous_class line="68">
                <method name="invoke" type="void" line="69">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D<?>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmp00" type="double" line="70"/>
                    <declaration name="tmp10" type="double" line="71"/>
                    <declaration name="tmp01" type="double" line="72"/>
                    <declaration name="tmp11" type="double" line="73"/>
                    <declaration name="tmpLeftStruct" type="long" line="74"/>
                    <declaration name="tmpIndex" type="long" line="75"/>
                    <scope line="76">
                        <declaration name="tmpLeft0" type="double" line="78"/>
                        <declaration name="tmpLeft1" type="double" line="80"/>
                        <declaration name="tmpRight0" type="double" line="82"/>
                        <declaration name="tmpRight1" type="double" line="84"/>
                    </scope>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_3X3" type="PrimitiveMultiplyBoth" line="97"/>
            <anonymous_class line="97">
                <method name="invoke" type="void" line="98">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D<?>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmp00" type="double" line="99"/>
                    <declaration name="tmp10" type="double" line="100"/>
                    <declaration name="tmp20" type="double" line="101"/>
                    <declaration name="tmp01" type="double" line="102"/>
                    <declaration name="tmp11" type="double" line="103"/>
                    <declaration name="tmp21" type="double" line="104"/>
                    <declaration name="tmp02" type="double" line="105"/>
                    <declaration name="tmp12" type="double" line="106"/>
                    <declaration name="tmp22" type="double" line="107"/>
                    <declaration name="tmpLeftStruct" type="long" line="108"/>
                    <declaration name="tmpIndex" type="long" line="109"/>
                    <scope line="110">
                        <declaration name="tmpLeft0" type="double" line="112"/>
                        <declaration name="tmpLeft1" type="double" line="114"/>
                        <declaration name="tmpLeft2" type="double" line="116"/>
                        <declaration name="tmpRight0" type="double" line="118"/>
                        <declaration name="tmpRight1" type="double" line="120"/>
                        <declaration name="tmpRight2" type="double" line="122"/>
                    </scope>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_4X4" type="PrimitiveMultiplyBoth" line="145"/>
            <anonymous_class line="145">
                <method name="invoke" type="void" line="146">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D<?>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmp00" type="double" line="147"/>
                    <declaration name="tmp10" type="double" line="148"/>
                    <declaration name="tmp20" type="double" line="149"/>
                    <declaration name="tmp30" type="double" line="150"/>
                    <declaration name="tmp01" type="double" line="151"/>
                    <declaration name="tmp11" type="double" line="152"/>
                    <declaration name="tmp21" type="double" line="153"/>
                    <declaration name="tmp31" type="double" line="154"/>
                    <declaration name="tmp02" type="double" line="155"/>
                    <declaration name="tmp12" type="double" line="156"/>
                    <declaration name="tmp22" type="double" line="157"/>
                    <declaration name="tmp32" type="double" line="158"/>
                    <declaration name="tmp03" type="double" line="159"/>
                    <declaration name="tmp13" type="double" line="160"/>
                    <declaration name="tmp23" type="double" line="161"/>
                    <declaration name="tmp33" type="double" line="162"/>
                    <declaration name="tmpLeftStruct" type="long" line="163"/>
                    <declaration name="tmpIndex" type="long" line="164"/>
                    <scope line="165">
                        <declaration name="tmpLeft0" type="double" line="167"/>
                        <declaration name="tmpLeft1" type="double" line="169"/>
                        <declaration name="tmpLeft2" type="double" line="171"/>
                        <declaration name="tmpLeft3" type="double" line="173"/>
                        <declaration name="tmpRight0" type="double" line="175"/>
                        <declaration name="tmpRight1" type="double" line="177"/>
                        <declaration name="tmpRight2" type="double" line="179"/>
                        <declaration name="tmpRight3" type="double" line="181"/>
                    </scope>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_5X5" type="PrimitiveMultiplyBoth" line="218"/>
            <anonymous_class line="218">
                <method name="invoke" type="void" line="219">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D<?>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmp00" type="double" line="220"/>
                    <declaration name="tmp10" type="double" line="221"/>
                    <declaration name="tmp20" type="double" line="222"/>
                    <declaration name="tmp30" type="double" line="223"/>
                    <declaration name="tmp40" type="double" line="224"/>
                    <declaration name="tmp01" type="double" line="225"/>
                    <declaration name="tmp11" type="double" line="226"/>
                    <declaration name="tmp21" type="double" line="227"/>
                    <declaration name="tmp31" type="double" line="228"/>
                    <declaration name="tmp41" type="double" line="229"/>
                    <declaration name="tmp02" type="double" line="230"/>
                    <declaration name="tmp12" type="double" line="231"/>
                    <declaration name="tmp22" type="double" line="232"/>
                    <declaration name="tmp32" type="double" line="233"/>
                    <declaration name="tmp42" type="double" line="234"/>
                    <declaration name="tmp03" type="double" line="235"/>
                    <declaration name="tmp13" type="double" line="236"/>
                    <declaration name="tmp23" type="double" line="237"/>
                    <declaration name="tmp33" type="double" line="238"/>
                    <declaration name="tmp43" type="double" line="239"/>
                    <declaration name="tmp04" type="double" line="240"/>
                    <declaration name="tmp14" type="double" line="241"/>
                    <declaration name="tmp24" type="double" line="242"/>
                    <declaration name="tmp34" type="double" line="243"/>
                    <declaration name="tmp44" type="double" line="244"/>
                    <declaration name="tmpLeftStruct" type="long" line="245"/>
                    <declaration name="tmpIndex" type="long" line="246"/>
                    <scope line="247">
                        <declaration name="tmpLeft0" type="double" line="249"/>
                        <declaration name="tmpLeft1" type="double" line="251"/>
                        <declaration name="tmpLeft2" type="double" line="253"/>
                        <declaration name="tmpLeft3" type="double" line="255"/>
                        <declaration name="tmpLeft4" type="double" line="257"/>
                        <declaration name="tmpRight0" type="double" line="259"/>
                        <declaration name="tmpRight1" type="double" line="261"/>
                        <declaration name="tmpRight2" type="double" line="263"/>
                        <declaration name="tmpRight3" type="double" line="265"/>
                        <declaration name="tmpRight4" type="double" line="267"/>
                    </scope>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE_MT" type="PrimitiveMultiplyBoth" line="322"/>
            <anonymous_class line="322">
                <method name="invoke" type="void" line="323">
                    <params>
                        <param name="product" type="double[]"/>
                        <param name="left" type="Access1D<?>"/>
                        <param name="complexity" type="int"/>
                        <param name="right" type="Access1D<?>"/>
                    </params>
                    <anonymous_class line="324">
                        <method name="conquer" type="void" line="325">
                            <params>
                                <param name="first" type="int"/>
                                <param name="limit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="324"/>
                </method>
            </anonymous_class>
            <method name="getBig" type="BigMultiplyBoth" line="334">
                <params>
                    <param name="rows" type="long"/>
                    <param name="columns" type="long"/>
                </params>
                <scope line="335"/>
                <scope line="338"/>
            </method>
            <method name="getComplex" type="ComplexMultiplyBoth" line="342">
                <params>
                    <param name="rows" type="long"/>
                    <param name="columns" type="long"/>
                </params>
                <scope line="343"/>
                <scope line="346"/>
            </method>
            <method name="getPrimitive" type="PrimitiveMultiplyBoth" line="350">
                <params>
                    <param name="rows" type="long"/>
                    <param name="columns" type="long"/>
                </params>
                <scope line="351"/>
                <scope line="354"/>
                <scope line="357"/>
                <scope line="360"/>
                <scope line="363"/>
                <scope line="366"/>
                <scope line="369"/>
            </method>
            <method name="invoke" type="void" line="373">
                <params>
                    <param name="product" type="BigDecimal[]"/>
                    <param name="firstRow" type="int"/>
                    <param name="rowLimit" type="int"/>
                    <param name="left" type="Access1D<BigDecimal>"/>
                    <param name="complexity" type="int"/>
                    <param name="right" type="Access1D<BigDecimal>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="374"/>
                <declaration name="tmpColDim" type="int" line="375"/>
                <declaration name="tmpLeftRow" type="BigDecimal[]" line="376"/>
                <declaration name="tmpVal" type="BigDecimal" line="377"/>
                <declaration name="tmpLL" type="boolean" line="378"/>
                <declaration name="tmpLU" type="boolean" line="379"/>
                <declaration name="tmpRL" type="boolean" line="380"/>
                <declaration name="tmpRU" type="boolean" line="381"/>
                <declaration name="tmpPrune" type="boolean" line="382"/>
                <declaration name="tmpFirst" type="int" line="383"/>
                <declaration name="tmpLimit" type="int" line="384"/>
                <scope line="385">
                    <scope line="386"/>
                    <scope line="389">
                        <scope line="390"/>
                        <scope line="395"/>
                    </scope>
                </scope>
            </method>
            <method name="invoke" type="void" line="402">
                <params>
                    <param name="product" type="ComplexNumber[]"/>
                    <param name="firstRow" type="int"/>
                    <param name="rowLimit" type="int"/>
                    <param name="left" type="Access1D<ComplexNumber>"/>
                    <param name="complexity" type="int"/>
                    <param name="right" type="Access1D<ComplexNumber>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="403"/>
                <declaration name="tmpColDim" type="int" line="404"/>
                <declaration name="tmpLeftRow" type="ComplexNumber[]" line="405"/>
                <declaration name="tmpVal" type="ComplexNumber" line="406"/>
                <declaration name="tmpLL" type="boolean" line="407"/>
                <declaration name="tmpLU" type="boolean" line="408"/>
                <declaration name="tmpRL" type="boolean" line="409"/>
                <declaration name="tmpRU" type="boolean" line="410"/>
                <declaration name="tmpPrune" type="boolean" line="411"/>
                <declaration name="tmpFirst" type="int" line="412"/>
                <declaration name="tmpLimit" type="int" line="413"/>
                <scope line="414">
                    <scope line="415"/>
                    <scope line="418">
                        <scope line="419"/>
                        <scope line="424"/>
                    </scope>
                </scope>
            </method>
            <method name="invoke" type="void" line="431">
                <params>
                    <param name="product" type="double[]"/>
                    <param name="firstRow" type="int"/>
                    <param name="rowLimit" type="int"/>
                    <param name="left" type="Access1D<?>"/>
                    <param name="complexity" type="int"/>
                    <param name="right" type="Access1D<?>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="432"/>
                <declaration name="tmpColDim" type="int" line="433"/>
                <declaration name="tmpLeftRow" type="double[]" line="434"/>
                <declaration name="tmpVal" type="double" line="435"/>
                <declaration name="tmpLL" type="boolean" line="436"/>
                <declaration name="tmpLU" type="boolean" line="437"/>
                <declaration name="tmpRL" type="boolean" line="438"/>
                <declaration name="tmpRU" type="boolean" line="439"/>
                <declaration name="tmpPrune" type="boolean" line="440"/>
                <declaration name="tmpFirst" type="int" line="441"/>
                <declaration name="tmpLimit" type="int" line="442"/>
                <scope line="443">
                    <scope line="444"/>
                    <scope line="447">
                        <scope line="448"/>
                        <scope line="453"/>
                    </scope>
                </scope>
            </method>
            <method name="MultiplyBoth" type="constructor" line="460"/>
        </class>
    </source>