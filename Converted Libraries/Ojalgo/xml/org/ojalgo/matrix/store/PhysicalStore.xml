<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.store">
        <import package="java.io.Serializable"/>
        <import package="java.util.List"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.array.SimpleArray"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.FunctionSet"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.aggregator.AggregatorCollection"/>
        <import package="org.ojalgo.matrix.transformation.Householder"/>
        <import package="org.ojalgo.matrix.transformation.Rotation"/>
        <import package="org.ojalgo.random.RandomNumber"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <interface name="PhysicalStore">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <implements interface="MatrixStore">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="Access2D.Elements"/>
            <implements interface="Access2D.Fillable">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="Access2D.Modifiable">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="Access2D.Visitable">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <javadoc line="15">
                &lt;p&gt;
                  PhysicalStore:s, as opposed to MatrixStore:s, are mutable. The vast majorty of the methods defined here return void
                  and none return {@linkplain PhysicalStore} or {@linkplain MatrixStore}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This interface and its implementations are central to ojAlgo.
                  &lt;/p&gt;                
                <author>
                    apete                    
                </author>
            </javadoc>
            <interface name="Factory">
                <type_params>
                    <type_param name="N"/>
                    <type_param name="I"/>
                </type_params>
                <implements interface="Access2D.Factory">
                    <type_params>
                        <type_param name="I"/>
                    </type_params>
                </implements>
                <implements interface="Serializable"/>
                <method name="aggregator" type="AggregatorCollection<N>" line="27"/>
                <method name="conjugate" type="I" line="28"/>
                <method name="function" type="FunctionSet<N>" line="29"/>
                <method name="getAggregatorCollection" type="AggregatorCollection<N>" line="30"/>
                <javadoc line="30">
                    @deprecated v35 Use {@link #aggregator()} instead                    
                </javadoc>
                <method name="getFunctionSet" type="FunctionSet<N>" line="34"/>
                <javadoc line="34">
                    @deprecated v35 Use {@link #function()} instead                    
                </javadoc>
                <method name="getNumber" type="N" line="38"/>
                <javadoc line="38">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getNumber" type="N" line="42"/>
                <javadoc line="42">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getStaticOne" type="Scalar<N>" line="46"/>
                <javadoc line="46">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getStaticZero" type="Scalar<N>" line="50"/>
                <javadoc line="50">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="makeArray" type="SimpleArray<N>" line="54"/>
                <method name="makeHouseholder" type="Householder<N>" line="55"/>
                <method name="makeRotation" type="Rotation<N>" line="56"/>
                <method name="makeRotation" type="Rotation<N>" line="57"/>
                <method name="scalar" type="Scalar.Factory<N>" line="58"/>
                <method name="toScalar" type="Scalar<N>" line="59"/>
                <javadoc line="59">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="toScalar" type="Scalar<N>" line="63"/>
                <javadoc line="63">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="transpose" type="I" line="67"/>
            </interface>
            <declaration name="PRIMITIVE" type="Factory&lt;Double,PhysicalStore&lt;Double&gt;&gt;" line="69"/>
            <anonymous_class line="69">
                <method name="aggregator" type="AggregatorCollection<Double>" line="70"/>
                <method name="columns" type="PhysicalStore<Double>" line="73">
                    <params>
                        <param name="source" type="Access1D<?>"/>
                    </params>
                </method>
                <method name="columns" type="PhysicalStore<Double>" line="76">
                    <params>
                        <param name="source" type="double[]"/>
                    </params>
                </method>
                <method name="columns" type="PhysicalStore<Double>" line="79">
                    <params>
                        <param name="source" type="List<? extends Number>"/>
                    </params>
                </method>
                <method name="columns" type="PhysicalStore<Double>" line="82">
                    <params>
                        <param name="source" type="Number[]"/>
                    </params>
                </method>
                <method name="conjugate" type="PhysicalStore<Double>" line="85">
                    <params>
                        <param name="source" type="Access2D<?>"/>
                    </params>
                </method>
                <method name="copy" type="PhysicalStore<Double>" line="88">
                    <params>
                        <param name="source" type="Access2D<?>"/>
                    </params>
                </method>
                <method name="function" type="FunctionSet<Double>" line="91"/>
                <method name="getAggregatorCollection" type="AggregatorCollection<Double>" line="94"/>
                <method name="getFunctionSet" type="FunctionSet<Double>" line="97"/>
                <method name="getNumber" type="Double" line="100">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="getNumber" type="Double" line="103">
                    <params>
                        <param name="value" type="Number"/>
                    </params>
                </method>
                <method name="getStaticOne" type="Scalar<Double>" line="106"/>
                <method name="getStaticZero" type="Scalar<Double>" line="109"/>
                <method name="makeArray" type="SimpleArray<Double>" line="112">
                    <params>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <method name="makeEye" type="PhysicalStore<Double>" line="115">
                    <params>
                        <param name="rows" type="long"/>
                        <param name="columns" type="long"/>
                    </params>
                </method>
                <method name="makeHouseholder" type="Householder<Double>" line="118">
                    <params>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <method name="makeRandom" type="PhysicalStore<Double>" line="121">
                    <params>
                        <param name="rows" type="long"/>
                        <param name="columns" type="long"/>
                        <param name="distribution" type="RandomNumber"/>
                    </params>
                </method>
                <method name="makeRotation" type="Rotation<Double>" line="124">
                    <params>
                        <param name="low" type="int"/>
                        <param name="high" type="int"/>
                        <param name="cos" type="double"/>
                        <param name="sin" type="double"/>
                    </params>
                </method>
                <method name="makeRotation" type="Rotation<Double>" line="127">
                    <params>
                        <param name="low" type="int"/>
                        <param name="high" type="int"/>
                        <param name="cos" type="Double"/>
                        <param name="sin" type="Double"/>
                    </params>
                </method>
                <method name="makeZero" type="PhysicalStore<Double>" line="130">
                    <params>
                        <param name="rows" type="long"/>
                        <param name="columns" type="long"/>
                    </params>
                </method>
                <method name="rows" type="PhysicalStore<Double>" line="133">
                    <params>
                        <param name="source" type="Access1D<?>"/>
                    </params>
                </method>
                <method name="rows" type="PhysicalStore<Double>" line="136">
                    <params>
                        <param name="source" type="double[]"/>
                    </params>
                </method>
                <method name="rows" type="PhysicalStore<Double>" line="139">
                    <params>
                        <param name="source" type="List<? extends Number>"/>
                    </params>
                </method>
                <method name="rows" type="PhysicalStore<Double>" line="142">
                    <params>
                        <param name="source" type="Number[]"/>
                    </params>
                </method>
                <method name="scalar" type="org.ojalgo.scalar.Scalar.Factory<Double>" line="145"/>
                <method name="toScalar" type="Scalar<Double>" line="148">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="toScalar" type="Scalar<Double>" line="151">
                    <params>
                        <param name="value" type="Number"/>
                    </params>
                </method>
                <method name="transpose" type="PhysicalStore<Double>" line="154">
                    <params>
                        <param name="source" type="Access2D<?>"/>
                    </params>
                </method>
            </anonymous_class>
            <method name="asList" type="List<N>" line="159"/>
            <javadoc line="159">
                @return The elements of the physical store as a fixed size (1 dimensional) list. The elements may be accessed
                  either row or colomn major.                
            </javadoc>
            <method name="caxpy" type="void" line="164"/>
            <javadoc line="164">
                &lt;p&gt;
                  &lt;b&gt;c&lt;/b&gt;olumn &lt;b&gt;a&lt;/b&gt;  &lt;b&gt;x&lt;/b&gt; &lt;b&gt;p&lt;/b&gt;lus &lt;b&gt;y&lt;/b&gt;
                  &lt;/p&gt;
                  [this(,aColY)] = aSclrA [this(,aColX)] + [this(,aColY)]                
                <deprecated>
                    v32 Let me know if you need this                    
                </deprecated>
            </javadoc>
            <method name="exchangeColumns" type="void" line="172"/>
            <method name="exchangeRows" type="void" line="173"/>
            <method name="fillByMultiplying" type="void" line="174"/>
            <method name="fillConjugated" type="void" line="175"/>
            <method name="fillMatching" type="void" line="176"/>
            <method name="fillMatching" type="void" line="177"/>
            <javadoc line="177">
                &lt;p&gt;
                  Will replace the elements of [this] with the results of element wise invocation of the input binary funtion:
                  &lt;/p&gt;
                  &lt;code&gt;this(i,j) = aFunc.invoke(aLeftArg(i,j),aRightArg(i,j))&lt;/code&gt;                
            </javadoc>
            <method name="fillMatching" type="void" line="184"/>
            <javadoc line="184">
                &lt;p&gt;
                  Will replace the elements of [this] with the results of element wise invocation of the input binary funtion:
                  &lt;/p&gt;
                  &lt;code&gt;this(i,j) = aFunc.invoke(aLeftArg(i,j),aRightArg))&lt;/code&gt;                
            </javadoc>
            <method name="fillMatching" type="void" line="191"/>
            <javadoc line="191">
                &lt;p&gt;
                  Will replace the elements of [this] with the results of element wise invocation of the input binary funtion:
                  &lt;/p&gt;
                  &lt;code&gt;this(i,j) = aFunc.invoke(aLeftArg,aRightArg(i,j))&lt;/code&gt;                
            </javadoc>
            <method name="fillTransposed" type="void" line="198"/>
            <method name="maxpy" type="void" line="199"/>
            <javadoc line="199">
                &lt;p&gt;
                  &lt;b&gt;m&lt;/b&gt;atrix &lt;b&gt;a&lt;/b&gt;  &lt;b&gt;x&lt;/b&gt; &lt;b&gt;p&lt;/b&gt;lus &lt;b&gt;y&lt;/b&gt;
                  &lt;/p&gt;
                  [this] = aSclrA [aMtrxX] + [this]                
                <deprecated>
                    v32 Let me know if you need this                    
                </deprecated>
            </javadoc>
            <method name="modifyOne" type="void" line="207"/>
            <method name="raxpy" type="void" line="208"/>
            <javadoc line="208">
                &lt;p&gt;
                  &lt;b&gt;r&lt;/b&gt;ow &lt;b&gt;a&lt;/b&gt;  &lt;b&gt;x&lt;/b&gt; &lt;b&gt;p&lt;/b&gt;lus &lt;b&gt;y&lt;/b&gt;
                  &lt;/p&gt;
                  [this(aRowY,)] = aSclrA [this(aRowX,)] + [this(aRowY,)]                
                <deprecated>
                    v32 Let me know if you need this                    
                </deprecated>
            </javadoc>
            <method name="transformLeft" type="void" line="216"/>
            <method name="transformLeft" type="void" line="217"/>
            <javadoc line="217">
                &lt;p&gt;
                  As in {@link MatrixStore#multiplyLeft(MatrixStore)} where the left/parameter matrix is a plane rotation.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Multiplying by a plane rotation from the left means that [this] gets two of its rows updated to new combinations
                  of those two (current) rows.
                  &lt;/p&gt;
                  &lt;p&gt;
                  There are two ways to transpose/invert a rotation. Either you negate the angle or you interchange the two indeces
                  that define the rotation plane.
                  &lt;/p&gt;                
                <see>
                    #transformRight(Rotation)                    
                </see>
            </javadoc>
            <method name="transformRight" type="void" line="232"/>
            <method name="transformRight" type="void" line="233"/>
            <javadoc line="233">
                &lt;p&gt;
                  As in {@link MatrixStore#multiplyRight(MatrixStore)} where the right/parameter matrix is a plane rotation.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Multiplying by a plane rotation from the right means that [this] gets two of its columns updated to new
                  combinations of those two (current) columns.
                  &lt;/p&gt;
                  &lt;p&gt;
                  There result is undefined if the two input indeces are the same (in which case the rotation plane is undefined).
                  &lt;/p&gt;                
                <see>
                    #transformLeft(Rotation)                    
                </see>
            </javadoc>
        </interface>
    </source>