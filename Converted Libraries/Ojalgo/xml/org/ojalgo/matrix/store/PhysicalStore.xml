<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.store">
        <import package="java.io.Serializable"/>
        <import package="java.util.List"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.array.BasicArray"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.FunctionSet"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.aggregator.AggregatorCollection"/>
        <import package="org.ojalgo.matrix.transformation.Householder"/>
        <import package="org.ojalgo.matrix.transformation.Rotation"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <interface name="PhysicalStore">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <implements interface="MatrixStore">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="Access2D.Fillable">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="Access2D.Modifiable">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <javadoc line="38">
                &lt;p&gt;
                  PhysicalStore:s, as opposed to MatrixStore:s, are mutable. The vast majorty of the methods defined here return void
                  and none return {@linkplain PhysicalStore} or {@linkplain MatrixStore}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This interface and its implementations are central to ojAlgo.
                  &lt;/p&gt;                
                <author>
                    apete                    
                </author>
            </javadoc>
            <interface name="Factory">
                <type_params>
                    <type_param name="N"/>
                    <type_param name="I"/>
                </type_params>
                <implements interface="Access2D.Factory">
                    <type_params>
                        <type_param name="I"/>
                    </type_params>
                </implements>
                <implements interface="Serializable"/>
                <method name="aggregator" type="AggregatorCollection&lt;N&gt;" line="53"/>
                <method name="conjugate" type="I" line="55"/>
                <method name="function" type="FunctionSet&lt;N&gt;" line="57"/>
                <method name="makeArray" type="BasicArray&lt;N&gt;" line="59"/>
                <method name="makeHouseholder" type="Householder&lt;N&gt;" line="61"/>
                <method name="makeRotation" type="Rotation&lt;N&gt;" line="63"/>
                <method name="makeRotation" type="Rotation&lt;N&gt;" line="65"/>
                <method name="scalar" type="Scalar.Factory&lt;N&gt;" line="67"/>
                <method name="transpose" type="I" line="69"/>
            </interface>
            <method name="asList" type="List&lt;N&gt;" line="73"/>
            <javadoc line="73">
                @return The elements of the physical store as a fixed size (1 dimensional) list. The elements may be accessed
                  either row or colomn major.                
            </javadoc>
            <method name="caxpy" type="void" line="79"/>
            <javadoc line="79">
                &lt;p&gt;
                  &lt;b&gt;c&lt;/b&gt;olumn &lt;b&gt;a&lt;/b&gt;  &lt;b&gt;x&lt;/b&gt; &lt;b&gt;p&lt;/b&gt;lus &lt;b&gt;y&lt;/b&gt;
                  &lt;/p&gt;
                  [this(,aColY)] = aSclrA [this(,aColX)] + [this(,aColY)]                
                <deprecated>
                    v32 Let me know if you need this                    
                </deprecated>
            </javadoc>
            <method name="exchangeColumns" type="void" line="90"/>
            <method name="exchangeRows" type="void" line="92"/>
            <method name="fillByMultiplying" type="void" line="94"/>
            <method name="fillConjugated" type="void" line="96"/>
            <method name="fillMatching" type="void" line="98"/>
            <method name="fillMatching" type="void" line="100"/>
            <javadoc line="100">
                &lt;p&gt;
                  Will replace the elements of [this] with the results of element wise invocation of the input binary funtion:
                  &lt;/p&gt;
                  &lt;code&gt;this(i,j) = aFunc.invoke(aLeftArg(i,j),aRightArg(i,j))&lt;/code&gt;                
            </javadoc>
            <method name="fillMatching" type="void" line="108"/>
            <javadoc line="108">
                &lt;p&gt;
                  Will replace the elements of [this] with the results of element wise invocation of the input binary funtion:
                  &lt;/p&gt;
                  &lt;code&gt;this(i,j) = aFunc.invoke(aLeftArg(i,j),aRightArg))&lt;/code&gt;                
            </javadoc>
            <method name="fillMatching" type="void" line="116"/>
            <javadoc line="116">
                &lt;p&gt;
                  Will replace the elements of [this] with the results of element wise invocation of the input binary funtion:
                  &lt;/p&gt;
                  &lt;code&gt;this(i,j) = aFunc.invoke(aLeftArg,aRightArg(i,j))&lt;/code&gt;                
            </javadoc>
            <method name="fillTransposed" type="void" line="124"/>
            <method name="maxpy" type="void" line="126"/>
            <javadoc line="126">
                &lt;p&gt;
                  &lt;b&gt;m&lt;/b&gt;atrix &lt;b&gt;a&lt;/b&gt;  &lt;b&gt;x&lt;/b&gt; &lt;b&gt;p&lt;/b&gt;lus &lt;b&gt;y&lt;/b&gt;
                  &lt;/p&gt;
                  [this] = aSclrA [aMtrxX] + [this]                
                <deprecated>
                    v32 Let me know if you need this                    
                </deprecated>
            </javadoc>
            <method name="modifyOne" type="void" line="137"/>
            <method name="raxpy" type="void" line="139"/>
            <javadoc line="139">
                &lt;p&gt;
                  &lt;b&gt;r&lt;/b&gt;ow &lt;b&gt;a&lt;/b&gt;  &lt;b&gt;x&lt;/b&gt; &lt;b&gt;p&lt;/b&gt;lus &lt;b&gt;y&lt;/b&gt;
                  &lt;/p&gt;
                  [this(aRowY,)] = aSclrA [this(aRowX,)] + [this(aRowY,)]                
                <deprecated>
                    v32 Let me know if you need this                    
                </deprecated>
            </javadoc>
            <method name="transformLeft" type="void" line="150"/>
            <method name="transformLeft" type="void" line="152"/>
            <javadoc line="152">
                &lt;p&gt;
                  As in {@link MatrixStore#multiplyLeft(MatrixStore)} where the left/parameter matrix is a plane rotation.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Multiplying by a plane rotation from the left means that [this] gets two of its rows updated to new combinations
                  of those two (current) rows.
                  &lt;/p&gt;
                  &lt;p&gt;
                  There are two ways to transpose/invert a rotation. Either you negate the angle or you interchange the two indeces
                  that define the rotation plane.
                  &lt;/p&gt;                
                <see>
                    #transformRight(Rotation)                    
                </see>
            </javadoc>
            <method name="transformRight" type="void" line="169"/>
            <method name="transformRight" type="void" line="171"/>
            <javadoc line="171">
                &lt;p&gt;
                  As in {@link MatrixStore#multiplyRight(MatrixStore)} where the right/parameter matrix is a plane rotation.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Multiplying by a plane rotation from the right means that [this] gets two of its columns updated to new
                  combinations of those two (current) columns.
                  &lt;/p&gt;
                  &lt;p&gt;
                  There result is undefined if the two input indeces are the same (in which case the rotation plane is undefined).
                  &lt;/p&gt;                
                <see>
                    #transformLeft(Rotation)                    
                </see>
            </javadoc>
        </interface>
    </source>