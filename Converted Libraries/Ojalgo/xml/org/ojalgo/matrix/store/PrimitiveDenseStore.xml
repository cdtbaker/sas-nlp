<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.store">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="java.util.List"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.access.AccessUtils"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.array.Array2D"/>
        <import package="org.ojalgo.array.PrimitiveArray"/>
        <import package="org.ojalgo.array.SimpleArray"/>
        <import package="org.ojalgo.concurrent.DivideAndConquer"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.FunctionSet"/>
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.VoidFunction"/>
        <import package="org.ojalgo.function.aggregator.Aggregator"/>
        <import package="org.ojalgo.function.aggregator.AggregatorCollection"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.function.aggregator.PrimitiveAggregator"/>
        <import package="org.ojalgo.machine.JavaType"/>
        <import package="org.ojalgo.machine.MemoryEstimator"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.decomposition.DecompositionStore"/>
        <import package="org.ojalgo.matrix.decomposition.LUDecomposition.Pivot"/>
        <import package="org.ojalgo.matrix.store.operation"/>
        <import package="org.ojalgo.matrix.transformation.Householder"/>
        <import package="org.ojalgo.matrix.transformation.Rotation"/>
        <import package="org.ojalgo.random.RandomNumber"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.PrimitiveScalar"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="PrimitiveDenseStore" line="61">
            <extends class="PrimitiveArray"/>
            <implements interface="PhysicalStore">
                <type_params>
                    <type_param name="Double"/>
                </type_params>
            </implements>
            <implements interface="DecompositionStore">
                <type_params>
                    <type_param name="Double"/>
                </type_params>
            </implements>
            <javadoc line="61">
                A {@linkplain Double} (actually double) implementation of {@linkplain PhysicalStore}.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <interface name="PrimitiveMultiplyBoth">
                <method name="invoke" type="void" line="70"/>
            </interface>
            <interface name="PrimitiveMultiplyLeft">
                <method name="invoke" type="void" line="76"/>
            </interface>
            <interface name="PrimitiveMultiplyRight">
                <method name="invoke" type="void" line="82"/>
            </interface>
            <declaration name="FACTORY" type="DecompositionStore.Factory&lt;Double,PrimitiveDenseStore&gt;" line="86"/>
            <anonymous_class line="86">
                <method name="aggregator" type="AggregatorCollection<Double>" line="88"/>
                <method name="columns" type="PrimitiveDenseStore" line="92">
                    <params>
                        <param name="source" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="94"/>
                    <declaration name="tmpColDim" type="int" line="95"/>
                    <declaration name="tmpData" type="double[]" line="97"/>
                    <declaration name="tmpColumn" type="Access1D&lt;?&gt;" line="99"/>
                    <scope line="100">
                        <scope line="102"/>
                    </scope>
                </method>
                <method name="columns" type="PrimitiveDenseStore" line="110">
                    <params>
                        <param name="source" type="double[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="112"/>
                    <declaration name="tmpColDim" type="int" line="113"/>
                    <declaration name="tmpData" type="double[]" line="115"/>
                    <declaration name="tmpColumn" type="double[]" line="117"/>
                    <scope line="118">
                        <scope line="120"/>
                    </scope>
                </method>
                <method name="columns" type="PrimitiveDenseStore" line="128">
                    <params>
                        <param name="source" type="List<? extends Number>"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="130"/>
                    <declaration name="tmpColDim" type="int" line="131"/>
                    <declaration name="tmpData" type="double[]" line="133"/>
                    <declaration name="tmpColumn" type="List&lt;? extends Number&gt;" line="135"/>
                    <scope line="136">
                        <scope line="138"/>
                    </scope>
                </method>
                <method name="columns" type="PrimitiveDenseStore" line="146">
                    <params>
                        <param name="source" type="Number[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="148"/>
                    <declaration name="tmpColDim" type="int" line="149"/>
                    <declaration name="tmpData" type="double[]" line="151"/>
                    <declaration name="tmpColumn" type="Number[]" line="153"/>
                    <scope line="154">
                        <scope line="156"/>
                    </scope>
                </method>
                <method name="conjugate" type="PrimitiveDenseStore" line="164">
                    <params>
                        <param name="source" type="Access2D<?>"/>
                    </params>
                </method>
                <method name="copy" type="PrimitiveDenseStore" line="168">
                    <params>
                        <param name="source" type="Access2D<?>"/>
                    </params>
                    <declaration name="retVal" type="PrimitiveDenseStore" line="170"/>
                </method>
                <method name="function" type="FunctionSet<Double>" line="177"/>
                <javadoc line="181">
                    @deprecated Use {@link #aggregator()} instead                    
                </javadoc>
                <method name="getAggregatorCollection" type="AggregatorCollection<Double>" line="185"/>
                <javadoc line="189">
                    @deprecated Use {@link #function()} instead                    
                </javadoc>
                <method name="getFunctionSet" type="FunctionSet<Double>" line="193"/>
                <javadoc line="197">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getNumber" type="Double" line="201">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <javadoc line="205">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getNumber" type="Double" line="209">
                    <params>
                        <param name="value" type="Number"/>
                    </params>
                </method>
                <javadoc line="213">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getStaticOne" type="Scalar<Double>" line="217"/>
                <javadoc line="221">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getStaticZero" type="Scalar<Double>" line="225"/>
                <method name="makeArray" type="SimpleArray.Primitive" line="229">
                    <params>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <method name="makeEye" type="PrimitiveDenseStore" line="233">
                    <params>
                        <param name="rows" type="long"/>
                        <param name="columns" type="long"/>
                    </params>
                    <declaration name="retVal" type="PrimitiveDenseStore" line="235"/>
                </method>
                <method name="makeHouseholder" type="Householder.Primitive" line="242">
                    <params>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <method name="makeRandom" type="PrimitiveDenseStore" line="246">
                    <params>
                        <param name="rows" type="long"/>
                        <param name="columns" type="long"/>
                        <param name="distribution" type="RandomNumber"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="248"/>
                    <declaration name="tmpColDim" type="int" line="249"/>
                    <declaration name="tmpLength" type="int" line="251"/>
                    <declaration name="tmpData" type="double[]" line="253"/>
                    <scope line="255"/>
                </method>
                <method name="makeRotation" type="Rotation.Primitive" line="262">
                    <params>
                        <param name="low" type="int"/>
                        <param name="high" type="int"/>
                        <param name="cos" type="double"/>
                        <param name="sin" type="double"/>
                    </params>
                </method>
                <method name="makeRotation" type="Rotation.Primitive" line="266">
                    <params>
                        <param name="low" type="int"/>
                        <param name="high" type="int"/>
                        <param name="cos" type="Double"/>
                        <param name="sin" type="Double"/>
                    </params>
                </method>
                <method name="makeZero" type="PrimitiveDenseStore" line="270">
                    <params>
                        <param name="rows" type="long"/>
                        <param name="columns" type="long"/>
                    </params>
                </method>
                <method name="rows" type="PrimitiveDenseStore" line="274">
                    <params>
                        <param name="source" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="276"/>
                    <declaration name="tmpColDim" type="int" line="277"/>
                    <declaration name="tmpData" type="double[]" line="279"/>
                    <declaration name="tmpRow" type="Access1D&lt;?&gt;" line="281"/>
                    <scope line="282">
                        <scope line="284"/>
                    </scope>
                </method>
                <method name="rows" type="PrimitiveDenseStore" line="292">
                    <params>
                        <param name="source" type="double[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="294"/>
                    <declaration name="tmpColDim" type="int" line="295"/>
                    <declaration name="tmpData" type="double[]" line="297"/>
                    <declaration name="tmpRow" type="double[]" line="299"/>
                    <scope line="300">
                        <scope line="302"/>
                    </scope>
                </method>
                <method name="rows" type="PrimitiveDenseStore" line="310">
                    <params>
                        <param name="source" type="List<? extends Number>"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="312"/>
                    <declaration name="tmpColDim" type="int" line="313"/>
                    <declaration name="tmpData" type="double[]" line="315"/>
                    <declaration name="tmpRow" type="List&lt;? extends Number&gt;" line="317"/>
                    <scope line="318">
                        <scope line="320"/>
                    </scope>
                </method>
                <method name="rows" type="PrimitiveDenseStore" line="328">
                    <params>
                        <param name="source" type="Number[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="330"/>
                    <declaration name="tmpColDim" type="int" line="331"/>
                    <declaration name="tmpData" type="double[]" line="333"/>
                    <declaration name="tmpRow" type="Number[]" line="335"/>
                    <scope line="336">
                        <scope line="338"/>
                    </scope>
                </method>
                <method name="scalar" type="Scalar.Factory<Double>" line="346"/>
                <javadoc line="350">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="toScalar" type="Scalar<Double>" line="354">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <javadoc line="358">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="toScalar" type="Scalar<Double>" line="362">
                    <params>
                        <param name="value" type="Number"/>
                    </params>
                </method>
                <method name="transpose" type="PrimitiveDenseStore" line="366">
                    <params>
                        <param name="source" type="Access2D<?>"/>
                    </params>
                    <declaration name="retVal" type="PrimitiveDenseStore" line="368"/>
                </method>
            </anonymous_class>
            <declaration name="ELEMENT_SIZE" type="long" line="376"/>
            <declaration name="SHALLOW_SIZE" type="long" line="378"/>
            <method name="cast" type="PrimitiveDenseStore" line="380">
                <params>
                    <param name="mtrx" type="Access1D<Double>"/>
                </params>
                <scope line="381"/>
                <scope line="383"/>
                <scope line="385"/>
            </method>
            <method name="cast" type="Householder.Primitive" line="390">
                <params>
                    <param name="aTransf" type="Householder<Double>"/>
                </params>
                <scope line="391"/>
                <scope line="393"/>
                <scope line="395"/>
            </method>
            <method name="cast" type="Rotation.Primitive" line="400">
                <params>
                    <param name="aTransf" type="Rotation<Double>"/>
                </params>
                <scope line="401"/>
                <scope line="403"/>
            </method>
            <method name="doAfter" type="void" line="409">
                <params>
                    <param name="aMtrxH" type="double[]"/>
                    <param name="aMtrxV" type="double[]"/>
                    <param name="tmpMainDiagonal" type="double[]"/>
                    <param name="tmpOffDiagonal" type="double[]"/>
                    <param name="r" type="double"/>
                    <param name="s" type="double"/>
                    <param name="z" type="double"/>
                    <param name="aNorm1" type="double"/>
                </params>
                <comment line="414">
                    BasicLogger.logDebug(&quot;r={}, s={}, z={}&quot;, r, s, z);                    
                </comment>
                <comment line="428">
                    Real vector                    
                </comment>
                <comment line="450">
                    Solve real equations                    
                </comment>
                <comment line="464">
                    Overflow control                    
                </comment>
                <comment line="474">
                    Complex vector                    
                </comment>
                <comment line="478">
                    Last vector component imaginary so matrix is triangular                    
                </comment>
                <comment line="520">
                    Solve complex equations                    
                </comment>
                <comment line="555">
                    Overflow control                    
                </comment>
                <comment line="568">
                    Back transformation to get eigenvectors of original matrix                    
                </comment>
                <declaration name="tmpDiagDim" type="int" line="411"/>
                <declaration name="tmpDiagDimMinusOne" type="int" line="412"/>
                <declaration name="p" type="double" line="416"/>
                <declaration name="q" type="double" line="417"/>
                <declaration name="t" type="double" line="418"/>
                <declaration name="w" type="double" line="419"/>
                <declaration name="x" type="double" line="420"/>
                <declaration name="y" type="double" line="421"/>
                <scope line="423">
                    <scope line="429">
                        <declaration name="l" type="int" line="430"/>
                        <scope line="432">
                            <scope line="435"/>
                            <scope line="438"/>
                            <scope line="441">
                                <scope line="443">
                                    <scope line="444"/>
                                    <scope line="446"/>
                                </scope>
                                <scope line="451">
                                    <scope line="457"/>
                                    <scope line="459"/>
                                </scope>
                                <scope line="466">
                                    <scope line="467"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="475">
                        <declaration name="l" type="int" line="476"/>
                        <scope line="479"/>
                        <scope line="482">
                            <declaration name="tmpX" type="ComplexNumber" line="484"/>
                            <declaration name="tmpY" type="ComplexNumber" line="485"/>
                            <declaration name="tmpZ" type="ComplexNumber" line="487"/>
                        </scope>
                        <scope line="494">
                            <declaration name="ra" type="double" line="495"/>
                            <scope line="498"/>
                            <scope line="504"/>
                            <scope line="508">
                                <scope line="510">
                                    <declaration name="tmpX" type="ComplexNumber" line="511"/>
                                    <declaration name="tmpY" type="ComplexNumber" line="512"/>
                                    <declaration name="tmpZ" type="ComplexNumber" line="514"/>
                                </scope>
                                <scope line="518">
                                    <scope line="525"/>
                                    <declaration name="tmpX" type="ComplexNumber" line="529"/>
                                    <declaration name="tmpY" type="ComplexNumber" line="530"/>
                                    <declaration name="tmpZ" type="ComplexNumber" line="532"/>
                                    <scope line="537"/>
                                    <scope line="543">
                                        <declaration name="tmpX1" type="ComplexNumber" line="544"/>
                                        <declaration name="tmpY1" type="ComplexNumber" line="546"/>
                                        <declaration name="tmpZ1" type="ComplexNumber" line="548"/>
                                    </scope>
                                </scope>
                                <scope line="557">
                                    <scope line="558"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="569">
                    <scope line="570">
                        <scope line="572"/>
                    </scope>
                </scope>
            </method>
            <method name="doHessenberg" type="int" line="580">
                <params>
                    <param name="aMtrxH" type="double[]"/>
                    <param name="aMtrxV" type="double[]"/>
                </params>
                <comment line="589">
                    Scale column.                    
                </comment>
                <comment line="597">
                    Compute Householder transformation.                    
                </comment>
                <comment line="610">
                    Apply Householder similarity transformation                    
                </comment>
                <comment line="611">
                    H = (I-u*u&apos;/h)*H*(I-u*u&apos;)/h)                    
                </comment>
                <comment line="639">
                    BasicLogger.logDebug(&quot;Jama H&quot;, new PrimitiveDenseStore(tmpDiagDim, tmpDiagDim, aMtrxH));                    
                </comment>
                <comment line="641">
                    Här borde Hessenberg vara klar                    
                </comment>
                <comment line="642">
                    Nedan börjar uträkningen av Q                    
                </comment>
                <comment line="644">
                    Accumulate transformations (Algol&apos;s ortran).                    
                </comment>
                <comment line="656">
                    Double division avoids possible underflow                    
                </comment>
                <comment line="663">
                    BasicLogger.logDebug(&quot;Iter V&quot;, new PrimitiveDenseStore(tmpDiagDim, tmpDiagDim, aMtrxV));                    
                </comment>
                <comment line="667">
                    BasicLogger.logDebug(&quot;Jama V&quot;, new PrimitiveDenseStore(tmpDiagDim, tmpDiagDim, aMtrxV));                    
                </comment>
                <declaration name="tmpDiagDim" type="int" line="582"/>
                <declaration name="tmpDiagDimMinusTwo" type="int" line="583"/>
                <declaration name="tmpWorkCopy" type="double[]" line="585"/>
                <scope line="587">
                    <declaration name="tmpColNorm1" type="double" line="590"/>
                    <scope line="591"/>
                    <scope line="595">
                        <declaration name="tmpInvBeta" type="double" line="598"/>
                        <scope line="599"/>
                        <declaration name="g" type="double" line="603"/>
                        <scope line="604"/>
                        <scope line="612">
                            <declaration name="f" type="double" line="613"/>
                            <scope line="614"/>
                            <scope line="618"/>
                        </scope>
                        <scope line="623">
                            <declaration name="f" type="double" line="624"/>
                            <scope line="625"/>
                            <scope line="629"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="645">
                    <declaration name="tmpIndex" type="int" line="646"/>
                    <scope line="647">
                        <scope line="648"/>
                        <scope line="651">
                            <declaration name="g" type="double" line="652"/>
                            <scope line="653"/>
                            <scope line="658"/>
                        </scope>
                    </scope>
                    <scope line="662"/>
                </scope>
            </method>
            <method name="doSchur" type="double[][]" line="672">
                <params>
                    <param name="aMtrxH" type="double[]"/>
                    <param name="aMtrxV" type="double[]"/>
                    <param name="allTheWay" type="boolean"/>
                </params>
                <comment line="677">
                    Store roots isolated by balanc and compute matrix norm                    
                </comment>
                <comment line="693">
                    Outer loop over eigenvalue index                    
                </comment>
                <comment line="698">
                    Look for single small sub-diagonal element                    
                </comment>
                <comment line="711">
                    Check for convergence                    
                </comment>
                <comment line="712">
                    One root found                    
                </comment>
                <comment line="720">
                    Two roots found                    
                </comment>
                <comment line="731">
                    Real pair                    
                </comment>
                <comment line="753">
                    Row modification                    
                </comment>
                <comment line="760">
                    Column modification                    
                </comment>
                <comment line="767">
                    Accumulate transformations                    
                </comment>
                <comment line="774">
                    Complex pair                    
                </comment>
                <comment line="784">
                    No convergence yet                    
                </comment>
                <comment line="787">
                    Form shift                    
                </comment>
                <comment line="796">
                    Wilkinson&apos;s original ad hoc shift                    
                </comment>
                <comment line="808">
                    MATLAB&apos;s new ad hoc shift                    
                </comment>
                <comment line="826">
                    (Could check iteration count here.)                    
                </comment>
                <comment line="828">
                    Look for two consecutive small sub-diagonal elements                    
                </comment>
                <comment line="858">
                    Double QR step involving rows l:n and columns m:n                    
                </comment>
                <comment line="891">
                    Row modification                    
                </comment>
                <comment line="902">
                    Column modification                    
                </comment>
                <comment line="913">
                    Accumulate transformations                    
                </comment>
                <comment line="923">
                    (s != 0)                    
                </comment>
                <comment line="924">
                    k loop                    
                </comment>
                <comment line="925">
                    check convergence                    
                </comment>
                <comment line="926">
                    while (n &gt;= low)                    
                </comment>
                <comment line="928">
                    Backsubstitute to find vectors of upper triangular form                    
                </comment>
                <declaration name="tmpDiagDim" type="int" line="674"/>
                <declaration name="tmpDiagDimMinusOne" type="int" line="675"/>
                <declaration name="tmpVal" type="double" line="678"/>
                <scope line="679">
                    <scope line="680"/>
                </scope>
                <declaration name="tmpNorm1" type="double" line="684"/>
                <declaration name="tmpMainDiagonal" type="double[]" line="686"/>
                <declaration name="tmpOffDiagonal" type="double[]" line="687"/>
                <declaration name="exshift" type="double" line="689"/>
                <declaration name="p" type="double" line="690"/>
                <declaration name="w" type="double" line="692"/>
                <declaration name="tmpIterCount" type="int" line="694"/>
                <declaration name="tmpMainIterIndex" type="int" line="695"/>
                <scope line="696">
                    <declaration name="l" type="int" line="699"/>
                    <scope line="700">
                        <scope line="702"/>
                        <scope line="705"/>
                    </scope>
                    <scope line="713"/>
                    <scope line="721">
                        <scope line="732">
                            <scope line="733"/>
                            <scope line="735"/>
                            <scope line="740"/>
                            <scope line="754"/>
                            <scope line="761"/>
                            <scope line="768"/>
                        </scope>
                        <scope line="775"/>
                    </scope>
                    <scope line="785">
                        <scope line="791"/>
                        <scope line="797">
                            <scope line="799"/>
                        </scope>
                        <scope line="809">
                            <scope line="812">
                                <scope line="814"/>
                                <scope line="818"/>
                            </scope>
                        </scope>
                        <declaration name="m" type="int" line="829"/>
                        <scope line="830">
                            <scope line="841"/>
                            <scope line="845"/>
                        </scope>
                        <scope line="851">
                            <scope line="853"/>
                        </scope>
                        <scope line="859">
                            <declaration name="notlast" type="boolean" line="860"/>
                            <scope line="861">
                                <scope line="866"/>
                            </scope>
                            <scope line="875"/>
                            <scope line="878">
                                <scope line="879"/>
                                <scope line="881"/>
                                <scope line="892">
                                    <scope line="894"/>
                                </scope>
                                <scope line="903">
                                    <scope line="905"/>
                                </scope>
                                <scope line="914">
                                    <scope line="916"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="929"/>
            </method>
            <declaration name="multiplyBoth" type="PrimitiveMultiplyBoth" line="936"/>
            <declaration name="multiplyLeft" type="PrimitiveMultiplyLeft" line="938"/>
            <declaration name="multiplyRight" type="PrimitiveMultiplyRight" line="939"/>
            <declaration name="myColDim" type="int" line="940"/>
            <declaration name="myRowDim" type="int" line="942"/>
            <declaration name="myUtility" type="Array2D&lt;Double&gt;" line="944"/>
            <method name="PrimitiveDenseStore" type="constructor" line="946">
                <params>
                    <param name="anArray" type="double[]"/>
                </params>
            </method>
            <method name="PrimitiveDenseStore" type="constructor" line="960">
                <params>
                    <param name="aLength" type="int"/>
                </params>
            </method>
            <method name="PrimitiveDenseStore" type="constructor" line="974">
                <params>
                    <param name="aRowDim" type="int"/>
                    <param name="aColDim" type="int"/>
                </params>
            </method>
            <method name="PrimitiveDenseStore" type="constructor" line="988">
                <params>
                    <param name="aRowDim" type="int"/>
                    <param name="aColDim" type="int"/>
                    <param name="anArray" type="double[]"/>
                </params>
            </method>
            <method name="aggregateAll" type="Double" line="1002">
                <params>
                    <param name="aggregator" type="Aggregator"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1004"/>
                <declaration name="tmpColDim" type="int" line="1005"/>
                <declaration name="tmpMainAggr" type="AggregatorFunction&lt;Double&gt;" line="1007"/>
                <scope line="1009">
                    <anonymous_class line="1011">
                        <method name="conquer" type="void" line="1014">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                            <declaration name="tmpPartAggr" type="AggregatorFunction&lt;Double&gt;" line="1016"/>
                            <scope line="1020"/>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1011"/>
                </scope>
                <scope line="1028"/>
            </method>
            <method name="applyCholesky" type="void" line="1036">
                <params>
                    <param name="iterationPoint" type="int"/>
                    <param name="multipliers" type="SimpleArray<Double>"/>
                </params>
                <declaration name="tmpData" type="double[]" line="1038"/>
                <declaration name="tmpColumn" type="double[]" line="1039"/>
                <scope line="1041">
                    <anonymous_class line="1043">
                        <method name="conquer" type="void" line="1046">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1043"/>
                </scope>
                <scope line="1053"/>
            </method>
            <method name="applyLU" type="void" line="1059">
                <params>
                    <param name="iterationPoint" type="int"/>
                    <param name="multipliers" type="SimpleArray<Double>"/>
                </params>
                <declaration name="tmpData" type="double[]" line="1061"/>
                <declaration name="tmpColumn" type="double[]" line="1062"/>
                <scope line="1064">
                    <anonymous_class line="1066">
                        <method name="conquer" type="void" line="1069">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1066"/>
                </scope>
                <scope line="1076"/>
            </method>
            <method name="asArray2D" type="Array2D<Double>" line="1082"/>
            <method name="asList" type="Array1D<Double>" line="1086"/>
            <method name="builder" type="MatrixStore.Builder<Double>" line="1090"/>
            <method name="caxpy" type="void" line="1094">
                <params>
                    <param name="aSclrA" type="double"/>
                    <param name="aColX" type="int"/>
                    <param name="aColY" type="int"/>
                    <param name="aFirstRow" type="int"/>
                </params>
            </method>
            <method name="caxpy" type="void" line="1098">
                <params>
                    <param name="aSclrA" type="Double"/>
                    <param name="aColX" type="int"/>
                    <param name="aColY" type="int"/>
                    <param name="aFirstRow" type="int"/>
                </params>
            </method>
            <method name="computeInPlaceLU" type="Pivot" line="1102">
                <comment line="1113">
                    Main loop - along the diagonal                    
                </comment>
                <comment line="1116">
                    Find next pivot row                    
                </comment>
                <comment line="1118">
                    Pivot?                    
                </comment>
                <comment line="1124">
                    Do the calculations...                    
                </comment>
                <comment line="1127">
                    Calculate multipliers and copy to local column                    
                </comment>
                <comment line="1128">
                    Current column, below the diagonal                    
                </comment>
                <comment line="1136">
                    Apply transformations to everything below and to the right of the pivot element                    
                </comment>
                <comment line="1137">
                    ApplyLU.invoke(tmpData, tmpRowDim, ij + 1, tmpColDim, tmpMultipliers, ij);                    
                </comment>
                <declaration name="tmpRowDim" type="int" line="1104"/>
                <declaration name="tmpColDim" type="int" line="1105"/>
                <declaration name="tmpMinDim" type="int" line="1106"/>
                <declaration name="retVal" type="Pivot" line="1108"/>
                <declaration name="tmpData" type="double[]" line="1110"/>
                <declaration name="tmpMultipliers" type="double[]" line="1111"/>
                <scope line="1114">
                    <declaration name="tmpPivotRow" type="int" line="1117"/>
                    <scope line="1119"/>
                    <scope line="1125">
                        <declaration name="tmpIndex" type="int" line="1130"/>
                        <declaration name="tmpDenominator" type="double" line="1131"/>
                        <scope line="1132"/>
                        <scope line="1138"/>
                    </scope>
                    <scope line="1142"/>
                </scope>
            </method>
            <method name="computeInPlaceSchur" type="Array1D<ComplexNumber>" line="1152">
                <params>
                    <param name="aTransformationCollector" type="PhysicalStore<Double>"/>
                    <param name="eigenvalue" type="boolean"/>
                </params>
                <comment line="1154">
                    final PrimitiveDenseStore tmpThisCopy = this.copy();                    
                </comment>
                <comment line="1155">
                    final PrimitiveDenseStore tmpCollCopy = (PrimitiveDenseStore) aTransformationCollector.copy();                    
                </comment>
                <comment line="1156">
                                        
                </comment>
                <comment line="1157">
                    tmpThisCopy.computeInPlaceHessenberg(true);                    
                </comment>
                <comment line="1159">
                    Actual                    
                </comment>
                <comment line="1167">
                    BasicLogger.logDebug(&quot;Schur Step&quot;, this);                    
                </comment>
                <comment line="1168">
                    BasicLogger.logDebug(&quot;Hessenberg&quot;, tmpThisCopy);                    
                </comment>
                <declaration name="tmpData" type="double[]" line="1161"/>
                <declaration name="tmpCollectorData" type="double[]" line="1163"/>
                <declaration name="tmpDiags" type="double[][]" line="1170"/>
                <declaration name="aRawReal" type="double[]" line="1171"/>
                <declaration name="aRawImag" type="double[]" line="1172"/>
                <declaration name="tmpLength" type="int" line="1173"/>
                <declaration name="retVal" type="SimpleArray.Complex" line="1175"/>
                <declaration name="tmpRaw" type="ComplexNumber[]" line="1176"/>
                <scope line="1178"/>
            </method>
            <method name="conjugate" type="PrimitiveDenseStore" line="1185"/>
            <method name="copy" type="PrimitiveDenseStore" line="1189"/>
            <method name="countColumns" type="long" line="1193"/>
            <method name="countRows" type="long" line="1197"/>
            <method name="divideAndCopyColumn" type="void" line="1201">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aDestination" type="SimpleArray<Double>"/>
                </params>
                <declaration name="tmpData" type="double[]" line="1203"/>
                <declaration name="tmpRowDim" type="int" line="1204"/>
                <declaration name="tmpDestination" type="double[]" line="1206"/>
                <declaration name="tmpIndex" type="int" line="1208"/>
                <declaration name="tmpDenominator" type="double" line="1209"/>
                <scope line="1211"/>
            </method>
            <method name="doubleValue" type="double" line="1216">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="1220">
                <params>
                    <param name="other" type="MatrixStore<Double>"/>
                    <param name="context" type="NumberContext"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="1226">
                <params>
                    <param name="anObj" type="Object"/>
                </params>
                <scope line="1227"/>
                <scope line="1229"/>
            </method>
            <method name="exchangeColumns" type="void" line="1234">
                <params>
                    <param name="aColA" type="int"/>
                    <param name="aColB" type="int"/>
                </params>
            </method>
            <method name="exchangeRows" type="void" line="1238">
                <params>
                    <param name="aRowA" type="int"/>
                    <param name="aRowB" type="int"/>
                </params>
            </method>
            <method name="factory" type="PhysicalStore.Factory<Double,PrimitiveDenseStore>" line="1242"/>
            <method name="fillByMultiplying" type="void" line="1246">
                <params>
                    <param name="left" type="Access1D<Double>"/>
                    <param name="right" type="Access1D<Double>"/>
                </params>
                <declaration name="tmpComplexity" type="int" line="1248"/>
                <declaration name="tmpProductData" type="double[]" line="1250"/>
                <scope line="1252"/>
                <scope line="1254"/>
                <scope line="1256"/>
            </method>
            <method name="fillColumn" type="void" line="1261">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="Double"/>
                </params>
            </method>
            <method name="fillConjugated" type="void" line="1265">
                <params>
                    <param name="source" type="Access2D<? extends Number>"/>
                </params>
            </method>
            <method name="fillDiagonal" type="void" line="1269">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="Double"/>
                </params>
            </method>
            <method name="fillMatching" type="void" line="1273">
                <params>
                    <param name="source" type="Access1D<? extends Number>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1275"/>
                <declaration name="tmpColDim" type="int" line="1276"/>
                <scope line="1278">
                    <anonymous_class line="1280">
                        <method name="conquer" type="void" line="1283">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1280"/>
                </scope>
                <scope line="1291"/>
            </method>
            <method name="fillMatching" type="void" line="1297">
                <params>
                    <param name="leftArg" type="Access1D<Double>"/>
                    <param name="func" type="BinaryFunction<Double>"/>
                    <param name="rightArg" type="Access1D<Double>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1299"/>
                <declaration name="tmpColDim" type="int" line="1300"/>
                <scope line="1302">
                    <anonymous_class line="1304">
                        <method name="conquer" type="void" line="1307">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1304"/>
                </scope>
                <scope line="1315"/>
            </method>
            <method name="fillMatching" type="void" line="1321">
                <params>
                    <param name="aLeftArg" type="Access1D<Double>"/>
                    <param name="aFunc" type="BinaryFunction<Double>"/>
                    <param name="aRightArg" type="Double"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1323"/>
                <declaration name="tmpColDim" type="int" line="1324"/>
                <scope line="1326">
                    <anonymous_class line="1328">
                        <method name="conquer" type="void" line="1331">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1328"/>
                </scope>
                <scope line="1339"/>
            </method>
            <method name="fillMatching" type="void" line="1345">
                <params>
                    <param name="aLeftArg" type="Double"/>
                    <param name="aFunc" type="BinaryFunction<Double>"/>
                    <param name="aRightArg" type="Access1D<Double>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1347"/>
                <declaration name="tmpColDim" type="int" line="1348"/>
                <scope line="1350">
                    <anonymous_class line="1352">
                        <method name="conquer" type="void" line="1355">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1352"/>
                </scope>
                <scope line="1363"/>
            </method>
            <method name="fillRow" type="void" line="1369">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="Double"/>
                </params>
            </method>
            <method name="fillTransposed" type="void" line="1373">
                <params>
                    <param name="source" type="Access2D<? extends Number>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1375"/>
                <declaration name="tmpColDim" type="int" line="1376"/>
                <scope line="1378">
                    <anonymous_class line="1380">
                        <method name="conquer" type="void" line="1383">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1380"/>
                </scope>
                <scope line="1391"/>
            </method>
            <method name="generateApplyAndCopyHouseholderColumn" type="boolean" line="1397">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aDestination" type="Householder<Double>"/>
                </params>
            </method>
            <method name="generateApplyAndCopyHouseholderRow" type="boolean" line="1401">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aDestination" type="Householder<Double>"/>
                </params>
            </method>
            <method name="get" type="Double" line="1405">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                </params>
            </method>
            <method name="getColDim" type="int" line="1409"/>
            <method name="getIndexOfLargestInColumn" type="int" line="1413">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                </params>
            </method>
            <method name="getMaxDim" type="int" line="1417"/>
            <method name="getMinDim" type="int" line="1421"/>
            <method name="getRowDim" type="int" line="1425"/>
            <method name="hashCode" type="int" line="1430"/>
            <method name="isAbsolute" type="boolean" line="1434">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="isAbsolute" type="boolean" line="1438">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isInfinite" type="boolean" line="1442">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isLowerLeftShaded" type="boolean" line="1446"/>
            <method name="isNaN" type="boolean" line="1450">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isPositive" type="boolean" line="1454">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="isPositive" type="boolean" line="1458">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isReal" type="boolean" line="1462">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="isReal" type="boolean" line="1466">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isUpperRightShaded" type="boolean" line="1470"/>
            <method name="isZero" type="boolean" line="1474">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="isZero" type="boolean" line="1478">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="maxpy" type="void" line="1482">
                <params>
                    <param name="aSclrA" type="Double"/>
                    <param name="aMtrxX" type="MatrixStore<Double>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1484"/>
                <declaration name="tmpColDim" type="int" line="1485"/>
                <scope line="1487">
                    <anonymous_class line="1489">
                        <method name="conquer" type="void" line="1492">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1489"/>
                </scope>
                <scope line="1500"/>
            </method>
            <method name="modifyAll" type="void" line="1507">
                <params>
                    <param name="aFunc" type="UnaryFunction<Double>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1509"/>
                <declaration name="tmpColDim" type="int" line="1510"/>
                <scope line="1512">
                    <anonymous_class line="1514">
                        <method name="conquer" type="void" line="1517">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1514"/>
                </scope>
                <scope line="1525"/>
            </method>
            <method name="modifyColumn" type="void" line="1531">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aFunc" type="UnaryFunction<Double>"/>
                </params>
            </method>
            <method name="modifyColumn" type="void" line="1535">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="function" type="UnaryFunction<Double>"/>
                </params>
            </method>
            <method name="modifyDiagonal" type="void" line="1539">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aFunc" type="UnaryFunction<Double>"/>
                </params>
            </method>
            <method name="modifyDiagonal" type="void" line="1543">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="function" type="UnaryFunction<Double>"/>
                </params>
            </method>
            <method name="modifyOne" type="void" line="1547">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aFunc" type="UnaryFunction<Double>"/>
                </params>
                <declaration name="tmpValue" type="double" line="1549"/>
            </method>
            <method name="modifyRow" type="void" line="1556">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aFunc" type="UnaryFunction<Double>"/>
                </params>
            </method>
            <method name="modifyRow" type="void" line="1560">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="function" type="UnaryFunction<Double>"/>
                </params>
            </method>
            <method name="multiplyLeft" type="MatrixStore<Double>" line="1564">
                <params>
                    <param name="left" type="Access1D<Double>"/>
                </params>
                <declaration name="retVal" type="PrimitiveDenseStore" line="1566"/>
            </method>
            <method name="multiplyRight" type="MatrixStore<Double>" line="1573">
                <params>
                    <param name="right" type="Access1D<Double>"/>
                </params>
                <declaration name="retVal" type="PrimitiveDenseStore" line="1575"/>
            </method>
            <method name="negateColumn" type="void" line="1582">
                <params>
                    <param name="aCol" type="int"/>
                </params>
            </method>
            <method name="raxpy" type="void" line="1586">
                <params>
                    <param name="aSclrA" type="Double"/>
                    <param name="aRowX" type="int"/>
                    <param name="aRowY" type="int"/>
                    <param name="aFirstCol" type="int"/>
                </params>
            </method>
            <method name="rotateRight" type="void" line="1590">
                <params>
                    <param name="aLow" type="int"/>
                    <param name="aHigh" type="int"/>
                    <param name="aCos" type="double"/>
                    <param name="aSin" type="double"/>
                </params>
            </method>
            <method name="set" type="void" line="1594">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="double"/>
                </params>
            </method>
            <method name="set" type="void" line="1598">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="Number"/>
                </params>
            </method>
            <method name="setToIdentity" type="void" line="1602">
                <params>
                    <param name="aCol" type="int"/>
                </params>
            </method>
            <method name="substituteBackwards" type="void" line="1607">
                <params>
                    <param name="aBody" type="Access2D<Double>"/>
                    <param name="conjugated" type="boolean"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1609"/>
                <declaration name="tmpColDim" type="int" line="1610"/>
                <scope line="1612">
                    <anonymous_class line="1614">
                        <method name="conquer" type="void" line="1617">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1614"/>
                </scope>
                <scope line="1625"/>
            </method>
            <method name="substituteForwards" type="void" line="1631">
                <params>
                    <param name="aBody" type="Access2D<Double>"/>
                    <param name="onesOnDiagonal" type="boolean"/>
                    <param name="zerosAboveDiagonal" type="boolean"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1633"/>
                <declaration name="tmpColDim" type="int" line="1634"/>
                <scope line="1636">
                    <anonymous_class line="1638">
                        <method name="conquer" type="void" line="1641">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1638"/>
                </scope>
                <scope line="1649"/>
            </method>
            <method name="toScalar" type="PrimitiveScalar" line="1655">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="toString" type="String" line="1660"/>
            <method name="transformLeft" type="void" line="1664">
                <params>
                    <param name="aTransf" type="Householder<Double>"/>
                    <param name="aFirstCol" type="int"/>
                </params>
                <declaration name="tmpTransf" type="Householder.Primitive" line="1666"/>
                <declaration name="tmpData" type="double[]" line="1668"/>
                <declaration name="tmpRowDim" type="int" line="1670"/>
                <declaration name="tmpColDim" type="int" line="1671"/>
                <scope line="1673">
                    <anonymous_class line="1675">
                        <method name="conquer" type="void" line="1678">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1675"/>
                </scope>
                <scope line="1686"/>
            </method>
            <method name="transformLeft" type="void" line="1692">
                <params>
                    <param name="aTransf" type="Rotation<Double>"/>
                </params>
                <declaration name="tmpTransf" type="Rotation.Primitive" line="1694"/>
                <declaration name="tmpLow" type="int" line="1696"/>
                <declaration name="tmpHigh" type="int" line="1697"/>
                <scope line="1699">
                    <scope line="1700"/>
                    <scope line="1702"/>
                </scope>
                <scope line="1705">
                    <scope line="1706"/>
                    <scope line="1708"/>
                    <scope line="1710"/>
                </scope>
            </method>
            <method name="transformRight" type="void" line="1716">
                <params>
                    <param name="aTransf" type="Householder<Double>"/>
                    <param name="aFirstRow" type="int"/>
                </params>
                <declaration name="tmpTransf" type="Householder.Primitive" line="1718"/>
                <declaration name="tmpData" type="double[]" line="1720"/>
                <declaration name="tmpRowDim" type="int" line="1722"/>
                <declaration name="tmpColDim" type="int" line="1723"/>
                <scope line="1725">
                    <anonymous_class line="1727">
                        <method name="conquer" type="void" line="1730">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1727"/>
                </scope>
                <scope line="1738"/>
            </method>
            <method name="transformRight" type="void" line="1744">
                <params>
                    <param name="aTransf" type="Rotation<Double>"/>
                </params>
                <declaration name="tmpTransf" type="Rotation.Primitive" line="1746"/>
                <declaration name="tmpLow" type="int" line="1748"/>
                <declaration name="tmpHigh" type="int" line="1749"/>
                <scope line="1751">
                    <scope line="1752"/>
                    <scope line="1754"/>
                </scope>
                <scope line="1757">
                    <scope line="1758"/>
                    <scope line="1760"/>
                    <scope line="1762"/>
                </scope>
            </method>
            <method name="transformSymmetric" type="void" line="1768">
                <params>
                    <param name="aTransf" type="Householder<Double>"/>
                </params>
            </method>
            <method name="transpose" type="PrimitiveDenseStore" line="1772">
                <declaration name="retVal" type="PrimitiveDenseStore" line="1774"/>
            </method>
            <method name="tred2" type="void" line="1781">
                <params>
                    <param name="mainDiagonal" type="SimpleArray<Double>"/>
                    <param name="offDiagonal" type="SimpleArray<Double>"/>
                    <param name="yesvecs" type="boolean"/>
                </params>
            </method>
            <method name="visitAll" type="void" line="1786">
                <params>
                    <param name="visitor" type="VoidFunction<Double>"/>
                </params>
            </method>
            <method name="visitColumn" type="void" line="1790">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="visitor" type="VoidFunction<Double>"/>
                </params>
            </method>
            <method name="visitColumn" type="void" line="1794">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="visitor" type="VoidFunction<Double>"/>
                </params>
            </method>
            <method name="visitDiagonal" type="void" line="1798">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="visitor" type="VoidFunction<Double>"/>
                </params>
            </method>
            <method name="visitDiagonal" type="void" line="1802">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="visitor" type="VoidFunction<Double>"/>
                </params>
            </method>
            <method name="visitRow" type="void" line="1806">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="visitor" type="VoidFunction<Double>"/>
                </params>
            </method>
            <method name="visitRow" type="void" line="1810">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="visitor" type="VoidFunction<Double>"/>
                </params>
            </method>
        </class>
    </source>