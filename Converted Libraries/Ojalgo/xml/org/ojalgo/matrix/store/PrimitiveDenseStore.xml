<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.store">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="java.util.List"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.access.AccessUtils"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.array.Array2D"/>
        <import package="org.ojalgo.array.PrimitiveArray"/>
        <import package="org.ojalgo.array.SimpleArray"/>
        <import package="org.ojalgo.concurrent.DivideAndConquer"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.FunctionSet"/>
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.VoidFunction"/>
        <import package="org.ojalgo.function.aggregator.Aggregator"/>
        <import package="org.ojalgo.function.aggregator.AggregatorCollection"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.function.aggregator.PrimitiveAggregator"/>
        <import package="org.ojalgo.machine.JavaType"/>
        <import package="org.ojalgo.machine.MemoryEstimator"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.decomposition.DecompositionStore"/>
        <import package="org.ojalgo.matrix.decomposition.LUDecomposition.Pivot"/>
        <import package="org.ojalgo.matrix.store.operation"/>
        <import package="org.ojalgo.matrix.transformation.Householder"/>
        <import package="org.ojalgo.matrix.transformation.Rotation"/>
        <import package="org.ojalgo.random.RandomNumber"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.PrimitiveScalar"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="PrimitiveDenseStore" line="36">
            <extends class="PrimitiveArray"/>
            <implements interface="PhysicalStore">
                <type_params>
                    <type_param name="Double"/>
                </type_params>
            </implements>
            <implements interface="DecompositionStore">
                <type_params>
                    <type_param name="Double"/>
                </type_params>
            </implements>
            <javadoc line="36">
                A {@linkplain Double} (actually double) implementation of {@linkplain PhysicalStore}.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <interface name="PrimitiveMultiplyBoth">
                <method name="invoke" type="void" line="42"/>
            </interface>
            <interface name="PrimitiveMultiplyLeft">
                <method name="invoke" type="void" line="45"/>
            </interface>
            <interface name="PrimitiveMultiplyRight">
                <method name="invoke" type="void" line="48"/>
            </interface>
            <declaration name="FACTORY" type="DecompositionStore.Factory&lt;Double,PrimitiveDenseStore&gt;" line="50"/>
            <anonymous_class line="50">
                <method name="aggregator" type="AggregatorCollection<Double>" line="51"/>
                <method name="columns" type="PrimitiveDenseStore" line="54">
                    <params>
                        <param name="source" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="55"/>
                    <declaration name="tmpColDim" type="int" line="56"/>
                    <declaration name="tmpData" type="double[]" line="57"/>
                    <declaration name="tmpColumn" type="Access1D&lt;?&gt;" line="58"/>
                    <scope line="59">
                        <scope line="61"/>
                    </scope>
                </method>
                <method name="columns" type="PrimitiveDenseStore" line="67">
                    <params>
                        <param name="source" type="double[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="68"/>
                    <declaration name="tmpColDim" type="int" line="69"/>
                    <declaration name="tmpData" type="double[]" line="70"/>
                    <declaration name="tmpColumn" type="double[]" line="71"/>
                    <scope line="72">
                        <scope line="74"/>
                    </scope>
                </method>
                <method name="columns" type="PrimitiveDenseStore" line="80">
                    <params>
                        <param name="source" type="List<? extends Number>"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="81"/>
                    <declaration name="tmpColDim" type="int" line="82"/>
                    <declaration name="tmpData" type="double[]" line="83"/>
                    <declaration name="tmpColumn" type="List&lt;? extends Number&gt;" line="84"/>
                    <scope line="85">
                        <scope line="87"/>
                    </scope>
                </method>
                <method name="columns" type="PrimitiveDenseStore" line="93">
                    <params>
                        <param name="source" type="Number[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="94"/>
                    <declaration name="tmpColDim" type="int" line="95"/>
                    <declaration name="tmpData" type="double[]" line="96"/>
                    <declaration name="tmpColumn" type="Number[]" line="97"/>
                    <scope line="98">
                        <scope line="100"/>
                    </scope>
                </method>
                <method name="conjugate" type="PrimitiveDenseStore" line="106">
                    <params>
                        <param name="source" type="Access2D<?>"/>
                    </params>
                </method>
                <method name="copy" type="PrimitiveDenseStore" line="109">
                    <params>
                        <param name="source" type="Access2D<?>"/>
                    </params>
                    <declaration name="retVal" type="PrimitiveDenseStore" line="110"/>
                </method>
                <method name="function" type="FunctionSet<Double>" line="114"/>
                <javadoc line="117">
                    @deprecated Use {@link #aggregator()} instead                    
                </javadoc>
                <method name="getAggregatorCollection" type="AggregatorCollection<Double>" line="120"/>
                <javadoc line="123">
                    @deprecated Use {@link #function()} instead                    
                </javadoc>
                <method name="getFunctionSet" type="FunctionSet<Double>" line="126"/>
                <javadoc line="129">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getNumber" type="Double" line="132">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <javadoc line="135">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getNumber" type="Double" line="138">
                    <params>
                        <param name="value" type="Number"/>
                    </params>
                </method>
                <javadoc line="141">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getStaticOne" type="Scalar<Double>" line="144"/>
                <javadoc line="147">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getStaticZero" type="Scalar<Double>" line="150"/>
                <method name="makeArray" type="SimpleArray.Primitive" line="153">
                    <params>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <method name="makeEye" type="PrimitiveDenseStore" line="156">
                    <params>
                        <param name="rows" type="long"/>
                        <param name="columns" type="long"/>
                    </params>
                    <declaration name="retVal" type="PrimitiveDenseStore" line="157"/>
                </method>
                <method name="makeHouseholder" type="Householder.Primitive" line="161">
                    <params>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <method name="makeRandom" type="PrimitiveDenseStore" line="164">
                    <params>
                        <param name="rows" type="long"/>
                        <param name="columns" type="long"/>
                        <param name="distribution" type="RandomNumber"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="165"/>
                    <declaration name="tmpColDim" type="int" line="166"/>
                    <declaration name="tmpLength" type="int" line="167"/>
                    <declaration name="tmpData" type="double[]" line="168"/>
                    <scope line="169"/>
                </method>
                <method name="makeRotation" type="Rotation.Primitive" line="174">
                    <params>
                        <param name="low" type="int"/>
                        <param name="high" type="int"/>
                        <param name="cos" type="double"/>
                        <param name="sin" type="double"/>
                    </params>
                </method>
                <method name="makeRotation" type="Rotation.Primitive" line="177">
                    <params>
                        <param name="low" type="int"/>
                        <param name="high" type="int"/>
                        <param name="cos" type="Double"/>
                        <param name="sin" type="Double"/>
                    </params>
                </method>
                <method name="makeZero" type="PrimitiveDenseStore" line="180">
                    <params>
                        <param name="rows" type="long"/>
                        <param name="columns" type="long"/>
                    </params>
                </method>
                <method name="rows" type="PrimitiveDenseStore" line="183">
                    <params>
                        <param name="source" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="184"/>
                    <declaration name="tmpColDim" type="int" line="185"/>
                    <declaration name="tmpData" type="double[]" line="186"/>
                    <declaration name="tmpRow" type="Access1D&lt;?&gt;" line="187"/>
                    <scope line="188">
                        <scope line="190"/>
                    </scope>
                </method>
                <method name="rows" type="PrimitiveDenseStore" line="196">
                    <params>
                        <param name="source" type="double[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="197"/>
                    <declaration name="tmpColDim" type="int" line="198"/>
                    <declaration name="tmpData" type="double[]" line="199"/>
                    <declaration name="tmpRow" type="double[]" line="200"/>
                    <scope line="201">
                        <scope line="203"/>
                    </scope>
                </method>
                <method name="rows" type="PrimitiveDenseStore" line="209">
                    <params>
                        <param name="source" type="List<? extends Number>"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="210"/>
                    <declaration name="tmpColDim" type="int" line="211"/>
                    <declaration name="tmpData" type="double[]" line="212"/>
                    <declaration name="tmpRow" type="List&lt;? extends Number&gt;" line="213"/>
                    <scope line="214">
                        <scope line="216"/>
                    </scope>
                </method>
                <method name="rows" type="PrimitiveDenseStore" line="222">
                    <params>
                        <param name="source" type="Number[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="223"/>
                    <declaration name="tmpColDim" type="int" line="224"/>
                    <declaration name="tmpData" type="double[]" line="225"/>
                    <declaration name="tmpRow" type="Number[]" line="226"/>
                    <scope line="227">
                        <scope line="229"/>
                    </scope>
                </method>
                <method name="scalar" type="Scalar.Factory<Double>" line="235"/>
                <javadoc line="238">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="toScalar" type="Scalar<Double>" line="241">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <javadoc line="244">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="toScalar" type="Scalar<Double>" line="247">
                    <params>
                        <param name="value" type="Number"/>
                    </params>
                </method>
                <method name="transpose" type="PrimitiveDenseStore" line="250">
                    <params>
                        <param name="source" type="Access2D<?>"/>
                    </params>
                    <declaration name="retVal" type="PrimitiveDenseStore" line="251"/>
                </method>
            </anonymous_class>
            <declaration name="ELEMENT_SIZE" type="long" line="257"/>
            <declaration name="SHALLOW_SIZE" type="long" line="258"/>
            <method name="cast" type="PrimitiveDenseStore" line="259">
                <params>
                    <param name="mtrx" type="Access1D<Double>"/>
                </params>
                <scope line="260"/>
                <scope line="263"/>
                <scope line="266"/>
            </method>
            <method name="cast" type="Householder.Primitive" line="270">
                <params>
                    <param name="aTransf" type="Householder<Double>"/>
                </params>
                <scope line="271"/>
                <scope line="274"/>
                <scope line="277"/>
            </method>
            <method name="cast" type="Rotation.Primitive" line="281">
                <params>
                    <param name="aTransf" type="Rotation<Double>"/>
                </params>
                <scope line="282"/>
                <scope line="285"/>
            </method>
            <method name="doAfter" type="void" line="289">
                <params>
                    <param name="aMtrxH" type="double[]"/>
                    <param name="aMtrxV" type="double[]"/>
                    <param name="tmpMainDiagonal" type="double[]"/>
                    <param name="tmpOffDiagonal" type="double[]"/>
                    <param name="r" type="double"/>
                    <param name="s" type="double"/>
                    <param name="z" type="double"/>
                    <param name="aNorm1" type="double"/>
                </params>
                <declaration name="tmpDiagDim" type="int" line="290"/>
                <declaration name="tmpDiagDimMinusOne" type="int" line="291"/>
                <declaration name="p" type="double" line="292"/>
                <declaration name="q" type="double" line="293"/>
                <declaration name="t" type="double" line="294"/>
                <declaration name="w" type="double" line="295"/>
                <declaration name="x" type="double" line="296"/>
                <declaration name="y" type="double" line="297"/>
                <scope line="298">
                    <scope line="301">
                        <declaration name="l" type="int" line="302"/>
                        <scope line="304">
                            <scope line="307"/>
                            <scope line="310"/>
                            <scope line="314">
                                <scope line="316">
                                    <scope line="317"/>
                                    <scope line="320"/>
                                </scope>
                                <scope line="324">
                                    <scope line="330"/>
                                    <scope line="333"/>
                                </scope>
                                <scope line="338">
                                    <scope line="339"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="346">
                        <declaration name="l" type="int" line="347"/>
                        <scope line="348"/>
                        <scope line="352">
                            <declaration name="tmpX" type="ComplexNumber" line="353"/>
                            <declaration name="tmpY" type="ComplexNumber" line="354"/>
                            <declaration name="tmpZ" type="ComplexNumber" line="355"/>
                        </scope>
                        <scope line="361">
                            <declaration name="ra" type="double" line="362"/>
                            <scope line="365"/>
                            <scope line="370"/>
                            <scope line="375">
                                <scope line="377">
                                    <declaration name="tmpX" type="ComplexNumber" line="378"/>
                                    <declaration name="tmpY" type="ComplexNumber" line="379"/>
                                    <declaration name="tmpZ" type="ComplexNumber" line="380"/>
                                </scope>
                                <scope line="384">
                                    <scope line="389"/>
                                    <declaration name="tmpX" type="ComplexNumber" line="392"/>
                                    <declaration name="tmpY" type="ComplexNumber" line="393"/>
                                    <declaration name="tmpZ" type="ComplexNumber" line="394"/>
                                    <scope line="397"/>
                                    <scope line="401">
                                        <declaration name="tmpX1" type="ComplexNumber" line="402"/>
                                        <declaration name="tmpY1" type="ComplexNumber" line="403"/>
                                        <declaration name="tmpZ1" type="ComplexNumber" line="404"/>
                                    </scope>
                                </scope>
                                <scope line="410">
                                    <scope line="411"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="420">
                    <scope line="421">
                        <scope line="423"/>
                    </scope>
                </scope>
            </method>
            <method name="doHessenberg" type="int" line="430">
                <params>
                    <param name="aMtrxH" type="double[]"/>
                    <param name="aMtrxV" type="double[]"/>
                </params>
                <declaration name="tmpDiagDim" type="int" line="431"/>
                <declaration name="tmpDiagDimMinusTwo" type="int" line="432"/>
                <declaration name="tmpWorkCopy" type="double[]" line="433"/>
                <scope line="434">
                    <declaration name="tmpColNorm1" type="double" line="435"/>
                    <scope line="436"/>
                    <scope line="439">
                        <declaration name="tmpInvBeta" type="double" line="440"/>
                        <scope line="441"/>
                        <declaration name="g" type="double" line="445"/>
                        <scope line="446"/>
                        <scope line="451">
                            <declaration name="f" type="double" line="452"/>
                            <scope line="453"/>
                            <scope line="457"/>
                        </scope>
                        <scope line="461">
                            <declaration name="f" type="double" line="462"/>
                            <scope line="463"/>
                            <scope line="467"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="475">
                    <declaration name="tmpIndex" type="int" line="476"/>
                    <scope line="477">
                        <scope line="478"/>
                        <scope line="481">
                            <declaration name="g" type="double" line="482"/>
                            <scope line="483"/>
                            <scope line="487"/>
                        </scope>
                    </scope>
                    <scope line="492"/>
                </scope>
            </method>
            <method name="doSchur" type="double[][]" line="497">
                <params>
                    <param name="aMtrxH" type="double[]"/>
                    <param name="aMtrxV" type="double[]"/>
                    <param name="allTheWay" type="boolean"/>
                </params>
                <declaration name="tmpDiagDim" type="int" line="498"/>
                <declaration name="tmpDiagDimMinusOne" type="int" line="499"/>
                <declaration name="tmpVal" type="double" line="500"/>
                <scope line="501">
                    <scope line="502"/>
                </scope>
                <declaration name="tmpNorm1" type="double" line="506"/>
                <declaration name="tmpMainDiagonal" type="double[]" line="507"/>
                <declaration name="tmpOffDiagonal" type="double[]" line="508"/>
                <declaration name="exshift" type="double" line="509"/>
                <declaration name="p" type="double" line="510"/>
                <declaration name="w" type="double" line="511"/>
                <declaration name="tmpIterCount" type="int" line="512"/>
                <declaration name="tmpMainIterIndex" type="int" line="513"/>
                <scope line="514">
                    <declaration name="l" type="int" line="515"/>
                    <scope line="516">
                        <scope line="518"/>
                        <scope line="521"/>
                    </scope>
                    <scope line="526"/>
                    <scope line="533">
                        <scope line="541">
                            <scope line="542"/>
                            <scope line="545"/>
                            <scope line="550"/>
                            <scope line="562"/>
                            <scope line="567"/>
                            <scope line="572"/>
                        </scope>
                        <scope line="578"/>
                    </scope>
                    <scope line="587">
                        <scope line="591"/>
                        <scope line="595">
                            <scope line="597"/>
                        </scope>
                        <scope line="604">
                            <scope line="607">
                                <scope line="609"/>
                                <scope line="613"/>
                            </scope>
                        </scope>
                        <declaration name="m" type="int" line="621"/>
                        <scope line="622">
                            <scope line="633"/>
                            <scope line="636"/>
                        </scope>
                        <scope line="641">
                            <scope line="643"/>
                        </scope>
                        <scope line="647">
                            <declaration name="notlast" type="boolean" line="648"/>
                            <scope line="649">
                                <scope line="654"/>
                            </scope>
                            <scope line="662"/>
                            <scope line="665">
                                <scope line="666"/>
                                <scope line="669"/>
                                <scope line="678">
                                    <scope line="680"/>
                                </scope>
                                <scope line="687">
                                    <scope line="689"/>
                                </scope>
                                <scope line="696">
                                    <scope line="698"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="709"/>
            </method>
            <declaration name="multiplyBoth" type="PrimitiveMultiplyBoth" line="714"/>
            <declaration name="multiplyLeft" type="PrimitiveMultiplyLeft" line="715"/>
            <declaration name="multiplyRight" type="PrimitiveMultiplyRight" line="716"/>
            <declaration name="myColDim" type="int" line="717"/>
            <declaration name="myRowDim" type="int" line="718"/>
            <declaration name="myUtility" type="Array2D&lt;Double&gt;" line="719"/>
            <method name="PrimitiveDenseStore" type="constructor" line="720">
                <params>
                    <param name="anArray" type="double[]"/>
                </params>
            </method>
            <method name="PrimitiveDenseStore" type="constructor" line="729">
                <params>
                    <param name="aLength" type="int"/>
                </params>
            </method>
            <method name="PrimitiveDenseStore" type="constructor" line="738">
                <params>
                    <param name="aRowDim" type="int"/>
                    <param name="aColDim" type="int"/>
                </params>
            </method>
            <method name="PrimitiveDenseStore" type="constructor" line="747">
                <params>
                    <param name="aRowDim" type="int"/>
                    <param name="aColDim" type="int"/>
                    <param name="anArray" type="double[]"/>
                </params>
            </method>
            <method name="aggregateAll" type="Double" line="756">
                <params>
                    <param name="aggregator" type="Aggregator"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="757"/>
                <declaration name="tmpColDim" type="int" line="758"/>
                <declaration name="tmpMainAggr" type="AggregatorFunction&lt;Double&gt;" line="759"/>
                <scope line="760">
                    <anonymous_class line="761">
                        <method name="conquer" type="void" line="762">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                            <declaration name="tmpPartAggr" type="AggregatorFunction&lt;Double&gt;" line="763"/>
                            <scope line="765"/>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="761"/>
                </scope>
                <scope line="773"/>
            </method>
            <method name="applyCholesky" type="void" line="778">
                <params>
                    <param name="iterationPoint" type="int"/>
                    <param name="multipliers" type="SimpleArray<Double>"/>
                </params>
                <declaration name="tmpData" type="double[]" line="779"/>
                <declaration name="tmpColumn" type="double[]" line="780"/>
                <scope line="781">
                    <anonymous_class line="782">
                        <method name="conquer" type="void" line="783">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="782"/>
                </scope>
                <scope line="790"/>
            </method>
            <method name="applyLU" type="void" line="794">
                <params>
                    <param name="iterationPoint" type="int"/>
                    <param name="multipliers" type="SimpleArray<Double>"/>
                </params>
                <declaration name="tmpData" type="double[]" line="795"/>
                <declaration name="tmpColumn" type="double[]" line="796"/>
                <scope line="797">
                    <anonymous_class line="798">
                        <method name="conquer" type="void" line="799">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="798"/>
                </scope>
                <scope line="806"/>
            </method>
            <method name="asArray2D" type="Array2D<Double>" line="810"/>
            <method name="asList" type="Array1D<Double>" line="813"/>
            <method name="builder" type="MatrixStore.Builder<Double>" line="816"/>
            <method name="caxpy" type="void" line="819">
                <params>
                    <param name="aSclrA" type="double"/>
                    <param name="aColX" type="int"/>
                    <param name="aColY" type="int"/>
                    <param name="aFirstRow" type="int"/>
                </params>
            </method>
            <method name="caxpy" type="void" line="822">
                <params>
                    <param name="aSclrA" type="Double"/>
                    <param name="aColX" type="int"/>
                    <param name="aColY" type="int"/>
                    <param name="aFirstRow" type="int"/>
                </params>
            </method>
            <method name="computeInPlaceLU" type="Pivot" line="825">
                <declaration name="tmpRowDim" type="int" line="826"/>
                <declaration name="tmpColDim" type="int" line="827"/>
                <declaration name="tmpMinDim" type="int" line="828"/>
                <declaration name="retVal" type="Pivot" line="829"/>
                <declaration name="tmpData" type="double[]" line="830"/>
                <declaration name="tmpMultipliers" type="double[]" line="831"/>
                <scope line="832">
                    <declaration name="tmpPivotRow" type="int" line="833"/>
                    <scope line="834"/>
                    <scope line="838">
                        <declaration name="tmpIndex" type="int" line="839"/>
                        <declaration name="tmpDenominator" type="double" line="840"/>
                        <scope line="841"/>
                        <scope line="844"/>
                    </scope>
                    <scope line="848"/>
                </scope>
            </method>
            <method name="computeInPlaceSchur" type="Array1D<ComplexNumber>" line="854">
                <params>
                    <param name="aTransformationCollector" type="PhysicalStore<Double>"/>
                    <param name="eigenvalue" type="boolean"/>
                </params>
                <declaration name="tmpData" type="double[]" line="855"/>
                <declaration name="tmpCollectorData" type="double[]" line="856"/>
                <declaration name="tmpDiags" type="double[][]" line="858"/>
                <declaration name="aRawReal" type="double[]" line="859"/>
                <declaration name="aRawImag" type="double[]" line="860"/>
                <declaration name="tmpLength" type="int" line="861"/>
                <declaration name="retVal" type="SimpleArray.Complex" line="862"/>
                <declaration name="tmpRaw" type="ComplexNumber[]" line="863"/>
                <scope line="864"/>
            </method>
            <method name="conjugate" type="PrimitiveDenseStore" line="869"/>
            <method name="copy" type="PrimitiveDenseStore" line="872"/>
            <method name="countColumns" type="long" line="875"/>
            <method name="countRows" type="long" line="878"/>
            <method name="divideAndCopyColumn" type="void" line="881">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aDestination" type="SimpleArray<Double>"/>
                </params>
                <declaration name="tmpData" type="double[]" line="882"/>
                <declaration name="tmpRowDim" type="int" line="883"/>
                <declaration name="tmpDestination" type="double[]" line="884"/>
                <declaration name="tmpIndex" type="int" line="885"/>
                <declaration name="tmpDenominator" type="double" line="886"/>
                <scope line="887"/>
            </method>
            <method name="doubleValue" type="double" line="891">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="894">
                <params>
                    <param name="other" type="MatrixStore<Double>"/>
                    <param name="context" type="NumberContext"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="897">
                <params>
                    <param name="anObj" type="Object"/>
                </params>
                <scope line="898"/>
                <scope line="901"/>
            </method>
            <method name="exchangeColumns" type="void" line="905">
                <params>
                    <param name="aColA" type="int"/>
                    <param name="aColB" type="int"/>
                </params>
            </method>
            <method name="exchangeRows" type="void" line="908">
                <params>
                    <param name="aRowA" type="int"/>
                    <param name="aRowB" type="int"/>
                </params>
            </method>
            <method name="factory" type="PhysicalStore.Factory<Double,PrimitiveDenseStore>" line="911"/>
            <method name="fillByMultiplying" type="void" line="914">
                <params>
                    <param name="left" type="Access1D<Double>"/>
                    <param name="right" type="Access1D<Double>"/>
                </params>
                <declaration name="tmpComplexity" type="int" line="915"/>
                <declaration name="tmpProductData" type="double[]" line="916"/>
                <scope line="917"/>
                <scope line="920"/>
                <scope line="923"/>
            </method>
            <method name="fillColumn" type="void" line="927">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="Double"/>
                </params>
            </method>
            <method name="fillConjugated" type="void" line="930">
                <params>
                    <param name="source" type="Access2D<? extends Number>"/>
                </params>
            </method>
            <method name="fillDiagonal" type="void" line="933">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="Double"/>
                </params>
            </method>
            <method name="fillMatching" type="void" line="936">
                <params>
                    <param name="source" type="Access1D<? extends Number>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="937"/>
                <declaration name="tmpColDim" type="int" line="938"/>
                <scope line="939">
                    <anonymous_class line="940">
                        <method name="conquer" type="void" line="941">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="940"/>
                </scope>
                <scope line="948"/>
            </method>
            <method name="fillMatching" type="void" line="952">
                <params>
                    <param name="leftArg" type="Access1D<Double>"/>
                    <param name="func" type="BinaryFunction<Double>"/>
                    <param name="rightArg" type="Access1D<Double>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="953"/>
                <declaration name="tmpColDim" type="int" line="954"/>
                <scope line="955">
                    <anonymous_class line="956">
                        <method name="conquer" type="void" line="957">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="956"/>
                </scope>
                <scope line="964"/>
            </method>
            <method name="fillMatching" type="void" line="968">
                <params>
                    <param name="aLeftArg" type="Access1D<Double>"/>
                    <param name="aFunc" type="BinaryFunction<Double>"/>
                    <param name="aRightArg" type="Double"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="969"/>
                <declaration name="tmpColDim" type="int" line="970"/>
                <scope line="971">
                    <anonymous_class line="972">
                        <method name="conquer" type="void" line="973">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="972"/>
                </scope>
                <scope line="980"/>
            </method>
            <method name="fillMatching" type="void" line="984">
                <params>
                    <param name="aLeftArg" type="Double"/>
                    <param name="aFunc" type="BinaryFunction<Double>"/>
                    <param name="aRightArg" type="Access1D<Double>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="985"/>
                <declaration name="tmpColDim" type="int" line="986"/>
                <scope line="987">
                    <anonymous_class line="988">
                        <method name="conquer" type="void" line="989">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="988"/>
                </scope>
                <scope line="996"/>
            </method>
            <method name="fillRow" type="void" line="1000">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="Double"/>
                </params>
            </method>
            <method name="fillTransposed" type="void" line="1003">
                <params>
                    <param name="source" type="Access2D<? extends Number>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1004"/>
                <declaration name="tmpColDim" type="int" line="1005"/>
                <scope line="1006">
                    <anonymous_class line="1007">
                        <method name="conquer" type="void" line="1008">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1007"/>
                </scope>
                <scope line="1015"/>
            </method>
            <method name="generateApplyAndCopyHouseholderColumn" type="boolean" line="1019">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aDestination" type="Householder<Double>"/>
                </params>
            </method>
            <method name="generateApplyAndCopyHouseholderRow" type="boolean" line="1022">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aDestination" type="Householder<Double>"/>
                </params>
            </method>
            <method name="get" type="Double" line="1025">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                </params>
            </method>
            <method name="getColDim" type="int" line="1028"/>
            <method name="getIndexOfLargestInColumn" type="int" line="1031">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                </params>
            </method>
            <method name="getMaxDim" type="int" line="1034"/>
            <method name="getMinDim" type="int" line="1037"/>
            <method name="getRowDim" type="int" line="1040"/>
            <method name="hashCode" type="int" line="1043"/>
            <method name="isAbsolute" type="boolean" line="1046">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="isAbsolute" type="boolean" line="1049">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isInfinite" type="boolean" line="1052">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isLowerLeftShaded" type="boolean" line="1055"/>
            <method name="isNaN" type="boolean" line="1058">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isPositive" type="boolean" line="1061">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="isPositive" type="boolean" line="1064">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isReal" type="boolean" line="1067">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="isReal" type="boolean" line="1070">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isUpperRightShaded" type="boolean" line="1073"/>
            <method name="isZero" type="boolean" line="1076">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="isZero" type="boolean" line="1079">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="maxpy" type="void" line="1082">
                <params>
                    <param name="aSclrA" type="Double"/>
                    <param name="aMtrxX" type="MatrixStore<Double>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1083"/>
                <declaration name="tmpColDim" type="int" line="1084"/>
                <scope line="1085">
                    <anonymous_class line="1086">
                        <method name="conquer" type="void" line="1087">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1086"/>
                </scope>
                <scope line="1094"/>
            </method>
            <method name="modifyAll" type="void" line="1098">
                <params>
                    <param name="aFunc" type="UnaryFunction<Double>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1099"/>
                <declaration name="tmpColDim" type="int" line="1100"/>
                <scope line="1101">
                    <anonymous_class line="1102">
                        <method name="conquer" type="void" line="1103">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1102"/>
                </scope>
                <scope line="1110"/>
            </method>
            <method name="modifyColumn" type="void" line="1114">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aFunc" type="UnaryFunction<Double>"/>
                </params>
            </method>
            <method name="modifyColumn" type="void" line="1117">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="function" type="UnaryFunction<Double>"/>
                </params>
            </method>
            <method name="modifyDiagonal" type="void" line="1120">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aFunc" type="UnaryFunction<Double>"/>
                </params>
            </method>
            <method name="modifyDiagonal" type="void" line="1123">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="function" type="UnaryFunction<Double>"/>
                </params>
            </method>
            <method name="modifyOne" type="void" line="1126">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aFunc" type="UnaryFunction<Double>"/>
                </params>
                <declaration name="tmpValue" type="double" line="1127"/>
            </method>
            <method name="modifyRow" type="void" line="1131">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aFunc" type="UnaryFunction<Double>"/>
                </params>
            </method>
            <method name="modifyRow" type="void" line="1134">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="function" type="UnaryFunction<Double>"/>
                </params>
            </method>
            <method name="multiplyLeft" type="MatrixStore<Double>" line="1137">
                <params>
                    <param name="left" type="Access1D<Double>"/>
                </params>
                <declaration name="retVal" type="PrimitiveDenseStore" line="1138"/>
            </method>
            <method name="multiplyRight" type="MatrixStore<Double>" line="1142">
                <params>
                    <param name="right" type="Access1D<Double>"/>
                </params>
                <declaration name="retVal" type="PrimitiveDenseStore" line="1143"/>
            </method>
            <method name="negateColumn" type="void" line="1147">
                <params>
                    <param name="aCol" type="int"/>
                </params>
            </method>
            <method name="raxpy" type="void" line="1150">
                <params>
                    <param name="aSclrA" type="Double"/>
                    <param name="aRowX" type="int"/>
                    <param name="aRowY" type="int"/>
                    <param name="aFirstCol" type="int"/>
                </params>
            </method>
            <method name="rotateRight" type="void" line="1153">
                <params>
                    <param name="aLow" type="int"/>
                    <param name="aHigh" type="int"/>
                    <param name="aCos" type="double"/>
                    <param name="aSin" type="double"/>
                </params>
            </method>
            <method name="set" type="void" line="1156">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="double"/>
                </params>
            </method>
            <method name="set" type="void" line="1159">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="Number"/>
                </params>
            </method>
            <method name="setToIdentity" type="void" line="1162">
                <params>
                    <param name="aCol" type="int"/>
                </params>
            </method>
            <method name="substituteBackwards" type="void" line="1166">
                <params>
                    <param name="aBody" type="Access2D<Double>"/>
                    <param name="conjugated" type="boolean"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1167"/>
                <declaration name="tmpColDim" type="int" line="1168"/>
                <scope line="1169">
                    <anonymous_class line="1170">
                        <method name="conquer" type="void" line="1171">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1170"/>
                </scope>
                <scope line="1178"/>
            </method>
            <method name="substituteForwards" type="void" line="1182">
                <params>
                    <param name="aBody" type="Access2D<Double>"/>
                    <param name="onesOnDiagonal" type="boolean"/>
                    <param name="zerosAboveDiagonal" type="boolean"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1183"/>
                <declaration name="tmpColDim" type="int" line="1184"/>
                <scope line="1185">
                    <anonymous_class line="1186">
                        <method name="conquer" type="void" line="1187">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1186"/>
                </scope>
                <scope line="1194"/>
            </method>
            <method name="toScalar" type="PrimitiveScalar" line="1198">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="toString" type="String" line="1201"/>
            <method name="transformLeft" type="void" line="1204">
                <params>
                    <param name="aTransf" type="Householder<Double>"/>
                    <param name="aFirstCol" type="int"/>
                </params>
                <declaration name="tmpTransf" type="Householder.Primitive" line="1205"/>
                <declaration name="tmpData" type="double[]" line="1206"/>
                <declaration name="tmpRowDim" type="int" line="1207"/>
                <declaration name="tmpColDim" type="int" line="1208"/>
                <scope line="1209">
                    <anonymous_class line="1210">
                        <method name="conquer" type="void" line="1211">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1210"/>
                </scope>
                <scope line="1218"/>
            </method>
            <method name="transformLeft" type="void" line="1222">
                <params>
                    <param name="aTransf" type="Rotation<Double>"/>
                </params>
                <declaration name="tmpTransf" type="Rotation.Primitive" line="1223"/>
                <declaration name="tmpLow" type="int" line="1224"/>
                <declaration name="tmpHigh" type="int" line="1225"/>
                <scope line="1226">
                    <scope line="1227"/>
                    <scope line="1230"/>
                </scope>
                <scope line="1234">
                    <scope line="1235"/>
                    <scope line="1238"/>
                    <scope line="1241"/>
                </scope>
            </method>
            <method name="transformRight" type="void" line="1246">
                <params>
                    <param name="aTransf" type="Householder<Double>"/>
                    <param name="aFirstRow" type="int"/>
                </params>
                <declaration name="tmpTransf" type="Householder.Primitive" line="1247"/>
                <declaration name="tmpData" type="double[]" line="1248"/>
                <declaration name="tmpRowDim" type="int" line="1249"/>
                <declaration name="tmpColDim" type="int" line="1250"/>
                <scope line="1251">
                    <anonymous_class line="1252">
                        <method name="conquer" type="void" line="1253">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1252"/>
                </scope>
                <scope line="1260"/>
            </method>
            <method name="transformRight" type="void" line="1264">
                <params>
                    <param name="aTransf" type="Rotation<Double>"/>
                </params>
                <declaration name="tmpTransf" type="Rotation.Primitive" line="1265"/>
                <declaration name="tmpLow" type="int" line="1266"/>
                <declaration name="tmpHigh" type="int" line="1267"/>
                <scope line="1268">
                    <scope line="1269"/>
                    <scope line="1272"/>
                </scope>
                <scope line="1276">
                    <scope line="1277"/>
                    <scope line="1280"/>
                    <scope line="1283"/>
                </scope>
            </method>
            <method name="transformSymmetric" type="void" line="1288">
                <params>
                    <param name="aTransf" type="Householder<Double>"/>
                </params>
            </method>
            <method name="transpose" type="PrimitiveDenseStore" line="1291">
                <declaration name="retVal" type="PrimitiveDenseStore" line="1292"/>
            </method>
            <method name="tred2" type="void" line="1296">
                <params>
                    <param name="mainDiagonal" type="SimpleArray<Double>"/>
                    <param name="offDiagonal" type="SimpleArray<Double>"/>
                    <param name="yesvecs" type="boolean"/>
                </params>
            </method>
            <method name="visitAll" type="void" line="1299">
                <params>
                    <param name="visitor" type="VoidFunction<Double>"/>
                </params>
            </method>
            <method name="visitColumn" type="void" line="1302">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="visitor" type="VoidFunction<Double>"/>
                </params>
            </method>
            <method name="visitColumn" type="void" line="1305">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="visitor" type="VoidFunction<Double>"/>
                </params>
            </method>
            <method name="visitDiagonal" type="void" line="1308">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="visitor" type="VoidFunction<Double>"/>
                </params>
            </method>
            <method name="visitDiagonal" type="void" line="1311">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="visitor" type="VoidFunction<Double>"/>
                </params>
            </method>
            <method name="visitRow" type="void" line="1314">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="visitor" type="VoidFunction<Double>"/>
                </params>
            </method>
            <method name="visitRow" type="void" line="1317">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="visitor" type="VoidFunction<Double>"/>
                </params>
            </method>
        </class>
    </source>