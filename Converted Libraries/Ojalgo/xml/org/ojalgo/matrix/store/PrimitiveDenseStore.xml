<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.store">
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="java.util.List"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.access.AccessUtils"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.array.Array2D"/>
        <import package="org.ojalgo.array.BasicArray"/>
        <import package="org.ojalgo.array.ComplexArray"/>
        <import package="org.ojalgo.array.PrimitiveArray"/>
        <import package="org.ojalgo.concurrent.DivideAndConquer"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.FunctionSet"/>
        <import package="org.ojalgo.function.PrimitiveFunction"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.VoidFunction"/>
        <import package="org.ojalgo.function.aggregator.Aggregator"/>
        <import package="org.ojalgo.function.aggregator.AggregatorCollection"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.function.aggregator.PrimitiveAggregator"/>
        <import package="org.ojalgo.machine.JavaType"/>
        <import package="org.ojalgo.machine.MemoryEstimator"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.decomposition.DecompositionStore"/>
        <import package="org.ojalgo.matrix.decomposition.LUDecomposition.Pivot"/>
        <import package="org.ojalgo.matrix.store.operation"/>
        <import package="org.ojalgo.matrix.transformation.Householder"/>
        <import package="org.ojalgo.matrix.transformation.Rotation"/>
        <import package="org.ojalgo.random.RandomNumber"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.PrimitiveScalar"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="PrimitiveDenseStore" line="62">
            <extends class="PrimitiveArray"/>
            <implements interface="PhysicalStore">
                <type_params>
                    <type_param name="Double"/>
                </type_params>
            </implements>
            <implements interface="DecompositionStore">
                <type_params>
                    <type_param name="Double"/>
                </type_params>
            </implements>
            <javadoc line="62">
                A {@linkplain Double} (actually double) implementation of {@linkplain PhysicalStore}.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <interface name="PrimitiveMultiplyBoth">
                <method name="invoke" type="void" line="71"/>
            </interface>
            <interface name="PrimitiveMultiplyLeft">
                <method name="invoke" type="void" line="77"/>
            </interface>
            <interface name="PrimitiveMultiplyRight">
                <method name="invoke" type="void" line="83"/>
            </interface>
            <method name="cast" type="PrimitiveDenseStore" line="87">
                <params>
                    <param name="mtrx" type="Access1D&lt;Double&gt;"/>
                </params>
                <scope line="88"/>
                <scope line="90"/>
                <scope line="92"/>
            </method>
            <method name="cast" type="Householder.Primitive" line="97">
                <params>
                    <param name="aTransf" type="Householder&lt;Double&gt;"/>
                </params>
                <scope line="98"/>
                <scope line="100"/>
                <scope line="102"/>
            </method>
            <method name="cast" type="Rotation.Primitive" line="107">
                <params>
                    <param name="aTransf" type="Rotation&lt;Double&gt;"/>
                </params>
                <scope line="108"/>
                <scope line="110"/>
            </method>
            <method name="doAfter" type="void" line="116">
                <params>
                    <param name="aMtrxH" type="double[]"/>
                    <param name="aMtrxV" type="double[]"/>
                    <param name="tmpMainDiagonal" type="double[]"/>
                    <param name="tmpOffDiagonal" type="double[]"/>
                    <param name="r" type="double"/>
                    <param name="s" type="double"/>
                    <param name="z" type="double"/>
                    <param name="aNorm1" type="double"/>
                </params>
                <comment line="122">
                    BasicLogger.logDebug(&quot;r={}, s={}, z={}&quot;, r, s, z);                    
                </comment>
                <comment line="136">
                    Real vector                    
                </comment>
                <comment line="158">
                    Solve real equations                    
                </comment>
                <comment line="172">
                    Overflow control                    
                </comment>
                <comment line="182">
                    Complex vector                    
                </comment>
                <comment line="186">
                    Last vector component imaginary so matrix is triangular                    
                </comment>
                <comment line="228">
                    Solve complex equations                    
                </comment>
                <comment line="263">
                    Overflow control                    
                </comment>
                <comment line="276">
                    Back transformation to get eigenvectors of original matrix                    
                </comment>
                <declaration name="tmpDiagDim" type="int" line="118"/>
                <declaration name="tmpDiagDimMinusOne" type="int" line="119"/>
                <declaration name="p" type="double" line="123"/>
                <declaration name="q" type="double" line="124"/>
                <declaration name="t" type="double" line="125"/>
                <declaration name="w" type="double" line="126"/>
                <declaration name="x" type="double" line="127"/>
                <declaration name="y" type="double" line="128"/>
                <scope line="130">
                    <scope line="136">
                        <declaration name="l" type="int" line="137"/>
                        <scope line="139">
                            <scope line="142"/>
                            <scope line="145"/>
                            <scope line="148">
                                <scope line="150">
                                    <scope line="151"/>
                                    <scope line="153"/>
                                </scope>
                                <scope line="158">
                                    <scope line="164"/>
                                    <scope line="166"/>
                                </scope>
                                <scope line="173">
                                    <scope line="174"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="182">
                        <declaration name="l" type="int" line="183"/>
                        <scope line="186"/>
                        <scope line="189">
                            <declaration name="tmpX" type="ComplexNumber" line="191"/>
                            <declaration name="tmpY" type="ComplexNumber" line="192"/>
                            <declaration name="tmpZ" type="ComplexNumber" line="194"/>
                        </scope>
                        <scope line="201">
                            <declaration name="ra" type="double" line="202"/>
                            <scope line="205"/>
                            <scope line="211"/>
                            <scope line="215">
                                <scope line="217">
                                    <declaration name="tmpX" type="ComplexNumber" line="218"/>
                                    <declaration name="tmpY" type="ComplexNumber" line="219"/>
                                    <declaration name="tmpZ" type="ComplexNumber" line="221"/>
                                </scope>
                                <scope line="225">
                                    <scope line="232"/>
                                    <declaration name="tmpX" type="ComplexNumber" line="236"/>
                                    <declaration name="tmpY" type="ComplexNumber" line="237"/>
                                    <declaration name="tmpZ" type="ComplexNumber" line="239"/>
                                    <scope line="244"/>
                                    <scope line="250">
                                        <declaration name="tmpX1" type="ComplexNumber" line="251"/>
                                        <declaration name="tmpY1" type="ComplexNumber" line="253"/>
                                        <declaration name="tmpZ1" type="ComplexNumber" line="255"/>
                                    </scope>
                                </scope>
                                <scope line="264">
                                    <scope line="265"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="276">
                    <scope line="277">
                        <scope line="279"/>
                    </scope>
                </scope>
            </method>
            <method name="doHessenberg" type="int" line="287">
                <params>
                    <param name="aMtrxH" type="double[]"/>
                    <param name="aMtrxV" type="double[]"/>
                </params>
                <comment line="297">
                    Scale column.                    
                </comment>
                <comment line="305">
                    Compute Householder transformation.                    
                </comment>
                <comment line="318">
                    Apply Householder similarity transformation
                     H = (I-u*u&apos;/h)*H*(I-u*u&apos;)/h)                    
                </comment>
                <comment line="347">
                    BasicLogger.logDebug(&quot;Jama H&quot;, new PrimitiveDenseStore(tmpDiagDim, tmpDiagDim, aMtrxH));                    
                </comment>
                <comment line="349">
                    Här borde Hessenberg vara klar
                     Nedan börjar uträkningen av Q                    
                </comment>
                <comment line="352">
                    Accumulate transformations (Algol&apos;s ortran).                    
                </comment>
                <comment line="364">
                    Double division avoids possible underflow                    
                </comment>
                <comment line="371">
                    BasicLogger.logDebug(&quot;Iter V&quot;, new PrimitiveDenseStore(tmpDiagDim, tmpDiagDim, aMtrxV));                    
                </comment>
                <comment line="375">
                    BasicLogger.logDebug(&quot;Jama V&quot;, new PrimitiveDenseStore(tmpDiagDim, tmpDiagDim, aMtrxV));                    
                </comment>
                <declaration name="tmpDiagDim" type="int" line="289"/>
                <declaration name="tmpDiagDimMinusTwo" type="int" line="290"/>
                <declaration name="tmpWorkCopy" type="double[]" line="292"/>
                <scope line="294">
                    <declaration name="tmpColNorm1" type="double" line="297"/>
                    <scope line="298"/>
                    <scope line="302">
                        <declaration name="tmpInvBeta" type="double" line="305"/>
                        <scope line="306"/>
                        <declaration name="g" type="double" line="310"/>
                        <scope line="311"/>
                        <scope line="319">
                            <declaration name="f" type="double" line="320"/>
                            <scope line="321"/>
                            <scope line="325"/>
                        </scope>
                        <scope line="330">
                            <declaration name="f" type="double" line="331"/>
                            <scope line="332"/>
                            <scope line="336"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="352">
                    <declaration name="tmpIndex" type="int" line="353"/>
                    <scope line="354">
                        <scope line="355"/>
                        <scope line="358">
                            <declaration name="g" type="double" line="359"/>
                            <scope line="360"/>
                            <scope line="365"/>
                        </scope>
                    </scope>
                    <scope line="369"/>
                </scope>
            </method>
            <method name="doSchur" type="double[][]" line="379">
                <params>
                    <param name="aMtrxH" type="double[]"/>
                    <param name="aMtrxV" type="double[]"/>
                    <param name="allTheWay" type="boolean"/>
                </params>
                <comment line="385">
                    Store roots isolated by balanc and compute matrix norm                    
                </comment>
                <comment line="401">
                    Outer loop over eigenvalue index                    
                </comment>
                <comment line="406">
                    Look for single small sub-diagonal element                    
                </comment>
                <comment line="419">
                    Check for convergence
                     One root found                    
                </comment>
                <comment line="428">
                    Two roots found                    
                </comment>
                <comment line="439">
                    Real pair                    
                </comment>
                <comment line="461">
                    Row modification                    
                </comment>
                <comment line="468">
                    Column modification                    
                </comment>
                <comment line="475">
                    Accumulate transformations                    
                </comment>
                <comment line="482">
                    Complex pair                    
                </comment>
                <comment line="492">
                    No convergence yet                    
                </comment>
                <comment line="495">
                    Form shift                    
                </comment>
                <comment line="504">
                    Wilkinson&apos;s original ad hoc shift                    
                </comment>
                <comment line="516">
                    MATLAB&apos;s new ad hoc shift                    
                </comment>
                <comment line="534">
                    (Could check iteration count here.)                    
                </comment>
                <comment line="536">
                    Look for two consecutive small sub-diagonal elements                    
                </comment>
                <comment line="566">
                    Double QR step involving rows l:n and columns m:n                    
                </comment>
                <comment line="599">
                    Row modification                    
                </comment>
                <comment line="610">
                    Column modification                    
                </comment>
                <comment line="621">
                    Accumulate transformations                    
                </comment>
                <comment line="631">
                    (s != 0)                    
                </comment>
                <comment line="632">
                    k loop                    
                </comment>
                <comment line="633">
                    check convergence                    
                </comment>
                <comment line="634">
                    while (n &gt;= low)                    
                </comment>
                <comment line="636">
                    Backsubstitute to find vectors of upper triangular form                    
                </comment>
                <declaration name="tmpDiagDim" type="int" line="381"/>
                <declaration name="tmpDiagDimMinusOne" type="int" line="382"/>
                <declaration name="tmpVal" type="double" line="385"/>
                <scope line="386">
                    <scope line="387"/>
                </scope>
                <declaration name="tmpNorm1" type="double" line="391"/>
                <declaration name="tmpMainDiagonal" type="double[]" line="393"/>
                <declaration name="tmpOffDiagonal" type="double[]" line="394"/>
                <declaration name="exshift" type="double" line="396"/>
                <declaration name="p" type="double" line="397"/>
                <declaration name="w" type="double" line="399"/>
                <declaration name="tmpIterCount" type="int" line="401"/>
                <declaration name="tmpMainIterIndex" type="int" line="402"/>
                <scope line="403">
                    <declaration name="l" type="int" line="406"/>
                    <scope line="407">
                        <scope line="409"/>
                        <scope line="412"/>
                    </scope>
                    <scope line="420"/>
                    <scope line="428">
                        <scope line="439">
                            <scope line="440"/>
                            <scope line="442"/>
                            <scope line="447"/>
                            <scope line="461"/>
                            <scope line="468"/>
                            <scope line="475"/>
                        </scope>
                        <scope line="482"/>
                    </scope>
                    <scope line="492">
                        <scope line="498"/>
                        <scope line="504">
                            <scope line="506"/>
                        </scope>
                        <scope line="516">
                            <scope line="519">
                                <scope line="521"/>
                                <scope line="525"/>
                            </scope>
                        </scope>
                        <declaration name="m" type="int" line="536"/>
                        <scope line="537">
                            <scope line="548"/>
                            <scope line="552"/>
                        </scope>
                        <scope line="558">
                            <scope line="560"/>
                        </scope>
                        <scope line="566">
                            <declaration name="notlast" type="boolean" line="567"/>
                            <scope line="568">
                                <scope line="573"/>
                            </scope>
                            <scope line="582"/>
                            <scope line="585">
                                <scope line="586"/>
                                <scope line="588"/>
                                <scope line="599">
                                    <scope line="601"/>
                                </scope>
                                <scope line="610">
                                    <scope line="612"/>
                                </scope>
                                <scope line="621">
                                    <scope line="623"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="636"/>
            </method>
            <declaration name="FACTORY" type="DecompositionStore.Factory&amp;lt;Double,PrimitiveDenseStore&amp;gt;" line="643"/>
            <anonymous_class line="643">
                <method name="aggregator" type="AggregatorCollection&lt;Double&gt;" line="645"/>
                <method name="columns" type="PrimitiveDenseStore" line="649">
                    <params>
                        <param name="source" type="Access1D&lt;?&gt;"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="651"/>
                    <declaration name="tmpColDim" type="int" line="652"/>
                    <declaration name="tmpData" type="double[]" line="654"/>
                    <declaration name="tmpColumn" type="Access1D&amp;lt;?&amp;gt;" line="656"/>
                    <scope line="657">
                        <scope line="659"/>
                    </scope>
                </method>
                <method name="columns" type="PrimitiveDenseStore" line="667">
                    <params>
                        <param name="source" type="double[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="669"/>
                    <declaration name="tmpColDim" type="int" line="670"/>
                    <declaration name="tmpData" type="double[]" line="672"/>
                    <declaration name="tmpColumn" type="double[]" line="674"/>
                    <scope line="675">
                        <scope line="677"/>
                    </scope>
                </method>
                <method name="columns" type="PrimitiveDenseStore" line="685">
                    <params>
                        <param name="source" type="List&lt;? extends Number&gt;"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="687"/>
                    <declaration name="tmpColDim" type="int" line="688"/>
                    <declaration name="tmpData" type="double[]" line="690"/>
                    <declaration name="tmpColumn" type="List&amp;lt;? extends Number&amp;gt;" line="692"/>
                    <scope line="693">
                        <scope line="695"/>
                    </scope>
                </method>
                <method name="columns" type="PrimitiveDenseStore" line="703">
                    <params>
                        <param name="source" type="Number[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="705"/>
                    <declaration name="tmpColDim" type="int" line="706"/>
                    <declaration name="tmpData" type="double[]" line="708"/>
                    <declaration name="tmpColumn" type="Number[]" line="710"/>
                    <scope line="711">
                        <scope line="713"/>
                    </scope>
                </method>
                <method name="conjugate" type="PrimitiveDenseStore" line="721">
                    <params>
                        <param name="source" type="Access2D&lt;?&gt;"/>
                    </params>
                </method>
                <method name="copy" type="PrimitiveDenseStore" line="725">
                    <params>
                        <param name="source" type="Access2D&lt;?&gt;"/>
                    </params>
                    <declaration name="retVal" type="PrimitiveDenseStore" line="727"/>
                </method>
                <method name="function" type="FunctionSet&lt;Double&gt;" line="734"/>
                <method name="makeArray" type="PrimitiveArray" line="738">
                    <params>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <method name="makeEye" type="PrimitiveDenseStore" line="742">
                    <params>
                        <param name="rows" type="long"/>
                        <param name="columns" type="long"/>
                    </params>
                    <declaration name="retVal" type="PrimitiveDenseStore" line="744"/>
                </method>
                <method name="makeHouseholder" type="Householder.Primitive" line="751">
                    <params>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <method name="makeRandom" type="PrimitiveDenseStore" line="755">
                    <params>
                        <param name="rows" type="long"/>
                        <param name="columns" type="long"/>
                        <param name="distribution" type="RandomNumber"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="757"/>
                    <declaration name="tmpColDim" type="int" line="758"/>
                    <declaration name="tmpLength" type="int" line="760"/>
                    <declaration name="tmpData" type="double[]" line="762"/>
                    <scope line="764"/>
                </method>
                <method name="makeRotation" type="Rotation.Primitive" line="771">
                    <params>
                        <param name="low" type="int"/>
                        <param name="high" type="int"/>
                        <param name="cos" type="double"/>
                        <param name="sin" type="double"/>
                    </params>
                </method>
                <method name="makeRotation" type="Rotation.Primitive" line="775">
                    <params>
                        <param name="low" type="int"/>
                        <param name="high" type="int"/>
                        <param name="cos" type="Double"/>
                        <param name="sin" type="Double"/>
                    </params>
                </method>
                <method name="makeZero" type="PrimitiveDenseStore" line="779">
                    <params>
                        <param name="rows" type="long"/>
                        <param name="columns" type="long"/>
                    </params>
                </method>
                <method name="rows" type="PrimitiveDenseStore" line="783">
                    <params>
                        <param name="source" type="Access1D&lt;?&gt;"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="785"/>
                    <declaration name="tmpColDim" type="int" line="786"/>
                    <declaration name="tmpData" type="double[]" line="788"/>
                    <declaration name="tmpRow" type="Access1D&amp;lt;?&amp;gt;" line="790"/>
                    <scope line="791">
                        <scope line="793"/>
                    </scope>
                </method>
                <method name="rows" type="PrimitiveDenseStore" line="801">
                    <params>
                        <param name="source" type="double[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="803"/>
                    <declaration name="tmpColDim" type="int" line="804"/>
                    <declaration name="tmpData" type="double[]" line="806"/>
                    <declaration name="tmpRow" type="double[]" line="808"/>
                    <scope line="809">
                        <scope line="811"/>
                    </scope>
                </method>
                <method name="rows" type="PrimitiveDenseStore" line="819">
                    <params>
                        <param name="source" type="List&lt;? extends Number&gt;"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="821"/>
                    <declaration name="tmpColDim" type="int" line="822"/>
                    <declaration name="tmpData" type="double[]" line="824"/>
                    <declaration name="tmpRow" type="List&amp;lt;? extends Number&amp;gt;" line="826"/>
                    <scope line="827">
                        <scope line="829"/>
                    </scope>
                </method>
                <method name="rows" type="PrimitiveDenseStore" line="837">
                    <params>
                        <param name="source" type="Number[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="839"/>
                    <declaration name="tmpColDim" type="int" line="840"/>
                    <declaration name="tmpData" type="double[]" line="842"/>
                    <declaration name="tmpRow" type="Number[]" line="844"/>
                    <scope line="845">
                        <scope line="847"/>
                    </scope>
                </method>
                <method name="scalar" type="Scalar.Factory&lt;Double&gt;" line="855"/>
                <method name="transpose" type="PrimitiveDenseStore" line="859">
                    <params>
                        <param name="source" type="Access2D&lt;?&gt;"/>
                    </params>
                    <declaration name="retVal" type="PrimitiveDenseStore" line="861"/>
                </method>
            </anonymous_class>
            <declaration name="ELEMENT_SIZE" type="long" line="869"/>
            <declaration name="SHALLOW_SIZE" type="long" line="871"/>
            <declaration name="multiplyBoth" type="PrimitiveMultiplyBoth" line="873"/>
            <declaration name="multiplyLeft" type="PrimitiveMultiplyLeft" line="875"/>
            <declaration name="multiplyRight" type="PrimitiveMultiplyRight" line="876"/>
            <declaration name="myColDim" type="int" line="877"/>
            <declaration name="myRowDim" type="int" line="879"/>
            <declaration name="myUtility" type="Array2D&amp;lt;Double&amp;gt;" line="881"/>
            <method name="PrimitiveDenseStore" type="constructor" line="883">
                <params>
                    <param name="anArray" type="double[]"/>
                </params>
            </method>
            <method name="PrimitiveDenseStore" type="constructor" line="897">
                <params>
                    <param name="aLength" type="int"/>
                </params>
            </method>
            <method name="PrimitiveDenseStore" type="constructor" line="911">
                <params>
                    <param name="aRowDim" type="int"/>
                    <param name="aColDim" type="int"/>
                </params>
            </method>
            <method name="PrimitiveDenseStore" type="constructor" line="925">
                <params>
                    <param name="aRowDim" type="int"/>
                    <param name="aColDim" type="int"/>
                    <param name="anArray" type="double[]"/>
                </params>
            </method>
            <method name="add" type="MatrixStore&lt;Double&gt;" line="939">
                <params>
                    <param name="addend" type="MatrixStore&lt;Double&gt;"/>
                </params>
            </method>
            <method name="aggregateAll" type="Double" line="943">
                <params>
                    <param name="aggregator" type="Aggregator"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="945"/>
                <declaration name="tmpColDim" type="int" line="946"/>
                <declaration name="tmpMainAggr" type="AggregatorFunction&amp;lt;Double&amp;gt;" line="948"/>
                <scope line="950">
                    <anonymous_class line="952">
                        <method name="conquer" type="void" line="955">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                            <declaration name="tmpPartAggr" type="AggregatorFunction&amp;lt;Double&amp;gt;" line="957"/>
                            <scope line="961"/>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="952"/>
                </scope>
                <scope line="969"/>
            </method>
            <method name="applyCholesky" type="void" line="977">
                <params>
                    <param name="iterationPoint" type="int"/>
                    <param name="multipliers" type="BasicArray&lt;Double&gt;"/>
                </params>
                <declaration name="tmpData" type="double[]" line="979"/>
                <declaration name="tmpColumn" type="double[]" line="980"/>
                <scope line="982">
                    <anonymous_class line="984">
                        <method name="conquer" type="void" line="987">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="984"/>
                </scope>
                <scope line="994"/>
            </method>
            <method name="applyLU" type="void" line="1000">
                <params>
                    <param name="iterationPoint" type="int"/>
                    <param name="multipliers" type="BasicArray&lt;Double&gt;"/>
                </params>
                <declaration name="tmpData" type="double[]" line="1002"/>
                <declaration name="tmpColumn" type="double[]" line="1003"/>
                <scope line="1005">
                    <anonymous_class line="1007">
                        <method name="conquer" type="void" line="1010">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1007"/>
                </scope>
                <scope line="1017"/>
            </method>
            <method name="asArray2D" type="Array2D&lt;Double&gt;" line="1023"/>
            <method name="asList" type="Array1D&lt;Double&gt;" line="1027"/>
            <method name="builder" type="MatrixStore.Builder&lt;Double&gt;" line="1031"/>
            <method name="caxpy" type="void" line="1035">
                <params>
                    <param name="aSclrA" type="double"/>
                    <param name="aColX" type="int"/>
                    <param name="aColY" type="int"/>
                    <param name="aFirstRow" type="int"/>
                </params>
            </method>
            <method name="caxpy" type="void" line="1039">
                <params>
                    <param name="aSclrA" type="Double"/>
                    <param name="aColX" type="int"/>
                    <param name="aColY" type="int"/>
                    <param name="aFirstRow" type="int"/>
                </params>
            </method>
            <method name="computeInPlaceLU" type="Pivot" line="1043">
                <comment line="1055">
                    Main loop - along the diagonal                    
                </comment>
                <comment line="1058">
                    Find next pivot row                    
                </comment>
                <comment line="1060">
                    Pivot?                    
                </comment>
                <comment line="1066">
                    Do the calculations...                    
                </comment>
                <comment line="1069">
                    Calculate multipliers and copy to local column
                     Current column, below the diagonal                    
                </comment>
                <comment line="1078">
                    Apply transformations to everything below and to the right of the pivot element
                                    ApplyLU.invoke(tmpData, tmpRowDim, ij + 1, tmpColDim, tmpMultipliers, ij);                    
                </comment>
                <declaration name="tmpRowDim" type="int" line="1045"/>
                <declaration name="tmpColDim" type="int" line="1046"/>
                <declaration name="tmpMinDim" type="int" line="1047"/>
                <declaration name="retVal" type="Pivot" line="1049"/>
                <declaration name="tmpData" type="double[]" line="1051"/>
                <declaration name="tmpMultipliers" type="double[]" line="1052"/>
                <scope line="1055">
                    <declaration name="tmpPivotRow" type="int" line="1058"/>
                    <scope line="1060"/>
                    <scope line="1066">
                        <declaration name="tmpIndex" type="int" line="1071"/>
                        <declaration name="tmpDenominator" type="double" line="1072"/>
                        <scope line="1073"/>
                        <scope line="1079"/>
                    </scope>
                    <scope line="1083"/>
                </scope>
            </method>
            <method name="computeInPlaceSchur" type="Array1D&lt;ComplexNumber&gt;" line="1093">
                <params>
                    <param name="aTransformationCollector" type="PhysicalStore&lt;Double&gt;"/>
                    <param name="eigenvalue" type="boolean"/>
                </params>
                <comment line="1096">
                    final PrimitiveDenseStore tmpThisCopy = this.copy();
                            final PrimitiveDenseStore tmpCollCopy = (PrimitiveDenseStore) aTransformationCollector.copy();
                    
                            tmpThisCopy.computeInPlaceHessenberg(true);                    
                </comment>
                <comment line="1101">
                    Actual                    
                </comment>
                <comment line="1109">
                    BasicLogger.logDebug(&quot;Schur Step&quot;, this);
                            BasicLogger.logDebug(&quot;Hessenberg&quot;, tmpThisCopy);                    
                </comment>
                <declaration name="tmpData" type="double[]" line="1102"/>
                <declaration name="tmpCollectorData" type="double[]" line="1104"/>
                <declaration name="tmpDiags" type="double[][]" line="1111"/>
                <declaration name="aRawReal" type="double[]" line="1112"/>
                <declaration name="aRawImag" type="double[]" line="1113"/>
                <declaration name="tmpLength" type="int" line="1114"/>
                <declaration name="retVal" type="ComplexArray" line="1116"/>
                <declaration name="tmpRaw" type="ComplexNumber[]" line="1117"/>
                <scope line="1119"/>
            </method>
            <method name="conjugate" type="MatrixStore&lt;Double&gt;" line="1126"/>
            <method name="copy" type="PrimitiveDenseStore" line="1130"/>
            <method name="countColumns" type="long" line="1134"/>
            <method name="countRows" type="long" line="1138"/>
            <method name="divideAndCopyColumn" type="void" line="1142">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aDestination" type="BasicArray&lt;Double&gt;"/>
                </params>
                <declaration name="tmpData" type="double[]" line="1144"/>
                <declaration name="tmpRowDim" type="int" line="1145"/>
                <declaration name="tmpDestination" type="double[]" line="1147"/>
                <declaration name="tmpIndex" type="int" line="1149"/>
                <declaration name="tmpDenominator" type="double" line="1150"/>
                <scope line="1152"/>
            </method>
            <method name="doubleValue" type="double" line="1157">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="1161">
                <params>
                    <param name="other" type="MatrixStore&lt;Double&gt;"/>
                    <param name="context" type="NumberContext"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="1167">
                <params>
                    <param name="anObj" type="Object"/>
                </params>
                <scope line="1168"/>
                <scope line="1170"/>
            </method>
            <method name="exchangeColumns" type="void" line="1175">
                <params>
                    <param name="aColA" type="int"/>
                    <param name="aColB" type="int"/>
                </params>
            </method>
            <method name="exchangeRows" type="void" line="1179">
                <params>
                    <param name="aRowA" type="int"/>
                    <param name="aRowB" type="int"/>
                </params>
            </method>
            <method name="factory" type="PhysicalStore.Factory&lt;Double,PrimitiveDenseStore&gt;" line="1183"/>
            <method name="fillByMultiplying" type="void" line="1187">
                <params>
                    <param name="left" type="Access1D&lt;Double&gt;"/>
                    <param name="right" type="Access1D&lt;Double&gt;"/>
                </params>
                <declaration name="tmpComplexity" type="int" line="1189"/>
                <declaration name="tmpProductData" type="double[]" line="1191"/>
                <scope line="1193"/>
                <scope line="1195"/>
                <scope line="1197"/>
            </method>
            <method name="fillColumn" type="void" line="1202">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="Double"/>
                </params>
            </method>
            <method name="fillConjugated" type="void" line="1206">
                <params>
                    <param name="source" type="Access2D&lt;? extends Number&gt;"/>
                </params>
            </method>
            <method name="fillDiagonal" type="void" line="1210">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="Double"/>
                </params>
            </method>
            <method name="fillMatching" type="void" line="1214">
                <params>
                    <param name="source" type="Access1D&lt;? extends Number&gt;"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1216"/>
                <declaration name="tmpColDim" type="int" line="1217"/>
                <scope line="1219">
                    <anonymous_class line="1221">
                        <method name="conquer" type="void" line="1224">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1221"/>
                </scope>
                <scope line="1232"/>
            </method>
            <method name="fillMatching" type="void" line="1238">
                <params>
                    <param name="leftArg" type="Access1D&lt;Double&gt;"/>
                    <param name="func" type="BinaryFunction&lt;Double&gt;"/>
                    <param name="rightArg" type="Access1D&lt;Double&gt;"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1240"/>
                <declaration name="tmpColDim" type="int" line="1241"/>
                <scope line="1243">
                    <anonymous_class line="1245">
                        <method name="conquer" type="void" line="1248">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1245"/>
                </scope>
                <scope line="1256"/>
            </method>
            <method name="fillMatching" type="void" line="1262">
                <params>
                    <param name="aLeftArg" type="Access1D&lt;Double&gt;"/>
                    <param name="aFunc" type="BinaryFunction&lt;Double&gt;"/>
                    <param name="aRightArg" type="Double"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1264"/>
                <declaration name="tmpColDim" type="int" line="1265"/>
                <scope line="1267">
                    <anonymous_class line="1269">
                        <method name="conquer" type="void" line="1272">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1269"/>
                </scope>
                <scope line="1280"/>
            </method>
            <method name="fillMatching" type="void" line="1286">
                <params>
                    <param name="aLeftArg" type="Double"/>
                    <param name="aFunc" type="BinaryFunction&lt;Double&gt;"/>
                    <param name="aRightArg" type="Access1D&lt;Double&gt;"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1288"/>
                <declaration name="tmpColDim" type="int" line="1289"/>
                <scope line="1291">
                    <anonymous_class line="1293">
                        <method name="conquer" type="void" line="1296">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1293"/>
                </scope>
                <scope line="1304"/>
            </method>
            <method name="fillRow" type="void" line="1310">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="Double"/>
                </params>
            </method>
            <method name="fillTransposed" type="void" line="1314">
                <params>
                    <param name="source" type="Access2D&lt;? extends Number&gt;"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1316"/>
                <declaration name="tmpColDim" type="int" line="1317"/>
                <scope line="1319">
                    <anonymous_class line="1321">
                        <method name="conquer" type="void" line="1324">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1321"/>
                </scope>
                <scope line="1332"/>
            </method>
            <method name="generateApplyAndCopyHouseholderColumn" type="boolean" line="1338">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aDestination" type="Householder&lt;Double&gt;"/>
                </params>
            </method>
            <method name="generateApplyAndCopyHouseholderRow" type="boolean" line="1342">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aDestination" type="Householder&lt;Double&gt;"/>
                </params>
            </method>
            <method name="get" type="Double" line="1346">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                </params>
            </method>
            <method name="getColDim" type="int" line="1350"/>
            <method name="getIndexOfLargestInColumn" type="int" line="1354">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                </params>
            </method>
            <method name="getMaxDim" type="int" line="1358"/>
            <method name="getMinDim" type="int" line="1362"/>
            <method name="getRowDim" type="int" line="1366"/>
            <method name="hashCode" type="int" line="1371"/>
            <method name="isAbsolute" type="boolean" line="1375">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isInfinite" type="boolean" line="1379">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isLowerLeftShaded" type="boolean" line="1383"/>
            <method name="isNaN" type="boolean" line="1387">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isPositive" type="boolean" line="1391">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isReal" type="boolean" line="1395">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isUpperRightShaded" type="boolean" line="1399"/>
            <method name="isZero" type="boolean" line="1403">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="maxpy" type="void" line="1407">
                <params>
                    <param name="aSclrA" type="Double"/>
                    <param name="aMtrxX" type="MatrixStore&lt;Double&gt;"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1409"/>
                <declaration name="tmpColDim" type="int" line="1410"/>
                <scope line="1412">
                    <anonymous_class line="1414">
                        <method name="conquer" type="void" line="1417">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1414"/>
                </scope>
                <scope line="1425"/>
            </method>
            <method name="modifyAll" type="void" line="1432">
                <params>
                    <param name="aFunc" type="UnaryFunction&lt;Double&gt;"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1434"/>
                <declaration name="tmpColDim" type="int" line="1435"/>
                <scope line="1437">
                    <anonymous_class line="1439">
                        <method name="conquer" type="void" line="1442">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1439"/>
                </scope>
                <scope line="1450"/>
            </method>
            <method name="modifyColumn" type="void" line="1456">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="function" type="UnaryFunction&lt;Double&gt;"/>
                </params>
            </method>
            <method name="modifyDiagonal" type="void" line="1460">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="function" type="UnaryFunction&lt;Double&gt;"/>
                </params>
            </method>
            <method name="modifyOne" type="void" line="1464">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="func" type="UnaryFunction&lt;Double&gt;"/>
                </params>
                <declaration name="tmpValue" type="double" line="1466"/>
            </method>
            <method name="modifyRow" type="void" line="1473">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="function" type="UnaryFunction&lt;Double&gt;"/>
                </params>
            </method>
            <method name="multiplyLeft" type="MatrixStore&lt;Double&gt;" line="1477">
                <params>
                    <param name="left" type="Access1D&lt;Double&gt;"/>
                </params>
                <declaration name="retVal" type="PrimitiveDenseStore" line="1479"/>
            </method>
            <method name="multiplyRight" type="MatrixStore&lt;Double&gt;" line="1486">
                <params>
                    <param name="right" type="Access1D&lt;Double&gt;"/>
                </params>
                <declaration name="retVal" type="PrimitiveDenseStore" line="1488"/>
            </method>
            <method name="negate" type="MatrixStore&lt;Double&gt;" line="1495"/>
            <method name="negateColumn" type="void" line="1499">
                <params>
                    <param name="aCol" type="int"/>
                </params>
            </method>
            <method name="raxpy" type="void" line="1503">
                <params>
                    <param name="aSclrA" type="Double"/>
                    <param name="aRowX" type="int"/>
                    <param name="aRowY" type="int"/>
                    <param name="aFirstCol" type="int"/>
                </params>
            </method>
            <method name="rotateRight" type="void" line="1507">
                <params>
                    <param name="aLow" type="int"/>
                    <param name="aHigh" type="int"/>
                    <param name="aCos" type="double"/>
                    <param name="aSin" type="double"/>
                </params>
            </method>
            <method name="scale" type="MatrixStore&lt;Double&gt;" line="1511">
                <params>
                    <param name="scalar" type="Double"/>
                </params>
            </method>
            <method name="set" type="void" line="1515">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="double"/>
                </params>
            </method>
            <method name="set" type="void" line="1519">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="Number"/>
                </params>
            </method>
            <method name="setToIdentity" type="void" line="1523">
                <params>
                    <param name="aCol" type="int"/>
                </params>
            </method>
            <method name="substituteBackwards" type="void" line="1528">
                <params>
                    <param name="aBody" type="Access2D&lt;Double&gt;"/>
                    <param name="conjugated" type="boolean"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1530"/>
                <declaration name="tmpColDim" type="int" line="1531"/>
                <scope line="1533">
                    <anonymous_class line="1535">
                        <method name="conquer" type="void" line="1538">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1535"/>
                </scope>
                <scope line="1546"/>
            </method>
            <method name="substituteForwards" type="void" line="1552">
                <params>
                    <param name="aBody" type="Access2D&lt;Double&gt;"/>
                    <param name="onesOnDiagonal" type="boolean"/>
                    <param name="zerosAboveDiagonal" type="boolean"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1554"/>
                <declaration name="tmpColDim" type="int" line="1555"/>
                <scope line="1557">
                    <anonymous_class line="1559">
                        <method name="conquer" type="void" line="1562">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1559"/>
                </scope>
                <scope line="1570"/>
            </method>
            <method name="subtract" type="MatrixStore&lt;Double&gt;" line="1576">
                <params>
                    <param name="subtrahend" type="MatrixStore&lt;Double&gt;"/>
                </params>
            </method>
            <method name="toScalar" type="PrimitiveScalar" line="1580">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="toString" type="String" line="1585"/>
            <method name="transformLeft" type="void" line="1589">
                <params>
                    <param name="aTransf" type="Householder&lt;Double&gt;"/>
                    <param name="aFirstCol" type="int"/>
                </params>
                <declaration name="tmpTransf" type="Householder.Primitive" line="1591"/>
                <declaration name="tmpData" type="double[]" line="1593"/>
                <declaration name="tmpRowDim" type="int" line="1595"/>
                <declaration name="tmpColDim" type="int" line="1596"/>
                <scope line="1598">
                    <anonymous_class line="1600">
                        <method name="conquer" type="void" line="1603">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1600"/>
                </scope>
                <scope line="1611"/>
            </method>
            <method name="transformLeft" type="void" line="1617">
                <params>
                    <param name="aTransf" type="Rotation&lt;Double&gt;"/>
                </params>
                <declaration name="tmpTransf" type="Rotation.Primitive" line="1619"/>
                <declaration name="tmpLow" type="int" line="1621"/>
                <declaration name="tmpHigh" type="int" line="1622"/>
                <scope line="1624">
                    <scope line="1625"/>
                    <scope line="1627"/>
                </scope>
                <scope line="1630">
                    <scope line="1631"/>
                    <scope line="1633"/>
                    <scope line="1635"/>
                </scope>
            </method>
            <method name="transformRight" type="void" line="1641">
                <params>
                    <param name="aTransf" type="Householder&lt;Double&gt;"/>
                    <param name="aFirstRow" type="int"/>
                </params>
                <declaration name="tmpTransf" type="Householder.Primitive" line="1643"/>
                <declaration name="tmpData" type="double[]" line="1645"/>
                <declaration name="tmpRowDim" type="int" line="1647"/>
                <declaration name="tmpColDim" type="int" line="1648"/>
                <scope line="1650">
                    <anonymous_class line="1652">
                        <method name="conquer" type="void" line="1655">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1652"/>
                </scope>
                <scope line="1663"/>
            </method>
            <method name="transformRight" type="void" line="1669">
                <params>
                    <param name="aTransf" type="Rotation&lt;Double&gt;"/>
                </params>
                <declaration name="tmpTransf" type="Rotation.Primitive" line="1671"/>
                <declaration name="tmpLow" type="int" line="1673"/>
                <declaration name="tmpHigh" type="int" line="1674"/>
                <scope line="1676">
                    <scope line="1677"/>
                    <scope line="1679"/>
                </scope>
                <scope line="1682">
                    <scope line="1683"/>
                    <scope line="1685"/>
                    <scope line="1687"/>
                </scope>
            </method>
            <method name="transformSymmetric" type="void" line="1693">
                <params>
                    <param name="aTransf" type="Householder&lt;Double&gt;"/>
                </params>
            </method>
            <method name="transpose" type="MatrixStore&lt;Double&gt;" line="1697"/>
            <method name="tred2" type="void" line="1701">
                <params>
                    <param name="mainDiagonal" type="BasicArray&lt;Double&gt;"/>
                    <param name="offDiagonal" type="BasicArray&lt;Double&gt;"/>
                    <param name="yesvecs" type="boolean"/>
                </params>
            </method>
            <method name="visitAll" type="void" line="1706">
                <params>
                    <param name="visitor" type="VoidFunction&lt;Double&gt;"/>
                </params>
            </method>
            <method name="visitColumn" type="void" line="1710">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="visitor" type="VoidFunction&lt;Double&gt;"/>
                </params>
            </method>
            <method name="visitDiagonal" type="void" line="1714">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="visitor" type="VoidFunction&lt;Double&gt;"/>
                </params>
            </method>
            <method name="visitRow" type="void" line="1718">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="visitor" type="VoidFunction&lt;Double&gt;"/>
                </params>
            </method>
        </class>
    </source>