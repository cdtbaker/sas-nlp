<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.store">
        <import package="org.ojalgo.function.ComplexFunction"/>
        <import package="java.util.List"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.access.AccessUtils"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.array.Array2D"/>
        <import package="org.ojalgo.array.ComplexArray"/>
        <import package="org.ojalgo.array.SimpleArray"/>
        <import package="org.ojalgo.concurrent.DivideAndConquer"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.ComplexFunction"/>
        <import package="org.ojalgo.function.FunctionSet"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.VoidFunction"/>
        <import package="org.ojalgo.function.aggregator.Aggregator"/>
        <import package="org.ojalgo.function.aggregator.AggregatorCollection"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.function.aggregator.ComplexAggregator"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.decomposition.DecompositionStore"/>
        <import package="org.ojalgo.matrix.store.operation"/>
        <import package="org.ojalgo.matrix.transformation.Householder"/>
        <import package="org.ojalgo.matrix.transformation.Rotation"/>
        <import package="org.ojalgo.random.RandomNumber"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="ComplexDenseStore" line="31">
            <extends class="ComplexArray"/>
            <implements interface="PhysicalStore">
                <type_params>
                    <type_param name="ComplexNumber"/>
                </type_params>
            </implements>
            <implements interface="DecompositionStore">
                <type_params>
                    <type_param name="ComplexNumber"/>
                </type_params>
            </implements>
            <javadoc line="31">
                A {@linkplain ComplexNumber} implementation of {@linkplain PhysicalStore}.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <interface name="ComplexMultiplyBoth">
                <method name="invoke" type="void" line="37"/>
            </interface>
            <interface name="ComplexMultiplyLeft">
                <method name="invoke" type="void" line="40"/>
            </interface>
            <interface name="ComplexMultiplyRight">
                <method name="invoke" type="void" line="43"/>
            </interface>
            <declaration name="FACTORY" type="DecompositionStore.Factory&lt;ComplexNumber,ComplexDenseStore&gt;" line="45"/>
            <anonymous_class line="45">
                <method name="aggregator" type="AggregatorCollection<ComplexNumber>" line="46"/>
                <method name="columns" type="ComplexDenseStore" line="49">
                    <params>
                        <param name="source" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="50"/>
                    <declaration name="tmpColDim" type="int" line="51"/>
                    <declaration name="tmpData" type="ComplexNumber[]" line="52"/>
                    <declaration name="tmpColumn" type="Access1D&lt;?&gt;" line="53"/>
                    <scope line="54">
                        <scope line="56"/>
                    </scope>
                </method>
                <method name="columns" type="ComplexDenseStore" line="62">
                    <params>
                        <param name="source" type="double[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="63"/>
                    <declaration name="tmpColDim" type="int" line="64"/>
                    <declaration name="tmpData" type="ComplexNumber[]" line="65"/>
                    <declaration name="tmpColumn" type="double[]" line="66"/>
                    <scope line="67">
                        <scope line="69"/>
                    </scope>
                </method>
                <method name="columns" type="ComplexDenseStore" line="75">
                    <params>
                        <param name="source" type="List<? extends Number>"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="76"/>
                    <declaration name="tmpColDim" type="int" line="77"/>
                    <declaration name="tmpData" type="ComplexNumber[]" line="78"/>
                    <declaration name="tmpColumn" type="List&lt;? extends Number&gt;" line="79"/>
                    <scope line="80">
                        <scope line="82"/>
                    </scope>
                </method>
                <method name="columns" type="ComplexDenseStore" line="88">
                    <params>
                        <param name="source" type="Number[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="89"/>
                    <declaration name="tmpColDim" type="int" line="90"/>
                    <declaration name="tmpData" type="ComplexNumber[]" line="91"/>
                    <declaration name="tmpColumn" type="Number[]" line="92"/>
                    <scope line="93">
                        <scope line="95"/>
                    </scope>
                </method>
                <method name="conjugate" type="ComplexDenseStore" line="101">
                    <params>
                        <param name="source" type="Access2D<?>"/>
                    </params>
                    <declaration name="retVal" type="ComplexDenseStore" line="102"/>
                </method>
                <method name="copy" type="ComplexDenseStore" line="106">
                    <params>
                        <param name="source" type="Access2D<?>"/>
                    </params>
                    <declaration name="retVal" type="ComplexDenseStore" line="107"/>
                </method>
                <method name="function" type="FunctionSet<ComplexNumber>" line="111"/>
                <javadoc line="114">
                    @deprecated Use {@link #aggregator()} instead                    
                </javadoc>
                <method name="getAggregatorCollection" type="AggregatorCollection<ComplexNumber>" line="117"/>
                <javadoc line="120">
                    @deprecated Use {@link #function()} instead                    
                </javadoc>
                <method name="getFunctionSet" type="FunctionSet<ComplexNumber>" line="123"/>
                <javadoc line="126">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getNumber" type="ComplexNumber" line="129">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <javadoc line="132">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getNumber" type="ComplexNumber" line="135">
                    <params>
                        <param name="value" type="Number"/>
                    </params>
                </method>
                <javadoc line="138">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getStaticOne" type="Scalar<ComplexNumber>" line="141"/>
                <javadoc line="144">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getStaticZero" type="Scalar<ComplexNumber>" line="147"/>
                <method name="makeArray" type="SimpleArray.Complex" line="150">
                    <params>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <method name="makeEye" type="ComplexDenseStore" line="153">
                    <params>
                        <param name="rows" type="long"/>
                        <param name="columns" type="long"/>
                    </params>
                    <declaration name="retVal" type="ComplexDenseStore" line="154"/>
                </method>
                <method name="makeHouseholder" type="Householder.Complex" line="158">
                    <params>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <method name="makeRandom" type="ComplexDenseStore" line="161">
                    <params>
                        <param name="rows" type="long"/>
                        <param name="columns" type="long"/>
                        <param name="distribution" type="RandomNumber"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="162"/>
                    <declaration name="tmpColDim" type="int" line="163"/>
                    <declaration name="tmpLength" type="int" line="164"/>
                    <declaration name="tmpData" type="ComplexNumber[]" line="165"/>
                    <scope line="166"/>
                </method>
                <method name="makeRotation" type="Rotation.Complex" line="171">
                    <params>
                        <param name="low" type="int"/>
                        <param name="high" type="int"/>
                        <param name="cos" type="ComplexNumber"/>
                        <param name="sin" type="ComplexNumber"/>
                    </params>
                </method>
                <method name="makeRotation" type="Rotation.Complex" line="174">
                    <params>
                        <param name="low" type="int"/>
                        <param name="high" type="int"/>
                        <param name="cos" type="double"/>
                        <param name="sin" type="double"/>
                    </params>
                </method>
                <method name="makeZero" type="ComplexDenseStore" line="177">
                    <params>
                        <param name="rows" type="long"/>
                        <param name="columns" type="long"/>
                    </params>
                </method>
                <method name="rows" type="ComplexDenseStore" line="180">
                    <params>
                        <param name="source" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="181"/>
                    <declaration name="tmpColDim" type="int" line="182"/>
                    <declaration name="tmpData" type="ComplexNumber[]" line="183"/>
                    <declaration name="tmpRow" type="Access1D&lt;?&gt;" line="184"/>
                    <scope line="185">
                        <scope line="187"/>
                    </scope>
                </method>
                <method name="rows" type="ComplexDenseStore" line="193">
                    <params>
                        <param name="source" type="double[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="194"/>
                    <declaration name="tmpColDim" type="int" line="195"/>
                    <declaration name="tmpData" type="ComplexNumber[]" line="196"/>
                    <declaration name="tmpRow" type="double[]" line="197"/>
                    <scope line="198">
                        <scope line="200"/>
                    </scope>
                </method>
                <method name="rows" type="ComplexDenseStore" line="206">
                    <params>
                        <param name="source" type="List<? extends Number>"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="207"/>
                    <declaration name="tmpColDim" type="int" line="208"/>
                    <declaration name="tmpData" type="ComplexNumber[]" line="209"/>
                    <declaration name="tmpRow" type="List&lt;? extends Number&gt;" line="210"/>
                    <scope line="211">
                        <scope line="213"/>
                    </scope>
                </method>
                <method name="rows" type="ComplexDenseStore" line="219">
                    <params>
                        <param name="source" type="Number[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="220"/>
                    <declaration name="tmpColDim" type="int" line="221"/>
                    <declaration name="tmpData" type="ComplexNumber[]" line="222"/>
                    <declaration name="tmpRow" type="Number[]" line="223"/>
                    <scope line="224">
                        <scope line="226"/>
                    </scope>
                </method>
                <method name="scalar" type="Scalar.Factory<ComplexNumber>" line="232"/>
                <javadoc line="235">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="toScalar" type="Scalar<ComplexNumber>" line="238">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <javadoc line="241">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="toScalar" type="Scalar<ComplexNumber>" line="244">
                    <params>
                        <param name="value" type="Number"/>
                    </params>
                </method>
                <method name="transpose" type="ComplexDenseStore" line="247">
                    <params>
                        <param name="source" type="Access2D<?>"/>
                    </params>
                    <declaration name="retVal" type="ComplexDenseStore" line="248"/>
                </method>
            </anonymous_class>
            <method name="cast" type="ComplexDenseStore" line="254">
                <params>
                    <param name="mtrx" type="Access1D<ComplexNumber>"/>
                </params>
                <scope line="255"/>
                <scope line="258"/>
                <scope line="261"/>
            </method>
            <method name="cast" type="Householder.Complex" line="265">
                <params>
                    <param name="aTransf" type="Householder<ComplexNumber>"/>
                </params>
                <scope line="266"/>
                <scope line="269"/>
                <scope line="272"/>
            </method>
            <method name="cast" type="Rotation.Complex" line="276">
                <params>
                    <param name="aTransf" type="Rotation<ComplexNumber>"/>
                </params>
                <scope line="277"/>
                <scope line="280"/>
            </method>
            <declaration name="multiplyBoth" type="ComplexMultiplyBoth" line="284"/>
            <declaration name="multiplyLeft" type="ComplexMultiplyLeft" line="285"/>
            <declaration name="multiplyRight" type="ComplexMultiplyRight" line="286"/>
            <declaration name="myColDim" type="int" line="287"/>
            <declaration name="myRowDim" type="int" line="288"/>
            <declaration name="myUtility" type="Array2D&lt;ComplexNumber&gt;" line="289"/>
            <method name="ComplexDenseStore" type="constructor" line="290">
                <params>
                    <param name="anArray" type="ComplexNumber[]"/>
                </params>
            </method>
            <method name="ComplexDenseStore" type="constructor" line="299">
                <params>
                    <param name="aLength" type="int"/>
                </params>
            </method>
            <method name="ComplexDenseStore" type="constructor" line="308">
                <params>
                    <param name="aRowDim" type="int"/>
                    <param name="aColDim" type="int"/>
                </params>
            </method>
            <method name="ComplexDenseStore" type="constructor" line="317">
                <params>
                    <param name="aRowDim" type="int"/>
                    <param name="aColDim" type="int"/>
                    <param name="anArray" type="ComplexNumber[]"/>
                </params>
            </method>
            <method name="aggregateAll" type="ComplexNumber" line="326">
                <params>
                    <param name="aggregator" type="Aggregator"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="327"/>
                <declaration name="tmpColDim" type="int" line="328"/>
                <declaration name="tmpMainAggr" type="AggregatorFunction&lt;ComplexNumber&gt;" line="329"/>
                <scope line="330">
                    <anonymous_class line="331">
                        <method name="conquer" type="void" line="332">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                            <declaration name="tmpPartAggr" type="AggregatorFunction&lt;ComplexNumber&gt;" line="333"/>
                            <scope line="335"/>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="331"/>
                </scope>
                <scope line="343"/>
            </method>
            <method name="applyCholesky" type="void" line="348">
                <params>
                    <param name="iterationPoint" type="int"/>
                    <param name="multipliers" type="SimpleArray<ComplexNumber>"/>
                </params>
                <declaration name="tmpData" type="ComplexNumber[]" line="349"/>
                <declaration name="tmpColumn" type="ComplexNumber[]" line="350"/>
                <scope line="351">
                    <anonymous_class line="352">
                        <method name="conquer" type="void" line="353">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="352"/>
                </scope>
                <scope line="360"/>
            </method>
            <method name="applyLU" type="void" line="364">
                <params>
                    <param name="iterationPoint" type="int"/>
                    <param name="multipliers" type="SimpleArray<ComplexNumber>"/>
                </params>
                <declaration name="tmpData" type="ComplexNumber[]" line="365"/>
                <declaration name="tmpColumn" type="ComplexNumber[]" line="366"/>
                <scope line="367">
                    <anonymous_class line="368">
                        <method name="conquer" type="void" line="369">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="368"/>
                </scope>
                <scope line="376"/>
            </method>
            <method name="asArray2D" type="Array2D<ComplexNumber>" line="380"/>
            <method name="asList" type="Array1D<ComplexNumber>" line="383"/>
            <method name="builder" type="MatrixStore.Builder<ComplexNumber>" line="386"/>
            <method name="caxpy" type="void" line="389">
                <params>
                    <param name="aSclrA" type="ComplexNumber"/>
                    <param name="aColX" type="int"/>
                    <param name="aColY" type="int"/>
                    <param name="aFirstRow" type="int"/>
                </params>
            </method>
            <method name="computeInPlaceSchur" type="Array1D<ComplexNumber>" line="392">
                <params>
                    <param name="aTransformationCollector" type="PhysicalStore<ComplexNumber>"/>
                    <param name="eigenvalue" type="boolean"/>
                </params>
            </method>
            <method name="conjugate" type="ComplexDenseStore" line="395">
                <declaration name="retVal" type="ComplexDenseStore" line="396"/>
            </method>
            <method name="copy" type="ComplexDenseStore" line="400"/>
            <method name="countColumns" type="long" line="403"/>
            <method name="countRows" type="long" line="406"/>
            <method name="divideAndCopyColumn" type="void" line="409">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aDestination" type="SimpleArray<ComplexNumber>"/>
                </params>
                <declaration name="tmpData" type="ComplexNumber[]" line="410"/>
                <declaration name="tmpRowDim" type="int" line="411"/>
                <declaration name="tmpDestination" type="ComplexNumber[]" line="412"/>
                <declaration name="tmpIndex" type="int" line="413"/>
                <declaration name="tmpDenominator" type="ComplexNumber" line="414"/>
                <scope line="415"/>
            </method>
            <method name="doubleValue" type="double" line="420">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="423">
                <params>
                    <param name="other" type="MatrixStore<ComplexNumber>"/>
                    <param name="context" type="NumberContext"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="426">
                <params>
                    <param name="anObj" type="Object"/>
                </params>
                <scope line="427"/>
                <scope line="430"/>
            </method>
            <method name="exchangeColumns" type="void" line="434">
                <params>
                    <param name="aColA" type="int"/>
                    <param name="aColB" type="int"/>
                </params>
            </method>
            <method name="exchangeRows" type="void" line="437">
                <params>
                    <param name="aRowA" type="int"/>
                    <param name="aRowB" type="int"/>
                </params>
            </method>
            <method name="factory" type="PhysicalStore.Factory<ComplexNumber,ComplexDenseStore>" line="440"/>
            <method name="fillByMultiplying" type="void" line="443">
                <params>
                    <param name="left" type="Access1D<ComplexNumber>"/>
                    <param name="right" type="Access1D<ComplexNumber>"/>
                </params>
                <declaration name="tmpComplexity" type="int" line="444"/>
                <declaration name="tmpProductData" type="ComplexNumber[]" line="445"/>
                <scope line="446"/>
                <scope line="449"/>
                <scope line="452"/>
            </method>
            <method name="fillColumn" type="void" line="456">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="ComplexNumber"/>
                </params>
            </method>
            <method name="fillConjugated" type="void" line="459">
                <params>
                    <param name="source" type="Access2D<? extends Number>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="460"/>
                <declaration name="tmpColDim" type="int" line="461"/>
                <scope line="462">
                    <anonymous_class line="463">
                        <method name="conquer" type="void" line="464">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="463"/>
                </scope>
                <scope line="471"/>
            </method>
            <method name="fillDiagonal" type="void" line="475">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="ComplexNumber"/>
                </params>
            </method>
            <method name="fillMatching" type="void" line="478">
                <params>
                    <param name="source" type="Access1D<? extends Number>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="479"/>
                <declaration name="tmpColDim" type="int" line="480"/>
                <scope line="481">
                    <anonymous_class line="482">
                        <method name="conquer" type="void" line="483">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="482"/>
                </scope>
                <scope line="490"/>
            </method>
            <method name="fillMatching" type="void" line="494">
                <params>
                    <param name="leftArg" type="Access1D<ComplexNumber>"/>
                    <param name="func" type="BinaryFunction<ComplexNumber>"/>
                    <param name="rightArg" type="Access1D<ComplexNumber>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="495"/>
                <declaration name="tmpColDim" type="int" line="496"/>
                <scope line="497">
                    <anonymous_class line="498">
                        <method name="conquer" type="void" line="499">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="498"/>
                </scope>
                <scope line="506"/>
            </method>
            <method name="fillMatching" type="void" line="510">
                <params>
                    <param name="aLeftArg" type="Access1D<ComplexNumber>"/>
                    <param name="aFunc" type="BinaryFunction<ComplexNumber>"/>
                    <param name="aRightArg" type="ComplexNumber"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="511"/>
                <declaration name="tmpColDim" type="int" line="512"/>
                <scope line="513">
                    <anonymous_class line="514">
                        <method name="conquer" type="void" line="515">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="514"/>
                </scope>
                <scope line="522"/>
            </method>
            <method name="fillMatching" type="void" line="526">
                <params>
                    <param name="aLeftArg" type="ComplexNumber"/>
                    <param name="aFunc" type="BinaryFunction<ComplexNumber>"/>
                    <param name="aRightArg" type="Access1D<ComplexNumber>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="527"/>
                <declaration name="tmpColDim" type="int" line="528"/>
                <scope line="529">
                    <anonymous_class line="530">
                        <method name="conquer" type="void" line="531">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="530"/>
                </scope>
                <scope line="538"/>
            </method>
            <method name="fillRow" type="void" line="542">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="ComplexNumber"/>
                </params>
            </method>
            <method name="fillTransposed" type="void" line="545">
                <params>
                    <param name="source" type="Access2D<? extends Number>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="546"/>
                <declaration name="tmpColDim" type="int" line="547"/>
                <scope line="548">
                    <anonymous_class line="549">
                        <method name="conquer" type="void" line="550">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="549"/>
                </scope>
                <scope line="557"/>
            </method>
            <method name="generateApplyAndCopyHouseholderColumn" type="boolean" line="561">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aDestination" type="Householder<ComplexNumber>"/>
                </params>
            </method>
            <method name="generateApplyAndCopyHouseholderRow" type="boolean" line="564">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aDestination" type="Householder<ComplexNumber>"/>
                </params>
            </method>
            <method name="get" type="ComplexNumber" line="567">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                </params>
            </method>
            <method name="getColDim" type="int" line="570"/>
            <method name="getIndexOfLargestInColumn" type="int" line="573">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                </params>
            </method>
            <method name="getMaxDim" type="int" line="576"/>
            <method name="getMinDim" type="int" line="579"/>
            <method name="getRowDim" type="int" line="582"/>
            <method name="hashCode" type="int" line="585"/>
            <method name="isAbsolute" type="boolean" line="588">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="isAbsolute" type="boolean" line="591">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isInfinite" type="boolean" line="594">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isLowerLeftShaded" type="boolean" line="597"/>
            <method name="isNaN" type="boolean" line="600">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isPositive" type="boolean" line="603">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="isPositive" type="boolean" line="606">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isReal" type="boolean" line="609">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="isReal" type="boolean" line="612">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isUpperRightShaded" type="boolean" line="615"/>
            <method name="isZero" type="boolean" line="618">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="isZero" type="boolean" line="621">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="maxpy" type="void" line="624">
                <params>
                    <param name="aSclrA" type="ComplexNumber"/>
                    <param name="aMtrxX" type="MatrixStore<ComplexNumber>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="625"/>
                <declaration name="tmpColDim" type="int" line="626"/>
                <scope line="627">
                    <anonymous_class line="628">
                        <method name="conquer" type="void" line="629">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="628"/>
                </scope>
                <scope line="636"/>
            </method>
            <method name="modifyAll" type="void" line="640">
                <params>
                    <param name="aFunc" type="UnaryFunction<ComplexNumber>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="641"/>
                <declaration name="tmpColDim" type="int" line="642"/>
                <scope line="643">
                    <anonymous_class line="644">
                        <method name="conquer" type="void" line="645">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="644"/>
                </scope>
                <scope line="652"/>
            </method>
            <method name="modifyColumn" type="void" line="656">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aFunc" type="UnaryFunction<ComplexNumber>"/>
                </params>
            </method>
            <method name="modifyColumn" type="void" line="659">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="function" type="UnaryFunction<ComplexNumber>"/>
                </params>
            </method>
            <method name="modifyDiagonal" type="void" line="662">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aFunc" type="UnaryFunction<ComplexNumber>"/>
                </params>
            </method>
            <method name="modifyDiagonal" type="void" line="665">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="function" type="UnaryFunction<ComplexNumber>"/>
                </params>
            </method>
            <method name="modifyOne" type="void" line="668">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aFunc" type="UnaryFunction<ComplexNumber>"/>
                </params>
                <declaration name="tmpValue" type="ComplexNumber" line="669"/>
            </method>
            <method name="modifyRow" type="void" line="673">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aFunc" type="UnaryFunction<ComplexNumber>"/>
                </params>
            </method>
            <method name="modifyRow" type="void" line="676">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="function" type="UnaryFunction<ComplexNumber>"/>
                </params>
            </method>
            <method name="multiplyLeft" type="MatrixStore<ComplexNumber>" line="679">
                <params>
                    <param name="left" type="Access1D<ComplexNumber>"/>
                </params>
                <declaration name="retVal" type="ComplexDenseStore" line="680"/>
            </method>
            <method name="multiplyRight" type="MatrixStore<ComplexNumber>" line="684">
                <params>
                    <param name="right" type="Access1D<ComplexNumber>"/>
                </params>
                <declaration name="retVal" type="ComplexDenseStore" line="685"/>
            </method>
            <method name="negateColumn" type="void" line="689">
                <params>
                    <param name="aCol" type="int"/>
                </params>
            </method>
            <method name="raxpy" type="void" line="692">
                <params>
                    <param name="aSclrA" type="ComplexNumber"/>
                    <param name="aRowX" type="int"/>
                    <param name="aRowY" type="int"/>
                    <param name="aFirstCol" type="int"/>
                </params>
            </method>
            <method name="rotateRight" type="void" line="695">
                <params>
                    <param name="aLow" type="int"/>
                    <param name="aHigh" type="int"/>
                    <param name="aCos" type="double"/>
                    <param name="aSin" type="double"/>
                </params>
            </method>
            <method name="set" type="void" line="698">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="double"/>
                </params>
            </method>
            <method name="set" type="void" line="701">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="Number"/>
                </params>
            </method>
            <method name="setToIdentity" type="void" line="704">
                <params>
                    <param name="aCol" type="int"/>
                </params>
            </method>
            <method name="substituteBackwards" type="void" line="708">
                <params>
                    <param name="aBody" type="Access2D<ComplexNumber>"/>
                    <param name="conjugated" type="boolean"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="709"/>
                <declaration name="tmpColDim" type="int" line="710"/>
                <scope line="711">
                    <anonymous_class line="712">
                        <method name="conquer" type="void" line="713">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="712"/>
                </scope>
                <scope line="720"/>
            </method>
            <method name="substituteForwards" type="void" line="724">
                <params>
                    <param name="aBody" type="Access2D<ComplexNumber>"/>
                    <param name="onesOnDiagonal" type="boolean"/>
                    <param name="zerosAboveDiagonal" type="boolean"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="725"/>
                <declaration name="tmpColDim" type="int" line="726"/>
                <scope line="727">
                    <anonymous_class line="728">
                        <method name="conquer" type="void" line="729">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="728"/>
                </scope>
                <scope line="736"/>
            </method>
            <method name="toScalar" type="Scalar<ComplexNumber>" line="740">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="toString" type="String" line="743"/>
            <method name="transformLeft" type="void" line="746">
                <params>
                    <param name="aTransf" type="Householder<ComplexNumber>"/>
                    <param name="aFirstCol" type="int"/>
                </params>
                <declaration name="tmpTransf" type="Householder.Complex" line="747"/>
                <declaration name="tmpData" type="ComplexNumber[]" line="748"/>
                <declaration name="tmpRowDim" type="int" line="749"/>
                <declaration name="tmpColDim" type="int" line="750"/>
                <scope line="751">
                    <anonymous_class line="752">
                        <method name="conquer" type="void" line="753">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="752"/>
                </scope>
                <scope line="760"/>
            </method>
            <method name="transformLeft" type="void" line="764">
                <params>
                    <param name="aTransf" type="Rotation<ComplexNumber>"/>
                </params>
                <declaration name="tmpTransf" type="Rotation.Complex" line="765"/>
                <declaration name="tmpLow" type="int" line="766"/>
                <declaration name="tmpHigh" type="int" line="767"/>
                <scope line="768">
                    <scope line="769"/>
                    <scope line="772"/>
                </scope>
                <scope line="776">
                    <scope line="777"/>
                    <scope line="780"/>
                    <scope line="783"/>
                </scope>
            </method>
            <method name="transformRight" type="void" line="788">
                <params>
                    <param name="aTransf" type="Householder<ComplexNumber>"/>
                    <param name="aFirstRow" type="int"/>
                </params>
                <declaration name="tmpTransf" type="Householder.Complex" line="789"/>
                <declaration name="tmpData" type="ComplexNumber[]" line="790"/>
                <declaration name="tmpRowDim" type="int" line="791"/>
                <declaration name="tmpColDim" type="int" line="792"/>
                <scope line="793">
                    <anonymous_class line="794">
                        <method name="conquer" type="void" line="795">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="794"/>
                </scope>
                <scope line="802"/>
            </method>
            <method name="transformRight" type="void" line="806">
                <params>
                    <param name="aTransf" type="Rotation<ComplexNumber>"/>
                </params>
                <declaration name="tmpTransf" type="Rotation.Complex" line="807"/>
                <declaration name="tmpLow" type="int" line="808"/>
                <declaration name="tmpHigh" type="int" line="809"/>
                <scope line="810">
                    <scope line="811"/>
                    <scope line="814"/>
                </scope>
                <scope line="818">
                    <scope line="819"/>
                    <scope line="822"/>
                    <scope line="825"/>
                </scope>
            </method>
            <method name="transformSymmetric" type="void" line="830">
                <params>
                    <param name="aTransf" type="Householder<ComplexNumber>"/>
                </params>
            </method>
            <method name="transpose" type="ComplexDenseStore" line="833">
                <declaration name="retVal" type="ComplexDenseStore" line="834"/>
            </method>
            <method name="tred2" type="void" line="838">
                <params>
                    <param name="mainDiagonal" type="SimpleArray<ComplexNumber>"/>
                    <param name="offDiagonal" type="SimpleArray<ComplexNumber>"/>
                    <param name="yesvecs" type="boolean"/>
                </params>
            </method>
            <method name="visitAll" type="void" line="841">
                <params>
                    <param name="visitor" type="VoidFunction<ComplexNumber>"/>
                </params>
            </method>
            <method name="visitColumn" type="void" line="844">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="visitor" type="VoidFunction<ComplexNumber>"/>
                </params>
            </method>
            <method name="visitColumn" type="void" line="847">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="visitor" type="VoidFunction<ComplexNumber>"/>
                </params>
            </method>
            <method name="visitDiagonal" type="void" line="850">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="visitor" type="VoidFunction<ComplexNumber>"/>
                </params>
            </method>
            <method name="visitDiagonal" type="void" line="853">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="visitor" type="VoidFunction<ComplexNumber>"/>
                </params>
            </method>
            <method name="visitRow" type="void" line="856">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="visitor" type="VoidFunction<ComplexNumber>"/>
                </params>
            </method>
            <method name="visitRow" type="void" line="859">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="visitor" type="VoidFunction<ComplexNumber>"/>
                </params>
            </method>
        </class>
    </source>