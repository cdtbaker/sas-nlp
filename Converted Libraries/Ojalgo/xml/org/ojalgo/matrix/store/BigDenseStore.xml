<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.store">
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="org.ojalgo.function.BigFunction"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util.List"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.access.AccessUtils"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.array.Array2D"/>
        <import package="org.ojalgo.array.BasicArray"/>
        <import package="org.ojalgo.array.BigArray"/>
        <import package="org.ojalgo.concurrent.DivideAndConquer"/>
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="org.ojalgo.function.BigFunction"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.FunctionSet"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.VoidFunction"/>
        <import package="org.ojalgo.function.aggregator.Aggregator"/>
        <import package="org.ojalgo.function.aggregator.AggregatorCollection"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.function.aggregator.BigAggregator"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.decomposition.DecompositionStore"/>
        <import package="org.ojalgo.matrix.store.operation"/>
        <import package="org.ojalgo.matrix.transformation.Householder"/>
        <import package="org.ojalgo.matrix.transformation.Rotation"/>
        <import package="org.ojalgo.random.RandomNumber"/>
        <import package="org.ojalgo.scalar.BigScalar"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="BigDenseStore" line="60">
            <extends class="BigArray"/>
            <implements interface="PhysicalStore">
                <type_params>
                    <type_param name="BigDecimal"/>
                </type_params>
            </implements>
            <implements interface="DecompositionStore">
                <type_params>
                    <type_param name="BigDecimal"/>
                </type_params>
            </implements>
            <javadoc line="60">
                A {@linkplain BigDecimal} implementation of {@linkplain PhysicalStore}.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <interface name="BigMultiplyBoth">
                <method name="invoke" type="void" line="69"/>
            </interface>
            <interface name="BigMultiplyLeft">
                <method name="invoke" type="void" line="75"/>
            </interface>
            <interface name="BigMultiplyRight">
                <method name="invoke" type="void" line="81"/>
            </interface>
            <method name="cast" type="BigDenseStore" line="85">
                <params>
                    <param name="mtrx" type="Access1D&lt;BigDecimal&gt;"/>
                </params>
                <scope line="86"/>
                <scope line="88"/>
                <scope line="90"/>
            </method>
            <method name="cast" type="Householder.Big" line="95">
                <params>
                    <param name="aTransf" type="Householder&lt;BigDecimal&gt;"/>
                </params>
                <scope line="96"/>
                <scope line="98"/>
                <scope line="100"/>
            </method>
            <method name="cast" type="Rotation.Big" line="105">
                <params>
                    <param name="aTransf" type="Rotation&lt;BigDecimal&gt;"/>
                </params>
                <scope line="106"/>
                <scope line="108"/>
            </method>
            <declaration name="FACTORY" type="DecompositionStore.Factory&amp;lt;BigDecimal,BigDenseStore&amp;gt;" line="113"/>
            <anonymous_class line="113">
                <method name="aggregator" type="AggregatorCollection&lt;BigDecimal&gt;" line="115"/>
                <method name="columns" type="BigDenseStore" line="119">
                    <params>
                        <param name="source" type="Access1D&lt;?&gt;"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="121"/>
                    <declaration name="tmpColDim" type="int" line="122"/>
                    <declaration name="tmpData" type="BigDecimal[]" line="124"/>
                    <declaration name="tmpColumn" type="Access1D&amp;lt;?&amp;gt;" line="126"/>
                    <scope line="127">
                        <scope line="129"/>
                    </scope>
                </method>
                <method name="columns" type="BigDenseStore" line="137">
                    <params>
                        <param name="source" type="double[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="139"/>
                    <declaration name="tmpColDim" type="int" line="140"/>
                    <declaration name="tmpData" type="BigDecimal[]" line="142"/>
                    <declaration name="tmpColumn" type="double[]" line="144"/>
                    <scope line="145">
                        <scope line="147"/>
                    </scope>
                </method>
                <method name="columns" type="BigDenseStore" line="155">
                    <params>
                        <param name="source" type="List&lt;? extends Number&gt;"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="157"/>
                    <declaration name="tmpColDim" type="int" line="158"/>
                    <declaration name="tmpData" type="BigDecimal[]" line="160"/>
                    <declaration name="tmpColumn" type="List&amp;lt;? extends Number&amp;gt;" line="162"/>
                    <scope line="163">
                        <scope line="165"/>
                    </scope>
                </method>
                <method name="columns" type="BigDenseStore" line="173">
                    <params>
                        <param name="source" type="Number[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="175"/>
                    <declaration name="tmpColDim" type="int" line="176"/>
                    <declaration name="tmpData" type="BigDecimal[]" line="178"/>
                    <declaration name="tmpColumn" type="Number[]" line="180"/>
                    <scope line="181">
                        <scope line="183"/>
                    </scope>
                </method>
                <method name="conjugate" type="BigDenseStore" line="191">
                    <params>
                        <param name="source" type="Access2D&lt;?&gt;"/>
                    </params>
                </method>
                <method name="copy" type="BigDenseStore" line="195">
                    <params>
                        <param name="source" type="Access2D&lt;?&gt;"/>
                    </params>
                    <declaration name="retVal" type="BigDenseStore" line="197"/>
                </method>
                <method name="function" type="FunctionSet&lt;BigDecimal&gt;" line="204"/>
                <method name="makeArray" type="BigArray" line="208">
                    <params>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <method name="makeEye" type="BigDenseStore" line="212">
                    <params>
                        <param name="rows" type="long"/>
                        <param name="columns" type="long"/>
                    </params>
                    <declaration name="retVal" type="BigDenseStore" line="214"/>
                </method>
                <method name="makeHouseholder" type="Householder.Big" line="221">
                    <params>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <method name="makeRandom" type="BigDenseStore" line="225">
                    <params>
                        <param name="rows" type="long"/>
                        <param name="columns" type="long"/>
                        <param name="distribution" type="RandomNumber"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="227"/>
                    <declaration name="tmpColDim" type="int" line="228"/>
                    <declaration name="tmpLength" type="int" line="230"/>
                    <declaration name="tmpData" type="BigDecimal[]" line="232"/>
                    <scope line="234"/>
                </method>
                <method name="makeRotation" type="Rotation.Big" line="241">
                    <params>
                        <param name="low" type="int"/>
                        <param name="high" type="int"/>
                        <param name="cos" type="BigDecimal"/>
                        <param name="sin" type="BigDecimal"/>
                    </params>
                </method>
                <method name="makeRotation" type="Rotation.Big" line="245">
                    <params>
                        <param name="low" type="int"/>
                        <param name="high" type="int"/>
                        <param name="cos" type="double"/>
                        <param name="sin" type="double"/>
                    </params>
                </method>
                <method name="makeZero" type="BigDenseStore" line="249">
                    <params>
                        <param name="rows" type="long"/>
                        <param name="columns" type="long"/>
                    </params>
                </method>
                <method name="rows" type="BigDenseStore" line="253">
                    <params>
                        <param name="source" type="Access1D&lt;?&gt;"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="255"/>
                    <declaration name="tmpColDim" type="int" line="256"/>
                    <declaration name="tmpData" type="BigDecimal[]" line="258"/>
                    <declaration name="tmpRow" type="Access1D&amp;lt;?&amp;gt;" line="260"/>
                    <scope line="261">
                        <scope line="263"/>
                    </scope>
                </method>
                <method name="rows" type="BigDenseStore" line="271">
                    <params>
                        <param name="source" type="double[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="273"/>
                    <declaration name="tmpColDim" type="int" line="274"/>
                    <declaration name="tmpData" type="BigDecimal[]" line="276"/>
                    <declaration name="tmpRow" type="double[]" line="278"/>
                    <scope line="279">
                        <scope line="281"/>
                    </scope>
                </method>
                <method name="rows" type="BigDenseStore" line="289">
                    <params>
                        <param name="source" type="List&lt;? extends Number&gt;"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="291"/>
                    <declaration name="tmpColDim" type="int" line="292"/>
                    <declaration name="tmpData" type="BigDecimal[]" line="294"/>
                    <declaration name="tmpRow" type="List&amp;lt;? extends Number&amp;gt;" line="296"/>
                    <scope line="297">
                        <scope line="299"/>
                    </scope>
                </method>
                <method name="rows" type="BigDenseStore" line="307">
                    <params>
                        <param name="source" type="Number[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="309"/>
                    <declaration name="tmpColDim" type="int" line="310"/>
                    <declaration name="tmpData" type="BigDecimal[]" line="312"/>
                    <declaration name="tmpRow" type="Number[]" line="314"/>
                    <scope line="315">
                        <scope line="317"/>
                    </scope>
                </method>
                <method name="scalar" type="Scalar.Factory&lt;BigDecimal&gt;" line="325"/>
                <method name="transpose" type="BigDenseStore" line="329">
                    <params>
                        <param name="source" type="Access2D&lt;?&gt;"/>
                    </params>
                    <declaration name="retVal" type="BigDenseStore" line="331"/>
                </method>
            </anonymous_class>
            <declaration name="multiplyBoth" type="BigMultiplyBoth" line="339"/>
            <declaration name="multiplyLeft" type="BigMultiplyLeft" line="340"/>
            <declaration name="multiplyRight" type="BigMultiplyRight" line="341"/>
            <declaration name="myColDim" type="int" line="342"/>
            <declaration name="myRowDim" type="int" line="343"/>
            <declaration name="myUtility" type="Array2D&amp;lt;BigDecimal&amp;gt;" line="344"/>
            <method name="BigDenseStore" type="constructor" line="346">
                <params>
                    <param name="anArray" type="BigDecimal[]"/>
                </params>
            </method>
            <method name="BigDenseStore" type="constructor" line="360">
                <params>
                    <param name="aLength" type="int"/>
                </params>
            </method>
            <method name="BigDenseStore" type="constructor" line="374">
                <params>
                    <param name="aRowDim" type="int"/>
                    <param name="aColDim" type="int"/>
                </params>
            </method>
            <method name="BigDenseStore" type="constructor" line="388">
                <params>
                    <param name="aRowDim" type="int"/>
                    <param name="aColDim" type="int"/>
                    <param name="anArray" type="BigDecimal[]"/>
                </params>
            </method>
            <method name="add" type="MatrixStore&lt;BigDecimal&gt;" line="402">
                <params>
                    <param name="addend" type="MatrixStore&lt;BigDecimal&gt;"/>
                </params>
            </method>
            <method name="aggregateAll" type="BigDecimal" line="406">
                <params>
                    <param name="aggregator" type="Aggregator"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="408"/>
                <declaration name="tmpColDim" type="int" line="409"/>
                <declaration name="tmpMainAggr" type="AggregatorFunction&amp;lt;BigDecimal&amp;gt;" line="411"/>
                <scope line="413">
                    <anonymous_class line="415">
                        <method name="conquer" type="void" line="418">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                            <declaration name="tmpPartAggr" type="AggregatorFunction&amp;lt;BigDecimal&amp;gt;" line="420"/>
                            <scope line="424"/>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="415"/>
                </scope>
                <scope line="432"/>
            </method>
            <method name="applyCholesky" type="void" line="440">
                <params>
                    <param name="iterationPoint" type="int"/>
                    <param name="multipliers" type="BasicArray&lt;BigDecimal&gt;"/>
                </params>
                <declaration name="tmpData" type="BigDecimal[]" line="442"/>
                <declaration name="tmpColumn" type="BigDecimal[]" line="443"/>
                <scope line="445">
                    <anonymous_class line="447">
                        <method name="conquer" type="void" line="450">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="447"/>
                </scope>
                <scope line="457"/>
            </method>
            <method name="applyLU" type="void" line="463">
                <params>
                    <param name="iterationPoint" type="int"/>
                    <param name="multipliers" type="BasicArray&lt;BigDecimal&gt;"/>
                </params>
                <declaration name="tmpData" type="BigDecimal[]" line="465"/>
                <declaration name="tmpColumn" type="BigDecimal[]" line="466"/>
                <scope line="468">
                    <anonymous_class line="470">
                        <method name="conquer" type="void" line="473">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="470"/>
                </scope>
                <scope line="480"/>
            </method>
            <method name="asArray2D" type="Array2D&lt;BigDecimal&gt;" line="486"/>
            <method name="asList" type="Array1D&lt;BigDecimal&gt;" line="490"/>
            <method name="builder" type="MatrixStore.Builder&lt;BigDecimal&gt;" line="494"/>
            <method name="caxpy" type="void" line="498">
                <params>
                    <param name="aSclrA" type="BigDecimal"/>
                    <param name="aColX" type="int"/>
                    <param name="aColY" type="int"/>
                    <param name="aFirstRow" type="int"/>
                </params>
            </method>
            <method name="computeInPlaceSchur" type="Array1D&lt;ComplexNumber&gt;" line="502">
                <params>
                    <param name="aTransformationCollector" type="PhysicalStore&lt;BigDecimal&gt;"/>
                    <param name="eigenvalue" type="boolean"/>
                </params>
            </method>
            <method name="conjugate" type="MatrixStore&lt;BigDecimal&gt;" line="506"/>
            <method name="copy" type="BigDenseStore" line="510"/>
            <method name="countColumns" type="long" line="514"/>
            <method name="countRows" type="long" line="518"/>
            <method name="divideAndCopyColumn" type="void" line="522">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aDestination" type="BasicArray&lt;BigDecimal&gt;"/>
                </params>
                <declaration name="tmpData" type="BigDecimal[]" line="524"/>
                <declaration name="tmpRowDim" type="int" line="525"/>
                <declaration name="tmpDestination" type="BigDecimal[]" line="527"/>
                <declaration name="tmpIndex" type="int" line="529"/>
                <declaration name="tmpDenominator" type="BigDecimal" line="530"/>
                <scope line="532"/>
            </method>
            <method name="doubleValue" type="double" line="538">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="542">
                <params>
                    <param name="other" type="MatrixStore&lt;BigDecimal&gt;"/>
                    <param name="context" type="NumberContext"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="548">
                <params>
                    <param name="anObj" type="Object"/>
                </params>
                <scope line="549"/>
                <scope line="551"/>
            </method>
            <method name="exchangeColumns" type="void" line="556">
                <params>
                    <param name="aColA" type="int"/>
                    <param name="aColB" type="int"/>
                </params>
            </method>
            <method name="exchangeRows" type="void" line="560">
                <params>
                    <param name="aRowA" type="int"/>
                    <param name="aRowB" type="int"/>
                </params>
            </method>
            <method name="factory" type="PhysicalStore.Factory&lt;BigDecimal,BigDenseStore&gt;" line="564"/>
            <method name="fillByMultiplying" type="void" line="568">
                <params>
                    <param name="left" type="Access1D&lt;BigDecimal&gt;"/>
                    <param name="right" type="Access1D&lt;BigDecimal&gt;"/>
                </params>
                <declaration name="tmpComplexity" type="int" line="570"/>
                <declaration name="tmpProductData" type="BigDecimal[]" line="572"/>
                <scope line="574"/>
                <scope line="576"/>
                <scope line="578"/>
            </method>
            <method name="fillColumn" type="void" line="583">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="BigDecimal"/>
                </params>
            </method>
            <method name="fillConjugated" type="void" line="587">
                <params>
                    <param name="source" type="Access2D&lt;? extends Number&gt;"/>
                </params>
            </method>
            <method name="fillDiagonal" type="void" line="591">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="BigDecimal"/>
                </params>
            </method>
            <method name="fillMatching" type="void" line="595">
                <params>
                    <param name="source" type="Access1D&lt;? extends Number&gt;"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="597"/>
                <declaration name="tmpColDim" type="int" line="598"/>
                <scope line="600">
                    <anonymous_class line="602">
                        <method name="conquer" type="void" line="605">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="602"/>
                </scope>
                <scope line="613"/>
            </method>
            <method name="fillMatching" type="void" line="619">
                <params>
                    <param name="leftArg" type="Access1D&lt;BigDecimal&gt;"/>
                    <param name="func" type="BinaryFunction&lt;BigDecimal&gt;"/>
                    <param name="rightArg" type="Access1D&lt;BigDecimal&gt;"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="621"/>
                <declaration name="tmpColDim" type="int" line="622"/>
                <scope line="624">
                    <anonymous_class line="626">
                        <method name="conquer" type="void" line="629">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="626"/>
                </scope>
                <scope line="637"/>
            </method>
            <method name="fillMatching" type="void" line="643">
                <params>
                    <param name="aLeftArg" type="Access1D&lt;BigDecimal&gt;"/>
                    <param name="aFunc" type="BinaryFunction&lt;BigDecimal&gt;"/>
                    <param name="aRightArg" type="BigDecimal"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="645"/>
                <declaration name="tmpColDim" type="int" line="646"/>
                <scope line="648">
                    <anonymous_class line="650">
                        <method name="conquer" type="void" line="653">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="650"/>
                </scope>
                <scope line="661"/>
            </method>
            <method name="fillMatching" type="void" line="667">
                <params>
                    <param name="aLeftArg" type="BigDecimal"/>
                    <param name="aFunc" type="BinaryFunction&lt;BigDecimal&gt;"/>
                    <param name="aRightArg" type="Access1D&lt;BigDecimal&gt;"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="669"/>
                <declaration name="tmpColDim" type="int" line="670"/>
                <scope line="672">
                    <anonymous_class line="674">
                        <method name="conquer" type="void" line="677">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="674"/>
                </scope>
                <scope line="685"/>
            </method>
            <method name="fillRow" type="void" line="691">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="BigDecimal"/>
                </params>
            </method>
            <method name="fillTransposed" type="void" line="695">
                <params>
                    <param name="source" type="Access2D&lt;? extends Number&gt;"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="697"/>
                <declaration name="tmpColDim" type="int" line="698"/>
                <scope line="700">
                    <anonymous_class line="702">
                        <method name="conquer" type="void" line="705">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="702"/>
                </scope>
                <scope line="713"/>
            </method>
            <method name="generateApplyAndCopyHouseholderColumn" type="boolean" line="719">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aDestination" type="Householder&lt;BigDecimal&gt;"/>
                </params>
            </method>
            <method name="generateApplyAndCopyHouseholderRow" type="boolean" line="723">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aDestination" type="Householder&lt;BigDecimal&gt;"/>
                </params>
            </method>
            <method name="get" type="BigDecimal" line="727">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                </params>
            </method>
            <method name="getColDim" type="int" line="731"/>
            <method name="getIndexOfLargestInColumn" type="int" line="735">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                </params>
            </method>
            <method name="getMaxDim" type="int" line="739"/>
            <method name="getMinDim" type="int" line="743"/>
            <method name="getRowDim" type="int" line="747"/>
            <method name="hashCode" type="int" line="752"/>
            <method name="isAbsolute" type="boolean" line="756">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isInfinite" type="boolean" line="760">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isLowerLeftShaded" type="boolean" line="764"/>
            <method name="isNaN" type="boolean" line="768">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isPositive" type="boolean" line="772">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isReal" type="boolean" line="776">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isUpperRightShaded" type="boolean" line="780"/>
            <method name="isZero" type="boolean" line="784">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="maxpy" type="void" line="788">
                <params>
                    <param name="aSclrA" type="BigDecimal"/>
                    <param name="aMtrxX" type="MatrixStore&lt;BigDecimal&gt;"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="790"/>
                <declaration name="tmpColDim" type="int" line="791"/>
                <scope line="793">
                    <anonymous_class line="795">
                        <method name="conquer" type="void" line="798">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="795"/>
                </scope>
                <scope line="806"/>
            </method>
            <method name="modifyAll" type="void" line="813">
                <params>
                    <param name="aFunc" type="UnaryFunction&lt;BigDecimal&gt;"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="815"/>
                <declaration name="tmpColDim" type="int" line="816"/>
                <scope line="818">
                    <anonymous_class line="820">
                        <method name="conquer" type="void" line="823">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="820"/>
                </scope>
                <scope line="831"/>
            </method>
            <method name="modifyColumn" type="void" line="837">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="function" type="UnaryFunction&lt;BigDecimal&gt;"/>
                </params>
            </method>
            <method name="modifyDiagonal" type="void" line="841">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="function" type="UnaryFunction&lt;BigDecimal&gt;"/>
                </params>
            </method>
            <method name="modifyOne" type="void" line="845">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="func" type="UnaryFunction&lt;BigDecimal&gt;"/>
                </params>
                <declaration name="tmpValue" type="BigDecimal" line="847"/>
            </method>
            <method name="modifyRow" type="void" line="854">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="function" type="UnaryFunction&lt;BigDecimal&gt;"/>
                </params>
            </method>
            <method name="multiplyLeft" type="MatrixStore&lt;BigDecimal&gt;" line="858">
                <params>
                    <param name="left" type="Access1D&lt;BigDecimal&gt;"/>
                </params>
                <declaration name="retVal" type="BigDenseStore" line="860"/>
            </method>
            <method name="multiplyRight" type="MatrixStore&lt;BigDecimal&gt;" line="867">
                <params>
                    <param name="right" type="Access1D&lt;BigDecimal&gt;"/>
                </params>
                <declaration name="retVal" type="BigDenseStore" line="869"/>
            </method>
            <method name="negate" type="MatrixStore&lt;BigDecimal&gt;" line="876"/>
            <method name="negateColumn" type="void" line="880">
                <params>
                    <param name="aCol" type="int"/>
                </params>
            </method>
            <method name="raxpy" type="void" line="884">
                <params>
                    <param name="aSclrA" type="BigDecimal"/>
                    <param name="aRowX" type="int"/>
                    <param name="aRowY" type="int"/>
                    <param name="aFirstCol" type="int"/>
                </params>
            </method>
            <method name="rotateRight" type="void" line="888">
                <params>
                    <param name="aLow" type="int"/>
                    <param name="aHigh" type="int"/>
                    <param name="aCos" type="double"/>
                    <param name="aSin" type="double"/>
                </params>
            </method>
            <method name="scale" type="MatrixStore&lt;BigDecimal&gt;" line="892">
                <params>
                    <param name="scalar" type="BigDecimal"/>
                </params>
            </method>
            <method name="set" type="void" line="896">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="double"/>
                </params>
            </method>
            <method name="set" type="void" line="900">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="Number"/>
                </params>
            </method>
            <method name="setToIdentity" type="void" line="904">
                <params>
                    <param name="aCol" type="int"/>
                </params>
            </method>
            <method name="substituteBackwards" type="void" line="909">
                <params>
                    <param name="aBody" type="Access2D&lt;BigDecimal&gt;"/>
                    <param name="conjugated" type="boolean"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="911"/>
                <declaration name="tmpColDim" type="int" line="912"/>
                <scope line="914">
                    <anonymous_class line="916">
                        <method name="conquer" type="void" line="919">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="916"/>
                </scope>
                <scope line="927"/>
            </method>
            <method name="substituteForwards" type="void" line="933">
                <params>
                    <param name="aBody" type="Access2D&lt;BigDecimal&gt;"/>
                    <param name="onesOnDiagonal" type="boolean"/>
                    <param name="zerosAboveDiagonal" type="boolean"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="935"/>
                <declaration name="tmpColDim" type="int" line="936"/>
                <scope line="938">
                    <anonymous_class line="940">
                        <method name="conquer" type="void" line="943">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="940"/>
                </scope>
                <scope line="951"/>
            </method>
            <method name="subtract" type="MatrixStore&lt;BigDecimal&gt;" line="957">
                <params>
                    <param name="subtrahend" type="MatrixStore&lt;BigDecimal&gt;"/>
                </params>
            </method>
            <method name="toScalar" type="Scalar&lt;BigDecimal&gt;" line="961">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="toString" type="String" line="966"/>
            <method name="transformLeft" type="void" line="970">
                <params>
                    <param name="aTransf" type="Householder&lt;BigDecimal&gt;"/>
                    <param name="aFirstCol" type="int"/>
                </params>
                <declaration name="tmpTransf" type="Householder.Big" line="972"/>
                <declaration name="tmpData" type="BigDecimal[]" line="974"/>
                <declaration name="tmpRowDim" type="int" line="976"/>
                <declaration name="tmpColDim" type="int" line="977"/>
                <scope line="979">
                    <anonymous_class line="981">
                        <method name="conquer" type="void" line="984">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="981"/>
                </scope>
                <scope line="992"/>
            </method>
            <method name="transformLeft" type="void" line="998">
                <params>
                    <param name="aTransf" type="Rotation&lt;BigDecimal&gt;"/>
                </params>
                <declaration name="tmpTransf" type="Rotation.Big" line="1000"/>
                <declaration name="tmpLow" type="int" line="1002"/>
                <declaration name="tmpHigh" type="int" line="1003"/>
                <scope line="1005">
                    <scope line="1006"/>
                    <scope line="1008"/>
                </scope>
                <scope line="1011">
                    <scope line="1012"/>
                    <scope line="1014"/>
                    <scope line="1016"/>
                </scope>
            </method>
            <method name="transformRight" type="void" line="1022">
                <params>
                    <param name="aTransf" type="Householder&lt;BigDecimal&gt;"/>
                    <param name="aFirstRow" type="int"/>
                </params>
                <declaration name="tmpTransf" type="Householder.Big" line="1024"/>
                <declaration name="tmpData" type="BigDecimal[]" line="1026"/>
                <declaration name="tmpRowDim" type="int" line="1028"/>
                <declaration name="tmpColDim" type="int" line="1029"/>
                <scope line="1031">
                    <anonymous_class line="1033">
                        <method name="conquer" type="void" line="1036">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1033"/>
                </scope>
                <scope line="1044"/>
            </method>
            <method name="transformRight" type="void" line="1050">
                <params>
                    <param name="aTransf" type="Rotation&lt;BigDecimal&gt;"/>
                </params>
                <declaration name="tmpTransf" type="Rotation.Big" line="1052"/>
                <declaration name="tmpLow" type="int" line="1054"/>
                <declaration name="tmpHigh" type="int" line="1055"/>
                <scope line="1057">
                    <scope line="1058"/>
                    <scope line="1060"/>
                </scope>
                <scope line="1063">
                    <scope line="1064"/>
                    <scope line="1066"/>
                    <scope line="1068"/>
                </scope>
            </method>
            <method name="transformSymmetric" type="void" line="1074">
                <params>
                    <param name="aTransf" type="Householder&lt;BigDecimal&gt;"/>
                </params>
            </method>
            <method name="transpose" type="MatrixStore&lt;BigDecimal&gt;" line="1078"/>
            <method name="tred2" type="void" line="1082">
                <params>
                    <param name="mainDiagonal" type="BasicArray&lt;BigDecimal&gt;"/>
                    <param name="offDiagonal" type="BasicArray&lt;BigDecimal&gt;"/>
                    <param name="yesvecs" type="boolean"/>
                </params>
            </method>
            <method name="visitColumn" type="void" line="1086">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="visitor" type="VoidFunction&lt;BigDecimal&gt;"/>
                </params>
            </method>
            <method name="visitDiagonal" type="void" line="1090">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="visitor" type="VoidFunction&lt;BigDecimal&gt;"/>
                </params>
            </method>
            <method name="visitRow" type="void" line="1094">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="visitor" type="VoidFunction&lt;BigDecimal&gt;"/>
                </params>
            </method>
        </class>
    </source>