<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.store">
        <import package="org.ojalgo.constant.BigMath"/>
        <import package="org.ojalgo.function.BigFunction"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util.List"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.access.AccessUtils"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.array.Array2D"/>
        <import package="org.ojalgo.array.BigArray"/>
        <import package="org.ojalgo.array.SimpleArray"/>
        <import package="org.ojalgo.concurrent.DivideAndConquer"/>
        <import package="org.ojalgo.function.BigFunction"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.FunctionSet"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.VoidFunction"/>
        <import package="org.ojalgo.function.aggregator.Aggregator"/>
        <import package="org.ojalgo.function.aggregator.AggregatorCollection"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.function.aggregator.BigAggregator"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.decomposition.DecompositionStore"/>
        <import package="org.ojalgo.matrix.store.operation"/>
        <import package="org.ojalgo.matrix.transformation.Householder"/>
        <import package="org.ojalgo.matrix.transformation.Rotation"/>
        <import package="org.ojalgo.random.RandomNumber"/>
        <import package="org.ojalgo.scalar.BigScalar"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="BigDenseStore" line="59">
            <extends class="BigArray"/>
            <implements interface="PhysicalStore">
                <type_params>
                    <type_param name="BigDecimal"/>
                </type_params>
            </implements>
            <implements interface="DecompositionStore">
                <type_params>
                    <type_param name="BigDecimal"/>
                </type_params>
            </implements>
            <javadoc line="59">
                A {@linkplain BigDecimal} implementation of {@linkplain PhysicalStore}.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <interface name="BigMultiplyBoth">
                <method name="invoke" type="void" line="68"/>
            </interface>
            <interface name="BigMultiplyLeft">
                <method name="invoke" type="void" line="74"/>
            </interface>
            <interface name="BigMultiplyRight">
                <method name="invoke" type="void" line="80"/>
            </interface>
            <declaration name="FACTORY" type="DecompositionStore.Factory&lt;BigDecimal,BigDenseStore&gt;" line="84"/>
            <anonymous_class line="84">
                <method name="aggregator" type="AggregatorCollection<BigDecimal>" line="86"/>
                <method name="columns" type="BigDenseStore" line="90">
                    <params>
                        <param name="source" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="92"/>
                    <declaration name="tmpColDim" type="int" line="93"/>
                    <declaration name="tmpData" type="BigDecimal[]" line="95"/>
                    <declaration name="tmpColumn" type="Access1D&lt;?&gt;" line="97"/>
                    <scope line="98">
                        <scope line="100"/>
                    </scope>
                </method>
                <method name="columns" type="BigDenseStore" line="108">
                    <params>
                        <param name="source" type="double[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="110"/>
                    <declaration name="tmpColDim" type="int" line="111"/>
                    <declaration name="tmpData" type="BigDecimal[]" line="113"/>
                    <declaration name="tmpColumn" type="double[]" line="115"/>
                    <scope line="116">
                        <scope line="118"/>
                    </scope>
                </method>
                <method name="columns" type="BigDenseStore" line="126">
                    <params>
                        <param name="source" type="List<? extends Number>"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="128"/>
                    <declaration name="tmpColDim" type="int" line="129"/>
                    <declaration name="tmpData" type="BigDecimal[]" line="131"/>
                    <declaration name="tmpColumn" type="List&lt;? extends Number&gt;" line="133"/>
                    <scope line="134">
                        <scope line="136"/>
                    </scope>
                </method>
                <method name="columns" type="BigDenseStore" line="144">
                    <params>
                        <param name="source" type="Number[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="146"/>
                    <declaration name="tmpColDim" type="int" line="147"/>
                    <declaration name="tmpData" type="BigDecimal[]" line="149"/>
                    <declaration name="tmpColumn" type="Number[]" line="151"/>
                    <scope line="152">
                        <scope line="154"/>
                    </scope>
                </method>
                <method name="conjugate" type="BigDenseStore" line="162">
                    <params>
                        <param name="source" type="Access2D<?>"/>
                    </params>
                </method>
                <method name="copy" type="BigDenseStore" line="166">
                    <params>
                        <param name="source" type="Access2D<?>"/>
                    </params>
                    <declaration name="retVal" type="BigDenseStore" line="168"/>
                </method>
                <method name="function" type="FunctionSet<BigDecimal>" line="175"/>
                <javadoc line="179">
                    @deprecated Use {@link #aggregator()} instead                    
                </javadoc>
                <method name="getAggregatorCollection" type="AggregatorCollection<BigDecimal>" line="183"/>
                <javadoc line="187">
                    @deprecated Use {@link #function()} instead                    
                </javadoc>
                <method name="getFunctionSet" type="FunctionSet<BigDecimal>" line="191"/>
                <javadoc line="195">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getNumber" type="BigDecimal" line="199">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <javadoc line="203">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getNumber" type="BigDecimal" line="207">
                    <params>
                        <param name="value" type="Number"/>
                    </params>
                </method>
                <javadoc line="211">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getStaticOne" type="Scalar<BigDecimal>" line="215"/>
                <javadoc line="219">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="getStaticZero" type="Scalar<BigDecimal>" line="223"/>
                <method name="makeArray" type="SimpleArray.Big" line="227">
                    <params>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <method name="makeEye" type="BigDenseStore" line="231">
                    <params>
                        <param name="rows" type="long"/>
                        <param name="columns" type="long"/>
                    </params>
                    <declaration name="retVal" type="BigDenseStore" line="233"/>
                </method>
                <method name="makeHouseholder" type="Householder.Big" line="240">
                    <params>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <method name="makeRandom" type="BigDenseStore" line="244">
                    <params>
                        <param name="rows" type="long"/>
                        <param name="columns" type="long"/>
                        <param name="distribution" type="RandomNumber"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="246"/>
                    <declaration name="tmpColDim" type="int" line="247"/>
                    <declaration name="tmpLength" type="int" line="249"/>
                    <declaration name="tmpData" type="BigDecimal[]" line="251"/>
                    <scope line="253"/>
                </method>
                <method name="makeRotation" type="Rotation.Big" line="260">
                    <params>
                        <param name="low" type="int"/>
                        <param name="high" type="int"/>
                        <param name="cos" type="BigDecimal"/>
                        <param name="sin" type="BigDecimal"/>
                    </params>
                </method>
                <method name="makeRotation" type="Rotation.Big" line="264">
                    <params>
                        <param name="low" type="int"/>
                        <param name="high" type="int"/>
                        <param name="cos" type="double"/>
                        <param name="sin" type="double"/>
                    </params>
                </method>
                <method name="makeZero" type="BigDenseStore" line="268">
                    <params>
                        <param name="rows" type="long"/>
                        <param name="columns" type="long"/>
                    </params>
                </method>
                <method name="rows" type="BigDenseStore" line="272">
                    <params>
                        <param name="source" type="Access1D<?>"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="274"/>
                    <declaration name="tmpColDim" type="int" line="275"/>
                    <declaration name="tmpData" type="BigDecimal[]" line="277"/>
                    <declaration name="tmpRow" type="Access1D&lt;?&gt;" line="279"/>
                    <scope line="280">
                        <scope line="282"/>
                    </scope>
                </method>
                <method name="rows" type="BigDenseStore" line="290">
                    <params>
                        <param name="source" type="double[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="292"/>
                    <declaration name="tmpColDim" type="int" line="293"/>
                    <declaration name="tmpData" type="BigDecimal[]" line="295"/>
                    <declaration name="tmpRow" type="double[]" line="297"/>
                    <scope line="298">
                        <scope line="300"/>
                    </scope>
                </method>
                <method name="rows" type="BigDenseStore" line="308">
                    <params>
                        <param name="source" type="List<? extends Number>"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="310"/>
                    <declaration name="tmpColDim" type="int" line="311"/>
                    <declaration name="tmpData" type="BigDecimal[]" line="313"/>
                    <declaration name="tmpRow" type="List&lt;? extends Number&gt;" line="315"/>
                    <scope line="316">
                        <scope line="318"/>
                    </scope>
                </method>
                <method name="rows" type="BigDenseStore" line="326">
                    <params>
                        <param name="source" type="Number[]"/>
                    </params>
                    <declaration name="tmpRowDim" type="int" line="328"/>
                    <declaration name="tmpColDim" type="int" line="329"/>
                    <declaration name="tmpData" type="BigDecimal[]" line="331"/>
                    <declaration name="tmpRow" type="Number[]" line="333"/>
                    <scope line="334">
                        <scope line="336"/>
                    </scope>
                </method>
                <method name="scalar" type="Scalar.Factory<BigDecimal>" line="344"/>
                <javadoc line="348">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="toScalar" type="Scalar<BigDecimal>" line="352">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <javadoc line="356">
                    @deprecated v35 Use {@link #scalar()} instead.                    
                </javadoc>
                <method name="toScalar" type="Scalar<BigDecimal>" line="360">
                    <params>
                        <param name="value" type="Number"/>
                    </params>
                </method>
                <method name="transpose" type="BigDenseStore" line="364">
                    <params>
                        <param name="source" type="Access2D<?>"/>
                    </params>
                    <declaration name="retVal" type="BigDenseStore" line="366"/>
                </method>
            </anonymous_class>
            <method name="cast" type="BigDenseStore" line="374">
                <params>
                    <param name="mtrx" type="Access1D<BigDecimal>"/>
                </params>
                <scope line="375"/>
                <scope line="377"/>
                <scope line="379"/>
            </method>
            <method name="cast" type="Householder.Big" line="384">
                <params>
                    <param name="aTransf" type="Householder<BigDecimal>"/>
                </params>
                <scope line="385"/>
                <scope line="387"/>
                <scope line="389"/>
            </method>
            <method name="cast" type="Rotation.Big" line="394">
                <params>
                    <param name="aTransf" type="Rotation<BigDecimal>"/>
                </params>
                <scope line="395"/>
                <scope line="397"/>
            </method>
            <declaration name="multiplyBoth" type="BigMultiplyBoth" line="402"/>
            <declaration name="multiplyLeft" type="BigMultiplyLeft" line="403"/>
            <declaration name="multiplyRight" type="BigMultiplyRight" line="404"/>
            <declaration name="myColDim" type="int" line="405"/>
            <declaration name="myRowDim" type="int" line="406"/>
            <declaration name="myUtility" type="Array2D&lt;BigDecimal&gt;" line="407"/>
            <method name="BigDenseStore" type="constructor" line="409">
                <params>
                    <param name="anArray" type="BigDecimal[]"/>
                </params>
            </method>
            <method name="BigDenseStore" type="constructor" line="423">
                <params>
                    <param name="aLength" type="int"/>
                </params>
            </method>
            <method name="BigDenseStore" type="constructor" line="437">
                <params>
                    <param name="aRowDim" type="int"/>
                    <param name="aColDim" type="int"/>
                </params>
            </method>
            <method name="BigDenseStore" type="constructor" line="451">
                <params>
                    <param name="aRowDim" type="int"/>
                    <param name="aColDim" type="int"/>
                    <param name="anArray" type="BigDecimal[]"/>
                </params>
            </method>
            <method name="aggregateAll" type="BigDecimal" line="465">
                <params>
                    <param name="aggregator" type="Aggregator"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="467"/>
                <declaration name="tmpColDim" type="int" line="468"/>
                <declaration name="tmpMainAggr" type="AggregatorFunction&lt;BigDecimal&gt;" line="470"/>
                <scope line="472">
                    <anonymous_class line="474">
                        <method name="conquer" type="void" line="477">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                            <declaration name="tmpPartAggr" type="AggregatorFunction&lt;BigDecimal&gt;" line="479"/>
                            <scope line="483"/>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="474"/>
                </scope>
                <scope line="491"/>
            </method>
            <method name="applyCholesky" type="void" line="499">
                <params>
                    <param name="iterationPoint" type="int"/>
                    <param name="multipliers" type="SimpleArray<BigDecimal>"/>
                </params>
                <declaration name="tmpData" type="BigDecimal[]" line="501"/>
                <declaration name="tmpColumn" type="BigDecimal[]" line="502"/>
                <scope line="504">
                    <anonymous_class line="506">
                        <method name="conquer" type="void" line="509">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="506"/>
                </scope>
                <scope line="516"/>
            </method>
            <method name="applyLU" type="void" line="522">
                <params>
                    <param name="iterationPoint" type="int"/>
                    <param name="multipliers" type="SimpleArray<BigDecimal>"/>
                </params>
                <declaration name="tmpData" type="BigDecimal[]" line="524"/>
                <declaration name="tmpColumn" type="BigDecimal[]" line="525"/>
                <scope line="527">
                    <anonymous_class line="529">
                        <method name="conquer" type="void" line="532">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="529"/>
                </scope>
                <scope line="539"/>
            </method>
            <method name="asArray2D" type="Array2D<BigDecimal>" line="545"/>
            <method name="asList" type="Array1D<BigDecimal>" line="549"/>
            <method name="builder" type="MatrixStore.Builder<BigDecimal>" line="553"/>
            <method name="caxpy" type="void" line="557">
                <params>
                    <param name="aSclrA" type="BigDecimal"/>
                    <param name="aColX" type="int"/>
                    <param name="aColY" type="int"/>
                    <param name="aFirstRow" type="int"/>
                </params>
            </method>
            <method name="computeInPlaceSchur" type="Array1D<ComplexNumber>" line="561">
                <params>
                    <param name="aTransformationCollector" type="PhysicalStore<BigDecimal>"/>
                    <param name="eigenvalue" type="boolean"/>
                </params>
            </method>
            <method name="conjugate" type="BigDenseStore" line="565"/>
            <method name="copy" type="BigDenseStore" line="569"/>
            <method name="countColumns" type="long" line="573"/>
            <method name="countRows" type="long" line="577"/>
            <method name="divideAndCopyColumn" type="void" line="581">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aDestination" type="SimpleArray<BigDecimal>"/>
                </params>
                <declaration name="tmpData" type="BigDecimal[]" line="583"/>
                <declaration name="tmpRowDim" type="int" line="584"/>
                <declaration name="tmpDestination" type="BigDecimal[]" line="586"/>
                <declaration name="tmpIndex" type="int" line="588"/>
                <declaration name="tmpDenominator" type="BigDecimal" line="589"/>
                <scope line="591"/>
            </method>
            <method name="doubleValue" type="double" line="597">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="601">
                <params>
                    <param name="other" type="MatrixStore<BigDecimal>"/>
                    <param name="context" type="NumberContext"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="607">
                <params>
                    <param name="anObj" type="Object"/>
                </params>
                <scope line="608"/>
                <scope line="610"/>
            </method>
            <method name="exchangeColumns" type="void" line="615">
                <params>
                    <param name="aColA" type="int"/>
                    <param name="aColB" type="int"/>
                </params>
            </method>
            <method name="exchangeRows" type="void" line="619">
                <params>
                    <param name="aRowA" type="int"/>
                    <param name="aRowB" type="int"/>
                </params>
            </method>
            <method name="factory" type="PhysicalStore.Factory<BigDecimal,BigDenseStore>" line="623"/>
            <method name="fillByMultiplying" type="void" line="627">
                <params>
                    <param name="left" type="Access1D<BigDecimal>"/>
                    <param name="right" type="Access1D<BigDecimal>"/>
                </params>
                <declaration name="tmpComplexity" type="int" line="629"/>
                <declaration name="tmpProductData" type="BigDecimal[]" line="631"/>
                <scope line="633"/>
                <scope line="635"/>
                <scope line="637"/>
            </method>
            <method name="fillColumn" type="void" line="642">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="BigDecimal"/>
                </params>
            </method>
            <method name="fillConjugated" type="void" line="646">
                <params>
                    <param name="source" type="Access2D<? extends Number>"/>
                </params>
            </method>
            <method name="fillDiagonal" type="void" line="650">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="BigDecimal"/>
                </params>
            </method>
            <method name="fillMatching" type="void" line="654">
                <params>
                    <param name="source" type="Access1D<? extends Number>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="656"/>
                <declaration name="tmpColDim" type="int" line="657"/>
                <scope line="659">
                    <anonymous_class line="661">
                        <method name="conquer" type="void" line="664">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="661"/>
                </scope>
                <scope line="672"/>
            </method>
            <method name="fillMatching" type="void" line="678">
                <params>
                    <param name="leftArg" type="Access1D<BigDecimal>"/>
                    <param name="func" type="BinaryFunction<BigDecimal>"/>
                    <param name="rightArg" type="Access1D<BigDecimal>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="680"/>
                <declaration name="tmpColDim" type="int" line="681"/>
                <scope line="683">
                    <anonymous_class line="685">
                        <method name="conquer" type="void" line="688">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="685"/>
                </scope>
                <scope line="696"/>
            </method>
            <method name="fillMatching" type="void" line="702">
                <params>
                    <param name="aLeftArg" type="Access1D<BigDecimal>"/>
                    <param name="aFunc" type="BinaryFunction<BigDecimal>"/>
                    <param name="aRightArg" type="BigDecimal"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="704"/>
                <declaration name="tmpColDim" type="int" line="705"/>
                <scope line="707">
                    <anonymous_class line="709">
                        <method name="conquer" type="void" line="712">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="709"/>
                </scope>
                <scope line="720"/>
            </method>
            <method name="fillMatching" type="void" line="726">
                <params>
                    <param name="aLeftArg" type="BigDecimal"/>
                    <param name="aFunc" type="BinaryFunction<BigDecimal>"/>
                    <param name="aRightArg" type="Access1D<BigDecimal>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="728"/>
                <declaration name="tmpColDim" type="int" line="729"/>
                <scope line="731">
                    <anonymous_class line="733">
                        <method name="conquer" type="void" line="736">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="733"/>
                </scope>
                <scope line="744"/>
            </method>
            <method name="fillRow" type="void" line="750">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="BigDecimal"/>
                </params>
            </method>
            <method name="fillTransposed" type="void" line="754">
                <params>
                    <param name="source" type="Access2D<? extends Number>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="756"/>
                <declaration name="tmpColDim" type="int" line="757"/>
                <scope line="759">
                    <anonymous_class line="761">
                        <method name="conquer" type="void" line="764">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="761"/>
                </scope>
                <scope line="772"/>
            </method>
            <method name="generateApplyAndCopyHouseholderColumn" type="boolean" line="778">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aDestination" type="Householder<BigDecimal>"/>
                </params>
            </method>
            <method name="generateApplyAndCopyHouseholderRow" type="boolean" line="782">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aDestination" type="Householder<BigDecimal>"/>
                </params>
            </method>
            <method name="get" type="BigDecimal" line="786">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                </params>
            </method>
            <method name="getColDim" type="int" line="790"/>
            <method name="getIndexOfLargestInColumn" type="int" line="794">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                </params>
            </method>
            <method name="getMaxDim" type="int" line="798"/>
            <method name="getMinDim" type="int" line="802"/>
            <method name="getRowDim" type="int" line="806"/>
            <method name="hashCode" type="int" line="811"/>
            <method name="isAbsolute" type="boolean" line="815">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="isAbsolute" type="boolean" line="819">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isInfinite" type="boolean" line="823">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isLowerLeftShaded" type="boolean" line="827"/>
            <method name="isNaN" type="boolean" line="831">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isPositive" type="boolean" line="835">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="isPositive" type="boolean" line="839">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isReal" type="boolean" line="843">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="isReal" type="boolean" line="847">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="isUpperRightShaded" type="boolean" line="851"/>
            <method name="isZero" type="boolean" line="855">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="isZero" type="boolean" line="859">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                </params>
            </method>
            <method name="maxpy" type="void" line="863">
                <params>
                    <param name="aSclrA" type="BigDecimal"/>
                    <param name="aMtrxX" type="MatrixStore<BigDecimal>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="865"/>
                <declaration name="tmpColDim" type="int" line="866"/>
                <scope line="868">
                    <anonymous_class line="870">
                        <method name="conquer" type="void" line="873">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="870"/>
                </scope>
                <scope line="881"/>
            </method>
            <method name="modifyAll" type="void" line="888">
                <params>
                    <param name="aFunc" type="UnaryFunction<BigDecimal>"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="890"/>
                <declaration name="tmpColDim" type="int" line="891"/>
                <scope line="893">
                    <anonymous_class line="895">
                        <method name="conquer" type="void" line="898">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="895"/>
                </scope>
                <scope line="906"/>
            </method>
            <method name="modifyColumn" type="void" line="912">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aFunc" type="UnaryFunction<BigDecimal>"/>
                </params>
            </method>
            <method name="modifyColumn" type="void" line="916">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="function" type="UnaryFunction<BigDecimal>"/>
                </params>
            </method>
            <method name="modifyDiagonal" type="void" line="920">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aFunc" type="UnaryFunction<BigDecimal>"/>
                </params>
            </method>
            <method name="modifyDiagonal" type="void" line="924">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="function" type="UnaryFunction<BigDecimal>"/>
                </params>
            </method>
            <method name="modifyOne" type="void" line="928">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aFunc" type="UnaryFunction<BigDecimal>"/>
                </params>
                <declaration name="tmpValue" type="BigDecimal" line="930"/>
            </method>
            <method name="modifyRow" type="void" line="937">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aFunc" type="UnaryFunction<BigDecimal>"/>
                </params>
            </method>
            <method name="modifyRow" type="void" line="941">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="function" type="UnaryFunction<BigDecimal>"/>
                </params>
            </method>
            <method name="multiplyLeft" type="MatrixStore<BigDecimal>" line="945">
                <params>
                    <param name="left" type="Access1D<BigDecimal>"/>
                </params>
                <declaration name="retVal" type="BigDenseStore" line="947"/>
            </method>
            <method name="multiplyRight" type="MatrixStore<BigDecimal>" line="954">
                <params>
                    <param name="right" type="Access1D<BigDecimal>"/>
                </params>
                <declaration name="retVal" type="BigDenseStore" line="956"/>
            </method>
            <method name="negateColumn" type="void" line="963">
                <params>
                    <param name="aCol" type="int"/>
                </params>
            </method>
            <method name="raxpy" type="void" line="967">
                <params>
                    <param name="aSclrA" type="BigDecimal"/>
                    <param name="aRowX" type="int"/>
                    <param name="aRowY" type="int"/>
                    <param name="aFirstCol" type="int"/>
                </params>
            </method>
            <method name="rotateRight" type="void" line="971">
                <params>
                    <param name="aLow" type="int"/>
                    <param name="aHigh" type="int"/>
                    <param name="aCos" type="double"/>
                    <param name="aSin" type="double"/>
                </params>
            </method>
            <method name="set" type="void" line="975">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="double"/>
                </params>
            </method>
            <method name="set" type="void" line="979">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aCol" type="long"/>
                    <param name="aNmbr" type="Number"/>
                </params>
            </method>
            <method name="setToIdentity" type="void" line="983">
                <params>
                    <param name="aCol" type="int"/>
                </params>
            </method>
            <method name="substituteBackwards" type="void" line="988">
                <params>
                    <param name="aBody" type="Access2D<BigDecimal>"/>
                    <param name="conjugated" type="boolean"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="990"/>
                <declaration name="tmpColDim" type="int" line="991"/>
                <scope line="993">
                    <anonymous_class line="995">
                        <method name="conquer" type="void" line="998">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="995"/>
                </scope>
                <scope line="1006"/>
            </method>
            <method name="substituteForwards" type="void" line="1012">
                <params>
                    <param name="aBody" type="Access2D<BigDecimal>"/>
                    <param name="onesOnDiagonal" type="boolean"/>
                    <param name="zerosAboveDiagonal" type="boolean"/>
                </params>
                <declaration name="tmpRowDim" type="int" line="1014"/>
                <declaration name="tmpColDim" type="int" line="1015"/>
                <scope line="1017">
                    <anonymous_class line="1019">
                        <method name="conquer" type="void" line="1022">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1019"/>
                </scope>
                <scope line="1030"/>
            </method>
            <method name="toScalar" type="Scalar<BigDecimal>" line="1036">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="toString" type="String" line="1041"/>
            <method name="transformLeft" type="void" line="1045">
                <params>
                    <param name="aTransf" type="Householder<BigDecimal>"/>
                    <param name="aFirstCol" type="int"/>
                </params>
                <declaration name="tmpTransf" type="Householder.Big" line="1047"/>
                <declaration name="tmpData" type="BigDecimal[]" line="1049"/>
                <declaration name="tmpRowDim" type="int" line="1051"/>
                <declaration name="tmpColDim" type="int" line="1052"/>
                <scope line="1054">
                    <anonymous_class line="1056">
                        <method name="conquer" type="void" line="1059">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1056"/>
                </scope>
                <scope line="1067"/>
            </method>
            <method name="transformLeft" type="void" line="1073">
                <params>
                    <param name="aTransf" type="Rotation<BigDecimal>"/>
                </params>
                <declaration name="tmpTransf" type="Rotation.Big" line="1075"/>
                <declaration name="tmpLow" type="int" line="1077"/>
                <declaration name="tmpHigh" type="int" line="1078"/>
                <scope line="1080">
                    <scope line="1081"/>
                    <scope line="1083"/>
                </scope>
                <scope line="1086">
                    <scope line="1087"/>
                    <scope line="1089"/>
                    <scope line="1091"/>
                </scope>
            </method>
            <method name="transformRight" type="void" line="1097">
                <params>
                    <param name="aTransf" type="Householder<BigDecimal>"/>
                    <param name="aFirstRow" type="int"/>
                </params>
                <declaration name="tmpTransf" type="Householder.Big" line="1099"/>
                <declaration name="tmpData" type="BigDecimal[]" line="1101"/>
                <declaration name="tmpRowDim" type="int" line="1103"/>
                <declaration name="tmpColDim" type="int" line="1104"/>
                <scope line="1106">
                    <anonymous_class line="1108">
                        <method name="conquer" type="void" line="1111">
                            <params>
                                <param name="aFirst" type="int"/>
                                <param name="aLimit" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="tmpConquerer" type="DivideAndConquer" line="1108"/>
                </scope>
                <scope line="1119"/>
            </method>
            <method name="transformRight" type="void" line="1125">
                <params>
                    <param name="aTransf" type="Rotation<BigDecimal>"/>
                </params>
                <declaration name="tmpTransf" type="Rotation.Big" line="1127"/>
                <declaration name="tmpLow" type="int" line="1129"/>
                <declaration name="tmpHigh" type="int" line="1130"/>
                <scope line="1132">
                    <scope line="1133"/>
                    <scope line="1135"/>
                </scope>
                <scope line="1138">
                    <scope line="1139"/>
                    <scope line="1141"/>
                    <scope line="1143"/>
                </scope>
            </method>
            <method name="transformSymmetric" type="void" line="1149">
                <params>
                    <param name="aTransf" type="Householder<BigDecimal>"/>
                </params>
            </method>
            <method name="transpose" type="BigDenseStore" line="1153">
                <declaration name="retVal" type="BigDenseStore" line="1155"/>
            </method>
            <method name="tred2" type="void" line="1162">
                <params>
                    <param name="mainDiagonal" type="SimpleArray<BigDecimal>"/>
                    <param name="offDiagonal" type="SimpleArray<BigDecimal>"/>
                    <param name="yesvecs" type="boolean"/>
                </params>
            </method>
            <method name="visitColumn" type="void" line="1166">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="visitor" type="VoidFunction<BigDecimal>"/>
                </params>
            </method>
            <method name="visitColumn" type="void" line="1170">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="visitor" type="VoidFunction<BigDecimal>"/>
                </params>
            </method>
            <method name="visitDiagonal" type="void" line="1174">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="visitor" type="VoidFunction<BigDecimal>"/>
                </params>
            </method>
            <method name="visitDiagonal" type="void" line="1178">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="visitor" type="VoidFunction<BigDecimal>"/>
                </params>
            </method>
            <method name="visitRow" type="void" line="1182">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="visitor" type="VoidFunction<BigDecimal>"/>
                </params>
            </method>
            <method name="visitRow" type="void" line="1186">
                <params>
                    <param name="row" type="long"/>
                    <param name="column" type="long"/>
                    <param name="visitor" type="VoidFunction<BigDecimal>"/>
                </params>
            </method>
        </class>
    </source>