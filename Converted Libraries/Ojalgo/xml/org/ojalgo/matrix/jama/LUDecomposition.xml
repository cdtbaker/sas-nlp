<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.jama">
        <class name="LUDecomposition" line="3">
            <comment line="19">
                ------------------------
                Class variables                
            </comment>
            <comment line="42">
                ------------------------
                Constructor                
            </comment>
            <comment line="48">
                ------------------------
                Temporary, experimental code.
                ------------------------ \
                
                \ LU Decomposition, computed by Gaussian elimination.
                &lt;P&gt;
                This constructor computes L and U with the &quot;daxpy&quot;-based elimination
                algorithm used in LINPACK and MATLAB.  In Java, we suspect the dot-product,
                Crout algorithm will be faster.  We have temporarily included this
                constructor until timing experiments confirm this suspicion.
                &lt;P&gt;
                @param  A             Rectangular matrix
                @param  linpackflag   Use Gaussian elimination.  Actual value ignored.
                @return               Structure to access L, U and piv.
                \
                
                public LUDecomposition (Matrix A, int linpackflag) {
                 Initialize.
                LU = A.getArrayCopy();
                m = A.getRowDimension();
                n = A.getColumnDimension();
                piv = new int[m];
                for (int i = 0; i &lt; m; i++) {
                piv[i] = i;
                }
                pivsign = 1;
                 Main loop.
                for (int k = 0; k &lt; n; k++) {
                 Find pivot.
                int p = k;
                for (int i = k+1; i &lt; m; i++) {
                if (Math.abs(LU[i][k]) &gt; Math.abs(LU[p][k])) {
                p = i;
                }
                }
                 Exchange if necessary.
                if (p != k) {
                for (int j = 0; j &lt; n; j++) {
                double t = LU[p][j]; LU[p][j] = LU[k][j]; LU[k][j] = t;
                }
                int t = piv[p]; piv[p] = piv[k]; piv[k] = t;
                pivsign = -pivsign;
                }
                 Compute multipliers and eliminate k-th column.
                if (LU[k][k] != 0.0) {
                for (int i = k+1; i &lt; m; i++) {
                LU[i][k] = LU[k][k];
                for (int j = k+1; j &lt; n; j++) {
                LU[i][j] -= LU[i][k]LU[k][j];
                }
                }
                }
                }
                }
                
                \ ------------------------
                End of temporary code.                
            </comment>
            <comment line="107">
                ------------------------
                Public Methods                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="3">
                LU Decomposition.
                  &lt;P&gt;
                  For an m-by-n matrix A with m &gt;= n, the LU decomposition is an m-by-n
                  unit lower triangular matrix L, an n-by-n upper triangular matrix U,
                  and a permutation vector piv of length m so that A(piv,:) = LU.
                  If m &lt; n, then L is m-by-m and U is m-by-n.
                  &lt;P&gt;
                  The LU decompostion with pivoting always exists, even if the matrix is
                  singular, so the constructor will never fail.  The primary use of the
                  LU decomposition is in the solution of square systems of simultaneous
                  linear equations.  This will fail if isNonsingular() returns false.                
            </javadoc>
            <declaration name="LU" type="double[][]" line="22"/>
            <javadoc line="22">
                Array for internal storage of decomposition.                
                <serial>
                    internal array storage.                    
                </serial>
            </javadoc>
            <declaration name="m" type="int" line="27"/>
            <javadoc line="27">
                Row and column dimensions, and pivot sign.                
                <serial>
                    column dimension.                    
                </serial>
                <serial>
                    row dimension.                    
                </serial>
                <serial>
                    pivot sign.                    
                </serial>
            </javadoc>
            <declaration name="pivsign" type="int" line="34"/>
            <declaration name="piv" type="int[]" line="36"/>
            <javadoc line="36">
                Internal storage of pivot vector.                
                <serial>
                    pivot vector.                    
                </serial>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="45"/>
            <javadoc line="110">
                LU Decomposition
                  Structure to access L, U and piv.                
                <param>
                    A Rectangular matrix                    
                </param>
            </javadoc>
            <method name="LUDecomposition" type="constructor" line="115">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <comment line="118">
                    Use a &quot;left-looking&quot;, dot-product, Crout/Doolittle algorithm.                    
                </comment>
                <comment line="132">
                    Outer loop.                    
                </comment>
                <comment line="136">
                    Make a copy of the j-th column to localize references.                    
                </comment>
                <comment line="142">
                    Apply previous transformations.                    
                </comment>
                <comment line="147">
                    Most of the time is spent in the following dot product.                    
                </comment>
                <comment line="158">
                    Find pivot and exchange if necessary.                    
                </comment>
                <comment line="178">
                    Compute multipliers.                    
                </comment>
                <scope line="124"/>
                <declaration name="LUrowi" type="double[]" line="128"/>
                <declaration name="LUcolj" type="double[]" line="129"/>
                <scope line="133">
                    <scope line="137"/>
                    <scope line="143">
                        <declaration name="kmax" type="int" line="148"/>
                        <declaration name="s" type="double" line="149"/>
                        <scope line="150"/>
                    </scope>
                    <declaration name="p" type="int" line="159"/>
                    <scope line="160">
                        <scope line="161"/>
                    </scope>
                    <scope line="165">
                        <scope line="166">
                            <declaration name="t" type="double" line="167"/>
                        </scope>
                        <declaration name="k" type="int" line="171"/>
                    </scope>
                    <scope line="179">
                        <scope line="180"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="187">
                Determinant                
                <return>
                    det(A)                    
                </return>
                <exception>
                    IllegalArgumentException  Matrix must be square                    
                </exception>
            </javadoc>
            <method name="det" type="double" line="192">
                <scope line="193"/>
                <declaration name="d" type="double" line="196"/>
                <scope line="197"/>
            </method>
            <javadoc line="203">
                Return pivot permutation vector as a one-dimensional double array                
                <return>
                    (double) piv                    
                </return>
            </javadoc>
            <method name="getDoublePivot" type="double[]" line="207">
                <declaration name="vals" type="double[]" line="208"/>
                <scope line="209"/>
            </method>
            <javadoc line="215">
                Return lower triangular factor                
                <return>
                    L                    
                </return>
            </javadoc>
            <method name="getL" type="Matrix" line="219">
                <declaration name="X" type="Matrix" line="220"/>
                <declaration name="L" type="double[][]" line="221"/>
                <scope line="222">
                    <scope line="223">
                        <scope line="224"/>
                        <scope line="226"/>
                        <scope line="228"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="236">
                Return pivot permutation vector                
                <return>
                    piv                    
                </return>
            </javadoc>
            <method name="getPivot" type="int[]" line="240">
                <declaration name="p" type="int[]" line="241"/>
                <scope line="242"/>
            </method>
            <javadoc line="248">
                Return upper triangular factor                
                <return>
                    U                    
                </return>
            </javadoc>
            <method name="getU" type="Matrix" line="252">
                <declaration name="X" type="Matrix" line="253"/>
                <declaration name="U" type="double[][]" line="254"/>
                <scope line="255">
                    <scope line="256">
                        <scope line="257"/>
                        <scope line="259"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="267">
                Is the matrix nonsingular?                
                <return>
                    true if U, and hence A, is nonsingular.                    
                </return>
            </javadoc>
            <method name="isNonsingular" type="boolean" line="271">
                <scope line="272">
                    <scope line="273"/>
                </scope>
            </method>
            <javadoc line="280">
                Solve AX = B                
                <param>
                    B   A Matrix with as many rows as A and any number of columns.                    
                </param>
                <return>
                    X so that LUX = B(piv,:)                    
                </return>
                <exception>
                    IllegalArgumentException Matrix row dimensions must agree.                    
                </exception>
                <exception>
                    RuntimeException  Matrix is singular.                    
                </exception>
            </javadoc>
            <method name="solve" type="Matrix" line="287">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
                <comment line="296">
                    Copy right hand side with pivoting                    
                </comment>
                <comment line="301">
                    Solve L*Y = B(piv,:)                    
                </comment>
                <comment line="309">
                    Solve U*X = Y;                    
                </comment>
                <scope line="288"/>
                <scope line="291"/>
                <declaration name="nx" type="int" line="296"/>
                <declaration name="Xmat" type="Matrix" line="297"/>
                <declaration name="X" type="double[][]" line="298"/>
                <scope line="301">
                    <scope line="302">
                        <scope line="303"/>
                    </scope>
                </scope>
                <scope line="309">
                    <scope line="310"/>
                    <scope line="313">
                        <scope line="314"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>