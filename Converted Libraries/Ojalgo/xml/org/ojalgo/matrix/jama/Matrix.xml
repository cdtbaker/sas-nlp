<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.jama">
        <import package="java.io.BufferedReader"/>
        <import package="java.io.PrintWriter"/>
        <import package="java.io.StreamTokenizer"/>
        <import package="java.text.DecimalFormat"/>
        <import package="java.text.DecimalFormatSymbols"/>
        <import package="java.text.NumberFormat"/>
        <import package="java.util.Locale"/>
        <class name="Matrix" line="9">
            <implements interface="Cloneable"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="9">
                Jama = Java Matrix class.
                  &lt;P&gt;
                  The Java Matrix Class provides the fundamental operations of numerical
                  linear algebra.  Various constructors create Matrices from two dimensional
                  arrays of double precision floating point numbers.  Various &quot;gets&quot; and
                  &quot;sets&quot; provide access to submatrices and matrix elements.  Several methods 
                  implement basic matrix arithmetic, including matrix addition and
                  multiplication, matrix norms, and element-by-element array operations.
                  Methods for reading and printing matrices are also included.  All the
                  operations in this version of the Matrix Class involve real matrices.
                  Complex matrices may be handled in a future version.
                  &lt;P&gt;
                  Five fundamental matrix decompositions, which consist of pairs or triples
                  of matrices, permutation vectors, and the like, produce results in five
                  decomposition classes.  These decompositions are accessed by the Matrix
                  class to compute solutions of simultaneous linear equations, determinants,
                  inverses and other matrix functions.  The five decompositions are:
                  &lt;P&gt;&lt;UL&gt;
                  &lt;LI&gt;Cholesky Decomposition of symmetric, positive definite matrices.
                  &lt;LI&gt;LU Decomposition of rectangular matrices.
                  &lt;LI&gt;QR Decomposition of rectangular matrices.
                  &lt;LI&gt;Singular Value Decomposition of rectangular matrices.
                  &lt;LI&gt;Eigenvalue Decomposition of both symmetric and nonsymmetric square matrices.
                  &lt;/UL&gt;
                  &lt;DL&gt;
                  &lt;DT&gt;&lt;B&gt;Example of use:&lt;/B&gt;&lt;/DT&gt;
                  &lt;P&gt;
                  &lt;DD&gt;Solve a linear system A x = b and compute the residual norm, ||b - A x||.
                  &lt;P&gt;&lt;PRE&gt;
                  double[][] vals = {{1.,2.,3},{4.,5.,6.},{7.,8.,10.}};
                  Matrix A = new Matrix(vals);
                  Matrix b = Matrix.random(3,1);
                  Matrix x = A.solve(b);
                  Matrix r = A.times(x).minus(b);
                  double rnorm = r.normInf();
                  &lt;/PRE&gt;&lt;/DD&gt;
                  &lt;/DL&gt;                
                <author>
                    The MathWorks, Inc. and the National Institute of Standards and Technology.                    
                </author>
                <version>
                    5 August 1998                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="51"/>
            <javadoc line="52">
                Construct a matrix from a copy of a 2-D array.                
                <param>
                    A    Two-dimensional array of doubles.                    
                </param>
                <exception>
                    IllegalArgumentException All rows must have the same length                    
                </exception>
            </javadoc>
            <method name="constructWithCopy" type="Matrix" line="57">
                <params>
                    <param name="A" type="double[][]"/>
                </params>
                <declaration name="m" type="int" line="58"/>
                <declaration name="n" type="int" line="59"/>
                <declaration name="X" type="Matrix" line="60"/>
                <declaration name="C" type="double[][]" line="61"/>
                <scope line="62">
                    <scope line="63"/>
                    <scope line="66"/>
                </scope>
            </method>
            <javadoc line="72">
                Generate identity matrix                
                <param>
                    m    Number of rows.                    
                </param>
                <param>
                    n    Number of colums.                    
                </param>
                <return>
                    An m-by-n matrix with ones on the diagonal and zeros elsewhere.                    
                </return>
            </javadoc>
            <method name="identity" type="Matrix" line="78">
                <params>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                </params>
                <declaration name="A" type="Matrix" line="79"/>
                <declaration name="X" type="double[][]" line="80"/>
                <scope line="81">
                    <scope line="82"/>
                </scope>
            </method>
            <javadoc line="88">
                Generate matrix with random elements                
                <param>
                    m    Number of rows.                    
                </param>
                <param>
                    n    Number of colums.                    
                </param>
                <return>
                    An m-by-n matrix with uniformly distributed random elements.                    
                </return>
            </javadoc>
            <method name="random" type="Matrix" line="94">
                <params>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                </params>
                <declaration name="A" type="Matrix" line="95"/>
                <declaration name="X" type="double[][]" line="96"/>
                <scope line="97">
                    <scope line="98"/>
                </scope>
            </method>
            <javadoc line="104">
                Read a matrix from a stream.  The format is the same the print method,
                  so printed matrices can be read back in (provided they were printed using
                  US Locale).  Elements are separated by
                  whitespace, all the elements for each row appear on a single line,
                  the last row is followed by a blank line.                
                <param>
                    input the input stream.                    
                </param>
            </javadoc>
            <method name="read" type="Matrix" line="112">
                <params>
                    <param name="input" type="BufferedReader"/>
                </params>
                <declaration name="tokenizer" type="StreamTokenizer" line="113"/>
                <declaration name="vD" type="java.util.Vector&lt;Double&gt;" line="118"/>
                <scope line="119"/>
                <scope line="122"/>
                <scope line="125"/>
                <declaration name="n" type="int" line="129"/>
                <declaration name="row" type="double" line="130"/>
                <scope line="131"/>
                <declaration name="v" type="java.util.Vector&lt;double[]&gt;" line="134"/>
                <scope line="136">
                    <declaration name="j" type="int" line="138"/>
                    <scope line="139">
                        <scope line="140"/>
                    </scope>
                    <scope line="146"/>
                </scope>
                <declaration name="m" type="int" line="150"/>
                <declaration name="A" type="double[][]" line="151"/>
            </method>
            <declaration name="A" type="double[][]" line="155"/>
            <javadoc line="155">
                Array for internal storage of elements.                
                <serial>
                    internal array storage.                    
                </serial>
            </javadoc>
            <declaration name="m" type="int" line="160"/>
            <javadoc line="160">
                Row and column dimensions.                
                <serial>
                    row dimension.                    
                </serial>
                <serial>
                    column dimension.                    
                </serial>
            </javadoc>
            <javadoc line="166">
                Construct a matrix from a one-dimensional packed array                
                <param>
                    vals One-dimensional array of doubles, packed by columns (ala Fortran).                    
                </param>
                <param>
                    m    Number of rows.                    
                </param>
                <exception>
                    IllegalArgumentException Array length must be a multiple of m.                    
                </exception>
            </javadoc>
            <method name="Matrix" type="constructor" line="172">
                <params>
                    <param name="vals" type="double"/>
                    <param name="m" type="int"/>
                </params>
                <scope line="175"/>
                <scope line="179">
                    <scope line="180"/>
                </scope>
            </method>
            <javadoc line="185">
                Construct a matrix from a 2-D array.                
                <param>
                    A    Two-dimensional array of doubles.                    
                </param>
                <exception>
                    IllegalArgumentException All rows must have the same length                    
                </exception>
                <see>
                    #constructWithCopy                    
                </see>
            </javadoc>
            <method name="Matrix" type="constructor" line="191">
                <params>
                    <param name="A" type="double[][]"/>
                </params>
                <scope line="194">
                    <scope line="195"/>
                </scope>
            </method>
            <javadoc line="201">
                Construct a matrix quickly without checking arguments.                
                <param>
                    A    Two-dimensional array of doubles.                    
                </param>
                <param>
                    m    Number of rows.                    
                </param>
                <param>
                    n    Number of colums.                    
                </param>
            </javadoc>
            <method name="Matrix" type="constructor" line="207">
                <params>
                    <param name="A" type="double[][]"/>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="212">
                Construct an m-by-n matrix of zeros.                
                <param>
                    m    Number of rows.                    
                </param>
                <param>
                    n    Number of colums.                    
                </param>
            </javadoc>
            <method name="Matrix" type="constructor" line="217">
                <params>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="222">
                Construct an m-by-n constant matrix.                
                <param>
                    m    Number of rows.                    
                </param>
                <param>
                    n    Number of colums.                    
                </param>
                <param>
                    s    Fill the matrix with this scalar value.                    
                </param>
            </javadoc>
            <method name="Matrix" type="constructor" line="228">
                <params>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                    <param name="s" type="double"/>
                </params>
                <scope line="232">
                    <scope line="233"/>
                </scope>
            </method>
            <javadoc line="238">
                Element-by-element left division, C = A.\B                
                <param>
                    B    another matrix                    
                </param>
                <return>
                    A.\B                    
                </return>
            </javadoc>
            <method name="arrayLeftDivide" type="Matrix" line="243">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
                <declaration name="X" type="Matrix" line="245"/>
                <declaration name="C" type="double[][]" line="246"/>
                <scope line="247">
                    <scope line="248"/>
                </scope>
            </method>
            <javadoc line="254">
                Element-by-element left division in place, A = A.\B                
                <param>
                    B    another matrix                    
                </param>
                <return>
                    A.\B                    
                </return>
            </javadoc>
            <method name="arrayLeftDivideEquals" type="Matrix" line="259">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
                <scope line="261">
                    <scope line="262"/>
                </scope>
            </method>
            <javadoc line="268">
                Element-by-element right division, C = A./B                
                <param>
                    B    another matrix                    
                </param>
                <return>
                    A./B                    
                </return>
            </javadoc>
            <method name="arrayRightDivide" type="Matrix" line="273">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
                <declaration name="X" type="Matrix" line="275"/>
                <declaration name="C" type="double[][]" line="276"/>
                <scope line="277">
                    <scope line="278"/>
                </scope>
            </method>
            <javadoc line="284">
                Element-by-element right division in place, A = A./B                
                <param>
                    B    another matrix                    
                </param>
                <return>
                    A./B                    
                </return>
            </javadoc>
            <method name="arrayRightDivideEquals" type="Matrix" line="289">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
                <scope line="291">
                    <scope line="292"/>
                </scope>
            </method>
            <javadoc line="298">
                Element-by-element multiplication, C = A.B                
                <param>
                    B    another matrix                    
                </param>
                <return>
                    A.B                    
                </return>
            </javadoc>
            <method name="arrayTimes" type="Matrix" line="303">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
                <declaration name="X" type="Matrix" line="305"/>
                <declaration name="C" type="double[][]" line="306"/>
                <scope line="307">
                    <scope line="308"/>
                </scope>
            </method>
            <javadoc line="314">
                Element-by-element multiplication in place, A = A.B                
                <param>
                    B    another matrix                    
                </param>
                <return>
                    A.B                    
                </return>
            </javadoc>
            <method name="arrayTimesEquals" type="Matrix" line="319">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
                <scope line="321">
                    <scope line="322"/>
                </scope>
            </method>
            <javadoc line="328">
                Cholesky Decomposition                
                <return>
                    CholeskyDecomposition                    
                </return>
                <see>
                    CholeskyDecomposition                    
                </see>
            </javadoc>
            <method name="chol" type="CholeskyDecomposition" line="333"/>
            <javadoc line="336">
                Clone the Matrix object.                
            </javadoc>
            <method name="clone" type="Object" line="339"/>
            <javadoc line="342">
                Matrix condition (2 norm)                
                <return>
                    ratio of largest to smallest singular value.                    
                </return>
            </javadoc>
            <method name="cond" type="double" line="346"/>
            <javadoc line="349">
                Make a deep copy of a matrix                
            </javadoc>
            <method name="copy" type="Matrix" line="352">
                <declaration name="X" type="Matrix" line="353"/>
                <declaration name="C" type="double[][]" line="354"/>
                <scope line="355">
                    <scope line="356"/>
                </scope>
            </method>
            <javadoc line="362">
                Matrix determinant                
                <return>
                    determinant                    
                </return>
            </javadoc>
            <method name="det" type="double" line="366"/>
            <javadoc line="369">
                Eigenvalue Decomposition                
                <return>
                    EigenvalueDecomposition                    
                </return>
                <see>
                    EigenvalueDecomposition                    
                </see>
            </javadoc>
            <method name="eig" type="EigenvalueDecomposition" line="374"/>
            <javadoc line="377">
                Get a single element.                
                <param>
                    i    Row index.                    
                </param>
                <param>
                    j    Column index.                    
                </param>
                <return>
                    A(i,j)                    
                </return>
                <exception>
                    ArrayIndexOutOfBoundsException                    
                </exception>
            </javadoc>
            <method name="get" type="double" line="384">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
            </method>
            <javadoc line="387">
                Access the internal two-dimensional array.                
                <return>
                    Pointer to the two-dimensional array of matrix elements.                    
                </return>
            </javadoc>
            <method name="getArray" type="double[][]" line="391"/>
            <javadoc line="394">
                Copy the internal two-dimensional array.                
                <return>
                    Two-dimensional array copy of matrix elements.                    
                </return>
            </javadoc>
            <method name="getArrayCopy" type="double[][]" line="398">
                <declaration name="C" type="double[][]" line="399"/>
                <scope line="400">
                    <scope line="401"/>
                </scope>
            </method>
            <javadoc line="407">
                Get column dimension.                
                <return>
                    n, the number of columns.                    
                </return>
            </javadoc>
            <method name="getColumnDimension" type="int" line="411"/>
            <javadoc line="414">
                Make a one-dimensional column packed copy of the internal array.                
                <return>
                    Matrix elements packed in a one-dimensional array by columns.                    
                </return>
            </javadoc>
            <method name="getColumnPackedCopy" type="double[]" line="418">
                <declaration name="vals" type="double[]" line="419"/>
                <scope line="420">
                    <scope line="421"/>
                </scope>
            </method>
            <javadoc line="427">
                Get a submatrix.                
                <param>
                    i0   Initial row index                    
                </param>
                <param>
                    i1   Final row index                    
                </param>
                <param>
                    j0   Initial column index                    
                </param>
                <param>
                    j1   Final column index                    
                </param>
                <return>
                    A(i0:i1,j0:j1)                    
                </return>
                <exception>
                    ArrayIndexOutOfBoundsException Submatrix indices                    
                </exception>
            </javadoc>
            <method name="getMatrix" type="Matrix" line="436">
                <params>
                    <param name="i0" type="int"/>
                    <param name="i1" type="int"/>
                    <param name="j0" type="int"/>
                    <param name="j1" type="int"/>
                </params>
                <declaration name="X" type="Matrix" line="437"/>
                <declaration name="B" type="double[][]" line="438"/>
                <scope line="439">
                    <scope line="440">
                        <scope line="441"/>
                    </scope>
                </scope>
                <scope line="446"/>
            </method>
            <javadoc line="451">
                Get a submatrix.                
                <param>
                    i0   Initial row index                    
                </param>
                <param>
                    i1   Final row index                    
                </param>
                <param>
                    c    Array of column indices.                    
                </param>
                <return>
                    A(i0:i1,c(:))                    
                </return>
                <exception>
                    ArrayIndexOutOfBoundsException Submatrix indices                    
                </exception>
            </javadoc>
            <method name="getMatrix" type="Matrix" line="459">
                <params>
                    <param name="i0" type="int"/>
                    <param name="i1" type="int"/>
                    <param name="c" type="int[]"/>
                </params>
                <declaration name="X" type="Matrix" line="460"/>
                <declaration name="B" type="double[][]" line="461"/>
                <scope line="462">
                    <scope line="463">
                        <scope line="464"/>
                    </scope>
                </scope>
                <scope line="469"/>
            </method>
            <javadoc line="474">
                Get a submatrix.                
                <param>
                    r    Array of row indices.                    
                </param>
                <param>
                    j0   Initial column index                    
                </param>
                <param>
                    j1   Final column index                    
                </param>
                <return>
                    A(r(:),j0:j1)                    
                </return>
                <exception>
                    ArrayIndexOutOfBoundsException Submatrix indices                    
                </exception>
            </javadoc>
            <method name="getMatrix" type="Matrix" line="482">
                <params>
                    <param name="r" type="int[]"/>
                    <param name="j0" type="int"/>
                    <param name="j1" type="int"/>
                </params>
                <declaration name="X" type="Matrix" line="483"/>
                <declaration name="B" type="double[][]" line="484"/>
                <scope line="485">
                    <scope line="486">
                        <scope line="487"/>
                    </scope>
                </scope>
                <scope line="492"/>
            </method>
            <javadoc line="497">
                Get a submatrix.                
                <param>
                    r    Array of row indices.                    
                </param>
                <param>
                    c    Array of column indices.                    
                </param>
                <return>
                    A(r(:),c(:))                    
                </return>
                <exception>
                    ArrayIndexOutOfBoundsException Submatrix indices                    
                </exception>
            </javadoc>
            <method name="getMatrix" type="Matrix" line="504">
                <params>
                    <param name="r" type="int[]"/>
                    <param name="c" type="int[]"/>
                </params>
                <declaration name="X" type="Matrix" line="505"/>
                <declaration name="B" type="double[][]" line="506"/>
                <scope line="507">
                    <scope line="508">
                        <scope line="509"/>
                    </scope>
                </scope>
                <scope line="514"/>
            </method>
            <javadoc line="519">
                Get row dimension.                
                <return>
                    m, the number of rows.                    
                </return>
            </javadoc>
            <method name="getRowDimension" type="int" line="523"/>
            <javadoc line="526">
                Make a one-dimensional row packed copy of the internal array.                
                <return>
                    Matrix elements packed in a one-dimensional array by rows.                    
                </return>
            </javadoc>
            <method name="getRowPackedCopy" type="double[]" line="530">
                <declaration name="vals" type="double[]" line="531"/>
                <scope line="532">
                    <scope line="533"/>
                </scope>
            </method>
            <javadoc line="539">
                Matrix inverse or pseudoinverse                
                <return>
                    inverse(A) if A is square, pseudoinverse otherwise.                    
                </return>
            </javadoc>
            <method name="inverse" type="Matrix" line="543"/>
            <javadoc line="546">
                LU Decomposition                
                <return>
                    LUDecomposition                    
                </return>
                <see>
                    LUDecomposition                    
                </see>
            </javadoc>
            <method name="lu" type="LUDecomposition" line="551"/>
            <javadoc line="554">
                C = A - B                
                <param>
                    B    another matrix                    
                </param>
                <return>
                    A - B                    
                </return>
            </javadoc>
            <method name="minus" type="Matrix" line="559">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
                <declaration name="X" type="Matrix" line="561"/>
                <declaration name="C" type="double[][]" line="562"/>
                <scope line="563">
                    <scope line="564"/>
                </scope>
            </method>
            <javadoc line="570">
                A = A - B                
                <param>
                    B    another matrix                    
                </param>
                <return>
                    A - B                    
                </return>
            </javadoc>
            <method name="minusEquals" type="Matrix" line="575">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
                <scope line="577">
                    <scope line="578"/>
                </scope>
            </method>
            <javadoc line="584">
                One norm                
                <return>
                    maximum column sum.                    
                </return>
            </javadoc>
            <method name="norm1" type="double" line="588">
                <declaration name="f" type="double" line="589"/>
                <scope line="590">
                    <declaration name="s" type="double" line="591"/>
                    <scope line="592"/>
                </scope>
            </method>
            <javadoc line="599">
                Two norm                
                <return>
                    maximum singular value.                    
                </return>
            </javadoc>
            <method name="norm2" type="double" line="603"/>
            <javadoc line="606">
                Frobenius norm                
                <return>
                    sqrt of sum of squares of all elements.                    
                </return>
            </javadoc>
            <method name="normF" type="double" line="610">
                <declaration name="f" type="double" line="611"/>
                <scope line="612">
                    <scope line="613"/>
                </scope>
            </method>
            <javadoc line="619">
                Infinity norm                
                <return>
                    maximum row sum.                    
                </return>
            </javadoc>
            <method name="normInf" type="double" line="623">
                <declaration name="f" type="double" line="624"/>
                <scope line="625">
                    <declaration name="s" type="double" line="626"/>
                    <scope line="627"/>
                </scope>
            </method>
            <javadoc line="634">
                C = A + B                
                <param>
                    B    another matrix                    
                </param>
                <return>
                    A + B                    
                </return>
            </javadoc>
            <method name="plus" type="Matrix" line="639">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
                <declaration name="X" type="Matrix" line="641"/>
                <declaration name="C" type="double[][]" line="642"/>
                <scope line="643">
                    <scope line="644"/>
                </scope>
            </method>
            <javadoc line="650">
                A = A + B                
                <param>
                    B    another matrix                    
                </param>
                <return>
                    A + B                    
                </return>
            </javadoc>
            <method name="plusEquals" type="Matrix" line="655">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
                <scope line="657">
                    <scope line="658"/>
                </scope>
            </method>
            <javadoc line="664">
                Print the matrix to stdout.   Line the elements up in columns
                  with a Fortran-like &apos;Fw.d&apos; style format.                
                <param>
                    w    Column width.                    
                </param>
                <param>
                    d    Number of digits after the decimal.                    
                </param>
            </javadoc>
            <method name="print" type="void" line="670">
                <params>
                    <param name="w" type="int"/>
                    <param name="d" type="int"/>
                </params>
            </method>
            <javadoc line="673">
                Print the matrix to stdout.  Line the elements up in columns.
                  Use the format object, and right justify within columns of width
                  characters.
                  Note that is the matrix is to be read back in, you probably will want
                  to use a NumberFormat that is set to US Locale.                
                <param>
                    format A  Formatting object for individual elements.                    
                </param>
                <param>
                    width     Field width for each column.                    
                </param>
                <see>
                    java.text.DecimalFormat#setDecimalFormatSymbols                    
                </see>
            </javadoc>
            <method name="print" type="void" line="683">
                <params>
                    <param name="format" type="NumberFormat"/>
                    <param name="width" type="int"/>
                </params>
            </method>
            <javadoc line="686">
                Print the matrix to the output stream.   Line the elements up in
                  columns with a Fortran-like &apos;Fw.d&apos; style format.                
                <param>
                    output Output stream.                    
                </param>
                <param>
                    w      Column width.                    
                </param>
                <param>
                    d      Number of digits after the decimal.                    
                </param>
            </javadoc>
            <method name="print" type="void" line="693">
                <params>
                    <param name="output" type="PrintWriter"/>
                    <param name="w" type="int"/>
                    <param name="d" type="int"/>
                </params>
                <declaration name="format" type="DecimalFormat" line="694"/>
            </method>
            <javadoc line="702">
                Print the matrix to the output stream.  Line the elements up in columns.
                  Use the format object, and right justify within columns of width
                  characters.
                  Note that is the matrix is to be read back in, you probably will want
                  to use a NumberFormat that is set to US Locale.                
                <param>
                    output the output stream.                    
                </param>
                <param>
                    format A formatting object to format the matrix elements                    
                </param>
                <param>
                    width  Column width.                    
                </param>
                <see>
                    java.text.DecimalFormat#setDecimalFormatSymbols                    
                </see>
            </javadoc>
            <method name="print" type="void" line="713">
                <params>
                    <param name="output" type="PrintWriter"/>
                    <param name="format" type="NumberFormat"/>
                    <param name="width" type="int"/>
                </params>
                <scope line="715">
                    <scope line="716">
                        <declaration name="s" type="String" line="717"/>
                        <declaration name="padding" type="int" line="718"/>
                        <scope line="719"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="728">
                QR Decomposition                
                <return>
                    QRDecomposition                    
                </return>
                <see>
                    QRDecomposition                    
                </see>
            </javadoc>
            <method name="qr" type="QRDecomposition" line="733"/>
            <javadoc line="736">
                Matrix rank                
                <return>
                    effective numerical rank, obtained from SVD.                    
                </return>
            </javadoc>
            <method name="rank" type="int" line="740"/>
            <javadoc line="743">
                Set a single element.                
                <param>
                    i    Row index.                    
                </param>
                <param>
                    j    Column index.                    
                </param>
                <param>
                    s    A(i,j).                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException                    
                </exception>
            </javadoc>
            <method name="set" type="void" line="750">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                    <param name="s" type="double"/>
                </params>
            </method>
            <javadoc line="753">
                Set a submatrix.                
                <param>
                    i0   Initial row index                    
                </param>
                <param>
                    i1   Final row index                    
                </param>
                <param>
                    j0   Initial column index                    
                </param>
                <param>
                    j1   Final column index                    
                </param>
                <param>
                    X    A(i0:i1,j0:j1)                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException Submatrix indices                    
                </exception>
            </javadoc>
            <method name="setMatrix" type="void" line="762">
                <params>
                    <param name="i0" type="int"/>
                    <param name="i1" type="int"/>
                    <param name="j0" type="int"/>
                    <param name="j1" type="int"/>
                    <param name="X" type="Matrix"/>
                </params>
                <scope line="763">
                    <scope line="764">
                        <scope line="765"/>
                    </scope>
                </scope>
                <scope line="770"/>
            </method>
            <javadoc line="774">
                Set a submatrix.                
                <param>
                    i0   Initial row index                    
                </param>
                <param>
                    i1   Final row index                    
                </param>
                <param>
                    c    Array of column indices.                    
                </param>
                <param>
                    X    A(i0:i1,c(:))                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException Submatrix indices                    
                </exception>
            </javadoc>
            <method name="setMatrix" type="void" line="782">
                <params>
                    <param name="i0" type="int"/>
                    <param name="i1" type="int"/>
                    <param name="c" type="int[]"/>
                    <param name="X" type="Matrix"/>
                </params>
                <scope line="783">
                    <scope line="784">
                        <scope line="785"/>
                    </scope>
                </scope>
                <scope line="790"/>
            </method>
            <javadoc line="794">
                Set a submatrix.                
                <param>
                    r    Array of row indices.                    
                </param>
                <param>
                    j0   Initial column index                    
                </param>
                <param>
                    j1   Final column index                    
                </param>
                <param>
                    X    A(r(:),j0:j1)                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException Submatrix indices                    
                </exception>
            </javadoc>
            <method name="setMatrix" type="void" line="802">
                <params>
                    <param name="r" type="int[]"/>
                    <param name="j0" type="int"/>
                    <param name="j1" type="int"/>
                    <param name="X" type="Matrix"/>
                </params>
                <scope line="803">
                    <scope line="804">
                        <scope line="805"/>
                    </scope>
                </scope>
                <scope line="810"/>
            </method>
            <javadoc line="814">
                Set a submatrix.                
                <param>
                    r    Array of row indices.                    
                </param>
                <param>
                    c    Array of column indices.                    
                </param>
                <param>
                    X    A(r(:),c(:))                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException Submatrix indices                    
                </exception>
            </javadoc>
            <method name="setMatrix" type="void" line="821">
                <params>
                    <param name="r" type="int[]"/>
                    <param name="c" type="int[]"/>
                    <param name="X" type="Matrix"/>
                </params>
                <scope line="822">
                    <scope line="823">
                        <scope line="824"/>
                    </scope>
                </scope>
                <scope line="829"/>
            </method>
            <javadoc line="833">
                Solve AX = B                
                <param>
                    B    right hand side                    
                </param>
                <return>
                    solution if A is square, least squares solution otherwise                    
                </return>
            </javadoc>
            <method name="solve" type="Matrix" line="838">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
            </method>
            <javadoc line="841">
                Solve XA = B, which is also A&apos;X&apos; = B&apos;                
                <param>
                    B    right hand side                    
                </param>
                <return>
                    solution if A is square, least squares solution otherwise.                    
                </return>
            </javadoc>
            <method name="solveTranspose" type="Matrix" line="846">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
            </method>
            <javadoc line="849">
                Singular Value Decomposition                
                <return>
                    SingularValueDecomposition                    
                </return>
                <see>
                    SingularValueDecomposition                    
                </see>
            </javadoc>
            <method name="svd" type="SingularValueDecomposition" line="854"/>
            <javadoc line="857">
                Multiply a matrix by a scalar, C = sA                
                <param>
                    s    scalar                    
                </param>
                <return>
                    sA                    
                </return>
            </javadoc>
            <method name="times" type="Matrix" line="862">
                <params>
                    <param name="s" type="double"/>
                </params>
                <declaration name="X" type="Matrix" line="863"/>
                <declaration name="C" type="double[][]" line="864"/>
                <scope line="865">
                    <scope line="866"/>
                </scope>
            </method>
            <javadoc line="872">
                Linear algebraic matrix multiplication, A  B                
                <param>
                    B    another matrix                    
                </param>
                <return>
                    Matrix product, A  B                    
                </return>
                <exception>
                    IllegalArgumentException Matrix inner dimensions must agree.                    
                </exception>
            </javadoc>
            <method name="times" type="Matrix" line="878">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
                <scope line="879"/>
                <declaration name="X" type="Matrix" line="882"/>
                <declaration name="C" type="double[][]" line="883"/>
                <declaration name="Bcolj" type="double[]" line="884"/>
                <scope line="885">
                    <scope line="886"/>
                    <scope line="889">
                        <declaration name="Arowi" type="double[]" line="890"/>
                        <declaration name="s" type="double" line="891"/>
                        <scope line="892"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="900">
                Multiply a matrix by a scalar in place, A = sA                
                <param>
                    s    scalar                    
                </param>
                <return>
                    replace A by sA                    
                </return>
            </javadoc>
            <method name="timesEquals" type="Matrix" line="905">
                <params>
                    <param name="s" type="double"/>
                </params>
                <scope line="906">
                    <scope line="907"/>
                </scope>
            </method>
            <javadoc line="913">
                Matrix trace.                
                <return>
                    sum of the diagonal elements.                    
                </return>
            </javadoc>
            <method name="trace" type="double" line="917">
                <declaration name="t" type="double" line="918"/>
                <scope line="919"/>
            </method>
            <javadoc line="924">
                Matrix transpose.                
                <return>
                    A'                    
                </return>
            </javadoc>
            <method name="transpose" type="Matrix" line="928">
                <declaration name="X" type="Matrix" line="929"/>
                <declaration name="C" type="double[][]" line="930"/>
                <scope line="931">
                    <scope line="932"/>
                </scope>
            </method>
            <javadoc line="938">
                Unary minus                
                <return>
                    -A                    
                </return>
            </javadoc>
            <method name="uminus" type="Matrix" line="942">
                <declaration name="X" type="Matrix" line="943"/>
                <declaration name="C" type="double[][]" line="944"/>
                <scope line="945">
                    <scope line="946"/>
                </scope>
            </method>
            <javadoc line="952">
                Check if size(A) == size(B)                
            </javadoc>
            <method name="checkMatrixDimensions" type="void" line="955">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
                <scope line="956"/>
            </method>
        </class>
    </source>