<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.jama">
        <class name="QRDecomposition" line="2">
            <implements interface="java.io.Serializable"/>
            <javadoc line="2">
                QR Decomposition.
                  &lt;P&gt;
                  For an m-by-n matrix A with m &gt;= n, the QR decomposition is an m-by-n
                  orthogonal matrix Q and an n-by-n upper triangular matrix R so that
                  A = QR.
                  &lt;P&gt;
                  The QR decompostion always exists, even if the matrix does not have
                  full rank, so the constructor will never fail.  The primary use of the
                  QR decomposition is in the least squares solution of nonsquare systems
                  of simultaneous linear equations.  This will fail if isFullRank()
                  returns false.                
            </javadoc>
            <declaration name="QR" type="double[][]" line="16"/>
            <javadoc line="16">
                Array for internal storage of decomposition.                
                <serial>
                    internal array storage.                    
                </serial>
            </javadoc>
            <declaration name="m" type="int" line="21"/>
            <javadoc line="21">
                Row and column dimensions.                
                <serial>
                    column dimension.                    
                </serial>
                <serial>
                    row dimension.                    
                </serial>
            </javadoc>
            <declaration name="Rdiag" type="double[]" line="27"/>
            <javadoc line="27">
                Array for internal storage of diagonal of R.                
                <serial>
                    diagonal of R.                    
                </serial>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="32"/>
            <javadoc line="33">
                QR Decomposition, computed by Householder reflections.
                  Structure to access R and the Householder vectors and compute Q.                
                <param>
                    A    Rectangular matrix                    
                </param>
            </javadoc>
            <method name="QRDecomposition" type="constructor" line="38">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <scope line="43">
                    <declaration name="nrm" type="double" line="44"/>
                    <scope line="45"/>
                    <scope line="48">
                        <scope line="49"/>
                        <scope line="52"/>
                        <scope line="56">
                            <declaration name="s" type="double" line="57"/>
                            <scope line="58"/>
                            <scope line="62"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="70">
                Return the Householder vectors                
                <return>
                    Lower trapezoidal matrix whose columns define the reflections                    
                </return>
            </javadoc>
            <method name="getH" type="Matrix" line="74">
                <declaration name="X" type="Matrix" line="75"/>
                <declaration name="H" type="double[][]" line="76"/>
                <scope line="77">
                    <scope line="78">
                        <scope line="79"/>
                        <scope line="82"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="89">
                Generate and return the (economy-sized) orthogonal factor                
                <return>
                    Q                    
                </return>
            </javadoc>
            <method name="getQ" type="Matrix" line="93">
                <declaration name="X" type="Matrix" line="94"/>
                <declaration name="Q" type="double[][]" line="95"/>
                <scope line="96">
                    <scope line="97"/>
                    <scope line="101">
                        <scope line="102">
                            <declaration name="s" type="double" line="103"/>
                            <scope line="104"/>
                            <scope line="108"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="116">
                Return the upper triangular factor                
                <return>
                    R                    
                </return>
            </javadoc>
            <method name="getR" type="Matrix" line="120">
                <declaration name="X" type="Matrix" line="121"/>
                <declaration name="R" type="double[][]" line="122"/>
                <scope line="123">
                    <scope line="124">
                        <scope line="125"/>
                        <scope line="128"/>
                        <scope line="131"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="138">
                Is the matrix full rank?                
                <return>
                    true if R, and hence A, has full rank.                    
                </return>
            </javadoc>
            <method name="isFullRank" type="boolean" line="142">
                <scope line="143">
                    <scope line="144"/>
                </scope>
            </method>
            <javadoc line="150">
                Least squares solution of AX = B                
                <param>
                    B    A Matrix with as many rows as A and any number of columns.                    
                </param>
                <return>
                    X that minimizes the two norm of QRX-B.                    
                </return>
                <exception>
                    IllegalArgumentException  Matrix row dimensions must agree.                    
                </exception>
                <exception>
                    RuntimeException  Matrix is rank deficient.                    
                </exception>
            </javadoc>
            <method name="solve" type="Matrix" line="157">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
                <scope line="158"/>
                <scope line="161"/>
                <declaration name="nx" type="int" line="164"/>
                <declaration name="X" type="double[][]" line="165"/>
                <scope line="166">
                    <scope line="167">
                        <declaration name="s" type="double" line="168"/>
                        <scope line="169"/>
                        <scope line="173"/>
                    </scope>
                </scope>
                <scope line="178">
                    <scope line="179"/>
                    <scope line="182">
                        <scope line="183"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>