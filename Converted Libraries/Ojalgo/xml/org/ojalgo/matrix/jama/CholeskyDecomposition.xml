<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.jama">
        <class name="CholeskyDecomposition" line="3">
            <comment line="16">
                ------------------------
                Class variables                
            </comment>
            <comment line="35">
                ------------------------
                Constructor                
            </comment>
            <comment line="41">
                ------------------------
                Temporary, experimental code.
                 ------------------------ \
                
                \ Right Triangular Cholesky Decomposition.
                &lt;P&gt;
                For a symmetric, positive definite matrix A, the Right Cholesky
                decomposition is an upper triangular matrix R so that A = R&apos;R.
                This constructor computes R with the Fortran inspired column oriented
                algorithm used in LINPACK and MATLAB.  In Java, we suspect a row oriented,
                lower triangular decomposition is faster.  We have temporarily included
                this constructor here until timing experiments confirm this suspicion.
                \
                
                \ Array for internal storage of right triangular decomposition. \
                private transient double[][] R;
                
                \ Cholesky algorithm for symmetric and positive definite matrix.
                @param  A           Square, symmetric matrix.
                @param  rightflag   Actual value ignored.
                @return             Structure to access R and isspd flag.
                \
                
                public CholeskyDecomposition (Matrix Arg, int rightflag) {
                 Initialize.
                double[][] A = Arg.getArray();
                n = Arg.getColumnDimension();
                R = new double[n][n];
                isspd = (Arg.getColumnDimension() == n);
                 Main loop.
                for (int j = 0; j &lt; n; j++) {
                double d = 0.0;
                for (int k = 0; k &lt; j; k++) {
                double s = A[k][j];
                for (int i = 0; i &lt; k; i++) {
                s = s - R[i][k]R[i][j];
                }
                R[k][j] = s = sR[k][k];
                d = d + ss;
                isspd = isspd &amp; (A[k][j] == A[j][k]);
                }
                d = A[j][j] - d;
                isspd = isspd &amp; (d &gt; 0.0);
                R[j][j] = Math.sqrt(Math.max(d,0.0));
                for (int k = j+1; k &lt; n; k++) {
                R[k][j] = 0.0;
                }
                }
                }
                
                \ Return upper triangular factor.
                @return     R
                \
                
                public Matrix getR () {
                return new Matrix(R,n,n);
                }
                
                \ ------------------------
                End of temporary code.                
            </comment>
            <comment line="103">
                ------------------------
                Public Methods                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="3">
                Cholesky Decomposition.
                  &lt;P&gt;
                  For a symmetric, positive definite matrix A, the Cholesky decomposition
                  is an lower triangular matrix L so that A = LL&apos;.
                  &lt;P&gt;
                  If the matrix is not symmetric or positive definite, the constructor
                  returns a partial decomposition and sets an internal flag that may
                  be queried by the isSPD() method.                
            </javadoc>
            <declaration name="L" type="double[][]" line="19"/>
            <javadoc line="19">
                Array for internal storage of decomposition.                
                <serial>
                    internal array storage.                    
                </serial>
            </javadoc>
            <declaration name="n" type="int" line="24"/>
            <javadoc line="24">
                Row and column dimension (square matrix).                
                <serial>
                    matrix dimension.                    
                </serial>
            </javadoc>
            <declaration name="isspd" type="boolean" line="29"/>
            <javadoc line="29">
                Symmetric and positive definite flag.                
                <serial>
                    is symmetric and positive definite flag.                    
                </serial>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="38"/>
            <javadoc line="106">
                Cholesky algorithm for symmetric and positive definite matrix.
                  Structure to access L and isspd flag.                
                <param>
                    Arg   Square, symmetric matrix.                    
                </param>
            </javadoc>
            <method name="CholeskyDecomposition" type="constructor" line="111">
                <params>
                    <param name="Arg" type="Matrix"/>
                </params>
                <comment line="114">
                    Initialize.                    
                </comment>
                <comment line="119">
                    Main loop.                    
                </comment>
                <declaration name="A" type="double[][]" line="114"/>
                <scope line="119">
                    <declaration name="Lrowj" type="double[]" line="120"/>
                    <declaration name="d" type="double" line="121"/>
                    <scope line="122">
                        <declaration name="Lrowk" type="double[]" line="123"/>
                        <declaration name="s" type="double" line="124"/>
                        <scope line="125"/>
                    </scope>
                    <scope line="135"/>
                </scope>
            </method>
            <javadoc line="141">
                Return triangular factor.                
                <return>
                    L                    
                </return>
            </javadoc>
            <method name="getL" type="Matrix" line="145"/>
            <javadoc line="149">
                Is the matrix symmetric and positive definite?                
                <return>
                    true if A is symmetric and positive definite.                    
                </return>
            </javadoc>
            <method name="isSPD" type="boolean" line="153"/>
            <javadoc line="157">
                Solve AX = B                
                <param>
                    B   A Matrix with as many rows as A and any number of columns.                    
                </param>
                <return>
                    X so that LL&apos;X = B                    
                </return>
                <exception>
                    IllegalArgumentException  Matrix row dimensions must agree.                    
                </exception>
                <exception>
                    RuntimeException  Matrix is not symmetric positive definite.                    
                </exception>
            </javadoc>
            <method name="solve" type="Matrix" line="164">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
                <comment line="173">
                    Copy right hand side.                    
                </comment>
                <comment line="177">
                    Solve L*Y = B;                    
                </comment>
                <comment line="187">
                    Solve L&apos;*X = Y;                    
                </comment>
                <scope line="165"/>
                <scope line="168"/>
                <declaration name="X" type="double[][]" line="173"/>
                <declaration name="nx" type="int" line="174"/>
                <scope line="177">
                    <scope line="178">
                        <scope line="179"/>
                    </scope>
                </scope>
                <scope line="187">
                    <scope line="188">
                        <scope line="189"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>