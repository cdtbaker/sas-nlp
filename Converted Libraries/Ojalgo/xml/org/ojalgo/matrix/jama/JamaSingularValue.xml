<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.jama">
        <import package="org.ojalgo.ProgrammingError"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.decomposition.SingularValue"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="JamaSingularValue" line="12">
            <extends class="JamaAbstractDecomposition"/>
            <implements interface="SingularValue">
                <type_params>
                    <type_param name="Double"/>
                </type_params>
            </implements>
            <javadoc line="12">
                This class adapts JAMA&apos;s SingularValueDecomposition to ojAlgo&apos;s{@linkplain SingularValue} interface.
                  speed: 52.641s                
                <author>
                    apete                    
                </author>
            </javadoc>
            <declaration name="myDelegate" type="SingularValueDecomposition" line="18"/>
            <declaration name="myTransposed" type="boolean" line="19"/>
            <declaration name="myPseudoinverse" type="JamaMatrix" line="20"/>
            <javadoc line="21">
                Not recommended to use this constructor directly.
                  Consider using the static factory method{@linkplain org.ojalgo.matrix.decomposition.SingularValueDecomposition#makeJama()}instead.                
            </javadoc>
            <method name="JamaSingularValue" type="constructor" line="25"/>
            <method name="compute" type="boolean" line="28">
                <params>
                    <param name="matrix" type="Access2D<?>"/>
                    <param name="singularValuesOnly" type="boolean"/>
                    <param name="fullSize" type="boolean"/>
                </params>
                <declaration name="tmpCast" type="Matrix" line="30"/>
            </method>
            <method name="equals" type="boolean" line="33">
                <params>
                    <param name="aStore" type="MatrixStore<Double>"/>
                    <param name="context" type="NumberContext"/>
                </params>
            </method>
            <method name="getCondition" type="double" line="36"/>
            <method name="getD" type="JamaMatrix" line="39"/>
            <method name="getFrobeniusNorm" type="double" line="42">
                <declaration name="retVal" type="double" line="43"/>
                <declaration name="tmpVal" type="double" line="44"/>
                <declaration name="tmpSingularValues" type="Array1D&lt;Double&gt;" line="45"/>
                <scope line="46"/>
            </method>
            <method name="getInverse" type="JamaMatrix" line="52">
                <scope line="53">
                    <declaration name="tmpQ1" type="double[][]" line="54"/>
                    <declaration name="tmpSingular" type="double[]" line="55"/>
                    <declaration name="tmpMtrx" type="Matrix" line="56"/>
                    <scope line="57">
                        <scope line="58">
                            <scope line="59"/>
                        </scope>
                        <scope line="63">
                            <scope line="64"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getKyFanNorm" type="double" line="73">
                <params>
                    <param name="k" type="int"/>
                </params>
                <declaration name="retVal" type="double" line="74"/>
                <declaration name="tmpSingularValues" type="Array1D&lt;Double&gt;" line="75"/>
                <declaration name="tmpK" type="int" line="76"/>
                <scope line="77"/>
            </method>
            <method name="getOperatorNorm" type="double" line="82"/>
            <method name="getQ1" type="JamaMatrix" line="85"/>
            <method name="getQ2" type="JamaMatrix" line="88"/>
            <method name="getRank" type="int" line="91"/>
            <method name="getSingularValues" type="Array1D<Double>" line="94"/>
            <method name="getTraceNorm" type="double" line="97"/>
            <method name="isAspectRatioNormal" type="boolean" line="100"/>
            <method name="isComputed" type="boolean" line="103"/>
            <method name="isFullSize" type="boolean" line="106"/>
            <method name="isOrdered" type="boolean" line="109"/>
            <method name="isSolvable" type="boolean" line="112"/>
            <method name="reconstruct" type="MatrixStore<Double>" line="115"/>
            <method name="reset" type="void" line="118"/>
            <javadoc line="122">
                Internally this implementation uses the pseudoinverse that is recreated 
                  with every call.                
            </javadoc>
            <method name="solve" type="JamaMatrix" line="126">
                <params>
                    <param name="rhs" type="Access2D<Double>"/>
                </params>
            </method>
            <method name="toString" type="String" line="129"/>
            <method name="compute" type="boolean" line="132">
                <params>
                    <param name="aDelegate" type="Matrix"/>
                </params>
            </method>
            <method name="compute" type="boolean" line="135">
                <params>
                    <param name="aDelegate" type="Matrix"/>
                    <param name="singularValuesOnly" type="boolean"/>
                </params>
                <declaration name="tmpMtrx" type="Matrix" line="136"/>
                <scope line="137"/>
                <scope line="141"/>
            </method>
            <method name="solve" type="Matrix" line="148">
                <params>
                    <param name="aRHS" type="Matrix"/>
                </params>
            </method>
        </class>
    </source>