<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.jama">
        <class name="EigenvalueDecomposition" line="3">
            <comment line="22">
                ------------------------
                Class variables                
            </comment>
            <comment line="56">
                ------------------------
                Private Methods                
            </comment>
            <comment line="60">
                Symmetric Householder reduction to tridiagonal form.                
            </comment>
            <comment line="64">
                Symmetric tridiagonal QL algorithm.                
            </comment>
            <comment line="68">
                Nonsymmetric reduction to Hessenberg form.                
            </comment>
            <comment line="158">
                Complex scalar division.                
            </comment>
            <comment line="189">
                Nonsymmetric reduction from Hessenberg to real Schur form.                
            </comment>
            <comment line="199">
                ------------------------
                Constructor                
            </comment>
            <comment line="211">
                ------------------------
                Public Methods                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="3">
                Eigenvalues and eigenvectors of a real matrix. 
                  &lt;P&gt;
                  If A is symmetric, then A = VDV&apos; where the eigenvalue matrix D is
                  diagonal and the eigenvector matrix V is orthogonal.
                  I.e. A = V.times(D.times(V.transpose())) and 
                  V.times(V.transpose()) equals the identity matrix.
                  &lt;P&gt;
                  If A is not symmetric, then the eigenvalue matrix D is block diagonal
                  with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
                  lambda + imu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
                  columns of V represent the eigenvectors in the sense that AV = VD,
                  i.e. A.times(V) equals V.times(D).  The matrix V may be badly
                  conditioned, or even singular, so the validity of the equation
                  A = VDinverse(V) depends upon V.cond().                
            </javadoc>
            <declaration name="n" type="int" line="25"/>
            <javadoc line="25">
                Row and column dimension (square matrix).                
                <serial>
                    matrix dimension.                    
                </serial>
            </javadoc>
            <declaration name="issymmetric" type="boolean" line="30"/>
            <javadoc line="30">
                Symmetry flag.                
                <serial>
                    internal symmetry flag.                    
                </serial>
            </javadoc>
            <declaration name="d" type="double[]" line="35"/>
            <javadoc line="35">
                Arrays for internal storage of eigenvalues.                
                <serial>
                    internal storage of eigenvalues.                    
                </serial>
            </javadoc>
            <declaration name="V" type="double[][]" line="40"/>
            <javadoc line="40">
                Array for internal storage of eigenvectors.                
                <serial>
                    internal storage of eigenvectors.                    
                </serial>
            </javadoc>
            <declaration name="H" type="double[][]" line="45"/>
            <javadoc line="45">
                Array for internal storage of nonsymmetric Hessenberg form.                
                <serial>
                    internal storage of nonsymmetric Hessenberg form.                    
                </serial>
            </javadoc>
            <declaration name="ort" type="double[]" line="50"/>
            <javadoc line="50">
                Working storage for nonsymmetric algorithm.                
                <serial>
                    working storage for nonsymmetric algorithm.                    
                </serial>
            </javadoc>
            <declaration name="cdivr" type="double" line="61"/>
            <declaration name="serialVersionUID" type="long" line="65"/>
            <javadoc line="69">
                Check for symmetry, then construct the eigenvalue decomposition
                  Structure to access D and V.                
                <param>
                    Arg    Square matrix                    
                </param>
            </javadoc>
            <method name="EigenvalueDecomposition" type="constructor" line="74">
                <params>
                    <param name="Arg" type="Matrix"/>
                </params>
                <comment line="95">
                    Tridiagonalize.                    
                </comment>
                <comment line="98">
                    Diagonalize.                    
                </comment>
                <comment line="111">
                    Reduce to Hessenberg form.                    
                </comment>
                <comment line="114">
                    Reduce Hessenberg to real Schur form.                    
                </comment>
                <declaration name="A" type="double[][]" line="75"/>
                <scope line="82">
                    <scope line="83"/>
                </scope>
                <scope line="88">
                    <scope line="89">
                        <scope line="90"/>
                    </scope>
                </scope>
                <scope line="101">
                    <scope line="105">
                        <scope line="106"/>
                    </scope>
                </scope>
            </method>
            <method name="EigenvalueDecomposition" type="constructor" line="119">
                <params>
                    <param name="Arg" type="Matrix"/>
                    <param name="issymmetric" type="boolean"/>
                </params>
                <comment line="133">
                    Tridiagonalize.                    
                </comment>
                <comment line="136">
                    Diagonalize.                    
                </comment>
                <comment line="149">
                    Reduce to Hessenberg form.                    
                </comment>
                <comment line="152">
                    Reduce Hessenberg to real Schur form.                    
                </comment>
                <declaration name="A" type="double[][]" line="120"/>
                <scope line="126">
                    <scope line="127">
                        <scope line="128"/>
                    </scope>
                </scope>
                <scope line="139">
                    <scope line="143">
                        <scope line="144"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="159">
                Return the block diagonal eigenvalue matrix                
                <return>
                    D                    
                </return>
            </javadoc>
            <method name="getD" type="Matrix" line="163">
                <declaration name="X" type="Matrix" line="164"/>
                <declaration name="D" type="double[][]" line="165"/>
                <scope line="166">
                    <scope line="167"/>
                    <scope line="171"/>
                    <scope line="173"/>
                </scope>
            </method>
            <javadoc line="180">
                Return the imaginary parts of the eigenvalues                
                <return>
                    imag(diag(D))                    
                </return>
            </javadoc>
            <method name="getImagEigenvalues" type="double[]" line="184"/>
            <javadoc line="190">
                Return the real parts of the eigenvalues                
                <return>
                    real(diag(D))                    
                </return>
            </javadoc>
            <method name="getRealEigenvalues" type="double[]" line="194"/>
            <javadoc line="202">
                Return the eigenvector matrix                
                <return>
                    V                    
                </return>
            </javadoc>
            <method name="getV" type="Matrix" line="206"/>
            <method name="cdiv" type="void" line="214">
                <params>
                    <param name="xr" type="double"/>
                    <param name="xi" type="double"/>
                    <param name="yr" type="double"/>
                    <param name="yi" type="double"/>
                </params>
                <declaration name="r" type="double" line="215"/>
                <scope line="216"/>
                <scope line="221"/>
            </method>
            <method name="hqr2" type="void" line="229">
                <comment line="231">
                    This is derived from the Algol procedure hqr2,                    
                </comment>
                <comment line="232">
                    by Martin and Wilkinson, Handbook for Auto. Comp.,                    
                </comment>
                <comment line="233">
                    Vol.ii-Linear Algebra, and the corresponding                    
                </comment>
                <comment line="234">
                    Fortran subroutine in EISPACK.                    
                </comment>
                <comment line="236">
                    Initialize                    
                </comment>
                <comment line="246">
                    Store roots isolated by balanc and compute matrix norm                    
                </comment>
                <comment line="259">
                    Outer loop over eigenvalue index                    
                </comment>
                <comment line="264">
                    Look for single small sub-diagonal element                    
                </comment>
                <comment line="278">
                    Check for convergence                    
                </comment>
                <comment line="279">
                    One root found                    
                </comment>
                <comment line="288">
                    Two roots found                    
                </comment>
                <comment line="299">
                    Real pair                    
                </comment>
                <comment line="322">
                    Row modification                    
                </comment>
                <comment line="330">
                    Column modification                    
                </comment>
                <comment line="338">
                    Accumulate transformations                    
                </comment>
                <comment line="346">
                    Complex pair                    
                </comment>
                <comment line="357">
                    No convergence yet                    
                </comment>
                <comment line="361">
                    Form shift                    
                </comment>
                <comment line="371">
                    Wilkinson&apos;s original ad hoc shift                    
                </comment>
                <comment line="383">
                    MATLAB&apos;s new ad hoc shift                    
                </comment>
                <comment line="402">
                    (Could check iteration count here.)                    
                </comment>
                <comment line="404">
                    Look for two consecutive small sub-diagonal elements                    
                </comment>
                <comment line="435">
                    Double QR step involving rows l:n and columns m:n                    
                </comment>
                <comment line="469">
                    Row modification                    
                </comment>
                <comment line="481">
                    Column modification                    
                </comment>
                <comment line="493">
                    Accumulate transformations                    
                </comment>
                <comment line="504">
                    (s != 0)                    
                </comment>
                <comment line="505">
                    k loop                    
                </comment>
                <comment line="506">
                    check convergence                    
                </comment>
                <comment line="507">
                    while (n &gt;= low)                    
                </comment>
                <comment line="509">
                    Backsubstitute to find vectors of upper triangular form                    
                </comment>
                <comment line="519">
                    Real vector                    
                </comment>
                <comment line="542">
                    Solve real equations                    
                </comment>
                <comment line="557">
                    Overflow control                    
                </comment>
                <comment line="568">
                    Complex vector                    
                </comment>
                <comment line="573">
                    Last vector component imaginary so matrix is triangular                    
                </comment>
                <comment line="607">
                    Solve complex equations                    
                </comment>
                <comment line="629">
                    Overflow control                    
                </comment>
                <comment line="643">
                    Vectors of isolated roots                    
                </comment>
                <comment line="653">
                    Back transformation to get eigenvectors of original matrix                    
                </comment>
                <declaration name="nn" type="int" line="238"/>
                <declaration name="n" type="int" line="239"/>
                <declaration name="low" type="int" line="240"/>
                <declaration name="high" type="int" line="241"/>
                <declaration name="eps" type="double" line="242"/>
                <declaration name="exshift" type="double" line="243"/>
                <declaration name="p" type="double" line="244"/>
                <declaration name="norm" type="double" line="248"/>
                <scope line="249">
                    <scope line="250"/>
                    <scope line="254"/>
                </scope>
                <declaration name="iter" type="int" line="261"/>
                <scope line="262">
                    <declaration name="l" type="int" line="266"/>
                    <scope line="267">
                        <scope line="269"/>
                        <scope line="272"/>
                    </scope>
                    <scope line="281"/>
                    <scope line="290">
                        <scope line="301">
                            <scope line="302"/>
                            <scope line="304"/>
                            <scope line="309"/>
                            <scope line="324"/>
                            <scope line="332"/>
                            <scope line="340"/>
                        </scope>
                        <scope line="348"/>
                    </scope>
                    <scope line="359">
                        <scope line="366"/>
                        <scope line="373">
                            <scope line="375"/>
                        </scope>
                        <scope line="385">
                            <scope line="388">
                                <scope line="390"/>
                                <scope line="394"/>
                            </scope>
                        </scope>
                        <declaration name="m" type="int" line="406"/>
                        <scope line="407">
                            <scope line="418"/>
                            <scope line="422"/>
                        </scope>
                        <scope line="428">
                            <scope line="430"/>
                        </scope>
                        <scope line="437">
                            <declaration name="notlast" type="boolean" line="438"/>
                            <scope line="439">
                                <scope line="444"/>
                            </scope>
                            <scope line="453"/>
                            <scope line="456">
                                <scope line="457"/>
                                <scope line="459"/>
                                <scope line="471">
                                    <scope line="473"/>
                                </scope>
                                <scope line="483">
                                    <scope line="485"/>
                                </scope>
                                <scope line="495">
                                    <scope line="497"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="511"/>
                <scope line="515">
                    <scope line="521">
                        <declaration name="l" type="int" line="522"/>
                        <scope line="524">
                            <scope line="527"/>
                            <scope line="530"/>
                            <scope line="533">
                                <scope line="535">
                                    <scope line="536"/>
                                    <scope line="538"/>
                                </scope>
                                <scope line="544">
                                    <scope line="550"/>
                                    <scope line="552"/>
                                </scope>
                                <scope line="560">
                                    <scope line="561"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="570">
                        <declaration name="l" type="int" line="571"/>
                        <scope line="575"/>
                        <scope line="578"/>
                        <scope line="585">
                            <declaration name="ra" type="double" line="586"/>
                            <scope line="589"/>
                            <scope line="595"/>
                            <scope line="599">
                                <scope line="601"/>
                                <scope line="605">
                                    <scope line="613"/>
                                    <scope line="619"/>
                                    <scope line="622"/>
                                </scope>
                                <scope line="632">
                                    <scope line="633"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="645">
                    <scope line="646">
                        <scope line="647"/>
                    </scope>
                </scope>
                <scope line="655">
                    <scope line="656">
                        <scope line="658"/>
                    </scope>
                </scope>
            </method>
            <method name="orthes" type="void" line="666">
                <comment line="668">
                    This is derived from the Algol procedures orthes and ortran,                    
                </comment>
                <comment line="669">
                    by Martin and Wilkinson, Handbook for Auto. Comp.,                    
                </comment>
                <comment line="670">
                    Vol.ii-Linear Algebra, and the corresponding                    
                </comment>
                <comment line="671">
                    Fortran subroutines in EISPACK.                    
                </comment>
                <comment line="678">
                    Scale column.                    
                </comment>
                <comment line="686">
                    Compute Householder transformation.                    
                </comment>
                <comment line="700">
                    Apply Householder similarity transformation                    
                </comment>
                <comment line="701">
                    H = (I-u*u&apos;/h)*H*(I-u*u&apos;)/h)                    
                </comment>
                <comment line="729">
                    Accumulate transformations (Algol&apos;s ortran).                    
                </comment>
                <comment line="747">
                    Double division avoids possible underflow                    
                </comment>
                <declaration name="low" type="int" line="673"/>
                <declaration name="high" type="int" line="674"/>
                <scope line="676">
                    <declaration name="scale" type="double" line="680"/>
                    <scope line="681"/>
                    <scope line="684">
                        <declaration name="h" type="double" line="688"/>
                        <scope line="689"/>
                        <declaration name="g" type="double" line="693"/>
                        <scope line="694"/>
                        <scope line="703">
                            <declaration name="f" type="double" line="704"/>
                            <scope line="705"/>
                            <scope line="709"/>
                        </scope>
                        <scope line="714">
                            <declaration name="f" type="double" line="715"/>
                            <scope line="716"/>
                            <scope line="720"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="731">
                    <scope line="732"/>
                </scope>
                <scope line="737">
                    <scope line="738">
                        <scope line="739"/>
                        <scope line="742">
                            <declaration name="g" type="double" line="743"/>
                            <scope line="744"/>
                            <scope line="749"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="tql2" type="void" line="757">
                <comment line="759">
                    This is derived from the Algol procedures tql2, by                    
                </comment>
                <comment line="760">
                    Bowdler, Martin, Reinsch, and Wilkinson, Handbook for                    
                </comment>
                <comment line="761">
                    Auto. Comp., Vol.ii-Linear Algebra, and the corresponding                    
                </comment>
                <comment line="762">
                    Fortran subroutine in EISPACK.                    
                </comment>
                <comment line="774">
                    Find small subdiagonal element                    
                </comment>
                <comment line="785">
                    If m == l, d[l] is an eigenvalue,                    
                </comment>
                <comment line="786">
                    otherwise, iterate.                    
                </comment>
                <comment line="791">
                    (Could check iteration count here.)                    
                </comment>
                <comment line="793">
                    Compute implicit shift                    
                </comment>
                <comment line="810">
                    Implicit QL transformation.                    
                </comment>
                <comment line="832">
                    Accumulate transformation.                    
                </comment>
                <comment line="844">
                    Check for convergence.                    
                </comment>
                <comment line="852">
                    Sort eigenvalues and corresponding vectors.                    
                </comment>
                <scope line="764"/>
                <declaration name="f" type="double" line="769"/>
                <declaration name="tst1" type="double" line="770"/>
                <declaration name="eps" type="double" line="771"/>
                <scope line="772">
                    <declaration name="m" type="int" line="777"/>
                    <scope line="778">
                        <scope line="779"/>
                    </scope>
                    <scope line="788">
                        <declaration name="iter" type="int" line="789"/>
                        <scope line="790">
                            <declaration name="g" type="double" line="795"/>
                            <declaration name="p" type="double" line="796"/>
                            <declaration name="r" type="double" line="797"/>
                            <scope line="798"/>
                            <declaration name="dl1" type="double" line="803"/>
                            <declaration name="h" type="double" line="804"/>
                            <scope line="805"/>
                            <declaration name="c" type="double" line="813"/>
                            <declaration name="c2" type="double" line="814"/>
                            <declaration name="c3" type="double" line="815"/>
                            <declaration name="el1" type="double" line="816"/>
                            <declaration name="s" type="double" line="817"/>
                            <declaration name="s2" type="double" line="818"/>
                            <scope line="819">
                                <scope line="834"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="854">
                    <declaration name="k" type="int" line="855"/>
                    <declaration name="p" type="double" line="856"/>
                    <scope line="857">
                        <scope line="858"/>
                    </scope>
                    <scope line="863">
                        <scope line="866"/>
                    </scope>
                </scope>
            </method>
            <method name="tred2" type="void" line="875">
                <comment line="877">
                    This is derived from the Algol procedures tred2 by                    
                </comment>
                <comment line="878">
                    Bowdler, Martin, Reinsch, and Wilkinson, Handbook for                    
                </comment>
                <comment line="879">
                    Auto. Comp., Vol.ii-Linear Algebra, and the corresponding                    
                </comment>
                <comment line="880">
                    Fortran subroutine in EISPACK.                    
                </comment>
                <comment line="886">
                    Householder reduction to tridiagonal form.                    
                </comment>
                <comment line="890">
                    Scale to avoid under/overflow.                    
                </comment>
                <comment line="906">
                    Generate Householder vector.                    
                </comment>
                <comment line="924">
                    Apply similarity transformation to remaining columns.                    
                </comment>
                <comment line="958">
                    Accumulate transformations.                    
                </comment>
                <scope line="882"/>
                <scope line="888">
                    <declaration name="scale" type="double" line="892"/>
                    <declaration name="h" type="double" line="893"/>
                    <scope line="894"/>
                    <scope line="897">
                        <scope line="899"/>
                    </scope>
                    <scope line="904">
                        <scope line="908"/>
                        <declaration name="f" type="double" line="912"/>
                        <declaration name="g" type="double" line="913"/>
                        <scope line="914"/>
                        <scope line="920"/>
                        <scope line="926">
                            <scope line="930"/>
                        </scope>
                        <scope line="937"/>
                        <declaration name="hh" type="double" line="941"/>
                        <scope line="942"/>
                        <scope line="945">
                            <scope line="948"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="960">
                    <declaration name="h" type="double" line="963"/>
                    <scope line="964">
                        <scope line="965"/>
                        <scope line="968">
                            <declaration name="g" type="double" line="969"/>
                            <scope line="970"/>
                            <scope line="973"/>
                        </scope>
                    </scope>
                    <scope line="978"/>
                </scope>
                <scope line="982"/>
            </method>
            <method name="isSymmetric" type="boolean" line="990"/>
        </class>
    </source>