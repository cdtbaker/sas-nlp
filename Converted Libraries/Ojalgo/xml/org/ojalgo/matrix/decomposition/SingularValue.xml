<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.decomposition">
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <interface name="SingularValue">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <implements interface="MatrixDecomposition">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <javadoc line="28">
                Singular Value: [A] = [Q1][D][Q2]&lt;sup&gt;T&lt;/sup&gt; Decomposes [this] into [Q1], [D] and [Q2] where:
                  &lt;ul&gt;
                  &lt;li&gt;[Q1] is an orthogonal matrix. The columns are the left, orthonormal, singular vectors of [this]. Its columns are
                  the eigenvectors of [A][A]&lt;sup&gt;T&lt;/sup&gt;, and therefore has the same number of rows as [this].&lt;/li&gt;
                  &lt;li&gt;[D] is a diagonal matrix. The elements on the diagonal are the singular values of [this]. It is either square or
                  has the same dimensions as [this]. The singular values of [this] are the square roots of the nonzero eigenvalues of
                  [A][A]&lt;sup&gt;T&lt;/sup&gt; and [A]&lt;sup&gt;T&lt;/sup&gt;[A] (they are the same)&lt;/li&gt;
                  &lt;li&gt;[Q2] is an orthogonal matrix. The columns are the right, orthonormal, singular vectors of [this]. Its columns are
                  the eigenvectors of [A][A]&lt;sup&gt;T&lt;/sup&gt;, and therefore has the same number of rows as [this] has columns.&lt;/li&gt;
                  &lt;li&gt;[this] = [Q1][D][Q2]&lt;sup&gt;T&lt;/sup&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  A singular values decomposition always exists.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <method name="compute" type="boolean" line="46"/>
            <javadoc line="46">
                @param matrix A matrix to decompose                
                <param>
                    singularValuesOnly No need to calculate eigenvectors                    
                </param>
                <param>
                    fullSize TODO                    
                </param>
                <return>
                    true/false if the computation succeeded or not                    
                </return>
            </javadoc>
            <method name="getCondition" type="double" line="54"/>
            <javadoc line="54">
                The condition number.                
                <return>
                    The largest singular value divided by the smallest singular value.                    
                </return>
            </javadoc>
            <method name="getD" type="MatrixStore<N>" line="61"/>
            <javadoc line="61">
                @return The diagonal matrix of singular values.                
            </javadoc>
            <method name="getFrobeniusNorm" type="double" line="66"/>
            <javadoc line="66">
                Sometimes also called the Schatten 2-norm or Hilbert-Schmidt norm.                
                <return>
                    The square root of the sum of squares of the singular values.                    
                </return>
            </javadoc>
            <method name="getKyFanNorm" type="double" line="73"/>
            <javadoc line="73">
                &lt;p&gt;
                  Ky Fan k-norm.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The first Ky Fan k-norm is the operator norm (the largest singular value), and the last is called the trace norm
                  (the sum of all singular values).
                  &lt;/p&gt;                
                <param>
                    k The number of singular values to add up.                    
                </param>
                <return>
                    The sum of the k largest singular values.                    
                </return>
            </javadoc>
            <method name="getOperatorNorm" type="double" line="87"/>
            <javadoc line="87">
                @return 2-norm                
            </javadoc>
            <method name="getQ1" type="MatrixStore<N>" line="92"/>
            <javadoc line="92">
                If [A] is m-by-n and its rank is r, then:
                  &lt;ul&gt;
                  &lt;li&gt;The first r columns of [Q1] span the column space, range or image of [A].&lt;/li&gt;
                  &lt;li&gt;The last m-r columns of [Q1] span the left nullspace or cokernel of [A].&lt;/li&gt;
                  &lt;/ul&gt;
                  Calculating the QR decomposition of [A] is a faster alternative.                
            </javadoc>
            <method name="getQ2" type="MatrixStore<N>" line="102"/>
            <javadoc line="102">
                If [A] is m-by-n and its rank is r, then:
                  &lt;ul&gt;
                  &lt;li&gt;The first r columns of [Q2] span the row space or coimage of [A].&lt;/li&gt;
                  &lt;li&gt;The last n-r columns of [Q2] span the nullspace or kernel of [A].&lt;/li&gt;
                  &lt;/ul&gt;
                  Calculating the QR decomposition of [A]&lt;sup&gt;T&lt;/sup&gt; is a faster alternative.                
            </javadoc>
            <method name="getRank" type="int" line="112"/>
            <javadoc line="112">
                Effective numerical matrix rank.                
                <return>
                    The number of nonnegligible singular values.                    
                </return>
            </javadoc>
            <method name="getSingularValues" type="Array1D<Double>" line="119"/>
            <javadoc line="119">
                @return The singular values ordered in descending order.                
            </javadoc>
            <method name="getTraceNorm" type="double" line="124"/>
            <method name="isOrdered" type="boolean" line="126"/>
        </interface>
    </source>