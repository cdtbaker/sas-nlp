<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.decomposition">
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.jama.JamaQR"/>
        <import package="org.ojalgo.matrix.store.BigDenseStore"/>
        <import package="org.ojalgo.matrix.store.ComplexDenseStore"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.matrix.store.UpperTriangularStore"/>
        <import package="org.ojalgo.matrix.transformation.Householder"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="QRDecomposition" line="16">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <extends class="InPlaceDecomposition">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </extends>
            <implements interface="QR">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <javadoc line="16">
                You create instances of (some subclass of) this class by calling one of the static factory methods:{@linkplain #makeBig()}, {@linkplain #makeComplex()}, {@linkplain #makePrimitive()} or {@linkplain #makeJama()}.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="Big" line="21">
                <extends class="QRDecomposition">
                    <type_params>
                        <type_param name="BigDecimal"/>
                    </type_params>
                </extends>
                <method name="Big" type="constructor" line="22"/>
            </class>
            <class name="Complex" line="26">
                <extends class="QRDecomposition">
                    <type_params>
                        <type_param name="ComplexNumber"/>
                    </type_params>
                </extends>
                <method name="Complex" type="constructor" line="27"/>
            </class>
            <class name="Primitive" line="31">
                <extends class="QRDecomposition">
                    <type_params>
                        <type_param name="Double"/>
                    </type_params>
                </extends>
                <method name="Primitive" type="constructor" line="32"/>
            </class>
            <method name="make" type="QR<N>" line="36">
                <params>
                    <param name="aTypical" type="Access2D<N>"/>
                </params>
                <declaration name="tmpNumber" type="N" line="37"/>
                <scope line="38"/>
                <scope line="41"/>
                <scope line="44">
                    <declaration name="tmpMaxDim" type="int" line="45"/>
                    <scope line="46"/>
                    <scope line="49"/>
                </scope>
                <scope line="53"/>
            </method>
            <method name="makeBig" type="QR<BigDecimal>" line="57"/>
            <method name="makeComplex" type="QR<ComplexNumber>" line="60"/>
            <method name="makeJama" type="QR<Double>" line="63"/>
            <method name="makePrimitive" type="QR<Double>" line="66"/>
            <declaration name="myFullSize" type="boolean" line="69"/>
            <method name="QRDecomposition" type="constructor" line="70">
                <params>
                    <param name="aFactory" type="DecompositionStore.Factory<N,? extends DecompositionStore<N>>"/>
                </params>
            </method>
            <method name="calculateDeterminant" type="N" line="73">
                <params>
                    <param name="matrix" type="Access2D<N>"/>
                </params>
            </method>
            <method name="compute" type="boolean" line="77">
                <params>
                    <param name="matrix" type="Access2D<?>"/>
                </params>
            </method>
            <method name="compute" type="boolean" line="80">
                <params>
                    <param name="matrix" type="Access2D<?>"/>
                    <param name="fullSize" type="boolean"/>
                </params>
                <declaration name="tmpStore" type="DecompositionStore&lt;N&gt;" line="83"/>
                <declaration name="tmpRowDim" type="int" line="84"/>
                <declaration name="tmpColDim" type="int" line="85"/>
                <declaration name="tmpHouseholder" type="Householder&lt;N&gt;" line="86"/>
                <declaration name="tmpLimit" type="int" line="87"/>
                <scope line="88">
                    <scope line="89"/>
                </scope>
            </method>
            <method name="equals" type="boolean" line="95">
                <params>
                    <param name="aStore" type="MatrixStore<N>"/>
                    <param name="context" type="NumberContext"/>
                </params>
            </method>
            <method name="getDeterminant" type="N" line="98">
                <declaration name="tmpAggrFunc" type="AggregatorFunction&lt;N&gt;" line="99"/>
            </method>
            <method name="getInverse" type="MatrixStore<N>" line="103"/>
            <method name="getInverse" type="MatrixStore<N>" line="106">
                <params>
                    <param name="preallocated" type="DecompositionStore<N>"/>
                </params>
            </method>
            <method name="getQ" type="MatrixStore<N>" line="109">
                <declaration name="retVal" type="DecompositionStore&lt;N&gt;" line="110"/>
                <declaration name="tmpReference" type="DecompositionStore.HouseholderReference&lt;N&gt;" line="111"/>
                <scope line="112">
                    <scope line="115"/>
                </scope>
            </method>
            <method name="getR" type="MatrixStore<N>" line="121">
                <declaration name="retVal" type="MatrixStore&lt;N&gt;" line="122"/>
                <scope line="123"/>
            </method>
            <method name="getRank" type="int" line="128">
                <declaration name="retVal" type="int" line="129"/>
                <declaration name="tmpVal" type="Scalar&lt;N&gt;" line="130"/>
                <scope line="131">
                    <scope line="133"/>
                </scope>
            </method>
            <javadoc line="139">
                @see org.ojalgo.matrix.decomposition.QR#isFullColumnRank()                
            </javadoc>
            <method name="isFullColumnRank" type="boolean" line="142"/>
            <method name="isFullSize" type="boolean" line="145"/>
            <method name="isSolvable" type="boolean" line="148"/>
            <method name="reconstruct" type="MatrixStore<N>" line="151"/>
            <method name="reset" type="void" line="154"/>
            <javadoc line="158">
                Solve [A][X]=[B] by first solving [Q][Y]=[B] and then [R][X]=[Y]. [X] minimises the 2-norm of [Q][R][X]-[B].                
                <param>
                    rhs The right hand side [B]                    
                </param>
                <return>
                    [X] "preallocated" is used to form the results, but the solution is in the returned MatrixStore.                    
                </return>
                <see>
                    org.ojalgo.matrix.decomposition.AbstractDecomposition#solve(Access2D,org.ojalgo.matrix.decomposition.DecompositionStore)                    
                </see>
            </javadoc>
            <method name="solve" type="MatrixStore<N>" line="164">
                <params>
                    <param name="rhs" type="Access2D<N>"/>
                    <param name="preallocated" type="DecompositionStore<N>"/>
                </params>
                <declaration name="tmpStore" type="DecompositionStore&lt;N&gt;" line="166"/>
                <declaration name="tmpRowDim" type="int" line="167"/>
                <declaration name="tmpColDim" type="int" line="168"/>
                <declaration name="tmpReference" type="DecompositionStore.HouseholderReference&lt;N&gt;" line="169"/>
                <declaration name="tmpLimit" type="int" line="170"/>
                <scope line="171">
                    <scope line="174"/>
                </scope>
                <scope line="179"/>
                <scope line="182"/>
                <scope line="185"/>
            </method>
            <javadoc line="189">
                @return L as in R&lt;sup&gt;T&lt;/sup&gt;.                
            </javadoc>
            <method name="getL" type="DecompositionStore<N>" line="192">
                <declaration name="tmpRowDim" type="int" line="193"/>
                <declaration name="tmpColDim" type="int" line="194"/>
                <declaration name="retVal" type="DecompositionStore&lt;N&gt;" line="195"/>
                <declaration name="tmpStore" type="DecompositionStore&lt;N&gt;" line="196"/>
                <scope line="197">
                    <scope line="198"/>
                </scope>
            </method>
        </class>
    </source>