<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.decomposition">
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.jama.JamaQR"/>
        <import package="org.ojalgo.matrix.store.BigDenseStore"/>
        <import package="org.ojalgo.matrix.store.ComplexDenseStore"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.matrix.store.UpperTriangularStore"/>
        <import package="org.ojalgo.matrix.transformation.Householder"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="QRDecomposition" line="40">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <extends class="InPlaceDecomposition">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </extends>
            <implements interface="QR">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <javadoc line="40">
                You create instances of (some subclass of) this class by calling one of the static factory methods:{@linkplain #makeBig()}, {@linkplain #makeComplex()}, {@linkplain #makePrimitive()} or {@linkplain #makeJama()}.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="Big" line="48">
                <extends class="QRDecomposition">
                    <type_params>
                        <type_param name="BigDecimal"/>
                    </type_params>
                </extends>
                <method name="Big" type="constructor" line="50"/>
            </class>
            <class name="Complex" line="56">
                <extends class="QRDecomposition">
                    <type_params>
                        <type_param name="ComplexNumber"/>
                    </type_params>
                </extends>
                <method name="Complex" type="constructor" line="58"/>
            </class>
            <class name="Primitive" line="64">
                <extends class="QRDecomposition">
                    <type_params>
                        <type_param name="Double"/>
                    </type_params>
                </extends>
                <method name="Primitive" type="constructor" line="66"/>
            </class>
            <method name="make" type="QR<N>" line="73">
                <params>
                    <param name="aTypical" type="Access2D<N>"/>
                </params>
                <comment line="86">
                    16,16,8                    
                </comment>
                <declaration name="tmpNumber" type="N" line="75"/>
                <scope line="77"/>
                <scope line="79"/>
                <scope line="81">
                    <declaration name="tmpMaxDim" type="int" line="83"/>
                    <scope line="85"/>
                    <scope line="87"/>
                </scope>
                <scope line="90"/>
            </method>
            <method name="makeBig" type="QR<BigDecimal>" line="95"/>
            <method name="makeComplex" type="QR<ComplexNumber>" line="99"/>
            <method name="makeJama" type="QR<Double>" line="103"/>
            <method name="makePrimitive" type="QR<Double>" line="107"/>
            <declaration name="myFullSize" type="boolean" line="111"/>
            <method name="QRDecomposition" type="constructor" line="113">
                <params>
                    <param name="aFactory" type="DecompositionStore.Factory<N,? extends DecompositionStore<N>>"/>
                </params>
            </method>
            <method name="calculateDeterminant" type="N" line="117">
                <params>
                    <param name="matrix" type="Access2D<N>"/>
                </params>
            </method>
            <method name="compute" type="boolean" line="122">
                <params>
                    <param name="matrix" type="Access2D<?>"/>
                </params>
            </method>
            <method name="compute" type="boolean" line="126">
                <params>
                    <param name="matrix" type="Access2D<?>"/>
                    <param name="fullSize" type="boolean"/>
                </params>
                <declaration name="tmpStore" type="DecompositionStore&lt;N&gt;" line="132"/>
                <declaration name="tmpRowDim" type="int" line="134"/>
                <declaration name="tmpColDim" type="int" line="135"/>
                <declaration name="tmpHouseholder" type="Householder&lt;N&gt;" line="137"/>
                <declaration name="tmpLimit" type="int" line="139"/>
                <scope line="141">
                    <scope line="142"/>
                </scope>
            </method>
            <method name="equals" type="boolean" line="150">
                <params>
                    <param name="aStore" type="MatrixStore<N>"/>
                    <param name="context" type="NumberContext"/>
                </params>
            </method>
            <method name="getDeterminant" type="N" line="154">
                <declaration name="tmpAggrFunc" type="AggregatorFunction&lt;N&gt;" line="156"/>
            </method>
            <method name="getInverse" type="MatrixStore<N>" line="164"/>
            <method name="getInverse" type="MatrixStore<N>" line="169">
                <params>
                    <param name="preallocated" type="DecompositionStore<N>"/>
                </params>
            </method>
            <method name="getQ" type="MatrixStore<N>" line="173">
                <declaration name="retVal" type="DecompositionStore&lt;N&gt;" line="175"/>
                <declaration name="tmpReference" type="DecompositionStore.HouseholderReference&lt;N&gt;" line="177"/>
                <scope line="179">
                    <scope line="184"/>
                </scope>
            </method>
            <method name="getR" type="MatrixStore<N>" line="192">
                <declaration name="retVal" type="MatrixStore&lt;N&gt;" line="194"/>
                <scope line="196"/>
            </method>
            <method name="getRank" type="int" line="203">
                <declaration name="retVal" type="int" line="205"/>
                <declaration name="tmpVal" type="Scalar&lt;N&gt;" line="207"/>
                <scope line="208">
                    <scope line="210"/>
                </scope>
            </method>
            <javadoc line="218">
                @see org.ojalgo.matrix.decomposition.QR#isFullColumnRank()                
            </javadoc>
            <method name="isFullColumnRank" type="boolean" line="221"/>
            <method name="isFullSize" type="boolean" line="225"/>
            <method name="isSolvable" type="boolean" line="229"/>
            <method name="reconstruct" type="MatrixStore<N>" line="233"/>
            <method name="reset" type="void" line="238"/>
            <javadoc line="245">
                Solve [A][X]=[B] by first solving [Q][Y]=[B] and then [R][X]=[Y]. [X] minimises the 2-norm of [Q][R][X]-[B].                
                <param>
                    rhs The right hand side [B]                    
                </param>
                <return>
                    [X] &quot;preallocated&quot; is used to form the results, but the solution is in the returned MatrixStore.                    
                </return>
                <see>
                    org.ojalgo.matrix.decomposition.AbstractDecomposition#solve(Access2D,org.ojalgo.matrix.decomposition.DecompositionStore)                    
                </see>
            </javadoc>
            <method name="solve" type="MatrixStore<N>" line="254">
                <params>
                    <param name="rhs" type="Access2D<N>"/>
                    <param name="preallocated" type="DecompositionStore<N>"/>
                </params>
                <declaration name="tmpStore" type="DecompositionStore&lt;N&gt;" line="258"/>
                <declaration name="tmpRowDim" type="int" line="259"/>
                <declaration name="tmpColDim" type="int" line="260"/>
                <declaration name="tmpReference" type="DecompositionStore.HouseholderReference&lt;N&gt;" line="262"/>
                <declaration name="tmpLimit" type="int" line="264"/>
                <scope line="265">
                    <scope line="270"/>
                </scope>
                <scope line="277"/>
                <scope line="279"/>
                <scope line="281"/>
            </method>
            <javadoc line="286">
                @return L as in R&lt;sup&gt;T&lt;/sup&gt;.                
            </javadoc>
            <method name="getL" type="DecompositionStore<N>" line="289">
                <declaration name="tmpRowDim" type="int" line="291"/>
                <declaration name="tmpColDim" type="int" line="292"/>
                <declaration name="retVal" type="DecompositionStore&lt;N&gt;" line="294"/>
                <declaration name="tmpStore" type="DecompositionStore&lt;N&gt;" line="296"/>
                <scope line="297">
                    <scope line="298"/>
                </scope>
            </method>
        </class>
    </source>