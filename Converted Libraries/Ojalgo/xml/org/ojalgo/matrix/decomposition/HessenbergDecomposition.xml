<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.decomposition">
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.store.BigDenseStore"/>
        <import package="org.ojalgo.matrix.store.ComplexDenseStore"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.matrix.transformation.Householder"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="HessenbergDecomposition" line="12">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <extends class="InPlaceDecomposition">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </extends>
            <implements interface="Hessenberg">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <javadoc line="12">
                You create instances of (some subclass of) this class by calling one
                  of the static factory methods: {@linkplain #makeBig()},{@linkplain #makeComplex()} or {@linkplain #makePrimitive()}.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="Big" line="18">
                <extends class="HessenbergDecomposition">
                    <type_params>
                        <type_param name="BigDecimal"/>
                    </type_params>
                </extends>
                <method name="Big" type="constructor" line="19"/>
            </class>
            <class name="Complex" line="23">
                <extends class="HessenbergDecomposition">
                    <type_params>
                        <type_param name="ComplexNumber"/>
                    </type_params>
                </extends>
                <method name="Complex" type="constructor" line="24"/>
            </class>
            <class name="Primitive" line="28">
                <extends class="HessenbergDecomposition">
                    <type_params>
                        <type_param name="Double"/>
                    </type_params>
                </extends>
                <method name="Primitive" type="constructor" line="29"/>
            </class>
            <method name="make" type="Hessenberg<N>" line="33">
                <params>
                    <param name="aTypical" type="Access2D<N>"/>
                </params>
                <declaration name="tmpNumber" type="N" line="34"/>
                <scope line="35"/>
                <scope line="38"/>
                <scope line="41"/>
                <scope line="44"/>
            </method>
            <method name="makeBig" type="Hessenberg<BigDecimal>" line="48"/>
            <method name="makeComplex" type="Hessenberg<ComplexNumber>" line="51"/>
            <method name="makePrimitive" type="Hessenberg<Double>" line="54"/>
            <declaration name="myUpper" type="boolean" line="57"/>
            <declaration name="myQ" type="DecompositionStore&lt;N&gt;" line="58"/>
            <method name="HessenbergDecomposition" type="constructor" line="59">
                <params>
                    <param name="aFactory" type="DecompositionStore.Factory<N,? extends DecompositionStore<N>>"/>
                </params>
            </method>
            <method name="compute" type="boolean" line="62">
                <params>
                    <param name="matrix" type="Access2D<?>"/>
                </params>
            </method>
            <method name="compute" type="boolean" line="65">
                <params>
                    <param name="matrix" type="Access2D<?>"/>
                    <param name="upper" type="boolean"/>
                </params>
                <declaration name="tmpStore" type="DecompositionStore&lt;N&gt;" line="68"/>
                <declaration name="tmpRowDim" type="int" line="69"/>
                <declaration name="tmpColDim" type="int" line="70"/>
                <scope line="71">
                    <declaration name="tmpHouseholderCol" type="Householder&lt;N&gt;" line="72"/>
                    <declaration name="tmpLimit" type="int" line="73"/>
                    <scope line="74">
                        <scope line="75"/>
                    </scope>
                </scope>
                <scope line="81">
                    <declaration name="tmpHouseholderRow" type="Householder&lt;N&gt;" line="82"/>
                    <declaration name="tmpLimit" type="int" line="83"/>
                    <scope line="84">
                        <scope line="85"/>
                    </scope>
                </scope>
            </method>
            <method name="equals" type="boolean" line="93">
                <params>
                    <param name="aStore" type="MatrixStore<N>"/>
                    <param name="context" type="NumberContext"/>
                </params>
            </method>
            <method name="getH" type="MatrixStore<N>" line="96"/>
            <method name="getQ" type="MatrixStore<N>" line="99">
                <scope line="100"/>
            </method>
            <method name="isFullSize" type="boolean" line="105"/>
            <method name="isSolvable" type="boolean" line="108"/>
            <method name="isUpper" type="boolean" line="111"/>
            <method name="reconstruct" type="MatrixStore<N>" line="114"/>
            <method name="reset" type="void" line="117"/>
            <method name="makeQ" type="DecompositionStore<N>" line="122">
                <params>
                    <param name="aStoreToTransform" type="DecompositionStore<N>"/>
                    <param name="tmpUpper" type="boolean"/>
                    <param name="eye" type="boolean"/>
                </params>
                <declaration name="tmpRowAndColDim" type="int" line="123"/>
                <declaration name="tmpHouseholderReference" type="DecompositionStore.HouseholderReference&lt;N&gt;" line="124"/>
                <scope line="125">
                    <scope line="128"/>
                </scope>
            </method>
            <method name="doQ" type="DecompositionStore<N>" line="134">
                <params>
                    <param name="aStoreToTransform" type="DecompositionStore<N>"/>
                </params>
            </method>
        </class>
    </source>