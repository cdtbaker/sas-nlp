<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.decomposition.task">
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.decomposition.CholeskyDecomposition"/>
        <import package="org.ojalgo.matrix.decomposition.DecompositionStore"/>
        <import package="org.ojalgo.matrix.decomposition.LUDecomposition"/>
        <import package="org.ojalgo.matrix.decomposition.QRDecomposition"/>
        <import package="org.ojalgo.matrix.decomposition.SingularValueDecomposition"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <interface name="SolverTask">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <implements interface="DecompositionTask">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <class name="Factory" line="13">
                <type_params>
                    <type_param name="N"/>
                </type_params>
                <method name="make" type="SolverTask<N>" line="14">
                    <params>
                        <param name="templateBody" type="MatrixStore<N>"/>
                        <param name="templateRhs" type="MatrixStore<N>"/>
                    </params>
                </method>
                <method name="make" type="SolverTask<N>" line="17"/>
            </class>
            <declaration name="BIG" type="Factory&lt;BigDecimal&gt;" line="19"/>
            <anonymous_class line="19">
                <method name="make" type="SolverTask<BigDecimal>" line="20">
                    <params>
                        <param name="templateBody" type="MatrixStore<BigDecimal>"/>
                        <param name="templateRhs" type="MatrixStore<BigDecimal>"/>
                        <param name="symmetric" type="boolean"/>
                    </params>
                    <scope line="21"/>
                    <scope line="24"/>
                    <scope line="27"/>
                    <scope line="30"/>
                </method>
            </anonymous_class>
            <declaration name="COMPLEX" type="Factory&lt;ComplexNumber&gt;" line="36"/>
            <anonymous_class line="36">
                <method name="make" type="SolverTask<ComplexNumber>" line="37">
                    <params>
                        <param name="templateBody" type="MatrixStore<ComplexNumber>"/>
                        <param name="templateRhs" type="MatrixStore<ComplexNumber>"/>
                        <param name="symmetric" type="boolean"/>
                    </params>
                    <scope line="38"/>
                    <scope line="41"/>
                    <scope line="44"/>
                    <scope line="47"/>
                </method>
            </anonymous_class>
            <declaration name="PRIMITIVE" type="Factory&lt;Double&gt;" line="53"/>
            <anonymous_class line="53">
                <method name="make" type="SolverTask<Double>" line="54">
                    <params>
                        <param name="templateBody" type="MatrixStore<Double>"/>
                        <param name="templateRhs" type="MatrixStore<Double>"/>
                        <param name="symmetric" type="boolean"/>
                    </params>
                    <scope line="55">
                        <declaration name="tmpDim" type="long" line="56"/>
                        <scope line="57"/>
                        <scope line="60"/>
                        <scope line="63"/>
                        <scope line="66"/>
                        <scope line="69"/>
                        <scope line="72"/>
                    </scope>
                    <scope line="76">
                        <declaration name="tmpDim" type="long" line="77"/>
                        <scope line="78">
                            <scope line="79"/>
                            <scope line="82"/>
                            <scope line="85"/>
                            <scope line="88"/>
                            <scope line="91"/>
                            <scope line="94"/>
                        </scope>
                        <scope line="98">
                            <scope line="99"/>
                            <scope line="102"/>
                        </scope>
                        <scope line="106"/>
                    </scope>
                </method>
            </anonymous_class>
            <method name="preallocate" type="DecompositionStore<N>" line="113"/>
            <javadoc line="113">
                &lt;p&gt;
                  Implementiong this method is optional.
                  &lt;/p&gt;
                  Will create a {@linkplain DecompositionStore} instance suitable for use with{@link #solve(Access2D,DecompositionStore)}. When solving an equation system [A][X]=[B] ([mxn][nxb]=[mxb]) the
                  preallocated memory/matrix will typically be either mxb or nxb (if A is square then there is no doubt).                
                <param>
                    templateBody                    
                </param>
                <param>
                    templateRHS                    
                </param>
                <return>
                                        
                </return>
                <throws>
                    UnsupportedOperationException When/if this feature is not implemented                    
                </throws>
            </javadoc>
            <method name="solve" type="MatrixStore<N>" line="125"/>
            <javadoc line="125">
                [A][X]=[B] or [this][return]=[aRHS]                
            </javadoc>
            <method name="solve" type="MatrixStore<N>" line="129"/>
            <javadoc line="129">
                &lt;p&gt;
                  Implementiong this method is optional.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Exactly how a specific implementation makes use of &lt;code&gt;preallocated&lt;/code&gt; is not specified by this interface.
                  It must be documented for each implementation.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Should produce the same results as calling {@link #solve(Access2D)}.
                  &lt;/p&gt;                
                <param>
                    rhs The Right Hand Side, wont be modfied                    
                </param>
                <param>
                    preallocated Preallocated memory for the results, possibly some intermediate results. You must assume this
                      is modified, but you cannot assume it will contain the full/final/correct solution.                    
                </param>
                <return>
                    The solution                    
                </return>
                <throws>
                    UnsupportedOperationException When/if this feature is not implemented                    
                </throws>
            </javadoc>
        </interface>
    </source>