<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.decomposition">
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.array.SimpleArray"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.jama.JamaCholesky"/>
        <import package="org.ojalgo.matrix.store.BigDenseStore"/>
        <import package="org.ojalgo.matrix.store.ComplexDenseStore"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="CholeskyDecomposition" line="15">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <extends class="InPlaceDecomposition">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </extends>
            <implements interface="Cholesky">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <javadoc line="15">
                You create instances of (some subclass of) this class by calling one of the static factory methods:{@linkplain #makeBig()}, {@linkplain #makeComplex()}, {@linkplain #makePrimitive()} or {@linkplain #makeJama()}.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="Big" line="20">
                <extends class="CholeskyDecomposition">
                    <type_params>
                        <type_param name="BigDecimal"/>
                    </type_params>
                </extends>
                <method name="Big" type="constructor" line="21"/>
            </class>
            <class name="Complex" line="25">
                <extends class="CholeskyDecomposition">
                    <type_params>
                        <type_param name="ComplexNumber"/>
                    </type_params>
                </extends>
                <method name="Complex" type="constructor" line="26"/>
            </class>
            <class name="Primitive" line="30">
                <extends class="CholeskyDecomposition">
                    <type_params>
                        <type_param name="Double"/>
                    </type_params>
                </extends>
                <method name="Primitive" type="constructor" line="31"/>
            </class>
            <method name="make" type="Cholesky<N>" line="35">
                <params>
                    <param name="aTypical" type="Access2D<N>"/>
                </params>
                <declaration name="tmpNumber" type="N" line="36"/>
                <scope line="37"/>
                <scope line="40"/>
                <scope line="43">
                    <scope line="44"/>
                    <scope line="47"/>
                </scope>
                <scope line="51"/>
            </method>
            <method name="makeBig" type="Cholesky<BigDecimal>" line="55"/>
            <method name="makeComplex" type="Cholesky<ComplexNumber>" line="58"/>
            <method name="makeJama" type="Cholesky<Double>" line="61"/>
            <method name="makePrimitive" type="Cholesky<Double>" line="64"/>
            <declaration name="mySPD" type="boolean" line="67"/>
            <method name="CholeskyDecomposition" type="constructor" line="68">
                <params>
                    <param name="aFactory" type="DecompositionStore.Factory<N,? extends DecompositionStore<N>>"/>
                </params>
            </method>
            <method name="calculateDeterminant" type="N" line="71">
                <params>
                    <param name="matrix" type="Access2D<N>"/>
                </params>
            </method>
            <method name="compute" type="boolean" line="75">
                <params>
                    <param name="aStore" type="Access2D<?>"/>
                </params>
            </method>
            <method name="compute" type="boolean" line="78">
                <params>
                    <param name="matrix" type="Access2D<?>"/>
                    <param name="checkHermitian" type="boolean"/>
                </params>
                <declaration name="tmpInPlace" type="DecompositionStore&lt;N&gt;" line="80"/>
                <declaration name="tmpRowDim" type="int" line="81"/>
                <declaration name="tmpColDim" type="int" line="82"/>
                <declaration name="tmpMinDim" type="int" line="83"/>
                <declaration name="tmpPositiveDefinite" type="boolean" line="84"/>
                <declaration name="tmpMultipliers" type="SimpleArray&lt;N&gt;" line="85"/>
                <scope line="86"/>
                <declaration name="tmpSqrtFunc" type="UnaryFunction&lt;N&gt;" line="89"/>
                <scope line="90">
                    <scope line="91"/>
                    <scope line="96"/>
                </scope>
            </method>
            <method name="equals" type="boolean" line="102">
                <params>
                    <param name="aStore" type="MatrixStore<N>"/>
                    <param name="context" type="NumberContext"/>
                </params>
            </method>
            <method name="getDeterminant" type="N" line="105">
                <declaration name="tmpAggrFunc" type="AggregatorFunction&lt;N&gt;" line="106"/>
            </method>
            <method name="getInverse" type="MatrixStore<N>" line="110"/>
            <method name="getInverse" type="MatrixStore<N>" line="113">
                <params>
                    <param name="preallocated" type="DecompositionStore<N>"/>
                </params>
            </method>
            <method name="getL" type="MatrixStore<N>" line="118"/>
            <method name="isFullSize" type="boolean" line="121"/>
            <method name="isSolvable" type="boolean" line="124"/>
            <method name="isSPD" type="boolean" line="127"/>
            <method name="reconstruct" type="MatrixStore<N>" line="130"/>
            <method name="reset" type="void" line="133"/>
            <javadoc line="137">
                Solves [this][X] = [aRHS] by first solving
                  &lt;pre&gt;
                  [L][Y] = [aRHS]
                  &lt;/pre&gt;
                  and then
                  &lt;pre&gt;
                  [U][X] = [Y]
                  &lt;/pre&gt;
                  .                
                <param>
                    rhs The right hand side                    
                </param>
                <return>
                    [X] The solution will be written to "preallocated" and then returned.                    
                </return>
                <see>
                    org.ojalgo.matrix.decomposition.AbstractDecomposition#solve(Access2D,org.ojalgo.matrix.decomposition.DecompositionStore)                    
                </see>
            </javadoc>
            <method name="solve" type="MatrixStore<N>" line="151">
                <params>
                    <param name="rhs" type="Access2D<N>"/>
                    <param name="preallocated" type="DecompositionStore<N>"/>
                </params>
                <declaration name="tmpBody" type="DecompositionStore&lt;N&gt;" line="153"/>
            </method>
            <method name="invert" type="MatrixStore<N>" line="158">
                <params>
                    <param name="retVal" type="DecompositionStore<N>"/>
                </params>
                <declaration name="tmpBody" type="DecompositionStore&lt;N&gt;" line="159"/>
            </method>
        </class>
    </source>