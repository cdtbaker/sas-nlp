<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.decomposition">
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.array.SimpleArray"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.function.aggregator.ComplexAggregator"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.store.BigDenseStore"/>
        <import package="org.ojalgo.matrix.store.ComplexDenseStore"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.matrix.store.TransposedStore"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="HermitianEvD32" line="20">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <extends class="EigenvalueDecomposition">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </extends>
            <class name="Big" line="21">
                <extends class="HermitianEvD32">
                    <type_params>
                        <type_param name="BigDecimal"/>
                    </type_params>
                </extends>
                <method name="Big" type="constructor" line="22"/>
            </class>
            <class name="Complex" line="26">
                <extends class="HermitianEvD32">
                    <type_params>
                        <type_param name="ComplexNumber"/>
                    </type_params>
                </extends>
                <method name="Complex" type="constructor" line="27"/>
            </class>
            <class name="Primitive" line="31">
                <extends class="HermitianEvD32">
                    <type_params>
                        <type_param name="Double"/>
                    </type_params>
                </extends>
                <javadoc line="31">
                    Eigenvalues and eigenvectors of a real matrix.
                      &lt;P&gt;
                      If A is symmetric, then A = VDV&apos; where the eigenvalue matrix D is diagonal and the eigenvector matrix V is
                      orthogonal. I.e. A = V.times(D.times(V.transpose())) and V.times(V.transpose()) equals the identity matrix.
                      &lt;P&gt;
                      If A is not symmetric, then the eigenvalue matrix D is block diagonal with the real eigenvalues in 1-by-1 blocks
                      and any complex eigenvalues, lambda + imu, in 2-by-2 blocks, [lambda, mu; -mu, lambda]. The columns of V
                      represent the eigenvectors in the sense that AV = VD, i.e. A.times(V) equals V.times(D). The matrix V may be
                      badly conditioned, or even singular, so the validity of the equation A = VDinverse(V) depends upon V.cond().                    
                </javadoc>
                <method name="Primitive" type="constructor" line="43"/>
            </class>
            <method name="toDiagonal" type="Array1D<Double>" line="47">
                <params>
                    <param name="aTridiagonal" type="DiagonalAccess<?>"/>
                    <param name="transformationAccumulator" type="DecompositionStore<?>"/>
                </params>
                <declaration name="tmpMainDiagonal" type="Array1D&lt;?&gt;" line="48"/>
                <declaration name="tmpSubdiagonal" type="Array1D&lt;?&gt;" line="49"/>
                <declaration name="tmpDim" type="int" line="50"/>
                <declaration name="tmpMainDiagData" type="double[]" line="51"/>
                <declaration name="tmpOffDiagData" type="double[]" line="52"/>
                <declaration name="tmpLength" type="int" line="53"/>
                <scope line="54"/>
                <declaration name="tmpShift" type="double" line="57"/>
                <declaration name="tmpShiftIncr" type="double" line="58"/>
                <declaration name="tmpMagnitude" type="double" line="59"/>
                <declaration name="tmpLocalEpsilon" type="double" line="60"/>
                <declaration name="m" type="int" line="61"/>
                <scope line="62">
                    <scope line="66">
                        <scope line="67"/>
                    </scope>
                    <scope line="72">
                        <scope line="73">
                            <declaration name="tmp1Ml0" type="double" line="74"/>
                            <declaration name="tmp1Ml1" type="double" line="75"/>
                            <declaration name="tmp1Sl0" type="double" line="76"/>
                            <declaration name="p" type="double" line="77"/>
                            <declaration name="r" type="double" line="78"/>
                            <scope line="79"/>
                            <declaration name="tmp2Ml0" type="double" line="82"/>
                            <declaration name="tmp2Ml1" type="double" line="83"/>
                            <declaration name="tmp2Sl1" type="double" line="84"/>
                            <scope line="86"/>
                            <declaration name="tmpRotCos" type="double" line="90"/>
                            <declaration name="tmpRotSin" type="double" line="91"/>
                            <declaration name="tmpRotCos2" type="double" line="92"/>
                            <declaration name="tmpRotSin2" type="double" line="93"/>
                            <declaration name="tmpRotCos3" type="double" line="94"/>
                            <scope line="96">
                                <declaration name="tmp1Mi0" type="double" line="97"/>
                                <declaration name="tmp1Si0" type="double" line="98"/>
                                <scope line="108"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="tmpEigenvalue" type="double" line="118"/>
                    <scope line="119"/>
                    <scope line="122"/>
                </scope>
            </method>
            <declaration name="myDiagonalValues" type="Array1D&lt;Double&gt;" line="129"/>
            <declaration name="myInverse" type="MatrixStore&lt;N&gt;" line="130"/>
            <declaration name="myTridiagonal" type="TridiagonalDecomposition&lt;N&gt;" line="131"/>
            <method name="HermitianEvD32" type="constructor" line="132">
                <params>
                    <param name="aFactory" type="DecompositionStore.Factory<N,? extends DecompositionStore<N>>"/>
                </params>
            </method>
            <method name="HermitianEvD32" type="constructor" line="135">
                <params>
                    <param name="aFactory" type="DecompositionStore.Factory<N,? extends DecompositionStore<N>>"/>
                    <param name="aTridiagonal" type="TridiagonalDecomposition<N>"/>
                </params>
            </method>
            <method name="compute" type="boolean" line="139">
                <params>
                    <param name="matrix" type="Access2D<?>"/>
                    <param name="eigenvaluesOnly" type="boolean"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="142">
                <params>
                    <param name="aStore" type="MatrixStore<N>"/>
                    <param name="context" type="NumberContext"/>
                </params>
            </method>
            <method name="getDeterminant" type="N" line="145">
                <declaration name="tmpVisitor" type="AggregatorFunction&lt;ComplexNumber&gt;" line="146"/>
            </method>
            <method name="getInverse" type="MatrixStore<N>" line="150">
                <scope line="151">
                    <declaration name="tmpV" type="MatrixStore&lt;N&gt;" line="152"/>
                    <declaration name="tmpD" type="MatrixStore&lt;N&gt;" line="153"/>
                    <declaration name="tmpDim" type="int" line="154"/>
                    <declaration name="tmpMtrx" type="PhysicalStore&lt;N&gt;" line="155"/>
                    <declaration name="tmpZero" type="N" line="156"/>
                    <declaration name="tmpDivide" type="BinaryFunction&lt;N&gt;" line="157"/>
                    <scope line="158">
                        <scope line="159"/>
                        <scope line="162"/>
                    </scope>
                </scope>
            </method>
            <method name="getInverse" type="MatrixStore<N>" line="170">
                <params>
                    <param name="preallocated" type="DecompositionStore<N>"/>
                </params>
                <scope line="171">
                    <declaration name="tmpV" type="MatrixStore&lt;N&gt;" line="172"/>
                    <declaration name="tmpD" type="MatrixStore&lt;N&gt;" line="173"/>
                    <declaration name="tmpDim" type="int" line="174"/>
                    <declaration name="tmpMtrx" type="PhysicalStore&lt;N&gt;" line="175"/>
                    <declaration name="tmpZero" type="N" line="177"/>
                    <declaration name="tmpDivide" type="BinaryFunction&lt;N&gt;" line="178"/>
                    <scope line="179">
                        <scope line="180"/>
                        <scope line="183"/>
                    </scope>
                </scope>
            </method>
            <method name="getTrace" type="ComplexNumber" line="191">
                <declaration name="tmpVisitor" type="AggregatorFunction&lt;ComplexNumber&gt;" line="192"/>
            </method>
            <method name="isFullSize" type="boolean" line="196"/>
            <method name="isHermitian" type="boolean" line="199"/>
            <method name="isOrdered" type="boolean" line="202"/>
            <method name="isSolvable" type="boolean" line="205"/>
            <method name="reset" type="void" line="208"/>
            <method name="doNonsymmetric" type="boolean" line="213">
                <params>
                    <param name="aMtrx" type="Access2D<?>"/>
                    <param name="eigenvaluesOnly" type="boolean"/>
                </params>
            </method>
            <method name="doSymmetric" type="boolean" line="216">
                <params>
                    <param name="aMtrx" type="Access2D<?>"/>
                    <param name="eigenvaluesOnly" type="boolean"/>
                </params>
                <declaration name="tmpDim" type="int" line="217"/>
                <declaration name="tmpTridiagonal" type="DiagonalAccess&lt;N&gt;" line="219"/>
                <declaration name="tmpV" type="DecompositionStore&lt;N&gt;" line="220"/>
                <declaration name="tmpDiagonal" type="Array1D&lt;Double&gt;" line="221"/>
                <scope line="222">
                    <declaration name="tmpValue1" type="double" line="223"/>
                    <declaration name="ij2" type="int" line="224"/>
                    <declaration name="tmpValue2" type="double" line="225"/>
                    <scope line="226">
                        <declaration name="tmpValue2exp" type="double" line="227"/>
                        <scope line="228"/>
                    </scope>
                    <scope line="233">
                        <scope line="236"/>
                    </scope>
                </scope>
                <scope line="241"/>
            </method>
            <method name="makeD" type="MatrixStore<N>" line="246"/>
            <method name="makeEigenvalues" type="Array1D<ComplexNumber>" line="249">
                <declaration name="tmpDim" type="int" line="250"/>
                <declaration name="retVal" type="Array1D&lt;ComplexNumber&gt;" line="251"/>
                <scope line="252"/>
            </method>
            <method name="makeV" type="MatrixStore<N>" line="257"/>
        </class>
    </source>