<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.decomposition">
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.array.SimpleArray"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.function.aggregator.ComplexAggregator"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.store.BigDenseStore"/>
        <import package="org.ojalgo.matrix.store.ComplexDenseStore"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.matrix.store.TransposedStore"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="HermitianEvD32" line="44">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <extends class="EigenvalueDecomposition">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </extends>
            <class name="Big" line="46">
                <extends class="HermitianEvD32">
                    <type_params>
                        <type_param name="BigDecimal"/>
                    </type_params>
                </extends>
                <method name="Big" type="constructor" line="48"/>
            </class>
            <class name="Complex" line="54">
                <extends class="HermitianEvD32">
                    <type_params>
                        <type_param name="ComplexNumber"/>
                    </type_params>
                </extends>
                <method name="Complex" type="constructor" line="56"/>
            </class>
            <class name="Primitive" line="62">
                <extends class="HermitianEvD32">
                    <type_params>
                        <type_param name="Double"/>
                    </type_params>
                </extends>
                <javadoc line="62">
                    Eigenvalues and eigenvectors of a real matrix.
                      &lt;P&gt;
                      If A is symmetric, then A = VDV&apos; where the eigenvalue matrix D is diagonal and the eigenvector matrix V is
                      orthogonal. I.e. A = V.times(D.times(V.transpose())) and V.times(V.transpose()) equals the identity matrix.
                      &lt;P&gt;
                      If A is not symmetric, then the eigenvalue matrix D is block diagonal with the real eigenvalues in 1-by-1 blocks
                      and any complex eigenvalues, lambda + imu, in 2-by-2 blocks, [lambda, mu; -mu, lambda]. The columns of V
                      represent the eigenvectors in the sense that AV = VD, i.e. A.times(V) equals V.times(D). The matrix V may be
                      badly conditioned, or even singular, so the validity of the equation A = VDinverse(V) depends upon V.cond().                    
                </javadoc>
                <method name="Primitive" type="constructor" line="75"/>
            </class>
            <method name="toDiagonal" type="Array1D<Double>" line="81">
                <params>
                    <param name="aTridiagonal" type="DiagonalAccess<?>"/>
                    <param name="transformationAccumulator" type="DecompositionStore<?>"/>
                </params>
                <comment line="84">
                    BasicLogger.logDebug(&quot;Tridiagonal={}&quot;, aTridiagonal.toString());                    
                </comment>
                <comment line="91">
                    Actually unnecessary to copy                    
                </comment>
                <comment line="92">
                    The algorith needs the array to be the same length as the main diagonal                    
                </comment>
                <comment line="98">
                    BasicLogger.logDebug(&quot;BEGIN diagonalize&quot;);
                            BasicLogger.logDebug(&quot;Main D: {}&quot;, Arrays.toString(tmpMainDiagonal));
                            BasicLogger.logDebug(&quot;Seco D: {}&quot;, Arrays.toString(tmpOffDiagonal));
                            BasicLogger.logDebug(&quot;V&quot;, aV);
                            BasicLogger.logDebug();                    
                </comment>
                <comment line="111">
                    Main loop                    
                </comment>
                <comment line="114">
                    BasicLogger.logDebug(&quot;Loop l=&quot; + l, tmpMainDiagonal, tmpOffDiagonal);                    
                </comment>
                <comment line="116">
                    Find small subdiagonal element                    
                </comment>
                <comment line="128">
                    If m == l, aMainDiagonal[l] is an eigenvalue, otherwise, iterate.                    
                </comment>
                <comment line="133">
                    (l,l)                    
                </comment>
                <comment line="134">
                    (l+1,l+1)                    
                </comment>
                <comment line="135">
                    (l+1,l) and (l,l+1)                    
                </comment>
                <comment line="137">
                    Compute implicit shift                    
                </comment>
                <comment line="145">
                    (l,l)                    
                </comment>
                <comment line="146">
                    (l+1,l+1)                    
                </comment>
                <comment line="147">
                    (l+1,l) and (l,l+1)                    
                </comment>
                <comment line="155">
                    BasicLogger.logDebug(&quot;New shift =&quot; + tmpShift, tmpMainDiagonal, tmpOffDiagonal);                    
                </comment>
                <comment line="157">
                    Implicit QL transformation                    
                </comment>
                <comment line="167">
                    Initiate p                    
                </comment>
                <comment line="168">
                    BasicLogger.logDebug(&quot;m={} l={}&quot;, m, l);                    
                </comment>
                <comment line="187">
                    Next p                    
                </comment>
                <comment line="189">
                    Accumulate transformation - rotate the eigenvector matrix
                    aV.transformRight(new Rotation.Primitive(i, i + 1, tmpRotCos, tmpRotSin));                    
                </comment>
                <comment line="192">
                    BasicLogger.logDebug(&quot;low={} high={} cos={} sin={}&quot;, i, i + 1, tmpRotCos, tmpRotSin);                    
                </comment>
                <comment line="197">
                    EigenvalueDecomposition.log(&quot;QL step done i=&quot; + i, tmpMainDiagonal, tmpOffDiagonal);                    
                </comment>
                <comment line="201">
                    Final p                    
                </comment>
                <comment line="206">
                    Check for convergence                    
                </comment>
                <comment line="207">
                    End if (m &gt; l)                    
                </comment>
                <comment line="216">
                    End main loop - l                    
                </comment>
                <comment line="218">
                    BasicLogger.logDebug(&quot;END diagonalize&quot;);
                            BasicLogger.logDebug(&quot;Main D: {}&quot;, Arrays.toString(tmpMainDiagonal));
                            BasicLogger.logDebug(&quot;Seco D: {}&quot;, Arrays.toString(tmpOffDiagonal));
                            BasicLogger.logDebug(&quot;V&quot;, aV);
                            BasicLogger.logDebug();                    
                </comment>
                <comment line="224">
                    for (int i = 0; i &lt; tmpMainDiagData.length; i++) {
                                tmpMainDiagonal.set(i, tmpMainDiagData[i]);
                            }                    
                </comment>
                <comment line="228">
                    return new PrimitiveArray(tmpMainDiagonal).asArray1D();                    
                </comment>
                <declaration name="tmpMainDiagonal" type="Array1D&lt;?&gt;" line="85"/>
                <declaration name="tmpSubdiagonal" type="Array1D&lt;?&gt;" line="86"/>
                <declaration name="tmpDim" type="int" line="88"/>
                <declaration name="tmpMainDiagData" type="double[]" line="90"/>
                <declaration name="tmpOffDiagData" type="double[]" line="91"/>
                <declaration name="tmpLength" type="int" line="92"/>
                <scope line="93"/>
                <declaration name="tmpShift" type="double" line="103"/>
                <declaration name="tmpShiftIncr" type="double" line="104"/>
                <declaration name="tmpMagnitude" type="double" line="106"/>
                <declaration name="tmpLocalEpsilon" type="double" line="107"/>
                <declaration name="m" type="int" line="109"/>
                <scope line="111">
                    <scope line="120">
                        <scope line="121"/>
                    </scope>
                    <scope line="128">
                        <scope line="130">
                            <declaration name="tmp1Ml0" type="double" line="132"/>
                            <declaration name="tmp1Ml1" type="double" line="133"/>
                            <declaration name="tmp1Sl0" type="double" line="134"/>
                            <declaration name="p" type="double" line="138"/>
                            <declaration name="r" type="double" line="139"/>
                            <scope line="140"/>
                            <declaration name="tmp2Ml0" type="double" line="144"/>
                            <declaration name="tmp2Ml1" type="double" line="145"/>
                            <declaration name="tmp2Sl1" type="double" line="146"/>
                            <scope line="149"/>
                            <declaration name="tmpRotCos" type="double" line="158"/>
                            <declaration name="tmpRotSin" type="double" line="159"/>
                            <declaration name="tmpRotCos2" type="double" line="161"/>
                            <declaration name="tmpRotSin2" type="double" line="162"/>
                            <declaration name="tmpRotCos3" type="double" line="164"/>
                            <scope line="168">
                                <declaration name="tmp1Mi0" type="double" line="170"/>
                                <declaration name="tmp1Si0" type="double" line="171"/>
                                <scope line="192"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="tmpEigenvalue" type="double" line="208"/>
                    <scope line="209"/>
                    <scope line="211"/>
                </scope>
            </method>
            <declaration name="myDiagonalValues" type="Array1D&lt;Double&gt;" line="231"/>
            <declaration name="myInverse" type="MatrixStore&lt;N&gt;" line="232"/>
            <declaration name="myTridiagonal" type="TridiagonalDecomposition&lt;N&gt;" line="234"/>
            <method name="HermitianEvD32" type="constructor" line="237">
                <params>
                    <param name="aFactory" type="DecompositionStore.Factory<N,? extends DecompositionStore<N>>"/>
                </params>
            </method>
            <method name="HermitianEvD32" type="constructor" line="241">
                <params>
                    <param name="aFactory" type="DecompositionStore.Factory<N,? extends DecompositionStore<N>>"/>
                    <param name="aTridiagonal" type="TridiagonalDecomposition<N>"/>
                </params>
            </method>
            <method name="compute" type="boolean" line="248">
                <params>
                    <param name="matrix" type="Access2D<?>"/>
                    <param name="eigenvaluesOnly" type="boolean"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="252">
                <params>
                    <param name="aStore" type="MatrixStore<N>"/>
                    <param name="context" type="NumberContext"/>
                </params>
            </method>
            <method name="getDeterminant" type="N" line="256">
                <declaration name="tmpVisitor" type="AggregatorFunction&lt;ComplexNumber&gt;" line="258"/>
            </method>
            <method name="getInverse" type="MatrixStore<N>" line="265">
                <scope line="267">
                    <declaration name="tmpV" type="MatrixStore&lt;N&gt;" line="269"/>
                    <declaration name="tmpD" type="MatrixStore&lt;N&gt;" line="270"/>
                    <declaration name="tmpDim" type="int" line="272"/>
                    <declaration name="tmpMtrx" type="PhysicalStore&lt;N&gt;" line="274"/>
                    <declaration name="tmpZero" type="N" line="276"/>
                    <declaration name="tmpDivide" type="BinaryFunction&lt;N&gt;" line="277"/>
                    <scope line="279">
                        <scope line="280"/>
                        <scope line="282"/>
                    </scope>
                </scope>
            </method>
            <method name="getInverse" type="MatrixStore<N>" line="293">
                <params>
                    <param name="preallocated" type="DecompositionStore<N>"/>
                </params>
                <scope line="295">
                    <declaration name="tmpV" type="MatrixStore&lt;N&gt;" line="297"/>
                    <declaration name="tmpD" type="MatrixStore&lt;N&gt;" line="298"/>
                    <declaration name="tmpDim" type="int" line="300"/>
                    <declaration name="tmpMtrx" type="PhysicalStore&lt;N&gt;" line="302"/>
                    <declaration name="tmpZero" type="N" line="305"/>
                    <declaration name="tmpDivide" type="BinaryFunction&lt;N&gt;" line="306"/>
                    <scope line="308">
                        <scope line="309"/>
                        <scope line="311"/>
                    </scope>
                </scope>
            </method>
            <method name="getTrace" type="ComplexNumber" line="322">
                <declaration name="tmpVisitor" type="AggregatorFunction&lt;ComplexNumber&gt;" line="324"/>
            </method>
            <method name="isFullSize" type="boolean" line="331"/>
            <method name="isHermitian" type="boolean" line="335"/>
            <method name="isOrdered" type="boolean" line="339"/>
            <method name="isSolvable" type="boolean" line="343"/>
            <method name="reset" type="void" line="348"/>
            <method name="doNonsymmetric" type="boolean" line="358">
                <params>
                    <param name="aMtrx" type="Access2D<?>"/>
                    <param name="eigenvaluesOnly" type="boolean"/>
                </params>
            </method>
            <method name="doSymmetric" type="boolean" line="363">
                <params>
                    <param name="aMtrx" type="Access2D<?>"/>
                    <param name="eigenvaluesOnly" type="boolean"/>
                </params>
                <comment line="372">
                    BasicLogger.logDebug(&quot;Tridiagonal1={}&quot;, tmpTridiagonal);                    
                </comment>
                <comment line="376">
                    BasicLogger.logDebug(&quot;Tridiagonal2={}&quot;, tmpTridiagonal);                    
                </comment>
                <declaration name="tmpDim" type="int" line="365"/>
                <declaration name="tmpTridiagonal" type="DiagonalAccess&lt;N&gt;" line="369"/>
                <declaration name="tmpV" type="DecompositionStore&lt;N&gt;" line="373"/>
                <declaration name="tmpDiagonal" type="Array1D&lt;Double&gt;" line="377"/>
                <scope line="379">
                    <declaration name="tmpValue1" type="double" line="380"/>
                    <declaration name="ij2" type="int" line="382"/>
                    <declaration name="tmpValue2" type="double" line="383"/>
                    <scope line="385">
                        <declaration name="tmpValue2exp" type="double" line="386"/>
                        <scope line="388"/>
                    </scope>
                    <scope line="394">
                        <scope line="397"/>
                    </scope>
                </scope>
                <scope line="403"/>
            </method>
            <method name="makeD" type="MatrixStore<N>" line="411"/>
            <method name="makeEigenvalues" type="Array1D<ComplexNumber>" line="416">
                <declaration name="tmpDim" type="int" line="418"/>
                <declaration name="retVal" type="Array1D&lt;ComplexNumber&gt;" line="420"/>
                <scope line="422"/>
            </method>
            <method name="makeV" type="MatrixStore<N>" line="430"/>
        </class>
    </source>