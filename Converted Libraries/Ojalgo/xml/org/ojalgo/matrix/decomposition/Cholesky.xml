<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.decomposition">
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.matrix.decomposition.task.DeterminantTask"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <interface name="Cholesky">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <implements interface="MatrixDecomposition">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="DeterminantTask">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <javadoc line="5">
                Cholesky: [A] = [L][L]&lt;sup&gt;T&lt;/sup&gt;
                  &lt;p&gt;
                  If [A] is symmetric and positive definite then the general LU decomposition - [P][L][D][U] - becomes
                  [I][L][D][L]&lt;sup&gt;T&lt;/sup&gt; (or [I][U]&lt;sup&gt;T&lt;/sup&gt;[D][U]). [I] can be left out and [D] is normally split in halves and
                  merged with [L] (and/or [U]). We&apos;ll express it as [A] = [R]&lt;sup&gt;T&lt;/sup&gt;[R].
                  &lt;/p&gt;
                  &lt;p&gt;
                  A cholesky decomposition is still/also an LU decomposition where [P][L][D][U] =&gt; [R]&lt;sup&gt;T&lt;/sup&gt;[R].
                  &lt;/p&gt;                
                <author>
                    apete                    
                </author>
            </javadoc>
            <method name="isSPD" type="boolean" line="18"/>
            <javadoc line="18">
                To use the Cholesky decomposition rather than the LU decomposition the matrix must be symmetric and positive
                  definite. It is recommended that the decomposition algorithm checks for this during calculation. Possibly the
                  matrix could be assumed to be symmetric (to improve performance) but tests should be made to assure the matrix is
                  positive definite.                
                <return>
                    true if the tests did not fail.                    
                </return>
            </javadoc>
            <method name="compute" type="boolean" line="26"/>
            <method name="getDeterminant" type="N" line="27"/>
            <method name="getL" type="MatrixStore<N>" line="28"/>
        </interface>
    </source>