<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.decomposition">
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.matrix.BasicMatrix"/>
        <import package="org.ojalgo.matrix.decomposition.task.SolverTask"/>
        <import package="org.ojalgo.matrix.decomposition.task.InverterTask"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <interface name="MatrixDecomposition">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <implements interface="InverterTask">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="SolverTask">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <javadoc line="31">
                Notation used to describe the various matrix decompositions:
                  &lt;ul&gt;
                  &lt;li&gt;[A] could be any matrix. (The matrix to decompose.)&lt;/li&gt;
                  &lt;li&gt;[A]&lt;sup&gt;-1&lt;/sup&gt; is the inverse of [A].&lt;/li&gt;
                  &lt;li&gt;[A]&lt;sup&gt;T&lt;/sup&gt; is the transpose of [A].&lt;/li&gt;
                  &lt;li&gt;[A]&lt;sup&gt;H&lt;/sup&gt; is the conjugate transpose of [A]. [A]&lt;sup&gt;H&lt;/sup&gt; is equilvalent to [A]&lt;sup&gt;T&lt;/sup&gt; if the
                  elements are all real.&lt;/li&gt;
                  &lt;li&gt;[D] is a diagonal matrix. Possibly bi-, tri- or block-diagonal.&lt;/li&gt;
                  &lt;li&gt;[H] is an, upper or lower, Hessenberg matrix.&lt;/il&gt;
                  &lt;li&gt;[I] is an identity matrix - obvioulsly orthogonal/unitary.&lt;/li&gt;
                  &lt;li&gt;[L] is a lower (left) triangular matrix.&lt;/li&gt;
                  &lt;li&gt;[P] is a permutation matrix - an identity matrix with interchanged rows or columns - and orthogonal/unitary.&lt;/li&gt;
                  &lt;li&gt;[Q] is an orthogonal/unitary matrix. [Q]&lt;sup&gt;-1&lt;/sup&gt; = [Q]&lt;sup&gt;H&lt;/sup&gt;, and with real matrices =
                  [Q]&lt;sup&gt;T&lt;/sup&gt;.&lt;/li&gt;
                  &lt;li&gt;[R] is a right (upper) tringular matrix. It is equivalent to [U].&lt;/li&gt;
                  &lt;li&gt;[U] is an upper (right) triangular matrix. It is equivalent to [R].&lt;/li&gt;
                  &lt;li&gt;[V] is an eigenvector matrix. The columns are the eigenvectors&lt;/il&gt;
                  &lt;/ul&gt;                
                <author>
                    apete                    
                </author>
            </javadoc>
            <method name="compute" type="boolean" line="55"/>
            <javadoc line="55">
                @param matrix A matrix to decompose                
                <return>
                    true if the computation suceeded; false if not                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="61"/>
            <method name="equals" type="boolean" line="63"/>
            <method name="getInverse" type="MatrixStore<N>" line="65"/>
            <javadoc line="65">
                The output must be a &quot;right inverse&quot; and a &quot;generalised inverse&quot;.                
                <see>
                    BasicMatrix#invert()                    
                </see>
            </javadoc>
            <method name="getInverse" type="MatrixStore<N>" line="72"/>
            <javadoc line="72">
                &lt;p&gt;
                  Implementiong this method is optional.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Exactly how a specific implementation makes use of &lt;code&gt;preallocated&lt;/code&gt; is not specified by this interface.
                  It must be documented for each implementation.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Should produce the same results as calling {@link #getInverse()}.
                  &lt;/p&gt;                
                <param>
                    preallocated Preallocated memory for the results, possibly some intermediate results. You must assume this
                      is modified, but you cannot assume it will contain the full/final/correct solution.                    
                </param>
                <return>
                    The inverse                    
                </return>
                <throws>
                    UnsupportedOperationException When/if this feature is not implemented                    
                </throws>
            </javadoc>
            <method name="isComputed" type="boolean" line="91"/>
            <javadoc line="91">
                @return true if computation has been attemped; false if not.                
                <see>
                    #compute(Access2D)                    
                </see>
                <see>
                    #isSolvable()                    
                </see>
            </javadoc>
            <method name="isFullSize" type="boolean" line="98"/>
            <javadoc line="98">
                @return True if the implementation generates a full sized decomposition.                
            </javadoc>
            <method name="isSolvable" type="boolean" line="103"/>
            <javadoc line="103">
                @return true if it is ok to call {@linkplain #solve(Access2D)} (computation was successful); false if not                
                <see>
                    #solve(Access2D)                    
                </see>
                <see>
                    #isComputed()                    
                </see>
            </javadoc>
            <method name="preallocate" type="DecompositionStore<N>" line="110"/>
            <javadoc line="110">
                &lt;p&gt;
                  Implementiong this method is optional.
                  &lt;/p&gt;
                  Will create a {@linkplain DecompositionStore} instance suitable for use with{@link #solve(Access2D,DecompositionStore)}. When solving an equation system [A][X]=[B] ([mxn][nxb]=[mxb]) the
                  preallocated memory/matrix will typically be either mxb or nxb (if A is square then there is no doubt).                
                <param>
                    templateBody                    
                </param>
                <param>
                    templateRHS                    
                </param>
                <return>
                                        
                </return>
                <throws>
                    UnsupportedOperationException When/if this feature is not implemented                    
                </throws>
            </javadoc>
            <method name="reconstruct" type="MatrixStore<N>" line="125"/>
            <method name="reset" type="void" line="127"/>
            <javadoc line="127">
                Delete computed results, and resets attributes to default values                
            </javadoc>
            <method name="solve" type="MatrixStore<N>" line="132"/>
            <javadoc line="132">
                [A][X]=[B] or [this][return]=[aRHS]                
            </javadoc>
            <method name="solve" type="MatrixStore<N>" line="137"/>
            <javadoc line="137">
                &lt;p&gt;
                  Implementiong this method is optional.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Exactly how a specific implementation makes use of &lt;code&gt;preallocated&lt;/code&gt; is not specified by this interface.
                  It must be documented for each implementation.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Should produce the same results as calling {@link #solve(Access2D)}.
                  &lt;/p&gt;                
                <param>
                    rhs The Right Hand Side, wont be modfied                    
                </param>
                <param>
                    preallocated Preallocated memory for the results, possibly some intermediate results. You must assume this
                      is modified, but you cannot assume it will contain the full/final/correct solution.                    
                </param>
                <return>
                    The solution                    
                </return>
                <throws>
                    UnsupportedOperationException When/if this feature is not implemented                    
                </throws>
            </javadoc>
        </interface>
    </source>