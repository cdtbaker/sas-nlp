<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.decomposition">
        <import package="java.util.Iterator"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.access.Iterator1D"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.array.Array2D"/>
        <import package="org.ojalgo.array.SimpleArray"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.matrix.transformation.Householder"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <interface name="DecompositionStore">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <implements interface="PhysicalStore">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <javadoc line="12">
                &lt;p&gt;
                  Only classes that will act as a delegate to a {@linkplain MatrixDecomposition} implementation from this package
                  should implement this interface. The interface specifications are entirely dictated by the classes in this package.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Do not use it for anything else!
                  &lt;/p&gt;                
                <author>
                    apete                    
                </author>
            </javadoc>
            <class name="HouseholderReference" line="23">
                <type_params>
                    <type_param name="N"/>
                </type_params>
                <implements interface="Householder">
                    <type_params>
                        <type_param name="N"/>
                    </type_params>
                </implements>
                <declaration name="col" type="int" line="24"/>
                <declaration name="row" type="int" line="25"/>
                <declaration name="myBigWorker" type="Householder.Big" line="26"/>
                <declaration name="myColumn" type="boolean" line="27"/>
                <declaration name="myComplexWorker" type="Householder.Complex" line="28"/>
                <declaration name="myPrimitiveWorker" type="Householder.Primitive" line="29"/>
                <declaration name="myStore" type="DecompositionStore&lt;N&gt;" line="30"/>
                <method name="HouseholderReference" type="constructor" line="31"/>
                <method name="HouseholderReference" type="constructor" line="34">
                    <params>
                        <param name="aStore" type="DecompositionStore<N>"/>
                        <param name="aColumn" type="boolean"/>
                    </params>
                </method>
                <method name="count" type="long" line="39"/>
                <method name="doubleValue" type="double" line="42">
                    <params>
                        <param name="index" type="long"/>
                    </params>
                    <scope line="43">
                        <scope line="44"/>
                        <scope line="47"/>
                        <scope line="50"/>
                    </scope>
                    <scope line="54">
                        <scope line="55"/>
                        <scope line="58"/>
                        <scope line="61"/>
                    </scope>
                </method>
                <method name="first" type="int" line="66"/>
                <method name="get" type="N" line="69">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="70">
                        <scope line="71"/>
                        <scope line="74"/>
                        <scope line="77"/>
                    </scope>
                    <scope line="81">
                        <scope line="82"/>
                        <scope line="85"/>
                        <scope line="88"/>
                    </scope>
                </method>
                <method name="get" type="N" line="93">
                    <params>
                        <param name="index" type="long"/>
                    </params>
                    <scope line="94">
                        <scope line="95"/>
                        <scope line="98"/>
                        <scope line="101"/>
                    </scope>
                    <scope line="105">
                        <scope line="106"/>
                        <scope line="109"/>
                        <scope line="112"/>
                    </scope>
                </method>
                <method name="getBigWorker" type="Householder.Big" line="117">
                    <scope line="118">
                        <scope line="119"/>
                        <scope line="122"/>
                    </scope>
                </method>
                <method name="getComplexWorker" type="Householder.Complex" line="128">
                    <scope line="129">
                        <scope line="130"/>
                        <scope line="133"/>
                    </scope>
                </method>
                <method name="getPrimitiveWorker" type="Householder.Primitive" line="139">
                    <scope line="140">
                        <scope line="141"/>
                        <scope line="144"/>
                    </scope>
                </method>
                <method name="isZero" type="boolean" line="150">
                    <scope line="151"/>
                    <scope line="154"/>
                </method>
                <method name="iterator" type="Iterator<N>" line="158"/>
                <method name="size" type="int" line="161">
                    <scope line="162"/>
                    <scope line="165"/>
                </method>
                <method name="toString" type="String" line="169">
                    <declaration name="retVal" type="StringBuilder" line="170"/>
                    <declaration name="tmpLastIndex" type="int" line="171"/>
                    <scope line="172"/>
                </method>
            </class>
            <method name="applyCholesky" type="void" line="181"/>
            <javadoc line="181">
                Cholesky transformations                
            </javadoc>
            <method name="applyLU" type="void" line="185"/>
            <javadoc line="185">
                LU transformations                
            </javadoc>
            <method name="asArray2D" type="Array2D<N>" line="189"/>
            <method name="computeInPlaceSchur" type="Array1D<ComplexNumber>" line="190"/>
            <method name="divideAndCopyColumn" type="void" line="191"/>
            <method name="generateApplyAndCopyHouseholderColumn" type="boolean" line="192"/>
            <method name="generateApplyAndCopyHouseholderRow" type="boolean" line="193"/>
            <method name="getIndexOfLargestInColumn" type="int" line="194"/>
            <method name="negateColumn" type="void" line="195"/>
            <method name="rotateRight" type="void" line="196"/>
            <method name="setToIdentity" type="void" line="197"/>
            <method name="substituteBackwards" type="void" line="198"/>
            <javadoc line="198">
                Will solve the equation system [A][X]=[B] where:
                  &lt;ul&gt;
                  &lt;li&gt;[aBody][this]=[this] is [A][X]=[B] (&quot;this&quot; is the right hand side, and it will be overwritten with the
                  solution).&lt;/li&gt;
                  &lt;li&gt;[A] is upper/right triangular&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    aBody The equation system body parameters [A]                    
                </param>
                <param>
                    conjugated true if the upper/right part of aBody is actually stored in the lower/left part of the matrix,
                      and the elements conjugated.                    
                </param>
            </javadoc>
            <method name="substituteForwards" type="void" line="210"/>
            <javadoc line="210">
                Will solve the equation system [A][X]=[B] where:
                  &lt;ul&gt;
                  &lt;li&gt;[aBody][this]=[this] is [A][X]=[B] (&quot;this&quot; is the right hand side, and it will be overwritten with the
                  solution).&lt;/li&gt;
                  &lt;li&gt;[A] is lower/left triangular&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    aBody The equation system body parameters [A]                    
                </param>
                <param>
                    onesOnDiagonal true if aBody as ones on the diagonal                    
                </param>
            </javadoc>
            <method name="transformSymmetric" type="void" line="221"/>
            <method name="tred2" type="void" line="222"/>
        </interface>
    </source>