<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.decomposition">
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.BinaryFunction"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.function.aggregator.ComplexAggregator"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.matrix.store.PrimitiveDenseStore"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="NonsymmetricEvD" line="14">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <extends class="EigenvalueDecomposition">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </extends>
            <class name="Primitive" line="15">
                <extends class="NonsymmetricEvD">
                    <type_params>
                        <type_param name="Double"/>
                    </type_params>
                </extends>
                <javadoc line="15">
                    Eigenvalues and eigenvectors of a real matrix.
                      &lt;P&gt;
                      If A is symmetric, then A = VDV&apos; where the eigenvalue matrix D is diagonal and the eigenvector matrix V is
                      orthogonal. I.e. A = V.times(D.times(V.transpose())) and V.times(V.transpose()) equals the identity matrix.
                      &lt;P&gt;
                      If A is not symmetric, then the eigenvalue matrix D is block diagonal with the real eigenvalues in 1-by-1 blocks
                      and any complex eigenvalues, lambda + imu, in 2-by-2 blocks, [lambda, mu; -mu, lambda]. The columns of V
                      represent the eigenvectors in the sense that AV = VD, i.e. A.times(V) equals V.times(D). The matrix V may be
                      badly conditioned, or even singular, so the validity of the equation A = VDinverse(V) depends upon V.cond().                    
                </javadoc>
                <method name="Primitive" type="constructor" line="27"/>
            </class>
            <method name="NonsymmetricEvD" type="constructor" line="31">
                <params>
                    <param name="aFactory" type="DecompositionStore.Factory<N,? extends DecompositionStore<N>>"/>
                </params>
            </method>
            <method name="compute" type="boolean" line="34">
                <params>
                    <param name="matrix" type="Access2D<?>"/>
                    <param name="eigenvaluesOnly" type="boolean"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="37">
                <params>
                    <param name="aStore" type="MatrixStore<N>"/>
                    <param name="context" type="NumberContext"/>
                </params>
            </method>
            <method name="getDeterminant" type="N" line="40">
                <declaration name="tmpVisitor" type="AggregatorFunction&lt;ComplexNumber&gt;" line="41"/>
            </method>
            <method name="getInverse" type="MatrixStore<N>" line="45"/>
            <method name="getInverse" type="MatrixStore<N>" line="48">
                <params>
                    <param name="newPreallocated" type="DecompositionStore<N>"/>
                </params>
            </method>
            <method name="getTrace" type="ComplexNumber" line="51">
                <declaration name="tmpVisitor" type="AggregatorFunction&lt;ComplexNumber&gt;" line="52"/>
            </method>
            <method name="isFullSize" type="boolean" line="56"/>
            <method name="isHermitian" type="boolean" line="59"/>
            <method name="isOrdered" type="boolean" line="62"/>
            <method name="isSolvable" type="boolean" line="65"/>
            <method name="doNonsymmetric" type="boolean" line="68">
                <params>
                    <param name="aMtrx" type="Access2D<?>"/>
                    <param name="eigenvaluesOnly" type="boolean"/>
                </params>
                <declaration name="tmpDiagDim" type="int" line="69"/>
                <declaration name="tmpMtrxA" type="DecompositionStore&lt;N&gt;" line="70"/>
                <declaration name="tmpV" type="DecompositionStore&lt;N&gt;" line="71"/>
                <declaration name="tmpEigenvalues" type="Array1D&lt;ComplexNumber&gt;" line="72"/>
                <declaration name="tmpD" type="PhysicalStore&lt;N&gt;" line="75"/>
                <declaration name="tmpValue" type="ComplexNumber" line="76"/>
                <declaration name="tmpImaginary" type="double" line="77"/>
                <scope line="78">
                    <scope line="82"/>
                    <scope line="85"/>
                </scope>
            </method>
            <method name="doSymmetric" type="boolean" line="93">
                <params>
                    <param name="aMtrx" type="Access2D<?>"/>
                    <param name="eigenvaluesOnly" type="boolean"/>
                </params>
            </method>
            <method name="makeD" type="MatrixStore<N>" line="96"/>
            <method name="makeEigenvalues" type="Array1D<ComplexNumber>" line="99"/>
            <method name="makeInverse" type="MatrixStore<N>" line="102">
                <declaration name="tmpV" type="MatrixStore&lt;N&gt;" line="103"/>
                <declaration name="tmpD" type="MatrixStore&lt;N&gt;" line="104"/>
                <declaration name="tmpDim" type="int" line="105"/>
                <declaration name="tmpMtrx" type="PhysicalStore&lt;N&gt;" line="106"/>
                <declaration name="tmpZero" type="N" line="107"/>
                <declaration name="tmpDivide" type="BinaryFunction&lt;N&gt;" line="108"/>
                <scope line="109">
                    <scope line="110"/>
                    <scope line="113"/>
                </scope>
            </method>
            <method name="makeV" type="MatrixStore<N>" line="119"/>
        </class>
    </source>