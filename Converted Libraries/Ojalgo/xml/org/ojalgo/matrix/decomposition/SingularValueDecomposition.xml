<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix.decomposition">
        <import package="java.math.BigDecimal"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.array.Array1D"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.matrix.MatrixUtils"/>
        <import package="org.ojalgo.matrix.jama.JamaSingularValue"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.netio.BasicLogger"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.type.TypeUtils"/>
        <class name="SingularValueDecomposition" line="13">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <extends class="AbstractDecomposition">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </extends>
            <implements interface="SingularValue">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <javadoc line="13">
                You create instances of (some subclass of) this class by calling one of the static factory methods:{@linkplain #makeBig()}, {@linkplain #makeComplex()}, {@linkplain #makePrimitive()}, {@linkplain #makeAlternative()}or {@linkplain #makeJama()}.                
                <author>
                    apete                    
                </author>
            </javadoc>
            <method name="make" type="SingularValue<N>" line="18">
                <params>
                    <param name="aTypical" type="Access2D<N>"/>
                </params>
                <declaration name="tmpNumber" type="N" line="19"/>
                <scope line="20"/>
                <scope line="23"/>
                <scope line="26">
                    <declaration name="tmpMaxDim" type="int" line="27"/>
                    <scope line="28"/>
                    <scope line="31"/>
                </scope>
                <scope line="35"/>
            </method>
            <method name="makeAlternative" type="SingularValue<Double>" line="39"/>
            <method name="makeBig" type="SingularValue<BigDecimal>" line="42"/>
            <method name="makeComplex" type="SingularValue<ComplexNumber>" line="45"/>
            <method name="makeJama" type="SingularValue<Double>" line="48"/>
            <method name="makePrimitive" type="SingularValue<Double>" line="51"/>
            <declaration name="myBidiagonal" type="BidiagonalDecomposition&lt;N&gt;" line="54"/>
            <declaration name="myD" type="MatrixStore&lt;N&gt;" line="55"/>
            <declaration name="myQ1" type="MatrixStore&lt;N&gt;" line="56"/>
            <declaration name="myQ2" type="MatrixStore&lt;N&gt;" line="57"/>
            <declaration name="mySingularValues" type="Array1D&lt;Double&gt;" line="58"/>
            <declaration name="mySingularValuesOnly" type="boolean" line="59"/>
            <declaration name="myTransposed" type="boolean" line="60"/>
            <declaration name="myInverse" type="MatrixStore&lt;N&gt;" line="61"/>
            <declaration name="myFullSize" type="boolean" line="62"/>
            <method name="SingularValueDecomposition" type="constructor" line="63">
                <params>
                    <param name="aFactory" type="DecompositionStore.Factory<N,? extends DecompositionStore<N>>"/>
                </params>
            </method>
            <method name="SingularValueDecomposition" type="constructor" line="66">
                <params>
                    <param name="aFactory" type="DecompositionStore.Factory<N,? extends DecompositionStore<N>>"/>
                    <param name="aBidiagonal" type="BidiagonalDecomposition<N>"/>
                </params>
            </method>
            <method name="compute" type="boolean" line="70">
                <params>
                    <param name="matrix" type="Access2D<?>"/>
                </params>
            </method>
            <method name="compute" type="boolean" line="73">
                <params>
                    <param name="matrix" type="Access2D<?>"/>
                    <param name="singularValuesOnly" type="boolean"/>
                    <param name="fullSize" type="boolean"/>
                </params>
                <scope line="75"/>
                <scope line="78"/>
                <declaration name="retVal" type="boolean" line="83"/>
                <scope line="84"/>
                <scope line="87"/>
            </method>
            <method name="getCondition" type="double" line="94">
                <declaration name="tmpSingularValues" type="Array1D&lt;Double&gt;" line="95"/>
            </method>
            <method name="getD" type="MatrixStore<N>" line="98">
                <scope line="99"/>
            </method>
            <method name="getFrobeniusNorm" type="double" line="104">
                <declaration name="retVal" type="double" line="105"/>
                <declaration name="tmpSingularValues" type="Array1D&lt;Double&gt;" line="106"/>
                <declaration name="tmpVal" type="double" line="107"/>
                <scope line="108"/>
            </method>
            <method name="getInverse" type="MatrixStore<N>" line="114">
                <scope line="115">
                    <declaration name="tmpQ1" type="MatrixStore&lt;N&gt;" line="116"/>
                    <declaration name="tmpD" type="MatrixStore&lt;N&gt;" line="117"/>
                    <declaration name="tmpRowDim" type="int" line="118"/>
                    <declaration name="tmpColDim" type="int" line="119"/>
                    <declaration name="tmpMtrx" type="PhysicalStore&lt;N&gt;" line="120"/>
                    <declaration name="tmpSingularValue" type="double" line="121"/>
                    <scope line="122">
                        <scope line="123"/>
                        <scope line="125">
                            <scope line="127"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getInverse" type="MatrixStore<N>" line="136">
                <params>
                    <param name="preallocated" type="DecompositionStore<N>"/>
                </params>
                <scope line="137">
                    <declaration name="tmpQ1" type="MatrixStore&lt;N&gt;" line="138"/>
                    <declaration name="tmpD" type="MatrixStore&lt;N&gt;" line="139"/>
                    <declaration name="tmpRowDim" type="int" line="140"/>
                    <declaration name="tmpColDim" type="int" line="141"/>
                    <declaration name="tmpMtrx" type="PhysicalStore&lt;N&gt;" line="142"/>
                    <declaration name="tmpZero" type="N" line="143"/>
                    <declaration name="tmpSingularValue" type="N" line="144"/>
                    <scope line="145">
                        <scope line="146"/>
                        <scope line="149">
                            <scope line="151"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getKyFanNorm" type="double" line="160">
                <params>
                    <param name="k" type="int"/>
                </params>
                <declaration name="tmpSingularValues" type="Array1D&lt;Double&gt;" line="161"/>
                <declaration name="retVal" type="double" line="162"/>
                <scope line="163"/>
            </method>
            <method name="getOperatorNorm" type="double" line="168"/>
            <method name="getQ1" type="MatrixStore<N>" line="171">
                <scope line="172">
                    <scope line="173"/>
                    <scope line="176"/>
                </scope>
            </method>
            <method name="getQ2" type="MatrixStore<N>" line="182">
                <scope line="183">
                    <scope line="184"/>
                    <scope line="187"/>
                </scope>
            </method>
            <method name="getRank" type="int" line="193">
                <declaration name="tmpSingularValues" type="Array1D&lt;Double&gt;" line="194"/>
                <declaration name="retVal" type="int" line="195"/>
                <declaration name="tmpTolerance" type="double" line="196"/>
                <scope line="197">
                    <scope line="198"/>
                    <scope line="201"/>
                </scope>
            </method>
            <method name="getSingularValues" type="Array1D<Double>" line="207">
                <scope line="208"/>
            </method>
            <method name="getTraceNorm" type="double" line="213"/>
            <method name="isAspectRatioNormal" type="boolean" line="216"/>
            <method name="isFullSize" type="boolean" line="219"/>
            <method name="preallocate" type="DecompositionStore<N>" line="222">
                <params>
                    <param name="templateBody" type="Access2D<N>"/>
                    <param name="templateRHS" type="Access2D<N>"/>
                </params>
            </method>
            <method name="reconstruct" type="MatrixStore<N>" line="225"/>
            <method name="reset" type="void" line="228"/>
            <method name="solve" type="MatrixStore<N>" line="239">
                <params>
                    <param name="rhs" type="Access2D<N>"/>
                </params>
            </method>
            <method name="solve" type="MatrixStore<N>" line="242">
                <params>
                    <param name="rhs" type="Access2D<N>"/>
                    <param name="preallocated" type="DecompositionStore<N>"/>
                </params>
            </method>
            <method name="computeBidiagonal" type="boolean" line="246">
                <params>
                    <param name="aStore" type="Access2D<?>"/>
                    <param name="fullSize" type="boolean"/>
                </params>
            </method>
            <method name="doCompute" type="boolean" line="249"/>
            <method name="getBidiagonalAccessD" type="DiagonalAccess<N>" line="250"/>
            <method name="getBidiagonalQ1" type="DecompositionStore<N>" line="253"/>
            <method name="getBidiagonalQ2" type="DecompositionStore<N>" line="256"/>
            <method name="isTransposed" type="boolean" line="259"/>
            <method name="makeD" type="MatrixStore<N>" line="262"/>
            <method name="makeQ1" type="MatrixStore<N>" line="263"/>
            <method name="makeQ2" type="MatrixStore<N>" line="264"/>
            <method name="makeSingularValues" type="Array1D<Double>" line="265"/>
            <method name="setD" type="void" line="266">
                <params>
                    <param name="someD" type="MatrixStore<N>"/>
                </params>
            </method>
            <method name="setQ1" type="void" line="269">
                <params>
                    <param name="someQ1" type="MatrixStore<N>"/>
                </params>
            </method>
            <method name="setQ2" type="void" line="272">
                <params>
                    <param name="someQ2" type="MatrixStore<N>"/>
                </params>
            </method>
            <method name="setSingularValues" type="void" line="275">
                <params>
                    <param name="someSingularValues" type="Array1D<Double>"/>
                </params>
            </method>
        </class>
    </source>