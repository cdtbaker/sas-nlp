<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix">
        <import package="java.math.BigDecimal"/>
        <import package="java.util.List"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.matrix.decomposition.Cholesky"/>
        <import package="org.ojalgo.matrix.decomposition.Eigenvalue"/>
        <import package="org.ojalgo.matrix.decomposition.LU"/>
        <import package="org.ojalgo.matrix.decomposition.QR"/>
        <import package="org.ojalgo.matrix.decomposition.SingularValue"/>
        <import package="org.ojalgo.matrix.store.MatrixStore"/>
        <import package="org.ojalgo.matrix.store.PhysicalStore"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <interface name="BasicMatrix">
            <type_params>
                <type_param name="N"/>
            </type_params>
            <implements interface="Access2D">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <javadoc line="16">
                &lt;p&gt;
                  This interface declares a set of high level methods for linear algebra. Only
                  the most basic set of matrix functionality is defined here. Various matrix
                  decompositions may be used to do some of the more advanced tasks. 
                  &lt;/p&gt;&lt;p&gt;
                  A vector is a matrix with column (or perhaps row) dimension 1.
                  &lt;/p&gt;                
                <see>
                    LU                    
                </see>
                <see>
                    Cholesky                    
                </see>
                <see>
                    QR                    
                </see>
                <see>
                    Eigenvalue                    
                </see>
                <see>
                    SingularValue                    
                </see>
                <see>
                    MatrixStore                    
                </see>
                <author>
                    apete                    
                </author>
            </javadoc>
            <interface name="Factory">
                <type_params>
                    <type_param name="I"/>
                </type_params>
                <implements interface="Access2D.Factory">
                    <type_params>
                        <type_param name="I"/>
                    </type_params>
                </implements>
                <javadoc line="33">
                    @author apete                    
                </javadoc>
                <method name="getBuilder" type="Access2D.Builder<I>" line="37"/>
                <method name="getBuilder" type="Access2D.Builder<I>" line="38"/>
            </interface>
            <method name="add" type="BasicMatrix<N>" line="40"/>
            <javadoc line="40">
                Adds the elements of aMtrx to the elements of this matrix. The matrices
                  must have equal dimensions.                
                <param>
                    aMtrx What to add.                    
                </param>
                <return>
                    A new matrix whos elements are the sum of this' and aMtrx'.                    
                </return>
            </javadoc>
            <method name="add" type="BasicMatrix<N>" line="47"/>
            <javadoc line="47">
                @param aRow The row index of where to superimpose the top left element of aMtrx                
                <param>
                    aCol The column index of where to superimpose the top left element of aMtrx                    
                </param>
                <param>
                    aMtrx A matrix to superimpose                    
                </param>
                <return>
                    A new matrix                    
                </return>
            </javadoc>
            <method name="add" type="BasicMatrix<N>" line="54"/>
            <javadoc line="54">
                Do not use this method to populate large dense matrices!
                  Only use it to change a few (a small number) of elements.                
            </javadoc>
            <method name="add" type="BasicMatrix<N>" line="59"/>
            <javadoc line="59">
                Adds aNmbr to the elements of this.                
                <param>
                    aNmbr What to add                    
                </param>
                <return>
                    A new matrix whos elements are the sum of this' elements and aNmbr.                    
                </return>
            </javadoc>
            <method name="conjugate" type="BasicMatrix<N>" line="65"/>
            <javadoc line="65">
                For real matrices conjugate() and transpose() are identical. For complex
                  matrices they&apos;re not.                
                <return>
                    The conjugate transpose of this.                    
                </return>
                <see>
                    org.ojalgo.matrix.BasicMatrix#transpose()                    
                </see>
            </javadoc>
            <method name="copyToBuilder" type="Builder<? extends BasicMatrix<N>>" line="72"/>
            <javadoc line="72">
                @return A fully mutable matrix builder with the elements initially set to
                  a copy of this matrix.                
            </javadoc>
            <method name="divide" type="BasicMatrix<N>" line="77"/>
            <javadoc line="77">
                Divides the elements of this with aNmbr.                
                <param>
                    aNmbr The denominator.                    
                </param>
                <return>
                    A new matrix whos elements are the elements of this divided with aNmbr.                    
                </return>
            </javadoc>
            <method name="divideElements" type="BasicMatrix<N>" line="83"/>
            <javadoc line="83">
                Divides the elements of this with the elements of aMtrx. The matrices
                  must have equal dimensions.                
                <param>
                    aMtrx The denominator elements.                    
                </param>
                <return>
                    A new matrix whos elements are the elements of this divided with the elements of aMtrx.                    
                </return>
            </javadoc>
            <method name="enforce" type="BasicMatrix<N>" line="90"/>
            <javadoc line="90">
                @deprecated Since v27 Use {@link #round(NumberContext)} instead.                
            </javadoc>
            <method name="equals" type="boolean" line="94"/>
            <javadoc line="94">
                @return true if the frobenius norm of the difference between
                  [this] and [aStore] is zero within the limits of aCntxt.                
            </javadoc>
            <method name="flushCache" type="void" line="99"/>
            <javadoc line="99">
                BasicMatrix instances are intended to be immutable. If they are
                  it is possible to cache (partial) calculation results. Calling
                  this method should flush any cached calculation results.                
            </javadoc>
            <method name="getColumnsRange" type="BasicMatrix<N>" line="105"/>
            <javadoc line="105">
                @param aFirst The first column to include.                
                <param>
                    aLimit The limit (exclusive) - the first column not to include.                    
                </param>
                <return>
                    A new matrix with only the specified range of columns                    
                </return>
            </javadoc>
            <method name="getCondition" type="Scalar<N>" line="111"/>
            <method name="getDeterminant" type="Scalar<N>" line="112"/>
            <javadoc line="112">
                @return The matrix&apos; determinant.                
            </javadoc>
            <method name="getEigenvalues" type="List<ComplexNumber>" line="116"/>
            <method name="getFrobeniusNorm" type="Scalar<N>" line="117"/>
            <javadoc line="117">
                The Frobenius norm is the square root of the sum of the squares of each
                  element, or the square root of the sum of the square of the singular values.                
                <return>
                    The matrix' Frobenius norm                    
                </return>
                <see>
                    #getFrobeniusNorm()                    
                </see>
                <see>
                    #getInfinityNorm()                    
                </see>
                <see>
                    #getKyFanNorm(int)                    
                </see>
                <see>
                    #getOneNorm()                    
                </see>
                <see>
                    #getOperatorNorm()                    
                </see>
                <see>
                    #getTraceNorm()                    
                </see>
                <see>
                    #getVectorNorm(int)                    
                </see>
            </javadoc>
            <method name="getInfinityNorm" type="Scalar<N>" line="130"/>
            <javadoc line="130">
                @return Max row sum                
                <see>
                    #getFrobeniusNorm()                    
                </see>
                <see>
                    #getInfinityNorm()                    
                </see>
                <see>
                    #getKyFanNorm(int)                    
                </see>
                <see>
                    #getOneNorm()                    
                </see>
                <see>
                    #getOperatorNorm()                    
                </see>
                <see>
                    #getTraceNorm()                    
                </see>
                <see>
                    #getVectorNorm(int)                    
                </see>
            </javadoc>
            <method name="getKyFanNorm" type="Scalar<N>" line="141"/>
            <javadoc line="141">
                @see #getFrobeniusNorm()                
                <see>
                    #getInfinityNorm()                    
                </see>
                <see>
                    #getKyFanNorm(int)                    
                </see>
                <see>
                    #getOneNorm()                    
                </see>
                <see>
                    #getOperatorNorm()                    
                </see>
                <see>
                    #getTraceNorm()                    
                </see>
                <see>
                    #getVectorNorm(int)                    
                </see>
            </javadoc>
            <method name="getOneNorm" type="Scalar<N>" line="151"/>
            <javadoc line="151">
                @return Max col sum                
                <see>
                    #getFrobeniusNorm()                    
                </see>
                <see>
                    #getInfinityNorm()                    
                </see>
                <see>
                    #getKyFanNorm(int)                    
                </see>
                <see>
                    #getOneNorm()                    
                </see>
                <see>
                    #getOperatorNorm()                    
                </see>
                <see>
                    #getTraceNorm()                    
                </see>
                <see>
                    #getVectorNorm(int)                    
                </see>
            </javadoc>
            <method name="getOperatorNorm" type="Scalar<N>" line="162"/>
            <javadoc line="162">
                2-norm, max singular value                
                <see>
                    #getFrobeniusNorm()                    
                </see>
                <see>
                    #getInfinityNorm()                    
                </see>
                <see>
                    #getKyFanNorm(int)                    
                </see>
                <see>
                    #getOneNorm()                    
                </see>
                <see>
                    #getOperatorNorm()                    
                </see>
                <see>
                    #getTraceNorm()                    
                </see>
                <see>
                    #getVectorNorm(int)                    
                </see>
            </javadoc>
            <method name="getRank" type="int" line="173"/>
            <javadoc line="173">
                The rank of a matrix is the (maximum) number of linearly independent
                  rows or columns it contains. It is also equal to the number of nonzero
                  singular values of the matrix.                
                <return>
                    The matrix' rank.                    
                </return>
            </javadoc>
            <method name="getRowsRange" type="BasicMatrix<N>" line="180"/>
            <javadoc line="180">
                @param aFirst The first row to include.                
                <param>
                    aLimit The limit (exclusive) - the first row not to include.                    
                </param>
                <return>
                    A new matrix with only the specified range of rows                    
                </return>
            </javadoc>
            <method name="getSingularValues" type="List<? extends Number>" line="186"/>
            <method name="getTrace" type="Scalar<N>" line="187"/>
            <javadoc line="187">
                The sum of the diagonal elements.                
                <return>
                    The matrix' trace.                    
                </return>
            </javadoc>
            <method name="getTraceNorm" type="Scalar<N>" line="192"/>
            <javadoc line="192">
                @see #getFrobeniusNorm()                
                <see>
                    #getInfinityNorm()                    
                </see>
                <see>
                    #getKyFanNorm(int)                    
                </see>
                <see>
                    #getOneNorm()                    
                </see>
                <see>
                    #getOperatorNorm()                    
                </see>
                <see>
                    #getTraceNorm()                    
                </see>
                <see>
                    #getVectorNorm(int)                    
                </see>
            </javadoc>
            <method name="getVectorNorm" type="Scalar<N>" line="202"/>
            <javadoc line="202">
                Treats [this] as if it is one dimensional (a vector) and
                  calculates the vector norm. The interface only requires that
                  implementations can handle arguments 0, 1, 2 and {@linkplain Integer#MAX_VALUE}.                
                <see>
                    #getFrobeniusNorm()                    
                </see>
                <see>
                    #getInfinityNorm()                    
                </see>
                <see>
                    #getKyFanNorm(int)                    
                </see>
                <see>
                    #getOneNorm()                    
                </see>
                <see>
                    #getOperatorNorm()                    
                </see>
                <see>
                    #getTraceNorm()                    
                </see>
                <see>
                    #getVectorNorm(int)                    
                </see>
            </javadoc>
            <method name="invert" type="BasicMatrix<N>" line="215"/>
            <javadoc line="215">
                &lt;p&gt; 
                  About inverting matrices:
                  &lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;&quot;right inverse&quot;: [this][right inverse]=[I]. You may calculate it
                  using {@linkplain #solve(BasicMatrix)}.&lt;/li&gt;
                  &lt;li&gt;&quot;left inverse&quot;: [left inverse][this]=[I]. You may calculate it
                  using {@linkplain #solve(BasicMatrix)} and transposing.&lt;/li&gt;
                  &lt;li&gt;&quot;generalised inverse&quot;: [this][generalised inverse][this]=[this]. Note
                  that if [this] is singular or non-square, then [generalised inverse] is 
                  not unique.&lt;/li&gt;
                  &lt;li&gt;&quot;pseudoinverse&quot;: The generalised inverse (there are 
                  typically/possibly many) with the smallest frobenius norm is called the 
                  pseudoinverse. You may calculate it using the {@linkplain QR} or{@linkplain SingularValue} decompositions.&lt;/li&gt;
                  &lt;li&gt;&quot;inverse&quot;: &lt;ul&gt;&lt;li&gt;
                  If [left inverse]=[right inverse] then it is also [inverse].
                  &lt;/li&gt;&lt;li&gt;
                  If [this] is square and has full rank then the [generalised inverse]
                  is unique, with the [pseudoinverse] given, and equal to [inverse].
                  &lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
                  &lt;/ul&gt;                
                <return>
                    The "best possible" inverse....                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="240"/>
            <javadoc line="240">
                Matrices are either square, tall, fat or empty. m &lt;= 0 or n &lt;= 0                
                <return>
                    true if matrix is empty                    
                </return>
            </javadoc>
            <method name="isFat" type="boolean" line="245"/>
            <javadoc line="245">
                Matrices are either square, tall, fat or empty. 1 &lt;= m &lt; n                
                <return>
                    true if matrix is fat                    
                </return>
            </javadoc>
            <method name="isFullRank" type="boolean" line="250"/>
            <javadoc line="250">
                @return true if {@linkplain #getRank()} == min({@linkplain #getRowDim()},{@linkplain #getColDim()})                
            </javadoc>
            <method name="isHermitian" type="boolean" line="254"/>
            <method name="isScalar" type="boolean" line="255"/>
            <javadoc line="255">
                @return true if this is a 1x1 matrix                
            </javadoc>
            <method name="isSquare" type="boolean" line="259"/>
            <javadoc line="259">
                Matrices are either square, tall, fat or empty. m = n &lt;&gt; 0                
                <return>
                    true if matrix is square                    
                </return>
            </javadoc>
            <method name="isSymmetric" type="boolean" line="264"/>
            <method name="isTall" type="boolean" line="265"/>
            <javadoc line="265">
                Matrices are either square, tall, fat or empty. m &gt; n &gt;= 1                
                <return>
                    true if matrix is tall                    
                </return>
            </javadoc>
            <method name="isVector" type="boolean" line="270"/>
            <javadoc line="270">
                @return true if the row or column dimensions are equal to 1.                
            </javadoc>
            <method name="mergeColumns" type="BasicMatrix<N>" line="274"/>
            <javadoc line="274">
                [aMtrx] is appended to the bottom of [this].
                  The two matrices must have the same number of columns.                
                <param>
                    aMtrx The matrix to merge.                    
                </param>
                <return>
                    A new matrix with more rows.                    
                </return>
            </javadoc>
            <method name="mergeRows" type="BasicMatrix<N>" line="281"/>
            <javadoc line="281">
                [aMtrx] is appended to the right side of [this].
                  The two matrices must have the same number of rows.                
                <param>
                    aMtrx The matrix to merge.                    
                </param>
                <return>
                    A new matrix with more columns.                    
                </return>
            </javadoc>
            <method name="modify" type="BasicMatrix<N>" line="288"/>
            <method name="multiply" type="BasicMatrix<N>" line="289"/>
            <javadoc line="289">
                Multiplies the elements of this matrix with aNmbr.                
                <param>
                    aNmbr What to multiply with.                    
                </param>
                <return>
                    A new matrix whos elements are the elements of this multiplied
                      with aNmbr.                    
                </return>
            </javadoc>
            <method name="multiplyElements" type="BasicMatrix<N>" line="296"/>
            <javadoc line="296">
                Multiplies the elements of this matrix with the elements of aMtrx. The
                  matrices must have equal dimensions.                
                <param>
                    aMtrx The elements to multiply by.                    
                </param>
                <return>
                    A new matrix whos elements are the elements of this multiplied
                      with the elements of aMtrx.                    
                </return>
            </javadoc>
            <method name="multiplyLeft" type="BasicMatrix<N>" line="304"/>
            <javadoc line="304">
                Matrix multiplication: [aMtrx][this]
                  &lt;br&gt;
                  The column dimension of the left matrix must equal the row dimension of
                  the right matrix.                
                <param>
                    aMtrx The left matrix.                    
                </param>
                <return>
                    The product.                    
                </return>
                <see>
                    org.ojalgo.matrix.BasicMatrix#multiplyRight(BasicMatrix)                    
                </see>
            </javadoc>
            <method name="multiplyRight" type="BasicMatrix<N>" line="314"/>
            <javadoc line="314">
                Matrix multiplication: [this][aMtrx]
                  &lt;br&gt;
                  The column dimension of the left matrix must equal the row dimension of
                  the right matrix.                
                <param>
                    aMtrx The right matrix.                    
                </param>
                <return>
                    The product.                    
                </return>
                <see>
                    org.ojalgo.matrix.BasicMatrix#multiplyLeft(BasicMatrix)                    
                </see>
            </javadoc>
            <method name="multiplyVectors" type="Scalar<N>" line="324"/>
            <javadoc line="324">
                Assumes that both [this] and [aVctr] have row or column dimension,
                  doesn&apos;t matter which, equal to 1. The two vectors must have the
                  same number of elements.                
            </javadoc>
            <method name="negate" type="BasicMatrix<N>" line="330"/>
            <javadoc line="330">
                @return A new matrix with negated elements.                
            </javadoc>
            <method name="round" type="BasicMatrix<N>" line="334"/>
            <javadoc line="334">
                @param aCntxt                
                <return>
                                        
                </return>
                <deprecated>
                    v34 Use {@link #modifyAll(UnaryFunction)} instead                    
                </deprecated>
            </javadoc>
            <method name="selectColumns" type="BasicMatrix<N>" line="340"/>
            <javadoc line="340">
                @param someCols An ordered array of column indeces.                
                <return>
                    A matrix with a subset of, reordered, columns.                    
                </return>
            </javadoc>
            <method name="selectRows" type="BasicMatrix<N>" line="345"/>
            <javadoc line="345">
                @param someRows An ordered array of row indeces.                
                <return>
                    A matrix with a subset of, reordered, rows.                    
                </return>
            </javadoc>
            <method name="solve" type="BasicMatrix<N>" line="350"/>
            <javadoc line="350">
                &lt;p&gt;
                  This method solves a system of linear equations: [this][X]=[aRHS].
                  A combination of columns in [this] should produce a column in [aRHS].
                  It is ok for [aRHS] to have more than 1 column.
                  &lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;If the problem is over-qualified an approximate solution is returned.&lt;/li&gt;
                  &lt;li&gt;If the problem is under-qualified one possible solution is returned.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Remember that: [X][this]=[aRHS] is equivalent to
                  [this]&lt;sup&gt;T&lt;/sup&gt;[X]&lt;sup&gt;T&lt;/sup&gt;=[aRHS]&lt;sup&gt;T&lt;/sup&gt;
                  &lt;/p&gt;                
                <param>
                    aRHS The right hand side of the equation.                    
                </param>
                <return>
                    The solution, [X].                    
                </return>
            </javadoc>
            <method name="subtract" type="BasicMatrix<N>" line="368"/>
            <javadoc line="368">
                Subtracts the elements of aMtrx from the elements of this matrix. The
                  matrices must have equal dimensions.                
                <param>
                    aMtrx What to subtract.                    
                </param>
                <return>
                    A new matrix whos elements are the difference of this' and aMtrx'.                    
                </return>
            </javadoc>
            <method name="subtract" type="BasicMatrix<N>" line="375"/>
            <javadoc line="375">
                Subtracts aNmbr from the elements of this matrix.                
                <param>
                    value What to subtract.                    
                </param>
                <return>
                    A new matrix whos elements are the differences between this' elements and aNmbr.                    
                </return>
            </javadoc>
            <method name="toBigDecimal" type="BigDecimal" line="381"/>
            <javadoc line="381">
                Extracts one element of this matrix as a BigDecimal.                
                <param>
                    row A row index.                    
                </param>
                <param>
                    column A column index.                    
                </param>
                <return>
                    One matrix element                    
                </return>
            </javadoc>
            <method name="toBigStore" type="PhysicalStore<BigDecimal>" line="388"/>
            <javadoc line="388">
                Must be a copy that is safe to modify.                
                <see>
                    org.ojalgo.matrix.BasicMatrix#toComplexStore()                    
                </see>
                <see>
                    org.ojalgo.matrix.BasicMatrix#toPrimitiveStore()                    
                </see>
            </javadoc>
            <method name="toComplexNumber" type="ComplexNumber" line="394"/>
            <javadoc line="394">
                Extracts one element of this matrix as a ComplexNumber.                
                <param>
                    row A row index.                    
                </param>
                <param>
                    column A column index.                    
                </param>
                <return>
                    One matrix element                    
                </return>
            </javadoc>
            <method name="toComplexStore" type="PhysicalStore<ComplexNumber>" line="401"/>
            <javadoc line="401">
                Must be a copy that is safe to modify.                
                <see>
                    org.ojalgo.matrix.BasicMatrix#toBigStore()                    
                </see>
                <see>
                    org.ojalgo.matrix.BasicMatrix#toPrimitiveStore()                    
                </see>
            </javadoc>
            <method name="toListOfColumns" type="List<BasicMatrix<N>>" line="407"/>
            <method name="toListOfElements" type="List<N>" line="408"/>
            <javadoc line="408">
                It is also possible to call {@linkplain #toBigStore()}, {@linkplain #toComplexStore()}or {@linkplain #toPrimitiveStore()} and then {@linkplain PhysicalStore#asList()}.                
            </javadoc>
            <method name="toListOfRows" type="List<BasicMatrix<N>>" line="412"/>
            <method name="toPrimitiveStore" type="PhysicalStore<Double>" line="413"/>
            <javadoc line="413">
                Must be a copy that is safe to modify.                
                <see>
                    org.ojalgo.matrix.BasicMatrix#toBigStore()                    
                </see>
                <see>
                    org.ojalgo.matrix.BasicMatrix#toComplexStore()                    
                </see>
            </javadoc>
            <method name="toScalar" type="Scalar<N>" line="419"/>
            <javadoc line="419">
                Extracts one element of this matrix as a Scalar.                
                <param>
                    row A row index.                    
                </param>
                <param>
                    column A column index.                    
                </param>
                <return>
                    One matrix element                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="426"/>
            <method name="transpose" type="BasicMatrix<N>" line="427"/>
            <javadoc line="427">
                Transposes this matrix.
                  For complex matrices conjugate() and transpose() are NOT EQUAL.                
                <return>
                    A matrix that is the transpose of this matrix.                    
                </return>
                <see>
                    org.ojalgo.matrix.BasicMatrix#conjugate()                    
                </see>
            </javadoc>
        </interface>
    </source>