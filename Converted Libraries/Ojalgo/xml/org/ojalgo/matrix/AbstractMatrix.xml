<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ojalgo.matrix">
        <import package="java.io.Serializable"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="org.ojalgo.ProgrammingError"/>
        <import package="org.ojalgo.access.Access1D"/>
        <import package="org.ojalgo.access.Access2D"/>
        <import package="org.ojalgo.access.AccessUtils"/>
        <import package="org.ojalgo.access.Iterator1D"/>
        <import package="org.ojalgo.constant.PrimitiveMath"/>
        <import package="org.ojalgo.function.UnaryFunction"/>
        <import package="org.ojalgo.function.aggregator.Aggregator"/>
        <import package="org.ojalgo.function.aggregator.AggregatorFunction"/>
        <import package="org.ojalgo.matrix.decomposition.Eigenvalue"/>
        <import package="org.ojalgo.matrix.decomposition.EigenvalueDecomposition"/>
        <import package="org.ojalgo.matrix.decomposition.LU"/>
        <import package="org.ojalgo.matrix.decomposition.LUDecomposition"/>
        <import package="org.ojalgo.matrix.decomposition.QR"/>
        <import package="org.ojalgo.matrix.decomposition.QRDecomposition"/>
        <import package="org.ojalgo.matrix.decomposition.SingularValue"/>
        <import package="org.ojalgo.matrix.decomposition.SingularValueDecomposition"/>
        <import package="org.ojalgo.matrix.store"/>
        <import package="org.ojalgo.scalar.ComplexNumber"/>
        <import package="org.ojalgo.scalar.Scalar"/>
        <import package="org.ojalgo.type.context.NumberContext"/>
        <class name="AbstractMatrix" line="28">
            <type_params>
                <type_param name="N"/>
                <type_param name="I"/>
            </type_params>
            <extends class="Object"/>
            <implements interface="BasicMatrix">
                <type_params>
                    <type_param name="N"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <javadoc line="28">
                ArbitraryMatrix                
                <author>
                    apete                    
                </author>
            </javadoc>
            <declaration name="myEigenvalue" type="Eigenvalue&lt;N&gt;" line="33"/>
            <declaration name="myHashCode" type="int" line="34"/>
            <declaration name="myLU" type="LU&lt;N&gt;" line="35"/>
            <declaration name="myPhysicalFactory" type="PhysicalStore.Factory&lt;N,? extends PhysicalStore&lt;N&gt;&gt;" line="36"/>
            <declaration name="myQR" type="QR&lt;N&gt;" line="37"/>
            <declaration name="mySingularValue" type="SingularValue&lt;N&gt;" line="38"/>
            <declaration name="myStore" type="MatrixStore&lt;N&gt;" line="39"/>
            <method name="AbstractMatrix" type="constructor" line="40"/>
            <method name="AbstractMatrix" type="constructor" line="44">
                <params>
                    <param name="aStore" type="MatrixStore<N>"/>
                </params>
            </method>
            <method name="add" type="I" line="49">
                <params>
                    <param name="aMtrx" type="Access2D<?>"/>
                </params>
                <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="51"/>
            </method>
            <method name="add" type="I" line="55">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aMtrx" type="Access2D<?>"/>
                </params>
                <declaration name="tmpDiff" type="MatrixStore&lt;N&gt;" line="56"/>
            </method>
            <method name="add" type="I" line="59">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aCol" type="int"/>
                    <param name="aNmbr" type="Number"/>
                </params>
                <declaration name="tmpPhysicalFactory" type="PhysicalStore.Factory&lt;N,?&gt;" line="60"/>
                <declaration name="tmpDiff" type="SingleStore&lt;N&gt;" line="61"/>
            </method>
            <method name="add" type="I" line="64">
                <params>
                    <param name="aNmbr" type="Number"/>
                </params>
                <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="65"/>
            </method>
            <method name="conjugate" type="I" line="69">
                <declaration name="retVal" type="MatrixStore&lt;N&gt;" line="70"/>
                <scope line="71"/>
                <scope line="74"/>
            </method>
            <method name="copyToBuilder" type="Access2D.Builder<I>" line="79"/>
            <method name="count" type="long" line="82"/>
            <method name="countColumns" type="long" line="85"/>
            <method name="countRows" type="long" line="88"/>
            <method name="divide" type="I" line="91">
                <params>
                    <param name="aNmbr" type="Number"/>
                </params>
                <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="92"/>
            </method>
            <method name="divideElements" type="I" line="96">
                <params>
                    <param name="aMtrx" type="Access2D<?>"/>
                </params>
                <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="98"/>
            </method>
            <method name="doubleValue" type="double" line="102">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="doubleValue" type="double" line="105">
                <params>
                    <param name="i" type="long"/>
                    <param name="j" type="long"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="108">
                <params>
                    <param name="aMtrx" type="Access2D<?>"/>
                    <param name="aCntxt" type="NumberContext"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="111">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="112"/>
                <scope line="115"/>
            </method>
            <method name="flushCache" type="void" line="119"/>
            <method name="get" type="N" line="126">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="get" type="N" line="129">
                <params>
                    <param name="index" type="long"/>
                </params>
            </method>
            <method name="get" type="N" line="132">
                <params>
                    <param name="aRow" type="long"/>
                    <param name="aColumn" type="long"/>
                </params>
            </method>
            <method name="getColDim" type="int" line="135"/>
            <method name="getColumnsRange" type="I" line="138">
                <params>
                    <param name="aFirst" type="int"/>
                    <param name="aLimit" type="int"/>
                </params>
            </method>
            <method name="getCondition" type="Scalar<N>" line="141"/>
            <method name="getDeterminant" type="Scalar<N>" line="144"/>
            <method name="getEigenvalues" type="List<ComplexNumber>" line="147"/>
            <javadoc line="150">
                @see org.ojalgo.matrix.BasicMatrix#getFrobeniusNorm()                
            </javadoc>
            <method name="getFrobeniusNorm" type="Scalar<N>" line="153">
                <scope line="154"/>
                <scope line="157"/>
            </method>
            <method name="getInfinityNorm" type="Scalar<N>" line="161">
                <declaration name="retVal" type="double" line="162"/>
                <declaration name="tmpRowSumAggr" type="AggregatorFunction&lt;N&gt;" line="163"/>
                <declaration name="tmpRowDim" type="int" line="164"/>
                <scope line="165"/>
            </method>
            <method name="getKyFanNorm" type="Scalar<N>" line="172">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <method name="getOneNorm" type="Scalar<N>" line="175">
                <declaration name="retVal" type="double" line="176"/>
                <declaration name="tmpColSumAggr" type="AggregatorFunction&lt;N&gt;" line="177"/>
                <declaration name="tmpColDim" type="int" line="178"/>
                <scope line="179"/>
            </method>
            <method name="getOperatorNorm" type="Scalar<N>" line="186"/>
            <method name="getRank" type="int" line="189">
                <scope line="190"/>
                <scope line="193"/>
                <scope line="196"/>
            </method>
            <method name="getRowDim" type="int" line="200"/>
            <method name="getRowsRange" type="I" line="203">
                <params>
                    <param name="aFirst" type="int"/>
                    <param name="aLimit" type="int"/>
                </params>
            </method>
            <method name="getSingularValues" type="List<Double>" line="206"/>
            <method name="getTrace" type="Scalar<N>" line="209">
                <declaration name="tmpAggr" type="AggregatorFunction&lt;N&gt;" line="210"/>
            </method>
            <method name="getTraceNorm" type="Scalar<N>" line="214"/>
            <method name="getVectorNorm" type="Scalar<N>" line="217">
                <params>
                    <param name="aDegree" type="int"/>
                </params>
            </method>
            <method name="hashCode" type="int" line="229">
                <scope line="230"/>
            </method>
            <method name="invert" type="I" line="235">
                <declaration name="retVal" type="MatrixStore&lt;N&gt;" line="236"/>
                <scope line="237"/>
                <scope line="240"/>
                <scope line="243"/>
            </method>
            <method name="isEmpty" type="boolean" line="248"/>
            <method name="isFat" type="boolean" line="251"/>
            <method name="isFullRank" type="boolean" line="254"/>
            <method name="isHermitian" type="boolean" line="257"/>
            <method name="isScalar" type="boolean" line="260"/>
            <method name="isSquare" type="boolean" line="263"/>
            <method name="isSymmetric" type="boolean" line="266"/>
            <method name="isTall" type="boolean" line="269"/>
            <method name="isVector" type="boolean" line="272"/>
            <method name="iterator" type="Iterator<N>" line="275"/>
            <method name="mergeColumns" type="I" line="278">
                <params>
                    <param name="aMtrx" type="Access2D<?>"/>
                </params>
            </method>
            <method name="mergeRows" type="I" line="282">
                <params>
                    <param name="aMtrx" type="Access2D<?>"/>
                </params>
            </method>
            <method name="modify" type="I" line="286">
                <params>
                    <param name="aFunc" type="UnaryFunction<N>"/>
                </params>
                <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="287"/>
            </method>
            <method name="multiply" type="I" line="291">
                <params>
                    <param name="aNmbr" type="Number"/>
                </params>
                <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="292"/>
            </method>
            <method name="multiplyElements" type="I" line="296">
                <params>
                    <param name="aMtrx" type="Access2D<?>"/>
                </params>
                <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="298"/>
            </method>
            <method name="multiplyLeft" type="I" line="302">
                <params>
                    <param name="aMtrx" type="Access2D<?>"/>
                </params>
            </method>
            <method name="multiplyRight" type="I" line="306">
                <params>
                    <param name="aMtrx" type="Access2D<?>"/>
                </params>
            </method>
            <method name="multiplyVectors" type="Scalar<N>" line="310">
                <params>
                    <param name="aVctr" type="Access2D<?>"/>
                </params>
                <scope line="311"/>
                <scope line="314"/>
                <scope line="317"/>
            </method>
            <method name="negate" type="I" line="321">
                <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="322"/>
            </method>
            <method name="selectColumns" type="I" line="326">
                <params>
                    <param name="someCols" type="int"/>
                </params>
            </method>
            <method name="selectRows" type="I" line="329">
                <params>
                    <param name="someRows" type="int"/>
                </params>
            </method>
            <method name="size" type="int" line="332"/>
            <method name="solve" type="I" line="335">
                <params>
                    <param name="aRHS" type="Access2D<?>"/>
                </params>
                <declaration name="retVal" type="MatrixStore&lt;N&gt;" line="336"/>
                <scope line="337"/>
                <scope line="340"/>
                <scope line="343"/>
            </method>
            <method name="subtract" type="I" line="348">
                <params>
                    <param name="aMtrx" type="Access2D<?>"/>
                </params>
                <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="350"/>
            </method>
            <method name="subtract" type="I" line="354">
                <params>
                    <param name="value" type="Number"/>
                </params>
                <declaration name="retVal" type="PhysicalStore&lt;N&gt;" line="355"/>
            </method>
            <method name="toBigStore" type="PhysicalStore<BigDecimal>" line="359"/>
            <method name="toComplexStore" type="PhysicalStore<ComplexNumber>" line="362"/>
            <method name="toListOfColumns" type="List<BasicMatrix<N>>" line="365">
                <declaration name="tmpColDim" type="int" line="366"/>
                <declaration name="retVal" type="List&lt;BasicMatrix&lt;N&gt;&gt;" line="367"/>
                <scope line="368"/>
            </method>
            <method name="toListOfElements" type="List<N>" line="373"/>
            <method name="toListOfRows" type="List<BasicMatrix<N>>" line="376">
                <declaration name="tmpRowDim" type="int" line="377"/>
                <declaration name="retVal" type="List&lt;BasicMatrix&lt;N&gt;&gt;" line="378"/>
                <scope line="379"/>
            </method>
            <method name="toPrimitiveStore" type="PhysicalStore<Double>" line="384"/>
            <method name="toScalar" type="Scalar<N>" line="387">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="toString" type="String" line="390"/>
            <method name="transpose" type="I" line="393">
                <declaration name="retVal" type="MatrixStore&lt;N&gt;" line="394"/>
                <scope line="395"/>
                <scope line="398"/>
            </method>
            <method name="getComputedEigenvalue" type="Eigenvalue<N>" line="403">
                <declaration name="retVal" type="Eigenvalue&lt;N&gt;" line="404"/>
                <scope line="405"/>
            </method>
            <method name="getComputedLU" type="LU<N>" line="410">
                <declaration name="retVal" type="LU&lt;N&gt;" line="411"/>
                <scope line="412"/>
            </method>
            <method name="getComputedQR" type="QR<N>" line="417">
                <declaration name="retVal" type="QR&lt;N&gt;" line="418"/>
                <scope line="419"/>
            </method>
            <method name="getComputedSingularValue" type="SingularValue<N>" line="424">
                <declaration name="retVal" type="SingularValue&lt;N&gt;" line="425"/>
                <scope line="426"/>
            </method>
            <method name="getEigenvalue" type="Eigenvalue<N>" line="431">
                <scope line="432"/>
            </method>
            <method name="getLU" type="LU<N>" line="437">
                <scope line="438"/>
            </method>
            <method name="getQR" type="QR<N>" line="443">
                <scope line="444"/>
            </method>
            <method name="getSingularValue" type="SingularValue<N>" line="449">
                <scope line="450"/>
            </method>
            <method name="getFactory" type="MatrixFactory<N,I>" line="455"/>
            <method name="getPhysicalFactory" type="PhysicalStore.Factory<N,? extends PhysicalStore<N>>" line="456"/>
            <method name="getStore" type="MatrixStore<N>" line="459"/>
            <method name="getStoreFrom" type="MatrixStore<N>" line="462"/>
        </class>
    </source>