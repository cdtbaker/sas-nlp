<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.prefs">
        <import package="java.util.Map"/>
        <import package="java.util.TreeMap"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="WindowsPreferences" line="7">
            <extends class="AbstractPreferences"/>
            <javadoc line="7">
                Windows registry based implementation of  &lt;tt&gt;Preferences&lt;/tt&gt;.
                  &lt;tt&gt;Preferences&lt;/tt&gt;&apos; &lt;tt&gt;systemRoot&lt;/tt&gt; and &lt;tt&gt;userRoot&lt;/tt&gt; are stored in
                  &lt;tt&gt;HKEY_LOCAL_MACHINE\SOFTWARE\JavaSoft\Prefs&lt;/tt&gt; and
                  &lt;tt&gt;HKEY_CURRENT_USER\Software\JavaSoft\Prefs&lt;/tt&gt; correspondingly.                
                <author>
                    Konstantin Kladko                    
                </author>
                <see>
                    Preferences                    
                </see>
                <see>
                    PreferencesFactory                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="logger" type="PlatformLogger" line="18"/>
            <javadoc line="18">
                Logger for error messages                
            </javadoc>
            <declaration name="WINDOWS_ROOT_PATH" type="byte[]" line="22"/>
            <javadoc line="22">
                Windows registry path to &lt;tt&gt;Preferences&lt;/tt&gt;&apos;s root nodes.                
            </javadoc>
            <declaration name="HKEY_CURRENT_USER" type="int" line="26"/>
            <javadoc line="26">
                Windows handles to &lt;tt&gt;HKEY_CURRENT_USER&lt;/tt&gt; and
                  &lt;tt&gt;HKEY_LOCAL_MACHINE&lt;/tt&gt; hives.                
            </javadoc>
            <declaration name="HKEY_LOCAL_MACHINE" type="int" line="31"/>
            <declaration name="USER_ROOT_NATIVE_HANDLE" type="int" line="32"/>
            <javadoc line="32">
                Mount point for &lt;tt&gt;Preferences&lt;/tt&gt;&apos;  user root.                
            </javadoc>
            <declaration name="SYSTEM_ROOT_NATIVE_HANDLE" type="int" line="36"/>
            <javadoc line="36">
                Mount point for &lt;tt&gt;Preferences&lt;/tt&gt;&apos;  system root.                
            </javadoc>
            <declaration name="MAX_WINDOWS_PATH_LENGTH" type="int" line="40"/>
            <javadoc line="40">
                Maximum byte-encoded path length for Windows native functions,
                  ending &lt;tt&gt;null&lt;/tt&gt; character not included.                
            </javadoc>
            <declaration name="userRoot" type="Preferences" line="45"/>
            <javadoc line="45">
                User root node.                
            </javadoc>
            <declaration name="systemRoot" type="Preferences" line="49"/>
            <javadoc line="49">
                System root node.                
            </javadoc>
            <declaration name="ERROR_SUCCESS" type="int" line="53"/>
            <declaration name="ERROR_FILE_NOT_FOUND" type="int" line="54"/>
            <declaration name="ERROR_ACCESS_DENIED" type="int" line="55"/>
            <declaration name="NATIVE_HANDLE" type="int" line="56"/>
            <declaration name="ERROR_CODE" type="int" line="57"/>
            <declaration name="SUBKEYS_NUMBER" type="int" line="58"/>
            <declaration name="VALUES_NUMBER" type="int" line="59"/>
            <declaration name="MAX_KEY_LENGTH" type="int" line="60"/>
            <declaration name="MAX_VALUE_NAME_LENGTH" type="int" line="61"/>
            <declaration name="DISPOSITION" type="int" line="62"/>
            <declaration name="REG_CREATED_NEW_KEY" type="int" line="63"/>
            <declaration name="REG_OPENED_EXISTING_KEY" type="int" line="64"/>
            <declaration name="NULL_NATIVE_HANDLE" type="int" line="65"/>
            <declaration name="DELETE" type="int" line="66"/>
            <declaration name="KEY_QUERY_VALUE" type="int" line="67"/>
            <declaration name="KEY_SET_VALUE" type="int" line="68"/>
            <declaration name="KEY_CREATE_SUB_KEY" type="int" line="69"/>
            <declaration name="KEY_ENUMERATE_SUB_KEYS" type="int" line="70"/>
            <declaration name="KEY_READ" type="int" line="71"/>
            <declaration name="KEY_WRITE" type="int" line="72"/>
            <declaration name="KEY_ALL_ACCESS" type="int" line="73"/>
            <declaration name="INIT_SLEEP_TIME" type="int" line="74"/>
            <javadoc line="74">
                Initial time between registry access attempts, in ms. The time is doubled
                  after each failing attempt (except the first).                
            </javadoc>
            <declaration name="MAX_ATTEMPTS" type="int" line="79"/>
            <javadoc line="79">
                Maximum number of registry access attempts.                
            </javadoc>
            <declaration name="isBackingStoreAvailable" type="boolean" line="83"/>
            <javadoc line="83">
                BackingStore availability flag.                
            </javadoc>
            <method name="WindowsRegOpenKey" type="int[]" line="87"/>
            <javadoc line="87">
                Java wrapper for Windows registry API RegOpenKey()                
            </javadoc>
            <javadoc line="91">
                Retries RegOpenKey() MAX_ATTEMPTS times before giving up.                
            </javadoc>
            <method name="WindowsRegOpenKey1" type="int[]" line="94">
                <params>
                    <param name="hKey" type="int"/>
                    <param name="subKey" type="byte[]"/>
                    <param name="securityMask" type="int"/>
                </params>
                <declaration name="result" type="int[]" line="95"/>
                <scope line="96"/>
                <scope line="99">
                    <declaration name="handle" type="int" line="101"/>
                </scope>
                <scope line="105">
                    <declaration name="sleepTime" type="long" line="106"/>
                    <scope line="107">
                        <scope line="108"/>
                        <scope line="111"/>
                        <scope line="116"/>
                    </scope>
                </scope>
            </method>
            <method name="WindowsRegCloseKey" type="int" line="123"/>
            <javadoc line="123">
                Java wrapper for Windows registry API RegCloseKey()                
            </javadoc>
            <method name="WindowsRegCreateKeyEx" type="int[]" line="127"/>
            <javadoc line="127">
                Java wrapper for Windows registry API RegCreateKeyEx()                
            </javadoc>
            <javadoc line="131">
                Retries RegCreateKeyEx() MAX_ATTEMPTS times before giving up.                
            </javadoc>
            <method name="WindowsRegCreateKeyEx1" type="int[]" line="134">
                <params>
                    <param name="hKey" type="int"/>
                    <param name="subKey" type="byte[]"/>
                </params>
                <declaration name="result" type="int[]" line="135"/>
                <scope line="136"/>
                <scope line="139">
                    <declaration name="sleepTime" type="long" line="140"/>
                    <scope line="141">
                        <scope line="142"/>
                        <scope line="145"/>
                        <scope line="150"/>
                    </scope>
                </scope>
            </method>
            <method name="WindowsRegDeleteKey" type="int" line="157"/>
            <javadoc line="157">
                Java wrapper for Windows registry API RegDeleteKey()                
            </javadoc>
            <method name="WindowsRegFlushKey" type="int" line="161"/>
            <javadoc line="161">
                Java wrapper for Windows registry API RegFlushKey()                
            </javadoc>
            <javadoc line="165">
                Retries RegFlushKey() MAX_ATTEMPTS times before giving up.                
            </javadoc>
            <method name="WindowsRegFlushKey1" type="int" line="168">
                <params>
                    <param name="hKey" type="int"/>
                </params>
                <declaration name="result" type="int" line="169"/>
                <scope line="170"/>
                <scope line="173">
                    <declaration name="sleepTime" type="long" line="174"/>
                    <scope line="175">
                        <scope line="176"/>
                        <scope line="179"/>
                        <scope line="184"/>
                    </scope>
                </scope>
            </method>
            <method name="WindowsRegQueryValueEx" type="byte[]" line="191"/>
            <javadoc line="191">
                Java wrapper for Windows registry API RegQueryValueEx()                
            </javadoc>
            <method name="WindowsRegSetValueEx" type="int" line="195"/>
            <javadoc line="195">
                Java wrapper for Windows registry API RegSetValueEx()                
            </javadoc>
            <javadoc line="199">
                Retries RegSetValueEx() MAX_ATTEMPTS times before giving up.                
            </javadoc>
            <method name="WindowsRegSetValueEx1" type="int" line="202">
                <params>
                    <param name="hKey" type="int"/>
                    <param name="valueName" type="byte[]"/>
                    <param name="value" type="byte[]"/>
                </params>
                <declaration name="result" type="int" line="203"/>
                <scope line="204"/>
                <scope line="207">
                    <declaration name="sleepTime" type="long" line="208"/>
                    <scope line="209">
                        <scope line="210"/>
                        <scope line="213"/>
                        <scope line="218"/>
                    </scope>
                </scope>
            </method>
            <method name="WindowsRegDeleteValue" type="int" line="225"/>
            <javadoc line="225">
                Java wrapper for Windows registry API RegDeleteValue()                
            </javadoc>
            <method name="WindowsRegQueryInfoKey" type="int[]" line="229"/>
            <javadoc line="229">
                Java wrapper for Windows registry API RegQueryInfoKey()                
            </javadoc>
            <javadoc line="233">
                Retries RegQueryInfoKey() MAX_ATTEMPTS times before giving up.                
            </javadoc>
            <method name="WindowsRegQueryInfoKey1" type="int[]" line="236">
                <params>
                    <param name="hKey" type="int"/>
                </params>
                <declaration name="result" type="int[]" line="237"/>
                <scope line="238"/>
                <scope line="241">
                    <declaration name="sleepTime" type="long" line="242"/>
                    <scope line="243">
                        <scope line="244"/>
                        <scope line="247"/>
                        <scope line="252"/>
                    </scope>
                </scope>
            </method>
            <method name="WindowsRegEnumKeyEx" type="byte[]" line="259"/>
            <javadoc line="259">
                Java wrapper for Windows registry API RegEnumKeyEx()                
            </javadoc>
            <javadoc line="263">
                Retries RegEnumKeyEx() MAX_ATTEMPTS times before giving up.                
            </javadoc>
            <method name="WindowsRegEnumKeyEx1" type="byte[]" line="266">
                <params>
                    <param name="hKey" type="int"/>
                    <param name="subKeyIndex" type="int"/>
                    <param name="maxKeyLength" type="int"/>
                </params>
                <declaration name="result" type="byte[]" line="267"/>
                <scope line="268"/>
                <scope line="271">
                    <declaration name="sleepTime" type="long" line="272"/>
                    <scope line="273">
                        <scope line="274"/>
                        <scope line="277"/>
                        <scope line="282"/>
                    </scope>
                </scope>
            </method>
            <method name="WindowsRegEnumValue" type="byte[]" line="289"/>
            <javadoc line="289">
                Java wrapper for Windows registry API RegEnumValue()                
            </javadoc>
            <javadoc line="293">
                Retries RegEnumValueEx() MAX_ATTEMPTS times before giving up.                
            </javadoc>
            <method name="WindowsRegEnumValue1" type="byte[]" line="296">
                <params>
                    <param name="hKey" type="int"/>
                    <param name="valueIndex" type="int"/>
                    <param name="maxValueNameLength" type="int"/>
                </params>
                <declaration name="result" type="byte[]" line="297"/>
                <scope line="298"/>
                <scope line="301">
                    <declaration name="sleepTime" type="long" line="302"/>
                    <scope line="303">
                        <scope line="304"/>
                        <scope line="307"/>
                        <scope line="312"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="319">
                Constructs a &lt;tt&gt;WindowsPreferences&lt;/tt&gt; node, creating underlying
                  Windows registry node and all its Windows parents, if they are not yet
                  created.
                  Logs a warning message, if Windows Registry is unavailable.                
            </javadoc>
            <method name="WindowsPreferences" type="constructor" line="325">
                <params>
                    <param name="parent" type="WindowsPreferences"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="parentNativeHandle" type="int" line="327"/>
                <scope line="328"/>
                <declaration name="result" type="int[]" line="332"/>
                <scope line="333"/>
            </method>
            <javadoc line="342">
                Constructs a root node creating the underlying
                  Windows registry node and all of its parents, if they have not yet been
                  created.
                  Logs a warning message, if Windows Registry is unavailable.                
                <param>
                    rootNativeHandle Native handle to one of Windows top level keys.                    
                </param>
                <param>
                    rootDirectory Path to root directory, as a byte-encoded string.                    
                </param>
            </javadoc>
            <method name="WindowsPreferences" type="constructor" line="350">
                <params>
                    <param name="rootNativeHandle" type="int"/>
                    <param name="rootDirectory" type="byte[]"/>
                </params>
                <declaration name="result" type="int[]" line="352"/>
                <scope line="353"/>
            </method>
            <javadoc line="361">
                Returns Windows absolute path of the current node as a byte array.
                  Java &quot;/&quot; separator is transformed into Windows &quot;\&quot;.                
                <see>
                    Preferences#absolutePath()                    
                </see>
            </javadoc>
            <method name="windowsAbsolutePath" type="byte[]" line="366">
                <declaration name="bstream" type="ByteArrayOutputStream" line="367"/>
                <declaration name="tokenizer" type="StringTokenizer" line="369"/>
                <scope line="370">
                    <declaration name="nextName" type="String" line="372"/>
                    <declaration name="windowsNextName" type="byte[]" line="373"/>
                </scope>
            </method>
            <javadoc line="379">
                Opens current node&apos;s underlying Windows registry key using a
                  given security mask.                
                <param>
                    securityMask Windows security mask.                    
                </param>
                <return>
                    Windows registry key's handle.                    
                </return>
                <see>
                    #openKey(byte[],int)                    
                </see>
                <see>
                    #openKey(int,byte[],int)                    
                </see>
                <see>
                    #closeKey(int)                    
                </see>
            </javadoc>
            <method name="openKey" type="int" line="388">
                <params>
                    <param name="securityMask" type="int"/>
                </params>
            </method>
            <javadoc line="391">
                Opens current node&apos;s underlying Windows registry key using a
                  given security mask.                
                <param>
                    mask1 Preferred Windows security mask.                    
                </param>
                <param>
                    mask2 Alternate Windows security mask.                    
                </param>
                <return>
                    Windows registry key's handle.                    
                </return>
                <see>
                    #openKey(byte[],int)                    
                </see>
                <see>
                    #openKey(int,byte[],int)                    
                </see>
                <see>
                    #closeKey(int)                    
                </see>
            </javadoc>
            <method name="openKey" type="int" line="401">
                <params>
                    <param name="mask1" type="int"/>
                    <param name="mask2" type="int"/>
                </params>
            </method>
            <javadoc line="404">
                Opens Windows registry key at a given absolute path using a given
                  security mask.                
                <param>
                    windowsAbsolutePath Windows absolute path of the
                      key as a byte-encoded string.                    
                </param>
                <param>
                    mask1 Preferred Windows security mask.                    
                </param>
                <param>
                    mask2 Alternate Windows security mask.                    
                </param>
                <return>
                    Windows registry key's handle.                    
                </return>
                <see>
                    #openKey(int)                    
                </see>
                <see>
                    #openKey(int,byte[],int)                    
                </see>
                <see>
                    #closeKey(int)                    
                </see>
            </javadoc>
            <method name="openKey" type="int" line="416">
                <params>
                    <param name="windowsAbsolutePath" type="byte[]"/>
                    <param name="mask1" type="int"/>
                    <param name="mask2" type="int"/>
                </params>
                <scope line="417">
                    <declaration name="result" type="int[]" line="418"/>
                    <scope line="420">
                        <scope line="423"/>
                    </scope>
                </scope>
                <scope line="429"/>
            </method>
            <javadoc line="433">
                Opens Windows registry key at a given relative path
                  with respect to a given Windows registry key.                
                <param>
                    windowsAbsolutePath Windows relative path of the
                      key as a byte-encoded string.                    
                </param>
                <param>
                    nativeHandle handle to the base Windows key.                    
                </param>
                <param>
                    mask1 Preferred Windows security mask.                    
                </param>
                <param>
                    mask2 Alternate Windows security mask.                    
                </param>
                <return>
                    Windows registry key's handle.                    
                </return>
                <see>
                    #openKey(int)                    
                </see>
                <see>
                    #openKey(byte[],int)                    
                </see>
                <see>
                    #closeKey(int)                    
                </see>
            </javadoc>
            <method name="openKey" type="int" line="446">
                <params>
                    <param name="nativeHandle" type="int"/>
                    <param name="windowsRelativePath" type="byte[]"/>
                    <param name="mask1" type="int"/>
                    <param name="mask2" type="int"/>
                </params>
                <scope line="447">
                    <declaration name="result" type="int[]" line="448"/>
                    <scope line="450"/>
                </scope>
                <scope line="456">
                    <declaration name="separatorPosition" type="int" line="457"/>
                    <scope line="458">
                        <scope line="459"/>
                    </scope>
                    <declaration name="nextRelativeRoot" type="byte[]" line="464"/>
                    <declaration name="nextRelativePath" type="byte[]" line="467"/>
                    <declaration name="nextNativeHandle" type="int" line="469"/>
                    <scope line="470"/>
                    <declaration name="result" type="int" line="473"/>
                </scope>
            </method>
            <javadoc line="478">
                Closes Windows registry key.
                  Logs a warning if Windows registry is unavailable.                
                <param>
                    key's Windows registry handle.                    
                </param>
                <see>
                    #openKey(int)                    
                </see>
                <see>
                    #openKey(byte[],int)                    
                </see>
                <see>
                    #openKey(int,byte[],int)                    
                </see>
            </javadoc>
            <method name="closeKey" type="void" line="486">
                <params>
                    <param name="nativeHandle" type="int"/>
                </params>
                <declaration name="result" type="int" line="487"/>
                <scope line="488"/>
            </method>
            <javadoc line="492">
                Implements &lt;tt&gt;AbstractPreferences&lt;/tt&gt; &lt;tt&gt;putSpi()&lt;/tt&gt; method.
                  Puts name-value pair into the underlying Windows registry node.
                  Logs a warning, if Windows registry is unavailable.                
                <see>
                    #getSpi(String)                    
                </see>
            </javadoc>
            <method name="putSpi" type="void" line="498">
                <params>
                    <param name="javaName" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <declaration name="nativeHandle" type="int" line="499"/>
                <scope line="500"/>
                <declaration name="result" type="int" line="504"/>
                <scope line="505"/>
            </method>
            <javadoc line="511">
                Implements &lt;tt&gt;AbstractPreferences&lt;/tt&gt; &lt;tt&gt;getSpi()&lt;/tt&gt; method.
                  Gets a string value from the underlying Windows registry node.
                  Logs a warning, if Windows registry is unavailable.                
                <see>
                    #putSpi(String,String)                    
                </see>
            </javadoc>
            <method name="getSpi" type="String" line="517">
                <params>
                    <param name="javaName" type="String"/>
                </params>
                <declaration name="nativeHandle" type="int" line="518"/>
                <scope line="519"/>
                <declaration name="resultObject" type="Object" line="522"/>
                <scope line="523"/>
            </method>
            <javadoc line="530">
                Implements &lt;tt&gt;AbstractPreferences&lt;/tt&gt; &lt;tt&gt;removeSpi()&lt;/tt&gt; method.
                  Deletes a string name-value pair from the underlying Windows registry
                  node, if this value still exists.
                  Logs a warning, if Windows registry is unavailable or key has already
                  been deleted.                
            </javadoc>
            <method name="removeSpi" type="void" line="537">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="nativeHandle" type="int" line="538"/>
                <scope line="539"/>
                <declaration name="result" type="int" line="542"/>
                <scope line="543"/>
            </method>
            <javadoc line="549">
                Implements &lt;tt&gt;AbstractPreferences&lt;/tt&gt; &lt;tt&gt;keysSpi()&lt;/tt&gt; method.
                  Gets value names from the underlying Windows registry node.
                  Throws a BackingStoreException and logs a warning, if
                  Windows registry is unavailable.                
            </javadoc>
            <method name="keysSpi" type="String[]" line="555">
                <declaration name="nativeHandle" type="int" line="556"/>
                <scope line="557"/>
                <declaration name="result" type="int[]" line="560"/>
                <scope line="561">
                    <declaration name="info" type="String" line="562"/>
                </scope>
                <declaration name="maxValueNameLength" type="int" line="566"/>
                <declaration name="valuesNumber" type="int" line="567"/>
                <scope line="568"/>
                <declaration name="valueNames" type="String[]" line="572"/>
                <scope line="573">
                    <declaration name="windowsName" type="byte[]" line="574"/>
                    <scope line="575">
                        <declaration name="info" type="String" line="576"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="585">
                Implements &lt;tt&gt;AbstractPreferences&lt;/tt&gt; &lt;tt&gt;childrenNamesSpi()&lt;/tt&gt; method.
                  Calls Windows registry to retrive children of this node.
                  Throws a BackingStoreException and logs a warning message,
                  if Windows registry is not available.                
            </javadoc>
            <method name="childrenNamesSpi" type="String[]" line="591">
                <declaration name="nativeHandle" type="int" line="592"/>
                <scope line="593"/>
                <declaration name="result" type="int[]" line="596"/>
                <scope line="597">
                    <declaration name="info" type="String" line="598"/>
                </scope>
                <declaration name="maxKeyLength" type="int" line="602"/>
                <declaration name="subKeysNumber" type="int" line="603"/>
                <scope line="604"/>
                <declaration name="subkeys" type="String[]" line="608"/>
                <declaration name="children" type="String[]" line="609"/>
                <scope line="610">
                    <declaration name="windowsName" type="byte[]" line="611"/>
                    <scope line="612">
                        <declaration name="info" type="String" line="613"/>
                    </scope>
                    <declaration name="javaName" type="String" line="617"/>
                </scope>
            </method>
            <javadoc line="623">
                Implements &lt;tt&gt;Preferences&lt;/tt&gt; &lt;tt&gt;flush()&lt;/tt&gt; method.
                  Flushes Windows registry changes to disk.
                  Throws a BackingStoreException and logs a warning message if Windows
                  registry is not available.                
            </javadoc>
            <method name="flush" type="void" line="629">
                <scope line="630"/>
                <scope line="634"/>
                <declaration name="nativeHandle" type="int" line="637"/>
                <scope line="638"/>
                <declaration name="result" type="int" line="641"/>
                <scope line="642">
                    <declaration name="info" type="String" line="643"/>
                </scope>
            </method>
            <javadoc line="649">
                Implements &lt;tt&gt;Preferences&lt;/tt&gt; &lt;tt&gt;sync()&lt;/tt&gt; method.
                  Flushes Windows registry changes to disk. Equivalent to flush().                
                <see>
                    flush()                    
                </see>
            </javadoc>
            <method name="sync" type="void" line="654"/>
            <javadoc line="658">
                Implements &lt;tt&gt;AbstractPreferences&lt;/tt&gt; &lt;tt&gt;childSpi()&lt;/tt&gt; method.
                  Constructs a child node with a
                  given name and creates its underlying Windows registry node,
                  if it does not exist.
                  Logs a warning message, if Windows Registry is unavailable.                
            </javadoc>
            <method name="childSpi" type="AbstractPreferences" line="665">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="668">
                Implements &lt;tt&gt;AbstractPreferences&lt;/tt&gt; &lt;tt&gt;removeNodeSpi()&lt;/tt&gt; method.
                  Deletes underlying Windows registry node.
                  Throws a BackingStoreException and logs a warning, if Windows registry
                  is not available.                
            </javadoc>
            <method name="removeNodeSpi" type="void" line="674">
                <declaration name="parentNativeHandle" type="int" line="675"/>
                <scope line="676"/>
                <declaration name="result" type="int" line="679"/>
                <scope line="680">
                    <declaration name="info" type="String" line="681"/>
                </scope>
            </method>
            <javadoc line="687">
                Converts value&apos;s or node&apos;s name from its byte array representation to
                  java string. Two encodings, simple and altBase64 are used. See{@link #toWindowsName(String) toWindowsName()} for a detailed
                  description of encoding conventions.                
                <param>
                    windowsNameArray Null-terminated byte array.                    
                </param>
            </javadoc>
            <method name="toJavaName" type="String" line="693">
                <params>
                    <param name="windowsNameArray" type="byte[]"/>
                </params>
                <declaration name="windowsName" type="String" line="694"/>
                <scope line="695"/>
                <declaration name="javaName" type="StringBuffer" line="698"/>
                <declaration name="ch" type="char" line="699"/>
                <scope line="700">
                    <scope line="701">
                        <declaration name="next" type="char" line="702"/>
                        <scope line="703"/>
                        <scope line="707"/>
                    </scope>
                    <scope line="712"/>
                </scope>
            </method>
            <javadoc line="719">
                Converts value&apos;s or node&apos;s name from its Windows representation to java
                  string, using altBase64 encoding. See{@link #toWindowsName(String) toWindowsName()} for a detailed
                  description of encoding conventions.                
            </javadoc>
            <method name="toJavaAlt64Name" type="String" line="724">
                <params>
                    <param name="windowsName" type="String"/>
                </params>
                <declaration name="byteBuffer" type="byte[]" line="725"/>
                <declaration name="result" type="StringBuffer" line="726"/>
                <scope line="727">
                    <declaration name="firstbyte" type="int" line="728"/>
                    <declaration name="secondbyte" type="int" line="729"/>
                </scope>
            </method>
            <javadoc line="734">
                Converts value&apos;s or node&apos;s name to its Windows representation
                  as a byte-encoded string.
                  Two encodings, simple and altBase64 are used.
                  &lt;p&gt;
                  &lt;i&gt;Simple&lt;/i&gt; encoding is used, if java string does not contain
                  any characters less, than 0x0020, or greater, than 0x007f.
                  Simple encoding adds &quot;/&quot; character to capital letters, i.e.
                  &quot;A&quot; is encoded as &quot;/A&quot;. Character &apos;\&apos; is encoded as &apos;//&apos;,
                  &apos;/&apos; is encoded as &apos;\&apos;.
                  The constructed string is converted to byte array by truncating the
                  highest byte and adding the terminating &lt;tt&gt;null&lt;/tt&gt; character.
                  &lt;p&gt;
                  &lt;i&gt;altBase64&lt;/i&gt;  encoding is used, if java string does contain at least
                  one character less, than 0x0020, or greater, than 0x007f.
                  This encoding is marked by setting first two bytes of the
                  Windows string to &apos;/!&apos;. The java name is then encoded using
                  byteArrayToAltBase64() method from
                  Base64 class.                
            </javadoc>
            <method name="toWindowsName" type="byte[]" line="754">
                <params>
                    <param name="javaName" type="String"/>
                </params>
                <declaration name="windowsName" type="StringBuffer" line="755"/>
                <scope line="756">
                    <declaration name="ch" type="char" line="757"/>
                    <scope line="758"/>
                    <scope line="761"/>
                    <scope line="764"/>
                    <scope line="767"/>
                    <scope line="770"/>
                </scope>
            </method>
            <javadoc line="776">
                Converts value&apos;s or node&apos;s name to its Windows representation
                  as a byte-encoded string, using altBase64 encoding. See{@link #toWindowsName(String) toWindowsName()} for a detailed
                  description of encoding conventions.                
            </javadoc>
            <method name="toWindowsAlt64Name" type="byte[]" line="781">
                <params>
                    <param name="javaName" type="String"/>
                </params>
                <declaration name="javaNameArray" type="byte[]" line="782"/>
                <declaration name="counter" type="int" line="783"/>
                <scope line="784">
                    <declaration name="ch" type="int" line="785"/>
                </scope>
            </method>
            <javadoc line="791">
                Converts value string from its Windows representation
                  to java string.  See{@link #toWindowsValueString(String) toWindowsValueString()} for the
                  description of the encoding algorithm.                
            </javadoc>
            <method name="toJavaValueString" type="String" line="796">
                <params>
                    <param name="windowsNameArray" type="byte[]"/>
                </params>
                <declaration name="windowsName" type="String" line="797"/>
                <declaration name="javaName" type="StringBuffer" line="798"/>
                <declaration name="ch" type="char" line="799"/>
                <scope line="800">
                    <scope line="801">
                        <declaration name="next" type="char" line="802"/>
                        <scope line="803">
                            <scope line="804"/>
                            <scope line="807"/>
                        </scope>
                        <scope line="812"/>
                        <scope line="816"/>
                    </scope>
                    <scope line="821"/>
                </scope>
            </method>
            <javadoc line="828">
                Converts value string to it Windows representation.
                  as a byte-encoded string.
                  Encoding algorithm adds &quot;/&quot; character to capital letters, i.e.
                  &quot;A&quot; is encoded as &quot;/A&quot;. Character &apos;\&apos; is encoded as &apos;//&apos;,
                  &apos;/&apos; is encoded as  &apos;\&apos;.
                  Then encoding scheme similar to jdk&apos;s native2ascii converter is used
                  to convert java string to a byte array of ASCII characters.                
            </javadoc>
            <method name="toWindowsValueString" type="byte[]" line="837">
                <params>
                    <param name="javaName" type="String"/>
                </params>
                <declaration name="windowsName" type="StringBuffer" line="838"/>
                <scope line="839">
                    <declaration name="ch" type="char" line="840"/>
                    <scope line="841">
                        <declaration name="hex" type="String" line="843"/>
                        <declaration name="hex4" type="StringBuffer" line="844"/>
                        <declaration name="len" type="int" line="846"/>
                        <scope line="847"/>
                        <scope line="850"/>
                    </scope>
                    <scope line="854"/>
                    <scope line="857"/>
                    <scope line="860"/>
                    <scope line="863"/>
                </scope>
            </method>
            <javadoc line="869">
                Returns native handle for the top Windows node for this node.                
            </javadoc>
            <method name="rootNativeHandle" type="int" line="872"/>
            <javadoc line="875">
                Returns this java string as a null-terminated byte array                
            </javadoc>
            <method name="stringToByteArray" type="byte[]" line="878">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="result" type="byte[]" line="879"/>
                <scope line="880"/>
            </method>
            <javadoc line="886">
                Converts a null-terminated byte array to java string                
            </javadoc>
            <method name="byteArrayToString" type="String" line="889">
                <params>
                    <param name="array" type="byte[]"/>
                </params>
                <declaration name="result" type="StringBuffer" line="890"/>
                <scope line="891"/>
            </method>
            <javadoc line="896">
                Empty, never used implementation  of AbstractPreferences.flushSpi().                
            </javadoc>
            <method name="flushSpi" type="void" line="899"/>
            <javadoc line="901">
                Empty, never used implementation  of AbstractPreferences.flushSpi().                
            </javadoc>
            <method name="syncSpi" type="void" line="904"/>
            <method name="logger" type="PlatformLogger" line="906">
                <scope line="907"/>
            </method>
        </class>
    </source>