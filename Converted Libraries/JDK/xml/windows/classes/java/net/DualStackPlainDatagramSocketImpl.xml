<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.net">
        <import package="java.io.IOException"/>
        <import package="java.io.FileDescriptor"/>
        <import package="sun.misc.SharedSecrets"/>
        <import package="sun.misc.JavaIOFileDescriptorAccess"/>
        <class name="DualStackPlainDatagramSocketImpl" line="32">
            <extends class="AbstractPlainDatagramSocketImpl"/>
            <comment line="196">
                Multicast specific methods.
                 Multicasting on a dual layer TCPIP stack is always done with
                 TwoStacksPlainDatagramSocketImpl. This is to overcome the lack
                 of behavior defined for multicasting over a dual layer socket by the RFC.                
            </comment>
            <comment line="227">
                                
            </comment>
            <comment line="236">
                                
            </comment>
            <javadoc line="32">
                This class defines the plain DatagramSocketImpl that is used on
                  Windows platforms greater than or equal to Windows Vista. These
                  platforms have a dual layer TCP/IP stack and can handle both IPv4
                  and IPV6 through a single file descriptor.
                  &lt;p&gt;
                  Note: Multicasting on a dual layer TCP/IP stack is always done with
                  TwoStacksPlainDatagramSocketImpl. This is to overcome the lack
                  of behavior defined for multicasting over a dual layer socket by the RFC.                
                <author>
                    Chris Hegarty                    
                </author>
            </javadoc>
            <declaration name="fdAccess" type="JavaIOFileDescriptorAccess" line="47"/>
            <method name="datagramSocketCreate" type="void" line="49">
                <comment line="53">
                                        
                </comment>
                <declaration name="newfd" type="int" line="53"/>
            </method>
            <method name="bind0" type="void" line="59">
                <params>
                    <param name="lport" type="int"/>
                    <param name="laddr" type="InetAddress"/>
                </params>
                <declaration name="nativefd" type="int" line="60"/>
                <scope line="66"/>
                <scope line="68"/>
            </method>
            <method name="peek" type="int" line="73">
                <params>
                    <param name="address" type="InetAddress"/>
                </params>
                <comment line="79">
                    Use peekData()                    
                </comment>
                <declaration name="nativefd" type="int" line="74"/>
                <declaration name="peekPacket" type="DatagramPacket" line="80"/>
                <declaration name="peekPort" type="int" line="81"/>
            </method>
            <method name="peekData" type="int" line="86">
                <params>
                    <param name="p" type="DatagramPacket"/>
                </params>
                <comment line="94">
                                        
                </comment>
                <declaration name="nativefd" type="int" line="87"/>
            </method>
            <method name="receive0" type="void" line="97">
                <params>
                    <param name="p" type="DatagramPacket"/>
                </params>
                <comment line="105">
                                        
                </comment>
                <declaration name="nativefd" type="int" line="98"/>
            </method>
            <method name="send" type="void" line="108">
                <params>
                    <param name="p" type="DatagramPacket"/>
                </params>
                <declaration name="nativefd" type="int" line="109"/>
            </method>
            <method name="connect0" type="void" line="121">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="port" type="int"/>
                </params>
                <declaration name="nativefd" type="int" line="122"/>
            </method>
            <method name="disconnect0" type="void" line="130">
                <params>
                    <param name="family" type="int"/>
                </params>
                <comment line="132">
                    disconnect doesn&apos;t throw any exceptions                    
                </comment>
            </method>
            <method name="datagramSocketClose" type="void" line="137">
                <comment line="139">
                    close doesn&apos;t throw any exceptions                    
                </comment>
            </method>
            <method name="socketSetOption" type="void" line="145">
                <params>
                    <param name="opt" type="int"/>
                    <param name="val" type="Object"/>
                </params>
                <comment line="160">
                                        
                </comment>
                <declaration name="nativefd" type="int" line="146"/>
                <declaration name="optionValue" type="int" line="148"/>
            </method>
            <method name="socketGetOption" type="Object" line="167">
                <params>
                    <param name="opt" type="int"/>
                </params>
                <comment line="170">
                    SO_BINDADDR is not a socket option.                    
                </comment>
                <comment line="188">
                                        
                </comment>
                <declaration name="nativefd" type="int" line="168"/>
                <scope line="171"/>
                <declaration name="value" type="int" line="175"/>
                <declaration name="returnValue" type="Object" line="176"/>
            </method>
            <method name="join" type="void" line="201">
                <params>
                    <param name="inetaddr" type="InetAddress"/>
                    <param name="netIf" type="NetworkInterface"/>
                </params>
            </method>
            <method name="leave" type="void" line="206">
                <params>
                    <param name="inetaddr" type="InetAddress"/>
                    <param name="netIf" type="NetworkInterface"/>
                </params>
            </method>
            <method name="setTimeToLive" type="void" line="210">
                <params>
                    <param name="ttl" type="int"/>
                </params>
            </method>
            <method name="getTimeToLive" type="int" line="214"/>
            <method name="setTTL" type="void" line="219">
                <params>
                    <param name="ttl" type="byte"/>
                </params>
            </method>
            <method name="getTTL" type="byte" line="223"/>
            <method name="checkAndReturnNativeFD" type="int" line="228"/>
            <method name="initIDs" type="void" line="237"/>
            <method name="socketCreate" type="int" line="239"/>
            <method name="socketBind" type="void" line="241"/>
            <method name="socketConnect" type="void" line="244"/>
            <method name="socketDisconnect" type="void" line="247"/>
            <method name="socketClose" type="void" line="249"/>
            <method name="socketLocalPort" type="int" line="251"/>
            <method name="socketLocalAddress" type="Object" line="253"/>
            <method name="socketReceiveOrPeekData" type="int" line="255"/>
            <method name="socketSend" type="void" line="258"/>
            <method name="socketSetIntOption" type="void" line="261"/>
            <method name="socketGetIntOption" type="int" line="264"/>
        </class>
    </source>