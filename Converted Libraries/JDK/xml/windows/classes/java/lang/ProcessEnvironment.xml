<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.io"/>
        <import package="java.util"/>
        <class name="ProcessEnvironment" line="69">
            <extends class="HashMap">
                <type_params>
                    <type_param name="String"/>
                    <type_param name="String"/>
                </type_params>
            </extends>
            <comment line="225">
                Allow `=&apos; as first char in name, e.g. =C:=C:\DIR                
            </comment>
            <comment line="266">
                Only for use by System.getenv(String)                
            </comment>
            <comment line="279">
                Only for use by System.getenv()                
            </comment>
            <comment line="284">
                Only for use by ProcessBuilder.environment()                
            </comment>
            <comment line="289">
                Only for use by ProcessBuilder.environment(String[] envp)                
            </comment>
            <comment line="296">
                Only for use by ProcessImpl.start()                
            </comment>
            <comment line="332">
                add the environment variable to the child, if it exists in parent                
            </comment>
            <method name="validateName" type="String" line="71">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="72">
                    An initial `=&apos; indicates a magic Windows variable name -- OK                    
                </comment>
            </method>
            <method name="validateValue" type="String" line="80">
                <params>
                    <param name="value" type="String"/>
                </params>
            </method>
            <method name="nonNullString" type="String" line="87">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <method name="put" type="String" line="93">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <method name="get" type="String" line="97">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <method name="containsKey" type="boolean" line="101">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <method name="containsValue" type="boolean" line="105">
                <params>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <method name="remove" type="String" line="109">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <class name="CheckedEntry" line="113">
                <implements interface="Map.Entry">
                    <type_params>
                        <type_param name="String"/>
                        <type_param name="String"/>
                    </type_params>
                </implements>
                <declaration name="e" type="Map.Entry&lt;String,String&gt;" line="116"/>
                <method name="CheckedEntry" type="constructor" line="117">
                    <params>
                        <param name="e" type="Map.Entry<String,String>"/>
                    </params>
                </method>
                <method name="getKey" type="String" line="118"/>
                <method name="getValue" type="String" line="119"/>
                <method name="setValue" type="String" line="120">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                </method>
                <method name="toString" type="String" line="123"/>
                <method name="equals" type="boolean" line="124">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="hashCode" type="int" line="125"/>
            </class>
            <class name="CheckedEntrySet" line="128">
                <extends class="AbstractSet">
                    <type_params>
                        <type_param name="Map.Entry<String,String>"/>
                    </type_params>
                </extends>
                <declaration name="s" type="Set&lt;Map.Entry&lt;String,String&gt;&gt;" line="131"/>
                <method name="CheckedEntrySet" type="constructor" line="132">
                    <params>
                        <param name="s" type="Set<Map.Entry<String,String>>"/>
                    </params>
                </method>
                <method name="size" type="int" line="133"/>
                <method name="isEmpty" type="boolean" line="134"/>
                <method name="clear" type="void" line="135"/>
                <method name="iterator" type="Iterator<Map.Entry<String,String>>" line="136">
                    <anonymous_class line="137">
                        <declaration name="i" type="Iterator&lt;Map.Entry&lt;String,String&gt;&gt;" line="138"/>
                        <method name="hasNext" type="boolean" line="139"/>
                        <method name="next" type="Map.Entry<String,String>" line="140"/>
                        <method name="remove" type="void" line="143"/>
                    </anonymous_class>
                </method>
                <method name="checkedEntry" type="Map.Entry<String,String>" line="146">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="e" type="Map.Entry&lt;String,String&gt;" line="147"/>
                </method>
                <method name="contains" type="boolean" line="152">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="remove" type="boolean" line="153">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="CheckedValues" line="156">
                <extends class="AbstractCollection">
                    <type_params>
                        <type_param name="String"/>
                    </type_params>
                </extends>
                <declaration name="c" type="Collection&lt;String&gt;" line="157"/>
                <method name="CheckedValues" type="constructor" line="158">
                    <params>
                        <param name="c" type="Collection<String>"/>
                    </params>
                </method>
                <method name="size" type="int" line="159"/>
                <method name="isEmpty" type="boolean" line="160"/>
                <method name="clear" type="void" line="161"/>
                <method name="iterator" type="Iterator<String>" line="162"/>
                <method name="contains" type="boolean" line="163">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="remove" type="boolean" line="164">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="CheckedKeySet" line="167">
                <extends class="AbstractSet">
                    <type_params>
                        <type_param name="String"/>
                    </type_params>
                </extends>
                <declaration name="s" type="Set&lt;String&gt;" line="168"/>
                <method name="CheckedKeySet" type="constructor" line="169">
                    <params>
                        <param name="s" type="Set<String>"/>
                    </params>
                </method>
                <method name="size" type="int" line="170"/>
                <method name="isEmpty" type="boolean" line="171"/>
                <method name="clear" type="void" line="172"/>
                <method name="iterator" type="Iterator<String>" line="173"/>
                <method name="contains" type="boolean" line="174">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="remove" type="boolean" line="175">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
            </class>
            <method name="keySet" type="Set<String>" line="178"/>
            <method name="values" type="Collection<String>" line="182"/>
            <method name="entrySet" type="Set<Map.Entry<String,String>>" line="186"/>
            <class name="NameComparator" line="191">
                <implements interface="Comparator">
                    <type_params>
                        <type_param name="String"/>
                    </type_params>
                </implements>
                <method name="compare" type="int" line="193">
                    <params>
                        <param name="s1" type="String"/>
                        <param name="s2" type="String"/>
                    </params>
                    <comment line="194">
                        We can&apos;t use String.compareToIgnoreCase since it                        
                    </comment>
                    <comment line="195">
                        canonicalizes to lower case, while Windows                        
                    </comment>
                    <comment line="196">
                        canonicalizes to upper case!  For example, &quot;_&quot; should                        
                    </comment>
                    <comment line="197">
                        sort *after* &quot;Z&quot;, not before.                        
                    </comment>
                    <comment line="208">
                        No overflow because of numeric promotion                        
                    </comment>
                    <declaration name="n1" type="int" line="198"/>
                    <declaration name="n2" type="int" line="199"/>
                    <declaration name="min" type="int" line="200"/>
                    <scope line="201">
                        <declaration name="c1" type="char" line="202"/>
                        <declaration name="c2" type="char" line="203"/>
                        <scope line="204"/>
                    </scope>
                </method>
            </class>
            <class name="EntryComparator" line="216">
                <implements interface="Comparator">
                    <type_params>
                        <type_param name="Map.Entry<String,String>"/>
                    </type_params>
                </implements>
                <method name="compare" type="int" line="219">
                    <params>
                        <param name="e1" type="Map.Entry<String,String>"/>
                        <param name="e2" type="Map.Entry<String,String>"/>
                    </params>
                </method>
            </class>
            <declaration name="MIN_NAME_LENGTH" type="int" line="225"/>
            <declaration name="nameComparator" type="NameComparator" line="227"/>
            <declaration name="entryComparator" type="EntryComparator" line="228"/>
            <declaration name="theEnvironment" type="ProcessEnvironment" line="229"/>
            <declaration name="theUnmodifiableEnvironment" type="Map&lt;String,String&gt;" line="230"/>
            <declaration name="theCaseInsensitiveEnvironment" type="Map&lt;String,String&gt;" line="231"/>
            <scope line="233">
                <declaration name="envblock" type="String" line="240"/>
                <declaration name="beg" type="int" line="241"/>
                <scope line="246"/>
            </scope>
            <method name="ProcessEnvironment" type="constructor" line="257"/>
            <method name="ProcessEnvironment" type="constructor" line="261">
                <params>
                    <param name="capacity" type="int"/>
                </params>
            </method>
            <method name="getenv" type="String" line="266">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="267">
                    The original implementation used a native call to _wgetenv,                    
                </comment>
                <comment line="268">
                    but it turns out that _wgetenv is only consistent with                    
                </comment>
                <comment line="269">
                    GetEnvironmentStringsW (for non-ASCII) if `wmain&apos; is used                    
                </comment>
                <comment line="270">
                    instead of `main&apos;, even in a process created using                    
                </comment>
                <comment line="271">
                    CREATE_UNICODE_ENVIRONMENT.  Instead we perform the                    
                </comment>
                <comment line="272">
                    case-insensitive comparison ourselves.  At least this                    
                </comment>
                <comment line="273">
                    guarantees that System.getenv().get(String) will be                    
                </comment>
                <comment line="274">
                    consistent with System.getenv(String).                    
                </comment>
            </method>
            <method name="getenv" type="Map<String,String>" line="279"/>
            <method name="environment" type="Map<String,String>" line="284"/>
            <method name="emptyEnvironment" type="Map<String,String>" line="289">
                <params>
                    <param name="capacity" type="int"/>
                </params>
            </method>
            <method name="environmentBlock" type="String" line="293"/>
            <method name="toEnvironmentBlock" type="String" line="296">
                <comment line="297">
                    Sort Unicode-case-insensitively by name                    
                </comment>
                <comment line="304">
                    Some versions of MSVCRT.DLL require SystemRoot to be set.                    
                </comment>
                <comment line="305">
                    So, we make sure that it is always set, even if not provided                    
                </comment>
                <comment line="306">
                    by the caller.                    
                </comment>
                <comment line="313">
                    Not set, so add it here                    
                </comment>
                <comment line="319">
                    Got to end of list and still not found                    
                </comment>
                <comment line="323">
                    Environment was empty and SystemRoot not set in parent                    
                </comment>
                <comment line="326">
                    Block is double NUL terminated                    
                </comment>
                <declaration name="list" type="List&lt;Map.Entry&lt;String,String&gt;&gt;" line="298"/>
                <declaration name="sb" type="StringBuilder" line="301"/>
                <declaration name="cmp" type="int" line="302"/>
                <declaration name="SYSTEMROOT" type="String" line="307"/>
                <scope line="309">
                    <declaration name="key" type="String" line="310"/>
                    <declaration name="value" type="String" line="311"/>
                    <scope line="312"/>
                </scope>
                <scope line="318"/>
                <scope line="322"/>
            </method>
            <method name="addToEnvIfSet" type="void" line="332">
                <params>
                    <param name="sb" type="StringBuilder"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="s" type="String" line="333"/>
            </method>
            <method name="addToEnv" type="void" line="338">
                <params>
                    <param name="sb" type="StringBuilder"/>
                    <param name="name" type="String"/>
                    <param name="val" type="String"/>
                </params>
            </method>
            <method name="toEnvironmentBlock" type="String" line="342">
                <params>
                    <param name="map" type="Map<String,String>"/>
                </params>
            </method>
        </class>
    </source>