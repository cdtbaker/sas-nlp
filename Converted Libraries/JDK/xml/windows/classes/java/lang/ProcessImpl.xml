<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.io.IOException"/>
        <import package="java.io.File"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.FileDescriptor"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.BufferedOutputStream"/>
        <import package="java.lang.ProcessBuilder.Redirect"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <class name="ProcessImpl" line="48">
            <extends class="Process"/>
            <comment line="82">
                System-dependent portion of ProcessBuilder.start()                
            </comment>
            <declaration name="fdAccess" type="sun.misc.JavaIOFileDescriptorAccess" line="49"/>
            <javadoc line="52">
                Open a file for writing. If {@code append} is {@code true} then the file
                  is opened for atomic append directly and a FileOutputStream constructed
                  with the resulting handle. This is because a FileOutputStream created
                  to append to a file does not open the file in a manner that guarantees
                  that writes by the child process will be atomic.                
            </javadoc>
            <method name="newFileOutputStream" type="FileOutputStream" line="61">
                <params>
                    <param name="f" type="File"/>
                    <param name="append" type="boolean"/>
                </params>
                <scope line="62">
                    <declaration name="sm" type="SecurityManager" line="63"/>
                    <declaration name="handle" type="long" line="66"/>
                    <declaration name="fd" type="FileDescriptor" line="67"/>
                    <anonymous_class line="70">
                        <method name="run" type="FileOutputStream" line="71"/>
                    </anonymous_class>
                </scope>
                <scope line="76"/>
            </method>
            <method name="start" type="Process" line="88">
                <params>
                    <param name="cmdarray" type="String"/>
                    <param name="environment" type="java.util.Map<String,String>"/>
                    <param name="dir" type="String"/>
                    <param name="redirects" type="ProcessBuilder.Redirect[]"/>
                    <param name="redirectErrorStream" type="boolean"/>
                </params>
                <comment line="135">
                    In theory, close() can throw IOException                    
                </comment>
                <comment line="136">
                    (although it is rather unlikely to happen here)                    
                </comment>
                <declaration name="envblock" type="String" line="89"/>
                <declaration name="f0" type="FileInputStream" line="91"/>
                <declaration name="f1" type="FileOutputStream" line="92"/>
                <declaration name="f2" type="FileOutputStream" line="93"/>
                <scope line="95">
                    <declaration name="stdHandles" type="long[]" line="96"/>
                    <scope line="97"/>
                    <scope line="99">
                        <scope line="106"/>
                        <scope line="115"/>
                        <scope line="125"/>
                    </scope>
                </scope>
                <scope line="134">
                    <scope line="137"/>
                    <scope line="138">
                        <scope line="139"/>
                        <scope line="140"/>
                    </scope>
                </scope>
            </method>
            <declaration name="handle" type="long" line="146"/>
            <declaration name="stdin_stream" type="OutputStream" line="147"/>
            <declaration name="stdout_stream" type="InputStream" line="148"/>
            <declaration name="stderr_stream" type="InputStream" line="149"/>
            <method name="ProcessImpl" type="constructor" line="157">
                <params>
                    <param name="cmd" type="String"/>
                    <param name="envblock" type="String"/>
                    <param name="path" type="String"/>
                    <param name="stdHandles" type="long[]"/>
                    <param name="redirectErrorStream" type="boolean"/>
                </params>
                <comment line="158">
                    Win32 CreateProcess requires cmd[0] to be normalized                    
                </comment>
                <comment line="176">
                                        
                </comment>
                <comment line="179">
                                        
                </comment>
                <declaration name="cmdbuf" type="StringBuilder" line="161"/>
                <scope line="162">
                    <scope line="163"/>
                    <declaration name="s" type="String" line="166"/>
                    <scope line="167">
                        <scope line="168">
                            <scope line="171"/>
                        </scope>
                        <scope line="175"/>
                        <scope line="178"/>
                    </scope>
                    <scope line="182"/>
                </scope>
                <declaration name="cmdstr" type="String" line="186"/>
                <anonymous_class line="192">
                    <method name="run" type="Void" line="193">
                        <scope line="196">
                            <declaration name="stdin_fd" type="FileDescriptor" line="197"/>
                        </scope>
                        <scope line="205">
                            <declaration name="stdout_fd" type="FileDescriptor" line="206"/>
                        </scope>
                        <scope line="214">
                            <declaration name="stderr_fd" type="FileDescriptor" line="215"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="getOutputStream" type="OutputStream" line="223"/>
            <method name="getInputStream" type="InputStream" line="227"/>
            <method name="getErrorStream" type="InputStream" line="231"/>
            <method name="finalize" type="void" line="235"/>
            <declaration name="STILL_ACTIVE" type="int" line="239"/>
            <method name="getStillActive" type="int" line="240"/>
            <method name="exitValue" type="int" line="242">
                <declaration name="exitCode" type="int" line="243"/>
            </method>
            <method name="getExitCodeProcess" type="int" line="248"/>
            <method name="waitFor" type="int" line="250"/>
            <method name="waitForInterruptibly" type="void" line="256"/>
            <method name="destroy" type="void" line="258"/>
            <method name="terminateProcess" type="void" line="259"/>
            <method name="create" type="long" line="261"/>
            <javadoc line="261">
                Create a process using the win32 function CreateProcess.                
                <param>
                    cmdstr the Windows commandline                    
                </param>
                <param>
                    envblock NUL-separated, double-NUL-terminated list of
                      environment strings in VAR=VALUE form                    
                </param>
                <param>
                    dir the working directory of the process, or null if
                      inheriting the current directory from the parent process                    
                </param>
                <param>
                    stdHandles array of windows HANDLEs.  Indexes 0, 1, and
                      2 correspond to standard input, standard output and
                      standard error, respectively.  On input, a value of -1
                      means to create a pipe to connect child and parent
                      processes.  On output, a value which is not -1 is the
                      parent pipe handle corresponding to the pipe which has
                      been created.  An element of this array is -1 on input
                      if and only if it is <em>not</em> -1 on output.                    
                </param>
                <param>
                    redirectErrorStream redirectErrorStream attribute                    
                </param>
                <return>
                    the native subprocess HANDLE returned by CreateProcess                    
                </return>
            </javadoc>
            <method name="openForAtomicAppend" type="long" line="287"/>
            <javadoc line="287">
                Opens a file for atomic append. The file is created if it doesn&apos;t
                  already exist.                
                <param>
                    file the file to open or create                    
                </param>
                <return>
                    the native HANDLE                    
                </return>
            </javadoc>
            <method name="closeHandle" type="boolean" line="297"/>
        </class>
    </source>