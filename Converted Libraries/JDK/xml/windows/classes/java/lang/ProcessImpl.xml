<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.io.IOException"/>
        <import package="java.io.File"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.FileDescriptor"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.BufferedOutputStream"/>
        <import package="java.lang.ProcessBuilder.Redirect"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <class name="ProcessImpl" line="14">
            <extends class="Process"/>
            <declaration name="fdAccess" type="sun.misc.JavaIOFileDescriptorAccess" line="15"/>
            <javadoc line="16">
                Open a file for writing. If {@code append} is {@code true} then the file
                  is opened for atomic append directly and a FileOutputStream constructed
                  with the resulting handle. This is because a FileOutputStream created
                  to append to a file does not open the file in a manner that guarantees
                  that writes by the child process will be atomic.                
            </javadoc>
            <method name="newFileOutputStream" type="FileOutputStream" line="23">
                <params>
                    <param name="f" type="File"/>
                    <param name="append" type="boolean"/>
                </params>
                <scope line="24">
                    <declaration name="sm" type="SecurityManager" line="25"/>
                    <declaration name="handle" type="long" line="27"/>
                    <declaration name="fd" type="FileDescriptor" line="28"/>
                    <anonymous_class line="30">
                        <method name="run" type="FileOutputStream" line="31"/>
                    </anonymous_class>
                </scope>
                <scope line="37"/>
            </method>
            <method name="start" type="Process" line="41">
                <params>
                    <param name="cmdarray" type="String"/>
                    <param name="environment" type="java.util.Map<String,String>"/>
                    <param name="dir" type="String"/>
                    <param name="redirects" type="ProcessBuilder.Redirect[]"/>
                    <param name="redirectErrorStream" type="boolean"/>
                </params>
                <declaration name="envblock" type="String" line="42"/>
                <declaration name="f0" type="FileInputStream" line="43"/>
                <declaration name="f1" type="FileOutputStream" line="44"/>
                <declaration name="f2" type="FileOutputStream" line="45"/>
                <scope line="46">
                    <declaration name="stdHandles" type="long[]" line="47"/>
                    <scope line="48"/>
                    <scope line="51">
                        <scope line="55"/>
                        <scope line="61"/>
                        <scope line="67"/>
                    </scope>
                </scope>
                <scope line="74">
                    <scope line="75"/>
                    <scope line="78">
                        <scope line="79"/>
                        <scope line="82"/>
                    </scope>
                </scope>
            </method>
            <declaration name="handle" type="long" line="88"/>
            <declaration name="stdin_stream" type="OutputStream" line="89"/>
            <declaration name="stdout_stream" type="InputStream" line="90"/>
            <declaration name="stderr_stream" type="InputStream" line="91"/>
            <method name="ProcessImpl" type="constructor" line="92">
                <params>
                    <param name="cmd" type="String"/>
                    <param name="envblock" type="String"/>
                    <param name="path" type="String"/>
                    <param name="stdHandles" type="long[]"/>
                    <param name="redirectErrorStream" type="boolean"/>
                </params>
                <declaration name="cmdbuf" type="StringBuilder" line="94"/>
                <scope line="95">
                    <scope line="96"/>
                    <declaration name="s" type="String" line="99"/>
                    <scope line="100">
                        <scope line="101">
                            <scope line="104"/>
                        </scope>
                        <scope line="109"/>
                        <scope line="112"/>
                    </scope>
                    <scope line="116"/>
                </scope>
                <declaration name="cmdstr" type="String" line="120"/>
                <anonymous_class line="122">
                    <method name="run" type="Void" line="123">
                        <scope line="125">
                            <declaration name="stdin_fd" type="FileDescriptor" line="126"/>
                        </scope>
                        <scope line="131">
                            <declaration name="stdout_fd" type="FileDescriptor" line="132"/>
                        </scope>
                        <scope line="137">
                            <declaration name="stderr_fd" type="FileDescriptor" line="138"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="getOutputStream" type="OutputStream" line="147"/>
            <method name="getInputStream" type="InputStream" line="150"/>
            <method name="getErrorStream" type="InputStream" line="153"/>
            <method name="finalize" type="void" line="156"/>
            <declaration name="STILL_ACTIVE" type="int" line="159"/>
            <method name="getStillActive" type="int" line="160"/>
            <method name="exitValue" type="int" line="161">
                <declaration name="exitCode" type="int" line="162"/>
            </method>
            <method name="getExitCodeProcess" type="int" line="166"/>
            <method name="waitFor" type="int" line="167"/>
            <method name="waitForInterruptibly" type="void" line="172"/>
            <method name="destroy" type="void" line="173"/>
            <method name="terminateProcess" type="void" line="176"/>
            <method name="create" type="long" line="177"/>
            <javadoc line="177">
                Create a process using the win32 function CreateProcess.                
                <param>
                    cmdstr the Windows commandline                    
                </param>
                <param>
                    envblock NUL-separated, double-NUL-terminated list of
                      environment strings in VAR=VALUE form                    
                </param>
                <param>
                    dir the working directory of the process, or null if
                      inheriting the current directory from the parent process                    
                </param>
                <param>
                    stdHandles array of windows HANDLEs.  Indexes 0, 1, and
                      2 correspond to standard input, standard output and
                      standard error, respectively.  On input, a value of -1
                      means to create a pipe to connect child and parent
                      processes.  On output, a value which is not -1 is the
                      parent pipe handle corresponding to the pipe which has
                      been created.  An element of this array is -1 on input
                      if and only if it is <em>not</em> -1 on output.                    
                </param>
                <param>
                    redirectErrorStream redirectErrorStream attribute                    
                </param>
                <return>
                    the native subprocess HANDLE returned by CreateProcess                    
                </return>
            </javadoc>
            <method name="openForAtomicAppend" type="long" line="196"/>
            <javadoc line="196">
                Opens a file for atomic append. The file is created if it doesn&apos;t
                  already exist.                
                <param>
                    file the file to open or create                    
                </param>
                <return>
                    the native HANDLE                    
                </return>
            </javadoc>
            <method name="closeHandle" type="boolean" line="203"/>
        </class>
    </source>