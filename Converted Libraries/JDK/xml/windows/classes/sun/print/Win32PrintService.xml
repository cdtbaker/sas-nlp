<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.print">
        <import package="java.io.File"/>
        <import package="java.net.URI"/>
        <import package="java.net.URISyntaxException"/>
        <import package="java.net.URL"/>
        <import package="java.util.Vector"/>
        <import package="java.util.HashMap"/>
        <import package="javax.print.DocFlavor"/>
        <import package="javax.print.DocPrintJob"/>
        <import package="javax.print.PrintService"/>
        <import package="javax.print.ServiceUIFactory"/>
        <import package="javax.print.attribute.Attribute"/>
        <import package="javax.print.attribute.AttributeSet"/>
        <import package="javax.print.attribute.AttributeSetUtilities"/>
        <import package="javax.print.attribute.EnumSyntax"/>
        <import package="javax.print.attribute.HashAttributeSet"/>
        <import package="javax.print.attribute.PrintServiceAttribute"/>
        <import package="javax.print.attribute.PrintServiceAttributeSet"/>
        <import package="javax.print.attribute.HashPrintServiceAttributeSet"/>
        <import package="javax.print.attribute.standard.PrinterName"/>
        <import package="javax.print.attribute.standard.PrinterIsAcceptingJobs"/>
        <import package="javax.print.attribute.standard.QueuedJobCount"/>
        <import package="javax.print.attribute.standard.JobName"/>
        <import package="javax.print.attribute.standard.RequestingUserName"/>
        <import package="javax.print.attribute.standard.Chromaticity"/>
        <import package="javax.print.attribute.standard.Copies"/>
        <import package="javax.print.attribute.standard.CopiesSupported"/>
        <import package="javax.print.attribute.standard.Destination"/>
        <import package="javax.print.attribute.standard.Fidelity"/>
        <import package="javax.print.attribute.standard.Media"/>
        <import package="javax.print.attribute.standard.MediaSizeName"/>
        <import package="javax.print.attribute.standard.MediaSize"/>
        <import package="javax.print.attribute.standard.MediaTray"/>
        <import package="javax.print.attribute.standard.MediaPrintableArea"/>
        <import package="javax.print.attribute.standard.OrientationRequested"/>
        <import package="javax.print.attribute.standard.PageRanges"/>
        <import package="javax.print.attribute.standard.PrinterState"/>
        <import package="javax.print.attribute.standard.PrinterStateReason"/>
        <import package="javax.print.attribute.standard.PrinterStateReasons"/>
        <import package="javax.print.attribute.standard.Severity"/>
        <import package="javax.print.attribute.standard.Sides"/>
        <import package="javax.print.attribute.standard.ColorSupported"/>
        <import package="javax.print.attribute.standard.PrintQuality"/>
        <import package="javax.print.attribute.ResolutionSyntax"/>
        <import package="javax.print.attribute.standard.PrinterResolution"/>
        <import package="javax.print.attribute.standard.SheetCollate"/>
        <import package="javax.print.event.PrintServiceAttributeListener"/>
        <import package="java.util.ArrayList"/>
        <import package="sun.print.SunPrinterJobService"/>
        <class name="Win32PrintService" line="80">
            <comment line="107">
                                
            </comment>
            <comment line="115">
                it turns out to be inconvenient to store the other categories
                  separately because many attributes are in multiple categories.                
            </comment>
            <comment line="135">
                This table together with methods findWin32Media and
                 findMatchingMediaSizeNameMM are declared public as these are also
                 used in WPrinterJob.java.                
            </comment>
            <comment line="174">
                from wingdi.h                
            </comment>
            <comment line="185">
                media sizes with indices above dmPaperToPrintService&apos; length                
            </comment>
            <comment line="191">
                Bit settings for getPrinterCapabilities which matches that                
            </comment>
            <comment line="192">
                of native getCapabilities in WPrinterJob.cpp                
            </comment>
            <comment line="410">
                Gets a list of MediaPrintableAreas using a call to native function.
                  msn is MediaSizeName used to get a specific printable area.  If null,
                  it will get all the supported MediPrintableAreas.                
            </comment>
            <comment line="758">
                NOTE: defaults indices must match those in WPrinterJob.cpp                
            </comment>
            <comment line="1619">
                driver ID for this paper.                
            </comment>
            <implements interface="PrintService"/>
            <implements interface="AttributeUpdater"/>
            <implements interface="SunPrinterJobService"/>
            <declaration name="predefMedia" type="MediaSize[]" line="83"/>
            <scope line="85">
                <declaration name="c" type="Class" line="86"/>
            </scope>
            <declaration name="supportedFlavors" type="DocFlavor[]" line="89"/>
            <declaration name="serviceAttrCats" type="Class[]" line="107"/>
            <declaration name="otherAttrCats" type="Class[]" line="117"/>
            <declaration name="dmPaperToPrintService" type="MediaSizeName[]" line="139"/>
            <declaration name="dmPaperBinToPrintService" type="MediaTray[]" line="164"/>
            <declaration name="DM_PAPERSIZE" type="int" line="174"/>
            <declaration name="DM_PRINTQUALITY" type="int" line="175"/>
            <declaration name="DM_YRESOLUTION" type="int" line="176"/>
            <declaration name="DMRES_MEDIUM" type="int" line="177"/>
            <declaration name="DMRES_HIGH" type="int" line="178"/>
            <declaration name="DMORIENT_LANDSCAPE" type="int" line="179"/>
            <declaration name="DMDUP_VERTICAL" type="int" line="180"/>
            <declaration name="DMDUP_HORIZONTAL" type="int" line="181"/>
            <declaration name="DMCOLLATE_TRUE" type="int" line="182"/>
            <declaration name="DMPAPER_A2" type="int" line="185"/>
            <declaration name="DMPAPER_A6" type="int" line="186"/>
            <declaration name="DMPAPER_B6_JIS" type="int" line="187"/>
            <declaration name="DEVCAP_COLOR" type="int" line="192"/>
            <declaration name="DEVCAP_DUPLEX" type="int" line="193"/>
            <declaration name="DEVCAP_COLLATE" type="int" line="194"/>
            <declaration name="DEVCAP_QUALITY" type="int" line="195"/>
            <declaration name="DEVCAP_POSTSCRIPT" type="int" line="196"/>
            <declaration name="printer" type="String" line="198"/>
            <declaration name="name" type="PrinterName" line="199"/>
            <declaration name="port" type="String" line="200"/>
            <declaration name="lastSet" type="PrintServiceAttributeSet" line="202"/>
            <declaration name="notifier" type="ServiceNotifier" line="203"/>
            <declaration name="mediaSizeNames" type="MediaSizeName[]" line="205"/>
            <declaration name="mediaPrintables" type="MediaPrintableArea[]" line="206"/>
            <declaration name="mediaTrays" type="MediaTray[]" line="207"/>
            <declaration name="printRes" type="PrinterResolution[]" line="208"/>
            <declaration name="mpaMap" type="HashMap" line="209"/>
            <declaration name="nCopies" type="int" line="210"/>
            <declaration name="prnCaps" type="int" line="211"/>
            <declaration name="defaultSettings" type="int[]" line="212"/>
            <declaration name="gotTrays" type="boolean" line="214"/>
            <declaration name="gotCopies" type="boolean" line="215"/>
            <declaration name="mediaInitialized" type="boolean" line="216"/>
            <declaration name="mpaListInitialized" type="boolean" line="217"/>
            <declaration name="idList" type="ArrayList" line="219"/>
            <declaration name="mediaSizes" type="MediaSize[]" line="220"/>
            <declaration name="isInvalid" type="boolean" line="222"/>
            <method name="Win32PrintService" type="constructor" line="224">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="230">
                    initialize flags                    
                </comment>
                <scope line="225"/>
            </method>
            <method name="invalidateService" type="void" line="241"/>
            <method name="getName" type="String" line="245"/>
            <method name="getPrinterName" type="PrinterName" line="249">
                <scope line="250"/>
            </method>
            <method name="findPaperID" type="int" line="256">
                <params>
                    <param name="msn" type="MediaSizeName"/>
                </params>
                <comment line="263">
                    DMPAPER_LETTER == 1                    
                </comment>
                <comment line="277">
                    If not found in predefined Windows ID, then we search through                    
                </comment>
                <comment line="278">
                    the returned IDs of the driver because they can define their own                    
                </comment>
                <comment line="279">
                    unique IDs.                    
                </comment>
                <scope line="257">
                    <declaration name="winMedia" type="Win32MediaSize" line="258"/>
                </scope>
                <scope line="260">
                    <scope line="261">
                        <scope line="262"/>
                    </scope>
                    <scope line="266"/>
                    <scope line="269"/>
                    <scope line="272"/>
                </scope>
                <scope line="283">
                    <scope line="284">
                        <scope line="285"/>
                    </scope>
                </scope>
            </method>
            <method name="findMediaTray" type="MediaTray" line="293">
                <params>
                    <param name="dmBin" type="int"/>
                </params>
                <scope line="294"/>
                <declaration name="trays" type="MediaTray[]" line="297"/>
                <scope line="298">
                    <scope line="299">
                        <scope line="300">
                            <declaration name="win32Tray" type="Win32MediaTray" line="301"/>
                            <scope line="302"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="findWin32Media" type="MediaSizeName" line="311">
                <params>
                    <param name="dmIndex" type="int"/>
                </params>
                <comment line="314">
                    matching media sizes with indices beyond                    
                </comment>
                <scope line="312"/>
            </method>
            <method name="addToUniqueList" type="boolean" line="330">
                <params>
                    <param name="msnList" type="ArrayList"/>
                    <param name="mediaName" type="MediaSizeName"/>
                </params>
                <declaration name="msn" type="MediaSizeName" line="331"/>
                <scope line="332">
                    <scope line="334"/>
                </scope>
            </method>
            <method name="initMedia" type="void" line="342">
                <comment line="359">
                    Get all mediaSizes supported by the printer.                    
                </comment>
                <comment line="360">
                    We convert media to ArrayList idList and pass this to the                    
                </comment>
                <comment line="361">
                    function for getting mediaSizes.                    
                </comment>
                <comment line="362">
                    This is to ensure that mediaSizes and media IDs have 1-1 correspondence.                    
                </comment>
                <comment line="363">
                    We remove from ID list any invalid mediaSize.  Though this is rare,                    
                </comment>
                <comment line="364">
                    it happens in HP 4050 German driver.                    
                </comment>
                <comment line="374">
                    match Win ID with our predefined ID using table                    
                </comment>
                <comment line="376">
                    Verify that this standard size is the same size as that                    
                </comment>
                <comment line="377">
                    reported by the driver. This should be the case except when                    
                </comment>
                <comment line="378">
                    the driver is mis-using a standard windows paper ID.                    
                </comment>
                <comment line="383">
                    == 1/10&quot;                    
                </comment>
                <comment line="391">
                    No match found, then we get the MediaSizeName out of the MediaSize                    
                </comment>
                <comment line="392">
                    This requires 1-1 correspondence, lengths must be checked.                    
                </comment>
                <comment line="397">
                    Add mediaName to the msnList                    
                </comment>
                <comment line="403">
                    init mediaSizeNames                    
                </comment>
                <scope line="343"/>
                <declaration name="media" type="int[]" line="347"/>
                <scope line="348"/>
                <declaration name="msnList" type="ArrayList" line="352"/>
                <declaration name="printableList" type="ArrayList" line="353"/>
                <declaration name="mediaName" type="MediaSizeName" line="354"/>
                <declaration name="added" type="boolean" line="355"/>
                <declaration name="queryFailure" type="boolean" line="356"/>
                <declaration name="prnArea" type="float[]" line="357"/>
                <scope line="367"/>
                <scope line="372">
                    <scope line="380">
                        <declaration name="win32Size" type="MediaSize" line="381"/>
                        <declaration name="driverSize" type="MediaSize" line="382"/>
                        <declaration name="error" type="int" line="383"/>
                        <scope line="386"/>
                    </scope>
                    <scope line="393"/>
                    <scope line="398"/>
                </scope>
            </method>
            <method name="getMediaPrintables" type="MediaPrintableArea[]" line="415">
                <params>
                    <param name="msn" type="MediaSizeName"/>
                </params>
                <comment line="421">
                    get from cached mapping of MPAs                    
                </comment>
                <comment line="471">
                    if getting  MPA failed, we use MediaSize                    
                </comment>
                <comment line="486">
                    mediaName != null                    
                </comment>
                <comment line="498">
                    by this time, we&apos;ve already gotten the desired MPA                    
                </comment>
                <scope line="416">
                    <scope line="417"/>
                </scope>
                <scope line="420">
                    <scope line="422">
                        <declaration name="mpaArr" type="MediaPrintableArea[]" line="423"/>
                    </scope>
                </scope>
                <scope line="431"/>
                <declaration name="loopNames" type="MediaSizeName[]" line="435"/>
                <scope line="436"/>
                <scope line="439"/>
                <scope line="443"/>
                <scope line="447">
                    <declaration name="mediaName" type="MediaSizeName" line="448"/>
                    <scope line="450"/>
                    <scope line="454">
                        <declaration name="defPaper" type="int" line="455"/>
                        <declaration name="prnArea" type="float[]" line="456"/>
                        <declaration name="printableArea" type="MediaPrintableArea" line="457"/>
                        <scope line="458">
                            <scope line="459"/>
                            <scope line="468"/>
                        </scope>
                        <scope line="470">
                            <declaration name="ms" type="MediaSize" line="472"/>
                            <scope line="475">
                                <scope line="476"/>
                                <scope line="482"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="489"/>
                <scope line="493">
                    <scope line="494"/>
                    <declaration name="mpaArr" type="MediaPrintableArea[]" line="497"/>
                </scope>
                <scope line="501"/>
            </method>
            <method name="getMediaTrays" type="MediaTray[]" line="509">
                <comment line="521">
                    first count how many valid bins there are so we can allocate
                     an array of the correct size                    
                </comment>
                <comment line="532">
                    Some drivers in Win 7 don&apos;t have the same length for DC_BINS and
                     DC_BINNAMES so there is no guarantee that lengths of mediaTr and
                     winMediaTrayNames are equal. To avoid getting ArrayIndexOutOfBounds,
                     we need to make sure we get the minimum of the two.                    
                </comment>
                <comment line="541">
                    check for unsupported DMBINs and create new Win32MediaTray                    
                </comment>
                <comment line="549">
                    no else - For invalid ids, just ignore it because assigning a &quot;default&quot;                    
                </comment>
                <comment line="550">
                    value may result in duplicate trays.                    
                </comment>
                <scope line="510"/>
                <declaration name="prnPort" type="String" line="513"/>
                <declaration name="mediaTr" type="int[]" line="514"/>
                <declaration name="winMediaTrayNames" type="String[]" line="515"/>
                <scope line="517"/>
                <declaration name="nTray" type="int" line="524"/>
                <scope line="525"/>
                <declaration name="arr" type="MediaTray[]" line="529"/>
                <declaration name="dmBin" type="int" line="530"/>
                <scope line="538">
                    <scope line="540">
                        <scope line="543"/>
                        <scope line="545"/>
                    </scope>
                </scope>
            </method>
            <method name="isSameSize" type="boolean" line="557">
                <params>
                    <param name="w1" type="float"/>
                    <param name="h1" type="float"/>
                    <param name="w2" type="float"/>
                    <param name="h2" type="float"/>
                </params>
                <comment line="560">
                    Get diff of reverse dimensions                    
                </comment>
                <comment line="561">
                    EPSON Stylus COLOR 860 reverses envelope&apos;s width &amp; height                    
                </comment>
                <declaration name="diffX" type="float" line="558"/>
                <declaration name="diffY" type="float" line="559"/>
                <declaration name="diffXrev" type="float" line="562"/>
                <declaration name="diffYrev" type="float" line="563"/>
                <scope line="566"/>
                <scope line="568"/>
            </method>
            <method name="findMatchingMediaSizeNameMM" type="MediaSizeName" line="573">
                <params>
                    <param name="w" type="float"/>
                    <param name="h" type="float"/>
                </params>
                <scope line="574">
                    <scope line="575">
                        <scope line="576"/>
                        <scope line="582"/>
                    </scope>
                </scope>
            </method>
            <method name="getMediaSizes" type="MediaSize[]" line="591">
                <params>
                    <param name="idList" type="ArrayList"/>
                    <param name="media" type="int[]"/>
                </params>
                <comment line="610">
                    Make sure to validate wid &amp; ht.                    
                </comment>
                <comment line="611">
                    HP LJ 4050 (german) causes IAE in Sonderformat paper, wid &amp; ht                    
                </comment>
                <comment line="612">
                    returned is not constant.                    
                </comment>
                <comment line="614">
                    Remove corresponding ID from list                    
                </comment>
                <comment line="621">
                    Find matching media using dimensions.                    
                </comment>
                <comment line="622">
                    This call matches only with our own predefined sizes.                    
                </comment>
                <declaration name="prnPort" type="String" line="592"/>
                <declaration name="mediaSz" type="int[]" line="593"/>
                <declaration name="winMediaNames" type="String[]" line="594"/>
                <declaration name="msn" type="MediaSizeName" line="595"/>
                <declaration name="ms" type="MediaSize" line="596"/>
                <declaration name="wid" type="float" line="597"/>
                <scope line="599"/>
                <declaration name="nMedia" type="int" line="603"/>
                <declaration name="msList" type="ArrayList" line="604"/>
                <scope line="606">
                    <scope line="613">
                        <scope line="615">
                            <declaration name="remObj" type="Integer" line="616"/>
                        </scope>
                    </scope>
                    <scope line="624"/>
                    <scope line="628"/>
                    <scope line="630">
                        <declaration name="wms" type="Win32MediaSize" line="631"/>
                        <scope line="633"/>
                        <scope line="636">
                            <scope line="637">
                                <declaration name="remObj" type="Integer" line="638"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <declaration name="arr2" type="MediaSize[]" line="646"/>
            </method>
            <method name="getPrinterIsAcceptingJobs" type="PrinterIsAcceptingJobs" line="653">
                <scope line="654"/>
                <scope line="657"/>
            </method>
            <method name="getPrinterState" type="PrinterState" line="662">
                <scope line="663"/>
                <scope line="665"/>
            </method>
            <method name="getPrinterStateReasons" type="PrinterStateReasons" line="670">
                <scope line="671">
                    <declaration name="psr" type="PrinterStateReasons" line="672"/>
                </scope>
                <scope line="675"/>
            </method>
            <method name="getQueuedJobCount" type="QueuedJobCount" line="680">
                <declaration name="count" type="int" line="682"/>
                <scope line="683"/>
                <scope line="686"/>
            </method>
            <method name="isSupportedCopies" type="boolean" line="691">
                <params>
                    <param name="copies" type="Copies"/>
                </params>
                <scope line="692">
                    <scope line="693"/>
                </scope>
                <declaration name="numCopies" type="int" line="698"/>
            </method>
            <method name="isSupportedMedia" type="boolean" line="702">
                <params>
                    <param name="msn" type="MediaSizeName"/>
                </params>
                <scope line="706">
                    <scope line="707">
                        <scope line="708"/>
                    </scope>
                </scope>
            </method>
            <method name="isSupportedMediaPrintableArea" type="boolean" line="716">
                <params>
                    <param name="mpa" type="MediaPrintableArea"/>
                </params>
                <scope line="720">
                    <scope line="721">
                        <scope line="722"/>
                    </scope>
                </scope>
            </method>
            <method name="isSupportedMediaTray" type="boolean" line="730">
                <params>
                    <param name="msn" type="MediaTray"/>
                </params>
                <declaration name="trays" type="MediaTray[]" line="731"/>
                <scope line="733">
                    <scope line="734">
                        <scope line="735"/>
                    </scope>
                </scope>
            </method>
            <method name="getPrinterCapabilities" type="int" line="743">
                <scope line="744"/>
            </method>
            <method name="getPort" type="String" line="750">
                <scope line="751"/>
            </method>
            <method name="getDefaultPrinterSettings" type="int[]" line="760">
                <scope line="761"/>
            </method>
            <method name="getPrintResolutions" type="PrinterResolution[]" line="767">
                <scope line="768">
                    <declaration name="prnRes" type="int[]" line="769"/>
                    <scope line="770"/>
                    <scope line="772">
                        <declaration name="nRes" type="int" line="773"/>
                        <declaration name="arrList" type="ArrayList" line="775"/>
                        <declaration name="pr" type="PrinterResolution" line="776"/>
                        <scope line="778">
                            <scope line="779"/>
                            <scope line="783"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="isSupportedResolution" type="boolean" line="794">
                <params>
                    <param name="res" type="PrinterResolution"/>
                </params>
                <declaration name="supportedRes" type="PrinterResolution[]" line="795"/>
                <scope line="796">
                    <scope line="797">
                        <scope line="798"/>
                    </scope>
                </scope>
            </method>
            <method name="createPrintJob" type="DocPrintJob" line="806">
                <declaration name="security" type="SecurityManager" line="807"/>
                <scope line="808"/>
            </method>
            <method name="getDynamicAttributes" type="PrintServiceAttributeSet" line="814">
                <declaration name="attrs" type="PrintServiceAttributeSet" line="815"/>
            </method>
            <method name="getUpdatedAttributes" type="PrintServiceAttributeSet" line="821">
                <declaration name="currSet" type="PrintServiceAttributeSet" line="822"/>
                <scope line="823"/>
                <scope line="826">
                    <declaration name="updates" type="PrintServiceAttributeSet" line="827"/>
                    <declaration name="attrs" type="Attribute[]" line="829"/>
                    <scope line="830">
                        <declaration name="attr" type="Attribute" line="831"/>
                        <scope line="832"/>
                    </scope>
                </scope>
            </method>
            <method name="wakeNotifier" type="void" line="841">
                <scope line="842">
                    <scope line="843"/>
                </scope>
            </method>
            <method name="addPrintServiceAttributeListener" type="void" line="850">
                <params>
                    <param name="listener" type="PrintServiceAttributeListener"/>
                </params>
                <scope line="851">
                    <scope line="852"/>
                    <scope line="855"/>
                </scope>
            </method>
            <method name="removePrintServiceAttributeListener" type="void" line="863">
                <params>
                    <param name="listener" type="PrintServiceAttributeListener"/>
                </params>
                <scope line="864">
                    <scope line="865"/>
                    <scope line="869"/>
                </scope>
            </method>
            <method name="getAttribute" type="T" line="878">
                <params>
                    <param name="category" type="Class<T>"/>
                </params>
                <scope line="879"/>
                <scope line="882"/>
                <scope line="885">
                    <declaration name="caps" type="int" line="886"/>
                    <scope line="887"/>
                    <scope line="889"/>
                </scope>
                <scope line="892"/>
                <scope line="894"/>
                <scope line="896"/>
                <scope line="898"/>
                <scope line="900"/>
                <scope line="902"/>
            </method>
            <method name="getAttributes" type="PrintServiceAttributeSet" line="907">
                <declaration name="attrs" type="PrintServiceAttributeSet" line="909"/>
                <declaration name="prnState" type="PrinterState" line="912"/>
                <scope line="913"/>
                <declaration name="prnStateReasons" type="PrinterStateReasons" line="916"/>
                <scope line="917"/>
                <declaration name="caps" type="int" line="921"/>
                <scope line="922"/>
                <scope line="924"/>
            </method>
            <method name="getSupportedDocFlavors" type="DocFlavor[]" line="931">
                <comment line="935">
                    doc flavors supported                    
                </comment>
                <comment line="936">
                    if PostScript is supported                    
                </comment>
                <declaration name="len" type="int" line="932"/>
                <declaration name="supportedDocFlavors" type="DocFlavor[]" line="933"/>
                <declaration name="caps" type="int" line="934"/>
                <scope line="937"/>
                <scope line="943"/>
            </method>
            <method name="isDocFlavorSupported" type="boolean" line="950">
                <params>
                    <param name="flavor" type="DocFlavor"/>
                </params>
                <comment line="951">
                    To avoid a native query which may be time-consuming
                     do not invoke native unless postscript support is being queried.
                     Instead just check the ones we &apos;always&apos; support                    
                </comment>
                <declaration name="supportedDocFlavors" type="DocFlavor[]" line="955"/>
                <scope line="956"/>
                <scope line="958"/>
                <scope line="961">
                    <scope line="962"/>
                </scope>
            </method>
            <method name="getSupportedAttributeCategories" type="Class<?>[]" line="969">
                <comment line="983">
                    Added check: if supported, we should be able to get the default.                    
                </comment>
                <declaration name="categList" type="ArrayList" line="970"/>
                <scope line="971"/>
                <declaration name="caps" type="int" line="975"/>
                <scope line="977"/>
                <scope line="981">
                    <declaration name="defaults" type="int[]" line="982"/>
                    <scope line="984"/>
                </scope>
                <declaration name="supportedRes" type="PrinterResolution[]" line="989"/>
                <scope line="990"/>
            </method>
            <method name="isAttributeCategorySupported" type="boolean" line="999">
                <params>
                    <param name="category" type="Class<? extends Attribute>"/>
                </params>
                <scope line="1001"/>
                <scope line="1005"/>
                <declaration name="classList" type="Class[]" line="1010"/>
                <scope line="1011">
                    <scope line="1012"/>
                </scope>
            </method>
            <method name="getDefaultAttributeValue" type="Object" line="1022">
                <params>
                    <param name="category" type="Class<? extends Attribute>"/>
                </params>
                <comment line="1036">
                    indices must match those in WPrinterJob.cpp                    
                </comment>
                <comment line="1079">
                    if &apos;mediaSizeNames&apos; is not null, idList and mediaSizes                    
                </comment>
                <comment line="1080">
                    cannot be null but to be safe, add a check                    
                </comment>
                <comment line="1094">
                                        
                </comment>
                <scope line="1023"/>
                <scope line="1026"/>
                <scope line="1031"/>
                <declaration name="defaults" type="int[]" line="1035"/>
                <declaration name="defPaper" type="int" line="1037"/>
                <declaration name="defYRes" type="int" line="1038"/>
                <declaration name="defQuality" type="int" line="1039"/>
                <declaration name="defCopies" type="int" line="1040"/>
                <declaration name="defOrient" type="int" line="1041"/>
                <declaration name="defSides" type="int" line="1042"/>
                <declaration name="defCollate" type="int" line="1043"/>
                <scope line="1045">
                    <scope line="1046"/>
                    <scope line="1048"/>
                </scope>
                <scope line="1051">
                    <declaration name="caps" type="int" line="1052"/>
                    <scope line="1053"/>
                    <scope line="1055"/>
                </scope>
                <scope line="1058"/>
                <scope line="1060">
                    <scope line="1061"/>
                    <scope line="1063"/>
                </scope>
                <scope line="1066"/>
                <scope line="1068">
                    <declaration name="msn" type="MediaSizeName" line="1069"/>
                    <scope line="1070">
                        <scope line="1071"/>
                    </scope>
                    <scope line="1076">
                        <scope line="1078">
                            <scope line="1082">
                                <declaration name="defIdObj" type="Integer" line="1083"/>
                                <declaration name="index" type="int" line="1084"/>
                                <scope line="1085"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="1093">
                    <declaration name="msn" type="MediaSizeName" line="1095"/>
                    <scope line="1097"/>
                    <declaration name="prnArea" type="float[]" line="1100"/>
                    <scope line="1101">
                        <declaration name="printableArea" type="MediaPrintableArea" line="1102"/>
                        <scope line="1103"/>
                        <scope line="1109"/>
                    </scope>
                </scope>
                <scope line="1114"/>
                <scope line="1116">
                    <scope line="1117"/>
                    <scope line="1119">
                        <scope line="1120"/>
                        <scope line="1122"/>
                    </scope>
                </scope>
                <scope line="1126"/>
                <scope line="1135">
                    <declaration name="yRes" type="int" line="1136"/>
                    <declaration name="xRes" type="int" line="1137"/>
                    <scope line="1138">
                        <declaration name="res" type="int" line="1139"/>
                        <scope line="1140"/>
                    </scope>
                    <scope line="1144"/>
                </scope>
                <scope line="1147">
                    <declaration name="caps" type="int" line="1148"/>
                    <scope line="1149"/>
                    <scope line="1151"/>
                </scope>
                <scope line="1154">
                    <scope line="1155"/>
                </scope>
                <scope line="1165">
                    <declaration name="userName" type="String" line="1166"/>
                    <scope line="1167"/>
                    <scope line="1169"/>
                </scope>
                <scope line="1172">
                    <scope line="1173"/>
                    <scope line="1175"/>
                </scope>
                <scope line="1178"/>
            </method>
            <method name="isPostScriptFlavor" type="boolean" line="1184">
                <params>
                    <param name="flavor" type="DocFlavor"/>
                </params>
                <scope line="1187"/>
                <scope line="1190"/>
            </method>
            <method name="isPSDocAttr" type="boolean" line="1195">
                <params>
                    <param name="category" type="Class"/>
                </params>
                <scope line="1196"/>
                <scope line="1199"/>
            </method>
            <method name="isAutoSense" type="boolean" line="1204">
                <params>
                    <param name="flavor" type="DocFlavor"/>
                </params>
                <scope line="1207"/>
                <scope line="1210"/>
            </method>
            <method name="getSupportedAttributeValues" type="Object" line="1219">
                <params>
                    <param name="category" type="Class<? extends Attribute>"/>
                    <param name="flavor" type="DocFlavor"/>
                    <param name="attributes" type="AttributeSet"/>
                </params>
                <comment line="1231">
                    if postscript &amp; category is already specified within the                    
                </comment>
                <comment line="1232">
                    PostScript data we return null                    
                </comment>
                <comment line="1346">
                    if getting printable area for a specific media size                    
                </comment>
                <comment line="1353">
                    if an instance of MediaTray, fall thru returning                    
                </comment>
                <comment line="1354">
                    all MediaPrintableAreas                    
                </comment>
                <scope line="1220"/>
                <scope line="1223"/>
                <scope line="1227">
                    <scope line="1228"/>
                    <scope line="1234"/>
                </scope>
                <scope line="1238"/>
                <scope line="1242"/>
                <scope line="1244">
                    <declaration name="userName" type="String" line="1245"/>
                    <scope line="1246"/>
                    <scope line="1248"/>
                </scope>
                <scope line="1251">
                    <declaration name="caps" type="int" line="1252"/>
                    <scope line="1253"/>
                    <scope line="1255"/>
                </scope>
                <scope line="1258">
                    <scope line="1270">
                        <declaration name="caps" type="int" line="1271"/>
                        <scope line="1272">
                            <declaration name="arr" type="Chromaticity[]" line="1273"/>
                        </scope>
                        <scope line="1276">
                            <declaration name="arr" type="Chromaticity[]" line="1277"/>
                        </scope>
                    </scope>
                    <scope line="1282"/>
                </scope>
                <scope line="1285">
                    <scope line="1286"/>
                    <scope line="1288">
                        <scope line="1289"/>
                        <scope line="1291"/>
                    </scope>
                </scope>
                <scope line="1295">
                    <scope line="1307">
                        <declaration name="arr" type="OrientationRequested[]" line="1308"/>
                    </scope>
                    <scope line="1313"/>
                </scope>
                <scope line="1317">
                    <scope line="1318">
                        <scope line="1319"/>
                    </scope>
                </scope>
                <scope line="1325">
                    <declaration name="len" type="int" line="1329"/>
                    <declaration name="trays" type="MediaTray[]" line="1331"/>
                    <declaration name="arr" type="Media[]" line="1335"/>
                    <scope line="1336"/>
                    <scope line="1340"/>
                </scope>
                <scope line="1345">
                    <declaration name="mediaName" type="Media" line="1347"/>
                    <scope line="1350">
                        <scope line="1352"/>
                    </scope>
                    <declaration name="mpas" type="MediaPrintableArea[]" line="1359"/>
                    <scope line="1361">
                        <declaration name="arr" type="MediaPrintableArea[]" line="1362"/>
                    </scope>
                    <scope line="1365"/>
                </scope>
                <scope line="1368"/>
                <scope line="1371">
                    <scope line="1374">
                        <declaration name="arr" type="PageRanges[]" line="1375"/>
                    </scope>
                    <scope line="1378"/>
                </scope>
                <scope line="1381">
                    <declaration name="supportedRes" type="PrinterResolution[]" line="1382"/>
                    <scope line="1383"/>
                    <declaration name="arr" type="PrinterResolution[]" line="1386"/>
                </scope>
                <scope line="1390">
                    <scope line="1393">
                        <declaration name="arr" type="Sides[]" line="1394"/>
                    </scope>
                    <scope line="1399"/>
                </scope>
                <scope line="1402">
                    <declaration name="arr" type="PrintQuality[]" line="1403"/>
                </scope>
                <scope line="1408">
                    <scope line="1411">
                        <declaration name="arr" type="SheetCollate[]" line="1412"/>
                    </scope>
                    <scope line="1416"/>
                </scope>
                <scope line="1419">
                    <declaration name="arr" type="Fidelity[]" line="1420"/>
                </scope>
                <scope line="1424"/>
            </method>
            <method name="isAttributeValueSupported" type="boolean" line="1431">
                <params>
                    <param name="attr" type="Attribute"/>
                    <param name="flavor" type="DocFlavor"/>
                    <param name="attributes" type="AttributeSet"/>
                </params>
                <comment line="1441">
                    if postscript &amp; category is already specified within the PostScript data                    
                </comment>
                <comment line="1442">
                    we return false                    
                </comment>
                <scope line="1433"/>
                <declaration name="category" type="Class" line="1436"/>
                <scope line="1437">
                    <scope line="1438"/>
                    <scope line="1444"/>
                </scope>
                <scope line="1449"/>
                <scope line="1452">
                    <scope line="1464">
                        <declaration name="caps" type="int" line="1465"/>
                        <scope line="1466"/>
                        <scope line="1468"/>
                    </scope>
                    <scope line="1471"/>
                </scope>
                <scope line="1474"/>
                <scope line="1477">
                    <declaration name="uri" type="URI" line="1478"/>
                    <scope line="1480"/>
                    <scope line="1482"/>
                </scope>
                <scope line="1486">
                    <scope line="1487"/>
                    <scope line="1490"/>
                </scope>
                <scope line="1494"/>
                <scope line="1497">
                    <declaration name="media" type="Media" line="1498"/>
                </scope>
                <scope line="1503">
                    <scope line="1506"/>
                </scope>
                <scope line="1509">
                    <scope line="1510"/>
                </scope>
                <scope line="1513">
                    <scope line="1526"/>
                </scope>
                <scope line="1530">
                    <declaration name="caps" type="int" line="1531"/>
                    <declaration name="isColorSup" type="boolean" line="1532"/>
                    <scope line="1534"/>
                </scope>
            </method>
            <method name="getUnsupportedAttributes" type="AttributeSet" line="1542">
                <params>
                    <param name="flavor" type="DocFlavor"/>
                    <param name="attributes" type="AttributeSet"/>
                </params>
                <scope line="1544"/>
                <scope line="1549"/>
                <declaration name="attr" type="Attribute" line="1553"/>
                <declaration name="unsupp" type="AttributeSet" line="1554"/>
                <declaration name="attrs" type="Attribute[]" line="1555"/>
                <scope line="1556">
                    <scope line="1557">
                        <scope line="1559"/>
                        <scope line="1562"/>
                    </scope>
                    <scope line="1565"/>
                </scope>
                <scope line="1568"/>
                <scope line="1570"/>
            </method>
            <method name="getServiceUIFactory" type="ServiceUIFactory" line="1575"/>
            <method name="toString" type="String" line="1579"/>
            <method name="equals" type="boolean" line="1583">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="hashCode" type="int" line="1589"/>
            <method name="usesClass" type="boolean" line="1593">
                <params>
                    <param name="c" type="Class"/>
                </params>
            </method>
            <method name="getAllMediaIDs" type="int[]" line="1597"/>
            <method name="getAllMediaSizes" type="int[]" line="1598"/>
            <method name="getAllMediaTrays" type="int[]" line="1599"/>
            <method name="getMediaPrintableArea" type="float[]" line="1600"/>
            <method name="getAllMediaNames" type="String[]" line="1602"/>
            <method name="getAllMediaTrayNames" type="String[]" line="1603"/>
            <method name="getCopiesSupported" type="int" line="1604"/>
            <method name="getAllResolutions" type="int[]" line="1605"/>
            <method name="getCapabilities" type="int" line="1606"/>
            <method name="getDefaultSettings" type="int[]" line="1608"/>
            <method name="getJobStatus" type="int" line="1609"/>
            <method name="getPrinterPort" type="String" line="1610"/>
        </class>
        <class name="Win32MediaSize" line="1614">
            <extends class="MediaSizeName"/>
            <comment line="107">
                                
            </comment>
            <comment line="115">
                it turns out to be inconvenient to store the other categories
                  separately because many attributes are in multiple categories.                
            </comment>
            <comment line="135">
                This table together with methods findWin32Media and
                 findMatchingMediaSizeNameMM are declared public as these are also
                 used in WPrinterJob.java.                
            </comment>
            <comment line="174">
                from wingdi.h                
            </comment>
            <comment line="185">
                media sizes with indices above dmPaperToPrintService&apos; length                
            </comment>
            <comment line="191">
                Bit settings for getPrinterCapabilities which matches that                
            </comment>
            <comment line="192">
                of native getCapabilities in WPrinterJob.cpp                
            </comment>
            <comment line="410">
                Gets a list of MediaPrintableAreas using a call to native function.
                  msn is MediaSizeName used to get a specific printable area.  If null,
                  it will get all the supported MediPrintableAreas.                
            </comment>
            <comment line="758">
                NOTE: defaults indices must match those in WPrinterJob.cpp                
            </comment>
            <comment line="1619">
                driver ID for this paper.                
            </comment>
            <declaration name="winStringTable" type="ArrayList" line="1615"/>
            <declaration name="winEnumTable" type="ArrayList" line="1616"/>
            <declaration name="dmPaperID" type="int" line="1618"/>
            <method name="Win32MediaSize" type="constructor" line="1620">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="nextValue" type="int" line="1625">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="Win32MediaSize" type="constructor" line="1630">
                <params>
                    <param name="name" type="String"/>
                    <param name="dmPaper" type="int"/>
                </params>
            </method>
            <method name="getSuperEnumTable" type="MediaSizeName[]" line="1636"/>
            <scope line="1640">
                <scope line="1642">
                    <declaration name="winMedia" type="Win32MediaSize" line="1643"/>
                    <declaration name="enumMedia" type="MediaSizeName[]" line="1646"/>
                    <scope line="1647">
                        <scope line="1650"/>
                    </scope>
                </scope>
            </scope>
            <method name="getDMPaper" type="int" line="1658"/>
            <method name="getStringTable" type="String[]" line="1662">
                <declaration name="nameTable" type="String[]" line="1663"/>
            </method>
            <method name="getEnumValueTable" type="EnumSyntax[]" line="1667">
                <declaration name="enumTable" type="MediaSizeName[]" line="1668"/>
            </method>
        </class>
    </source>