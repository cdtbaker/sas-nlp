<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.mscapi">
        <import package="java.nio.ByteBuffer"/>
        <import package="java.security.PublicKey"/>
        <import package="java.security.PrivateKey"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.InvalidParameterException"/>
        <import package="java.security.InvalidAlgorithmParameterException"/>
        <import package="java.security.KeyStoreException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.ProviderException"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.SecureRandom"/>
        <import package="java.security.Signature"/>
        <import package="java.security.SignatureSpi"/>
        <import package="java.security.SignatureException"/>
        <import package="java.math.BigInteger"/>
        <import package="sun.security.rsa.RSAKeyFactory"/>
        <class name="RSASignature" line="46">
            <extends class="java.security.SignatureSpi"/>
            <comment line="73">
                message digest implementation we use                
            </comment>
            <comment line="76">
                message digest name                
            </comment>
            <comment line="79">
                flag indicating whether the digest has been reset                
            </comment>
            <comment line="82">
                the signing key                
            </comment>
            <comment line="85">
                the verification key                
            </comment>
            <comment line="113">
                Nested class for NONEwithRSA signatures                
            </comment>
            <comment line="237">
                initialize for signing. See JCA doc                
            </comment>
            <comment line="287">
                initialize for signing. See JCA doc                
            </comment>
            <javadoc line="46">
                RSA signature implementation. Supports RSA signing using PKCS#1 v1.5 padding.
                  Objects should be instantiated by calling Signature.getInstance() using the
                  following algorithm names:
                  . &quot;NONEwithRSA&quot;
                  . &quot;SHA1withRSA&quot;
                  . &quot;SHA256withRSA&quot;
                  . &quot;SHA384withRSA&quot;
                  . &quot;SHA512withRSA&quot;
                  . &quot;MD5withRSA&quot;
                  . &quot;MD2withRSA&quot;
                  NOTE: RSA keys must be at least 512 bits long.
                  NOTE: NONEwithRSA must be supplied with a pre-computed message digest.
                  Only the following digest algorithms are supported: MD5, SHA-1,
                  SHA-256, SHA-384, SHA-512 and a special-purpose digest algorithm
                  which is a concatenation of SHA-1 and MD5 digests.                
                <since>
                    1.6                    
                </since>
                <author>
                    Stanley Man-Kit Ho                    
                </author>
            </javadoc>
            <declaration name="messageDigest" type="MessageDigest" line="73"/>
            <declaration name="messageDigestAlgorithm" type="String" line="76"/>
            <declaration name="needsReset" type="boolean" line="79"/>
            <declaration name="privateKey" type="Key" line="82"/>
            <declaration name="publicKey" type="Key" line="85"/>
            <javadoc line="87">
                Constructs a new RSASignature. Used by Raw subclass.                
            </javadoc>
            <method name="RSASignature" type="constructor" line="90"/>
            <javadoc line="95">
                Constructs a new RSASignature. Used by subclasses.                
            </javadoc>
            <method name="RSASignature" type="constructor" line="98">
                <params>
                    <param name="digestName" type="String"/>
                </params>
                <comment line="103">
                    Get the digest&apos;s canonical name                    
                </comment>
                <scope line="100"/>
                <scope line="105"/>
            </method>
            <class name="Raw" line="113">
                <extends class="RSASignature"/>
                <comment line="116">
                    the longest supported digest is 512 bits (SHA-512)                    
                </comment>
                <comment line="126">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="136">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="148">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="168">
                    Returns the precomputed message digest value.                    
                </comment>
                <comment line="516">
                    used by RSACipher                    
                </comment>
                <comment line="524">
                    used by RSACipher                    
                </comment>
                <declaration name="RAW_RSA_MAX" type="int" line="116"/>
                <declaration name="precomputedDigest" type="byte[]" line="118"/>
                <declaration name="offset" type="int" line="119"/>
                <method name="Raw" type="constructor" line="121"/>
                <method name="engineUpdate" type="void" line="127">
                    <params>
                        <param name="b" type="byte"/>
                    </params>
                    <scope line="128"/>
                </method>
                <method name="engineUpdate" type="void" line="138">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="139"/>
                </method>
                <method name="engineUpdate" type="void" line="149">
                    <params>
                        <param name="byteBuffer" type="ByteBuffer"/>
                    </params>
                    <declaration name="len" type="int" line="150"/>
                    <scope line="151"/>
                    <scope line="154"/>
                </method>
                <method name="resetDigest" type="void" line="163"/>
                <method name="getDigestValue" type="byte[]" line="169">
                    <comment line="175">
                        Determine the digest algorithm from the digest length                        
                    </comment>
                    <scope line="170"/>
                    <scope line="175"/>
                    <scope line="177"/>
                    <scope line="179"/>
                    <scope line="181"/>
                    <scope line="183"/>
                    <scope line="185"/>
                    <scope line="187"/>
                    <declaration name="result" type="byte[]" line="192"/>
                </method>
            </class>
            <class name="SHA1" line="200">
                <extends class="RSASignature"/>
                <comment line="116">
                    the longest supported digest is 512 bits (SHA-512)                    
                </comment>
                <comment line="126">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="136">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="148">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="168">
                    Returns the precomputed message digest value.                    
                </comment>
                <comment line="516">
                    used by RSACipher                    
                </comment>
                <comment line="524">
                    used by RSACipher                    
                </comment>
                <method name="SHA1" type="constructor" line="201"/>
            </class>
            <class name="SHA256" line="206">
                <extends class="RSASignature"/>
                <comment line="116">
                    the longest supported digest is 512 bits (SHA-512)                    
                </comment>
                <comment line="126">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="136">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="148">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="168">
                    Returns the precomputed message digest value.                    
                </comment>
                <comment line="516">
                    used by RSACipher                    
                </comment>
                <comment line="524">
                    used by RSACipher                    
                </comment>
                <method name="SHA256" type="constructor" line="207"/>
            </class>
            <class name="SHA384" line="212">
                <extends class="RSASignature"/>
                <comment line="116">
                    the longest supported digest is 512 bits (SHA-512)                    
                </comment>
                <comment line="126">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="136">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="148">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="168">
                    Returns the precomputed message digest value.                    
                </comment>
                <comment line="516">
                    used by RSACipher                    
                </comment>
                <comment line="524">
                    used by RSACipher                    
                </comment>
                <method name="SHA384" type="constructor" line="213"/>
            </class>
            <class name="SHA512" line="218">
                <extends class="RSASignature"/>
                <comment line="116">
                    the longest supported digest is 512 bits (SHA-512)                    
                </comment>
                <comment line="126">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="136">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="148">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="168">
                    Returns the precomputed message digest value.                    
                </comment>
                <comment line="516">
                    used by RSACipher                    
                </comment>
                <comment line="524">
                    used by RSACipher                    
                </comment>
                <method name="SHA512" type="constructor" line="219"/>
            </class>
            <class name="MD5" line="224">
                <extends class="RSASignature"/>
                <comment line="116">
                    the longest supported digest is 512 bits (SHA-512)                    
                </comment>
                <comment line="126">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="136">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="148">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="168">
                    Returns the precomputed message digest value.                    
                </comment>
                <comment line="516">
                    used by RSACipher                    
                </comment>
                <comment line="524">
                    used by RSACipher                    
                </comment>
                <method name="MD5" type="constructor" line="225"/>
            </class>
            <class name="MD2" line="230">
                <extends class="RSASignature"/>
                <comment line="116">
                    the longest supported digest is 512 bits (SHA-512)                    
                </comment>
                <comment line="126">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="136">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="148">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="168">
                    Returns the precomputed message digest value.                    
                </comment>
                <comment line="516">
                    used by RSACipher                    
                </comment>
                <comment line="524">
                    used by RSACipher                    
                </comment>
                <method name="MD2" type="constructor" line="231"/>
            </class>
            <method name="engineInitVerify" type="void" line="239">
                <params>
                    <param name="key" type="PublicKey"/>
                </params>
                <comment line="241">
                    This signature accepts only RSAPublicKey                    
                </comment>
                <comment line="251">
                    convert key to MSCAPI format                    
                </comment>
                <comment line="256">
                    Check against the local and global values to make sure
                     the sizes are ok.  Round up to the nearest byte.                    
                </comment>
                <comment line="264">
                    Adjust key length due to sign bit                    
                </comment>
                <scope line="241"/>
                <declaration name="rsaKey" type="java.security.interfaces.RSAPublicKey" line="245"/>
                <scope line="248">
                    <declaration name="modulus" type="BigInteger" line="252"/>
                    <declaration name="exponent" type="BigInteger" line="253"/>
                    <declaration name="modulusBytes" type="byte[]" line="260"/>
                    <declaration name="exponentBytes" type="byte[]" line="261"/>
                    <declaration name="keyBitLength" type="int" line="264"/>
                    <declaration name="keyBlob" type="byte[]" line="268"/>
                    <scope line="271"/>
                    <scope line="274"/>
                </scope>
                <scope line="278"/>
            </method>
            <method name="engineInitSign" type="void" line="288">
                <params>
                    <param name="key" type="PrivateKey"/>
                </params>
                <comment line="290">
                    This signature accepts only RSAPrivateKey                    
                </comment>
                <comment line="296">
                    Check against the local and global values to make sure
                     the sizes are ok.  Round up to nearest byte.                    
                </comment>
                <scope line="290"/>
            </method>
            <javadoc line="305">
                Resets the message digest if needed.                
            </javadoc>
            <method name="resetDigest" type="void" line="308">
                <scope line="309"/>
            </method>
            <method name="getDigestValue" type="byte[]" line="315"/>
            <method name="setDigestName" type="void" line="320">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="324">
                Updates the data to be signed or verified
                  using the specified byte.                
                <param>
                    b the byte to use for the update.                    
                </param>
                <exception>
                    SignatureException if the engine is not initialized
                      properly.                    
                </exception>
            </javadoc>
            <method name="engineUpdate" type="void" line="334">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <javadoc line="339">
                Updates the data to be signed or verified, using the
                  specified array of bytes, starting at the specified offset.                
                <param>
                    b the array of bytes                    
                </param>
                <param>
                    off the offset to start from in the array of bytes                    
                </param>
                <param>
                    len the number of bytes to use, starting at offset                    
                </param>
                <exception>
                    SignatureException if the engine is not initialized
                      properly                    
                </exception>
            </javadoc>
            <method name="engineUpdate" type="void" line="352">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="357">
                Updates the data to be signed or verified, using the
                  specified ByteBuffer.                
                <param>
                    input the ByteBuffer                    
                </param>
            </javadoc>
            <method name="engineUpdate" type="void" line="364">
                <params>
                    <param name="input" type="ByteBuffer"/>
                </params>
            </method>
            <javadoc line="369">
                Returns the signature bytes of all the data
                  updated so far.
                  The format of the signature depends on the underlying
                  signature scheme.                
                <return>
                    the signature bytes of the signing operation's result.                    
                </return>
                <exception>
                    SignatureException if the engine is not
                      initialized properly or if this signature algorithm is unable to
                      process the input data provided.                    
                </exception>
            </javadoc>
            <method name="engineSign" type="byte[]" line="381">
                <comment line="386">
                    Omit the hash OID when generating a Raw signature                    
                </comment>
                <comment line="389">
                    Sign hash using MS Crypto APIs                    
                </comment>
                <comment line="395">
                    Convert signature array from little endian to big endian                    
                </comment>
                <declaration name="hash" type="byte[]" line="383"/>
                <declaration name="noHashOID" type="boolean" line="386"/>
                <declaration name="result" type="byte[]" line="390"/>
            </method>
            <javadoc line="398">
                Convert array from big endian to little endian, or vice versa.                
            </javadoc>
            <method name="convertEndianArray" type="byte[]" line="402">
                <params>
                    <param name="byteArray" type="byte[]"/>
                </params>
                <comment line="409">
                    make it big endian                    
                </comment>
                <declaration name="retval" type="byte[]" line="406"/>
            </method>
            <method name="signHash" type="byte[]" line="415"/>
            <javadoc line="415">
                Sign hash using Microsoft Crypto API with HCRYPTKEY.
                  The returned data is in little-endian.                
            </javadoc>
            <method name="verifySignedHash" type="boolean" line="423"/>
            <javadoc line="423">
                Verify a signed hash using Microsoft Crypto API with HCRYPTKEY.                
            </javadoc>
            <javadoc line="430">
                Verifies the passed-in signature.                
                <param>
                    sigBytes the signature bytes to be verified.                    
                </param>
                <return>
                    true if the signature was verified, false if not.                    
                </return>
                <exception>
                    SignatureException if the engine is not
                      initialized properly, the passed-in signature is improperly
                      encoded or of the wrong type, if this signature algorithm is unable to
                      process the input data provided, etc.                    
                </exception>
            </javadoc>
            <method name="engineVerify" type="boolean" line="444">
                <params>
                    <param name="sigBytes" type="byte[]"/>
                </params>
                <declaration name="hash" type="byte[]" line="445"/>
            </method>
            <javadoc line="453">
                Sets the specified algorithm parameter to the specified
                  value. This method supplies a general-purpose mechanism through
                  which it is possible to set the various parameters of this object.
                  A parameter may be any settable parameter for the algorithm, such as
                  a parameter size, or a source of random bits for signature generation
                  (if appropriate), or an indication of whether or not to perform
                  a specific but optional computation. A uniform algorithm-specific
                  naming scheme for each parameter is desirable but left unspecified
                  at this time.                
                <param>
                    param the string identifier of the parameter.                    
                </param>
                <param>
                    value the parameter value.                    
                </param>
                <exception>
                    InvalidParameterException if <code>param</code> is an
                      invalid parameter for this signature algorithm engine,
                      the parameter is already set
                      and cannot be set again, a security exception occurs, and so on.                    
                </exception>
                <deprecated>
                    Replaced by {@link #engineSetParameter(java.security.spec.AlgorithmParameterSpec)engineSetParameter}.                    
                </deprecated>
            </javadoc>
            <method name="engineSetParameter" type="void" line="479">
                <params>
                    <param name="param" type="String"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="484">
                Gets the value of the specified algorithm parameter.
                  This method supplies a general-purpose mechanism through which it
                  is possible to get the various parameters of this object. A parameter
                  may be any settable parameter for the algorithm, such as a parameter
                  size, or  a source of random bits for signature generation (if
                  appropriate), or an indication of whether or not to perform a
                  specific but optional computation. A uniform algorithm-specific
                  naming scheme for each parameter is desirable but left unspecified
                  at this time.                
                <param>
                    param the string name of the parameter.                    
                </param>
                <return>
                    the object that represents the parameter value, or null if
                      there is none.                    
                </return>
                <exception>
                    InvalidParameterException if <code>param</code> is an
                      invalid parameter for this engine, or another exception occurs while
                      trying to get this parameter.                    
                </exception>
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="engineGetParameter" type="Object" line="508">
                <params>
                    <param name="param" type="String"/>
                </params>
            </method>
            <method name="generatePublicKeyBlob" type="byte[]" line="512"/>
            <javadoc line="512">
                Generates a public-key BLOB from a key&apos;s components.                
            </javadoc>
            <method name="importPublicKey" type="RSAPublicKey" line="520"/>
            <javadoc line="520">
                Imports a public-key BLOB.                
            </javadoc>
        </class>
    </source>