<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.mscapi">
        <import package="java.math.BigInteger"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.KeyException"/>
        <import package="java.security.KeyRep"/>
        <import package="java.security.ProviderException"/>
        <import package="java.security.PublicKey"/>
        <import package="sun.security.rsa.RSAPublicKeyImpl"/>
        <class name="RSAPublicKey" line="37">
            <extends class="Key"/>
            <comment line="178">
                Returns the Microsoft CryptoAPI representation of the key.                
            </comment>
            <comment line="183">
                Returns the key&apos;s public exponent (in big-endian 2&apos;s complement format).                
            </comment>
            <comment line="188">
                Returns the key&apos;s modulus (in big-endian 2&apos;s complement format).                
            </comment>
            <implements interface="java.security.interfaces.RSAPublicKey"/>
            <javadoc line="37">
                The handle for an RSA public key using the Microsoft Crypto API.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="publicKeyBlob" type="byte[]" line="44"/>
            <declaration name="encoding" type="byte[]" line="45"/>
            <declaration name="modulus" type="BigInteger" line="46"/>
            <declaration name="exponent" type="BigInteger" line="47"/>
            <javadoc line="49">
                Construct an RSAPublicKey object.                
            </javadoc>
            <method name="RSAPublicKey" type="constructor" line="53">
                <params>
                    <param name="hCryptProv" type="long"/>
                    <param name="hCryptKey" type="long"/>
                    <param name="keyLength" type="int"/>
                </params>
            </method>
            <javadoc line="57">
                Returns the standard algorithm name for this key. For
                  example, &quot;RSA&quot; would indicate that this key is a RSA key.
                  See Appendix A in the &lt;a href=
                  &quot;../../../guide/security/CryptoSpec.html#AppA&quot;&gt;
                  Java Cryptography Architecture API Specification &amp;amp; Reference &lt;/a&gt;
                  for information about standard algorithm names.                
                <return>
                    the name of the algorithm associated with this key.                    
                </return>
            </javadoc>
            <method name="getAlgorithm" type="String" line="68"/>
            <javadoc line="72">
                Returns a printable description of the key.                
            </javadoc>
            <method name="toString" type="String" line="76">
                <declaration name="sb" type="StringBuffer" line="77"/>
            </method>
            <javadoc line="88">
                Returns the public exponent.                
            </javadoc>
            <method name="getPublicExponent" type="BigInteger" line="91">
                <scope line="93">
                    <scope line="95"/>
                    <scope line="99"/>
                </scope>
            </method>
            <javadoc line="107">
                Returns the modulus.                
            </javadoc>
            <method name="getModulus" type="BigInteger" line="110">
                <scope line="112">
                    <scope line="114"/>
                    <scope line="118"/>
                </scope>
            </method>
            <javadoc line="126">
                Returns the name of the primary encoding format of this key,
                  or null if this key does not support encoding.
                  The primary encoding format is
                  named in terms of the appropriate ASN.1 data format, if an
                  ASN.1 specification for this key exists.
                  For example, the name of the ASN.1 data format for public
                  keys is &lt;I&gt;SubjectPublicKeyInfo&lt;/I&gt;, as
                  defined by the X.509 standard; in this case, the returned format is
                  &lt;code&gt;&quot;X.509&quot;&lt;/code&gt;. Similarly,
                  the name of the ASN.1 data format for private keys is
                  &lt;I&gt;PrivateKeyInfo&lt;/I&gt;,
                  as defined by the PKCS #8 standard; in this case, the returned format is
                  &lt;code&gt;&quot;PKCS#8&quot;&lt;/code&gt;.                
                <return>
                    the primary encoding format of the key.                    
                </return>
            </javadoc>
            <method name="getFormat" type="String" line="144"/>
            <javadoc line="148">
                Returns the key in its primary encoding format, or null
                  if this key does not support encoding.                
                <return>
                    the encoded key, or null if the key does not support
                      encoding.                    
                </return>
            </javadoc>
            <method name="getEncoded" type="byte[]" line="156">
                <comment line="165">
                    ignore                    
                </comment>
                <scope line="157">
                    <scope line="159"/>
                    <scope line="163"/>
                </scope>
            </method>
            <method name="writeReplace" type="Object" line="170"/>
            <method name="getPublicKeyBlob" type="byte[]" line="180"/>
            <method name="getExponent" type="byte[]" line="185"/>
            <method name="getModulus" type="byte[]" line="190"/>
        </class>
    </source>