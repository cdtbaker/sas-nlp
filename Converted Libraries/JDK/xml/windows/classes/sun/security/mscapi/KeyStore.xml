<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.mscapi">
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.KeyStoreSpi"/>
        <import package="java.security.KeyStoreException"/>
        <import package="java.security.UnrecoverableKeyException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.SecurityPermission"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.cert.CertificateEncodingException"/>
        <import package="java.security.cert.CertificateFactory"/>
        <import package="java.security.interfaces.RSAPrivateCrtKey"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Date"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.UUID"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="KeyStore" line="27">
            <extends class="KeyStoreSpi"/>
            <javadoc line="27">
                Implementation of key store for Windows using the Microsoft Crypto API.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <class name="MY" line="32">
                <extends class="KeyStore"/>
                <method name="MY" type="constructor" line="33"/>
            </class>
            <class name="ROOT" line="37">
                <extends class="KeyStore"/>
                <method name="ROOT" type="constructor" line="38"/>
            </class>
            <class name="KeyEntry" line="42">
                <declaration name="privateKey" type="Key" line="43"/>
                <declaration name="certChain" type="X509Certificate" line="44"/>
                <declaration name="alias" type="String" line="45"/>
                <method name="KeyEntry" type="constructor" line="46">
                    <params>
                        <param name="key" type="Key"/>
                        <param name="chain" type="X509Certificate[]"/>
                    </params>
                </method>
                <method name="KeyEntry" type="constructor" line="49">
                    <params>
                        <param name="alias" type="String"/>
                        <param name="key" type="Key"/>
                        <param name="chain" type="X509Certificate[]"/>
                    </params>
                    <scope line="52"/>
                    <scope line="55"/>
                </method>
                <javadoc line="59">
                    Gets the alias for the keystore entry.                    
                </javadoc>
                <method name="getAlias" type="String" line="62"/>
                <javadoc line="65">
                    Sets the alias for the keystore entry.                    
                </javadoc>
                <method name="setAlias" type="void" line="68">
                    <params>
                        <param name="alias" type="String"/>
                    </params>
                </method>
                <javadoc line="71">
                    Gets the private key for the keystore entry.                    
                </javadoc>
                <method name="getPrivateKey" type="Key" line="74"/>
                <javadoc line="77">
                    Sets the private key for the keystore entry.                    
                </javadoc>
                <method name="setPrivateKey" type="void" line="80">
                    <params>
                        <param name="key" type="RSAPrivateCrtKey"/>
                    </params>
                    <declaration name="modulusBytes" type="byte[]" line="81"/>
                    <declaration name="keyBitLength" type="int" line="82"/>
                    <declaration name="keyBlob" type="byte[]" line="83"/>
                </method>
                <javadoc line="86">
                    Gets the certificate chain for the keystore entry.                    
                </javadoc>
                <method name="getCertificateChain" type="X509Certificate[]" line="89"/>
                <javadoc line="92">
                    Sets the certificate chain for the keystore entry.                    
                </javadoc>
                <method name="setCertificateChain" type="void" line="95">
                    <params>
                        <param name="chain" type="X509Certificate[]"/>
                    </params>
                    <scope line="96">
                        <declaration name="encoding" type="byte[]" line="97"/>
                        <scope line="98"/>
                        <scope line="101"/>
                    </scope>
                </method>
            </class>
            <declaration name="certificateFactory" type="CertificateFactory" line="108"/>
            <declaration name="KEYSTORE_COMPATIBILITY_MODE_PROP" type="String" line="109"/>
            <declaration name="keyStoreCompatibilityMode" type="boolean" line="110"/>
            <declaration name="entries" type="Collection&lt;KeyEntry&gt;" line="111"/>
            <declaration name="storeName" type="String" line="112"/>
            <method name="KeyStore" type="constructor" line="113">
                <params>
                    <param name="storeName" type="String"/>
                </params>
                <declaration name="prop" type="String" line="114"/>
                <scope line="115"/>
                <scope line="118"/>
            </method>
            <javadoc line="123">
                Returns the key associated with the given alias.
                  &lt;p&gt;
                  A compatibility mode is supported for applications that assume
                  a password must be supplied. It permits (but ignores) a non-null
                  &lt;code&gt;password&lt;/code&gt;.  The mode is enabled by default.
                  Set the
                  &lt;code&gt;sun.security.mscapi.keyStoreCompatibilityMode&lt;/code&gt;
                  system property to &lt;code&gt;false&lt;/code&gt; to disable compatibility mode
                  and reject a non-null &lt;code&gt;password&lt;/code&gt;.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    password the password, which should be <code>null</code>                    
                </param>
                <return>
                    the requested key, or null if the given alias does not exist
                      or does not identify a <i>key entry</i>.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if the algorithm for recovering the
                      key cannot be found,
                      or if compatibility mode is disabled and <code>password</code> is
                      non-null.                    
                </exception>
                <exception>
                    UnrecoverableKeyException if the key cannot be recovered.                    
                </exception>
            </javadoc>
            <method name="engineGetKey" type="java.security.Key" line="143">
                <params>
                    <param name="alias" type="String"/>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="144"/>
                <scope line="147"/>
                <scope line="151">
                    <scope line="152"/>
                </scope>
            </method>
            <javadoc line="158">
                Returns the certificate chain associated with the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate chain (ordered with the user's certificate first
                      and the root certificate authority last), or null if the given alias
                      does not exist or does not contain a certificate chain (i.e., the given
                      alias identifies either a <i>trusted certificate entry</i> or a
                      <i>key entry</i> without a certificate chain).                    
                </return>
            </javadoc>
            <method name="engineGetCertificateChain" type="Certificate[]" line="167">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="168"/>
                <scope line="171">
                    <scope line="172">
                        <declaration name="certChain" type="X509Certificate[]" line="173"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="179">
                Returns the certificate associated with the given alias.
                  &lt;p&gt;If the given alias name identifies a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, the certificate associated with that
                  entry is returned. If the given alias name identifies a
                  &lt;i&gt;key entry&lt;/i&gt;, the first element of the certificate chain of that
                  entry is returned, or null if that entry does not have a certificate
                  chain.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate, or null if the given alias does not exist or
                      does not contain a certificate.                    
                </return>
            </javadoc>
            <method name="engineGetCertificate" type="Certificate" line="191">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="192"/>
                <scope line="195">
                    <scope line="196">
                        <declaration name="certChain" type="X509Certificate[]" line="197"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="203">
                Returns the creation date of the entry identified by the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the creation date of this entry, or null if the given alias does
                      not exist                    
                </return>
            </javadoc>
            <method name="engineGetCreationDate" type="Date" line="209">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="210"/>
            </method>
            <javadoc line="215">
                Stores the given private key and associated certificate chain in the
                  keystore.
                  &lt;p&gt;The given java.security.PrivateKey &lt;code&gt;key&lt;/code&gt; must
                  be accompanied by a certificate chain certifying the
                  corresponding public key.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key and certificate
                  chain. Otherwise, a new entry is created.
                  &lt;p&gt;
                  A compatibility mode is supported for applications that assume
                  a password must be supplied. It permits (but ignores) a non-null
                  &lt;code&gt;password&lt;/code&gt;.  The mode is enabled by default.
                  Set the
                  &lt;code&gt;sun.security.mscapi.keyStoreCompatibilityMode&lt;/code&gt;
                  system property to &lt;code&gt;false&lt;/code&gt; to disable compatibility mode
                  and reject a non-null &lt;code&gt;password&lt;/code&gt;.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the private key to be associated with the alias                    
                </param>
                <param>
                    password the password, which should be <code>null</code>                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only required if the given key is of type
                      <code>java.security.PrivateKey</code>).                    
                </param>
                <exception>
                    KeyStoreException if the given key is not a private key,
                      cannot be protected, or if compatibility mode is disabled and
                      <code>password</code> is non-null, or if this operation fails for
                      some other reason.                    
                </exception>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="243">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="java.security.Key"/>
                    <param name="password" type="char[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
                <scope line="244"/>
                <scope line="247"/>
                <scope line="250">
                    <declaration name="entry" type="KeyEntry" line="251"/>
                    <declaration name="found" type="boolean" line="252"/>
                    <scope line="253">
                        <scope line="254"/>
                    </scope>
                    <scope line="260"/>
                    <scope line="265"/>
                    <scope line="269"/>
                    <scope line="272"/>
                </scope>
                <scope line="276"/>
            </method>
            <javadoc line="280">
                Assigns the given key (that has already been protected) to the given
                  alias.
                  &lt;p&gt;If the protected key is of type
                  &lt;code&gt;java.security.PrivateKey&lt;/code&gt;, it must be accompanied by a
                  certificate chain certifying the corresponding public key. If the
                  underlying keystore implementation is of type &lt;code&gt;jks&lt;/code&gt;,
                  &lt;code&gt;key&lt;/code&gt; must be encoded as an
                  &lt;code&gt;EncryptedPrivateKeyInfo&lt;/code&gt; as defined in the PKCS #8 standard.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key (and possibly
                  certificate chain).                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the key (in protected format) to be associated with the alias                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only useful if the protected key is of type
                      <code>java.security.PrivateKey</code>).                    
                </param>
                <exception>
                    KeyStoreException if this operation fails.                    
                </exception>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="299">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="byte[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
            </method>
            <javadoc line="302">
                Assigns the given certificate to the given alias.
                  &lt;p&gt;If the given alias already exists in this keystore and identifies a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, the certificate associated with it is
                  overridden by the given certificate.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    cert the certificate                    
                </param>
                <exception>
                    KeyStoreException if the given alias already exists and does
                      not identify a <i>trusted certificate entry</i>, or this operation
                      fails for some other reason.                    
                </exception>
            </javadoc>
            <method name="engineSetCertificateEntry" type="void" line="313">
                <params>
                    <param name="alias" type="String"/>
                    <param name="cert" type="Certificate"/>
                </params>
                <scope line="314"/>
                <scope line="317">
                    <declaration name="chain" type="X509Certificate[]" line="318"/>
                    <declaration name="entry" type="KeyEntry" line="319"/>
                    <declaration name="found" type="boolean" line="320"/>
                    <scope line="321">
                        <scope line="322"/>
                    </scope>
                    <scope line="328"/>
                    <scope line="332">
                        <scope line="334"/>
                        <scope line="337"/>
                    </scope>
                </scope>
                <scope line="342"/>
            </method>
            <javadoc line="346">
                Deletes the entry identified by the given alias from this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <exception>
                    KeyStoreException if the entry cannot be removed.                    
                </exception>
            </javadoc>
            <method name="engineDeleteEntry" type="void" line="351">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="352"/>
                <scope line="355">
                    <scope line="356">
                        <declaration name="certChain" type="X509Certificate[]" line="357"/>
                        <scope line="358">
                            <scope line="359">
                                <declaration name="encoding" type="byte[]" line="360"/>
                            </scope>
                            <scope line="363"/>
                        </scope>
                        <declaration name="privateKey" type="Key" line="367"/>
                        <scope line="368"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="376">
                Lists all the alias names of this keystore.                
                <return>
                    enumeration of the alias names                    
                </return>
            </javadoc>
            <method name="engineAliases" type="Enumeration" line="380">
                <declaration name="iter" type="Iterator" line="381"/>
                <anonymous_class line="382">
                    <method name="hasMoreElements" type="boolean" line="383"/>
                    <method name="nextElement" type="Object" line="386">
                        <declaration name="entry" type="KeyEntry" line="387"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="393">
                Checks if the given alias exists in this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    true if the alias exists, false otherwise                    
                </return>
            </javadoc>
            <method name="engineContainsAlias" type="boolean" line="398">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="399">
                    <declaration name="a" type="String" line="400"/>
                </scope>
            </method>
            <javadoc line="405">
                Retrieves the number of entries in this keystore.                
                <return>
                    the number of entries in this keystore                    
                </return>
            </javadoc>
            <method name="engineSize" type="int" line="409"/>
            <javadoc line="412">
                Returns true if the entry identified by the given alias is a
                  &lt;i&gt;key entry&lt;/i&gt;, and false otherwise.                
                <return>
                    true if the entry identified by the given alias is a
                      <i>key entry</i>, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineIsKeyEntry" type="boolean" line="418">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="419"/>
                <scope line="422">
                    <scope line="423"/>
                </scope>
            </method>
            <javadoc line="429">
                Returns true if the entry identified by the given alias is a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, and false otherwise.                
                <return>
                    true if the entry identified by the given alias is a
                      <i>trusted certificate entry</i>, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineIsCertificateEntry" type="boolean" line="435">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="436">
                    <scope line="437"/>
                </scope>
            </method>
            <javadoc line="443">
                Returns the (alias) name of the first keystore entry whose certificate
                  matches the given certificate.
                  &lt;p&gt;This method attempts to match the given certificate with each
                  keystore entry. If the entry being considered
                  is a &lt;i&gt;trusted certificate entry&lt;/i&gt;, the given certificate is
                  compared to that entry&apos;s certificate. If the entry being considered is
                  a &lt;i&gt;key entry&lt;/i&gt;, the given certificate is compared to the first
                  element of that entry&apos;s certificate chain (if a chain exists).                
                <param>
                    cert the certificate to match with.                    
                </param>
                <return>
                    the (alias) name of the first entry with matching certificate,
                      or null if no such entry exists in this keystore.                    
                </return>
            </javadoc>
            <method name="engineGetCertificateAlias" type="String" line="456">
                <params>
                    <param name="cert" type="Certificate"/>
                </params>
                <scope line="457">
                    <scope line="458"/>
                </scope>
            </method>
            <javadoc line="464">
                engineStore is currently a no-op.
                  Entries are stored during engineSetEntry.
                  A compatibility mode is supported for applications that assume
                  keystores are stream-based. It permits (but ignores) a non-null
                  &lt;code&gt;stream&lt;/code&gt; or &lt;code&gt;password&lt;/code&gt;.
                  The mode is enabled by default.
                  Set the
                  &lt;code&gt;sun.security.mscapi.keyStoreCompatibilityMode&lt;/code&gt;
                  system property to &lt;code&gt;false&lt;/code&gt; to disable compatibility mode
                  and reject a non-null &lt;code&gt;stream&lt;/code&gt; or &lt;code&gt;password&lt;/code&gt;.                
                <param>
                    stream the output stream, which should be <code>null</code>                    
                </param>
                <param>
                    password the password, which should be <code>null</code>                    
                </param>
                <exception>
                    IOException if compatibility mode is disabled and either
                      parameter is non-null.                    
                </exception>
            </javadoc>
            <method name="engineStore" type="void" line="480">
                <params>
                    <param name="stream" type="OutputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="481"/>
                <scope line="484"/>
            </method>
            <javadoc line="488">
                Loads the keystore.
                  A compatibility mode is supported for applications that assume
                  keystores are stream-based. It permits (but ignores) a non-null
                  &lt;code&gt;stream&lt;/code&gt; or &lt;code&gt;password&lt;/code&gt;.
                  The mode is enabled by default.
                  Set the
                  &lt;code&gt;sun.security.mscapi.keyStoreCompatibilityMode&lt;/code&gt;
                  system property to &lt;code&gt;false&lt;/code&gt; to disable compatibility mode
                  and reject a non-null &lt;code&gt;stream&lt;/code&gt; or &lt;code&gt;password&lt;/code&gt;.                
                <param>
                    stream the input stream, which should be <code>null</code>.                    
                </param>
                <param>
                    password the password, which should be <code>null</code>.                    
                </param>
                <exception>
                    IOException if there is an I/O or format problem with the
                      keystore data. Or if compatibility mode is disabled and either
                      parameter is non-null.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the algorithm used to check
                      the integrity of the keystore cannot be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates in the
                      keystore could not be loaded                    
                </exception>
                <exception>
                    SecurityException if the security check for
                      <code>SecurityPermission("authProvider.<i>name</i>")</code> does not
                      pass, where <i>name</i> is the value returned by
                      this provider's <code>getName</code> method.                    
                </exception>
            </javadoc>
            <method name="engineLoad" type="void" line="512">
                <params>
                    <param name="stream" type="InputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="513"/>
                <scope line="516"/>
                <declaration name="sm" type="SecurityManager" line="519"/>
                <scope line="520"/>
                <scope line="524"/>
                <scope line="527"/>
            </method>
            <javadoc line="531">
                Generates a certificate chain from the collection of
                  certificates and stores the result into a key entry.                
            </javadoc>
            <method name="generateCertificateChain" type="void" line="535">
                <params>
                    <param name="alias" type="String"/>
                    <param name="certCollection" type="Collection"/>
                    <param name="entries" type="Collection<KeyEntry>"/>
                </params>
                <scope line="536">
                    <declaration name="certChain" type="X509Certificate[]" line="537"/>
                    <declaration name="i" type="int" line="538"/>
                    <scope line="539"/>
                    <declaration name="entry" type="KeyEntry" line="542"/>
                </scope>
                <scope line="545"/>
            </method>
            <javadoc line="548">
                Generates RSA key and certificate chain from the private key handle,
                  collection of certificates and stores the result into key entries.                
            </javadoc>
            <method name="generateRSAKeyAndCertificateChain" type="void" line="552">
                <params>
                    <param name="alias" type="String"/>
                    <param name="hCryptProv" type="long"/>
                    <param name="hCryptKey" type="long"/>
                    <param name="keyLength" type="int"/>
                    <param name="certCollection" type="Collection"/>
                    <param name="entries" type="Collection<KeyEntry>"/>
                </params>
                <scope line="553">
                    <declaration name="certChain" type="X509Certificate[]" line="554"/>
                    <declaration name="i" type="int" line="555"/>
                    <scope line="556"/>
                    <declaration name="entry" type="KeyEntry" line="559"/>
                </scope>
                <scope line="562"/>
            </method>
            <javadoc line="565">
                Generates certificates from byte data and stores into cert collection.                
                <param>
                    data Byte data.                    
                </param>
                <param>
                    certCollection Collection of certificates.                    
                </param>
            </javadoc>
            <method name="generateCertificate" type="void" line="570">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="certCollection" type="Collection"/>
                </params>
                <scope line="571">
                    <declaration name="bis" type="ByteArrayInputStream" line="572"/>
                    <scope line="573"/>
                    <declaration name="c" type="Collection" line="576"/>
                </scope>
                <scope line="579"/>
                <scope line="581"/>
            </method>
            <javadoc line="584">
                Returns the name of the keystore.                
            </javadoc>
            <method name="getName" type="String" line="587"/>
            <method name="loadKeysOrCertificateChains" type="void" line="590"/>
            <javadoc line="590">
                Load keys and/or certificates from keystore into Collection.                
                <param>
                    name Name of keystore.                    
                </param>
                <param>
                    entries Collection of key/certificate.                    
                </param>
            </javadoc>
            <method name="storeCertificate" type="void" line="596"/>
            <javadoc line="596">
                Stores a DER-encoded certificate into the certificate store                
                <param>
                    name Name of the keystore.                    
                </param>
                <param>
                    alias Name of the certificate.                    
                </param>
                <param>
                    encoding DER-encoded certificate.                    
                </param>
            </javadoc>
            <method name="removeCertificate" type="void" line="603"/>
            <javadoc line="603">
                Removes the certificate from the certificate store                
                <param>
                    name Name of the keystore.                    
                </param>
                <param>
                    alias Name of the certificate.                    
                </param>
                <param>
                    encoding DER-encoded certificate.                    
                </param>
            </javadoc>
            <method name="destroyKeyContainer" type="void" line="610"/>
            <javadoc line="610">
                Destroys the key container.                
                <param>
                    keyContainerName The name of the key container.                    
                </param>
            </javadoc>
            <method name="generatePrivateKeyBlob" type="byte[]" line="615"/>
            <javadoc line="615">
                Generates a private-key BLOB from a key&apos;s components.                
            </javadoc>
            <method name="storePrivateKey" type="RSAPrivateKey" line="619"/>
        </class>
    </source>