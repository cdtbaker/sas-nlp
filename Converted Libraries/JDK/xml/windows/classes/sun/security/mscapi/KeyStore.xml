<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.mscapi">
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.KeyStoreSpi"/>
        <import package="java.security.KeyStoreException"/>
        <import package="java.security.UnrecoverableKeyException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.SecurityPermission"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.cert.CertificateEncodingException"/>
        <import package="java.security.cert.CertificateFactory"/>
        <import package="java.security.interfaces.RSAPrivateCrtKey"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Date"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.UUID"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="KeyStore" line="55">
            <extends class="KeyStoreSpi"/>
            <comment line="182">
                An X.509 certificate factory.
                 Used to create an X.509 certificate from its DER-encoding.                
            </comment>
            <comment line="188">
                Compatibility mode: for applications that assume keystores are
                 stream-based this mode tolerates (but ignores) a non-null stream
                 or password parameter when passed to the load or store methods.
                 The mode is enabled by default.                
            </comment>
            <comment line="198">
                The keystore entries.                
            </comment>
            <comment line="203">
                The keystore name.
                 Case is not significant.                
            </comment>
            <javadoc line="55">
                Implementation of key store for Windows using the Microsoft Crypto API.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <class name="MY" line="62">
                <extends class="KeyStore"/>
                <method name="MY" type="constructor" line="63"/>
            </class>
            <class name="ROOT" line="68">
                <extends class="KeyStore"/>
                <method name="ROOT" type="constructor" line="69"/>
            </class>
            <class name="KeyEntry" line="74">
                <declaration name="privateKey" type="Key" line="76"/>
                <declaration name="certChain" type="X509Certificate" line="77"/>
                <declaration name="alias" type="String" line="78"/>
                <method name="KeyEntry" type="constructor" line="80">
                    <params>
                        <param name="key" type="Key"/>
                        <param name="chain" type="X509Certificate[]"/>
                    </params>
                </method>
                <method name="KeyEntry" type="constructor" line="84">
                    <params>
                        <param name="alias" type="String"/>
                        <param name="key" type="Key"/>
                        <param name="chain" type="X509Certificate[]"/>
                    </params>
                    <comment line="88">
                        The default alias for both entry types is derived from a
                         hash value intrinsic to the first certificate in the chain.                        
                    </comment>
                    <scope line="91"/>
                    <scope line="93"/>
                </method>
                <javadoc line="98">
                    Gets the alias for the keystore entry.                    
                </javadoc>
                <method name="getAlias" type="String" line="102"/>
                <javadoc line="106">
                    Sets the alias for the keystore entry.                    
                </javadoc>
                <method name="setAlias" type="void" line="110">
                    <params>
                        <param name="alias" type="String"/>
                    </params>
                    <comment line="112">
                        TODO - set friendly name prop in cert store                        
                    </comment>
                </method>
                <javadoc line="115">
                    Gets the private key for the keystore entry.                    
                </javadoc>
                <method name="getPrivateKey" type="Key" line="119"/>
                <javadoc line="123">
                    Sets the private key for the keystore entry.                    
                </javadoc>
                <method name="setPrivateKey" type="void" line="128">
                    <params>
                        <param name="key" type="RSAPrivateCrtKey"/>
                    </params>
                    <comment line="132">
                        Adjust key length due to sign bit                        
                    </comment>
                    <declaration name="modulusBytes" type="byte[]" line="129"/>
                    <declaration name="keyBitLength" type="int" line="132"/>
                    <declaration name="keyBlob" type="byte[]" line="136"/>
                </method>
                <javadoc line="151">
                    Gets the certificate chain for the keystore entry.                    
                </javadoc>
                <method name="getCertificateChain" type="X509Certificate[]" line="155"/>
                <javadoc line="159">
                    Sets the certificate chain for the keystore entry.                    
                </javadoc>
                <method name="setCertificateChain" type="void" line="164">
                    <params>
                        <param name="chain" type="X509Certificate[]"/>
                    </params>
                    <comment line="175">
                        no private key to attach                        
                    </comment>
                    <scope line="165">
                        <declaration name="encoding" type="byte[]" line="166"/>
                        <scope line="167"/>
                        <scope line="172"/>
                    </scope>
                </method>
            </class>
            <declaration name="certificateFactory" type="CertificateFactory" line="185"/>
            <declaration name="KEYSTORE_COMPATIBILITY_MODE_PROP" type="String" line="193"/>
            <declaration name="keyStoreCompatibilityMode" type="boolean" line="195"/>
            <declaration name="entries" type="Collection&amp;lt;KeyEntry&amp;gt;" line="200"/>
            <declaration name="storeName" type="String" line="206"/>
            <method name="KeyStore" type="constructor" line="208">
                <params>
                    <param name="storeName" type="String"/>
                </params>
                <comment line="210">
                    Get the compatibility mode                    
                </comment>
                <declaration name="prop" type="String" line="210"/>
                <scope line="214"/>
                <scope line="216"/>
            </method>
            <javadoc line="223">
                Returns the key associated with the given alias.
                  &lt;p&gt;
                  A compatibility mode is supported for applications that assume
                  a password must be supplied. It permits (but ignores) a non-null
                  &lt;code&gt;password&lt;/code&gt;.  The mode is enabled by default.
                  Set the
                  &lt;code&gt;sun.security.mscapi.keyStoreCompatibilityMode&lt;/code&gt;
                  system property to &lt;code&gt;false&lt;/code&gt; to disable compatibility mode
                  and reject a non-null &lt;code&gt;password&lt;/code&gt;.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    password the password, which should be &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <return>
                    the requested key, or null if the given alias does not exist
                      or does not identify a &lt;i&gt;key entry&lt;/i&gt;.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if the algorithm for recovering the
                      key cannot be found,
                      or if compatibility mode is disabled and &lt;code&gt;password&lt;/code&gt; is
                      non-null.                    
                </exception>
                <exception>
                    UnrecoverableKeyException if the key cannot be recovered.                    
                </exception>
            </javadoc>
            <method name="engineGetKey" type="java.security.Key" line="248">
                <params>
                    <param name="alias" type="String"/>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="249"/>
                <scope line="253"/>
                <scope line="260">
                    <scope line="261"/>
                </scope>
            </method>
            <javadoc line="269">
                Returns the certificate chain associated with the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate chain (ordered with the user&apos;s certificate first
                      and the root certificate authority last), or null if the given alias
                      does not exist or does not contain a certificate chain (i.e., the given
                      alias identifies either a &lt;i&gt;trusted certificate entry&lt;/i&gt; or a
                      &lt;i&gt;key entry&lt;/i&gt; without a certificate chain).                    
                </return>
            </javadoc>
            <method name="engineGetCertificateChain" type="Certificate[]" line="281">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="282"/>
                <scope line="286">
                    <scope line="287">
                        <declaration name="certChain" type="X509Certificate[]" line="288"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="297">
                Returns the certificate associated with the given alias.
                  &lt;p&gt;If the given alias name identifies a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, the certificate associated with that
                  entry is returned. If the given alias name identifies a
                  &lt;i&gt;key entry&lt;/i&gt;, the first element of the certificate chain of that
                  entry is returned, or null if that entry does not have a certificate
                  chain.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate, or null if the given alias does not exist or
                      does not contain a certificate.                    
                </return>
            </javadoc>
            <method name="engineGetCertificate" type="Certificate" line="313">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="314"/>
                <scope line="318">
                    <scope line="320">
                        <declaration name="certChain" type="X509Certificate[]" line="321"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="329">
                Returns the creation date of the entry identified by the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the creation date of this entry, or null if the given alias does
                      not exist                    
                </return>
            </javadoc>
            <method name="engineGetCreationDate" type="Date" line="337">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="338"/>
            </method>
            <javadoc line="344">
                Stores the given private key and associated certificate chain in the
                  keystore.
                  &lt;p&gt;The given java.security.PrivateKey &lt;code&gt;key&lt;/code&gt; must
                  be accompanied by a certificate chain certifying the
                  corresponding public key.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key and certificate
                  chain. Otherwise, a new entry is created.
                  &lt;p&gt;
                  A compatibility mode is supported for applications that assume
                  a password must be supplied. It permits (but ignores) a non-null
                  &lt;code&gt;password&lt;/code&gt;.  The mode is enabled by default.
                  Set the
                  &lt;code&gt;sun.security.mscapi.keyStoreCompatibilityMode&lt;/code&gt;
                  system property to &lt;code&gt;false&lt;/code&gt; to disable compatibility mode
                  and reject a non-null &lt;code&gt;password&lt;/code&gt;.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the private key to be associated with the alias                    
                </param>
                <param>
                    password the password, which should be &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only required if the given key is of type
                      &lt;code&gt;java.security.PrivateKey&lt;/code&gt;).                    
                </param>
                <exception>
                    KeyStoreException if the given key is not a private key,
                      cannot be protected, or if compatibility mode is disabled and
                      &lt;code&gt;password&lt;/code&gt; is non-null, or if this operation fails for
                      some other reason.                    
                </exception>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="379">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="java.security.Key"/>
                    <param name="password" type="char[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
                <comment line="404">
                    TODO new KeyEntry(alias, key, (X509Certificate[]) chain);                    
                </comment>
                <scope line="380"/>
                <scope line="384"/>
                <scope line="388">
                    <declaration name="entry" type="KeyEntry" line="390"/>
                    <declaration name="found" type="boolean" line="391"/>
                    <scope line="393">
                        <scope line="394"/>
                    </scope>
                    <scope line="401"/>
                    <scope line="410"/>
                    <scope line="414"/>
                    <scope line="417"/>
                </scope>
                <scope line="421"/>
            </method>
            <javadoc line="427">
                Assigns the given key (that has already been protected) to the given
                  alias.
                  &lt;p&gt;If the protected key is of type
                  &lt;code&gt;java.security.PrivateKey&lt;/code&gt;, it must be accompanied by a
                  certificate chain certifying the corresponding public key. If the
                  underlying keystore implementation is of type &lt;code&gt;jks&lt;/code&gt;,
                  &lt;code&gt;key&lt;/code&gt; must be encoded as an
                  &lt;code&gt;EncryptedPrivateKeyInfo&lt;/code&gt; as defined in the PKCS #8 standard.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key (and possibly
                  certificate chain).                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the key (in protected format) to be associated with the alias                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only useful if the protected key is of type
                      &lt;code&gt;java.security.PrivateKey&lt;/code&gt;).                    
                </param>
                <exception>
                    KeyStoreException if this operation fails.                    
                </exception>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="453">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="byte[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
            </method>
            <javadoc line="458">
                Assigns the given certificate to the given alias.
                  &lt;p&gt;If the given alias already exists in this keystore and identifies a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, the certificate associated with it is
                  overridden by the given certificate.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    cert the certificate                    
                </param>
                <exception>
                    KeyStoreException if the given alias already exists and does
                      not identify a &lt;i&gt;trusted certificate entry&lt;/i&gt;, or this operation
                      fails for some other reason.                    
                </exception>
            </javadoc>
            <method name="engineSetCertificateEntry" type="void" line="474">
                <params>
                    <param name="alias" type="String"/>
                    <param name="cert" type="Certificate"/>
                </params>
                <comment line="482">
                    TODO - build CryptoAPI chain?                    
                </comment>
                <comment line="502">
                    trusted-cert entry                    
                </comment>
                <scope line="475"/>
                <scope line="479">
                    <declaration name="chain" type="X509Certificate[]" line="482"/>
                    <declaration name="entry" type="KeyEntry" line="484"/>
                    <declaration name="found" type="boolean" line="485"/>
                    <scope line="487">
                        <scope line="488"/>
                    </scope>
                    <scope line="495"/>
                    <scope line="501">
                        <scope line="504"/>
                        <scope line="507"/>
                    </scope>
                </scope>
                <scope line="512"/>
            </method>
            <javadoc line="518">
                Deletes the entry identified by the given alias from this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <exception>
                    KeyStoreException if the entry cannot be removed.                    
                </exception>
            </javadoc>
            <method name="engineDeleteEntry" type="void" line="527">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <comment line="536">
                    Get end-entity certificate and remove from system cert store                    
                </comment>
                <scope line="528"/>
                <scope line="532">
                    <scope line="533">
                        <declaration name="certChain" type="X509Certificate[]" line="536"/>
                        <scope line="537">
                            <scope line="539">
                                <declaration name="encoding" type="byte[]" line="541"/>
                            </scope>
                            <scope line="545"/>
                        </scope>
                        <declaration name="privateKey" type="Key" line="550"/>
                        <scope line="551"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="562">
                Lists all the alias names of this keystore.                
                <return>
                    enumeration of the alias names                    
                </return>
            </javadoc>
            <method name="engineAliases" type="Enumeration" line="567">
                <declaration name="iter" type="Iterator" line="569"/>
                <anonymous_class line="572">
                    <method name="hasMoreElements" type="boolean" line="574"/>
                    <method name="nextElement" type="Object" line="579">
                        <declaration name="entry" type="KeyEntry" line="580"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="586">
                Checks if the given alias exists in this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    true if the alias exists, false otherwise                    
                </return>
            </javadoc>
            <method name="engineContainsAlias" type="boolean" line="593">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="596">
                    <declaration name="a" type="String" line="597"/>
                </scope>
            </method>
            <javadoc line="605">
                Retrieves the number of entries in this keystore.                
                <return>
                    the number of entries in this keystore                    
                </return>
            </javadoc>
            <method name="engineSize" type="int" line="610"/>
            <javadoc line="614">
                Returns true if the entry identified by the given alias is a
                  &lt;i&gt;key entry&lt;/i&gt;, and false otherwise.                
                <return>
                    true if the entry identified by the given alias is a
                      &lt;i&gt;key entry&lt;/i&gt;, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineIsKeyEntry" type="boolean" line="621">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="623"/>
                <scope line="627">
                    <scope line="628"/>
                </scope>
            </method>
            <javadoc line="636">
                Returns true if the entry identified by the given alias is a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, and false otherwise.                
                <return>
                    true if the entry identified by the given alias is a
                      &lt;i&gt;trusted certificate entry&lt;/i&gt;, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineIsCertificateEntry" type="boolean" line="644">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="645">
                    <scope line="646"/>
                </scope>
            </method>
            <javadoc line="654">
                Returns the (alias) name of the first keystore entry whose certificate
                  matches the given certificate.
                  &lt;p&gt;This method attempts to match the given certificate with each
                  keystore entry. If the entry being considered
                  is a &lt;i&gt;trusted certificate entry&lt;/i&gt;, the given certificate is
                  compared to that entry&apos;s certificate. If the entry being considered is
                  a &lt;i&gt;key entry&lt;/i&gt;, the given certificate is compared to the first
                  element of that entry&apos;s certificate chain (if a chain exists).                
                <param>
                    cert the certificate to match with.                    
                </param>
                <return>
                    the (alias) name of the first entry with matching certificate,
                      or null if no such entry exists in this keystore.                    
                </return>
            </javadoc>
            <method name="engineGetCertificateAlias" type="String" line="671">
                <params>
                    <param name="cert" type="Certificate"/>
                </params>
                <scope line="672">
                    <scope line="673"/>
                </scope>
            </method>
            <javadoc line="681">
                engineStore is currently a no-op.
                  Entries are stored during engineSetEntry.
                  A compatibility mode is supported for applications that assume
                  keystores are stream-based. It permits (but ignores) a non-null
                  &lt;code&gt;stream&lt;/code&gt; or &lt;code&gt;password&lt;/code&gt;.
                  The mode is enabled by default.
                  Set the
                  &lt;code&gt;sun.security.mscapi.keyStoreCompatibilityMode&lt;/code&gt;
                  system property to &lt;code&gt;false&lt;/code&gt; to disable compatibility mode
                  and reject a non-null &lt;code&gt;stream&lt;/code&gt; or &lt;code&gt;password&lt;/code&gt;.                
                <param>
                    stream the output stream, which should be &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <param>
                    password the password, which should be &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <exception>
                    IOException if compatibility mode is disabled and either
                      parameter is non-null.                    
                </exception>
            </javadoc>
            <method name="engineStore" type="void" line="702">
                <params>
                    <param name="stream" type="OutputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="703"/>
                <scope line="707"/>
            </method>
            <javadoc line="712">
                Loads the keystore.
                  A compatibility mode is supported for applications that assume
                  keystores are stream-based. It permits (but ignores) a non-null
                  &lt;code&gt;stream&lt;/code&gt; or &lt;code&gt;password&lt;/code&gt;.
                  The mode is enabled by default.
                  Set the
                  &lt;code&gt;sun.security.mscapi.keyStoreCompatibilityMode&lt;/code&gt;
                  system property to &lt;code&gt;false&lt;/code&gt; to disable compatibility mode
                  and reject a non-null &lt;code&gt;stream&lt;/code&gt; or &lt;code&gt;password&lt;/code&gt;.                
                <param>
                    stream the input stream, which should be &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <param>
                    password the password, which should be &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <exception>
                    IOException if there is an I/O or format problem with the
                      keystore data. Or if compatibility mode is disabled and either
                      parameter is non-null.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the algorithm used to check
                      the integrity of the keystore cannot be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates in the
                      keystore could not be loaded                    
                </exception>
                <exception>
                    SecurityException if the security check for
                      &lt;code&gt;SecurityPermission(&quot;authProvider.&lt;i&gt;name&lt;/i&gt;&quot;)&lt;/code&gt; does not
                      pass, where &lt;i&gt;name&lt;/i&gt; is the value returned by
                      this provider&apos;s &lt;code&gt;getName&lt;/code&gt; method.                    
                </exception>
            </javadoc>
            <method name="engineLoad" type="void" line="741">
                <params>
                    <param name="stream" type="InputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <comment line="751">
                    Use the same security check as AuthProvider.login                    
                </comment>
                <comment line="760">
                    Clear all key entries                    
                </comment>
                <comment line="765">
                    Load keys and/or certificate chains                    
                </comment>
                <scope line="742"/>
                <scope line="746"/>
                <declaration name="sm" type="SecurityManager" line="753"/>
                <scope line="754"/>
                <scope line="762"/>
                <scope line="767"/>
            </method>
            <javadoc line="772">
                Generates a certificate chain from the collection of
                  certificates and stores the result into a key entry.                
            </javadoc>
            <method name="generateCertificateChain" type="void" line="778">
                <params>
                    <param name="alias" type="String"/>
                    <param name="certCollection" type="Collection"/>
                    <param name="entries" type="Collection&lt;KeyEntry&gt;"/>
                </params>
                <comment line="793">
                    Add cert chain                    
                </comment>
                <comment line="798">
                    Ignore the exception and skip this entry
                     TODO - throw CertificateException?                    
                </comment>
                <scope line="780">
                    <declaration name="certChain" type="X509Certificate[]" line="781"/>
                    <declaration name="i" type="int" line="784"/>
                    <scope line="786"/>
                    <declaration name="entry" type="KeyEntry" line="790"/>
                </scope>
                <scope line="796"/>
            </method>
            <javadoc line="802">
                Generates RSA key and certificate chain from the private key handle,
                  collection of certificates and stores the result into key entries.                
            </javadoc>
            <method name="generateRSAKeyAndCertificateChain" type="void" line="809">
                <params>
                    <param name="alias" type="String"/>
                    <param name="hCryptProv" type="long"/>
                    <param name="hCryptKey" type="long"/>
                    <param name="keyLength" type="int"/>
                    <param name="certCollection" type="Collection"/>
                    <param name="entries" type="Collection&lt;KeyEntry&gt;"/>
                </params>
                <comment line="825">
                    Add cert chain                    
                </comment>
                <comment line="830">
                    Ignore the exception and skip this entry
                     TODO - throw CertificateException?                    
                </comment>
                <scope line="811">
                    <declaration name="certChain" type="X509Certificate[]" line="812"/>
                    <declaration name="i" type="int" line="815"/>
                    <scope line="817"/>
                    <declaration name="entry" type="KeyEntry" line="821"/>
                </scope>
                <scope line="828"/>
            </method>
            <javadoc line="834">
                Generates certificates from byte data and stores into cert collection.                
                <param>
                    data Byte data.                    
                </param>
                <param>
                    certCollection Collection of certificates.                    
                </param>
            </javadoc>
            <method name="generateCertificate" type="void" line="841">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="certCollection" type="Collection"/>
                </params>
                <comment line="847">
                    Obtain certificate factory                    
                </comment>
                <comment line="852">
                    Generate certificate                    
                </comment>
                <comment line="858">
                    Ignore the exception and skip this certificate
                     TODO - throw CertificateException?                    
                </comment>
                <comment line="863">
                    Ignore the exception and skip this certificate
                     TODO - throw CertificateException?                    
                </comment>
                <scope line="843">
                    <declaration name="bis" type="ByteArrayInputStream" line="844"/>
                    <scope line="847"/>
                    <declaration name="c" type="Collection" line="852"/>
                </scope>
                <scope line="856"/>
                <scope line="861"/>
            </method>
            <javadoc line="867">
                Returns the name of the keystore.                
            </javadoc>
            <method name="getName" type="String" line="871"/>
            <method name="loadKeysOrCertificateChains" type="void" line="875"/>
            <javadoc line="875">
                Load keys and/or certificates from keystore into Collection.                
                <param>
                    name Name of keystore.                    
                </param>
                <param>
                    entries Collection of key/certificate.                    
                </param>
            </javadoc>
            <method name="storeCertificate" type="void" line="884"/>
            <javadoc line="884">
                Stores a DER-encoded certificate into the certificate store                
                <param>
                    name Name of the keystore.                    
                </param>
                <param>
                    alias Name of the certificate.                    
                </param>
                <param>
                    encoding DER-encoded certificate.                    
                </param>
            </javadoc>
            <method name="removeCertificate" type="void" line="895"/>
            <javadoc line="895">
                Removes the certificate from the certificate store                
                <param>
                    name Name of the keystore.                    
                </param>
                <param>
                    alias Name of the certificate.                    
                </param>
                <param>
                    encoding DER-encoded certificate.                    
                </param>
            </javadoc>
            <method name="destroyKeyContainer" type="void" line="906"/>
            <javadoc line="906">
                Destroys the key container.                
                <param>
                    keyContainerName The name of the key container.                    
                </param>
            </javadoc>
            <method name="generatePrivateKeyBlob" type="byte[]" line="914"/>
            <javadoc line="914">
                Generates a private-key BLOB from a key&apos;s components.                
            </javadoc>
            <method name="storePrivateKey" type="RSAPrivateKey" line="928"/>
        </class>
    </source>