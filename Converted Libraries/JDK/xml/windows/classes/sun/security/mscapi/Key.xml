<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.mscapi">
        <class name="Key" line="2">
            <implements interface="java.security.Key"/>
            <javadoc line="2">
                The handle for an RSA or DSA key using the Microsoft Crypto API.                
                <see>
                    DSAPrivateKey                    
                </see>
                <see>
                    RSAPrivateKey                    
                </see>
                <see>
                    RSAPublicKey                    
                </see>
                <since>
                    1.6                    
                </since>
                <author>
                    Stanley Man-Kit Ho                    
                </author>
            </javadoc>
            <declaration name="hCryptProv" type="long" line="11"/>
            <declaration name="hCryptKey" type="long" line="12"/>
            <declaration name="keyLength" type="int" line="13"/>
            <javadoc line="14">
                Construct a Key object.                
            </javadoc>
            <method name="Key" type="constructor" line="17">
                <params>
                    <param name="hCryptProv" type="long"/>
                    <param name="hCryptKey" type="long"/>
                    <param name="keyLength" type="int"/>
                </params>
            </method>
            <javadoc line="22">
                Finalization method                
            </javadoc>
            <method name="finalize" type="void" line="25">
                <scope line="26">
                    <scope line="27"/>
                </scope>
                <scope line="33"/>
            </method>
            <method name="cleanUp" type="void" line="37"/>
            <javadoc line="37">
                Native method to cleanup the key handle.                
            </javadoc>
            <javadoc line="41">
                Return bit length of the key.                
            </javadoc>
            <method name="bitLength" type="int" line="44"/>
            <javadoc line="47">
                Return native HCRYPTKEY handle.                
            </javadoc>
            <method name="getHCryptKey" type="long" line="50"/>
            <javadoc line="53">
                Return native HCRYPTPROV handle.                
            </javadoc>
            <method name="getHCryptProvider" type="long" line="56"/>
            <method name="getAlgorithm" type="String" line="59"/>
            <javadoc line="59">
                Returns the standard algorithm name for this key. For
                  example, &quot;DSA&quot; would indicate that this key is a DSA key.
                  See Appendix A in the &lt;a href=
                  &quot;../../../guide/security/CryptoSpec.html#AppA&quot;&gt;
                  Java Cryptography Architecture API Specification &amp;amp; Reference &lt;/a&gt;
                  for information about standard algorithm names.                
                <return>
                    the name of the algorithm associated with this key.                    
                </return>
            </javadoc>
            <javadoc line="69">
                Returns the name of the primary encoding format of this key,
                  or null if this key does not support encoding.
                  The primary encoding format is
                  named in terms of the appropriate ASN.1 data format, if an
                  ASN.1 specification for this key exists.
                  For example, the name of the ASN.1 data format for public
                  keys is &lt;I&gt;SubjectPublicKeyInfo&lt;/I&gt;, as
                  defined by the X.509 standard; in this case, the returned format is
                  &lt;code&gt;&quot;X.509&quot;&lt;/code&gt;. Similarly,
                  the name of the ASN.1 data format for private keys is
                  &lt;I&gt;PrivateKeyInfo&lt;/I&gt;,
                  as defined by the PKCS #8 standard; in this case, the returned format is
                  &lt;code&gt;&quot;PKCS#8&quot;&lt;/code&gt;.                
                <return>
                    the primary encoding format of the key.                    
                </return>
            </javadoc>
            <method name="getFormat" type="String" line="85"/>
            <javadoc line="88">
                Returns the key in its primary encoding format, or null
                  if this key does not support encoding.                
                <return>
                    the encoded key, or null if the key does not support
                      encoding.                    
                </return>
            </javadoc>
            <method name="getEncoded" type="byte[]" line="94"/>
            <method name="getContainerName" type="String" line="97"/>
            <method name="getKeyType" type="String" line="98"/>
        </class>
    </source>