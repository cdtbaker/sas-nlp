<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.mscapi">
        <import package="java.math.BigInteger"/>
        <import package="java.security"/>
        <import package="java.security.Key"/>
        <import package="java.security.interfaces"/>
        <import package="java.security.spec"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec"/>
        <import package="sun.security.rsa.RSAKeyFactory"/>
        <class name="RSACipher" line="39">
            <extends class="CipherSpi"/>
            <comment line="63">
                constant for an empty byte array                
            </comment>
            <comment line="66">
                mode constant for public key encryption                
            </comment>
            <comment line="68">
                mode constant for private key decryption                
            </comment>
            <comment line="70">
                mode constant for private key encryption (signing)                
            </comment>
            <comment line="72">
                mode constant for public key decryption (verifying)                
            </comment>
            <comment line="75">
                constant for PKCS#1 v1.5 RSA                
            </comment>
            <comment line="79">
                current mode, one of MODE_* above. Set when init() is called                
            </comment>
            <comment line="82">
                active padding type, one of PAD_* above. Set by setPadding()                
            </comment>
            <comment line="86">
                buffer for the data                
            </comment>
            <comment line="88">
                offset into the buffer (number of bytes buffered)                
            </comment>
            <comment line="91">
                size of the output (the length of the key).                
            </comment>
            <comment line="94">
                the public key, if we were initialized using a public key                
            </comment>
            <comment line="96">
                the private key, if we were initialized using a private key                
            </comment>
            <comment line="103">
                modes do not make sense for RSA, but allow ECB                
            </comment>
            <comment line="104">
                see JCE spec                
            </comment>
            <comment line="111">
                set the padding type                
            </comment>
            <comment line="112">
                see JCE spec                
            </comment>
            <comment line="123">
                return 0 as block size, we are not a block cipher                
            </comment>
            <comment line="124">
                see JCE spec                
            </comment>
            <comment line="129">
                return the output size                
            </comment>
            <comment line="130">
                see JCE spec                
            </comment>
            <comment line="135">
                no iv, return null                
            </comment>
            <comment line="136">
                see JCE spec                
            </comment>
            <comment line="141">
                no parameters, return null                
            </comment>
            <comment line="142">
                see JCE spec                
            </comment>
            <comment line="147">
                see JCE spec                
            </comment>
            <comment line="153">
                see JCE spec                
            </comment>
            <comment line="165">
                see JCE spec                
            </comment>
            <comment line="177">
                initialize this cipher                
            </comment>
            <comment line="253">
                internal update method                
            </comment>
            <comment line="266">
                internal doFinal() method. Here we perform the actual RSA operation                
            </comment>
            <comment line="305">
                see JCE spec                
            </comment>
            <comment line="311">
                see JCE spec                
            </comment>
            <comment line="318">
                see JCE spec                
            </comment>
            <comment line="325">
                see JCE spec                
            </comment>
            <comment line="340">
                see JCE spec                
            </comment>
            <comment line="359">
                see JCE spec                
            </comment>
            <comment line="395">
                see JCE spec                
            </comment>
            <comment line="409">
                Construct an X.509 encoded public key.                
            </comment>
            <comment line="429">
                Construct a PKCS #8 encoded private key.                
            </comment>
            <comment line="449">
                Construct an encoded secret key.                
            </comment>
            <comment line="456">
                Encryptdecrypt a data buffer using Microsoft Crypto API with HCRYPTKEY.
                 It expects and returns ciphertext data in big-endian form.                
            </comment>
            <javadoc line="39">
                RSA cipher implementation using the Microsoft Crypto API.
                  Supports RSA en/decryption and signing/verifying using PKCS#1 v1.5 padding.
                  Objects should be instantiated by calling Cipher.getInstance() using the
                  following algorithm name:
                  . &quot;RSA/ECB/PKCS1Padding&quot; (or &quot;RSA&quot;) for PKCS#1 padding. The mode (blocktype)
                  is selected based on the en/decryption mode and public/private key used.
                  We only do one RSA operation per doFinal() call. If the application passes
                  more data via calls to update() or doFinal(), we throw an
                  IllegalBlockSizeException when doFinal() is called (see JCE API spec).
                  Bulk encryption using RSA does not make sense and is not standardized.
                  Note: RSA keys should be at least 512 bits long                
                <since>
                    1.6                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
                <author>
                    Vincent Ryan                    
                </author>
            </javadoc>
            <declaration name="B0" type="byte[]" line="63"/>
            <declaration name="MODE_ENCRYPT" type="int" line="66"/>
            <declaration name="MODE_DECRYPT" type="int" line="68"/>
            <declaration name="MODE_SIGN" type="int" line="70"/>
            <declaration name="MODE_VERIFY" type="int" line="72"/>
            <declaration name="PAD_PKCS1" type="String" line="75"/>
            <declaration name="PAD_PKCS1_LENGTH" type="int" line="76"/>
            <declaration name="mode" type="int" line="79"/>
            <declaration name="paddingType" type="String" line="82"/>
            <declaration name="paddingLength" type="int" line="83"/>
            <declaration name="buffer" type="byte[]" line="86"/>
            <declaration name="bufOfs" type="int" line="88"/>
            <declaration name="outputSize" type="int" line="91"/>
            <declaration name="publicKey" type="sun.security.mscapi.Key" line="94"/>
            <declaration name="privateKey" type="sun.security.mscapi.Key" line="96"/>
            <method name="RSACipher" type="constructor" line="98"/>
            <method name="engineSetMode" type="void" line="104">
                <params>
                    <param name="mode" type="String"/>
                </params>
                <scope line="105"/>
            </method>
            <method name="engineSetPadding" type="void" line="113">
                <params>
                    <param name="paddingName" type="String"/>
                </params>
                <scope line="114"/>
                <scope line="116"/>
            </method>
            <method name="engineGetBlockSize" type="int" line="124"/>
            <method name="engineGetOutputSize" type="int" line="130">
                <params>
                    <param name="inputLen" type="int"/>
                </params>
            </method>
            <method name="engineGetIV" type="byte[]" line="136"/>
            <method name="engineGetParameters" type="AlgorithmParameters" line="142"/>
            <method name="engineInit" type="void" line="148">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <method name="engineInit" type="void" line="155">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="157"/>
            </method>
            <method name="engineInit" type="void" line="167">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameters"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="169"/>
            </method>
            <method name="init" type="void" line="177">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                </params>
                <comment line="189">
                    reset                    
                </comment>
                <comment line="201">
                    Convert key to MSCAPI format                    
                </comment>
                <comment line="206">
                    Check against the local and global values to make sure                    
                </comment>
                <comment line="207">
                    the sizes are ok.  Round up to the nearest byte.                    
                </comment>
                <comment line="214">
                    Adjust key length due to sign bit                    
                </comment>
                <declaration name="encrypt" type="boolean" line="179"/>
                <scope line="196">
                    <scope line="197">
                        <declaration name="rsaKey" type="java.security.interfaces.RSAPublicKey" line="198"/>
                        <declaration name="modulus" type="BigInteger" line="203"/>
                        <declaration name="exponent" type="BigInteger" line="204"/>
                        <declaration name="modulusBytes" type="byte[]" line="211"/>
                        <declaration name="exponentBytes" type="byte[]" line="212"/>
                        <declaration name="keyBitLength" type="int" line="215"/>
                        <declaration name="keyBlob" type="byte[]" line="219"/>
                        <scope line="222"/>
                        <scope line="225"/>
                    </scope>
                    <scope line="229"/>
                </scope>
                <scope line="234"/>
                <scope line="239"/>
                <scope line="244"/>
            </method>
            <method name="update" type="void" line="253">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
                <scope line="254"/>
                <scope line="257"/>
            </method>
            <method name="doFinal" type="byte[]" line="267">
                <scope line="268"/>
                <scope line="273">
                    <declaration name="data" type="byte[]" line="274"/>
                </scope>
                <scope line="296"/>
                <scope line="299"/>
            </method>
            <method name="engineUpdate" type="byte[]" line="305">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
            </method>
            <method name="engineUpdate" type="int" line="312">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                </params>
            </method>
            <method name="engineDoFinal" type="byte[]" line="319">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
            </method>
            <method name="engineDoFinal" type="int" line="327">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                </params>
                <scope line="328"/>
                <declaration name="result" type="byte[]" line="333"/>
                <declaration name="n" type="int" line="334"/>
            </method>
            <method name="engineWrap" type="byte[]" line="341">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <comment line="342">
                    TODO - unextractable key                    
                </comment>
                <comment line="353">
                    should not occur                    
                </comment>
                <declaration name="encoded" type="byte[]" line="342"/>
                <scope line="343"/>
                <scope line="346"/>
                <scope line="350"/>
                <scope line="352"/>
            </method>
            <method name="engineUnwrap" type="java.security.Key" line="360">
                <params>
                    <param name="wrappedKey" type="byte[]"/>
                    <param name="algorithm" type="String"/>
                    <param name="type" type="int"/>
                </params>
                <comment line="385">
                    should not occur                    
                </comment>
                <comment line="389">
                    should not occur, handled with length check above                    
                </comment>
                <scope line="362"/>
                <scope line="367">
                    <declaration name="encoding" type="byte[]" line="368"/>
                </scope>
                <scope line="384"/>
                <scope line="388"/>
            </method>
            <method name="engineGetKeySize" type="int" line="395">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <scope line="397"/>
                <scope line="400"/>
                <scope line="403"/>
            </method>
            <method name="constructPublicKey" type="PublicKey" line="411">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                    <param name="encodedKeyAlgorithm" type="String"/>
                </params>
                <scope line="413">
                    <declaration name="keyFactory" type="KeyFactory" line="414"/>
                    <declaration name="keySpec" type="X509EncodedKeySpec" line="415"/>
                </scope>
                <scope line="419"/>
                <scope line="423"/>
            </method>
            <method name="constructPrivateKey" type="PrivateKey" line="431">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                    <param name="encodedKeyAlgorithm" type="String"/>
                </params>
                <scope line="433">
                    <declaration name="keyFactory" type="KeyFactory" line="434"/>
                    <declaration name="keySpec" type="PKCS8EncodedKeySpec" line="435"/>
                </scope>
                <scope line="439"/>
                <scope line="443"/>
            </method>
            <method name="constructSecretKey" type="SecretKey" line="450">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                    <param name="encodedKeyAlgorithm" type="String"/>
                </params>
            </method>
            <method name="encryptDecrypt" type="byte[]" line="459"/>
        </class>
    </source>