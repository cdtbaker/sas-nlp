<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.mscapi">
        <import package="java.math.BigInteger"/>
        <import package="java.security"/>
        <import package="java.security.Key"/>
        <import package="java.security.interfaces"/>
        <import package="java.security.spec"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec"/>
        <import package="sun.security.rsa.RSAKeyFactory"/>
        <class name="RSACipher" line="10">
            <extends class="CipherSpi"/>
            <javadoc line="10">
                RSA cipher implementation using the Microsoft Crypto API.
                  Supports RSA en/decryption and signing/verifying using PKCS#1 v1.5 padding.
                  Objects should be instantiated by calling Cipher.getInstance() using the
                  following algorithm name:
                  . &quot;RSA/ECB/PKCS1Padding&quot; (or &quot;RSA&quot;) for PKCS#1 padding. The mode (blocktype)
                  is selected based on the en/decryption mode and public/private key used.
                  We only do one RSA operation per doFinal() call. If the application passes
                  more data via calls to update() or doFinal(), we throw an
                  IllegalBlockSizeException when doFinal() is called (see JCE API spec).
                  Bulk encryption using RSA does not make sense and is not standardized.
                  Note: RSA keys should be at least 512 bits long                
                <since>
                    1.6                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
                <author>
                    Vincent Ryan                    
                </author>
            </javadoc>
            <declaration name="B0" type="byte[]" line="27"/>
            <declaration name="MODE_ENCRYPT" type="int" line="28"/>
            <declaration name="MODE_DECRYPT" type="int" line="29"/>
            <declaration name="MODE_SIGN" type="int" line="30"/>
            <declaration name="MODE_VERIFY" type="int" line="31"/>
            <declaration name="PAD_PKCS1" type="String" line="32"/>
            <declaration name="PAD_PKCS1_LENGTH" type="int" line="33"/>
            <declaration name="mode" type="int" line="34"/>
            <declaration name="paddingType" type="String" line="35"/>
            <declaration name="paddingLength" type="int" line="36"/>
            <declaration name="buffer" type="byte[]" line="37"/>
            <declaration name="bufOfs" type="int" line="38"/>
            <declaration name="outputSize" type="int" line="39"/>
            <declaration name="publicKey" type="sun.security.mscapi.Key" line="40"/>
            <declaration name="privateKey" type="sun.security.mscapi.Key" line="41"/>
            <method name="RSACipher" type="constructor" line="42"/>
            <method name="engineSetMode" type="void" line="45">
                <params>
                    <param name="mode" type="String"/>
                </params>
                <scope line="46"/>
            </method>
            <method name="engineSetPadding" type="void" line="50">
                <params>
                    <param name="paddingName" type="String"/>
                </params>
                <scope line="51"/>
                <scope line="54"/>
            </method>
            <method name="engineGetBlockSize" type="int" line="58"/>
            <method name="engineGetOutputSize" type="int" line="61">
                <params>
                    <param name="inputLen" type="int"/>
                </params>
            </method>
            <method name="engineGetIV" type="byte[]" line="64"/>
            <method name="engineGetParameters" type="AlgorithmParameters" line="67"/>
            <method name="engineInit" type="void" line="70">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <method name="engineInit" type="void" line="73">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="74"/>
            </method>
            <method name="engineInit" type="void" line="79">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameters"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="80"/>
            </method>
            <method name="init" type="void" line="85">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="encrypt" type="boolean" line="86"/>
                <scope line="101">
                    <scope line="102">
                        <declaration name="rsaKey" type="java.security.interfaces.RSAPublicKey" line="103"/>
                        <declaration name="modulus" type="BigInteger" line="104"/>
                        <declaration name="exponent" type="BigInteger" line="105"/>
                        <declaration name="modulusBytes" type="byte[]" line="107"/>
                        <declaration name="exponentBytes" type="byte[]" line="108"/>
                        <declaration name="keyBitLength" type="int" line="109"/>
                        <declaration name="keyBlob" type="byte[]" line="110"/>
                        <scope line="111"/>
                        <scope line="114"/>
                    </scope>
                    <scope line="118"/>
                </scope>
                <scope line="122"/>
                <scope line="128"/>
                <scope line="134"/>
            </method>
            <method name="update" type="void" line="140">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
                <scope line="141"/>
                <scope line="144"/>
            </method>
            <method name="doFinal" type="byte[]" line="151">
                <scope line="152"/>
                <scope line="155">
                    <declaration name="data" type="byte[]" line="156"/>
                </scope>
                <scope line="170"/>
                <scope line="173"/>
            </method>
            <method name="engineUpdate" type="byte[]" line="177">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
            </method>
            <method name="engineUpdate" type="int" line="181">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                </params>
            </method>
            <method name="engineDoFinal" type="byte[]" line="185">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
            </method>
            <method name="engineDoFinal" type="int" line="189">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                </params>
                <scope line="190"/>
                <declaration name="result" type="byte[]" line="194"/>
                <declaration name="n" type="int" line="195"/>
            </method>
            <method name="engineWrap" type="byte[]" line="199">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="encoded" type="byte[]" line="200"/>
                <scope line="201"/>
                <scope line="204"/>
                <scope line="208"/>
                <scope line="211"/>
            </method>
            <method name="engineUnwrap" type="java.security.Key" line="215">
                <params>
                    <param name="wrappedKey" type="byte[]"/>
                    <param name="algorithm" type="String"/>
                    <param name="type" type="int"/>
                </params>
                <scope line="216"/>
                <scope line="220">
                    <declaration name="encoding" type="byte[]" line="221"/>
                </scope>
                <scope line="233"/>
                <scope line="236"/>
            </method>
            <method name="engineGetKeySize" type="int" line="240">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <scope line="241"/>
                <scope line="244"/>
                <scope line="247"/>
            </method>
            <method name="constructPublicKey" type="PublicKey" line="251">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                    <param name="encodedKeyAlgorithm" type="String"/>
                </params>
                <scope line="252">
                    <declaration name="keyFactory" type="KeyFactory" line="253"/>
                    <declaration name="keySpec" type="X509EncodedKeySpec" line="254"/>
                </scope>
                <scope line="257"/>
                <scope line="260"/>
            </method>
            <method name="constructPrivateKey" type="PrivateKey" line="264">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                    <param name="encodedKeyAlgorithm" type="String"/>
                </params>
                <scope line="265">
                    <declaration name="keyFactory" type="KeyFactory" line="266"/>
                    <declaration name="keySpec" type="PKCS8EncodedKeySpec" line="267"/>
                </scope>
                <scope line="270"/>
                <scope line="273"/>
            </method>
            <method name="constructSecretKey" type="SecretKey" line="277">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                    <param name="encodedKeyAlgorithm" type="String"/>
                </params>
            </method>
            <method name="encryptDecrypt" type="byte[]" line="280"/>
        </class>
    </source>