<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.windows">
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.ComponentColorModel"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.image.Raster"/>
        <import package="sun.awt.SunHints"/>
        <import package="sun.awt.Win32GraphicsConfig"/>
        <import package="sun.awt.Win32GraphicsDevice"/>
        <import package="sun.awt.windows.WComponentPeer"/>
        <import package="sun.java2d.ScreenUpdateManager"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.SurfaceDataProxy"/>
        <import package="sun.java2d.pipe.Region"/>
        <import package="sun.java2d.pipe.PixelToShapeConverter"/>
        <import package="sun.java2d.loops.GraphicsPrimitive"/>
        <import package="sun.java2d.loops.SurfaceType"/>
        <import package="sun.java2d.loops.CompositeType"/>
        <import package="sun.java2d.loops.RenderLoops"/>
        <import package="sun.java2d.loops.XORComposite"/>
        <class name="GDIWindowSurfaceData" line="53">
            <extends class="SurfaceData"/>
            <comment line="59">
                GDI onscreen surface type                
            </comment>
            <comment line="63">
                Generic GDI surface type - used for registering all loops                
            </comment>
            <declaration name="peer" type="WComponentPeer" line="54"/>
            <declaration name="graphicsConfig" type="Win32GraphicsConfig" line="55"/>
            <declaration name="solidloops" type="RenderLoops" line="56"/>
            <declaration name="DESC_GDI" type="String" line="59"/>
            <declaration name="AnyGdi" type="SurfaceType" line="63"/>
            <declaration name="IntRgbGdi" type="SurfaceType" line="66"/>
            <declaration name="Ushort565RgbGdi" type="SurfaceType" line="69"/>
            <declaration name="Ushort555RgbGdi" type="SurfaceType" line="72"/>
            <declaration name="ThreeByteBgrGdi" type="SurfaceType" line="75"/>
            <method name="initIDs" type="void" line="78"/>
            <scope line="80">
                <scope line="82"/>
            </scope>
            <method name="getSurfaceType" type="SurfaceType" line="88">
                <params>
                    <param name="cm" type="ColorModel"/>
                </params>
                <scope line="92">
                    <scope line="93"/>
                    <scope line="95"/>
                </scope>
                <scope line="98"/>
                <scope line="106"/>
                <scope line="108"/>
                <scope line="113"/>
                <scope line="116"/>
                <scope line="118"/>
            </method>
            <method name="createData" type="GDIWindowSurfaceData" line="128">
                <params>
                    <param name="peer" type="WComponentPeer"/>
                </params>
                <declaration name="sType" type="SurfaceType" line="129"/>
            </method>
            <method name="makeProxyFor" type="SurfaceDataProxy" line="134">
                <params>
                    <param name="srcData" type="SurfaceData"/>
                </params>
            </method>
            <method name="getRaster" type="Raster" line="138">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <declaration name="gdiPipe" type="GDIRenderer" line="142"/>
            <declaration name="gdiTxPipe" type="PixelToShapeConverter" line="143"/>
            <scope line="145">
                <scope line="147"/>
            </scope>
            <method name="validatePipe" type="void" line="154">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                </params>
                <comment line="162">
                    Do this to init textpipe correctly; we will override the
                     other non-text pipes below
                     REMIND: we should clean this up eventually instead of
                     having this work duplicated.                    
                </comment>
                <comment line="171">
                                        
                </comment>
                <comment line="209">
                    This is needed for AA text.
                     Note that even a SolidTextRenderer can dispatch AA text
                     if a GlyphVector overrides the AA setting.
                     We use getRenderLoops() rather than setting solidloops
                     directly so that we get the appropriate loops in XOR mode.                    
                </comment>
                <comment line="215">
                    assert(some pipe will always be a LoopBasedPipe)                    
                </comment>
                <scope line="159">
                    <scope line="160"/>
                    <scope line="166"/>
                    <scope line="197"/>
                    <scope line="200"/>
                    <scope line="203"/>
                    <scope line="213"/>
                </scope>
                <scope line="217"/>
            </method>
            <method name="getRenderLoops" type="RenderLoops" line="222">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                </params>
                <scope line="225"/>
            </method>
            <method name="getDeviceConfiguration" type="GraphicsConfiguration" line="231"/>
            <method name="initOps" type="void" line="235"/>
            <javadoc line="235">
                Initializes the native Ops pointer.                
            </javadoc>
            <method name="GDIWindowSurfaceData" type="constructor" line="241">
                <params>
                    <param name="peer" type="WComponentPeer"/>
                    <param name="sType" type="SurfaceType"/>
                </params>
                <declaration name="cm" type="ColorModel" line="243"/>
                <declaration name="rMask" type="int" line="245"/>
                <declaration name="depth" type="int" line="246"/>
                <scope line="250"/>
                <scope line="252"/>
                <scope line="259">
                    <declaration name="dcm" type="DirectColorModel" line="260"/>
                </scope>
                <declaration name="gd" type="Win32GraphicsDevice" line="269"/>
            </method>
            <javadoc line="275">
                {@inheritDoc}Overridden to use ScreenUpdateManager to obtain the replacement surface.                
                <see>
                    sun.java2d.ScreenUpdateManager#getReplacementScreenSurface                    
                </see>
            </javadoc>
            <method name="getReplacement" type="SurfaceData" line="283">
                <declaration name="mgr" type="ScreenUpdateManager" line="284"/>
            </method>
            <method name="getBounds" type="Rectangle" line="288">
                <declaration name="r" type="Rectangle" line="289"/>
            </method>
            <method name="copyArea" type="boolean" line="296">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                </params>
                <declaration name="comptype" type="CompositeType" line="297"/>
                <scope line="302">
                    <declaration name="dstx1" type="int" line="305"/>
                    <declaration name="dsty1" type="int" line="306"/>
                    <declaration name="dstx2" type="int" line="307"/>
                    <declaration name="dsty2" type="int" line="308"/>
                    <declaration name="clip" type="Region" line="309"/>
                    <scope line="314"/>
                </scope>
            </method>
            <method name="invalidateSD" type="void" line="324"/>
            <method name="invalidate" type="void" line="326">
                <comment line="331">
                    peer.invalidateBackBuffer();                    
                </comment>
                <scope line="327"/>
            </method>
            <javadoc line="334">
                Returns destination Component associated with this SurfaceData.                
            </javadoc>
            <method name="getDestination" type="Object" line="338"/>
            <method name="getPeer" type="WComponentPeer" line="342"/>
        </class>
    </source>