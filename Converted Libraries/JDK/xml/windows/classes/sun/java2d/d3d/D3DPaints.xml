<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.d3d">
        <import package="java.awt.LinearGradientPaint"/>
        <import package="java.awt.MultipleGradientPaint"/>
        <import package="java.awt.MultipleGradientPaint.ColorSpaceType"/>
        <import package="java.awt.MultipleGradientPaint.CycleMethod"/>
        <import package="java.awt.TexturePaint"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.loops.CompositeType"/>
        <import package="sun.java2d.d3d.D3DContext.D3DContextCaps"/>
        <class name="D3DPaints" line="41">
            <declaration name="impls" type="Map&lt;Integer,D3DPaints&gt;" line="43"/>
            <javadoc line="43">
                Holds all registered implementations, using the corresponding
                  SunGraphics2D.PAINT_ constant as the hash key.                
            </javadoc>
            <scope line="50"/>
            <javadoc line="57">
                Attempts to locate an implementation corresponding to the paint state
                  of the provided SunGraphics2D object.  If no implementation can be
                  found, or if the paint cannot be accelerated under the conditions
                  of the SunGraphics2D, this method returns false; otherwise, returns
                  true.                
            </javadoc>
            <method name="isValid" type="boolean" line="64">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                </params>
                <declaration name="impl" type="D3DPaints" line="65"/>
            </method>
            <method name="isPaintValid" type="boolean" line="69"/>
            <javadoc line="69">
                Returns true if this implementation is able to accelerate the
                  Paint object associated with, and under the conditions of, the
                  provided SunGraphics2D instance; otherwise returns false.                
            </javadoc>
            <class name="Gradient" line="76">
                <extends class="D3DPaints"/>
                <javadoc line="76">
                    GradientPaint support                    
                </javadoc>
                <method name="Gradient" type="constructor" line="79"/>
                <javadoc line="81">
                    Returns true if the given GradientPaint instance can be
                      used by the accelerated D3DPaints.Gradient implementation.
                      A GradientPaint is considered valid only if the destination
                      has support for fragment shaders.                    
                </javadoc>
                <method name="isPaintValid" type="boolean" line="88">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                    </params>
                    <declaration name="dstData" type="D3DSurfaceData" line="89"/>
                    <declaration name="gd" type="D3DGraphicsDevice" line="90"/>
                </method>
            </class>
            <class name="Texture" line="96">
                <extends class="D3DPaints"/>
                <javadoc line="96">
                    TexturePaint support                    
                </javadoc>
                <method name="Texture" type="constructor" line="99"/>
                <javadoc line="101">
                    Returns true if the given TexturePaint instance can be used by the
                      accelerated BufferedPaints.Texture implementation.
                      A TexturePaint is considered valid if the following conditions
                      are met:
                      - the texture image dimensions are power-of-two
                      - the texture image can be (or is already) cached in a D3D
                      texture object                    
                </javadoc>
                <method name="isPaintValid" type="boolean" line="112">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                    </params>
                    <comment line="118">
                        verify that the texture image dimensions are pow2                        
                    </comment>
                    <comment line="128">
                        verify that the texture image is square if it has to be                        
                    </comment>
                    <comment line="138">
                        REMIND: this is a hack that attempts to cache the system
                                 memory image from the TexturePaint instance into a
                                 D3D texture...                        
                    </comment>
                    <comment line="149">
                        verify that the source surface is actually a texture                        
                    </comment>
                    <declaration name="paint" type="TexturePaint" line="113"/>
                    <declaration name="dstData" type="D3DSurfaceData" line="114"/>
                    <declaration name="bi" type="BufferedImage" line="115"/>
                    <declaration name="gd" type="D3DGraphicsDevice" line="118"/>
                    <declaration name="imgw" type="int" line="120"/>
                    <declaration name="imgh" type="int" line="121"/>
                    <scope line="122">
                        <scope line="123"/>
                    </scope>
                    <scope line="129"/>
                    <declaration name="srcData" type="SurfaceData" line="133"/>
                    <scope line="136">
                        <scope line="143"/>
                    </scope>
                    <declaration name="d3dData" type="D3DSurfaceData" line="149"/>
                    <scope line="150"/>
                </method>
            </class>
            <class name="MultiGradient" line="158">
                <extends class="D3DPaints"/>
                <javadoc line="158">
                    Shared MultipleGradientPaint support                    
                </javadoc>
                <declaration name="MULTI_MAX_FRACTIONS_D3D" type="int" line="162"/>
                <javadoc line="162">
                    Note that this number is lower than the MULTI_MAX_FRACTIONS
                      defined in the superclass.  The D3D pipeline now uses a
                      slightly more complicated shader (to avoid the gradient banding
                      issues), which has a higher instruction count.  To ensure that
                      all versions of the shader can be compiled for PS 2.0 hardware,
                      we need to cap this maximum value at 8.                    
                </javadoc>
                <method name="MultiGradient" type="constructor" line="172"/>
                <javadoc line="174">
                    Returns true if the given MultipleGradientPaint instance can be
                      used by the accelerated D3DPaints.MultiGradient implementation.
                      A MultipleGradientPaint is considered valid if the following
                      conditions are met:
                      - the number of gradient &quot;stops&quot; is &lt;= MAX_FRACTIONS
                      - the destination has support for fragment shaders                    
                </javadoc>
                <method name="isPaintValid" type="boolean" line="183">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                    </params>
                    <comment line="186">
                        REMIND: ugh, this creates garbage; would be nicer if
                         we had a MultipleGradientPaint.getNumStops() method...                        
                    </comment>
                    <declaration name="paint" type="MultipleGradientPaint" line="184"/>
                    <scope line="187"/>
                    <declaration name="dstData" type="D3DSurfaceData" line="191"/>
                    <declaration name="gd" type="D3DGraphicsDevice" line="192"/>
                    <scope line="194"/>
                </method>
            </class>
            <class name="LinearGradient" line="201">
                <extends class="MultiGradient"/>
                <javadoc line="201">
                    LinearGradientPaint support                    
                </javadoc>
                <method name="LinearGradient" type="constructor" line="204"/>
                <method name="isPaintValid" type="boolean" line="207">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                    </params>
                    <comment line="219">
                        we can delegate to the optimized two-color gradient
                         codepath, which should be faster                        
                    </comment>
                    <declaration name="paint" type="LinearGradientPaint" line="208"/>
                    <scope line="213">
                        <declaration name="dstData" type="D3DSurfaceData" line="214"/>
                        <declaration name="gd" type="D3DGraphicsDevice" line="215"/>
                        <scope line="217"/>
                    </scope>
                </method>
            </class>
            <class name="RadialGradient" line="228">
                <extends class="MultiGradient"/>
                <javadoc line="228">
                    RadialGradientPaint support                    
                </javadoc>
                <method name="RadialGradient" type="constructor" line="231"/>
            </class>
        </class>
    </source>