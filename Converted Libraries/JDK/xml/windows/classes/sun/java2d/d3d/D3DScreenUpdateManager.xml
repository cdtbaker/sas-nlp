<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.d3d">
        <import package="java.awt.Color"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Window"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.AWTAccessor"/>
        <import package="sun.awt.Win32GraphicsConfig"/>
        <import package="sun.awt.windows.WComponentPeer"/>
        <import package="sun.java2d.InvalidPipeException"/>
        <import package="sun.java2d.ScreenUpdateManager"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.windows.GDIWindowSurfaceData"/>
        <import package="sun.java2d.d3d.D3DSurfaceData.D3DWindowSurfaceData"/>
        <import package="sun.java2d.windows.WindowsFlags"/>
        <class name="D3DScreenUpdateManager" line="24">
            <extends class="ScreenUpdateManager"/>
            <implements interface="Runnable"/>
            <javadoc line="24">
                This class handles rendering to the screen with the D3D pipeline.
                  Since it is not possible to render directly to the front buffer
                  with D3D9, we create a swap chain surface (with COPY effect) in place of the
                  GDIWindowSurfaceData. A background thread handles the swap chain flips.
                  There are some restrictions to which windows we would use this for.                
                <see>
                    #createScreenSurface()                    
                </see>
            </javadoc>
            <declaration name="MIN_WIN_SIZE" type="int" line="33"/>
            <javadoc line="33">
                A window must be at least MIN_WIN_SIZE in one or both dimensions
                  to be considered for the update manager.                
            </javadoc>
            <declaration name="done" type="boolean" line="38"/>
            <declaration name="screenUpdater" type="Thread" line="39"/>
            <declaration name="needsUpdateNow" type="boolean" line="40"/>
            <declaration name="runLock" type="Object" line="41"/>
            <javadoc line="41">
                Object used by the screen updater thread for waiting                
            </javadoc>
            <declaration name="d3dwSurfaces" type="ArrayList&lt;D3DWindowSurfaceData&gt;" line="45"/>
            <javadoc line="45">
                List of D3DWindowSurfaceData surfaces. Surfaces are added to the
                  list when a graphics object is created, and removed when the surface
                  is invalidated.                
            </javadoc>
            <declaration name="gdiSurfaces" type="HashMap&lt;D3DWindowSurfaceData,GDIWindowSurfaceData&gt;" line="51"/>
            <javadoc line="51">
                Cache of GDIWindowSurfaceData surfaces corresponding to the
                  D3DWindowSurfaceData surfaces. Surfaces are added to the list when
                  a d3dw surface is lost and could not be restored (due to lack of vram,
                  for example), and removed then the d3dw surface is invalidated.                
            </javadoc>
            <method name="D3DScreenUpdateManager" type="constructor" line="58">
                <anonymous_class line="60">
                    <method name="run" type="Object" line="61">
                        <declaration name="currentTG" type="ThreadGroup" line="62"/>
                        <declaration name="parentTG" type="ThreadGroup" line="63"/>
                        <scope line="64"/>
                        <anonymous_class line="68">
                            <method name="run" type="void" line="69"/>
                        </anonymous_class>
                        <declaration name="shutdown" type="Thread" line="68"/>
                        <scope line="76"/>
                        <scope line="79"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="87">
                If possible, creates a D3DWindowSurfaceData (which is actually
                  a back-buffer surface). If the creation fails, returns GDI
                  onscreen surface instead.
                  Note that the created D3D surface does not initialize the native
                  resources (and is marked lost) to avoid wasting video memory. It is
                  restored when a graphics object is requested from the peer.
                  Note that this method is called from a synchronized block in
                  WComponentPeer, so we don&apos;t need to synchronize
                  Note that we only create a substibute d3dw surface if certain conditions
                  are met
                  &lt;ul&gt;
                  &lt;li&gt;the fake d3d rendering on screen is not disabled via flag
                  &lt;li&gt;d3d on the device is enabled
                  &lt;li&gt;surface is larger than MIN_WIN_SIZE (don&apos;t bother for smaller ones)
                  &lt;li&gt;it doesn&apos;t have a backBuffer for a BufferStrategy already
                  &lt;li&gt;the peer is either Canvas, Panel, Window, Frame,
                  Dialog or EmbeddedFrame
                  &lt;/ul&gt;                
                <param>
                    gc GraphicsConfiguration on associated with the surface                    
                </param>
                <param>
                    peer peer for which the surface is to be created                    
                </param>
                <param>
                    bbNum number of back-buffers requested. if this number is >0,
                      method returns GDI surface (we don't want to have two swap chains)                    
                </param>
                <param>
                    isResize whether this surface is being created in response to
                      a component resize event. This determines whether a repaint event will
                      be issued after a surface is created: it will be if <code>isResize</code>
                      is <code>true</code>.                    
                </param>
                <return>
                    surface data to be use for onscreen rendering                    
                </return>
            </javadoc>
            <method name="createScreenSurface" type="SurfaceData" line="116">
                <params>
                    <param name="gc" type="Win32GraphicsConfig"/>
                    <param name="peer" type="WComponentPeer"/>
                    <param name="bbNum" type="int"/>
                    <param name="isResize" type="boolean"/>
                </params>
                <scope line="117"/>
                <declaration name="sd" type="SurfaceData" line="120"/>
                <scope line="121">
                    <scope line="122"/>
                    <scope line="125"/>
                </scope>
                <scope line="129"/>
                <scope line="132"/>
            </method>
            <javadoc line="137">
                Determines if we can use a d3d surface for onscreen rendering for this
                  peer.
                  We only create onscreen d3d surfaces if the following conditions are met:
                  - d3d is enabled on this device and onscreen emulation is enabled
                  - window is big enough to bother (either dimension &gt; MIN_WIN_SIZE)
                  - this heavyweight doesn&apos;t have a BufferStrategy
                  - if we are in full-screen mode then it must be the peer of the
                  full-screen window (since there could be only one SwapChain in fs)
                  and it must not have any heavyweight children
                  (as Present() doesn&apos;t respect component clipping in fullscreen mode)
                  - it&apos;s one of the classes likely to have custom rendering worth
                  accelerating                
                <returns>
                    true if we can use a d3d surface for this peer's onscreen
                      rendering                    
                </returns>
            </javadoc>
            <method name="canUseD3DOnScreen" type="boolean" line="153">
                <params>
                    <param name="peer" type="WComponentPeer"/>
                    <param name="gc" type="Win32GraphicsConfig"/>
                    <param name="bbNum" type="int"/>
                </params>
                <scope line="154"/>
                <declaration name="d3dgc" type="D3DGraphicsConfig" line="157"/>
                <declaration name="d3dgd" type="D3DGraphicsDevice" line="158"/>
                <declaration name="peerName" type="String" line="159"/>
                <declaration name="r" type="Rectangle" line="160"/>
                <declaration name="target" type="Component" line="161"/>
                <declaration name="fsw" type="Window" line="162"/>
            </method>
            <javadoc line="165">
                Creates a graphics object for the passed in surface data. If
                  the surface is lost, it is restored.
                  If the surface wasn&apos;t lost or the restoration was successful
                  the surface is added to the list of maintained surfaces
                  (if it hasn&apos;t been already).
                  If the updater thread hasn&apos;t been created yet , it will be created and
                  started.                
                <param>
                    sd surface data for which to create SunGraphics2D                    
                </param>
                <param>
                    peer peer associated with the surface data                    
                </param>
                <param>
                    fgColor fg color to be used in graphics                    
                </param>
                <param>
                    bgColor bg color to be used in graphics                    
                </param>
                <param>
                    font font to be used in graphics                    
                </param>
                <return>
                    a SunGraphics2D object for the surface (or for temp GDI
                      surface data)                    
                </return>
            </javadoc>
            <method name="createGraphics" type="Graphics2D" line="181">
                <params>
                    <param name="sd" type="SurfaceData"/>
                    <param name="peer" type="WComponentPeer"/>
                    <param name="fgColor" type="Color"/>
                    <param name="bgColor" type="Color"/>
                    <param name="font" type="Font"/>
                </params>
                <scope line="182">
                    <declaration name="d3dw" type="D3DWindowSurfaceData" line="183"/>
                    <scope line="184"/>
                </scope>
            </method>
            <javadoc line="192">
                Posts a repaint event for the peer&apos;s target to the EDT                
                <param>
                    peer for which target's the repaint should be issued                    
                </param>
            </javadoc>
            <method name="repaintPeerTarget" type="void" line="196">
                <params>
                    <param name="peer" type="WComponentPeer"/>
                </params>
                <declaration name="target" type="Component" line="197"/>
                <declaration name="bounds" type="Rectangle" line="198"/>
            </method>
            <javadoc line="201">
                Adds a surface to the list of tracked surfaces.                
                <param>
                    d3dw the surface to be added                    
                </param>
            </javadoc>
            <method name="trackScreenSurface" type="void" line="205">
                <params>
                    <param name="sd" type="SurfaceData"/>
                </params>
                <scope line="206">
                    <scope line="207">
                        <scope line="208"/>
                        <declaration name="d3dw" type="D3DWindowSurfaceData" line="211"/>
                        <scope line="212"/>
                    </scope>
                </scope>
            </method>
            <method name="dropScreenSurface" type="void" line="219">
                <params>
                    <param name="sd" type="SurfaceData"/>
                </params>
                <scope line="220">
                    <declaration name="d3dw" type="D3DWindowSurfaceData" line="221"/>
                </scope>
            </method>
            <method name="getReplacementScreenSurface" type="SurfaceData" line="226">
                <params>
                    <param name="peer" type="WComponentPeer"/>
                    <param name="sd" type="SurfaceData"/>
                </params>
                <declaration name="newSurface" type="SurfaceData" line="227"/>
            </method>
            <javadoc line="231">
                Remove the gdi surface corresponding to the passed d3dw surface
                  from list of the cached gdi surfaces.                
                <param>
                    d3dw surface for which associated gdi surface is to be removed                    
                </param>
            </javadoc>
            <method name="removeGdiSurface" type="void" line="236">
                <params>
                    <param name="d3dw" type="D3DWindowSurfaceData"/>
                </params>
                <scope line="237">
                    <declaration name="gdisd" type="GDIWindowSurfaceData" line="238"/>
                    <scope line="239"/>
                </scope>
            </method>
            <javadoc line="245">
                If the update thread hasn&apos;t yet been created, it will be;
                  otherwise it is awaken                
            </javadoc>
            <method name="startUpdateThread" type="void" line="249">
                <scope line="250">
                    <anonymous_class line="251">
                        <method name="run" type="Object" line="252">
                            <declaration name="tg" type="ThreadGroup" line="253"/>
                            <declaration name="t" type="Thread" line="255"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="264"/>
            </method>
            <javadoc line="268">
                Wakes up the screen updater thread.
                  This method is not synchronous, it doesn&apos;t wait
                  for the updater thread to complete the updates.
                  It should be used when it is not necessary to wait for the
                  completion, for example, when a new surface had been added
                  to the list of tracked surfaces (which means that it&apos;s about
                  to be rendered to).                
            </javadoc>
            <method name="wakeUpUpdateThread" type="void" line="277">
                <scope line="278"/>
            </method>
            <javadoc line="282">
                Wakes up the screen updater thread and waits for the completion
                  of the update.
                  This method is called from Toolkit.sync() or
                  when there was a copy from a VI to the screen
                  so that swing applications would not appear to be
                  sluggish.                
            </javadoc>
            <method name="runUpdateNow" type="void" line="290">
                <scope line="291">
                    <scope line="292"/>
                </scope>
                <scope line="296">
                    <scope line="299">
                        <scope line="300"/>
                        <scope line="303"/>
                    </scope>
                </scope>
            </method>
            <method name="run" type="void" line="308">
                <scope line="309">
                    <scope line="310">
                        <declaration name="timeout" type="long" line="311"/>
                        <scope line="312">
                            <scope line="313"/>
                            <scope line="316"/>
                        </scope>
                    </scope>
                    <declaration name="surfaces" type="D3DWindowSurfaceData" line="320"/>
                    <scope line="321"/>
                    <scope line="324">
                        <scope line="325">
                            <scope line="326">
                                <declaration name="rq" type="D3DRenderQueue" line="327"/>
                                <scope line="329">
                                    <declaration name="r" type="Rectangle" line="330"/>
                                </scope>
                                <scope line="334"/>
                            </scope>
                            <scope line="338"/>
                        </scope>
                    </scope>
                    <scope line="343"/>
                </scope>
            </method>
            <javadoc line="349">
                Restores the passed surface if it was lost, resets the lost status.                
                <param>
                    sd surface to be validated                    
                </param>
                <return>
                    true if surface wasn't lost or if restoration was successful,
                      false otherwise                    
                </return>
            </javadoc>
            <method name="validate" type="boolean" line="355">
                <params>
                    <param name="sd" type="D3DWindowSurfaceData"/>
                </params>
                <scope line="356">
                    <scope line="357">
                        <declaration name="bg" type="Color" line="359"/>
                        <declaration name="sg2d" type="SunGraphics2D" line="360"/>
                    </scope>
                    <scope line="366"/>
                </scope>
            </method>
            <javadoc line="372">
                Creates (or returns a cached one) gdi surface for the same peer as
                  the passed d3dw surface has.                
                <param>
                    d3dw surface used as key into the cache                    
                </param>
                <return>
                    gdi window surface associated with the d3d window surfaces' peer                    
                </return>
            </javadoc>
            <method name="getGdiSurface" type="SurfaceData" line="378">
                <params>
                    <param name="d3dw" type="D3DWindowSurfaceData"/>
                </params>
                <scope line="379"/>
                <declaration name="gdisd" type="GDIWindowSurfaceData" line="382"/>
                <scope line="383"/>
            </method>
            <javadoc line="389">
                Returns true if the component has heavyweight children.                
                <param>
                    comp component to check for hw children                    
                </param>
                <return>
                    true if Component has heavyweight children                    
                </return>
            </javadoc>
            <method name="hasHWChildren" type="boolean" line="394">
                <params>
                    <param name="comp" type="Component"/>
                </params>
                <scope line="395">
                    <scope line="396">
                        <scope line="397"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>