<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.d3d">
        <import package="java.awt.Component"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="sun.awt.Win32GraphicsConfig"/>
        <import package="sun.awt.image.SunVolatileImage"/>
        <import package="sun.awt.image.SurfaceManager"/>
        <import package="sun.awt.image.VolatileSurfaceManager"/>
        <import package="sun.awt.windows.WComponentPeer"/>
        <import package="sun.java2d.InvalidPipeException"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.pipe.hw.AccelSurface"/>
        <import package="sun.java2d.d3d.D3DContext.D3DContextCaps"/>
        <import package="sun.java2d.windows.GDIWindowSurfaceData"/>
        <class name="D3DVolatileSurfaceManager" line="17">
            <extends class="VolatileSurfaceManager"/>
            <declaration name="accelerationEnabled" type="boolean" line="18"/>
            <declaration name="restoreCountdown" type="int" line="19"/>
            <method name="D3DVolatileSurfaceManager" type="constructor" line="20">
                <params>
                    <param name="vImg" type="SunVolatileImage"/>
                    <param name="context" type="Object"/>
                </params>
                <declaration name="transparency" type="int" line="22"/>
                <declaration name="gd" type="D3DGraphicsDevice" line="23"/>
            </method>
            <method name="isAccelerationEnabled" type="boolean" line="26"/>
            <method name="setAccelerationEnabled" type="void" line="29">
                <params>
                    <param name="accelerationEnabled" type="boolean"/>
                </params>
            </method>
            <javadoc line="32">
                Create a pbuffer-based SurfaceData object (or init the backbuffer
                  of an existing window if this is a double buffered GraphicsConfig).                
            </javadoc>
            <method name="initAcceleratedSurface" type="SurfaceData" line="36">
                <declaration name="sData" type="SurfaceData" line="37"/>
                <declaration name="comp" type="Component" line="38"/>
                <declaration name="peer" type="WComponentPeer" line="39"/>
                <scope line="40">
                    <declaration name="forceback" type="boolean" line="41"/>
                    <scope line="42"/>
                    <scope line="45"/>
                    <scope line="48">
                        <declaration name="gc" type="D3DGraphicsConfig" line="49"/>
                        <declaration name="cm" type="ColorModel" line="50"/>
                        <declaration name="type" type="int" line="51"/>
                        <scope line="52"/>
                    </scope>
                </scope>
                <scope line="58"/>
                <scope line="61"/>
                <scope line="64"/>
            </method>
            <method name="isConfigValid" type="boolean" line="69">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
            <javadoc line="72">
                Set the number of iterations for restoreAcceleratedSurface to fail
                  before attempting to restore the accelerated surface.                
                <see>
                    #restoreAcceleratedSurface                    
                </see>
                <see>
                    #handleVItoScreenOp                    
                </see>
            </javadoc>
            <method name="setRestoreCountdown" type="void" line="78">
                <params>
                    <param name="count" type="int"/>
                </params>
            </method>
            <javadoc line="81">
                Note that we create a new surface instead of restoring
                  an old one. This will help with D3DContext revalidation.                
            </javadoc>
            <method name="restoreAcceleratedSurface" type="void" line="85">
                <scope line="86">
                    <scope line="87"/>
                </scope>
                <declaration name="sData" type="SurfaceData" line="92"/>
                <scope line="93"/>
                <scope line="96"/>
            </method>
            <javadoc line="100">
                We&apos;re asked to restore contents by the accelerated surface, which means
                  that it had been lost.                
            </javadoc>
            <method name="restoreContents" type="SurfaceData" line="104"/>
            <javadoc line="108">
                If the destination surface&apos;s peer can potentially handle accelerated
                  on-screen rendering then it is likely that the condition which resulted
                  in VI to Screen operation is temporary, so this method sets the
                  restore countdown in hope that the on-screen accelerated rendering will
                  resume. In the meantime the backup surface of the VISM will be used.
                  The countdown is needed because otherwise we may never break out
                  of &quot;do { vi.validate()..} while(vi.lost)&quot; loop since validate() could
                  restore the source surface every time and it will get lost again on the
                  next copy attempt, and we would never get a chance to use the backup
                  surface. By using the countdown we allow the backup surface to be used
                  while the screen surface gets sorted out, or if it for some reason can
                  never be restored.
                  If the destination surface&apos;s peer could never do accelerated onscreen
                  rendering then the acceleration for the SurfaceManager associated with
                  the source surface is disabled forever.                
            </javadoc>
            <method name="handleVItoScreenOp" type="void" line="125">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                </params>
                <scope line="126">
                    <declaration name="d3dsd" type="D3DSurfaceData" line="127"/>
                    <declaration name="mgr" type="SurfaceManager" line="128"/>
                    <scope line="129">
                        <declaration name="vsm" type="D3DVolatileSurfaceManager" line="130"/>
                        <scope line="131">
                            <declaration name="wsd" type="GDIWindowSurfaceData" line="133"/>
                            <declaration name="p" type="WComponentPeer" line="134"/>
                            <scope line="135"/>
                            <scope line="138"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="initContents" type="void" line="145">
                <scope line="146"/>
            </method>
        </class>
    </source>