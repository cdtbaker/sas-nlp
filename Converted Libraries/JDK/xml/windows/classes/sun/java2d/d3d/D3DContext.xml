<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.d3d">
        <import package="sun.java2d.pipe.BufferedContext"/>
        <import package="sun.java2d.pipe.RenderBuffer"/>
        <import package="sun.java2d.pipe.RenderQueue"/>
        <import package="sun.java2d.pipe.hw.ContextCapabilities"/>
        <import package="sun.java2d.pipe.BufferedOpCodes"/>
        <import package="sun.java2d.pipe.hw.ContextCapabilities"/>
        <import package="sun.java2d.d3d.D3DContext.D3DContextCaps"/>
        <class name="D3DContext" line="36">
            <extends class="BufferedContext"/>
            <javadoc line="36">
                Note that the RenderQueue lock must be acquired before calling any of
                  the methods in this class.                
            </javadoc>
            <declaration name="device" type="D3DGraphicsDevice" line="42"/>
            <method name="D3DContext" type="constructor" line="44">
                <params>
                    <param name="rq" type="RenderQueue"/>
                    <param name="device" type="D3DGraphicsDevice"/>
                </params>
            </method>
            <javadoc line="49">
                Invalidates the currentContext field to ensure that we properly
                  revalidate the D3DContext (make it current, etc.) next time through
                  the validate() method.  This is typically invoked from methods
                  that affect the current context state (e.g. disposing a context or
                  surface).                
            </javadoc>
            <method name="invalidateCurrentContext" type="void" line="56">
                <comment line="57">
                    assert D3DRenderQueue.getInstance().lock.isHeldByCurrentThread();                    
                </comment>
                <comment line="59">
                    invalidate the current Java-level context so that we                    
                </comment>
                <comment line="60">
                    revalidate everything the next time around                    
                </comment>
                <comment line="66">
                    invalidate the context reference at the native level, and                    
                </comment>
                <comment line="67">
                    then flush the queue so that we have no pending operations                    
                </comment>
                <comment line="68">
                    dependent on the current context                    
                </comment>
                <scope line="61"/>
                <declaration name="rq" type="D3DRenderQueue" line="69"/>
            </method>
            <javadoc line="75">
                Sets the current context on the native level to be the one passed as
                  the argument.
                  If the context is not the same as the defaultContext the latter
                  will be reset to null.
                  This call is needed when copying from a SW surface to a Texture
                  (the upload test) or copying from d3d to SW surface to make sure we
                  have the correct current context.                
                <param>
                    d3dc the context to be made current on the native level                    
                </param>
            </javadoc>
            <method name="setScratchSurface" type="void" line="87">
                <params>
                    <param name="d3dc" type="D3DContext"/>
                </params>
                <comment line="88">
                    assert D3DRenderQueue.getInstance().lock.isHeldByCurrentThread();                    
                </comment>
                <comment line="90">
                    invalidate the current context                    
                </comment>
                <comment line="95">
                    set the scratch context                    
                </comment>
                <scope line="91"/>
                <declaration name="rq" type="D3DRenderQueue" line="96"/>
                <declaration name="buf" type="RenderBuffer" line="97"/>
            </method>
            <method name="getRenderQueue" type="RenderQueue" line="103"/>
            <method name="saveState" type="void" line="108">
                <comment line="109">
                    assert rq.lock.isHeldByCurrentThread();                    
                </comment>
                <comment line="111">
                    reset all attributes of this and current contexts                    
                </comment>
                <comment line="117">
                    save the state on the native level                    
                </comment>
            </method>
            <method name="restoreState" type="void" line="124">
                <comment line="125">
                    assert rq.lock.isHeldByCurrentThread();                    
                </comment>
                <comment line="127">
                    reset all attributes of this and current contexts                    
                </comment>
                <comment line="133">
                    restore the state on the native level                    
                </comment>
            </method>
            <method name="getDevice" type="D3DGraphicsDevice" line="139"/>
            <class name="D3DContextCaps" line="143">
                <extends class="ContextCapabilities"/>
                <declaration name="CAPS_LCD_SHADER" type="int" line="144"/>
                <javadoc line="144">
                    Indicates the presence of pixel shaders (v2.0 or greater).
                      This cap will only be set if the hardware supports the minimum number
                      of texture units.                    
                </javadoc>
                <declaration name="CAPS_BIOP_SHADER" type="int" line="150"/>
                <javadoc line="150">
                    Indicates the presence of pixel shaders (v2.0 or greater).
                      This cap will only be set if the hardware meets our
                      minimum requirements.                    
                </javadoc>
                <declaration name="CAPS_DEVICE_OK" type="int" line="156"/>
                <javadoc line="156">
                    Indicates that the device was successfully initialized and can
                      be safely used.                    
                </javadoc>
                <declaration name="CAPS_AA_SHADER" type="int" line="161"/>
                <javadoc line="161">
                    Indicates that the device has all of the necessary capabilities
                      to support the Antialiasing Pixel Shader program.                    
                </javadoc>
                <method name="D3DContextCaps" type="constructor" line="167">
                    <params>
                        <param name="caps" type="int"/>
                        <param name="adapterId" type="String"/>
                    </params>
                </method>
                <method name="toString" type="String" line="172">
                    <declaration name="buf" type="StringBuffer" line="173"/>
                    <scope line="174"/>
                    <scope line="177"/>
                    <scope line="180"/>
                    <scope line="183"/>
                </method>
            </class>
        </class>
    </source>