<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.d3d">
        <import package="sun.java2d.ScreenUpdateManager"/>
        <import package="sun.java2d.pipe.RenderBuffer"/>
        <import package="sun.java2d.pipe.RenderQueue"/>
        <import package="sun.java2d.pipe.BufferedOpCodes"/>
        <class name="D3DRenderQueue" line="33">
            <extends class="RenderQueue"/>
            <javadoc line="33">
                D3D-specific implementation of RenderQueue.                
            </javadoc>
            <declaration name="theInstance" type="D3DRenderQueue" line="38"/>
            <declaration name="rqThread" type="Thread" line="39"/>
            <method name="D3DRenderQueue" type="constructor" line="41"/>
            <javadoc line="44">
                Returns the single D3DRenderQueue instance.  If it has not yet been
                  initialized, this method will first construct the single instance
                  before returning it.                
            </javadoc>
            <method name="getInstance" type="D3DRenderQueue" line="49">
                <comment line="53">
                    no need to lock, noone has reference to this instance yet                    
                </comment>
                <scope line="50">
                    <anonymous_class line="53">
                        <method name="run" type="void" line="54"/>
                    </anonymous_class>
                </scope>
            </method>
            <javadoc line="62">
                Flushes the single D3DRenderQueue instance synchronously.  If an
                  D3DRenderQueue has not yet been instantiated, this method is a no-op.
                  This method is useful in the case of Toolkit.sync(), in which we want
                  to flush the D3D pipeline, but only if the D3D pipeline is currently
                  enabled.  Since this class has few external dependencies, callers need
                  not be concerned that calling this method will trigger initialization
                  of the D3D pipeline and related classes.                
            </javadoc>
            <method name="sync" type="void" line="71">
                <comment line="74">
                    need to make sure any/all screen surfaces are presented prior
                     to completing the sync operation                    
                </comment>
                <scope line="72">
                    <declaration name="mgr" type="D3DScreenUpdateManager" line="75"/>
                    <scope line="80"/>
                    <scope line="84"/>
                </scope>
            </method>
            <javadoc line="90">
                Attempt to restore the devices if they&apos;re in the lost state.
                  (used when a full-screen window is activated/deactivated)                
            </javadoc>
            <method name="restoreDevices" type="void" line="94">
                <declaration name="rq" type="D3DRenderQueue" line="95"/>
                <scope line="97"/>
                <scope line="101"/>
            </method>
            <javadoc line="106">
                @return true if current thread is the render queue thread,
                  false otherwise                
            </javadoc>
            <method name="isRenderQueueThread" type="boolean" line="110"/>
            <javadoc line="114">
                Disposes the native memory associated with the given native
                  graphics config info pointer on the single queue flushing thread.                
            </javadoc>
            <method name="disposeGraphicsConfig" type="void" line="118">
                <params>
                    <param name="pConfigInfo" type="long"/>
                </params>
                <comment line="129">
                    this call is expected to complete synchronously, so flush now                    
                </comment>
                <declaration name="rq" type="D3DRenderQueue" line="119"/>
                <scope line="121">
                    <declaration name="buf" type="RenderBuffer" line="123"/>
                </scope>
                <scope line="130"/>
            </method>
            <method name="flushNow" type="void" line="135">
                <comment line="137">
                    assert lock.isHeldByCurrentThread();                    
                </comment>
            </method>
            <method name="flushAndInvokeNow" type="void" line="140">
                <params>
                    <param name="r" type="Runnable"/>
                </params>
                <comment line="142">
                    assert lock.isHeldByCurrentThread();                    
                </comment>
            </method>
            <method name="flushBuffer" type="void" line="145"/>
            <method name="flushBuffer" type="void" line="147">
                <params>
                    <param name="task" type="Runnable"/>
                </params>
                <comment line="149">
                    assert lock.isHeldByCurrentThread();                    
                </comment>
                <comment line="152">
                    process the queue                    
                </comment>
                <comment line="155">
                    reset the buffer position                    
                </comment>
                <comment line="157">
                    clear the set of references, since we no longer need them                    
                </comment>
                <declaration name="limit" type="int" line="149"/>
                <scope line="150"/>
            </method>
        </class>
    </source>