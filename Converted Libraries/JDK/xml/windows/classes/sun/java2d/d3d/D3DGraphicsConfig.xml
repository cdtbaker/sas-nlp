<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.d3d">
        <import package="java.awt.AWTException"/>
        <import package="java.awt.BufferCapabilities"/>
        <import package="java.awt.BufferCapabilities.FlipContents"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.ImageCapabilities"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="sun.awt.Win32GraphicsConfig"/>
        <import package="sun.awt.image.SunVolatileImage"/>
        <import package="sun.awt.image.SurfaceManager"/>
        <import package="sun.awt.windows.WComponentPeer"/>
        <import package="sun.java2d.Surface"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.pipe.hw.AccelDeviceEventNotifier"/>
        <import package="sun.java2d.pipe.hw.AccelTypedVolatileImage"/>
        <import package="sun.java2d.pipe.hw.AccelGraphicsConfig"/>
        <import package="sun.java2d.pipe.hw.AccelSurface"/>
        <import package="sun.java2d.pipe.hw.ContextCapabilities"/>
        <import package="sun.java2d.pipe.hw.AccelSurface"/>
        <import package="sun.java2d.d3d.D3DContext.D3DContextCaps"/>
        <import package="sun.java2d.pipe.hw.AccelDeviceEventListener"/>
        <class name="D3DGraphicsConfig" line="28">
            <extends class="Win32GraphicsConfig"/>
            <implements interface="AccelGraphicsConfig"/>
            <declaration name="imageCaps" type="ImageCapabilities" line="29"/>
            <declaration name="bufferCaps" type="BufferCapabilities" line="30"/>
            <declaration name="device" type="D3DGraphicsDevice" line="31"/>
            <method name="D3DGraphicsConfig" type="constructor" line="32">
                <params>
                    <param name="device" type="D3DGraphicsDevice"/>
                </params>
            </method>
            <method name="createManagedSurface" type="SurfaceData" line="36">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="transparency" type="int"/>
                </params>
            </method>
            <method name="displayChanged" type="void" line="39">
                <declaration name="rq" type="D3DRenderQueue" line="41"/>
                <scope line="43"/>
                <scope line="46"/>
            </method>
            <method name="getColorModel" type="ColorModel" line="50">
                <params>
                    <param name="transparency" type="int"/>
                </params>
                <declaration name="cs" type="ColorSpace" line="57"/>
            </method>
            <method name="toString" type="String" line="63"/>
            <javadoc line="66">
                Creates a new SurfaceData that will be associated with the given
                  WComponentPeer. D3D9 doesn&apos;t allow rendering to the screen,
                  so a GDI surface will be returned.                
            </javadoc>
            <method name="createSurfaceData" type="SurfaceData" line="71">
                <params>
                    <param name="peer" type="WComponentPeer"/>
                    <param name="numBackBuffers" type="int"/>
                </params>
            </method>
            <javadoc line="74">
                Checks that the requested configuration is natively supported; if not,
                  an AWTException is thrown.                
            </javadoc>
            <method name="assertOperationSupported" type="void" line="78">
                <params>
                    <param name="target" type="Component"/>
                    <param name="numBuffers" type="int"/>
                    <param name="caps" type="BufferCapabilities"/>
                </params>
                <scope line="79"/>
                <scope line="82"/>
            </method>
            <javadoc line="86">
                Creates a D3D-based backbuffer for the given peer and returns the
                  image wrapper.                
            </javadoc>
            <method name="createBackBuffer" type="VolatileImage" line="90">
                <params>
                    <param name="peer" type="WComponentPeer"/>
                </params>
                <declaration name="target" type="Component" line="91"/>
                <declaration name="w" type="int" line="92"/>
                <declaration name="h" type="int" line="93"/>
            </method>
            <javadoc line="96">
                Performs the native D3D flip operation for the given target Component.                
            </javadoc>
            <method name="flip" type="void" line="99">
                <params>
                    <param name="peer" type="WComponentPeer"/>
                    <param name="target" type="Component"/>
                    <param name="backBuffer" type="VolatileImage"/>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                    <param name="flipAction" type="BufferCapabilities.FlipContents"/>
                </params>
                <declaration name="d3dvsm" type="SurfaceManager" line="100"/>
                <declaration name="sd" type="SurfaceData" line="101"/>
                <scope line="102">
                    <declaration name="d3dsd" type="D3DSurfaceData" line="103"/>
                </scope>
                <scope line="106">
                    <declaration name="g" type="Graphics" line="107"/>
                    <scope line="108"/>
                    <scope line="111"/>
                </scope>
                <scope line="115">
                    <declaration name="g" type="Graphics" line="116"/>
                    <scope line="117"/>
                    <scope line="121"/>
                </scope>
            </method>
            <class name="D3DBufferCaps" line="126">
                <extends class="BufferCapabilities"/>
                <method name="D3DBufferCaps" type="constructor" line="127"/>
                <method name="isMultiBufferAvailable" type="boolean" line="130"/>
            </class>
            <method name="getBufferCapabilities" type="BufferCapabilities" line="134">
                <scope line="135"/>
            </method>
            <class name="D3DImageCaps" line="140">
                <extends class="ImageCapabilities"/>
                <method name="D3DImageCaps" type="constructor" line="141"/>
                <method name="isTrueVolatile" type="boolean" line="144"/>
            </class>
            <method name="getImageCapabilities" type="ImageCapabilities" line="148"/>
            <method name="getD3DDevice" type="D3DGraphicsDevice" line="151"/>
            <javadoc line="154">
                {@inheritDoc}                
                <see>
                    sun.java2d.pipe.hw.BufferedContextProvider#getContext                    
                </see>
            </javadoc>
            <method name="getContext" type="D3DContext" line="158"/>
            <javadoc line="161">
                {@inheritDoc}                
                <see>
                    sun.java2d.pipe.hw.AccelGraphicsConfig#createCompatibleVolatileImage                    
                </see>
            </javadoc>
            <method name="createCompatibleVolatileImage" type="VolatileImage" line="165">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="transparency" type="int"/>
                    <param name="type" type="int"/>
                </params>
                <scope line="166"/>
                <declaration name="isOpaque" type="boolean" line="169"/>
                <scope line="170">
                    <declaration name="cap" type="int" line="171"/>
                    <scope line="172"/>
                </scope>
                <scope line="176">
                    <scope line="177"/>
                </scope>
                <declaration name="vi" type="SunVolatileImage" line="181"/>
                <declaration name="sd" type="Surface" line="182"/>
                <scope line="183"/>
            </method>
            <javadoc line="189">
                {@inheritDoc}                
                <see>
                    sun.java2d.pipe.hw.AccelGraphicsConfig#getContextCapabilities                    
                </see>
            </javadoc>
            <method name="getContextCapabilities" type="ContextCapabilities" line="193"/>
            <method name="addDeviceEventListener" type="void" line="196">
                <params>
                    <param name="l" type="AccelDeviceEventListener"/>
                </params>
            </method>
            <method name="removeDeviceEventListener" type="void" line="199">
                <params>
                    <param name="l" type="AccelDeviceEventListener"/>
                </params>
            </method>
        </class>
    </source>