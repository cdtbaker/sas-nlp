<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.d3d">
        <import package="java.awt.AWTException"/>
        <import package="java.awt.BufferCapabilities"/>
        <import package="java.awt.BufferCapabilities.FlipContents"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.ImageCapabilities"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="sun.awt.Win32GraphicsConfig"/>
        <import package="sun.awt.image.SunVolatileImage"/>
        <import package="sun.awt.image.SurfaceManager"/>
        <import package="sun.awt.windows.WComponentPeer"/>
        <import package="sun.java2d.Surface"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.pipe.hw.AccelDeviceEventNotifier"/>
        <import package="sun.java2d.pipe.hw.AccelTypedVolatileImage"/>
        <import package="sun.java2d.pipe.hw.AccelGraphicsConfig"/>
        <import package="sun.java2d.pipe.hw.AccelSurface"/>
        <import package="sun.java2d.pipe.hw.ContextCapabilities"/>
        <import package="sun.java2d.pipe.hw.AccelSurface"/>
        <import package="sun.java2d.d3d.D3DContext.D3DContextCaps"/>
        <import package="sun.java2d.pipe.hw.AccelDeviceEventListener"/>
        <class name="D3DGraphicsConfig" line="55">
            <extends class="Win32GraphicsConfig"/>
            <comment line="116">
                The following methods are invoked from WComponentPeer.java rather
                 than having the Win32-dependent implementations hardcoded in that
                 class.  This way the appropriate actions are taken based on the peer&apos;s
                 GraphicsConfig, whether it is a Win32GraphicsConfig or a
                 D3DGraphicsConfig.                
            </comment>
            <comment line="136">
                The following methods correspond to the multibuffering methods in
                 WComponentPeer.java...                
            </comment>
            <implements interface="AccelGraphicsConfig"/>
            <declaration name="imageCaps" type="ImageCapabilities" line="59"/>
            <declaration name="bufferCaps" type="BufferCapabilities" line="61"/>
            <declaration name="device" type="D3DGraphicsDevice" line="62"/>
            <method name="D3DGraphicsConfig" type="constructor" line="64">
                <params>
                    <param name="device" type="D3DGraphicsDevice"/>
                </params>
            </method>
            <method name="createManagedSurface" type="SurfaceData" line="69">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="transparency" type="int"/>
                </params>
            </method>
            <method name="displayChanged" type="void" line="77">
                <comment line="79">
                    the context could hold a reference to a D3DSurfaceData, which in                    
                </comment>
                <comment line="80">
                    turn has a reference back to this D3DGraphicsConfig, so in order                    
                </comment>
                <comment line="81">
                    for this instance to be disposed we need to break the connection                    
                </comment>
                <declaration name="rq" type="D3DRenderQueue" line="82"/>
                <scope line="84"/>
                <scope line="86"/>
            </method>
            <method name="getColorModel" type="ColorModel" line="92">
                <params>
                    <param name="transparency" type="int"/>
                </params>
                <comment line="95">
                    REMIND: once the ColorModel spec is changed, this should be                    
                </comment>
                <comment line="96">
                    an opaque premultiplied DCM...                    
                </comment>
                <declaration name="cs" type="ColorSpace" line="101"/>
            </method>
            <method name="toString" type="String" line="111"/>
            <javadoc line="123">
                Creates a new SurfaceData that will be associated with the given
                  WComponentPeer. D3D9 doesn&apos;t allow rendering to the screen,
                  so a GDI surface will be returned.                
            </javadoc>
            <method name="createSurfaceData" type="SurfaceData" line="131">
                <params>
                    <param name="peer" type="WComponentPeer"/>
                    <param name="numBackBuffers" type="int"/>
                </params>
            </method>
            <javadoc line="140">
                Checks that the requested configuration is natively supported; if not,
                  an AWTException is thrown.                
            </javadoc>
            <method name="assertOperationSupported" type="void" line="149">
                <params>
                    <param name="target" type="Component"/>
                    <param name="numBuffers" type="int"/>
                    <param name="caps" type="BufferCapabilities"/>
                </params>
                <scope line="150"/>
                <scope line="155"/>
            </method>
            <javadoc line="161">
                Creates a D3D-based backbuffer for the given peer and returns the
                  image wrapper.                
            </javadoc>
            <method name="createBackBuffer" type="VolatileImage" line="166">
                <params>
                    <param name="peer" type="WComponentPeer"/>
                </params>
                <comment line="168">
                    it is possible for the component to have size 0x0, adjust it to                    
                </comment>
                <comment line="169">
                    be at least 1x1 to avoid IAE                    
                </comment>
                <declaration name="target" type="Component" line="167"/>
                <declaration name="w" type="int" line="170"/>
                <declaration name="h" type="int" line="171"/>
            </method>
            <javadoc line="175">
                Performs the native D3D flip operation for the given target Component.                
            </javadoc>
            <method name="flip" type="void" line="183">
                <params>
                    <param name="peer" type="WComponentPeer"/>
                    <param name="target" type="Component"/>
                    <param name="backBuffer" type="VolatileImage"/>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                    <param name="flipAction" type="BufferCapabilities.FlipContents"/>
                </params>
                <comment line="184">
                    REMIND: we should actually get a surface data for the                    
                </comment>
                <comment line="185">
                    backBuffer&apos;s VI                    
                </comment>
                <comment line="193">
                    the surface was likely lost could not have been restored                    
                </comment>
                <declaration name="d3dvsm" type="SurfaceManager" line="186"/>
                <declaration name="sd" type="SurfaceData" line="188"/>
                <scope line="189">
                    <declaration name="d3dsd" type="D3DSurfaceData" line="190"/>
                </scope>
                <scope line="192">
                    <declaration name="g" type="Graphics" line="194"/>
                    <scope line="195"/>
                    <scope line="200"/>
                </scope>
                <scope line="205">
                    <declaration name="g" type="Graphics" line="206"/>
                    <scope line="207"/>
                    <scope line="212"/>
                </scope>
            </method>
            <class name="D3DBufferCaps" line="218">
                <extends class="BufferCapabilities"/>
                <method name="D3DBufferCaps" type="constructor" line="219">
                    <comment line="220">
                        REMIND: should we indicate that the front-buffer                        
                    </comment>
                    <comment line="221">
                        (the on-screen rendering) is not accelerated?                        
                    </comment>
                </method>
                <method name="isMultiBufferAvailable" type="boolean" line="225"/>
            </class>
            <method name="getBufferCapabilities" type="BufferCapabilities" line="232">
                <scope line="233"/>
            </method>
            <class name="D3DImageCaps" line="239">
                <extends class="ImageCapabilities"/>
                <method name="D3DImageCaps" type="constructor" line="240"/>
                <method name="isTrueVolatile" type="boolean" line="244"/>
            </class>
            <method name="getImageCapabilities" type="ImageCapabilities" line="250"/>
            <method name="getD3DDevice" type="D3DGraphicsDevice" line="254"/>
            <javadoc line="258">
                {@inheritDoc}                
                <see>
                    sun.java2d.pipe.hw.BufferedContextProvider#getContext                    
                </see>
            </javadoc>
            <method name="getContext" type="D3DContext" line="264"/>
            <javadoc line="268">
                {@inheritDoc}                
                <see>
                    sun.java2d.pipe.hw.AccelGraphicsConfig#createCompatibleVolatileImage                    
                </see>
            </javadoc>
            <method name="createCompatibleVolatileImage" type="VolatileImage" line="277">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="transparency" type="int"/>
                    <param name="type" type="int"/>
                </params>
                <scope line="280"/>
                <declaration name="isOpaque" type="boolean" line="283"/>
                <scope line="284">
                    <declaration name="cap" type="int" line="285"/>
                    <scope line="286"/>
                </scope>
                <scope line="289">
                    <scope line="290"/>
                </scope>
                <declaration name="vi" type="SunVolatileImage" line="295"/>
                <declaration name="sd" type="Surface" line="297"/>
                <scope line="300"/>
            </method>
            <javadoc line="308">
                {@inheritDoc}                
                <see>
                    sun.java2d.pipe.hw.AccelGraphicsConfig#getContextCapabilities                    
                </see>
            </javadoc>
            <method name="getContextCapabilities" type="ContextCapabilities" line="314"/>
            <method name="addDeviceEventListener" type="void" line="319">
                <params>
                    <param name="l" type="AccelDeviceEventListener"/>
                </params>
            </method>
            <method name="removeDeviceEventListener" type="void" line="324">
                <params>
                    <param name="l" type="AccelDeviceEventListener"/>
                </params>
            </method>
        </class>
    </source>