<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.d3d">
        <import package="java.awt.Dialog"/>
        <import package="java.awt.DisplayMode"/>
        <import package="java.awt.Frame"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.Window"/>
        <import package="java.awt.event.WindowAdapter"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.awt.event.WindowListener"/>
        <import package="java.awt.peer.WindowPeer"/>
        <import package="java.util.ArrayList"/>
        <import package="sun.awt.Win32GraphicsDevice"/>
        <import package="sun.awt.windows.WWindowPeer"/>
        <import package="sun.java2d.pipe.hw.ContextCapabilities"/>
        <import package="sun.java2d.windows.WindowsFlags"/>
        <import package="sun.java2d.pipe.BufferedOpCodes"/>
        <import package="sun.java2d.d3d.D3DContext.D3DContextCaps"/>
        <import package="sun.java2d.d3d.D3DContext.D3DContextCaps"/>
        <class name="D3DGraphicsDevice" line="21">
            <extends class="Win32GraphicsDevice"/>
            <javadoc line="21">
                This class implements D3D-specific functionality, such as fullscreen
                  exclusive mode and display changes.  It is kept separate from
                  Win32GraphicsDevice to help avoid overburdening the parent class.                
            </javadoc>
            <declaration name="context" type="D3DContext" line="27"/>
            <declaration name="d3dAvailable" type="boolean" line="28"/>
            <declaration name="d3dCaps" type="ContextCapabilities" line="29"/>
            <method name="initD3D" type="boolean" line="30"/>
            <scope line="31">
                <scope line="34"/>
                <scope line="38"/>
            </scope>
            <javadoc line="42">
                Used to construct a Direct3D-enabled GraphicsDevice.                
                <return>
                    a D3DGraphicsDevice if it could be created
                      successfully, null otherwise.                    
                </return>
            </javadoc>
            <method name="createDevice" type="D3DGraphicsDevice" line="47">
                <params>
                    <param name="screen" type="int"/>
                </params>
                <scope line="48"/>
                <declaration name="d3dCaps" type="ContextCapabilities" line="51"/>
                <scope line="52">
                    <scope line="53"/>
                </scope>
                <scope line="58"/>
                <declaration name="gd" type="D3DGraphicsDevice" line="61"/>
            </method>
            <method name="getDeviceCapsNative" type="int" line="64"/>
            <method name="getDeviceIdNative" type="String" line="65"/>
            <method name="getDeviceCaps" type="ContextCapabilities" line="66">
                <params>
                    <param name="screen" type="int"/>
                </params>
                <declaration name="d3dCaps" type="ContextCapabilities" line="67"/>
                <declaration name="rq" type="D3DRenderQueue" line="68"/>
                <scope line="70">
                    <class name="Result" line="71">
                        <declaration name="caps" type="int" line="72"/>
                        <declaration name="id" type="String" line="73"/>
                    </class>
                    <declaration name="res" type="Result" line="76"/>
                    <anonymous_class line="77">
                        <method name="run" type="void" line="78"/>
                    </anonymous_class>
                </scope>
                <scope line="86"/>
            </method>
            <method name="isCapPresent" type="boolean" line="91">
                <params>
                    <param name="cap" type="int"/>
                </params>
            </method>
            <method name="D3DGraphicsDevice" type="constructor" line="94">
                <params>
                    <param name="screennum" type="int"/>
                    <param name="d3dCaps" type="ContextCapabilities"/>
                </params>
            </method>
            <method name="isD3DEnabledOnDevice" type="boolean" line="100"/>
            <javadoc line="103">
                Returns true if d3d pipeline has been successfully initialized.                
                <return>
                    true if d3d pipeline is initialized, false otherwise                    
                </return>
            </javadoc>
            <method name="isD3DAvailable" type="boolean" line="107"/>
            <javadoc line="110">
                Return the owning Frame for a given Window.  Used in setFSWindow below
                  to set the properties of the owning Frame when a Window goes
                  into fullscreen mode.                
            </javadoc>
            <method name="getToplevelOwner" type="Frame" line="115">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <declaration name="owner" type="Window" line="116"/>
                <scope line="117">
                    <scope line="119"/>
                </scope>
            </method>
            <declaration name="fsStatus" type="boolean" line="125"/>
            <declaration name="ownerOrigBounds" type="Rectangle" line="126"/>
            <declaration name="ownerWasVisible" type="boolean" line="127"/>
            <declaration name="realFSWindow" type="Window" line="128"/>
            <declaration name="fsWindowListener" type="WindowListener" line="129"/>
            <declaration name="fsWindowWasAlwaysOnTop" type="boolean" line="130"/>
            <method name="enterFullScreenExclusiveNative" type="boolean" line="131"/>
            <method name="enterFullScreenExclusive" type="void" line="132">
                <params>
                    <param name="screen" type="int"/>
                    <param name="wp" type="WindowPeer"/>
                </params>
                <declaration name="wpeer" type="WWindowPeer" line="133"/>
                <declaration name="rq" type="D3DRenderQueue" line="134"/>
                <scope line="136">
                    <anonymous_class line="137">
                        <method name="run" type="void" line="138">
                            <declaration name="hwnd" type="long" line="139"/>
                            <scope line="140"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="149"/>
                <scope line="152"/>
            </method>
            <method name="exitFullScreenExclusiveNative" type="boolean" line="156"/>
            <method name="exitFullScreenExclusive" type="void" line="157">
                <params>
                    <param name="screen" type="int"/>
                    <param name="w" type="WindowPeer"/>
                </params>
                <scope line="158">
                    <declaration name="rq" type="D3DRenderQueue" line="159"/>
                    <scope line="161">
                        <anonymous_class line="162">
                            <method name="run" type="void" line="163"/>
                        </anonymous_class>
                    </scope>
                    <scope line="169"/>
                </scope>
                <scope line="173"/>
            </method>
            <class name="D3DFSWindowAdapter" line="177">
                <extends class="WindowAdapter"/>
                <javadoc line="177">
                    WindowAdapter class for the full-screen frame, responsible for
                      restoring the devices. This is important to do because unless the device
                      is restored it will not go back into the FS mode once alt+tabbed out.
                      This is a problem for windows for which we do not do any d3d-related
                      operations (like when we disabled on-screen rendering).
                      REMIND: we create an instance per each full-screen device while a single
                      instance would suffice (but requires more management).                    
                </javadoc>
                <method name="windowDeactivated" type="void" line="187">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowActivated" type="void" line="190">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
            </class>
            <method name="addFSWindowListener" type="void" line="194">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <scope line="195">
                    <declaration name="fp" type="WWindowPeer" line="197"/>
                    <declaration name="r" type="Rectangle" line="199"/>
                </scope>
                <scope line="203"/>
            </method>
            <method name="removeFSWindowListener" type="void" line="211">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <declaration name="wpeer" type="WWindowPeer" line="214"/>
                <scope line="215">
                    <scope line="216">
                        <scope line="220"/>
                    </scope>
                    <scope line="225"/>
                </scope>
            </method>
            <method name="getCurrentDisplayModeNative" type="DisplayMode" line="231"/>
            <method name="getCurrentDisplayMode" type="DisplayMode" line="232">
                <params>
                    <param name="screen" type="int"/>
                </params>
                <declaration name="rq" type="D3DRenderQueue" line="233"/>
                <scope line="235">
                    <class name="Result" line="236">
                        <declaration name="dm" type="DisplayMode" line="237"/>
                    </class>
                    <declaration name="res" type="Result" line="240"/>
                    <anonymous_class line="241">
                        <method name="run" type="void" line="242"/>
                    </anonymous_class>
                    <scope line="247"/>
                </scope>
                <scope line="252"/>
            </method>
            <method name="configDisplayModeNative" type="void" line="256"/>
            <method name="configDisplayMode" type="void" line="257">
                <params>
                    <param name="screen" type="int"/>
                    <param name="w" type="WindowPeer"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="bitDepth" type="int"/>
                    <param name="refreshRate" type="int"/>
                </params>
                <scope line="258"/>
                <declaration name="wpeer" type="WWindowPeer" line="262"/>
                <scope line="263">
                    <declaration name="screenBounds" type="Rectangle" line="264"/>
                </scope>
                <declaration name="rq" type="D3DRenderQueue" line="267"/>
                <scope line="269">
                    <anonymous_class line="270">
                        <method name="run" type="void" line="271">
                            <declaration name="hwnd" type="long" line="272"/>
                            <scope line="273"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="281"/>
            </method>
            <method name="enumDisplayModesNative" type="void" line="285"/>
            <method name="enumDisplayModes" type="void" line="286">
                <params>
                    <param name="screen" type="int"/>
                    <param name="modes" type="ArrayList"/>
                </params>
                <declaration name="rq" type="D3DRenderQueue" line="287"/>
                <scope line="289">
                    <anonymous_class line="290">
                        <method name="run" type="void" line="291"/>
                    </anonymous_class>
                    <scope line="296"/>
                </scope>
                <scope line="300"/>
            </method>
            <method name="getAvailableAcceleratedMemoryNative" type="long" line="304"/>
            <method name="getAvailableAcceleratedMemory" type="int" line="305">
                <declaration name="rq" type="D3DRenderQueue" line="306"/>
                <scope line="308">
                    <class name="Result" line="309">
                        <declaration name="mem" type="long" line="310"/>
                    </class>
                    <declaration name="res" type="Result" line="313"/>
                    <anonymous_class line="314">
                        <method name="run" type="void" line="315"/>
                    </anonymous_class>
                </scope>
                <scope line="322"/>
            </method>
            <method name="getConfigurations" type="GraphicsConfiguration[]" line="326">
                <scope line="327">
                    <scope line="328">
                        <scope line="330"/>
                    </scope>
                </scope>
            </method>
            <method name="getDefaultConfiguration" type="GraphicsConfiguration" line="339">
                <scope line="340">
                    <scope line="341"/>
                    <scope line="344"/>
                </scope>
            </method>
            <method name="isD3DAvailableOnDeviceNative" type="boolean" line="350"/>
            <method name="isD3DAvailableOnDevice" type="boolean" line="351">
                <params>
                    <param name="screen" type="int"/>
                </params>
                <scope line="352"/>
                <declaration name="rq" type="D3DRenderQueue" line="355"/>
                <scope line="357">
                    <class name="Result" line="358">
                        <declaration name="avail" type="boolean" line="359"/>
                    </class>
                    <declaration name="res" type="Result" line="362"/>
                    <anonymous_class line="363">
                        <method name="run" type="void" line="364"/>
                    </anonymous_class>
                </scope>
                <scope line="371"/>
            </method>
            <method name="getContext" type="D3DContext" line="375"/>
            <method name="getContextCapabilities" type="ContextCapabilities" line="378"/>
            <method name="displayChanged" type="void" line="381">
                <scope line="383"/>
            </method>
            <method name="invalidate" type="void" line="387">
                <params>
                    <param name="defaultScreen" type="int"/>
                </params>
            </method>
        </class>
    </source>