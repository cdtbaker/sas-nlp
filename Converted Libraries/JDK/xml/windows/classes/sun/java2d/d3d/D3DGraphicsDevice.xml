<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.d3d">
        <import package="java.awt.Dialog"/>
        <import package="java.awt.DisplayMode"/>
        <import package="java.awt.Frame"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.Window"/>
        <import package="java.awt.event.WindowAdapter"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.awt.event.WindowListener"/>
        <import package="java.awt.peer.WindowPeer"/>
        <import package="java.util.ArrayList"/>
        <import package="sun.awt.Win32GraphicsDevice"/>
        <import package="sun.awt.windows.WWindowPeer"/>
        <import package="sun.java2d.pipe.hw.ContextCapabilities"/>
        <import package="sun.java2d.windows.WindowsFlags"/>
        <import package="sun.java2d.pipe.BufferedOpCodes"/>
        <import package="sun.java2d.d3d.D3DContext.D3DContextCaps"/>
        <import package="sun.java2d.d3d.D3DContext.D3DContextCaps"/>
        <class name="D3DGraphicsDevice" line="48">
            <extends class="Win32GraphicsDevice"/>
            <comment line="453">
                REMIND: this method is not used now, we use caps instead                
            </comment>
            <javadoc line="48">
                This class implements D3D-specific functionality, such as fullscreen
                  exclusive mode and display changes.  It is kept separate from
                  Win32GraphicsDevice to help avoid overburdening the parent class.                
            </javadoc>
            <declaration name="context" type="D3DContext" line="54"/>
            <declaration name="d3dAvailable" type="boolean" line="56"/>
            <declaration name="d3dCaps" type="ContextCapabilities" line="58"/>
            <method name="initD3D" type="boolean" line="60"/>
            <scope line="62">
                <scope line="67"/>
                <scope line="71"/>
            </scope>
            <javadoc line="76">
                Used to construct a Direct3D-enabled GraphicsDevice.                
                <return>
                    a D3DGraphicsDevice if it could be created
                      successfully, null otherwise.                    
                </return>
            </javadoc>
            <method name="createDevice" type="D3DGraphicsDevice" line="82">
                <params>
                    <param name="screen" type="int"/>
                </params>
                <comment line="89">
                    could not initialize the device successfully                    
                </comment>
                <scope line="83"/>
                <declaration name="d3dCaps" type="ContextCapabilities" line="87"/>
                <scope line="89">
                    <scope line="90"/>
                </scope>
                <scope line="96"/>
                <declaration name="gd" type="D3DGraphicsDevice" line="100"/>
            </method>
            <method name="getDeviceCapsNative" type="int" line="104"/>
            <method name="getDeviceIdNative" type="String" line="105"/>
            <method name="getDeviceCaps" type="ContextCapabilities" line="106">
                <params>
                    <param name="screen" type="int"/>
                </params>
                <declaration name="d3dCaps" type="ContextCapabilities" line="107"/>
                <declaration name="rq" type="D3DRenderQueue" line="108"/>
                <scope line="110">
                    <class name="Result" line="111">
                        <declaration name="caps" type="int" line="112"/>
                        <declaration name="id" type="String" line="113"/>
                    </class>
                    <declaration name="res" type="Result" line="115"/>
                    <anonymous_class line="116">
                        <method name="run" type="void" line="117"/>
                    </anonymous_class>
                </scope>
                <scope line="123"/>
            </method>
            <method name="isCapPresent" type="boolean" line="130">
                <params>
                    <param name="cap" type="int"/>
                </params>
            </method>
            <method name="D3DGraphicsDevice" type="constructor" line="134">
                <params>
                    <param name="screennum" type="int"/>
                    <param name="d3dCaps" type="ContextCapabilities"/>
                </params>
            </method>
            <method name="isD3DEnabledOnDevice" type="boolean" line="141"/>
            <javadoc line="145">
                Returns true if d3d pipeline has been successfully initialized.                
                <return>
                    true if d3d pipeline is initialized, false otherwise                    
                </return>
            </javadoc>
            <method name="isD3DAvailable" type="boolean" line="149"/>
            <javadoc line="153">
                Return the owning Frame for a given Window.  Used in setFSWindow below
                  to set the properties of the owning Frame when a Window goes
                  into fullscreen mode.                
            </javadoc>
            <method name="getToplevelOwner" type="Frame" line="158">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <comment line="167">
                    could get here if passed Window is an owner-less Dialog                    
                </comment>
                <declaration name="owner" type="Window" line="159"/>
                <scope line="160">
                    <scope line="162"/>
                </scope>
            </method>
            <declaration name="fsStatus" type="boolean" line="170"/>
            <declaration name="ownerOrigBounds" type="Rectangle" line="171"/>
            <declaration name="ownerWasVisible" type="boolean" line="172"/>
            <declaration name="realFSWindow" type="Window" line="173"/>
            <declaration name="fsWindowListener" type="WindowListener" line="174"/>
            <declaration name="fsWindowWasAlwaysOnTop" type="boolean" line="175"/>
            <method name="enterFullScreenExclusiveNative" type="boolean" line="176"/>
            <method name="enterFullScreenExclusive" type="void" line="181">
                <params>
                    <param name="screen" type="int"/>
                    <param name="wp" type="WindowPeer"/>
                </params>
                <comment line="192">
                    window is disposed                    
                </comment>
                <declaration name="wpeer" type="WWindowPeer" line="182"/>
                <declaration name="rq" type="D3DRenderQueue" line="184"/>
                <scope line="186">
                    <anonymous_class line="187">
                        <method name="run" type="void" line="188">
                            <comment line="192">
                                window is disposed                                
                            </comment>
                            <declaration name="hwnd" type="long" line="189"/>
                            <scope line="190"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="198"/>
                <scope line="201"/>
            </method>
            <method name="exitFullScreenExclusiveNative" type="boolean" line="206"/>
            <method name="exitFullScreenExclusive" type="void" line="208">
                <params>
                    <param name="screen" type="int"/>
                    <param name="w" type="WindowPeer"/>
                </params>
                <scope line="209">
                    <declaration name="rq" type="D3DRenderQueue" line="210"/>
                    <scope line="212">
                        <anonymous_class line="213">
                            <method name="run" type="void" line="214"/>
                        </anonymous_class>
                    </scope>
                    <scope line="218"/>
                </scope>
                <scope line="221"/>
            </method>
            <class name="D3DFSWindowAdapter" line="226">
                <extends class="WindowAdapter"/>
                <javadoc line="226">
                    WindowAdapter class for the full-screen frame, responsible for
                      restoring the devices. This is important to do because unless the device
                      is restored it will not go back into the FS mode once alt+tabbed out.
                      This is a problem for windows for which we do not do any d3d-related
                      operations (like when we disabled on-screen rendering).
                      REMIND: we create an instance per each full-screen device while a single
                      instance would suffice (but requires more management).                    
                </javadoc>
                <method name="windowDeactivated" type="void" line="238">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowActivated" type="void" line="242">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
            </class>
            <method name="addFSWindowListener" type="void" line="248">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <comment line="250">
                    if the window is not a toplevel (has an owner) we have to use the
                     real toplevel to enter the full-screen mode with (4933099).                    
                </comment>
                <comment line="260">
                    we use operations on peer instead of component because calling
                     them on component will take the tree lock                    
                </comment>
                <scope line="253">
                    <declaration name="fp" type="WWindowPeer" line="255"/>
                    <declaration name="r" type="Rectangle" line="258"/>
                </scope>
                <scope line="263"/>
            </method>
            <method name="removeFSWindowListener" type="void" line="275">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <comment line="280">
                    Bug 4933099: There is some funny-business to deal with when this
                     method is called with a Window instead of a Frame.  See 4836744
                     for more information on this.  One side-effect of our workaround
                     for the problem is that the owning Frame of a Window may end
                     up getting resized during the fullscreen process.  When we
                     return from fullscreen mode, we should resize the Frame to
                     its original size (just like the Window is being resized
                     to its original size in GraphicsDevice).                    
                </comment>
                <comment line="293">
                    if the window went into fs mode before it was realized it
                     could have (0,0) dimensions                    
                </comment>
                <declaration name="wpeer" type="WWindowPeer" line="289"/>
                <scope line="290">
                    <scope line="291">
                        <scope line="298"/>
                    </scope>
                    <scope line="303"/>
                </scope>
            </method>
            <method name="getCurrentDisplayModeNative" type="DisplayMode" line="311"/>
            <method name="getCurrentDisplayMode" type="DisplayMode" line="313">
                <params>
                    <param name="screen" type="int"/>
                </params>
                <declaration name="rq" type="D3DRenderQueue" line="314"/>
                <scope line="316">
                    <class name="Result" line="317">
                        <declaration name="dm" type="DisplayMode" line="318"/>
                    </class>
                    <declaration name="res" type="Result" line="320"/>
                    <anonymous_class line="321">
                        <method name="run" type="void" line="322"/>
                    </anonymous_class>
                    <scope line="326"/>
                </scope>
                <scope line="330"/>
            </method>
            <method name="configDisplayModeNative" type="void" line="334"/>
            <method name="configDisplayMode" type="void" line="342">
                <params>
                    <param name="screen" type="int"/>
                    <param name="w" type="WindowPeer"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="bitDepth" type="int"/>
                    <param name="refreshRate" type="int"/>
                </params>
                <comment line="344">
                    we entered fs mode via gdi                    
                </comment>
                <comment line="353">
                    REMIND: we do this before we switch the display mode, so
                     the dimensions may be exceeding the dimensions of the screen,
                     is this a problem?                    
                </comment>
                <comment line="357">
                    update the bounds of the owner frame                    
                </comment>
                <comment line="370">
                    window is disposed                    
                </comment>
                <comment line="373">
                    REMIND: do we really need a window here?
                     we should probably just use the current one                    
                </comment>
                <scope line="344"/>
                <declaration name="wpeer" type="WWindowPeer" line="350"/>
                <scope line="357">
                    <declaration name="screenBounds" type="Rectangle" line="358"/>
                </scope>
                <declaration name="rq" type="D3DRenderQueue" line="362"/>
                <scope line="364">
                    <anonymous_class line="365">
                        <method name="run" type="void" line="366">
                            <comment line="370">
                                window is disposed                                
                            </comment>
                            <comment line="373">
                                REMIND: do we really need a window here?
                                 we should probably just use the current one                                
                            </comment>
                            <declaration name="hwnd" type="long" line="367"/>
                            <scope line="368"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="378"/>
            </method>
            <method name="enumDisplayModesNative" type="void" line="383"/>
            <method name="enumDisplayModes" type="void" line="386">
                <params>
                    <param name="screen" type="int"/>
                    <param name="modes" type="ArrayList"/>
                </params>
                <declaration name="rq" type="D3DRenderQueue" line="387"/>
                <scope line="389">
                    <anonymous_class line="390">
                        <method name="run" type="void" line="391"/>
                    </anonymous_class>
                    <scope line="395"/>
                </scope>
                <scope line="398"/>
            </method>
            <method name="getAvailableAcceleratedMemoryNative" type="long" line="403"/>
            <method name="getAvailableAcceleratedMemory" type="int" line="405">
                <declaration name="rq" type="D3DRenderQueue" line="406"/>
                <scope line="408">
                    <class name="Result" line="409">
                        <declaration name="mem" type="long" line="410"/>
                    </class>
                    <declaration name="res" type="Result" line="412"/>
                    <anonymous_class line="413">
                        <method name="run" type="void" line="414"/>
                    </anonymous_class>
                </scope>
                <scope line="419"/>
            </method>
            <method name="getConfigurations" type="GraphicsConfiguration[]" line="425">
                <scope line="426">
                    <scope line="427">
                        <scope line="429"/>
                    </scope>
                </scope>
            </method>
            <method name="getDefaultConfiguration" type="GraphicsConfiguration" line="440">
                <scope line="441">
                    <scope line="442"/>
                    <scope line="444"/>
                </scope>
            </method>
            <method name="isD3DAvailableOnDeviceNative" type="boolean" line="451"/>
            <method name="isD3DAvailableOnDevice" type="boolean" line="453">
                <params>
                    <param name="screen" type="int"/>
                </params>
                <comment line="459">
                    REMIND: should we cache the result per device somehow,
                     and then reset and retry it on display change?                    
                </comment>
                <scope line="454"/>
                <declaration name="rq" type="D3DRenderQueue" line="460"/>
                <scope line="462">
                    <class name="Result" line="463">
                        <declaration name="avail" type="boolean" line="464"/>
                    </class>
                    <declaration name="res" type="Result" line="466"/>
                    <anonymous_class line="467">
                        <method name="run" type="void" line="468"/>
                    </anonymous_class>
                </scope>
                <scope line="473"/>
            </method>
            <method name="getContext" type="D3DContext" line="478"/>
            <method name="getContextCapabilities" type="ContextCapabilities" line="482"/>
            <method name="displayChanged" type="void" line="487">
                <comment line="490">
                    REMIND: make sure this works when the device is lost and we don&apos;t
                     disable d3d too eagerly                    
                </comment>
                <scope line="491"/>
            </method>
            <method name="invalidate" type="void" line="497">
                <params>
                    <param name="defaultScreen" type="int"/>
                </params>
                <comment line="500">
                    REMIND: this is a bit excessive, isD3DEnabledOnDevice will return
                     false anyway because the device is invalid                    
                </comment>
            </method>
        </class>
    </source>