<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.d3d">
        <import package="java.awt.Composite"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.image.AffineTransformOp"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.BufferedImageOp"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="sun.java2d.ScreenUpdateManager"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.loops.Blit"/>
        <import package="sun.java2d.loops.CompositeType"/>
        <import package="sun.java2d.loops.GraphicsPrimitive"/>
        <import package="sun.java2d.loops.GraphicsPrimitiveMgr"/>
        <import package="sun.java2d.loops.ScaledBlit"/>
        <import package="sun.java2d.loops.SurfaceType"/>
        <import package="sun.java2d.loops.TransformBlit"/>
        <import package="sun.java2d.pipe.Region"/>
        <import package="sun.java2d.pipe.RenderBuffer"/>
        <import package="sun.java2d.pipe.RenderQueue"/>
        <import package="sun.java2d.pipe.BufferedOpCodes"/>
        <import package="sun.java2d.windows.GDIWindowSurfaceData"/>
        <class name="D3DBlitLoops" line="50">
            <comment line="501">
                REMIND: destination will actually be opaque/premultiplied...                
            </comment>
            <method name="register" type="void" line="52">
                <comment line="62">
                    prevent D3DSurface -&gt; Screen blits                    
                </comment>
                <comment line="67">
                    surface-&gt;surface ops                    
                </comment>
                <comment line="72">
                    render-to-texture surface-&gt;surface ops                    
                </comment>
                <comment line="77">
                    surface-&gt;sw ops                    
                </comment>
                <comment line="81">
                    sw-&gt;surface ops                    
                </comment>
                <comment line="97">
                    REMIND: we don&apos;t have a native sw loop to back this loop up                    
                </comment>
                <comment line="98">
                    new D3DSwToSurfaceBlit(SurfaceType.ByteIndexedBm,
                                                       D3DSurfaceData.ST_BYTE_INDEXED_BM),                    
                </comment>
                <comment line="120">
                    REMIND: we don&apos;t have a native sw loop to back this loop up                    
                </comment>
                <comment line="121">
                    new D3DSwToSurfaceScale(SurfaceType.ByteIndexedBm,
                                                        D3DSurfaceData.ST_BYTE_INDEXED_BM),                    
                </comment>
                <comment line="140">
                    REMIND: we don&apos;t have a native sw loop to back this loop up                    
                </comment>
                <comment line="141">
                    new D3DSwToSurfaceTransform(SurfaceType.ByteIndexedBm,
                                                            D3DSurfaceData.ST_BYTE_INDEXED_BM),                    
                </comment>
                <comment line="144">
                    texture-&gt;surface ops                    
                </comment>
                <comment line="149">
                    sw-&gt;texture ops                    
                </comment>
                <comment line="165">
                    REMIND: we don&apos;t have a native sw loop to back this loop up                    
                </comment>
                <comment line="166">
                    new D3DSwToTextureBlit(SurfaceType.ByteIndexedBm,
                                                       D3DSurfaceData.ST_BYTE_INDEXED_BM),                    
                </comment>
                <declaration name="blitIntArgbPreToSurface" type="Blit" line="53"/>
                <declaration name="blitIntArgbPreToTexture" type="Blit" line="56"/>
                <declaration name="primitives" type="GraphicsPrimitive[]" line="60"/>
            </method>
            <declaration name="OFFSET_SRCTYPE" type="int" line="174"/>
            <javadoc line="174">
                The following offsets are used to pack the parameters in
                  createPackedParams().  (They are also used at the native level when
                  unpacking the params.)                
            </javadoc>
            <declaration name="OFFSET_HINT" type="int" line="180"/>
            <declaration name="OFFSET_TEXTURE" type="int" line="181"/>
            <declaration name="OFFSET_RTT" type="int" line="182"/>
            <declaration name="OFFSET_XFORM" type="int" line="183"/>
            <declaration name="OFFSET_ISOBLIT" type="int" line="184"/>
            <javadoc line="186">
                Packs the given parameters into a single int value in order to save
                  space on the rendering queue.                
            </javadoc>
            <method name="createPackedParams" type="int" line="193">
                <params>
                    <param name="isoblit" type="boolean"/>
                    <param name="texture" type="boolean"/>
                    <param name="rtt" type="boolean"/>
                    <param name="xform" type="boolean"/>
                    <param name="hint" type="int"/>
                    <param name="srctype" type="int"/>
                </params>
            </method>
            <javadoc line="203">
                Enqueues a BLIT operation with the given parameters.  Note that the
                  RenderQueue lock must be held before calling this method.                
            </javadoc>
            <method name="enqueueBlit" type="void" line="214">
                <params>
                    <param name="rq" type="RenderQueue"/>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="packedParams" type="int"/>
                    <param name="sx1" type="int"/>
                    <param name="sy1" type="int"/>
                    <param name="sx2" type="int"/>
                    <param name="sy2" type="int"/>
                    <param name="dx1" type="double"/>
                    <param name="dy1" type="double"/>
                    <param name="dx2" type="double"/>
                    <param name="dy2" type="double"/>
                </params>
                <comment line="216">
                    assert rq.lock.isHeldByCurrentThread();                    
                </comment>
                <declaration name="buf" type="RenderBuffer" line="216"/>
            </method>
            <method name="Blit" type="void" line="236">
                <params>
                    <param name="srcData" type="SurfaceData"/>
                    <param name="dstData" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="xform" type="AffineTransform"/>
                    <param name="hint" type="int"/>
                    <param name="sx1" type="int"/>
                    <param name="sy1" type="int"/>
                    <param name="sx2" type="int"/>
                    <param name="sy2" type="int"/>
                    <param name="dx1" type="double"/>
                    <param name="dy1" type="double"/>
                    <param name="dx2" type="double"/>
                    <param name="dy2" type="double"/>
                    <param name="srctype" type="int"/>
                    <param name="texture" type="boolean"/>
                </params>
                <comment line="247">
                    make sure the RenderQueue keeps a hard reference to the
                     source (sysmem) SurfaceData to prevent it from being
                     disposed while the operation is processed on the QFT                    
                </comment>
                <comment line="253">
                    make sure we have a current context before uploading
                     the sysmem data to the texture object                    
                </comment>
                <comment line="270">
                    always flush immediately, since we (currently) have no means
                     of tracking changes to the system memory surface                    
                </comment>
                <comment line="278">
                    flush immediately when copying to the screen to improve
                     responsiveness of applications using VI or BI backbuffers                    
                </comment>
                <declaration name="ctxflags" type="int" line="237"/>
                <scope line="238"/>
                <declaration name="d3dDst" type="D3DSurfaceData" line="242"/>
                <declaration name="rq" type="D3DRenderQueue" line="243"/>
                <scope line="245">
                    <scope line="251"/>
                    <scope line="255"/>
                    <declaration name="packedParams" type="int" line="261"/>
                </scope>
                <scope line="272"/>
                <scope line="276">
                    <declaration name="mgr" type="D3DScreenUpdateManager" line="279"/>
                </scope>
            </method>
            <javadoc line="285">
                Note: The srcImg and biop parameters are only used when invoked
                  from the D3DBufImgOps.renderImageWithOp() method; in all other cases,
                  this method can be called with null values for those two parameters,
                  and they will be effectively ignored.                
            </javadoc>
            <method name="IsoBlit" type="void" line="300">
                <params>
                    <param name="srcData" type="SurfaceData"/>
                    <param name="dstData" type="SurfaceData"/>
                    <param name="srcImg" type="BufferedImage"/>
                    <param name="biop" type="BufferedImageOp"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="xform" type="AffineTransform"/>
                    <param name="hint" type="int"/>
                    <param name="sx1" type="int"/>
                    <param name="sy1" type="int"/>
                    <param name="sx2" type="int"/>
                    <param name="sy2" type="int"/>
                    <param name="dx1" type="double"/>
                    <param name="dy1" type="double"/>
                    <param name="dx2" type="double"/>
                    <param name="dy2" type="double"/>
                    <param name="texture" type="boolean"/>
                </params>
                <comment line="318">
                    the source is a backbuffer, or render-to-texture
                     surface; we set rtt to true to differentiate this kind
                     of surface from a regular texture object                    
                </comment>
                <comment line="334">
                                        
                </comment>
                <comment line="348">
                    we only have to flush immediately when copying from a
                     (non-texture) surface to the screen; otherwise Swing apps
                     might appear unresponsive until the auto-flush completes                    
                </comment>
                <declaration name="ctxflags" type="int" line="301"/>
                <scope line="302"/>
                <declaration name="d3dDst" type="D3DSurfaceData" line="306"/>
                <declaration name="rq" type="D3DRenderQueue" line="307"/>
                <declaration name="rtt" type="boolean" line="308"/>
                <scope line="310">
                    <declaration name="d3dSrc" type="D3DSurfaceData" line="311"/>
                    <declaration name="srctype" type="int" line="312"/>
                    <declaration name="srcCtxData" type="D3DSurfaceData" line="313"/>
                    <scope line="314"/>
                    <scope line="316"/>
                    <scope line="327"/>
                    <declaration name="packedParams" type="int" line="331"/>
                    <scope line="339"/>
                </scope>
                <scope line="342"/>
                <scope line="346">
                    <declaration name="mgr" type="D3DScreenUpdateManager" line="350"/>
                </scope>
            </method>
        </class>
        <class name="D3DSurfaceToSurfaceBlit" line="357">
            <extends class="Blit"/>
            <comment line="501">
                REMIND: destination will actually be opaque/premultiplied...                
            </comment>
            <method name="D3DSurfaceToSurfaceBlit" type="constructor" line="359"/>
            <method name="Blit" type="void" line="368">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="sx" type="int"/>
                    <param name="sy" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
        </class>
        <class name="D3DSurfaceToSurfaceScale" line="379">
            <extends class="ScaledBlit"/>
            <comment line="501">
                REMIND: destination will actually be opaque/premultiplied...                
            </comment>
            <method name="D3DSurfaceToSurfaceScale" type="constructor" line="381"/>
            <method name="Scale" type="void" line="393">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="sx1" type="int"/>
                    <param name="sy1" type="int"/>
                    <param name="sx2" type="int"/>
                    <param name="sy2" type="int"/>
                    <param name="dx1" type="double"/>
                    <param name="dy1" type="double"/>
                    <param name="dx2" type="double"/>
                    <param name="dy2" type="double"/>
                </params>
            </method>
        </class>
        <class name="D3DSurfaceToSurfaceTransform" line="404">
            <extends class="TransformBlit"/>
            <comment line="501">
                REMIND: destination will actually be opaque/premultiplied...                
            </comment>
            <method name="D3DSurfaceToSurfaceTransform" type="constructor" line="406"/>
            <method name="Transform" type="void" line="417">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="at" type="AffineTransform"/>
                    <param name="hint" type="int"/>
                    <param name="sx" type="int"/>
                    <param name="sy" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
        </class>
        <class name="D3DRTTSurfaceToSurfaceBlit" line="427">
            <extends class="Blit"/>
            <comment line="501">
                REMIND: destination will actually be opaque/premultiplied...                
            </comment>
            <method name="D3DRTTSurfaceToSurfaceBlit" type="constructor" line="429"/>
            <method name="Blit" type="void" line="438">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="sx" type="int"/>
                    <param name="sy" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
        </class>
        <class name="D3DRTTSurfaceToSurfaceScale" line="449">
            <extends class="ScaledBlit"/>
            <comment line="501">
                REMIND: destination will actually be opaque/premultiplied...                
            </comment>
            <method name="D3DRTTSurfaceToSurfaceScale" type="constructor" line="451"/>
            <method name="Scale" type="void" line="463">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="sx1" type="int"/>
                    <param name="sy1" type="int"/>
                    <param name="sx2" type="int"/>
                    <param name="sy2" type="int"/>
                    <param name="dx1" type="double"/>
                    <param name="dy1" type="double"/>
                    <param name="dx2" type="double"/>
                    <param name="dy2" type="double"/>
                </params>
            </method>
        </class>
        <class name="D3DRTTSurfaceToSurfaceTransform" line="474">
            <extends class="TransformBlit"/>
            <comment line="501">
                REMIND: destination will actually be opaque/premultiplied...                
            </comment>
            <method name="D3DRTTSurfaceToSurfaceTransform" type="constructor" line="476"/>
            <method name="Transform" type="void" line="486">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="at" type="AffineTransform"/>
                    <param name="hint" type="int"/>
                    <param name="sx" type="int"/>
                    <param name="sy" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
        </class>
        <class name="D3DSurfaceToSwBlit" line="496">
            <extends class="Blit"/>
            <comment line="501">
                REMIND: destination will actually be opaque/premultiplied...                
            </comment>
            <declaration name="typeval" type="int" line="498"/>
            <method name="D3DSurfaceToSwBlit" type="constructor" line="501">
                <params>
                    <param name="dstType" type="SurfaceType"/>
                    <param name="typeval" type="int"/>
                </params>
            </method>
            <method name="Blit" type="void" line="512">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="sx" type="int"/>
                    <param name="sy" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="517">
                    make sure the RenderQueue keeps a hard reference to the
                     destination (sysmem) SurfaceData to prevent it from being
                     disposed while the operation is processed on the QFT                    
                </comment>
                <comment line="534">
                    always flush immediately                    
                </comment>
                <declaration name="rq" type="D3DRenderQueue" line="513"/>
                <scope line="515">
                    <declaration name="buf" type="RenderBuffer" line="521"/>
                </scope>
                <scope line="535"/>
            </method>
        </class>
        <class name="D3DSwToSurfaceBlit" line="541">
            <extends class="Blit"/>
            <comment line="501">
                REMIND: destination will actually be opaque/premultiplied...                
            </comment>
            <declaration name="typeval" type="int" line="543"/>
            <method name="D3DSwToSurfaceBlit" type="constructor" line="545">
                <params>
                    <param name="srcType" type="SurfaceType"/>
                    <param name="typeval" type="int"/>
                </params>
            </method>
            <method name="Blit" type="void" line="555">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="sx" type="int"/>
                    <param name="sy" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
        </class>
        <class name="D3DSwToSurfaceScale" line="565">
            <extends class="ScaledBlit"/>
            <comment line="501">
                REMIND: destination will actually be opaque/premultiplied...                
            </comment>
            <declaration name="typeval" type="int" line="567"/>
            <method name="D3DSwToSurfaceScale" type="constructor" line="569">
                <params>
                    <param name="srcType" type="SurfaceType"/>
                    <param name="typeval" type="int"/>
                </params>
            </method>
            <method name="Scale" type="void" line="582">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="sx1" type="int"/>
                    <param name="sy1" type="int"/>
                    <param name="sx2" type="int"/>
                    <param name="sy2" type="int"/>
                    <param name="dx1" type="double"/>
                    <param name="dy1" type="double"/>
                    <param name="dx2" type="double"/>
                    <param name="dy2" type="double"/>
                </params>
            </method>
        </class>
        <class name="D3DSwToSurfaceTransform" line="592">
            <extends class="TransformBlit"/>
            <comment line="501">
                REMIND: destination will actually be opaque/premultiplied...                
            </comment>
            <declaration name="typeval" type="int" line="594"/>
            <method name="D3DSwToSurfaceTransform" type="constructor" line="596">
                <params>
                    <param name="srcType" type="SurfaceType"/>
                    <param name="typeval" type="int"/>
                </params>
            </method>
            <method name="Transform" type="void" line="607">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="at" type="AffineTransform"/>
                    <param name="hint" type="int"/>
                    <param name="sx" type="int"/>
                    <param name="sy" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
        </class>
        <class name="D3DSwToTextureBlit" line="616">
            <extends class="Blit"/>
            <comment line="501">
                REMIND: destination will actually be opaque/premultiplied...                
            </comment>
            <declaration name="typeval" type="int" line="618"/>
            <method name="D3DSwToTextureBlit" type="constructor" line="620">
                <params>
                    <param name="srcType" type="SurfaceType"/>
                    <param name="typeval" type="int"/>
                </params>
            </method>
            <method name="Blit" type="void" line="630">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="sx" type="int"/>
                    <param name="sy" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
        </class>
        <class name="D3DTextureToSurfaceBlit" line="640">
            <extends class="Blit"/>
            <comment line="501">
                REMIND: destination will actually be opaque/premultiplied...                
            </comment>
            <method name="D3DTextureToSurfaceBlit" type="constructor" line="642"/>
            <method name="Blit" type="void" line="651">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="sx" type="int"/>
                    <param name="sy" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
        </class>
        <class name="D3DTextureToSurfaceScale" line="662">
            <extends class="ScaledBlit"/>
            <comment line="501">
                REMIND: destination will actually be opaque/premultiplied...                
            </comment>
            <method name="D3DTextureToSurfaceScale" type="constructor" line="664"/>
            <method name="Scale" type="void" line="676">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="sx1" type="int"/>
                    <param name="sy1" type="int"/>
                    <param name="sx2" type="int"/>
                    <param name="sy2" type="int"/>
                    <param name="dx1" type="double"/>
                    <param name="dy1" type="double"/>
                    <param name="dx2" type="double"/>
                    <param name="dy2" type="double"/>
                </params>
            </method>
        </class>
        <class name="D3DTextureToSurfaceTransform" line="687">
            <extends class="TransformBlit"/>
            <comment line="501">
                REMIND: destination will actually be opaque/premultiplied...                
            </comment>
            <method name="D3DTextureToSurfaceTransform" type="constructor" line="689"/>
            <method name="Transform" type="void" line="700">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="at" type="AffineTransform"/>
                    <param name="hint" type="int"/>
                    <param name="sx" type="int"/>
                    <param name="sy" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
        </class>
        <class name="D3DGeneralBlit" line="710">
            <extends class="Blit"/>
            <comment line="501">
                REMIND: destination will actually be opaque/premultiplied...                
            </comment>
            <javadoc line="710">
                This general Blit implemenation converts any source surface to an
                  intermediate IntArgbPre surface, and then uses the more specific
                  IntArgbPre-&gt;D3DSurface/Texture loop to get the intermediate
                  (premultiplied) surface down to D3D.                
            </javadoc>
            <declaration name="performop" type="Blit" line="718"/>
            <declaration name="srcTmp" type="WeakReference" line="719"/>
            <method name="D3DGeneralBlit" type="constructor" line="724">
                <params>
                    <param name="dstType" type="SurfaceType"/>
                    <param name="compType" type="CompositeType"/>
                    <param name="performop" type="Blit"/>
                </params>
            </method>
            <method name="Blit" type="void" line="733">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="sx" type="int"/>
                    <param name="sy" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="741">
                    use cached intermediate surface, if available                    
                </comment>
                <comment line="745">
                    convert source to IntArgbPre                    
                </comment>
                <comment line="749">
                    copy IntArgbPre intermediate surface to D3D surface                    
                </comment>
                <comment line="754">
                    cache the intermediate surface                    
                </comment>
                <declaration name="convertsrc" type="Blit" line="734"/>
                <declaration name="cachedSrc" type="SurfaceData" line="738"/>
                <scope line="739"/>
                <scope line="752"/>
            </method>
        </class>
        <class name="D3DSurfaceToGDIWindowSurfaceBlit" line="786">
            <extends class="Blit"/>
            <comment line="501">
                REMIND: destination will actually be opaque/premultiplied...                
            </comment>
            <method name="D3DSurfaceToGDIWindowSurfaceBlit" type="constructor" line="788"/>
            <method name="Blit" type="void" line="797">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="sx" type="int"/>
                    <param name="sy" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="799">
                    see comment above                    
                </comment>
            </method>
        </class>
        <class name="D3DSurfaceToGDIWindowSurfaceScale" line="804">
            <extends class="ScaledBlit"/>
            <comment line="501">
                REMIND: destination will actually be opaque/premultiplied...                
            </comment>
            <method name="D3DSurfaceToGDIWindowSurfaceScale" type="constructor" line="806"/>
            <method name="Scale" type="void" line="818">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="sx1" type="int"/>
                    <param name="sy1" type="int"/>
                    <param name="sx2" type="int"/>
                    <param name="sy2" type="int"/>
                    <param name="dx1" type="double"/>
                    <param name="dy1" type="double"/>
                    <param name="dx2" type="double"/>
                    <param name="dy2" type="double"/>
                </params>
                <comment line="820">
                    see comment above                    
                </comment>
            </method>
        </class>
        <class name="D3DSurfaceToGDIWindowSurfaceTransform" line="824">
            <extends class="TransformBlit"/>
            <comment line="501">
                REMIND: destination will actually be opaque/premultiplied...                
            </comment>
            <method name="D3DSurfaceToGDIWindowSurfaceTransform" type="constructor" line="826"/>
            <method name="Transform" type="void" line="837">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="at" type="AffineTransform"/>
                    <param name="hint" type="int"/>
                    <param name="sx" type="int"/>
                    <param name="sy" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="839">
                    see comment above                    
                </comment>
            </method>
        </class>
    </source>