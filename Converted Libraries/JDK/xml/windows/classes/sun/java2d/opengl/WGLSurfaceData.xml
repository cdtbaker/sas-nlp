<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.opengl">
        <import package="java.awt.Component"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.GraphicsDevice"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.windows.WComponentPeer"/>
        <import package="sun.java2d.SurfaceData"/>
        <class name="WGLSurfaceData" line="39">
            <extends class="OGLSurfaceData"/>
            <declaration name="peer" type="WComponentPeer" line="41"/>
            <declaration name="graphicsConfig" type="WGLGraphicsConfig" line="42"/>
            <method name="initOps" type="void" line="44"/>
            <method name="initPbuffer" type="boolean" line="46"/>
            <method name="WGLSurfaceData" type="constructor" line="52">
                <params>
                    <param name="peer" type="WComponentPeer"/>
                    <param name="gc" type="WGLGraphicsConfig"/>
                    <param name="cm" type="ColorModel"/>
                    <param name="type" type="int"/>
                </params>
                <declaration name="pConfigInfo" type="long" line="57"/>
                <declaration name="hwnd" type="long" line="58"/>
            </method>
            <method name="getDeviceConfiguration" type="GraphicsConfiguration" line="63"/>
            <javadoc line="67">
                Creates a SurfaceData object representing the primary (front) buffer
                  of an on-screen Window.                
            </javadoc>
            <method name="createData" type="WGLWindowSurfaceData" line="71">
                <params>
                    <param name="peer" type="WComponentPeer"/>
                </params>
                <comment line="72">
                    the OGL pipeline can render directly to the screen and interfere                    
                </comment>
                <comment line="73">
                    with layered windows, which is why we don&apos;t allow accelerated                    
                </comment>
                <comment line="74">
                    surfaces in this case                    
                </comment>
                <scope line="77"/>
                <declaration name="gc" type="WGLGraphicsConfig" line="80"/>
            </method>
            <javadoc line="84">
                Creates a SurfaceData object representing the back buffer of a
                  double-buffered on-screen Window.                
            </javadoc>
            <method name="createData" type="WGLOffScreenSurfaceData" line="91">
                <params>
                    <param name="peer" type="WComponentPeer"/>
                    <param name="image" type="Image"/>
                    <param name="type" type="int"/>
                </params>
                <comment line="92">
                    the OGL pipeline can render directly to the screen and interfere                    
                </comment>
                <comment line="93">
                    with layered windows, which is why we don&apos;t allow accelerated                    
                </comment>
                <comment line="94">
                    surfaces in this case                    
                </comment>
                <scope line="97"/>
                <declaration name="gc" type="WGLGraphicsConfig" line="100"/>
                <declaration name="r" type="Rectangle" line="101"/>
                <scope line="102"/>
                <scope line="106"/>
            </method>
            <javadoc line="113">
                Creates a SurfaceData object representing an off-screen buffer (either
                  a Pbuffer or Texture).                
            </javadoc>
            <method name="createData" type="WGLOffScreenSurfaceData" line="121">
                <params>
                    <param name="gc" type="WGLGraphicsConfig"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="cm" type="ColorModel"/>
                    <param name="image" type="Image"/>
                    <param name="type" type="int"/>
                </params>
            </method>
            <method name="getGC" type="WGLGraphicsConfig" line="126">
                <params>
                    <param name="peer" type="WComponentPeer"/>
                </params>
                <comment line="130">
                    REMIND: this should rarely (never?) happen, but what if                    
                </comment>
                <comment line="131">
                    default config is not WGL?                    
                </comment>
                <scope line="127"/>
                <scope line="129">
                    <declaration name="env" type="GraphicsEnvironment" line="132"/>
                    <declaration name="gd" type="GraphicsDevice" line="134"/>
                </scope>
            </method>
            <class name="WGLWindowSurfaceData" line="139">
                <extends class="WGLSurfaceData"/>
                <method name="WGLWindowSurfaceData" type="constructor" line="143">
                    <params>
                        <param name="peer" type="WComponentPeer"/>
                        <param name="gc" type="WGLGraphicsConfig"/>
                    </params>
                </method>
                <method name="getReplacement" type="SurfaceData" line="147"/>
                <method name="getBounds" type="Rectangle" line="151">
                    <declaration name="r" type="Rectangle" line="152"/>
                </method>
                <javadoc line="157">
                    Returns destination Component associated with this SurfaceData.                    
                </javadoc>
                <method name="getDestination" type="Object" line="160"/>
            </class>
            <class name="WGLVSyncOffScreenSurfaceData" line="165">
                <extends class="WGLOffScreenSurfaceData"/>
                <javadoc line="165">
                    A surface which implements a v-synced flip back-buffer with COPIED
                      FlipContents.
                      This surface serves as a back-buffer to the outside world, while
                      it is actually an offscreen surface. When the BufferStrategy this surface
                      belongs to is showed, it is first copied to the real private
                      FLIP_BACKBUFFER, which is then flipped.                    
                </javadoc>
                <declaration name="flipSurface" type="WGLOffScreenSurfaceData" line="177"/>
                <method name="WGLVSyncOffScreenSurfaceData" type="constructor" line="184">
                    <params>
                        <param name="peer" type="WComponentPeer"/>
                        <param name="gc" type="WGLGraphicsConfig"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                        <param name="image" type="Image"/>
                        <param name="cm" type="ColorModel"/>
                        <param name="type" type="int"/>
                    </params>
                </method>
                <method name="getFlipSurface" type="SurfaceData" line="189"/>
                <method name="flush" type="void" line="194"/>
            </class>
            <class name="WGLOffScreenSurfaceData" line="201">
                <extends class="WGLSurfaceData"/>
                <declaration name="offscreenImage" type="Image" line="203"/>
                <declaration name="width" type="int" line="204"/>
                <method name="WGLOffScreenSurfaceData" type="constructor" line="211">
                    <params>
                        <param name="peer" type="WComponentPeer"/>
                        <param name="gc" type="WGLGraphicsConfig"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                        <param name="image" type="Image"/>
                        <param name="cm" type="ColorModel"/>
                        <param name="type" type="int"/>
                    </params>
                </method>
                <method name="getReplacement" type="SurfaceData" line="221"/>
                <method name="getBounds" type="Rectangle" line="225">
                    <scope line="226">
                        <declaration name="r" type="Rectangle" line="227"/>
                    </scope>
                    <scope line="230"/>
                </method>
                <javadoc line="235">
                    Returns destination Image associated with this SurfaceData.                    
                </javadoc>
                <method name="getDestination" type="Object" line="238"/>
            </class>
            <method name="updateWindowAccelImpl" type="boolean" line="243"/>
            <javadoc line="243">
                Updates the layered window with the contents of the surface.                
                <param>
                    psdops pointer to the native ogl sd structure                    
                </param>
                <param>
                    pData pointer to the AwtWindow peer data                    
                </param>
                <param>
                    w width of the window                    
                </param>
                <param>
                    h height of the window                    
                </param>
                <see>
                    sun.awt.windows.TranslucentWindowPainter                    
                </see>
            </javadoc>
        </class>
    </source>