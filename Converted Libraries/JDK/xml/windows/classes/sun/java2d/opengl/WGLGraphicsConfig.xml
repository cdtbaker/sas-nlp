<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.opengl">
        <import package="java.awt.AWTException"/>
        <import package="java.awt.BufferCapabilities"/>
        <import package="java.awt.BufferCapabilities.FlipContents"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.ImageCapabilities"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="sun.awt.Win32GraphicsConfig"/>
        <import package="sun.awt.Win32GraphicsDevice"/>
        <import package="sun.awt.image.SunVolatileImage"/>
        <import package="sun.awt.image.SurfaceManager"/>
        <import package="sun.awt.windows.WComponentPeer"/>
        <import package="sun.java2d.Disposer"/>
        <import package="sun.java2d.DisposerRecord"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.Surface"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.pipe.hw.AccelSurface"/>
        <import package="sun.java2d.pipe.hw.AccelTypedVolatileImage"/>
        <import package="sun.java2d.pipe.hw.ContextCapabilities"/>
        <import package="sun.java2d.opengl.OGLContext.OGLContextCaps"/>
        <import package="sun.java2d.opengl.WGLSurfaceData"/>
        <import package="sun.java2d.opengl.OGLContext.OGLContextCaps"/>
        <import package="sun.java2d.pipe.hw.AccelDeviceEventListener"/>
        <import package="sun.java2d.pipe.hw.AccelDeviceEventNotifier"/>
        <import package="sun.java2d.windows.GDIWindowSurfaceData"/>
        <class name="WGLGraphicsConfig" line="35">
            <extends class="Win32GraphicsConfig"/>
            <implements interface="OGLGraphicsConfig"/>
            <declaration name="wglAvailable" type="boolean" line="36"/>
            <declaration name="imageCaps" type="ImageCapabilities" line="37"/>
            <declaration name="bufferCaps" type="BufferCapabilities" line="38"/>
            <declaration name="pConfigInfo" type="long" line="39"/>
            <declaration name="oglCaps" type="ContextCapabilities" line="40"/>
            <declaration name="context" type="OGLContext" line="41"/>
            <declaration name="disposerReferent" type="Object" line="42"/>
            <method name="getDefaultPixFmt" type="int" line="43"/>
            <method name="initWGL" type="boolean" line="44"/>
            <method name="getWGLConfigInfo" type="long" line="45"/>
            <method name="getOGLCapabilities" type="int" line="46"/>
            <scope line="47"/>
            <method name="WGLGraphicsConfig" type="constructor" line="50">
                <params>
                    <param name="device" type="Win32GraphicsDevice"/>
                    <param name="visualnum" type="int"/>
                    <param name="configInfo" type="long"/>
                    <param name="oglCaps" type="ContextCapabilities"/>
                </params>
            </method>
            <method name="getProxyKey" type="Object" line="57"/>
            <method name="createManagedSurface" type="SurfaceData" line="60">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="transparency" type="int"/>
                </params>
            </method>
            <method name="getConfig" type="WGLGraphicsConfig" line="63">
                <params>
                    <param name="device" type="Win32GraphicsDevice"/>
                    <param name="pixfmt" type="int"/>
                </params>
                <scope line="64"/>
                <declaration name="cfginfo" type="long" line="67"/>
                <declaration name="ids" type="String" line="68"/>
                <declaration name="rq" type="OGLRenderQueue" line="69"/>
                <scope line="71">
                    <declaration name="action" type="WGLGetConfigInfo" line="73"/>
                    <scope line="76">
                        <anonymous_class line="78">
                            <method name="run" type="void" line="79"/>
                        </anonymous_class>
                    </scope>
                </scope>
                <scope line="86"/>
                <scope line="89"/>
                <declaration name="oglCaps" type="int" line="92"/>
                <declaration name="caps" type="ContextCapabilities" line="93"/>
            </method>
            <class name="WGLGetConfigInfo" line="96">
                <implements interface="Runnable"/>
                <javadoc line="96">
                    This is a small helper class that allows us to execute
                      getWGLConfigInfo() on the queue flushing thread.                    
                </javadoc>
                <declaration name="screen" type="int" line="101"/>
                <declaration name="pixfmt" type="int" line="102"/>
                <declaration name="cfginfo" type="long" line="103"/>
                <method name="WGLGetConfigInfo" type="constructor" line="104">
                    <params>
                        <param name="screen" type="int"/>
                        <param name="pixfmt" type="int"/>
                    </params>
                </method>
                <method name="run" type="void" line="108"/>
                <method name="getConfigInfo" type="long" line="111"/>
            </class>
            <method name="isWGLAvailable" type="boolean" line="115"/>
            <javadoc line="118">
                Returns true if the provided capability bit is present for this config.
                  See OGLContext.java for a list of supported capabilities.                
            </javadoc>
            <method name="isCapPresent" type="boolean" line="122">
                <params>
                    <param name="cap" type="int"/>
                </params>
            </method>
            <method name="getNativeConfigInfo" type="long" line="125"/>
            <javadoc line="128">
                {@inheritDoc}                
                <see>
                    sun.java2d.pipe.hw.BufferedContextProvider#getContext                    
                </see>
            </javadoc>
            <method name="getContext" type="OGLContext" line="132"/>
            <class name="WGLGCDisposerRecord" line="135">
                <implements interface="DisposerRecord"/>
                <declaration name="pCfgInfo" type="long" line="136"/>
                <declaration name="screen" type="int" line="137"/>
                <method name="WGLGCDisposerRecord" type="constructor" line="138">
                    <params>
                        <param name="pCfgInfo" type="long"/>
                        <param name="screen" type="int"/>
                    </params>
                </method>
                <method name="dispose" type="void" line="141">
                    <declaration name="rq" type="OGLRenderQueue" line="142"/>
                    <scope line="144">
                        <anonymous_class line="145">
                            <method name="run" type="void" line="146"/>
                        </anonymous_class>
                    </scope>
                    <scope line="153"/>
                    <scope line="156"/>
                </method>
            </class>
            <method name="displayChanged" type="void" line="162">
                <declaration name="rq" type="OGLRenderQueue" line="164"/>
                <scope line="166"/>
                <scope line="169"/>
            </method>
            <method name="getColorModel" type="ColorModel" line="173">
                <params>
                    <param name="transparency" type="int"/>
                </params>
                <declaration name="cs" type="ColorSpace" line="180"/>
            </method>
            <method name="toString" type="String" line="186"/>
            <javadoc line="189">
                Creates a new SurfaceData that will be associated with the given
                  WComponentPeer.                
            </javadoc>
            <method name="createSurfaceData" type="SurfaceData" line="193">
                <params>
                    <param name="peer" type="WComponentPeer"/>
                    <param name="numBackBuffers" type="int"/>
                </params>
                <declaration name="sd" type="SurfaceData" line="194"/>
                <scope line="195"/>
            </method>
            <javadoc line="200">
                Checks that the requested configuration is natively supported; if not,
                  an AWTException is thrown.                
            </javadoc>
            <method name="assertOperationSupported" type="void" line="204">
                <params>
                    <param name="target" type="Component"/>
                    <param name="numBuffers" type="int"/>
                    <param name="caps" type="BufferCapabilities"/>
                </params>
                <scope line="205"/>
                <declaration name="configCaps" type="BufferCapabilities" line="208"/>
                <scope line="209"/>
                <scope line="212"/>
            </method>
            <javadoc line="216">
                Creates a WGL-based backbuffer for the given peer and returns the
                  image wrapper.                
            </javadoc>
            <method name="createBackBuffer" type="VolatileImage" line="220">
                <params>
                    <param name="peer" type="WComponentPeer"/>
                </params>
                <declaration name="target" type="Component" line="221"/>
            </method>
            <javadoc line="224">
                Performs the native WGL flip operation for the given target Component.                
            </javadoc>
            <method name="flip" type="void" line="227">
                <params>
                    <param name="peer" type="WComponentPeer"/>
                    <param name="target" type="Component"/>
                    <param name="backBuffer" type="VolatileImage"/>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                    <param name="flipAction" type="BufferCapabilities.FlipContents"/>
                </params>
                <scope line="228">
                    <declaration name="vsm" type="SurfaceManager" line="229"/>
                    <declaration name="sd" type="SurfaceData" line="230"/>
                    <scope line="231">
                        <declaration name="vsd" type="WGLVSyncOffScreenSurfaceData" line="232"/>
                        <declaration name="bbsd" type="SurfaceData" line="233"/>
                        <declaration name="bbg" type="Graphics2D" line="234"/>
                        <scope line="235"/>
                        <scope line="238"/>
                    </scope>
                    <scope line="242">
                        <declaration name="g" type="Graphics" line="243"/>
                        <scope line="244"/>
                        <scope line="247"/>
                    </scope>
                </scope>
                <scope line="253"/>
                <scope line="257">
                    <declaration name="g" type="Graphics" line="258"/>
                    <scope line="259"/>
                    <scope line="263"/>
                </scope>
            </method>
            <class name="WGLBufferCaps" line="268">
                <extends class="BufferCapabilities"/>
                <method name="WGLBufferCaps" type="constructor" line="269">
                    <params>
                        <param name="dblBuf" type="boolean"/>
                    </params>
                </method>
            </class>
            <method name="getBufferCapabilities" type="BufferCapabilities" line="273">
                <scope line="274">
                    <declaration name="dblBuf" type="boolean" line="275"/>
                </scope>
            </method>
            <class name="WGLImageCaps" line="280">
                <extends class="ImageCapabilities"/>
                <method name="WGLImageCaps" type="constructor" line="281"/>
                <method name="isTrueVolatile" type="boolean" line="284"/>
            </class>
            <method name="getImageCapabilities" type="ImageCapabilities" line="288"/>
            <javadoc line="291">
                {@inheritDoc}                
                <see>
                    sun.java2d.pipe.hw.AccelGraphicsConfig#createCompatibleVolatileImage                    
                </see>
            </javadoc>
            <method name="createCompatibleVolatileImage" type="VolatileImage" line="295">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="transparency" type="int"/>
                    <param name="type" type="int"/>
                </params>
                <scope line="296"/>
                <scope line="299">
                    <scope line="300"/>
                </scope>
                <scope line="304">
                    <declaration name="isOpaque" type="boolean" line="305"/>
                    <scope line="306"/>
                </scope>
                <declaration name="vi" type="SunVolatileImage" line="310"/>
                <declaration name="sd" type="Surface" line="311"/>
                <scope line="312"/>
            </method>
            <javadoc line="318">
                {@inheritDoc}                
                <see>
                    sun.java2d.pipe.hw.AccelGraphicsConfig#getContextCapabilities                    
                </see>
            </javadoc>
            <method name="getContextCapabilities" type="ContextCapabilities" line="322"/>
            <method name="addDeviceEventListener" type="void" line="325">
                <params>
                    <param name="l" type="AccelDeviceEventListener"/>
                </params>
            </method>
            <method name="removeDeviceEventListener" type="void" line="328">
                <params>
                    <param name="l" type="AccelDeviceEventListener"/>
                </params>
            </method>
        </class>
    </source>