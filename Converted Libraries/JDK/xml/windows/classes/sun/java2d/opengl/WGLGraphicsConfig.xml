<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.opengl">
        <import package="java.awt.AWTException"/>
        <import package="java.awt.BufferCapabilities"/>
        <import package="java.awt.BufferCapabilities.FlipContents"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.ImageCapabilities"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="sun.awt.Win32GraphicsConfig"/>
        <import package="sun.awt.Win32GraphicsDevice"/>
        <import package="sun.awt.image.SunVolatileImage"/>
        <import package="sun.awt.image.SurfaceManager"/>
        <import package="sun.awt.windows.WComponentPeer"/>
        <import package="sun.java2d.Disposer"/>
        <import package="sun.java2d.DisposerRecord"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.Surface"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.pipe.hw.AccelSurface"/>
        <import package="sun.java2d.pipe.hw.AccelTypedVolatileImage"/>
        <import package="sun.java2d.pipe.hw.ContextCapabilities"/>
        <import package="sun.java2d.opengl.OGLContext.OGLContextCaps"/>
        <import package="sun.java2d.opengl.WGLSurfaceData"/>
        <import package="sun.java2d.opengl.OGLContext.OGLContextCaps"/>
        <import package="sun.java2d.pipe.hw.AccelDeviceEventListener"/>
        <import package="sun.java2d.pipe.hw.AccelDeviceEventNotifier"/>
        <import package="sun.java2d.windows.GDIWindowSurfaceData"/>
        <class name="WGLGraphicsConfig" line="62">
            <extends class="Win32GraphicsConfig"/>
            <comment line="269">
                The following methods are invoked from WComponentPeer.java rather
                 than having the Win32-dependent implementations hardcoded in that
                 class.  This way the appropriate actions are taken based on the peer&apos;s
                 GraphicsConfig, whether it is a Win32GraphicsConfig or a
                 WGLGraphicsConfig.                
            </comment>
            <comment line="292">
                The following methods correspond to the multibuffering methods in
                 WComponentPeer.java...                
            </comment>
            <implements interface="OGLGraphicsConfig"/>
            <declaration name="wglAvailable" type="boolean" line="66"/>
            <declaration name="imageCaps" type="ImageCapabilities" line="67"/>
            <declaration name="bufferCaps" type="BufferCapabilities" line="69"/>
            <declaration name="pConfigInfo" type="long" line="70"/>
            <declaration name="oglCaps" type="ContextCapabilities" line="71"/>
            <declaration name="context" type="OGLContext" line="72"/>
            <declaration name="disposerReferent" type="Object" line="73"/>
            <method name="getDefaultPixFmt" type="int" line="75"/>
            <method name="initWGL" type="boolean" line="76"/>
            <method name="getWGLConfigInfo" type="long" line="77"/>
            <method name="getOGLCapabilities" type="int" line="78"/>
            <scope line="80"/>
            <method name="WGLGraphicsConfig" type="constructor" line="86">
                <params>
                    <param name="device" type="Win32GraphicsDevice"/>
                    <param name="visualnum" type="int"/>
                    <param name="configInfo" type="long"/>
                    <param name="oglCaps" type="ContextCapabilities"/>
                </params>
                <comment line="93">
                    add a record to the Disposer so that we destroy the native
                     WGLGraphicsConfigInfo data when this object goes away                    
                </comment>
            </method>
            <method name="getProxyKey" type="Object" line="99"/>
            <method name="createManagedSurface" type="SurfaceData" line="103">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="transparency" type="int"/>
                </params>
            </method>
            <method name="getConfig" type="WGLGraphicsConfig" line="112">
                <params>
                    <param name="device" type="Win32GraphicsDevice"/>
                    <param name="pixfmt" type="int"/>
                </params>
                <comment line="123">
                    getWGLConfigInfo() creates and destroys temporary
                     surfaces/contexts, so we should first invalidate the current
                     Java-level context and flush the queue...                    
                </comment>
                <scope line="113"/>
                <declaration name="cfginfo" type="long" line="117"/>
                <declaration name="ids" type="String" line="118"/>
                <declaration name="rq" type="OGLRenderQueue" line="119"/>
                <scope line="121">
                    <declaration name="action" type="WGLGetConfigInfo" line="126"/>
                    <scope line="130">
                        <anonymous_class line="132">
                            <method name="run" type="void" line="133"/>
                        </anonymous_class>
                    </scope>
                </scope>
                <scope line="138"/>
                <scope line="141"/>
                <declaration name="oglCaps" type="int" line="145"/>
                <declaration name="caps" type="ContextCapabilities" line="146"/>
            </method>
            <class name="WGLGetConfigInfo" line="151">
                <implements interface="Runnable"/>
                <javadoc line="151">
                    This is a small helper class that allows us to execute
                      getWGLConfigInfo() on the queue flushing thread.                    
                </javadoc>
                <declaration name="screen" type="int" line="156"/>
                <declaration name="pixfmt" type="int" line="157"/>
                <declaration name="cfginfo" type="long" line="158"/>
                <method name="WGLGetConfigInfo" type="constructor" line="159">
                    <params>
                        <param name="screen" type="int"/>
                        <param name="pixfmt" type="int"/>
                    </params>
                </method>
                <method name="run" type="void" line="163"/>
                <method name="getConfigInfo" type="long" line="166"/>
            </class>
            <method name="isWGLAvailable" type="boolean" line="171"/>
            <javadoc line="175">
                Returns true if the provided capability bit is present for this config.
                  See OGLContext.java for a list of supported capabilities.                
            </javadoc>
            <method name="isCapPresent" type="boolean" line="180">
                <params>
                    <param name="cap" type="int"/>
                </params>
            </method>
            <method name="getNativeConfigInfo" type="long" line="185"/>
            <javadoc line="189">
                {@inheritDoc}                
                <see>
                    sun.java2d.pipe.hw.BufferedContextProvider#getContext                    
                </see>
            </javadoc>
            <method name="getContext" type="OGLContext" line="195"/>
            <class name="WGLGCDisposerRecord" line="199">
                <implements interface="DisposerRecord"/>
                <declaration name="pCfgInfo" type="long" line="200"/>
                <declaration name="screen" type="int" line="201"/>
                <method name="WGLGCDisposerRecord" type="constructor" line="202">
                    <params>
                        <param name="pCfgInfo" type="long"/>
                        <param name="screen" type="int"/>
                    </params>
                </method>
                <method name="dispose" type="void" line="205">
                    <declaration name="rq" type="OGLRenderQueue" line="206"/>
                    <scope line="208">
                        <anonymous_class line="209">
                            <method name="run" type="void" line="210"/>
                        </anonymous_class>
                    </scope>
                    <scope line="219"/>
                    <scope line="222"/>
                </method>
            </class>
            <method name="displayChanged" type="void" line="230">
                <comment line="233">
                    the context could hold a reference to a WGLSurfaceData, which in
                     turn has a reference back to this WGLGraphicsConfig, so in order
                     for this instance to be disposed we need to break the connection                    
                </comment>
                <declaration name="rq" type="OGLRenderQueue" line="235"/>
                <scope line="237"/>
                <scope line="239"/>
            </method>
            <method name="getColorModel" type="ColorModel" line="245">
                <params>
                    <param name="transparency" type="int"/>
                </params>
                <comment line="249">
                    REMIND: once the ColorModel spec is changed, this should be
                             an opaque premultiplied DCM...                    
                </comment>
                <declaration name="cs" type="ColorSpace" line="254"/>
            </method>
            <method name="toString" type="String" line="264"/>
            <javadoc line="276">
                Creates a new SurfaceData that will be associated with the given
                  WComponentPeer.                
            </javadoc>
            <method name="createSurfaceData" type="SurfaceData" line="283">
                <params>
                    <param name="peer" type="WComponentPeer"/>
                    <param name="numBackBuffers" type="int"/>
                </params>
                <declaration name="sd" type="SurfaceData" line="284"/>
                <scope line="285"/>
            </method>
            <javadoc line="296">
                Checks that the requested configuration is natively supported; if not,
                  an AWTException is thrown.                
            </javadoc>
            <method name="assertOperationSupported" type="void" line="305">
                <params>
                    <param name="target" type="Component"/>
                    <param name="numBuffers" type="int"/>
                    <param name="caps" type="BufferCapabilities"/>
                </params>
                <scope line="306"/>
                <declaration name="configCaps" type="BufferCapabilities" line="310"/>
                <scope line="311"/>
                <scope line="314"/>
            </method>
            <javadoc line="319">
                Creates a WGL-based backbuffer for the given peer and returns the
                  image wrapper.                
            </javadoc>
            <method name="createBackBuffer" type="VolatileImage" line="324">
                <params>
                    <param name="peer" type="WComponentPeer"/>
                </params>
                <declaration name="target" type="Component" line="325"/>
            </method>
            <javadoc line="331">
                Performs the native WGL flip operation for the given target Component.                
            </javadoc>
            <method name="flip" type="void" line="339">
                <params>
                    <param name="peer" type="WComponentPeer"/>
                    <param name="target" type="Component"/>
                    <param name="backBuffer" type="VolatileImage"/>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                    <param name="flipAction" type="BufferCapabilities.FlipContents"/>
                </params>
                <comment line="369">
                    not supported by WGL...                    
                </comment>
                <scope line="340">
                    <declaration name="vsm" type="SurfaceManager" line="341"/>
                    <declaration name="sd" type="SurfaceData" line="342"/>
                    <scope line="344">
                        <declaration name="vsd" type="WGLVSyncOffScreenSurfaceData" line="345"/>
                        <declaration name="bbsd" type="SurfaceData" line="347"/>
                        <declaration name="bbg" type="Graphics2D" line="348"/>
                        <scope line="350"/>
                        <scope line="352"/>
                    </scope>
                    <scope line="355">
                        <declaration name="g" type="Graphics" line="356"/>
                        <scope line="357"/>
                        <scope line="362"/>
                    </scope>
                </scope>
                <scope line="367"/>
                <scope line="374">
                    <declaration name="g" type="Graphics" line="375"/>
                    <scope line="376"/>
                    <scope line="381"/>
                </scope>
            </method>
            <class name="WGLBufferCaps" line="387">
                <extends class="BufferCapabilities"/>
                <method name="WGLBufferCaps" type="constructor" line="388">
                    <params>
                        <param name="dblBuf" type="boolean"/>
                    </params>
                </method>
            </class>
            <method name="getBufferCapabilities" type="BufferCapabilities" line="395">
                <scope line="396">
                    <declaration name="dblBuf" type="boolean" line="397"/>
                </scope>
            </method>
            <class name="WGLImageCaps" line="403">
                <extends class="ImageCapabilities"/>
                <method name="WGLImageCaps" type="constructor" line="404"/>
                <method name="isTrueVolatile" type="boolean" line="407"/>
            </class>
            <method name="getImageCapabilities" type="ImageCapabilities" line="413"/>
            <javadoc line="417">
                {@inheritDoc}                
                <see>
                    sun.java2d.pipe.hw.AccelGraphicsConfig#createCompatibleVolatileImage                    
                </see>
            </javadoc>
            <method name="createCompatibleVolatileImage" type="VolatileImage" line="426">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="transparency" type="int"/>
                    <param name="type" type="int"/>
                </params>
                <scope line="429"/>
                <scope line="433">
                    <scope line="434"/>
                </scope>
                <scope line="437">
                    <declaration name="isOpaque" type="boolean" line="438"/>
                    <scope line="439"/>
                </scope>
                <declaration name="vi" type="SunVolatileImage" line="444"/>
                <declaration name="sd" type="Surface" line="446"/>
                <scope line="449"/>
            </method>
            <javadoc line="457">
                {@inheritDoc}                
                <see>
                    sun.java2d.pipe.hw.AccelGraphicsConfig#getContextCapabilities                    
                </see>
            </javadoc>
            <method name="getContextCapabilities" type="ContextCapabilities" line="463"/>
            <method name="addDeviceEventListener" type="void" line="468">
                <params>
                    <param name="l" type="AccelDeviceEventListener"/>
                </params>
            </method>
            <method name="removeDeviceEventListener" type="void" line="473">
                <params>
                    <param name="l" type="AccelDeviceEventListener"/>
                </params>
            </method>
        </class>
    </source>