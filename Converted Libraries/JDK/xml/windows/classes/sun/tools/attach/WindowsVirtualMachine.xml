<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.attach">
        <import package="com.sun.tools.attach.VirtualMachine"/>
        <import package="com.sun.tools.attach.AgentLoadException"/>
        <import package="com.sun.tools.attach.AttachNotSupportedException"/>
        <import package="com.sun.tools.attach.spi.AttachProvider"/>
        <import package="sun.tools.attach.HotSpotVirtualMachine"/>
        <import package="java.io.IOException"/>
        <import package="java.io.File"/>
        <import package="java.io.InputStream"/>
        <import package="java.util.Properties"/>
        <import package="java.util.Random"/>
        <class name="WindowsVirtualMachine" line="38">
            <extends class="HotSpotVirtualMachine"/>
            <comment line="41">
                the enqueue code stub (copied into each target VM)                
            </comment>
            <comment line="44">
                handle to the process                
            </comment>
            <comment line="126">
                An InputStream based on a pipe to the target VM                
            </comment>
            <comment line="164">
                -- native methods                
            </comment>
            <declaration name="stub" type="byte[]" line="41"/>
            <declaration name="hProcess" type="long" line="43"/>
            <method name="WindowsVirtualMachine" type="constructor" line="47">
                <params>
                    <param name="provider" type="AttachProvider"/>
                    <param name="id" type="String"/>
                </params>
                <comment line="58">
                    The target VM might be a pre-6.0 VM so we enqueue a &quot;null&quot; command                    
                </comment>
                <comment line="59">
                    which minimally tests that the enqueue function exists in the target                    
                </comment>
                <comment line="60">
                    VM.                    
                </comment>
                <declaration name="pid" type="int" line="50"/>
                <scope line="51"/>
                <scope line="53"/>
                <scope line="61"/>
                <scope line="63"/>
            </method>
            <method name="detach" type="void" line="68">
                <scope line="69">
                    <scope line="70"/>
                </scope>
            </method>
            <method name="execute" type="InputStream" line="79">
                <params>
                    <param name="cmd" type="String"/>
                    <param name="args" type="Object"/>
                </params>
                <comment line="80">
                    includes null                    
                </comment>
                <comment line="82">
                    create a pipe using a random name                    
                </comment>
                <comment line="87">
                    check if we are detached - in theory it&apos;s possible that detach is invoked                    
                </comment>
                <comment line="88">
                    after this check but before we enqueue the command.                    
                </comment>
                <comment line="95">
                    enqueue the command to the process                    
                </comment>
                <comment line="98">
                    wait for command to complete - process will connect with the                    
                </comment>
                <comment line="99">
                    completion status                    
                </comment>
                <comment line="102">
                    create an input stream for the pipe                    
                </comment>
                <comment line="105">
                    read completion status                    
                </comment>
                <comment line="108">
                    special case the load command so that the right exception is thrown                    
                </comment>
                <comment line="116">
                    return the input stream                    
                </comment>
                <declaration name="r" type="int" line="83"/>
                <declaration name="pipename" type="String" line="84"/>
                <declaration name="hPipe" type="long" line="85"/>
                <scope line="89"/>
                <scope line="94">
                    <declaration name="is" type="PipedInputStream" line="103"/>
                    <declaration name="status" type="int" line="106"/>
                    <scope line="107">
                        <scope line="109"/>
                        <scope line="111"/>
                    </scope>
                </scope>
                <scope line="119"/>
            </method>
            <class name="PipedInputStream" line="126">
                <extends class="InputStream"/>
                <declaration name="hPipe" type="long" line="128"/>
                <method name="PipedInputStream" type="constructor" line="130">
                    <params>
                        <param name="hPipe" type="long"/>
                    </params>
                </method>
                <method name="read" type="int" line="134">
                    <declaration name="b" type="byte" line="135"/>
                    <declaration name="n" type="int" line="136"/>
                    <scope line="137"/>
                    <scope line="139"/>
                </method>
                <method name="read" type="int" line="144">
                    <params>
                        <param name="bs" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="146"/>
                </method>
                <method name="close" type="void" line="154">
                    <scope line="155"/>
                </method>
            </class>
            <method name="init" type="void" line="165"/>
            <method name="generateStub" type="byte[]" line="167"/>
            <method name="openProcess" type="long" line="169"/>
            <method name="closeProcess" type="void" line="171"/>
            <method name="createPipe" type="long" line="173"/>
            <method name="closePipe" type="void" line="175"/>
            <method name="connectPipe" type="void" line="177"/>
            <method name="readPipe" type="int" line="179"/>
            <method name="enqueue" type="void" line="181"/>
            <scope line="184"/>
        </class>
    </source>