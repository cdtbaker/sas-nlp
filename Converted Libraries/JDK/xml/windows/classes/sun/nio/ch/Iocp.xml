<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.nio.channels"/>
        <import package="java.nio.channels.spi.AsynchronousChannelProvider"/>
        <import package="java.io.Closeable"/>
        <import package="java.io.IOException"/>
        <import package="java.io.FileDescriptor"/>
        <import package="java.util"/>
        <import package="java.util.concurrent"/>
        <import package="java.util.concurrent.locks.ReadWriteLock"/>
        <import package="java.util.concurrent.locks.ReentrantReadWriteLock"/>
        <import package="java.security.AccessController"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.misc.Unsafe"/>
        <class name="Iocp" line="41">
            <extends class="AsynchronousChannelGroupImpl"/>
            <comment line="52">
                maps completion key to channel                
            </comment>
            <comment line="58">
                handle to completion port                
            </comment>
            <comment line="61">
                true if port has been closed                
            </comment>
            <comment line="64">
                the set of &quot;stale&quot; OVERLAPPED structures. These OVERLAPPED structures                
            </comment>
            <comment line="65">
                relate to I/O operations where the completion notification was not                
            </comment>
            <comment line="66">
                received in a timely manner after the channel is closed.                
            </comment>
            <comment line="83">
                Channels implements this interface support overlapped IO and can be
                 associated with a completion port.                
            </comment>
            <comment line="101">
                release all resources                
            </comment>
            <comment line="305">
                Creates IOException for the given I/O error.                
            </comment>
            <comment line="429">
                -- native methods --                
            </comment>
            <javadoc line="41">
                Windows implementation of AsynchronousChannelGroup encapsulating an I/O
                  completion port.                
            </javadoc>
            <declaration name="unsafe" type="Unsafe" line="47"/>
            <declaration name="INVALID_HANDLE_VALUE" type="long" line="48"/>
            <declaration name="supportsThreadAgnosticIo" type="boolean" line="49"/>
            <declaration name="keyToChannelLock" type="ReadWriteLock" line="52"/>
            <declaration name="keyToChannel" type="Map&lt;Integer,OverlappedChannel&gt;" line="53"/>
            <declaration name="nextCompletionKey" type="int" line="55"/>
            <declaration name="port" type="long" line="58"/>
            <declaration name="closed" type="boolean" line="61"/>
            <declaration name="staleIoSet" type="Set&lt;Long&gt;" line="66"/>
            <method name="Iocp" type="constructor" line="70">
                <params>
                    <param name="provider" type="AsynchronousChannelProvider"/>
                    <param name="pool" type="ThreadPool"/>
                </params>
            </method>
            <method name="start" type="Iocp" line="77"/>
            <interface name="OverlappedChannel">
                <implements interface="Closeable"/>
                <method name="getByOverlapped" type="PendingFuture<V,A>" line="87"/>
                <javadoc line="87">
                    Returns a reference to the pending I/O result.                    
                </javadoc>
            </interface>
            <javadoc line="93">
                Indicates if this operating system supports thread agnostic I/O.                
            </javadoc>
            <method name="supportsThreadAgnosticIo" type="boolean" line="96"/>
            <method name="implClose" type="void" line="101">
                <scope line="102"/>
                <scope line="108">
                    <scope line="109"/>
                </scope>
            </method>
            <method name="isEmpty" type="boolean" line="117">
                <scope line="119"/>
                <scope line="121"/>
            </method>
            <method name="attachForeignChannel" type="Object" line="129">
                <params>
                    <param name="channel" type="Channel"/>
                    <param name="fdObj" type="FileDescriptor"/>
                </params>
                <anonymous_class line="130">
                    <method name="getByOverlapped" type="PendingFuture<V,A>" line="131">
                        <params>
                            <param name="overlapped" type="long"/>
                        </params>
                    </method>
                    <method name="close" type="void" line="134"/>
                </anonymous_class>
                <declaration name="key" type="int" line="130"/>
            </method>
            <method name="detachForeignChannel" type="void" line="142">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <method name="closeAllChannels" type="void" line="147">
                <comment line="148">
                    On Windows the close operation will close the socketfile handle
                     and then wait until all outstanding IO operations have aborted.
                     This is necessary as each channel&apos;s cache of OVERLAPPED structures
                     can only be freed once all IO operations have completed. As IO
                     completion requires a lookup of the keyToChannel then we must close
                     the channels when not holding the write lock.                    
                </comment>
                <comment line="160">
                    grab a batch of up to 32 channels                    
                </comment>
                <comment line="173">
                    close them                    
                </comment>
                <declaration name="MAX_BATCH_SIZE" type="int" line="148"/>
                <declaration name="channels" type="OverlappedChannel" line="157"/>
                <declaration name="count" type="int" line="158"/>
                <scope line="159">
                    <scope line="163">
                        <scope line="164"/>
                    </scope>
                    <scope line="169"/>
                    <scope line="174">
                        <scope line="175"/>
                        <scope line="177"/>
                    </scope>
                </scope>
            </method>
            <method name="wakeup" type="void" line="182">
                <comment line="186">
                    should not happen                    
                </comment>
                <scope line="183"/>
                <scope line="185"/>
            </method>
            <method name="executeOnHandlerTask" type="void" line="192">
                <params>
                    <param name="task" type="Runnable"/>
                </params>
                <scope line="193"/>
            </method>
            <method name="shutdownHandlerTasks" type="void" line="203">
                <comment line="204">
                    shutdown all handler threads                    
                </comment>
                <declaration name="nThreads" type="int" line="205"/>
                <scope line="206"/>
            </method>
            <javadoc line="211">
                Associate the given handle with this group                
            </javadoc>
            <method name="associate" type="int" line="214">
                <params>
                    <param name="ch" type="OverlappedChannel"/>
                    <param name="handle" type="long"/>
                </params>
                <comment line="217">
                    generate a completion key (if not shutdown)                    
                </comment>
                <comment line="223">
                    generate unique key                    
                </comment>
                <comment line="228">
                    associate with I/O completion port                    
                </comment>
                <comment line="233">
                    setup mapping                    
                </comment>
                <declaration name="key" type="int" line="218"/>
                <scope line="219">
                    <scope line="224"/>
                    <scope line="229"/>
                </scope>
                <scope line="235"/>
            </method>
            <javadoc line="241">
                Disassociate channel from the group.                
            </javadoc>
            <method name="disassociate" type="void" line="244">
                <params>
                    <param name="key" type="int"/>
                </params>
                <comment line="251">
                    last key to be removed so check if group is shutdown                    
                </comment>
                <comment line="259">
                    continue shutdown                    
                </comment>
                <declaration name="checkForShutdown" type="boolean" line="245"/>
                <scope line="248"/>
                <scope line="255"/>
                <scope line="260">
                    <scope line="261"/>
                    <scope line="263"/>
                </scope>
            </method>
            <javadoc line="267">
                Invoked when a channel associated with this port is closed before
                  notifications for all outstanding I/O operations have been received.                
            </javadoc>
            <method name="makeStale" type="void" line="271">
                <params>
                    <param name="overlapped" type="Long"/>
                </params>
                <scope line="272"/>
            </method>
            <javadoc line="277">
                Checks if the given OVERLAPPED is stale and if so, releases it.                
            </javadoc>
            <method name="checkIfStale" type="void" line="280">
                <params>
                    <param name="ov" type="long"/>
                </params>
                <scope line="281">
                    <declaration name="removed" type="boolean" line="282"/>
                    <scope line="283"/>
                </scope>
            </method>
            <interface name="ResultHandler">
                <javadoc line="289">
                    The handler for consuming the result of an asynchronous I/O operation.                    
                </javadoc>
                <method name="completed" type="void" line="293"/>
                <javadoc line="293">
                    Invoked if the I/O operation completes successfully.                    
                </javadoc>
                <method name="failed" type="void" line="298"/>
                <javadoc line="298">
                    Invoked if the I/O operation fails.                    
                </javadoc>
            </interface>
            <method name="translateErrorToIOException" type="IOException" line="305">
                <params>
                    <param name="error" type="int"/>
                </params>
                <declaration name="msg" type="String" line="306"/>
            </method>
            <class name="EventHandlerTask" line="312">
                <implements interface="Runnable"/>
                <javadoc line="312">
                    Long-running task servicing system-wide or per-file completion port                    
                </javadoc>
                <method name="run" type="void" line="316">
                    <comment line="325">
                        reset invoke count                        
                    </comment>
                    <comment line="329">
                        wait for I/O completion event                        
                    </comment>
                    <comment line="330">
                        A error here is fatal (thread will not be replaced)                        
                    </comment>
                    <comment line="335">
                        should not happen                        
                    </comment>
                    <comment line="340">
                        handle wakeup to execute task or shutdown                        
                    </comment>
                    <comment line="346">
                        shutdown request                        
                    </comment>
                    <comment line="350">
                        run task                        
                    </comment>
                    <comment line="351">
                        (if error/exception then replace thread)                        
                    </comment>
                    <comment line="357">
                        map key to channel                        
                    </comment>
                    <comment line="370">
                        lookup I/O request                        
                    </comment>
                    <comment line="373">
                        we get here if the OVERLAPPED structure is associated                        
                    </comment>
                    <comment line="374">
                        with an I/O operation on a channel that was closed                        
                    </comment>
                    <comment line="375">
                        but the I/O operation event wasn&apos;t read in a timely                        
                    </comment>
                    <comment line="376">
                        manner. Alternatively, it may be related to a                        
                    </comment>
                    <comment line="377">
                        tryLock operation as the OVERLAPPED structures for                        
                    </comment>
                    <comment line="378">
                        these operations are not in the I/O cache.                        
                    </comment>
                    <comment line="383">
                        synchronize on result in case I/O completed immediately                        
                    </comment>
                    <comment line="384">
                        and was handled by initiator                        
                    </comment>
                    <comment line="389">
                        not handled by initiator                        
                    </comment>
                    <comment line="392">
                        invoke I/O result handler                        
                    </comment>
                    <comment line="395">
                        (if error/exception then replace thread)                        
                    </comment>
                    <comment line="403">
                        last thread to exit when shutdown releases resources                        
                    </comment>
                    <declaration name="myGroupAndInvokeCount" type="Invoker.GroupAndInvokeCount" line="317"/>
                    <declaration name="canInvokeDirect" type="boolean" line="319"/>
                    <declaration name="ioResult" type="CompletionStatus" line="320"/>
                    <declaration name="replaceMe" type="boolean" line="321"/>
                    <scope line="323">
                        <scope line="324">
                            <scope line="332"/>
                            <scope line="334"/>
                            <scope line="343">
                                <declaration name="task" type="Runnable" line="344"/>
                                <scope line="345"/>
                            </scope>
                            <declaration name="ch" type="OverlappedChannel" line="358"/>
                            <scope line="360">
                                <scope line="362"/>
                            </scope>
                            <scope line="366"/>
                            <declaration name="result" type="PendingFuture&lt;?,?&gt;" line="371"/>
                            <scope line="372"/>
                            <scope line="385">
                                <scope line="386"/>
                            </scope>
                            <declaration name="error" type="int" line="393"/>
                            <declaration name="rh" type="ResultHandler" line="394"/>
                            <scope line="396"/>
                            <scope line="398"/>
                        </scope>
                    </scope>
                    <scope line="402">
                        <declaration name="remaining" type="int" line="404"/>
                        <scope line="405"/>
                    </scope>
                </method>
            </class>
            <class name="CompletionStatus" line="412">
                <javadoc line="412">
                    Container for data returned by GetQueuedCompletionStatus                    
                </javadoc>
                <declaration name="error" type="int" line="416"/>
                <declaration name="bytesTransferred" type="int" line="417"/>
                <declaration name="completionKey" type="int" line="418"/>
                <declaration name="overlapped" type="long" line="419"/>
                <method name="CompletionStatus" type="constructor" line="421"/>
                <method name="error" type="int" line="422"/>
                <method name="bytesTransferred" type="int" line="423"/>
                <method name="completionKey" type="int" line="424"/>
                <method name="overlapped" type="long" line="425"/>
            </class>
            <method name="initIDs" type="void" line="430"/>
            <method name="createIoCompletionPort" type="long" line="432"/>
            <method name="close0" type="void" line="435"/>
            <method name="getQueuedCompletionStatus" type="void" line="437"/>
            <method name="postQueuedCompletionStatus" type="void" line="440"/>
            <method name="getErrorMessage" type="String" line="443"/>
            <scope line="445">
                <declaration name="osversion" type="String" line="450"/>
                <declaration name="vers" type="String" line="452"/>
            </scope>
        </class>
    </source>