<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.nio.channels"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.BufferOverflowException"/>
        <import package="java.net"/>
        <import package="java.util.concurrent"/>
        <import package="java.io.IOException"/>
        <import package="sun.misc.Unsafe"/>
        <class name="WindowsAsynchronousSocketChannelImpl" line="9">
            <extends class="AsynchronousSocketChannelImpl"/>
            <implements interface="Iocp.OverlappedChannel"/>
            <javadoc line="9">
                Windows implementation of AsynchronousSocketChannel using overlapped I/O.                
            </javadoc>
            <declaration name="unsafe" type="Unsafe" line="13"/>
            <declaration name="addressSize" type="int" line="14"/>
            <method name="dependsArch" type="int" line="15">
                <params>
                    <param name="value32" type="int"/>
                    <param name="value64" type="int"/>
                </params>
            </method>
            <declaration name="SIZEOF_WSABUF" type="int" line="18"/>
            <declaration name="OFFSETOF_LEN" type="int" line="19"/>
            <declaration name="OFFSETOF_BUF" type="int" line="20"/>
            <declaration name="MAX_WSABUF" type="int" line="21"/>
            <declaration name="SIZEOF_WSABUFARRAY" type="int" line="22"/>
            <declaration name="handle" type="long" line="23"/>
            <declaration name="iocp" type="Iocp" line="24"/>
            <declaration name="completionKey" type="int" line="25"/>
            <declaration name="ioCache" type="PendingIoCache" line="26"/>
            <declaration name="readBufferArray" type="long" line="27"/>
            <declaration name="writeBufferArray" type="long" line="28"/>
            <method name="WindowsAsynchronousSocketChannelImpl" type="constructor" line="29">
                <params>
                    <param name="iocp" type="Iocp"/>
                    <param name="failIfGroupShutdown" type="boolean"/>
                </params>
                <declaration name="h" type="long" line="31"/>
                <declaration name="key" type="int" line="32"/>
                <scope line="33"/>
                <scope line="36">
                    <scope line="37"/>
                </scope>
                <scope line="42"/>
            </method>
            <method name="WindowsAsynchronousSocketChannelImpl" type="constructor" line="53">
                <params>
                    <param name="iocp" type="Iocp"/>
                </params>
            </method>
            <method name="group" type="AsynchronousChannelGroupImpl" line="56"/>
            <javadoc line="59">
                Invoked by Iocp when an I/O operation competes.                
            </javadoc>
            <method name="getByOverlapped" type="PendingFuture<V,A>" line="62">
                <params>
                    <param name="overlapped" type="long"/>
                </params>
            </method>
            <method name="handle" type="long" line="65"/>
            <method name="setConnected" type="void" line="68">
                <params>
                    <param name="localAddress" type="SocketAddress"/>
                    <param name="remoteAddress" type="SocketAddress"/>
                </params>
                <scope line="69"/>
            </method>
            <method name="implClose" type="void" line="75"/>
            <method name="onCancel" type="void" line="82">
                <params>
                    <param name="task" type="PendingFuture<?,?>"/>
                </params>
            </method>
            <class name="ConnectTask" line="87">
                <type_params>
                    <type_param name="A"/>
                </type_params>
                <implements interface="Runnable"/>
                <implements interface="Iocp.ResultHandler"/>
                <javadoc line="87">
                    Implements the task to initiate a connection and the handler to
                      consume the result when the connection is established (or fails).                    
                </javadoc>
                <declaration name="remote" type="InetSocketAddress" line="92"/>
                <declaration name="result" type="PendingFuture&lt;Void,A&gt;" line="93"/>
                <method name="ConnectTask" type="constructor" line="94">
                    <params>
                        <param name="remote" type="InetSocketAddress"/>
                        <param name="result" type="PendingFuture<Void,A>"/>
                    </params>
                </method>
                <method name="closeChannel" type="void" line="98">
                    <scope line="99"/>
                    <scope line="102"/>
                </method>
                <method name="toIOException" type="IOException" line="105">
                    <params>
                        <param name="x" type="Throwable"/>
                    </params>
                    <scope line="106"/>
                </method>
                <javadoc line="112">
                    Invoke after a connection is successfully established.                    
                </javadoc>
                <method name="afterConnect" type="void" line="115">
                    <scope line="117"/>
                </method>
                <javadoc line="122">
                    Task to initiate a connection.                    
                </javadoc>
                <method name="run" type="void" line="125">
                    <declaration name="overlapped" type="long" line="126"/>
                    <declaration name="exc" type="Throwable" line="127"/>
                    <scope line="128">
                        <scope line="130">
                            <declaration name="n" type="int" line="132"/>
                            <scope line="133"/>
                        </scope>
                    </scope>
                    <scope line="140"/>
                    <scope line="144"/>
                    <scope line="147"/>
                </method>
                <javadoc line="153">
                    Invoked by handler thread when connection established.                    
                </javadoc>
                <method name="completed" type="void" line="156">
                    <params>
                        <param name="bytesTransferred" type="int"/>
                        <param name="canInvokeDirect" type="boolean"/>
                    </params>
                    <declaration name="exc" type="Throwable" line="157"/>
                    <scope line="158"/>
                    <scope line="163"/>
                    <scope line="166"/>
                    <scope line="169"/>
                    <scope line="173"/>
                    <scope line="176"/>
                </method>
                <javadoc line="180">
                    Invoked by handler thread when failed to establish connection.                    
                </javadoc>
                <method name="failed" type="void" line="183">
                    <params>
                        <param name="error" type="int"/>
                        <param name="x" type="IOException"/>
                    </params>
                    <scope line="184"/>
                    <scope line="188"/>
                </method>
            </class>
            <method name="implConnect" type="Future<Void>" line="194">
                <params>
                    <param name="remote" type="SocketAddress"/>
                    <param name="attachment" type="A"/>
                    <param name="handler" type="CompletionHandler<Void,? super A>"/>
                </params>
                <scope line="195">
                    <declaration name="exc" type="Throwable" line="196"/>
                </scope>
                <declaration name="isa" type="InetSocketAddress" line="201"/>
                <declaration name="sm" type="SecurityManager" line="202"/>
                <declaration name="bindException" type="IOException" line="204"/>
                <scope line="205">
                    <scope line="208">
                        <scope line="209"/>
                        <scope line="212"/>
                    </scope>
                </scope>
                <scope line="218">
                    <scope line="219"/>
                    <scope line="222"/>
                </scope>
                <declaration name="result" type="PendingFuture&lt;Void,A&gt;" line="228"/>
                <declaration name="task" type="ConnectTask" line="229"/>
                <scope line="231"/>
                <scope line="234"/>
            </method>
            <class name="ReadTask" line="239">
                <type_params>
                    <type_param name="V"/>
                    <type_param name="A"/>
                </type_params>
                <implements interface="Runnable"/>
                <implements interface="Iocp.ResultHandler"/>
                <javadoc line="239">
                    Implements the task to initiate a read and the handler to consume the
                      result when the read completes.                    
                </javadoc>
                <declaration name="bufs" type="ByteBuffer[]" line="244"/>
                <declaration name="numBufs" type="int" line="245"/>
                <declaration name="scatteringRead" type="boolean" line="246"/>
                <declaration name="result" type="PendingFuture&lt;V,A&gt;" line="247"/>
                <declaration name="shadow" type="ByteBuffer[]" line="248"/>
                <method name="ReadTask" type="constructor" line="249">
                    <params>
                        <param name="bufs" type="ByteBuffer[]"/>
                        <param name="scatteringRead" type="boolean"/>
                        <param name="result" type="PendingFuture<V,A>"/>
                    </params>
                </method>
                <javadoc line="255">
                    Invoked prior to read to prepare the WSABUF array. Where necessary,
                      it substitutes non-direct buffers with direct buffers.                    
                </javadoc>
                <method name="prepareBuffers" type="void" line="259">
                    <declaration name="address" type="long" line="261"/>
                    <scope line="262">
                        <declaration name="dst" type="ByteBuffer" line="263"/>
                        <declaration name="pos" type="int" line="264"/>
                        <declaration name="lim" type="int" line="265"/>
                        <declaration name="rem" type="int" line="267"/>
                        <declaration name="a" type="long" line="268"/>
                        <scope line="269">
                            <declaration name="bb" type="ByteBuffer" line="270"/>
                        </scope>
                        <scope line="274"/>
                    </scope>
                </method>
                <javadoc line="283">
                    Invoked after a read has completed to update the buffer positions
                      and release any substituted buffers.                    
                </javadoc>
                <method name="updateBuffers" type="void" line="287">
                    <params>
                        <param name="bytesRead" type="int"/>
                    </params>
                    <scope line="288">
                        <declaration name="nextBuffer" type="ByteBuffer" line="289"/>
                        <declaration name="pos" type="int" line="290"/>
                        <declaration name="len" type="int" line="291"/>
                        <scope line="292">
                            <declaration name="newPosition" type="int" line="294"/>
                            <scope line="295"/>
                            <scope line="298"/>
                        </scope>
                        <scope line="301">
                            <scope line="302">
                                <declaration name="newPosition" type="int" line="304"/>
                                <scope line="305"/>
                                <scope line="308"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="314">
                        <scope line="315">
                            <scope line="317"/>
                            <scope line="320"/>
                        </scope>
                    </scope>
                </method>
                <method name="releaseBuffers" type="void" line="325">
                    <scope line="326">
                        <scope line="327"/>
                    </scope>
                </method>
                <method name="run" type="void" line="332">
                    <declaration name="overlapped" type="long" line="333"/>
                    <declaration name="prepared" type="boolean" line="334"/>
                    <declaration name="pending" type="boolean" line="335"/>
                    <scope line="336">
                        <declaration name="n" type="int" line="341"/>
                        <scope line="342"/>
                        <scope line="346">
                            <scope line="348"/>
                            <scope line="351"/>
                        </scope>
                        <scope line="355"/>
                    </scope>
                    <scope line="359"/>
                    <scope line="365">
                        <scope line="366"/>
                    </scope>
                </method>
                <javadoc line="374">
                    Executed when the I/O has completed                    
                </javadoc>
                <method name="completed" type="void" line="377">
                    <params>
                        <param name="bytesTransferred" type="int"/>
                        <param name="canInvokeDirect" type="boolean"/>
                    </params>
                    <scope line="378"/>
                    <scope line="381"/>
                    <scope line="385">
                        <scope line="388"/>
                        <scope line="391"/>
                    </scope>
                    <scope line="395"/>
                    <scope line="398"/>
                </method>
                <method name="failed" type="void" line="402">
                    <params>
                        <param name="error" type="int"/>
                        <param name="x" type="IOException"/>
                    </params>
                    <scope line="405"/>
                </method>
                <javadoc line="412">
                    Invoked if timeout expires before it is cancelled                    
                </javadoc>
                <method name="timeout" type="void" line="415">
                    <scope line="416"/>
                </method>
            </class>
            <method name="implRead" type="Future<V>" line="424">
                <params>
                    <param name="isScatteringRead" type="boolean"/>
                    <param name="dst" type="ByteBuffer"/>
                    <param name="dsts" type="ByteBuffer[]"/>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                    <param name="attachment" type="A"/>
                    <param name="handler" type="CompletionHandler<V,? super A>"/>
                </params>
                <declaration name="result" type="PendingFuture&lt;V,A&gt;" line="425"/>
                <declaration name="bufs" type="ByteBuffer[]" line="426"/>
                <scope line="427"/>
                <scope line="430"/>
                <declaration name="readTask" type="ReadTask" line="434"/>
                <scope line="436">
                    <anonymous_class line="437">
                        <method name="run" type="void" line="438"/>
                    </anonymous_class>
                    <declaration name="timeoutTask" type="Future&lt;?&gt;" line="437"/>
                </scope>
                <scope line="445"/>
                <scope line="448"/>
            </method>
            <class name="WriteTask" line="453">
                <type_params>
                    <type_param name="V"/>
                    <type_param name="A"/>
                </type_params>
                <implements interface="Runnable"/>
                <implements interface="Iocp.ResultHandler"/>
                <javadoc line="453">
                    Implements the task to initiate a write and the handler to consume the
                      result when the write completes.                    
                </javadoc>
                <declaration name="bufs" type="ByteBuffer[]" line="458"/>
                <declaration name="numBufs" type="int" line="459"/>
                <declaration name="gatheringWrite" type="boolean" line="460"/>
                <declaration name="result" type="PendingFuture&lt;V,A&gt;" line="461"/>
                <declaration name="shadow" type="ByteBuffer[]" line="462"/>
                <method name="WriteTask" type="constructor" line="463">
                    <params>
                        <param name="bufs" type="ByteBuffer[]"/>
                        <param name="gatheringWrite" type="boolean"/>
                        <param name="result" type="PendingFuture<V,A>"/>
                    </params>
                </method>
                <javadoc line="469">
                    Invoked prior to write to prepare the WSABUF array. Where necessary,
                      it substitutes non-direct buffers with direct buffers.                    
                </javadoc>
                <method name="prepareBuffers" type="void" line="473">
                    <declaration name="address" type="long" line="475"/>
                    <scope line="476">
                        <declaration name="src" type="ByteBuffer" line="477"/>
                        <declaration name="pos" type="int" line="478"/>
                        <declaration name="lim" type="int" line="479"/>
                        <declaration name="rem" type="int" line="481"/>
                        <declaration name="a" type="long" line="482"/>
                        <scope line="483">
                            <declaration name="bb" type="ByteBuffer" line="484"/>
                        </scope>
                        <scope line="491"/>
                    </scope>
                </method>
                <javadoc line="500">
                    Invoked after a write has completed to update the buffer positions
                      and release any substituted buffers.                    
                </javadoc>
                <method name="updateBuffers" type="void" line="504">
                    <params>
                        <param name="bytesWritten" type="int"/>
                    </params>
                    <scope line="505">
                        <declaration name="nextBuffer" type="ByteBuffer" line="506"/>
                        <declaration name="pos" type="int" line="507"/>
                        <declaration name="lim" type="int" line="508"/>
                        <declaration name="len" type="int" line="509"/>
                        <scope line="510">
                            <declaration name="newPosition" type="int" line="512"/>
                            <scope line="513"/>
                            <scope line="516"/>
                        </scope>
                        <scope line="519">
                            <scope line="520">
                                <declaration name="newPosition" type="int" line="522"/>
                                <scope line="523"/>
                                <scope line="526"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="releaseBuffers" type="void" line="533">
                    <scope line="534">
                        <scope line="535"/>
                    </scope>
                </method>
                <method name="run" type="void" line="540">
                    <declaration name="overlapped" type="long" line="541"/>
                    <declaration name="prepared" type="boolean" line="542"/>
                    <declaration name="pending" type="boolean" line="543"/>
                    <declaration name="shutdown" type="boolean" line="544"/>
                    <scope line="545">
                        <declaration name="n" type="int" line="550"/>
                        <scope line="551"/>
                        <scope line="555"/>
                    </scope>
                    <scope line="561"/>
                    <scope line="567">
                        <scope line="568"/>
                    </scope>
                </method>
                <javadoc line="576">
                    Executed when the I/O has completed                    
                </javadoc>
                <method name="completed" type="void" line="579">
                    <params>
                        <param name="bytesTransferred" type="int"/>
                        <param name="canInvokeDirect" type="boolean"/>
                    </params>
                    <scope line="582">
                        <scope line="585"/>
                        <scope line="588"/>
                    </scope>
                    <scope line="592"/>
                    <scope line="595"/>
                </method>
                <method name="failed" type="void" line="599">
                    <params>
                        <param name="error" type="int"/>
                        <param name="x" type="IOException"/>
                    </params>
                    <scope line="602"/>
                </method>
                <javadoc line="609">
                    Invoked if timeout expires before it is cancelled                    
                </javadoc>
                <method name="timeout" type="void" line="612">
                    <scope line="613"/>
                </method>
            </class>
            <method name="implWrite" type="Future<V>" line="621">
                <params>
                    <param name="gatheringWrite" type="boolean"/>
                    <param name="src" type="ByteBuffer"/>
                    <param name="srcs" type="ByteBuffer[]"/>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                    <param name="attachment" type="A"/>
                    <param name="handler" type="CompletionHandler<V,? super A>"/>
                </params>
                <declaration name="result" type="PendingFuture&lt;V,A&gt;" line="622"/>
                <declaration name="bufs" type="ByteBuffer[]" line="623"/>
                <scope line="624"/>
                <scope line="627"/>
                <declaration name="writeTask" type="WriteTask" line="631"/>
                <scope line="633">
                    <anonymous_class line="634">
                        <method name="run" type="void" line="635"/>
                    </anonymous_class>
                    <declaration name="timeoutTask" type="Future&lt;?&gt;" line="634"/>
                </scope>
                <scope line="642"/>
                <scope line="645"/>
            </method>
            <method name="initIDs" type="void" line="650"/>
            <method name="connect0" type="int" line="651"/>
            <method name="updateConnectContext" type="void" line="652"/>
            <method name="read0" type="int" line="653"/>
            <method name="write0" type="int" line="654"/>
            <method name="shutdown0" type="void" line="655"/>
            <method name="closesocket0" type="void" line="656"/>
            <scope line="657"/>
        </class>
    </source>