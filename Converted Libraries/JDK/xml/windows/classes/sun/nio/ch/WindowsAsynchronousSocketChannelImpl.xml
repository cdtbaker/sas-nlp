<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.nio.channels"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.BufferOverflowException"/>
        <import package="java.net"/>
        <import package="java.util.concurrent"/>
        <import package="java.io.IOException"/>
        <import package="sun.misc.Unsafe"/>
        <class name="WindowsAsynchronousSocketChannelImpl" line="36">
            <extends class="AsynchronousSocketChannelImpl"/>
            <comment line="51">
                typedef struct _WSABUF {
                     u_long      len;
                     char FAR   buf;
                 } WSABUF;                
            </comment>
            <comment line="61">
                maximum vector size for scatter/gather I/O                
            </comment>
            <comment line="67">
                socket handle. Use begin()/end() around each usage of this handle.                
            </comment>
            <comment line="70">
                I/O completion port that the socket is associated with                
            </comment>
            <comment line="73">
                completion key to identify channel when I/O completes                
            </comment>
            <comment line="76">
                Pending I/O operations are tied to an OVERLAPPED structure that can only
                 be released when the I/O completion event is posted to the completion
                 port. Where I/O operations complete immediately then it is possible
                 there may be more than two OVERLAPPED structures in use.                
            </comment>
            <comment line="82">
                per-channel arrays of WSABUF structures                
            </comment>
            <comment line="134">
                invoked by WindowsAsynchronousServerSocketChannelImpl                
            </comment>
            <comment line="139">
                invoked by WindowsAsynchronousServerSocketChannelImpl when new connection
                 accept                
            </comment>
            <comment line="899">
                -- Native methods --                
            </comment>
            <implements interface="Iocp.OverlappedChannel"/>
            <javadoc line="36">
                Windows implementation of AsynchronousSocketChannel using overlapped I/O.                
            </javadoc>
            <declaration name="unsafe" type="Unsafe" line="43"/>
            <declaration name="addressSize" type="int" line="44"/>
            <method name="dependsArch" type="int" line="46">
                <params>
                    <param name="value32" type="int"/>
                    <param name="value64" type="int"/>
                </params>
            </method>
            <declaration name="SIZEOF_WSABUF" type="int" line="56"/>
            <declaration name="OFFSETOF_LEN" type="int" line="57"/>
            <declaration name="OFFSETOF_BUF" type="int" line="58"/>
            <declaration name="MAX_WSABUF" type="int" line="61"/>
            <declaration name="SIZEOF_WSABUFARRAY" type="int" line="63"/>
            <declaration name="handle" type="long" line="67"/>
            <declaration name="iocp" type="Iocp" line="70"/>
            <declaration name="completionKey" type="int" line="73"/>
            <declaration name="ioCache" type="PendingIoCache" line="79"/>
            <declaration name="readBufferArray" type="long" line="82"/>
            <declaration name="writeBufferArray" type="long" line="83"/>
            <method name="WindowsAsynchronousSocketChannelImpl" type="constructor" line="88">
                <params>
                    <param name="iocp" type="Iocp"/>
                    <param name="failIfGroupShutdown" type="boolean"/>
                </params>
                <comment line="92">
                    associate socket with default completion port                    
                </comment>
                <comment line="112">
                    allocate WSABUF arrays                    
                </comment>
                <declaration name="h" type="long" line="92"/>
                <declaration name="key" type="int" line="93"/>
                <scope line="94"/>
                <scope line="96">
                    <scope line="97"/>
                </scope>
                <scope line="101"/>
            </method>
            <method name="WindowsAsynchronousSocketChannelImpl" type="constructor" line="116">
                <params>
                    <param name="iocp" type="Iocp"/>
                </params>
            </method>
            <method name="group" type="AsynchronousChannelGroupImpl" line="121"/>
            <javadoc line="125">
                Invoked by Iocp when an I/O operation competes.                
            </javadoc>
            <method name="getByOverlapped" type="PendingFuture<V,A>" line="129">
                <params>
                    <param name="overlapped" type="long"/>
                </params>
            </method>
            <method name="handle" type="long" line="134"/>
            <method name="setConnected" type="void" line="140">
                <params>
                    <param name="localAddress" type="SocketAddress"/>
                    <param name="remoteAddress" type="SocketAddress"/>
                </params>
                <scope line="141"/>
            </method>
            <method name="implClose" type="void" line="149">
                <comment line="151">
                    close socket (may cause outstanding async I/O operations to fail).                    
                </comment>
                <comment line="154">
                    waits until all I/O operations have completed                    
                </comment>
                <comment line="157">
                    release arrays of WSABUF structures                    
                </comment>
                <comment line="161">
                    finally disassociate from the completion port (key can be 0 if
                     channel created when group is shutdown)                    
                </comment>
            </method>
            <method name="onCancel" type="void" line="167">
                <params>
                    <param name="task" type="PendingFuture<?,?>"/>
                </params>
            </method>
            <class name="ConnectTask" line="176">
                <type_params>
                    <type_param name="A"/>
                </type_params>
                <comment line="377">
                    set by run method                    
                </comment>
                <comment line="651">
                    set by run method                    
                </comment>
                <implements interface="Runnable"/>
                <implements interface="Iocp.ResultHandler"/>
                <javadoc line="176">
                    Implements the task to initiate a connection and the handler to
                      consume the result when the connection is established (or fails).                    
                </javadoc>
                <declaration name="remote" type="InetSocketAddress" line="181"/>
                <declaration name="result" type="PendingFuture&lt;Void,A&gt;" line="182"/>
                <method name="ConnectTask" type="constructor" line="184">
                    <params>
                        <param name="remote" type="InetSocketAddress"/>
                        <param name="result" type="PendingFuture<Void,A>"/>
                    </params>
                </method>
                <method name="closeChannel" type="void" line="189">
                    <scope line="190"/>
                    <scope line="192"/>
                </method>
                <method name="toIOException" type="IOException" line="195">
                    <params>
                        <param name="x" type="Throwable"/>
                    </params>
                    <scope line="196"/>
                </method>
                <javadoc line="204">
                    Invoke after a connection is successfully established.                    
                </javadoc>
                <method name="afterConnect" type="void" line="207">
                    <scope line="209"/>
                </method>
                <javadoc line="215">
                    Task to initiate a connection.                    
                </javadoc>
                <method name="run" type="void" line="219">
                    <comment line="226">
                        synchronize on result to allow this thread handle the case
                         where the connection is established immediately.                        
                    </comment>
                    <comment line="230">
                        initiate the connection                        
                    </comment>
                    <comment line="234">
                        connection is pending                        
                    </comment>
                    <comment line="238">
                        connection established immediately                        
                    </comment>
                    <declaration name="overlapped" type="long" line="220"/>
                    <declaration name="exc" type="Throwable" line="221"/>
                    <scope line="222">
                        <scope line="227">
                            <declaration name="n" type="int" line="230"/>
                            <scope line="232"/>
                        </scope>
                    </scope>
                    <scope line="241"/>
                    <scope line="245"/>
                    <scope line="249"/>
                </method>
                <javadoc line="256">
                    Invoked by handler thread when connection established.                    
                </javadoc>
                <method name="completed" type="void" line="260">
                    <params>
                        <param name="bytesTransferred" type="int"/>
                        <param name="canInvokeDirect" type="boolean"/>
                    </params>
                    <comment line="268">
                        channel is closed or unable to finish connect                        
                    </comment>
                    <comment line="274">
                        can&apos;t close channel while in begin/end block                        
                    </comment>
                    <declaration name="exc" type="Throwable" line="261"/>
                    <scope line="262"/>
                    <scope line="266"/>
                    <scope line="269"/>
                    <scope line="274"/>
                    <scope line="279"/>
                    <scope line="281"/>
                </method>
                <javadoc line="286">
                    Invoked by handler thread when failed to establish connection.                    
                </javadoc>
                <method name="failed" type="void" line="290">
                    <params>
                        <param name="error" type="int"/>
                        <param name="x" type="IOException"/>
                    </params>
                    <scope line="291"/>
                    <scope line="294"/>
                </method>
            </class>
            <method name="implConnect" type="Future<Void>" line="305">
                <params>
                    <param name="remote" type="SocketAddress"/>
                    <param name="attachment" type="A"/>
                    <param name="handler" type="CompletionHandler<Void,? super A>"/>
                </params>
                <comment line="317">
                    permission check                    
                </comment>
                <comment line="322">
                    check and update state
                     ConnectEx requires the socket to be bound to a local address                    
                </comment>
                <comment line="341">
                    handle bind failure                    
                </comment>
                <comment line="352">
                    setup task                    
                </comment>
                <comment line="358">
                    initiate I/O                    
                </comment>
                <scope line="306">
                    <declaration name="exc" type="Throwable" line="307"/>
                </scope>
                <declaration name="isa" type="InetSocketAddress" line="314"/>
                <declaration name="sm" type="SecurityManager" line="317"/>
                <declaration name="bindException" type="IOException" line="323"/>
                <scope line="324">
                    <scope line="329">
                        <scope line="330"/>
                        <scope line="332"/>
                    </scope>
                </scope>
                <scope line="341">
                    <scope line="342"/>
                    <scope line="344"/>
                </scope>
                <declaration name="result" type="PendingFuture&lt;Void,A&gt;" line="352"/>
                <declaration name="task" type="ConnectTask" line="354"/>
                <scope line="358"/>
                <scope line="360"/>
            </method>
            <class name="ReadTask" line="366">
                <type_params>
                    <type_param name="V"/>
                    <type_param name="A"/>
                </type_params>
                <comment line="377">
                    set by run method                    
                </comment>
                <comment line="651">
                    set by run method                    
                </comment>
                <implements interface="Runnable"/>
                <implements interface="Iocp.ResultHandler"/>
                <javadoc line="366">
                    Implements the task to initiate a read and the handler to consume the
                      result when the read completes.                    
                </javadoc>
                <declaration name="bufs" type="ByteBuffer[]" line="371"/>
                <declaration name="numBufs" type="int" line="372"/>
                <declaration name="scatteringRead" type="boolean" line="373"/>
                <declaration name="result" type="PendingFuture&lt;V,A&gt;" line="374"/>
                <declaration name="shadow" type="ByteBuffer[]" line="377"/>
                <method name="ReadTask" type="constructor" line="382">
                    <params>
                        <param name="bufs" type="ByteBuffer[]"/>
                        <param name="scatteringRead" type="boolean"/>
                        <param name="result" type="PendingFuture<V,A>"/>
                    </params>
                </method>
                <javadoc line="389">
                    Invoked prior to read to prepare the WSABUF array. Where necessary,
                      it substitutes non-direct buffers with direct buffers.                    
                </javadoc>
                <method name="prepareBuffers" type="void" line="393">
                    <comment line="405">
                        substitute with direct buffer                        
                    </comment>
                    <declaration name="address" type="long" line="395"/>
                    <scope line="396">
                        <declaration name="dst" type="ByteBuffer" line="397"/>
                        <declaration name="pos" type="int" line="398"/>
                        <declaration name="lim" type="int" line="399"/>
                        <declaration name="rem" type="int" line="401"/>
                        <declaration name="a" type="long" line="402"/>
                        <scope line="403">
                            <declaration name="bb" type="ByteBuffer" line="405"/>
                        </scope>
                        <scope line="408"/>
                    </scope>
                </method>
                <javadoc line="418">
                    Invoked after a read has completed to update the buffer positions
                      and release any substituted buffers.                    
                </javadoc>
                <method name="updateBuffers" type="void" line="422">
                    <params>
                        <param name="bytesRead" type="int"/>
                    </params>
                    <comment line="434">
                        position changed by another                        
                    </comment>
                    <comment line="436">
                        Buffers not completely filled                        
                    </comment>
                    <comment line="443">
                        position changed by another                        
                    </comment>
                    <comment line="450">
                        Put results from shadow into the slow buffers                        
                    </comment>
                    <comment line="457">
                        position changed by another                        
                    </comment>
                    <scope line="423">
                        <declaration name="nextBuffer" type="ByteBuffer" line="424"/>
                        <declaration name="pos" type="int" line="425"/>
                        <declaration name="len" type="int" line="426"/>
                        <scope line="427">
                            <declaration name="newPosition" type="int" line="429"/>
                            <scope line="430"/>
                            <scope line="432"/>
                        </scope>
                        <scope line="435">
                            <scope line="436">
                                <declaration name="newPosition" type="int" line="438"/>
                                <scope line="439"/>
                                <scope line="441"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="450">
                        <scope line="451">
                            <scope line="453"/>
                            <scope line="455"/>
                        </scope>
                    </scope>
                </method>
                <method name="releaseBuffers" type="void" line="462">
                    <scope line="463">
                        <scope line="464"/>
                    </scope>
                </method>
                <method name="run" type="void" line="472">
                    <comment line="481">
                        substitute non-direct buffers                        
                    </comment>
                    <comment line="485">
                        get an OVERLAPPED structure (from the cache or allocate)                        
                    </comment>
                    <comment line="488">
                        initiate read                        
                    </comment>
                    <comment line="491">
                        I/O is pending                        
                    </comment>
                    <comment line="496">
                        input shutdown                        
                    </comment>
                    <comment line="507">
                        failed to initiate read
                         reset read flag before releasing waiters                        
                    </comment>
                    <comment line="516">
                        release resources if I/O not pending                        
                    </comment>
                    <comment line="526">
                        invoke completion handler                        
                    </comment>
                    <declaration name="overlapped" type="long" line="473"/>
                    <declaration name="prepared" type="boolean" line="474"/>
                    <declaration name="pending" type="boolean" line="475"/>
                    <scope line="477">
                        <declaration name="n" type="int" line="488"/>
                        <scope line="489"/>
                        <scope line="494">
                            <scope line="497"/>
                            <scope line="499"/>
                        </scope>
                        <scope line="502"/>
                    </scope>
                    <scope line="505"/>
                    <scope line="514">
                        <scope line="516"/>
                    </scope>
                </method>
                <javadoc line="529">
                    Executed when the I/O has completed                    
                </javadoc>
                <method name="completed" type="void" line="534">
                    <params>
                        <param name="bytesTransferred" type="int"/>
                        <param name="canInvokeDirect" type="boolean"/>
                    </params>
                    <comment line="537">
                        EOF                        
                    </comment>
                    <comment line="542">
                        return direct buffer to cache if substituted                        
                    </comment>
                    <comment line="545">
                        release waiters if not already released by timeout                        
                    </comment>
                    <scope line="535"/>
                    <scope line="537"/>
                    <scope line="545">
                        <scope line="549"/>
                        <scope line="551"/>
                    </scope>
                    <scope line="555"/>
                    <scope line="557"/>
                </method>
                <method name="failed" type="void" line="563">
                    <params>
                        <param name="error" type="int"/>
                        <param name="x" type="IOException"/>
                    </params>
                    <comment line="565">
                        return direct buffer to cache if substituted                        
                    </comment>
                    <comment line="568">
                        release waiters if not already released by timeout                        
                    </comment>
                    <scope line="571"/>
                </method>
                <javadoc line="580">
                    Invoked if timeout expires before it is cancelled                    
                </javadoc>
                <method name="timeout" type="void" line="583">
                    <comment line="585">
                        synchronize on result as the I/O could complete/fail                        
                    </comment>
                    <comment line="590">
                        kill further reading before releasing waiters                        
                    </comment>
                    <comment line="595">
                        invoke handler without any locks                        
                    </comment>
                    <scope line="585"/>
                </method>
            </class>
            <method name="implRead" type="Future<V>" line="607">
                <params>
                    <param name="isScatteringRead" type="boolean"/>
                    <param name="dst" type="ByteBuffer"/>
                    <param name="dsts" type="ByteBuffer[]"/>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                    <param name="attachment" type="A"/>
                    <param name="handler" type="CompletionHandler<V,? super A>"/>
                </params>
                <comment line="609">
                    setup task                    
                </comment>
                <comment line="622">
                    schedule timeout                    
                </comment>
                <comment line="632">
                    initiate I/O                    
                </comment>
                <declaration name="result" type="PendingFuture&lt;V,A&gt;" line="609"/>
                <declaration name="bufs" type="ByteBuffer[]" line="611"/>
                <scope line="612"/>
                <scope line="614"/>
                <declaration name="readTask" type="ReadTask" line="618"/>
                <scope line="622">
                    <anonymous_class line="623">
                        <method name="run" type="void" line="624"/>
                    </anonymous_class>
                    <declaration name="timeoutTask" type="Future&lt;?&gt;" line="623"/>
                </scope>
                <scope line="632"/>
                <scope line="634"/>
            </method>
            <class name="WriteTask" line="640">
                <type_params>
                    <type_param name="V"/>
                    <type_param name="A"/>
                </type_params>
                <comment line="377">
                    set by run method                    
                </comment>
                <comment line="651">
                    set by run method                    
                </comment>
                <implements interface="Runnable"/>
                <implements interface="Iocp.ResultHandler"/>
                <javadoc line="640">
                    Implements the task to initiate a write and the handler to consume the
                      result when the write completes.                    
                </javadoc>
                <declaration name="bufs" type="ByteBuffer[]" line="645"/>
                <declaration name="numBufs" type="int" line="646"/>
                <declaration name="gatheringWrite" type="boolean" line="647"/>
                <declaration name="result" type="PendingFuture&lt;V,A&gt;" line="648"/>
                <declaration name="shadow" type="ByteBuffer[]" line="651"/>
                <method name="WriteTask" type="constructor" line="656">
                    <params>
                        <param name="bufs" type="ByteBuffer[]"/>
                        <param name="gatheringWrite" type="boolean"/>
                        <param name="result" type="PendingFuture<V,A>"/>
                    </params>
                </method>
                <javadoc line="663">
                    Invoked prior to write to prepare the WSABUF array. Where necessary,
                      it substitutes non-direct buffers with direct buffers.                    
                </javadoc>
                <method name="prepareBuffers" type="void" line="667">
                    <comment line="679">
                        substitute with direct buffer                        
                    </comment>
                    <comment line="683">
                        leave heap buffer untouched for now                        
                    </comment>
                    <declaration name="address" type="long" line="669"/>
                    <scope line="670">
                        <declaration name="src" type="ByteBuffer" line="671"/>
                        <declaration name="pos" type="int" line="672"/>
                        <declaration name="lim" type="int" line="673"/>
                        <declaration name="rem" type="int" line="675"/>
                        <declaration name="a" type="long" line="676"/>
                        <scope line="677">
                            <declaration name="bb" type="ByteBuffer" line="679"/>
                        </scope>
                        <scope line="685"/>
                    </scope>
                </method>
                <javadoc line="695">
                    Invoked after a write has completed to update the buffer positions
                      and release any substituted buffers.                    
                </javadoc>
                <method name="updateBuffers" type="void" line="699">
                    <params>
                        <param name="bytesWritten" type="int"/>
                    </params>
                    <comment line="701">
                        Notify the buffers how many bytes were taken                        
                    </comment>
                    <comment line="713">
                        position changed by someone else                        
                    </comment>
                    <comment line="715">
                        Buffers not completely filled                        
                    </comment>
                    <comment line="722">
                        position changed by someone else                        
                    </comment>
                    <scope line="701">
                        <declaration name="nextBuffer" type="ByteBuffer" line="702"/>
                        <declaration name="pos" type="int" line="703"/>
                        <declaration name="lim" type="int" line="704"/>
                        <declaration name="len" type="int" line="705"/>
                        <scope line="706">
                            <declaration name="newPosition" type="int" line="708"/>
                            <scope line="709"/>
                            <scope line="711"/>
                        </scope>
                        <scope line="714">
                            <scope line="715">
                                <declaration name="newPosition" type="int" line="717"/>
                                <scope line="718"/>
                                <scope line="720"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="releaseBuffers" type="void" line="729">
                    <scope line="730">
                        <scope line="731"/>
                    </scope>
                </method>
                <method name="run" type="void" line="739">
                    <comment line="739">
                        @SuppressWarnings(&quot;unchecked&quot;)                        
                    </comment>
                    <comment line="749">
                        substitute non-direct buffers                        
                    </comment>
                    <comment line="753">
                        get an OVERLAPPED structure (from the cache or allocate)                        
                    </comment>
                    <comment line="757">
                        I/O is pending                        
                    </comment>
                    <comment line="762">
                        special case for shutdown output                        
                    </comment>
                    <comment line="766">
                        write completed immediately                        
                    </comment>
                    <comment line="769">
                        write failed. Enable writing before releasing waiters.                        
                    </comment>
                    <comment line="777">
                        release resources if I/O not pending                        
                    </comment>
                    <comment line="787">
                        invoke completion handler                        
                    </comment>
                    <declaration name="overlapped" type="long" line="740"/>
                    <declaration name="prepared" type="boolean" line="741"/>
                    <declaration name="pending" type="boolean" line="742"/>
                    <declaration name="shutdown" type="boolean" line="743"/>
                    <scope line="745">
                        <declaration name="n" type="int" line="754"/>
                        <scope line="755"/>
                        <scope line="760"/>
                    </scope>
                    <scope line="767"/>
                    <scope line="775">
                        <scope line="777"/>
                    </scope>
                </method>
                <javadoc line="790">
                    Executed when the I/O has completed                    
                </javadoc>
                <method name="completed" type="void" line="795">
                    <params>
                        <param name="bytesTransferred" type="int"/>
                        <param name="canInvokeDirect" type="boolean"/>
                    </params>
                    <comment line="799">
                        return direct buffer to cache if substituted                        
                    </comment>
                    <comment line="802">
                        release waiters if not already released by timeout                        
                    </comment>
                    <scope line="802">
                        <scope line="806"/>
                        <scope line="808"/>
                    </scope>
                    <scope line="812"/>
                    <scope line="814"/>
                </method>
                <method name="failed" type="void" line="820">
                    <params>
                        <param name="error" type="int"/>
                        <param name="x" type="IOException"/>
                    </params>
                    <comment line="822">
                        return direct buffer to cache if substituted                        
                    </comment>
                    <comment line="825">
                        release waiters if not already released by timeout                        
                    </comment>
                    <scope line="828"/>
                </method>
                <javadoc line="837">
                    Invoked if timeout expires before it is cancelled                    
                </javadoc>
                <method name="timeout" type="void" line="840">
                    <comment line="842">
                        synchronize on result as the I/O could complete/fail                        
                    </comment>
                    <comment line="847">
                        kill further writing before releasing waiters                        
                    </comment>
                    <comment line="852">
                        invoke handler without any locks                        
                    </comment>
                    <scope line="842"/>
                </method>
            </class>
            <method name="implWrite" type="Future<V>" line="864">
                <params>
                    <param name="gatheringWrite" type="boolean"/>
                    <param name="src" type="ByteBuffer"/>
                    <param name="srcs" type="ByteBuffer[]"/>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                    <param name="attachment" type="A"/>
                    <param name="handler" type="CompletionHandler<V,? super A>"/>
                </params>
                <comment line="866">
                    setup task                    
                </comment>
                <comment line="879">
                    schedule timeout                    
                </comment>
                <comment line="889">
                    initiate I/O (can only be done from thread in thread pool)
                     initiate I/O                    
                </comment>
                <declaration name="result" type="PendingFuture&lt;V,A&gt;" line="866"/>
                <declaration name="bufs" type="ByteBuffer[]" line="868"/>
                <scope line="869"/>
                <scope line="871"/>
                <declaration name="writeTask" type="WriteTask" line="875"/>
                <scope line="879">
                    <anonymous_class line="880">
                        <method name="run" type="void" line="881"/>
                    </anonymous_class>
                    <declaration name="timeoutTask" type="Future&lt;?&gt;" line="880"/>
                </scope>
                <scope line="890"/>
                <scope line="892"/>
            </method>
            <method name="initIDs" type="void" line="900"/>
            <method name="connect0" type="int" line="902"/>
            <method name="updateConnectContext" type="void" line="905"/>
            <method name="read0" type="int" line="907"/>
            <method name="write0" type="int" line="910"/>
            <method name="shutdown0" type="void" line="913"/>
            <method name="closesocket0" type="void" line="915"/>
            <scope line="917"/>
        </class>
    </source>