<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file"/>
        <import package="java.nio.file.attribute"/>
        <import package="java.nio.channels"/>
        <import package="java.net.URI"/>
        <import package="java.util.concurrent.ExecutorService"/>
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.security.AccessController"/>
        <import package="sun.misc.Unsafe"/>
        <import package="sun.nio.ch.ThreadPool"/>
        <import package="sun.security.util.SecurityConstants"/>
        <import package="sun.nio.fs.WindowsNativeDispatcher"/>
        <import package="sun.nio.fs.WindowsConstants"/>
        <class name="WindowsFileSystemProvider" line="43">
            <extends class="AbstractFileSystemProvider"/>
            <declaration name="unsafe" type="Unsafe" line="46"/>
            <declaration name="USER_DIR" type="String" line="48"/>
            <declaration name="theFileSystem" type="WindowsFileSystem" line="49"/>
            <method name="WindowsFileSystemProvider" type="constructor" line="51"/>
            <method name="getScheme" type="String" line="56"/>
            <method name="checkUri" type="void" line="60">
                <params>
                    <param name="uri" type="URI"/>
                </params>
            </method>
            <method name="newFileSystem" type="FileSystem" line="78">
                <params>
                    <param name="uri" type="URI"/>
                    <param name="env" type="Map<String,?>"/>
                </params>
            </method>
            <method name="getFileSystem" type="FileSystem" line="84">
                <params>
                    <param name="uri" type="URI"/>
                </params>
            </method>
            <method name="getPath" type="Path" line="90">
                <params>
                    <param name="uri" type="URI"/>
                </params>
            </method>
            <method name="newFileChannel" type="FileChannel" line="99">
                <params>
                    <param name="path" type="Path"/>
                    <param name="options" type="Set<? extends OpenOption>"/>
                    <param name="attrs" type="FileAttribute<?>"/>
                </params>
                <declaration name="file" type="WindowsPath" line="104"/>
                <declaration name="sd" type="WindowsSecurityDescriptor" line="106"/>
                <scope line="107"/>
                <scope line="113"/>
                <scope line="116"/>
            </method>
            <method name="newAsynchronousFileChannel" type="AsynchronousFileChannel" line="128">
                <params>
                    <param name="path" type="Path"/>
                    <param name="options" type="Set<? extends OpenOption>"/>
                    <param name="executor" type="ExecutorService"/>
                    <param name="attrs" type="FileAttribute<?>"/>
                </params>
                <declaration name="file" type="WindowsPath" line="133"/>
                <declaration name="pool" type="ThreadPool" line="134"/>
                <declaration name="sd" type="WindowsSecurityDescriptor" line="135"/>
                <scope line="137"/>
                <scope line="144"/>
                <scope line="147"/>
            </method>
            <method name="getFileAttributeView" type="V" line="157">
                <params>
                    <param name="obj" type="Path"/>
                    <param name="view" type="Class<V>"/>
                    <param name="options" type="LinkOption"/>
                </params>
                <declaration name="file" type="WindowsPath" line="158"/>
                <declaration name="followLinks" type="boolean" line="161"/>
            </method>
            <method name="readAttributes" type="A" line="182">
                <params>
                    <param name="file" type="Path"/>
                    <param name="type" type="Class<A>"/>
                    <param name="options" type="LinkOption"/>
                </params>
                <declaration name="view" type="Class&lt;? extends BasicFileAttributeView&gt;" line="183"/>
            </method>
            <method name="getFileAttributeView" type="DynamicFileAttributeView" line="196">
                <params>
                    <param name="obj" type="Path"/>
                    <param name="name" type="String"/>
                    <param name="options" type="LinkOption"/>
                </params>
                <declaration name="file" type="WindowsPath" line="197"/>
                <declaration name="followLinks" type="boolean" line="198"/>
            </method>
            <method name="newByteChannel" type="SeekableByteChannel" line="218">
                <params>
                    <param name="obj" type="Path"/>
                    <param name="options" type="Set<? extends OpenOption>"/>
                    <param name="attrs" type="FileAttribute<?>"/>
                </params>
                <comment line="230">
                    keep compiler happy                    
                </comment>
                <declaration name="file" type="WindowsPath" line="219"/>
                <declaration name="sd" type="WindowsSecurityDescriptor" line="220"/>
                <scope line="222"/>
                <scope line="228"/>
                <scope line="231"/>
            </method>
            <method name="implDelete" type="boolean" line="237">
                <params>
                    <param name="obj" type="Path"/>
                    <param name="failIfNotExists" type="boolean"/>
                </params>
                <comment line="243">
                    need to know if file is a directory or junction                    
                </comment>
                <comment line="253">
                    no-op if file does not exist                    
                </comment>
                <comment line="259">
                    ERROR_ALREADY_EXISTS is returned when attempting to delete                    
                </comment>
                <comment line="260">
                    non-empty directory on SAMBA servers.                    
                </comment>
                <declaration name="file" type="WindowsPath" line="238"/>
                <declaration name="attrs" type="WindowsFileAttributes" line="241"/>
                <scope line="242">
                    <scope line="245"/>
                    <scope line="247"/>
                </scope>
                <scope line="251">
                    <scope line="258">
                        <scope line="263"/>
                    </scope>
                </scope>
            </method>
            <method name="copy" type="void" line="276">
                <params>
                    <param name="source" type="Path"/>
                    <param name="target" type="Path"/>
                    <param name="options" type="CopyOption"/>
                </params>
            </method>
            <method name="move" type="void" line="285">
                <params>
                    <param name="source" type="Path"/>
                    <param name="target" type="Path"/>
                    <param name="options" type="CopyOption"/>
                </params>
            </method>
            <javadoc line="291">
                Returns buffer with SID_AND_ATTRIBUTES structure representing the user
                  associated with the current thread access token.
                  FIXME - this should be cached.                
            </javadoc>
            <method name="getUserInfo" type="NativeBuffer" line="296">
                <params>
                    <param name="file" type="WindowsPath"/>
                </params>
                <scope line="297">
                    <declaration name="hToken" type="long" line="298"/>
                    <declaration name="size" type="int" line="299"/>
                    <declaration name="buffer" type="NativeBuffer" line="302"/>
                    <scope line="303">
                        <declaration name="newsize" type="int" line="304"/>
                    </scope>
                    <scope line="309"/>
                </scope>
                <scope line="313"/>
            </method>
            <javadoc line="318">
                Reads the file ACL and return the effective access as ACCESS_MASK                
            </javadoc>
            <method name="getEffectiveAccess" type="int" line="321">
                <params>
                    <param name="file" type="WindowsPath"/>
                </params>
                <comment line="322">
                    read security descriptor continaing ACL (symlinks are followed)                    
                </comment>
                <comment line="327">
                    retrieves DACL from security descriptor                    
                </comment>
                <comment line="330">
                    Use GetEffectiveRightsFromAcl to get effective access to file                    
                </comment>
                <comment line="335">
                    SID_AND_ATTRIBUTES-&gt;pSid                    
                </comment>
                <declaration name="target" type="String" line="323"/>
                <declaration name="aclBuffer" type="NativeBuffer" line="324"/>
                <declaration name="pAcl" type="long" line="328"/>
                <scope line="331">
                    <declaration name="userBuffer" type="NativeBuffer" line="332"/>
                    <scope line="333">
                        <scope line="334">
                            <declaration name="pSid" type="long" line="336"/>
                            <declaration name="pTrustee" type="long" line="337"/>
                            <scope line="338"/>
                            <scope line="340"/>
                        </scope>
                        <scope line="343"/>
                    </scope>
                    <scope line="347"/>
                </scope>
                <scope line="350"/>
            </method>
            <method name="checkAccess" type="void" line="356">
                <params>
                    <param name="obj" type="Path"/>
                    <param name="modes" type="AccessMode"/>
                </params>
                <comment line="358">
                    if no access modes then simply file attributes                    
                </comment>
                <comment line="402">
                    for write access we neeed to check if the DOS readonly attribute                    
                </comment>
                <comment line="403">
                    and if the volume is read-only                    
                </comment>
                <declaration name="file" type="WindowsPath" line="357"/>
                <scope line="359">
                    <scope line="361"/>
                    <scope line="363"/>
                </scope>
                <declaration name="r" type="boolean" line="369"/>
                <declaration name="w" type="boolean" line="370"/>
                <declaration name="x" type="boolean" line="371"/>
                <scope line="372"/>
                <declaration name="mask" type="int" line="381"/>
                <scope line="382"/>
                <scope line="386"/>
                <scope line="390">
                    <declaration name="sm" type="SecurityManager" line="391"/>
                </scope>
                <scope line="404">
                    <scope line="405">
                        <declaration name="attrs" type="WindowsFileAttributes" line="406"/>
                    </scope>
                    <scope line="411"/>
                    <scope line="415"/>
                </scope>
            </method>
            <method name="isSameFile" type="boolean" line="424">
                <params>
                    <param name="obj1" type="Path"/>
                    <param name="obj2" type="Path"/>
                </params>
                <comment line="434">
                    check security manager access to both files                    
                </comment>
                <comment line="438">
                    open both files and see if they are the same                    
                </comment>
                <declaration name="file1" type="WindowsPath" line="425"/>
                <declaration name="file2" type="WindowsPath" line="432"/>
                <declaration name="h1" type="long" line="439"/>
                <scope line="440"/>
                <scope line="442"/>
                <scope line="445">
                    <declaration name="attrs1" type="WindowsFileAttributes" line="446"/>
                    <scope line="447"/>
                    <scope line="449"/>
                    <declaration name="h2" type="long" line="452"/>
                    <scope line="453"/>
                    <scope line="455"/>
                    <scope line="458">
                        <declaration name="attrs2" type="WindowsFileAttributes" line="459"/>
                        <scope line="460"/>
                        <scope line="462"/>
                    </scope>
                    <scope line="466"/>
                </scope>
                <scope line="469"/>
            </method>
            <method name="isHidden" type="boolean" line="475">
                <params>
                    <param name="obj" type="Path"/>
                </params>
                <comment line="484">
                    DOS hidden attribute not meaningful when set on directories                    
                </comment>
                <declaration name="file" type="WindowsPath" line="476"/>
                <declaration name="attrs" type="WindowsFileAttributes" line="478"/>
                <scope line="479"/>
                <scope line="481"/>
            </method>
            <method name="getFileStore" type="FileStore" line="491">
                <params>
                    <param name="obj" type="Path"/>
                </params>
                <declaration name="file" type="WindowsPath" line="492"/>
                <declaration name="sm" type="SecurityManager" line="493"/>
                <scope line="494"/>
            </method>
            <method name="createDirectory" type="void" line="505">
                <params>
                    <param name="obj" type="Path"/>
                    <param name="attrs" type="FileAttribute<?>"/>
                </params>
                <declaration name="dir" type="WindowsPath" line="506"/>
                <declaration name="sd" type="WindowsSecurityDescriptor" line="508"/>
                <scope line="509"/>
                <scope line="511"/>
                <scope line="513"/>
            </method>
            <method name="newDirectoryStream" type="DirectoryStream<Path>" line="521">
                <params>
                    <param name="obj" type="Path"/>
                    <param name="filter" type="DirectoryStream.Filter<? super Path>"/>
                </params>
                <declaration name="dir" type="WindowsPath" line="522"/>
            </method>
            <method name="createSymbolicLink" type="void" line="532">
                <params>
                    <param name="obj1" type="Path"/>
                    <param name="obj2" type="Path"/>
                    <param name="attrs" type="FileAttribute<?>"/>
                </params>
                <comment line="541">
                    no attributes allowed                    
                </comment>
                <comment line="543">
                    may throw NPE or UOE                    
                </comment>
                <comment line="548">
                    permission check                    
                </comment>
                <comment line="555">
                    Throw IO exception for the drive-relative case because Windows
                     creates a link with the resolved target for this case.                    
                </comment>
                <comment line="563">
                    Windows treates symbolic links to directories differently than it
                     does to other file types. For that reason we need to check if the
                     target is a directory (or a directory junction).                    
                </comment>
                <comment line="581">
                    unable to access target so assume target is not a directory                    
                </comment>
                <comment line="584">
                    create the link                    
                </comment>
                <declaration name="link" type="WindowsPath" line="533"/>
                <declaration name="target" type="WindowsPath" line="534"/>
                <scope line="536"/>
                <scope line="542"/>
                <declaration name="sm" type="SecurityManager" line="549"/>
                <scope line="550"/>
                <scope line="559"/>
                <declaration name="resolvedTarget" type="WindowsPath" line="568"/>
                <scope line="569">
                    <declaration name="parent" type="WindowsPath" line="570"/>
                </scope>
                <scope line="572"/>
                <declaration name="flags" type="int" line="575"/>
                <scope line="576">
                    <declaration name="wattrs" type="WindowsFileAttributes" line="577"/>
                </scope>
                <scope line="580"/>
                <scope line="585"/>
                <scope line="589">
                    <scope line="590"/>
                    <scope line="592"/>
                </scope>
            </method>
            <method name="createLink" type="void" line="599">
                <params>
                    <param name="obj1" type="Path"/>
                    <param name="obj2" type="Path"/>
                </params>
                <comment line="603">
                    permission check                    
                </comment>
                <comment line="611">
                    create hard link                    
                </comment>
                <declaration name="link" type="WindowsPath" line="600"/>
                <declaration name="existing" type="WindowsPath" line="601"/>
                <declaration name="sm" type="SecurityManager" line="604"/>
                <scope line="605"/>
                <scope line="612"/>
                <scope line="615"/>
            </method>
            <method name="readSymbolicLink" type="Path" line="621">
                <params>
                    <param name="obj1" type="Path"/>
                </params>
                <comment line="628">
                    permission check                    
                </comment>
                <declaration name="link" type="WindowsPath" line="622"/>
                <declaration name="fs" type="WindowsFileSystem" line="623"/>
                <scope line="624"/>
                <declaration name="sm" type="SecurityManager" line="629"/>
                <scope line="630">
                    <declaration name="perm" type="FilePermission" line="631"/>
                </scope>
                <declaration name="target" type="String" line="636"/>
            </method>
        </class>
    </source>