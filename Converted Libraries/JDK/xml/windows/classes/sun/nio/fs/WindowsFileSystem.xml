<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file"/>
        <import package="java.nio.file.attribute"/>
        <import package="java.nio.file.spi"/>
        <import package="java.util"/>
        <import package="java.util.regex.Pattern"/>
        <import package="java.io.IOException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="WindowsFileSystem" line="38">
            <extends class="FileSystem"/>
            <comment line="44">
                default directory (is absolute), and default root                
            </comment>
            <comment line="51">
                package-private                
            </comment>
            <comment line="79">
                package-private                
            </comment>
            <comment line="230">
                supported views                
            </comment>
            <declaration name="provider" type="WindowsFileSystemProvider" line="41"/>
            <declaration name="defaultDirectory" type="String" line="44"/>
            <declaration name="defaultRoot" type="String" line="45"/>
            <declaration name="supportsLinks" type="boolean" line="47"/>
            <declaration name="supportsStreamEnumeration" type="boolean" line="48"/>
            <method name="WindowsFileSystem" type="constructor" line="53">
                <params>
                    <param name="provider" type="WindowsFileSystemProvider"/>
                    <param name="dir" type="String"/>
                </params>
                <comment line="57">
                    parse default directory and check it is absolute                    
                </comment>
                <comment line="72">
                    symbolic links available on Vista and newer                    
                </comment>
                <comment line="75">
                    enumeration of data streams available on Windows Server 2003 and newer                    
                </comment>
                <declaration name="result" type="WindowsPathParser.Result" line="57"/>
                <declaration name="pa" type="PrivilegedAction&lt;String&gt;" line="65"/>
                <declaration name="osversion" type="String" line="66"/>
                <declaration name="vers" type="String[]" line="67"/>
                <declaration name="major" type="int" line="68"/>
                <declaration name="minor" type="int" line="69"/>
            </method>
            <method name="defaultDirectory" type="String" line="79"/>
            <method name="defaultRoot" type="String" line="83"/>
            <method name="supportsLinks" type="boolean" line="87"/>
            <method name="supportsStreamEnumeration" type="boolean" line="91"/>
            <method name="provider" type="FileSystemProvider" line="96"/>
            <method name="getSeparator" type="String" line="101"/>
            <method name="isOpen" type="boolean" line="106"/>
            <method name="isReadOnly" type="boolean" line="111"/>
            <method name="close" type="void" line="116"/>
            <method name="getRootDirectories" type="Iterable<Path>" line="121">
                <comment line="127">
                    shouldn&apos;t happen                    
                </comment>
                <comment line="131">
                    iterate over roots, ignoring those that the security manager denies                    
                </comment>
                <comment line="134">
                    0-&gt;A, 1-&gt;B, 2-&gt;C...                    
                </comment>
                <declaration name="drives" type="int" line="122"/>
                <scope line="123"/>
                <scope line="125"/>
                <declaration name="result" type="ArrayList&lt;Path&gt;" line="131"/>
                <declaration name="sm" type="SecurityManager" line="132"/>
                <scope line="133">
                    <scope line="134">
                        <declaration name="sb" type="StringBuilder" line="135"/>
                        <declaration name="root" type="String" line="138"/>
                        <scope line="139">
                            <scope line="140"/>
                            <scope line="142"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <class name="FileStoreIterator" line="152">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="FileStore"/>
                    </type_params>
                </implements>
                <javadoc line="152">
                    Iterator returned by getFileStores method.                    
                </javadoc>
                <declaration name="roots" type="Iterator&lt;Path&gt;" line="156"/>
                <declaration name="next" type="FileStore" line="157"/>
                <method name="FileStoreIterator" type="constructor" line="159"/>
                <method name="readNext" type="FileStore" line="163">
                    <comment line="170">
                        ignore if security manager denies access                        
                    </comment>
                    <comment line="181">
                        skip it                        
                    </comment>
                    <scope line="165">
                        <declaration name="root" type="WindowsPath" line="168"/>
                        <scope line="170"/>
                        <scope line="172"/>
                        <scope line="175">
                            <declaration name="fs" type="FileStore" line="176"/>
                        </scope>
                        <scope line="179"/>
                    </scope>
                </method>
                <method name="hasNext" type="boolean" line="186"/>
                <method name="next" type="FileStore" line="194">
                    <scope line="197"/>
                    <scope line="199">
                        <declaration name="result" type="FileStore" line="200"/>
                    </scope>
                </method>
                <method name="remove" type="void" line="207"/>
            </class>
            <method name="getFileStores" type="Iterable<FileStore>" line="213">
                <declaration name="sm" type="SecurityManager" line="214"/>
                <scope line="215">
                    <scope line="216"/>
                    <scope line="218"/>
                </scope>
                <anonymous_class line="222">
                    <method name="iterator" type="Iterator<FileStore>" line="223"/>
                </anonymous_class>
            </method>
            <declaration name="supportedFileAttributeViews" type="Set&lt;String&gt;" line="230"/>
            <method name="supportedFileAttributeViews" type="Set<String>" line="234"/>
            <method name="getPath" type="Path" line="239">
                <params>
                    <param name="first" type="String"/>
                    <param name="more" type="String"/>
                </params>
                <declaration name="path" type="String" line="240"/>
                <scope line="241"/>
                <scope line="243">
                    <declaration name="sb" type="StringBuilder" line="244"/>
                    <scope line="246">
                        <scope line="247"/>
                    </scope>
                </scope>
            </method>
            <method name="getUserPrincipalLookupService" type="UserPrincipalLookupService" line="259"/>
            <class name="LookupService" line="263">
                <declaration name="instance" type="UserPrincipalLookupService" line="264"/>
                <anonymous_class line="265">
                    <method name="lookupPrincipalByName" type="UserPrincipal" line="269">
                        <params>
                            <param name="name" type="String"/>
                        </params>
                    </method>
                    <method name="lookupPrincipalByGroupName" type="GroupPrincipal" line="275">
                        <params>
                            <param name="group" type="String"/>
                        </params>
                        <declaration name="user" type="UserPrincipal" line="276"/>
                    </method>
                </anonymous_class>
            </class>
            <method name="getPathMatcher" type="PathMatcher" line="285">
                <params>
                    <param name="syntaxAndInput" type="String"/>
                </params>
                <comment line="305">
                    match in unicode_case_insensitive                    
                </comment>
                <comment line="309">
                    return matcher                    
                </comment>
                <declaration name="pos" type="int" line="286"/>
                <declaration name="syntax" type="String" line="289"/>
                <declaration name="input" type="String" line="290"/>
                <declaration name="expr" type="String" line="292"/>
                <scope line="293"/>
                <scope line="295">
                    <scope line="296"/>
                    <scope line="298"/>
                </scope>
                <declaration name="pattern" type="Pattern" line="305"/>
                <anonymous_class line="309">
                    <method name="matches" type="boolean" line="311">
                        <params>
                            <param name="path" type="Path"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <declaration name="GLOB_SYNTAX" type="String" line="316"/>
            <declaration name="REGEX_SYNTAX" type="String" line="317"/>
            <method name="newWatchService" type="WatchService" line="322"/>
        </class>
    </source>