<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file.InvalidPathException"/>
        <class name="WindowsPathParser" line="3">
            <javadoc line="3">
                A parser of Windows path strings                
            </javadoc>
            <method name="WindowsPathParser" type="constructor" line="7"/>
            <class name="Result" line="9">
                <javadoc line="9">
                    The result of a parse operation                    
                </javadoc>
                <declaration name="type" type="WindowsPathType" line="13"/>
                <declaration name="root" type="String" line="14"/>
                <declaration name="path" type="String" line="15"/>
                <method name="Result" type="constructor" line="16">
                    <params>
                        <param name="type" type="WindowsPathType"/>
                        <param name="root" type="String"/>
                        <param name="path" type="String"/>
                    </params>
                </method>
                <javadoc line="21">
                    The path type                    
                </javadoc>
                <method name="type" type="WindowsPathType" line="24"/>
                <javadoc line="27">
                    The root component                    
                </javadoc>
                <method name="root" type="String" line="30"/>
                <javadoc line="33">
                    The normalized path (includes root)                    
                </javadoc>
                <method name="path" type="String" line="36"/>
            </class>
            <javadoc line="40">
                Parses the given input as a Windows path                
            </javadoc>
            <method name="parse" type="Result" line="43">
                <params>
                    <param name="input" type="String"/>
                </params>
            </method>
            <javadoc line="46">
                Parses the given input as a Windows path where it is known that the
                  path is already normalized.                
            </javadoc>
            <method name="parseNormalizedPath" type="Result" line="50">
                <params>
                    <param name="input" type="String"/>
                </params>
            </method>
            <javadoc line="53">
                Parses the given input as a Windows path.                
                <param>
                    requireToNormalizeIndicates if the path requires to be normalized                    
                </param>
            </javadoc>
            <method name="parse" type="Result" line="57">
                <params>
                    <param name="input" type="String"/>
                    <param name="requireToNormalize" type="boolean"/>
                </params>
                <declaration name="root" type="String" line="58"/>
                <declaration name="type" type="WindowsPathType" line="59"/>
                <declaration name="len" type="int" line="60"/>
                <declaration name="off" type="int" line="61"/>
                <scope line="62">
                    <declaration name="c0" type="char" line="63"/>
                    <declaration name="c1" type="char" line="64"/>
                    <declaration name="c" type="char" line="65"/>
                    <declaration name="next" type="int" line="66"/>
                    <scope line="67">
                        <declaration name="host" type="String" line="72"/>
                    </scope>
                    <scope line="79">
                        <scope line="80">
                            <scope line="82"/>
                            <scope line="87"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="94">
                    <scope line="95"/>
                    <scope line="99"/>
                </scope>
                <scope line="103">
                    <declaration name="sb" type="StringBuilder" line="104"/>
                </scope>
                <scope line="108"/>
            </method>
            <javadoc line="112">
                Remove redundant slashes from the rest of the path, forcing all slashes
                  into the preferred slash.                
            </javadoc>
            <method name="normalize" type="String" line="116">
                <params>
                    <param name="sb" type="StringBuilder"/>
                    <param name="path" type="String"/>
                    <param name="off" type="int"/>
                </params>
                <declaration name="len" type="int" line="117"/>
                <declaration name="start" type="int" line="119"/>
                <declaration name="lastC" type="char" line="120"/>
                <scope line="121">
                    <declaration name="c" type="char" line="122"/>
                    <scope line="123"/>
                    <scope line="130"/>
                </scope>
                <scope line="136"/>
            </method>
            <method name="isSlash" type="boolean" line="142">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <method name="nextNonSlash" type="int" line="145">
                <params>
                    <param name="path" type="String"/>
                    <param name="off" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="146"/>
            </method>
            <method name="nextSlash" type="int" line="151">
                <params>
                    <param name="path" type="String"/>
                    <param name="off" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="c" type="char" line="152"/>
                <scope line="153"/>
            </method>
            <method name="isLetter" type="boolean" line="159">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <declaration name="reservedChars" type="String" line="162"/>
            <method name="isInvalidPathChar" type="boolean" line="163">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
        </class>
    </source>