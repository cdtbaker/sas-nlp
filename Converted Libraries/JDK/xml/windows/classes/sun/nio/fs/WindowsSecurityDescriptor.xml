<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file.ProviderMismatchException"/>
        <import package="java.nio.file.attribute"/>
        <import package="java.util"/>
        <import package="java.io.IOException"/>
        <import package="sun.misc.Unsafe"/>
        <import package="sun.nio.fs.WindowsNativeDispatcher"/>
        <import package="sun.nio.fs.WindowsConstants"/>
        <class name="WindowsSecurityDescriptor" line="37">
            <comment line="93">
                null security descriptor                
            </comment>
            <comment line="97">
                native resources                
            </comment>
            <comment line="201">
                decode Windows ACE to NFSv4 AclEntry                
            </comment>
            <comment line="270">
                encode NFSv4 AclEntry as Windows ACE to given ACL                
            </comment>
            <javadoc line="37">
                A SecurityDescriptor for use when setting a file&apos;s ACL or creating a file
                  with an initial ACL.                
            </javadoc>
            <declaration name="unsafe" type="Unsafe" line="43"/>
            <declaration name="SIZEOF_ACL" type="short" line="45"/>
            <javadoc line="45">
                typedef struct _ACL {
                  BYTE  AclRevision;
                  BYTE  Sbz1;
                  WORD  AclSize;
                  WORD  AceCount;
                  WORD  Sbz2;
                  } ACL;
                  typedef struct _ACE_HEADER {
                  BYTE AceType;
                  BYTE AceFlags;
                  WORD AceSize;
                  } ACE_HEADER;
                  typedef struct _ACCESS_ALLOWED_ACE {
                  ACE_HEADER Header;
                  ACCESS_MASK Mask;
                  DWORD SidStart;
                  } ACCESS_ALLOWED_ACE;
                  typedef struct _ACCESS_DENIED_ACE {
                  ACE_HEADER Header;
                  ACCESS_MASK Mask;
                  DWORD SidStart;
                  } ACCESS_DENIED_ACE;
                  typedef struct _SECURITY_DESCRIPTOR {
                  BYTE  Revision;
                  BYTE  Sbz1;
                  SECURITY_DESCRIPTOR_CONTROL Control;
                  PSID Owner;
                  PSID Group;
                  PACL Sacl;
                  PACL Dacl;
                  } SECURITY_DESCRIPTOR;                
            </javadoc>
            <declaration name="SIZEOF_ACCESS_ALLOWED_ACE" type="short" line="83"/>
            <declaration name="SIZEOF_ACCESS_DENIED_ACE" type="short" line="84"/>
            <declaration name="SIZEOF_SECURITY_DESCRIPTOR" type="short" line="85"/>
            <declaration name="OFFSETOF_TYPE" type="short" line="87"/>
            <declaration name="OFFSETOF_FLAGS" type="short" line="88"/>
            <declaration name="OFFSETOF_ACCESS_MASK" type="short" line="89"/>
            <declaration name="OFFSETOF_SID" type="short" line="90"/>
            <declaration name="NULL_DESCRIPTOR" type="WindowsSecurityDescriptor" line="93"/>
            <declaration name="sidList" type="List&lt;Long&gt;" line="97"/>
            <declaration name="aclBuffer" type="NativeBuffer" line="98"/>
            <javadoc line="100">
                Creates the &quot;null&quot; SecurityDescriptor                
            </javadoc>
            <method name="WindowsSecurityDescriptor" type="constructor" line="103"/>
            <javadoc line="109">
                Creates a SecurityDescriptor from the given ACL                
            </javadoc>
            <method name="WindowsSecurityDescriptor" type="constructor" line="112">
                <params>
                    <param name="acl" type="List<AclEntry>"/>
                </params>
                <comment line="116">
                    SECURITY: need to copy list in case size changes during processing                    
                </comment>
                <comment line="119">
                    list of SIDs                    
                </comment>
                <comment line="122">
                    initial size of ACL                    
                </comment>
                <comment line="125">
                    get the SID for each entry                    
                </comment>
                <comment line="135">
                    increase size to allow for entry                    
                </comment>
                <comment line="145">
                    allocate memory for the ACL                    
                </comment>
                <comment line="151">
                    Add entry ACE to the ACL                    
                </comment>
                <comment line="165">
                    initialize security descriptor and set DACL                    
                </comment>
                <comment line="172">
                    release resources if not completely initialized                    
                </comment>
                <declaration name="initialized" type="boolean" line="113"/>
                <scope line="120">
                    <declaration name="size" type="int" line="122"/>
                    <scope line="125">
                        <declaration name="user" type="UserPrincipal" line="126"/>
                        <declaration name="sidString" type="String" line="129"/>
                        <scope line="130">
                            <declaration name="pSid" type="long" line="131"/>
                        </scope>
                        <scope line="138"/>
                    </scope>
                    <declaration name="i" type="int" line="151"/>
                    <scope line="152">
                        <declaration name="entry" type="AclEntry" line="153"/>
                        <declaration name="pSid" type="long" line="154"/>
                        <scope line="155"/>
                        <scope line="157"/>
                    </scope>
                </scope>
                <scope line="168"/>
                <scope line="170"/>
            </method>
            <javadoc line="177">
                Releases memory associated with SecurityDescriptor                
            </javadoc>
            <method name="release" type="void" line="180">
                <comment line="187">
                    release memory for SIDs                    
                </comment>
                <scope line="185">
                    <scope line="187"/>
                </scope>
            </method>
            <javadoc line="193">
                Returns address of SecurityDescriptor                
            </javadoc>
            <method name="address" type="long" line="196"/>
            <method name="decode" type="AclEntry" line="203">
                <params>
                    <param name="aceAddress" type="long"/>
                </params>
                <comment line="205">
                    map type                    
                </comment>
                <comment line="216">
                    map flags                    
                </comment>
                <comment line="228">
                    map access mask                    
                </comment>
                <comment line="260">
                    lookup SID to create UserPrincipal                    
                </comment>
                <declaration name="aceType" type="byte" line="205"/>
                <declaration name="type" type="AclEntryType" line="208"/>
                <scope line="209"/>
                <scope line="211"/>
                <declaration name="aceFlags" type="byte" line="216"/>
                <declaration name="flags" type="Set&lt;AclEntryFlag&gt;" line="217"/>
                <declaration name="mask" type="int" line="228"/>
                <declaration name="perms" type="Set&lt;AclEntryPermission&gt;" line="229"/>
                <declaration name="sidAddress" type="long" line="260"/>
                <declaration name="user" type="UserPrincipal" line="261"/>
            </method>
            <method name="encode" type="void" line="272">
                <params>
                    <param name="ace" type="AclEntry"/>
                    <param name="sidAddress" type="long"/>
                    <param name="aclAddress" type="long"/>
                </params>
                <comment line="274">
                    ignore non-allow/deny entries for now                    
                </comment>
                <comment line="279">
                    map access mask                    
                </comment>
                <comment line="311">
                    map flags                    
                </comment>
                <declaration name="allow" type="boolean" line="276"/>
                <declaration name="aceMask" type="Set&lt;AclEntryPermission&gt;" line="279"/>
                <declaration name="mask" type="int" line="280"/>
                <declaration name="aceFlags" type="Set&lt;AclEntryFlag&gt;" line="311"/>
                <declaration name="flags" type="byte" line="312"/>
                <scope line="322"/>
                <scope line="324"/>
            </method>
            <javadoc line="329">
                Creates a security descriptor with a DACL representing the given ACL.                
            </javadoc>
            <method name="create" type="WindowsSecurityDescriptor" line="334">
                <params>
                    <param name="acl" type="List<AclEntry>"/>
                </params>
            </method>
            <javadoc line="338">
                Processes the array of attributes looking for the attribute &quot;acl:acl&quot;.
                  Returns security descriptor representing the ACL or the &quot;null&quot; security
                  descriptor if the attribute is not in the array.                
            </javadoc>
            <method name="fromAttribute" type="WindowsSecurityDescriptor" line="346">
                <params>
                    <param name="attrs" type="FileAttribute<?>"/>
                </params>
                <comment line="350">
                    if more than one ACL specified then last one wins                    
                </comment>
                <declaration name="sd" type="WindowsSecurityDescriptor" line="347"/>
                <scope line="348">
                    <scope line="354">
                        <declaration name="acl" type="List&lt;AclEntry&gt;" line="355"/>
                    </scope>
                    <scope line="357"/>
                </scope>
            </method>
            <javadoc line="365">
                Extracts DACL from security descriptor.                
            </javadoc>
            <method name="getAcl" type="List<AclEntry>" line="368">
                <params>
                    <param name="pSecurityDescriptor" type="long"/>
                </params>
                <comment line="370">
                    get address of DACL                    
                </comment>
                <comment line="373">
                    get ACE count                    
                </comment>
                <comment line="376">
                    no ACEs                    
                </comment>
                <comment line="384">
                    decode each of the ACEs to AclEntry objects                    
                </comment>
                <declaration name="aclAddress" type="long" line="370"/>
                <declaration name="aceCount" type="int" line="373"/>
                <scope line="374"/>
                <scope line="377">
                    <declaration name="aclInfo" type="AclInformation" line="378"/>
                </scope>
                <declaration name="result" type="ArrayList&lt;AclEntry&gt;" line="381"/>
                <scope line="384">
                    <declaration name="aceAddress" type="long" line="385"/>
                    <declaration name="entry" type="AclEntry" line="386"/>
                </scope>
            </method>
        </class>
    </source>