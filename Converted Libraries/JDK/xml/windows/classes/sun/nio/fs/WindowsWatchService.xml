<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file"/>
        <import package="java.io.IOException"/>
        <import package="java.util"/>
        <import package="com.sun.nio.file.ExtendedWatchEventModifier"/>
        <import package="sun.misc.Unsafe"/>
        <import package="sun.nio.fs.WindowsNativeDispatcher"/>
        <import package="sun.nio.fs.WindowsConstants"/>
        <class name="WindowsWatchService" line="9">
            <extends class="AbstractWatchService"/>
            <declaration name="unsafe" type="Unsafe" line="10"/>
            <declaration name="poller" type="Poller" line="11"/>
            <javadoc line="12">
                Creates an I/O completion port and a daemon thread to service it                
            </javadoc>
            <method name="WindowsWatchService" type="constructor" line="15">
                <params>
                    <param name="fs" type="WindowsFileSystem"/>
                </params>
                <declaration name="port" type="long" line="16"/>
                <scope line="17"/>
                <scope line="20"/>
            </method>
            <method name="register" type="WatchKey" line="26">
                <params>
                    <param name="path" type="Path"/>
                    <param name="events" type="WatchEvent.Kind<?>[]"/>
                    <param name="modifiers" type="WatchEvent.Modifier"/>
                </params>
            </method>
            <method name="implClose" type="void" line="29"/>
            <class name="WindowsWatchKey" line="32">
                <extends class="AbstractWatchKey"/>
                <javadoc line="32">
                    Windows implementation of WatchKey.                    
                </javadoc>
                <declaration name="fileKey" type="FileKey" line="36"/>
                <declaration name="handle" type="long" line="37"/>
                <declaration name="events" type="Set&lt;? extends WatchEvent.Kind&lt;?&gt;&gt;" line="38"/>
                <declaration name="watchSubtree" type="boolean" line="39"/>
                <declaration name="buffer" type="NativeBuffer" line="40"/>
                <declaration name="countAddress" type="long" line="41"/>
                <declaration name="overlappedAddress" type="long" line="42"/>
                <declaration name="completionKey" type="int" line="43"/>
                <method name="WindowsWatchKey" type="constructor" line="44">
                    <params>
                        <param name="dir" type="Path"/>
                        <param name="watcher" type="AbstractWatchService"/>
                        <param name="fileKey" type="FileKey"/>
                    </params>
                </method>
                <method name="init" type="WindowsWatchKey" line="48">
                    <params>
                        <param name="handle" type="long"/>
                        <param name="events" type="Set<? extends WatchEvent.Kind<?>>"/>
                        <param name="watchSubtree" type="boolean"/>
                        <param name="buffer" type="NativeBuffer"/>
                        <param name="countAddress" type="long"/>
                        <param name="overlappedAddress" type="long"/>
                        <param name="completionKey" type="int"/>
                    </params>
                </method>
                <method name="handle" type="long" line="58"/>
                <method name="events" type="Set<? extends WatchEvent.Kind<?>>" line="61"/>
                <method name="setEvents" type="void" line="64">
                    <params>
                        <param name="events" type="Set<? extends WatchEvent.Kind<?>>"/>
                    </params>
                </method>
                <method name="watchSubtree" type="boolean" line="67"/>
                <method name="buffer" type="NativeBuffer" line="70"/>
                <method name="countAddress" type="long" line="73"/>
                <method name="overlappedAddress" type="long" line="76"/>
                <method name="fileKey" type="FileKey" line="79"/>
                <method name="completionKey" type="int" line="82"/>
                <method name="releaseResources" type="void" line="85"/>
                <method name="invalidate" type="void" line="89"/>
                <method name="isValid" type="boolean" line="96"/>
                <method name="cancel" type="void" line="99">
                    <scope line="100"/>
                </method>
            </class>
            <class name="FileKey" line="105">
                <declaration name="volSerialNumber" type="int" line="106"/>
                <declaration name="fileIndexHigh" type="int" line="107"/>
                <declaration name="fileIndexLow" type="int" line="108"/>
                <method name="FileKey" type="constructor" line="109">
                    <params>
                        <param name="volSerialNumber" type="int"/>
                        <param name="fileIndexHigh" type="int"/>
                        <param name="fileIndexLow" type="int"/>
                    </params>
                </method>
                <method name="hashCode" type="int" line="114"/>
                <method name="equals" type="boolean" line="117">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="other" type="FileKey" line="120"/>
                </method>
            </class>
            <declaration name="ALL_FILE_NOTIFY_EVENTS" type="int" line="127"/>
            <class name="Poller" line="128">
                <extends class="AbstractPoller"/>
                <javadoc line="128">
                    Background thread to service I/O completion port.                    
                </javadoc>
                <declaration name="SIZEOF_DWORD" type="short" line="132"/>
                <declaration name="SIZEOF_OVERLAPPED" type="short" line="133"/>
                <declaration name="OFFSETOF_NEXTENTRYOFFSET" type="short" line="134"/>
                <declaration name="OFFSETOF_ACTION" type="short" line="135"/>
                <declaration name="OFFSETOF_FILENAMELENGTH" type="short" line="136"/>
                <declaration name="OFFSETOF_FILENAME" type="short" line="137"/>
                <declaration name="CHANGES_BUFFER_SIZE" type="int" line="138"/>
                <declaration name="fs" type="WindowsFileSystem" line="139"/>
                <declaration name="watcher" type="WindowsWatchService" line="140"/>
                <declaration name="port" type="long" line="141"/>
                <declaration name="int2key" type="Map&lt;Integer,WindowsWatchKey&gt;" line="142"/>
                <declaration name="fk2key" type="Map&lt;FileKey,WindowsWatchKey&gt;" line="143"/>
                <declaration name="lastCompletionKey" type="int" line="144"/>
                <method name="Poller" type="constructor" line="145">
                    <params>
                        <param name="fs" type="WindowsFileSystem"/>
                        <param name="watcher" type="WindowsWatchService"/>
                        <param name="port" type="long"/>
                    </params>
                </method>
                <method name="wakeup" type="void" line="153">
                    <scope line="154"/>
                    <scope line="157"/>
                </method>
                <javadoc line="161">
                    Register a directory for changes as follows:
                      1. Open directory
                      2. Read its attributes (and check it really is a directory)
                      3. Assign completion key and associated handle with completion port
                      4. Call ReadDirectoryChangesW to start (async) read of changes
                      5. Create or return existing key representing registration                    
                </javadoc>
                <method name="implRegister" type="Object" line="169">
                    <params>
                        <param name="obj" type="Path"/>
                        <param name="events" type="Set<? extends WatchEvent.Kind<?>>"/>
                        <param name="modifiers" type="WatchEvent.Modifier"/>
                    </params>
                    <declaration name="dir" type="WindowsPath" line="170"/>
                    <declaration name="watchSubtree" type="boolean" line="171"/>
                    <scope line="172">
                        <scope line="173"/>
                        <scope line="177"/>
                    </scope>
                    <declaration name="handle" type="long" line="183"/>
                    <scope line="184"/>
                    <scope line="187"/>
                    <declaration name="registered" type="boolean" line="190"/>
                    <scope line="191">
                        <declaration name="attrs" type="WindowsFileAttributes" line="192"/>
                        <scope line="193"/>
                        <scope line="196"/>
                        <scope line="199"/>
                        <declaration name="fk" type="FileKey" line="202"/>
                        <declaration name="existing" type="WindowsWatchKey" line="203"/>
                        <scope line="204"/>
                        <declaration name="completionKey" type="int" line="208"/>
                        <scope line="210"/>
                        <scope line="213"/>
                        <declaration name="size" type="int" line="216"/>
                        <declaration name="buffer" type="NativeBuffer" line="217"/>
                        <declaration name="bufferAddress" type="long" line="218"/>
                        <declaration name="overlappedAddress" type="long" line="219"/>
                        <declaration name="countAddress" type="long" line="220"/>
                        <scope line="221"/>
                        <scope line="224"/>
                        <declaration name="watchKey" type="WindowsWatchKey" line="228"/>
                        <scope line="229"/>
                        <scope line="233"/>
                    </scope>
                    <scope line="242"/>
                </method>
                <method name="implCancelKey" type="void" line="246">
                    <params>
                        <param name="obj" type="WatchKey"/>
                    </params>
                    <declaration name="key" type="WindowsWatchKey" line="247"/>
                    <scope line="248"/>
                </method>
                <method name="implCloseAll" type="void" line="254">
                    <scope line="255"/>
                </method>
                <method name="translateActionToEvent" type="WatchEvent.Kind<?>" line="262">
                    <params>
                        <param name="action" type="int"/>
                    </params>
                </method>
                <method name="processEvents" type="void" line="276">
                    <params>
                        <param name="key" type="WindowsWatchKey"/>
                        <param name="size" type="int"/>
                    </params>
                    <declaration name="address" type="long" line="277"/>
                    <declaration name="nextOffset" type="int" line="278"/>
                    <scope line="279">
                        <declaration name="action" type="int" line="280"/>
                        <declaration name="kind" type="WatchEvent.Kind&lt;?&gt;" line="281"/>
                        <scope line="282">
                            <declaration name="nameLengthInBytes" type="int" line="283"/>
                            <scope line="284"/>
                            <declaration name="nameAsArray" type="char[]" line="287"/>
                            <declaration name="name" type="WindowsPath" line="289"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="297">
                    Poller main loop                    
                </javadoc>
                <method name="run" type="void" line="300">
                    <scope line="301">
                        <declaration name="info" type="CompletionStatus" line="302"/>
                        <scope line="303"/>
                        <scope line="306"/>
                        <scope line="310">
                            <declaration name="shutdown" type="boolean" line="311"/>
                            <scope line="312"/>
                        </scope>
                        <declaration name="key" type="WindowsWatchKey" line="317"/>
                        <scope line="318"/>
                        <scope line="321">
                            <scope line="322"/>
                            <scope line="325"/>
                        </scope>
                        <scope line="331"/>
                        <scope line="334"/>
                        <scope line="337"/>
                        <scope line="340"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>