<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file"/>
        <import package="java.nio.file.StandardOpenOption"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.channels.FileChannel"/>
        <import package="java.io.IOException"/>
        <import package="java.util"/>
        <import package="sun.misc.Unsafe"/>
        <import package="sun.nio.fs.WindowsNativeDispatcher"/>
        <import package="sun.nio.fs.WindowsConstants"/>
        <class name="WindowsUserDefinedFileAttributeView" line="39">
            <extends class="AbstractUserDefinedFileAttributeView"/>
            <comment line="49">
                syntax to address named streams                
            </comment>
            <comment line="67">
                enumerates the file streams using FindFirstStream/FindNextStream APIs.                
            </comment>
            <comment line="95">
                enumerates the file streams by reading the stream headers using
                 BackupRead                
            </comment>
            <javadoc line="39">
                Windows emulation of NamedAttributeView using Alternative Data Streams                
            </javadoc>
            <declaration name="unsafe" type="Unsafe" line="46"/>
            <method name="join" type="String" line="49">
                <params>
                    <param name="file" type="String"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="join" type="String" line="54">
                <params>
                    <param name="file" type="WindowsPath"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <declaration name="file" type="WindowsPath" line="58"/>
            <declaration name="followLinks" type="boolean" line="59"/>
            <method name="WindowsUserDefinedFileAttributeView" type="constructor" line="61">
                <params>
                    <param name="file" type="WindowsPath"/>
                    <param name="followLinks" type="boolean"/>
                </params>
            </method>
            <method name="listUsingStreamEnumeration" type="List<String>" line="67">
                <comment line="75">
                    first stream is always ::$DATA for files                    
                </comment>
                <declaration name="list" type="List&lt;String&gt;" line="68"/>
                <scope line="69">
                    <declaration name="first" type="FirstStream" line="70"/>
                    <scope line="71">
                        <declaration name="handle" type="long" line="72"/>
                        <scope line="73">
                            <declaration name="name" type="String" line="75"/>
                            <scope line="76">
                                <declaration name="segs" type="String[]" line="77"/>
                            </scope>
                            <scope line="80">
                                <declaration name="segs" type="String[]" line="81"/>
                            </scope>
                        </scope>
                        <scope line="84"/>
                    </scope>
                </scope>
                <scope line="88"/>
            </method>
            <method name="listUsingBackupRead" type="List<String>" line="96">
                <comment line="106">
                    no write as we depend on file size                    
                </comment>
                <comment line="113">
                    buffer to read stream header and stream name.                    
                </comment>
                <comment line="117">
                    result with names of alternative data streams                    
                </comment>
                <comment line="124">
                    typedef struct _WIN32_STREAM_ID {
                         DWORD dwStreamId;
                         DWORD dwStreamAttributes;
                         LARGE_INTEGER Size;
                         DWORD dwStreamNameSize;
                         WCHAR cStreamName[ANYSIZE_ARRAY];
                     } WIN32_STREAM_ID;                    
                </comment>
                <comment line="141">
                    read stream header                    
                </comment>
                <comment line="152">
                    read stream name                    
                </comment>
                <comment line="159">
                    check for alternative data stream                    
                </comment>
                <comment line="170">
                    sparse blocks not currently handled as documentation
                     is not sufficient on how the spase block can be skipped.                    
                </comment>
                <comment line="176">
                    seek to end of stream                    
                </comment>
                <comment line="182">
                    failed to read or seek                    
                </comment>
                <comment line="185">
                    release context                    
                </comment>
                <declaration name="handle" type="long" line="97"/>
                <scope line="98">
                    <declaration name="flags" type="int" line="99"/>
                </scope>
                <scope line="108"/>
                <declaration name="BUFFER_SIZE" type="int" line="113"/>
                <declaration name="buffer" type="NativeBuffer" line="114"/>
                <declaration name="list" type="List&lt;String&gt;" line="117"/>
                <scope line="119">
                    <declaration name="address" type="long" line="121"/>
                    <declaration name="SIZEOF_STREAM_HEADER" type="int" line="123"/>
                    <declaration name="OFFSETOF_STREAM_ID" type="int" line="133"/>
                    <declaration name="OFFSETOF_STREAM_SIZE" type="int" line="134"/>
                    <declaration name="OFFSETOF_STREAM_NAME_SIZE" type="int" line="135"/>
                    <declaration name="context" type="long" line="137"/>
                    <scope line="138">
                        <scope line="139">
                            <declaration name="result" type="BackupResult" line="141"/>
                            <declaration name="streamId" type="int" line="147"/>
                            <declaration name="streamSize" type="long" line="148"/>
                            <declaration name="nameSize" type="int" line="149"/>
                            <scope line="152"/>
                            <scope line="159">
                                <declaration name="nameAsArray" type="char[]" line="160"/>
                                <declaration name="segs" type="String[]" line="164"/>
                            </scope>
                            <scope line="171"/>
                            <scope line="176"/>
                        </scope>
                    </scope>
                    <scope line="180"/>
                    <scope line="183">
                        <scope line="185">
                            <scope line="186"/>
                            <scope line="188"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="191"/>
            </method>
            <method name="list" type="List<String>" line="200">
                <comment line="204">
                    use stream APIs on Windwos Server 2003 and newer                    
                </comment>
                <scope line="204"/>
                <scope line="206"/>
            </method>
            <method name="size" type="int" line="212">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="217">
                    wrap with channel                    
                </comment>
                <declaration name="fc" type="FileChannel" line="217"/>
                <scope line="218">
                    <declaration name="opts" type="Set&lt;OpenOption&gt;" line="219"/>
                </scope>
                <scope line="225"/>
                <scope line="228">
                    <declaration name="size" type="long" line="229"/>
                </scope>
                <scope line="233"/>
            </method>
            <method name="read" type="int" line="239">
                <params>
                    <param name="name" type="String"/>
                    <param name="dst" type="ByteBuffer"/>
                </params>
                <comment line="244">
                    wrap with channel                    
                </comment>
                <comment line="257">
                    read to EOF (nothing we can do if I/O error occurs)                    
                </comment>
                <declaration name="fc" type="FileChannel" line="244"/>
                <scope line="245">
                    <declaration name="opts" type="Set&lt;OpenOption&gt;" line="246"/>
                </scope>
                <scope line="252"/>
                <scope line="257">
                    <declaration name="total" type="int" line="260"/>
                    <scope line="261">
                        <declaration name="n" type="int" line="262"/>
                    </scope>
                </scope>
                <scope line="268"/>
            </method>
            <method name="write" type="int" line="274">
                <params>
                    <param name="name" type="String"/>
                    <param name="src" type="ByteBuffer"/>
                </params>
                <comment line="279">
                    Creating a named stream will cause the unnamed stream to be created
                     if it doesn&apos;t already exist. To avoid this we open the unnamed stream
                     for reading and hope it isn&apos;t deletedmoved while we create or
                     replace the named stream. Opening the file without sharing options
                     may cause sharing violations with other programs that are accessing
                     the unnamed stream.                    
                </comment>
                <comment line="315">
                    write value (nothing we can do if I/O error occurs)                    
                </comment>
                <declaration name="handle" type="long" line="286"/>
                <scope line="287">
                    <declaration name="flags" type="int" line="288"/>
                </scope>
                <scope line="297"/>
                <scope line="300">
                    <declaration name="opts" type="Set&lt;OpenOption&gt;" line="301"/>
                    <declaration name="named" type="FileChannel" line="307"/>
                    <scope line="308"/>
                    <scope line="311"/>
                    <scope line="315">
                        <declaration name="rem" type="int" line="316"/>
                        <scope line="317"/>
                    </scope>
                    <scope line="321"/>
                </scope>
                <scope line="324"/>
            </method>
            <method name="delete" type="void" line="330">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="path" type="String" line="334"/>
                <declaration name="toDelete" type="String" line="335"/>
                <scope line="336"/>
                <scope line="338"/>
            </method>
        </class>
    </source>