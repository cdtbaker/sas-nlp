<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file"/>
        <import package="java.io.IOException"/>
        <import package="java.io.IOError"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="sun.misc.Unsafe"/>
        <import package="sun.nio.fs.WindowsNativeDispatcher"/>
        <import package="sun.nio.fs.WindowsConstants"/>
        <class name="WindowsLinkSupport" line="38">
            <javadoc line="38">
                Utility methods for symbolic link support on Windows Vista and newer.                
            </javadoc>
            <declaration name="unsafe" type="Unsafe" line="43"/>
            <method name="WindowsLinkSupport" type="constructor" line="45"/>
            <javadoc line="48">
                Returns the target of a symbolic link                
            </javadoc>
            <method name="readLink" type="String" line="51">
                <params>
                    <param name="path" type="WindowsPath"/>
                </params>
                <comment line="55">
                    don&apos;t follow links                    
                </comment>
                <declaration name="handle" type="long" line="52"/>
                <scope line="53"/>
                <scope line="55"/>
                <scope line="58"/>
                <scope line="60"/>
            </method>
            <javadoc line="65">
                Returns the final path (all symbolic links resolved) or null if this
                  operation is not supported.                
            </javadoc>
            <method name="getFinalPath" type="String" line="69">
                <params>
                    <param name="input" type="WindowsPath"/>
                </params>
                <comment line="80">
                    ERROR_INVALID_LEVEL is the error returned when not supported
                     (a sym link to file on FAT32 or Samba server for example)                    
                </comment>
                <declaration name="h" type="long" line="70"/>
                <scope line="71"/>
                <scope line="73"/>
                <scope line="76"/>
                <scope line="78"/>
                <scope line="83"/>
            </method>
            <javadoc line="89">
                Returns the final path of a given path as a String. This should be used
                  prior to calling Win32 system calls that do not follow links.                
            </javadoc>
            <method name="getFinalPath" type="String" line="95">
                <params>
                    <param name="input" type="WindowsPath"/>
                    <param name="followLinks" type="boolean"/>
                </params>
                <comment line="99">
                    if not following links then don&apos;t need final path                    
                </comment>
                <comment line="103">
                    if file is not a sym link then don&apos;t need final path                    
                </comment>
                <comment line="111">
                    The file is a symbolic link so attempt to get the final path                    
                </comment>
                <comment line="116">
                    Fallback: read target of link, resolve against parent, and repeat
                     until file is not a link.                    
                </comment>
                <comment line="124">
                    non a link so we are done                    
                </comment>
                <comment line="135">
                    no parent so use parent of absolute path                    
                </comment>
                <declaration name="fs" type="WindowsFileSystem" line="96"/>
                <scope line="97">
                    <scope line="103"/>
                </scope>
                <scope line="106"/>
                <declaration name="result" type="String" line="111"/>
                <declaration name="target" type="WindowsPath" line="117"/>
                <declaration name="linkCount" type="int" line="118"/>
                <scope line="119">
                    <scope line="120">
                        <declaration name="attrs" type="WindowsFileAttributes" line="121"/>
                        <scope line="124"/>
                    </scope>
                    <scope line="127"/>
                    <declaration name="link" type="WindowsPath" line="130"/>
                    <declaration name="parent" type="WindowsPath" line="132"/>
                    <scope line="133">
                        <declaration name="t" type="WindowsPath" line="135"/>
                        <anonymous_class line="137">
                            <method name="run" type="WindowsPath" line="139"/>
                        </anonymous_class>
                    </scope>
                </scope>
            </method>
            <javadoc line="152">
                Returns the actual path of a file, optionally resolving all symbolic
                  links.                
            </javadoc>
            <method name="getRealPath" type="String" line="158">
                <params>
                    <param name="input" type="WindowsPath"/>
                    <param name="resolveLinks" type="boolean"/>
                </params>
                <comment line="164">
                    Start with absolute path                    
                </comment>
                <comment line="172">
                    Collapse &quot;.&quot; and &quot;..&quot;                    
                </comment>
                <comment line="181">
                    string builder to build up components of path                    
                </comment>
                <comment line="184">
                    Copy root component                    
                </comment>
                <comment line="190">
                    Driver specifier                    
                </comment>
                <comment line="195">
                    UNC pathname, begins with &quot;\\\\host\\share&quot;                    
                </comment>
                <comment line="198">
                    skip both server and share names                    
                </comment>
                <comment line="200">
                    The UNC does not have a share name (collapsed by GetFullPathName)                    
                </comment>
                <comment line="216">
                    if the result is only a root component then we simply check it exists                    
                </comment>
                <comment line="227">
                    iterate through each component to get its actual name in the
                     directory                    
                </comment>
                <comment line="238">
                    if a reparse point is encountered then we must return the
                     final path.                    
                </comment>
                <comment line="245">
                    Fallback to slow path, usually because there is a sym
                     link to a file system that doesn&apos;t support sym links.                    
                </comment>
                <comment line="254">
                    add the name to the result                    
                </comment>
                <declaration name="fs" type="WindowsFileSystem" line="159"/>
                <declaration name="path" type="String" line="164"/>
                <scope line="165"/>
                <scope line="167"/>
                <scope line="172">
                    <scope line="173"/>
                    <scope line="175"/>
                </scope>
                <declaration name="sb" type="StringBuilder" line="181"/>
                <declaration name="start" type="int" line="184"/>
                <declaration name="c0" type="char" line="185"/>
                <declaration name="c1" type="char" line="186"/>
                <scope line="188"/>
                <scope line="193">
                    <declaration name="last" type="int" line="195"/>
                    <declaration name="pos" type="int" line="196"/>
                    <scope line="198"/>
                    <scope line="204"/>
                    <scope line="207"/>
                </scope>
                <scope line="211"/>
                <scope line="216">
                    <declaration name="result" type="String" line="217"/>
                    <scope line="218"/>
                    <scope line="220"/>
                </scope>
                <declaration name="curr" type="int" line="228"/>
                <scope line="229">
                    <declaration name="next" type="int" line="230"/>
                    <declaration name="end" type="int" line="231"/>
                    <declaration name="search" type="String" line="232"/>
                    <scope line="233">
                        <declaration name="fileData" type="FirstFile" line="234"/>
                        <scope line="241">
                            <declaration name="result" type="String" line="242"/>
                            <scope line="243">
                                <declaration name="resolved" type="WindowsPath" line="246"/>
                            </scope>
                        </scope>
                        <scope line="255"/>
                    </scope>
                    <scope line="258"/>
                </scope>
            </method>
            <javadoc line="267">
                Returns target of a symbolic link given the handle of an open file
                  (that should be a link).                
            </javadoc>
            <method name="readLinkImpl" type="String" line="271">
                <params>
                    <param name="handle" type="long"/>
                </params>
                <comment line="279">
                    FIXME: exception doesn&apos;t have file name                    
                </comment>
                <comment line="285">
                    typedef struct _REPARSE_DATA_BUFFER {
                         ULONG  ReparseTag;
                         USHORT  ReparseDataLength;
                         USHORT  Reserved;
                         union {
                             struct {
                                 USHORT  SubstituteNameOffset;
                                 USHORT  SubstituteNameLength;
                                 USHORT  PrintNameOffset;
                                 USHORT  PrintNameLength;
                                 WCHAR  PathBuffer[1];
                             } SymbolicLinkReparseBuffer;
                             struct {
                                 USHORT  SubstituteNameOffset;
                                 USHORT  SubstituteNameLength;
                                 USHORT  PrintNameOffset;
                                 USHORT  PrintNameLength;
                                 WCHAR  PathBuffer[1];
                             } MountPointReparseBuffer;
                             struct {
                                 UCHAR  DataBuffer[1];
                             } GenericReparseBuffer;
                         };
                     } REPARSE_DATA_BUFFER                    
                </comment>
                <comment line="314">
                    check this                    
                </comment>
                <comment line="318">
                    FIXME: exception doesn&apos;t have file name                    
                </comment>
                <comment line="322">
                    get offset and length of target                    
                </comment>
                <comment line="328">
                    copy into char array                    
                </comment>
                <comment line="333">
                    remove special prefix                    
                </comment>
                <declaration name="size" type="int" line="272"/>
                <declaration name="buffer" type="NativeBuffer" line="273"/>
                <scope line="274">
                    <scope line="275"/>
                    <scope line="277"/>
                    <declaration name="OFFSETOF_REPARSETAG" type="short" line="310"/>
                    <declaration name="OFFSETOF_PATHOFFSET" type="short" line="311"/>
                    <declaration name="OFFSETOF_PATHLENGTH" type="short" line="312"/>
                    <declaration name="OFFSETOF_PATHBUFFER" type="short" line="313"/>
                    <declaration name="tag" type="int" line="315"/>
                    <scope line="316"/>
                    <declaration name="nameOffset" type="short" line="322"/>
                    <declaration name="nameLengthInBytes" type="short" line="323"/>
                    <declaration name="name" type="char[]" line="328"/>
                    <declaration name="target" type="String" line="333"/>
                    <scope line="334"/>
                </scope>
                <scope line="338"/>
            </method>
            <javadoc line="343">
                Resolve all symbolic-links in a given absolute and normalized path                
            </javadoc>
            <method name="resolveAllLinks" type="WindowsPath" line="348">
                <params>
                    <param name="path" type="WindowsPath"/>
                </params>
                <comment line="353">
                    iterate through each name element of the path, resolving links as
                     we go.                    
                </comment>
                <comment line="367">
                    If a symbolic link then we resolve it against the parent
                     of the current name element. We then resolve any remaining
                     part of the path against the result. The target of the link
                     may have &quot;.&quot; and &quot;..&quot; components so re-normalize and restart
                     the process from the first element.                    
                </comment>
                <comment line="398">
                    reset                    
                </comment>
                <comment line="401">
                    not a link                    
                </comment>
                <declaration name="fs" type="WindowsFileSystem" line="350"/>
                <declaration name="linkCount" type="int" line="354"/>
                <declaration name="elem" type="int" line="355"/>
                <scope line="356">
                    <declaration name="current" type="WindowsPath" line="357"/>
                    <declaration name="attrs" type="WindowsFileAttributes" line="359"/>
                    <scope line="360"/>
                    <scope line="362"/>
                    <scope line="373">
                        <declaration name="target" type="WindowsPath" line="377"/>
                        <declaration name="remainder" type="WindowsPath" line="379"/>
                        <declaration name="count" type="int" line="380"/>
                        <scope line="381"/>
                        <scope line="385">
                            <declaration name="full" type="String" line="386"/>
                            <scope line="387"/>
                        </scope>
                        <scope line="390"/>
                        <scope line="393"/>
                    </scope>
                    <scope line="399"/>
                </scope>
            </method>
            <javadoc line="408">
                Add long path prefix to path if required.                
            </javadoc>
            <method name="addLongPathPrefixIfNeeded" type="String" line="411">
                <params>
                    <param name="path" type="String"/>
                </params>
                <scope line="412">
                    <scope line="413"/>
                    <scope line="415"/>
                </scope>
            </method>
            <javadoc line="422">
                Strip long path or symbolic link prefix from path                
            </javadoc>
            <method name="stripPrefix" type="String" line="425">
                <params>
                    <param name="path" type="String"/>
                </params>
                <comment line="427">
                    prefix for resolved/long path                    
                </comment>
                <comment line="437">
                    prefix for target of symbolic link                    
                </comment>
                <scope line="427">
                    <scope line="428"/>
                    <scope line="430"/>
                </scope>
                <scope line="437">
                    <scope line="438"/>
                    <scope line="440"/>
                </scope>
            </method>
        </class>
    </source>