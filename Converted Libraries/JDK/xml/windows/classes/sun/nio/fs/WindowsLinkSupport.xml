<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file"/>
        <import package="java.io.IOException"/>
        <import package="java.io.IOError"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="sun.misc.Unsafe"/>
        <import package="sun.nio.fs.WindowsNativeDispatcher"/>
        <import package="sun.nio.fs.WindowsConstants"/>
        <class name="WindowsLinkSupport" line="10">
            <javadoc line="10">
                Utility methods for symbolic link support on Windows Vista and newer.                
            </javadoc>
            <declaration name="unsafe" type="Unsafe" line="14"/>
            <method name="WindowsLinkSupport" type="constructor" line="15"/>
            <javadoc line="17">
                Returns the target of a symbolic link                
            </javadoc>
            <method name="readLink" type="String" line="20">
                <params>
                    <param name="path" type="WindowsPath"/>
                </params>
                <declaration name="handle" type="long" line="21"/>
                <scope line="22"/>
                <scope line="25"/>
                <scope line="28"/>
                <scope line="31"/>
            </method>
            <javadoc line="35">
                Returns the final path (all symbolic links resolved) or null if this
                  operation is not supported.                
            </javadoc>
            <method name="getFinalPath" type="String" line="39">
                <params>
                    <param name="input" type="WindowsPath"/>
                </params>
                <declaration name="h" type="long" line="40"/>
                <scope line="41"/>
                <scope line="44"/>
                <scope line="47"/>
                <scope line="50"/>
                <scope line="53"/>
            </method>
            <javadoc line="58">
                Returns the final path of a given path as a String. This should be used
                  prior to calling Win32 system calls that do not follow links.                
            </javadoc>
            <method name="getFinalPath" type="String" line="62">
                <params>
                    <param name="input" type="WindowsPath"/>
                    <param name="followLinks" type="boolean"/>
                </params>
                <declaration name="fs" type="WindowsFileSystem" line="63"/>
                <scope line="64">
                    <scope line="66"/>
                </scope>
                <scope line="70"/>
                <declaration name="result" type="String" line="73"/>
                <declaration name="target" type="WindowsPath" line="75"/>
                <declaration name="linkCount" type="int" line="76"/>
                <scope line="77">
                    <scope line="78">
                        <declaration name="attrs" type="WindowsFileAttributes" line="79"/>
                        <scope line="80"/>
                    </scope>
                    <scope line="84"/>
                    <declaration name="link" type="WindowsPath" line="87"/>
                    <declaration name="parent" type="WindowsPath" line="88"/>
                    <scope line="89">
                        <declaration name="t" type="WindowsPath" line="90"/>
                        <anonymous_class line="91">
                            <method name="run" type="WindowsPath" line="92"/>
                        </anonymous_class>
                    </scope>
                </scope>
            </method>
            <javadoc line="104">
                Returns the actual path of a file, optionally resolving all symbolic
                  links.                
            </javadoc>
            <method name="getRealPath" type="String" line="108">
                <params>
                    <param name="input" type="WindowsPath"/>
                    <param name="resolveLinks" type="boolean"/>
                </params>
                <declaration name="fs" type="WindowsFileSystem" line="109"/>
                <declaration name="path" type="String" line="111"/>
                <scope line="112"/>
                <scope line="115"/>
                <scope line="118">
                    <scope line="119"/>
                    <scope line="122"/>
                </scope>
                <declaration name="sb" type="StringBuilder" line="126"/>
                <declaration name="start" type="int" line="127"/>
                <declaration name="c0" type="char" line="128"/>
                <declaration name="c1" type="char" line="129"/>
                <scope line="130"/>
                <scope line="135">
                    <declaration name="last" type="int" line="136"/>
                    <declaration name="pos" type="int" line="137"/>
                    <scope line="138"/>
                    <scope line="142"/>
                    <scope line="146"/>
                </scope>
                <scope line="151"/>
                <scope line="154">
                    <declaration name="result" type="String" line="155"/>
                    <scope line="156"/>
                    <scope line="159"/>
                </scope>
                <declaration name="curr" type="int" line="164"/>
                <scope line="165">
                    <declaration name="next" type="int" line="166"/>
                    <declaration name="end" type="int" line="167"/>
                    <declaration name="search" type="String" line="168"/>
                    <scope line="169">
                        <declaration name="fileData" type="FirstFile" line="170"/>
                        <scope line="172">
                            <declaration name="result" type="String" line="173"/>
                            <scope line="174">
                                <declaration name="resolved" type="WindowsPath" line="175"/>
                            </scope>
                        </scope>
                        <scope line="181"/>
                    </scope>
                    <scope line="185"/>
                </scope>
            </method>
            <javadoc line="192">
                Returns target of a symbolic link given the handle of an open file
                  (that should be a link).                
            </javadoc>
            <method name="readLinkImpl" type="String" line="196">
                <params>
                    <param name="handle" type="long"/>
                </params>
                <declaration name="size" type="int" line="197"/>
                <declaration name="buffer" type="NativeBuffer" line="198"/>
                <scope line="199">
                    <scope line="200"/>
                    <scope line="203"/>
                    <declaration name="OFFSETOF_REPARSETAG" type="short" line="207"/>
                    <declaration name="OFFSETOF_PATHOFFSET" type="short" line="208"/>
                    <declaration name="OFFSETOF_PATHLENGTH" type="short" line="209"/>
                    <declaration name="OFFSETOF_PATHBUFFER" type="short" line="210"/>
                    <declaration name="tag" type="int" line="211"/>
                    <scope line="212"/>
                    <declaration name="nameOffset" type="short" line="215"/>
                    <declaration name="nameLengthInBytes" type="short" line="216"/>
                    <declaration name="name" type="char[]" line="218"/>
                    <declaration name="target" type="String" line="220"/>
                    <scope line="221"/>
                </scope>
                <scope line="226"/>
            </method>
            <javadoc line="230">
                Resolve all symbolic-links in a given absolute and normalized path                
            </javadoc>
            <method name="resolveAllLinks" type="WindowsPath" line="233">
                <params>
                    <param name="path" type="WindowsPath"/>
                </params>
            </method>
            <javadoc line="277">
                Add long path prefix to path if required.                
            </javadoc>
            <method name="addLongPathPrefixIfNeeded" type="String" line="280">
                <params>
                    <param name="path" type="String"/>
                </params>
                <scope line="281">
                    <scope line="282"/>
                    <scope line="285"/>
                </scope>
            </method>
            <javadoc line="291">
                Strip long path or symbolic link prefix from path                
            </javadoc>
            <method name="stripPrefix" type="String" line="294">
                <params>
                    <param name="path" type="String"/>
                </params>
                <scope line="295">
                    <scope line="296"/>
                    <scope line="299"/>
                </scope>
                <scope line="304">
                    <scope line="305"/>
                    <scope line="308"/>
                </scope>
            </method>
        </class>
    </source>