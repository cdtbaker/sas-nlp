<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="sun.misc.Unsafe"/>
        <class name="WindowsNativeDispatcher" line="32">
            <comment line="253">
                FindNextStreamW(
                   HANDLE hFindStream,
                   LPVOID lpFindStreamData
                 )                
            </comment>
            <comment line="1098">
                -- support for copying String with a NativeBuffer --                
            </comment>
            <comment line="1125">
                -- native library initialization --                
            </comment>
            <javadoc line="32">
                Win32 and library calls.                
            </javadoc>
            <method name="WindowsNativeDispatcher" type="constructor" line="37"/>
            <javadoc line="39">
                HANDLE CreateFile(
                  LPCTSTR lpFileName,
                  DWORD dwDesiredAccess,
                  DWORD dwShareMode,
                  LPSECURITY_ATTRIBUTES lpSecurityAttributes,
                  DWORD dwCreationDisposition,
                  DWORD dwFlagsAndAttributes,
                  HANDLE hTemplateFile
                  )                
            </javadoc>
            <method name="CreateFile" type="long" line="57">
                <params>
                    <param name="path" type="String"/>
                    <param name="dwDesiredAccess" type="int"/>
                    <param name="dwShareMode" type="int"/>
                    <param name="lpSecurityAttributes" type="long"/>
                    <param name="dwCreationDisposition" type="int"/>
                    <param name="dwFlagsAndAttributes" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="58"/>
                <scope line="59"/>
                <scope line="66"/>
            </method>
            <method name="CreateFile" type="long" line="76">
                <params>
                    <param name="path" type="String"/>
                    <param name="dwDesiredAccess" type="int"/>
                    <param name="dwShareMode" type="int"/>
                    <param name="dwCreationDisposition" type="int"/>
                    <param name="dwFlagsAndAttributes" type="int"/>
                </params>
            </method>
            <method name="CreateFile0" type="long" line="80"/>
            <method name="CloseHandle" type="void" line="88"/>
            <javadoc line="88">
                CloseHandle(
                  HANDLE hObject
                  )                
            </javadoc>
            <javadoc line="95">
                DeleteFile(
                  LPCTSTR lpFileName
                  )                
            </javadoc>
            <method name="DeleteFile" type="void" line="100">
                <params>
                    <param name="path" type="String"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="101"/>
                <scope line="102"/>
                <scope line="104"/>
            </method>
            <method name="DeleteFile0" type="void" line="108"/>
            <javadoc line="111">
                CreateDirectory(
                  LPCTSTR lpPathName,
                  LPSECURITY_ATTRIBUTES lpSecurityAttributes
                  )                
            </javadoc>
            <method name="CreateDirectory" type="void" line="117">
                <params>
                    <param name="path" type="String"/>
                    <param name="lpSecurityAttributes" type="long"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="118"/>
                <scope line="119"/>
                <scope line="121"/>
            </method>
            <method name="CreateDirectory0" type="void" line="125"/>
            <javadoc line="128">
                RemoveDirectory(
                  LPCTSTR lpPathName
                  )                
            </javadoc>
            <method name="RemoveDirectory" type="void" line="133">
                <params>
                    <param name="path" type="String"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="134"/>
                <scope line="135"/>
                <scope line="137"/>
            </method>
            <method name="RemoveDirectory0" type="void" line="141"/>
            <method name="DeviceIoControlSetSparse" type="void" line="144"/>
            <javadoc line="144">
                Marks a file as a sparse file.
                  DeviceIoControl(
                  FSCTL_SET_SPARSE
                  )                
            </javadoc>
            <method name="DeviceIoControlGetReparsePoint" type="void" line="154"/>
            <javadoc line="154">
                Retrieves the reparse point data associated with the file or directory.
                  DeviceIoControl(
                  FSCTL_GET_REPARSE_POINT
                  )                
            </javadoc>
            <javadoc line="164">
                HANDLE FindFirstFile(
                  LPCTSTR lpFileName,
                  LPWIN32_FIND_DATA lpFindFileData
                  )                
            </javadoc>
            <method name="FindFirstFile" type="FirstFile" line="170">
                <params>
                    <param name="path" type="String"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="171"/>
                <scope line="172">
                    <declaration name="data" type="FirstFile" line="173"/>
                </scope>
                <scope line="176"/>
            </method>
            <class name="FirstFile" line="180">
                <declaration name="handle" type="long" line="181"/>
                <declaration name="name" type="String" line="182"/>
                <declaration name="attributes" type="int" line="183"/>
                <method name="FirstFile" type="constructor" line="185"/>
                <method name="handle" type="long" line="186"/>
                <method name="name" type="String" line="187"/>
                <method name="attributes" type="int" line="188"/>
            </class>
            <method name="FindFirstFile0" type="void" line="190"/>
            <javadoc line="193">
                HANDLE FindFirstFile(
                  LPCTSTR lpFileName,
                  LPWIN32_FIND_DATA lpFindFileData
                  )                
            </javadoc>
            <method name="FindFirstFile" type="long" line="199">
                <params>
                    <param name="path" type="String"/>
                    <param name="address" type="long"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="200"/>
                <scope line="201"/>
                <scope line="203"/>
            </method>
            <method name="FindFirstFile1" type="long" line="207"/>
            <method name="FindNextFile" type="String" line="210"/>
            <javadoc line="210">
                FindNextFile(
                  HANDLE hFindFile,
                  LPWIN32_FIND_DATA lpFindFileData
                  )                
                <return>
                    lpFindFileData-&gt;cFileName or null                    
                </return>
            </javadoc>
            <javadoc line="221">
                HANDLE FindFirstStreamW(
                  LPCWSTR lpFileName,
                  STREAM_INFO_LEVELS InfoLevel,
                  LPVOID lpFindStreamData,
                  DWORD dwFlags
                  )                
            </javadoc>
            <method name="FindFirstStream" type="FirstStream" line="229">
                <params>
                    <param name="path" type="String"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="230"/>
                <scope line="231">
                    <declaration name="data" type="FirstStream" line="232"/>
                </scope>
                <scope line="237"/>
            </method>
            <class name="FirstStream" line="241">
                <declaration name="handle" type="long" line="242"/>
                <declaration name="name" type="String" line="243"/>
                <method name="FirstStream" type="constructor" line="245"/>
                <method name="handle" type="long" line="246"/>
                <method name="name" type="String" line="247"/>
            </class>
            <method name="FindFirstStream0" type="void" line="249"/>
            <method name="FindNextStream" type="String" line="258"/>
            <method name="FindClose" type="void" line="260"/>
            <javadoc line="260">
                FindClose(
                  HANDLE hFindFile
                  )                
            </javadoc>
            <method name="GetFileInformationByHandle" type="void" line="267"/>
            <javadoc line="267">
                GetFileInformationByHandle(
                  HANDLE hFile,
                  LPBY_HANDLE_FILE_INFORMATION lpFileInformation
                  )                
            </javadoc>
            <javadoc line="276">
                CopyFileEx(
                  LPCWSTR lpExistingFileName
                  LPCWSTR lpNewFileName,
                  LPPROGRESS_ROUTINE lpProgressRoutine
                  LPVOID lpData,
                  LPBOOL pbCancel,
                  DWORD dwCopyFlags
                  )                
            </javadoc>
            <method name="CopyFileEx" type="void" line="289">
                <params>
                    <param name="source" type="String"/>
                    <param name="target" type="String"/>
                    <param name="flags" type="int"/>
                    <param name="addressToPollForCancel" type="long"/>
                </params>
                <declaration name="sourceBuffer" type="NativeBuffer" line="290"/>
                <declaration name="targetBuffer" type="NativeBuffer" line="291"/>
                <scope line="292"/>
                <scope line="295"/>
            </method>
            <method name="CopyFileEx0" type="void" line="300"/>
            <javadoc line="303">
                MoveFileEx(
                  LPCTSTR lpExistingFileName,
                  LPCTSTR lpNewFileName,
                  DWORD dwFlags
                  )                
            </javadoc>
            <method name="MoveFileEx" type="void" line="312">
                <params>
                    <param name="source" type="String"/>
                    <param name="target" type="String"/>
                    <param name="flags" type="int"/>
                </params>
                <declaration name="sourceBuffer" type="NativeBuffer" line="313"/>
                <declaration name="targetBuffer" type="NativeBuffer" line="314"/>
                <scope line="315"/>
                <scope line="317"/>
            </method>
            <method name="MoveFileEx0" type="void" line="322"/>
            <javadoc line="325">
                DWORD GetFileAttributes(
                  LPCTSTR lpFileName
                  )                
            </javadoc>
            <method name="GetFileAttributes" type="int" line="330">
                <params>
                    <param name="path" type="String"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="331"/>
                <scope line="332"/>
                <scope line="334"/>
            </method>
            <method name="GetFileAttributes0" type="int" line="338"/>
            <javadoc line="341">
                SetFileAttributes(
                  LPCTSTR lpFileName,
                  DWORD dwFileAttributes                
            </javadoc>
            <method name="SetFileAttributes" type="void" line="348">
                <params>
                    <param name="path" type="String"/>
                    <param name="dwFileAttributes" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="349"/>
                <scope line="350"/>
                <scope line="352"/>
            </method>
            <method name="SetFileAttributes0" type="void" line="356"/>
            <javadoc line="359">
                GetFileAttributesEx(
                  LPCTSTR lpFileName,
                  GET_FILEEX_INFO_LEVELS fInfoLevelId,
                  LPVOID lpFileInformation
                  );                
            </javadoc>
            <method name="GetFileAttributesEx" type="void" line="366">
                <params>
                    <param name="path" type="String"/>
                    <param name="address" type="long"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="367"/>
                <scope line="368"/>
                <scope line="370"/>
            </method>
            <method name="GetFileAttributesEx0" type="void" line="374"/>
            <method name="SetFileTime" type="void" line="376"/>
            <javadoc line="376">
                SetFileTime(
                  HANDLE hFile,
                  CONST FILETIME lpCreationTime,
                  CONST FILETIME lpLastAccessTime,
                  CONST FILETIME lpLastWriteTime
                  )                
            </javadoc>
            <method name="SetEndOfFile" type="void" line="390"/>
            <javadoc line="390">
                SetEndOfFile(
                  HANDLE hFile
                  )                
            </javadoc>
            <method name="GetLogicalDrives" type="int" line="397"/>
            <javadoc line="397">
                DWORD GetLogicalDrives(VOID)                
            </javadoc>
            <javadoc line="402">
                GetVolumeInformation(
                  LPCTSTR lpRootPathName,
                  LPTSTR lpVolumeNameBuffer,
                  DWORD nVolumeNameSize,
                  LPDWORD lpVolumeSerialNumber,
                  LPDWORD lpMaximumComponentLength,
                  LPDWORD lpFileSystemFlags,
                  LPTSTR lpFileSystemNameBuffer,
                  DWORD nFileSystemNameSize
                  )                
            </javadoc>
            <method name="GetVolumeInformation" type="VolumeInformation" line="416">
                <params>
                    <param name="root" type="String"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="417"/>
                <scope line="418">
                    <declaration name="info" type="VolumeInformation" line="419"/>
                </scope>
                <scope line="422"/>
            </method>
            <class name="VolumeInformation" line="426">
                <declaration name="fileSystemName" type="String" line="427"/>
                <declaration name="volumeName" type="String" line="428"/>
                <declaration name="volumeSerialNumber" type="int" line="429"/>
                <declaration name="flags" type="int" line="430"/>
                <method name="VolumeInformation" type="constructor" line="431"/>
                <method name="fileSystemName" type="String" line="433"/>
                <method name="volumeName" type="String" line="434"/>
                <method name="volumeSerialNumber" type="int" line="435"/>
                <method name="flags" type="int" line="436"/>
            </class>
            <method name="GetVolumeInformation0" type="void" line="438"/>
            <javadoc line="442">
                UINT GetDriveType(
                  LPCTSTR lpRootPathName
                  )                
            </javadoc>
            <method name="GetDriveType" type="int" line="447">
                <params>
                    <param name="root" type="String"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="448"/>
                <scope line="449"/>
                <scope line="451"/>
            </method>
            <method name="GetDriveType0" type="int" line="455"/>
            <javadoc line="457">
                GetDiskFreeSpaceEx(
                  LPCTSTR lpDirectoryName,
                  PULARGE_INTEGER lpFreeBytesAvailableToCaller,
                  PULARGE_INTEGER lpTotalNumberOfBytes,
                  PULARGE_INTEGER lpTotalNumberOfFreeBytes
                  )                
            </javadoc>
            <method name="GetDiskFreeSpaceEx" type="DiskFreeSpace" line="467">
                <params>
                    <param name="path" type="String"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="468"/>
                <scope line="469">
                    <declaration name="space" type="DiskFreeSpace" line="470"/>
                </scope>
                <scope line="473"/>
            </method>
            <class name="DiskFreeSpace" line="477">
                <declaration name="freeBytesAvailable" type="long" line="478"/>
                <declaration name="totalNumberOfBytes" type="long" line="479"/>
                <declaration name="totalNumberOfFreeBytes" type="long" line="480"/>
                <method name="DiskFreeSpace" type="constructor" line="481"/>
                <method name="freeBytesAvailable" type="long" line="483"/>
                <method name="totalNumberOfBytes" type="long" line="484"/>
                <method name="totalNumberOfFreeBytes" type="long" line="485"/>
            </class>
            <method name="GetDiskFreeSpaceEx0" type="void" line="487"/>
            <javadoc line="492">
                GetVolumePathName(
                  LPCTSTR lpszFileName,
                  LPTSTR lpszVolumePathName,
                  DWORD cchBufferLength
                  )                
                <return>
                    lpFileName                    
                </return>
            </javadoc>
            <method name="GetVolumePathName" type="String" line="501">
                <params>
                    <param name="path" type="String"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="502"/>
                <scope line="503"/>
                <scope line="505"/>
            </method>
            <method name="GetVolumePathName0" type="String" line="509"/>
            <method name="InitializeSecurityDescriptor" type="void" line="513"/>
            <javadoc line="513">
                InitializeSecurityDescriptor(
                  PSECURITY_DESCRIPTOR pSecurityDescriptor,
                  DWORD dwRevision
                  )                
            </javadoc>
            <method name="InitializeAcl" type="void" line="522"/>
            <javadoc line="522">
                InitializeAcl(
                  PACL pAcl,
                  DWORD nAclLength,
                  DWORD dwAclRevision
                  )                
            </javadoc>
            <javadoc line="532">
                GetFileSecurity(
                  LPCTSTR lpFileName,
                  SECURITY_INFORMATION RequestedInformation,
                  PSECURITY_DESCRIPTOR pSecurityDescriptor,
                  DWORD nLength,
                  LPDWORD lpnLengthNeeded
                  )                
            </javadoc>
            <method name="GetFileSecurity" type="int" line="545">
                <params>
                    <param name="path" type="String"/>
                    <param name="requestedInformation" type="int"/>
                    <param name="pSecurityDescriptor" type="long"/>
                    <param name="nLength" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="546"/>
                <scope line="547"/>
                <scope line="550"/>
            </method>
            <method name="GetFileSecurity0" type="int" line="554"/>
            <javadoc line="559">
                SetFileSecurity(
                  LPCTSTR lpFileName,
                  SECURITY_INFORMATION SecurityInformation,
                  PSECURITY_DESCRIPTOR pSecurityDescriptor
                  )                
            </javadoc>
            <method name="SetFileSecurity" type="void" line="570">
                <params>
                    <param name="path" type="String"/>
                    <param name="securityInformation" type="int"/>
                    <param name="pSecurityDescriptor" type="long"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="571"/>
                <scope line="572"/>
                <scope line="575"/>
            </method>
            <method name="SetFileSecurity0" type="void" line="579"/>
            <method name="GetSecurityDescriptorOwner" type="long" line="582"/>
            <javadoc line="582">
                GetSecurityDescriptorOwner(
                  PSECURITY_DESCRIPTOR pSecurityDescriptor
                  PSID pOwner,
                  LPBOOL lpbOwnerDefaulted
                  )                
                <return>
                    pOwner                    
                </return>
            </javadoc>
            <method name="SetSecurityDescriptorOwner" type="void" line="594"/>
            <javadoc line="594">
                SetSecurityDescriptorOwner(
                  PSECURITY_DESCRIPTOR pSecurityDescriptor,
                  PSID pOwner,
                  BOOL bOwnerDefaulted
                  )                
            </javadoc>
            <method name="GetSecurityDescriptorDacl" type="long" line="605"/>
            <javadoc line="605">
                GetSecurityDescriptorDacl(
                  PSECURITY_DESCRIPTOR pSecurityDescriptor,
                  LPBOOL lpbDaclPresent,
                  PACL pDacl,
                  LPBOOL lpbDaclDefaulted
                  )                
            </javadoc>
            <method name="SetSecurityDescriptorDacl" type="void" line="615"/>
            <javadoc line="615">
                SetSecurityDescriptorDacl(
                  PSECURITY_DESCRIPTOR pSecurityDescriptor,
                  BOOL bDaclPresent,
                  PACL pDacl,
                  BOOL bDaclDefaulted
                  )                
            </javadoc>
            <javadoc line="627">
                GetAclInformation(
                  PACL pAcl,
                  LPVOID pAclInformation,
                  DWORD nAclInformationLength,
                  ACL_INFORMATION_CLASS dwAclInformationClass
                  )                
            </javadoc>
            <method name="GetAclInformation" type="AclInformation" line="635">
                <params>
                    <param name="aclAddress" type="long"/>
                </params>
                <declaration name="info" type="AclInformation" line="636"/>
            </method>
            <class name="AclInformation" line="640">
                <declaration name="aceCount" type="int" line="641"/>
                <method name="AclInformation" type="constructor" line="642"/>
                <method name="aceCount" type="int" line="644"/>
            </class>
            <method name="GetAclInformation0" type="void" line="646"/>
            <method name="GetAce" type="long" line="649"/>
            <javadoc line="649">
                GetAce(
                  PACL pAcl,
                  DWORD dwAceIndex,
                  LPVOID pAce
                  )                
            </javadoc>
            <method name="AddAccessAllowedAceEx" type="void" line="658"/>
            <javadoc line="658">
                AddAccessAllowedAceEx(
                  PACL pAcl,
                  DWORD dwAceRevision,
                  DWORD AceFlags,
                  DWORD AccessMask,
                  PSID pSid
                  )                
            </javadoc>
            <method name="AddAccessDeniedAceEx" type="void" line="670"/>
            <javadoc line="670">
                AddAccessDeniedAceEx(
                  PACL pAcl,
                  DWORD dwAceRevision,
                  DWORD AceFlags,
                  DWORD AccessMask,
                  PSID pSid
                  )                
            </javadoc>
            <javadoc line="682">
                LookupAccountSid(
                  LPCTSTR lpSystemName,
                  PSID Sid,
                  LPTSTR Name,
                  LPDWORD cbName,
                  LPTSTR ReferencedDomainName,
                  LPDWORD cbReferencedDomainName,
                  PSID_NAME_USE peUse
                  )                
            </javadoc>
            <method name="LookupAccountSid" type="Account" line="693">
                <params>
                    <param name="sidAddress" type="long"/>
                </params>
                <declaration name="acc" type="Account" line="694"/>
            </method>
            <class name="Account" line="698">
                <declaration name="domain" type="String" line="699"/>
                <declaration name="name" type="String" line="700"/>
                <declaration name="use" type="int" line="701"/>
                <method name="Account" type="constructor" line="702"/>
                <method name="domain" type="String" line="704"/>
                <method name="name" type="String" line="705"/>
                <method name="use" type="int" line="706"/>
            </class>
            <method name="LookupAccountSid0" type="void" line="708"/>
            <javadoc line="711">
                LookupAccountName(
                  LPCTSTR lpSystemName,
                  LPCTSTR lpAccountName,
                  PSID Sid,
                  LPDWORD cbSid,
                  LPTSTR ReferencedDomainName,
                  LPDWORD cbReferencedDomainName,
                  PSID_NAME_USE peUse
                  )                
                <return>
                    cbSid                    
                </return>
            </javadoc>
            <method name="LookupAccountName" type="int" line="727">
                <params>
                    <param name="accountName" type="String"/>
                    <param name="pSid" type="long"/>
                    <param name="cbSid" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="728"/>
                <scope line="729"/>
                <scope line="731"/>
            </method>
            <method name="LookupAccountName0" type="int" line="735"/>
            <method name="GetLengthSid" type="int" line="738"/>
            <javadoc line="738">
                DWORD GetLengthSid(
                  PSID pSid
                  )                
            </javadoc>
            <method name="ConvertSidToStringSid" type="String" line="745"/>
            <javadoc line="745">
                ConvertSidToStringSid(
                  PSID Sid,
                  LPTSTR StringSid
                  )                
                <return>
                    StringSid                    
                </return>
            </javadoc>
            <javadoc line="756">
                ConvertStringSidToSid(
                  LPCTSTR StringSid,
                  PSID pSid
                  )                
                <return>
                    pSid                    
                </return>
            </javadoc>
            <method name="ConvertStringSidToSid" type="long" line="766">
                <params>
                    <param name="sidString" type="String"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="767"/>
                <scope line="768"/>
                <scope line="770"/>
            </method>
            <method name="ConvertStringSidToSid0" type="long" line="774"/>
            <method name="GetCurrentProcess" type="long" line="777"/>
            <javadoc line="777">
                HANDLE GetCurrentProcess(VOID)                
            </javadoc>
            <method name="GetCurrentThread" type="long" line="782"/>
            <javadoc line="782">
                HANDLE GetCurrentThread(VOID)                
            </javadoc>
            <method name="OpenProcessToken" type="long" line="787"/>
            <javadoc line="787">
                OpenProcessToken(
                  HANDLE ProcessHandle,
                  DWORD DesiredAccess,
                  PHANDLE TokenHandle
                  )                
            </javadoc>
            <method name="OpenThreadToken" type="long" line="797"/>
            <javadoc line="797">
                OpenThreadToken(
                  HANDLE ThreadHandle,
                  DWORD DesiredAccess,
                  BOOL OpenAsSelf,
                  PHANDLE TokenHandle
                  )                
            </javadoc>
            <method name="DuplicateTokenEx" type="long" line="808"/>
            <javadoc line="808">
                                
            </javadoc>
            <method name="SetThreadToken" type="void" line="813"/>
            <javadoc line="813">
                SetThreadToken(
                  PHANDLE Thread,
                  HANDLE Token
                  )                
            </javadoc>
            <method name="GetTokenInformation" type="int" line="822"/>
            <javadoc line="822">
                GetTokenInformation(
                  HANDLE TokenHandle,
                  TOKEN_INFORMATION_CLASS TokenInformationClass,
                  LPVOID TokenInformation,
                  DWORD TokenInformationLength,
                  PDWORD ReturnLength
                  )                
            </javadoc>
            <method name="AdjustTokenPrivileges" type="void" line="834"/>
            <javadoc line="834">
                AdjustTokenPrivileges(
                  HANDLE TokenHandle,
                  BOOL DisableAllPrivileges
                  PTOKEN_PRIVILEGES NewState
                  DWORD BufferLength
                  PTOKEN_PRIVILEGES
                  PDWORD ReturnLength
                  )                
            </javadoc>
            <javadoc line="847">
                                
            </javadoc>
            <method name="LookupPrivilegeValue" type="long" line="849">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="850"/>
                <scope line="851"/>
                <scope line="853"/>
            </method>
            <method name="LookupPrivilegeValue0" type="long" line="857"/>
            <method name="BuildTrusteeWithSid" type="long" line="860"/>
            <javadoc line="860">
                BuildTrusteeWithSid(
                  PTRUSTEE pTrustee,
                  PSID pSid
                  )                
                <return>
                    pTrustee                    
                </return>
            </javadoc>
            <method name="GetEffectiveRightsFromAcl" type="int" line="870"/>
            <javadoc line="870">
                GetEffectiveRightsFromAcl(
                  PACL pacl,
                  PTRUSTEE pTrustee,
                  PACCESS_MASK pAccessRights
                  )                
                <return>
                    AccessRights                    
                </return>
            </javadoc>
            <javadoc line="882">
                CreateSymbolicLink(
                  LPCWSTR lpSymlinkFileName,
                  LPCWSTR lpTargetFileName,
                  DWORD dwFlags
                  )                
            </javadoc>
            <method name="CreateSymbolicLink" type="void" line="891">
                <params>
                    <param name="link" type="String"/>
                    <param name="target" type="String"/>
                    <param name="flags" type="int"/>
                </params>
                <declaration name="linkBuffer" type="NativeBuffer" line="892"/>
                <declaration name="targetBuffer" type="NativeBuffer" line="893"/>
                <scope line="894"/>
                <scope line="897"/>
            </method>
            <method name="CreateSymbolicLink0" type="void" line="902"/>
            <javadoc line="905">
                CreateHardLink(
                  LPCTSTR lpFileName,
                  LPCTSTR lpExistingFileName,
                  LPSECURITY_ATTRIBUTES lpSecurityAttributes
                  )                
            </javadoc>
            <method name="CreateHardLink" type="void" line="914">
                <params>
                    <param name="newFile" type="String"/>
                    <param name="existingFile" type="String"/>
                </params>
                <declaration name="newFileBuffer" type="NativeBuffer" line="915"/>
                <declaration name="existingFileBuffer" type="NativeBuffer" line="916"/>
                <scope line="917"/>
                <scope line="919"/>
            </method>
            <method name="CreateHardLink0" type="void" line="924"/>
            <javadoc line="927">
                GetFullPathName(
                  LPCTSTR lpFileName,
                  DWORD nBufferLength,
                  LPTSTR lpBuffer,
                  LPTSTR lpFilePart
                  )                
            </javadoc>
            <method name="GetFullPathName" type="String" line="935">
                <params>
                    <param name="path" type="String"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="936"/>
                <scope line="937"/>
                <scope line="939"/>
            </method>
            <method name="GetFullPathName0" type="String" line="943"/>
            <method name="GetFinalPathNameByHandle" type="String" line="946"/>
            <javadoc line="946">
                GetFinalPathNameByHandle(
                  HANDLE hFile,
                  LPTSTR lpszFilePath,
                  DWORD cchFilePath,
                  DWORD dwFlags
                  )                
            </javadoc>
            <method name="FormatMessage" type="String" line="957"/>
            <javadoc line="957">
                FormatMessage(
                  DWORD dwFlags,
                  LPCVOID lpSource,
                  DWORD dwMessageId,
                  DWORD dwLanguageId,
                  LPTSTR lpBuffer,
                  DWORD nSize,
                  va_list Arguments
                  )                
            </javadoc>
            <method name="LocalFree" type="void" line="970"/>
            <javadoc line="970">
                LocalFree(
                  HLOCAL hMem
                  )                
            </javadoc>
            <method name="CreateIoCompletionPort" type="long" line="977"/>
            <javadoc line="977">
                HANDLE CreateIoCompletionPort (
                  HANDLE FileHandle,
                  HANDLE ExistingCompletionPort,
                  DWORD CompletionKey,
                  DWORD NumberOfConcurrentThreads
                  )                
            </javadoc>
            <javadoc line="989">
                GetQueuedCompletionStatus(
                  HANDLE CompletionPort,
                  LPDWORD lpNumberOfBytesTransferred,
                  LPDWORD lpCompletionKey,
                  LPOVERLAPPED lpOverlapped,
                  DWORD dwMilliseconds                
            </javadoc>
            <method name="GetQueuedCompletionStatus" type="CompletionStatus" line="999">
                <params>
                    <param name="completionPort" type="long"/>
                </params>
                <declaration name="status" type="CompletionStatus" line="1000"/>
            </method>
            <class name="CompletionStatus" line="1004">
                <declaration name="error" type="int" line="1005"/>
                <declaration name="bytesTransferred" type="int" line="1006"/>
                <declaration name="completionKey" type="int" line="1007"/>
                <method name="CompletionStatus" type="constructor" line="1008"/>
                <method name="error" type="int" line="1010"/>
                <method name="bytesTransferred" type="int" line="1011"/>
                <method name="completionKey" type="int" line="1012"/>
            </class>
            <method name="GetQueuedCompletionStatus0" type="void" line="1014"/>
            <method name="PostQueuedCompletionStatus" type="void" line="1017"/>
            <javadoc line="1017">
                PostQueuedCompletionStatus(
                  HANDLE CompletionPort,
                  DWORD dwNumberOfBytesTransferred,
                  DWORD dwCompletionKey,
                  LPOVERLAPPED lpOverlapped
                  )                
            </javadoc>
            <method name="ReadDirectoryChangesW" type="void" line="1028"/>
            <javadoc line="1028">
                ReadDirectoryChangesW(
                  HANDLE hDirectory,
                  LPVOID lpBuffer,
                  DWORD nBufferLength,
                  BOOL bWatchSubtree,
                  DWORD dwNotifyFilter,
                  LPDWORD lpBytesReturned,
                  LPOVERLAPPED lpOverlapped,
                  LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
                  )                
            </javadoc>
            <javadoc line="1049">
                BackupRead(
                  HANDLE hFile,
                  LPBYTE lpBuffer,
                  DWORD nNumberOfBytesToRead,
                  LPDWORD lpNumberOfBytesRead,
                  BOOL bAbort,
                  BOOL bProcessSecurity,
                  LPVOID lpContext
                  )                
            </javadoc>
            <method name="BackupRead" type="BackupResult" line="1066">
                <params>
                    <param name="hFile" type="long"/>
                    <param name="bufferAddress" type="long"/>
                    <param name="bufferSize" type="int"/>
                    <param name="abort" type="boolean"/>
                    <param name="context" type="long"/>
                </params>
                <declaration name="result" type="BackupResult" line="1067"/>
            </method>
            <class name="BackupResult" line="1071">
                <declaration name="bytesTransferred" type="int" line="1072"/>
                <declaration name="context" type="long" line="1073"/>
                <method name="BackupResult" type="constructor" line="1074"/>
                <method name="bytesTransferred" type="int" line="1076"/>
                <method name="context" type="long" line="1077"/>
            </class>
            <method name="BackupRead0" type="void" line="1079"/>
            <method name="BackupSeek" type="void" line="1083"/>
            <javadoc line="1083">
                BackupSeek(
                  HANDLE hFile,
                  DWORD dwLowBytesToSeek,
                  DWORD dwHighBytesToSeek,
                  LPDWORD lpdwLowByteSeeked,
                  LPDWORD lpdwHighByteSeeked,
                  LPVOID lpContext
                  )                
            </javadoc>
            <declaration name="unsafe" type="Unsafe" line="1099"/>
            <method name="asNativeBuffer" type="NativeBuffer" line="1101">
                <params>
                    <param name="s" type="String"/>
                </params>
                <comment line="1104">
                    char terminator                    
                </comment>
                <comment line="1106">
                    get a native buffer of sufficient size                    
                </comment>
                <comment line="1111">
                    buffer already contains the string contents                    
                </comment>
                <comment line="1116">
                    copy into buffer and zero terminate                    
                </comment>
                <declaration name="stringLengthInBytes" type="int" line="1102"/>
                <declaration name="sizeInBytes" type="int" line="1103"/>
                <declaration name="buffer" type="NativeBuffer" line="1106"/>
                <scope line="1107"/>
                <scope line="1109"/>
                <declaration name="chars" type="char[]" line="1116"/>
            </method>
            <method name="initIDs" type="void" line="1126"/>
            <scope line="1128">
                <anonymous_class line="1129">
                    <method name="run" type="Void" line="1130">
                        <comment line="1132">
                            nio.dll has dependency on net.dll                            
                        </comment>
                    </method>
                </anonymous_class>
            </scope>
        </class>
    </source>