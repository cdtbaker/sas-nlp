<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file"/>
        <import package="java.nio.channels"/>
        <import package="java.io.FileDescriptor"/>
        <import package="java.io.IOException"/>
        <import package="java.util"/>
        <import package="com.sun.nio.file.ExtendedOpenOption"/>
        <import package="sun.nio.ch.FileChannelImpl"/>
        <import package="sun.nio.ch.ThreadPool"/>
        <import package="sun.nio.ch.WindowsAsynchronousFileChannelImpl"/>
        <import package="sun.misc.SharedSecrets"/>
        <import package="sun.misc.JavaIOFileDescriptorAccess"/>
        <import package="sun.nio.fs.WindowsNativeDispatcher"/>
        <import package="sun.nio.fs.WindowsConstants"/>
        <class name="WindowsChannelFactory" line="45">
            <javadoc line="45">
                Factory to create FileChannels and AsynchronousFileChannels.                
            </javadoc>
            <declaration name="fdAccess" type="JavaIOFileDescriptorAccess" line="50"/>
            <method name="WindowsChannelFactory" type="constructor" line="53"/>
            <declaration name="OPEN_REPARSE_POINT" type="OpenOption" line="55"/>
            <javadoc line="55">
                Do not follow reparse points when opening an existing file. Do not fail
                  if the file is a reparse point.                
            </javadoc>
            <anonymous_class line="59"/>
            <class name="Flags" line="61">
                <comment line="78">
                    non-standard                    
                </comment>
                <javadoc line="61">
                    Represents the flags from a user-supplied set of open options.                    
                </javadoc>
                <declaration name="read" type="boolean" line="65"/>
                <declaration name="write" type="boolean" line="66"/>
                <declaration name="append" type="boolean" line="67"/>
                <declaration name="truncateExisting" type="boolean" line="68"/>
                <declaration name="create" type="boolean" line="69"/>
                <declaration name="createNew" type="boolean" line="70"/>
                <declaration name="deleteOnClose" type="boolean" line="71"/>
                <declaration name="sparse" type="boolean" line="72"/>
                <declaration name="overlapped" type="boolean" line="73"/>
                <declaration name="sync" type="boolean" line="74"/>
                <declaration name="dsync" type="boolean" line="75"/>
                <declaration name="shareRead" type="boolean" line="78"/>
                <declaration name="shareWrite" type="boolean" line="79"/>
                <declaration name="shareDelete" type="boolean" line="80"/>
                <declaration name="noFollowLinks" type="boolean" line="81"/>
                <declaration name="openReparsePoint" type="boolean" line="82"/>
                <method name="toFlags" type="Flags" line="84">
                    <params>
                        <param name="options" type="Set<? extends OpenOption>"/>
                    </params>
                    <declaration name="flags" type="Flags" line="85"/>
                    <scope line="86">
                        <scope line="87"/>
                        <scope line="103"/>
                        <scope line="112"/>
                        <scope line="116"/>
                    </scope>
                </method>
            </class>
            <javadoc line="128">
                Open/creates file, returning FileChannel to access the file                
                <param>
                    pathForWindowsThe path of the file to open/create                    
                </param>
                <param>
                    pathToCheckThe path used for permission checks (if security manager)                    
                </param>
            </javadoc>
            <method name="newFileChannel" type="FileChannel" line="141">
                <params>
                    <param name="pathForWindows" type="String"/>
                    <param name="pathToCheck" type="String"/>
                    <param name="options" type="Set<? extends OpenOption>"/>
                    <param name="pSecurityDescriptor" type="long"/>
                </params>
                <comment line="145">
                    default is reading; append =&gt; writing                    
                </comment>
                <comment line="154">
                    validation                    
                </comment>
                <declaration name="flags" type="Flags" line="142"/>
                <scope line="145">
                    <scope line="146"/>
                    <scope line="148"/>
                </scope>
                <declaration name="fdObj" type="FileDescriptor" line="159"/>
            </method>
            <javadoc line="163">
                Open/creates file, returning AsynchronousFileChannel to access the file                
                <param>
                    pathForWindowsThe path of the file to open/create                    
                </param>
                <param>
                    pathToCheckThe path used for permission checks (if security manager)                    
                </param>
                <param>
                    poolThe thread pool that the channel is associated with                    
                </param>
            </javadoc>
            <method name="newAsynchronousFileChannel" type="AsynchronousFileChannel" line="179">
                <params>
                    <param name="pathForWindows" type="String"/>
                    <param name="pathToCheck" type="String"/>
                    <param name="options" type="Set<? extends OpenOption>"/>
                    <param name="pSecurityDescriptor" type="long"/>
                    <param name="pool" type="ThreadPool"/>
                </params>
                <comment line="183">
                    Overlapped I/O required                    
                </comment>
                <comment line="186">
                    default is reading                    
                </comment>
                <comment line="191">
                    validation                    
                </comment>
                <comment line="195">
                    open file for overlapped I/O                    
                </comment>
                <comment line="204">
                    create the AsynchronousFileChannel                    
                </comment>
                <comment line="208">
                    IOException is thrown if the file handle cannot be associated
                     with the completion port. All we can do is close the file.                    
                </comment>
                <declaration name="flags" type="Flags" line="180"/>
                <scope line="186"/>
                <declaration name="fdObj" type="FileDescriptor" line="195"/>
                <scope line="196"/>
                <scope line="198"/>
                <scope line="204"/>
                <scope line="206">
                    <declaration name="handle" type="long" line="209"/>
                </scope>
            </method>
            <javadoc line="215">
                Opens file based on parameters and options, returning a FileDescriptor
                  encapsulating the handle to the open file.                
            </javadoc>
            <method name="open" type="FileDescriptor" line="224">
                <params>
                    <param name="pathForWindows" type="String"/>
                    <param name="pathToCheck" type="String"/>
                    <param name="flags" type="Flags"/>
                    <param name="pSecurityDescriptor" type="long"/>
                </params>
                <comment line="226">
                    set to true if file must be truncated after open                    
                </comment>
                <comment line="229">
                    map options                    
                </comment>
                <comment line="249">
                    force create to fail if file is orphaned reparse point                    
                </comment>
                <comment line="255">
                    Windows doesn&apos;t have a creation disposition that exactly
                     corresponds to CREATE + TRUNCATE_EXISTING so we use
                     the OPEN_ALWAYS mode and then truncate the file.                    
                </comment>
                <comment line="274">
                    NOFOLLOW_LINKS and NOFOLLOW_REPARSEPOINT mean open reparse point                    
                </comment>
                <comment line="286">
                    permission check                    
                </comment>
                <comment line="299">
                    open file                    
                </comment>
                <comment line="307">
                    make sure this isn&apos;t a symbolic link.                    
                </comment>
                <comment line="318">
                    truncate file (for CREATE + TRUNCATE_EXISTING case)                    
                </comment>
                <comment line="328">
                    make the file sparse if needed                    
                </comment>
                <comment line="333">
                    ignore as sparse option is hint                    
                </comment>
                <comment line="337">
                    create FileDescriptor and return                    
                </comment>
                <declaration name="truncateAfterOpen" type="boolean" line="226"/>
                <declaration name="dwDesiredAccess" type="int" line="229"/>
                <declaration name="dwShareMode" type="int" line="235"/>
                <declaration name="dwFlagsAndAttributes" type="int" line="243"/>
                <declaration name="dwCreationDisposition" type="int" line="244"/>
                <scope line="245">
                    <scope line="246"/>
                    <scope line="250">
                        <scope line="253">
                            <scope line="257"/>
                            <scope line="259"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="okayToFollowLinks" type="boolean" line="274"/>
                <scope line="279"/>
                <scope line="286">
                    <declaration name="sm" type="SecurityManager" line="287"/>
                    <scope line="288"/>
                </scope>
                <declaration name="handle" type="long" line="299"/>
                <scope line="307">
                    <scope line="308"/>
                    <scope line="311"/>
                </scope>
                <scope line="318">
                    <scope line="319"/>
                    <scope line="321"/>
                </scope>
                <scope line="328">
                    <scope line="329"/>
                    <scope line="331"/>
                </scope>
                <declaration name="fdObj" type="FileDescriptor" line="337"/>
            </method>
        </class>
    </source>