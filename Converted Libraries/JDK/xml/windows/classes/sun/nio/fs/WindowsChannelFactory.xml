<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file"/>
        <import package="java.nio.channels"/>
        <import package="java.io.FileDescriptor"/>
        <import package="java.io.IOException"/>
        <import package="java.util"/>
        <import package="com.sun.nio.file.ExtendedOpenOption"/>
        <import package="sun.nio.ch.FileChannelImpl"/>
        <import package="sun.nio.ch.ThreadPool"/>
        <import package="sun.nio.ch.WindowsAsynchronousFileChannelImpl"/>
        <import package="sun.misc.SharedSecrets"/>
        <import package="sun.misc.JavaIOFileDescriptorAccess"/>
        <import package="sun.nio.fs.WindowsNativeDispatcher"/>
        <import package="sun.nio.fs.WindowsConstants"/>
        <class name="WindowsChannelFactory" line="15">
            <javadoc line="15">
                Factory to create FileChannels and AsynchronousFileChannels.                
            </javadoc>
            <declaration name="fdAccess" type="JavaIOFileDescriptorAccess" line="19"/>
            <method name="WindowsChannelFactory" type="constructor" line="20"/>
            <declaration name="OPEN_REPARSE_POINT" type="OpenOption" line="22"/>
            <javadoc line="22">
                Do not follow reparse points when opening an existing file. Do not fail
                  if the file is a reparse point.                
            </javadoc>
            <anonymous_class line="26"/>
            <class name="Flags" line="29">
                <javadoc line="29">
                    Represents the flags from a user-supplied set of open options.                    
                </javadoc>
                <declaration name="read" type="boolean" line="33"/>
                <declaration name="write" type="boolean" line="34"/>
                <declaration name="append" type="boolean" line="35"/>
                <declaration name="truncateExisting" type="boolean" line="36"/>
                <declaration name="create" type="boolean" line="37"/>
                <declaration name="createNew" type="boolean" line="38"/>
                <declaration name="deleteOnClose" type="boolean" line="39"/>
                <declaration name="sparse" type="boolean" line="40"/>
                <declaration name="overlapped" type="boolean" line="41"/>
                <declaration name="sync" type="boolean" line="42"/>
                <declaration name="dsync" type="boolean" line="43"/>
                <declaration name="shareRead" type="boolean" line="44"/>
                <declaration name="shareWrite" type="boolean" line="45"/>
                <declaration name="shareDelete" type="boolean" line="46"/>
                <declaration name="noFollowLinks" type="boolean" line="47"/>
                <declaration name="openReparsePoint" type="boolean" line="48"/>
                <method name="toFlags" type="Flags" line="49">
                    <params>
                        <param name="options" type="Set<? extends OpenOption>"/>
                    </params>
                    <declaration name="flags" type="Flags" line="50"/>
                    <scope line="51">
                        <scope line="52"/>
                        <scope line="89"/>
                        <scope line="105"/>
                        <scope line="109"/>
                    </scope>
                </method>
            </class>
            <javadoc line="119">
                Open/creates file, returning FileChannel to access the file                
                <param>
                    pathForWindowsThe path of the file to open/create                    
                </param>
                <param>
                    pathToCheckThe path used for permission checks (if security manager)                    
                </param>
            </javadoc>
            <method name="newFileChannel" type="FileChannel" line="124">
                <params>
                    <param name="pathForWindows" type="String"/>
                    <param name="pathToCheck" type="String"/>
                    <param name="options" type="Set<? extends OpenOption>"/>
                    <param name="pSecurityDescriptor" type="long"/>
                </params>
                <declaration name="flags" type="Flags" line="125"/>
                <scope line="126">
                    <scope line="127"/>
                    <scope line="130"/>
                </scope>
                <declaration name="fdObj" type="FileDescriptor" line="136"/>
            </method>
            <javadoc line="139">
                Open/creates file, returning AsynchronousFileChannel to access the file                
                <param>
                    pathForWindowsThe path of the file to open/create                    
                </param>
                <param>
                    pathToCheckThe path used for permission checks (if security manager)                    
                </param>
                <param>
                    poolThe thread pool that the channel is associated with                    
                </param>
            </javadoc>
            <method name="newAsynchronousFileChannel" type="AsynchronousFileChannel" line="145">
                <params>
                    <param name="pathForWindows" type="String"/>
                    <param name="pathToCheck" type="String"/>
                    <param name="options" type="Set<? extends OpenOption>"/>
                    <param name="pSecurityDescriptor" type="long"/>
                    <param name="pool" type="ThreadPool"/>
                </params>
                <declaration name="flags" type="Flags" line="146"/>
                <scope line="148"/>
                <declaration name="fdObj" type="FileDescriptor" line="152"/>
                <scope line="153"/>
                <scope line="156"/>
                <scope line="160"/>
                <scope line="163">
                    <declaration name="handle" type="long" line="164"/>
                </scope>
            </method>
            <javadoc line="169">
                Opens file based on parameters and options, returning a FileDescriptor
                  encapsulating the handle to the open file.                
            </javadoc>
            <method name="open" type="FileDescriptor" line="173">
                <params>
                    <param name="pathForWindows" type="String"/>
                    <param name="pathToCheck" type="String"/>
                    <param name="flags" type="Flags"/>
                    <param name="pSecurityDescriptor" type="long"/>
                </params>
                <declaration name="truncateAfterOpen" type="boolean" line="174"/>
                <declaration name="dwDesiredAccess" type="int" line="175"/>
                <declaration name="dwShareMode" type="int" line="178"/>
                <declaration name="dwFlagsAndAttributes" type="int" line="182"/>
                <declaration name="dwCreationDisposition" type="int" line="183"/>
                <scope line="184">
                    <scope line="185"/>
                    <scope line="189">
                        <scope line="191">
                            <scope line="192"/>
                            <scope line="195"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="okayToFollowLinks" type="boolean" line="204"/>
                <scope line="205"/>
                <scope line="209">
                    <declaration name="sm" type="SecurityManager" line="210"/>
                    <scope line="211"/>
                </scope>
                <declaration name="handle" type="long" line="217"/>
                <scope line="218">
                    <scope line="219"/>
                    <scope line="222"/>
                </scope>
                <scope line="227">
                    <scope line="228"/>
                    <scope line="231"/>
                </scope>
                <scope line="236">
                    <scope line="237"/>
                    <scope line="240"/>
                </scope>
                <declaration name="fdObj" type="FileDescriptor" line="243"/>
            </method>
        </class>
    </source>