<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file"/>
        <import package="java.nio.file.attribute"/>
        <import package="java.io"/>
        <import package="java.net.URI"/>
        <import package="java.util"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="com.sun.nio.file.ExtendedWatchEventModifier"/>
        <import package="sun.nio.fs.WindowsNativeDispatcher"/>
        <import package="sun.nio.fs.WindowsConstants"/>
        <class name="WindowsPath" line="40">
            <extends class="AbstractPath"/>
            <comment line="47">
                The maximum path that does not require long path prefix. On Windows
                 the maximum path is 260 minus 1 (NUL) but for directories it is 260
                 minus 12 minus 1 (to allow for the creation of a 8.3 file in the
                 directory).                
            </comment>
            <comment line="53">
                Maximum extended-length path                
            </comment>
            <comment line="56">
                FIXME - eliminate this reference to reduce space                
            </comment>
            <comment line="59">
                path type                
            </comment>
            <comment line="61">
                root component (may be empty)                
            </comment>
            <comment line="63">
                normalized path                
            </comment>
            <comment line="66">
                the path to use in Win32 calls. This differs from path for relative
                 paths and has a long path prefix for all paths longer than MAX_PATH.                
            </comment>
            <comment line="70">
                offsets into name components (computed lazily)                
            </comment>
            <comment line="73">
                computed hash code (computed lazily, no need to be volatile)                
            </comment>
            <comment line="167">
                use this message when throwing exceptions                
            </comment>
            <comment line="172">
                use this path for permission checks                
            </comment>
            <comment line="177">
                use this path for Win32 calls
                 This method will prefix long paths with \\?\ or \\?\UNC as required.                
            </comment>
            <comment line="219">
                return this path resolved against the file system&apos;s default directory                
            </comment>
            <comment line="279">
                returns true if same drive letter                
            </comment>
            <comment line="285">
                Add long path prefix to path if required                
            </comment>
            <comment line="302">
                -- Path operations --                
            </comment>
            <comment line="351">
                package-private                
            </comment>
            <comment line="356">
                package-private                
            </comment>
            <comment line="576">
                generate offset array                
            </comment>
            <comment line="773">
                -- file operations --                
            </comment>
            <comment line="775">
                package-private                
            </comment>
            <javadoc line="40">
                Windows implementation of Path                
            </javadoc>
            <declaration name="MAX_PATH" type="int" line="50"/>
            <declaration name="MAX_LONG_PATH" type="int" line="53"/>
            <declaration name="fs" type="WindowsFileSystem" line="56"/>
            <declaration name="type" type="WindowsPathType" line="59"/>
            <declaration name="root" type="String" line="61"/>
            <declaration name="path" type="String" line="63"/>
            <declaration name="pathForWin32Calls" type="WeakReference&amp;lt;String&amp;gt;" line="67"/>
            <declaration name="offsets" type="Integer[]" line="70"/>
            <declaration name="hash" type="int" line="73"/>
            <javadoc line="76">
                Initializes a new instance of this class.                
            </javadoc>
            <method name="WindowsPath" type="constructor" line="83">
                <params>
                    <param name="fs" type="WindowsFileSystem"/>
                    <param name="type" type="WindowsPathType"/>
                    <param name="root" type="String"/>
                    <param name="path" type="String"/>
                </params>
            </method>
            <javadoc line="90">
                Creates a Path by parsing the given path.                
            </javadoc>
            <method name="parse" type="WindowsPath" line="93">
                <params>
                    <param name="fs" type="WindowsFileSystem"/>
                    <param name="path" type="String"/>
                </params>
                <declaration name="result" type="WindowsPathParser.Result" line="94"/>
            </method>
            <javadoc line="98">
                Creates a Path from a given path that is known to be normalized.                
            </javadoc>
            <method name="createFromNormalizedPath" type="WindowsPath" line="104">
                <params>
                    <param name="fs" type="WindowsFileSystem"/>
                    <param name="path" type="String"/>
                    <param name="attrs" type="BasicFileAttributes"/>
                </params>
                <scope line="105">
                    <declaration name="result" type="WindowsPathParser.Result" line="106"/>
                    <scope line="108"/>
                    <scope line="113"/>
                </scope>
                <scope line="120"/>
            </method>
            <javadoc line="125">
                Creates a WindowsPath from a given path that is known to be normalized.                
            </javadoc>
            <method name="createFromNormalizedPath" type="WindowsPath" line="130">
                <params>
                    <param name="fs" type="WindowsFileSystem"/>
                    <param name="path" type="String"/>
                </params>
            </method>
            <class name="WindowsPathWithAttributes" line="134">
                <extends class="WindowsPath"/>
                <comment line="164">
                    no need to override equals/hashCode.                    
                </comment>
                <implements interface="BasicFileAttributesHolder"/>
                <javadoc line="134">
                    Special implementation with attached/cached attributes (used to quicken
                      file tree traveral)                    
                </javadoc>
                <declaration name="ref" type="WeakReference&amp;lt;BasicFileAttributes&amp;gt;" line="141"/>
                <method name="WindowsPathWithAttributes" type="constructor" line="148">
                    <params>
                        <param name="fs" type="WindowsFileSystem"/>
                        <param name="type" type="WindowsPathType"/>
                        <param name="root" type="String"/>
                        <param name="path" type="String"/>
                        <param name="attrs" type="BasicFileAttributes"/>
                    </params>
                </method>
                <method name="get" type="BasicFileAttributes" line="154"/>
                <method name="invalidate" type="void" line="159"/>
            </class>
            <method name="getPathForExceptionMessage" type="String" line="167"/>
            <method name="getPathForPermissionCheck" type="String" line="172"/>
            <method name="getPathForWin32Calls" type="String" line="178">
                <comment line="180">
                    short absolute paths can be used directly                    
                </comment>
                <comment line="184">
                    return cached values if available                    
                </comment>
                <comment line="188">
                    Win32 path already available                    
                </comment>
                <comment line="192">
                    resolve against default directory                    
                </comment>
                <comment line="195">
                    Long paths need to have &quot;.&quot; and &quot;..&quot; removed and be prefixed with
                     &quot;\\?\&quot;. Note that it is okay to remove &quot;..&quot; even when it follows
                     a link - for example, it is okay for foo/link/../bar to be changed
                     to foo/bar. The reason is that Win32 APIs to access foo/link/../bar
                     will access foo/bar anyway (which differs to Unix systems)                    
                </comment>
                <comment line="208">
                    cache the resolved path (except drive relative paths as the working
                     directory on removal media devices can change during the lifetime
                     of the VM)                    
                </comment>
                <declaration name="ref" type="WeakReference&amp;lt;String&amp;gt;" line="184"/>
                <declaration name="resolved" type="String" line="185"/>
                <scope line="186"/>
                <scope line="199">
                    <scope line="200"/>
                </scope>
                <scope line="210">
                    <scope line="211"/>
                </scope>
            </method>
            <method name="getAbsolutePath" type="String" line="219">
                <comment line="224">
                    Relative path (&quot;foo&quot; for example)                    
                </comment>
                <comment line="238">
                    Directory relative path (&quot;\foo&quot; for example)                    
                </comment>
                <comment line="244">
                    Drive relative path (&quot;C:foo&quot; for example).                    
                </comment>
                <comment line="246">
                    relative to default directory                    
                </comment>
                <comment line="257">
                    relative to some other drive                    
                </comment>
                <scope line="224">
                    <declaration name="defaultDirectory" type="String" line="225"/>
                    <scope line="228"/>
                    <scope line="230">
                        <declaration name="sb" type="StringBuilder" line="231"/>
                    </scope>
                </scope>
                <scope line="238">
                    <declaration name="defaultRoot" type="String" line="239"/>
                </scope>
                <scope line="244">
                    <declaration name="remaining" type="String" line="246"/>
                    <declaration name="defaultDirectory" type="String" line="247"/>
                    <declaration name="result" type="String" line="248"/>
                    <scope line="249"/>
                    <scope line="251"/>
                </scope>
                <scope line="255">
                    <declaration name="wd" type="String" line="257"/>
                    <scope line="258">
                        <declaration name="dt" type="int" line="259"/>
                    </scope>
                    <scope line="263"/>
                    <declaration name="result" type="String" line="267"/>
                    <scope line="268"/>
                    <scope line="270"/>
                </scope>
            </method>
            <method name="isSameDrive" type="boolean" line="279">
                <params>
                    <param name="root1" type="String"/>
                    <param name="root2" type="String"/>
                </params>
            </method>
            <method name="addPrefixIfNeeded" type="String" line="285">
                <params>
                    <param name="path" type="String"/>
                </params>
                <scope line="286">
                    <scope line="287"/>
                    <scope line="289"/>
                </scope>
            </method>
            <method name="getFileSystem" type="WindowsFileSystem" line="297"/>
            <method name="isEmpty" type="boolean" line="303"/>
            <method name="emptyPath" type="WindowsPath" line="307"/>
            <method name="getFileName" type="Path" line="312">
                <comment line="315">
                    represents empty path                    
                </comment>
                <comment line="318">
                    represents root component only                    
                </comment>
                <declaration name="len" type="int" line="313"/>
                <declaration name="off" type="int" line="320"/>
            </method>
            <method name="getParent" type="WindowsPath" line="329">
                <comment line="331">
                    represents root component only                    
                </comment>
                <declaration name="off" type="int" line="333"/>
            </method>
            <method name="getRoot" type="WindowsPath" line="344"/>
            <method name="type" type="WindowsPathType" line="351"/>
            <method name="isUnc" type="boolean" line="356"/>
            <method name="needsSlashWhenResolving" type="boolean" line="360"/>
            <method name="isAbsolute" type="boolean" line="367"/>
            <method name="toWindowsPath" type="WindowsPath" line="371">
                <params>
                    <param name="path" type="Path"/>
                </params>
                <scope line="374"/>
            </method>
            <method name="relativize" type="WindowsPath" line="381">
                <params>
                    <param name="obj" type="Path"/>
                </params>
                <comment line="387">
                    can only relativize paths of the same type                    
                </comment>
                <comment line="391">
                    can only relativize paths if root component matches                    
                </comment>
                <comment line="398">
                    skip matching names                    
                </comment>
                <comment line="407">
                    append ..\ for remaining names in the base                    
                </comment>
                <comment line="413">
                    append remaining names in child                    
                </comment>
                <comment line="419">
                    drop trailing slash in result                    
                </comment>
                <declaration name="other" type="WindowsPath" line="382"/>
                <declaration name="bn" type="int" line="394"/>
                <declaration name="cn" type="int" line="395"/>
                <declaration name="n" type="int" line="398"/>
                <declaration name="i" type="int" line="399"/>
                <scope line="400"/>
                <declaration name="result" type="StringBuilder" line="407"/>
                <scope line="408"/>
                <scope line="413"/>
            </method>
            <method name="normalize" type="Path" line="424">
                <comment line="430">
                    true =&gt; ignore name                    
                </comment>
                <comment line="431">
                    number of names remaining                    
                </comment>
                <comment line="433">
                    multiple passes to eliminate all occurences of &quot;.&quot; and &quot;name/..&quot;                    
                </comment>
                <comment line="444">
                    not &quot;.&quot; or &quot;..&quot;                    
                </comment>
                <comment line="450">
                    &quot;.&quot; or something else                    
                </comment>
                <comment line="452">
                    ignore &quot;.&quot;                    
                </comment>
                <comment line="462">
                    not &quot;..&quot;                    
                </comment>
                <comment line="468">
                    &quot;..&quot; found                    
                </comment>
                <comment line="470">
                    name/&lt;ignored&gt;/.. found so mark name and &quot;..&quot; to be
                     ignored                    
                </comment>
                <comment line="477">
                    Cases:
                        C:\&lt;ignored&gt;\..
                        \\server\\share\&lt;ignored&gt;\..
                        \&lt;ignored&gt;..                    
                </comment>
                <comment line="490">
                    all proceeding names are ignored                    
                </comment>
                <comment line="499">
                    no redundant names                    
                </comment>
                <comment line="503">
                    corner case - all names removed                    
                </comment>
                <comment line="508">
                    re-constitute the path from the remaining names.                    
                </comment>
                <comment line="519">
                    drop trailing slash in result                    
                </comment>
                <declaration name="count" type="int" line="425"/>
                <declaration name="ignore" type="boolean[]" line="429"/>
                <declaration name="remaining" type="int" line="430"/>
                <declaration name="prevRemaining" type="int" line="433"/>
                <scope line="434">
                    <declaration name="prevName" type="int" line="436"/>
                    <scope line="437">
                        <declaration name="name" type="String" line="441"/>
                        <scope line="444"/>
                        <scope line="450">
                            <scope line="452"/>
                            <scope line="455"/>
                        </scope>
                        <scope line="462"/>
                        <scope line="468"/>
                        <scope line="475">
                            <scope line="480">
                                <declaration name="hasPrevious" type="boolean" line="481"/>
                                <scope line="482">
                                    <scope line="483"/>
                                </scope>
                                <scope line="488"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="503"/>
                <declaration name="result" type="StringBuilder" line="508"/>
                <scope line="511">
                    <scope line="512"/>
                </scope>
            </method>
            <method name="resolve" type="WindowsPath" line="524">
                <params>
                    <param name="obj" type="Path"/>
                </params>
                <comment line="556">
                    if different roots then return other                    
                </comment>
                <comment line="560">
                    same roots                    
                </comment>
                <declaration name="other" type="WindowsPath" line="525"/>
                <scope line="532">
                    <declaration name="result" type="String" line="533"/>
                    <scope line="534"/>
                    <scope line="536"/>
                </scope>
                <scope line="542">
                    <declaration name="result" type="String" line="543"/>
                    <scope line="544"/>
                    <scope line="546"/>
                </scope>
                <scope line="552">
                    <declaration name="thisRoot" type="String" line="556"/>
                    <declaration name="remaining" type="String" line="560"/>
                    <declaration name="result" type="String" line="561"/>
                    <scope line="562"/>
                    <scope line="564"/>
                </scope>
            </method>
            <method name="initOffsets" type="void" line="576">
                <comment line="581">
                    empty path considered to have one name element                    
                </comment>
                <scope line="577">
                    <declaration name="list" type="ArrayList&amp;lt;Integer&amp;gt;" line="578"/>
                    <scope line="579"/>
                    <scope line="582">
                        <declaration name="start" type="int" line="583"/>
                        <declaration name="off" type="int" line="584"/>
                        <scope line="585">
                            <scope line="586"/>
                            <scope line="588"/>
                        </scope>
                    </scope>
                    <scope line="596"/>
                </scope>
            </method>
            <method name="getNameCount" type="int" line="604"/>
            <method name="elementAsString" type="String" line="609">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="getName" type="WindowsPath" line="617">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="subpath" type="WindowsPath" line="625">
                <params>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                </params>
                <declaration name="sb" type="StringBuilder" line="636"/>
                <declaration name="nelems" type="Integer[]" line="637"/>
                <scope line="638"/>
            </method>
            <method name="startsWith" type="boolean" line="648">
                <params>
                    <param name="obj" type="Path"/>
                </params>
                <comment line="654">
                    if this path has a root component the given path&apos;s root must match                    
                </comment>
                <comment line="659">
                    empty path starts with itself                    
                </comment>
                <comment line="663">
                    roots match so compare elements                    
                </comment>
                <comment line="670">
                    FIXME: should compare in uppercase                    
                </comment>
                <declaration name="other" type="WindowsPath" line="651"/>
                <scope line="654"/>
                <declaration name="thisCount" type="int" line="663"/>
                <declaration name="otherCount" type="int" line="664"/>
                <scope line="665">
                    <scope line="666">
                        <declaration name="thisElement" type="String" line="667"/>
                        <declaration name="otherElement" type="String" line="668"/>
                    </scope>
                </scope>
            </method>
            <method name="endsWith" type="boolean" line="679">
                <params>
                    <param name="obj" type="Path"/>
                </params>
                <comment line="685">
                    other path is longer                    
                </comment>
                <comment line="690">
                    empty path ends in itself                    
                </comment>
                <comment line="698">
                    given path has more elements that this path                    
                </comment>
                <comment line="703">
                    compare roots                    
                </comment>
                <comment line="707">
                    FIXME: should compare in uppercase                    
                </comment>
                <comment line="712">
                    match last &apos;otherCount&apos; elements                    
                </comment>
                <comment line="717">
                    FIXME: should compare in uppercase                    
                </comment>
                <declaration name="other" type="WindowsPath" line="682"/>
                <scope line="685"/>
                <scope line="690"/>
                <declaration name="thisCount" type="int" line="694"/>
                <declaration name="otherCount" type="int" line="695"/>
                <scope line="698"/>
                <scope line="703"/>
                <declaration name="off" type="int" line="712"/>
                <scope line="713">
                    <declaration name="thisElement" type="String" line="714"/>
                    <declaration name="otherElement" type="String" line="715"/>
                </scope>
            </method>
            <method name="compareTo" type="int" line="724">
                <params>
                    <param name="obj" type="Path"/>
                </params>
                <declaration name="s1" type="String" line="727"/>
                <declaration name="s2" type="String" line="728"/>
                <declaration name="n1" type="int" line="729"/>
                <declaration name="n2" type="int" line="730"/>
                <declaration name="min" type="int" line="731"/>
                <scope line="732">
                    <declaration name="c1" type="char" line="733"/>
                    <declaration name="c2" type="char" line="734"/>
                    <scope line="735">
                        <scope line="738"/>
                    </scope>
                </scope>
            </method>
            <method name="equals" type="boolean" line="747">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="748"/>
            </method>
            <method name="hashCode" type="int" line="755">
                <comment line="757">
                    OK if two or more threads compute hash                    
                </comment>
                <declaration name="h" type="int" line="757"/>
                <scope line="758">
                    <scope line="759"/>
                </scope>
            </method>
            <method name="toString" type="String" line="768"/>
            <method name="openForReadAttributeAccess" type="long" line="777">
                <params>
                    <param name="followLinks" type="boolean"/>
                </params>
                <declaration name="flags" type="int" line="778"/>
            </method>
            <method name="checkRead" type="void" line="789">
                <declaration name="sm" type="SecurityManager" line="790"/>
                <scope line="791"/>
            </method>
            <method name="checkWrite" type="void" line="796">
                <declaration name="sm" type="SecurityManager" line="797"/>
                <scope line="798"/>
            </method>
            <method name="checkDelete" type="void" line="803">
                <declaration name="sm" type="SecurityManager" line="804"/>
                <scope line="805"/>
            </method>
            <method name="toUri" type="URI" line="811"/>
            <method name="toAbsolutePath" type="WindowsPath" line="816">
                <comment line="821">
                    permission check as per spec                    
                </comment>
                <declaration name="sm" type="SecurityManager" line="821"/>
                <scope line="822"/>
                <scope line="826"/>
                <scope line="828"/>
            </method>
            <method name="toRealPath" type="WindowsPath" line="834">
                <params>
                    <param name="options" type="LinkOption"/>
                </params>
                <declaration name="rp" type="String" line="836"/>
            </method>
            <method name="register" type="WatchKey" line="845">
                <params>
                    <param name="watcher" type="WatchService"/>
                    <param name="events" type="WatchEvent.Kind&lt;?&gt;[]"/>
                    <param name="modifiers" type="WatchEvent.Modifier"/>
                </params>
                <comment line="852">
                    When a security manager is set then we need to make a defensive
                     copy of the modifiers and check for the Windows specific FILE_TREE
                     modifier. When the modifier is present then check that permission
                     has been granted recursively.                    
                </comment>
                <declaration name="sm" type="SecurityManager" line="855"/>
                <scope line="856">
                    <declaration name="watchSubtree" type="boolean" line="857"/>
                    <declaration name="ml" type="int" line="858"/>
                    <scope line="859">
                        <declaration name="i" type="int" line="861"/>
                        <scope line="862">
                            <scope line="863"/>
                        </scope>
                    </scope>
                    <declaration name="s" type="String" line="869"/>
                </scope>
            </method>
        </class>
    </source>