<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.shell">
        <import package="java.awt.Image"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.io.File"/>
        <import package="java.io.IOException"/>
        <import package="java.util"/>
        <import package="java.util.concurrent"/>
        <import package="javax.swing.SwingConstants"/>
        <class name="Win32ShellFolder2" line="10">
            <extends class="ShellFolder"/>
            <javadoc line="10">
                Win32 Shell Folders
                  &lt;P&gt;
                  &lt;BR&gt;
                  There are two fundamental types of shell folders : file system folders
                  and non-file system folders.  File system folders are relatively easy
                  to deal with.  Non-file system folders are items such as My Computer,
                  Network Neighborhood, and the desktop.  Some of these non-file system
                  folders have special values and properties.
                  &lt;P&gt;
                  &lt;BR&gt;
                  Win32 keeps two basic data structures for shell folders.  The first
                  of these is called an ITEMIDLIST.  Usually a pointer, called an
                  LPITEMIDLIST, or more frequently just &quot;PIDL&quot;.  This structure holds
                  a series of identifiers and can be either relative to the desktop
                  (an absolute PIDL), or relative to the shell folder that contains them.
                  Some Win32 functions can take absolute or relative PIDL values, and
                  others can only accept relative values.
                  &lt;BR&gt;
                  The second data structure is an IShellFolder COM interface.  Using
                  this interface, one can enumerate the relative PIDLs in a shell
                  folder, get attributes, etc.
                  &lt;BR&gt;
                  All Win32ShellFolder2 objects which are folder types (even non-file
                  system folders) contain an IShellFolder object. Files are named in
                  directories via relative PIDLs.                
                <author>
                    Michael Martak                    
                </author>
                <author>
                    Leif Samuelsson                    
                </author>
                <author>
                    Kenneth Russell                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="initIDs" type="void" line="42"/>
            <scope line="43"/>
            <declaration name="DESKTOP" type="int" line="46"/>
            <declaration name="INTERNET" type="int" line="47"/>
            <declaration name="PROGRAMS" type="int" line="48"/>
            <declaration name="CONTROLS" type="int" line="49"/>
            <declaration name="PRINTERS" type="int" line="50"/>
            <declaration name="PERSONAL" type="int" line="51"/>
            <declaration name="FAVORITES" type="int" line="52"/>
            <declaration name="STARTUP" type="int" line="53"/>
            <declaration name="RECENT" type="int" line="54"/>
            <declaration name="SENDTO" type="int" line="55"/>
            <declaration name="BITBUCKET" type="int" line="56"/>
            <declaration name="STARTMENU" type="int" line="57"/>
            <declaration name="DESKTOPDIRECTORY" type="int" line="58"/>
            <declaration name="DRIVES" type="int" line="59"/>
            <declaration name="NETWORK" type="int" line="60"/>
            <declaration name="NETHOOD" type="int" line="61"/>
            <declaration name="FONTS" type="int" line="62"/>
            <declaration name="TEMPLATES" type="int" line="63"/>
            <declaration name="COMMON_STARTMENU" type="int" line="64"/>
            <declaration name="COMMON_PROGRAMS" type="int" line="65"/>
            <declaration name="COMMON_STARTUP" type="int" line="66"/>
            <declaration name="COMMON_DESKTOPDIRECTORY" type="int" line="67"/>
            <declaration name="APPDATA" type="int" line="68"/>
            <declaration name="PRINTHOOD" type="int" line="69"/>
            <declaration name="ALTSTARTUP" type="int" line="70"/>
            <declaration name="COMMON_ALTSTARTUP" type="int" line="71"/>
            <declaration name="COMMON_FAVORITES" type="int" line="72"/>
            <declaration name="INTERNET_CACHE" type="int" line="73"/>
            <declaration name="COOKIES" type="int" line="74"/>
            <declaration name="HISTORY" type="int" line="75"/>
            <declaration name="ATTRIB_CANCOPY" type="int" line="76"/>
            <declaration name="ATTRIB_CANMOVE" type="int" line="77"/>
            <declaration name="ATTRIB_CANLINK" type="int" line="78"/>
            <declaration name="ATTRIB_CANRENAME" type="int" line="79"/>
            <declaration name="ATTRIB_CANDELETE" type="int" line="80"/>
            <declaration name="ATTRIB_HASPROPSHEET" type="int" line="81"/>
            <declaration name="ATTRIB_DROPTARGET" type="int" line="82"/>
            <declaration name="ATTRIB_LINK" type="int" line="83"/>
            <declaration name="ATTRIB_SHARE" type="int" line="84"/>
            <declaration name="ATTRIB_READONLY" type="int" line="85"/>
            <declaration name="ATTRIB_GHOSTED" type="int" line="86"/>
            <declaration name="ATTRIB_HIDDEN" type="int" line="87"/>
            <declaration name="ATTRIB_FILESYSANCESTOR" type="int" line="88"/>
            <declaration name="ATTRIB_FOLDER" type="int" line="89"/>
            <declaration name="ATTRIB_FILESYSTEM" type="int" line="90"/>
            <declaration name="ATTRIB_HASSUBFOLDER" type="int" line="91"/>
            <declaration name="ATTRIB_VALIDATE" type="int" line="92"/>
            <declaration name="ATTRIB_REMOVABLE" type="int" line="93"/>
            <declaration name="ATTRIB_COMPRESSED" type="int" line="94"/>
            <declaration name="ATTRIB_BROWSABLE" type="int" line="95"/>
            <declaration name="ATTRIB_NONENUMERATED" type="int" line="96"/>
            <declaration name="ATTRIB_NEWCONTENT" type="int" line="97"/>
            <declaration name="SHGDN_NORMAL" type="int" line="98"/>
            <declaration name="SHGDN_INFOLDER" type="int" line="99"/>
            <declaration name="SHGDN_INCLUDE_NONFILESYS" type="int" line="100"/>
            <declaration name="SHGDN_FORADDRESSBAR" type="int" line="101"/>
            <declaration name="SHGDN_FORPARSING" type="int" line="102"/>
            <declaration name="SystemIcon" type="enum" line="103"/>
            <scope line="103"/>
            <declaration name="iconID" type="int" line="103"/>
            <method name="SystemIcon" type="constructor" line="104">
                <params>
                    <param name="iconID" type="int"/>
                </params>
            </method>
            <method name="getIconID" type="int" line="107"/>
        </class>
        <class name="FolderDisposer" line="111">
            <implements interface="sun.java2d.DisposerRecord"/>
            <declaration name="absolutePIDL" type="long" line="112"/>
            <declaration name="pIShellFolder" type="long" line="113"/>
            <declaration name="relativePIDL" type="long" line="114"/>
            <declaration name="disposed" type="boolean" line="115"/>
            <method name="dispose" type="void" line="116">
                <anonymous_class line="118">
                    <method name="call" type="Void" line="119">
                        <scope line="120"/>
                        <scope line="123"/>
                        <scope line="126"/>
                    </method>
                </anonymous_class>
            </method>
            <declaration name="disposer" type="FolderDisposer" line="136"/>
            <method name="setIShellFolder" type="void" line="137">
                <params>
                    <param name="pIShellFolder" type="long"/>
                </params>
            </method>
            <method name="setRelativePIDL" type="void" line="140">
                <params>
                    <param name="relativePIDL" type="long"/>
                </params>
            </method>
            <declaration name="pIShellIcon" type="long" line="143"/>
            <declaration name="folderType" type="String" line="144"/>
            <declaration name="displayName" type="String" line="145"/>
            <declaration name="smallIcon" type="Image" line="146"/>
            <declaration name="largeIcon" type="Image" line="147"/>
            <declaration name="isDir" type="Boolean" line="148"/>
            <declaration name="isPersonal" type="boolean" line="149"/>
            <method name="composePathForCsidl" type="String" line="150">
                <params>
                    <param name="csidl" type="int"/>
                </params>
                <declaration name="path" type="String" line="151"/>
            </method>
            <javadoc line="154">
                Create a system special shell folder, such as the
                  desktop or Network Neighborhood.                
            </javadoc>
            <method name="Win32ShellFolder2" type="constructor" line="158">
                <params>
                    <param name="csidl" type="int"/>
                </params>
                <anonymous_class line="160">
                    <method name="call" type="Void" line="161">
                        <scope line="162"/>
                        <scope line="165">
                            <declaration name="pIDL" type="long" line="167"/>
                            <scope line="169">
                                <declaration name="childPIDL" type="long" line="170"/>
                                <scope line="171">
                                    <scope line="173"/>
                                    <scope line="176"/>
                                </scope>
                                <scope line="180"/>
                            </scope>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="191">
                Create a system shell folder                
            </javadoc>
            <method name="Win32ShellFolder2" type="constructor" line="194">
                <params>
                    <param name="parent" type="Win32ShellFolder2"/>
                    <param name="pIShellFolder" type="long"/>
                    <param name="relativePIDL" type="long"/>
                    <param name="path" type="String"/>
                </params>
            </method>
            <javadoc line="200">
                Creates a shell folder with a parent and relative PIDL                
            </javadoc>
            <method name="Win32ShellFolder2" type="constructor" line="203">
                <params>
                    <param name="parent" type="Win32ShellFolder2"/>
                    <param name="relativePIDL" type="long"/>
                </params>
                <anonymous_class line="204">
                    <method name="call" type="String" line="205"/>
                </anonymous_class>
            </method>
            <method name="initDesktop" type="void" line="213"/>
            <method name="initSpecial" type="void" line="214"/>
            <javadoc line="215">
                Marks this folder as being the My Documents (Personal) folder                
            </javadoc>
            <method name="setIsPersonal" type="void" line="218"/>
            <javadoc line="221">
                This method is implemented to make sure that no instances
                  of &lt;code&gt;ShellFolder&lt;/code&gt; are ever serialized. If &lt;code&gt;isFileSystem()&lt;/code&gt; returns
                  &lt;code&gt;true&lt;/code&gt;, then the object is representable with an instance of
                  &lt;code&gt;java.io.File&lt;/code&gt; instead. If not, then the object depends
                  on native PIDL state and should not be serialized.                
                <return>
                    a <code>java.io.File</code> replacement object. If the folder
                      is a not a normal directory, then returns the first non-removable
                      drive (normally "C:\").                    
                </return>
            </javadoc>
            <method name="writeReplace" type="Object" line="231">
                <anonymous_class line="232">
                    <method name="call" type="File" line="233">
                        <scope line="234"/>
                        <scope line="237">
                            <declaration name="drives" type="Win32ShellFolder2" line="238"/>
                            <scope line="239">
                                <declaration name="driveRoots" type="File[]" line="240"/>
                                <scope line="241">
                                    <scope line="242">
                                        <scope line="243">
                                            <declaration name="sf" type="Win32ShellFolder2" line="244"/>
                                            <scope line="245"/>
                                        </scope>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="258">
                Finalizer to clean up any COM objects or PIDLs used by this object.                
            </javadoc>
            <method name="dispose" type="void" line="261"/>
            <method name="getNextPIDLEntry" type="long" line="264"/>
            <method name="copyFirstPIDLEntry" type="long" line="265"/>
            <method name="combinePIDLs" type="long" line="266"/>
            <method name="releasePIDL" type="void" line="267"/>
            <method name="releaseIShellFolder" type="void" line="268"/>
            <javadoc line="269">
                Accessor for IShellFolder                
            </javadoc>
            <method name="getIShellFolder" type="long" line="272">
                <scope line="273">
                    <scope line="274">
                        <anonymous_class line="275">
                            <method name="call" type="Long" line="276">
                                <declaration name="parentIShellFolder" type="long" line="279"/>
                                <scope line="280"/>
                                <declaration name="pIShellFolder" type="long" line="283"/>
                                <scope line="284"/>
                            </method>
                        </anonymous_class>
                    </scope>
                    <scope line="292"/>
                </scope>
            </method>
            <javadoc line="297">
                Get the parent ShellFolder&apos;s IShellFolder interface                
            </javadoc>
            <method name="getParentIShellFolder" type="long" line="300">
                <declaration name="parent" type="Win32ShellFolder2" line="301"/>
                <scope line="302"/>
            </method>
            <javadoc line="307">
                Accessor for relative PIDL                
            </javadoc>
            <method name="getRelativePIDL" type="long" line="310">
                <scope line="311"/>
            </method>
            <method name="getAbsolutePIDL" type="long" line="316">
                <scope line="317"/>
                <scope line="320">
                    <scope line="321"/>
                </scope>
            </method>
            <javadoc line="327">
                Helper function to return the desktop                
            </javadoc>
            <method name="getDesktop" type="Win32ShellFolder2" line="330"/>
            <javadoc line="333">
                Helper function to return the desktop IShellFolder interface                
            </javadoc>
            <method name="getDesktopIShellFolder" type="long" line="336"/>
            <method name="pathsEqual" type="boolean" line="339">
                <params>
                    <param name="path1" type="String"/>
                    <param name="path2" type="String"/>
                </params>
            </method>
            <javadoc line="342">
                Check to see if two ShellFolder objects are the same                
            </javadoc>
            <method name="equals" type="boolean" line="345">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="346">
                    <scope line="347"/>
                </scope>
                <declaration name="rhs" type="Win32ShellFolder2" line="352"/>
                <scope line="353"/>
                <scope line="356"/>
                <scope line="359">
                    <scope line="360"/>
                    <scope line="363"/>
                </scope>
            </method>
            <method name="pidlsEqual" type="boolean" line="369">
                <params>
                    <param name="pIShellFolder" type="long"/>
                    <param name="pidl1" type="long"/>
                    <param name="pidl2" type="long"/>
                </params>
                <anonymous_class line="370">
                    <method name="call" type="Boolean" line="371"/>
                </anonymous_class>
            </method>
            <method name="compareIDs" type="int" line="377"/>
            <declaration name="cachedIsFileSystem" type="Boolean" line="378"/>
            <javadoc line="379">
                @return Whether this is a file system shell folder                
            </javadoc>
            <method name="isFileSystem" type="boolean" line="382">
                <scope line="383"/>
            </method>
            <javadoc line="388">
                Return whether the given attribute flag is set for this object                
            </javadoc>
            <method name="hasAttribute" type="boolean" line="391">
                <params>
                    <param name="attribute" type="int"/>
                </params>
                <anonymous_class line="392">
                    <method name="call" type="Boolean" line="393"/>
                </anonymous_class>
                <declaration name="result" type="Boolean" line="392"/>
            </method>
            <method name="getAttributes0" type="int" line="400"/>
            <javadoc line="400">
                Returns the queried attributes specified in attrsMask.
                  Could plausibly be used for attribute caching but have to be
                  very careful not to touch network drives and file system roots
                  with a full attrsMask
                  NOTE: this method uses COM and must be called on the &apos;COM thread&apos;. See ComInvoker for the details                
            </javadoc>
            <method name="getFileSystemPath" type="String" line="408">
                <params>
                    <param name="parentIShellFolder" type="long"/>
                    <param name="relativePIDL" type="long"/>
                </params>
                <declaration name="linkedFolder" type="int" line="409"/>
                <scope line="410">
                    <declaration name="s" type="String" line="411"/>
                    <scope line="412"/>
                </scope>
            </method>
            <method name="getFileSystemPath" type="String" line="418">
                <params>
                    <param name="csidl" type="int"/>
                </params>
                <anonymous_class line="419">
                    <method name="call" type="String" line="420"/>
                </anonymous_class>
            </method>
            <method name="getFileSystemPath0" type="String" line="426"/>
            <method name="isNetworkRoot" type="boolean" line="427">
                <params>
                    <param name="path" type="String"/>
                </params>
            </method>
            <javadoc line="430">
                @return The parent shell folder of this shell folder, null if
                  there is no parent                
            </javadoc>
            <method name="getParentFile" type="File" line="434"/>
            <method name="isDirectory" type="boolean" line="437">
                <scope line="438">
                    <scope line="439"/>
                    <scope line="442">
                        <declaration name="linkLocation" type="ShellFolder" line="443"/>
                    </scope>
                    <scope line="446"/>
                </scope>
            </method>
            <method name="getEnumObjects" type="long" line="452">
                <params>
                    <param name="includeHiddenFiles" type="boolean"/>
                </params>
                <anonymous_class line="453">
                    <method name="call" type="Long" line="454">
                        <declaration name="isDesktop" type="boolean" line="455"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="getEnumObjects" type="long" line="461"/>
            <method name="getNextChild" type="long" line="462"/>
            <method name="releaseEnumObjects" type="void" line="463"/>
            <method name="bindToObject" type="long" line="464"/>
            <javadoc line="465">
                @return An array of shell folders that are children of this shell folder
                  object. The array will be empty if the folder is empty.  Returns
                  &lt;code&gt;null&lt;/code&gt; if this shellfolder does not denote a directory.                
            </javadoc>
            <method name="listFiles" type="File[]" line="470">
                <params>
                    <param name="includeHiddenFiles" type="boolean"/>
                </params>
                <declaration name="security" type="SecurityManager" line="471"/>
                <scope line="472"/>
                <scope line="475">
                    <anonymous_class line="476">
                        <method name="call" type="File[]" line="477">
                            <scope line="478"/>
                            <scope line="481"/>
                            <declaration name="desktop" type="Win32ShellFolder2" line="484"/>
                            <declaration name="personal" type="Win32ShellFolder2" line="485"/>
                            <declaration name="pIShellFolder" type="long" line="486"/>
                            <declaration name="list" type="ArrayList&lt;Win32ShellFolder2&gt;" line="487"/>
                            <declaration name="pEnumObjects" type="long" line="488"/>
                            <scope line="489">
                                <scope line="490">
                                    <declaration name="childPIDL" type="long" line="491"/>
                                    <declaration name="testedAttrs" type="int" line="492"/>
                                    <scope line="493">
                                        <declaration name="releasePIDL" type="boolean" line="495"/>
                                        <scope line="496">
                                            <declaration name="childFolder" type="Win32ShellFolder2" line="497"/>
                                            <scope line="498"/>
                                            <scope line="501"/>
                                        </scope>
                                        <scope line="507"/>
                                    </scope>
                                </scope>
                                <scope line="513"/>
                            </scope>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="522"/>
            </method>
            <javadoc line="526">
                Look for (possibly special) child folder by it&apos;s path                
                <return>
                    The child shellfolder, or null if not found.                    
                </return>
            </javadoc>
            <method name="getChildByPath" type="Win32ShellFolder2" line="530">
                <params>
                    <param name="filePath" type="String"/>
                </params>
                <anonymous_class line="531">
                    <method name="call" type="Win32ShellFolder2" line="532">
                        <declaration name="pIShellFolder" type="long" line="533"/>
                        <declaration name="pEnumObjects" type="long" line="534"/>
                        <declaration name="child" type="Win32ShellFolder2" line="535"/>
                        <declaration name="childPIDL" type="long" line="536"/>
                        <scope line="537">
                            <scope line="538">
                                <declaration name="path" type="String" line="539"/>
                                <scope line="540">
                                    <declaration name="childIShellFolder" type="long" line="541"/>
                                </scope>
                            </scope>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <declaration name="cachedIsLink" type="Boolean" line="554"/>
            <javadoc line="555">
                @return Whether this shell folder is a link                
            </javadoc>
            <method name="isLink" type="boolean" line="558">
                <scope line="559"/>
            </method>
            <javadoc line="564">
                @return Whether this shell folder is marked as hidden                
            </javadoc>
            <method name="isHidden" type="boolean" line="567"/>
            <method name="getLinkLocation" type="long" line="570"/>
            <javadoc line="571">
                @return The shell folder linked to by this shell folder, or null
                  if this shell folder is not a link or is a broken or invalid link                
            </javadoc>
            <method name="getLinkLocation" type="ShellFolder" line="575"/>
            <method name="getLinkLocation" type="ShellFolder" line="578">
                <params>
                    <param name="resolve" type="boolean"/>
                </params>
                <anonymous_class line="579">
                    <method name="call" type="ShellFolder" line="580">
                        <scope line="581"/>
                        <declaration name="location" type="ShellFolder" line="584"/>
                        <declaration name="linkLocationPIDL" type="long" line="585"/>
                        <scope line="586">
                            <scope line="587"/>
                            <scope line="590"/>
                            <scope line="592"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="parseDisplayName" type="long" line="600">
                <params>
                    <param name="name" type="String"/>
                </params>
                <anonymous_class line="601">
                    <method name="call" type="Long" line="602"/>
                </anonymous_class>
            </method>
            <method name="parseDisplayName0" type="long" line="608"/>
            <method name="getDisplayNameOf" type="String" line="609"/>
            <javadoc line="610">
                @return The name used to display this shell folder                
            </javadoc>
            <method name="getDisplayName" type="String" line="613">
                <scope line="614">
                    <anonymous_class line="615">
                        <method name="call" type="String" line="616"/>
                    </anonymous_class>
                </scope>
            </method>
            <method name="getFolderType" type="String" line="624"/>
            <javadoc line="625">
                @return The type of shell folder as a string                
            </javadoc>
            <method name="getFolderType" type="String" line="628">
                <scope line="629">
                    <declaration name="absolutePIDL" type="long" line="630"/>
                    <anonymous_class line="631">
                        <method name="call" type="String" line="632"/>
                    </anonymous_class>
                </scope>
            </method>
            <method name="getExecutableType" type="String" line="640"/>
            <javadoc line="641">
                @return The executable type as a string                
            </javadoc>
            <method name="getExecutableType" type="String" line="644">
                <scope line="645"/>
            </method>
            <declaration name="smallSystemImages" type="Map" line="650"/>
            <declaration name="largeSystemImages" type="Map" line="651"/>
            <declaration name="smallLinkedSystemImages" type="Map" line="652"/>
            <declaration name="largeLinkedSystemImages" type="Map" line="653"/>
            <method name="getIShellIcon" type="long" line="654"/>
            <method name="getIconIndex" type="int" line="655"/>
            <method name="getIcon" type="long" line="656"/>
            <method name="extractIcon" type="long" line="657"/>
            <method name="getSystemIcon" type="long" line="658"/>
            <method name="getIconResource" type="long" line="659"/>
            <method name="getIconBits" type="int[]" line="660"/>
            <method name="disposeIcon" type="void" line="661"/>
            <method name="getStandardViewButton0" type="int[]" line="662"/>
            <method name="getIShellIcon" type="long" line="663">
                <scope line="664"/>
            </method>
            <method name="makeIcon" type="Image" line="669">
                <params>
                    <param name="hIcon" type="long"/>
                    <param name="getLargeIcon" type="boolean"/>
                </params>
                <scope line="670">
                    <declaration name="size" type="int" line="671"/>
                    <declaration name="iconBits" type="int[]" line="672"/>
                    <scope line="673">
                        <declaration name="img" type="BufferedImage" line="674"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="681">
                @return The icon image used to display this shell folder                
            </javadoc>
            <method name="getIcon" type="Image" line="684">
                <params>
                    <param name="getLargeIcon" type="boolean"/>
                </params>
                <declaration name="icon" type="Image" line="685"/>
                <scope line="686">
                    <anonymous_class line="687">
                        <method name="call" type="Image" line="688">
                            <declaration name="newIcon" type="Image" line="689"/>
                            <scope line="690">
                                <declaration name="parentIShellIcon" type="long" line="691"/>
                                <declaration name="relativePIDL" type="long" line="692"/>
                                <declaration name="index" type="int" line="693"/>
                                <scope line="694">
                                    <declaration name="imageCache" type="Map" line="695"/>
                                    <scope line="696"/>
                                    <scope line="699"/>
                                    <scope line="703">
                                        <declaration name="hIcon" type="long" line="704"/>
                                        <scope line="707"/>
                                    </scope>
                                </scope>
                            </scope>
                            <scope line="713">
                                <declaration name="hIcon" type="long" line="714"/>
                            </scope>
                            <scope line="718"/>
                        </method>
                    </anonymous_class>
                    <scope line="725"/>
                    <scope line="728"/>
                </scope>
            </method>
            <javadoc line="734">
                Gets an icon from the Windows system icon list as an &lt;code&gt;Image&lt;/code&gt;                
            </javadoc>
            <method name="getSystemIcon" type="Image" line="737">
                <params>
                    <param name="iconType" type="SystemIcon"/>
                </params>
                <declaration name="hIcon" type="long" line="738"/>
                <declaration name="icon" type="Image" line="739"/>
            </method>
            <javadoc line="743">
                Gets an icon from the Windows system icon list as an &lt;code&gt;Image&lt;/code&gt;                
            </javadoc>
            <method name="getShell32Icon" type="Image" line="746">
                <params>
                    <param name="iconID" type="int"/>
                    <param name="getLargeIcon" type="boolean"/>
                </params>
                <declaration name="useVGAColors" type="boolean" line="747"/>
                <declaration name="size" type="int" line="748"/>
                <declaration name="toolkit" type="Toolkit" line="749"/>
                <declaration name="shellIconBPP" type="String" line="750"/>
                <scope line="751"/>
                <declaration name="hIcon" type="long" line="754"/>
                <scope line="755">
                    <declaration name="icon" type="Image" line="756"/>
                </scope>
            </method>
            <javadoc line="762">
                Returns the canonical form of this abstract pathname.  Equivalent to
                  &lt;code&gt;new&amp;nbsp;Win32ShellFolder2(getParentFile(), this.{@link java.io.File#getCanonicalPath}())&lt;/code&gt;.                
                <see>
                    java.io.File#getCanonicalFile                    
                </see>
            </javadoc>
            <method name="getCanonicalFile" type="File" line="767"/>
            <method name="isSpecial" type="boolean" line="770"/>
            <javadoc line="773">
                Compares this object with the specified object for order.                
                <see>
                    sun.awt.shell.ShellFolder#compareTo(File)                    
                </see>
            </javadoc>
            <method name="compareTo" type="int" line="777">
                <params>
                    <param name="file2" type="File"/>
                </params>
                <scope line="778">
                    <scope line="779"/>
                    <scope line="782"/>
                </scope>
            </method>
            <declaration name="LVCFMT_LEFT" type="int" line="788"/>
            <declaration name="LVCFMT_RIGHT" type="int" line="789"/>
            <declaration name="LVCFMT_CENTER" type="int" line="790"/>
            <method name="getFolderColumns" type="ShellFolderColumnInfo[]" line="791">
                <anonymous_class line="792">
                    <method name="call" type="ShellFolderColumnInfo[]" line="793">
                        <declaration name="columns" type="ShellFolderColumnInfo[]" line="794"/>
                        <scope line="795">
                            <declaration name="notNullColumns" type="List&lt;ShellFolderColumnInfo&gt;" line="796"/>
                            <scope line="797">
                                <declaration name="column" type="ShellFolderColumnInfo" line="798"/>
                                <scope line="799"/>
                            </scope>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="getFolderColumnValue" type="Object" line="813">
                <params>
                    <param name="column" type="int"/>
                </params>
                <anonymous_class line="814">
                    <method name="call" type="Object" line="815"/>
                </anonymous_class>
            </method>
            <method name="doGetColumnInfo" type="ShellFolderColumnInfo[]" line="821"/>
            <method name="doGetColumnValue" type="Object" line="822"/>
            <method name="compareIDsByColumn" type="int" line="823"/>
            <method name="sortChildren" type="void" line="824">
                <params>
                    <param name="files" type="List<? extends File>"/>
                </params>
                <anonymous_class line="825">
                    <method name="call" type="Void" line="826"/>
                </anonymous_class>
            </method>
            <class name="ColumnComparator" line="833">
                <implements interface="Comparator">
                    <type_params>
                        <type_param name="File"/>
                    </type_params>
                </implements>
                <declaration name="parentIShellFolder" type="long" line="834"/>
                <declaration name="columnIdx" type="int" line="835"/>
                <method name="ColumnComparator" type="constructor" line="836">
                    <params>
                        <param name="parentIShellFolder" type="long"/>
                        <param name="columnIdx" type="int"/>
                    </params>
                </method>
                <method name="compare" type="int" line="840">
                    <params>
                        <param name="o" type="File"/>
                        <param name="o1" type="File"/>
                    </params>
                    <anonymous_class line="841">
                        <method name="call" type="Integer" line="842">
                            <scope line="843"/>
                        </method>
                    </anonymous_class>
                    <declaration name="result" type="Integer" line="841"/>
                </method>
            </class>
        </class>
    </source>