<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.shell">
        <import package="java.awt.Image"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.io.File"/>
        <import package="java.io.IOException"/>
        <import package="java.util"/>
        <import package="java.util.concurrent"/>
        <import package="javax.swing.SwingConstants"/>
        <class name="Win32ShellFolder2" line="40">
            <extends class="ShellFolder"/>
            <comment line="81">
                Win32 Shell Folder Constants                
            </comment>
            <comment line="113">
                Win32 shell folder attributes                
            </comment>
            <comment line="137">
                IShellFolder::GetDisplayNameOf constants                
            </comment>
            <comment line="144">
                Values for system call LoadIcon()                
            </comment>
            <comment line="207">
                The following are for caching various shell folder properties.                
            </comment>
            <comment line="217">
                The following is to identify the My Documents folder as being special                
            </comment>
            <comment line="307">
                Initializes the desktop shell folder
                 NOTE: this method uses COM and must be called on the &apos;COM thread&apos;. See ComInvoker for the details                
            </comment>
            <comment line="311">
                Initializes a special, non-file system shell folder
                 from one of the above constants
                 NOTE: this method uses COM and must be called on the &apos;COM thread&apos;. See ComInvoker for the details                
            </comment>
            <comment line="368">
                Given a (possibly multi-level) relative PIDL (with respect to
                 the desktop, at least in all of the usage cases in this code),
                 return a pointer to the next entry. Does not mutate the PIDL in
                 any way. Returns 0 if the null terminator is reached.
                 Needs to be accessible to Win32ShellFolderManager2                
            </comment>
            <comment line="375">
                Given a (possibly multi-level) relative PIDL (with respect to
                 the desktop, at least in all of the usage cases in this code),
                 copy the first entry into a newly-allocated PIDL. Returns 0 if
                 the PIDL is at the end of the list.
                 Needs to be accessible to Win32ShellFolderManager2                
            </comment>
            <comment line="382">
                Given a parent&apos;s absolute PIDL and our relative PIDL, build an absolute PIDL                
            </comment>
            <comment line="385">
                Release a PIDL object
                 Needs to be accessible to Win32ShellFolderManager2                
            </comment>
            <comment line="389">
                Release an IShellFolder object
                 NOTE: this method uses COM and must be called on the &apos;COM thread&apos;. See ComInvoker for the details                
            </comment>
            <comment line="525">
                NOTE: this method uses COM and must be called on the &apos;COM thread&apos;. See ComInvoker for the details                
            </comment>
            <comment line="568">
                Return the path to the underlying file system object
                 Should be called from the COM thread                
            </comment>
            <comment line="585">
                Needs to be accessible to Win32ShellFolderManager2                
            </comment>
            <comment line="594">
                NOTE: this method uses COM and must be called on the &apos;COM thread&apos;. See ComInvoker for the details                
            </comment>
            <comment line="597">
                Return whether the path is a network root.
                 Path is assumed to be non-null                
            </comment>
            <comment line="627">
                Functions for enumerating an IShellFolder&apos;s children                
            </comment>
            <comment line="630">
                Returns an IEnumIDList interface for an IShellFolder.  The value
                 returned must be released using releaseEnumObjects().                
            </comment>
            <comment line="642">
                Returns an IEnumIDList interface for an IShellFolder.  The value
                 returned must be released using releaseEnumObjects().
                 NOTE: this method uses COM and must be called on the &apos;COM thread&apos;. See ComInvoker for the details                
            </comment>
            <comment line="647">
                Returns the next sequential child as a relative PIDL
                 from an IEnumIDList interface.  The value returned must
                 be released using releasePIDL().
                 NOTE: this method uses COM and must be called on the &apos;COM thread&apos;. See ComInvoker for the details                
            </comment>
            <comment line="652">
                Releases the IEnumIDList interface
                 NOTE: this method uses COM and must be called on the &apos;COM thread&apos;. See ComInvoker for the details                
            </comment>
            <comment line="656">
                Returns the IShellFolder of a child from a parent IShellFolder
                 and a relative PIDL.  The value returned must be released
                 using releaseIShellFolder().
                 NOTE: this method uses COM and must be called on the &apos;COM thread&apos;. See ComInvoker for the details                
            </comment>
            <comment line="787">
                Return the link location of a shell folder
                 NOTE: this method uses COM and must be called on the &apos;COM thread&apos;. See ComInvoker for the details                
            </comment>
            <comment line="827">
                Parse a display name into a PIDL relative to the current IShellFolder.                
            </comment>
            <comment line="836">
                NOTE: this method uses COM and must be called on the &apos;COM thread&apos;. See ComInvoker for the details                
            </comment>
            <comment line="839">
                Return the display name of a shell folder
                 NOTE: this method uses COM and must be called on the &apos;COM thread&apos;. See ComInvoker for the details                
            </comment>
            <comment line="861">
                Return the folder type of a shell folder
                 NOTE: this method uses COM and must be called on the &apos;COM thread&apos;. See ComInvoker for the details                
            </comment>
            <comment line="881">
                Return the executable type of a file system shell folder                
            </comment>
            <comment line="896">
                Icons                
            </comment>
            <comment line="903">
                NOTE: this method uses COM and must be called on the &apos;COM thread&apos;. See ComInvoker for the details                
            </comment>
            <comment line="906">
                NOTE: this method uses COM and must be called on the &apos;COM thread&apos;. See ComInvoker for the details                
            </comment>
            <comment line="909">
                Return the icon of a file system shell folder in the form of an HICON                
            </comment>
            <comment line="912">
                NOTE: this method uses COM and must be called on the &apos;COM thread&apos;. See ComInvoker for the details                
            </comment>
            <comment line="916">
                Returns an icon from the Windows system icon list in the form of an HICON                
            </comment>
            <comment line="921">
                Note: useVGAColors is ignored on XP and later                
            </comment>
            <comment line="923">
                Return the bits from an HICON.  This has a side effect of setting
                 the imageHash variable for efficient caching / comparing.                
            </comment>
            <comment line="926">
                Dispose the HICON                
            </comment>
            <comment line="931">
                Should be called from the COM thread                
            </comment>
            <comment line="1058">
                Indicates whether this is a special folder (includes My Documents)                
            </comment>
            <comment line="1081">
                native constants from commctrl.h                
            </comment>
            <comment line="1124">
                NOTE: this method uses COM and must be called on the &apos;COM thread&apos;. See ComInvoker for the details                
            </comment>
            <comment line="1127">
                NOTE: this method uses COM and must be called on the &apos;COM thread&apos;. See ComInvoker for the details                
            </comment>
            <comment line="1130">
                NOTE: this method uses COM and must be called on the &apos;COM thread&apos;. See ComInvoker for the details                
            </comment>
            <javadoc line="40">
                Win32 Shell Folders
                  &lt;P&gt;
                  &lt;BR&gt;
                  There are two fundamental types of shell folders : file system folders
                  and non-file system folders.  File system folders are relatively easy
                  to deal with.  Non-file system folders are items such as My Computer,
                  Network Neighborhood, and the desktop.  Some of these non-file system
                  folders have special values and properties.
                  &lt;P&gt;
                  &lt;BR&gt;
                  Win32 keeps two basic data structures for shell folders.  The first
                  of these is called an ITEMIDLIST.  Usually a pointer, called an
                  LPITEMIDLIST, or more frequently just &quot;PIDL&quot;.  This structure holds
                  a series of identifiers and can be either relative to the desktop
                  (an absolute PIDL), or relative to the shell folder that contains them.
                  Some Win32 functions can take absolute or relative PIDL values, and
                  others can only accept relative values.
                  &lt;BR&gt;
                  The second data structure is an IShellFolder COM interface.  Using
                  this interface, one can enumerate the relative PIDLs in a shell
                  folder, get attributes, etc.
                  &lt;BR&gt;
                  All Win32ShellFolder2 objects which are folder types (even non-file
                  system folders) contain an IShellFolder object. Files are named in
                  directories via relative PIDLs.                
                <author>
                    Michael Martak                    
                </author>
                <author>
                    Leif Samuelsson                    
                </author>
                <author>
                    Kenneth Russell                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="initIDs" type="void" line="74"/>
            <scope line="76"/>
            <declaration name="DESKTOP" type="int" line="81"/>
            <declaration name="INTERNET" type="int" line="82"/>
            <declaration name="PROGRAMS" type="int" line="83"/>
            <declaration name="CONTROLS" type="int" line="84"/>
            <declaration name="PRINTERS" type="int" line="85"/>
            <declaration name="PERSONAL" type="int" line="86"/>
            <declaration name="FAVORITES" type="int" line="87"/>
            <declaration name="STARTUP" type="int" line="88"/>
            <declaration name="RECENT" type="int" line="89"/>
            <declaration name="SENDTO" type="int" line="90"/>
            <declaration name="BITBUCKET" type="int" line="91"/>
            <declaration name="STARTMENU" type="int" line="92"/>
            <declaration name="DESKTOPDIRECTORY" type="int" line="93"/>
            <declaration name="DRIVES" type="int" line="94"/>
            <declaration name="NETWORK" type="int" line="95"/>
            <declaration name="NETHOOD" type="int" line="96"/>
            <declaration name="FONTS" type="int" line="97"/>
            <declaration name="TEMPLATES" type="int" line="98"/>
            <declaration name="COMMON_STARTMENU" type="int" line="99"/>
            <declaration name="COMMON_PROGRAMS" type="int" line="100"/>
            <declaration name="COMMON_STARTUP" type="int" line="101"/>
            <declaration name="COMMON_DESKTOPDIRECTORY" type="int" line="102"/>
            <declaration name="APPDATA" type="int" line="103"/>
            <declaration name="PRINTHOOD" type="int" line="104"/>
            <declaration name="ALTSTARTUP" type="int" line="105"/>
            <declaration name="COMMON_ALTSTARTUP" type="int" line="106"/>
            <declaration name="COMMON_FAVORITES" type="int" line="107"/>
            <declaration name="INTERNET_CACHE" type="int" line="108"/>
            <declaration name="COOKIES" type="int" line="109"/>
            <declaration name="HISTORY" type="int" line="110"/>
            <declaration name="ATTRIB_CANCOPY" type="int" line="113"/>
            <declaration name="ATTRIB_CANMOVE" type="int" line="114"/>
            <declaration name="ATTRIB_CANLINK" type="int" line="115"/>
            <declaration name="ATTRIB_CANRENAME" type="int" line="116"/>
            <declaration name="ATTRIB_CANDELETE" type="int" line="117"/>
            <declaration name="ATTRIB_HASPROPSHEET" type="int" line="118"/>
            <declaration name="ATTRIB_DROPTARGET" type="int" line="119"/>
            <declaration name="ATTRIB_LINK" type="int" line="120"/>
            <declaration name="ATTRIB_SHARE" type="int" line="121"/>
            <declaration name="ATTRIB_READONLY" type="int" line="122"/>
            <declaration name="ATTRIB_GHOSTED" type="int" line="123"/>
            <declaration name="ATTRIB_HIDDEN" type="int" line="124"/>
            <declaration name="ATTRIB_FILESYSANCESTOR" type="int" line="125"/>
            <declaration name="ATTRIB_FOLDER" type="int" line="126"/>
            <declaration name="ATTRIB_FILESYSTEM" type="int" line="127"/>
            <declaration name="ATTRIB_HASSUBFOLDER" type="int" line="128"/>
            <declaration name="ATTRIB_VALIDATE" type="int" line="129"/>
            <declaration name="ATTRIB_REMOVABLE" type="int" line="130"/>
            <declaration name="ATTRIB_COMPRESSED" type="int" line="131"/>
            <declaration name="ATTRIB_BROWSABLE" type="int" line="132"/>
            <declaration name="ATTRIB_NONENUMERATED" type="int" line="133"/>
            <declaration name="ATTRIB_NEWCONTENT" type="int" line="134"/>
            <declaration name="SHGDN_NORMAL" type="int" line="137"/>
            <declaration name="SHGDN_INFOLDER" type="int" line="138"/>
            <declaration name="SHGDN_INCLUDE_NONFILESYS" type="int" line="139"/>
            <declaration name="SHGDN_FORADDRESSBAR" type="int" line="140"/>
            <declaration name="SHGDN_FORPARSING" type="int" line="141"/>
            <declaration name="iconID" type="int" line="155"/>
            <method name="SystemIcon" type="constructor" line="157">
                <params>
                    <param name="iconID" type="int"/>
                </params>
            </method>
            <method name="getIconID" type="int" line="161"/>
            <class name="FolderDisposer" line="166">
                <comment line="168">
                    This is cached as a concession to getFolderType(), which needs
                     an absolute PIDL.                    
                </comment>
                <comment line="173">
                    We keep track of shell folders through the IShellFolder
                     interface of their parents plus their relative PIDL.                    
                </comment>
                <comment line="1156">
                    compares 2 objects within this folder by the specified column                    
                </comment>
                <implements interface="sun.java2d.DisposerRecord"/>
                <declaration name="absolutePIDL" type="long" line="171"/>
                <declaration name="pIShellFolder" type="long" line="176"/>
                <declaration name="relativePIDL" type="long" line="177"/>
                <declaration name="disposed" type="boolean" line="179"/>
                <method name="dispose" type="void" line="180">
                    <anonymous_class line="182">
                        <method name="call" type="Void" line="183">
                            <scope line="184"/>
                            <scope line="187"/>
                            <scope line="190"/>
                        </method>
                    </anonymous_class>
                </method>
            </class>
            <declaration name="disposer" type="FolderDisposer" line="199"/>
            <method name="setIShellFolder" type="void" line="200">
                <params>
                    <param name="pIShellFolder" type="long"/>
                </params>
            </method>
            <method name="setRelativePIDL" type="void" line="203">
                <params>
                    <param name="relativePIDL" type="long"/>
                </params>
            </method>
            <declaration name="pIShellIcon" type="long" line="209"/>
            <declaration name="folderType" type="String" line="210"/>
            <declaration name="displayName" type="String" line="211"/>
            <declaration name="smallIcon" type="Image" line="212"/>
            <declaration name="largeIcon" type="Image" line="213"/>
            <declaration name="isDir" type="Boolean" line="214"/>
            <declaration name="isPersonal" type="boolean" line="219"/>
            <method name="composePathForCsidl" type="String" line="221">
                <params>
                    <param name="csidl" type="int"/>
                </params>
                <declaration name="path" type="String" line="222"/>
            </method>
            <javadoc line="228">
                Create a system special shell folder, such as the
                  desktop or Network Neighborhood.                
            </javadoc>
            <method name="Win32ShellFolder2" type="constructor" line="232">
                <params>
                    <param name="csidl" type="int"/>
                </params>
                <comment line="234">
                    Desktop is parent of DRIVES and NETWORK, not necessarily
                     other special shell folders.                    
                </comment>
                <comment line="244">
                    At this point, the native method initSpecial() has set our relativePIDL
                     relative to the Desktop, which may not be our immediate parent. We need
                     to traverse this ID list and break it into a chain of shell folders from
                     the top, with each one having an immediate parent and a relativePIDL
                     relative to that parent.                    
                </comment>
                <comment line="252">
                    Get a child pidl relative to &apos;parent&apos;                    
                </comment>
                <comment line="255">
                    Get a handle to the the rest of the ID list
                     i,e, parent&apos;s grandchilren and down                    
                </comment>
                <comment line="259">
                    Now we know that parent isn&apos;t immediate to &apos;this&apos; because it
                     has a continued ID list. Create a shell folder for this child
                     pidl and make it the new &apos;parent&apos;.                    
                </comment>
                <comment line="264">
                    No grandchildren means we have arrived at the parent of &apos;this&apos;,
                     and childPIDL is directly relative to parent.                    
                </comment>
                <anonymous_class line="237">
                    <method name="call" type="Void" line="238">
                        <comment line="244">
                            At this point, the native method initSpecial() has set our relativePIDL
                             relative to the Desktop, which may not be our immediate parent. We need
                             to traverse this ID list and break it into a chain of shell folders from
                             the top, with each one having an immediate parent and a relativePIDL
                             relative to that parent.                            
                        </comment>
                        <comment line="252">
                            Get a child pidl relative to &apos;parent&apos;                            
                        </comment>
                        <comment line="255">
                            Get a handle to the the rest of the ID list
                             i,e, parent&apos;s grandchilren and down                            
                        </comment>
                        <comment line="259">
                            Now we know that parent isn&apos;t immediate to &apos;this&apos; because it
                             has a continued ID list. Create a shell folder for this child
                             pidl and make it the new &apos;parent&apos;.                            
                        </comment>
                        <comment line="264">
                            No grandchildren means we have arrived at the parent of &apos;this&apos;,
                             and childPIDL is directly relative to parent.                            
                        </comment>
                        <scope line="239"/>
                        <scope line="241">
                            <declaration name="pIDL" type="long" line="248"/>
                            <scope line="250">
                                <declaration name="childPIDL" type="long" line="252"/>
                                <scope line="253">
                                    <scope line="257"/>
                                    <scope line="262"/>
                                </scope>
                                <scope line="267"/>
                            </scope>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="280">
                Create a system shell folder                
            </javadoc>
            <method name="Win32ShellFolder2" type="constructor" line="283">
                <params>
                    <param name="parent" type="Win32ShellFolder2"/>
                    <param name="pIShellFolder" type="long"/>
                    <param name="relativePIDL" type="long"/>
                    <param name="path" type="String"/>
                </params>
            </method>
            <javadoc line="291">
                Creates a shell folder with a parent and relative PIDL                
            </javadoc>
            <method name="Win32ShellFolder2" type="constructor" line="294">
                <params>
                    <param name="parent" type="Win32ShellFolder2"/>
                    <param name="relativePIDL" type="long"/>
                </params>
                <anonymous_class line="296">
                    <method name="call" type="String" line="297"/>
                </anonymous_class>
            </method>
            <method name="initDesktop" type="void" line="308"/>
            <method name="initSpecial" type="void" line="313"/>
            <javadoc line="315">
                Marks this folder as being the My Documents (Personal) folder                
            </javadoc>
            <method name="setIsPersonal" type="void" line="316"/>
            <javadoc line="320">
                This method is implemented to make sure that no instances
                  of &lt;code&gt;ShellFolder&lt;/code&gt; are ever serialized. If &lt;code&gt;isFileSystem()&lt;/code&gt; returns
                  &lt;code&gt;true&lt;/code&gt;, then the object is representable with an instance of
                  &lt;code&gt;java.io.File&lt;/code&gt; instead. If not, then the object depends
                  on native PIDL state and should not be serialized.                
                <return>
                    a &lt;code&gt;java.io.File&lt;/code&gt; replacement object. If the folder
                      is a not a normal directory, then returns the first non-removable
                      drive (normally &quot;C:\&quot;).                    
                </return>
            </javadoc>
            <method name="writeReplace" type="Object" line="331">
                <comment line="352">
                    Ouch, we have no hard drives. Return something &quot;valid&quot; anyway.                    
                </comment>
                <anonymous_class line="332">
                    <method name="call" type="File" line="333">
                        <comment line="352">
                            Ouch, we have no hard drives. Return something &quot;valid&quot; anyway.                            
                        </comment>
                        <scope line="334"/>
                        <scope line="336">
                            <declaration name="drives" type="Win32ShellFolder2" line="337"/>
                            <scope line="338">
                                <declaration name="driveRoots" type="File[]" line="339"/>
                                <scope line="340">
                                    <scope line="341">
                                        <scope line="342">
                                            <declaration name="sf" type="Win32ShellFolder2" line="343"/>
                                            <scope line="344"/>
                                        </scope>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="359">
                Finalizer to clean up any COM objects or PIDLs used by this object.                
            </javadoc>
            <method name="dispose" type="void" line="362"/>
            <method name="getNextPIDLEntry" type="long" line="372"/>
            <method name="copyFirstPIDLEntry" type="long" line="379"/>
            <method name="combinePIDLs" type="long" line="382"/>
            <method name="releasePIDL" type="void" line="386"/>
            <method name="releaseIShellFolder" type="void" line="390"/>
            <javadoc line="392">
                Accessor for IShellFolder                
            </javadoc>
            <method name="getIShellFolder" type="long" line="395">
                <comment line="408">
                    We are a directory with a parent and a relative PIDL.
                     We want to bind to the parent so we get an
                     IShellFolder instance associated with us.                    
                </comment>
                <comment line="421">
                    Ignore error                    
                </comment>
                <scope line="396">
                    <scope line="397">
                        <anonymous_class line="398">
                            <method name="call" type="Long" line="399">
                                <comment line="408">
                                    We are a directory with a parent and a relative PIDL.
                                     We want to bind to the parent so we get an
                                     IShellFolder instance associated with us.                                    
                                </comment>
                                <declaration name="parentIShellFolder" type="long" line="402"/>
                                <scope line="403"/>
                                <declaration name="pIShellFolder" type="long" line="410"/>
                                <scope line="412"/>
                            </method>
                        </anonymous_class>
                    </scope>
                    <scope line="419"/>
                </scope>
            </method>
            <javadoc line="426">
                Get the parent ShellFolder&apos;s IShellFolder interface                
            </javadoc>
            <method name="getParentIShellFolder" type="long" line="429">
                <comment line="433">
                    Parent should only be null if this is the desktop, whose
                     relativePIDL is relative to its own IShellFolder.                    
                </comment>
                <declaration name="parent" type="Win32ShellFolder2" line="430"/>
                <scope line="431"/>
            </method>
            <javadoc line="439">
                Accessor for relative PIDL                
            </javadoc>
            <method name="getRelativePIDL" type="long" line="442">
                <scope line="443"/>
            </method>
            <method name="getAbsolutePIDL" type="long" line="449">
                <comment line="452">
                    This is the desktop                    
                </comment>
                <scope line="450"/>
                <scope line="453">
                    <scope line="454"/>
                </scope>
            </method>
            <javadoc line="462">
                Helper function to return the desktop                
            </javadoc>
            <method name="getDesktop" type="Win32ShellFolder2" line="465"/>
            <javadoc line="469">
                Helper function to return the desktop IShellFolder interface                
            </javadoc>
            <method name="getDesktopIShellFolder" type="long" line="472"/>
            <method name="pathsEqual" type="boolean" line="476">
                <params>
                    <param name="path1" type="String"/>
                    <param name="path2" type="String"/>
                </params>
                <comment line="478">
                    Same effective implementation as Win32FileSystem                    
                </comment>
            </method>
            <javadoc line="481">
                Check to see if two ShellFolder objects are the same                
            </javadoc>
            <method name="equals" type="boolean" line="484">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <comment line="487">
                    Short-circuit circuitous delegation path                    
                </comment>
                <comment line="500">
                    Only folders with identical parents can be equal                    
                </comment>
                <scope line="485">
                    <scope line="487"/>
                </scope>
                <declaration name="rhs" type="Win32ShellFolder2" line="492"/>
                <scope line="494"/>
                <scope line="498"/>
                <scope line="504">
                    <scope line="505"/>
                    <scope line="507"/>
                </scope>
            </method>
            <method name="pidlsEqual" type="boolean" line="516">
                <params>
                    <param name="pIShellFolder" type="long"/>
                    <param name="pidl1" type="long"/>
                    <param name="pidl2" type="long"/>
                </params>
                <anonymous_class line="517">
                    <method name="call" type="Boolean" line="518"/>
                </anonymous_class>
            </method>
            <method name="compareIDs" type="int" line="525"/>
            <declaration name="cachedIsFileSystem" type="Boolean" line="527"/>
            <javadoc line="529">
                @return Whether this is a file system shell folder                
            </javadoc>
            <method name="isFileSystem" type="boolean" line="532">
                <scope line="533"/>
            </method>
            <javadoc line="540">
                Return whether the given attribute flag is set for this object                
            </javadoc>
            <method name="hasAttribute" type="boolean" line="543">
                <params>
                    <param name="attribute" type="int"/>
                </params>
                <comment line="547">
                    Caching at this point doesn&apos;t seem to be cost efficient                    
                </comment>
                <anonymous_class line="544">
                    <method name="call" type="Boolean" line="545">
                        <comment line="547">
                            Caching at this point doesn&apos;t seem to be cost efficient                            
                        </comment>
                    </method>
                </anonymous_class>
                <declaration name="result" type="Boolean" line="544"/>
            </method>
            <method name="getAttributes0" type="int" line="556"/>
            <javadoc line="556">
                Returns the queried attributes specified in attrsMask.
                  Could plausibly be used for attribute caching but have to be
                  very careful not to touch network drives and file system roots
                  with a full attrsMask
                  NOTE: this method uses COM and must be called on the &apos;COM thread&apos;. See ComInvoker for the details                
            </javadoc>
            <method name="getFileSystemPath" type="String" line="569">
                <params>
                    <param name="parentIShellFolder" type="long"/>
                    <param name="relativePIDL" type="long"/>
                </params>
                <declaration name="linkedFolder" type="int" line="570"/>
                <scope line="572">
                    <declaration name="s" type="String" line="574"/>
                    <scope line="577"/>
                </scope>
            </method>
            <method name="getFileSystemPath" type="String" line="585">
                <params>
                    <param name="csidl" type="int"/>
                </params>
                <anonymous_class line="586">
                    <method name="call" type="String" line="587"/>
                </anonymous_class>
            </method>
            <method name="getFileSystemPath0" type="String" line="594"/>
            <method name="isNetworkRoot" type="boolean" line="598">
                <params>
                    <param name="path" type="String"/>
                </params>
            </method>
            <javadoc line="602">
                @return The parent shell folder of this shell folder, null if
                  there is no parent                
            </javadoc>
            <method name="getParentFile" type="File" line="606"/>
            <method name="isDirectory" type="boolean" line="610">
                <comment line="613">
                    Folders with SFGAO_BROWSABLE have &quot;shell extension&quot; handlers and are
                     not traversable in JFileChooser.                    
                </comment>
                <scope line="611">
                    <scope line="614"/>
                    <scope line="616">
                        <declaration name="linkLocation" type="ShellFolder" line="617"/>
                    </scope>
                    <scope line="619"/>
                </scope>
            </method>
            <method name="getEnumObjects" type="long" line="631">
                <params>
                    <param name="includeHiddenFiles" type="boolean"/>
                </params>
                <anonymous_class line="632">
                    <method name="call" type="Long" line="633">
                        <declaration name="isDesktop" type="boolean" line="634"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="getEnumObjects" type="long" line="644"/>
            <method name="getNextChild" type="long" line="650"/>
            <method name="releaseEnumObjects" type="void" line="653"/>
            <method name="bindToObject" type="long" line="659"/>
            <javadoc line="661">
                @return An array of shell folders that are children of this shell folder
                  object. The array will be empty if the folder is empty.  Returns
                  &lt;code&gt;null&lt;/code&gt; if this shellfolder does not denote a directory.                
            </javadoc>
            <method name="listFiles" type="File[]" line="666">
                <params>
                    <param name="includeHiddenFiles" type="boolean"/>
                </params>
                <comment line="679">
                    Links to directories are not directories and cannot be parents.
                     This does not apply to folders in My Network Places (NetHood)
                     because they are both links and real directories!                    
                </comment>
                <comment line="689">
                    If we are a directory, we have a parent and (at least) a
                     relative PIDL. We must first ensure we are bound to the
                     parent so we have an IShellFolder to query.                    
                </comment>
                <comment line="693">
                    Now we can enumerate the objects in this folder.                    
                </comment>
                <declaration name="security" type="SecurityManager" line="667"/>
                <scope line="668"/>
                <scope line="672">
                    <anonymous_class line="673">
                        <method name="call" type="File[]" line="674">
                            <comment line="679">
                                Links to directories are not directories and cannot be parents.
                                 This does not apply to folders in My Network Places (NetHood)
                                 because they are both links and real directories!                                
                            </comment>
                            <comment line="689">
                                If we are a directory, we have a parent and (at least) a
                                 relative PIDL. We must first ensure we are bound to the
                                 parent so we have an IShellFolder to query.                                
                            </comment>
                            <comment line="693">
                                Now we can enumerate the objects in this folder.                                
                            </comment>
                            <scope line="675"/>
                            <scope line="681"/>
                            <declaration name="desktop" type="Win32ShellFolder2" line="685"/>
                            <declaration name="personal" type="Win32ShellFolder2" line="686"/>
                            <declaration name="pIShellFolder" type="long" line="691"/>
                            <declaration name="list" type="ArrayList&lt;Win32ShellFolder2&gt;" line="693"/>
                            <declaration name="pEnumObjects" type="long" line="694"/>
                            <scope line="695">
                                <scope line="696">
                                    <declaration name="childPIDL" type="long" line="697"/>
                                    <declaration name="testedAttrs" type="int" line="698"/>
                                    <scope line="699">
                                        <declaration name="releasePIDL" type="boolean" line="701"/>
                                        <scope line="703">
                                            <declaration name="childFolder" type="Win32ShellFolder2" line="704"/>
                                            <scope line="707"/>
                                            <scope line="709"/>
                                        </scope>
                                        <scope line="715"/>
                                    </scope>
                                </scope>
                                <scope line="719"/>
                            </scope>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="728"/>
            </method>
            <javadoc line="734">
                Look for (possibly special) child folder by it&apos;s path                
                <return>
                    The child shellfolder, or null if not found.                    
                </return>
            </javadoc>
            <method name="getChildByPath" type="Win32ShellFolder2" line="739">
                <params>
                    <param name="filePath" type="String"/>
                </params>
                <anonymous_class line="740">
                    <method name="call" type="Win32ShellFolder2" line="741">
                        <declaration name="pIShellFolder" type="long" line="742"/>
                        <declaration name="pEnumObjects" type="long" line="743"/>
                        <declaration name="child" type="Win32ShellFolder2" line="744"/>
                        <declaration name="childPIDL" type="long" line="745"/>
                        <scope line="747">
                            <scope line="748">
                                <declaration name="path" type="String" line="749"/>
                                <scope line="750">
                                    <declaration name="childIShellFolder" type="long" line="751"/>
                                </scope>
                            </scope>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <declaration name="cachedIsLink" type="Boolean" line="765"/>
            <javadoc line="767">
                @return Whether this shell folder is a link                
            </javadoc>
            <method name="isLink" type="boolean" line="770">
                <scope line="771"/>
            </method>
            <javadoc line="778">
                @return Whether this shell folder is marked as hidden                
            </javadoc>
            <method name="isHidden" type="boolean" line="781"/>
            <method name="getLinkLocation" type="long" line="788"/>
            <javadoc line="791">
                @return The shell folder linked to by this shell folder, or null
                  if this shell folder is not a link or is a broken or invalid link                
            </javadoc>
            <method name="getLinkLocation" type="ShellFolder" line="795"/>
            <method name="getLinkLocation" type="ShellFolder" line="799">
                <params>
                    <param name="resolve" type="boolean"/>
                </params>
                <comment line="816">
                    Return null                    
                </comment>
                <comment line="818">
                    Could be a link to a non-bindable object, such as a network connection
                     TODO: getIShellFolder() should throw FileNotFoundException instead                    
                </comment>
                <anonymous_class line="800">
                    <method name="call" type="ShellFolder" line="801">
                        <comment line="816">
                            Return null                            
                        </comment>
                        <comment line="818">
                            Could be a link to a non-bindable object, such as a network connection
                             TODO: getIShellFolder() should throw FileNotFoundException instead                            
                        </comment>
                        <scope line="802"/>
                        <declaration name="location" type="ShellFolder" line="806"/>
                        <declaration name="linkLocationPIDL" type="long" line="807"/>
                        <scope line="809">
                            <scope line="810"/>
                            <scope line="814"/>
                            <scope line="816"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="parseDisplayName" type="long" line="827">
                <params>
                    <param name="name" type="String"/>
                </params>
                <anonymous_class line="828">
                    <method name="call" type="Long" line="829"/>
                </anonymous_class>
            </method>
            <method name="parseDisplayName0" type="long" line="836"/>
            <method name="getDisplayNameOf" type="String" line="840"/>
            <javadoc line="844">
                @return The name used to display this shell folder                
            </javadoc>
            <method name="getDisplayName" type="String" line="847">
                <scope line="848">
                    <anonymous_class line="850">
                        <method name="call" type="String" line="851"/>
                    </anonymous_class>
                </scope>
            </method>
            <method name="getFolderType" type="String" line="862"/>
            <javadoc line="864">
                @return The type of shell folder as a string                
            </javadoc>
            <method name="getFolderType" type="String" line="867">
                <scope line="868">
                    <declaration name="absolutePIDL" type="long" line="869"/>
                    <anonymous_class line="871">
                        <method name="call" type="String" line="872"/>
                    </anonymous_class>
                </scope>
            </method>
            <method name="getExecutableType" type="String" line="881"/>
            <javadoc line="883">
                @return The executable type as a string                
            </javadoc>
            <method name="getExecutableType" type="String" line="886">
                <scope line="887"/>
            </method>
            <declaration name="smallSystemImages" type="Map" line="897"/>
            <declaration name="largeSystemImages" type="Map" line="898"/>
            <declaration name="smallLinkedSystemImages" type="Map" line="899"/>
            <declaration name="largeLinkedSystemImages" type="Map" line="900"/>
            <method name="getIShellIcon" type="long" line="903"/>
            <method name="getIconIndex" type="int" line="906"/>
            <method name="getIcon" type="long" line="909"/>
            <method name="extractIcon" type="long" line="912"/>
            <method name="getSystemIcon" type="long" line="916"/>
            <method name="getIconResource" type="long" line="917"/>
            <method name="getIconBits" type="int[]" line="924"/>
            <method name="disposeIcon" type="void" line="926"/>
            <method name="getStandardViewButton0" type="int[]" line="928"/>
            <method name="getIShellIcon" type="long" line="931">
                <scope line="932"/>
            </method>
            <method name="makeIcon" type="Image" line="939">
                <params>
                    <param name="hIcon" type="long"/>
                    <param name="getLargeIcon" type="boolean"/>
                </params>
                <comment line="942">
                    Get the bits.  This has the side effect of setting the imageHash value for this object.                    
                </comment>
                <scope line="940">
                    <declaration name="size" type="int" line="942"/>
                    <declaration name="iconBits" type="int[]" line="943"/>
                    <scope line="944">
                        <declaration name="img" type="BufferedImage" line="945"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="954">
                @return The icon image used to display this shell folder                
            </javadoc>
            <method name="getIcon" type="Image" line="957">
                <params>
                    <param name="getLargeIcon" type="boolean"/>
                </params>
                <comment line="971">
                    These are cached per type (using the index in the system image list)                    
                </comment>
                <comment line="993">
                    These are only cached per object                    
                </comment>
                <declaration name="icon" type="Image" line="958"/>
                <scope line="959">
                    <anonymous_class line="961">
                        <method name="call" type="Image" line="962">
                            <comment line="971">
                                These are cached per type (using the index in the system image list)                                
                            </comment>
                            <comment line="993">
                                These are only cached per object                                
                            </comment>
                            <declaration name="newIcon" type="Image" line="963"/>
                            <scope line="964">
                                <declaration name="parentIShellIcon" type="long" line="965"/>
                                <declaration name="relativePIDL" type="long" line="968"/>
                                <declaration name="index" type="int" line="971"/>
                                <scope line="972">
                                    <declaration name="imageCache" type="Map" line="973"/>
                                    <scope line="974"/>
                                    <scope line="976"/>
                                    <scope line="980">
                                        <declaration name="hIcon" type="long" line="981"/>
                                        <scope line="984"/>
                                    </scope>
                                </scope>
                            </scope>
                            <scope line="991">
                                <declaration name="hIcon" type="long" line="993"/>
                            </scope>
                            <scope line="999"/>
                        </method>
                    </anonymous_class>
                    <scope line="1005"/>
                    <scope line="1007"/>
                </scope>
            </method>
            <javadoc line="1014">
                Gets an icon from the Windows system icon list as an &lt;code&gt;Image&lt;/code&gt;                
            </javadoc>
            <method name="getSystemIcon" type="Image" line="1017">
                <params>
                    <param name="iconType" type="SystemIcon"/>
                </params>
                <declaration name="hIcon" type="long" line="1018"/>
                <declaration name="icon" type="Image" line="1019"/>
            </method>
            <javadoc line="1024">
                Gets an icon from the Windows system icon list as an &lt;code&gt;Image&lt;/code&gt;                
            </javadoc>
            <method name="getShell32Icon" type="Image" line="1027">
                <params>
                    <param name="iconID" type="int"/>
                    <param name="getLargeIcon" type="boolean"/>
                </params>
                <comment line="1029">
                    Will be ignored on XP and later                    
                </comment>
                <declaration name="useVGAColors" type="boolean" line="1028"/>
                <declaration name="size" type="int" line="1030"/>
                <declaration name="toolkit" type="Toolkit" line="1032"/>
                <declaration name="shellIconBPP" type="String" line="1033"/>
                <scope line="1034"/>
                <declaration name="hIcon" type="long" line="1038"/>
                <scope line="1039">
                    <declaration name="icon" type="Image" line="1040"/>
                </scope>
            </method>
            <javadoc line="1047">
                Returns the canonical form of this abstract pathname.  Equivalent to
                  &lt;code&gt;new&amp;nbsp;Win32ShellFolder2(getParentFile(), this.{@link java.io.File#getCanonicalPath}())&lt;/code&gt;.                
                <see>
                    java.io.File#getCanonicalFile                    
                </see>
            </javadoc>
            <method name="getCanonicalFile" type="File" line="1053"/>
            <method name="isSpecial" type="boolean" line="1060"/>
            <javadoc line="1064">
                Compares this object with the specified object for order.                
                <see>
                    sun.awt.shell.ShellFolder#compareTo(File)                    
                </see>
            </javadoc>
            <method name="compareTo" type="int" line="1069">
                <params>
                    <param name="file2" type="File"/>
                </params>
                <comment line="1075">
                    Non-file shellfolders sort before files                    
                </comment>
                <scope line="1070">
                    <scope line="1071"/>
                    <scope line="1073"/>
                </scope>
            </method>
            <declaration name="LVCFMT_LEFT" type="int" line="1081"/>
            <declaration name="LVCFMT_RIGHT" type="int" line="1082"/>
            <declaration name="LVCFMT_CENTER" type="int" line="1083"/>
            <method name="getFolderColumns" type="ShellFolderColumnInfo[]" line="1085">
                <anonymous_class line="1086">
                    <method name="call" type="ShellFolderColumnInfo[]" line="1087">
                        <declaration name="columns" type="ShellFolderColumnInfo[]" line="1088"/>
                        <scope line="1090">
                            <declaration name="notNullColumns" type="List&lt;ShellFolderColumnInfo&gt;" line="1091"/>
                            <scope line="1093">
                                <declaration name="column" type="ShellFolderColumnInfo" line="1094"/>
                                <scope line="1095"/>
                            </scope>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="getFolderColumnValue" type="Object" line="1115">
                <params>
                    <param name="column" type="int"/>
                </params>
                <anonymous_class line="1116">
                    <method name="call" type="Object" line="1117"/>
                </anonymous_class>
            </method>
            <method name="doGetColumnInfo" type="ShellFolderColumnInfo[]" line="1124"/>
            <method name="doGetColumnValue" type="Object" line="1127"/>
            <method name="compareIDsByColumn" type="int" line="1130"/>
            <method name="sortChildren" type="void" line="1133">
                <params>
                    <param name="files" type="List<? extends File>"/>
                </params>
                <comment line="1135">
                    To avoid loads of synchronizations with Invoker and improve performance we
                     synchronize the whole code of the sort method once                    
                </comment>
                <anonymous_class line="1136">
                    <method name="call" type="Void" line="1137"/>
                </anonymous_class>
            </method>
            <class name="ColumnComparator" line="1145">
                <comment line="168">
                    This is cached as a concession to getFolderType(), which needs
                     an absolute PIDL.                    
                </comment>
                <comment line="173">
                    We keep track of shell folders through the IShellFolder
                     interface of their parents plus their relative PIDL.                    
                </comment>
                <comment line="1156">
                    compares 2 objects within this folder by the specified column                    
                </comment>
                <implements interface="Comparator">
                    <type_params>
                        <type_param name="File"/>
                    </type_params>
                </implements>
                <declaration name="parentIShellFolder" type="long" line="1146"/>
                <declaration name="columnIdx" type="int" line="1148"/>
                <method name="ColumnComparator" type="constructor" line="1150">
                    <params>
                        <param name="parentIShellFolder" type="long"/>
                        <param name="columnIdx" type="int"/>
                    </params>
                </method>
                <method name="compare" type="int" line="1156">
                    <params>
                        <param name="o" type="File"/>
                        <param name="o1" type="File"/>
                    </params>
                    <comment line="1162">
                        delegates comparison to native method                        
                    </comment>
                    <anonymous_class line="1157">
                        <method name="call" type="Integer" line="1158">
                            <comment line="1162">
                                delegates comparison to native method                                
                            </comment>
                            <scope line="1160"/>
                        </method>
                    </anonymous_class>
                    <declaration name="result" type="Integer" line="1157"/>
                </method>
            </class>
        </class>
    </source>