<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.windows">
        <import package="java.awt"/>
        <import package="java.awt.im.InputMethodHighlight"/>
        <import package="java.awt.im.spi.InputMethodDescriptor"/>
        <import package="java.awt.image"/>
        <import package="java.awt.peer"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.datatransfer.Clipboard"/>
        <import package="java.awt.TrayIcon"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="sun.awt.AWTAutoShutdown"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.Win32GraphicsDevice"/>
        <import package="sun.awt.Win32GraphicsEnvironment"/>
        <import package="sun.java2d.d3d.D3DRenderQueue"/>
        <import package="sun.java2d.opengl.OGLRenderQueue"/>
        <import package="sun.print.PrintJob2D"/>
        <import package="java.awt.dnd.DragSource"/>
        <import package="java.awt.dnd.DragGestureListener"/>
        <import package="java.awt.dnd.DragGestureEvent"/>
        <import package="java.awt.dnd.DragGestureRecognizer"/>
        <import package="java.awt.dnd.MouseDragGestureRecognizer"/>
        <import package="java.awt.dnd.InvalidDnDOperationException"/>
        <import package="java.awt.dnd.peer.DragSourceContextPeer"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Map"/>
        <import package="java.util.Properties"/>
        <import package="sun.font.FontManager"/>
        <import package="sun.font.FontManagerFactory"/>
        <import package="sun.font.SunFontManager"/>
        <import package="sun.misc.PerformanceLogger"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="WToolkit" line="36">
            <extends class="SunToolkit"/>
            <implements interface="Runnable"/>
            <declaration name="log" type="PlatformLogger" line="37"/>
            <declaration name="config" type="GraphicsConfiguration" line="38"/>
            <declaration name="clipboard" type="WClipboard" line="39"/>
            <declaration name="cacheFontPeer" type="Hashtable" line="40"/>
            <declaration name="wprops" type="WDesktopProperties" line="41"/>
            <declaration name="dynamicLayoutSetting" type="boolean" line="42"/>
            <declaration name="areExtraMouseButtonsEnabled" type="boolean" line="43"/>
            <method name="initIDs" type="void" line="44"/>
            <javadoc line="44">
                Initialize JNI field and method IDs                
            </javadoc>
            <declaration name="loaded" type="boolean" line="48"/>
            <method name="loadLibraries" type="void" line="49">
                <scope line="50"/>
            </method>
            <method name="getWindowsVersion" type="String" line="55"/>
            <scope line="56">
                <scope line="59"/>
                <anonymous_class line="62">
                    <method name="run" type="Object" line="63">
                        <declaration name="browserProp" type="String" line="64"/>
                        <scope line="65"/>
                    </method>
                </anonymous_class>
            </scope>
            <method name="disableCustomPalette" type="void" line="73"/>
            <method name="resetGC" type="void" line="74">
                <scope line="75"/>
                <scope line="78"/>
            </method>
            <method name="embeddedInit" type="boolean" line="82"/>
            <javadoc line="82">
                Initializes the Toolkit for use in an embedded environment.                
                <return>
                    true if the the initialization succeeded; false if it failed.
                      The function will fail if the Toolkit was already initialized.                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="embeddedDispose" type="boolean" line="89"/>
            <javadoc line="89">
                Disposes the Toolkit in an embedded environment. This method should
                  not be called on exit unless the Toolkit was constructed with
                  embeddedInit.                
                <return>
                    true if the disposal succeeded; false if it failed. The
                      function will fail if the calling thread is not the same
                      thread which called embeddedInit(), or if the Toolkit was
                      already disposed.                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="embeddedEventLoopIdleProcessing" type="void" line="100"/>
            <javadoc line="100">
                To be called after processing the event queue by users of the above
                  embeddedInit() function.  The reason for this additional call is that
                  there are some operations performed during idle time in the AwtToolkit
                  event loop which should also be performed during idle time in any
                  other native event loop.  Failure to do so could result in
                  deadlocks.
                  This method was added at the last minute of the jdk1.4 release
                  to work around a specific customer problem.  As with the above
                  embedded() class, this method is non-public and should not be
                  used by external applications.
                  See bug #4526587 for more information.                
            </javadoc>
            <declaration name="DATA_TRANSFERER_CLASS_NAME" type="String" line="114"/>
            <class name="ToolkitDisposer" line="115">
                <implements interface="sun.java2d.DisposerRecord"/>
                <method name="dispose" type="void" line="116"/>
            </class>
            <declaration name="anchor" type="Object" line="120"/>
            <method name="postDispose" type="void" line="121"/>
            <method name="startToolkitThread" type="boolean" line="122"/>
            <method name="WToolkit" type="constructor" line="123">
                <scope line="124"/>
                <scope line="129">
                    <declaration name="toolkitThread" type="Thread" line="130"/>
                </scope>
                <scope line="134">
                    <scope line="135">
                        <scope line="136"/>
                    </scope>
                </scope>
                <scope line="141"/>
            </method>
            <method name="registerShutdownHook" type="void" line="149">
                <anonymous_class line="150">
                    <method name="run" type="Object" line="151">
                        <declaration name="currentTG" type="ThreadGroup" line="152"/>
                        <declaration name="parentTG" type="ThreadGroup" line="153"/>
                        <scope line="154"/>
                        <anonymous_class line="158">
                            <method name="run" type="void" line="159"/>
                        </anonymous_class>
                        <declaration name="shutdown" type="Thread" line="158"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="run" type="void" line="171">
                <declaration name="startPump" type="boolean" line="173"/>
                <scope line="174"/>
                <scope line="177"/>
                <scope line="181"/>
            </method>
            <method name="init" type="boolean" line="185"/>
            <declaration name="inited" type="boolean" line="186"/>
            <method name="eventLoop" type="void" line="187"/>
            <method name="shutdown" type="void" line="188"/>
            <method name="startSecondaryEventLoop" type="void" line="189"/>
            <method name="quitSecondaryEventLoop" type="void" line="190"/>
            <method name="createButton" type="ButtonPeer" line="191">
                <params>
                    <param name="target" type="Button"/>
                </params>
                <declaration name="peer" type="ButtonPeer" line="192"/>
            </method>
            <method name="createTextField" type="TextFieldPeer" line="196">
                <params>
                    <param name="target" type="TextField"/>
                </params>
                <declaration name="peer" type="TextFieldPeer" line="197"/>
            </method>
            <method name="createLabel" type="LabelPeer" line="201">
                <params>
                    <param name="target" type="Label"/>
                </params>
                <declaration name="peer" type="LabelPeer" line="202"/>
            </method>
            <method name="createList" type="ListPeer" line="206">
                <params>
                    <param name="target" type="List"/>
                </params>
                <declaration name="peer" type="ListPeer" line="207"/>
            </method>
            <method name="createCheckbox" type="CheckboxPeer" line="211">
                <params>
                    <param name="target" type="Checkbox"/>
                </params>
                <declaration name="peer" type="CheckboxPeer" line="212"/>
            </method>
            <method name="createScrollbar" type="ScrollbarPeer" line="216">
                <params>
                    <param name="target" type="Scrollbar"/>
                </params>
                <declaration name="peer" type="ScrollbarPeer" line="217"/>
            </method>
            <method name="createScrollPane" type="ScrollPanePeer" line="221">
                <params>
                    <param name="target" type="ScrollPane"/>
                </params>
                <declaration name="peer" type="ScrollPanePeer" line="222"/>
            </method>
            <method name="createTextArea" type="TextAreaPeer" line="226">
                <params>
                    <param name="target" type="TextArea"/>
                </params>
                <declaration name="peer" type="TextAreaPeer" line="227"/>
            </method>
            <method name="createChoice" type="ChoicePeer" line="231">
                <params>
                    <param name="target" type="Choice"/>
                </params>
                <declaration name="peer" type="ChoicePeer" line="232"/>
            </method>
            <method name="createFrame" type="FramePeer" line="236">
                <params>
                    <param name="target" type="Frame"/>
                </params>
                <declaration name="peer" type="FramePeer" line="237"/>
            </method>
            <method name="createCanvas" type="CanvasPeer" line="241">
                <params>
                    <param name="target" type="Canvas"/>
                </params>
                <declaration name="peer" type="CanvasPeer" line="242"/>
            </method>
            <method name="disableBackgroundErase" type="void" line="246">
                <params>
                    <param name="canvas" type="Canvas"/>
                </params>
                <declaration name="peer" type="WCanvasPeer" line="247"/>
                <scope line="248"/>
            </method>
            <method name="createPanel" type="PanelPeer" line="253">
                <params>
                    <param name="target" type="Panel"/>
                </params>
                <declaration name="peer" type="PanelPeer" line="254"/>
            </method>
            <method name="createWindow" type="WindowPeer" line="258">
                <params>
                    <param name="target" type="Window"/>
                </params>
                <declaration name="peer" type="WindowPeer" line="259"/>
            </method>
            <method name="createDialog" type="DialogPeer" line="263">
                <params>
                    <param name="target" type="Dialog"/>
                </params>
                <declaration name="peer" type="DialogPeer" line="264"/>
            </method>
            <method name="createFileDialog" type="FileDialogPeer" line="268">
                <params>
                    <param name="target" type="FileDialog"/>
                </params>
                <declaration name="peer" type="FileDialogPeer" line="269"/>
            </method>
            <method name="createMenuBar" type="MenuBarPeer" line="273">
                <params>
                    <param name="target" type="MenuBar"/>
                </params>
                <declaration name="peer" type="MenuBarPeer" line="274"/>
            </method>
            <method name="createMenu" type="MenuPeer" line="278">
                <params>
                    <param name="target" type="Menu"/>
                </params>
                <declaration name="peer" type="MenuPeer" line="279"/>
            </method>
            <method name="createPopupMenu" type="PopupMenuPeer" line="283">
                <params>
                    <param name="target" type="PopupMenu"/>
                </params>
                <declaration name="peer" type="PopupMenuPeer" line="284"/>
            </method>
            <method name="createMenuItem" type="MenuItemPeer" line="288">
                <params>
                    <param name="target" type="MenuItem"/>
                </params>
                <declaration name="peer" type="MenuItemPeer" line="289"/>
            </method>
            <method name="createCheckboxMenuItem" type="CheckboxMenuItemPeer" line="293">
                <params>
                    <param name="target" type="CheckboxMenuItem"/>
                </params>
                <declaration name="peer" type="CheckboxMenuItemPeer" line="294"/>
            </method>
            <method name="createRobot" type="RobotPeer" line="298">
                <params>
                    <param name="target" type="Robot"/>
                    <param name="screen" type="GraphicsDevice"/>
                </params>
            </method>
            <method name="createEmbeddedFrame" type="WEmbeddedFramePeer" line="301">
                <params>
                    <param name="target" type="WEmbeddedFrame"/>
                </params>
                <declaration name="peer" type="WEmbeddedFramePeer" line="302"/>
            </method>
            <method name="createWPrintDialog" type="WPrintDialogPeer" line="306">
                <params>
                    <param name="target" type="WPrintDialog"/>
                </params>
                <declaration name="peer" type="WPrintDialogPeer" line="307"/>
            </method>
            <method name="createWPageDialog" type="WPageDialogPeer" line="311">
                <params>
                    <param name="target" type="WPageDialog"/>
                </params>
                <declaration name="peer" type="WPageDialogPeer" line="312"/>
            </method>
            <method name="createTrayIcon" type="TrayIconPeer" line="316">
                <params>
                    <param name="target" type="TrayIcon"/>
                </params>
                <declaration name="peer" type="WTrayIconPeer" line="317"/>
            </method>
            <method name="createSystemTray" type="SystemTrayPeer" line="321">
                <params>
                    <param name="target" type="SystemTray"/>
                </params>
            </method>
            <method name="isTraySupported" type="boolean" line="324"/>
            <method name="createKeyboardFocusManagerPeer" type="KeyboardFocusManagerPeer" line="327">
                <params>
                    <param name="manager" type="KeyboardFocusManager"/>
                </params>
            </method>
            <method name="setDynamicLayoutNative" type="void" line="330"/>
            <method name="setDynamicLayout" type="void" line="331">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="332"/>
            </method>
            <method name="isDynamicLayoutSet" type="boolean" line="338"/>
            <method name="isDynamicLayoutSupportedNative" type="boolean" line="341"/>
            <method name="isDynamicLayoutActive" type="boolean" line="342"/>
            <javadoc line="345">
                Returns &lt;code&gt;true&lt;/code&gt; if this frame state is supported.                
            </javadoc>
            <method name="isFrameStateSupported" type="boolean" line="348">
                <params>
                    <param name="state" type="int"/>
                </params>
            </method>
            <method name="makeColorModel" type="ColorModel" line="358"/>
            <declaration name="screenmodel" type="ColorModel" line="359"/>
            <method name="getStaticColorModel" type="ColorModel" line="360">
                <scope line="361"/>
                <scope line="364"/>
            </method>
            <method name="getColorModel" type="ColorModel" line="369"/>
            <method name="getScreenInsets" type="Insets" line="372">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
            <method name="getScreenResolution" type="int" line="375">
                <declaration name="ge" type="Win32GraphicsEnvironment" line="376"/>
            </method>
            <method name="getScreenWidth" type="int" line="379"/>
            <method name="getScreenHeight" type="int" line="380"/>
            <method name="getScreenInsets" type="Insets" line="381"/>
            <method name="getFontMetrics" type="FontMetrics" line="382">
                <params>
                    <param name="font" type="Font"/>
                </params>
                <declaration name="fm" type="FontManager" line="383"/>
                <scope line="384"/>
            </method>
            <method name="getFontPeer" type="FontPeer" line="389">
                <params>
                    <param name="name" type="String"/>
                    <param name="style" type="int"/>
                </params>
                <declaration name="retval" type="FontPeer" line="390"/>
                <declaration name="lcName" type="String" line="391"/>
                <scope line="392">
                    <scope line="394"/>
                </scope>
                <scope line="399">
                    <scope line="400"/>
                    <scope line="403"/>
                </scope>
            </method>
            <method name="nativeSync" type="void" line="409"/>
            <method name="sync" type="void" line="410"/>
            <method name="getPrintJob" type="PrintJob" line="415">
                <params>
                    <param name="frame" type="Frame"/>
                    <param name="doctitle" type="String"/>
                    <param name="props" type="Properties"/>
                </params>
            </method>
            <method name="getPrintJob" type="PrintJob" line="418">
                <params>
                    <param name="frame" type="Frame"/>
                    <param name="doctitle" type="String"/>
                    <param name="jobAttributes" type="JobAttributes"/>
                    <param name="pageAttributes" type="PageAttributes"/>
                </params>
                <scope line="419"/>
                <declaration name="printJob" type="PrintJob2D" line="422"/>
                <scope line="423"/>
            </method>
            <method name="beep" type="void" line="428"/>
            <method name="getLockingKeyState" type="boolean" line="429">
                <params>
                    <param name="key" type="int"/>
                </params>
                <scope line="430"/>
            </method>
            <method name="getLockingKeyStateNative" type="boolean" line="435"/>
            <method name="setLockingKeyState" type="void" line="436">
                <params>
                    <param name="key" type="int"/>
                    <param name="on" type="boolean"/>
                </params>
                <scope line="437"/>
            </method>
            <method name="setLockingKeyStateNative" type="void" line="442"/>
            <method name="getSystemClipboard" type="Clipboard" line="443">
                <declaration name="security" type="SecurityManager" line="444"/>
                <scope line="445"/>
                <scope line="448">
                    <scope line="449"/>
                </scope>
            </method>
            <method name="loadSystemColors" type="void" line="455"/>
            <method name="targetToPeer" type="Object" line="456">
                <params>
                    <param name="target" type="Object"/>
                </params>
            </method>
            <method name="targetDisposedPeer" type="void" line="459">
                <params>
                    <param name="target" type="Object"/>
                    <param name="peer" type="Object"/>
                </params>
            </method>
            <javadoc line="462">
                Returns a new input method adapter descriptor for native input methods.                
            </javadoc>
            <method name="getInputMethodAdapterDescriptor" type="InputMethodDescriptor" line="465"/>
            <javadoc line="468">
                Returns a style map for the input method highlight.                
            </javadoc>
            <method name="mapInputMethodHighlight" type="Map" line="471">
                <params>
                    <param name="highlight" type="InputMethodHighlight"/>
                </params>
            </method>
            <javadoc line="474">
                Returns whether enableInputMethods should be set to true for peered
                  TextComponent instances on this platform.                
            </javadoc>
            <method name="enableInputMethodsForTextComponent" type="boolean" line="478"/>
            <javadoc line="481">
                Returns the default keyboard locale of the underlying operating system                
            </javadoc>
            <method name="getDefaultKeyboardLocale" type="Locale" line="484">
                <declaration name="locale" type="Locale" line="485"/>
                <scope line="486"/>
                <scope line="489"/>
            </method>
            <javadoc line="493">
                Returns a new custom cursor.                
            </javadoc>
            <method name="createCustomCursor" type="Cursor" line="496">
                <params>
                    <param name="cursor" type="Image"/>
                    <param name="hotSpot" type="Point"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="499">
                Returns the supported cursor size (Win32 only has one).                
            </javadoc>
            <method name="getBestCursorSize" type="Dimension" line="502">
                <params>
                    <param name="preferredWidth" type="int"/>
                    <param name="preferredHeight" type="int"/>
                </params>
            </method>
            <method name="getMaximumCursorColors" type="int" line="505"/>
            <method name="paletteChanged" type="void" line="506"/>
            <method name="displayChanged" type="void" line="509">
                <anonymous_class line="510">
                    <method name="run" type="void" line="511"/>
                </anonymous_class>
            </method>
            <javadoc line="517">
                create the peer for a DragSourceContext                
            </javadoc>
            <method name="createDragSourceContextPeer" type="DragSourceContextPeer" line="520">
                <params>
                    <param name="dge" type="DragGestureEvent"/>
                </params>
            </method>
            <method name="createDragGestureRecognizer" type="T" line="523">
                <params>
                    <param name="abstractRecognizerClass" type="Class<T>"/>
                    <param name="ds" type="DragSource"/>
                    <param name="c" type="Component"/>
                    <param name="srcActions" type="int"/>
                    <param name="dgl" type="DragGestureListener"/>
                </params>
            </method>
            <declaration name="prefix" type="String" line="527"/>
            <javadoc line="527">
                                
            </javadoc>
            <declaration name="postfix" type="String" line="530"/>
            <declaration name="awtPrefix" type="String" line="531"/>
            <declaration name="dndPrefix" type="String" line="532"/>
            <method name="lazilyLoadDesktopProperty" type="Object" line="533">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="534">
                    <declaration name="cursorName" type="String" line="535"/>
                    <scope line="536"/>
                    <scope line="539"/>
                </scope>
                <scope line="543"/>
                <scope line="546">
                    <scope line="547"/>
                </scope>
            </method>
            <method name="lazilyInitWProps" type="void" line="554">
                <scope line="555"/>
            </method>
            <method name="isDynamicLayoutSupported" type="boolean" line="560">
                <declaration name="nativeDynamic" type="boolean" line="561"/>
                <declaration name="prop" type="Boolean" line="563"/>
                <scope line="564"/>
                <scope line="567"/>
            </method>
            <method name="windowsSettingChange" type="void" line="573">
                <anonymous_class line="574">
                    <method name="run" type="void" line="575"/>
                </anonymous_class>
            </method>
            <method name="updateProperties" type="void" line="581">
                <scope line="582"/>
                <declaration name="props" type="Map&lt;String,Object&gt;" line="585"/>
                <scope line="586">
                    <declaration name="val" type="Object" line="587"/>
                    <scope line="588"/>
                </scope>
            </method>
            <method name="addPropertyChangeListener" type="void" line="594">
                <params>
                    <param name="name" type="String"/>
                    <param name="pcl" type="PropertyChangeListener"/>
                </params>
                <scope line="595"/>
            </method>
            <method name="initializeDesktopProperties" type="void" line="600"/>
            <method name="getDesktopAAHints" type="RenderingHints" line="606">
                <scope line="607"/>
                <scope line="610"/>
            </method>
            <method name="isModalityTypeSupported" type="boolean" line="614">
                <params>
                    <param name="modalityType" type="Dialog.ModalityType"/>
                </params>
            </method>
            <method name="isModalExclusionTypeSupported" type="boolean" line="617">
                <params>
                    <param name="exclusionType" type="Dialog.ModalExclusionType"/>
                </params>
            </method>
            <method name="getWToolkit" type="WToolkit" line="620">
                <declaration name="toolkit" type="WToolkit" line="621"/>
            </method>
            <javadoc line="624">
                There are two reasons why we don&apos;t use buffer per window when
                  Vista&apos;s DWM (aka Aero) is enabled:
                  - since with DWM all windows are already double-buffered, the application
                  doesn&apos;t get expose events so we don&apos;t get to use our true back-buffer,
                  wasting memory and performance (this is valid for both d3d and gdi
                  pipelines)
                  - in some cases with buffer per window enabled it is possible for the
                  paint manager to redirect rendering to the screen for some operations
                  (like copyArea), and since bpw uses its own BufferStrategy the
                  d3d onscreen rendering support is disabled and rendering goes through
                  GDI. This doesn&apos;t work well with Vista&apos;s DWM since one
                  can not perform GDI and D3D operations on the same surface
                  (see 6630702 for more info)
                  Note: even though DWM composition state can change during the lifetime
                  of the application it is a rare event, and it is more often that it
                  is temporarily disabled (because of some app) than it is getting
                  permanently enabled so we can live with this approach without the
                  complexity of dwm state listeners and such. This can be revisited if
                  proved otherwise.                
            </javadoc>
            <method name="useBufferPerWindow" type="boolean" line="645"/>
            <method name="grab" type="void" line="648">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <scope line="649"/>
            </method>
            <method name="ungrab" type="void" line="653">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <scope line="654"/>
            </method>
            <method name="syncNativeQueue" type="boolean" line="658"/>
            <method name="isDesktopSupported" type="boolean" line="659"/>
            <method name="createDesktopPeer" type="DesktopPeer" line="662">
                <params>
                    <param name="target" type="Desktop"/>
                </params>
            </method>
            <method name="setExtraMouseButtonsEnabledNative" type="void" line="665"/>
            <method name="areExtraMouseButtonsEnabled" type="boolean" line="666"/>
            <method name="getNumberOfButtonsImpl" type="int" line="669"/>
            <method name="getNumberOfButtons" type="int" line="670">
                <scope line="671"/>
            </method>
            <method name="isWindowOpacitySupported" type="boolean" line="676"/>
            <method name="isWindowShapingSupported" type="boolean" line="679"/>
            <method name="isWindowTranslucencySupported" type="boolean" line="682"/>
            <method name="isTranslucencyCapable" type="boolean" line="685">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
            <method name="needUpdateWindow" type="boolean" line="688"/>
        </class>
    </source>