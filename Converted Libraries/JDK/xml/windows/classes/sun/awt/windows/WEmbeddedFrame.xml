<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.windows">
        <import package="sun.awt"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.peer.ComponentPeer"/>
        <import package="java.util"/>
        <import package="java.awt.color"/>
        <import package="java.awt.image"/>
        <import package="sun.awt.image.ByteInterleavedRaster"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="java.lang.reflect"/>
        <class name="WEmbeddedFrame" line="39">
            <extends class="EmbeddedFrame"/>
            <comment line="87">
                Get the native handle                
            </comment>
            <comment line="94">
                Print the embedded frame and its children using the specified HDC.                
            </comment>
            <scope line="41"/>
            <declaration name="handle" type="long" line="45"/>
            <declaration name="bandWidth" type="int" line="47"/>
            <declaration name="bandHeight" type="int" line="48"/>
            <declaration name="imgWid" type="int" line="49"/>
            <declaration name="imgHgt" type="int" line="50"/>
            <declaration name="pScale" type="int" line="52"/>
            <declaration name="MAX_BAND_SIZE" type="int" line="53"/>
            <declaration name="printScale" type="String" line="55"/>
            <method name="WEmbeddedFrame" type="constructor" line="58"/>
            <javadoc line="62">
                @deprecated This constructor will be removed in 1.5                
            </javadoc>
            <method name="WEmbeddedFrame" type="constructor" line="66">
                <params>
                    <param name="handle" type="int"/>
                </params>
            </method>
            <method name="WEmbeddedFrame" type="constructor" line="70">
                <params>
                    <param name="handle" type="long"/>
                </params>
                <scope line="72"/>
            </method>
            <method name="addNotify" type="void" line="78">
                <scope line="79">
                    <declaration name="toolkit" type="WToolkit" line="80"/>
                </scope>
            </method>
            <method name="getEmbedderHandle" type="long" line="89"/>
            <method name="print" type="void" line="97">
                <params>
                    <param name="hdc" type="long"/>
                </params>
                <comment line="103">
                    Is this is either a printer DC or an enhanced meta file DC ?
                     Mozilla passes in a printer DC, IE passes plug-in a DC for an
                     enhanced meta file. Its possible we may be passed to a memory
                     DC. If we here create a larger image, draw in to it and have
                     that memory DC then lose the image resolution only to scale it
                     back up again when sending to a printer it will look really bad.
                     So, is this is either a printer DC or an enhanced meta file DC ?
                     Scale only if it is. Use a 4x scale factor, partly since for
                     an enhanced meta file we don&apos;t know anything about the
                     real resolution of the destination.
                    
                     For a printer DC we could probably derive the scale factor to use
                     by querying LOGPIXELSXY, and dividing that by the screen
                     resolution (typically 96 dpi or 120 dpi) but that would typically
                     make for even bigger output for marginal extra quality.
                     But for enhanced meta file we don&apos;t know anything about the
                     real resolution of the destination so                    
                </comment>
                <comment line="160">
                    last band                    
                </comment>
                <comment line="164">
                    multiply by 3 because the image is a 3 byte BGR                    
                </comment>
                <declaration name="bandImage" type="BufferedImage" line="98"/>
                <declaration name="xscale" type="int" line="100"/>
                <declaration name="yscale" type="int" line="101"/>
                <scope line="121"/>
                <declaration name="frameHeight" type="int" line="125"/>
                <scope line="126">
                    <scope line="128"/>
                    <scope line="131"/>
                </scope>
                <declaration name="clearGraphics" type="Graphics" line="143"/>
                <declaration name="g2d" type="Graphics2D" line="145"/>
                <declaration name="ras" type="ByteInterleavedRaster" line="149"/>
                <declaration name="data" type="byte[]" line="150"/>
                <scope line="152">
                    <declaration name="imageOffset" type="int" line="156"/>
                    <declaration name="currBandHeight" type="int" line="157"/>
                    <declaration name="currImgHeight" type="int" line="158"/>
                    <scope line="159"/>
                </scope>
            </method>
            <method name="getPrintScaleFactor" type="int" line="175">
                <comment line="176">
                    check if value is already cached                    
                </comment>
                <comment line="180">
                    if no system property is specified,                    
                </comment>
                <comment line="181">
                    check for environment setting                    
                </comment>
                <scope line="179">
                    <anonymous_class line="183">
                        <method name="run" type="Object" line="184"/>
                    </anonymous_class>
                </scope>
                <declaration name="default_printDC_scale" type="int" line="190"/>
                <declaration name="scale" type="int" line="191"/>
                <scope line="192">
                    <scope line="193">
                        <scope line="195"/>
                    </scope>
                    <scope line="198"/>
                </scope>
            </method>
            <method name="isPrinterDC" type="boolean" line="206"/>
            <method name="printBand" type="void" line="208"/>
            <method name="initIDs" type="void" line="212"/>
            <javadoc line="212">
                Initialize JNI field IDs                
            </javadoc>
            <javadoc line="217">
                This method is called from the native code when this embedded
                  frame should be activated. It is expected to be overridden in
                  subclasses, for example, in plugin to activate the browser
                  window that contains this embedded frame.
                  NOTE: This method may be called by privileged threads.
                  DO NOT INVOKE CLIENT CODE ON THIS THREAD!                
            </javadoc>
            <method name="activateEmbeddingTopLevel" type="void" line="226"/>
            <method name="synthesizeWindowActivation" type="void" line="229">
                <params>
                    <param name="doActivate" type="boolean"/>
                </params>
                <comment line="233">
                    To avoid focus concurrence b/w IE and EmbeddedFrame                    
                </comment>
                <comment line="234">
                    activation is postponed by means of posting it to EDT.                    
                </comment>
                <scope line="230"/>
                <scope line="232">
                    <anonymous_class line="235">
                        <method name="run" type="void" line="236"/>
                    </anonymous_class>
                </scope>
            </method>
            <method name="registerAccelerator" type="void" line="243">
                <params>
                    <param name="stroke" type="AWTKeyStroke"/>
                </params>
            </method>
            <method name="unregisterAccelerator" type="void" line="244">
                <params>
                    <param name="stroke" type="AWTKeyStroke"/>
                </params>
            </method>
            <javadoc line="246">
                Should be overridden in subclasses. Call to
                  super.notifyModalBlocked(blocker, blocked) must be present
                  when overriding.
                  It may occur that embedded frame is not put into its
                  container at the moment when it is blocked, for example,
                  when running an applet in IE. Then the call to this method
                  should be delayed until embedded frame is reparented.
                  NOTE: This method may be called by privileged threads.
                  DO NOT INVOKE CLIENT CODE ON THIS THREAD!                
            </javadoc>
            <method name="notifyModalBlocked" type="void" line="258">
                <params>
                    <param name="blocker" type="Dialog"/>
                    <param name="blocked" type="boolean"/>
                </params>
                <scope line="259">
                    <declaration name="thisPeer" type="ComponentPeer" line="260"/>
                    <declaration name="blockerPeer" type="ComponentPeer" line="261"/>
                </scope>
                <scope line="264"/>
            </method>
            <method name="notifyModalBlockedImpl" type="void" line="268"/>
        </class>
    </source>