<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.windows">
        <import package="java.awt.Color"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.HeadlessException"/>
        <import package="java.awt.KeyboardFocusManager"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.Button"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Event"/>
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.awt.event.ActionListener"/>
        <import package="java.awt.FileDialog"/>
        <import package="java.awt.Dialog"/>
        <import package="java.awt.Label"/>
        <import package="java.awt.Panel"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Window"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.print.Pageable"/>
        <import package="java.awt.print.PageFormat"/>
        <import package="java.awt.print.Paper"/>
        <import package="java.awt.print.Printable"/>
        <import package="java.awt.print.PrinterJob"/>
        <import package="java.awt.print.PrinterException"/>
        <import package="javax.print.PrintService"/>
        <import package="java.io.IOException"/>
        <import package="java.io.File"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Properties"/>
        <import package="java.util.MissingResourceException"/>
        <import package="java.util.ResourceBundle"/>
        <import package="sun.awt.Win32GraphicsEnvironment"/>
        <import package="sun.print.PeekGraphics"/>
        <import package="sun.print.PeekMetrics"/>
        <import package="java.net.URL"/>
        <import package="java.net.URI"/>
        <import package="java.net.URISyntaxException"/>
        <import package="javax.print.PrintServiceLookup"/>
        <import package="javax.print.attribute.PrintRequestAttributeSet"/>
        <import package="javax.print.attribute.HashPrintServiceAttributeSet"/>
        <import package="javax.print.attribute.HashPrintRequestAttributeSet"/>
        <import package="javax.print.attribute.Attribute"/>
        <import package="javax.print.attribute.standard.Sides"/>
        <import package="javax.print.attribute.standard.Chromaticity"/>
        <import package="javax.print.attribute.standard.PrintQuality"/>
        <import package="javax.print.attribute.standard.PrinterResolution"/>
        <import package="javax.print.attribute.standard.SheetCollate"/>
        <import package="javax.print.attribute.IntegerSyntax"/>
        <import package="javax.print.attribute.standard.Copies"/>
        <import package="javax.print.attribute.standard.Destination"/>
        <import package="javax.print.attribute.standard.OrientationRequested"/>
        <import package="javax.print.attribute.standard.Media"/>
        <import package="javax.print.attribute.standard.MediaSizeName"/>
        <import package="javax.print.attribute.standard.MediaSize"/>
        <import package="javax.print.attribute.standard.MediaTray"/>
        <import package="javax.print.attribute.standard.PrinterName"/>
        <import package="javax.print.attribute.standard.JobMediaSheetsSupported"/>
        <import package="javax.print.attribute.standard.PageRanges"/>
        <import package="javax.print.attribute.Size2DSyntax"/>
        <import package="javax.print.StreamPrintService"/>
        <import package="sun.awt.Win32FontManager"/>
        <import package="sun.print.RasterPrinterJob"/>
        <import package="sun.print.SunAlternateMedia"/>
        <import package="sun.print.SunPageSelection"/>
        <import package="sun.print.SunMinMaxPage"/>
        <import package="sun.print.Win32MediaTray"/>
        <import package="sun.print.Win32PrintService"/>
        <import package="sun.print.Win32PrintServiceLookup"/>
        <import package="sun.print.ServiceDialog"/>
        <import package="sun.print.DialogOwner"/>
        <import package="java.awt.Frame"/>
        <import package="java.io.FilePermission"/>
        <import package="sun.java2d.Disposer"/>
        <import package="sun.java2d.DisposerRecord"/>
        <import package="sun.java2d.DisposerTarget"/>
        <class name="WPrinterJob" line="81">
            <extends class="RasterPrinterJob"/>
            <implements interface="DisposerTarget"/>
            <javadoc line="81">
                A class which initiates and executes a Win32 printer job.                
                <author>
                    Richard Blanchard                    
                </author>
            </javadoc>
            <declaration name="PS_ENDCAP_ROUND" type="long" line="86"/>
            <javadoc line="86">
                These are Windows&apos; ExtCreatePen End Cap Styles
                  and must match the values in &lt;WINGDI.h&gt;                
            </javadoc>
            <declaration name="PS_ENDCAP_SQUARE" type="long" line="91"/>
            <declaration name="PS_ENDCAP_FLAT" type="long" line="92"/>
            <declaration name="PS_JOIN_ROUND" type="long" line="93"/>
            <javadoc line="93">
                These are Windows&apos; ExtCreatePen Line Join Styles
                  and must match the values in &lt;WINGDI.h&gt;                
            </javadoc>
            <declaration name="PS_JOIN_BEVEL" type="long" line="98"/>
            <declaration name="PS_JOIN_MITER" type="long" line="99"/>
            <declaration name="POLYFILL_ALTERNATE" type="int" line="100"/>
            <javadoc line="100">
                This is the Window&apos;s Polygon fill rule which
                  Selects alternate mode (fills the area between odd-numbered
                  and even-numbered polygon sides on each scan line).
                  It must match the value in &lt;WINGDI.h&gt; It can be passed
                  to setPolyFillMode().                
            </javadoc>
            <declaration name="POLYFILL_WINDING" type="int" line="108"/>
            <javadoc line="108">
                This is the Window&apos;s Polygon fill rule which
                  Selects winding mode which fills any region
                  with a nonzero winding value). It must match
                  the value in &lt;WINGDI.h&gt; It can be passed
                  to setPolyFillMode().                
            </javadoc>
            <declaration name="MAX_WCOLOR" type="int" line="116"/>
            <javadoc line="116">
                The maximum value for a Window&apos;s color component
                  as passed to selectSolidBrush.                
            </javadoc>
            <declaration name="SET_DUP_VERTICAL" type="int" line="121"/>
            <javadoc line="121">
                Flags for setting values from devmode in native code.
                  Values must match those defined in awt_PrintControl.cpp                
            </javadoc>
            <declaration name="SET_DUP_HORIZONTAL" type="int" line="126"/>
            <declaration name="SET_RES_HIGH" type="int" line="127"/>
            <declaration name="SET_RES_LOW" type="int" line="128"/>
            <declaration name="SET_COLOR" type="int" line="129"/>
            <declaration name="SET_ORIENTATION" type="int" line="130"/>
            <declaration name="PD_ALLPAGES" type="int" line="131"/>
            <javadoc line="131">
                Values must match those defined in wingdi.h &amp; commdlg.h                
            </javadoc>
            <declaration name="PD_SELECTION" type="int" line="135"/>
            <declaration name="PD_PAGENUMS" type="int" line="136"/>
            <declaration name="PD_NOSELECTION" type="int" line="137"/>
            <declaration name="PD_COLLATE" type="int" line="138"/>
            <declaration name="PD_PRINTTOFILE" type="int" line="139"/>
            <declaration name="DM_ORIENTATION" type="int" line="140"/>
            <declaration name="DM_PRINTQUALITY" type="int" line="141"/>
            <declaration name="DM_COLOR" type="int" line="142"/>
            <declaration name="DM_DUPLEX" type="int" line="143"/>
            <declaration name="MAX_UNKNOWN_PAGES" type="int" line="144"/>
            <javadoc line="144">
                Pageable MAX pages                
            </javadoc>
            <declaration name="driverDoesMultipleCopies" type="boolean" line="148"/>
            <declaration name="driverDoesCollation" type="boolean" line="149"/>
            <declaration name="userRequestedCollation" type="boolean" line="150"/>
            <declaration name="noDefaultPrinter" type="boolean" line="151"/>
            <class name="HandleRecord" line="152">
                <implements interface="DisposerRecord"/>
                <declaration name="mPrintDC" type="long" line="153"/>
                <javadoc line="153">
                    The Windows device context we will print into.
                      This variable is set after the Print dialog
                      is okayed by the user. If the user cancels
                      the print dialog, then this variable is 0.
                      Much of the configuration information for a printer is
                      obtained through printer device specific handles.
                      We need to associate these with, and free with, the mPrintDC.                    
                </javadoc>
                <declaration name="mPrintHDevMode" type="long" line="163"/>
                <declaration name="mPrintHDevNames" type="long" line="164"/>
                <method name="dispose" type="void" line="165"/>
            </class>
            <declaration name="handleRecord" type="HandleRecord" line="169"/>
            <declaration name="mPrintPaperSize" type="int" line="170"/>
            <declaration name="mPrintXRes" type="int" line="171"/>
            <declaration name="mPrintYRes" type="int" line="172"/>
            <declaration name="mPrintPhysX" type="int" line="173"/>
            <declaration name="mPrintPhysY" type="int" line="174"/>
            <declaration name="mPrintWidth" type="int" line="175"/>
            <declaration name="mPrintHeight" type="int" line="176"/>
            <declaration name="mPageWidth" type="int" line="177"/>
            <declaration name="mPageHeight" type="int" line="178"/>
            <declaration name="mAttSides" type="int" line="179"/>
            <declaration name="mAttChromaticity" type="int" line="180"/>
            <declaration name="mAttXRes" type="int" line="181"/>
            <declaration name="mAttYRes" type="int" line="182"/>
            <declaration name="mAttQuality" type="int" line="183"/>
            <declaration name="mAttCollate" type="int" line="184"/>
            <declaration name="mAttCopies" type="int" line="185"/>
            <declaration name="mAttMediaSizeName" type="int" line="186"/>
            <declaration name="mAttMediaTray" type="int" line="187"/>
            <declaration name="mDestination" type="String" line="188"/>
            <declaration name="mLastColor" type="Color" line="189"/>
            <javadoc line="189">
                The last color set into the print device context or
                  &lt;code&gt;null&lt;/code&gt; if no color has been set.                
            </javadoc>
            <declaration name="mLastTextColor" type="Color" line="194"/>
            <javadoc line="194">
                The last text color set into the print device context or
                  &lt;code&gt;null&lt;/code&gt; if no color has been set.                
            </javadoc>
            <declaration name="mLastFontFamily" type="String" line="199"/>
            <javadoc line="199">
                Define the most recent java font set as a GDI font in the printer
                  device context. mLastFontFamily will be NULL if no
                  GDI font has been set.                
            </javadoc>
            <declaration name="mLastFontSize" type="float" line="205"/>
            <declaration name="mLastFontStyle" type="int" line="206"/>
            <declaration name="mLastRotation" type="int" line="207"/>
            <declaration name="mLastAwScale" type="float" line="208"/>
            <declaration name="pjob" type="PrinterJob" line="209"/>
            <declaration name="dialogOwnerPeer" type="java.awt.peer.ComponentPeer" line="210"/>
            <scope line="211"/>
            <method name="WPrinterJob" type="constructor" line="216"/>
            <declaration name="disposerReferent" type="Object" line="220"/>
            <method name="getDisposerReferent" type="Object" line="221"/>
            <javadoc line="224">
                Display a dialog to the user allowing the modification of a
                  PageFormat instance.
                  The &lt;code&gt;page&lt;/code&gt; argument is used to initialize controls
                  in the page setup dialog.
                  If the user cancels the dialog, then the method returns the
                  original &lt;code&gt;page&lt;/code&gt; object unmodified.
                  If the user okays the dialog then the method returns a new
                  PageFormat object with the indicated changes.
                  In either case the original &lt;code&gt;page&lt;/code&gt; object will
                  not be modified.                
                <param>
                    page    the default PageFormat presented to the user
                      for modification                    
                </param>
                <return>
                    the original <code>page</code> object if the dialog
                      is cancelled, or a new PageFormat object containing
                      the format indicated by the user if the dialog is
                      acknowledged                    
                </return>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    JDK1.2                    
                </since>
            </javadoc>
            <method name="pageDialog" type="PageFormat" line="246">
                <params>
                    <param name="page" type="PageFormat"/>
                </params>
                <scope line="247"/>
                <scope line="250"/>
                <declaration name="pageClone" type="PageFormat" line="253"/>
                <declaration name="result" type="boolean" line="254"/>
                <declaration name="dialog" type="WPageDialog" line="255"/>
                <scope line="260">
                    <declaration name="printerName" type="String" line="261"/>
                    <scope line="262">
                        <scope line="263"/>
                        <scope line="266"/>
                    </scope>
                </scope>
                <scope line="272"/>
            </method>
            <method name="displayNativeDialog" type="boolean" line="276">
                <scope line="277"/>
                <declaration name="dlgOwner" type="DialogOwner" line="280"/>
                <declaration name="ownerFrame" type="Frame" line="281"/>
                <declaration name="dialog" type="WPrintDialog" line="282"/>
                <declaration name="prv" type="boolean" line="285"/>
                <declaration name="dest" type="Destination" line="287"/>
                <scope line="288"/>
                <scope line="291">
                    <declaration name="title" type="String" line="292"/>
                    <declaration name="strBundle" type="String" line="293"/>
                    <declaration name="rb" type="ResourceBundle" line="294"/>
                    <scope line="295"/>
                    <scope line="298"/>
                    <declaration name="fileDialog" type="FileDialog" line="300"/>
                    <declaration name="destURI" type="URI" line="301"/>
                    <declaration name="pathName" type="String" line="302"/>
                    <scope line="303">
                        <declaration name="file" type="File" line="304"/>
                        <declaration name="parent" type="File" line="306"/>
                        <scope line="307"/>
                    </scope>
                    <scope line="311"/>
                    <declaration name="fileName" type="String" line="315"/>
                    <scope line="316"/>
                    <declaration name="fullName" type="String" line="320"/>
                    <declaration name="f" type="File" line="321"/>
                    <declaration name="pFile" type="File" line="322"/>
                    <scope line="323">
                        <scope line="327"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="340">
                Presents the user a dialog for changing properties of the
                  print job interactively.                
                <returns>
                    false if the user cancels the dialog and
                      true otherwise.                    
                </returns>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="printDialog" type="boolean" line="349">
                <scope line="350"/>
                <scope line="353"/>
                <scope line="356"/>
                <scope line="359"/>
                <scope line="362"/>
            </method>
            <javadoc line="366">
                Associate this PrinterJob with a new PrintService.
                  Throws &lt;code&gt;PrinterException&lt;/code&gt; if the specified service
                  cannot support the &lt;code&gt;Pageable&lt;/code&gt; and
                  &lt;/code&gt;Printable&lt;/code&gt; interfaces necessary to support 2D printing.                
                <param>
                    a print service which supports 2D printing.                    
                </param>
                <throws>
                    PrinterException if the specified service does not support
                      2D printing.                    
                </throws>
            </javadoc>
            <method name="setPrintService" type="void" line="375">
                <params>
                    <param name="service" type="PrintService"/>
                </params>
                <scope line="377"/>
            </method>
            <method name="setNativePrintService" type="void" line="384"/>
            <method name="getPrintService" type="PrintService" line="385">
                <scope line="386">
                    <declaration name="printerName" type="String" line="387"/>
                    <scope line="388">
                        <scope line="390"/>
                    </scope>
                    <scope line="395">
                        <scope line="396"/>
                        <scope line="399"/>
                    </scope>
                </scope>
            </method>
            <method name="getNativePrintService" type="String" line="406"/>
            <method name="initAttributeMembers" type="void" line="407"/>
            <javadoc line="419">
                copy the attributes to the native print job
                  Note that this method, and hence the re-initialisation
                  of the GDI values is done on each entry to the print dialog since
                  an app could redisplay the print dialog for the same job and
                  1) the application may have changed attribute settings
                  2) the application may have changed the printer.
                  In the event that the user changes the printer using the
                  dialog, then it is up to GDI to report back all changed values.                
            </javadoc>
            <method name="setAttributes" type="void" line="429">
                <params>
                    <param name="attributes" type="PrintRequestAttributeSet"/>
                </params>
                <scope line="434"/>
                <declaration name="attrs" type="Attribute[]" line="437"/>
                <scope line="438">
                    <declaration name="attr" type="Attribute" line="439"/>
                    <scope line="440">
                        <scope line="441"/>
                        <scope line="444"/>
                        <scope line="447"/>
                        <scope line="450"/>
                        <scope line="453"/>
                        <scope line="456">
                            <scope line="457">
                                <declaration name="media" type="Media" line="458"/>
                                <scope line="459"/>
                            </scope>
                            <scope line="463"/>
                            <scope line="466"/>
                        </scope>
                    </scope>
                    <scope line="471"/>
                </scope>
            </method>
            <method name="getDefaultPage" type="void" line="475"/>
            <javadoc line="475">
                Alters the orientation and Paper to match defaults obtained
                  from a printer.                
            </javadoc>
            <javadoc line="480">
                The passed in PageFormat will be copied and altered to describe
                  the default page size and orientation of the PrinterJob&apos;s
                  current printer.
                  Note: PageFormat.getPaper() returns a clone and getDefaultPage()
                  gets that clone so it won&apos;t overwrite the original paper.                
            </javadoc>
            <method name="defaultPage" type="PageFormat" line="487">
                <params>
                    <param name="page" type="PageFormat"/>
                </params>
                <declaration name="newPage" type="PageFormat" line="488"/>
            </method>
            <method name="validatePaper" type="void" line="492"/>
            <javadoc line="492">
                validate the paper size against the current printer.                
            </javadoc>
            <javadoc line="496">
                Examine the metrics captured by the
                  &lt;code&gt;PeekGraphics&lt;/code&gt; instance and
                  if capable of directly converting this
                  print job to the printer&apos;s control language
                  or the native OS&apos;s graphics primitives, then
                  return a &lt;code&gt;PathGraphics&lt;/code&gt; to perform
                  that conversion. If there is not an object
                  capable of the conversion then return
                  &lt;code&gt;null&lt;/code&gt;. Returning &lt;code&gt;null&lt;/code&gt;
                  causes the print job to be rasterized.                
            </javadoc>
            <method name="createPathGraphics" type="Graphics2D" line="508">
                <params>
                    <param name="peekGraphics" type="PeekGraphics"/>
                    <param name="printerJob" type="PrinterJob"/>
                    <param name="painter" type="Printable"/>
                    <param name="pageFormat" type="PageFormat"/>
                    <param name="pageIndex" type="int"/>
                </params>
                <declaration name="pathGraphics" type="WPathGraphics" line="509"/>
                <declaration name="metrics" type="PeekMetrics" line="510"/>
                <scope line="511"/>
                <scope line="514">
                    <declaration name="bufferedImage" type="BufferedImage" line="515"/>
                    <declaration name="bufferedGraphics" type="Graphics2D" line="516"/>
                    <declaration name="canRedraw" type="boolean" line="517"/>
                </scope>
            </method>
            <method name="getXRes" type="double" line="522">
                <scope line="523"/>
                <scope line="526"/>
            </method>
            <method name="getYRes" type="double" line="530">
                <scope line="531"/>
                <scope line="534"/>
            </method>
            <method name="getPhysicalPrintableX" type="double" line="538">
                <params>
                    <param name="p" type="Paper"/>
                </params>
            </method>
            <method name="getPhysicalPrintableY" type="double" line="541">
                <params>
                    <param name="p" type="Paper"/>
                </params>
            </method>
            <method name="getPhysicalPrintableWidth" type="double" line="544">
                <params>
                    <param name="p" type="Paper"/>
                </params>
            </method>
            <method name="getPhysicalPrintableHeight" type="double" line="547">
                <params>
                    <param name="p" type="Paper"/>
                </params>
            </method>
            <method name="getPhysicalPageWidth" type="double" line="550">
                <params>
                    <param name="p" type="Paper"/>
                </params>
            </method>
            <method name="getPhysicalPageHeight" type="double" line="553">
                <params>
                    <param name="p" type="Paper"/>
                </params>
            </method>
            <javadoc line="556">
                We don&apos;t (yet) provide API to support collation, and
                  when we do the logic here will require adjustment, but
                  this method is currently necessary to honour user-originated
                  collation requests - which can only originate from the print dialog.
                  REMIND: check if this can be deleted already.                
            </javadoc>
            <method name="isCollated" type="boolean" line="563"/>
            <javadoc line="566">
                Returns how many times the entire book should
                  be printed by the PrintJob. If the printer
                  itself supports collation then this method
                  should return 1 indicating that the entire
                  book need only be printed once and the copies
                  will be collated and made in the printer.                
            </javadoc>
            <method name="getCollatedCopies" type="int" line="574">
                <scope line="576"/>
            </method>
            <javadoc line="583">
                Returns how many times each page in the book
                  should be consecutively printed by PrinterJob.
                  If the underlying Window&apos;s driver will
                  generate the copies, rather than having RasterPrinterJob
                  iterate over the number of copies, this method always returns
                  1.                
            </javadoc>
            <method name="getNoncollatedCopies" type="int" line="591">
                <scope line="592"/>
                <scope line="595"/>
            </method>
            <javadoc line="599">
                Return the Window&apos;s device context that we are printing
                  into.                
            </javadoc>
            <method name="getPrintDC" type="long" line="603"/>
            <method name="setPrintDC" type="void" line="606">
                <params>
                    <param name="mPrintDC" type="long"/>
                </params>
            </method>
            <method name="getDevMode" type="long" line="609"/>
            <method name="setDevMode" type="void" line="612">
                <params>
                    <param name="mPrintHDevMode" type="long"/>
                </params>
            </method>
            <method name="getDevNames" type="long" line="615"/>
            <method name="setDevNames" type="void" line="618">
                <params>
                    <param name="mPrintHDevNames" type="long"/>
                </params>
            </method>
            <method name="beginPath" type="void" line="621"/>
            <method name="endPath" type="void" line="624"/>
            <method name="closeFigure" type="void" line="627"/>
            <method name="fillPath" type="void" line="630"/>
            <method name="moveTo" type="void" line="633">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="lineTo" type="void" line="636">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="polyBezierTo" type="void" line="639">
                <params>
                    <param name="control1x" type="float"/>
                    <param name="control1y" type="float"/>
                    <param name="control2x" type="float"/>
                    <param name="control2y" type="float"/>
                    <param name="endX" type="float"/>
                    <param name="endY" type="float"/>
                </params>
            </method>
            <javadoc line="642">
                Set the current polgon fill rule into the printer device context.
                  The &lt;code&gt;fillRule&lt;/code&gt; should
                  be one of the following Windows constants:
                  &lt;code&gt;ALTERNATE&lt;/code&gt; or &lt;code&gt;WINDING&lt;/code&gt;.                
            </javadoc>
            <method name="setPolyFillMode" type="void" line="648">
                <params>
                    <param name="fillRule" type="int"/>
                </params>
            </method>
            <method name="selectSolidBrush" type="void" line="651">
                <params>
                    <param name="color" type="Color"/>
                </params>
                <scope line="652">
                    <declaration name="rgb" type="float[]" line="654"/>
                </scope>
            </method>
            <javadoc line="658">
                Return the x coordinate of the current pen
                  position in the print device context.                
            </javadoc>
            <method name="getPenX" type="int" line="662"/>
            <javadoc line="665">
                Return the y coordinate of the current pen
                  position in the print device context.                
            </javadoc>
            <method name="getPenY" type="int" line="669"/>
            <javadoc line="672">
                Set the current path in the printer device&apos;s
                  context to be clipping path.                
            </javadoc>
            <method name="selectClipPath" type="void" line="676"/>
            <method name="frameRect" type="void" line="679">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="width" type="float"/>
                    <param name="height" type="float"/>
                </params>
            </method>
            <method name="fillRect" type="void" line="682">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="width" type="float"/>
                    <param name="height" type="float"/>
                    <param name="color" type="Color"/>
                </params>
                <declaration name="rgb" type="float[]" line="683"/>
            </method>
            <method name="selectPen" type="void" line="686">
                <params>
                    <param name="width" type="float"/>
                    <param name="color" type="Color"/>
                </params>
                <declaration name="rgb" type="float[]" line="687"/>
            </method>
            <method name="selectStylePen" type="boolean" line="690">
                <params>
                    <param name="cap" type="int"/>
                    <param name="join" type="int"/>
                    <param name="width" type="float"/>
                    <param name="color" type="Color"/>
                </params>
                <declaration name="endCap" type="long" line="691"/>
                <declaration name="lineJoin" type="long" line="692"/>
                <declaration name="rgb" type="float[]" line="693"/>
            </method>
            <javadoc line="720">
                Set a GDI font capable of drawing the java Font
                  passed in.                
            </javadoc>
            <method name="setFont" type="boolean" line="724">
                <params>
                    <param name="family" type="String"/>
                    <param name="size" type="float"/>
                    <param name="style" type="int"/>
                    <param name="rotation" type="int"/>
                    <param name="awScale" type="float"/>
                </params>
                <declaration name="didSetFont" type="boolean" line="725"/>
                <scope line="726">
                    <scope line="728"/>
                </scope>
            </method>
            <javadoc line="738">
                Set the GDI color for text drawing.                
            </javadoc>
            <method name="setTextColor" type="void" line="741">
                <params>
                    <param name="color" type="Color"/>
                </params>
                <scope line="742">
                    <declaration name="rgb" type="float[]" line="744"/>
                </scope>
            </method>
            <javadoc line="748">
                Remove control characters.                
            </javadoc>
            <method name="removeControlChars" type="String" line="751">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="754">
                Draw the string &lt;code&gt;text&lt;/code&gt; to the printer&apos;s
                  device context at the specified position.                
            </javadoc>
            <method name="textOut" type="void" line="758">
                <params>
                    <param name="str" type="String"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="positions" type="float[]"/>
                </params>
            </method>
            <javadoc line="766">
                Draw the glyphs &lt;code&gt;glyphs&lt;/code&gt; to the printer&apos;s
                  device context at the specified position.                
            </javadoc>
            <method name="glyphsOut" type="void" line="770">
                <params>
                    <param name="glyphs" type="int[]"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="positions" type="float[]"/>
                </params>
                <declaration name="glyphCharArray" type="char[]" line="771"/>
                <scope line="772"/>
                <declaration name="glyphStr" type="String" line="775"/>
            </method>
            <javadoc line="778">
                Get the advance of this text that GDI returns for the
                  font currently selected into the GDI device context for
                  this job. Note that the removed control characters are
                  interpreted as zero-width by JDK and we remove them for
                  rendering so also remove them for measurement so that
                  this measurement can be properly compared with JDK measurement.                
            </javadoc>
            <method name="getGDIAdvance" type="int" line="786">
                <params>
                    <param name="text" type="String"/>
                </params>
                <scope line="788"/>
            </method>
            <javadoc line="793">
                Draw the 24 bit BGR image buffer represented by
                  &lt;code&gt;image&lt;/code&gt; to the GDI device context
                  &lt;code&gt;printDC&lt;/code&gt;. The image is drawn at
                  &lt;code&gt;(destX, destY)&lt;/code&gt; in device coordinates.
                  The image is scaled into a square of size
                  specified by &lt;code&gt;destWidth&lt;/code&gt; and
                  &lt;code&gt;destHeight&lt;/code&gt;. The portion of the
                  source image copied into that square is specified
                  by &lt;code&gt;srcX&lt;/code&gt;, &lt;code&gt;srcY&lt;/code&gt;,
                  &lt;code&gt;srcWidth&lt;/code&gt;, and srcHeight.                
            </javadoc>
            <method name="drawImage3ByteBGR" type="void" line="805">
                <params>
                    <param name="image" type="byte[]"/>
                    <param name="destX" type="float"/>
                    <param name="destY" type="float"/>
                    <param name="destWidth" type="float"/>
                    <param name="destHeight" type="float"/>
                    <param name="srcX" type="float"/>
                    <param name="srcY" type="float"/>
                    <param name="srcWidth" type="float"/>
                    <param name="srcHeight" type="float"/>
                </params>
            </method>
            <method name="drawDIBImage" type="void" line="808">
                <params>
                    <param name="image" type="byte[]"/>
                    <param name="destX" type="float"/>
                    <param name="destY" type="float"/>
                    <param name="destWidth" type="float"/>
                    <param name="destHeight" type="float"/>
                    <param name="srcX" type="float"/>
                    <param name="srcY" type="float"/>
                    <param name="srcWidth" type="float"/>
                    <param name="srcHeight" type="float"/>
                    <param name="sampleBitsPerPixel" type="int"/>
                    <param name="icm" type="IndexColorModel"/>
                </params>
                <declaration name="bitCount" type="int" line="809"/>
                <declaration name="bmiColors" type="byte[]" line="810"/>
                <scope line="811">
                    <scope line="814"/>
                </scope>
            </method>
            <javadoc line="822">
                Begin a new page.                
            </javadoc>
            <method name="startPage" type="void" line="825">
                <params>
                    <param name="format" type="PageFormat"/>
                    <param name="painter" type="Printable"/>
                    <param name="index" type="int"/>
                    <param name="paperChanged" type="boolean"/>
                </params>
            </method>
            <javadoc line="829">
                End a page.                
            </javadoc>
            <method name="endPage" type="void" line="832">
                <params>
                    <param name="format" type="PageFormat"/>
                    <param name="painter" type="Printable"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="835">
                Forget any device state we may have cached.                
            </javadoc>
            <method name="invalidateCachedState" type="void" line="838"/>
            <javadoc line="843">
                Set the number of copies to be printed.                
            </javadoc>
            <method name="setCopies" type="void" line="846">
                <params>
                    <param name="copies" type="int"/>
                </params>
            </method>
            <method name="setNativeCopies" type="void" line="851"/>
            <javadoc line="851">
                Set copies in device.                
            </javadoc>
            <method name="jobSetup" type="boolean" line="855"/>
            <javadoc line="855">
                Displays the print dialog and records the user&apos;s settings
                  into this object. Return false if the user cancels the
                  dialog.
                  If the dialog is to use a set of attributes, useAttributes is true.                
            </javadoc>
            <method name="initPrinter" type="void" line="862"/>
            <method name="_startDoc" type="boolean" line="863"/>
            <javadoc line="863">
                Call Window&apos;s StartDoc routine to begin a
                  print job. The DC from the print dialog is
                  used. If the print dialog was not displayed
                  then a DC for the default printer is created.
                  The native StartDoc returns false if the end-user cancelled
                  printing. This is possible if the printer is connected to FILE:
                  in which case windows queries the user for a destination and the
                  user may cancel out of it. Note that the implementation of
                  cancel() throws PrinterAbortException to indicate the user cancelled.                
            </javadoc>
            <method name="startDoc" type="void" line="875">
                <scope line="876"/>
            </method>
            <method name="endDoc" type="void" line="880"/>
            <javadoc line="880">
                Call Window&apos;s EndDoc routine to end a
                  print job.                
            </javadoc>
            <method name="abortDoc" type="void" line="885"/>
            <javadoc line="885">
                Call Window&apos;s AbortDoc routine to abort a
                  print job.                
            </javadoc>
            <method name="deleteDC" type="void" line="890"/>
            <javadoc line="890">
                Call Windows native resource freeing APIs                
            </javadoc>
            <method name="deviceStartPage" type="void" line="894"/>
            <javadoc line="894">
                Begin a new page. This call&apos;s Window&apos;s
                  StartPage routine.                
            </javadoc>
            <method name="deviceEndPage" type="void" line="899"/>
            <javadoc line="899">
                End a page. This call&apos;s Window&apos;s EndPage
                  routine.                
            </javadoc>
            <method name="printBand" type="void" line="904"/>
            <javadoc line="904">
                Prints the contents of the array of ints, &apos;data&apos;
                  to the current page. The band is placed at the
                  location (x, y) in device coordinates on the
                  page. The width and height of the band is
                  specified by the caller.                
            </javadoc>
            <method name="beginPath" type="void" line="912"/>
            <javadoc line="912">
                Begin a Window&apos;s rendering path in the device
                  context &lt;code&gt;printDC&lt;/code&gt;.                
            </javadoc>
            <method name="endPath" type="void" line="917"/>
            <javadoc line="917">
                End a Window&apos;s rendering path in the device
                  context &lt;code&gt;printDC&lt;/code&gt;.                
            </javadoc>
            <method name="closeFigure" type="void" line="922"/>
            <javadoc line="922">
                Close a subpath in a Window&apos;s rendering path in the device
                  context &lt;code&gt;printDC&lt;/code&gt;.                
            </javadoc>
            <method name="fillPath" type="void" line="927"/>
            <javadoc line="927">
                Fill a defined Window&apos;s rendering path in the device
                  context &lt;code&gt;printDC&lt;/code&gt;.                
            </javadoc>
            <method name="moveTo" type="void" line="932"/>
            <javadoc line="932">
                Move the Window&apos;s pen position to &lt;code&gt;(x,y)&lt;/code&gt;
                  in the device context &lt;code&gt;printDC&lt;/code&gt;.                
            </javadoc>
            <method name="lineTo" type="void" line="937"/>
            <javadoc line="937">
                Draw a line from the current pen position to
                  &lt;code&gt;(x,y)&lt;/code&gt; in the device context &lt;code&gt;printDC&lt;/code&gt;.                
            </javadoc>
            <method name="polyBezierTo" type="void" line="942"/>
            <method name="setPolyFillMode" type="void" line="943"/>
            <javadoc line="943">
                Set the current polgon fill rule into the device context
                  &lt;code&gt;printDC&lt;/code&gt;. The &lt;code&gt;fillRule&lt;/code&gt; should
                  be one of the following Windows constants:
                  &lt;code&gt;ALTERNATE&lt;/code&gt; or &lt;code&gt;WINDING&lt;/code&gt;.                
            </javadoc>
            <method name="selectSolidBrush" type="void" line="950"/>
            <javadoc line="950">
                Create a Window&apos;s solid brush for the color specified
                  by &lt;code&gt;(red, green, blue)&lt;/code&gt;. Once the brush
                  is created, select it in the device
                  context &lt;code&gt;printDC&lt;/code&gt; and free the old brush.                
            </javadoc>
            <method name="getPenX" type="int" line="957"/>
            <javadoc line="957">
                Return the x coordinate of the current pen
                  position in the device context
                  &lt;code&gt;printDC&lt;/code&gt;.                
            </javadoc>
            <method name="getPenY" type="int" line="963"/>
            <javadoc line="963">
                Return the y coordinate of the current pen
                  position in the device context
                  &lt;code&gt;printDC&lt;/code&gt;.                
            </javadoc>
            <method name="selectClipPath" type="void" line="969"/>
            <javadoc line="969">
                Select the device context&apos;s current path
                  to be the clipping path.                
            </javadoc>
            <method name="frameRect" type="void" line="974"/>
            <javadoc line="974">
                Draw a rectangle using specified brush.                
            </javadoc>
            <method name="fillRect" type="void" line="978"/>
            <javadoc line="978">
                Fill a rectangle specified by the coordinates using
                  specified brush.                
            </javadoc>
            <method name="selectPen" type="void" line="983"/>
            <javadoc line="983">
                Create a solid brush using the RG &amp; B colors and width.
                  Select this brush and delete the old one.                
            </javadoc>
            <method name="selectStylePen" type="boolean" line="988"/>
            <javadoc line="988">
                Create a solid brush using the RG &amp; B colors and specified
                  pen styles.  Select this created brush and delete the old one.                
            </javadoc>
            <method name="setFont" type="boolean" line="993"/>
            <javadoc line="993">
                Set a GDI font capable of drawing the java Font
                  passed in.                
            </javadoc>
            <method name="setTextColor" type="void" line="998"/>
            <javadoc line="998">
                Set the GDI color for text drawing.                
            </javadoc>
            <method name="textOut" type="void" line="1002"/>
            <javadoc line="1002">
                Draw the string &lt;code&gt;text&lt;/code&gt; into the device
                  context &lt;code&gt;printDC&lt;/code&gt; at the specified
                  position.                
            </javadoc>
            <method name="getGDIAdvance" type="int" line="1008"/>
            <method name="drawDIBImage" type="void" line="1009"/>
            <javadoc line="1009">
                Draw the DIB compatible image buffer represented by
                  &lt;code&gt;image&lt;/code&gt; to the GDI device context
                  &lt;code&gt;printDC&lt;/code&gt;. The image is drawn at
                  &lt;code&gt;(destX, destY)&lt;/code&gt; in device coordinates.
                  The image is scaled into a square of size
                  specified by &lt;code&gt;destWidth&lt;/code&gt; and
                  &lt;code&gt;destHeight&lt;/code&gt;. The portion of the
                  source image copied into that square is specified
                  by &lt;code&gt;srcX&lt;/code&gt;, &lt;code&gt;srcY&lt;/code&gt;,
                  &lt;code&gt;srcWidth&lt;/code&gt;, and srcHeight.
                  Note that the image isn&apos;t completely compatible with DIB format.
                  At the very least it needs to be padded so each scanline is
                  DWORD aligned. Also we &quot;flip&quot; the image to make it a bottom-up DIB.                
            </javadoc>
            <method name="getPrinterAttrib" type="String" line="1025">
                <declaration name="service" type="PrintService" line="1026"/>
                <declaration name="name" type="String" line="1027"/>
            </method>
            <method name="getCollateAttrib" type="boolean" line="1030"/>
            <method name="setCollateAttrib" type="void" line="1033">
                <params>
                    <param name="attr" type="Attribute"/>
                </params>
                <scope line="1034"/>
                <scope line="1037"/>
            </method>
            <method name="setCollateAttrib" type="void" line="1041">
                <params>
                    <param name="attr" type="Attribute"/>
                    <param name="set" type="PrintRequestAttributeSet"/>
                </params>
            </method>
            <method name="getOrientAttrib" type="int" line="1045">
                <declaration name="orient" type="int" line="1046"/>
                <declaration name="orientReq" type="OrientationRequested" line="1047"/>
                <scope line="1048">
                    <scope line="1049"/>
                    <scope line="1052"/>
                </scope>
            </method>
            <method name="setOrientAttrib" type="void" line="1058">
                <params>
                    <param name="attr" type="Attribute"/>
                    <param name="set" type="PrintRequestAttributeSet"/>
                </params>
                <scope line="1059"/>
            </method>
            <method name="getCopiesAttrib" type="int" line="1063"/>
            <method name="setRangeCopiesAttribute" type="void" line="1066">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="isRangeSet" type="boolean"/>
                    <param name="copies" type="int"/>
                </params>
                <scope line="1067">
                    <scope line="1068"/>
                </scope>
            </method>
            <method name="getFromPageAttrib" type="int" line="1077">
                <scope line="1078">
                    <declaration name="pageRangesAttr" type="PageRanges" line="1079"/>
                    <scope line="1080">
                        <declaration name="range" type="int[][]" line="1081"/>
                    </scope>
                </scope>
            </method>
            <method name="getToPageAttrib" type="int" line="1087">
                <scope line="1088">
                    <declaration name="pageRangesAttr" type="PageRanges" line="1089"/>
                    <scope line="1090">
                        <declaration name="range" type="int[][]" line="1091"/>
                    </scope>
                </scope>
            </method>
            <method name="getMinPageAttrib" type="int" line="1097">
                <scope line="1098">
                    <declaration name="s" type="SunMinMaxPage" line="1099"/>
                    <scope line="1100"/>
                </scope>
            </method>
            <method name="getMaxPageAttrib" type="int" line="1106">
                <scope line="1107">
                    <declaration name="s" type="SunMinMaxPage" line="1108"/>
                    <scope line="1109"/>
                </scope>
                <declaration name="pageable" type="Pageable" line="1113"/>
                <scope line="1114">
                    <declaration name="numPages" type="int" line="1115"/>
                    <scope line="1116"/>
                </scope>
            </method>
            <method name="getDestAttrib" type="boolean" line="1123"/>
            <method name="getQualityAttrib" type="int" line="1126"/>
            <method name="setQualityAttrib" type="void" line="1129">
                <params>
                    <param name="attr" type="Attribute"/>
                </params>
                <scope line="1130"/>
                <scope line="1133"/>
                <scope line="1136"/>
            </method>
            <method name="setQualityAttrib" type="void" line="1140">
                <params>
                    <param name="attr" type="Attribute"/>
                    <param name="set" type="PrintRequestAttributeSet"/>
                </params>
            </method>
            <method name="getColorAttrib" type="int" line="1144"/>
            <method name="setColorAttrib" type="void" line="1147">
                <params>
                    <param name="attr" type="Attribute"/>
                </params>
                <scope line="1148"/>
                <scope line="1151"/>
            </method>
            <method name="setColorAttrib" type="void" line="1155">
                <params>
                    <param name="attr" type="Attribute"/>
                    <param name="set" type="PrintRequestAttributeSet"/>
                </params>
            </method>
            <method name="getSidesAttrib" type="int" line="1159"/>
            <method name="setSidesAttrib" type="void" line="1162">
                <params>
                    <param name="attr" type="Attribute"/>
                </params>
                <scope line="1163"/>
                <scope line="1166"/>
                <scope line="1169"/>
            </method>
            <method name="setSidesAttrib" type="void" line="1173">
                <params>
                    <param name="attr" type="Attribute"/>
                    <param name="set" type="PrintRequestAttributeSet"/>
                </params>
            </method>
            <javadoc line="1177">
                MediaSizeName / dmPaper                
            </javadoc>
            <method name="getWin32MediaAttrib" type="int[]" line="1180">
                <declaration name="wid_ht" type="int" line="1181"/>
                <scope line="1182">
                    <declaration name="media" type="Media" line="1183"/>
                    <scope line="1184">
                        <declaration name="msn" type="MediaSizeName" line="1185"/>
                        <declaration name="ms" type="MediaSize" line="1186"/>
                        <scope line="1187"/>
                    </scope>
                </scope>
            </method>
            <method name="setWin32MediaAttrib" type="void" line="1195">
                <params>
                    <param name="attr" type="Attribute"/>
                </params>
                <scope line="1196"/>
                <declaration name="msn" type="MediaSizeName" line="1199"/>
            </method>
            <method name="setWin32MediaAttrib" type="void" line="1202">
                <params>
                    <param name="dmIndex" type="int"/>
                    <param name="width" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="msn" type="MediaSizeName" line="1203"/>
                <scope line="1204"/>
                <scope line="1207">
                    <scope line="1208"/>
                </scope>
            </method>
            <method name="setMediaTrayAttrib" type="void" line="1214">
                <params>
                    <param name="attr" type="Attribute"/>
                </params>
                <scope line="1215"/>
                <scope line="1218"/>
                <scope line="1221"/>
                <scope line="1224"/>
                <scope line="1227"/>
                <scope line="1230"/>
                <scope line="1233"/>
                <scope line="1236"/>
                <scope line="1239">
                    <scope line="1240"/>
                    <scope line="1243"/>
                </scope>
            </method>
            <method name="setMediaTrayAttrib" type="void" line="1248">
                <params>
                    <param name="dmBinID" type="int"/>
                </params>
                <declaration name="tray" type="MediaTray" line="1250"/>
            </method>
            <method name="getMediaTrayAttrib" type="int" line="1252"/>
            <method name="getSelectAttrib" type="int" line="1255">
                <scope line="1256">
                    <declaration name="pages" type="SunPageSelection" line="1257"/>
                    <scope line="1258"/>
                    <scope line="1261"/>
                    <scope line="1264"/>
                </scope>
            </method>
            <method name="getPrintToFileEnabled" type="boolean" line="1270">
                <declaration name="security" type="SecurityManager" line="1271"/>
                <scope line="1272">
                    <declaration name="printToFilePermission" type="FilePermission" line="1273"/>
                    <scope line="1274"/>
                    <scope line="1277"/>
                </scope>
            </method>
            <method name="setNativeAttributes" type="void" line="1283">
                <params>
                    <param name="flags" type="int"/>
                    <param name="fields" type="int"/>
                    <param name="values" type="int"/>
                </params>
                <scope line="1284"/>
                <scope line="1287">
                    <declaration name="destPrn" type="Destination" line="1288"/>
                    <scope line="1289">
                        <scope line="1290"/>
                        <scope line="1293">
                            <scope line="1294"/>
                            <scope line="1297"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1302"/>
                <scope line="1305"/>
                <scope line="1308"/>
                <scope line="1311"/>
                <scope line="1314"/>
                <scope line="1317"/>
                <scope line="1320">
                    <scope line="1321"/>
                    <scope line="1324"/>
                </scope>
                <scope line="1328">
                    <scope line="1329"/>
                    <scope line="1332"/>
                </scope>
                <scope line="1336">
                    <declaration name="quality" type="PrintQuality" line="1337"/>
                    <scope line="1338"/>
                    <scope line="1341"/>
                    <scope line="1344"/>
                </scope>
                <scope line="1349">
                    <declaration name="sides" type="Sides" line="1350"/>
                    <scope line="1351"/>
                    <scope line="1354"/>
                    <scope line="1357"/>
                </scope>
            </method>
            <method name="setResolutionDPI" type="void" line="1363">
                <params>
                    <param name="xres" type="int"/>
                    <param name="yres" type="int"/>
                </params>
                <scope line="1364">
                    <declaration name="res" type="PrinterResolution" line="1365"/>
                </scope>
            </method>
            <method name="setResolutionAttrib" type="void" line="1371">
                <params>
                    <param name="attr" type="Attribute"/>
                </params>
                <declaration name="pr" type="PrinterResolution" line="1372"/>
            </method>
            <method name="setPrinterNameAttrib" type="void" line="1376">
                <params>
                    <param name="printerName" type="String"/>
                </params>
                <declaration name="service" type="PrintService" line="1377"/>
                <scope line="1378"/>
                <scope line="1381"/>
                <scope line="1384">
                    <declaration name="services" type="PrintService[]" line="1385"/>
                    <scope line="1386">
                        <scope line="1387">
                            <scope line="1388"/>
                            <scope line="1391"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <class name="PrintToFileErrorDialog" line="1398">
                <extends class="Dialog"/>
                <implements interface="ActionListener"/>
                <method name="PrintToFileErrorDialog" type="constructor" line="1399">
                    <params>
                        <param name="parent" type="Frame"/>
                        <param name="title" type="String"/>
                        <param name="message" type="String"/>
                        <param name="buttonText" type="String"/>
                    </params>
                </method>
                <method name="PrintToFileErrorDialog" type="constructor" line="1403">
                    <params>
                        <param name="parent" type="Dialog"/>
                        <param name="title" type="String"/>
                        <param name="message" type="String"/>
                        <param name="buttonText" type="String"/>
                    </params>
                </method>
                <method name="init" type="void" line="1407">
                    <params>
                        <param name="parent" type="Component"/>
                        <param name="title" type="String"/>
                        <param name="message" type="String"/>
                        <param name="buttonText" type="String"/>
                    </params>
                    <declaration name="p" type="Panel" line="1408"/>
                    <declaration name="btn" type="Button" line="1410"/>
                    <declaration name="dDim" type="Dimension" line="1415"/>
                    <scope line="1416">
                        <declaration name="fRect" type="Rectangle" line="1417"/>
                    </scope>
                </method>
                <method name="actionPerformed" type="void" line="1421">
                    <params>
                        <param name="event" type="ActionEvent"/>
                    </params>
                </method>
            </class>
            <method name="initIDs" type="void" line="1427"/>
            <javadoc line="1427">
                Initialize JNI field and method ids                
            </javadoc>
        </class>
    </source>