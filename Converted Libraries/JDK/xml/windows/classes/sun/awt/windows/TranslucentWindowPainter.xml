<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.windows">
        <import package="java.awt.AlphaComposite"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.Window"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.DataBufferInt"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.security.AccessController"/>
        <import package="sun.awt.image.BufImgSurfaceData"/>
        <import package="sun.java2d.DestSurfaceProvider"/>
        <import package="sun.java2d.InvalidPipeException"/>
        <import package="sun.java2d.Surface"/>
        <import package="sun.java2d.pipe.RenderQueue"/>
        <import package="sun.java2d.pipe.hw.AccelGraphicsConfig"/>
        <import package="sun.java2d.pipe.hw.AccelSurface"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="java.awt.Transparency"/>
        <import package="sun.java2d.pipe.hw.AccelSurface"/>
        <import package="sun.java2d.pipe.hw.ContextCapabilities"/>
        <class name="TranslucentWindowPainter" line="52">
            <comment line="67">
                REMIND: we probably would want to remove this later                
            </comment>
            <javadoc line="52">
                This class handles the updates of the non-opaque windows.
                  The window associated with the peer is updated either given an image or
                  the window is repainted to an internal buffer which is then used to update
                  the window.
                  Note: this class does not attempt to be thread safe, it is expected to be
                  called from a single thread (EDT).                
            </javadoc>
            <declaration name="window" type="Window" line="63"/>
            <declaration name="peer" type="WWindowPeer" line="64"/>
            <declaration name="forceOpt" type="boolean" line="67"/>
            <declaration name="forceSW" type="boolean" line="70"/>
            <javadoc line="74">
                Creates an instance of the painter for particular peer.                
            </javadoc>
            <method name="createInstance" type="TranslucentWindowPainter" line="77">
                <params>
                    <param name="peer" type="WWindowPeer"/>
                </params>
                <comment line="83">
                    this is a heuristic to check that we have a pcix board
                     (those have higher transfer rate from gpu to cpu)                    
                </comment>
                <comment line="88">
                    we check for name to avoid loading classes unnecessarily if
                     a pipeline isn&apos;t enabled                    
                </comment>
                <comment line="93">
                    on some boards (namely, ATI, even on pcix bus) ogl is
                     very slow reading pixels back so for now it is disabled
                     unless forced                    
                </comment>
                <declaration name="gc" type="GraphicsConfiguration" line="78"/>
                <scope line="79">
                    <declaration name="gcName" type="String" line="80"/>
                    <declaration name="agc" type="AccelGraphicsConfig" line="81"/>
                    <scope line="86">
                        <scope line="89"/>
                        <scope line="91"/>
                    </scope>
                </scope>
            </method>
            <method name="TranslucentWindowPainter" type="constructor" line="102">
                <params>
                    <param name="peer" type="WWindowPeer"/>
                </params>
            </method>
            <method name="getBackBuffer" type="Image" line="107"/>
            <javadoc line="107">
                Creates (if needed), clears (if requested) and returns the buffer
                  for this painter.                
            </javadoc>
            <method name="update" type="boolean" line="113"/>
            <javadoc line="113">
                Updates the the window associated with this painter with the contents
                  of the passed image.
                  The image can not be null, and NPE will be thrown if it is.                
            </javadoc>
            <method name="flush" type="void" line="120"/>
            <javadoc line="120">
                Flushes the resources associated with the painter. They will be
                  recreated as needed.                
            </javadoc>
            <javadoc line="126">
                Updates the window associated with the painter.                
                <param>
                    repaint indicates if the window should be completely repainted
                      to the back buffer using {@link java.awt.Window#paintAll} before update.                    
                </param>
            </javadoc>
            <method name="updateWindow" type="void" line="132">
                <params>
                    <param name="repaint" type="boolean"/>
                </params>
                <declaration name="done" type="boolean" line="133"/>
                <declaration name="bb" type="Image" line="134"/>
                <scope line="135">
                    <scope line="136">
                        <declaration name="g" type="Graphics2D" line="137"/>
                        <scope line="138"/>
                        <scope line="140"/>
                    </scope>
                    <scope line="146"/>
                </scope>
            </method>
            <method name="clearImage" type="Image" line="153">
                <params>
                    <param name="bb" type="Image"/>
                </params>
                <declaration name="g" type="Graphics2D" line="154"/>
                <declaration name="w" type="int" line="155"/>
                <declaration name="h" type="int" line="156"/>
            </method>
            <class name="BIWindowPainter" line="165">
                <extends class="TranslucentWindowPainter"/>
                <javadoc line="165">
                    A painter which uses BufferedImage as the internal buffer. The window
                      is painted into this buffer, and the contents then are uploaded
                      into the layered window.
                      This painter handles all types of images passed to its paint(Image)
                      method (VI, BI, regular Images).                    
                </javadoc>
                <declaration name="backBuffer" type="BufferedImage" line="174"/>
                <method name="BIWindowPainter" type="constructor" line="176">
                    <params>
                        <param name="peer" type="WWindowPeer"/>
                    </params>
                </method>
                <method name="getBackBuffer" type="Image" line="181">
                    <params>
                        <param name="clear" type="boolean"/>
                    </params>
                    <declaration name="w" type="int" line="182"/>
                    <declaration name="h" type="int" line="183"/>
                    <scope line="187"/>
                </method>
                <method name="update" type="boolean" line="195">
                    <params>
                        <param name="bb" type="Image"/>
                    </params>
                    <comment line="210">
                        the image is probably lost, upload the data from the
                         backup surface to avoid creating another heap-based
                         image (the parent&apos;s buffer)                        
                    </comment>
                    <comment line="224">
                        copy the passed image into our own buffer, then upload                        
                    </comment>
                    <declaration name="viBB" type="VolatileImage" line="196"/>
                    <scope line="198">
                        <declaration name="bi" type="BufferedImage" line="199"/>
                        <declaration name="data" type="int" line="200"/>
                    </scope>
                    <scope line="204">
                        <scope line="206">
                            <declaration name="s" type="Surface" line="207"/>
                            <scope line="208">
                                <declaration name="w" type="int" line="212"/>
                                <declaration name="h" type="int" line="213"/>
                                <declaration name="bisd" type="BufImgSurfaceData" line="214"/>
                                <declaration name="data" type="int" line="215"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="bi" type="BufferedImage" line="224"/>
                    <declaration name="data" type="int" line="226"/>
                </method>
                <method name="flush" type="void" line="233">
                    <scope line="234"/>
                </method>
            </class>
            <class name="VIWindowPainter" line="241">
                <extends class="BIWindowPainter"/>
                <javadoc line="241">
                    A version of the painter which uses VolatileImage as the internal buffer.
                      The window is painted into this VI and then copied into the parent&apos;s
                      Java heap-based buffer (which is then uploaded to the layered window)                    
                </javadoc>
                <declaration name="viBB" type="VolatileImage" line="247"/>
                <method name="VIWindowPainter" type="constructor" line="249">
                    <params>
                        <param name="peer" type="WWindowPeer"/>
                    </params>
                </method>
                <method name="getBackBuffer" type="Image" line="254">
                    <params>
                        <param name="clear" type="boolean"/>
                    </params>
                    <declaration name="w" type="int" line="255"/>
                    <declaration name="h" type="int" line="256"/>
                    <declaration name="gc" type="GraphicsConfiguration" line="257"/>
                    <scope line="261">
                        <scope line="264">
                            <declaration name="agc" type="AccelGraphicsConfig" line="265"/>
                        </scope>
                        <scope line="270"/>
                    </scope>
                </method>
                <method name="flush" type="void" line="280">
                    <scope line="281"/>
                </method>
            </class>
            <class name="VIOptWindowPainter" line="288">
                <extends class="VIWindowPainter"/>
                <javadoc line="288">
                    Optimized version of hw painter. Uses VolatileImages for the
                      buffer, and uses an optimized path to pull the data from those into
                      the layered window, bypassing Java heap-based image.                    
                </javadoc>
                <method name="VIOptWindowPainter" type="constructor" line="295">
                    <params>
                        <param name="peer" type="WWindowPeer"/>
                    </params>
                </method>
                <method name="updateWindowAccel" type="boolean" line="299"/>
                <method name="update" type="boolean" line="302">
                    <params>
                        <param name="bb" type="Image"/>
                    </params>
                    <comment line="322">
                        ignore, false will be returned                        
                    </comment>
                    <scope line="303">
                        <declaration name="s" type="Surface" line="304"/>
                        <scope line="305">
                            <declaration name="w" type="int" line="306"/>
                            <declaration name="h" type="int" line="307"/>
                            <declaration name="arr" type="boolean" line="308"/>
                            <declaration name="as" type="AccelSurface" line="309"/>
                            <declaration name="rq" type="RenderQueue" line="310"/>
                            <scope line="312">
                                <anonymous_class line="314">
                                    <method name="run" type="void" line="315">
                                        <declaration name="psdops" type="long" line="316"/>
                                    </method>
                                </anonymous_class>
                            </scope>
                            <scope line="320"/>
                            <scope line="322"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="VIOptD3DWindowPainter" line="332">
                <extends class="VIOptWindowPainter"/>
                <method name="VIOptD3DWindowPainter" type="constructor" line="334">
                    <params>
                        <param name="peer" type="WWindowPeer"/>
                    </params>
                </method>
                <method name="updateWindowAccel" type="boolean" line="339">
                    <params>
                        <param name="psdops" type="long"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                    <comment line="341">
                        note: this method is executed on the toolkit thread, no sync is
                         necessary at the native level, and a pointer to peer can be used                        
                    </comment>
                </method>
            </class>
            <class name="VIOptWGLWindowPainter" line="347">
                <extends class="VIOptWindowPainter"/>
                <method name="VIOptWGLWindowPainter" type="constructor" line="349">
                    <params>
                        <param name="peer" type="WWindowPeer"/>
                    </params>
                </method>
                <method name="updateWindowAccel" type="boolean" line="354">
                    <params>
                        <param name="psdops" type="long"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                    <comment line="356">
                        note: part of this method which deals with GDI will be on the
                         toolkit thread                        
                    </comment>
                </method>
            </class>
        </class>
    </source>