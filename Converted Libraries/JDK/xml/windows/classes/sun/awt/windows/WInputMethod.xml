<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.windows">
        <import package="java.awt"/>
        <import package="java.awt.peer"/>
        <import package="java.awt.event"/>
        <import package="java.awt.im"/>
        <import package="java.awt.im.spi.InputMethodContext"/>
        <import package="java.awt.font"/>
        <import package="java.text"/>
        <import package="java.text.AttributedCharacterIterator.Attribute"/>
        <import package="java.lang.Character.Subset"/>
        <import package="java.lang.Character.UnicodeBlock"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Map"/>
        <import package="sun.awt.im.InputMethodAdapter"/>
        <class name="WInputMethod" line="45">
            <extends class="InputMethodAdapter"/>
            <comment line="61">
                default open status;                
            </comment>
            <comment line="62">
                default conversion mode;                
            </comment>
            <comment line="64">
                indicate whether status window is hidden or not.                
            </comment>
            <comment line="67">
                attribute definition in Win32 (in IMM.H)                
            </comment>
            <comment line="73">
                cmode definition in Win32 (in IMM.H)                
            </comment>
            <comment line="82">
                flag values for endCompositionNative() behavior                
            </comment>
            <comment line="88">
                Initialize highlight mapping table                
            </comment>
            <comment line="369">
                implements sun.awt.im.InputMethodAdapter.setAWTFocussedComponent                
            </comment>
            <comment line="389">
                implements java.awt.im.spi.InputMethod.hideWindows                
            </comment>
            <comment line="430">
                see sun.awt.im.InputMethodAdapter.supportsBelowTheSpot                
            </comment>
            <comment line="586">
                java.awt.Toolkit#getNativeContainer() is not available                
            </comment>
            <comment line="587">
                from this package                
            </comment>
            <declaration name="inputContext" type="InputMethodContext" line="47"/>
            <javadoc line="47">
                The input method context, which is used to dispatch input method
                  events to the client component and to request information from
                  the client component.                
            </javadoc>
            <declaration name="awtFocussedComponent" type="Component" line="54"/>
            <declaration name="awtFocussedComponentPeer" type="WComponentPeer" line="55"/>
            <declaration name="lastFocussedComponentPeer" type="WComponentPeer" line="56"/>
            <declaration name="isLastFocussedActiveClient" type="boolean" line="57"/>
            <declaration name="isActive" type="boolean" line="58"/>
            <declaration name="context" type="int" line="59"/>
            <declaration name="open" type="boolean" line="60"/>
            <declaration name="cmode" type="int" line="61"/>
            <declaration name="currentLocale" type="Locale" line="62"/>
            <declaration name="statusWindowHidden" type="boolean" line="64"/>
            <declaration name="ATTR_INPUT" type="byte" line="67"/>
            <declaration name="ATTR_TARGET_CONVERTED" type="byte" line="68"/>
            <declaration name="ATTR_CONVERTED" type="byte" line="69"/>
            <declaration name="ATTR_TARGET_NOTCONVERTED" type="byte" line="70"/>
            <declaration name="ATTR_INPUT_ERROR" type="byte" line="71"/>
            <declaration name="IME_CMODE_ALPHANUMERIC" type="int" line="73"/>
            <declaration name="IME_CMODE_NATIVE" type="int" line="74"/>
            <declaration name="IME_CMODE_KATAKANA" type="int" line="75"/>
            <declaration name="IME_CMODE_LANGUAGE" type="int" line="76"/>
            <declaration name="IME_CMODE_FULLSHAPE" type="int" line="77"/>
            <declaration name="IME_CMODE_HANJACONVERT" type="int" line="78"/>
            <declaration name="IME_CMODE_ROMAN" type="int" line="79"/>
            <declaration name="COMMIT_INPUT" type="boolean" line="82"/>
            <declaration name="DISCARD_INPUT" type="boolean" line="83"/>
            <declaration name="highlightStyles" type="Map[]" line="85"/>
            <scope line="88">
                <declaration name="styles" type="Map" line="89"/>
                <declaration name="map" type="HashMap" line="90"/>
                <declaration name="navyBlue" type="Color" line="109"/>
            </scope>
            <method name="WInputMethod" type="constructor" line="120">
                <scope line="125"/>
            </method>
            <method name="finalize" type="void" line="131">
                <comment line="132">
                    Release the resources used by the native input context.                    
                </comment>
                <scope line="133"/>
            </method>
            <method name="setInputMethodContext" type="void" line="140">
                <params>
                    <param name="context" type="InputMethodContext"/>
                </params>
            </method>
            <method name="dispose" type="void" line="144">
                <comment line="145">
                    Due to a memory management problem in Windows 98, we should retain                    
                </comment>
                <comment line="146">
                    the native input context until this object is finalized. So do                    
                </comment>
                <comment line="147">
                    nothing here.                    
                </comment>
            </method>
            <javadoc line="150">
                Returns null.                
                <see>
                    java.awt.im.spi.InputMethod#getControlObject                    
                </see>
            </javadoc>
            <method name="getControlObject" type="Object" line="155"/>
            <method name="setLocale" type="boolean" line="159">
                <params>
                    <param name="lang" type="Locale"/>
                </params>
            </method>
            <method name="setLocale" type="boolean" line="163">
                <params>
                    <param name="lang" type="Locale"/>
                    <param name="onActivate" type="boolean"/>
                </params>
                <comment line="168">
                    special compatibility rule for Japanese and Korean                    
                </comment>
                <declaration name="available" type="Locale[]" line="164"/>
                <scope line="165">
                    <declaration name="locale" type="Locale" line="166"/>
                    <scope line="170">
                        <scope line="171"/>
                    </scope>
                </scope>
            </method>
            <method name="getLocale" type="Locale" line="181">
                <scope line="182">
                    <scope line="184"/>
                </scope>
            </method>
            <javadoc line="191">
                Implements InputMethod.setCharacterSubsets for Windows.                
                <see>
                    java.awt.im.spi.InputMethod#setCharacterSubsets                    
                </see>
            </javadoc>
            <method name="setCharacterSubsets" type="void" line="196">
                <params>
                    <param name="subsets" type="Subset[]"/>
                </params>
                <comment line="203">
                    Use first subset only. Other subsets in array is ignored.                    
                </comment>
                <comment line="204">
                    This is restriction of Win32 implementation.                    
                </comment>
                <comment line="231">
                    reserve ROMAN input mode                    
                </comment>
                <scope line="197"/>
                <declaration name="subset1" type="Subset" line="205"/>
                <declaration name="locale" type="Locale" line="207"/>
                <declaration name="newmode" type="int" line="208"/>
                <scope line="210"/>
                <scope line="214">
                    <scope line="215"/>
                    <scope line="217"/>
                </scope>
                <scope line="234">
                    <scope line="235"/>
                    <scope line="237"/>
                </scope>
                <scope line="251">
                    <scope line="252"/>
                    <scope line="254"/>
                </scope>
            </method>
            <method name="dispatchEvent" type="void" line="269">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="270">
                    <declaration name="comp" type="Component" line="271"/>
                    <scope line="272">
                        <scope line="274"/>
                        <scope line="277"/>
                    </scope>
                </scope>
            </method>
            <method name="activate" type="void" line="284">
                <comment line="287">
                    When the last focussed component peer is different from the                    
                </comment>
                <comment line="288">
                    current focussed component or if they are different client                    
                </comment>
                <comment line="289">
                    (active or passive), disable native IME for the old focussed                    
                </comment>
                <comment line="290">
                    component and enable for the new one.                    
                </comment>
                <comment line="307">
                    If the status window or Windows language bar is turned off due to
                    native input method was switched to java input method, we
                    have to turn it on otherwise it is gone for good until next time
                    the user turns it on through Windows Control Panel. See details
                    from bug 6252674.                    
                </comment>
                <declaration name="isAc" type="boolean" line="285"/>
                <scope line="292">
                    <scope line="293"/>
                    <scope line="296"/>
                </scope>
                <scope line="303"/>
                <scope line="313"/>
            </method>
            <method name="deactivate" type="void" line="321">
                <params>
                    <param name="isTemporary" type="boolean"/>
                </params>
                <comment line="322">
                    Sync currentLocale with the Windows keyboard layout which might be changed                    
                </comment>
                <comment line="323">
                    by hot key                    
                </comment>
                <comment line="326">
                    Delay calling disableNativeIME until activate is called and the newly                    
                </comment>
                <comment line="327">
                    focussed component has a different peer as the last focussed component.                    
                </comment>
                <scope line="328"/>
            </method>
            <javadoc line="335">
                Explicitly disable the native IME. Native IME is not disabled when
                  deactivate is called.                
            </javadoc>
            <method name="disableInputMethod" type="void" line="339">
                <scope line="340"/>
            </method>
            <javadoc line="347">
                Returns a string with information about the windows input method,
                  or null.                
            </javadoc>
            <method name="getNativeInputMethodInfo" type="String" line="351"/>
            <javadoc line="355">
                @see sun.awt.im.InputMethodAdapter#stopListeningThis method is called when the input method is swapped out.
                  Calling stopListening to give other input method the keybaord input
                  focus.                
            </javadoc>
            <method name="stopListening" type="void" line="361">
                <comment line="362">
                    Since the native input method is not disabled when deactivate is                    
                </comment>
                <comment line="363">
                    called, we need to call disableInputMethod to explicitly turn off the                    
                </comment>
                <comment line="364">
                    native IME.                    
                </comment>
            </method>
            <method name="setAWTFocussedComponent" type="void" line="369">
                <params>
                    <param name="component" type="Component"/>
                </params>
                <comment line="375">
                    deactivate/activate are being suppressed during a focus change -                    
                </comment>
                <comment line="376">
                    this may happen when an input method window is made visible                    
                </comment>
                <scope line="370"/>
                <declaration name="peer" type="WComponentPeer" line="373"/>
                <scope line="374">
                    <scope line="377"/>
                    <scope line="380"/>
                </scope>
            </method>
            <method name="hideWindows" type="void" line="389">
                <comment line="391">
                    Hide the native status window including the Windows language
                    bar if it is on. One typical senario this method
                    gets called is when the native input method is
                    switched to java input method, for example.                    
                </comment>
                <scope line="390"/>
            </method>
            <javadoc line="401">
                @see java.awt.im.spi.InputMethod#removeNotify                
            </javadoc>
            <method name="removeNotify" type="void" line="404"/>
            <javadoc line="410">
                @see java.awt.Toolkit#mapInputMethodHighlight                
            </javadoc>
            <method name="mapInputMethodHighlight" type="Map" line="413">
                <params>
                    <param name="highlight" type="InputMethodHighlight"/>
                </params>
                <declaration name="index" type="int" line="414"/>
                <declaration name="state" type="int" line="415"/>
                <scope line="416"/>
                <scope line="418"/>
                <scope line="420"/>
                <scope line="423"/>
            </method>
            <method name="supportsBelowTheSpot" type="boolean" line="430"/>
            <method name="endComposition" type="void" line="435">
                <comment line="436">
                    right now the native endCompositionNative() just cancel                    
                </comment>
                <comment line="437">
                    the composition string, maybe a commtting is desired                    
                </comment>
            </method>
            <javadoc line="442">
                @see java.awt.im.spi.InputMethod#setCompositionEnabled(boolean)                
            </javadoc>
            <method name="setCompositionEnabled" type="void" line="445">
                <params>
                    <param name="enable" type="boolean"/>
                </params>
            </method>
            <javadoc line="449">
                @see java.awt.im.spi.InputMethod#isCompositionEnabled                
            </javadoc>
            <method name="isCompositionEnabled" type="boolean" line="452"/>
            <method name="sendInputMethodEvent" type="void" line="460">
                <params>
                    <param name="id" type="int"/>
                    <param name="when" type="long"/>
                    <param name="text" type="String"/>
                    <param name="clauseBoundary" type="int[]"/>
                    <param name="clauseReading" type="String[]"/>
                    <param name="attributeBoundary" type="int[]"/>
                    <param name="attributeValue" type="byte[]"/>
                    <param name="commitedTextLength" type="int"/>
                    <param name="caretPos" type="int"/>
                    <param name="visiblePos" type="int"/>
                </params>
                <comment line="466">
                    construct AttributedString                    
                </comment>
                <comment line="469">
                    set Language Information                    
                </comment>
                <comment line="473">
                    set Clause and Reading Information                    
                </comment>
                <comment line="485">
                    if (clauseBoundary != null)                    
                </comment>
                <comment line="486">
                    System.out.println(&quot;Invalid clause information!&quot;);                    
                </comment>
                <comment line="494">
                    set Hilight Information                    
                </comment>
                <comment line="522">
                    if (attributeBoundary != null)                    
                </comment>
                <comment line="523">
                    System.out.println(&quot;Invalid attribute information!&quot;);                    
                </comment>
                <comment line="530">
                    get iterator                    
                </comment>
                <declaration name="iterator" type="AttributedCharacterIterator" line="462"/>
                <scope line="464">
                    <declaration name="attrStr" type="AttributedString" line="467"/>
                    <scope line="477">
                        <scope line="478"/>
                    </scope>
                    <scope line="484"/>
                    <scope line="498">
                        <scope line="499">
                            <declaration name="highlight" type="InputMethodHighlight" line="500"/>
                        </scope>
                    </scope>
                    <scope line="521"/>
                </scope>
                <declaration name="source" type="Component" line="535"/>
                <declaration name="event" type="InputMethodEvent" line="539"/>
            </method>
            <method name="inquireCandidatePosition" type="void" line="550">
                <comment line="555">
                    This call should return immediately just to cause                    
                </comment>
                <comment line="556">
                    InputMethodRequests.getTextLocation be called within                    
                </comment>
                <comment line="557">
                    AWT Event thread.  Otherwise, a potential deadlock                    
                </comment>
                <comment line="558">
                    could happen.                    
                </comment>
                <declaration name="source" type="Component" line="551"/>
                <scope line="552"/>
                <anonymous_class line="559">
                    <method name="run" type="void" line="560">
                        <declaration name="x" type="int" line="561"/>
                        <declaration name="y" type="int" line="562"/>
                        <declaration name="client" type="Component" line="563"/>
                        <scope line="565">
                            <scope line="566">
                                <declaration name="rc" type="Rectangle" line="567"/>
                            </scope>
                            <scope line="570">
                                <declaration name="pt" type="Point" line="571"/>
                                <declaration name="size" type="Dimension" line="572"/>
                            </scope>
                        </scope>
                    </method>
                </anonymous_class>
                <declaration name="r" type="Runnable" line="559"/>
            </method>
            <method name="getNearestNativePeer" type="WComponentPeer" line="588">
                <params>
                    <param name="comp" type="Component"/>
                </params>
                <declaration name="peer" type="ComponentPeer" line="591"/>
                <scope line="594"/>
            </method>
            <method name="createNativeContext" type="int" line="608"/>
            <method name="destroyNativeContext" type="void" line="609"/>
            <method name="enableNativeIME" type="void" line="610"/>
            <method name="disableNativeIME" type="void" line="611"/>
            <method name="handleNativeIMEEvent" type="void" line="612"/>
            <method name="endCompositionNative" type="void" line="613"/>
            <method name="setConversionStatus" type="void" line="614"/>
            <method name="getConversionStatus" type="int" line="615"/>
            <method name="setOpenStatus" type="void" line="616"/>
            <method name="getOpenStatus" type="boolean" line="617"/>
            <method name="setStatusWindowVisible" type="void" line="618"/>
            <method name="getNativeIMMDescription" type="String" line="619"/>
            <method name="getNativeLocale" type="Locale" line="620"/>
            <method name="setNativeLocale" type="boolean" line="621"/>
            <method name="openCandidateWindow" type="void" line="622"/>
        </class>
    </source>