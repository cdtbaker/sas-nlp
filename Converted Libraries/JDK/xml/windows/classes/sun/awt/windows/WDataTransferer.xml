<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.windows">
        <import package="java.awt.Image"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.datatransfer.DataFlavor"/>
        <import package="java.awt.datatransfer.FlavorTable"/>
        <import package="java.awt.datatransfer.Transferable"/>
        <import package="java.awt.datatransfer.UnsupportedFlavorException"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.ComponentColorModel"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DataBufferByte"/>
        <import package="java.awt.image.DataBufferInt"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.BufferedReader"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.io.IOException"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.io.File"/>
        <import package="java.net.URL"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.SortedMap"/>
        <import package="sun.awt.Mutex"/>
        <import package="sun.awt.datatransfer.DataTransferer"/>
        <import package="sun.awt.datatransfer.ToolkitThreadBlockedHandler"/>
        <import package="sun.awt.image.ImageRepresentation"/>
        <import package="sun.awt.image.ToolkitImage"/>
        <import package="java.util.ArrayList"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <class name="WDataTransferer" line="80">
            <extends class="DataTransferer"/>
            <comment line="137">
                CF_FILECONTENTS supported as mandatory associated clipboard                
            </comment>
            <comment line="146">
                                
            </comment>
            <comment line="501">
                static section                
            </comment>
            <comment line="509">
                optional                
            </comment>
            <comment line="510">
                optional                
            </comment>
            <comment line="651">
                //////////////////////////////////                
            </comment>
            <comment line="652">
                decoder instance data and methods:                
            </comment>
            <comment line="658">
                InputStreamReader uses an 8K buffer. The size is not customizable.                
            </comment>
            <comment line="661">
                CharToByteUTF8.getMaxBytesPerChar returns 3, so we should not buffer                
            </comment>
            <comment line="662">
                more chars than 3 times the number of bytes we can buffer.                
            </comment>
            <comment line="670">
                HTML header mapping:                
            </comment>
            <comment line="676">
                EndSelection -- shift in array of the last char in copied selection                
            </comment>
            <comment line="677">
                SourceURL -- base URL for related referenses                
            </comment>
            <comment line="678">
                Version -- current supported version                
            </comment>
            <comment line="680">
                Stream reader markers:                
            </comment>
            <javadoc line="80">
                Platform-specific support for the data transfer subsystem.                
                <author>
                    David Mendenhall                    
                </author>
                <author>
                    Danila Sinopalnikov                    
                </author>
                <since>
                    1.3.1                    
                </since>
            </javadoc>
            <declaration name="predefinedClipboardNames" type="String[]" line="89"/>
            <declaration name="predefinedClipboardNameMap" type="Map" line="110"/>
            <scope line="111">
                <declaration name="tempMap" type="Map" line="112"/>
                <scope line="113"/>
            </scope>
            <declaration name="CF_TEXT" type="int" line="119"/>
            <javadoc line="119">
                from winuser.h                
            </javadoc>
            <declaration name="CF_METAFILEPICT" type="int" line="123"/>
            <declaration name="CF_DIB" type="int" line="124"/>
            <declaration name="CF_ENHMETAFILE" type="int" line="125"/>
            <declaration name="CF_HDROP" type="int" line="126"/>
            <declaration name="CF_LOCALE" type="int" line="127"/>
            <declaration name="CF_HTML" type="long" line="129"/>
            <declaration name="CFSTR_INETURL" type="long" line="130"/>
            <declaration name="CF_PNG" type="long" line="131"/>
            <declaration name="CF_JFIF" type="long" line="132"/>
            <declaration name="CF_FILEGROUPDESCRIPTORW" type="long" line="134"/>
            <declaration name="CF_FILEGROUPDESCRIPTORA" type="long" line="135"/>
            <declaration name="L_CF_LOCALE" type="Long" line="138"/>
            <declaration name="directColorModel" type="DirectColorModel" line="141"/>
            <declaration name="bandmasks" type="int[]" line="147"/>
            <javadoc line="152">
                Singleton constructor                
            </javadoc>
            <method name="WDataTransferer" type="constructor" line="155"/>
            <declaration name="transferer" type="WDataTransferer" line="158"/>
            <method name="getInstanceImpl" type="WDataTransferer" line="160">
                <scope line="161">
                    <scope line="162">
                        <scope line="163"/>
                    </scope>
                </scope>
            </method>
            <method name="getFormatsForFlavors" type="SortedMap" line="171">
                <params>
                    <param name="flavors" type="DataFlavor[]"/>
                    <param name="map" type="FlavorTable"/>
                </params>
                <comment line="174">
                    The Win32 native code does not support exporting LOCALE data, nor                    
                </comment>
                <comment line="175">
                    should it.                    
                </comment>
                <declaration name="retval" type="SortedMap" line="172"/>
            </method>
            <method name="getDefaultUnicodeEncoding" type="String" line="181"/>
            <method name="translateTransferable" type="byte[]" line="188">
                <params>
                    <param name="contents" type="Transferable"/>
                    <param name="flavor" type="DataFlavor"/>
                    <param name="format" type="long"/>
                </params>
                <declaration name="bytes" type="byte[]" line="189"/>
                <scope line="191"/>
            </method>
            <method name="translateBytesOrStream" type="Object" line="201">
                <params>
                    <param name="str" type="InputStream"/>
                    <param name="bytes" type="byte[]"/>
                    <param name="flavor" type="DataFlavor"/>
                    <param name="format" type="long"/>
                    <param name="localeTransferable" type="Transferable"/>
                </params>
                <comment line="224">
                    Convert the strings to File objects                    
                </comment>
                <comment line="228">
                    They are temp-files from memory Stream, so they have to be removed on exit                    
                </comment>
                <comment line="231">
                    Turn the list of Files into a List and return                    
                </comment>
                <scope line="202">
                    <scope line="203"/>
                </scope>
                <scope line="211">
                    <scope line="212"/>
                    <scope line="215"/>
                    <declaration name="st" type="String" line="218"/>
                    <declaration name="filenames" type="String[]" line="219"/>
                    <scope line="220"/>
                    <declaration name="files" type="File[]" line="225"/>
                    <scope line="226"/>
                </scope>
                <scope line="237">
                    <scope line="238"/>
                    <declaration name="charset" type="String" line="242"/>
                    <scope line="245">
                        <scope line="246"/>
                        <scope line="250"/>
                    </scope>
                </scope>
            </method>
            <method name="isLocaleDependentTextFormat" type="boolean" line="260">
                <params>
                    <param name="format" type="long"/>
                </params>
            </method>
            <method name="isFileFormat" type="boolean" line="264">
                <params>
                    <param name="format" type="long"/>
                </params>
            </method>
            <method name="getFormatForNativeAsLong" type="Long" line="268">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="format" type="Long" line="269"/>
                <scope line="270"/>
            </method>
            <method name="getNativeForFormat" type="String" line="276">
                <params>
                    <param name="format" type="long"/>
                </params>
            </method>
            <declaration name="handler" type="ToolkitThreadBlockedHandler" line="282"/>
            <method name="getToolkitThreadBlockedHandler" type="ToolkitThreadBlockedHandler" line="285"/>
            <method name="registerClipboardFormat" type="long" line="289"/>
            <javadoc line="289">
                Calls the Win32 RegisterClipboardFormat function to register
                  a non-standard format.                
            </javadoc>
            <method name="getClipboardFormatName" type="String" line="295"/>
            <javadoc line="295">
                Calls the Win32 GetClipboardFormatName function which is
                  the reverse operation of RegisterClipboardFormat.                
            </javadoc>
            <method name="isImageFormat" type="boolean" line="301">
                <params>
                    <param name="format" type="long"/>
                </params>
            </method>
            <method name="imageToPlatformBytes" type="byte[]" line="308">
                <params>
                    <param name="image" type="Image"/>
                    <param name="format" type="long"/>
                </params>
                <comment line="332">
                    Fix for 4919639.                    
                </comment>
                <comment line="333">
                    Some Windows native applications (e.g. clipbrd.exe) do not handle                    
                </comment>
                <comment line="334">
                    32-bpp DIBs correctly.                    
                </comment>
                <comment line="335">
                    As a workaround we switched to 24-bpp DIBs.                    
                </comment>
                <comment line="336">
                    MSDN prescribes that the bitmap array for a 24-bpp should consist of                    
                </comment>
                <comment line="337">
                    3-byte triplets representing blue, green and red components of a                    
                </comment>
                <comment line="338">
                    pixel respectively. Additionally each scan line must be padded with                    
                </comment>
                <comment line="339">
                    zeroes to end on a LONG data-type boundary. LONG is always 32-bit.                    
                </comment>
                <comment line="340">
                    We render the given Image to a BufferedImage of type TYPE_3BYTE_BGR                    
                </comment>
                <comment line="341">
                    with non-default scanline stride and pass the resulting data buffer                    
                </comment>
                <comment line="342">
                    to the native code to fill the BITMAPINFO structure.                    
                </comment>
                <comment line="358">
                    Some Windows native applications (e.g. clipbrd.exe) do not understand                    
                </comment>
                <comment line="359">
                    top-down DIBs.                    
                </comment>
                <comment line="360">
                    So we flip the image vertically and create a bottom-up DIB.                    
                </comment>
                <declaration name="mimeType" type="String" line="309"/>
                <scope line="310"/>
                <scope line="312"/>
                <scope line="315"/>
                <declaration name="width" type="int" line="319"/>
                <declaration name="height" type="int" line="320"/>
                <scope line="322">
                    <declaration name="ir" type="ImageRepresentation" line="323"/>
                </scope>
                <scope line="327"/>
                <declaration name="mod" type="int" line="343"/>
                <declaration name="pad" type="int" line="344"/>
                <declaration name="cs" type="ColorSpace" line="346"/>
                <declaration name="nBits" type="int[]" line="347"/>
                <declaration name="bOffs" type="int[]" line="348"/>
                <declaration name="colorModel" type="ColorModel" line="349"/>
                <declaration name="raster" type="WritableRaster" line="352"/>
                <declaration name="bimage" type="BufferedImage" line="356"/>
                <declaration name="imageFlipTransform" type="AffineTransform" line="361"/>
                <declaration name="g2d" type="Graphics2D" line="364"/>
                <scope line="366"/>
                <scope line="368"/>
                <declaration name="buffer" type="DataBufferByte" line="372"/>
                <declaration name="imageData" type="byte[]" line="374"/>
            </method>
            <declaration name="UNICODE_NULL_TERMINATOR" type="byte[]" line="378"/>
            <method name="convertFileListToBytes" type="ByteArrayOutputStream" line="382">
                <params>
                    <param name="fileList" type="ArrayList<String>"/>
                </params>
                <comment line="386">
                    store empty unicode string (null terminator)                    
                </comment>
                <comment line="391">
                    store unicode string with null terminator                    
                </comment>
                <comment line="397">
                    According to MSDN the byte array have to be double NULL-terminated.                    
                </comment>
                <comment line="398">
                    The array contains Unicode characters, so each NULL-terminator is                    
                </comment>
                <comment line="399">
                    a pair of bytes                    
                </comment>
                <declaration name="bos" type="ByteArrayOutputStream" line="383"/>
                <scope line="385"/>
                <scope line="388">
                    <scope line="389">
                        <declaration name="bytes" type="byte[]" line="390"/>
                    </scope>
                </scope>
            </method>
            <method name="imageDataToPlatformImageBytes" type="byte[]" line="405"/>
            <javadoc line="405">
                Returns a byte array which contains data special for the given format
                  and for the given image data.                
            </javadoc>
            <javadoc line="413">
                Translates either a byte array or an input stream which contain
                  platform-specific image data in the given format into an Image.                
            </javadoc>
            <method name="platformImageBytesOrStreamToImage" type="Image" line="420">
                <params>
                    <param name="str" type="InputStream"/>
                    <param name="bytes" type="byte[]"/>
                    <param name="format" type="long"/>
                </params>
                <declaration name="mimeType" type="String" line="421"/>
                <scope line="422"/>
                <scope line="424"/>
                <scope line="427"/>
                <scope line="431"/>
                <declaration name="imageData" type="int[]" line="435"/>
                <scope line="436"/>
                <declaration name="len" type="int" line="440"/>
                <declaration name="width" type="int" line="441"/>
                <declaration name="height" type="int" line="442"/>
                <declaration name="buffer" type="DataBufferInt" line="444"/>
                <declaration name="raster" type="WritableRaster" line="445"/>
            </method>
            <method name="platformImageBytesToImageData" type="int[]" line="452"/>
            <javadoc line="452">
                Translates a byte array which contains platform-specific image data in
                  the given format into an integer array which contains pixel values in
                  ARGB format. The two last elements in the array specify width and
                  height of the image respectively.                
            </javadoc>
            <method name="dragQueryFile" type="String[]" line="462"/>
        </class>
        <class name="WToolkitThreadBlockedHandler" line="465">
            <extends class="Mutex"/>
            <comment line="137">
                CF_FILECONTENTS supported as mandatory associated clipboard                
            </comment>
            <comment line="146">
                                
            </comment>
            <comment line="501">
                static section                
            </comment>
            <comment line="509">
                optional                
            </comment>
            <comment line="510">
                optional                
            </comment>
            <comment line="651">
                //////////////////////////////////                
            </comment>
            <comment line="652">
                decoder instance data and methods:                
            </comment>
            <comment line="658">
                InputStreamReader uses an 8K buffer. The size is not customizable.                
            </comment>
            <comment line="661">
                CharToByteUTF8.getMaxBytesPerChar returns 3, so we should not buffer                
            </comment>
            <comment line="662">
                more chars than 3 times the number of bytes we can buffer.                
            </comment>
            <comment line="670">
                HTML header mapping:                
            </comment>
            <comment line="676">
                EndSelection -- shift in array of the last char in copied selection                
            </comment>
            <comment line="677">
                SourceURL -- base URL for related referenses                
            </comment>
            <comment line="678">
                Version -- current supported version                
            </comment>
            <comment line="680">
                Stream reader markers:                
            </comment>
            <implements interface="ToolkitThreadBlockedHandler"/>
            <method name="enter" type="void" line="468">
                <scope line="469"/>
            </method>
            <method name="exit" type="void" line="477">
                <scope line="478"/>
            </method>
            <method name="startSecondaryEventLoop" type="void" line="484"/>
        </class>
        <class name="HTMLCodec" line="493">
            <extends class="InputStream"/>
            <comment line="137">
                CF_FILECONTENTS supported as mandatory associated clipboard                
            </comment>
            <comment line="146">
                                
            </comment>
            <comment line="501">
                static section                
            </comment>
            <comment line="509">
                optional                
            </comment>
            <comment line="510">
                optional                
            </comment>
            <comment line="651">
                //////////////////////////////////                
            </comment>
            <comment line="652">
                decoder instance data and methods:                
            </comment>
            <comment line="658">
                InputStreamReader uses an 8K buffer. The size is not customizable.                
            </comment>
            <comment line="661">
                CharToByteUTF8.getMaxBytesPerChar returns 3, so we should not buffer                
            </comment>
            <comment line="662">
                more chars than 3 times the number of bytes we can buffer.                
            </comment>
            <comment line="670">
                HTML header mapping:                
            </comment>
            <comment line="676">
                EndSelection -- shift in array of the last char in copied selection                
            </comment>
            <comment line="677">
                SourceURL -- base URL for related referenses                
            </comment>
            <comment line="678">
                Version -- current supported version                
            </comment>
            <comment line="680">
                Stream reader markers:                
            </comment>
            <javadoc line="493">
                on decode: This stream takes an InputStream which provides data in CF_HTML format,
                  strips off the description and context to extract the original HTML data.
                  on encode: static convertToHTMLFormat is responsible for HTML clipboard header creation                
            </javadoc>
            <declaration name="ENCODING" type="String" line="501"/>
            <declaration name="VERSION" type="String" line="503"/>
            <declaration name="START_HTML" type="String" line="504"/>
            <declaration name="END_HTML" type="String" line="505"/>
            <declaration name="START_FRAGMENT" type="String" line="506"/>
            <declaration name="END_FRAGMENT" type="String" line="507"/>
            <declaration name="START_SELECTION" type="String" line="508"/>
            <declaration name="END_SELECTION" type="String" line="509"/>
            <declaration name="START_FRAGMENT_CMT" type="String" line="511"/>
            <declaration name="END_FRAGMENT_CMT" type="String" line="512"/>
            <declaration name="SOURCE_URL" type="String" line="513"/>
            <declaration name="DEF_SOURCE_URL" type="String" line="514"/>
            <declaration name="EOLN" type="String" line="516"/>
            <declaration name="VERSION_NUM" type="String" line="518"/>
            <declaration name="PADDED_WIDTH" type="int" line="519"/>
            <method name="toPaddedString" type="String" line="521">
                <params>
                    <param name="n" type="int"/>
                    <param name="width" type="int"/>
                </params>
                <declaration name="string" type="String" line="522"/>
                <declaration name="len" type="int" line="523"/>
                <scope line="524">
                    <declaration name="array" type="char[]" line="525"/>
                    <declaration name="buffer" type="StringBuffer" line="527"/>
                </scope>
            </method>
            <javadoc line="535">
                convertToHTMLFormat adds the MS HTML clipboard header to byte array that
                  contains the parameters pairs.
                  The consequence of parameters is fixed, but some or all of them could be
                  omitted. One parameter per one text line.
                  It looks like that:
                  Version:1.0\r\n                -- current supported version
                  StartHTML:000000192\r\n        -- shift in array to the first byte after the header
                  EndHTML:000000757\r\n          -- shift in array of last byte for HTML syntax analysis
                  StartFragment:000000396\r\n    -- shift in array jast after &lt;!--StartFragment--&gt;
                  EndFragment:000000694\r\n      -- shift in array before start  &lt;!--EndFragment--&gt;
                  StartSelection:000000398\r\n   -- shift in array of the first char in copied selection
                  EndSelection:000000692\r\n     -- shift in array of the last char in copied selection
                  SourceURL:http://sun.com/\r\n  -- base URL for related referenses
                  &lt;HTML&gt;...&lt;BODY&gt;...&lt;!--StartFragment--&gt;.....................&lt;!--EndFragment--&gt;...&lt;/BODY&gt;&lt;HTML&gt;
                  ^                                     ^ ^                ^^                                 ^
                  \ StartHTML                           | \-StartSelection | \EndFragment              EndHTML/
                  \-StartFragment    \EndSelection
                  Combinations with tags sequence
                  &lt;!--StartFragment--&gt;&lt;HTML&gt;...&lt;BODY&gt;...&lt;/BODY&gt;&lt;HTML&gt;&lt;!--EndFragment--&gt;
                  or
                  &lt;HTML&gt;...&lt;!--StartFragment--&gt;...&lt;BODY&gt;...&lt;/BODY&gt;&lt;!--EndFragment--&gt;&lt;HTML&gt;
                  are vailid too.                
            </javadoc>
            <method name="convertToHTMLFormat" type="byte[]" line="562">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
                <comment line="563">
                    Calculate section offsets                    
                </comment>
                <comment line="567">
                    we have extend the fragment to full HTML document correctly                    
                </comment>
                <comment line="568">
                    to avoid HTML and BODY tags doubling                    
                </comment>
                <comment line="600">
                    header                    
                </comment>
                <comment line="625">
                    HTML                    
                </comment>
                <declaration name="htmlPrefix" type="String" line="564"/>
                <declaration name="htmlSuffix" type="String" line="565"/>
                <scope line="566">
                    <declaration name="stContext" type="String" line="569"/>
                    <declaration name="stUpContext" type="String" line="570"/>
                    <scope line="571">
                        <scope line="574"/>
                    </scope>
                </scope>
                <declaration name="stBaseUrl" type="String" line="583"/>
                <declaration name="nStartHTML" type="int" line="584"/>
                <declaration name="nStartFragment" type="int" line="592"/>
                <declaration name="nEndFragment" type="int" line="593"/>
                <declaration name="nEndHTML" type="int" line="594"/>
                <declaration name="header" type="StringBuilder" line="596"/>
                <declaration name="headerBytes" type="byte[]" line="628"/>
                <scope line="630"/>
                <scope line="633"/>
                <declaration name="retval" type="byte[]" line="636"/>
            </method>
            <declaration name="bufferedStream" type="BufferedInputStream" line="653"/>
            <declaration name="descriptionParsed" type="boolean" line="654"/>
            <declaration name="closed" type="boolean" line="655"/>
            <declaration name="BYTE_BUFFER_LEN" type="int" line="658"/>
            <declaration name="CHAR_BUFFER_LEN" type="int" line="662"/>
            <declaration name="FAILURE_MSG" type="String" line="664"/>
            <declaration name="INVALID_MSG" type="String" line="666"/>
            <declaration name="iHTMLStart" type="long" line="670"/>
            <declaration name="stBaseURL" type="String" line="676"/>
            <declaration name="stVersion" type="String" line="677"/>
            <declaration name="iStartOffset" type="long" line="680"/>
            <declaration name="readMode" type="EHTMLReadMode" line="684"/>
            <method name="HTMLCodec" type="constructor" line="689">
                <params>
                    <param name="_bytestream" type="InputStream"/>
                    <param name="_readMode" type="EHTMLReadMode"/>
                </params>
            </method>
            <method name="getBaseURL" type="String" line="695">
                <scope line="696"/>
            </method>
            <method name="getVersion" type="String" line="702">
                <scope line="703"/>
            </method>
            <javadoc line="709">
                parseDescription parsing HTML clipboard header as it described in
                  comment to convertToHTMLFormat                
            </javadoc>
            <method name="parseDescription" type="void" line="714">
                <comment line="718">
                    initialization of array offset pointers                    
                </comment>
                <comment line="719">
                    to the same &quot;uninitialized&quot; state.                    
                </comment>
                <comment line="729">
                    common                    
                </comment>
                <comment line="735">
                    ver 1.0                    
                </comment>
                <comment line="757">
                    some header entries are optional, but the order is fixed.                    
                </comment>
                <comment line="799">
                    some entries could absent in HTML header,                    
                </comment>
                <comment line="800">
                    so we have find they by another way.                    
                </comment>
                <comment line="812">
                    one of possible modes                    
                </comment>
                <declaration name="astEntries" type="String" line="728"/>
                <declaration name="bufferedReader" type="BufferedReader" line="740"/>
                <declaration name="iHeadSize" type="long" line="747"/>
                <declaration name="iCRSize" type="long" line="748"/>
                <declaration name="iEntCount" type="int" line="749"/>
                <declaration name="bContinue" type="boolean" line="750"/>
                <scope line="752">
                    <declaration name="stLine" type="String" line="753"/>
                    <scope line="754"/>
                    <scope line="758">
                        <scope line="759"/>
                        <declaration name="stValue" type="String" line="763"/>
                        <scope line="764">
                            <scope line="765"/>
                            <scope line="792"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="830"/>
                <declaration name="curOffset" type="int" line="834"/>
                <scope line="835"/>
                <scope line="841"/>
            </method>
            <method name="read" type="int" line="847">
                <scope line="848"/>
                <scope line="852"/>
                <scope line="855"/>
                <declaration name="retval" type="int" line="859"/>
                <scope line="860"/>
            </method>
            <method name="close" type="void" line="867">
                <scope line="868"/>
            </method>
        </class>
    </source>