<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.windows">
        <import package="java.awt.Image"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.datatransfer.DataFlavor"/>
        <import package="java.awt.datatransfer.FlavorTable"/>
        <import package="java.awt.datatransfer.Transferable"/>
        <import package="java.awt.datatransfer.UnsupportedFlavorException"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.ComponentColorModel"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DataBufferByte"/>
        <import package="java.awt.image.DataBufferInt"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.BufferedReader"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.io.IOException"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.io.File"/>
        <import package="java.net.URL"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.SortedMap"/>
        <import package="sun.awt.Mutex"/>
        <import package="sun.awt.datatransfer.DataTransferer"/>
        <import package="sun.awt.datatransfer.ToolkitThreadBlockedHandler"/>
        <import package="sun.awt.image.ImageRepresentation"/>
        <import package="sun.awt.image.ToolkitImage"/>
        <import package="java.util.ArrayList"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <class name="WDataTransferer" line="42">
            <extends class="DataTransferer"/>
            <javadoc line="42">
                Platform-specific support for the data transfer subsystem.                
                <author>
                    David Mendenhall                    
                </author>
                <author>
                    Danila Sinopalnikov                    
                </author>
                <since>
                    1.3.1                    
                </since>
            </javadoc>
            <declaration name="predefinedClipboardNames" type="String[]" line="49"/>
            <declaration name="predefinedClipboardNameMap" type="Map" line="50"/>
            <scope line="51">
                <declaration name="tempMap" type="Map" line="52"/>
                <scope line="53"/>
            </scope>
            <declaration name="CF_TEXT" type="int" line="58"/>
            <javadoc line="58">
                from winuser.h                
            </javadoc>
            <declaration name="CF_METAFILEPICT" type="int" line="62"/>
            <declaration name="CF_DIB" type="int" line="63"/>
            <declaration name="CF_ENHMETAFILE" type="int" line="64"/>
            <declaration name="CF_HDROP" type="int" line="65"/>
            <declaration name="CF_LOCALE" type="int" line="66"/>
            <declaration name="CF_HTML" type="long" line="67"/>
            <declaration name="CFSTR_INETURL" type="long" line="68"/>
            <declaration name="CF_PNG" type="long" line="69"/>
            <declaration name="CF_JFIF" type="long" line="70"/>
            <declaration name="CF_FILEGROUPDESCRIPTORW" type="long" line="71"/>
            <declaration name="CF_FILEGROUPDESCRIPTORA" type="long" line="72"/>
            <declaration name="L_CF_LOCALE" type="Long" line="73"/>
            <declaration name="directColorModel" type="DirectColorModel" line="74"/>
            <declaration name="bandmasks" type="int[]" line="75"/>
            <javadoc line="76">
                Singleton constructor                
            </javadoc>
            <method name="WDataTransferer" type="constructor" line="79"/>
            <declaration name="transferer" type="WDataTransferer" line="81"/>
            <method name="getInstanceImpl" type="WDataTransferer" line="82">
                <scope line="83">
                    <scope line="84">
                        <scope line="85"/>
                    </scope>
                </scope>
            </method>
            <method name="getFormatsForFlavors" type="SortedMap" line="92">
                <params>
                    <param name="flavors" type="DataFlavor[]"/>
                    <param name="map" type="FlavorTable"/>
                </params>
                <declaration name="retval" type="SortedMap" line="93"/>
            </method>
            <method name="getDefaultUnicodeEncoding" type="String" line="97"/>
            <method name="translateTransferable" type="byte[]" line="100">
                <params>
                    <param name="contents" type="Transferable"/>
                    <param name="flavor" type="DataFlavor"/>
                    <param name="format" type="long"/>
                </params>
                <declaration name="bytes" type="byte[]" line="101"/>
                <scope line="102"/>
            </method>
            <method name="translateBytesOrStream" type="Object" line="107">
                <params>
                    <param name="str" type="InputStream"/>
                    <param name="bytes" type="byte[]"/>
                    <param name="flavor" type="DataFlavor"/>
                    <param name="format" type="long"/>
                    <param name="localeTransferable" type="Transferable"/>
                </params>
                <scope line="108">
                    <scope line="109"/>
                </scope>
                <scope line="115">
                    <scope line="116"/>
                    <scope line="119"/>
                    <declaration name="st" type="String" line="122"/>
                    <declaration name="filenames" type="String[]" line="123"/>
                    <scope line="124"/>
                    <declaration name="files" type="File[]" line="127"/>
                    <scope line="128"/>
                </scope>
                <scope line="134">
                    <scope line="135"/>
                    <declaration name="charset" type="String" line="139"/>
                    <scope line="140">
                        <scope line="141"/>
                        <scope line="144"/>
                    </scope>
                </scope>
            </method>
            <method name="isLocaleDependentTextFormat" type="boolean" line="151">
                <params>
                    <param name="format" type="long"/>
                </params>
            </method>
            <method name="isFileFormat" type="boolean" line="154">
                <params>
                    <param name="format" type="long"/>
                </params>
            </method>
            <method name="getFormatForNativeAsLong" type="Long" line="157">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="format" type="Long" line="158"/>
                <scope line="159"/>
            </method>
            <method name="getNativeForFormat" type="String" line="164">
                <params>
                    <param name="format" type="long"/>
                </params>
            </method>
            <declaration name="handler" type="ToolkitThreadBlockedHandler" line="167"/>
            <method name="getToolkitThreadBlockedHandler" type="ToolkitThreadBlockedHandler" line="168"/>
            <method name="registerClipboardFormat" type="long" line="171"/>
            <javadoc line="171">
                Calls the Win32 RegisterClipboardFormat function to register
                  a non-standard format.                
            </javadoc>
            <method name="getClipboardFormatName" type="String" line="176"/>
            <javadoc line="176">
                Calls the Win32 GetClipboardFormatName function which is
                  the reverse operation of RegisterClipboardFormat.                
            </javadoc>
            <method name="isImageFormat" type="boolean" line="181">
                <params>
                    <param name="format" type="long"/>
                </params>
            </method>
            <method name="imageToPlatformBytes" type="byte[]" line="184">
                <params>
                    <param name="image" type="Image"/>
                    <param name="format" type="long"/>
                </params>
                <declaration name="mimeType" type="String" line="185"/>
                <scope line="186"/>
                <scope line="189"/>
                <scope line="192"/>
                <declaration name="width" type="int" line="195"/>
                <declaration name="height" type="int" line="196"/>
                <scope line="197">
                    <declaration name="ir" type="ImageRepresentation" line="198"/>
                </scope>
                <scope line="203"/>
                <declaration name="mod" type="int" line="207"/>
                <declaration name="pad" type="int" line="208"/>
                <declaration name="cs" type="ColorSpace" line="209"/>
                <declaration name="nBits" type="int[]" line="210"/>
                <declaration name="bOffs" type="int[]" line="211"/>
                <declaration name="colorModel" type="ColorModel" line="212"/>
                <declaration name="raster" type="WritableRaster" line="213"/>
                <declaration name="bimage" type="BufferedImage" line="214"/>
                <declaration name="imageFlipTransform" type="AffineTransform" line="215"/>
                <declaration name="g2d" type="Graphics2D" line="216"/>
                <scope line="217"/>
                <scope line="220"/>
                <declaration name="buffer" type="DataBufferByte" line="223"/>
                <declaration name="imageData" type="byte[]" line="224"/>
            </method>
            <declaration name="UNICODE_NULL_TERMINATOR" type="byte[]" line="227"/>
            <method name="convertFileListToBytes" type="ByteArrayOutputStream" line="228">
                <params>
                    <param name="fileList" type="ArrayList<String>"/>
                </params>
                <declaration name="bos" type="ByteArrayOutputStream" line="229"/>
                <scope line="230"/>
                <scope line="233">
                    <scope line="234">
                        <declaration name="bytes" type="byte[]" line="235"/>
                    </scope>
                </scope>
            </method>
            <method name="imageDataToPlatformImageBytes" type="byte[]" line="243"/>
            <javadoc line="243">
                Returns a byte array which contains data special for the given format
                  and for the given image data.                
            </javadoc>
            <javadoc line="248">
                Translates either a byte array or an input stream which contain
                  platform-specific image data in the given format into an Image.                
            </javadoc>
            <method name="platformImageBytesOrStreamToImage" type="Image" line="252">
                <params>
                    <param name="str" type="InputStream"/>
                    <param name="bytes" type="byte[]"/>
                    <param name="format" type="long"/>
                </params>
                <declaration name="mimeType" type="String" line="253"/>
                <scope line="254"/>
                <scope line="257"/>
                <scope line="260"/>
                <scope line="263"/>
                <declaration name="imageData" type="int[]" line="266"/>
                <scope line="267"/>
                <declaration name="len" type="int" line="270"/>
                <declaration name="width" type="int" line="271"/>
                <declaration name="height" type="int" line="272"/>
                <declaration name="buffer" type="DataBufferInt" line="273"/>
                <declaration name="raster" type="WritableRaster" line="274"/>
            </method>
            <method name="platformImageBytesToImageData" type="int[]" line="277"/>
            <javadoc line="277">
                Translates a byte array which contains platform-specific image data in
                  the given format into an integer array which contains pixel values in
                  ARGB format. The two last elements in the array specify width and
                  height of the image respectively.                
            </javadoc>
            <method name="dragQueryFile" type="String[]" line="284"/>
        </class>
        <class name="WToolkitThreadBlockedHandler" line="286">
            <extends class="Mutex"/>
            <implements interface="ToolkitThreadBlockedHandler"/>
            <method name="enter" type="void" line="287">
                <scope line="288"/>
            </method>
            <method name="exit" type="void" line="295">
                <scope line="296"/>
            </method>
            <method name="startSecondaryEventLoop" type="void" line="301"/>
            <declaration name="EHTMLReadMode" type="enum" line="303"/>
        </class>
        <class name="HTMLCodec" line="304">
            <extends class="InputStream"/>
            <javadoc line="304">
                on decode: This stream takes an InputStream which provides data in CF_HTML format,
                  strips off the description and context to extract the original HTML data.
                  on encode: static convertToHTMLFormat is responsible for HTML clipboard header creation                
            </javadoc>
            <declaration name="ENCODING" type="String" line="310"/>
            <declaration name="VERSION" type="String" line="311"/>
            <declaration name="START_HTML" type="String" line="312"/>
            <declaration name="END_HTML" type="String" line="313"/>
            <declaration name="START_FRAGMENT" type="String" line="314"/>
            <declaration name="END_FRAGMENT" type="String" line="315"/>
            <declaration name="START_SELECTION" type="String" line="316"/>
            <declaration name="END_SELECTION" type="String" line="317"/>
            <declaration name="START_FRAGMENT_CMT" type="String" line="318"/>
            <declaration name="END_FRAGMENT_CMT" type="String" line="319"/>
            <declaration name="SOURCE_URL" type="String" line="320"/>
            <declaration name="DEF_SOURCE_URL" type="String" line="321"/>
            <declaration name="EOLN" type="String" line="322"/>
            <declaration name="VERSION_NUM" type="String" line="323"/>
            <declaration name="PADDED_WIDTH" type="int" line="324"/>
            <method name="toPaddedString" type="String" line="325">
                <params>
                    <param name="n" type="int"/>
                    <param name="width" type="int"/>
                </params>
                <declaration name="string" type="String" line="326"/>
                <declaration name="len" type="int" line="327"/>
                <scope line="328">
                    <declaration name="array" type="char[]" line="329"/>
                    <declaration name="buffer" type="StringBuffer" line="331"/>
                </scope>
            </method>
            <javadoc line="338">
                convertToHTMLFormat adds the MS HTML clipboard header to byte array that
                  contains the parameters pairs.
                  The consequence of parameters is fixed, but some or all of them could be
                  omitted. One parameter per one text line.
                  It looks like that:
                  Version:1.0\r\n                -- current supported version
                  StartHTML:000000192\r\n        -- shift in array to the first byte after the header
                  EndHTML:000000757\r\n          -- shift in array of last byte for HTML syntax analysis
                  StartFragment:000000396\r\n    -- shift in array jast after &lt;!--StartFragment--&gt;
                  EndFragment:000000694\r\n      -- shift in array before start  &lt;!--EndFragment--&gt;
                  StartSelection:000000398\r\n   -- shift in array of the first char in copied selection
                  EndSelection:000000692\r\n     -- shift in array of the last char in copied selection
                  SourceURL:http://sun.com/\r\n  -- base URL for related referenses
                  &lt;HTML&gt;...&lt;BODY&gt;...&lt;!--StartFragment--&gt;.....................&lt;!--EndFragment--&gt;...&lt;/BODY&gt;&lt;HTML&gt;
                  ^                                     ^ ^                ^^                                 ^
                  \ StartHTML                           | \-StartSelection | \EndFragment              EndHTML/
                  \-StartFragment    \EndSelection
                  Combinations with tags sequence
                  &lt;!--StartFragment--&gt;&lt;HTML&gt;...&lt;BODY&gt;...&lt;/BODY&gt;&lt;HTML&gt;&lt;!--EndFragment--&gt;
                  or
                  &lt;HTML&gt;...&lt;!--StartFragment--&gt;...&lt;BODY&gt;...&lt;/BODY&gt;&lt;!--EndFragment--&gt;&lt;HTML&gt;
                  are vailid too.                
            </javadoc>
            <method name="convertToHTMLFormat" type="byte[]" line="362">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
                <declaration name="htmlPrefix" type="String" line="363"/>
                <declaration name="htmlSuffix" type="String" line="364"/>
                <scope line="365">
                    <declaration name="stContext" type="String" line="366"/>
                    <declaration name="stUpContext" type="String" line="367"/>
                    <scope line="368">
                        <scope line="371"/>
                    </scope>
                </scope>
                <declaration name="stBaseUrl" type="String" line="381"/>
                <declaration name="nStartHTML" type="int" line="382"/>
                <declaration name="nStartFragment" type="int" line="383"/>
                <declaration name="nEndFragment" type="int" line="384"/>
                <declaration name="nEndHTML" type="int" line="385"/>
                <declaration name="header" type="StringBuilder" line="386"/>
                <declaration name="headerBytes" type="byte[]" line="406"/>
                <scope line="407"/>
                <scope line="411"/>
                <declaration name="retval" type="byte[]" line="413"/>
            </method>
            <declaration name="bufferedStream" type="BufferedInputStream" line="420"/>
            <declaration name="descriptionParsed" type="boolean" line="421"/>
            <declaration name="closed" type="boolean" line="422"/>
            <declaration name="BYTE_BUFFER_LEN" type="int" line="423"/>
            <declaration name="CHAR_BUFFER_LEN" type="int" line="424"/>
            <declaration name="FAILURE_MSG" type="String" line="425"/>
            <declaration name="INVALID_MSG" type="String" line="426"/>
            <declaration name="iHTMLStart" type="long" line="427"/>
            <declaration name="stBaseURL" type="String" line="428"/>
            <declaration name="stVersion" type="String" line="429"/>
            <declaration name="iStartOffset" type="long" line="430"/>
            <declaration name="readMode" type="EHTMLReadMode" line="431"/>
            <method name="HTMLCodec" type="constructor" line="432">
                <params>
                    <param name="_bytestream" type="InputStream"/>
                    <param name="_readMode" type="EHTMLReadMode"/>
                </params>
            </method>
            <method name="getBaseURL" type="String" line="436">
                <scope line="437"/>
            </method>
            <method name="getVersion" type="String" line="442">
                <scope line="443"/>
            </method>
            <javadoc line="448">
                parseDescription parsing HTML clipboard header as it described in
                  comment to convertToHTMLFormat                
            </javadoc>
            <method name="parseDescription" type="void" line="452">
                <declaration name="astEntries" type="String" line="457"/>
                <declaration name="bufferedReader" type="BufferedReader" line="458"/>
                <declaration name="iHeadSize" type="long" line="459"/>
                <declaration name="iCRSize" type="long" line="460"/>
                <declaration name="iEntCount" type="int" line="461"/>
                <declaration name="bContinue" type="boolean" line="462"/>
                <scope line="463">
                    <declaration name="stLine" type="String" line="464"/>
                    <scope line="465"/>
                    <scope line="468">
                        <scope line="469"/>
                        <declaration name="stValue" type="String" line="473"/>
                        <scope line="474">
                            <scope line="475"/>
                            <scope line="504"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="532"/>
                <declaration name="curOffset" type="int" line="535"/>
                <scope line="536"/>
                <scope line="540"/>
            </method>
            <method name="read" type="int" line="545">
                <scope line="546"/>
                <scope line="549"/>
                <scope line="552"/>
                <declaration name="retval" type="int" line="555"/>
                <scope line="556"/>
            </method>
            <method name="close" type="void" line="562">
                <scope line="563"/>
            </method>
        </class>
    </source>