<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.windows">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.image"/>
        <import package="java.awt.peer"/>
        <import package="java.beans"/>
        <import package="java.lang.reflect"/>
        <import package="java.util"/>
        <import package="java.util.List"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <import package="sun.awt"/>
        <import package="sun.java2d.pipe.Region"/>
        <class name="WWindowPeer" line="44">
            <extends class="WPanelPeer"/>
            <comment line="52">
                we can&apos;t use WDialogPeer as blocker may be an instance of WPrintDialogPeer that                
            </comment>
            <comment line="53">
                extends WWindowPeer, not WDialogPeer                
            </comment>
            <comment line="60">
                A key used for storing a list of active windows in AppContext. The value
                 is a list of windows, sorted by the time of activation: later a window is
                 activated, greater its index is in the list.                
            </comment>
            <comment line="68">
                Listener for &apos;activeWindow&apos; KFM property changes. It is added to each
                 AppContext KFM. See ActiveWindowListener inner class below.                
            </comment>
            <comment line="75">
                The object is a listener for the AppContext.GUI_DISPOSED property.                
            </comment>
            <comment line="81">
                Called (on the Toolkit thread) before the appropriate
                 WindowStateEvent is posted to the EventQueue.                
            </comment>
            <comment line="95">
                WComponentPeer overrides                
            </comment>
            <comment line="122">
                WindowPeer implementation                
            </comment>
            <comment line="143">
                FramePeer &amp; DialogPeer partial shared implementation                
            </comment>
            <comment line="159">
                Toolkit &amp; peer internals                
            </comment>
            <comment line="206">
                This method must be called for Window, Dialog, and Frame before creating                
            </comment>
            <comment line="207">
                the hwnd                
            </comment>
            <comment line="217">
                should be overriden in WDialogPeer                
            </comment>
            <comment line="250">
                Synchronize the insets members (here &amp; in helper) with actual window                
            </comment>
            <comment line="251">
                state.                
            </comment>
            <comment line="304">
                WARNING: it&apos;s called on the Toolkit thread!                
            </comment>
            <comment line="369">
                ---- MODALITY SUPPORT ----                
            </comment>
            <comment line="416">
                Returns all the ever active windows from the current AppContext.
                 The list is sorted by the time of activation, so the latest
                 active window is always at the end.                
            </comment>
            <comment line="436">
                ----DISPLAY CHANGE SUPPORT----                
            </comment>
            <comment line="440">
                Called from native code when we have been dragged onto another screen.                
            </comment>
            <comment line="519">
                Used in Win32GraphicsDevice.                
            </comment>
            <comment line="522">
                ----END DISPLAY CHANGE SUPPORT----                
            </comment>
            <comment line="544">
                These are the peer bounds. They get updated at:                
            </comment>
            <comment line="545">
                1. the WWindowPeer.setBounds() method.                
            </comment>
            <comment line="546">
                2. the native code (on WM_SIZE/WM_MOVE)                
            </comment>
            <comment line="729">
                The method maps the list of the active windows to the window&apos;s AppContext,
                 then the method registers ActiveWindowListener, GuiDisposedListener listeners;
                 it executes the initilialization only once per AppContext.                
            </comment>
            <comment line="749">
                The GuiDisposedListener class listens for the AppContext.GUI_DISPOSED property,
                 it removes the list of the active windows from the disposed AppContext and
                 unregisters ActiveWindowListener listener.                
            </comment>
            <comment line="773">
                Static inner class, listens for &apos;activeWindow&apos; KFM property changes and
                 updates the list of active windows per AppContext, so the latest active
                 window is always at the end of the list. The list is stored in AppContext.                
            </comment>
            <implements interface="WindowPeer"/>
            <implements interface="DisplayChangedListener"/>
            <declaration name="log" type="PlatformLogger" line="48"/>
            <declaration name="screenLog" type="PlatformLogger" line="49"/>
            <declaration name="modalBlocker" type="WWindowPeer" line="53"/>
            <declaration name="isOpaque" type="boolean" line="55"/>
            <declaration name="painter" type="TranslucentWindowPainter" line="57"/>
            <declaration name="ACTIVE_WINDOWS_KEY" type="StringBuffer" line="64"/>
            <declaration name="activeWindowListener" type="PropertyChangeListener" line="71"/>
            <declaration name="guiDisposedListener" type="PropertyChangeListener" line="77"/>
            <declaration name="windowListener" type="WindowListener" line="84"/>
            <method name="initIDs" type="void" line="86"/>
            <javadoc line="86">
                Initialize JNI field IDs                
            </javadoc>
            <scope line="90"/>
            <method name="disposeImpl" type="void" line="96">
                <comment line="105">
                    Remove ourself from the Map of DisplayChangeListeners                    
                </comment>
                <comment line="113">
                    don&apos;t set the current one to null here; reduces the chances of                    
                </comment>
                <comment line="114">
                    MT issues (like NPEs)                    
                </comment>
                <declaration name="appContext" type="AppContext" line="97"/>
                <scope line="98">
                    <declaration name="l" type="List&lt;WWindowPeer&gt;" line="99"/>
                    <scope line="100"/>
                </scope>
                <declaration name="gc" type="GraphicsConfiguration" line="106"/>
                <scope line="109">
                    <declaration name="currentPainter" type="TranslucentWindowPainter" line="110"/>
                    <scope line="111"/>
                </scope>
            </method>
            <method name="toFront" type="void" line="123"/>
            <method name="_toFront" type="void" line="127"/>
            <method name="toBack" type="void" line="128"/>
            <method name="setAlwaysOnTopNative" type="void" line="130"/>
            <method name="setAlwaysOnTop" type="void" line="131">
                <params>
                    <param name="value" type="boolean"/>
                </params>
                <scope line="132"/>
            </method>
            <method name="updateFocusableWindowState" type="void" line="137"/>
            <method name="setFocusableWindow" type="void" line="140"/>
            <method name="setTitle" type="void" line="144">
                <params>
                    <param name="title" type="String"/>
                </params>
                <comment line="145">
                    allow a null title to pass as an empty string.                    
                </comment>
                <scope line="146"/>
            </method>
            <method name="_setTitle" type="void" line="151"/>
            <method name="setResizable" type="void" line="153">
                <params>
                    <param name="resizable" type="boolean"/>
                </params>
            </method>
            <method name="_setResizable" type="void" line="156"/>
            <method name="WWindowPeer" type="constructor" line="160">
                <params>
                    <param name="target" type="Window"/>
                </params>
            </method>
            <method name="initialize" type="void" line="164">
                <comment line="175">
                    Express our interest in display changes                    
                </comment>
                <comment line="194">
                    default value of a boolean field is &apos;false&apos;, so set isOpaque to                    
                </comment>
                <comment line="195">
                    true here explicitly                    
                </comment>
                <declaration name="f" type="Font" line="169"/>
                <scope line="170"/>
                <declaration name="gc" type="GraphicsConfiguration" line="176"/>
                <declaration name="shape" type="Shape" line="183"/>
                <scope line="184"/>
                <declaration name="opacity" type="float" line="188"/>
                <scope line="189"/>
                <scope line="193"/>
            </method>
            <method name="createAwtWindow" type="void" line="201"/>
            <declaration name="windowType" type="Window.Type" line="203"/>
            <method name="preCreate" type="void" line="207">
                <params>
                    <param name="parent" type="WComponentPeer"/>
                </params>
            </method>
            <method name="create" type="void" line="211">
                <params>
                    <param name="parent" type="WComponentPeer"/>
                </params>
            </method>
            <method name="realShow" type="void" line="217"/>
            <method name="show" type="void" line="221">
                <comment line="226">
                    Fix for 4868278.                    
                </comment>
                <comment line="227">
                    If we create a window with a specific GraphicsConfig, and then move it with                    
                </comment>
                <comment line="228">
                    setLocation() or setBounds() to another one before its peer has been created,                    
                </comment>
                <comment line="229">
                    then calling Window.getGraphicsConfig() returns wrong config. That may lead                    
                </comment>
                <comment line="230">
                    to some problems like wrong-placed tooltips. It is caused by calling                    
                </comment>
                <comment line="231">
                    super.displayChanged() in WWindowPeer.displayChanged() regardless of whether                    
                </comment>
                <comment line="232">
                    GraphicsDevice was really changed, or not. So we need to track it here.                    
                </comment>
                <declaration name="alwaysOnTop" type="boolean" line="224"/>
                <scope line="238"/>
                <scope line="242">
                    <scope line="243"/>
                </scope>
            </method>
            <method name="updateInsets" type="void" line="251"/>
            <method name="getSysMinWidth" type="int" line="253"/>
            <method name="getSysMinHeight" type="int" line="254"/>
            <method name="getSysIconWidth" type="int" line="255"/>
            <method name="getSysIconHeight" type="int" line="256"/>
            <method name="getSysSmIconWidth" type="int" line="257"/>
            <method name="getSysSmIconHeight" type="int" line="258"/>
            <method name="setIconImagesData" type="void" line="259"/>
            <javadoc line="259">
                windows/classes/sun/awt/windows/
                  Creates native icon from specified raster data and updates
                  icon for window and all descendant windows that inherit icon.
                  Raster data should be passed in the ARGB form.
                  Note that raster data format was changed to provide support
                  for XP icons with alpha-channel                
            </javadoc>
            <method name="reshapeFrame" type="void" line="269"/>
            <method name="requestWindowFocus" type="boolean" line="271">
                <params>
                    <param name="cause" type="CausedFocusEvent.Cause"/>
                </params>
                <scope line="272"/>
            </method>
            <method name="requestWindowFocus" type="boolean" line="277"/>
            <method name="focusAllowedFor" type="boolean" line="279">
                <declaration name="window" type="Window" line="280"/>
                <scope line="284"/>
                <scope line="287"/>
            </method>
            <method name="hide" type="void" line="293">
                <comment line="296">
                    We&apos;re not getting WINDOW_CLOSING from the native code when hiding                    
                </comment>
                <comment line="297">
                    the window programmatically. So, create it and notify the listener.                    
                </comment>
                <declaration name="listener" type="WindowListener" line="294"/>
                <scope line="295"/>
            </method>
            <method name="preprocessPostEvent" type="void" line="304">
                <params>
                    <param name="event" type="AWTEvent"/>
                </params>
                <scope line="305">
                    <declaration name="listener" type="WindowListener" line="306"/>
                    <scope line="307"/>
                </scope>
            </method>
            <method name="addWindowListener" type="void" line="320">
                <params>
                    <param name="l" type="WindowListener"/>
                </params>
            </method>
            <method name="removeWindowListener" type="void" line="324">
                <params>
                    <param name="l" type="WindowListener"/>
                </params>
            </method>
            <method name="updateMinimumSize" type="void" line="328">
                <declaration name="minimumSize" type="Dimension" line="329"/>
                <scope line="330"/>
                <scope line="333">
                    <declaration name="msw" type="int" line="334"/>
                    <declaration name="msh" type="int" line="335"/>
                    <declaration name="w" type="int" line="336"/>
                    <declaration name="h" type="int" line="337"/>
                </scope>
                <scope line="339"/>
            </method>
            <method name="updateIconImages" type="void" line="344">
                <declaration name="imageList" type="java.util.List&lt;Image&gt;" line="345"/>
                <scope line="346"/>
                <scope line="348">
                    <declaration name="w" type="int" line="349"/>
                    <declaration name="h" type="int" line="350"/>
                    <declaration name="smw" type="int" line="351"/>
                    <declaration name="smh" type="int" line="352"/>
                    <declaration name="iconData" type="DataBufferInt" line="353"/>
                    <declaration name="iconSmData" type="DataBufferInt" line="355"/>
                    <scope line="357"/>
                    <scope line="360"/>
                </scope>
            </method>
            <method name="setMinSize" type="void" line="366"/>
            <javadoc line="372">
                Some modality-related code here because WFileDialogPeer, WPrintDialogPeer and
                  WPageDialogPeer are descendants of WWindowPeer, not WDialogPeer                
            </javadoc>
            <method name="isModalBlocked" type="boolean" line="377"/>
            <method name="setModalBlocked" type="void" line="381">
                <params>
                    <param name="dialog" type="Dialog"/>
                    <param name="blocked" type="boolean"/>
                </params>
                <comment line="382">
                    State lock should always be after awtLock                    
                </comment>
                <comment line="384">
                    use WWindowPeer instead of WDialogPeer because of FileDialogs and PrintDialogs                    
                </comment>
                <comment line="389">
                    handle native dialogs separately, as they may have not                    
                </comment>
                <comment line="390">
                    got HWND yet; modalEnable/modalDisable is called from                    
                </comment>
                <comment line="391">
                    their setHWnd() methods                    
                </comment>
                <scope line="383">
                    <declaration name="blockerPeer" type="WWindowPeer" line="385"/>
                    <scope line="387">
                        <scope line="392"/>
                        <scope line="394"/>
                        <scope line="396"/>
                    </scope>
                    <scope line="399">
                        <scope line="401"/>
                        <scope line="403"/>
                        <scope line="405"/>
                    </scope>
                </scope>
            </method>
            <method name="modalDisable" type="void" line="412"/>
            <method name="modalEnable" type="void" line="413"/>
            <method name="getActiveWindowHandles" type="long[]" line="420">
                <declaration name="appContext" type="AppContext" line="421"/>
                <scope line="422">
                    <declaration name="l" type="List&lt;WWindowPeer&gt;" line="423"/>
                    <scope line="424"/>
                    <declaration name="result" type="long[]" line="427"/>
                    <scope line="428"/>
                </scope>
            </method>
            <method name="draggedToNewScreen" type="void" line="442">
                <anonymous_class line="444">
                    <method name="run" type="void" line="445"/>
                </anonymous_class>
            </method>
            <method name="updateGC" type="void" line="451">
                <comment line="457">
                    get current GD                    
                </comment>
                <comment line="465">
                    Occasionally during device addition/removal getScreenImOn can return                    
                </comment>
                <comment line="466">
                    a non-existing screen number. Use the default device in this case.                    
                </comment>
                <comment line="474">
                    Set winGraphicsConfig to the default GC for the monitor this Window                    
                </comment>
                <comment line="475">
                    is now mostly on.                    
                </comment>
                <comment line="484">
                    if on a different display, take off old GD and put on new GD                    
                </comment>
                <declaration name="scrn" type="int" line="452"/>
                <scope line="453"/>
                <declaration name="oldDev" type="Win32GraphicsDevice" line="458"/>
                <declaration name="newDev" type="Win32GraphicsDevice" line="461"/>
                <declaration name="devs" type="GraphicsDevice" line="462"/>
                <scope line="467"/>
                <scope line="470"/>
                <scope line="478">
                    <scope line="479"/>
                </scope>
                <scope line="485"/>
            </method>
            <javadoc line="494">
                From the DisplayChangedListener interface.
                  This method handles a display change - either when the display settings
                  are changed, or when the window has been dragged onto a different
                  display.
                  Called after a change in the display mode.  This event
                  triggers replacing the surfaceData object (since that object
                  reflects the current display depth information, which has
                  just changed).                
            </javadoc>
            <method name="displayChanged" type="void" line="505"/>
            <javadoc line="509">
                Part of the DisplayChangedListener interface: components
                  do not need to react to this event                
            </javadoc>
            <method name="paletteChanged" type="void" line="513"/>
            <method name="getScreenImOn" type="int" line="516"/>
            <method name="setFullScreenExclusiveModeState" type="void" line="519"/>
            <method name="grab" type="void" line="525"/>
            <method name="ungrab" type="void" line="529"/>
            <method name="nativeGrab" type="void" line="532"/>
            <method name="nativeUngrab" type="void" line="533"/>
            <method name="hasWarningWindow" type="boolean" line="535"/>
            <method name="isTargetUndecorated" type="boolean" line="539"/>
            <declaration name="sysX" type="int" line="546"/>
            <declaration name="sysY" type="int" line="547"/>
            <declaration name="sysW" type="int" line="548"/>
            <declaration name="sysH" type="int" line="549"/>
            <method name="repositionSecurityWarning" type="void" line="551"/>
            <method name="setBounds" type="void" line="554">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="op" type="int"/>
                </params>
            </method>
            <method name="print" type="void" line="564">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <comment line="565">
                    We assume we print the whole frame,                    
                </comment>
                <comment line="566">
                    so we expect no clip was set previously                    
                </comment>
                <declaration name="shape" type="Shape" line="567"/>
                <scope line="568"/>
            </method>
            <method name="replaceSurfaceDataRecursively" type="void" line="574">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <scope line="575">
                    <scope line="576"/>
                </scope>
                <declaration name="cp" type="ComponentPeer" line="580"/>
                <scope line="581"/>
            </method>
            <method name="getTranslucentGraphics" type="Graphics" line="586">
                <scope line="587"/>
            </method>
            <method name="setBackground" type="void" line="593">
                <params>
                    <param name="c" type="Color"/>
                </params>
                <scope line="595">
                    <scope line="596"/>
                </scope>
            </method>
            <method name="setOpacity" type="void" line="602"/>
            <declaration name="opacity" type="float" line="603"/>
            <method name="setOpacity" type="void" line="605">
                <params>
                    <param name="opacity" type="float"/>
                </params>
                <comment line="621">
                    non-Vista OS: only replace the surface data if opacity status                    
                </comment>
                <comment line="622">
                    changed (see WComponentPeer.isAccelCapable() for more)                    
                </comment>
                <scope line="608"/>
                <scope line="612"/>
                <scope line="620"/>
                <declaration name="maxOpacity" type="int" line="628"/>
                <declaration name="iOpacity" type="int" line="629"/>
                <scope line="630"/>
                <scope line="633"/>
                <scope line="639">
                    <scope line="640"/>
                </scope>
            </method>
            <method name="setOpaqueImpl" type="void" line="646"/>
            <method name="setOpaque" type="void" line="648">
                <params>
                    <param name="isOpaque" type="boolean"/>
                </params>
                <comment line="669">
                    non-Vista OS: only replace the surface data if the opacity                    
                </comment>
                <comment line="670">
                    status changed (see WComponentPeer.isAccelCapable() for more)                    
                </comment>
                <comment line="689">
                    On Vista: setting the window non-opaque makes the window look                    
                </comment>
                <comment line="690">
                    rectangular, though still catching the mouse clicks within                    
                </comment>
                <comment line="691">
                    its shape only. To restore the correct visual appearance                    
                </comment>
                <comment line="692">
                    of the window (i.e. w/ the correct shape) we have to reset                    
                </comment>
                <comment line="693">
                    the shape.                    
                </comment>
                <scope line="649">
                    <scope line="650"/>
                </scope>
                <declaration name="target" type="Window" line="655"/>
                <scope line="657">
                    <declaration name="sunToolkit" type="SunToolkit" line="658"/>
                    <scope line="661"/>
                </scope>
                <declaration name="isVistaOS" type="boolean" line="666"/>
                <scope line="668"/>
                <scope line="674">
                    <scope line="677">
                        <declaration name="currentPainter" type="TranslucentWindowPainter" line="678"/>
                        <scope line="679"/>
                    </scope>
                    <scope line="683"/>
                </scope>
                <scope line="688">
                    <declaration name="shape" type="Shape" line="694"/>
                    <scope line="695"/>
                </scope>
                <scope line="700"/>
            </method>
            <method name="updateWindowImpl" type="void" line="705"/>
            <method name="updateWindow" type="void" line="707"/>
            <method name="updateWindow" type="void" line="711">
                <params>
                    <param name="repaint" type="boolean"/>
                </params>
                <declaration name="w" type="Window" line="712"/>
                <scope line="713">
                    <scope line="716"/>
                    <declaration name="currentPainter" type="TranslucentWindowPainter" line="719"/>
                    <scope line="720"/>
                    <scope line="722"/>
                </scope>
            </method>
            <method name="initActiveWindowsTracking" type="void" line="733">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <declaration name="appContext" type="AppContext" line="734"/>
                <scope line="735">
                    <declaration name="l" type="List&lt;WWindowPeer&gt;" line="736"/>
                    <scope line="737">
                        <declaration name="kfm" type="KeyboardFocusManager" line="742"/>
                    </scope>
                </scope>
            </method>
            <class name="GuiDisposedListener" line="753">
                <implements interface="PropertyChangeListener"/>
                <method name="propertyChange" type="void" line="754">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="isDisposed" type="boolean" line="755"/>
                    <scope line="756">
                        <scope line="757"/>
                    </scope>
                    <declaration name="appContext" type="AppContext" line="761"/>
                    <scope line="762">
                        <declaration name="kfm" type="KeyboardFocusManager" line="766"/>
                    </scope>
                </method>
            </class>
            <class name="ActiveWindowListener" line="777">
                <implements interface="PropertyChangeListener"/>
                <method name="propertyChange" type="void" line="778">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <comment line="786">
                        add/move wp to the end of the list                        
                    </comment>
                    <declaration name="w" type="Window" line="779"/>
                    <scope line="780"/>
                    <declaration name="appContext" type="AppContext" line="783"/>
                    <scope line="784">
                        <declaration name="wp" type="WWindowPeer" line="785"/>
                        <declaration name="l" type="List&lt;WWindowPeer&gt;" line="787"/>
                        <scope line="788"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>