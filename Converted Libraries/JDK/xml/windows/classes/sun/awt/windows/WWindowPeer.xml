<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.windows">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.image"/>
        <import package="java.awt.peer"/>
        <import package="java.beans"/>
        <import package="java.lang.reflect"/>
        <import package="java.util"/>
        <import package="java.util.List"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <import package="sun.awt"/>
        <import package="sun.java2d.pipe.Region"/>
        <class name="WWindowPeer" line="13">
            <extends class="WPanelPeer"/>
            <implements interface="WindowPeer"/>
            <implements interface="DisplayChangedListener"/>
            <declaration name="log" type="PlatformLogger" line="14"/>
            <declaration name="screenLog" type="PlatformLogger" line="15"/>
            <declaration name="modalBlocker" type="WWindowPeer" line="16"/>
            <declaration name="isOpaque" type="boolean" line="17"/>
            <declaration name="painter" type="TranslucentWindowPainter" line="18"/>
            <declaration name="ACTIVE_WINDOWS_KEY" type="StringBuffer" line="19"/>
            <declaration name="activeWindowListener" type="PropertyChangeListener" line="20"/>
            <declaration name="guiDisposedListener" type="PropertyChangeListener" line="21"/>
            <declaration name="windowListener" type="WindowListener" line="22"/>
            <method name="initIDs" type="void" line="23"/>
            <javadoc line="23">
                Initialize JNI field IDs                
            </javadoc>
            <scope line="27"/>
            <method name="disposeImpl" type="void" line="30">
                <declaration name="appContext" type="AppContext" line="31"/>
                <scope line="32">
                    <declaration name="l" type="List&lt;WWindowPeer&gt;" line="33"/>
                    <scope line="34"/>
                </scope>
                <declaration name="gc" type="GraphicsConfiguration" line="38"/>
                <scope line="40">
                    <declaration name="currentPainter" type="TranslucentWindowPainter" line="41"/>
                    <scope line="42"/>
                </scope>
            </method>
            <method name="toFront" type="void" line="48"/>
            <method name="_toFront" type="void" line="52"/>
            <method name="toBack" type="void" line="53"/>
            <method name="setAlwaysOnTopNative" type="void" line="54"/>
            <method name="setAlwaysOnTop" type="void" line="55">
                <params>
                    <param name="value" type="boolean"/>
                </params>
                <scope line="56"/>
            </method>
            <method name="updateFocusableWindowState" type="void" line="60"/>
            <method name="setFocusableWindow" type="void" line="63"/>
            <method name="setTitle" type="void" line="64">
                <params>
                    <param name="title" type="String"/>
                </params>
                <scope line="65"/>
            </method>
            <method name="_setTitle" type="void" line="70"/>
            <method name="setResizable" type="void" line="71">
                <params>
                    <param name="resizable" type="boolean"/>
                </params>
            </method>
            <method name="_setResizable" type="void" line="74"/>
            <method name="WWindowPeer" type="constructor" line="75">
                <params>
                    <param name="target" type="Window"/>
                </params>
            </method>
            <method name="initialize" type="void" line="78">
                <declaration name="f" type="Font" line="81"/>
                <scope line="82"/>
                <declaration name="gc" type="GraphicsConfiguration" line="87"/>
                <declaration name="shape" type="Shape" line="91"/>
                <scope line="92"/>
                <declaration name="opacity" type="float" line="95"/>
                <scope line="96"/>
                <scope line="99"/>
            </method>
            <method name="createAwtWindow" type="void" line="104"/>
            <declaration name="windowType" type="Window.Type" line="105"/>
            <method name="preCreate" type="void" line="106">
                <params>
                    <param name="parent" type="WComponentPeer"/>
                </params>
            </method>
            <method name="create" type="void" line="109">
                <params>
                    <param name="parent" type="WComponentPeer"/>
                </params>
            </method>
            <method name="realShow" type="void" line="113"/>
            <method name="show" type="void" line="116">
                <declaration name="alwaysOnTop" type="boolean" line="118"/>
                <scope line="122"/>
                <scope line="125">
                    <scope line="126"/>
                </scope>
            </method>
            <method name="updateInsets" type="void" line="131"/>
            <method name="getSysMinWidth" type="int" line="132"/>
            <method name="getSysMinHeight" type="int" line="133"/>
            <method name="getSysIconWidth" type="int" line="134"/>
            <method name="getSysIconHeight" type="int" line="135"/>
            <method name="getSysSmIconWidth" type="int" line="136"/>
            <method name="getSysSmIconHeight" type="int" line="137"/>
            <method name="setIconImagesData" type="void" line="138"/>
            <javadoc line="138">
                windows/classes/sun/awt/windows/
                  Creates native icon from specified raster data and updates
                  icon for window and all descendant windows that inherit icon.
                  Raster data should be passed in the ARGB form.
                  Note that raster data format was changed to provide support
                  for XP icons with alpha-channel                
            </javadoc>
            <method name="reshapeFrame" type="void" line="147"/>
            <method name="requestWindowFocus" type="boolean" line="148">
                <params>
                    <param name="cause" type="CausedFocusEvent.Cause"/>
                </params>
                <scope line="149"/>
            </method>
            <method name="requestWindowFocus" type="boolean" line="154"/>
            <method name="focusAllowedFor" type="boolean" line="155">
                <declaration name="window" type="Window" line="156"/>
                <scope line="157"/>
                <scope line="160"/>
            </method>
            <method name="hide" type="void" line="165">
                <declaration name="listener" type="WindowListener" line="166"/>
                <scope line="167"/>
            </method>
            <method name="preprocessPostEvent" type="void" line="172">
                <params>
                    <param name="event" type="AWTEvent"/>
                </params>
                <scope line="173">
                    <declaration name="listener" type="WindowListener" line="174"/>
                    <scope line="175"/>
                </scope>
            </method>
            <method name="addWindowListener" type="void" line="187">
                <params>
                    <param name="l" type="WindowListener"/>
                </params>
            </method>
            <method name="removeWindowListener" type="void" line="190">
                <params>
                    <param name="l" type="WindowListener"/>
                </params>
            </method>
            <method name="updateMinimumSize" type="void" line="193">
                <declaration name="minimumSize" type="Dimension" line="194"/>
                <scope line="195"/>
                <scope line="198">
                    <declaration name="msw" type="int" line="199"/>
                    <declaration name="msh" type="int" line="200"/>
                    <declaration name="w" type="int" line="201"/>
                    <declaration name="h" type="int" line="202"/>
                </scope>
                <scope line="205"/>
            </method>
            <method name="updateIconImages" type="void" line="209">
                <declaration name="imageList" type="java.util.List&lt;Image&gt;" line="210"/>
                <scope line="211"/>
                <scope line="214">
                    <declaration name="w" type="int" line="215"/>
                    <declaration name="h" type="int" line="216"/>
                    <declaration name="smw" type="int" line="217"/>
                    <declaration name="smh" type="int" line="218"/>
                    <declaration name="iconData" type="DataBufferInt" line="219"/>
                    <declaration name="iconSmData" type="DataBufferInt" line="220"/>
                    <scope line="221"/>
                    <scope line="224"/>
                </scope>
            </method>
            <method name="setMinSize" type="void" line="229"/>
            <javadoc line="230">
                Some modality-related code here because WFileDialogPeer, WPrintDialogPeer and
                  WPageDialogPeer are descendants of WWindowPeer, not WDialogPeer                
            </javadoc>
            <method name="isModalBlocked" type="boolean" line="234"/>
            <method name="setModalBlocked" type="void" line="237">
                <params>
                    <param name="dialog" type="Dialog"/>
                    <param name="blocked" type="boolean"/>
                </params>
                <scope line="238">
                    <declaration name="blockerPeer" type="WWindowPeer" line="239"/>
                    <scope line="240">
                        <scope line="242"/>
                        <scope line="245"/>
                        <scope line="248"/>
                    </scope>
                    <scope line="252">
                        <scope line="254"/>
                        <scope line="257"/>
                        <scope line="260"/>
                    </scope>
                </scope>
            </method>
            <method name="modalDisable" type="void" line="266"/>
            <method name="modalEnable" type="void" line="267"/>
            <method name="getActiveWindowHandles" type="long[]" line="268">
                <declaration name="appContext" type="AppContext" line="269"/>
                <scope line="270">
                    <declaration name="l" type="List&lt;WWindowPeer&gt;" line="271"/>
                    <scope line="272"/>
                    <declaration name="result" type="long[]" line="275"/>
                    <scope line="276"/>
                </scope>
            </method>
            <method name="draggedToNewScreen" type="void" line="282">
                <anonymous_class line="283">
                    <method name="run" type="void" line="284"/>
                </anonymous_class>
            </method>
            <method name="updateGC" type="void" line="290">
                <declaration name="scrn" type="int" line="291"/>
                <scope line="292"/>
                <declaration name="oldDev" type="Win32GraphicsDevice" line="295"/>
                <declaration name="newDev" type="Win32GraphicsDevice" line="296"/>
                <declaration name="devs" type="GraphicsDevice" line="297"/>
                <scope line="298"/>
                <scope line="301"/>
                <scope line="305">
                    <scope line="306"/>
                </scope>
                <scope line="310"/>
            </method>
            <javadoc line="316">
                From the DisplayChangedListener interface.
                  This method handles a display change - either when the display settings
                  are changed, or when the window has been dragged onto a different
                  display.
                  Called after a change in the display mode.  This event
                  triggers replacing the surfaceData object (since that object
                  reflects the current display depth information, which has
                  just changed).                
            </javadoc>
            <method name="displayChanged" type="void" line="326"/>
            <javadoc line="329">
                Part of the DisplayChangedListener interface: components
                  do not need to react to this event                
            </javadoc>
            <method name="paletteChanged" type="void" line="333"/>
            <method name="getScreenImOn" type="int" line="335"/>
            <method name="setFullScreenExclusiveModeState" type="void" line="336"/>
            <method name="grab" type="void" line="337"/>
            <method name="ungrab" type="void" line="340"/>
            <method name="nativeGrab" type="void" line="343"/>
            <method name="nativeUngrab" type="void" line="344"/>
            <method name="hasWarningWindow" type="boolean" line="345"/>
            <method name="isTargetUndecorated" type="boolean" line="348"/>
            <declaration name="sysX" type="int" line="351"/>
            <declaration name="sysY" type="int" line="352"/>
            <declaration name="sysW" type="int" line="353"/>
            <declaration name="sysH" type="int" line="354"/>
            <method name="repositionSecurityWarning" type="void" line="355"/>
            <method name="setBounds" type="void" line="356">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="op" type="int"/>
                </params>
            </method>
            <method name="print" type="void" line="363">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="shape" type="Shape" line="364"/>
                <scope line="365"/>
            </method>
            <method name="replaceSurfaceDataRecursively" type="void" line="370">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <scope line="371">
                    <scope line="372"/>
                </scope>
                <declaration name="cp" type="ComponentPeer" line="376"/>
                <scope line="377"/>
            </method>
            <method name="getTranslucentGraphics" type="Graphics" line="381">
                <scope line="382"/>
            </method>
            <method name="setBackground" type="void" line="386">
                <params>
                    <param name="c" type="Color"/>
                </params>
                <scope line="388">
                    <scope line="389"/>
                </scope>
            </method>
            <method name="setOpacity" type="void" line="394"/>
            <declaration name="opacity" type="float" line="395"/>
            <method name="setOpacity" type="void" line="396">
                <params>
                    <param name="opacity" type="float"/>
                </params>
                <scope line="397"/>
                <scope line="400"/>
                <scope line="403"/>
                <declaration name="maxOpacity" type="int" line="407"/>
                <declaration name="iOpacity" type="int" line="408"/>
                <scope line="409"/>
                <scope line="412"/>
                <scope line="416">
                    <scope line="417"/>
                </scope>
            </method>
            <method name="setOpaqueImpl" type="void" line="422"/>
            <method name="setOpaque" type="void" line="423">
                <params>
                    <param name="isOpaque" type="boolean"/>
                </params>
                <scope line="424">
                    <scope line="425"/>
                </scope>
                <declaration name="target" type="Window" line="429"/>
                <scope line="430">
                    <declaration name="sunToolkit" type="SunToolkit" line="431"/>
                    <scope line="432"/>
                </scope>
                <declaration name="isVistaOS" type="boolean" line="436"/>
                <scope line="437"/>
                <scope line="440">
                    <scope line="443">
                        <declaration name="currentPainter" type="TranslucentWindowPainter" line="444"/>
                        <scope line="445"/>
                    </scope>
                    <scope line="450"/>
                </scope>
                <scope line="454">
                    <declaration name="shape" type="Shape" line="455"/>
                    <scope line="456"/>
                </scope>
                <scope line="460"/>
            </method>
            <method name="updateWindowImpl" type="void" line="464"/>
            <method name="updateWindow" type="void" line="465"/>
            <method name="updateWindow" type="void" line="468">
                <params>
                    <param name="repaint" type="boolean"/>
                </params>
                <declaration name="w" type="Window" line="469"/>
                <scope line="470">
                    <scope line="471"/>
                    <declaration name="currentPainter" type="TranslucentWindowPainter" line="474"/>
                    <scope line="475"/>
                    <scope line="478"/>
                </scope>
            </method>
            <method name="initActiveWindowsTracking" type="void" line="483">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <declaration name="appContext" type="AppContext" line="484"/>
                <scope line="485">
                    <declaration name="l" type="List&lt;WWindowPeer&gt;" line="486"/>
                    <scope line="487">
                        <declaration name="kfm" type="KeyboardFocusManager" line="491"/>
                    </scope>
                </scope>
            </method>
            <class name="GuiDisposedListener" line="496">
                <implements interface="PropertyChangeListener"/>
                <method name="propertyChange" type="void" line="497">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="isDisposed" type="boolean" line="498"/>
                    <scope line="499">
                        <scope line="500"/>
                    </scope>
                    <declaration name="appContext" type="AppContext" line="504"/>
                    <scope line="505">
                        <declaration name="kfm" type="KeyboardFocusManager" line="508"/>
                    </scope>
                </method>
            </class>
            <class name="ActiveWindowListener" line="513">
                <implements interface="PropertyChangeListener"/>
                <method name="propertyChange" type="void" line="514">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="w" type="Window" line="515"/>
                    <scope line="516"/>
                    <declaration name="appContext" type="AppContext" line="519"/>
                    <scope line="520">
                        <declaration name="wp" type="WWindowPeer" line="521"/>
                        <declaration name="l" type="List&lt;WWindowPeer&gt;" line="522"/>
                        <scope line="523"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>