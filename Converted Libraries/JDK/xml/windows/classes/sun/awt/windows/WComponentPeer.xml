<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.windows">
        <import package="java.awt"/>
        <import package="java.awt.peer"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="sun.awt.RepaintArea"/>
        <import package="sun.awt.CausedFocusEvent"/>
        <import package="sun.awt.image.SunVolatileImage"/>
        <import package="sun.awt.image.ToolkitImage"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.ImageProducer"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.event.PaintEvent"/>
        <import package="java.awt.event.InvocationEvent"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.event.FocusEvent"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.event.MouseWheelEvent"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="sun.awt.Win32GraphicsConfig"/>
        <import package="sun.awt.Win32GraphicsEnvironment"/>
        <import package="sun.java2d.InvalidPipeException"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.ScreenUpdateManager"/>
        <import package="sun.java2d.d3d.D3DSurfaceData"/>
        <import package="sun.java2d.opengl.OGLSurfaceData"/>
        <import package="sun.java2d.pipe.Region"/>
        <import package="sun.awt.DisplayChangedListener"/>
        <import package="sun.awt.PaintEventDispatcher"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.event.IgnorePaintEvent"/>
        <import package="java.awt.dnd.DropTarget"/>
        <import package="java.awt.dnd.peer.DropTargetPeer"/>
        <import package="sun.awt.AWTAccessor"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="WComponentPeer" line="36">
            <extends class="WObjectPeer"/>
            <implements interface="ComponentPeer"/>
            <implements interface="DropTargetPeer"/>
            <declaration name="hwnd" type="long" line="37"/>
            <javadoc line="37">
                Handle to native window                
            </javadoc>
            <declaration name="log" type="PlatformLogger" line="41"/>
            <declaration name="shapeLog" type="PlatformLogger" line="42"/>
            <declaration name="focusLog" type="PlatformLogger" line="43"/>
            <declaration name="surfaceData" type="SurfaceData" line="44"/>
            <declaration name="paintArea" type="RepaintArea" line="45"/>
            <declaration name="winGraphicsConfig" type="Win32GraphicsConfig" line="46"/>
            <declaration name="isLayouting" type="boolean" line="47"/>
            <declaration name="paintPending" type="boolean" line="48"/>
            <declaration name="oldWidth" type="int" line="49"/>
            <declaration name="oldHeight" type="int" line="50"/>
            <declaration name="numBackBuffers" type="int" line="51"/>
            <declaration name="backBuffer" type="VolatileImage" line="52"/>
            <declaration name="backBufferCaps" type="BufferCapabilities" line="53"/>
            <declaration name="foreground" type="Color" line="54"/>
            <declaration name="background" type="Color" line="55"/>
            <declaration name="font" type="Font" line="56"/>
            <method name="isObscured" type="boolean" line="57"/>
            <method name="canDetermineObscurity" type="boolean" line="58"/>
            <declaration name="nDropTargets" type="int" line="61"/>
            <declaration name="nativeDropTargetContext" type="long" line="62"/>
            <method name="pShow" type="void" line="63"/>
            <method name="hide" type="void" line="64"/>
            <method name="enable" type="void" line="65"/>
            <method name="disable" type="void" line="66"/>
            <method name="getHWnd" type="long" line="67"/>
            <method name="getLocationOnScreen" type="Point" line="70"/>
            <method name="setVisible" type="void" line="71">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="72"/>
                <scope line="75"/>
            </method>
            <method name="show" type="void" line="79">
                <declaration name="s" type="Dimension" line="80"/>
            </method>
            <method name="setEnabled" type="void" line="85">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="86"/>
                <scope line="89"/>
            </method>
            <declaration name="serialNum" type="int" line="93"/>
            <method name="reshapeNoCheck" type="void" line="94"/>
            <method name="setBounds" type="void" line="95">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="op" type="int"/>
                </params>
                <scope line="97"/>
                <scope line="100"/>
                <scope line="103">
                    <scope line="104"/>
                    <scope line="107"/>
                </scope>
            </method>
            <method name="dynamicallyLayoutContainer" type="void" line="114">
                <scope line="115">
                    <declaration name="parent" type="Container" line="116"/>
                    <scope line="117"/>
                </scope>
                <declaration name="cont" type="Container" line="121"/>
                <anonymous_class line="122">
                    <method name="run" type="void" line="123">
                        <scope line="126">
                            <scope line="127"/>
                            <scope line="130"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="paintDamagedAreaImmediately" type="void" line="137"/>
            <method name="updateWindow" type="void" line="142"/>
            <method name="paint" type="void" line="143">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <method name="repaint" type="void" line="146">
                <params>
                    <param name="tm" type="long"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <declaration name="BANDING_DIVISOR" type="double" line="148"/>
            <method name="createPrintedPixels" type="int[]" line="149"/>
            <method name="print" type="void" line="150">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="comp" type="Component" line="151"/>
                <declaration name="totalW" type="int" line="152"/>
                <declaration name="totalH" type="int" line="153"/>
                <declaration name="hInc" type="int" line="154"/>
                <scope line="155"/>
                <scope line="158">
                    <declaration name="endY" type="int" line="159"/>
                    <scope line="160"/>
                    <declaration name="h" type="int" line="163"/>
                    <declaration name="bgColor" type="Color" line="164"/>
                    <declaration name="pix" type="int[]" line="165"/>
                    <scope line="166">
                        <declaration name="bim" type="BufferedImage" line="167"/>
                    </scope>
                </scope>
            </method>
            <method name="coalescePaintEvent" type="void" line="175">
                <params>
                    <param name="e" type="PaintEvent"/>
                </params>
                <declaration name="r" type="Rectangle" line="176"/>
                <scope line="177"/>
                <scope line="180"/>
            </method>
            <method name="reshape" type="void" line="191"/>
            <method name="handleJavaKeyEvent" type="boolean" line="192">
                <params>
                    <param name="e" type="KeyEvent"/>
                </params>
            </method>
            <method name="handleJavaMouseEvent" type="void" line="195">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
                <scope line="198"/>
            </method>
            <method name="nativeHandleEvent" type="void" line="204"/>
            <method name="handleEvent" type="void" line="205">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <declaration name="id" type="int" line="206"/>
                <scope line="207">
                    <scope line="208"/>
                    <scope line="211">
                        <scope line="212"/>
                    </scope>
                </scope>
                <scope line="221"/>
            </method>
            <method name="handleJavaFocusEvent" type="void" line="233">
                <params>
                    <param name="fe" type="FocusEvent"/>
                </params>
            </method>
            <method name="setFocus" type="void" line="237"/>
            <method name="getMinimumSize" type="Dimension" line="238"/>
            <method name="getPreferredSize" type="Dimension" line="241"/>
            <method name="layout" type="void" line="244"/>
            <method name="getBounds" type="Rectangle" line="246"/>
            <method name="isFocusable" type="boolean" line="249"/>
            <method name="getGraphicsConfiguration" type="GraphicsConfiguration" line="252">
                <scope line="253"/>
                <scope line="256"/>
            </method>
            <method name="getSurfaceData" type="SurfaceData" line="260"/>
            <javadoc line="263">
                Creates new surfaceData object and invalidates the previous
                  surfaceData object.
                  Replacing the surface data should never lock on any resources which are
                  required by other threads which may have them and may require
                  the tree-lock.
                  This is a degenerate version of replaceSurfaceData(numBackBuffers), so
                  just call that version with our current numBackBuffers.                
            </javadoc>
            <method name="replaceSurfaceData" type="void" line="272"/>
            <method name="createScreenSurface" type="void" line="275">
                <params>
                    <param name="isResize" type="boolean"/>
                </params>
                <declaration name="gc" type="Win32GraphicsConfig" line="276"/>
                <declaration name="mgr" type="ScreenUpdateManager" line="277"/>
            </method>
            <javadoc line="280">
                Multi-buffer version of replaceSurfaceData.  This version is called
                  by createBuffers(), which needs to acquire the same locks in the same
                  order, but also needs to perform additional functions inside the
                  locks.                
            </javadoc>
            <method name="replaceSurfaceData" type="void" line="286">
                <params>
                    <param name="newNumBackBuffers" type="int"/>
                    <param name="caps" type="BufferCapabilities"/>
                </params>
                <declaration name="oldData" type="SurfaceData" line="287"/>
                <declaration name="oldBB" type="VolatileImage" line="288"/>
                <scope line="289">
                    <scope line="290">
                        <scope line="291"/>
                        <declaration name="mgr" type="ScreenUpdateManager" line="295"/>
                        <scope line="299"/>
                        <scope line="303">
                            <declaration name="gc" type="Win32GraphicsConfig" line="305"/>
                        </scope>
                        <scope line="308"/>
                    </scope>
                </scope>
                <scope line="314"/>
                <scope line="318"/>
            </method>
            <method name="replaceSurfaceDataLater" type="void" line="323">
                <anonymous_class line="324">
                    <method name="run" type="void" line="325">
                        <scope line="326">
                            <scope line="327"/>
                            <scope line="330"/>
                        </scope>
                    </method>
                </anonymous_class>
                <declaration name="r" type="Runnable" line="324"/>
                <scope line="336"/>
            </method>
            <method name="updateGraphicsData" type="boolean" line="340">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
                <scope line="342"/>
                <scope line="345"/>
            </method>
            <method name="getColorModel" type="ColorModel" line="349">
                <declaration name="gc" type="GraphicsConfiguration" line="350"/>
                <scope line="351"/>
                <scope line="354"/>
            </method>
            <method name="getDeviceColorModel" type="ColorModel" line="358">
                <declaration name="gc" type="Win32GraphicsConfig" line="359"/>
                <scope line="360"/>
                <scope line="363"/>
            </method>
            <method name="getColorModel" type="ColorModel" line="367">
                <params>
                    <param name="transparency" type="int"/>
                </params>
                <declaration name="gc" type="GraphicsConfiguration" line="368"/>
                <scope line="369"/>
                <scope line="372"/>
            </method>
            <method name="getToolkit" type="java.awt.Toolkit" line="376"/>
            <declaration name="defaultFont" type="Font" line="379"/>
            <method name="getGraphics" type="Graphics" line="380">
                <scope line="381"/>
                <declaration name="target" type="Component" line="384"/>
                <declaration name="window" type="Window" line="385"/>
                <scope line="386">
                    <declaration name="g" type="Graphics" line="387"/>
                    <scope line="388">
                        <declaration name="x" type="int" line="389"/>
                        <scope line="390"/>
                    </scope>
                </scope>
                <declaration name="surfaceData" type="SurfaceData" line="399"/>
                <scope line="400">
                    <declaration name="bgColor" type="Color" line="401"/>
                    <scope line="402"/>
                    <declaration name="fgColor" type="Color" line="405"/>
                    <scope line="406"/>
                    <declaration name="font" type="Font" line="409"/>
                    <scope line="410"/>
                    <declaration name="mgr" type="ScreenUpdateManager" line="413"/>
                </scope>
            </method>
            <method name="getFontMetrics" type="FontMetrics" line="418">
                <params>
                    <param name="font" type="Font"/>
                </params>
            </method>
            <method name="_dispose" type="void" line="421"/>
            <method name="disposeImpl" type="void" line="422">
                <declaration name="oldData" type="SurfaceData" line="423"/>
            </method>
            <method name="setForeground" type="void" line="430">
                <params>
                    <param name="c" type="Color"/>
                </params>
            </method>
            <method name="setBackground" type="void" line="434">
                <params>
                    <param name="c" type="Color"/>
                </params>
            </method>
            <javadoc line="438">
                This method is intentionally not synchronized as it is called while
                  holding other locks.                
                <see>
                    sun.java2d.d3d.D3DScreenUpdateManager#validate(D3DWindowSurfaceData)                    
                </see>
            </javadoc>
            <method name="getBackgroundNoSync" type="Color" line="443"/>
            <method name="_setForeground" type="void" line="446"/>
            <method name="_setBackground" type="void" line="447"/>
            <method name="setFont" type="void" line="448">
                <params>
                    <param name="f" type="Font"/>
                </params>
            </method>
            <method name="_setFont" type="void" line="452"/>
            <method name="updateCursorImmediately" type="void" line="453"/>
            <method name="requestFocus" type="boolean" line="456">
                <params>
                    <param name="lightweightChild" type="Component"/>
                    <param name="temporary" type="boolean"/>
                    <param name="focusedWindowChangeAllowed" type="boolean"/>
                    <param name="time" type="long"/>
                    <param name="cause" type="CausedFocusEvent.Cause"/>
                </params>
                <scope line="457"/>
                <declaration name="result" type="int" line="460"/>
                <scope line="465"/>
                <declaration name="parentWindow" type="Window" line="468"/>
                <scope line="469"/>
                <declaration name="wpeer" type="WWindowPeer" line="472"/>
                <scope line="473"/>
                <declaration name="res" type="boolean" line="476"/>
                <scope line="478"/>
            </method>
            <method name="rejectFocusRequestHelper" type="boolean" line="487">
                <params>
                    <param name="logMsg" type="String"/>
                </params>
            </method>
            <method name="createImage" type="Image" line="492">
                <params>
                    <param name="producer" type="ImageProducer"/>
                </params>
            </method>
            <method name="createImage" type="Image" line="495">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="gc" type="Win32GraphicsConfig" line="496"/>
            </method>
            <method name="createVolatileImage" type="VolatileImage" line="499">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="prepareImage" type="boolean" line="502">
                <params>
                    <param name="img" type="Image"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="o" type="ImageObserver"/>
                </params>
            </method>
            <method name="checkImage" type="int" line="505">
                <params>
                    <param name="img" type="Image"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="o" type="ImageObserver"/>
                </params>
            </method>
            <method name="toString" type="String" line="508"/>
            <declaration name="updateX1" type="int" line="511"/>
            <method name="WComponentPeer" type="constructor" line="512">
                <params>
                    <param name="target" type="Component"/>
                </params>
                <declaration name="parent" type="Container" line="515"/>
                <declaration name="parentPeer" type="WComponentPeer" line="516"/>
            </method>
            <method name="create" type="void" line="523"/>
            <method name="checkCreation" type="void" line="524">
                <scope line="525">
                    <scope line="526"/>
                    <scope line="529"/>
                </scope>
            </method>
            <method name="start" type="void" line="534"/>
            <method name="initialize" type="void" line="535">
                <scope line="536"/>
                <declaration name="fg" type="Color" line="539"/>
                <scope line="540"/>
                <declaration name="f" type="Font" line="543"/>
                <scope line="544"/>
                <scope line="547"/>
                <declaration name="r" type="Rectangle" line="550"/>
            </method>
            <method name="handleRepaint" type="void" line="553">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <method name="handleExpose" type="void" line="555">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <method name="handlePaint" type="void" line="558">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <method name="postPaintIfNecessary" type="void" line="561">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="562">
                    <declaration name="event" type="PaintEvent" line="563"/>
                    <scope line="564"/>
                </scope>
            </method>
            <method name="postEvent" type="void" line="569">
                <params>
                    <param name="event" type="AWTEvent"/>
                </params>
            </method>
            <method name="preprocessPostEvent" type="void" line="573">
                <params>
                    <param name="event" type="AWTEvent"/>
                </params>
            </method>
            <method name="beginLayout" type="void" line="575"/>
            <method name="endLayout" type="void" line="578">
                <scope line="579"/>
            </method>
            <method name="beginValidate" type="void" line="584"/>
            <method name="endValidate" type="void" line="585"/>
            <javadoc line="586">
                DEPRECATED                
            </javadoc>
            <method name="minimumSize" type="Dimension" line="589"/>
            <javadoc line="592">
                DEPRECATED                
            </javadoc>
            <method name="preferredSize" type="Dimension" line="595"/>
            <javadoc line="598">
                register a DropTarget with this native peer                
            </javadoc>
            <method name="addDropTarget" type="void" line="601">
                <params>
                    <param name="dt" type="DropTarget"/>
                </params>
                <scope line="602"/>
            </method>
            <javadoc line="607">
                unregister a DropTarget with this native peer                
            </javadoc>
            <method name="removeDropTarget" type="void" line="610">
                <params>
                    <param name="dt" type="DropTarget"/>
                </params>
                <scope line="612"/>
            </method>
            <method name="addNativeDropTarget" type="long" line="617"/>
            <javadoc line="617">
                add the native peer&apos;s AwtDropTarget COM object                
                <return>
                    reference to AwtDropTarget object                    
                </return>
            </javadoc>
            <method name="removeNativeDropTarget" type="void" line="622"/>
            <javadoc line="622">
                remove the native peer&apos;s AwtDropTarget COM object                
            </javadoc>
            <method name="nativeHandlesWheelScrolling" type="boolean" line="626"/>
            <method name="handlesWheelScrolling" type="boolean" line="627"/>
            <method name="isPaintPending" type="boolean" line="630"/>
            <javadoc line="633">
                The following multibuffering-related methods delegate to our
                  associated GraphicsConfig (Win or WGL) to handle the appropriate
                  native windowing system specific actions.                
            </javadoc>
            <method name="createBuffers" type="void" line="638">
                <params>
                    <param name="numBuffers" type="int"/>
                    <param name="caps" type="BufferCapabilities"/>
                </params>
                <declaration name="gc" type="Win32GraphicsConfig" line="639"/>
                <scope line="641"/>
                <scope line="644"/>
            </method>
            <method name="destroyBuffers" type="void" line="648"/>
            <method name="flip" type="void" line="651">
                <params>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                    <param name="flipAction" type="BufferCapabilities.FlipContents"/>
                </params>
                <declaration name="backBuffer" type="VolatileImage" line="652"/>
                <scope line="653"/>
                <declaration name="gc" type="Win32GraphicsConfig" line="656"/>
            </method>
            <method name="getBackBuffer" type="Image" line="659">
                <declaration name="backBuffer" type="Image" line="660"/>
                <scope line="661"/>
            </method>
            <method name="getBackBufferCaps" type="BufferCapabilities" line="666"/>
            <method name="getBackBuffersNum" type="int" line="669"/>
            <method name="shouldClearRectBeforePaint" type="boolean" line="672"/>
            <method name="pSetParent" type="void" line="675"/>
            <javadoc line="676">
                @see java.awt.peer.ComponentPeer#reparent                
            </javadoc>
            <method name="reparent" type="void" line="679">
                <params>
                    <param name="newNativeParent" type="ContainerPeer"/>
                </params>
            </method>
            <javadoc line="682">
                @see java.awt.peer.ComponentPeer#isReparentSupported                
            </javadoc>
            <method name="isReparentSupported" type="boolean" line="685"/>
            <method name="setBoundsOperation" type="void" line="688">
                <params>
                    <param name="operation" type="int"/>
                </params>
            </method>
            <declaration name="isAccelCapable" type="boolean" line="690"/>
            <javadoc line="691">
                Returns whether this component is capable of being hw accelerated.
                  More specifically, whether rendering to this component or a
                  BufferStrategy&apos;s back-buffer for this component can be hw accelerated.
                  Conditions which could prevent hw acceleration include the toplevel
                  window containing this component being{@link GraphicsDevice.WindowTranslucency#PERPIXEL_TRANSLUCENTPERPIXEL_TRANSLUCENT}.
                  Another condition is if Xor paint mode was detected when rendering
                  to an on-screen accelerated surface associated with this peer.
                  in this case both on- and off-screen acceleration for this peer is
                  disabled.                
                <return>
                    {@code true} if this component is capable of being hw
                      accelerated, {@code false} otherwise                    
                </return>
                <see>
                    GraphicsDevice.WindowTranslucency#PERPIXEL_TRANSLUCENT                    
                </see>
            </javadoc>
            <method name="isAccelCapable" type="boolean" line="705">
                <scope line="706"/>
                <declaration name="isTranslucent" type="boolean" line="709"/>
            </method>
            <javadoc line="712">
                Disables acceleration for this peer.                
            </javadoc>
            <method name="disableAcceleration" type="void" line="715"/>
            <method name="setRectangularShape" type="void" line="718"/>
            <method name="isContainingTopLevelAccelCapable" type="boolean" line="719">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <scope line="720"/>
                <scope line="723"/>
            </method>
            <javadoc line="728">
                Applies the shape to the native component window.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="applyShape" type="void" line="732">
                <params>
                    <param name="shape" type="Region"/>
                </params>
                <scope line="733"/>
                <scope line="736"/>
                <scope line="739"/>
            </method>
            <javadoc line="743">
                Lowers this component at the bottom of the above component. If the above parameter
                  is null then the method places this component at the top of the Z-order.                
            </javadoc>
            <method name="setZOrder" type="void" line="747">
                <params>
                    <param name="above" type="ComponentPeer"/>
                </params>
                <declaration name="aboveHWND" type="long" line="748"/>
            </method>
            <method name="setZOrder" type="void" line="751"/>
        </class>
    </source>