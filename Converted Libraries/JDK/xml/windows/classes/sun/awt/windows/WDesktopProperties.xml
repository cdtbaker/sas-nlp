<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.windows">
        <import package="java.awt.Color"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.RenderingHints"/>
        <import package="java.awt.RenderingHints"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <import package="sun.awt.SunToolkit"/>
        <class name="WDesktopProperties" line="55">
            <comment line="89">
                Returns String[] containing available property names                
            </comment>
            <comment line="103">
                Reads Win32 configuration information and
                 updates hashmap values                
            </comment>
            <comment line="109">
                Called from native code to set a boolean property                
            </comment>
            <comment line="120">
                Called from native code to set an integer property                
            </comment>
            <comment line="131">
                Called from native code to set a string property                
            </comment>
            <comment line="142">
                Called from native code to set a color property                
            </comment>
            <comment line="154">
                                
            </comment>
            <comment line="165">
                Called from native code to set a font property                
            </comment>
            <comment line="189">
                Called from native code to set a sound event property                
            </comment>
            <comment line="202">
                Plays Windows sound event                
            </comment>
            <comment line="238">
                Called by WToolkit when Windows settings change-- we (re)load properties and
                 set new values.                
            </comment>
            <comment line="257">
                This returns the value for the desktop property &quot;awt.font.desktophints&quot;
                 It builds this using the Windows desktop properties to return
                 them as platform independent hints.
                 This requires that the Windows properties have already been gathered
                 and placed in &quot;map&quot;                
            </comment>
            <declaration name="log" type="PlatformLogger" line="56"/>
            <declaration name="PREFIX" type="String" line="57"/>
            <declaration name="FILE_PREFIX" type="String" line="58"/>
            <declaration name="PROP_NAMES" type="String" line="59"/>
            <declaration name="pData" type="long" line="61"/>
            <scope line="63"/>
            <declaration name="wToolkit" type="WToolkit" line="67"/>
            <declaration name="map" type="HashMap&lt;String,Object&gt;" line="69"/>
            <method name="initIDs" type="void" line="71"/>
            <javadoc line="71">
                Initialize JNI field and method IDs                
            </javadoc>
            <method name="isWindowsProperty" type="boolean" line="76">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="WDesktopProperties" type="constructor" line="81">
                <params>
                    <param name="wToolkit" type="WToolkit"/>
                </params>
            </method>
            <method name="init" type="void" line="86"/>
            <method name="getKeyNames" type="String[]" line="91">
                <declaration name="keys" type="Object" line="92"/>
                <declaration name="sortedKeys" type="String" line="93"/>
                <scope line="95"/>
            </method>
            <method name="getWindowsParameters" type="void" line="106"/>
            <method name="setBooleanProperty" type="void" line="111">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="boolean"/>
                </params>
                <scope line="113"/>
            </method>
            <method name="setIntegerProperty" type="void" line="122">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="int"/>
                </params>
                <scope line="124"/>
            </method>
            <method name="setStringProperty" type="void" line="133">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <scope line="135"/>
            </method>
            <method name="setColorProperty" type="void" line="144">
                <params>
                    <param name="key" type="String"/>
                    <param name="r" type="int"/>
                    <param name="g" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="color" type="Color" line="146"/>
                <scope line="147"/>
            </method>
            <declaration name="fontNameMap" type="HashMap&lt;String,String&gt;" line="154"/>
            <scope line="155"/>
            <method name="setFontProperty" type="void" line="167">
                <params>
                    <param name="key" type="String"/>
                    <param name="name" type="String"/>
                    <param name="style" type="int"/>
                    <param name="size" type="int"/>
                </params>
                <declaration name="mappedName" type="String" line="170"/>
                <scope line="171"/>
                <declaration name="font" type="Font" line="174"/>
                <scope line="175"/>
                <declaration name="sizeKey" type="String" line="180"/>
                <declaration name="iSize" type="Integer" line="181"/>
                <scope line="182"/>
            </method>
            <method name="setSoundProperty" type="void" line="191">
                <params>
                    <param name="key" type="String"/>
                    <param name="winEventName" type="String"/>
                </params>
                <declaration name="soundRunnable" type="Runnable" line="194"/>
                <scope line="195"/>
            </method>
            <method name="playWindowsSound" type="void" line="204"/>
            <class name="WinPlaySound" line="206">
                <implements interface="Runnable"/>
                <declaration name="winEventName" type="String" line="207"/>
                <method name="WinPlaySound" type="constructor" line="209">
                    <params>
                        <param name="winEventName" type="String"/>
                    </params>
                </method>
                <method name="run" type="void" line="213"/>
                <method name="toString" type="String" line="217"/>
                <method name="equals" type="boolean" line="221">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="222"/>
                    <scope line="225"/>
                    <scope line="227"/>
                </method>
                <method name="hashCode" type="int" line="232"/>
            </class>
            <method name="getProperties" type="Map<String,Object>" line="241">
                <comment line="244">
                    load the changed properties into a new hashmap                    
                </comment>
                <comment line="249">
                    DnD uses one value for x and y drag diff, but Windows provides                    
                </comment>
                <comment line="250">
                    separate ones.  For now, just use the x value - rnk                    
                </comment>
            </method>
            <method name="getDesktopAAHints" type="RenderingHints" line="263">
                <comment line="265">
                    Equate &quot;DEFAULT&quot; to &quot;OFF&quot;, which it is in our implementation.
                     Doing this prevents unnecessary pipeline revalidation where
                     the value OFF is detected as a distinct value by SunGraphics2D                    
                </comment>
                <comment line="276">
                    &quot;1&quot; is GASPStandard but we&apos;ll also use that if the return
                     value is anything other than &quot;2&quot; for LCD.                    
                </comment>
                <comment line="283">
                    Recognise 0 as BGR and everything else as RGB - note
                     that 1 is the expected value for RGB.                    
                </comment>
                <comment line="288">
                                        
                </comment>
                <comment line="300">
                                        
                </comment>
                <declaration name="fontSmoothingHint" type="Object" line="269"/>
                <declaration name="fontSmoothingContrast" type="Integer" line="270"/>
                <declaration name="smoothingOn" type="Boolean" line="272"/>
                <scope line="274">
                    <declaration name="typeID" type="Integer" line="275"/>
                    <scope line="280"/>
                    <scope line="282">
                        <declaration name="orientID" type="Integer" line="286"/>
                        <scope line="289"/>
                        <scope line="291"/>
                        <scope line="297"/>
                        <scope line="299"/>
                    </scope>
                </scope>
                <declaration name="hints" type="RenderingHints" line="307"/>
                <scope line="309"/>
            </method>
        </class>
    </source>