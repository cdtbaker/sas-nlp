<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt">
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.GraphicsDevice"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.peer.ComponentPeer"/>
        <import package="java.io.File"/>
        <import package="java.io.IOException"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.ListIterator"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.StringTokenizer"/>
        <import package="sun.awt.DisplayChangedListener"/>
        <import package="sun.awt.SunDisplayChanger"/>
        <import package="sun.awt.windows.WPrinterJob"/>
        <import package="sun.awt.windows.WToolkit"/>
        <import package="sun.java2d.SunGraphicsEnvironment"/>
        <import package="sun.java2d.SurfaceManagerFactory"/>
        <import package="sun.java2d.WindowsSurfaceManagerFactory"/>
        <import package="sun.java2d.d3d.D3DGraphicsDevice"/>
        <import package="sun.java2d.windows.WindowsFlags"/>
        <class name="Win32GraphicsEnvironment" line="50">
            <extends class="SunGraphicsEnvironment"/>
            <comment line="82">
                = false;                
            </comment>
            <comment line="116">
                ----DISPLAY CHANGE SUPPORT----                
            </comment>
            <comment line="120">
                list of invalidated graphics devices (those which were removed)                
            </comment>
            <comment line="122">
                From DisplayChangeListener interface.
                 Called from WToolkit and executed on the event thread when the
                 display settings are changed.                
            </comment>
            <comment line="202">
                ----END DISPLAY CHANGE SUPPORT----                
            </comment>
            <javadoc line="50">
                This is an implementation of a GraphicsEnvironment object for the
                  default local GraphicsEnvironment used by the Java Runtime Environment
                  for Windows.                
                <see>
                    GraphicsDevice                    
                </see>
                <see>
                    GraphicsConfiguration                    
                </see>
            </javadoc>
            <scope line="62"/>
            <method name="initDisplay" type="void" line="74"/>
            <javadoc line="74">
                Initializes native components of the graphics environment.  This
                  includes everything from the native GraphicsDevice elements to
                  the DirectX rendering layer.                
            </javadoc>
            <declaration name="displayInitialized" type="boolean" line="81"/>
            <method name="initDisplayWrapper" type="void" line="82">
                <scope line="83"/>
            </method>
            <method name="Win32GraphicsEnvironment" type="constructor" line="89"/>
            <method name="getNumScreens" type="int" line="92"/>
            <method name="getDefaultScreen" type="int" line="93"/>
            <method name="getDefaultScreenDevice" type="GraphicsDevice" line="95"/>
            <method name="getXResolution" type="int" line="99"/>
            <javadoc line="99">
                Returns the number of pixels per logical inch along the screen width.
                  In a system with multiple display monitors, this value is the same for
                  all monitors.                
                <returns>
                    number of pixels per logical inch in X direction                    
                </returns>
            </javadoc>
            <method name="getYResolution" type="int" line="106"/>
            <javadoc line="106">
                Returns the number of pixels per logical inch along the screen height.
                  In a system with multiple display monitors, this value is the same for
                  all monitors.                
                <returns>
                    number of pixels per logical inch in Y direction                    
                </returns>
            </javadoc>
            <declaration name="oldDevices" type="ArrayList&amp;lt;WeakReference&amp;lt;Win32GraphicsDevice&amp;gt;&amp;gt;" line="120"/>
            <method name="displayChanged" type="void" line="127">
                <comment line="129">
                    getNumScreens() will return the correct current number of screens                    
                </comment>
                <comment line="132">
                    go through the list of current devices and determine if they
                     could be reused, or will have to be replaced                    
                </comment>
                <comment line="137">
                    REMIND: can we ever have anything other than Win32GD?                    
                </comment>
                <comment line="142">
                    devices may be invalidated from the native code when the
                     display change happens (device add/removal also causes a
                     display change)                    
                </comment>
                <comment line="152">
                    reuse the device                    
                </comment>
                <comment line="158">
                    create the new devices (those that weren&apos;t reused)                    
                </comment>
                <comment line="164">
                    install the new array of devices
                     Note: no synchronization here, it doesn&apos;t matter if a thread gets
                     a new or an old array this time around                    
                </comment>
                <comment line="173">
                    re-invalidate all old devices. It&apos;s needed because those in the list
                     may become &quot;invalid&quot; again - if the current default device is removed,
                     for example. Also, they need to be notified about display
                     changes as well.                    
                </comment>
                <comment line="187">
                    no more references to this device, remove it                    
                </comment>
                <comment line="192">
                    Reset the static GC for the (possibly new) default screen                    
                </comment>
                <comment line="195">
                    notify SunDisplayChanger list (e.g. VolatileSurfaceManagers and
                     CachingSurfaceManagers) about the display change event                    
                </comment>
                <comment line="198">
                    note: do not call super.displayChanged, we&apos;ve already done everything                    
                </comment>
            </method>
            <method name="makeScreenDevice" type="GraphicsDevice" line="205">
                <params>
                    <param name="screennum" type="int"/>
                </params>
                <declaration name="device" type="GraphicsDevice" line="206"/>
                <scope line="207"/>
                <scope line="210"/>
            </method>
            <method name="isDisplayLocal" type="boolean" line="216"/>
            <method name="isFlipStrategyPreferred" type="boolean" line="221">
                <params>
                    <param name="peer" type="ComponentPeer"/>
                </params>
                <declaration name="gc" type="GraphicsConfiguration" line="222"/>
                <scope line="223">
                    <declaration name="gd" type="GraphicsDevice" line="224"/>
                    <scope line="225"/>
                </scope>
            </method>
            <declaration name="isDWMCompositionEnabled" type="boolean" line="232"/>
            <javadoc line="233">
                Returns true if dwm composition is currently enabled, false otherwise.                
                <return>
                    true if dwm composition is enabled, false otherwise                    
                </return>
            </javadoc>
            <method name="isDWMCompositionEnabled" type="boolean" line="238"/>
            <javadoc line="242">
                Called from the native code when DWM composition state changed.
                  May be called multiple times during the lifetime of the application.
                  REMIND: we may want to create a listener mechanism for this.
                  Note: called on the Toolkit thread, no user code or locks are allowed.                
                <param>
                    enabled indicates the state of dwm composition                    
                </param>
            </javadoc>
            <method name="dwmCompositionChanged" type="void" line="251">
                <params>
                    <param name="enabled" type="boolean"/>
                </params>
            </method>
            <method name="isVistaOS" type="boolean" line="255"/>
            <javadoc line="255">
                Used to find out if the OS is Windows Vista or later.                
                <return>
                    {@code true} if the OS is Vista or later, {@code false} otherwise                    
                </return>
            </javadoc>
        </class>
    </source>