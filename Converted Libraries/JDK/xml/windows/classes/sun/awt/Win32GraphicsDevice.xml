<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt">
        <import package="java.awt.AWTPermission"/>
        <import package="java.awt.GraphicsDevice"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.DisplayMode"/>
        <import package="java.awt.EventQueue"/>
        <import package="java.awt.Frame"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Window"/>
        <import package="java.awt.event.WindowAdapter"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.awt.event.WindowListener"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Vector"/>
        <import package="java.awt.peer.WindowPeer"/>
        <import package="sun.awt.windows.WWindowPeer"/>
        <import package="sun.java2d.opengl.WGLGraphicsConfig"/>
        <import package="sun.java2d.windows.WindowsFlags"/>
        <class name="Win32GraphicsDevice" line="48">
            <extends class="GraphicsDevice"/>
            <comment line="59">
                updated with dev changes                
            </comment>
            <comment line="60">
                static for device                
            </comment>
            <comment line="66">
                Note that we do not synchronize access to this variable - it doesn&apos;t                
            </comment>
            <comment line="67">
                really matter if a thread does an operation on graphics device which is                
            </comment>
            <comment line="68">
                about to become invalid (or already become) - we are prepared to deal                
            </comment>
            <comment line="69">
                with this on the native level.                
            </comment>
            <comment line="72">
                keep track of top-level windows on this display                
            </comment>
            <comment line="74">
                REMIND: we may disable the use of pixel formats for some accelerated                
            </comment>
            <comment line="75">
                pipelines which are mutually exclusive with opengl, for which                
            </comment>
            <comment line="76">
                pixel formats were added in the first place                
            </comment>
            <comment line="79">
                the original display mode we had before entering the fullscreen                
            </comment>
            <comment line="80">
                mode                
            </comment>
            <comment line="82">
                activation/deactivation listener for the full-screen window                
            </comment>
            <comment line="392">
                Entering and exiting full-screen mode are done within a                
            </comment>
            <comment line="393">
                tree-lock and should never lock on any resources which are                
            </comment>
            <comment line="394">
                required by other threads which may have them and may require                
            </comment>
            <comment line="395">
                the tree-lock.                
            </comment>
            <comment line="396">
                REMIND: in the future these methods may need to become protected so that                
            </comment>
            <comment line="397">
                subclasses could override them and use appropriate api other than GDI                
            </comment>
            <comment line="398">
                for implementing these functions.                
            </comment>
            <comment line="479">
                From the DisplayChangeListener interface.
                 Called from Win32GraphicsEnvironment when the display settings have
                 changed.                
            </comment>
            <comment line="499">
                Add a DisplayChangeListener to be notified when the display settings
                 are changed.  Typically, only top-level containers need to be added
                 to Win32GraphicsDevice.                
            </comment>
            <comment line="508">
                Remove a DisplayChangeListener from this Win32GraphicsDevice                
            </comment>
            <implements interface="DisplayChangedListener"/>
            <javadoc line="48">
                This is an implementation of a GraphicsDevice object for a single
                  Win32 screen.                
                <see>
                    GraphicsEnvironment                    
                </see>
                <see>
                    GraphicsConfiguration                    
                </see>
            </javadoc>
            <declaration name="screen" type="int" line="57"/>
            <declaration name="dynamicColorModel" type="ColorModel" line="58"/>
            <declaration name="colorModel" type="ColorModel" line="59"/>
            <declaration name="configs" type="GraphicsConfiguration[]" line="60"/>
            <declaration name="defaultConfig" type="GraphicsConfiguration" line="61"/>
            <declaration name="idString" type="String" line="63"/>
            <declaration name="descString" type="String" line="64"/>
            <declaration name="valid" type="boolean" line="69"/>
            <declaration name="topLevels" type="SunDisplayChanger" line="72"/>
            <declaration name="pfDisabled" type="boolean" line="76"/>
            <declaration name="fullScreenExclusivePermission" type="AWTPermission" line="77"/>
            <declaration name="defaultDisplayMode" type="DisplayMode" line="80"/>
            <declaration name="fsWindowListener" type="WindowListener" line="82"/>
            <scope line="84">
                <declaration name="nopixfmt" type="String" line="91"/>
            </scope>
            <method name="initIDs" type="void" line="97"/>
            <method name="initDevice" type="void" line="99"/>
            <method name="Win32GraphicsDevice" type="constructor" line="101">
                <params>
                    <param name="screennum" type="int"/>
                </params>
                <comment line="103">
                    we cache the strings because we want toString() and getIDstring                    
                </comment>
                <comment line="104">
                    to reflect the original screen number (which may change if the                    
                </comment>
                <comment line="105">
                    device is removed)                    
                </comment>
                <comment line="107">
                    REMIND: may be should use class name?                    
                </comment>
            </method>
            <javadoc line="114">
                Returns the type of the graphics device.                
                <see>
                    #TYPE_RASTER_SCREEN                    
                </see>
                <see>
                    #TYPE_PRINTER                    
                </see>
                <see>
                    #TYPE_IMAGE_BUFFER                    
                </see>
            </javadoc>
            <method name="getType" type="int" line="120"/>
            <javadoc line="124">
                Returns the Win32 screen of the device.                
            </javadoc>
            <method name="getScreen" type="int" line="127"/>
            <javadoc line="131">
                Returns whether this is a valid devicie. Device can become
                  invalid as a result of device removal event.                
            </javadoc>
            <method name="isValid" type="boolean" line="135"/>
            <javadoc line="139">
                Called from native code when the device was removed.                
                <param>
                    defaultScreen the current default screen                    
                </param>
            </javadoc>
            <method name="invalidate" type="void" line="144">
                <params>
                    <param name="defaultScreen" type="int"/>
                </params>
            </method>
            <javadoc line="149">
                Returns the identification string associated with this graphics
                  device.                
            </javadoc>
            <method name="getIDstring" type="String" line="153"/>
            <javadoc line="158">
                Returns all of the graphics
                  configurations associated with this graphics device.                
            </javadoc>
            <method name="getConfigurations" type="GraphicsConfiguration[]" line="162">
                <comment line="177">
                    Workaround for failing GDI calls                    
                </comment>
                <scope line="163">
                    <scope line="164">
                        <scope line="166"/>
                    </scope>
                    <declaration name="max" type="int" line="173"/>
                    <declaration name="defaultPixID" type="int" line="174"/>
                    <declaration name="v" type="Vector" line="175"/>
                    <scope line="176"/>
                    <scope line="182">
                        <scope line="183">
                            <scope line="184">
                                <scope line="185"/>
                                <scope line="190"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="203">
                Returns the maximum number of graphics configurations available, or 1
                  if PixelFormat calls fail or are disabled.
                  This number is less than or equal to the number of graphics
                  configurations supported.                
            </javadoc>
            <method name="getMaxConfigs" type="int" line="209">
                <params>
                    <param name="screen" type="int"/>
                </params>
                <scope line="210"/>
                <scope line="212"/>
            </method>
            <method name="getMaxConfigsImpl" type="int" line="217"/>
            <method name="isPixFmtSupported" type="boolean" line="219"/>
            <javadoc line="219">
                Returns whether or not the PixelFormat indicated by index is
                  supported.  Supported PixelFormats support drawing to a Window
                  (PFD_DRAW_TO_WINDOW), support GDI (PFD_SUPPORT_GDI), and in the
                  case of an 8-bit format (cColorBits &lt;= 8) uses indexed colors
                  (iPixelType == PFD_TYPE_COLORINDEX).
                  We use the index 0 to indicate that PixelFormat calls don&apos;t work, or
                  are disabled.  Do not call this function with an index of 0.                
                <param>
                    index a PixelFormat index                    
                </param>
            </javadoc>
            <javadoc line="231">
                Returns the PixelFormatID of the default graphics configuration
                  associated with this graphics device, or 0 if PixelFormats calls fail or
                  are disabled.                
            </javadoc>
            <method name="getDefaultPixID" type="int" line="236">
                <params>
                    <param name="screen" type="int"/>
                </params>
                <scope line="237"/>
                <scope line="239"/>
            </method>
            <method name="getDefaultPixIDImpl" type="int" line="244"/>
            <javadoc line="244">
                Returns the default PixelFormat ID from GDI.  Do not call if PixelFormats
                  are disabled.                
            </javadoc>
            <javadoc line="250">
                Returns the default graphics configuration
                  associated with this graphics device.                
            </javadoc>
            <method name="getDefaultConfiguration" type="GraphicsConfiguration" line="254">
                <comment line="256">
                    first try to create a WGLGraphicsConfig if OGL is enabled                    
                </comment>
                <comment line="257">
                    REMIND: the WGL code does not yet work properly in multimon                    
                </comment>
                <comment line="258">
                    situations, so we will fallback on GDI if we are not on the                    
                </comment>
                <comment line="259">
                    default device...                    
                </comment>
                <comment line="274">
                    Fix for 4669614.  Most apps are not concerned with PixelFormats,                    
                </comment>
                <comment line="275">
                    yet we ALWAYS used them for determining ColorModels and such.                    
                </comment>
                <comment line="276">
                    By passing in 0 as the PixelFormatID here, we signal that                    
                </comment>
                <comment line="277">
                    PixelFormats should not be used, thus avoid loading the opengl                    
                </comment>
                <comment line="278">
                    library.  Apps concerned with PixelFormats can still use                    
                </comment>
                <comment line="279">
                    GraphicsConfiguration.getConfigurations().                    
                </comment>
                <comment line="280">
                    Note that calling native pixel format functions tends to cause                    
                </comment>
                <comment line="281">
                    problems between those functions (which are OpenGL-related)                    
                </comment>
                <comment line="282">
                    and our use of DirectX.  For example, some Matrox boards will                    
                </comment>
                <comment line="283">
                    crash or hang calling these functions when any app is running                    
                </comment>
                <comment line="284">
                    in DirectX fullscreen mode.  So avoiding these calls unless                    
                </comment>
                <comment line="285">
                    absolutely necessary is preferable.                    
                </comment>
                <scope line="255">
                    <scope line="260">
                        <declaration name="defPixID" type="int" line="261"/>
                        <scope line="263">
                            <scope line="264"/>
                            <scope line="266"/>
                        </scope>
                    </scope>
                    <scope line="286"/>
                </scope>
            </method>
            <method name="toString" type="String" line="293"/>
            <javadoc line="297">
                Returns true if this is the default GraphicsDevice for the
                  GraphicsEnvironment.                
            </javadoc>
            <method name="isDefaultDevice" type="boolean" line="301"/>
            <method name="isFSExclusiveModeAllowed" type="boolean" line="307">
                <declaration name="security" type="SecurityManager" line="308"/>
                <scope line="309">
                    <scope line="310"/>
                    <scope line="314"/>
                    <scope line="316"/>
                </scope>
            </method>
            <javadoc line="323">
                returns true unless we&apos;re not allowed to use fullscreen mode.                
            </javadoc>
            <method name="isFullScreenSupported" type="boolean" line="327"/>
            <method name="setFullScreenWindow" type="void" line="332">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <comment line="342">
                    Enter windowed mode.                    
                </comment>
                <comment line="344">
                    restore the original display mode                    
                </comment>
                <comment line="347">
                    we set the default display mode to null here                    
                </comment>
                <comment line="348">
                    because the default mode could change during                    
                </comment>
                <comment line="349">
                    the life of the application (user can change it through                    
                </comment>
                <comment line="350">
                    the desktop properties dialog, for example), so                    
                </comment>
                <comment line="351">
                    we need to record it every time prior to                    
                </comment>
                <comment line="352">
                    entering the fullscreen mode.                    
                </comment>
                <comment line="358">
                    we used to destroy the buffers on exiting fs mode, this                    
                </comment>
                <comment line="359">
                    is no longer needed since fs change will cause a surface                    
                </comment>
                <comment line="360">
                    data replacement                    
                </comment>
                <comment line="369">
                    always record the default display mode prior to going                    
                </comment>
                <comment line="370">
                    fullscreen                    
                </comment>
                <comment line="373">
                    Enter full screen exclusive mode.                    
                </comment>
                <comment line="378">
                    Note: removed replaceSurfaceData() call because                    
                </comment>
                <comment line="379">
                    changing the window size or making it visible                    
                </comment>
                <comment line="380">
                    will cause this anyway, and both of these events happen                    
                </comment>
                <comment line="381">
                    as part of switching into fullscreen mode.                    
                </comment>
                <comment line="386">
                    fix for 4868278                    
                </comment>
                <declaration name="old" type="Window" line="333"/>
                <scope line="334"/>
                <scope line="337"/>
                <scope line="343">
                    <scope line="345"/>
                    <declaration name="peer" type="WWindowPeer" line="355"/>
                    <scope line="356">
                        <scope line="361"/>
                    </scope>
                </scope>
                <scope line="368">
                    <declaration name="peer" type="WWindowPeer" line="374"/>
                    <scope line="375">
                        <scope line="376"/>
                    </scope>
                </scope>
            </method>
            <method name="enterFullScreenExclusive" type="void" line="398"/>
            <method name="exitFullScreenExclusive" type="void" line="399"/>
            <method name="isDisplayChangeSupported" type="boolean" line="402"/>
            <method name="setDisplayMode" type="void" line="407">
                <params>
                    <param name="dm" type="DisplayMode"/>
                </params>
                <comment line="423">
                    resize the fullscreen window to the dimensions of the new                    
                </comment>
                <comment line="424">
                    display mode                    
                </comment>
                <comment line="428">
                    Note: no call to replaceSurfaceData is required here since                    
                </comment>
                <comment line="429">
                    replacement will be caused by an upcoming display change event                    
                </comment>
                <scope line="408"/>
                <scope line="412"/>
                <scope line="415"/>
                <declaration name="w" type="Window" line="418"/>
                <scope line="419">
                    <declaration name="peer" type="WWindowPeer" line="420"/>
                    <declaration name="screenBounds" type="Rectangle" line="425"/>
                </scope>
                <scope line="430"/>
            </method>
            <method name="getCurrentDisplayMode" type="DisplayMode" line="436"/>
            <method name="configDisplayMode" type="void" line="437"/>
            <method name="enumDisplayModes" type="void" line="440"/>
            <method name="getDisplayMode" type="DisplayMode" line="443">
                <declaration name="res" type="DisplayMode" line="444"/>
            </method>
            <method name="getDisplayModes" type="DisplayMode[]" line="449">
                <declaration name="modes" type="ArrayList" line="450"/>
                <declaration name="listSize" type="int" line="452"/>
                <declaration name="retArray" type="DisplayMode[]" line="453"/>
                <scope line="454"/>
            </method>
            <method name="getMatchingDisplayMode" type="DisplayMode" line="460">
                <params>
                    <param name="dm" type="DisplayMode"/>
                </params>
                <scope line="461"/>
                <declaration name="modes" type="DisplayMode[]" line="464"/>
                <scope line="465">
                    <scope line="471"/>
                </scope>
            </method>
            <method name="displayChanged" type="void" line="483">
                <comment line="487">
                    pass on to all top-level windows on this display                    
                </comment>
            </method>
            <javadoc line="491">
                Part of the DisplayChangedListener interface: devices
                  do not need to react to this event                
            </javadoc>
            <method name="paletteChanged" type="void" line="495"/>
            <method name="addDisplayChangedListener" type="void" line="503">
                <params>
                    <param name="client" type="DisplayChangedListener"/>
                </params>
            </method>
            <method name="removeDisplayChangedListener" type="void" line="510">
                <params>
                    <param name="client" type="DisplayChangedListener"/>
                </params>
            </method>
            <method name="makeColorModel" type="ColorModel" line="514"/>
            <javadoc line="514">
                Creates and returns the color model associated with this device                
            </javadoc>
            <javadoc line="520">
                Returns a dynamic ColorModel which is updated when there
                  are any changes (e.g., palette changes) in the device                
            </javadoc>
            <method name="getDynamicColorModel" type="ColorModel" line="524">
                <scope line="525"/>
            </method>
            <javadoc line="531">
                Returns the non-dynamic ColorModel associated with this device                
            </javadoc>
            <method name="getColorModel" type="ColorModel" line="534">
                <scope line="535"/>
            </method>
            <class name="Win32FSWindowAdapter" line="541">
                <extends class="WindowAdapter"/>
                <javadoc line="541">
                    WindowAdapter class responsible for de/iconifying full-screen window
                      of this device.
                      The listener restores the default display mode when window is iconified
                      and sets it back to the one set by the user on de-iconification.                    
                </javadoc>
                <declaration name="device" type="Win32GraphicsDevice" line="549"/>
                <declaration name="dm" type="DisplayMode" line="550"/>
                <method name="Win32FSWindowAdapter" type="constructor" line="552">
                    <params>
                        <param name="device" type="Win32GraphicsDevice"/>
                    </params>
                </method>
                <method name="setFSWindowsState" type="void" line="556">
                    <params>
                        <param name="other" type="Window"/>
                        <param name="state" type="int"/>
                    </params>
                    <comment line="560">
                        check if the de/activation was caused by other                        
                    </comment>
                    <comment line="561">
                        fs window and ignore the event if that&apos;s the case                        
                    </comment>
                    <comment line="569">
                        otherwise apply state to all fullscreen windows                        
                    </comment>
                    <declaration name="gds" type="GraphicsDevice" line="557"/>
                    <scope line="562">
                        <scope line="563">
                            <scope line="564"/>
                        </scope>
                    </scope>
                    <scope line="570">
                        <declaration name="fsw" type="Window" line="571"/>
                        <scope line="572"/>
                    </scope>
                </method>
                <method name="windowDeactivated" type="void" line="579">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowActivated" type="void" line="584">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowIconified" type="void" line="589">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                    <comment line="590">
                        restore the default display mode for this device                        
                    </comment>
                    <declaration name="ddm" type="DisplayMode" line="591"/>
                    <scope line="592"/>
                </method>
                <method name="windowDeiconified" type="void" line="599">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                    <comment line="600">
                        restore the user-set display mode for this device                        
                    </comment>
                    <scope line="601"/>
                </method>
            </class>
            <javadoc line="608">
                Adds a WindowListener to be used as
                  activation/deactivation listener for the current full-screen window.                
                <param>
                    w full-screen window                    
                </param>
            </javadoc>
            <method name="addFSWindowListener" type="void" line="614">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <comment line="615">
                    Note: even though we create a listener for Window instances of                    
                </comment>
                <comment line="616">
                    fs windows they will not receive window events.                    
                </comment>
                <comment line="619">
                    Fix for 6709453. Using invokeLater to avoid listening                    
                </comment>
                <comment line="620">
                    for the events already posted to the queue.                    
                </comment>
                <anonymous_class line="621">
                    <method name="run" type="void" line="622"/>
                </anonymous_class>
            </method>
            <javadoc line="628">
                Removes the fs window listener.                
                <param>
                    w full-screen window                    
                </param>
            </javadoc>
            <method name="removeFSWindowListener" type="void" line="633">
                <params>
                    <param name="w" type="Window"/>
                </params>
            </method>
        </class>
    </source>