<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt">
        <import package="java.awt.AWTPermission"/>
        <import package="java.awt.GraphicsDevice"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.DisplayMode"/>
        <import package="java.awt.EventQueue"/>
        <import package="java.awt.Frame"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Window"/>
        <import package="java.awt.event.WindowAdapter"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.awt.event.WindowListener"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Vector"/>
        <import package="java.awt.peer.WindowPeer"/>
        <import package="sun.awt.windows.WWindowPeer"/>
        <import package="sun.java2d.opengl.WGLGraphicsConfig"/>
        <import package="sun.java2d.windows.WindowsFlags"/>
        <class name="Win32GraphicsDevice" line="21">
            <extends class="GraphicsDevice"/>
            <implements interface="DisplayChangedListener"/>
            <javadoc line="21">
                This is an implementation of a GraphicsDevice object for a single
                  Win32 screen.                
                <see>
                    GraphicsEnvironment                    
                </see>
                <see>
                    GraphicsConfiguration                    
                </see>
            </javadoc>
            <declaration name="screen" type="int" line="28"/>
            <declaration name="dynamicColorModel" type="ColorModel" line="29"/>
            <declaration name="colorModel" type="ColorModel" line="30"/>
            <declaration name="configs" type="GraphicsConfiguration[]" line="31"/>
            <declaration name="defaultConfig" type="GraphicsConfiguration" line="32"/>
            <declaration name="idString" type="String" line="33"/>
            <declaration name="descString" type="String" line="34"/>
            <declaration name="valid" type="boolean" line="35"/>
            <declaration name="topLevels" type="SunDisplayChanger" line="36"/>
            <declaration name="pfDisabled" type="boolean" line="37"/>
            <declaration name="fullScreenExclusivePermission" type="AWTPermission" line="38"/>
            <declaration name="defaultDisplayMode" type="DisplayMode" line="39"/>
            <declaration name="fsWindowListener" type="WindowListener" line="40"/>
            <scope line="41">
                <declaration name="nopixfmt" type="String" line="42"/>
            </scope>
            <method name="initIDs" type="void" line="46"/>
            <method name="initDevice" type="void" line="47"/>
            <method name="Win32GraphicsDevice" type="constructor" line="48">
                <params>
                    <param name="screennum" type="int"/>
                </params>
            </method>
            <javadoc line="55">
                Returns the type of the graphics device.                
                <see>
                    #TYPE_RASTER_SCREEN                    
                </see>
                <see>
                    #TYPE_PRINTER                    
                </see>
                <see>
                    #TYPE_IMAGE_BUFFER                    
                </see>
            </javadoc>
            <method name="getType" type="int" line="61"/>
            <javadoc line="64">
                Returns the Win32 screen of the device.                
            </javadoc>
            <method name="getScreen" type="int" line="67"/>
            <javadoc line="70">
                Returns whether this is a valid devicie. Device can become
                  invalid as a result of device removal event.                
            </javadoc>
            <method name="isValid" type="boolean" line="74"/>
            <javadoc line="77">
                Called from native code when the device was removed.                
                <param>
                    defaultScreen the current default screen                    
                </param>
            </javadoc>
            <method name="invalidate" type="void" line="81">
                <params>
                    <param name="defaultScreen" type="int"/>
                </params>
            </method>
            <javadoc line="85">
                Returns the identification string associated with this graphics
                  device.                
            </javadoc>
            <method name="getIDstring" type="String" line="89"/>
            <javadoc line="92">
                Returns all of the graphics
                  configurations associated with this graphics device.                
            </javadoc>
            <method name="getConfigurations" type="GraphicsConfiguration[]" line="96">
                <scope line="97">
                    <scope line="98">
                        <scope line="100"/>
                    </scope>
                    <declaration name="max" type="int" line="106"/>
                    <declaration name="defaultPixID" type="int" line="107"/>
                    <declaration name="v" type="Vector" line="108"/>
                    <scope line="109"/>
                    <scope line="113">
                        <scope line="114">
                            <scope line="115">
                                <scope line="116"/>
                                <scope line="120"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="131">
                Returns the maximum number of graphics configurations available, or 1
                  if PixelFormat calls fail or are disabled.
                  This number is less than or equal to the number of graphics
                  configurations supported.                
            </javadoc>
            <method name="getMaxConfigs" type="int" line="137">
                <params>
                    <param name="screen" type="int"/>
                </params>
                <scope line="138"/>
                <scope line="141"/>
            </method>
            <method name="getMaxConfigsImpl" type="int" line="145"/>
            <method name="isPixFmtSupported" type="boolean" line="146"/>
            <javadoc line="146">
                Returns whether or not the PixelFormat indicated by index is
                  supported.  Supported PixelFormats support drawing to a Window
                  (PFD_DRAW_TO_WINDOW), support GDI (PFD_SUPPORT_GDI), and in the
                  case of an 8-bit format (cColorBits &lt;= 8) uses indexed colors
                  (iPixelType == PFD_TYPE_COLORINDEX).
                  We use the index 0 to indicate that PixelFormat calls don&apos;t work, or
                  are disabled.  Do not call this function with an index of 0.                
                <param>
                    index a PixelFormat index                    
                </param>
            </javadoc>
            <javadoc line="157">
                Returns the PixelFormatID of the default graphics configuration
                  associated with this graphics device, or 0 if PixelFormats calls fail or
                  are disabled.                
            </javadoc>
            <method name="getDefaultPixID" type="int" line="162">
                <params>
                    <param name="screen" type="int"/>
                </params>
                <scope line="163"/>
                <scope line="166"/>
            </method>
            <method name="getDefaultPixIDImpl" type="int" line="170"/>
            <javadoc line="170">
                Returns the default PixelFormat ID from GDI.  Do not call if PixelFormats
                  are disabled.                
            </javadoc>
            <javadoc line="175">
                Returns the default graphics configuration
                  associated with this graphics device.                
            </javadoc>
            <method name="getDefaultConfiguration" type="GraphicsConfiguration" line="179">
                <scope line="180">
                    <scope line="181">
                        <declaration name="defPixID" type="int" line="182"/>
                        <scope line="184">
                            <scope line="185"/>
                            <scope line="188"/>
                        </scope>
                    </scope>
                    <scope line="194"/>
                </scope>
            </method>
            <method name="toString" type="String" line="200"/>
            <javadoc line="203">
                Returns true if this is the default GraphicsDevice for the
                  GraphicsEnvironment.                
            </javadoc>
            <method name="isDefaultDevice" type="boolean" line="207"/>
            <method name="isFSExclusiveModeAllowed" type="boolean" line="210">
                <declaration name="security" type="SecurityManager" line="211"/>
                <scope line="212">
                    <scope line="213"/>
                    <scope line="216"/>
                    <scope line="219"/>
                </scope>
            </method>
            <javadoc line="225">
                returns true unless we&apos;re not allowed to use fullscreen mode.                
            </javadoc>
            <method name="isFullScreenSupported" type="boolean" line="228"/>
            <method name="setFullScreenWindow" type="void" line="231">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <declaration name="old" type="Window" line="232"/>
                <scope line="233"/>
                <scope line="236"/>
                <scope line="240">
                    <scope line="241"/>
                    <declaration name="peer" type="WWindowPeer" line="245"/>
                    <scope line="246">
                        <scope line="248"/>
                    </scope>
                </scope>
                <scope line="255">
                    <declaration name="peer" type="WWindowPeer" line="258"/>
                    <scope line="259">
                        <scope line="260"/>
                    </scope>
                </scope>
            </method>
            <method name="enterFullScreenExclusive" type="void" line="268"/>
            <method name="exitFullScreenExclusive" type="void" line="269"/>
            <method name="isDisplayChangeSupported" type="boolean" line="270"/>
            <method name="setDisplayMode" type="void" line="273">
                <params>
                    <param name="dm" type="DisplayMode"/>
                </params>
                <scope line="274"/>
                <scope line="278"/>
                <scope line="281"/>
                <declaration name="w" type="Window" line="284"/>
                <scope line="285">
                    <declaration name="peer" type="WWindowPeer" line="286"/>
                    <declaration name="screenBounds" type="Rectangle" line="288"/>
                </scope>
                <scope line="291"/>
            </method>
            <method name="getCurrentDisplayMode" type="DisplayMode" line="295"/>
            <method name="configDisplayMode" type="void" line="296"/>
            <method name="enumDisplayModes" type="void" line="297"/>
            <method name="getDisplayMode" type="DisplayMode" line="298">
                <declaration name="res" type="DisplayMode" line="299"/>
            </method>
            <method name="getDisplayModes" type="DisplayMode[]" line="302">
                <declaration name="modes" type="ArrayList" line="303"/>
                <declaration name="listSize" type="int" line="305"/>
                <declaration name="retArray" type="DisplayMode[]" line="306"/>
                <scope line="307"/>
            </method>
            <method name="getMatchingDisplayMode" type="DisplayMode" line="312">
                <params>
                    <param name="dm" type="DisplayMode"/>
                </params>
                <scope line="313"/>
                <declaration name="modes" type="DisplayMode[]" line="316"/>
                <scope line="317">
                    <scope line="318"/>
                </scope>
            </method>
            <method name="displayChanged" type="void" line="324"/>
            <javadoc line="330">
                Part of the DisplayChangedListener interface: devices
                  do not need to react to this event                
            </javadoc>
            <method name="paletteChanged" type="void" line="334"/>
            <method name="addDisplayChangedListener" type="void" line="336">
                <params>
                    <param name="client" type="DisplayChangedListener"/>
                </params>
            </method>
            <method name="removeDisplayChangedListener" type="void" line="339">
                <params>
                    <param name="client" type="DisplayChangedListener"/>
                </params>
            </method>
            <method name="makeColorModel" type="ColorModel" line="342"/>
            <javadoc line="342">
                Creates and returns the color model associated with this device                
            </javadoc>
            <javadoc line="346">
                Returns a dynamic ColorModel which is updated when there
                  are any changes (e.g., palette changes) in the device                
            </javadoc>
            <method name="getDynamicColorModel" type="ColorModel" line="350">
                <scope line="351"/>
            </method>
            <javadoc line="356">
                Returns the non-dynamic ColorModel associated with this device                
            </javadoc>
            <method name="getColorModel" type="ColorModel" line="359">
                <scope line="360"/>
            </method>
            <class name="Win32FSWindowAdapter" line="365">
                <extends class="WindowAdapter"/>
                <javadoc line="365">
                    WindowAdapter class responsible for de/iconifying full-screen window
                      of this device.
                      The listener restores the default display mode when window is iconified
                      and sets it back to the one set by the user on de-iconification.                    
                </javadoc>
                <declaration name="device" type="Win32GraphicsDevice" line="372"/>
                <declaration name="dm" type="DisplayMode" line="373"/>
                <method name="Win32FSWindowAdapter" type="constructor" line="374">
                    <params>
                        <param name="device" type="Win32GraphicsDevice"/>
                    </params>
                </method>
                <method name="setFSWindowsState" type="void" line="377">
                    <params>
                        <param name="other" type="Window"/>
                        <param name="state" type="int"/>
                    </params>
                    <declaration name="gds" type="GraphicsDevice" line="378"/>
                    <scope line="379">
                        <scope line="380">
                            <scope line="381"/>
                        </scope>
                    </scope>
                    <scope line="386">
                        <declaration name="fsw" type="Window" line="387"/>
                        <scope line="388"/>
                    </scope>
                </method>
                <method name="windowDeactivated" type="void" line="393">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowActivated" type="void" line="396">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowIconified" type="void" line="399">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                    <declaration name="ddm" type="DisplayMode" line="400"/>
                    <scope line="401"/>
                </method>
                <method name="windowDeiconified" type="void" line="406">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                    <scope line="407"/>
                </method>
            </class>
            <javadoc line="413">
                Adds a WindowListener to be used as
                  activation/deactivation listener for the current full-screen window.                
                <param>
                    w full-screen window                    
                </param>
            </javadoc>
            <method name="addFSWindowListener" type="void" line="418">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <anonymous_class line="420">
                    <method name="run" type="void" line="421"/>
                </anonymous_class>
            </method>
            <javadoc line="427">
                Removes the fs window listener.                
                <param>
                    w full-screen window                    
                </param>
            </javadoc>
            <method name="removeFSWindowListener" type="void" line="431">
                <params>
                    <param name="w" type="Window"/>
                </params>
            </method>
        </class>
    </source>