<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www.protocol.file">
        <import package="java.net.InetAddress"/>
        <import package="java.net.URLConnection"/>
        <import package="java.net.URL"/>
        <import package="java.net.Proxy"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.URLStreamHandler"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="sun.net.www.ParseUtil"/>
        <import package="java.io.File"/>
        <class name="Handler" line="39">
            <extends class="URLStreamHandler"/>
            <javadoc line="39">
                Open an file input stream given a URL.                
                <author>
                    James Gosling                    
                </author>
            </javadoc>
            <method name="getHost" type="String" line="45">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <declaration name="host" type="String" line="46"/>
            </method>
            <method name="parseURL" type="void" line="53">
                <params>
                    <param name="u" type="URL"/>
                    <param name="spec" type="String"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                </params>
                <comment line="54">
                    Ugly backwards compatibility. Flip any file separator
                     characters to be forward slashes. This is a nop on Unix
                     and &quot;fixes&quot; win32 file paths. According to RFC 2396,
                     only forward slashes may be used to represent hierarchy
                     separation in a URL but previous releases unfortunately
                     performed this &quot;fixup&quot; behavior in the file URL parsing code
                     rather than forcing this to be fixed in the caller of the URL
                     class where it belongs. Since backslash is an &quot;unwise&quot;
                     character that would normally be encoded if literally intended
                     as a non-seperator character the damage of veering away from the
                     specification is presumably limited.                    
                </comment>
            </method>
            <method name="openConnection" type="URLConnection" line="71">
                <params>
                    <param name="url" type="URL"/>
                </params>
            </method>
            <method name="openConnection" type="URLConnection" line="76">
                <params>
                    <param name="url" type="URL"/>
                    <param name="p" type="Proxy"/>
                </params>
                <comment line="92">
                    attempt to treat this as a UNC path. See 4180841                    
                </comment>
                <comment line="101">
                    Now attempt an ftp connection.                    
                </comment>
                <declaration name="path" type="String" line="78"/>
                <declaration name="file" type="String" line="79"/>
                <declaration name="host" type="String" line="80"/>
                <scope line="88"/>
                <declaration name="f" type="File" line="96"/>
                <scope line="97"/>
                <declaration name="uc" type="URLConnection" line="104"/>
                <declaration name="newurl" type="URL" line="105"/>
                <scope line="107">
                    <scope line="111"/>
                    <scope line="113"/>
                </scope>
                <scope line="116"/>
                <scope line="119"/>
            </method>
            <javadoc line="126">
                Template method to be overriden by Java Plug-in. [stanleyh]                
            </javadoc>
            <method name="createFileURLConnection" type="URLConnection" line="129">
                <params>
                    <param name="url" type="URL"/>
                    <param name="file" type="File"/>
                </params>
            </method>
            <javadoc line="133">
                Compares the host components of two URLs.                
                <param>
                    u1 the URL of the first host to compare                    
                </param>
                <param>
                    u2 the URL of the second host to compare                    
                </param>
                <return>
                    <tt>true</tt> if and only if they
                      are equal, <tt>false</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="hostsEqual" type="boolean" line="140">
                <params>
                    <param name="u1" type="URL"/>
                    <param name="u2" type="URL"/>
                </params>
                <comment line="141">
                    Special case for file: URLs
                     per RFC 1738 no hostname is equivalent to &apos;localhost&apos;
                     i.e. file:path is equal to file:localhostpath                    
                </comment>
                <declaration name="s1" type="String" line="146"/>
                <declaration name="s2" type="String" line="147"/>
            </method>
        </class>
    </source>