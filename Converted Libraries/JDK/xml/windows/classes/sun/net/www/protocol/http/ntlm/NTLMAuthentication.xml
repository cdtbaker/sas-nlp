<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www.protocol.http.ntlm">
        <import package="java.io.IOException"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.PasswordAuthentication"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.net.URL"/>
        <import package="sun.net.www.HeaderParser"/>
        <import package="sun.net.www.protocol.http.AuthenticationInfo"/>
        <import package="sun.net.www.protocol.http.AuthScheme"/>
        <import package="sun.net.www.protocol.http.HttpURLConnection"/>
        <class name="NTLMAuthentication" line="38">
            <extends class="AuthenticationInfo"/>
            <comment line="53">
                                
            </comment>
            <javadoc line="38">
                NTLMAuthentication:                
                <author>
                    Michael McMahon                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="46"/>
            <declaration name="NTLMAuthCallback" type="NTLMAuthenticationCallback" line="48"/>
            <declaration name="hostname" type="String" line="51"/>
            <declaration name="defaultDomain" type="String" line="52"/>
            <scope line="54"/>
            <method name="init0" type="void" line="60">
                <anonymous_class line="63">
                    <method name="run" type="String" line="64">
                        <declaration name="localhost" type="String" line="65"/>
                        <scope line="66"/>
                        <scope line="68"/>
                    </method>
                </anonymous_class>
                <declaration name="x" type="int" line="74"/>
                <scope line="75"/>
            </method>
            <declaration name="username" type="String" line="80"/>
            <declaration name="ntdomain" type="String" line="81"/>
            <declaration name="password" type="String" line="82"/>
            <javadoc line="84">
                Create a NTLMAuthentication:
                  Username may be specified as domain&lt;BACKSLASH&gt;username in the application Authenticator.
                  If this notation is not used, then the domain will be taken
                  from a system property: &quot;http.auth.ntlm.domain&quot;.                
            </javadoc>
            <method name="NTLMAuthentication" type="constructor" line="90">
                <params>
                    <param name="isProxy" type="boolean"/>
                    <param name="url" type="URL"/>
                    <param name="pw" type="PasswordAuthentication"/>
                </params>
            </method>
            <method name="init" type="void" line="98">
                <params>
                    <param name="pw" type="PasswordAuthentication"/>
                </params>
                <comment line="113">
                                        
                </comment>
                <scope line="100">
                    <declaration name="s" type="String" line="101"/>
                    <declaration name="i" type="int" line="102"/>
                    <scope line="103"/>
                    <scope line="106"/>
                </scope>
                <scope line="111"/>
            </method>
            <javadoc line="120">
                Constructor used for proxy entries                
            </javadoc>
            <method name="NTLMAuthentication" type="constructor" line="124">
                <params>
                    <param name="isProxy" type="boolean"/>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="pw" type="PasswordAuthentication"/>
                </params>
            </method>
            <javadoc line="133">
                @return true if this authentication supports preemptive authorization                
            </javadoc>
            <method name="supportsPreemptiveAuthorization" type="boolean" line="137"/>
            <javadoc line="141">
                @return true if NTLM supported transparently (no password needed, SSO)                
            </javadoc>
            <method name="supportsTransparentAuth" type="boolean" line="144"/>
            <javadoc line="148">
                Returns true if the given site is trusted, i.e. we can try
                  transparent Authentication.                
            </javadoc>
            <method name="isTrustedSite" type="boolean" line="152">
                <params>
                    <param name="url" type="URL"/>
                </params>
            </method>
            <javadoc line="156">
                Not supported. Must use the setHeaders() method                
            </javadoc>
            <method name="getHeaderValue" type="String" line="160">
                <params>
                    <param name="url" type="URL"/>
                    <param name="method" type="String"/>
                </params>
            </method>
            <javadoc line="164">
                Check if the header indicates that the current auth. parameters are stale.
                  If so, then replace the relevant field with the new value
                  and return true. Otherwise return false.
                  returning true means the request can be retried with the same userid/password
                  returning false means we have to go back to the user to ask for a new
                  username password.                
            </javadoc>
            <method name="isAuthorizationStale" type="boolean" line="173">
                <params>
                    <param name="header" type="String"/>
                </params>
                <comment line="175">
                                        
                </comment>
            </method>
            <javadoc line="177">
                Set header(s) on the given connection.                
                <param>
                    conn The connection to apply the header(s) to                    
                </param>
                <param>
                    p A source of header values for this connection, not used because
                      HeaderParser converts the fields to lower case, use raw instead                    
                </param>
                <param>
                    raw The raw header field.                    
                </param>
                <return>
                    true if all goes well, false if no headers were set.                    
                </return>
            </javadoc>
            <method name="setHeaders" type="boolean" line="186">
                <params>
                    <param name="conn" type="HttpURLConnection"/>
                    <param name="p" type="HeaderParser"/>
                    <param name="raw" type="String"/>
                </params>
                <scope line="188">
                    <declaration name="seq" type="NTLMAuthSequence" line="189"/>
                    <scope line="190"/>
                    <declaration name="response" type="String" line="194"/>
                </scope>
                <scope line="197"/>
            </method>
        </class>
    </source>