<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <import package="java.io"/>
        <import package="java.net"/>
        <import package="java.lang.Byte"/>
        <class name="SimpleServer" line="36">
            <comment line="47">
                This synchronization object protects access to certain
                 data (bytesRead,eventsToProcess) by concurrent Consumer threads.                
            </comment>
            <comment line="108">
                main ... just create invoke the SimpleServer constructor.                
            </comment>
            <comment line="116">
                Connection Handler inner class...one of these per client connection.                
            </comment>
            <javadoc line="36">
                Simple Java &quot;server&quot; using a single thread to handle each connection.                
            </javadoc>
            <declaration name="BYTESPEROP" type="int" line="42"/>
            <declaration name="PORTNUM" type="int" line="43"/>
            <declaration name="MAXCONN" type="int" line="44"/>
            <declaration name="eventSync" type="Object" line="50"/>
            <declaration name="instr" type="InputStream[]" line="52"/>
            <declaration name="bytesRead" type="int" line="53"/>
            <declaration name="bytesToRead" type="int" line="54"/>
            <method name="SimpleServer" type="constructor" line="56">
                <comment line="84">
                    Take connections, spawn off connection handling threads                    
                </comment>
                <comment line="102">
                    Tell the client it can now go away                    
                </comment>
                <declaration name="sockArr" type="Socket[]" line="57"/>
                <declaration name="timestart" type="long" line="58"/>
                <declaration name="bytes" type="int" line="59"/>
                <declaration name="totalConn" type="int" line="60"/>
                <scope line="64">
                    <declaration name="skMain" type="ServerSocket" line="66"/>
                    <declaration name="ctrlSock" type="Socket" line="69"/>
                    <declaration name="ctrlReader" type="BufferedReader" line="71"/>
                    <declaration name="ctrlString" type="String" line="73"/>
                    <declaration name="connHA" type="ConnHandler[]" line="86"/>
                    <declaration name="conn" type="int" line="87"/>
                    <scope line="88">
                        <declaration name="sock" type="Socket" line="89"/>
                    </scope>
                    <scope line="95"/>
                    <declaration name="buff" type="byte[]" line="102"/>
                </scope>
                <scope line="104"/>
            </method>
            <method name="main" type="void" line="111">
                <params>
                    <param name="args" type="String"/>
                </params>
                <declaration name="server" type="SimpleServer" line="112"/>
            </method>
            <class name="ConnHandler" line="118">
                <extends class="Thread"/>
                <declaration name="instr" type="InputStream" line="119"/>
                <method name="ConnHandler" type="constructor" line="120">
                    <params>
                        <param name="inputStr" type="InputStream"/>
                    </params>
                </method>
                <method name="run" type="void" line="122">
                    <comment line="134">
                        Any real server would do some synchronized and some
                         unsynchronized work on behalf of the client, and
                         most likely send some data back...but this is a
                         gross oversimplification.                        
                    </comment>
                    <scope line="123">
                        <declaration name="bytes" type="int" line="124"/>
                        <declaration name="buff" type="byte[]" line="125"/>
                        <scope line="127">
                            <scope line="129">
                                <scope line="130"/>
                            </scope>
                            <scope line="140"/>
                        </scope>
                    </scope>
                    <scope line="146"/>
                </method>
            </class>
        </class>
    </source>