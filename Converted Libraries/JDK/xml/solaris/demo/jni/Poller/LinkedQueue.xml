<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <class name="LinkedQueue" line="51">
            <javadoc line="51">
                A linked list based channel implementation,
                  adapted from the TwoLockQueue class from CPJ.
                  The algorithm avoids contention between puts
                  and takes when the queue is not empty.
                  Normally a put and a take can proceed simultaneously.
                  (Although it does not allow multiple concurrent puts or takes.)
                  This class tends to perform more efficently than
                  other Channel implementations in producer/consumer
                  applications.
                  &lt;p&gt;[&lt;a href=&quot;http://gee.cs.oswego.edu/dl/classes/EDU/oswego/cs/dl/util/concurrent/intro.html&quot;&gt; Introduction to this package. &lt;/a&gt;]                
            </javadoc>
            <declaration name="head_" type="LinkedNode" line="67"/>
            <javadoc line="67">
                Dummy header node of list. The first actual node, if it exists, is always
                  at head_.next. After each take, the old first node becomes the head.                
            </javadoc>
            <declaration name="count_" type="int" line="72"/>
            <declaration name="lastMonitor_" type="Object" line="73"/>
            <javadoc line="73">
                Helper monitor for managing access to last node, in case it is also first.
                  last_ and waitingForTake_ ONLY used with synch on appendMonitor_                
            </javadoc>
            <declaration name="last_" type="LinkedNode" line="79"/>
            <javadoc line="79">
                The last node of list. Put() appends to list, so modifies last_                
            </javadoc>
            <declaration name="waitingForTake_" type="int" line="84"/>
            <javadoc line="84">
                The number of threads waiting for a take.
                  Notifications are provided in put only if greater than zero.
                  The bookkeeping is worth it here since in reasonably balanced
                  usages, the notifications will hardly ever be necessary, so
                  the call overhead to notify can be eliminated.                
            </javadoc>
            <method name="LinkedQueue" type="constructor" line="93"/>
            <javadoc line="99">
                Main mechanics for put/offer                
            </javadoc>
            <method name="insert" type="void" line="100">
                <params>
                    <param name="x" type="Object"/>
                </params>
                <scope line="101">
                    <declaration name="p" type="LinkedNode" line="102"/>
                </scope>
            </method>
            <javadoc line="113">
                Main mechanics for take/poll                
            </javadoc>
            <method name="extract" type="Object" line="114">
                <declaration name="x" type="Object" line="115"/>
                <declaration name="first" type="LinkedNode" line="116"/>
                <scope line="117"/>
            </method>
            <method name="put" type="void" line="127">
                <params>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <method name="offer" type="boolean" line="133">
                <params>
                    <param name="x" type="Object"/>
                    <param name="msecs" type="long"/>
                </params>
            </method>
            <method name="take" type="Object" line="140">
                <comment line="143">
                    try to extract. If fail, then enter wait-based retry loop                    
                </comment>
                <declaration name="x" type="Object" line="143"/>
                <scope line="146">
                    <scope line="147">
                        <scope line="148">
                            <scope line="150">
                                <scope line="152"/>
                                <scope line="156"/>
                            </scope>
                        </scope>
                        <scope line="161"/>
                    </scope>
                </scope>
            </method>
            <method name="peek" type="Object" line="170">
                <declaration name="first" type="LinkedNode" line="171"/>
            </method>
            <method name="isEmpty" type="boolean" line="179"/>
            <method name="poll" type="Object" line="183">
                <params>
                    <param name="msecs" type="long"/>
                </params>
                <declaration name="x" type="Object" line="185"/>
                <scope line="188">
                    <scope line="189">
                        <scope line="190">
                            <declaration name="waitTime" type="long" line="191"/>
                            <declaration name="start" type="long" line="192"/>
                            <scope line="194">
                                <scope line="196"/>
                                <scope line="200"/>
                            </scope>
                        </scope>
                        <scope line="206"/>
                    </scope>
                </scope>
            </method>
            <class name="LinkedNode" line="215">
                <declaration name="value" type="Object" line="216"/>
                <declaration name="next" type="LinkedNode" line="217"/>
                <method name="LinkedNode" type="constructor" line="218">
                    <params>
                        <param name="x" type="Object"/>
                    </params>
                </method>
                <method name="LinkedNode" type="constructor" line="219">
                    <params>
                        <param name="x" type="Object"/>
                        <param name="n" type="LinkedNode"/>
                    </params>
                </method>
            </class>
        </class>
    </source>