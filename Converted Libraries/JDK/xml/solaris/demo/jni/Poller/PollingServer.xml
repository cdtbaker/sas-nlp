<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <import package="java.io"/>
        <import package="java.net"/>
        <import package="java.lang.Byte"/>
        <class name="PollingServer" line="4">
            <javadoc line="4">
                Simple Java &quot;server&quot; using the Poller class
                  to multiplex on incoming connections.  Note
                  that handoff of events, via linked Q is not
                  actually be a performance booster here, since
                  the processing of events is cheaper than
                  the overhead in scheduling/executing them.
                  Although this demo does allow for concurrency
                  in handling connections, it uses a rather
                  primitive &quot;gang scheduling&quot; policy to keep
                  the code simpler.                
            </javadoc>
            <declaration name="MAXCONN" type="int" line="17"/>
            <declaration name="PORTNUM" type="int" line="18"/>
            <declaration name="BYTESPEROP" type="int" line="19"/>
            <declaration name="eventSync" type="Object" line="20"/>
            <javadoc line="20">
                This synchronization object protects access to certain
                  data (bytesRead,eventsToProcess) by concurrent Consumer threads.                
            </javadoc>
            <declaration name="instr" type="InputStream[]" line="25"/>
            <declaration name="mapping" type="int[]" line="26"/>
            <declaration name="linkedQ" type="LinkedQueue" line="27"/>
            <declaration name="bytesRead" type="int" line="28"/>
            <declaration name="bytesToRead" type="int" line="29"/>
            <declaration name="eventsToProcess" type="int" line="30"/>
            <method name="PollingServer" type="constructor" line="31">
                <params>
                    <param name="concurrency" type="int"/>
                </params>
                <declaration name="sockArr" type="Socket[]" line="32"/>
                <declaration name="timestart" type="long" line="33"/>
                <declaration name="revents" type="short[]" line="34"/>
                <declaration name="fds" type="int[]" line="35"/>
                <declaration name="bytes" type="int" line="36"/>
                <declaration name="Mux" type="Poller" line="37"/>
                <declaration name="serverFd" type="int" line="38"/>
                <declaration name="totalConn" type="int" line="39"/>
                <declaration name="connects" type="int" line="40"/>
                <scope line="42">
                    <declaration name="skMain" type="ServerSocket" line="43"/>
                    <declaration name="ctrlSock" type="Socket" line="46"/>
                    <declaration name="ctrlReader" type="BufferedReader" line="47"/>
                    <declaration name="ctrlString" type="String" line="48"/>
                    <scope line="54"/>
                    <declaration name="numEvents" type="int" line="57"/>
                    <scope line="58">
                        <declaration name="loopWaits" type="int" line="59"/>
                        <scope line="60">
                            <scope line="61">
                                <scope line="64"/>
                                <scope line="67"/>
                            </scope>
                        </scope>
                        <scope line="76"/>
                        <declaration name="cnt" type="int" line="79"/>
                        <scope line="80">
                            <declaration name="fd" type="int" line="81"/>
                            <scope line="82">
                                <scope line="83">
                                    <declaration name="fdval" type="int" line="86"/>
                                    <scope line="88"/>
                                </scope>
                                <scope line="93"/>
                            </scope>
                            <scope line="97"/>
                        </scope>
                    </scope>
                    <declaration name="buff" type="byte[]" line="105"/>
                    <scope line="107"/>
                </scope>
                <scope line="111"/>
            </method>
            <method name="main" type="void" line="115">
                <params>
                    <param name="args" type="String"/>
                </params>
                <declaration name="concurrency" type="int" line="116"/>
                <declaration name="server" type="PollingServer" line="119"/>
            </method>
            <class name="Consumer" line="121">
                <extends class="Thread"/>
                <declaration name="threadNumber" type="int" line="122"/>
                <method name="Consumer" type="constructor" line="123">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="run" type="void" line="126">
                    <declaration name="buff" type="byte[]" line="127"/>
                    <declaration name="bytes" type="int" line="128"/>
                    <declaration name="instream" type="InputStream" line="129"/>
                    <scope line="130">
                        <scope line="131">
                            <declaration name="Fd" type="Integer" line="132"/>
                            <declaration name="fd" type="int" line="133"/>
                            <declaration name="map" type="int" line="135"/>
                        </scope>
                        <scope line="139"/>
                        <scope line="142">
                            <scope line="143">
                                <scope line="146"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>