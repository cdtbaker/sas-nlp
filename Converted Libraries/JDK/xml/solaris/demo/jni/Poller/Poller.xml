<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <import package="java.lang.reflect"/>
        <import package="java.io"/>
        <import package="java.net"/>
        <class name="Poller" line="36">
            <comment line="72">
                This global synchronization object must be used for all
                 creation or destruction of Poller objects.                
            </comment>
            <comment line="78">
                The handle for a Poller Object...is used in the JNI C code
                 where all the associated data is kept.                
            </comment>
            <comment line="271">
                Utility - get (int) fd from FileDescriptor or [Server]Socket objects.                
            </comment>
            <comment line="303">
                Actual NATIVE calls                
            </comment>
            <javadoc line="36">
                This class is provided for access to the underlying poll(2)
                  or /dev/poll kernel interfaces.  This may be needed for
                  multiplexing IO when an application cannot afford to have
                  a thread block on each outstanding IO request.
                  It currently supports the same basic functionality as the
                  C poll(2) API, although for efficiency we needed to avoid
                  passing the entire pollfd array for every call.  See man
                  pages for poll(2) for info on C API and event types.                
                <author>
                    Bruce Chapman                    
                </author>
                <see>
                    java.io.FileDescriptor                    
                </see>
                <see>
                    java.net.Socket                    
                </see>
                <see>
                    attached README.txt                    
                </see>
                <since>
                    JDK1.2                    
                </since>
            </javadoc>
            <declaration name="POLLERR" type="short" line="56"/>
            <javadoc line="56">
                Solaris POLL event types.                
            </javadoc>
            <declaration name="POLLHUP" type="short" line="60"/>
            <declaration name="POLLNVAL" type="short" line="61"/>
            <declaration name="POLLIN" type="short" line="62"/>
            <declaration name="POLLPRI" type="short" line="63"/>
            <declaration name="POLLOUT" type="short" line="64"/>
            <declaration name="POLLRDNORM" type="short" line="65"/>
            <declaration name="POLLWRNORM" type="short" line="66"/>
            <declaration name="POLLRDBAND" type="short" line="67"/>
            <declaration name="POLLWRBAND" type="short" line="68"/>
            <declaration name="POLLNORM" type="short" line="69"/>
            <declaration name="globalSync" type="Object" line="75"/>
            <declaration name="handle" type="int" line="81"/>
            <javadoc line="83">
                Constructs an instance of a &lt;code&gt;Poller&lt;/code&gt; object.
                  Native code uses sysconf(_SC_OPEN_MAX) to determine how
                  many fd/skt objects this Poller object can contain.                
            </javadoc>
            <method name="Poller" type="constructor" line="88">
                <scope line="89"/>
            </method>
            <javadoc line="94">
                Constructs an instance of a &lt;code&gt;Poller&lt;/code&gt; object.                
                <param>
                    maxFd the maximum number of FileDescriptors/Sockets
                      this Poller object can contain.                    
                </param>
            </javadoc>
            <method name="Poller" type="constructor" line="99">
                <params>
                    <param name="maxFd" type="int"/>
                </params>
                <scope line="100"/>
            </method>
            <javadoc line="105">
                Needed to clean up at the JNI C level when object is GCd.                
            </javadoc>
            <method name="finalize" type="void" line="108">
                <scope line="109"/>
            </method>
            <javadoc line="115">
                Since we can&apos;t guarantee WHEN finalize is called, we may
                  recycle on our own.                
                <param>
                    maxFd the maximum number of FileDescriptors/Sockets
                      this Poller object can contain.                    
                </param>
            </javadoc>
            <method name="reset" type="void" line="121">
                <params>
                    <param name="maxFd" type="int"/>
                </params>
                <scope line="122"/>
            </method>
            <javadoc line="127">
                Since we can&apos;t guarantee WHEN finalize is called, we may
                  recycle on our own.                
            </javadoc>
            <method name="reset" type="void" line="131">
                <scope line="132"/>
            </method>
            <javadoc line="138">
                Add FileDescriptor to the set handled by this Poller object.                
                <param>
                    fdObj the FileDescriptor, Socket, or ServerSocket to add.                    
                </param>
                <param>
                    event the bitmask of events we are interested in.                    
                </param>
                <return>
                    the OS level fd associated with this IO Object
                      (which is what waitMultiple() stores in fds[])                    
                </return>
            </javadoc>
            <method name="add" type="int" line="146">
                <params>
                    <param name="fdObj" type="Object"/>
                    <param name="event" type="short"/>
                </params>
            </method>
            <javadoc line="150">
                Remove FileDescriptor from the set handled by this Poller object.
                  Must be called before the fd/skt is closed.                
                <param>
                    fdObj the FileDescriptor, Socket, or ServerSocket to remove.                    
                </param>
                <return>
                    true if removal succeeded.                    
                </return>
            </javadoc>
            <method name="remove" type="boolean" line="157">
                <params>
                    <param name="fdObj" type="Object"/>
                </params>
            </method>
            <javadoc line="160">
                Check if fd or socket is already in the set handled by this Poller object                
                <param>
                    fdObj the FileDescriptor or [Server]Socket to check.                    
                </param>
                <return>
                    true if fd/skt is in the set for this Poller object.                    
                </return>
            </javadoc>
            <method name="isMember" type="boolean" line="166">
                <params>
                    <param name="fdObj" type="Object"/>
                </params>
            </method>
            <javadoc line="169">
                Wait on Multiple IO Objects.                
                <param>
                    maxRet    the maximum number of fds[] and revents[] to return.                    
                </param>
                <param>
                    fds[]     (return) an array of ints in which to store fds with
                      available data upon a successful non-timeout return.
                      fds.length must be &gt;= maxRet                    
                </param>
                <param>
                    revents[] (return) the actual events available on the
                      same-indexed fds[] (i.e. fds[0] has events revents[0])
                      revents.length must be &gt;= maxRet
                      Note : both above arrays are &quot;dense,&quot; i.e. only fds[] with events
                      available are returned.                    
                </param>
                <param>
                    timeout   the maximum number of milliseconds to wait for
                      events before timing out.                    
                </param>
                <return>
                    the number of fds with triggered events.
                      Note : convenience methods exist for skipping the timeout parameter
                      or the maxRet parameter (in the case of no maxRet, fds.length
                      must equal revents.length)
                      obj.waitMultiple(null,null,timeout) can be used for pausing the LWP
                      (much more reliable and scalable than Thread.sleep() or Object.wait())                    
                </return>
            </javadoc>
            <method name="waitMultiple" type="int" line="196">
                <params>
                    <param name="maxRet" type="int"/>
                    <param name="fds" type="int[]"/>
                    <param name="revents" type="short[]"/>
                    <param name="timeout" type="long"/>
                </params>
                <scope line="197">
                    <scope line="198"/>
                </scope>
                <scope line="202"/>
                <declaration name="ret" type="int" line="206"/>
                <scope line="207"/>
            </method>
            <javadoc line="213">
                Wait on Multiple IO Objects (no timeout).
                  A convenience method for waiting indefinitely on IO events                
                <see>
                    Poller#waitMultiple                    
                </see>
            </javadoc>
            <method name="waitMultiple" type="int" line="222">
                <params>
                    <param name="maxRet" type="int"/>
                    <param name="fds" type="int[]"/>
                    <param name="revents" type="short[]"/>
                </params>
                <comment line="224">
                    already synchronized                    
                </comment>
            </method>
            <javadoc line="226">
                Wait on Multiple IO Objects (no maxRet).
                  A convenience method for waiting on IO events when the fds
                  and revents arrays are the same length and that specifies the
                  maximum number of return events.                
                <see>
                    Poller#waitMultiple                    
                </see>
            </javadoc>
            <method name="waitMultiple" type="int" line="237">
                <params>
                    <param name="fds" type="int[]"/>
                    <param name="revents" type="short[]"/>
                    <param name="timeout" type="long"/>
                </params>
                <scope line="238"/>
                <scope line="240"/>
                <scope line="242"/>
            </method>
            <javadoc line="249">
                Wait on Multiple IO Objects (no maxRet/timeout).
                  A convenience method for waiting on IO events when the fds
                  and revents arrays are the same length and that specifies the
                  maximum number of return events, and when waiting indefinitely
                  for IO events to occur.                
                <see>
                    Poller#waitMultiple                    
                </see>
            </javadoc>
            <method name="waitMultiple" type="int" line="261">
                <params>
                    <param name="fds" type="int[]"/>
                    <param name="revents" type="short[]"/>
                </params>
                <comment line="266">
                    already sync                    
                </comment>
                <scope line="262"/>
                <scope line="264"/>
            </method>
            <method name="findfd" type="int" line="272">
                <params>
                    <param name="fdObj" type="Object"/>
                </params>
                <declaration name="cl" type="Class" line="273"/>
                <declaration name="f" type="Field" line="274"/>
                <declaration name="val" type="Object" line="275"/>
                <scope line="278"/>
                <scope line="291"/>
                <scope line="297"/>
            </method>
            <method name="nativeInit" type="int" line="304"/>
            <method name="nativeCreatePoller" type="int" line="305"/>
            <method name="nativeDestroyPoller" type="void" line="306"/>
            <method name="nativeAddFd" type="int" line="307"/>
            <method name="nativeRemoveFd" type="int" line="309"/>
            <method name="nativeRemoveIndex" type="int" line="310"/>
            <method name="nativeIsMember" type="int" line="312"/>
            <method name="nativeWait" type="int" line="313"/>
            <method name="getNumCPUs" type="int" line="316"/>
            <javadoc line="316">
                Get number of active CPUs in this machine
                  to determine proper level of concurrency.                
            </javadoc>
            <scope line="322"/>
        </class>
    </source>