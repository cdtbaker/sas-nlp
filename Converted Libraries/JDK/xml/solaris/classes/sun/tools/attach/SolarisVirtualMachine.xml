<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.attach">
        <import package="com.sun.tools.attach.VirtualMachine"/>
        <import package="com.sun.tools.attach.AgentLoadException"/>
        <import package="com.sun.tools.attach.AttachNotSupportedException"/>
        <import package="com.sun.tools.attach.spi.AttachProvider"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.File"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.util.Properties"/>
        <class name="SolarisVirtualMachine" line="40">
            <extends class="HotSpotVirtualMachine"/>
            <comment line="42">
                Use /tmp instead of /var/tmp on Solaris as /tmp is the default used by
                 HotSpot when the property is not set on the command line.                
            </comment>
            <comment line="48">
                door descriptor;                
            </comment>
            <comment line="162">
                InputStream over a socket                
            </comment>
            <comment line="195">
                The door is attached to .java_pid&lt;pid&gt; in the target VM&apos;s working
                 directory or temporary directory.                
            </comment>
            <comment line="220">
                On Solaris/Linux a simple handshake is used to start the attach mechanism
                 if not already started. The client creates a .attach_pid&lt;pid&gt; file in the
                 target VM&apos;s working directory (or temporary directory), and the SIGQUIT
                 handler checks for the file.                
            </comment>
            <comment line="237">
                -- native methods                
            </comment>
            <comment line="249">
                enqueue a command (and arguments) to the given door                
            </comment>
            <declaration name="tmpdir1" type="String" line="43"/>
            <declaration name="tmpdir" type="String" line="44"/>
            <declaration name="fd" type="int" line="48"/>
            <javadoc line="50">
                Attaches to the target VM                
            </javadoc>
            <method name="SolarisVirtualMachine" type="constructor" line="55">
                <params>
                    <param name="provider" type="AttachProvider"/>
                    <param name="vmid" type="String"/>
                </params>
                <comment line="58">
                    This provider only understands process-ids (pids).                    
                </comment>
                <comment line="66">
                    Opens the door file to the target VM. If the file is not
                     found it might mean that the attach mechanism isn&apos;t started in the
                     target VM so we attempt to start it and retry.                    
                </comment>
                <comment line="74">
                    kill -QUIT will tickle target VM to check for the
                     attach file.                    
                </comment>
                <comment line="78">
                    give the target VM time to start the attach mechanism                    
                </comment>
            </method>
            <javadoc line="102">
                Detach from the target VM                
            </javadoc>
            <method name="detach" type="void" line="105">
                <scope line="106">
                    <scope line="107"/>
                </scope>
            </method>
            <javadoc line="114">
                Execute the given command in the target VM.                
            </javadoc>
            <method name="execute" type="InputStream" line="117">
                <params>
                    <param name="cmd" type="String"/>
                    <param name="args" type="Object"/>
                </params>
                <comment line="119">
                    includes null                    
                </comment>
                <comment line="121">
                    first check that we are still attached                    
                </comment>
                <comment line="130">
                    enqueue the command via a door call                    
                </comment>
                <comment line="132">
                    valid file descriptor                    
                </comment>
                <comment line="134">
                    The door call returns a file descriptor (one end of a socket pair).
                     Create an input stream around it.                    
                </comment>
                <comment line="138">
                    Read the command completion status                    
                </comment>
                <comment line="147">
                    If non-0 it means an error but we need to special-case the
                     &quot;load&quot; command to ensure that the right exception is thrown.                    
                </comment>
                <comment line="158">
                    Return the input stream so that the command output can be read                    
                </comment>
            </method>
            <class name="SocketInputStream" line="162">
                <extends class="InputStream"/>
                <declaration name="s" type="int" line="163"/>
                <method name="SocketInputStream" type="constructor" line="165">
                    <params>
                        <param name="s" type="int"/>
                    </params>
                </method>
                <method name="read" type="int" line="169">
                    <declaration name="b" type="byte" line="170"/>
                    <declaration name="n" type="int" line="171"/>
                    <scope line="172"/>
                    <scope line="174"/>
                </method>
                <method name="read" type="int" line="179">
                    <params>
                        <param name="bs" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="181"/>
                </method>
                <method name="close" type="void" line="189"/>
            </class>
            <method name="openDoor" type="int" line="196">
                <params>
                    <param name="pid" type="int"/>
                </params>
                <comment line="198">
                    First check for a .java_pid&lt;pid&gt; file in the working directory
                     of the target process                    
                </comment>
                <comment line="209">
                    Check that the file owner/permission to avoid attaching to
                     bogus process                    
                </comment>
                <declaration name="fn" type="String" line="199"/>
                <declaration name="path" type="String" line="200"/>
                <scope line="201"/>
                <scope line="203"/>
                <scope line="210"/>
                <scope line="212"/>
            </method>
            <method name="createAttachFile" type="File" line="223">
                <params>
                    <param name="pid" type="int"/>
                </params>
                <declaration name="fn" type="String" line="224"/>
                <declaration name="path" type="String" line="225"/>
                <declaration name="f" type="File" line="226"/>
                <scope line="227"/>
                <scope line="229"/>
            </method>
            <method name="open" type="int" line="238"/>
            <method name="close" type="void" line="240"/>
            <method name="read" type="int" line="242"/>
            <method name="checkPermissions" type="void" line="244"/>
            <method name="sigquit" type="void" line="246"/>
            <method name="enqueue" type="int" line="249"/>
            <scope line="252"/>
        </class>
    </source>