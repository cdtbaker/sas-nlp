<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.xr">
        <import package="java.awt"/>
        <import package="java.awt.geom"/>
        <import package="java.awt.image"/>
        <import package="sun.awt"/>
        <import package="sun.java2d.InvalidPipeException"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.SurfaceDataProxy"/>
        <import package="sun.java2d.jules"/>
        <import package="sun.java2d.loops"/>
        <import package="sun.java2d.pipe"/>
        <import package="sun.java2d.x11"/>
        <import package="sun.font.FontManagerNativeLibrary"/>
        <class name="XRSurfaceData" line="15">
            <extends class="XSurfaceData"/>
            <declaration name="peer" type="X11ComponentPeer" line="16"/>
            <declaration name="graphicsConfig" type="XRGraphicsConfig" line="17"/>
            <declaration name="renderQueue" type="XRBackend" line="18"/>
            <declaration name="solidloops" type="RenderLoops" line="19"/>
            <declaration name="depth" type="int" line="20"/>
            <method name="initIDs" type="void" line="21"/>
            <method name="XRInitSurface" type="void" line="22"/>
            <method name="initXRPicture" type="void" line="23"/>
            <method name="freeXSDOPicture" type="void" line="24"/>
            <declaration name="DESC_BYTE_A8_X11" type="String" line="25"/>
            <declaration name="DESC_INT_RGB_X11" type="String" line="26"/>
            <declaration name="DESC_INT_ARGB_X11" type="String" line="27"/>
            <declaration name="ByteA8X11" type="SurfaceType" line="28"/>
            <declaration name="IntRgbX11" type="SurfaceType" line="29"/>
            <declaration name="IntArgbPreX11" type="SurfaceType" line="30"/>
            <method name="getRaster" type="Raster" line="31">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <declaration name="xrpipe" type="XRRenderer" line="34"/>
            <declaration name="xrtxpipe" type="PixelToShapeConverter" line="35"/>
            <declaration name="xrtextpipe" type="TextPipe" line="36"/>
            <declaration name="xrDrawImage" type="XRDrawImage" line="37"/>
            <declaration name="aaShapePipe" type="ShapeDrawPipe" line="38"/>
            <declaration name="aaPixelToShapeConv" type="PixelToShapeConverter" line="39"/>
            <method name="initXRSurfaceData" type="void" line="40">
                <scope line="41"/>
            </method>
            <javadoc line="50">
                Synchronized accessor method for isDrawableValid.                
            </javadoc>
            <method name="isXRDrawableValid" type="boolean" line="53">
                <scope line="54"/>
                <scope line="58"/>
            </method>
            <method name="makeProxyFor" type="SurfaceDataProxy" line="62">
                <params>
                    <param name="srcData" type="SurfaceData"/>
                </params>
            </method>
            <method name="validatePipe" type="void" line="65">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                </params>
                <declaration name="textpipe" type="TextPipe" line="66"/>
                <declaration name="validated" type="boolean" line="67"/>
                <scope line="68"/>
                <scope line="71"/>
                <declaration name="txPipe" type="PixelToShapeConverter" line="76"/>
                <declaration name="nonTxPipe" type="XRRenderer" line="77"/>
                <scope line="78">
                    <scope line="79">
                        <scope line="80"/>
                    </scope>
                    <scope line="85">
                        <scope line="86"/>
                    </scope>
                </scope>
                <scope line="92"/>
                <scope line="97">
                    <scope line="98">
                        <scope line="99"/>
                        <scope line="103"/>
                        <scope line="107"/>
                    </scope>
                    <scope line="113">
                        <scope line="114"/>
                    </scope>
                </scope>
            </method>
            <method name="getMaskFill" type="MaskFill" line="122">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                </params>
                <scope line="123"/>
            </method>
            <method name="getRenderLoops" type="RenderLoops" line="128">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                </params>
                <scope line="129"/>
            </method>
            <method name="getDeviceConfiguration" type="GraphicsConfiguration" line="134"/>
            <javadoc line="137">
                Method for instantiating a Window SurfaceData                
            </javadoc>
            <method name="createData" type="XRWindowSurfaceData" line="140">
                <params>
                    <param name="peer" type="X11ComponentPeer"/>
                </params>
                <declaration name="gc" type="XRGraphicsConfig" line="141"/>
            </method>
            <javadoc line="144">
                Method for instantiating a Pixmap SurfaceData (offscreen).
                  If the surface  is opaque a 24-bit/RGB surface is chosen,
                  otherwise a 32-bit ARGB surface.                
            </javadoc>
            <method name="createData" type="XRPixmapSurfaceData" line="149">
                <params>
                    <param name="gc" type="XRGraphicsConfig"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="cm" type="ColorModel"/>
                    <param name="image" type="Image"/>
                    <param name="drawable" type="long"/>
                    <param name="transparency" type="int"/>
                </params>
                <declaration name="depth" type="int" line="150"/>
                <scope line="151"/>
                <scope line="154"/>
            </method>
            <method name="XRSurfaceData" type="constructor" line="159">
                <params>
                    <param name="peer" type="X11ComponentPeer"/>
                    <param name="gc" type="XRGraphicsConfig"/>
                    <param name="sType" type="SurfaceType"/>
                    <param name="cm" type="ColorModel"/>
                    <param name="depth" type="int"/>
                    <param name="transparency" type="int"/>
                </params>
            </method>
            <method name="XRSurfaceData" type="constructor" line="168">
                <params>
                    <param name="renderQueue" type="XRBackend"/>
                </params>
            </method>
            <javadoc line="172">
                Inits the XRender-data-structures which belong to the XRSurfaceData.                
                <param>
                    pictureFormat                    
                </param>
            </javadoc>
            <method name="initXRender" type="void" line="176">
                <params>
                    <param name="pictureFormat" type="int"/>
                </params>
                <scope line="177"/>
                <scope line="183"/>
                <scope line="186"/>
            </method>
            <method name="getGC" type="XRGraphicsConfig" line="190">
                <params>
                    <param name="peer" type="X11ComponentPeer"/>
                </params>
                <scope line="191"/>
                <scope line="194">
                    <declaration name="env" type="GraphicsEnvironment" line="195"/>
                    <declaration name="gd" type="GraphicsDevice" line="196"/>
                </scope>
            </method>
            <method name="canSourceSendExposures" type="boolean" line="200"/>
            <javadoc line="200">
                Returns a boolean indicating whether or not a copyArea from the given
                  rectangle source coordinates might be incomplete and result in X11
                  GraphicsExposure events being generated from XCopyArea. This method
                  allows the SurfaceData copyArea method to determine if it needs to set
                  the GraphicsExposures attribute of the X11 GC to True or False to receive
                  or avoid the events.                
                <return>
                    true if there is any chance that an XCopyArea from the given
                      source coordinates could produce any X11 Exposure events.                    
                </return>
            </javadoc>
            <javadoc line="211">
                CopyArea is implemented using the &quot;old&quot; X11 GC, therefor clip and
                  needExposures have to be validated against that GC. Pictures and GCs
                  don&apos;t share state.                
            </javadoc>
            <method name="validateCopyAreaGC" type="void" line="216">
                <params>
                    <param name="gcClip" type="Region"/>
                    <param name="needExposures" type="boolean"/>
                </params>
                <scope line="217"/>
                <scope line="221"/>
                <scope line="225"/>
            </method>
            <method name="copyArea" type="boolean" line="231">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                </params>
                <scope line="232">
                    <scope line="233"/>
                </scope>
                <declaration name="comptype" type="CompositeType" line="238"/>
                <scope line="239">
                    <scope line="242">
                        <declaration name="needExposures" type="boolean" line="244"/>
                    </scope>
                    <scope line="248"/>
                </scope>
            </method>
            <javadoc line="255">
                Returns the XRender SurfaceType which is able to fullfill the specified
                  transparency requirement.                
            </javadoc>
            <method name="getSurfaceType" type="SurfaceType" line="259">
                <params>
                    <param name="gc" type="XRGraphicsConfig"/>
                    <param name="transparency" type="int"/>
                </params>
                <declaration name="sType" type="SurfaceType" line="260"/>
            </method>
            <method name="invalidate" type="void" line="272">
                <scope line="273"/>
            </method>
            <declaration name="xgc" type="long" line="278"/>
            <declaration name="validatedGCForegroundPixel" type="int" line="279"/>
            <declaration name="validatedXorComp" type="XORComposite" line="280"/>
            <declaration name="xid" type="int" line="281"/>
            <declaration name="picture" type="int" line="282"/>
            <declaration name="maskBuffer" type="XRCompositeManager" line="283"/>
            <declaration name="validatedClip" type="Region" line="284"/>
            <declaration name="validatedGCClip" type="Region" line="285"/>
            <declaration name="validatedExposures" type="boolean" line="286"/>
            <declaration name="transformInUse" type="boolean" line="287"/>
            <declaration name="validatedSourceTransform" type="AffineTransform" line="288"/>
            <declaration name="validatedRepeat" type="int" line="289"/>
            <declaration name="validatedFilter" type="int" line="290"/>
            <javadoc line="291">
                Validates an XRSurfaceData when used as source. Note that the clip is
                  applied when used as source as well as destination.                
            </javadoc>
            <method name="validateAsSource" type="void" line="295">
                <params>
                    <param name="sxForm" type="AffineTransform"/>
                    <param name="repeat" type="int"/>
                    <param name="filter" type="int"/>
                </params>
                <scope line="296"/>
                <scope line="300"/>
                <scope line="304">
                    <scope line="305"/>
                </scope>
                <scope line="311"/>
                <scope line="316"/>
            </method>
            <javadoc line="321">
                Validates the Surface when used as destination.                
            </javadoc>
            <method name="validateAsDestination" type="void" line="324">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="clip" type="Region"/>
                </params>
                <scope line="325"/>
                <declaration name="updateGCClip" type="boolean" line="328"/>
                <scope line="329"/>
                <scope line="334">
                    <scope line="335">
                        <declaration name="xorpixelmod" type="int" line="337"/>
                        <declaration name="pixel" type="int" line="339"/>
                        <scope line="340"/>
                    </scope>
                    <scope line="345"/>
                </scope>
            </method>
            <method name="makePipes" type="void" line="350">
                <scope line="351">
                    <scope line="352">
                        <scope line="359"/>
                    </scope>
                    <scope line="364"/>
                </scope>
            </method>
            <class name="XRWindowSurfaceData" line="369">
                <extends class="XRSurfaceData"/>
                <method name="XRWindowSurfaceData" type="constructor" line="370">
                    <params>
                        <param name="peer" type="X11ComponentPeer"/>
                        <param name="gc" type="XRGraphicsConfig"/>
                        <param name="sType" type="SurfaceType"/>
                    </params>
                    <scope line="372"/>
                </method>
                <method name="getReplacement" type="SurfaceData" line="377"/>
                <method name="getBounds" type="Rectangle" line="380">
                    <declaration name="r" type="Rectangle" line="381"/>
                </method>
                <method name="canSourceSendExposures" type="boolean" line="385">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                </method>
                <javadoc line="388">
                    Returns destination Component associated with this SurfaceData.                    
                </javadoc>
                <method name="getDestination" type="Object" line="391"/>
                <method name="invalidate" type="void" line="394">
                    <scope line="395"/>
                    <scope line="399"/>
                </method>
            </class>
            <class name="XRInternalSurfaceData" line="405">
                <extends class="XRSurfaceData"/>
                <method name="XRInternalSurfaceData" type="constructor" line="406">
                    <params>
                        <param name="renderQueue" type="XRBackend"/>
                        <param name="pictXid" type="int"/>
                        <param name="transform" type="AffineTransform"/>
                    </params>
                    <scope line="410"/>
                </method>
                <method name="canSourceSendExposures" type="boolean" line="414">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                </method>
                <method name="getBounds" type="Rectangle" line="417"/>
                <method name="getDestination" type="Object" line="420"/>
                <method name="getReplacement" type="SurfaceData" line="423"/>
            </class>
            <class name="XRPixmapSurfaceData" line="427">
                <extends class="XRSurfaceData"/>
                <declaration name="offscreenImage" type="Image" line="428"/>
                <declaration name="width" type="int" line="429"/>
                <declaration name="height" type="int" line="430"/>
                <declaration name="transparency" type="int" line="431"/>
                <method name="XRPixmapSurfaceData" type="constructor" line="432">
                    <params>
                        <param name="gc" type="XRGraphicsConfig"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                        <param name="image" type="Image"/>
                        <param name="sType" type="SurfaceType"/>
                        <param name="cm" type="ColorModel"/>
                        <param name="drawable" type="long"/>
                        <param name="transparency" type="int"/>
                        <param name="pictFormat" type="int"/>
                        <param name="depth" type="int"/>
                    </params>
                </method>
                <method name="initSurface" type="void" line="442">
                    <params>
                        <param name="depth" type="int"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                        <param name="drawable" type="long"/>
                        <param name="pictFormat" type="int"/>
                    </params>
                    <scope line="443"/>
                    <scope line="447"/>
                </method>
                <method name="getReplacement" type="SurfaceData" line="451"/>
                <javadoc line="454">
                    Need this since the surface data is created with the color model of
                      the target GC, which is always opaque. But in SunGraphics2D.blitSD we
                      choose loops based on the transparency on the source SD, so it could
                      choose wrong loop (blit instead of blitbg, for example).                    
                </javadoc>
                <method name="getTransparency" type="int" line="460"/>
                <method name="getBounds" type="Rectangle" line="463"/>
                <method name="canSourceSendExposures" type="boolean" line="466">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                </method>
                <method name="flush" type="void" line="469"/>
                <javadoc line="473">
                    Returns destination Image associated with this SurfaceData.                    
                </javadoc>
                <method name="getDestination" type="Object" line="476"/>
            </class>
            <method name="getGC" type="long" line="480"/>
            <class name="LazyPipe" line="483">
                <extends class="ValidatePipe"/>
                <method name="validate" type="boolean" line="484">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                    </params>
                    <declaration name="xsd" type="XRSurfaceData" line="485"/>
                    <scope line="486"/>
                </method>
            </class>
            <method name="getPicture" type="int" line="493"/>
            <method name="getXid" type="int" line="496"/>
            <method name="getGraphicsConfig" type="XRGraphicsConfig" line="499"/>
        </class>
    </source>