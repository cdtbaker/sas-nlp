<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.xr">
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.image"/>
        <import package="sun.java2d.loops"/>
        <import package="sun.java2d.pipe"/>
        <import package="sun.java2d"/>
        <import package="java.awt"/>
        <import package="java.awt.geom"/>
        <import package="java.lang.ref"/>
        <class name="XRPMBlitLoops" line="37">
            <comment line="182">
                TODO: This breaks scales with non-integer coordinates!?!?!                
            </comment>
            <comment line="234">
                Calculates the composite-rectangle required for transformed blits. This
                 method is functionally equal to: Shape shp =
                 xform.createTransformedShape(rect); Rectangle bounds = shp.getBounds();
                 but performs significantly better.                
            </comment>
            <comment line="313">
                                
            </comment>
            <declaration name="argbTmpPM" type="WeakReference&lt;SunVolatileImage&gt;" line="39"/>
            <declaration name="rgbTmpPM" type="WeakReference&lt;SunVolatileImage&gt;" line="40"/>
            <method name="XRPMBlitLoops" type="constructor" line="42"/>
            <method name="register" type="void" line="45">
                <comment line="62">
                                        
                </comment>
                <comment line="79">
                                        
                </comment>
                <comment line="96">
                                        
                </comment>
                <declaration name="primitives" type="GraphicsPrimitive[]" line="46"/>
            </method>
            <javadoc line="114">
                Caches a SW surface using a temporary pixmap. The pixmap is held by a WeakReference,
                  allowing it to shrink again after some time.                
            </javadoc>
            <method name="cacheToTmpSurface" type="XRSurfaceData" line="118">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="XRSurfaceData"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="sx" type="int"/>
                    <param name="sy" type="int"/>
                </params>
                <declaration name="vImg" type="SunVolatileImage" line="119"/>
                <declaration name="vImgSurfaceType" type="SurfaceType" line="120"/>
                <scope line="122"/>
                <scope line="125"/>
                <scope line="130">
                    <scope line="131"/>
                    <scope line="137"/>
                    <scope line="139"/>
                </scope>
                <declaration name="swToSurfaceBlit" type="Blit" line="144"/>
                <declaration name="vImgSurface" type="XRSurfaceData" line="145"/>
            </method>
        </class>
        <class name="XRPMBlit" line="153">
            <extends class="Blit"/>
            <comment line="182">
                TODO: This breaks scales with non-integer coordinates!?!?!                
            </comment>
            <comment line="234">
                Calculates the composite-rectangle required for transformed blits. This
                 method is functionally equal to: Shape shp =
                 xform.createTransformedShape(rect); Rectangle bounds = shp.getBounds();
                 but performs significantly better.                
            </comment>
            <comment line="313">
                                
            </comment>
            <method name="XRPMBlit" type="constructor" line="154">
                <params>
                    <param name="srcType" type="SurfaceType"/>
                    <param name="dstType" type="SurfaceType"/>
                </params>
            </method>
            <method name="Blit" type="void" line="158">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="sx" type="int"/>
                    <param name="sy" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="159">
                    <declaration name="x11sdDst" type="XRSurfaceData" line="162"/>
                    <declaration name="x11sdSrc" type="XRSurfaceData" line="164"/>
                </scope>
                <scope line="170"/>
            </method>
        </class>
        <class name="XRPMScaledBlit" line="176">
            <extends class="ScaledBlit"/>
            <comment line="182">
                TODO: This breaks scales with non-integer coordinates!?!?!                
            </comment>
            <comment line="234">
                Calculates the composite-rectangle required for transformed blits. This
                 method is functionally equal to: Shape shp =
                 xform.createTransformedShape(rect); Rectangle bounds = shp.getBounds();
                 but performs significantly better.                
            </comment>
            <comment line="313">
                                
            </comment>
            <method name="XRPMScaledBlit" type="constructor" line="177">
                <params>
                    <param name="srcType" type="SurfaceType"/>
                    <param name="dstType" type="SurfaceType"/>
                </params>
            </method>
            <method name="Scale" type="void" line="185">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="sx1" type="int"/>
                    <param name="sy1" type="int"/>
                    <param name="sx2" type="int"/>
                    <param name="sy2" type="int"/>
                    <param name="dx1" type="double"/>
                    <param name="dy1" type="double"/>
                    <param name="dx2" type="double"/>
                    <param name="dy2" type="double"/>
                </params>
                <comment line="205">
                    x11sdSrc.validateAsSource(xForm, XRUtils.RepeatNone, XRUtils.FAST); 
                     TODO:
                     padded
                     blit
                     required
                     :
                     -
                     
                     ?
                     ?                    
                </comment>
                <scope line="186">
                    <declaration name="x11sdDst" type="XRSurfaceData" line="189"/>
                    <declaration name="x11sdSrc" type="XRSurfaceData" line="191"/>
                    <declaration name="xScale" type="double" line="194"/>
                    <declaration name="yScale" type="double" line="195"/>
                    <declaration name="xForm" type="AffineTransform" line="202"/>
                </scope>
                <scope line="216"/>
            </method>
        </class>
        <class name="XRPMTransformedBlit" line="222">
            <extends class="TransformBlit"/>
            <comment line="182">
                TODO: This breaks scales with non-integer coordinates!?!?!                
            </comment>
            <comment line="234">
                Calculates the composite-rectangle required for transformed blits. This
                 method is functionally equal to: Shape shp =
                 xform.createTransformedShape(rect); Rectangle bounds = shp.getBounds();
                 but performs significantly better.                
            </comment>
            <comment line="313">
                                
            </comment>
            <javadoc line="222">
                Called also if scale+transform is set                
                <author>
                    Clemens Eisserer                    
                </author>
            </javadoc>
            <method name="XRPMTransformedBlit" type="constructor" line="229">
                <params>
                    <param name="srcType" type="SurfaceType"/>
                    <param name="dstType" type="SurfaceType"/>
                </params>
            </method>
            <method name="getCompositeBounds" type="Rectangle" line="239">
                <params>
                    <param name="tr" type="AffineTransform"/>
                    <param name="dstx" type="int"/>
                    <param name="dsty" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="compBounds" type="double[]" line="240"/>
                <declaration name="minX" type="double" line="252"/>
                <declaration name="minY" type="double" line="253"/>
                <declaration name="maxX" type="double" line="254"/>
                <declaration name="maxY" type="double" line="255"/>
            </method>
            <method name="Transform" type="void" line="266">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="xform" type="AffineTransform"/>
                    <param name="hint" type="int"/>
                    <param name="srcx" type="int"/>
                    <param name="srcy" type="int"/>
                    <param name="dstx" type="int"/>
                    <param name="dsty" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="267">
                    <declaration name="filter" type="int" line="270"/>
                    <declaration name="x11sdDst" type="XRSurfaceData" line="272"/>
                    <declaration name="x11sdSrc" type="XRSurfaceData" line="274"/>
                    <declaration name="bounds" type="Rectangle" line="277"/>
                    <declaration name="trx" type="AffineTransform" line="279"/>
                    <declaration name="maskTX" type="AffineTransform" line="281"/>
                    <scope line="285"/>
                    <scope line="287"/>
                    <declaration name="omitMask" type="boolean" line="292"/>
                    <scope line="294">
                        <declaration name="mask" type="XRMaskImage" line="295"/>
                        <declaration name="maskPicture" type="int" line="298"/>
                    </scope>
                    <scope line="301">
                        <declaration name="repeat" type="int" line="302"/>
                    </scope>
                </scope>
                <scope line="307"/>
            </method>
            <method name="isMaskOmittable" type="boolean" line="313">
                <params>
                    <param name="trx" type="AffineTransform"/>
                    <param name="comp" type="Composite"/>
                    <param name="filter" type="int"/>
                </params>
                <comment line="315">
                    return (filter == XRUtils.FAST || trx.getTranslateX() == (int) trx.getTranslateX() 
                     If
                     translate
                     is
                     integer
                     only                    
                </comment>
                <comment line="322">
                    Only                    
                </comment>
                <comment line="323">
                    90 degree
                     rotation                    
                </comment>
                <comment line="325">
                    No                    
                </comment>
                <comment line="326">
                    ExtraAlpha!=1                    
                </comment>
            </method>
        </class>
        <class name="XrSwToPMBlit" line="329">
            <extends class="Blit"/>
            <comment line="182">
                TODO: This breaks scales with non-integer coordinates!?!?!                
            </comment>
            <comment line="234">
                Calculates the composite-rectangle required for transformed blits. This
                 method is functionally equal to: Shape shp =
                 xform.createTransformedShape(rect); Rectangle bounds = shp.getBounds();
                 but performs significantly better.                
            </comment>
            <comment line="313">
                                
            </comment>
            <declaration name="pmToSurfaceBlit" type="Blit" line="330"/>
            <method name="XrSwToPMBlit" type="constructor" line="332">
                <params>
                    <param name="srcType" type="SurfaceType"/>
                    <param name="dstType" type="SurfaceType"/>
                </params>
            </method>
            <method name="Blit" type="void" line="337">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="sx" type="int"/>
                    <param name="sy" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="339">
                    If the blit is write-only (putimge), no need for a temporary VI.                    
                </comment>
                <scope line="341">
                    <declaration name="opaqueSwToSurfaceBlit" type="Blit" line="342"/>
                </scope>
                <scope line="344">
                    <scope line="345">
                        <declaration name="vImgSurface" type="XRSurfaceData" line="348"/>
                    </scope>
                    <scope line="350"/>
                </scope>
            </method>
        </class>
        <class name="XrSwToPMScaledBlit" line="357">
            <extends class="ScaledBlit"/>
            <comment line="182">
                TODO: This breaks scales with non-integer coordinates!?!?!                
            </comment>
            <comment line="234">
                Calculates the composite-rectangle required for transformed blits. This
                 method is functionally equal to: Shape shp =
                 xform.createTransformedShape(rect); Rectangle bounds = shp.getBounds();
                 but performs significantly better.                
            </comment>
            <comment line="313">
                                
            </comment>
            <declaration name="pmToSurfaceBlit" type="ScaledBlit" line="358"/>
            <method name="XrSwToPMScaledBlit" type="constructor" line="360">
                <params>
                    <param name="srcType" type="SurfaceType"/>
                    <param name="dstType" type="SurfaceType"/>
                </params>
            </method>
            <method name="Scale" type="void" line="366">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="sx1" type="int"/>
                    <param name="sy1" type="int"/>
                    <param name="sx2" type="int"/>
                    <param name="sy2" type="int"/>
                    <param name="dx1" type="double"/>
                    <param name="dy1" type="double"/>
                    <param name="dx2" type="double"/>
                    <param name="dy2" type="double"/>
                </params>
                <scope line="367">
                    <declaration name="w" type="int" line="368"/>
                    <declaration name="h" type="int" line="369"/>
                    <scope line="371">
                        <declaration name="vImgSurface" type="XRSurfaceData" line="373"/>
                    </scope>
                    <scope line="375"/>
                </scope>
            </method>
        </class>
        <class name="XrSwToPMTransformedBlit" line="382">
            <extends class="TransformBlit"/>
            <comment line="182">
                TODO: This breaks scales with non-integer coordinates!?!?!                
            </comment>
            <comment line="234">
                Calculates the composite-rectangle required for transformed blits. This
                 method is functionally equal to: Shape shp =
                 xform.createTransformedShape(rect); Rectangle bounds = shp.getBounds();
                 but performs significantly better.                
            </comment>
            <comment line="313">
                                
            </comment>
            <declaration name="pmToSurfaceBlit" type="TransformBlit" line="383"/>
            <method name="XrSwToPMTransformedBlit" type="constructor" line="385">
                <params>
                    <param name="srcType" type="SurfaceType"/>
                    <param name="dstType" type="SurfaceType"/>
                </params>
            </method>
            <method name="Transform" type="void" line="391">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="xform" type="AffineTransform"/>
                    <param name="hint" type="int"/>
                    <param name="sx" type="int"/>
                    <param name="sy" type="int"/>
                    <param name="dstx" type="int"/>
                    <param name="dsty" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="392">
                    <declaration name="vImgSurface" type="XRSurfaceData" line="395"/>
                </scope>
                <scope line="397"/>
            </method>
        </class>
    </source>