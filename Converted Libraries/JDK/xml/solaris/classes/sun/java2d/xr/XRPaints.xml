<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.xr">
        <import package="java.awt"/>
        <import package="java.awt.MultipleGradientPaint"/>
        <import package="java.awt.geom"/>
        <import package="java.awt.image"/>
        <import package="sun.java2d"/>
        <import package="sun.java2d.loops"/>
        <import package="sun.java2d.pipe"/>
        <class name="XRPaints" line="37">
            <declaration name="xrCompMan" type="XRCompositeManager" line="38"/>
            <declaration name="xrGradient" type="XRGradient" line="40"/>
            <declaration name="xrLinearGradient" type="XRLinearGradient" line="41"/>
            <declaration name="xrRadialGradient" type="XRRadialGradient" line="42"/>
            <declaration name="xrTexture" type="XRTexture" line="43"/>
            <method name="register" type="void" line="45">
                <params>
                    <param name="xrComp" type="XRCompositeManager"/>
                </params>
            </method>
            <method name="getXRPaint" type="XRPaints" line="49">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                </params>
            </method>
            <javadoc line="68">
                Attempts to locate an implementation corresponding to the paint state of
                  the provided SunGraphics2D object. If no implementation can be found, or
                  if the paint cannot be accelerated under the conditions of the
                  SunGraphics2D, this method returns false; otherwise, returns true.                
            </javadoc>
            <method name="isValid" type="boolean" line="74">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                </params>
                <declaration name="impl" type="XRPaints" line="75"/>
            </method>
            <method name="setPaint" type="void" line="79">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="paint" type="Paint"/>
                </params>
                <declaration name="impl" type="XRPaints" line="80"/>
                <scope line="81"/>
            </method>
            <method name="isPaintValid" type="boolean" line="86"/>
            <javadoc line="86">
                Returns true if this implementation is able to accelerate the Paint
                  object associated with, and under the conditions of, the provided
                  SunGraphics2D instance; otherwise returns false.                
            </javadoc>
            <method name="setXRPaint" type="void" line="93"/>
            <class name="XRGradient" line="95">
                <extends class="XRPaints"/>
                <method name="XRGradient" type="constructor" line="96"/>
                <javadoc line="99">
                    There are no restrictions for accelerating GradientPaint, so this
                      method always returns true.                    
                </javadoc>
                <method name="isPaintValid" type="boolean" line="104">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                    </params>
                </method>
                <method name="setXRPaint" type="void" line="108">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                        <param name="pt" type="Paint"/>
                    </params>
                    <declaration name="paint" type="GradientPaint" line="109"/>
                    <declaration name="pixels" type="int[]" line="111"/>
                    <declaration name="fractions" type="float" line="113"/>
                    <declaration name="pt1" type="Point2D" line="117"/>
                    <declaration name="pt2" type="Point2D" line="118"/>
                    <declaration name="at" type="AffineTransform" line="120"/>
                    <scope line="121"/>
                    <scope line="123"/>
                    <declaration name="repeat" type="int" line="127"/>
                    <declaration name="con" type="XRBackend" line="129"/>
                    <declaration name="gradient" type="int" line="130"/>
                </method>
            </class>
            <method name="getGradientLength" type="int" line="135">
                <params>
                    <param name="pt1" type="Point2D"/>
                    <param name="pt2" type="Point2D"/>
                </params>
                <declaration name="xDiff" type="double" line="136"/>
                <declaration name="yDiff" type="double" line="137"/>
            </method>
            <class name="XRLinearGradient" line="141">
                <extends class="XRPaints"/>
                <method name="isPaintValid" type="boolean" line="144">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                    </params>
                </method>
                <method name="setXRPaint" type="void" line="149">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                        <param name="pt" type="Paint"/>
                    </params>
                    <declaration name="paint" type="LinearGradientPaint" line="150"/>
                    <declaration name="linear" type="boolean" line="151"/>
                    <declaration name="colors" type="Color[]" line="153"/>
                    <declaration name="pt1" type="Point2D" line="154"/>
                    <declaration name="pt2" type="Point2D" line="155"/>
                    <declaration name="at" type="AffineTransform" line="158"/>
                    <declaration name="repeat" type="int" line="161"/>
                    <declaration name="fractions" type="float[]" line="162"/>
                    <declaration name="pixels" type="int[]" line="163"/>
                    <scope line="165"/>
                    <scope line="167"/>
                    <declaration name="con" type="XRBackend" line="171"/>
                    <declaration name="gradient" type="int" line="172"/>
                </method>
            </class>
            <class name="XRRadialGradient" line="177">
                <extends class="XRPaints"/>
                <method name="isPaintValid" type="boolean" line="180">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                    </params>
                    <declaration name="grad" type="RadialGradientPaint" line="181"/>
                </method>
                <method name="setXRPaint" type="void" line="186">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                        <param name="pt" type="Paint"/>
                    </params>
                    <comment line="198">
                        save original (untransformed) center and focus points                        
                    </comment>
                    <comment line="208">
                        transform unit circle to gradient coords; we start with the                        
                    </comment>
                    <comment line="209">
                        unit circle (center=(0,0), focus on positive x-axis, radius=1)                        
                    </comment>
                    <comment line="210">
                        and then transform into gradient space                        
                    </comment>
                    <comment line="213">
                        at.scale(radius, radius);                        
                    </comment>
                    <comment line="215">
                        invert to get mapping from device coords to unit circle                        
                    </comment>
                    <comment line="223">
                        clamp the focus point so that it does not rest on, or outside                        
                    </comment>
                    <comment line="224">
                        of, the circumference of the gradient circle                        
                    </comment>
                    <declaration name="paint" type="RadialGradientPaint" line="187"/>
                    <declaration name="linear" type="boolean" line="188"/>
                    <declaration name="colors" type="Color[]" line="189"/>
                    <declaration name="center" type="Point2D" line="190"/>
                    <declaration name="focus" type="Point2D" line="191"/>
                    <declaration name="repeat" type="int" line="193"/>
                    <declaration name="fractions" type="float[]" line="194"/>
                    <declaration name="pixels" type="int[]" line="195"/>
                    <declaration name="radius" type="float" line="196"/>
                    <declaration name="cx" type="double" line="199"/>
                    <declaration name="cy" type="double" line="200"/>
                    <declaration name="fx" type="double" line="201"/>
                    <declaration name="fy" type="double" line="202"/>
                    <declaration name="at" type="AffineTransform" line="204"/>
                    <scope line="216"/>
                    <scope line="218"/>
                    <declaration name="con" type="XRBackend" line="227"/>
                    <declaration name="gradient" type="int" line="228"/>
                </method>
            </class>
            <class name="XRTexture" line="233">
                <extends class="XRPaints"/>
                <method name="isPaintValid" type="boolean" line="236">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                    </params>
                    <comment line="243">
                        REMIND: this is a hack that attempts to cache the system                        
                    </comment>
                    <comment line="244">
                        memory image from the TexturePaint instance into an                        
                    </comment>
                    <comment line="245">
                        OpenGL texture...                        
                    </comment>
                    <declaration name="paint" type="TexturePaint" line="237"/>
                    <declaration name="bi" type="BufferedImage" line="238"/>
                    <declaration name="dstData" type="XRSurfaceData" line="239"/>
                    <declaration name="srcData" type="SurfaceData" line="241"/>
                    <scope line="242">
                        <scope line="247"/>
                    </scope>
                </method>
                <method name="setXRPaint" type="void" line="256">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                        <param name="pt" type="Paint"/>
                    </params>
                    <comment line="263">
                        REMIND: this hack tries to ensure that we have a cached texture                        
                    </comment>
                    <comment line="281">
                                                
                    </comment>
                    <declaration name="paint" type="TexturePaint" line="257"/>
                    <declaration name="bi" type="BufferedImage" line="259"/>
                    <declaration name="dstData" type="SurfaceData" line="260"/>
                    <declaration name="srcData" type="SurfaceData" line="261"/>
                    <scope line="264">
                        <scope line="266"/>
                    </scope>
                    <declaration name="x11SrcData" type="XRSurfaceData" line="271"/>
                    <declaration name="at" type="AffineTransform" line="273"/>
                    <declaration name="anchor" type="Rectangle2D" line="274"/>
                    <scope line="278"/>
                    <scope line="280"/>
                </method>
            </class>
            <method name="convertToIntArgbPixels" type="int[]" line="289">
                <params>
                    <param name="colors" type="Color[]"/>
                    <param name="linear" type="boolean"/>
                </params>
                <declaration name="pixels" type="int[]" line="290"/>
                <scope line="291"/>
            </method>
            <method name="colorToIntArgbPixel" type="int" line="297">
                <params>
                    <param name="c" type="Color"/>
                    <param name="linear" type="boolean"/>
                </params>
                <declaration name="rgb" type="int" line="298"/>
                <declaration name="a" type="int" line="300"/>
                <declaration name="r" type="int" line="301"/>
                <declaration name="g" type="int" line="302"/>
                <declaration name="b" type="int" line="303"/>
                <scope line="304"/>
            </method>
        </class>
    </source>