<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.xr">
        <import package="java.awt"/>
        <import package="java.util"/>
        <class name="MaskTileManager" line="31">
            <javadoc line="31">
                We render non-antialiased geometry (consisting of rectangles) into a mask,
                  which is later used in a composition step.
                  To avoid mask-allocations of large size, MaskTileManager splits
                  geometry larger than MASK_SIZE into several tiles,
                  and stores the geometry in instances of MaskTile.                
                <author>
                    Clemens Eisserer                    
                </author>
            </javadoc>
            <declaration name="MASK_SIZE" type="int" line="43"/>
            <declaration name="mainTile" type="MaskTile" line="45"/>
            <declaration name="tileList" type="ArrayList&lt;MaskTile&gt;" line="47"/>
            <declaration name="allocatedTiles" type="int" line="48"/>
            <declaration name="xTiles" type="int" line="49"/>
            <declaration name="xrMgr" type="XRCompositeManager" line="51"/>
            <declaration name="con" type="XRBackend" line="52"/>
            <declaration name="maskPixmap" type="int" line="54"/>
            <declaration name="maskPicture" type="int" line="55"/>
            <declaration name="maskGC" type="long" line="56"/>
            <declaration name="lineMaskPixmap" type="int" line="57"/>
            <declaration name="lineMaskPicture" type="int" line="58"/>
            <declaration name="drawLineGC" type="long" line="59"/>
            <declaration name="clearLineGC" type="long" line="60"/>
            <method name="MaskTileManager" type="constructor" line="62">
                <params>
                    <param name="xrMgr" type="XRCompositeManager"/>
                    <param name="parentXid" type="int"/>
                </params>
            </method>
            <javadoc line="90">
                Adds a rectangle to the mask.                
            </javadoc>
            <method name="addRect" type="void" line="93">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="97">
                Adds a line to the mask.                
            </javadoc>
            <method name="addLine" type="void" line="100">
                <params>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                </params>
            </method>
            <javadoc line="104">
                Transfers the geometry stored (rectangles, lines) to one or more masks,
                  and renders the result to the destination surface.                
            </javadoc>
            <method name="fillMask" type="void" line="108">
                <params>
                    <param name="dst" type="XRSurfaceData"/>
                </params>
                <comment line="120">
                    We don&apos;t need tiling if all geometry fits in a single tile                    
                </comment>
                <declaration name="maskRequired" type="boolean" line="110"/>
                <scope line="112">
                    <declaration name="dirtyArea" type="DirtyRegion" line="114"/>
                    <declaration name="maskColor" type="XRColor" line="117"/>
                    <scope line="122"/>
                    <scope line="125">
                        <scope line="129">
                            <scope line="130">
                                <declaration name="tile" type="MaskTile" line="131"/>
                                <declaration name="tileStartX" type="int" line="133"/>
                                <declaration name="tileStartY" type="int" line="134"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="140"/>
            </method>
            <javadoc line="147">
                Uploads aa geometry generated for maskblit/fill into the mask pixmap.                
            </javadoc>
            <method name="uploadMask" type="int" line="150">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="maskscan" type="int"/>
                    <param name="maskoff" type="int"/>
                    <param name="mask" type="byte[]"/>
                </params>
                <declaration name="maskPic" type="int" line="151"/>
                <scope line="153">
                    <declaration name="maskAlpha" type="float" line="154"/>
                </scope>
                <scope line="159"/>
            </method>
            <javadoc line="166">
                Clears the area of the mask-pixmap used for uploading aa coverage values.                
            </javadoc>
            <method name="clearUploadMask" type="void" line="169">
                <params>
                    <param name="mask" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="170"/>
            </method>
            <javadoc line="177">
                Renders the rectangles provided to the mask, and does a composition
                  operation with the properties set inXRCompositeManager.                
            </javadoc>
            <method name="compositeSingleTile" type="void" line="185">
                <params>
                    <param name="dst" type="XRSurfaceData"/>
                    <param name="tile" type="MaskTile"/>
                    <param name="dirtyArea" type="DirtyRegion"/>
                    <param name="maskRequired" type="boolean"/>
                    <param name="tileStartX" type="int"/>
                    <param name="tileStartY" type="int"/>
                    <param name="maskColor" type="XRColor"/>
                </params>
                <comment line="202">
                    Optimization: When the tile only contains one rectangle, the
                     composite-operation boundaries can be used as geometry                    
                </comment>
                <comment line="220">
                                        
                </comment>
                <scope line="186">
                    <declaration name="tileDirtyArea" type="DirtyRegion" line="187"/>
                    <declaration name="x" type="int" line="189"/>
                    <declaration name="y" type="int" line="190"/>
                    <declaration name="width" type="int" line="191"/>
                    <declaration name="height" type="int" line="192"/>
                    <declaration name="rectCnt" type="int" line="196"/>
                    <scope line="198">
                        <declaration name="mask" type="int" line="199"/>
                        <scope line="205"/>
                        <scope line="209">
                            <scope line="210"/>
                        </scope>
                        <scope line="220"/>
                    </scope>
                    <scope line="228"/>
                </scope>
            </method>
            <javadoc line="237">
                Allocates enough MaskTile instances, to cover the whole
                  mask area, or resets existing ones.                
            </javadoc>
            <method name="allocTiles" type="void" line="241">
                <params>
                    <param name="maskArea" type="DirtyRegion"/>
                </params>
                <declaration name="tileCnt" type="int" line="244"/>
                <scope line="246">
                    <scope line="247">
                        <scope line="248"/>
                        <scope line="250"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="259">
                Tiles the stored rectangles, if they are larger than the MASK_SIZE                
            </javadoc>
            <method name="tileRects" type="void" line="262">
                <declaration name="rects" type="GrowableRectArray" line="263"/>
                <scope line="265">
                    <declaration name="tileXStartIndex" type="int" line="266"/>
                    <declaration name="tileYStartIndex" type="int" line="267"/>
                    <declaration name="tileXLength" type="int" line="268"/>
                    <declaration name="tileYLength" type="int" line="271"/>
                    <scope line="275">
                        <scope line="276">
                            <declaration name="tileIndex" type="int" line="278"/>
                            <declaration name="tile" type="MaskTile" line="280"/>
                            <declaration name="rectTileList" type="GrowableRectArray" line="282"/>
                            <declaration name="tileArrayIndex" type="int" line="283"/>
                            <declaration name="tileStartPosX" type="int" line="285"/>
                            <declaration name="tileStartPosY" type="int" line="286"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="307">
                Limits the rect&apos;s coordinates to the mask coordinates. The result is used
                  by growDirtyRegion.                
            </javadoc>
            <method name="limitRectCoords" type="void" line="311">
                <params>
                    <param name="rects" type="GrowableRectArray"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="312"/>
                <scope line="315"/>
                <scope line="318"/>
                <scope line="322"/>
            </method>
        </class>
    </source>