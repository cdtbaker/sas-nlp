<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.x11">
        <import package="java.awt.GraphicsDevice"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Composite"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.ComponentColorModel"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.peer.ComponentPeer"/>
        <import package="sun.awt.SunHints"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.X11ComponentPeer"/>
        <import package="sun.awt.X11GraphicsConfig"/>
        <import package="sun.awt.X11GraphicsEnvironment"/>
        <import package="sun.awt.image.PixelConverter"/>
        <import package="sun.font.X11TextRenderer"/>
        <import package="sun.java2d.InvalidPipeException"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.SunGraphicsEnvironment"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.SurfaceDataProxy"/>
        <import package="sun.java2d.loops.SurfaceType"/>
        <import package="sun.java2d.loops.CompositeType"/>
        <import package="sun.java2d.loops.RenderLoops"/>
        <import package="sun.java2d.loops.GraphicsPrimitive"/>
        <import package="sun.java2d.loops.XORComposite"/>
        <import package="sun.java2d.loops.Blit"/>
        <import package="sun.java2d.pipe.ValidatePipe"/>
        <import package="sun.java2d.pipe.PixelToShapeConverter"/>
        <import package="sun.java2d.pipe.TextPipe"/>
        <import package="sun.java2d.pipe.Region"/>
        <class name="X11SurfaceData" line="40">
            <extends class="XSurfaceData"/>
            <declaration name="peer" type="X11ComponentPeer" line="41"/>
            <declaration name="graphicsConfig" type="X11GraphicsConfig" line="42"/>
            <declaration name="solidloops" type="RenderLoops" line="43"/>
            <declaration name="depth" type="int" line="44"/>
            <method name="initIDs" type="void" line="45"/>
            <method name="initSurface" type="void" line="46"/>
            <declaration name="DESC_INT_BGR_X11" type="String" line="47"/>
            <declaration name="DESC_INT_RGB_X11" type="String" line="48"/>
            <declaration name="DESC_4BYTE_ABGR_PRE_X11" type="String" line="49"/>
            <declaration name="DESC_INT_ARGB_PRE_X11" type="String" line="50"/>
            <declaration name="DESC_BYTE_IND_OPQ_X11" type="String" line="51"/>
            <declaration name="DESC_INT_BGR_X11_BM" type="String" line="52"/>
            <declaration name="DESC_INT_RGB_X11_BM" type="String" line="53"/>
            <declaration name="DESC_BYTE_IND_X11_BM" type="String" line="54"/>
            <declaration name="DESC_BYTE_GRAY_X11" type="String" line="55"/>
            <declaration name="DESC_INDEX8_GRAY_X11" type="String" line="56"/>
            <declaration name="DESC_BYTE_GRAY_X11_BM" type="String" line="57"/>
            <declaration name="DESC_INDEX8_GRAY_X11_BM" type="String" line="58"/>
            <declaration name="DESC_3BYTE_RGB_X11" type="String" line="59"/>
            <declaration name="DESC_3BYTE_BGR_X11" type="String" line="60"/>
            <declaration name="DESC_3BYTE_RGB_X11_BM" type="String" line="61"/>
            <declaration name="DESC_3BYTE_BGR_X11_BM" type="String" line="62"/>
            <declaration name="DESC_USHORT_555_RGB_X11" type="String" line="63"/>
            <declaration name="DESC_USHORT_565_RGB_X11" type="String" line="64"/>
            <declaration name="DESC_USHORT_555_RGB_X11_BM" type="String" line="65"/>
            <declaration name="DESC_USHORT_565_RGB_X11_BM" type="String" line="66"/>
            <declaration name="DESC_USHORT_INDEXED_X11" type="String" line="67"/>
            <declaration name="DESC_USHORT_INDEXED_X11_BM" type="String" line="68"/>
            <declaration name="IntBgrX11" type="SurfaceType" line="69"/>
            <declaration name="IntRgbX11" type="SurfaceType" line="70"/>
            <declaration name="FourByteAbgrPreX11" type="SurfaceType" line="71"/>
            <declaration name="IntArgbPreX11" type="SurfaceType" line="72"/>
            <declaration name="ThreeByteRgbX11" type="SurfaceType" line="73"/>
            <declaration name="ThreeByteBgrX11" type="SurfaceType" line="74"/>
            <declaration name="UShort555RgbX11" type="SurfaceType" line="75"/>
            <declaration name="UShort565RgbX11" type="SurfaceType" line="76"/>
            <declaration name="UShortIndexedX11" type="SurfaceType" line="77"/>
            <declaration name="ByteIndexedOpaqueX11" type="SurfaceType" line="78"/>
            <declaration name="ByteGrayX11" type="SurfaceType" line="79"/>
            <declaration name="Index8GrayX11" type="SurfaceType" line="80"/>
            <declaration name="IntBgrX11_BM" type="SurfaceType" line="81"/>
            <declaration name="IntRgbX11_BM" type="SurfaceType" line="82"/>
            <declaration name="ThreeByteRgbX11_BM" type="SurfaceType" line="83"/>
            <declaration name="ThreeByteBgrX11_BM" type="SurfaceType" line="84"/>
            <declaration name="UShort555RgbX11_BM" type="SurfaceType" line="85"/>
            <declaration name="UShort565RgbX11_BM" type="SurfaceType" line="86"/>
            <declaration name="UShortIndexedX11_BM" type="SurfaceType" line="87"/>
            <declaration name="ByteIndexedX11_BM" type="SurfaceType" line="88"/>
            <declaration name="ByteGrayX11_BM" type="SurfaceType" line="89"/>
            <declaration name="Index8GrayX11_BM" type="SurfaceType" line="90"/>
            <declaration name="accelerationEnabled" type="Boolean" line="91"/>
            <method name="getRaster" type="Raster" line="92">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <declaration name="x11pipe" type="X11Renderer" line="95"/>
            <declaration name="x11txpipe" type="PixelToShapeConverter" line="96"/>
            <declaration name="x11textpipe" type="TextPipe" line="97"/>
            <declaration name="dgaAvailable" type="boolean" line="98"/>
            <scope line="99">
                <scope line="100">
                    <declaration name="magPresent" type="String" line="101"/>
                    <declaration name="tryDGA" type="boolean" line="102"/>
                    <declaration name="xtextpipe" type="String" line="104"/>
                    <scope line="105">
                        <scope line="106"/>
                        <scope line="110"/>
                    </scope>
                    <scope line="114">
                        <scope line="115"/>
                    </scope>
                    <scope line="121"/>
                </scope>
            </scope>
            <method name="isDgaAvailable" type="boolean" line="127"/>
            <javadoc line="127">
                Returns true if we can use DGA on any of the screens                
            </javadoc>
            <method name="isShmPMAvailable" type="boolean" line="131"/>
            <javadoc line="131">
                Returns true if shared memory pixmaps are available                
            </javadoc>
            <method name="isAccelerationEnabled" type="boolean" line="135">
                <scope line="136">
                    <scope line="137"/>
                    <scope line="140">
                        <declaration name="prop" type="String" line="141"/>
                        <scope line="142"/>
                        <scope line="145">
                            <declaration name="isDisplayLocal" type="boolean" line="146"/>
                            <declaration name="ge" type="GraphicsEnvironment" line="147"/>
                            <scope line="148"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="makeProxyFor" type="SurfaceDataProxy" line="157">
                <params>
                    <param name="srcData" type="SurfaceData"/>
                </params>
            </method>
            <method name="validatePipe" type="void" line="160">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                </params>
                <scope line="161">
                    <scope line="162"/>
                    <scope line="170"/>
                    <scope line="173">
                        <scope line="177"/>
                        <scope line="180"/>
                        <scope line="194"/>
                        <scope line="197"/>
                    </scope>
                    <scope line="209"/>
                    <scope line="213"/>
                    <scope line="217"/>
                    <scope line="223"/>
                </scope>
                <scope line="227"/>
            </method>
            <method name="getRenderLoops" type="RenderLoops" line="231">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                </params>
                <scope line="232"/>
            </method>
            <method name="getDeviceConfiguration" type="GraphicsConfiguration" line="237"/>
            <javadoc line="240">
                Method for instantiating a Window SurfaceData                
            </javadoc>
            <method name="createData" type="X11WindowSurfaceData" line="243">
                <params>
                    <param name="peer" type="X11ComponentPeer"/>
                </params>
                <declaration name="gc" type="X11GraphicsConfig" line="244"/>
            </method>
            <javadoc line="247">
                Method for instantiating a Pixmap SurfaceData (offscreen)                
            </javadoc>
            <method name="createData" type="X11PixmapSurfaceData" line="250">
                <params>
                    <param name="gc" type="X11GraphicsConfig"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="cm" type="ColorModel"/>
                    <param name="image" type="Image"/>
                    <param name="drawable" type="long"/>
                    <param name="transparency" type="int"/>
                </params>
            </method>
            <method name="X11SurfaceData" type="constructor" line="253">
                <params>
                    <param name="peer" type="X11ComponentPeer"/>
                    <param name="gc" type="X11GraphicsConfig"/>
                    <param name="sType" type="SurfaceType"/>
                    <param name="cm" type="ColorModel"/>
                </params>
                <scope line="260"/>
            </method>
            <method name="getGC" type="X11GraphicsConfig" line="264">
                <params>
                    <param name="peer" type="X11ComponentPeer"/>
                </params>
                <scope line="265"/>
                <scope line="268">
                    <declaration name="env" type="GraphicsEnvironment" line="269"/>
                    <declaration name="gd" type="GraphicsDevice" line="270"/>
                </scope>
            </method>
            <method name="canSourceSendExposures" type="boolean" line="274"/>
            <javadoc line="274">
                Returns a boolean indicating whether or not a copyArea from
                  the given rectangle source coordinates might be incomplete
                  and result in X11 GraphicsExposure events being generated
                  from XCopyArea.
                  This method allows the SurfaceData copyArea method to determine
                  if it needs to set the GraphicsExposures attribute of the X11 GC
                  to True or False to receive or avoid the events.                
                <return>
                    true if there is any chance that an XCopyArea from the
                      given source coordinates could produce any X11
                      Exposure events.                    
                </return>
            </javadoc>
            <method name="copyArea" type="boolean" line="287">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                </params>
                <scope line="288">
                    <scope line="289"/>
                </scope>
                <declaration name="comptype" type="CompositeType" line="294"/>
                <scope line="295">
                    <scope line="299">
                        <declaration name="needExposures" type="boolean" line="300"/>
                        <declaration name="xgc" type="long" line="301"/>
                    </scope>
                    <scope line="304"/>
                </scope>
            </method>
            <method name="getSurfaceType" type="SurfaceType" line="311">
                <params>
                    <param name="gc" type="X11GraphicsConfig"/>
                    <param name="transparency" type="int"/>
                </params>
            </method>
            <method name="getSurfaceType" type="SurfaceType" line="314">
                <params>
                    <param name="gc" type="X11GraphicsConfig"/>
                    <param name="transparency" type="int"/>
                    <param name="pixmapSurface" type="boolean"/>
                </params>
                <declaration name="transparent" type="boolean" line="315"/>
                <declaration name="sType" type="SurfaceType" line="316"/>
                <declaration name="cm" type="ColorModel" line="317"/>
                <scope line="320">
                    <scope line="321"/>
                    <scope line="324"/>
                </scope>
                <scope line="330">
                    <scope line="331"/>
                    <scope line="334">
                        <scope line="335"/>
                        <scope line="338"/>
                    </scope>
                </scope>
                <scope line="343"/>
                <scope line="346"/>
                <scope line="354"/>
                <scope line="357"/>
                <scope line="362"/>
                <scope line="365"/>
                <scope line="370"/>
                <scope line="373"/>
                <scope line="376"/>
            </method>
            <method name="invalidate" type="void" line="385">
                <scope line="386"/>
            </method>
            <method name="XSetCopyMode" type="void" line="391"/>
            <javadoc line="391">
                The following methods and variables are used to keep the Java-level
                  context state in sync with the native X11 GC associated with this
                  X11SurfaceData object.                
            </javadoc>
            <method name="XSetXorMode" type="void" line="397"/>
            <method name="XSetForeground" type="void" line="398"/>
            <declaration name="xgc" type="long" line="399"/>
            <declaration name="validatedClip" type="Region" line="400"/>
            <declaration name="validatedXorComp" type="XORComposite" line="401"/>
            <declaration name="xorpixelmod" type="int" line="402"/>
            <declaration name="validatedPixel" type="int" line="403"/>
            <declaration name="validatedExposures" type="boolean" line="404"/>
            <method name="getRenderGC" type="long" line="405">
                <params>
                    <param name="clip" type="Region"/>
                    <param name="compState" type="int"/>
                    <param name="comp" type="Composite"/>
                    <param name="pixel" type="int"/>
                </params>
            </method>
            <method name="getBlitGC" type="long" line="408">
                <params>
                    <param name="clip" type="Region"/>
                    <param name="needExposures" type="boolean"/>
                </params>
            </method>
            <method name="getGC" type="long" line="411">
                <params>
                    <param name="clip" type="Region"/>
                    <param name="compState" type="int"/>
                    <param name="comp" type="Composite"/>
                    <param name="pixel" type="int"/>
                    <param name="needExposures" type="boolean"/>
                </params>
                <scope line="412"/>
                <scope line="415">
                    <scope line="417"/>
                    <scope line="420"/>
                </scope>
                <scope line="424">
                    <scope line="425"/>
                </scope>
                <scope line="431">
                    <scope line="432"/>
                </scope>
                <scope line="439"/>
                <scope line="443"/>
            </method>
            <method name="makePipes" type="void" line="449">
                <scope line="450">
                    <scope line="452"/>
                    <scope line="455"/>
                </scope>
            </method>
            <class name="X11WindowSurfaceData" line="462">
                <extends class="X11SurfaceData"/>
                <method name="X11WindowSurfaceData" type="constructor" line="463">
                    <params>
                        <param name="peer" type="X11ComponentPeer"/>
                        <param name="gc" type="X11GraphicsConfig"/>
                        <param name="sType" type="SurfaceType"/>
                    </params>
                    <scope line="465"/>
                </method>
                <method name="getReplacement" type="SurfaceData" line="469"/>
                <method name="getBounds" type="Rectangle" line="472">
                    <declaration name="r" type="Rectangle" line="473"/>
                </method>
                <method name="canSourceSendExposures" type="boolean" line="477">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                </method>
                <javadoc line="480">
                    Returns destination Component associated with this SurfaceData.                    
                </javadoc>
                <method name="getDestination" type="Object" line="483"/>
            </class>
            <class name="X11PixmapSurfaceData" line="487">
                <extends class="X11SurfaceData"/>
                <declaration name="offscreenImage" type="Image" line="488"/>
                <declaration name="width" type="int" line="489"/>
                <declaration name="height" type="int" line="490"/>
                <declaration name="transparency" type="int" line="491"/>
                <method name="X11PixmapSurfaceData" type="constructor" line="492">
                    <params>
                        <param name="gc" type="X11GraphicsConfig"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                        <param name="image" type="Image"/>
                        <param name="sType" type="SurfaceType"/>
                        <param name="cm" type="ColorModel"/>
                        <param name="drawable" type="long"/>
                        <param name="transparency" type="int"/>
                    </params>
                </method>
                <method name="getReplacement" type="SurfaceData" line="501"/>
                <javadoc line="504">
                    Need this since the surface data is created with
                      the color model of the target GC, which is always
                      opaque. But in SunGraphics2D.blitSD we choose loops
                      based on the transparency on the source SD, so
                      it could choose wrong loop (blit instead of blitbg,
                      for example).                    
                </javadoc>
                <method name="getTransparency" type="int" line="512"/>
                <method name="getBounds" type="Rectangle" line="515"/>
                <method name="canSourceSendExposures" type="boolean" line="518">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                </method>
                <method name="flush" type="void" line="521"/>
                <javadoc line="525">
                    Returns destination Image associated with this SurfaceData.                    
                </javadoc>
                <method name="getDestination" type="Object" line="528"/>
            </class>
            <declaration name="lazypipe" type="LazyPipe" line="532"/>
            <class name="LazyPipe" line="533">
                <extends class="ValidatePipe"/>
                <method name="validate" type="boolean" line="534">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                    </params>
                    <declaration name="xsd" type="X11SurfaceData" line="535"/>
                    <scope line="536"/>
                </method>
            </class>
        </class>
    </source>