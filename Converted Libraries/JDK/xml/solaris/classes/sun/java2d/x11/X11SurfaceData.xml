<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.x11">
        <import package="java.awt.GraphicsDevice"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Composite"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.ComponentColorModel"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.peer.ComponentPeer"/>
        <import package="sun.awt.SunHints"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.X11ComponentPeer"/>
        <import package="sun.awt.X11GraphicsConfig"/>
        <import package="sun.awt.X11GraphicsEnvironment"/>
        <import package="sun.awt.image.PixelConverter"/>
        <import package="sun.font.X11TextRenderer"/>
        <import package="sun.java2d.InvalidPipeException"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.SunGraphicsEnvironment"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.SurfaceDataProxy"/>
        <import package="sun.java2d.loops.SurfaceType"/>
        <import package="sun.java2d.loops.CompositeType"/>
        <import package="sun.java2d.loops.RenderLoops"/>
        <import package="sun.java2d.loops.GraphicsPrimitive"/>
        <import package="sun.java2d.loops.XORComposite"/>
        <import package="sun.java2d.loops.Blit"/>
        <import package="sun.java2d.pipe.ValidatePipe"/>
        <import package="sun.java2d.pipe.PixelToShapeConverter"/>
        <import package="sun.java2d.pipe.TextPipe"/>
        <import package="sun.java2d.pipe.Region"/>
        <class name="X11SurfaceData" line="68">
            <extends class="XSurfaceData"/>
            <comment line="169">
                Bitmap surface types                
            </comment>
            <comment line="436">
                /**
                     * Initializes the native Ops pointer.
                     */
                    private native void initOps(X11ComponentPeer peer,
                                                X11GraphicsConfig gc, int depth);                
            </comment>
            <declaration name="peer" type="X11ComponentPeer" line="69"/>
            <declaration name="graphicsConfig" type="X11GraphicsConfig" line="70"/>
            <declaration name="solidloops" type="RenderLoops" line="71"/>
            <declaration name="depth" type="int" line="73"/>
            <method name="initIDs" type="void" line="75"/>
            <method name="initSurface" type="void" line="76"/>
            <declaration name="DESC_INT_BGR_X11" type="String" line="79"/>
            <declaration name="DESC_INT_RGB_X11" type="String" line="81"/>
            <declaration name="DESC_4BYTE_ABGR_PRE_X11" type="String" line="84"/>
            <declaration name="DESC_INT_ARGB_PRE_X11" type="String" line="86"/>
            <declaration name="DESC_BYTE_IND_OPQ_X11" type="String" line="90"/>
            <declaration name="DESC_INT_BGR_X11_BM" type="String" line="93"/>
            <declaration name="DESC_INT_RGB_X11_BM" type="String" line="95"/>
            <declaration name="DESC_BYTE_IND_X11_BM" type="String" line="97"/>
            <declaration name="DESC_BYTE_GRAY_X11" type="String" line="100"/>
            <declaration name="DESC_INDEX8_GRAY_X11" type="String" line="102"/>
            <declaration name="DESC_BYTE_GRAY_X11_BM" type="String" line="105"/>
            <declaration name="DESC_INDEX8_GRAY_X11_BM" type="String" line="107"/>
            <declaration name="DESC_3BYTE_RGB_X11" type="String" line="110"/>
            <declaration name="DESC_3BYTE_BGR_X11" type="String" line="112"/>
            <declaration name="DESC_3BYTE_RGB_X11_BM" type="String" line="115"/>
            <declaration name="DESC_3BYTE_BGR_X11_BM" type="String" line="117"/>
            <declaration name="DESC_USHORT_555_RGB_X11" type="String" line="120"/>
            <declaration name="DESC_USHORT_565_RGB_X11" type="String" line="122"/>
            <declaration name="DESC_USHORT_555_RGB_X11_BM" type="String" line="125"/>
            <declaration name="DESC_USHORT_565_RGB_X11_BM" type="String" line="128"/>
            <declaration name="DESC_USHORT_INDEXED_X11" type="String" line="131"/>
            <declaration name="DESC_USHORT_INDEXED_X11_BM" type="String" line="134"/>
            <declaration name="IntBgrX11" type="SurfaceType" line="137"/>
            <declaration name="IntRgbX11" type="SurfaceType" line="139"/>
            <declaration name="FourByteAbgrPreX11" type="SurfaceType" line="142"/>
            <declaration name="IntArgbPreX11" type="SurfaceType" line="144"/>
            <declaration name="ThreeByteRgbX11" type="SurfaceType" line="147"/>
            <declaration name="ThreeByteBgrX11" type="SurfaceType" line="149"/>
            <declaration name="UShort555RgbX11" type="SurfaceType" line="152"/>
            <declaration name="UShort565RgbX11" type="SurfaceType" line="154"/>
            <declaration name="UShortIndexedX11" type="SurfaceType" line="157"/>
            <declaration name="ByteIndexedOpaqueX11" type="SurfaceType" line="160"/>
            <declaration name="ByteGrayX11" type="SurfaceType" line="163"/>
            <declaration name="Index8GrayX11" type="SurfaceType" line="165"/>
            <declaration name="IntBgrX11_BM" type="SurfaceType" line="169"/>
            <declaration name="IntRgbX11_BM" type="SurfaceType" line="172"/>
            <declaration name="ThreeByteRgbX11_BM" type="SurfaceType" line="176"/>
            <declaration name="ThreeByteBgrX11_BM" type="SurfaceType" line="179"/>
            <declaration name="UShort555RgbX11_BM" type="SurfaceType" line="183"/>
            <declaration name="UShort565RgbX11_BM" type="SurfaceType" line="186"/>
            <declaration name="UShortIndexedX11_BM" type="SurfaceType" line="190"/>
            <declaration name="ByteIndexedX11_BM" type="SurfaceType" line="193"/>
            <declaration name="ByteGrayX11_BM" type="SurfaceType" line="196"/>
            <declaration name="Index8GrayX11_BM" type="SurfaceType" line="198"/>
            <declaration name="accelerationEnabled" type="Boolean" line="202"/>
            <method name="getRaster" type="Raster" line="204">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <declaration name="x11pipe" type="X11Renderer" line="208"/>
            <declaration name="x11txpipe" type="PixelToShapeConverter" line="209"/>
            <declaration name="x11textpipe" type="TextPipe" line="210"/>
            <declaration name="dgaAvailable" type="boolean" line="211"/>
            <scope line="213">
                <scope line="215">
                    <declaration name="magPresent" type="String" line="217"/>
                    <declaration name="tryDGA" type="boolean" line="219"/>
                    <declaration name="xtextpipe" type="String" line="223"/>
                    <scope line="225">
                        <scope line="226"/>
                        <scope line="231"/>
                    </scope>
                    <scope line="234">
                        <scope line="235"/>
                    </scope>
                    <scope line="244"/>
                </scope>
            </scope>
            <method name="isDgaAvailable" type="boolean" line="251"/>
            <javadoc line="251">
                Returns true if we can use DGA on any of the screens                
            </javadoc>
            <method name="isShmPMAvailable" type="boolean" line="256"/>
            <javadoc line="256">
                Returns true if shared memory pixmaps are available                
            </javadoc>
            <method name="isAccelerationEnabled" type="boolean" line="261">
                <comment line="272">
                    true iff prop==true, false otherwise                    
                </comment>
                <comment line="281">
                    EXA based drivers tend to place pixmaps in VRAM, slowing down readbacks.
                     Don&apos;t use pixmaps if dga is available,
                     or we are local and shared memory Pixmaps are not available.                    
                </comment>
                <scope line="262">
                    <scope line="264"/>
                    <scope line="266">
                        <declaration name="prop" type="String" line="267"/>
                        <scope line="270"/>
                        <scope line="273">
                            <declaration name="isDisplayLocal" type="boolean" line="274"/>
                            <declaration name="ge" type="GraphicsEnvironment" line="275"/>
                            <scope line="276"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="makeProxyFor" type="SurfaceDataProxy" line="292">
                <params>
                    <param name="srcData" type="SurfaceData"/>
                </params>
            </method>
            <method name="validatePipe" type="void" line="296">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                </params>
                <comment line="304">
                    Note: this is thread-safe since x11txpipe is the
                     second of the two pipes constructed in makePipes().
                     In the rare case we are racing against another
                     thread making new pipes, setting lazypipe is a
                     safe alternative to waiting for the other thread.                    
                </comment>
                <comment line="320">
                    Do this to init textpipe correctly; we will override the
                     other non-text pipes below
                     REMIND: we should clean this up eventually instead of
                     having this work duplicated.                    
                </comment>
                <comment line="329">
                                        
                </comment>
                <comment line="331">
                    Use X11 pipe even if DGA is available since DGA
                     text slows everything down when mixed with X11 calls                    
                </comment>
                <comment line="341">
                    Remind: may use Xrender for these when composite is
                     copy as above, or if remote X11.                    
                </comment>
                <comment line="355">
                    Use X11 pipe even if DGA is available since DGA
                     text slows everything down when mixed with X11 calls                    
                </comment>
                <comment line="387">
                    This is needed for AA text.
                     Note that even an X11TextRenderer can dispatch AA text
                     if a GlyphVector overrides the AA setting.
                     We use getRenderLoops() rather than setting solidloops
                     directly so that we get the appropriate loops in XOR mode.                    
                </comment>
                <comment line="393">
                    assert(some pipe will always be a LoopBasedPipe)                    
                </comment>
                <scope line="301">
                    <scope line="302"/>
                    <scope line="318"/>
                    <scope line="324">
                        <scope line="332"/>
                        <scope line="334"/>
                        <scope line="356"/>
                        <scope line="358"/>
                    </scope>
                    <scope line="373"/>
                    <scope line="376"/>
                    <scope line="379"/>
                    <scope line="391"/>
                </scope>
                <scope line="395"/>
            </method>
            <method name="getRenderLoops" type="RenderLoops" line="400">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                </params>
                <scope line="403"/>
            </method>
            <method name="getDeviceConfiguration" type="GraphicsConfiguration" line="409"/>
            <javadoc line="413">
                Method for instantiating a Window SurfaceData                
            </javadoc>
            <method name="createData" type="X11WindowSurfaceData" line="416">
                <params>
                    <param name="peer" type="X11ComponentPeer"/>
                </params>
                <declaration name="gc" type="X11GraphicsConfig" line="417"/>
            </method>
            <javadoc line="421">
                Method for instantiating a Pixmap SurfaceData (offscreen)                
            </javadoc>
            <method name="createData" type="X11PixmapSurfaceData" line="429">
                <params>
                    <param name="gc" type="X11GraphicsConfig"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="cm" type="ColorModel"/>
                    <param name="image" type="Image"/>
                    <param name="drawable" type="long"/>
                    <param name="transparency" type="int"/>
                </params>
            </method>
            <method name="X11SurfaceData" type="constructor" line="444">
                <params>
                    <param name="peer" type="X11ComponentPeer"/>
                    <param name="gc" type="X11GraphicsConfig"/>
                    <param name="sType" type="SurfaceType"/>
                    <param name="cm" type="ColorModel"/>
                </params>
                <scope line="451"/>
            </method>
            <method name="getGC" type="X11GraphicsConfig" line="456">
                <params>
                    <param name="peer" type="X11ComponentPeer"/>
                </params>
                <scope line="457"/>
                <scope line="459">
                    <declaration name="env" type="GraphicsEnvironment" line="460"/>
                    <declaration name="gd" type="GraphicsDevice" line="462"/>
                </scope>
            </method>
            <method name="canSourceSendExposures" type="boolean" line="467"/>
            <javadoc line="467">
                Returns a boolean indicating whether or not a copyArea from
                  the given rectangle source coordinates might be incomplete
                  and result in X11 GraphicsExposure events being generated
                  from XCopyArea.
                  This method allows the SurfaceData copyArea method to determine
                  if it needs to set the GraphicsExposures attribute of the X11 GC
                  to True or False to receive or avoid the events.                
                <return>
                    true if there is any chance that an XCopyArea from the
                      given source coordinates could produce any X11
                      Exposure events.                    
                </return>
            </javadoc>
            <method name="copyArea" type="boolean" line="483">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                </params>
                <scope line="484">
                    <scope line="485"/>
                </scope>
                <declaration name="comptype" type="CompositeType" line="490"/>
                <scope line="494">
                    <scope line="498">
                        <declaration name="needExposures" type="boolean" line="499"/>
                        <declaration name="xgc" type="long" line="500"/>
                    </scope>
                    <scope line="505"/>
                </scope>
            </method>
            <method name="getSurfaceType" type="SurfaceType" line="515">
                <params>
                    <param name="gc" type="X11GraphicsConfig"/>
                    <param name="transparency" type="int"/>
                </params>
            </method>
            <method name="getSurfaceType" type="SurfaceType" line="522">
                <params>
                    <param name="gc" type="X11GraphicsConfig"/>
                    <param name="transparency" type="int"/>
                    <param name="pixmapSurface" type="boolean"/>
                </params>
                <comment line="531">
                    4517321: We will always use ThreeByteBgr for 24 bpp
                     surfaces, regardless of the pixel masks reported by
                     X11.  Despite ambiguity in the X11 spec in how 24 bpp
                     surfaces are treated, it appears that the best
                     SurfaceType for these configurations (including
                     some Matrox Millenium and ATI Radeon boards) is
                     ThreeByteBgr.                    
                </comment>
                <comment line="547">
                    Fall through for 32 bit case                    
                </comment>
                <comment line="580">
                    fix for 4352984: Riva128 on Linux                    
                </comment>
                <declaration name="transparent" type="boolean" line="523"/>
                <declaration name="sType" type="SurfaceType" line="524"/>
                <declaration name="cm" type="ColorModel" line="525"/>
                <scope line="528">
                    <scope line="529"/>
                    <scope line="538"/>
                </scope>
                <scope line="548">
                    <scope line="551"/>
                    <scope line="553">
                        <scope line="554"/>
                        <scope line="557"/>
                    </scope>
                </scope>
                <scope line="562"/>
                <scope line="564"/>
                <scope line="578"/>
                <scope line="581"/>
                <scope line="586"/>
                <scope line="590"/>
                <scope line="599"/>
                <scope line="602"/>
                <scope line="604"/>
            </method>
            <method name="invalidate" type="void" line="616">
                <scope line="617"/>
            </method>
            <method name="XSetCopyMode" type="void" line="623"/>
            <javadoc line="623">
                The following methods and variables are used to keep the Java-level
                  context state in sync with the native X11 GC associated with this
                  X11SurfaceData object.                
            </javadoc>
            <method name="XSetXorMode" type="void" line="630"/>
            <method name="XSetForeground" type="void" line="631"/>
            <declaration name="xgc" type="long" line="633"/>
            <declaration name="validatedClip" type="Region" line="634"/>
            <declaration name="validatedXorComp" type="XORComposite" line="635"/>
            <declaration name="xorpixelmod" type="int" line="636"/>
            <declaration name="validatedPixel" type="int" line="637"/>
            <declaration name="validatedExposures" type="boolean" line="638"/>
            <method name="getRenderGC" type="long" line="643">
                <params>
                    <param name="clip" type="Region"/>
                    <param name="compState" type="int"/>
                    <param name="comp" type="Composite"/>
                    <param name="pixel" type="int"/>
                </params>
            </method>
            <method name="getBlitGC" type="long" line="647">
                <params>
                    <param name="clip" type="Region"/>
                    <param name="needExposures" type="boolean"/>
                </params>
            </method>
            <method name="getGC" type="long" line="655">
                <params>
                    <param name="clip" type="Region"/>
                    <param name="compState" type="int"/>
                    <param name="comp" type="Composite"/>
                    <param name="pixel" type="int"/>
                    <param name="needExposures" type="boolean"/>
                </params>
                <comment line="657">
                    assert SunToolkit.isAWTLockHeldByCurrentThread();                    
                </comment>
                <comment line="663">
                    validate clip                    
                </comment>
                <comment line="676">
                    validate composite                    
                </comment>
                <comment line="691">
                    validate pixel                    
                </comment>
                <scope line="658"/>
                <scope line="663">
                    <scope line="665"/>
                    <scope line="670"/>
                </scope>
                <scope line="676">
                    <scope line="677"/>
                </scope>
                <scope line="682">
                    <scope line="683"/>
                </scope>
                <scope line="692"/>
                <scope line="697"/>
            </method>
            <method name="makePipes" type="void" line="705">
                <scope line="706">
                    <scope line="708"/>
                    <scope line="710"/>
                </scope>
            </method>
            <class name="X11WindowSurfaceData" line="718">
                <extends class="X11SurfaceData"/>
                <method name="X11WindowSurfaceData" type="constructor" line="721">
                    <params>
                        <param name="peer" type="X11ComponentPeer"/>
                        <param name="gc" type="X11GraphicsConfig"/>
                        <param name="sType" type="SurfaceType"/>
                    </params>
                    <scope line="723"/>
                </method>
                <method name="getReplacement" type="SurfaceData" line="728"/>
                <method name="getBounds" type="Rectangle" line="732">
                    <declaration name="r" type="Rectangle" line="733"/>
                </method>
                <method name="canSourceSendExposures" type="boolean" line="739">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                </method>
                <javadoc line="743">
                    Returns destination Component associated with this SurfaceData.                    
                </javadoc>
                <method name="getDestination" type="Object" line="746"/>
            </class>
            <class name="X11PixmapSurfaceData" line="751">
                <extends class="X11SurfaceData"/>
                <declaration name="offscreenImage" type="Image" line="753"/>
                <declaration name="width" type="int" line="754"/>
                <declaration name="height" type="int" line="755"/>
                <declaration name="transparency" type="int" line="756"/>
                <method name="X11PixmapSurfaceData" type="constructor" line="763">
                    <params>
                        <param name="gc" type="X11GraphicsConfig"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                        <param name="image" type="Image"/>
                        <param name="sType" type="SurfaceType"/>
                        <param name="cm" type="ColorModel"/>
                        <param name="drawable" type="long"/>
                        <param name="transparency" type="int"/>
                    </params>
                </method>
                <method name="getReplacement" type="SurfaceData" line="773"/>
                <javadoc line="777">
                    Need this since the surface data is created with
                      the color model of the target GC, which is always
                      opaque. But in SunGraphics2D.blitSD we choose loops
                      based on the transparency on the source SD, so
                      it could choose wrong loop (blit instead of blitbg,
                      for example).                    
                </javadoc>
                <method name="getTransparency" type="int" line="785"/>
                <method name="getBounds" type="Rectangle" line="789"/>
                <method name="canSourceSendExposures" type="boolean" line="794">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                </method>
                <method name="flush" type="void" line="798">
                    <comment line="800">
                        We need to invalidate the surface before disposing the
                         native Drawable and GC.  This way if an application tries
                         to render to an already flushed X11SurfaceData, we will notice
                         in the validate() method above that it has been invalidated,
                         and we will avoid using those native resources that have
                         already been disposed.                        
                    </comment>
                </method>
                <javadoc line="811">
                    Returns destination Image associated with this SurfaceData.                    
                </javadoc>
                <method name="getDestination" type="Object" line="814"/>
            </class>
            <declaration name="lazypipe" type="LazyPipe" line="819"/>
            <class name="LazyPipe" line="821">
                <extends class="ValidatePipe"/>
                <method name="validate" type="boolean" line="822">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                    </params>
                    <declaration name="xsd" type="X11SurfaceData" line="823"/>
                    <scope line="824"/>
                </method>
            </class>
        </class>
    </source>