<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.x11">
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.ImageCapabilities"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="sun.awt.X11GraphicsConfig"/>
        <import package="sun.awt.image.SunVolatileImage"/>
        <import package="sun.awt.image.VolatileSurfaceManager"/>
        <import package="sun.java2d.SurfaceData"/>
        <class name="X11VolatileSurfaceManager" line="37">
            <extends class="VolatileSurfaceManager"/>
            <javadoc line="37">
                X11 platform implementation of the VolatileSurfaceManager class.
                  The class attempts to create and use a pixmap-based SurfaceData
                  object (X11PixmapSurfaceData).
                  If this object cannot be created or re-created as necessary, the
                  class falls back to a system memory based SurfaceData object
                  (BufImgSurfaceData) that will be used until the accelerated
                  SurfaceData can be restored.                
            </javadoc>
            <declaration name="accelerationEnabled" type="boolean" line="48"/>
            <method name="X11VolatileSurfaceManager" type="constructor" line="50">
                <params>
                    <param name="vImg" type="SunVolatileImage"/>
                    <param name="context" type="Object"/>
                </params>
                <comment line="53">
                    We only accelerated opaque vImages currently                    
                </comment>
                <comment line="58">
                    if we&apos;re wrapping a backbuffer drawable, we must ensure that                    
                </comment>
                <comment line="59">
                    the accelerated surface is initialized up front, regardless                    
                </comment>
                <comment line="60">
                    of whether acceleration is enabled. But we need to set                    
                </comment>
                <comment line="61">
                    the  accelerationEnabled field to true to reflect that this                    
                </comment>
                <comment line="62">
                    SM is actually accelerated.                    
                </comment>
                <comment line="68">
                    release the system memory backup surface, as we won&apos;t be                    
                </comment>
                <comment line="69">
                    needing it in this case                    
                </comment>
                <scope line="57">
                    <scope line="67"/>
                </scope>
            </method>
            <method name="isAccelerationEnabled" type="boolean" line="75"/>
            <javadoc line="79">
                Create a pixmap-based SurfaceData object                
            </javadoc>
            <method name="initAcceleratedSurface" type="SurfaceData" line="82">
                <declaration name="sData" type="SurfaceData" line="83"/>
                <scope line="85">
                    <declaration name="gc" type="X11GraphicsConfig" line="86"/>
                    <declaration name="cm" type="ColorModel" line="87"/>
                    <declaration name="drawable" type="long" line="88"/>
                    <scope line="89"/>
                </scope>
                <scope line="97"/>
                <scope line="99"/>
            </method>
            <method name="isConfigValid" type="boolean" line="106">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
                <comment line="107">
                    REMIND: we might be too paranoid here, requiring that                    
                </comment>
                <comment line="108">
                    the GC be exactly the same as the original one.  The                    
                </comment>
                <comment line="109">
                    real answer is one that guarantees that pixmap copies                    
                </comment>
                <comment line="110">
                    will be correct (which requires like bit depths and                    
                </comment>
                <comment line="111">
                    formats).                    
                </comment>
            </method>
            <javadoc line="115">
                Need to override the default behavior because Pixmaps-based
                  images are accelerated but not volatile.                
            </javadoc>
            <method name="getCapabilities" type="ImageCapabilities" line="120">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
                <comment line="122">
                    accelerated but not volatile                    
                </comment>
                <comment line="125">
                    neither accelerated nor volatile                    
                </comment>
                <scope line="121"/>
            </method>
        </class>
    </source>