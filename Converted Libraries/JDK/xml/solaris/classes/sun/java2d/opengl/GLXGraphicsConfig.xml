<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.opengl">
        <import package="java.awt.AWTException"/>
        <import package="java.awt.BufferCapabilities"/>
        <import package="java.awt.BufferCapabilities.FlipContents"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.ImageCapabilities"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="sun.awt.X11ComponentPeer"/>
        <import package="sun.awt.X11GraphicsConfig"/>
        <import package="sun.awt.X11GraphicsDevice"/>
        <import package="sun.awt.X11GraphicsEnvironment"/>
        <import package="sun.awt.image.OffScreenImage"/>
        <import package="sun.awt.image.SunVolatileImage"/>
        <import package="sun.awt.image.SurfaceManager"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.Surface"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.pipe.hw.AccelSurface"/>
        <import package="sun.java2d.pipe.hw.AccelTypedVolatileImage"/>
        <import package="sun.java2d.pipe.hw.ContextCapabilities"/>
        <import package="sun.java2d.opengl.OGLSurfaceData"/>
        <import package="sun.java2d.opengl.OGLContext"/>
        <import package="sun.java2d.opengl.OGLContext.OGLContextCaps"/>
        <import package="sun.java2d.opengl.GLXSurfaceData.GLXVSyncOffScreenSurfaceData"/>
        <import package="sun.java2d.pipe.hw.AccelDeviceEventListener"/>
        <import package="sun.java2d.pipe.hw.AccelDeviceEventNotifier"/>
        <class name="GLXGraphicsConfig" line="65">
            <extends class="X11GraphicsConfig"/>
            <comment line="223">
                The following methods are invoked from MToolkit or XToolkit.java and
                 X11ComponentPeer.java rather than having the X11-dependent
                 implementations hardcoded in those classes.  This way the appropriate
                 actions are taken based on the peer&apos;s GraphicsConfig, whether it is
                 an X11GraphicsConfig or a GLXGraphicsConfig.                
            </comment>
            <comment line="255">
                The following methods correspond to the multibuffering methods in
                 X11ComponentPeer.java...                
            </comment>
            <implements interface="OGLGraphicsConfig"/>
            <declaration name="imageCaps" type="ImageCapabilities" line="69"/>
            <declaration name="bufferCaps" type="BufferCapabilities" line="70"/>
            <declaration name="pConfigInfo" type="long" line="71"/>
            <declaration name="oglCaps" type="ContextCapabilities" line="72"/>
            <declaration name="context" type="OGLContext" line="73"/>
            <method name="getGLXConfigInfo" type="long" line="75"/>
            <method name="getOGLCapabilities" type="int" line="76"/>
            <method name="initConfig" type="void" line="77"/>
            <method name="GLXGraphicsConfig" type="constructor" line="81">
                <params>
                    <param name="device" type="X11GraphicsDevice"/>
                    <param name="visualnum" type="int"/>
                    <param name="configInfo" type="long"/>
                    <param name="oglCaps" type="ContextCapabilities"/>
                </params>
            </method>
            <method name="getProxyKey" type="Object" line="91"/>
            <method name="createManagedSurface" type="SurfaceData" line="96">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="transparency" type="int"/>
                </params>
            </method>
            <method name="getConfig" type="GLXGraphicsConfig" line="105">
                <params>
                    <param name="device" type="X11GraphicsDevice"/>
                    <param name="visualnum" type="int"/>
                </params>
                <comment line="116">
                    getGLXConfigInfo() creates and destroys temporary
                     surfaces/contexts, so we should first invalidate the current
                     Java-level context and flush the queue...                    
                </comment>
                <scope line="106"/>
                <declaration name="cfginfo" type="long" line="110"/>
                <declaration name="ids" type="String" line="111"/>
                <declaration name="rq" type="OGLRenderQueue" line="112"/>
                <scope line="114">
                    <declaration name="action" type="GLXGetConfigInfo" line="119"/>
                    <scope line="123">
                        <anonymous_class line="125">
                            <method name="run" type="void" line="126"/>
                        </anonymous_class>
                    </scope>
                </scope>
                <scope line="131"/>
                <scope line="134"/>
                <declaration name="oglCaps" type="int" line="138"/>
                <declaration name="caps" type="ContextCapabilities" line="139"/>
            </method>
            <class name="GLXGetConfigInfo" line="144">
                <implements interface="Runnable"/>
                <javadoc line="144">
                    This is a small helper class that allows us to execute
                      getGLXConfigInfo() on the queue flushing thread.                    
                </javadoc>
                <declaration name="screen" type="int" line="149"/>
                <declaration name="visual" type="int" line="150"/>
                <declaration name="cfginfo" type="long" line="151"/>
                <method name="GLXGetConfigInfo" type="constructor" line="152">
                    <params>
                        <param name="screen" type="int"/>
                        <param name="visual" type="int"/>
                    </params>
                </method>
                <method name="run" type="void" line="156"/>
                <method name="getConfigInfo" type="long" line="159"/>
            </class>
            <javadoc line="164">
                Returns true if the provided capability bit is present for this config.
                  See OGLContext.java for a list of supported capabilities.                
            </javadoc>
            <method name="isCapPresent" type="boolean" line="169">
                <params>
                    <param name="cap" type="int"/>
                </params>
            </method>
            <method name="getNativeConfigInfo" type="long" line="174"/>
            <javadoc line="178">
                {@inheritDoc}                
                <see>
                    sun.java2d.pipe.hw.BufferedContextProvider#getContext                    
                </see>
            </javadoc>
            <method name="getContext" type="OGLContext" line="184"/>
            <method name="createCompatibleImage" type="BufferedImage" line="189">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="model" type="ColorModel" line="190"/>
                <declaration name="raster" type="WritableRaster" line="191"/>
            </method>
            <method name="getColorModel" type="ColorModel" line="198">
                <params>
                    <param name="transparency" type="int"/>
                </params>
                <comment line="202">
                    REMIND: once the ColorModel spec is changed, this should be
                             an opaque premultiplied DCM...                    
                </comment>
                <declaration name="cs" type="ColorSpace" line="207"/>
            </method>
            <method name="toString" type="String" line="216"/>
            <javadoc line="230">
                Creates a new SurfaceData that will be associated with the given
                  X11ComponentPeer.                
            </javadoc>
            <method name="createSurfaceData" type="SurfaceData" line="235">
                <params>
                    <param name="peer" type="X11ComponentPeer"/>
                </params>
            </method>
            <javadoc line="239">
                Creates a new hidden-acceleration image of the given width and height
                  that is associated with the target Component.                
            </javadoc>
            <method name="createAcceleratedImage" type="Image" line="246">
                <params>
                    <param name="target" type="Component"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="model" type="ColorModel" line="247"/>
                <declaration name="wr" type="WritableRaster" line="248"/>
            </method>
            <javadoc line="259">
                Attempts to create a GLX-based backbuffer for the given peer.  If
                  the requested configuration is not natively supported, an AWTException
                  is thrown.  Otherwise, if the backbuffer creation is successful, a
                  value of 1 is returned.                
            </javadoc>
            <method name="createBackBuffer" type="long" line="269">
                <params>
                    <param name="peer" type="X11ComponentPeer"/>
                    <param name="numBuffers" type="int"/>
                    <param name="caps" type="BufferCapabilities"/>
                </params>
                <comment line="283">
                    non-zero return value means backbuffer creation was successful
                     (checked in X11ComponentPeer.flip(), etc.)                    
                </comment>
                <scope line="270"/>
                <declaration name="configCaps" type="BufferCapabilities" line="274"/>
                <scope line="275"/>
                <scope line="278"/>
            </method>
            <javadoc line="287">
                Destroys the backbuffer object represented by the given handle value.                
            </javadoc>
            <method name="destroyBackBuffer" type="void" line="291">
                <params>
                    <param name="backBuffer" type="long"/>
                </params>
            </method>
            <javadoc line="294">
                Creates a VolatileImage that essentially wraps the target Component&apos;s
                  backbuffer (the provided backbuffer handle is essentially ignored).                
            </javadoc>
            <method name="createBackBufferImage" type="VolatileImage" line="301">
                <params>
                    <param name="target" type="Component"/>
                    <param name="backBuffer" type="long"/>
                </params>
            </method>
            <javadoc line="307">
                Performs the native GLX flip operation for the given target Component.                
            </javadoc>
            <method name="flip" type="void" line="315">
                <params>
                    <param name="peer" type="X11ComponentPeer"/>
                    <param name="target" type="Component"/>
                    <param name="xBackBuffer" type="VolatileImage"/>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                    <param name="flipAction" type="BufferCapabilities.FlipContents"/>
                </params>
                <comment line="345">
                    not supported by GLX...                    
                </comment>
                <scope line="316">
                    <declaration name="vsm" type="SurfaceManager" line="317"/>
                    <declaration name="sd" type="SurfaceData" line="318"/>
                    <scope line="320">
                        <declaration name="vsd" type="GLXVSyncOffScreenSurfaceData" line="321"/>
                        <declaration name="bbsd" type="SurfaceData" line="323"/>
                        <declaration name="bbg" type="Graphics2D" line="324"/>
                        <scope line="326"/>
                        <scope line="328"/>
                    </scope>
                    <scope line="331">
                        <declaration name="g" type="Graphics" line="332"/>
                        <scope line="333"/>
                        <scope line="338"/>
                    </scope>
                </scope>
                <scope line="343"/>
                <scope line="350">
                    <declaration name="g" type="Graphics" line="351"/>
                    <scope line="352"/>
                    <scope line="357"/>
                </scope>
            </method>
            <class name="GLXBufferCaps" line="363">
                <extends class="BufferCapabilities"/>
                <method name="GLXBufferCaps" type="constructor" line="364">
                    <params>
                        <param name="dblBuf" type="boolean"/>
                    </params>
                </method>
            </class>
            <method name="getBufferCapabilities" type="BufferCapabilities" line="371">
                <scope line="372"/>
            </method>
            <class name="GLXImageCaps" line="378">
                <extends class="ImageCapabilities"/>
                <method name="GLXImageCaps" type="constructor" line="379"/>
                <method name="isTrueVolatile" type="boolean" line="382"/>
            </class>
            <method name="getImageCapabilities" type="ImageCapabilities" line="388"/>
            <javadoc line="392">
                {@inheritDoc}                
                <see>
                    sun.java2d.pipe.hw.AccelGraphicsConfig#createCompatibleVolatileImage                    
                </see>
            </javadoc>
            <method name="createCompatibleVolatileImage" type="VolatileImage" line="401">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="transparency" type="int"/>
                    <param name="type" type="int"/>
                </params>
                <scope line="404"/>
                <scope line="408">
                    <scope line="409"/>
                </scope>
                <scope line="412">
                    <declaration name="isOpaque" type="boolean" line="413"/>
                    <scope line="414"/>
                </scope>
                <declaration name="vi" type="SunVolatileImage" line="419"/>
                <declaration name="sd" type="Surface" line="421"/>
                <scope line="424"/>
            </method>
            <javadoc line="432">
                {@inheritDoc}                
                <see>
                    sun.java2d.pipe.hw.AccelGraphicsConfig#getContextCapabilities                    
                </see>
            </javadoc>
            <method name="getContextCapabilities" type="ContextCapabilities" line="438"/>
            <method name="addDeviceEventListener" type="void" line="443">
                <params>
                    <param name="l" type="AccelDeviceEventListener"/>
                </params>
            </method>
            <method name="removeDeviceEventListener" type="void" line="448">
                <params>
                    <param name="l" type="AccelDeviceEventListener"/>
                </params>
            </method>
        </class>
    </source>