<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.opengl">
        <import package="java.awt.AWTException"/>
        <import package="java.awt.BufferCapabilities"/>
        <import package="java.awt.BufferCapabilities.FlipContents"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.ImageCapabilities"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="sun.awt.X11ComponentPeer"/>
        <import package="sun.awt.X11GraphicsConfig"/>
        <import package="sun.awt.X11GraphicsDevice"/>
        <import package="sun.awt.X11GraphicsEnvironment"/>
        <import package="sun.awt.image.OffScreenImage"/>
        <import package="sun.awt.image.SunVolatileImage"/>
        <import package="sun.awt.image.SurfaceManager"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.Surface"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.pipe.hw.AccelSurface"/>
        <import package="sun.java2d.pipe.hw.AccelTypedVolatileImage"/>
        <import package="sun.java2d.pipe.hw.ContextCapabilities"/>
        <import package="sun.java2d.opengl.OGLSurfaceData"/>
        <import package="sun.java2d.opengl.OGLContext"/>
        <import package="sun.java2d.opengl.OGLContext.OGLContextCaps"/>
        <import package="sun.java2d.opengl.GLXSurfaceData.GLXVSyncOffScreenSurfaceData"/>
        <import package="sun.java2d.pipe.hw.AccelDeviceEventListener"/>
        <import package="sun.java2d.pipe.hw.AccelDeviceEventNotifier"/>
        <class name="GLXGraphicsConfig" line="38">
            <extends class="X11GraphicsConfig"/>
            <implements interface="OGLGraphicsConfig"/>
            <declaration name="imageCaps" type="ImageCapabilities" line="39"/>
            <declaration name="bufferCaps" type="BufferCapabilities" line="40"/>
            <declaration name="pConfigInfo" type="long" line="41"/>
            <declaration name="oglCaps" type="ContextCapabilities" line="42"/>
            <declaration name="context" type="OGLContext" line="43"/>
            <method name="getGLXConfigInfo" type="long" line="44"/>
            <method name="getOGLCapabilities" type="int" line="45"/>
            <method name="initConfig" type="void" line="46"/>
            <method name="GLXGraphicsConfig" type="constructor" line="47">
                <params>
                    <param name="device" type="X11GraphicsDevice"/>
                    <param name="visualnum" type="int"/>
                    <param name="configInfo" type="long"/>
                    <param name="oglCaps" type="ContextCapabilities"/>
                </params>
            </method>
            <method name="getProxyKey" type="Object" line="54"/>
            <method name="createManagedSurface" type="SurfaceData" line="57">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="transparency" type="int"/>
                </params>
            </method>
            <method name="getConfig" type="GLXGraphicsConfig" line="60">
                <params>
                    <param name="device" type="X11GraphicsDevice"/>
                    <param name="visualnum" type="int"/>
                </params>
                <scope line="61"/>
                <declaration name="cfginfo" type="long" line="64"/>
                <declaration name="ids" type="String" line="65"/>
                <declaration name="rq" type="OGLRenderQueue" line="66"/>
                <scope line="68">
                    <declaration name="action" type="GLXGetConfigInfo" line="70"/>
                    <scope line="73">
                        <anonymous_class line="75">
                            <method name="run" type="void" line="76"/>
                        </anonymous_class>
                    </scope>
                </scope>
                <scope line="83"/>
                <scope line="86"/>
                <declaration name="oglCaps" type="int" line="89"/>
                <declaration name="caps" type="ContextCapabilities" line="90"/>
            </method>
            <class name="GLXGetConfigInfo" line="93">
                <implements interface="Runnable"/>
                <javadoc line="93">
                    This is a small helper class that allows us to execute
                      getGLXConfigInfo() on the queue flushing thread.                    
                </javadoc>
                <declaration name="screen" type="int" line="98"/>
                <declaration name="visual" type="int" line="99"/>
                <declaration name="cfginfo" type="long" line="100"/>
                <method name="GLXGetConfigInfo" type="constructor" line="101">
                    <params>
                        <param name="screen" type="int"/>
                        <param name="visual" type="int"/>
                    </params>
                </method>
                <method name="run" type="void" line="105"/>
                <method name="getConfigInfo" type="long" line="108"/>
            </class>
            <javadoc line="112">
                Returns true if the provided capability bit is present for this config.
                  See OGLContext.java for a list of supported capabilities.                
            </javadoc>
            <method name="isCapPresent" type="boolean" line="116">
                <params>
                    <param name="cap" type="int"/>
                </params>
            </method>
            <method name="getNativeConfigInfo" type="long" line="119"/>
            <javadoc line="122">
                {@inheritDoc}                
                <see>
                    sun.java2d.pipe.hw.BufferedContextProvider#getContext                    
                </see>
            </javadoc>
            <method name="getContext" type="OGLContext" line="126"/>
            <method name="createCompatibleImage" type="BufferedImage" line="129">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="model" type="ColorModel" line="130"/>
                <declaration name="raster" type="WritableRaster" line="131"/>
            </method>
            <method name="getColorModel" type="ColorModel" line="134">
                <params>
                    <param name="transparency" type="int"/>
                </params>
                <declaration name="cs" type="ColorSpace" line="141"/>
            </method>
            <method name="toString" type="String" line="147"/>
            <javadoc line="150">
                Creates a new SurfaceData that will be associated with the given
                  X11ComponentPeer.                
            </javadoc>
            <method name="createSurfaceData" type="SurfaceData" line="154">
                <params>
                    <param name="peer" type="X11ComponentPeer"/>
                </params>
            </method>
            <javadoc line="157">
                Creates a new hidden-acceleration image of the given width and height
                  that is associated with the target Component.                
            </javadoc>
            <method name="createAcceleratedImage" type="Image" line="161">
                <params>
                    <param name="target" type="Component"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="model" type="ColorModel" line="162"/>
                <declaration name="wr" type="WritableRaster" line="163"/>
            </method>
            <javadoc line="166">
                Attempts to create a GLX-based backbuffer for the given peer.  If
                  the requested configuration is not natively supported, an AWTException
                  is thrown.  Otherwise, if the backbuffer creation is successful, a
                  value of 1 is returned.                
            </javadoc>
            <method name="createBackBuffer" type="long" line="172">
                <params>
                    <param name="peer" type="X11ComponentPeer"/>
                    <param name="numBuffers" type="int"/>
                    <param name="caps" type="BufferCapabilities"/>
                </params>
                <scope line="173"/>
                <declaration name="configCaps" type="BufferCapabilities" line="176"/>
                <scope line="177"/>
                <scope line="180"/>
            </method>
            <javadoc line="185">
                Destroys the backbuffer object represented by the given handle value.                
            </javadoc>
            <method name="destroyBackBuffer" type="void" line="188">
                <params>
                    <param name="backBuffer" type="long"/>
                </params>
            </method>
            <javadoc line="190">
                Creates a VolatileImage that essentially wraps the target Component&apos;s
                  backbuffer (the provided backbuffer handle is essentially ignored).                
            </javadoc>
            <method name="createBackBufferImage" type="VolatileImage" line="194">
                <params>
                    <param name="target" type="Component"/>
                    <param name="backBuffer" type="long"/>
                </params>
            </method>
            <javadoc line="197">
                Performs the native GLX flip operation for the given target Component.                
            </javadoc>
            <method name="flip" type="void" line="200">
                <params>
                    <param name="peer" type="X11ComponentPeer"/>
                    <param name="target" type="Component"/>
                    <param name="xBackBuffer" type="VolatileImage"/>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                    <param name="flipAction" type="BufferCapabilities.FlipContents"/>
                </params>
                <scope line="201">
                    <declaration name="vsm" type="SurfaceManager" line="202"/>
                    <declaration name="sd" type="SurfaceData" line="203"/>
                    <scope line="204">
                        <declaration name="vsd" type="GLXVSyncOffScreenSurfaceData" line="205"/>
                        <declaration name="bbsd" type="SurfaceData" line="206"/>
                        <declaration name="bbg" type="Graphics2D" line="207"/>
                        <scope line="208"/>
                        <scope line="211"/>
                    </scope>
                    <scope line="215">
                        <declaration name="g" type="Graphics" line="216"/>
                        <scope line="217"/>
                        <scope line="220"/>
                    </scope>
                </scope>
                <scope line="226"/>
                <scope line="230">
                    <declaration name="g" type="Graphics" line="231"/>
                    <scope line="232"/>
                    <scope line="236"/>
                </scope>
            </method>
            <class name="GLXBufferCaps" line="241">
                <extends class="BufferCapabilities"/>
                <method name="GLXBufferCaps" type="constructor" line="242">
                    <params>
                        <param name="dblBuf" type="boolean"/>
                    </params>
                </method>
            </class>
            <method name="getBufferCapabilities" type="BufferCapabilities" line="246">
                <scope line="247"/>
            </method>
            <class name="GLXImageCaps" line="252">
                <extends class="ImageCapabilities"/>
                <method name="GLXImageCaps" type="constructor" line="253"/>
                <method name="isTrueVolatile" type="boolean" line="256"/>
            </class>
            <method name="getImageCapabilities" type="ImageCapabilities" line="260"/>
            <javadoc line="263">
                {@inheritDoc}                
                <see>
                    sun.java2d.pipe.hw.AccelGraphicsConfig#createCompatibleVolatileImage                    
                </see>
            </javadoc>
            <method name="createCompatibleVolatileImage" type="VolatileImage" line="267">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="transparency" type="int"/>
                    <param name="type" type="int"/>
                </params>
                <scope line="268"/>
                <scope line="271">
                    <scope line="272"/>
                </scope>
                <scope line="276">
                    <declaration name="isOpaque" type="boolean" line="277"/>
                    <scope line="278"/>
                </scope>
                <declaration name="vi" type="SunVolatileImage" line="282"/>
                <declaration name="sd" type="Surface" line="283"/>
                <scope line="284"/>
            </method>
            <javadoc line="290">
                {@inheritDoc}                
                <see>
                    sun.java2d.pipe.hw.AccelGraphicsConfig#getContextCapabilities                    
                </see>
            </javadoc>
            <method name="getContextCapabilities" type="ContextCapabilities" line="294"/>
            <method name="addDeviceEventListener" type="void" line="297">
                <params>
                    <param name="l" type="AccelDeviceEventListener"/>
                </params>
            </method>
            <method name="removeDeviceEventListener" type="void" line="300">
                <params>
                    <param name="l" type="AccelDeviceEventListener"/>
                </params>
            </method>
        </class>
    </source>