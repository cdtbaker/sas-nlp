<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.io.IOException"/>
        <import package="java.nio.channels"/>
        <import package="java.nio.channels.spi"/>
        <import package="java.util"/>
        <import package="sun.misc"/>
        <class name="EPollSelectorImpl" line="34">
            <extends class="SelectorImpl"/>
            <comment line="43">
                File descriptors used for interrupt                
            </comment>
            <comment line="47">
                The poll object                
            </comment>
            <comment line="50">
                Maps from file descriptors to keys                
            </comment>
            <comment line="53">
                True if this Selector has been closed                
            </comment>
            <comment line="56">
                Lock for interrupt triggering and clearing                
            </comment>
            <javadoc line="34">
                An implementation of Selector for Linux 2.6+ kernels that uses
                  the epoll event notification facility.                
            </javadoc>
            <declaration name="fd0" type="int" line="43"/>
            <declaration name="fd1" type="int" line="44"/>
            <declaration name="pollWrapper" type="EPollArrayWrapper" line="47"/>
            <declaration name="fdToKey" type="Map&lt;Integer,SelectionKeyImpl&gt;" line="50"/>
            <declaration name="closed" type="boolean" line="53"/>
            <declaration name="interruptLock" type="Object" line="56"/>
            <declaration name="interruptTriggered" type="boolean" line="57"/>
            <javadoc line="59">
                Package private constructor called by factory method in
                  the abstract superclass Selector.                
            </javadoc>
            <method name="EPollSelectorImpl" type="constructor" line="63">
                <params>
                    <param name="sp" type="SelectorProvider"/>
                </params>
                <declaration name="pipeFds" type="long" line="65"/>
            </method>
            <method name="doSelect" type="int" line="75">
                <params>
                    <param name="timeout" type="long"/>
                </params>
                <comment line="89">
                    Clear the wakeup pipe                    
                </comment>
                <scope line="79"/>
                <scope line="82"/>
                <declaration name="numKeysUpdated" type="int" line="86"/>
                <scope line="87">
                    <scope line="90"/>
                </scope>
            </method>
            <javadoc line="99">
                Update the keys whose fd&apos;s have been selected by the epoll.
                  Add the ready keys to the ready queue.                
            </javadoc>
            <method name="updateSelectedKeys" type="int" line="103">
                <comment line="110">
                    ski is null in the case of an interrupt                    
                </comment>
                <declaration name="entries" type="int" line="104"/>
                <declaration name="numKeysUpdated" type="int" line="105"/>
                <scope line="106">
                    <declaration name="nextFD" type="int" line="107"/>
                    <declaration name="ski" type="SelectionKeyImpl" line="108"/>
                    <scope line="110">
                        <declaration name="rOps" type="int" line="111"/>
                        <scope line="112">
                            <scope line="113"/>
                        </scope>
                        <scope line="116">
                            <scope line="118"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="implClose" type="void" line="128">
                <comment line="134">
                    prevent further wakeup                    
                </comment>
                <comment line="143">
                    it is possible                    
                </comment>
                <comment line="146">
                    Deregister channels                    
                </comment>
                <scope line="134"/>
                <declaration name="i" type="Iterator&lt;SelectionKey&gt;" line="146"/>
                <scope line="147">
                    <declaration name="ski" type="SelectionKeyImpl" line="148"/>
                    <declaration name="selch" type="SelectableChannel" line="150"/>
                </scope>
            </method>
            <method name="implRegister" type="void" line="160">
                <params>
                    <param name="ski" type="SelectionKeyImpl"/>
                </params>
                <declaration name="ch" type="SelChImpl" line="163"/>
            </method>
            <method name="implDereg" type="void" line="169">
                <params>
                    <param name="ski" type="SelectionKeyImpl"/>
                </params>
                <declaration name="ch" type="SelChImpl" line="171"/>
                <declaration name="fd" type="int" line="172"/>
                <declaration name="selch" type="SelectableChannel" line="179"/>
            </method>
            <method name="putEventOps" type="void" line="184">
                <params>
                    <param name="sk" type="SelectionKeyImpl"/>
                    <param name="ops" type="int"/>
                </params>
            </method>
            <method name="wakeup" type="Selector" line="190">
                <scope line="191">
                    <scope line="192"/>
                </scope>
            </method>
            <scope line="200"/>
        </class>
    </source>