<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.nio.channels"/>
        <import package="java.util.concurrent"/>
        <import package="java.io.IOException"/>
        <import package="java.io.FileDescriptor"/>
        <import package="java.net.InetSocketAddress"/>
        <import package="java.util.concurrent.atomic.AtomicBoolean"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <class name="UnixAsynchronousServerSocketChannelImpl" line="38">
            <extends class="AsynchronousServerSocketChannelImpl"/>
            <comment line="52">
                flag to indicate an accept is outstanding                
            </comment>
            <comment line="58">
                used to ensure that the context for an asynchronous accept is visible
                 the pooled thread that handles the I/O event                
            </comment>
            <comment line="62">
                pending accept                
            </comment>
            <comment line="68">
                context for permission check when security manager set                
            </comment>
            <comment line="336">
                -- Native methods --                
            </comment>
            <comment line="340">
                Accepts a new connection, setting the given file descriptor to refer to
                 the new socket and setting isaa[0] to the socket&apos;s remote address.
                 Returns 1 on success, or IOStatus.UNAVAILABLE.                
            </comment>
            <implements interface="Port.PollableChannel"/>
            <javadoc line="38">
                Unix implementation of AsynchronousServerSocketChannel                
            </javadoc>
            <declaration name="nd" type="NativeDispatcher" line="46"/>
            <declaration name="port" type="Port" line="48"/>
            <declaration name="fdVal" type="int" line="49"/>
            <declaration name="accepting" type="AtomicBoolean" line="52"/>
            <method name="enableAccept" type="void" line="53"/>
            <declaration name="updateLock" type="Object" line="59"/>
            <declaration name="acceptPending" type="boolean" line="62"/>
            <declaration name="acceptHandler" type="CompletionHandler&amp;lt;AsynchronousSocketChannel,Object&amp;gt;" line="63"/>
            <declaration name="acceptAttachment" type="Object" line="64"/>
            <declaration name="acceptFuture" type="PendingFuture&amp;lt;AsynchronousSocketChannel,Object&amp;gt;" line="65"/>
            <declaration name="acceptAcc" type="AccessControlContext" line="68"/>
            <method name="UnixAsynchronousServerSocketChannelImpl" type="constructor" line="73">
                <params>
                    <param name="port" type="Port"/>
                </params>
                <comment line="80">
                    prevent leak                    
                </comment>
                <comment line="86">
                    add mapping from file descriptor to this channel                    
                </comment>
                <scope line="76"/>
                <scope line="78"/>
            </method>
            <method name="implClose" type="void" line="90">
                <comment line="92">
                    remove the mapping                    
                </comment>
                <comment line="95">
                    close file descriptor                    
                </comment>
                <comment line="98">
                    if there is a pending accept then complete it                    
                </comment>
                <comment line="104">
                    no pending accept                    
                </comment>
                <comment line="111">
                    discard the stack trace as otherwise it may appear that implClose
                     has thrown the exception.                    
                </comment>
                <comment line="118">
                    invoke by submitting task rather than directly                    
                </comment>
                <declaration name="handler" type="CompletionHandler&amp;lt;AsynchronousSocketChannel,Object&amp;gt;" line="98"/>
                <declaration name="att" type="Object" line="99"/>
                <declaration name="future" type="PendingFuture&amp;lt;AsynchronousSocketChannel,Object&amp;gt;" line="100"/>
                <scope line="101"/>
                <declaration name="x" type="AsynchronousCloseException" line="112"/>
                <scope line="114"/>
                <scope line="116"/>
            </method>
            <method name="group" type="AsynchronousChannelGroupImpl" line="123"/>
            <javadoc line="127">
                Invoked by event handling thread when listener socket is polled                
            </javadoc>
            <method name="onEvent" type="void" line="131">
                <params>
                    <param name="events" type="int"/>
                    <param name="mayInvokeDirect" type="boolean"/>
                </params>
                <comment line="135">
                    may have been grabbed by asynchronous close                    
                </comment>
                <comment line="139">
                    attempt to accept connection                    
                </comment>
                <comment line="147">
                    spurious wakeup, is this possible?                    
                </comment>
                <comment line="164">
                    Connection accepted so finish it when not holding locks.                    
                </comment>
                <comment line="176">
                    copy field befores accept is re-renabled                    
                </comment>
                <comment line="181">
                    re-enable accepting and invoke handler                    
                </comment>
                <comment line="186">
                    if an async cancel has already cancelled the operation then
                     close the new channel so as to free resources                    
                </comment>
                <scope line="132"/>
                <declaration name="newfd" type="FileDescriptor" line="139"/>
                <declaration name="isaa" type="InetSocketAddress[]" line="140"/>
                <declaration name="exc" type="Throwable" line="141"/>
                <scope line="142">
                    <declaration name="n" type="int" line="144"/>
                    <scope line="147">
                        <scope line="148"/>
                    </scope>
                </scope>
                <scope line="155"/>
                <scope line="159"/>
                <declaration name="child" type="AsynchronousSocketChannel" line="164"/>
                <scope line="165">
                    <scope line="166"/>
                    <scope line="168"/>
                </scope>
                <declaration name="handler" type="CompletionHandler&amp;lt;AsynchronousSocketChannel,Object&amp;gt;" line="176"/>
                <declaration name="att" type="Object" line="177"/>
                <declaration name="future" type="PendingFuture&amp;lt;AsynchronousSocketChannel,Object&amp;gt;" line="178"/>
                <scope line="183">
                    <scope line="187">
                        <scope line="188"/>
                        <scope line="190"/>
                    </scope>
                </scope>
                <scope line="192"/>
            </method>
            <javadoc line="197">
                Completes the accept by creating the AsynchronousSocketChannel for
                  the given file descriptor and remote address. If this method completes
                  with an IOException or SecurityException then the channel/file descriptor
                  will be closed.                
            </javadoc>
            <method name="finishAccept" type="AsynchronousSocketChannel" line="207">
                <params>
                    <param name="newfd" type="FileDescriptor"/>
                    <param name="remote" type="InetSocketAddress"/>
                    <param name="acc" type="AccessControlContext"/>
                </params>
                <comment line="217">
                    permission check must always be in initiator&apos;s context                    
                </comment>
                <declaration name="ch" type="AsynchronousSocketChannel" line="208"/>
                <scope line="209"/>
                <scope line="211"/>
                <scope line="217">
                    <scope line="218">
                        <anonymous_class line="219">
                            <method name="run" type="Void" line="220">
                                <declaration name="sm" type="SecurityManager" line="221"/>
                                <scope line="222"/>
                            </method>
                        </anonymous_class>
                    </scope>
                    <scope line="229">
                        <declaration name="sm" type="SecurityManager" line="230"/>
                        <scope line="231"/>
                    </scope>
                </scope>
                <scope line="236">
                    <scope line="237"/>
                    <scope line="239"/>
                </scope>
            </method>
            <method name="implAccept" type="Future&lt;AsynchronousSocketChannel&gt;" line="250">
                <params>
                    <param name="att" type="Object"/>
                    <param name="handler" type="CompletionHandler&lt;AsynchronousSocketChannel,Object&gt;"/>
                </params>
                <comment line="252">
                    complete immediately if channel is closed                    
                </comment>
                <comment line="265">
                    cancel was invoked with pending accept so connection may have been
                     dropped.                    
                </comment>
                <comment line="270">
                    check and set flag to prevent concurrent accepting                    
                </comment>
                <comment line="274">
                    attempt accept                    
                </comment>
                <comment line="284">
                    need calling context when there is security manager as
                     permission check may be done in a different thread without
                     any application call frames on the stack                    
                </comment>
                <comment line="302">
                    register for connections                    
                </comment>
                <comment line="307">
                    accept failed                    
                </comment>
                <comment line="317">
                    connection accepted immediately                    
                </comment>
                <comment line="325">
                    re-enable accepting before invoking handler                    
                </comment>
                <scope line="252">
                    <declaration name="e" type="Throwable" line="253"/>
                    <scope line="254"/>
                    <scope line="256"/>
                </scope>
                <declaration name="newfd" type="FileDescriptor" line="274"/>
                <declaration name="isaa" type="InetSocketAddress[]" line="275"/>
                <declaration name="exc" type="Throwable" line="276"/>
                <scope line="277">
                    <declaration name="n" type="int" line="280"/>
                    <scope line="281">
                        <declaration name="result" type="PendingFuture&amp;lt;AsynchronousSocketChannel,Object&amp;gt;" line="286"/>
                        <scope line="287">
                            <scope line="288"/>
                            <scope line="292"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="305"/>
                <scope line="310"/>
                <declaration name="child" type="AsynchronousSocketChannel" line="314"/>
                <scope line="315">
                    <scope line="317"/>
                    <scope line="319"/>
                </scope>
                <scope line="327"/>
                <scope line="329"/>
            </method>
            <method name="initIDs" type="void" line="337"/>
            <method name="accept0" type="int" line="343"/>
            <scope line="347"/>
        </class>
    </source>