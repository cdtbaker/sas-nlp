<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.nio.channels"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.net"/>
        <import package="java.util.concurrent"/>
        <import package="java.io.IOException"/>
        <import package="java.io.FileDescriptor"/>
        <import package="java.security.AccessController"/>
        <import package="sun.net.NetHooks"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="UnixAsynchronousSocketChannelImpl" line="38">
            <extends class="AsynchronousSocketChannelImpl"/>
            <comment line="60">
                used to ensure that the context for I/O operations that complete
                 ascynrhonously is visible to the pooled threads handling I/O events.                
            </comment>
            <comment line="64">
                pending connect (updateLock)                
            </comment>
            <comment line="70">
                pending remote address (stateLock)                
            </comment>
            <comment line="73">
                pending read (updateLock)                
            </comment>
            <comment line="83">
                pending write (updateLock)                
            </comment>
            <comment line="114">
                Constructor for sockets created by UnixAsynchronousServerSocketChannelImpl                
            </comment>
            <comment line="141">
                register events for outstanding I/O operations, caller already owns updateLock                
            </comment>
            <comment line="153">
                register events for outstanding I/O operations                
            </comment>
            <comment line="160">
                invoke to finish read and/or write operations                
            </comment>
            <comment line="239">
                -- connect --                
            </comment>
            <comment line="369">
                -- read --                
            </comment>
            <comment line="564">
                -- write --                
            </comment>
            <comment line="747">
                -- Native methods --                
            </comment>
            <implements interface="Port.PollableChannel"/>
            <javadoc line="38">
                Unix implementation of AsynchronousSocketChannel                
            </javadoc>
            <declaration name="nd" type="NativeDispatcher" line="45"/>
            <declaration name="disableSynchronousRead" type="boolean" line="48"/>
            <scope line="49">
                <declaration name="propValue" type="String" line="50"/>
            </scope>
            <declaration name="port" type="Port" line="56"/>
            <declaration name="fdVal" type="int" line="57"/>
            <declaration name="updateLock" type="Object" line="61"/>
            <declaration name="connectPending" type="boolean" line="64"/>
            <declaration name="connectHandler" type="CompletionHandler&lt;Void,Object&gt;" line="65"/>
            <declaration name="connectAttachment" type="Object" line="66"/>
            <declaration name="connectFuture" type="PendingFuture&lt;Void,Object&gt;" line="67"/>
            <declaration name="pendingRemote" type="SocketAddress" line="70"/>
            <declaration name="readPending" type="boolean" line="73"/>
            <declaration name="isScatteringRead" type="boolean" line="74"/>
            <declaration name="readBuffer" type="ByteBuffer" line="75"/>
            <declaration name="readBuffers" type="ByteBuffer[]" line="76"/>
            <declaration name="readHandler" type="CompletionHandler&lt;Number,Object&gt;" line="77"/>
            <declaration name="readAttachment" type="Object" line="78"/>
            <declaration name="readFuture" type="PendingFuture&lt;Number,Object&gt;" line="79"/>
            <declaration name="readTimer" type="Future&lt;?&gt;" line="80"/>
            <declaration name="writePending" type="boolean" line="83"/>
            <declaration name="isGatheringWrite" type="boolean" line="84"/>
            <declaration name="writeBuffer" type="ByteBuffer" line="85"/>
            <declaration name="writeBuffers" type="ByteBuffer[]" line="86"/>
            <declaration name="writeHandler" type="CompletionHandler&lt;Number,Object&gt;" line="87"/>
            <declaration name="writeAttachment" type="Object" line="88"/>
            <declaration name="writeFuture" type="PendingFuture&lt;Number,Object&gt;" line="89"/>
            <declaration name="writeTimer" type="Future&lt;?&gt;" line="90"/>
            <method name="UnixAsynchronousSocketChannelImpl" type="constructor" line="95">
                <params>
                    <param name="port" type="Port"/>
                </params>
                <comment line="99">
                    set non-blocking                    
                </comment>
                <comment line="110">
                    add mapping from file descriptor to this channel                    
                </comment>
                <scope line="99"/>
                <scope line="101"/>
            </method>
            <method name="UnixAsynchronousSocketChannelImpl" type="constructor" line="118">
                <params>
                    <param name="port" type="Port"/>
                    <param name="fd" type="FileDescriptor"/>
                    <param name="remote" type="InetSocketAddress"/>
                </params>
                <comment line="128">
                    ShutdownChannelGroupException thrown if we attempt to register a
                     new channel after the group is shutdown                    
                </comment>
                <scope line="124"/>
                <scope line="126"/>
            </method>
            <method name="group" type="AsynchronousChannelGroupImpl" line="136"/>
            <method name="updateEvents" type="void" line="141">
                <declaration name="events" type="int" line="143"/>
            </method>
            <method name="lockAndUpdateEvents" type="void" line="153">
                <scope line="154"/>
            </method>
            <method name="finish" type="void" line="163">
                <params>
                    <param name="mayInvokeDirect" type="boolean"/>
                    <param name="readable" type="boolean"/>
                    <param name="writable" type="boolean"/>
                </params>
                <comment line="169">
                    map event to pending result                    
                </comment>
                <comment line="186">
                    complete the I/O operation. Special case for when channel is
                     ready for both reading and writing. In that case, submit task to
                     complete write if write operation has a completion handler.                    
                </comment>
                <declaration name="finishRead" type="boolean" line="164"/>
                <declaration name="finishWrite" type="boolean" line="165"/>
                <declaration name="finishConnect" type="boolean" line="166"/>
                <scope line="169">
                    <scope line="170"/>
                    <scope line="174">
                        <scope line="175"/>
                        <scope line="178"/>
                    </scope>
                </scope>
                <scope line="188"/>
                <scope line="194"/>
                <scope line="197"/>
            </method>
            <javadoc line="202">
                Invoked by event handler thread when file descriptor is polled                
            </javadoc>
            <method name="onEvent" type="void" line="206">
                <params>
                    <param name="events" type="int"/>
                    <param name="mayInvokeDirect" type="boolean"/>
                </params>
                <declaration name="readable" type="boolean" line="207"/>
                <declaration name="writable" type="boolean" line="208"/>
                <scope line="209"/>
            </method>
            <method name="implClose" type="void" line="217">
                <comment line="219">
                    remove the mapping                    
                </comment>
                <comment line="222">
                    close file descriptor                    
                </comment>
                <comment line="225">
                    All outstanding I/O operations are required to fail                    
                </comment>
            </method>
            <method name="onCancel" type="void" line="229">
                <params>
                    <param name="task" type="PendingFuture<?,?>"/>
                </params>
            </method>
            <method name="setConnected" type="void" line="240">
                <scope line="241"/>
            </method>
            <method name="finishConnect" type="void" line="248">
                <params>
                    <param name="mayInvokeDirect" type="boolean"/>
                </params>
                <comment line="263">
                    close channel if connection cannot be established                    
                </comment>
                <comment line="271">
                    invoke handler and set result                    
                </comment>
                <declaration name="e" type="Throwable" line="249"/>
                <scope line="250"/>
                <scope line="254"/>
                <scope line="258"/>
                <scope line="261">
                    <scope line="263"/>
                    <scope line="265"/>
                </scope>
                <declaration name="handler" type="CompletionHandler&lt;Void,Object&gt;" line="271"/>
                <declaration name="att" type="Object" line="272"/>
                <declaration name="future" type="PendingFuture&lt;Void,Object&gt;" line="273"/>
                <scope line="274"/>
                <scope line="276">
                    <scope line="277"/>
                    <scope line="279"/>
                </scope>
            </method>
            <method name="implConnect" type="Future<Void>" line="290">
                <params>
                    <param name="remote" type="SocketAddress"/>
                    <param name="attachment" type="A"/>
                    <param name="handler" type="CompletionHandler<Void,? super A>"/>
                </params>
                <comment line="304">
                    permission check                    
                </comment>
                <comment line="309">
                    check and set state                    
                </comment>
                <comment line="324">
                    notify hook if unbound                    
                </comment>
                <comment line="329">
                    connection could not be established immediately                    
                </comment>
                <comment line="353">
                    close channel if connect fails                    
                </comment>
                <scope line="291">
                    <declaration name="e" type="Throwable" line="292"/>
                    <scope line="293"/>
                    <scope line="295"/>
                </scope>
                <declaration name="isa" type="InetSocketAddress" line="301"/>
                <declaration name="sm" type="SecurityManager" line="304"/>
                <declaration name="notifyBeforeTcpConnect" type="boolean" line="309"/>
                <scope line="310"/>
                <declaration name="e" type="Throwable" line="320"/>
                <scope line="321">
                    <declaration name="n" type="int" line="326"/>
                    <scope line="327">
                        <declaration name="result" type="PendingFuture&lt;Void,A&gt;" line="329"/>
                        <scope line="330">
                            <scope line="331"/>
                            <scope line="334"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="344"/>
                <scope line="348"/>
                <scope line="353">
                    <scope line="354"/>
                    <scope line="356"/>
                </scope>
                <scope line="360"/>
                <scope line="362"/>
            </method>
            <method name="finishRead" type="void" line="370">
                <params>
                    <param name="mayInvokeDirect" type="boolean"/>
                </params>
                <comment line="375">
                    copy fields as we can&apos;t access them after reading is re-enabled.                    
                </comment>
                <comment line="391">
                    spurious wakeup, is this possible?                    
                </comment>
                <comment line="398">
                    allow objects to be GC&apos;ed.                    
                </comment>
                <comment line="403">
                    allow another read to be initiated                    
                </comment>
                <comment line="412">
                    restart poll in case of concurrent write                    
                </comment>
                <comment line="418">
                    cancel the associated timer                    
                </comment>
                <comment line="422">
                    create result                    
                </comment>
                <comment line="426">
                    invoke handler or set result                    
                </comment>
                <declaration name="n" type="int" line="371"/>
                <declaration name="exc" type="Throwable" line="372"/>
                <declaration name="scattering" type="boolean" line="375"/>
                <declaration name="handler" type="CompletionHandler&lt;Number,Object&gt;" line="376"/>
                <declaration name="att" type="Object" line="377"/>
                <declaration name="future" type="PendingFuture&lt;Number,Object&gt;" line="378"/>
                <declaration name="timeout" type="Future&lt;?&gt;" line="379"/>
                <scope line="381">
                    <scope line="384"/>
                    <scope line="386"/>
                    <scope line="389">
                        <scope line="391"/>
                    </scope>
                </scope>
                <scope line="405"/>
                <scope line="410"/>
                <declaration name="result" type="Number" line="422"/>
                <scope line="426"/>
                <scope line="428">
                    <scope line="429"/>
                    <scope line="431"/>
                </scope>
            </method>
            <declaration name="readTimeoutTask" type="Runnable" line="437"/>
            <anonymous_class line="437">
                <method name="run" type="void" line="438">
                    <comment line="453">
                        kill further reading before releasing waiters                        
                    </comment>
                    <comment line="456">
                        invoke handler or set result                        
                    </comment>
                    <declaration name="handler" type="CompletionHandler&lt;Number,Object&gt;" line="439"/>
                    <declaration name="att" type="Object" line="440"/>
                    <declaration name="future" type="PendingFuture&lt;Number,Object&gt;" line="441"/>
                    <scope line="443"/>
                    <declaration name="exc" type="Exception" line="456"/>
                    <scope line="457"/>
                    <scope line="459">
                        <declaration name="ch" type="AsynchronousChannel" line="460"/>
                    </scope>
                </method>
            </anonymous_class>
            <javadoc line="466">
                Initiates a read or scattering read operation                
            </javadoc>
            <method name="implRead" type="Future<V>" line="478">
                <params>
                    <param name="isScatteringRead" type="boolean"/>
                    <param name="dst" type="ByteBuffer"/>
                    <param name="dsts" type="ByteBuffer[]"/>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                    <param name="attachment" type="A"/>
                    <param name="handler" type="CompletionHandler<V,? super A>"/>
                </params>
                <comment line="480">
                    A synchronous read is not attempted if disallowed by system property
                     or, we are using a fixed thread pool and the completion handler may
                     not be invoked directly (because the thread is not a pooled thread or
                     there are too many handlers on the stack).                    
                </comment>
                <comment line="493">
                    okay to attempt read with user thread pool                    
                </comment>
                <comment line="551">
                    read completed immediately                    
                </comment>
                <declaration name="myGroupAndInvokeCount" type="Invoker.GroupAndInvokeCount" line="483"/>
                <declaration name="invokeDirect" type="boolean" line="484"/>
                <declaration name="attemptRead" type="boolean" line="485"/>
                <scope line="486">
                    <scope line="487"/>
                    <scope line="489"/>
                </scope>
                <declaration name="n" type="int" line="497"/>
                <declaration name="exc" type="Throwable" line="498"/>
                <declaration name="pending" type="boolean" line="499"/>
                <scope line="501">
                    <scope line="504">
                        <scope line="505"/>
                        <scope line="507"/>
                    </scope>
                    <scope line="512">
                        <declaration name="result" type="PendingFuture&lt;V,A&gt;" line="513"/>
                        <scope line="514">
                            <scope line="518"/>
                            <scope line="523"/>
                            <scope line="528"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="537"/>
                <scope line="541"/>
                <declaration name="result" type="Number" line="547"/>
                <scope line="551">
                    <scope line="552"/>
                    <scope line="554"/>
                </scope>
                <scope line="558"/>
            </method>
            <method name="finishWrite" type="void" line="565">
                <params>
                    <param name="mayInvokeDirect" type="boolean"/>
                </params>
                <comment line="570">
                    copy fields as we can&apos;t access them after reading is re-enabled.                    
                </comment>
                <comment line="586">
                    spurious wakeup, is this possible?                    
                </comment>
                <comment line="593">
                    allow objects to be GC&apos;ed.                    
                </comment>
                <comment line="598">
                    allow another write to be initiated                    
                </comment>
                <comment line="607">
                    restart poll in case of concurrent write                    
                </comment>
                <comment line="613">
                    cancel the associated timer                    
                </comment>
                <comment line="617">
                    create result                    
                </comment>
                <comment line="621">
                    invoke handler or set result                    
                </comment>
                <declaration name="n" type="int" line="566"/>
                <declaration name="exc" type="Throwable" line="567"/>
                <declaration name="gathering" type="boolean" line="570"/>
                <declaration name="handler" type="CompletionHandler&lt;Number,Object&gt;" line="571"/>
                <declaration name="att" type="Object" line="572"/>
                <declaration name="future" type="PendingFuture&lt;Number,Object&gt;" line="573"/>
                <declaration name="timer" type="Future&lt;?&gt;" line="574"/>
                <scope line="576">
                    <scope line="579"/>
                    <scope line="581"/>
                    <scope line="584">
                        <scope line="586"/>
                    </scope>
                </scope>
                <scope line="600"/>
                <scope line="605"/>
                <declaration name="result" type="Number" line="617"/>
                <scope line="621"/>
                <scope line="623">
                    <scope line="624"/>
                    <scope line="626"/>
                </scope>
            </method>
            <declaration name="writeTimeoutTask" type="Runnable" line="632"/>
            <anonymous_class line="632">
                <method name="run" type="void" line="633">
                    <comment line="648">
                        kill further writing before releasing waiters                        
                    </comment>
                    <comment line="651">
                        invoke handler or set result                        
                    </comment>
                    <declaration name="handler" type="CompletionHandler&lt;Number,Object&gt;" line="634"/>
                    <declaration name="att" type="Object" line="635"/>
                    <declaration name="future" type="PendingFuture&lt;Number,Object&gt;" line="636"/>
                    <scope line="638"/>
                    <declaration name="exc" type="Exception" line="651"/>
                    <scope line="652"/>
                    <scope line="655"/>
                </method>
            </anonymous_class>
            <javadoc line="661">
                Initiates a read or scattering read operation                
            </javadoc>
            <method name="implWrite" type="Future<V>" line="673">
                <params>
                    <param name="isGatheringWrite" type="boolean"/>
                    <param name="src" type="ByteBuffer"/>
                    <param name="srcs" type="ByteBuffer[]"/>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                    <param name="attachment" type="A"/>
                    <param name="handler" type="CompletionHandler<V,? super A>"/>
                </params>
                <comment line="679">
                    okay to attempt write with user thread pool                    
                </comment>
                <comment line="734">
                    write completed immediately                    
                </comment>
                <declaration name="myGroupAndInvokeCount" type="Invoker.GroupAndInvokeCount" line="674"/>
                <declaration name="invokeDirect" type="boolean" line="676"/>
                <declaration name="attemptWrite" type="boolean" line="677"/>
                <declaration name="n" type="int" line="680"/>
                <declaration name="exc" type="Throwable" line="681"/>
                <declaration name="pending" type="boolean" line="682"/>
                <scope line="684">
                    <scope line="687">
                        <scope line="688"/>
                        <scope line="690"/>
                    </scope>
                    <scope line="695">
                        <declaration name="result" type="PendingFuture&lt;V,A&gt;" line="696"/>
                        <scope line="697">
                            <scope line="701"/>
                            <scope line="706"/>
                            <scope line="711"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="720"/>
                <scope line="724"/>
                <declaration name="result" type="Number" line="730"/>
                <scope line="734">
                    <scope line="735"/>
                    <scope line="737"/>
                </scope>
                <scope line="741"/>
            </method>
            <method name="checkConnect" type="void" line="748"/>
            <scope line="750"/>
        </class>
    </source>