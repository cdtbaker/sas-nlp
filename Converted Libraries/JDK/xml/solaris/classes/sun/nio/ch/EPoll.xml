<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.io.IOException"/>
        <import package="sun.misc.Unsafe"/>
        <class name="EPoll" line="31">
            <comment line="58">
                opcodes                
            </comment>
            <comment line="63">
                flags                
            </comment>
            <comment line="101">
                -- Native methods --                
            </comment>
            <javadoc line="31">
                Provides access to the Linux epoll facility.                
            </javadoc>
            <method name="EPoll" type="constructor" line="36"/>
            <declaration name="unsafe" type="Unsafe" line="38"/>
            <declaration name="SIZEOF_EPOLLEVENT" type="int" line="40"/>
            <javadoc line="40">
                typedef union epoll_data {
                  void ptr;
                  int fd;
                  __uint32_t u32;
                  __uint64_t u64;
                  } epoll_data_t;
                  struct epoll_event {
                  __uint32_t events;
                  epoll_data_t data;
                  }                
            </javadoc>
            <declaration name="OFFSETOF_EVENTS" type="int" line="54"/>
            <declaration name="OFFSETOF_FD" type="int" line="55"/>
            <declaration name="EPOLL_CTL_ADD" type="int" line="58"/>
            <declaration name="EPOLL_CTL_DEL" type="int" line="59"/>
            <declaration name="EPOLL_CTL_MOD" type="int" line="60"/>
            <declaration name="EPOLLONESHOT" type="int" line="63"/>
            <javadoc line="65">
                Allocates a poll array to handle up to {@code count} events.                
            </javadoc>
            <method name="allocatePollArray" type="long" line="68">
                <params>
                    <param name="count" type="int"/>
                </params>
            </method>
            <javadoc line="72">
                Free a poll array                
            </javadoc>
            <method name="freePollArray" type="void" line="75">
                <params>
                    <param name="address" type="long"/>
                </params>
            </method>
            <javadoc line="79">
                Returns event[i];                
            </javadoc>
            <method name="getEvent" type="long" line="82">
                <params>
                    <param name="address" type="long"/>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="86">
                Returns event-&gt;data.fd                
            </javadoc>
            <method name="getDescriptor" type="int" line="89">
                <params>
                    <param name="eventAddress" type="long"/>
                </params>
            </method>
            <javadoc line="93">
                Returns event-&gt;events                
            </javadoc>
            <method name="getEvents" type="int" line="96">
                <params>
                    <param name="eventAddress" type="long"/>
                </params>
            </method>
            <method name="eventSize" type="int" line="102"/>
            <method name="eventsOffset" type="int" line="104"/>
            <method name="dataOffset" type="int" line="106"/>
            <method name="epollCreate" type="int" line="108"/>
            <method name="epollCtl" type="int" line="110"/>
            <method name="epollWait" type="int" line="112"/>
            <scope line="115"/>
        </class>
    </source>