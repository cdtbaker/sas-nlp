<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.net.InetAddress"/>
        <import package="java.net.SocketAddress"/>
        <import package="java.net.SocketException"/>
        <import package="java.net.InetSocketAddress"/>
        <import package="java.io.FileDescriptor"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Set"/>
        <import package="java.util.HashSet"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.channels.SelectionKey"/>
        <import package="java.nio.channels.ClosedChannelException"/>
        <import package="java.nio.channels.ConnectionPendingException"/>
        <import package="java.nio.channels.NoConnectionPendingException"/>
        <import package="java.nio.channels.AlreadyConnectedException"/>
        <import package="java.nio.channels.NotYetBoundException"/>
        <import package="java.nio.channels.NotYetConnectedException"/>
        <import package="java.nio.channels.spi.SelectorProvider"/>
        <import package="com.sun.nio.sctp.AbstractNotificationHandler"/>
        <import package="com.sun.nio.sctp.Association"/>
        <import package="com.sun.nio.sctp.AssociationChangeNotification"/>
        <import package="com.sun.nio.sctp.HandlerResult"/>
        <import package="com.sun.nio.sctp.IllegalReceiveException"/>
        <import package="com.sun.nio.sctp.InvalidStreamException"/>
        <import package="com.sun.nio.sctp.IllegalUnbindException"/>
        <import package="com.sun.nio.sctp.MessageInfo"/>
        <import package="com.sun.nio.sctp.NotificationHandler"/>
        <import package="com.sun.nio.sctp.SctpChannel"/>
        <import package="com.sun.nio.sctp.SctpSocketOption"/>
        <import package="sun.nio.ch.PollArrayWrapper"/>
        <import package="sun.nio.ch.SelChImpl"/>
        <import package="com.sun.nio.sctp.SctpStandardSocketOptions"/>
        <import package="sun.nio.ch.SctpResultContainer.SEND_FAILED"/>
        <import package="sun.nio.ch.SctpResultContainer.ASSOCIATION_CHANGED"/>
        <import package="sun.nio.ch.SctpResultContainer.PEER_ADDRESS_CHANGED"/>
        <import package="sun.nio.ch.SctpResultContainer.SHUTDOWN"/>
        <class name="SctpChannelImpl" line="64">
            <extends class="SctpChannel"/>
            <comment line="75">
                                
            </comment>
            <comment line="79">
                                
            </comment>
            <comment line="82">
                                
            </comment>
            <comment line="92">
                Lock held by any thread that modifies the state fields declared below                
            </comment>
            <comment line="104">
                                
            </comment>
            <comment line="107">
                                
            </comment>
            <comment line="110">
                                
            </comment>
            <comment line="111">
                                
            </comment>
            <comment line="112">
                private InetSocketAddress remoteAddress = null;                
            </comment>
            <comment line="114">
                                
            </comment>
            <comment line="117">
                                
            </comment>
            <comment line="124">
                                
            </comment>
            <comment line="938">
                TODO: Add support for ttl and isComplete to both 121 12M
                       SCTP_EOR not yet supported on reference platforms
                       TTL support limited...                
            </comment>
            <comment line="1081">
                                
            </comment>
            <implements interface="SelChImpl"/>
            <javadoc line="64">
                An implementation of an SctpChannel                
            </javadoc>
            <declaration name="fd" type="FileDescriptor" line="70"/>
            <declaration name="fdVal" type="int" line="72"/>
            <declaration name="receiverThread" type="long" line="75"/>
            <declaration name="senderThread" type="long" line="76"/>
            <declaration name="receiveLock" type="Object" line="79"/>
            <declaration name="sendLock" type="Object" line="82"/>
            <declaration name="receiveInvoked" type="ThreadLocal&lt;Boolean&gt;" line="84"/>
            <anonymous_class line="85">
                <method name="initialValue" type="Boolean" line="86"/>
            </anonymous_class>
            <declaration name="stateLock" type="Object" line="93"/>
            <declaration name="state" type="ChannelState" line="104"/>
            <declaration name="port" type="int" line="107"/>
            <declaration name="localAddresses" type="HashSet&lt;InetSocketAddress&gt;" line="108"/>
            <declaration name="wildcard" type="boolean" line="110"/>
            <declaration name="readyToConnect" type="boolean" line="114"/>
            <declaration name="isShutdown" type="boolean" line="117"/>
            <declaration name="association" type="Association" line="119"/>
            <declaration name="remoteAddresses" type="Set&lt;SocketAddress&gt;" line="121"/>
            <javadoc line="125">
                Constructor for normal connecting sockets                
            </javadoc>
            <method name="SctpChannelImpl" type="constructor" line="128">
                <params>
                    <param name="provider" type="SelectorProvider"/>
                </params>
                <comment line="129">
                    TODO: update provider remove public modifier                    
                </comment>
            </method>
            <javadoc line="136">
                Constructor for sockets obtained from server sockets                
            </javadoc>
            <method name="SctpChannelImpl" type="constructor" line="140">
                <params>
                    <param name="provider" type="SelectorProvider"/>
                    <param name="fd" type="FileDescriptor"/>
                </params>
            </method>
            <javadoc line="144">
                Constructor for sockets obtained from branching                
            </javadoc>
            <method name="SctpChannelImpl" type="constructor" line="150">
                <params>
                    <param name="provider" type="SelectorProvider"/>
                    <param name="fd" type="FileDescriptor"/>
                    <param name="association" type="Association"/>
                </params>
                <comment line="157">
                                        
                </comment>
                <comment line="159">
                                        
                </comment>
                <comment line="160">
                                        
                </comment>
                <scope line="157"/>
                <scope line="159">
                    <declaration name="buf" type="ByteBuffer" line="161"/>
                    <scope line="162"/>
                    <scope line="164"/>
                </scope>
            </method>
            <javadoc line="170">
                Binds the channel&apos;s socket to a local address.                
            </javadoc>
            <method name="bind" type="SctpChannel" line="174">
                <params>
                    <param name="local" type="SocketAddress"/>
                </params>
                <scope line="175">
                    <scope line="176">
                        <scope line="177">
                            <declaration name="isa" type="InetSocketAddress" line="181"/>
                            <declaration name="boundIsa" type="InetSocketAddress" line="184"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="bindAddress" type="SctpChannel" line="197">
                <params>
                    <param name="address" type="InetAddress"/>
                </params>
            </method>
            <method name="unbindAddress" type="SctpChannel" line="205">
                <params>
                    <param name="address" type="InetAddress"/>
                </params>
            </method>
            <method name="bindUnbindAddress" type="SctpChannel" line="212">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="add" type="boolean"/>
                </params>
                <comment line="235">
                                        
                </comment>
                <comment line="236">
                    Verify that there is more than one address                    
                </comment>
                <comment line="253">
                                        
                </comment>
                <scope line="216">
                    <scope line="217">
                        <scope line="218">
                            <scope line="229">
                                <scope line="230">
                                    <scope line="231"/>
                                </scope>
                            </scope>
                            <scope line="235">
                                <declaration name="foundAddress" type="boolean" line="240"/>
                                <scope line="241">
                                    <scope line="242"/>
                                </scope>
                            </scope>
                            <scope line="256">
                                <scope line="257">
                                    <scope line="258"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="isBound" type="boolean" line="270">
                <scope line="271"/>
            </method>
            <method name="isConnected" type="boolean" line="276">
                <scope line="277"/>
            </method>
            <method name="ensureOpenAndUnconnected" type="void" line="282">
                <scope line="283"/>
            </method>
            <method name="ensureReceiveOpen" type="boolean" line="293">
                <scope line="294"/>
            </method>
            <method name="ensureSendOpen" type="void" line="304">
                <scope line="305"/>
            </method>
            <method name="receiverCleanup" type="void" line="315">
                <scope line="316"/>
            </method>
            <method name="senderCleanup" type="void" line="323">
                <scope line="324"/>
            </method>
            <method name="association" type="Association" line="332">
                <scope line="333"/>
            </method>
            <method name="connect" type="boolean" line="344">
                <params>
                    <param name="endpoint" type="SocketAddress"/>
                </params>
                <comment line="380">
                    If an exception was thrown, close the channel after
                     invoking end() so as to avoid bogus                    
                </comment>
                <comment line="389">
                                        
                </comment>
                <comment line="397">
                                        
                </comment>
                <comment line="405">
                                        
                </comment>
                <comment line="408">
                                        
                </comment>
                <comment line="414">
                    If nonblocking and no exception then connection                    
                </comment>
                <scope line="345">
                    <scope line="346">
                        <declaration name="isa" type="InetSocketAddress" line="348"/>
                        <declaration name="sm" type="SecurityManager" line="349"/>
                        <scope line="353">
                            <declaration name="n" type="int" line="354"/>
                            <scope line="355">
                                <scope line="356">
                                    <scope line="358">
                                        <scope line="359"/>
                                    </scope>
                                    <scope line="364">
                                        <declaration name="ia" type="InetAddress" line="365"/>
                                    </scope>
                                </scope>
                                <scope line="374"/>
                            </scope>
                            <scope line="379"/>
                            <scope line="387">
                                <scope line="388">
                                    <scope line="391">
                                        <declaration name="boundIsa" type="InetSocketAddress" line="392"/>
                                    </scope>
                                    <declaration name="buf" type="ByteBuffer" line="398"/>
                                    <scope line="399"/>
                                    <scope line="401"/>
                                    <scope line="406"/>
                                    <scope line="408"/>
                                </scope>
                            </scope>
                            <scope line="412">
                                <scope line="413"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="connect" type="boolean" line="432">
                <params>
                    <param name="endpoint" type="SocketAddress"/>
                    <param name="maxOutStreams" type="int"/>
                    <param name="maxInStreams" type="int"/>
                </params>
            </method>
            <method name="isConnectionPending" type="boolean" line="440">
                <scope line="441"/>
            </method>
            <method name="finishConnect" type="boolean" line="447">
                <comment line="481">
                    Loop in case of                    
                </comment>
                <comment line="482">
                    spurious notifications                    
                </comment>
                <comment line="497">
                    poll()getsockopt() does not report
                     error (throws exception, with n = 0)
                     on Linux platform after dup2 and
                     signal-wakeup. Force n to 0 so the                    
                </comment>
                <comment line="509">
                    If an exception was thrown, close the channel after
                     invoking end() so as to avoid bogus                    
                </comment>
                <comment line="525">
                                        
                </comment>
                <comment line="533">
                                        
                </comment>
                <comment line="536">
                                        
                </comment>
                <scope line="448">
                    <scope line="449">
                        <scope line="450"/>
                        <declaration name="n" type="int" line="458"/>
                        <scope line="459">
                            <scope line="460">
                                <scope line="462">
                                    <scope line="463">
                                        <scope line="464"/>
                                    </scope>
                                    <scope line="469">
                                        <scope line="470"/>
                                    </scope>
                                    <scope line="477">
                                        <scope line="478">
                                            <scope line="480"/>
                                        </scope>
                                    </scope>
                                </scope>
                            </scope>
                            <scope line="492">
                                <scope line="493">
                                    <scope line="495"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="508"/>
                        <scope line="516">
                            <scope line="517">
                                <scope line="519">
                                    <declaration name="boundIsa" type="InetSocketAddress" line="520"/>
                                </scope>
                                <declaration name="buf" type="ByteBuffer" line="526"/>
                                <scope line="527"/>
                                <scope line="529"/>
                                <scope line="534"/>
                                <scope line="536"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="implConfigureBlocking" type="void" line="547">
                <params>
                    <param name="block" type="boolean"/>
                </params>
            </method>
            <method name="implCloseSelectableChannel" type="void" line="552">
                <scope line="553"/>
            </method>
            <method name="getFD" type="FileDescriptor" line="568"/>
            <method name="getFDVal" type="int" line="573"/>
            <javadoc line="577">
                Translates native poll revent ops into a ready operation ops                
            </javadoc>
            <method name="translateReadyOps" type="boolean" line="580">
                <params>
                    <param name="ops" type="int"/>
                    <param name="initialOps" type="int"/>
                    <param name="sk" type="SelectionKeyImpl"/>
                </params>
                <comment line="586">
                    This should only happen if this channel is pre-closed while a
                     selection operation is in progress                    
                </comment>
                <comment line="596">
                    No need to poll again in checkConnect,                    
                </comment>
                <declaration name="intOps" type="int" line="581"/>
                <declaration name="oldOps" type="int" line="582"/>
                <declaration name="newOps" type="int" line="583"/>
                <scope line="585"/>
                <scope line="593"/>
                <scope line="609"/>
            </method>
            <method name="translateAndUpdateReadyOps" type="boolean" line="624">
                <params>
                    <param name="ops" type="int"/>
                    <param name="sk" type="SelectionKeyImpl"/>
                </params>
            </method>
            <method name="translateAndSetReadyOps" type="boolean" line="630">
                <params>
                    <param name="ops" type="int"/>
                    <param name="sk" type="SelectionKeyImpl"/>
                </params>
            </method>
            <method name="translateAndSetInterestOps" type="void" line="635">
                <params>
                    <param name="ops" type="int"/>
                    <param name="sk" type="SelectionKeyImpl"/>
                </params>
                <declaration name="newOps" type="int" line="636"/>
            </method>
            <method name="kill" type="void" line="647">
                <comment line="657">
                    Postpone the kill if there is a waiting reader                    
                </comment>
                <scope line="648">
                    <scope line="651"/>
                    <scope line="659"/>
                    <scope line="662"/>
                </scope>
            </method>
            <method name="setOption" type="SctpChannel" line="670">
                <params>
                    <param name="name" type="SctpSocketOption<T>"/>
                    <param name="value" type="T"/>
                </params>
                <comment line="680">
                                        
                </comment>
                <scope line="676"/>
            </method>
            <method name="getOption" type="T" line="687">
                <params>
                    <param name="name" type="SctpSocketOption<T>"/>
                </params>
                <comment line="697">
                                        
                </comment>
                <scope line="693"/>
            </method>
            <class name="DefaultOptionsHolder" line="701">
                <declaration name="defaultOptions" type="Set&lt;SctpSocketOption&lt;?&gt;&gt;" line="702"/>
                <method name="defaultOptions" type="Set<SctpSocketOption<?>>" line="704">
                    <declaration name="set" type="HashSet&lt;SctpSocketOption&lt;?&gt;&gt;" line="705"/>
                </method>
            </class>
            <method name="supportedOptions" type="Set<SctpSocketOption<?>>" line="721"/>
            <method name="receive" type="MessageInfo" line="729">
                <params>
                    <param name="buffer" type="ByteBuffer"/>
                    <param name="attachment" type="T"/>
                    <param name="handler" type="NotificationHandler<T>"/>
                </params>
            </method>
            <method name="receive" type="MessageInfo" line="737">
                <params>
                    <param name="buffer" type="ByteBuffer"/>
                    <param name="attachment" type="T"/>
                    <param name="handler" type="NotificationHandler<T>"/>
                    <param name="fromConnect" type="boolean"/>
                </params>
                <comment line="777">
                                        
                </comment>
                <comment line="779">
                                        
                </comment>
                <comment line="788">
                                        
                </comment>
                <comment line="790">
                                        
                </comment>
                <comment line="798">
                    If we reach here, then it was connect that invoked
                     receive and received the COMM_UP. We have already
                     handled the COMM_UP with the internal notification                    
                </comment>
                <comment line="804">
                                        
                </comment>
                <scope line="749">
                    <declaration name="resultContainer" type="SctpResultContainer" line="750"/>
                    <scope line="751">
                        <scope line="753">
                            <declaration name="n" type="int" line="757"/>
                            <scope line="758">
                                <scope line="761"/>
                                <scope line="767"/>
                            </scope>
                            <scope line="770"/>
                            <scope line="776">
                                <scope line="778">
                                    <declaration name="info" type="SctpMessageInfoImpl" line="780"/>
                                    <scope line="782"/>
                                </scope>
                            </scope>
                            <scope line="790">
                                <scope line="791"/>
                            </scope>
                            <scope line="797"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="810"/>
            </method>
            <method name="receive" type="int" line="819">
                <params>
                    <param name="fd" type="int"/>
                    <param name="dst" type="ByteBuffer"/>
                    <param name="resultContainer" type="SctpResultContainer"/>
                    <param name="peek" type="boolean"/>
                </params>
                <comment line="827">
                                        
                </comment>
                <declaration name="pos" type="int" line="820"/>
                <declaration name="lim" type="int" line="821"/>
                <declaration name="rem" type="int" line="823"/>
                <declaration name="newSize" type="int" line="828"/>
                <declaration name="bb" type="ByteBuffer" line="829"/>
                <scope line="830">
                    <declaration name="n" type="int" line="831"/>
                </scope>
                <scope line="836"/>
            </method>
            <method name="receiveIntoNativeBuffer" type="int" line="848">
                <params>
                    <param name="fd" type="int"/>
                    <param name="resultContainer" type="SctpResultContainer"/>
                    <param name="bb" type="ByteBuffer"/>
                    <param name="rem" type="int"/>
                    <param name="pos" type="int"/>
                    <param name="peek" type="boolean"/>
                </params>
                <declaration name="n" type="int" line="849"/>
            </method>
            <declaration name="internalNotificationHandler" type="InternalNotificationHandler&lt;?&gt;" line="856"/>
            <method name="handleNotificationInternal" type="void" line="860">
                <params>
                    <param name="resultContainer" type="SctpResultContainer"/>
                </params>
            </method>
            <class name="InternalNotificationHandler" line="865">
                <type_params>
                    <type_param name="T"/>
                </type_params>
                <extends class="AbstractNotificationHandler">
                    <type_params>
                        <type_param name="T"/>
                    </type_params>
                </extends>
                <method name="handleNotification" type="HandlerResult" line="870">
                    <params>
                        <param name="not" type="AssociationChangeNotification"/>
                        <param name="unused" type="T"/>
                    </params>
                    <scope line="873">
                        <declaration name="sac" type="SctpAssocChange" line="874"/>
                    </scope>
                </method>
            </class>
            <method name="invokeNotificationHandler" type="HandlerResult" line="885">
                <params>
                    <param name="resultContainer" type="SctpResultContainer"/>
                    <param name="handler" type="NotificationHandler<T>"/>
                    <param name="attachment" type="T"/>
                </params>
                <comment line="895">
                                        
                </comment>
                <comment line="912">
                                        
                </comment>
                <declaration name="notification" type="SctpNotification" line="886"/>
                <scope line="887"/>
                <scope line="891"/>
                <declaration name="absHandler" type="AbstractNotificationHandler" line="896"/>
            </method>
            <method name="checkAssociation" type="void" line="918">
                <params>
                    <param name="sendAssociation" type="Association"/>
                </params>
                <scope line="919">
                    <scope line="920"/>
                </scope>
            </method>
            <method name="checkStreamNumber" type="void" line="927">
                <params>
                    <param name="streamNumber" type="int"/>
                </params>
                <scope line="928">
                    <scope line="929"/>
                </scope>
            </method>
            <method name="send" type="int" line="943">
                <params>
                    <param name="buffer" type="ByteBuffer"/>
                    <param name="messageInfo" type="MessageInfo"/>
                </params>
                <scope line="953">
                    <declaration name="n" type="int" line="956"/>
                    <scope line="957">
                        <scope line="960"/>
                        <scope line="966"/>
                    </scope>
                    <scope line="971"/>
                </scope>
            </method>
            <method name="send" type="int" line="980">
                <params>
                    <param name="fd" type="int"/>
                    <param name="src" type="ByteBuffer"/>
                    <param name="messageInfo" type="MessageInfo"/>
                </params>
                <comment line="990">
                                        
                </comment>
                <comment line="1000">
                                        
                </comment>
                <comment line="1006">
                                        
                </comment>
                <declaration name="streamNumber" type="int" line="981"/>
                <declaration name="target" type="SocketAddress" line="982"/>
                <declaration name="unordered" type="boolean" line="983"/>
                <declaration name="ppid" type="int" line="984"/>
                <declaration name="pos" type="int" line="991"/>
                <declaration name="lim" type="int" line="992"/>
                <declaration name="rem" type="int" line="995"/>
                <declaration name="bb" type="ByteBuffer" line="996"/>
                <scope line="997">
                    <declaration name="n" type="int" line="1003"/>
                    <scope line="1005"/>
                </scope>
                <scope line="1010"/>
            </method>
            <method name="sendFromNativeBuffer" type="int" line="1021">
                <params>
                    <param name="fd" type="int"/>
                    <param name="bb" type="ByteBuffer"/>
                    <param name="target" type="SocketAddress"/>
                    <param name="streamNumber" type="int"/>
                    <param name="unordered" type="boolean"/>
                    <param name="ppid" type="int"/>
                </params>
                <comment line="1028">
                                        
                </comment>
                <declaration name="pos" type="int" line="1022"/>
                <declaration name="lim" type="int" line="1023"/>
                <declaration name="rem" type="int" line="1025"/>
                <declaration name="written" type="int" line="1027"/>
            </method>
            <method name="shutdown" type="SctpChannel" line="1035">
                <scope line="1036"/>
            </method>
            <method name="getAllLocalAddresses" type="Set<SocketAddress>" line="1051">
                <scope line="1052"/>
            </method>
            <method name="getRemoteAddresses" type="Set<SocketAddress>" line="1064">
                <comment line="1072">
                                        
                </comment>
                <comment line="1074">
                                        
                </comment>
                <scope line="1065">
                    <scope line="1071"/>
                    <scope line="1073"/>
                </scope>
            </method>
            <method name="initIDs" type="void" line="1081"/>
            <method name="receive0" type="int" line="1083"/>
            <method name="send0" type="int" line="1086"/>
            <method name="checkConnect" type="int" line="1090"/>
            <scope line="1093"/>
        </class>
    </source>