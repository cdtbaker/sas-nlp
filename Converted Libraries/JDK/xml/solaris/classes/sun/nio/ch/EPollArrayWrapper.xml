<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.io.IOException"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <class name="EPollArrayWrapper" line="33">
            <comment line="65">
                EPOLL_EVENTS                
            </comment>
            <comment line="68">
                opcodes                
            </comment>
            <comment line="73">
                Miscellaneous constants                
            </comment>
            <comment line="80">
                Base address of the native pollArray                
            </comment>
            <comment line="83">
                Set of &quot;idle&quot; channels                
            </comment>
            <comment line="104">
                Used to update file description registrations                
            </comment>
            <comment line="121">
                The epoll_event array for results from epoll_wait                
            </comment>
            <comment line="124">
                The fd of the epoll driver                
            </comment>
            <comment line="127">
                The fd of the interrupt line going out                
            </comment>
            <comment line="130">
                The fd of the interrupt line coming in                
            </comment>
            <comment line="133">
                The index of the interrupt FD                
            </comment>
            <comment line="136">
                Number of updated pollfd entries                
            </comment>
            <comment line="271">
                interrupt support                
            </comment>
            <javadoc line="33">
                Manipulates a native array of epoll_event structs on Linux:
                  typedef union epoll_data {
                  void ptr;
                  int fd;
                  __uint32_t u32;
                  __uint64_t u64;
                  } epoll_data_t;
                  struct epoll_event {
                  __uint32_t events;
                  epoll_data_t data;
                  };
                  The system call to wait for I/O events is epoll_wait(2). It populates an
                  array of epoll_event structures that are passed to the call. The data
                  member of the epoll_event structure contains the same data as was set
                  when the file descriptor was registered to epoll via epoll_ctl(2). In
                  this implementation we set data.fd to be the file descriptor that we
                  register. That way, we have the file descriptor available when we
                  process the events.
                  All file descriptors registered with epoll have the POLLHUP and POLLERR
                  events enabled even when registered with an event set of 0. To ensure
                  that epoll_wait doesn&apos;t poll an idle file descriptor when the underlying
                  connection is closed or reset then its registration is deleted from
                  epoll (it will be re-added again if the event set is changed)                
            </javadoc>
            <declaration name="EPOLLIN" type="int" line="65"/>
            <declaration name="EPOLL_CTL_ADD" type="int" line="68"/>
            <declaration name="EPOLL_CTL_DEL" type="int" line="69"/>
            <declaration name="EPOLL_CTL_MOD" type="int" line="70"/>
            <declaration name="SIZE_EPOLLEVENT" type="int" line="73"/>
            <declaration name="EVENT_OFFSET" type="int" line="74"/>
            <declaration name="DATA_OFFSET" type="int" line="75"/>
            <declaration name="FD_OFFSET" type="int" line="76"/>
            <declaration name="NUM_EPOLLEVENTS" type="int" line="77"/>
            <declaration name="pollArrayAddress" type="long" line="80"/>
            <declaration name="idleSet" type="HashSet&amp;lt;SelChImpl&amp;gt;" line="83"/>
            <method name="EPollArrayWrapper" type="constructor" line="85">
                <comment line="87">
                    creates the epoll file descriptor                    
                </comment>
                <comment line="90">
                    the epoll_event array passed to epoll_wait                    
                </comment>
                <comment line="100">
                    create idle set                    
                </comment>
                <declaration name="allocationSize" type="int" line="90"/>
                <scope line="94"/>
            </method>
            <class name="Updator" line="104">
                <declaration name="channel" type="SelChImpl" line="105"/>
                <declaration name="opcode" type="int" line="106"/>
                <declaration name="events" type="int" line="107"/>
                <method name="Updator" type="constructor" line="108">
                    <params>
                        <param name="channel" type="SelChImpl"/>
                        <param name="opcode" type="int"/>
                        <param name="events" type="int"/>
                    </params>
                </method>
                <method name="Updator" type="constructor" line="113">
                    <params>
                        <param name="channel" type="SelChImpl"/>
                        <param name="opcode" type="int"/>
                    </params>
                </method>
            </class>
            <declaration name="updateList" type="LinkedList&amp;lt;Updator&amp;gt;" line="118"/>
            <declaration name="pollArray" type="AllocatedNativeObject" line="121"/>
            <declaration name="epfd" type="int" line="124"/>
            <declaration name="outgoingInterruptFD" type="int" line="127"/>
            <declaration name="incomingInterruptFD" type="int" line="130"/>
            <declaration name="interruptedIndex" type="int" line="133"/>
            <declaration name="updated" type="int" line="136"/>
            <method name="initInterrupt" type="void" line="138">
                <params>
                    <param name="fd0" type="int"/>
                    <param name="fd1" type="int"/>
                </params>
            </method>
            <method name="putEventOps" type="void" line="144">
                <params>
                    <param name="i" type="int"/>
                    <param name="event" type="int"/>
                </params>
                <declaration name="offset" type="int" line="145"/>
            </method>
            <method name="putData" type="void" line="149">
                <params>
                    <param name="i" type="int"/>
                    <param name="value" type="long"/>
                </params>
                <declaration name="offset" type="int" line="150"/>
            </method>
            <method name="putDescriptor" type="void" line="154">
                <params>
                    <param name="i" type="int"/>
                    <param name="fd" type="int"/>
                </params>
                <declaration name="offset" type="int" line="155"/>
            </method>
            <method name="getEventOps" type="int" line="159">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="offset" type="int" line="160"/>
            </method>
            <method name="getDescriptor" type="int" line="164">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="offset" type="int" line="165"/>
            </method>
            <javadoc line="169">
                Update the events for a given channel.                
            </javadoc>
            <method name="setInterest" type="void" line="172">
                <params>
                    <param name="channel" type="SelChImpl"/>
                    <param name="mask" type="int"/>
                </params>
                <comment line="175">
                    if the previous pending operation is to add this file descriptor
                     to epoll then update its event set                    
                </comment>
                <comment line="185">
                    update existing registration                    
                </comment>
                <scope line="173">
                    <scope line="176">
                        <declaration name="last" type="Updator" line="177"/>
                        <scope line="178"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="189">
                Add a channel&apos;s file descriptor to epoll                
            </javadoc>
            <method name="add" type="void" line="192">
                <params>
                    <param name="channel" type="SelChImpl"/>
                </params>
                <scope line="193"/>
            </method>
            <javadoc line="198">
                Remove a channel&apos;s file descriptor from epoll                
            </javadoc>
            <method name="release" type="void" line="201">
                <params>
                    <param name="channel" type="SelChImpl"/>
                </params>
                <comment line="204">
                    flush any pending updates                    
                </comment>
                <comment line="211">
                    remove from the idle set (if present)                    
                </comment>
                <comment line="214">
                    remove from epoll (if registered)                    
                </comment>
                <scope line="202">
                    <scope line="204">
                        <scope line="205"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="218">
                Close epoll file descriptor and free poll array                
            </javadoc>
            <method name="closeEPollFD" type="void" line="221"/>
            <method name="poll" type="int" line="226">
                <params>
                    <param name="timeout" type="long"/>
                </params>
                <scope line="229">
                    <scope line="230"/>
                </scope>
            </method>
            <javadoc line="239">
                Update the pending registrations.                
            </javadoc>
            <method name="updateRegistrations" type="void" line="242">
                <comment line="251">
                    if the events are 0 then file descriptor is put into &quot;idle
                     set&quot; to prevent it being polled                    
                </comment>
                <comment line="255">
                    if added to idle set then remove from epoll if registered                    
                </comment>
                <comment line="259">
                    events are specified. If file descriptor was in idle set
                     it must be re-registered (by converting opcode to ADD)                    
                </comment>
                <scope line="243">
                    <declaration name="u" type="Updator" line="244"/>
                    <scope line="245">
                        <declaration name="ch" type="SelChImpl" line="246"/>
                        <scope line="252">
                            <declaration name="added" type="boolean" line="253"/>
                        </scope>
                        <scope line="257">
                            <declaration name="idle" type="boolean" line="260"/>
                            <declaration name="opcode" type="int" line="263"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <declaration name="interrupted" type="boolean" line="271"/>
            <method name="interrupt" type="void" line="273"/>
            <method name="interruptedIndex" type="int" line="277"/>
            <method name="interrupted" type="boolean" line="281"/>
            <method name="clearInterrupted" type="void" line="285"/>
            <scope line="289"/>
            <method name="epollCreate" type="int" line="293"/>
            <method name="epollCtl" type="void" line="294"/>
            <method name="epollWait" type="int" line="295"/>
            <method name="sizeofEPollEvent" type="int" line="297"/>
            <method name="offsetofData" type="int" line="298"/>
            <method name="fdLimit" type="int" line="299"/>
            <method name="interrupt" type="void" line="300"/>
            <method name="init" type="void" line="301"/>
        </class>
    </source>