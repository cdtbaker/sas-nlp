<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.io.IOException"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <class name="EPollArrayWrapper" line="6">
            <javadoc line="6">
                Manipulates a native array of epoll_event structs on Linux:
                  typedef union epoll_data {
                  void ptr;
                  int fd;
                  __uint32_t u32;
                  __uint64_t u64;
                  } epoll_data_t;
                  struct epoll_event {
                  __uint32_t events;
                  epoll_data_t data;
                  };
                  The system call to wait for I/O events is epoll_wait(2). It populates an
                  array of epoll_event structures that are passed to the call. The data
                  member of the epoll_event structure contains the same data as was set
                  when the file descriptor was registered to epoll via epoll_ctl(2). In
                  this implementation we set data.fd to be the file descriptor that we
                  register. That way, we have the file descriptor available when we
                  process the events.
                  All file descriptors registered with epoll have the POLLHUP and POLLERR
                  events enabled even when registered with an event set of 0. To ensure
                  that epoll_wait doesn&apos;t poll an idle file descriptor when the underlying
                  connection is closed or reset then its registration is deleted from
                  epoll (it will be re-added again if the event set is changed)                
            </javadoc>
            <declaration name="EPOLLIN" type="int" line="32"/>
            <declaration name="EPOLL_CTL_ADD" type="int" line="33"/>
            <declaration name="EPOLL_CTL_DEL" type="int" line="34"/>
            <declaration name="EPOLL_CTL_MOD" type="int" line="35"/>
            <declaration name="SIZE_EPOLLEVENT" type="int" line="36"/>
            <declaration name="EVENT_OFFSET" type="int" line="37"/>
            <declaration name="DATA_OFFSET" type="int" line="38"/>
            <declaration name="FD_OFFSET" type="int" line="39"/>
            <declaration name="NUM_EPOLLEVENTS" type="int" line="40"/>
            <declaration name="pollArrayAddress" type="long" line="41"/>
            <declaration name="idleSet" type="HashSet&lt;SelChImpl&gt;" line="42"/>
            <method name="EPollArrayWrapper" type="constructor" line="43">
                <declaration name="allocationSize" type="int" line="45"/>
                <scope line="48"/>
            </method>
            <class name="Updator" line="54">
                <declaration name="channel" type="SelChImpl" line="55"/>
                <declaration name="opcode" type="int" line="56"/>
                <declaration name="events" type="int" line="57"/>
                <method name="Updator" type="constructor" line="58">
                    <params>
                        <param name="channel" type="SelChImpl"/>
                        <param name="opcode" type="int"/>
                        <param name="events" type="int"/>
                    </params>
                </method>
                <method name="Updator" type="constructor" line="63">
                    <params>
                        <param name="channel" type="SelChImpl"/>
                        <param name="opcode" type="int"/>
                    </params>
                </method>
            </class>
            <declaration name="updateList" type="LinkedList&lt;Updator&gt;" line="67"/>
            <declaration name="pollArray" type="AllocatedNativeObject" line="68"/>
            <declaration name="epfd" type="int" line="69"/>
            <declaration name="outgoingInterruptFD" type="int" line="70"/>
            <declaration name="incomingInterruptFD" type="int" line="71"/>
            <declaration name="interruptedIndex" type="int" line="72"/>
            <declaration name="updated" type="int" line="73"/>
            <method name="initInterrupt" type="void" line="74">
                <params>
                    <param name="fd0" type="int"/>
                    <param name="fd1" type="int"/>
                </params>
            </method>
            <method name="putEventOps" type="void" line="79">
                <params>
                    <param name="i" type="int"/>
                    <param name="event" type="int"/>
                </params>
                <declaration name="offset" type="int" line="80"/>
            </method>
            <method name="putData" type="void" line="83">
                <params>
                    <param name="i" type="int"/>
                    <param name="value" type="long"/>
                </params>
                <declaration name="offset" type="int" line="84"/>
            </method>
            <method name="putDescriptor" type="void" line="87">
                <params>
                    <param name="i" type="int"/>
                    <param name="fd" type="int"/>
                </params>
                <declaration name="offset" type="int" line="88"/>
            </method>
            <method name="getEventOps" type="int" line="91">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="offset" type="int" line="92"/>
            </method>
            <method name="getDescriptor" type="int" line="95">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="offset" type="int" line="96"/>
            </method>
            <javadoc line="99">
                Update the events for a given channel.                
            </javadoc>
            <method name="setInterest" type="void" line="102">
                <params>
                    <param name="channel" type="SelChImpl"/>
                    <param name="mask" type="int"/>
                </params>
                <scope line="103">
                    <scope line="104">
                        <declaration name="last" type="Updator" line="105"/>
                        <scope line="106"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="114">
                Add a channel&apos;s file descriptor to epoll                
            </javadoc>
            <method name="add" type="void" line="117">
                <params>
                    <param name="channel" type="SelChImpl"/>
                </params>
                <scope line="118"/>
            </method>
            <javadoc line="122">
                Remove a channel&apos;s file descriptor from epoll                
            </javadoc>
            <method name="release" type="void" line="125">
                <params>
                    <param name="channel" type="SelChImpl"/>
                </params>
                <scope line="126">
                    <scope line="127">
                        <scope line="128"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="136">
                Close epoll file descriptor and free poll array                
            </javadoc>
            <method name="closeEPollFD" type="void" line="139"/>
            <method name="poll" type="int" line="143">
                <params>
                    <param name="timeout" type="long"/>
                </params>
                <scope line="146">
                    <scope line="147"/>
                </scope>
            </method>
            <javadoc line="155">
                Update the pending registrations.                
            </javadoc>
            <method name="updateRegistrations" type="void" line="158">
                <scope line="159">
                    <declaration name="u" type="Updator" line="160"/>
                    <scope line="161">
                        <declaration name="ch" type="SelChImpl" line="162"/>
                        <scope line="164">
                            <declaration name="added" type="boolean" line="165"/>
                        </scope>
                        <scope line="168">
                            <declaration name="idle" type="boolean" line="169"/>
                            <declaration name="opcode" type="int" line="171"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <declaration name="interrupted" type="boolean" line="177"/>
            <method name="interrupt" type="void" line="178"/>
            <method name="interruptedIndex" type="int" line="181"/>
            <method name="interrupted" type="boolean" line="184"/>
            <method name="clearInterrupted" type="void" line="187"/>
            <scope line="190"/>
            <method name="epollCreate" type="int" line="193"/>
            <method name="epollCtl" type="void" line="194"/>
            <method name="epollWait" type="int" line="195"/>
            <method name="sizeofEPollEvent" type="int" line="196"/>
            <method name="offsetofData" type="int" line="197"/>
            <method name="fdLimit" type="int" line="198"/>
            <method name="interrupt" type="void" line="199"/>
            <method name="init" type="void" line="200"/>
        </class>
    </source>