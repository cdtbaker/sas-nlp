<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.io.FileDescriptor"/>
        <import package="java.io.IOException"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.InetSocketAddress"/>
        <import package="java.nio.channels.Channel"/>
        <import package="java.nio.channels.SocketChannel"/>
        <import package="java.nio.channels.ServerSocketChannel"/>
        <import package="java.nio.channels.DatagramChannel"/>
        <import package="java.nio.channels.spi.SelectorProvider"/>
        <class name="InheritedChannel" line="39">
            <comment line="42">
                the &quot;types&quot; of socket returned by soType0                
            </comment>
            <comment line="47">
                oflag values when opening a file                
            </comment>
            <comment line="52">
                In order to &quot;detach&quot; the standard streams we dup them to devnull.
                 In order to reduce the possibility of an error at close time we
                 open devnull early - that way we know we won&apos;t run out of file
                 descriptors at close time. This makes the close operation a
                 simple dup2 operation for each of the standard streams.                
            </comment>
            <comment line="72">
                Override the implCloseSelectableChannel for each channel type - this
                 allows us to &quot;detach&quot; the standard streams after closing and ensures
                 that the underlying socket really closes.                
            </comment>
            <comment line="126">
                If there&apos;s a SecurityManager then check for the appropriate
                 RuntimePermission.                
            </comment>
            <comment line="140">
                If standard inherited channel is connected to a socket then return a Channel
                 of the appropriate type based standard input.                
            </comment>
            <comment line="204">
                Returns a Channel representing the inherited channel if the
                 inherited channel is a stream connected to a network socket.                
            </comment>
            <comment line="228">
                -- Native methods --                
            </comment>
            <declaration name="UNKNOWN" type="int" line="42"/>
            <declaration name="SOCK_STREAM" type="int" line="43"/>
            <declaration name="SOCK_DGRAM" type="int" line="44"/>
            <declaration name="O_RDONLY" type="int" line="47"/>
            <declaration name="O_WRONLY" type="int" line="48"/>
            <declaration name="O_RDWR" type="int" line="49"/>
            <declaration name="devnull" type="int" line="58"/>
            <method name="detachIOStreams" type="void" line="60">
                <comment line="66">
                    this shouldn&apos;t happen                    
                </comment>
                <scope line="61"/>
                <scope line="65"/>
            </method>
            <class name="InheritedSocketChannelImpl" line="76">
                <extends class="SocketChannelImpl"/>
                <method name="InheritedSocketChannelImpl" type="constructor" line="82">
                    <params>
                        <param name="sp" type="SelectorProvider"/>
                        <param name="fd" type="FileDescriptor"/>
                        <param name="remote" type="InetSocketAddress"/>
                    </params>
                </method>
                <method name="implCloseSelectableChannel" type="void" line="86"/>
            </class>
            <class name="InheritedServerSocketChannelImpl" line="92">
                <extends class="ServerSocketChannelImpl"/>
                <method name="InheritedServerSocketChannelImpl" type="constructor" line="98">
                    <params>
                        <param name="sp" type="SelectorProvider"/>
                        <param name="fd" type="FileDescriptor"/>
                    </params>
                </method>
                <method name="implCloseSelectableChannel" type="void" line="102"/>
            </class>
            <class name="InheritedDatagramChannelImpl" line="109">
                <extends class="DatagramChannelImpl"/>
                <method name="InheritedDatagramChannelImpl" type="constructor" line="115">
                    <params>
                        <param name="sp" type="SelectorProvider"/>
                        <param name="fd" type="FileDescriptor"/>
                    </params>
                </method>
                <method name="implCloseSelectableChannel" type="void" line="119"/>
            </class>
            <method name="checkAccess" type="void" line="129">
                <params>
                    <param name="c" type="Channel"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="130"/>
                <scope line="131"/>
            </method>
            <method name="createChannel" type="Channel" line="143">
                <comment line="145">
                    dup the file descriptor - we do this so that for two reasons :-                    
                </comment>
                <comment line="146">
                    1. Avoids any timing issues with FileDescriptor.in being closed                    
                </comment>
                <comment line="147">
                    or redirected while we create the channel.                    
                </comment>
                <comment line="148">
                    2. Allows streams based on file descriptor 0 to co-exist with                    
                </comment>
                <comment line="149">
                    the channel (closing one doesn&apos;t impact the other)                    
                </comment>
                <comment line="153">
                    Examine the file descriptor - if it&apos;s not a socket then we don&apos;t                    
                </comment>
                <comment line="154">
                    create a channel so we release the file descriptor.                    
                </comment>
                <comment line="164">
                    Next we create a FileDescriptor for the dup&apos;ed file descriptor                    
                </comment>
                <comment line="165">
                    Have to use reflection and also make assumption on how FD                    
                </comment>
                <comment line="166">
                    is implemented.                    
                </comment>
                <comment line="175">
                    Now create the channel. If the socket is a streams socket then                    
                </comment>
                <comment line="176">
                    we see if tthere is a peer (ie: connected). If so, then we                    
                </comment>
                <comment line="177">
                    create a SocketChannel, otherwise a ServerSocketChannel.                    
                </comment>
                <comment line="178">
                    If the socket is a datagram socket then create a DatagramChannel                    
                </comment>
                <declaration name="fdVal" type="int" line="151"/>
                <declaration name="st" type="int" line="156"/>
                <scope line="158"/>
                <declaration name="paramTypes" type="Class" line="168"/>
                <declaration name="ctr" type="Constructor" line="169"/>
                <declaration name="args" type="Object" line="171"/>
                <declaration name="fd" type="FileDescriptor" line="172"/>
                <declaration name="provider" type="SelectorProvider" line="180"/>
                <declaration name="c" type="Channel" line="183"/>
                <scope line="184">
                    <declaration name="ia" type="InetAddress" line="185"/>
                    <scope line="186"/>
                    <scope line="188">
                        <declaration name="port" type="int" line="189"/>
                        <declaration name="isa" type="InetSocketAddress" line="191"/>
                    </scope>
                </scope>
                <scope line="194"/>
            </method>
            <declaration name="haveChannel" type="boolean" line="200"/>
            <declaration name="channel" type="Channel" line="201"/>
            <method name="getChannel" type="Channel" line="207">
                <comment line="212">
                    If we don&apos;t have the channel try to create it                    
                </comment>
                <comment line="218">
                    if there is a channel then do the security check before                    
                </comment>
                <comment line="219">
                    returning it.                    
                </comment>
                <scope line="208"/>
                <scope line="213"/>
                <scope line="220"/>
            </method>
            <method name="dup" type="int" line="229"/>
            <method name="dup2" type="void" line="230"/>
            <method name="open0" type="int" line="231"/>
            <method name="close0" type="void" line="232"/>
            <method name="soType0" type="int" line="233"/>
            <method name="peerAddress0" type="InetAddress" line="234"/>
            <method name="peerPort0" type="int" line="235"/>
            <scope line="237"/>
        </class>
    </source>