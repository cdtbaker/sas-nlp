<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio"/>
        <import package="java.nio.file"/>
        <import package="java.nio.charset"/>
        <import package="java.io"/>
        <import package="java.net.URI"/>
        <import package="java.util"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="sun.nio.fs.UnixNativeDispatcher"/>
        <import package="sun.nio.fs.UnixConstants"/>
        <class name="UnixPath" line="39">
            <extends class="AbstractPath"/>
            <comment line="50">
                FIXME - eliminate this reference to reduce space                
            </comment>
            <comment line="53">
                internal representation                
            </comment>
            <comment line="56">
                String representation (created lazily)                
            </comment>
            <comment line="59">
                cached hashcode (created lazily, no need to be volatile)                
            </comment>
            <comment line="62">
                array of offsets of elements in path (created lazily)                
            </comment>
            <comment line="75">
                package-private
                 removes redundant slashes and check input for invalid characters                
            </comment>
            <comment line="119">
                encodes the given path-string into a sequence of bytes                
            </comment>
            <comment line="160">
                package-private                
            </comment>
            <comment line="165">
                use this path when making system/library calls                
            </comment>
            <comment line="182">
                use this message when throwing exceptions                
            </comment>
            <comment line="187">
                use this path for permission checks                
            </comment>
            <comment line="196">
                Checks that the given file is a UnixPath                
            </comment>
            <comment line="205">
                create offset list if not already created                
            </comment>
            <comment line="248">
                returns {@code true} if this path is an empty path                
            </comment>
            <comment line="253">
                returns an empty path                
            </comment>
            <comment line="374">
                Resolve child against given base                
            </comment>
            <comment line="766">
                -- file operations --                
            </comment>
            <comment line="768">
                package-private                
            </comment>
            <javadoc line="39">
                Solaris/Linux implementation of java.nio.file.Path                
            </javadoc>
            <declaration name="encoder" type="ThreadLocal&lt;SoftReference&lt;CharsetEncoder&gt;&gt;" line="46"/>
            <declaration name="fs" type="UnixFileSystem" line="50"/>
            <declaration name="path" type="byte[]" line="53"/>
            <declaration name="stringValue" type="String" line="56"/>
            <declaration name="hash" type="int" line="59"/>
            <declaration name="offsets" type="int[]" line="62"/>
            <method name="UnixPath" type="constructor" line="64">
                <params>
                    <param name="fs" type="UnixFileSystem"/>
                    <param name="path" type="byte[]"/>
                </params>
            </method>
            <method name="UnixPath" type="constructor" line="69">
                <params>
                    <param name="fs" type="UnixFileSystem"/>
                    <param name="input" type="String"/>
                </params>
                <comment line="71">
                    removes redundant slashes and checks for invalid characters                    
                </comment>
            </method>
            <method name="normalizeAndCheck" type="String" line="76">
                <params>
                    <param name="input" type="String"/>
                </params>
                <declaration name="n" type="int" line="77"/>
                <declaration name="prevChar" type="char" line="78"/>
                <scope line="79">
                    <declaration name="c" type="char" line="80"/>
                </scope>
            </method>
            <method name="checkNotNul" type="void" line="91">
                <params>
                    <param name="input" type="String"/>
                    <param name="c" type="char"/>
                </params>
            </method>
            <method name="normalize" type="String" line="96">
                <params>
                    <param name="input" type="String"/>
                    <param name="len" type="int"/>
                    <param name="off" type="int"/>
                </params>
                <declaration name="n" type="int" line="99"/>
                <declaration name="sb" type="StringBuilder" line="103"/>
                <declaration name="prevChar" type="char" line="106"/>
                <scope line="107">
                    <declaration name="c" type="char" line="108"/>
                </scope>
            </method>
            <method name="encode" type="byte[]" line="119">
                <params>
                    <param name="input" type="String"/>
                </params>
                <comment line="132">
                    size output buffer for worse-case size                    
                </comment>
                <comment line="135">
                    encode                    
                </comment>
                <comment line="152">
                    trim result to actual length if required                    
                </comment>
                <declaration name="ref" type="SoftReference&lt;CharsetEncoder&gt;" line="120"/>
                <declaration name="ce" type="CharsetEncoder" line="121"/>
                <scope line="122"/>
                <declaration name="ca" type="char[]" line="129"/>
                <declaration name="ba" type="byte[]" line="132"/>
                <declaration name="bb" type="ByteBuffer" line="135"/>
                <declaration name="cb" type="CharBuffer" line="136"/>
                <declaration name="cr" type="CoderResult" line="138"/>
                <declaration name="error" type="boolean" line="139"/>
                <scope line="140"/>
                <scope line="142"/>
                <scope line="146"/>
                <declaration name="len" type="int" line="152"/>
            </method>
            <method name="asByteArray" type="byte[]" line="160"/>
            <method name="getByteArrayForSysCalls" type="byte[]" line="165">
                <comment line="167">
                    resolve against default directory if required (chdir allowed or
                     file system default directory is not working directory)                    
                </comment>
                <comment line="175">
                    empty path case will access current directory                    
                </comment>
                <scope line="168"/>
                <scope line="170">
                    <scope line="171"/>
                    <scope line="173">
                        <declaration name="here" type="byte[]" line="175"/>
                    </scope>
                </scope>
            </method>
            <method name="getPathForExecptionMessage" type="String" line="182"/>
            <method name="getPathForPermissionCheck" type="String" line="187">
                <scope line="188"/>
                <scope line="190"/>
            </method>
            <method name="toUnixPath" type="UnixPath" line="196">
                <params>
                    <param name="obj" type="Path"/>
                </params>
            </method>
            <method name="initOffsets" type="void" line="205">
                <comment line="210">
                    count names                    
                </comment>
                <comment line="214">
                    empty path has one name                    
                </comment>
                <comment line="227">
                    populate offsets                    
                </comment>
                <scope line="206">
                    <declaration name="count" type="int" line="207"/>
                    <scope line="212"/>
                    <scope line="215">
                        <scope line="216">
                            <declaration name="c" type="byte" line="217"/>
                            <scope line="218"/>
                        </scope>
                    </scope>
                    <declaration name="result" type="int[]" line="227"/>
                    <scope line="230">
                        <declaration name="c" type="byte" line="231"/>
                        <scope line="232"/>
                        <scope line="234"/>
                    </scope>
                    <scope line="240"/>
                </scope>
            </method>
            <method name="isEmpty" type="boolean" line="248"/>
            <method name="emptyPath" type="UnixPath" line="253"/>
            <method name="getFileSystem" type="UnixFileSystem" line="258"/>
            <method name="getRoot" type="UnixPath" line="263">
                <scope line="264"/>
                <scope line="266"/>
            </method>
            <method name="getFileName" type="UnixPath" line="272">
                <comment line="278">
                    no elements so no name                    
                </comment>
                <comment line="282">
                    one name element and no root component                    
                </comment>
                <declaration name="count" type="int" line="275"/>
                <declaration name="lastOffset" type="int" line="285"/>
                <declaration name="len" type="int" line="286"/>
                <declaration name="result" type="byte[]" line="287"/>
            </method>
            <method name="getParent" type="UnixPath" line="293">
                <comment line="299">
                    no elements so no parent                    
                </comment>
                <comment line="304">
                    parent is root only (may be null)                    
                </comment>
                <declaration name="count" type="int" line="296"/>
                <scope line="297"/>
                <declaration name="len" type="int" line="301"/>
                <scope line="302"/>
                <declaration name="result" type="byte[]" line="306"/>
            </method>
            <method name="getNameCount" type="int" line="312"/>
            <method name="getName" type="UnixPath" line="318">
                <params>
                    <param name="index" type="int"/>
                </params>
                <comment line="334">
                    construct result                    
                </comment>
                <declaration name="begin" type="int" line="325"/>
                <declaration name="len" type="int" line="326"/>
                <scope line="327"/>
                <scope line="329"/>
                <declaration name="result" type="byte[]" line="334"/>
            </method>
            <method name="subpath" type="UnixPath" line="340">
                <params>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                </params>
                <comment line="354">
                    starting offset and length                    
                </comment>
                <comment line="363">
                    construct result                    
                </comment>
                <scope line="349"/>
                <declaration name="begin" type="int" line="354"/>
                <declaration name="len" type="int" line="355"/>
                <scope line="356"/>
                <scope line="358"/>
                <declaration name="result" type="byte[]" line="363"/>
            </method>
            <method name="isAbsolute" type="boolean" line="369"/>
            <method name="resolve" type="byte[]" line="374">
                <params>
                    <param name="base" type="byte[]"/>
                    <param name="child" type="byte[]"/>
                </params>
                <declaration name="baseLength" type="int" line="375"/>
                <declaration name="childLength" type="int" line="376"/>
                <declaration name="result" type="byte[]" line="381"/>
                <scope line="382"/>
                <scope line="386"/>
            </method>
            <method name="resolve" type="UnixPath" line="396">
                <params>
                    <param name="obj" type="Path"/>
                </params>
                <declaration name="other" type="byte[]" line="397"/>
                <declaration name="result" type="byte[]" line="400"/>
            </method>
            <method name="resolve" type="UnixPath" line="404">
                <params>
                    <param name="other" type="byte[]"/>
                </params>
            </method>
            <method name="relativize" type="UnixPath" line="409">
                <params>
                    <param name="obj" type="Path"/>
                </params>
                <comment line="415">
                    can only relativize paths of the same type                    
                </comment>
                <comment line="419">
                    this path is the empty path                    
                </comment>
                <comment line="426">
                    skip matching names                    
                </comment>
                <comment line="437">
                    remaining name components in other                    
                </comment>
                <comment line="442">
                    other is the empty path                    
                </comment>
                <comment line="445">
                    result is a  &quot;../&quot; for each remaining name in base
                     followed by the remaining names in other. If the remainder is
                     the empty path then we don&apos;t add the final trailing slash.                    
                </comment>
                <comment line="468">
                    no remaining names in other so result is simply a sequence of &quot;..&quot;                    
                </comment>
                <comment line="474">
                    no tailing slash at the end                    
                </comment>
                <declaration name="other" type="UnixPath" line="410"/>
                <declaration name="bn" type="int" line="422"/>
                <declaration name="cn" type="int" line="423"/>
                <declaration name="n" type="int" line="426"/>
                <declaration name="i" type="int" line="427"/>
                <scope line="428"/>
                <declaration name="dotdots" type="int" line="434"/>
                <scope line="435">
                    <declaration name="remainder" type="UnixPath" line="437"/>
                    <declaration name="isOtherEmpty" type="boolean" line="442"/>
                    <declaration name="len" type="int" line="447"/>
                    <scope line="448"/>
                    <declaration name="result" type="byte[]" line="452"/>
                    <declaration name="pos" type="int" line="453"/>
                    <scope line="454">
                        <scope line="457"/>
                        <scope line="459"/>
                    </scope>
                </scope>
                <scope line="466">
                    <declaration name="result" type="byte[]" line="468"/>
                    <declaration name="pos" type="int" line="469"/>
                    <scope line="470"/>
                </scope>
            </method>
            <method name="normalize" type="Path" line="483">
                <comment line="489">
                    true =&gt; ignore name                    
                </comment>
                <comment line="490">
                    length of name                    
                </comment>
                <comment line="491">
                    number of names remaining                    
                </comment>
                <comment line="492">
                    has at least one ..                    
                </comment>
                <comment line="495">
                    first pass:
                       1. compute length of names
                       2. mark all occurences of &quot;.&quot; to ignore
                       3. and look for any occurences of &quot;..&quot;                    
                </comment>
                <comment line="511">
                    ignore  &quot;.&quot;                    
                </comment>
                <comment line="515">
                    &quot;..&quot; found                    
                </comment>
                <comment line="521">
                    multiple passes to eliminate all occurences of name/..                    
                </comment>
                <comment line="531">
                    not a &quot;..&quot;                    
                </comment>
                <comment line="543">
                    &quot;..&quot; found                    
                </comment>
                <comment line="545">
                    name/&lt;ignored&gt;/.. found so mark name and &quot;..&quot; to be
                     ignored                    
                </comment>
                <comment line="552">
                    Case: /&lt;ignored&gt;/.. so mark &quot;..&quot; as ignored                    
                </comment>
                <comment line="562">
                    all proceeding names are ignored                    
                </comment>
                <comment line="572">
                    no redundant names                    
                </comment>
                <comment line="576">
                    corner case - all names removed                    
                </comment>
                <comment line="581">
                    compute length of result                    
                </comment>
                <comment line="592">
                    copy names into result                    
                </comment>
                <declaration name="count" type="int" line="484"/>
                <declaration name="ignore" type="boolean[]" line="488"/>
                <declaration name="size" type="int[]" line="489"/>
                <declaration name="remaining" type="int" line="490"/>
                <declaration name="hasDotDot" type="boolean" line="491"/>
                <declaration name="isAbsolute" type="boolean" line="492"/>
                <scope line="498">
                    <declaration name="begin" type="int" line="499"/>
                    <declaration name="len" type="int" line="500"/>
                    <scope line="501"/>
                    <scope line="503"/>
                    <scope line="508">
                        <scope line="509"/>
                        <scope line="513"/>
                    </scope>
                </scope>
                <scope line="521">
                    <declaration name="prevRemaining" type="int" line="522"/>
                    <scope line="523">
                        <declaration name="prevName" type="int" line="525"/>
                        <scope line="526">
                            <scope line="531"/>
                            <declaration name="begin" type="int" line="536"/>
                            <scope line="537"/>
                            <scope line="543"/>
                            <scope line="550">
                                <scope line="552">
                                    <declaration name="hasPrevious" type="boolean" line="553"/>
                                    <scope line="554">
                                        <scope line="555"/>
                                    </scope>
                                    <scope line="560"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="576"/>
                <declaration name="len" type="int" line="581"/>
                <scope line="585"/>
                <declaration name="result" type="byte[]" line="589"/>
                <declaration name="pos" type="int" line="592"/>
                <scope line="595">
                    <scope line="596">
                        <scope line="599"/>
                    </scope>
                </scope>
            </method>
            <method name="startsWith" type="boolean" line="608">
                <params>
                    <param name="other" type="Path"/>
                </params>
                <comment line="614">
                    other path is longer                    
                </comment>
                <comment line="621">
                    other path has no name elements                    
                </comment>
                <comment line="626">
                    given path has more elements that this path                    
                </comment>
                <comment line="630">
                    same number of elements so must be exact match                    
                </comment>
                <comment line="636">
                    check offsets of elements match                    
                </comment>
                <comment line="644">
                    offsets match so need to compare bytes                    
                </comment>
                <comment line="652">
                    final check that match is on name boundary                    
                </comment>
                <declaration name="that" type="UnixPath" line="611"/>
                <declaration name="thisOffsetCount" type="int" line="617"/>
                <declaration name="thatOffsetCount" type="int" line="618"/>
                <scope line="621"/>
                <scope line="631"/>
                <scope line="636">
                    <declaration name="o1" type="Integer" line="637"/>
                    <declaration name="o2" type="Integer" line="638"/>
                </scope>
                <declaration name="i" type="int" line="644"/>
                <scope line="645"/>
            </method>
            <method name="endsWith" type="boolean" line="659">
                <params>
                    <param name="other" type="Path"/>
                </params>
                <comment line="668">
                    other path is longer                    
                </comment>
                <comment line="672">
                    other path is the empty path                    
                </comment>
                <comment line="676">
                    other path is absolute so this path must be absolute                    
                </comment>
                <comment line="683">
                    given path has more elements that this path                    
                </comment>
                <comment line="687">
                    same number of elements                    
                </comment>
                <comment line="697">
                    this path has more elements so given path must be relative                    
                </comment>
                <comment line="703">
                    compare bytes                    
                </comment>
                <declaration name="that" type="UnixPath" line="662"/>
                <declaration name="thisLen" type="int" line="664"/>
                <declaration name="thatLen" type="int" line="665"/>
                <declaration name="thisOffsetCount" type="int" line="679"/>
                <declaration name="thatOffsetCount" type="int" line="680"/>
                <scope line="683"/>
                <scope line="685">
                    <scope line="687">
                        <declaration name="expectedLen" type="int" line="690"/>
                    </scope>
                    <scope line="695"/>
                </scope>
                <declaration name="thisPos" type="int" line="703"/>
                <declaration name="thatPos" type="int" line="704"/>
                <scope line="707"/>
            </method>
            <method name="compareTo" type="int" line="716">
                <params>
                    <param name="other" type="Path"/>
                </params>
                <declaration name="len1" type="int" line="717"/>
                <declaration name="len2" type="int" line="718"/>
                <declaration name="n" type="int" line="720"/>
                <declaration name="v1" type="byte" line="721"/>
                <declaration name="v2" type="byte" line="722"/>
                <declaration name="k" type="int" line="724"/>
                <scope line="725">
                    <declaration name="c1" type="int" line="726"/>
                    <declaration name="c2" type="int" line="727"/>
                    <scope line="728"/>
                </scope>
            </method>
            <method name="equals" type="boolean" line="737">
                <params>
                    <param name="ob" type="Object"/>
                </params>
                <scope line="738"/>
            </method>
            <method name="hashCode" type="int" line="745">
                <comment line="747">
                    OK if two or more threads compute hash                    
                </comment>
                <declaration name="h" type="int" line="747"/>
                <scope line="748">
                    <scope line="749"/>
                </scope>
            </method>
            <method name="toString" type="String" line="758">
                <comment line="760">
                    OK if two or more threads create a String                    
                </comment>
                <comment line="762">
                    platform encoding                    
                </comment>
            </method>
            <method name="openForAttributeAccess" type="int" line="768">
                <params>
                    <param name="followLinks" type="boolean"/>
                </params>
                <comment line="776">
                    HACK: EINVAL instead of ELOOP on Solaris 10 prior to u4 (see 6460380)                    
                </comment>
                <comment line="785">
                    keep compile happy                    
                </comment>
                <declaration name="flags" type="int" line="769"/>
                <scope line="772"/>
                <scope line="774"/>
            </method>
            <method name="checkRead" type="void" line="788">
                <declaration name="sm" type="SecurityManager" line="789"/>
            </method>
            <method name="checkWrite" type="void" line="794">
                <declaration name="sm" type="SecurityManager" line="795"/>
            </method>
            <method name="checkDelete" type="void" line="800">
                <declaration name="sm" type="SecurityManager" line="801"/>
            </method>
            <method name="toAbsolutePath" type="UnixPath" line="807">
                <comment line="812">
                    The path is relative so need to resolve against default directory,
                     taking care not to reveal the user.dir                    
                </comment>
                <scope line="808"/>
                <declaration name="sm" type="SecurityManager" line="813"/>
                <scope line="814"/>
            </method>
            <method name="toRealPath" type="Path" line="822">
                <params>
                    <param name="options" type="LinkOption"/>
                </params>
                <comment line="828">
                    if resolving links then use realpath                    
                </comment>
                <comment line="838">
                    if not resolving links then eliminate &quot;.&quot; and also &quot;..&quot;
                     where the previous element is not a link.                    
                </comment>
                <comment line="844">
                    eliminate &quot;.&quot;                    
                </comment>
                <comment line="848">
                    cannot eliminate &quot;..&quot; if previous element is a link                    
                </comment>
                <comment line="869">
                    check file exists (without following links)                    
                </comment>
                <declaration name="absolute" type="UnixPath" line="825"/>
                <scope line="828">
                    <scope line="829">
                        <declaration name="rp" type="byte[]" line="830"/>
                    </scope>
                    <scope line="832"/>
                </scope>
                <declaration name="result" type="UnixPath" line="839"/>
                <scope line="840">
                    <declaration name="element" type="UnixPath" line="841"/>
                    <scope line="850">
                        <declaration name="attrs" type="UnixFileAttributes" line="851"/>
                        <scope line="852"/>
                        <scope line="854"/>
                        <scope line="857">
                            <scope line="859"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="869"/>
                <scope line="871"/>
            </method>
            <method name="toUri" type="URI" line="878"/>
            <method name="register" type="WatchKey" line="887">
                <params>
                    <param name="watcher" type="WatchService"/>
                    <param name="events" type="WatchEvent.Kind<?>[]"/>
                    <param name="modifiers" type="WatchEvent.Modifier"/>
                </params>
            </method>
        </class>
    </source>