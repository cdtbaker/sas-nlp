<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util"/>
        <import package="java.io.IOException"/>
        <import package="sun.misc.Unsafe"/>
        <import package="sun.nio.fs.UnixNativeDispatcher"/>
        <import package="sun.nio.fs.UnixConstants"/>
        <class name="LinuxWatchService" line="10">
            <extends class="AbstractWatchService"/>
            <javadoc line="10">
                Linux implementation of WatchService based on inotify.
                  In summary a background thread polls inotify plus a socket used for the wakeup
                  mechanism. Requests to add or remove a watch, or close the watch service,
                  cause the thread to wakeup and process the request. Events are processed
                  by the thread which causes it to signal/queue the corresponding watch keys.                
            </javadoc>
            <declaration name="unsafe" type="Unsafe" line="18"/>
            <declaration name="poller" type="Poller" line="19"/>
            <method name="LinuxWatchService" type="constructor" line="20">
                <params>
                    <param name="fs" type="UnixFileSystem"/>
                </params>
                <declaration name="ifd" type="int" line="21"/>
                <scope line="22"/>
                <scope line="25"/>
                <declaration name="sp" type="int" line="28"/>
                <scope line="29"/>
                <scope line="34"/>
            </method>
            <method name="register" type="WatchKey" line="41">
                <params>
                    <param name="dir" type="Path"/>
                    <param name="events" type="WatchEvent.Kind<?>[]"/>
                    <param name="modifiers" type="WatchEvent.Modifier"/>
                </params>
            </method>
            <method name="implClose" type="void" line="44"/>
            <class name="LinuxWatchKey" line="47">
                <extends class="AbstractWatchKey"/>
                <javadoc line="47">
                    WatchKey implementation                    
                </javadoc>
                <declaration name="ifd" type="int" line="51"/>
                <declaration name="wd" type="int" line="52"/>
                <method name="LinuxWatchKey" type="constructor" line="53">
                    <params>
                        <param name="dir" type="UnixPath"/>
                        <param name="watcher" type="LinuxWatchService"/>
                        <param name="ifd" type="int"/>
                        <param name="wd" type="int"/>
                    </params>
                </method>
                <method name="descriptor" type="int" line="58"/>
                <method name="invalidate" type="void" line="61">
                    <params>
                        <param name="remove" type="boolean"/>
                    </params>
                    <scope line="62">
                        <scope line="63"/>
                        <scope line="66"/>
                    </scope>
                </method>
                <method name="isValid" type="boolean" line="71"/>
                <method name="cancel" type="void" line="74">
                    <scope line="75"/>
                </method>
            </class>
            <class name="Poller" line="80">
                <extends class="AbstractPoller"/>
                <javadoc line="80">
                    Background thread to read from inotify                    
                </javadoc>
                <declaration name="SIZEOF_INOTIFY_EVENT" type="int" line="84"/>
                <javadoc line="84">
                    struct inotify_event {
                      int          wd;
                      uint32_t     mask;
                      uint32_t     len;
                      char name    __flexarr;  // present if len &gt; 0
                      } act_t;                    
                </javadoc>
                <declaration name="offsets" type="int[]" line="93"/>
                <declaration name="OFFSETOF_WD" type="int" line="94"/>
                <declaration name="OFFSETOF_MASK" type="int" line="95"/>
                <declaration name="OFFSETOF_LEN" type="int" line="96"/>
                <declaration name="OFFSETOF_NAME" type="int" line="97"/>
                <declaration name="IN_MODIFY" type="int" line="98"/>
                <declaration name="IN_ATTRIB" type="int" line="99"/>
                <declaration name="IN_MOVED_FROM" type="int" line="100"/>
                <declaration name="IN_MOVED_TO" type="int" line="101"/>
                <declaration name="IN_CREATE" type="int" line="102"/>
                <declaration name="IN_DELETE" type="int" line="103"/>
                <declaration name="IN_UNMOUNT" type="int" line="104"/>
                <declaration name="IN_Q_OVERFLOW" type="int" line="105"/>
                <declaration name="IN_IGNORED" type="int" line="106"/>
                <declaration name="BUFFER_SIZE" type="int" line="107"/>
                <declaration name="fs" type="UnixFileSystem" line="108"/>
                <declaration name="watcher" type="LinuxWatchService" line="109"/>
                <declaration name="ifd" type="int" line="110"/>
                <declaration name="socketpair" type="int" line="111"/>
                <declaration name="wdToKey" type="Map&lt;Integer,LinuxWatchKey&gt;" line="112"/>
                <declaration name="address" type="long" line="113"/>
                <method name="Poller" type="constructor" line="114">
                    <params>
                        <param name="fs" type="UnixFileSystem"/>
                        <param name="watcher" type="LinuxWatchService"/>
                        <param name="ifd" type="int"/>
                        <param name="sp" type="int[]"/>
                    </params>
                </method>
                <method name="wakeup" type="void" line="122">
                    <scope line="123"/>
                    <scope line="126"/>
                </method>
                <method name="implRegister" type="Object" line="130">
                    <params>
                        <param name="obj" type="Path"/>
                        <param name="events" type="Set<? extends WatchEvent.Kind<?>>"/>
                        <param name="modifiers" type="WatchEvent.Modifier"/>
                    </params>
                    <declaration name="dir" type="UnixPath" line="131"/>
                    <declaration name="mask" type="int" line="132"/>
                    <scope line="133">
                        <scope line="134"/>
                        <scope line="138"/>
                        <scope line="142"/>
                    </scope>
                    <scope line="147">
                        <scope line="148"/>
                    </scope>
                    <declaration name="attrs" type="UnixFileAttributes" line="154"/>
                    <scope line="155"/>
                    <scope line="158"/>
                    <scope line="161"/>
                    <declaration name="wd" type="int" line="164"/>
                    <scope line="165">
                        <declaration name="buffer" type="NativeBuffer" line="166"/>
                        <scope line="167"/>
                        <scope line="170"/>
                    </scope>
                    <scope line="174">
                        <scope line="175"/>
                    </scope>
                    <declaration name="key" type="LinuxWatchKey" line="180"/>
                    <scope line="181"/>
                </method>
                <method name="implCancelKey" type="void" line="187">
                    <params>
                        <param name="obj" type="WatchKey"/>
                    </params>
                    <declaration name="key" type="LinuxWatchKey" line="188"/>
                    <scope line="189"/>
                </method>
                <method name="implCloseAll" type="void" line="194">
                    <scope line="195"/>
                </method>
                <javadoc line="204">
                    Poller main loop                    
                </javadoc>
                <method name="run" type="void" line="207">
                    <scope line="208">
                        <scope line="209">
                            <declaration name="nReady" type="int" line="210"/>
                            <scope line="212"/>
                            <scope line="215"/>
                            <scope line="219">
                                <scope line="220">
                                    <declaration name="shutdown" type="boolean" line="222"/>
                                </scope>
                                <scope line="225"/>
                            </scope>
                            <declaration name="offset" type="int" line="229"/>
                            <scope line="230">
                                <declaration name="event" type="long" line="231"/>
                                <declaration name="wd" type="int" line="232"/>
                                <declaration name="mask" type="int" line="233"/>
                                <declaration name="len" type="int" line="234"/>
                                <declaration name="name" type="UnixPath" line="235"/>
                                <scope line="236">
                                    <declaration name="actual" type="int" line="237"/>
                                    <scope line="238">
                                        <declaration name="last" type="long" line="239"/>
                                    </scope>
                                    <scope line="243">
                                        <declaration name="buf" type="byte[]" line="244"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="254"/>
                </method>
                <javadoc line="258">
                    map inotify event to WatchEvent.Kind                    
                </javadoc>
                <method name="maskToEventKind" type="WatchEvent.Kind<?>" line="261">
                    <params>
                        <param name="mask" type="int"/>
                    </params>
                </method>
                <javadoc line="270">
                    Process event from inotify                    
                </javadoc>
                <method name="processEvent" type="void" line="273">
                    <params>
                        <param name="wd" type="int"/>
                        <param name="mask" type="int"/>
                        <param name="name" type="UnixPath"/>
                    </params>
                    <scope line="274">
                        <scope line="275"/>
                    </scope>
                    <declaration name="key" type="LinuxWatchKey" line="280"/>
                    <scope line="282"/>
                    <declaration name="kind" type="WatchEvent.Kind&lt;?&gt;" line="289"/>
                    <scope line="290"/>
                </method>
            </class>
            <method name="eventSize" type="int" line="295"/>
            <method name="eventOffsets" type="int[]" line="296"/>
            <method name="inotifyInit" type="int" line="297"/>
            <method name="inotifyAddWatch" type="int" line="298"/>
            <method name="inotifyRmWatch" type="void" line="299"/>
            <method name="configureBlocking" type="void" line="300"/>
            <method name="socketpair" type="void" line="301"/>
            <method name="poll" type="int" line="302"/>
            <scope line="303">
                <anonymous_class line="304">
                    <method name="run" type="Void" line="305"/>
                </anonymous_class>
            </scope>
        </class>
    </source>