<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file"/>
        <import package="java.nio.file.attribute"/>
        <import package="java.nio.channels"/>
        <import package="java.net.URI"/>
        <import package="java.util.concurrent.ExecutorService"/>
        <import package="java.io.IOException"/>
        <import package="java.io.FilePermission"/>
        <import package="java.util"/>
        <import package="java.security.AccessController"/>
        <import package="sun.nio.ch.ThreadPool"/>
        <import package="sun.security.util.SecurityConstants"/>
        <import package="sun.nio.fs.UnixNativeDispatcher"/>
        <import package="sun.nio.fs.UnixConstants"/>
        <class name="UnixFileSystemProvider" line="43">
            <extends class="AbstractFileSystemProvider"/>
            <javadoc line="43">
                Base implementation of FileSystemProvider                
            </javadoc>
            <declaration name="USER_DIR" type="String" line="50"/>
            <declaration name="theFileSystem" type="UnixFileSystem" line="51"/>
            <method name="UnixFileSystemProvider" type="constructor" line="53">
                <declaration name="userDir" type="String" line="54"/>
            </method>
            <method name="newFileSystem" type="UnixFileSystem" line="58"/>
            <javadoc line="58">
                Constructs a new file system using the given default directory.                
            </javadoc>
            <method name="getScheme" type="String" line="64"/>
            <method name="checkUri" type="void" line="68">
                <params>
                    <param name="uri" type="URI"/>
                </params>
            </method>
            <method name="newFileSystem" type="FileSystem" line="84">
                <params>
                    <param name="uri" type="URI"/>
                    <param name="env" type="Map<String,?>"/>
                </params>
            </method>
            <method name="getFileSystem" type="FileSystem" line="90">
                <params>
                    <param name="uri" type="URI"/>
                </params>
            </method>
            <method name="getPath" type="Path" line="96">
                <params>
                    <param name="uri" type="URI"/>
                </params>
            </method>
            <method name="checkPath" type="UnixPath" line="100">
                <params>
                    <param name="obj" type="Path"/>
                </params>
            </method>
            <method name="getFileAttributeView" type="V" line="113">
                <params>
                    <param name="obj" type="Path"/>
                    <param name="type" type="Class<V>"/>
                    <param name="options" type="LinkOption"/>
                </params>
                <declaration name="file" type="UnixPath" line="114"/>
                <declaration name="followLinks" type="boolean" line="115"/>
            </method>
            <method name="readAttributes" type="A" line="133">
                <params>
                    <param name="file" type="Path"/>
                    <param name="type" type="Class<A>"/>
                    <param name="options" type="LinkOption"/>
                </params>
                <declaration name="view" type="Class&lt;? extends BasicFileAttributeView&gt;" line="134"/>
            </method>
            <method name="getFileAttributeView" type="DynamicFileAttributeView" line="150">
                <params>
                    <param name="obj" type="Path"/>
                    <param name="name" type="String"/>
                    <param name="options" type="LinkOption"/>
                </params>
                <declaration name="file" type="UnixPath" line="151"/>
                <declaration name="followLinks" type="boolean" line="152"/>
            </method>
            <method name="newFileChannel" type="FileChannel" line="169">
                <params>
                    <param name="obj" type="Path"/>
                    <param name="options" type="Set<? extends OpenOption>"/>
                    <param name="attrs" type="FileAttribute<?>"/>
                </params>
                <declaration name="file" type="UnixPath" line="170"/>
                <declaration name="mode" type="int" line="171"/>
                <scope line="173"/>
                <scope line="175"/>
            </method>
            <method name="newAsynchronousFileChannel" type="AsynchronousFileChannel" line="186">
                <params>
                    <param name="obj" type="Path"/>
                    <param name="options" type="Set<? extends OpenOption>"/>
                    <param name="executor" type="ExecutorService"/>
                    <param name="attrs" type="FileAttribute<?>"/>
                </params>
                <declaration name="file" type="UnixPath" line="187"/>
                <declaration name="mode" type="int" line="188"/>
                <declaration name="pool" type="ThreadPool" line="190"/>
                <scope line="191"/>
                <scope line="194"/>
            </method>
            <method name="newByteChannel" type="SeekableByteChannel" line="206">
                <params>
                    <param name="obj" type="Path"/>
                    <param name="options" type="Set<? extends OpenOption>"/>
                    <param name="attrs" type="FileAttribute<?>"/>
                </params>
                <comment line="215">
                    keep compiler happy                    
                </comment>
                <declaration name="file" type="UnixPath" line="207"/>
                <declaration name="mode" type="int" line="208"/>
                <scope line="210"/>
                <scope line="212"/>
            </method>
            <method name="implDelete" type="boolean" line="219">
                <params>
                    <param name="obj" type="Path"/>
                    <param name="failIfNotExists" type="boolean"/>
                </params>
                <comment line="224">
                    need file attributes to know if file is directory                    
                </comment>
                <comment line="235">
                    no-op if file does not exist                    
                </comment>
                <comment line="239">
                    DirectoryNotEmptyException if not empty                    
                </comment>
                <declaration name="file" type="UnixPath" line="220"/>
                <declaration name="attrs" type="UnixFileAttributes" line="224"/>
                <scope line="225">
                    <scope line="227"/>
                    <scope line="229"/>
                </scope>
                <scope line="233"/>
            </method>
            <method name="copy" type="void" line="251">
                <params>
                    <param name="source" type="Path"/>
                    <param name="target" type="Path"/>
                    <param name="options" type="CopyOption"/>
                </params>
            </method>
            <method name="move" type="void" line="260">
                <params>
                    <param name="source" type="Path"/>
                    <param name="target" type="Path"/>
                    <param name="options" type="CopyOption"/>
                </params>
            </method>
            <method name="checkAccess" type="void" line="267">
                <params>
                    <param name="obj" type="Path"/>
                    <param name="modes" type="AccessMode"/>
                </params>
                <comment line="300">
                    not cached                    
                </comment>
                <declaration name="file" type="UnixPath" line="268"/>
                <declaration name="e" type="boolean" line="269"/>
                <declaration name="r" type="boolean" line="270"/>
                <declaration name="w" type="boolean" line="271"/>
                <declaration name="x" type="boolean" line="272"/>
                <scope line="274"/>
                <scope line="276">
                    <scope line="277"/>
                </scope>
                <declaration name="mode" type="int" line="287"/>
                <scope line="288"/>
                <scope line="292"/>
                <scope line="296">
                    <declaration name="sm" type="SecurityManager" line="297"/>
                    <scope line="298"/>
                </scope>
                <scope line="304"/>
                <scope line="306"/>
            </method>
            <method name="isSameFile" type="boolean" line="312">
                <params>
                    <param name="obj1" type="Path"/>
                    <param name="obj2" type="Path"/>
                </params>
                <comment line="323">
                    check security manager access to both files                    
                </comment>
                <comment line="333">
                    keep compiler happy                    
                </comment>
                <comment line="339">
                    keep compiler happy                    
                </comment>
                <declaration name="file1" type="UnixPath" line="313"/>
                <declaration name="file2" type="UnixPath" line="320"/>
                <declaration name="attrs1" type="UnixFileAttributes" line="326"/>
                <declaration name="attrs2" type="UnixFileAttributes" line="327"/>
                <scope line="328"/>
                <scope line="330"/>
                <scope line="334"/>
                <scope line="336"/>
            </method>
            <method name="isHidden" type="boolean" line="344">
                <params>
                    <param name="obj" type="Path"/>
                </params>
                <declaration name="file" type="UnixPath" line="345"/>
                <declaration name="name" type="UnixPath" line="347"/>
            </method>
            <method name="getFileStore" type="FileStore" line="353"/>
            <javadoc line="353">
                Returns a FileStore to represent the file system where the given file
                  reside.                
            </javadoc>
            <method name="getFileStore" type="FileStore" line="360">
                <params>
                    <param name="obj" type="Path"/>
                </params>
                <declaration name="file" type="UnixPath" line="361"/>
                <declaration name="sm" type="SecurityManager" line="362"/>
                <scope line="363"/>
            </method>
            <method name="createDirectory" type="void" line="373">
                <params>
                    <param name="obj" type="Path"/>
                    <param name="attrs" type="FileAttribute<?>"/>
                </params>
                <declaration name="dir" type="UnixPath" line="374"/>
                <declaration name="mode" type="int" line="377"/>
                <scope line="379"/>
                <scope line="381"/>
            </method>
            <method name="newDirectoryStream" type="DirectoryStream<Path>" line="390">
                <params>
                    <param name="obj" type="Path"/>
                    <param name="filter" type="DirectoryStream.Filter<? super Path>"/>
                </params>
                <comment line="397">
                    can&apos;t return SecureDirectoryStream on kernels that don&apos;t support
                     openat, etc.                    
                </comment>
                <comment line="410">
                    open directory and dup file descriptor for use by
                     opendir/readdir/closedir                    
                </comment>
                <declaration name="dir" type="UnixPath" line="391"/>
                <scope line="398">
                    <scope line="399">
                        <declaration name="ptr" type="long" line="400"/>
                    </scope>
                    <scope line="402"/>
                </scope>
                <declaration name="dfd1" type="int" line="411"/>
                <declaration name="dfd2" type="int" line="412"/>
                <declaration name="dp" type="long" line="413"/>
                <scope line="414"/>
                <scope line="418"/>
            </method>
            <method name="createSymbolicLink" type="void" line="433">
                <params>
                    <param name="obj1" type="Path"/>
                    <param name="obj2" type="Path"/>
                    <param name="attrs" type="FileAttribute<?>"/>
                </params>
                <comment line="438">
                    no attributes supported when creating links                    
                </comment>
                <comment line="440">
                    may throw NPE or UOE                    
                </comment>
                <comment line="445">
                    permission check                    
                </comment>
                <comment line="452">
                    create link                    
                </comment>
                <declaration name="link" type="UnixPath" line="434"/>
                <declaration name="target" type="UnixPath" line="435"/>
                <scope line="438"/>
                <declaration name="sm" type="SecurityManager" line="445"/>
                <scope line="446"/>
                <scope line="452"/>
                <scope line="454"/>
            </method>
            <method name="createLink" type="void" line="460">
                <params>
                    <param name="obj1" type="Path"/>
                    <param name="obj2" type="Path"/>
                </params>
                <comment line="465">
                    permission check                    
                </comment>
                <declaration name="link" type="UnixPath" line="461"/>
                <declaration name="existing" type="UnixPath" line="462"/>
                <declaration name="sm" type="SecurityManager" line="465"/>
                <scope line="466"/>
                <scope line="471"/>
                <scope line="473"/>
            </method>
            <method name="readSymbolicLink" type="Path" line="479">
                <params>
                    <param name="obj1" type="Path"/>
                </params>
                <comment line="482">
                    permission check                    
                </comment>
                <comment line="496">
                    keep compiler happy                    
                </comment>
                <declaration name="link" type="UnixPath" line="480"/>
                <declaration name="sm" type="SecurityManager" line="482"/>
                <scope line="483">
                    <declaration name="perm" type="FilePermission" line="484"/>
                </scope>
                <scope line="488">
                    <declaration name="target" type="byte[]" line="489"/>
                </scope>
                <scope line="491"/>
            </method>
        </class>
    </source>