<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file"/>
        <import package="java.nio.file.attribute"/>
        <import package="java.nio.file.spi"/>
        <import package="java.io.IOException"/>
        <import package="java.util"/>
        <import package="java.util.regex.Pattern"/>
        <import package="java.security.AccessController"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="UnixFileSystem" line="10">
            <extends class="FileSystem"/>
            <javadoc line="10">
                Base implementation of FileSystem for Unix-like implementations.                
            </javadoc>
            <declaration name="provider" type="UnixFileSystemProvider" line="14"/>
            <declaration name="defaultDirectory" type="byte[]" line="15"/>
            <declaration name="needToResolveAgainstDefaultDirectory" type="boolean" line="16"/>
            <declaration name="rootDirectory" type="UnixPath" line="17"/>
            <method name="UnixFileSystem" type="constructor" line="18">
                <params>
                    <param name="provider" type="UnixFileSystemProvider"/>
                    <param name="dir" type="String"/>
                </params>
                <scope line="21"/>
                <declaration name="propValue" type="String" line="24"/>
                <declaration name="chdirAllowed" type="boolean" line="25"/>
                <scope line="26"/>
                <scope line="29">
                    <declaration name="cwd" type="byte[]" line="30"/>
                    <declaration name="defaultIsCwd" type="boolean" line="31"/>
                    <scope line="32">
                        <scope line="33">
                            <scope line="34"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="defaultDirectory" type="byte[]" line="44"/>
            <method name="needToResolveAgainstDefaultDirectory" type="boolean" line="47"/>
            <method name="rootDirectory" type="UnixPath" line="50"/>
            <method name="isSolaris" type="boolean" line="53"/>
            <method name="standardFileAttributeViews" type="List<String>" line="56"/>
            <method name="provider" type="FileSystemProvider" line="59"/>
            <method name="getSeparator" type="String" line="62"/>
            <method name="isOpen" type="boolean" line="65"/>
            <method name="isReadOnly" type="boolean" line="68"/>
            <method name="close" type="void" line="71"/>
            <javadoc line="74">
                Copies non-POSIX attributes from the source to target file.
                  Copying a file preserving attributes, or moving a file, will preserve
                  the file owner/group/permissions/timestamps but it does not preserve
                  other non-POSIX attributes. This method is invoked by the
                  copy or move operation to preserve these attributes. It should copy
                  extended attributes, ACLs, or other attributes.                
                <param>
                    sfdOpen file descriptor to source file                    
                </param>
                <param>
                    tfdOpen file descriptor to target file                    
                </param>
            </javadoc>
            <method name="copyNonPosixAttributes" type="void" line="84">
                <params>
                    <param name="sfd" type="int"/>
                    <param name="tfd" type="int"/>
                </params>
            </method>
            <javadoc line="86">
                Unix systems only have a single root directory (/)                
            </javadoc>
            <method name="getRootDirectories" type="Iterable<Path>" line="89">
                <declaration name="allowedList" type="List&lt;Path&gt;" line="90"/>
                <anonymous_class line="91">
                    <method name="iterator" type="Iterator<Path>" line="92">
                        <scope line="93">
                            <declaration name="sm" type="SecurityManager" line="94"/>
                        </scope>
                        <scope line="98">
                            <declaration name="disallowed" type="List&lt;Path&gt;" line="99"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="getMountEntries" type="Iterable<UnixMountEntry>" line="106"/>
            <javadoc line="106">
                Returns object to iterate over entries in mounttab or equivalent                
            </javadoc>
            <method name="getFileStore" type="FileStore" line="110"/>
            <javadoc line="110">
                Returns a FileStore to represent the file system for the given mount
                  mount.                
            </javadoc>
            <class name="FileStoreIterator" line="115">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="FileStore"/>
                    </type_params>
                </implements>
                <javadoc line="115">
                    Iterator returned by getFileStores method.                    
                </javadoc>
                <declaration name="entries" type="Iterator&lt;UnixMountEntry&gt;" line="119"/>
                <declaration name="next" type="FileStore" line="120"/>
                <method name="FileStoreIterator" type="constructor" line="121"/>
                <method name="readNext" type="FileStore" line="124"/>
                <method name="hasNext" type="boolean" line="146"/>
                <method name="next" type="FileStore" line="151">
                    <scope line="153"/>
                    <scope line="156">
                        <declaration name="result" type="FileStore" line="157"/>
                    </scope>
                </method>
                <method name="remove" type="void" line="162"/>
            </class>
            <method name="getFileStores" type="Iterable<FileStore>" line="166">
                <declaration name="sm" type="SecurityManager" line="167"/>
                <scope line="168">
                    <scope line="169"/>
                    <scope line="172"/>
                </scope>
                <anonymous_class line="176">
                    <method name="iterator" type="Iterator<FileStore>" line="177"/>
                </anonymous_class>
            </method>
            <method name="getPath" type="Path" line="183">
                <params>
                    <param name="first" type="String"/>
                    <param name="more" type="String"/>
                </params>
                <declaration name="path" type="String" line="184"/>
                <scope line="185"/>
                <scope line="188">
                    <declaration name="sb" type="StringBuilder" line="189"/>
                    <scope line="191">
                        <scope line="192"/>
                    </scope>
                </scope>
            </method>
            <method name="getPathMatcher" type="PathMatcher" line="201">
                <params>
                    <param name="syntaxAndInput" type="String"/>
                </params>
                <declaration name="pos" type="int" line="202"/>
                <declaration name="syntax" type="String" line="204"/>
                <declaration name="input" type="String" line="205"/>
                <declaration name="expr" type="String" line="206"/>
                <scope line="207"/>
                <scope line="210">
                    <scope line="211"/>
                    <scope line="214"/>
                </scope>
                <declaration name="pattern" type="Pattern" line="218"/>
                <anonymous_class line="219">
                    <method name="matches" type="boolean" line="220">
                        <params>
                            <param name="path" type="Path"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <declaration name="GLOB_SYNTAX" type="String" line="226"/>
            <declaration name="REGEX_SYNTAX" type="String" line="227"/>
            <method name="getUserPrincipalLookupService" type="UserPrincipalLookupService" line="228"/>
            <class name="LookupService" line="231">
                <declaration name="instance" type="UserPrincipalLookupService" line="232"/>
                <anonymous_class line="232">
                    <method name="lookupPrincipalByName" type="UserPrincipal" line="233">
                        <params>
                            <param name="name" type="String"/>
                        </params>
                    </method>
                    <method name="lookupPrincipalByGroupName" type="GroupPrincipal" line="236">
                        <params>
                            <param name="group" type="String"/>
                        </params>
                    </method>
                </anonymous_class>
            </class>
        </class>
    </source>