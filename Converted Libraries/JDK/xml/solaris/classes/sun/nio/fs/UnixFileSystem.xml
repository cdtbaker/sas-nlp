<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file"/>
        <import package="java.nio.file.attribute"/>
        <import package="java.nio.file.spi"/>
        <import package="java.io.IOException"/>
        <import package="java.util"/>
        <import package="java.util.regex.Pattern"/>
        <import package="java.security.AccessController"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="UnixFileSystem" line="37">
            <extends class="FileSystem"/>
            <comment line="50">
                package-private                
            </comment>
            <comment line="85">
                package-private                
            </comment>
            <javadoc line="37">
                Base implementation of FileSystem for Unix-like implementations.                
            </javadoc>
            <declaration name="provider" type="UnixFileSystemProvider" line="44"/>
            <declaration name="defaultDirectory" type="byte[]" line="45"/>
            <declaration name="needToResolveAgainstDefaultDirectory" type="boolean" line="46"/>
            <declaration name="rootDirectory" type="UnixPath" line="47"/>
            <method name="UnixFileSystem" type="constructor" line="50">
                <params>
                    <param name="provider" type="UnixFileSystemProvider"/>
                    <param name="dir" type="String"/>
                </params>
                <comment line="58">
                    if process-wide chdir is allowed or default directory is not the
                     process working directory then paths must be resolved against the
                     default directory.                    
                </comment>
                <comment line="81">
                    the root directory                    
                </comment>
                <scope line="53"/>
                <declaration name="propValue" type="String" line="60"/>
                <declaration name="chdirAllowed" type="boolean" line="62"/>
                <scope line="64"/>
                <scope line="66">
                    <declaration name="cwd" type="byte[]" line="67"/>
                    <declaration name="defaultIsCwd" type="boolean" line="68"/>
                    <scope line="69">
                        <scope line="70">
                            <scope line="71"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="defaultDirectory" type="byte[]" line="85"/>
            <method name="needToResolveAgainstDefaultDirectory" type="boolean" line="89"/>
            <method name="rootDirectory" type="UnixPath" line="93"/>
            <method name="isSolaris" type="boolean" line="97"/>
            <method name="standardFileAttributeViews" type="List&lt;String&gt;" line="101"/>
            <method name="provider" type="FileSystemProvider" line="106"/>
            <method name="getSeparator" type="String" line="111"/>
            <method name="isOpen" type="boolean" line="116"/>
            <method name="isReadOnly" type="boolean" line="121"/>
            <method name="close" type="void" line="126"/>
            <javadoc line="130">
                Copies non-POSIX attributes from the source to target file.
                  Copying a file preserving attributes, or moving a file, will preserve
                  the file owner/group/permissions/timestamps but it does not preserve
                  other non-POSIX attributes. This method is invoked by the
                  copy or move operation to preserve these attributes. It should copy
                  extended attributes, ACLs, or other attributes.                
                <param>
                    sfdOpen file descriptor to source file                    
                </param>
                <param>
                    tfdOpen file descriptor to target file                    
                </param>
            </javadoc>
            <method name="copyNonPosixAttributes" type="void" line="144">
                <params>
                    <param name="sfd" type="int"/>
                    <param name="tfd" type="int"/>
                </params>
                <comment line="146">
                    no-op by default                    
                </comment>
            </method>
            <javadoc line="148">
                Unix systems only have a single root directory (/)                
            </javadoc>
            <method name="getRootDirectories" type="Iterable&lt;Path&gt;" line="152">
                <declaration name="allowedList" type="List&amp;lt;Path&amp;gt;" line="153"/>
                <anonymous_class line="155">
                    <method name="iterator" type="Iterator&lt;Path&gt;" line="156">
                        <scope line="157">
                            <declaration name="sm" type="SecurityManager" line="158"/>
                        </scope>
                        <scope line="162">
                            <declaration name="disallowed" type="List&amp;lt;Path&amp;gt;" line="163"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="getMountEntries" type="Iterable&lt;UnixMountEntry&gt;" line="170"/>
            <javadoc line="170">
                Returns object to iterate over entries in mounttab or equivalent                
            </javadoc>
            <method name="getFileStore" type="FileStore" line="175"/>
            <javadoc line="175">
                Returns a FileStore to represent the file system for the given mount
                  mount.                
            </javadoc>
            <class name="FileStoreIterator" line="181">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="FileStore"/>
                    </type_params>
                </implements>
                <javadoc line="181">
                    Iterator returned by getFileStores method.                    
                </javadoc>
                <declaration name="entries" type="Iterator&amp;lt;UnixMountEntry&amp;gt;" line="185"/>
                <declaration name="next" type="FileStore" line="186"/>
                <method name="FileStoreIterator" type="constructor" line="188"/>
                <method name="readNext" type="FileStore" line="192">
                    <comment line="200">
                        skip entries with the &quot;ignore&quot; option                        
                    </comment>
                    <comment line="204">
                        check permission to read mount point                        
                    </comment>
                    <comment line="216">
                        ignore as per spec                        
                    </comment>
                </method>
                <method name="hasNext" type="boolean" line="221"/>
                <method name="next" type="FileStore" line="229">
                    <scope line="232"/>
                    <scope line="234">
                        <declaration name="result" type="FileStore" line="235"/>
                    </scope>
                </method>
                <method name="remove" type="void" line="242"/>
            </class>
            <method name="getFileStores" type="Iterable&lt;FileStore&gt;" line="248">
                <declaration name="sm" type="SecurityManager" line="249"/>
                <scope line="250">
                    <scope line="251"/>
                    <scope line="253"/>
                </scope>
                <anonymous_class line="257">
                    <method name="iterator" type="Iterator&lt;FileStore&gt;" line="258"/>
                </anonymous_class>
            </method>
            <method name="getPath" type="Path" line="265">
                <params>
                    <param name="first" type="String"/>
                    <param name="more" type="String"/>
                </params>
                <declaration name="path" type="String" line="266"/>
                <scope line="267"/>
                <scope line="269">
                    <declaration name="sb" type="StringBuilder" line="270"/>
                    <scope line="272">
                        <scope line="273"/>
                    </scope>
                </scope>
            </method>
            <method name="getPathMatcher" type="PathMatcher" line="285">
                <params>
                    <param name="syntaxAndInput" type="String"/>
                </params>
                <comment line="305">
                    return matcher                    
                </comment>
                <declaration name="pos" type="int" line="286"/>
                <declaration name="syntax" type="String" line="289"/>
                <declaration name="input" type="String" line="290"/>
                <declaration name="expr" type="String" line="292"/>
                <scope line="293"/>
                <scope line="295">
                    <scope line="296"/>
                    <scope line="298"/>
                </scope>
                <declaration name="pattern" type="Pattern" line="305"/>
                <anonymous_class line="306">
                    <method name="matches" type="boolean" line="308">
                        <params>
                            <param name="path" type="Path"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <declaration name="GLOB_SYNTAX" type="String" line="313"/>
            <declaration name="REGEX_SYNTAX" type="String" line="314"/>
            <method name="getUserPrincipalLookupService" type="UserPrincipalLookupService" line="319"/>
            <class name="LookupService" line="323">
                <declaration name="instance" type="UserPrincipalLookupService" line="324"/>
                <anonymous_class line="325">
                    <method name="lookupPrincipalByName" type="UserPrincipal" line="329">
                        <params>
                            <param name="name" type="String"/>
                        </params>
                    </method>
                    <method name="lookupPrincipalByGroupName" type="GroupPrincipal" line="336">
                        <params>
                            <param name="group" type="String"/>
                        </params>
                    </method>
                </anonymous_class>
            </class>
        </class>
    </source>