<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.concurrent.locks"/>
        <import package="java.io.IOException"/>
        <import package="sun.nio.fs.UnixNativeDispatcher"/>
        <class name="UnixDirectoryStream" line="35">
            <comment line="43">
                path to directory when originally opened                
            </comment>
            <comment line="46">
                directory pointer (returned by opendir)                
            </comment>
            <comment line="49">
                filter (may be null)                
            </comment>
            <comment line="52">
                used to coorindate closing of directory stream                
            </comment>
            <comment line="56">
                indicates if directory stream is open (synchronize on closeLock)                
            </comment>
            <comment line="59">
                directory iterator                
            </comment>
            <implements interface="DirectoryStream">
                <type_params>
                    <type_param name="Path"/>
                </type_params>
            </implements>
            <javadoc line="35">
                Unix implementation of java.nio.file.DirectoryStream                
            </javadoc>
            <declaration name="dir" type="UnixPath" line="43"/>
            <declaration name="dp" type="long" line="46"/>
            <declaration name="filter" type="DirectoryStream.Filter&amp;lt;? super Path&amp;gt;" line="49"/>
            <declaration name="streamLock" type="ReentrantReadWriteLock" line="52"/>
            <declaration name="isClosed" type="boolean" line="56"/>
            <declaration name="iterator" type="Iterator&amp;lt;Path&amp;gt;" line="59"/>
            <javadoc line="61">
                Initializes a new instance                
            </javadoc>
            <method name="UnixDirectoryStream" type="constructor" line="64">
                <params>
                    <param name="dir" type="UnixPath"/>
                    <param name="dp" type="long"/>
                    <param name="filter" type="DirectoryStream.Filter&lt;? super Path&gt;"/>
                </params>
            </method>
            <method name="directory" type="UnixPath" line="70"/>
            <method name="readLock" type="Lock" line="74"/>
            <method name="writeLock" type="Lock" line="78"/>
            <method name="isOpen" type="boolean" line="82"/>
            <method name="closeImpl" type="boolean" line="86">
                <scope line="87">
                    <scope line="89"/>
                    <scope line="91"/>
                </scope>
                <scope line="95"/>
            </method>
            <method name="close" type="void" line="103">
                <scope line="105"/>
                <scope line="107"/>
            </method>
            <method name="iterator" type="Iterator&lt;Path&gt;" line="112">
                <params>
                    <param name="ds" type="DirectoryStream&lt;Path&gt;"/>
                </params>
                <scope line="113"/>
                <scope line="116"/>
            </method>
            <method name="iterator" type="Iterator&lt;Path&gt;" line="125"/>
            <class name="UnixDirectoryIterator" line="129">
                <comment line="136">
                    true when at EOF                    
                </comment>
                <comment line="139">
                    next entry to return                    
                </comment>
                <comment line="147">
                    Return true if file name is &quot;.&quot; or &quot;..&quot;                    
                </comment>
                <comment line="158">
                    Returns next entry (or null)                    
                </comment>
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="Path"/>
                    </type_params>
                </implements>
                <javadoc line="129">
                    Iterator implementation                    
                </javadoc>
                <declaration name="stream" type="DirectoryStream&amp;lt;Path&amp;gt;" line="133"/>
                <declaration name="atEof" type="boolean" line="136"/>
                <declaration name="nextEntry" type="Path" line="139"/>
                <method name="UnixDirectoryIterator" type="constructor" line="141">
                    <params>
                        <param name="stream" type="DirectoryStream&lt;Path&gt;"/>
                    </params>
                </method>
                <method name="isSelfOrParent" type="boolean" line="147">
                    <params>
                        <param name="nameAsBytes" type="byte[]"/>
                    </params>
                    <scope line="148">
                        <scope line="150"/>
                    </scope>
                </method>
                <method name="readNextEntry" type="Path" line="158">
                    <comment line="165">
                        prevent close while reading                        
                    </comment>
                    <comment line="178">
                        EOF                        
                    </comment>
                    <comment line="184">
                        ignore &quot;.&quot; and &quot;..&quot;                        
                    </comment>
                    <comment line="188">
                        return entry if no filter or filter accepts it                        
                    </comment>
                </method>
                <method name="hasNext" type="boolean" line="199"/>
                <method name="next" type="Path" line="206">
                    <declaration name="result" type="Path" line="207"/>
                    <scope line="208"/>
                    <scope line="210"/>
                </method>
                <method name="remove" type="void" line="220"/>
            </class>
        </class>
    </source>