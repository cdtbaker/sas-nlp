<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <class name="UnixNativeDispatcher" line="31">
            <comment line="39">
                returns a NativeBuffer containing the given path                
            </comment>
            <comment line="546">
                indicates if openat, unlinkat, etc. is supported                
            </comment>
            <comment line="552">
                initialize syscalls and fieldIDs                
            </comment>
            <comment line="555">
                flags returned by init to indicate capabilities                
            </comment>
            <javadoc line="31">
                Unix system and library calls.                
            </javadoc>
            <method name="UnixNativeDispatcher" type="constructor" line="36"/>
            <method name="copyToNativeBuffer" type="NativeBuffer" line="39">
                <params>
                    <param name="path" type="UnixPath"/>
                </params>
                <comment line="47">
                    buffer already contains the path                    
                </comment>
                <declaration name="cstr" type="byte[]" line="40"/>
                <declaration name="size" type="int" line="41"/>
                <declaration name="buffer" type="NativeBuffer" line="42"/>
                <scope line="43"/>
                <scope line="45"/>
            </method>
            <method name="getcwd" type="byte[]" line="55"/>
            <javadoc line="55">
                char getcwd(char buf, size_t size);                
            </javadoc>
            <method name="dup" type="int" line="60"/>
            <javadoc line="60">
                int dup(int filedes)                
            </javadoc>
            <javadoc line="65">
                int open(const char path, int oflag, mode_t mode)                
            </javadoc>
            <method name="open" type="int" line="68">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="flags" type="int"/>
                    <param name="mode" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="69"/>
                <scope line="70"/>
                <scope line="72"/>
            </method>
            <method name="open0" type="int" line="76"/>
            <javadoc line="79">
                int openat(int dfd, const char path, int oflag, mode_t mode)                
            </javadoc>
            <method name="openat" type="int" line="82">
                <params>
                    <param name="dfd" type="int"/>
                    <param name="path" type="byte[]"/>
                    <param name="flags" type="int"/>
                    <param name="mode" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="83"/>
                <scope line="84"/>
                <scope line="86"/>
            </method>
            <method name="openat0" type="int" line="90"/>
            <method name="close" type="void" line="93"/>
            <javadoc line="93">
                close(int filedes)                
            </javadoc>
            <javadoc line="98">
                FILE fopen(const char filename, const char mode);                
            </javadoc>
            <method name="fopen" type="long" line="101">
                <params>
                    <param name="filename" type="UnixPath"/>
                    <param name="mode" type="String"/>
                </params>
                <declaration name="pathBuffer" type="NativeBuffer" line="102"/>
                <declaration name="modeBuffer" type="NativeBuffer" line="103"/>
                <scope line="104"/>
                <scope line="106"/>
            </method>
            <method name="fopen0" type="long" line="111"/>
            <method name="fclose" type="void" line="114"/>
            <javadoc line="114">
                fclose(FILE stream)                
            </javadoc>
            <javadoc line="119">
                link(const char existing, const char new)                
            </javadoc>
            <method name="link" type="void" line="122">
                <params>
                    <param name="existing" type="UnixPath"/>
                    <param name="newfile" type="UnixPath"/>
                </params>
                <declaration name="existingBuffer" type="NativeBuffer" line="123"/>
                <declaration name="newBuffer" type="NativeBuffer" line="124"/>
                <scope line="125"/>
                <scope line="127"/>
            </method>
            <method name="link0" type="void" line="132"/>
            <javadoc line="135">
                unlink(const char path)                
            </javadoc>
            <method name="unlink" type="void" line="138">
                <params>
                    <param name="path" type="UnixPath"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="139"/>
                <scope line="140"/>
                <scope line="142"/>
            </method>
            <method name="unlink0" type="void" line="146"/>
            <javadoc line="148">
                unlinkat(int dfd, const char path, int flag)                
            </javadoc>
            <method name="unlinkat" type="void" line="151">
                <params>
                    <param name="dfd" type="int"/>
                    <param name="path" type="byte[]"/>
                    <param name="flag" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="152"/>
                <scope line="153"/>
                <scope line="155"/>
            </method>
            <method name="unlinkat0" type="void" line="159"/>
            <javadoc line="162">
                mknod(const char path, mode_t mode, dev_t dev)                
            </javadoc>
            <method name="mknod" type="void" line="165">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="mode" type="int"/>
                    <param name="dev" type="long"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="166"/>
                <scope line="167"/>
                <scope line="169"/>
            </method>
            <method name="mknod0" type="void" line="173"/>
            <javadoc line="176">
                rename(const char old, const char new)                
            </javadoc>
            <method name="rename" type="void" line="179">
                <params>
                    <param name="from" type="UnixPath"/>
                    <param name="to" type="UnixPath"/>
                </params>
                <declaration name="fromBuffer" type="NativeBuffer" line="180"/>
                <declaration name="toBuffer" type="NativeBuffer" line="181"/>
                <scope line="182"/>
                <scope line="184"/>
            </method>
            <method name="rename0" type="void" line="189"/>
            <javadoc line="192">
                renameat(int fromfd, const char old, int tofd, const char new)                
            </javadoc>
            <method name="renameat" type="void" line="195">
                <params>
                    <param name="fromfd" type="int"/>
                    <param name="from" type="byte[]"/>
                    <param name="tofd" type="int"/>
                    <param name="to" type="byte[]"/>
                </params>
                <declaration name="fromBuffer" type="NativeBuffer" line="196"/>
                <declaration name="toBuffer" type="NativeBuffer" line="197"/>
                <scope line="198"/>
                <scope line="200"/>
            </method>
            <method name="renameat0" type="void" line="205"/>
            <javadoc line="208">
                mkdir(const char path, mode_t mode)                
            </javadoc>
            <method name="mkdir" type="void" line="211">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="mode" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="212"/>
                <scope line="213"/>
                <scope line="215"/>
            </method>
            <method name="mkdir0" type="void" line="219"/>
            <javadoc line="221">
                rmdir(const char path)                
            </javadoc>
            <method name="rmdir" type="void" line="224">
                <params>
                    <param name="path" type="UnixPath"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="225"/>
                <scope line="226"/>
                <scope line="228"/>
            </method>
            <method name="rmdir0" type="void" line="232"/>
            <javadoc line="234">
                readlink(const char path, char buf, size_t bufsize)                
                <return>
                    link target                    
                </return>
            </javadoc>
            <method name="readlink" type="byte[]" line="239">
                <params>
                    <param name="path" type="UnixPath"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="240"/>
                <scope line="241"/>
                <scope line="243"/>
            </method>
            <method name="readlink0" type="byte[]" line="247"/>
            <javadoc line="249">
                realpath(const char path, char resolved_name)                
                <return>
                    resolved path                    
                </return>
            </javadoc>
            <method name="realpath" type="byte[]" line="254">
                <params>
                    <param name="path" type="UnixPath"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="255"/>
                <scope line="256"/>
                <scope line="258"/>
            </method>
            <method name="realpath0" type="byte[]" line="262"/>
            <javadoc line="264">
                symlink(const char name1, const char name2)                
            </javadoc>
            <method name="symlink" type="void" line="267">
                <params>
                    <param name="name1" type="byte[]"/>
                    <param name="name2" type="UnixPath"/>
                </params>
                <declaration name="targetBuffer" type="NativeBuffer" line="268"/>
                <declaration name="linkBuffer" type="NativeBuffer" line="269"/>
                <scope line="270"/>
                <scope line="272"/>
            </method>
            <method name="symlink0" type="void" line="277"/>
            <javadoc line="280">
                stat(const char path, struct stat buf)                
            </javadoc>
            <method name="stat" type="void" line="283">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="attrs" type="UnixFileAttributes"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="284"/>
                <scope line="285"/>
                <scope line="287"/>
            </method>
            <method name="stat0" type="void" line="291"/>
            <javadoc line="294">
                lstat(const char path, struct stat buf)                
            </javadoc>
            <method name="lstat" type="void" line="297">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="attrs" type="UnixFileAttributes"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="298"/>
                <scope line="299"/>
                <scope line="301"/>
            </method>
            <method name="lstat0" type="void" line="305"/>
            <method name="fstat" type="void" line="308"/>
            <javadoc line="308">
                fstat(int filedes, struct stat buf)                
            </javadoc>
            <javadoc line="313">
                fstatat(int filedes,const char path,  struct stat buf, int flag)                
            </javadoc>
            <method name="fstatat" type="void" line="318">
                <params>
                    <param name="dfd" type="int"/>
                    <param name="path" type="byte[]"/>
                    <param name="flag" type="int"/>
                    <param name="attrs" type="UnixFileAttributes"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="319"/>
                <scope line="320"/>
                <scope line="322"/>
            </method>
            <method name="fstatat0" type="void" line="326"/>
            <javadoc line="329">
                chown(const char path, uid_t owner, gid_t group)                
            </javadoc>
            <method name="chown" type="void" line="332">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="uid" type="int"/>
                    <param name="gid" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="333"/>
                <scope line="334"/>
                <scope line="336"/>
            </method>
            <method name="chown0" type="void" line="340"/>
            <javadoc line="343">
                lchown(const char path, uid_t owner, gid_t group)                
            </javadoc>
            <method name="lchown" type="void" line="346">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="uid" type="int"/>
                    <param name="gid" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="347"/>
                <scope line="348"/>
                <scope line="350"/>
            </method>
            <method name="lchown0" type="void" line="354"/>
            <method name="fchown" type="void" line="357"/>
            <javadoc line="357">
                fchown(int filedes, uid_t owner, gid_t group)                
            </javadoc>
            <javadoc line="362">
                chmod(const char path, mode_t mode)                
            </javadoc>
            <method name="chmod" type="void" line="365">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="mode" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="366"/>
                <scope line="367"/>
                <scope line="369"/>
            </method>
            <method name="chmod0" type="void" line="373"/>
            <method name="fchmod" type="void" line="376"/>
            <javadoc line="376">
                fchmod(int fildes, mode_t mode)                
            </javadoc>
            <javadoc line="381">
                utimes(conar char path, const struct timeval times[2])                
            </javadoc>
            <method name="utimes" type="void" line="386">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="times0" type="long"/>
                    <param name="times1" type="long"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="387"/>
                <scope line="388"/>
                <scope line="390"/>
            </method>
            <method name="utimes0" type="void" line="394"/>
            <method name="futimes" type="void" line="397"/>
            <javadoc line="397">
                futimes(int fildes,, const struct timeval times[2])                
            </javadoc>
            <javadoc line="402">
                DIR opendir(const char dirname)                
            </javadoc>
            <method name="opendir" type="long" line="405">
                <params>
                    <param name="path" type="UnixPath"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="406"/>
                <scope line="407"/>
                <scope line="409"/>
            </method>
            <method name="opendir0" type="long" line="413"/>
            <method name="fdopendir" type="long" line="415"/>
            <javadoc line="415">
                DIR fdopendir(int filedes)                
            </javadoc>
            <method name="closedir" type="void" line="421"/>
            <javadoc line="421">
                closedir(DIR dirp)                
            </javadoc>
            <method name="readdir" type="byte[]" line="426"/>
            <javadoc line="426">
                struct dirent readdir(DIR dirp)                
                <return>
                    dirent->d_name                    
                </return>
            </javadoc>
            <method name="read" type="int" line="433"/>
            <javadoc line="433">
                size_t read(int fildes, void buf, size_t nbyte)                
            </javadoc>
            <method name="write" type="int" line="438"/>
            <javadoc line="438">
                size_t writeint fildes, void buf, size_t nbyte)                
            </javadoc>
            <javadoc line="443">
                access(const char path, int amode);                
            </javadoc>
            <method name="access" type="void" line="446">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="amode" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="447"/>
                <scope line="448"/>
                <scope line="450"/>
            </method>
            <method name="access0" type="void" line="454"/>
            <method name="getpwuid" type="byte[]" line="456"/>
            <javadoc line="456">
                struct passwd getpwuid(uid_t uid);                
                <return>
                    passwd->pw_name                    
                </return>
            </javadoc>
            <method name="getgrgid" type="byte[]" line="463"/>
            <javadoc line="463">
                struct group getgrgid(gid_t gid);                
                <return>
                    group->gr_name                    
                </return>
            </javadoc>
            <javadoc line="470">
                struct passwd getpwnam(const char name);                
                <return>
                    passwd->pw_uid                    
                </return>
            </javadoc>
            <method name="getpwnam" type="int" line="475">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="476"/>
                <scope line="477"/>
                <scope line="479"/>
            </method>
            <method name="getpwnam0" type="int" line="483"/>
            <javadoc line="485">
                struct group getgrnam(const char name);                
                <return>
                    group->gr_name                    
                </return>
            </javadoc>
            <method name="getgrnam" type="int" line="490">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="491"/>
                <scope line="492"/>
                <scope line="494"/>
            </method>
            <method name="getgrnam0" type="int" line="498"/>
            <method name="getextmntent" type="int" line="500"/>
            <javadoc line="500">
                int getextmntent(FILE fp, struct extmnttab mp, int len);                
            </javadoc>
            <javadoc line="505">
                statvfs(const char path, struct statvfs buf)                
            </javadoc>
            <method name="statvfs" type="void" line="510">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="attrs" type="UnixFileStoreAttributes"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="511"/>
                <scope line="512"/>
                <scope line="514"/>
            </method>
            <method name="statvfs0" type="void" line="518"/>
            <javadoc line="521">
                long int pathconf(const char path, int name);                
            </javadoc>
            <method name="pathconf" type="long" line="524">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="name" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="525"/>
                <scope line="526"/>
                <scope line="528"/>
            </method>
            <method name="pathconf0" type="long" line="532"/>
            <method name="fpathconf" type="long" line="535"/>
            <javadoc line="535">
                long fpathconf(int fildes, int name);                
            </javadoc>
            <method name="strerror" type="byte[]" line="540"/>
            <javadoc line="540">
                char strerror(int errnum)                
            </javadoc>
            <declaration name="hasAtSysCalls" type="boolean" line="546"/>
            <method name="supportsAtSysCalls" type="boolean" line="547"/>
            <method name="init" type="int" line="552"/>
            <declaration name="HAS_AT_SYSCALLS" type="int" line="555"/>
            <scope line="557">
                <anonymous_class line="558">
                    <method name="run" type="Void" line="559"/>
                </anonymous_class>
                <declaration name="flags" type="int" line="563"/>
            </scope>
        </class>
    </source>