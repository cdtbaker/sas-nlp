<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <class name="UnixNativeDispatcher" line="4">
            <javadoc line="4">
                Unix system and library calls.                
            </javadoc>
            <method name="UnixNativeDispatcher" type="constructor" line="8"/>
            <method name="copyToNativeBuffer" type="NativeBuffer" line="10">
                <params>
                    <param name="path" type="UnixPath"/>
                </params>
                <declaration name="cstr" type="byte[]" line="11"/>
                <declaration name="size" type="int" line="12"/>
                <declaration name="buffer" type="NativeBuffer" line="13"/>
                <scope line="14"/>
                <scope line="17"/>
            </method>
            <method name="getcwd" type="byte[]" line="24"/>
            <javadoc line="24">
                char getcwd(char buf, size_t size);                
            </javadoc>
            <method name="dup" type="int" line="28"/>
            <javadoc line="28">
                int dup(int filedes)                
            </javadoc>
            <javadoc line="32">
                int open(const char path, int oflag, mode_t mode)                
            </javadoc>
            <method name="open" type="int" line="35">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="flags" type="int"/>
                    <param name="mode" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="36"/>
                <scope line="37"/>
                <scope line="40"/>
            </method>
            <method name="open0" type="int" line="44"/>
            <javadoc line="45">
                int openat(int dfd, const char path, int oflag, mode_t mode)                
            </javadoc>
            <method name="openat" type="int" line="48">
                <params>
                    <param name="dfd" type="int"/>
                    <param name="path" type="byte[]"/>
                    <param name="flags" type="int"/>
                    <param name="mode" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="49"/>
                <scope line="50"/>
                <scope line="53"/>
            </method>
            <method name="openat0" type="int" line="57"/>
            <method name="close" type="void" line="58"/>
            <javadoc line="58">
                close(int filedes)                
            </javadoc>
            <javadoc line="62">
                FILE fopen(const char filename, const char mode);                
            </javadoc>
            <method name="fopen" type="long" line="65">
                <params>
                    <param name="filename" type="UnixPath"/>
                    <param name="mode" type="String"/>
                </params>
                <declaration name="pathBuffer" type="NativeBuffer" line="66"/>
                <declaration name="modeBuffer" type="NativeBuffer" line="67"/>
                <scope line="68"/>
                <scope line="71"/>
            </method>
            <method name="fopen0" type="long" line="76"/>
            <method name="fclose" type="void" line="77"/>
            <javadoc line="77">
                fclose(FILE stream)                
            </javadoc>
            <javadoc line="81">
                link(const char existing, const char new)                
            </javadoc>
            <method name="link" type="void" line="84">
                <params>
                    <param name="existing" type="UnixPath"/>
                    <param name="newfile" type="UnixPath"/>
                </params>
                <declaration name="existingBuffer" type="NativeBuffer" line="85"/>
                <declaration name="newBuffer" type="NativeBuffer" line="86"/>
                <scope line="87"/>
                <scope line="90"/>
            </method>
            <method name="link0" type="void" line="95"/>
            <javadoc line="96">
                unlink(const char path)                
            </javadoc>
            <method name="unlink" type="void" line="99">
                <params>
                    <param name="path" type="UnixPath"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="100"/>
                <scope line="101"/>
                <scope line="104"/>
            </method>
            <method name="unlink0" type="void" line="108"/>
            <javadoc line="109">
                unlinkat(int dfd, const char path, int flag)                
            </javadoc>
            <method name="unlinkat" type="void" line="112">
                <params>
                    <param name="dfd" type="int"/>
                    <param name="path" type="byte[]"/>
                    <param name="flag" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="113"/>
                <scope line="114"/>
                <scope line="117"/>
            </method>
            <method name="unlinkat0" type="void" line="121"/>
            <javadoc line="122">
                mknod(const char path, mode_t mode, dev_t dev)                
            </javadoc>
            <method name="mknod" type="void" line="125">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="mode" type="int"/>
                    <param name="dev" type="long"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="126"/>
                <scope line="127"/>
                <scope line="130"/>
            </method>
            <method name="mknod0" type="void" line="134"/>
            <javadoc line="135">
                rename(const char old, const char new)                
            </javadoc>
            <method name="rename" type="void" line="138">
                <params>
                    <param name="from" type="UnixPath"/>
                    <param name="to" type="UnixPath"/>
                </params>
                <declaration name="fromBuffer" type="NativeBuffer" line="139"/>
                <declaration name="toBuffer" type="NativeBuffer" line="140"/>
                <scope line="141"/>
                <scope line="144"/>
            </method>
            <method name="rename0" type="void" line="149"/>
            <javadoc line="150">
                renameat(int fromfd, const char old, int tofd, const char new)                
            </javadoc>
            <method name="renameat" type="void" line="153">
                <params>
                    <param name="fromfd" type="int"/>
                    <param name="from" type="byte[]"/>
                    <param name="tofd" type="int"/>
                    <param name="to" type="byte[]"/>
                </params>
                <declaration name="fromBuffer" type="NativeBuffer" line="154"/>
                <declaration name="toBuffer" type="NativeBuffer" line="155"/>
                <scope line="156"/>
                <scope line="159"/>
            </method>
            <method name="renameat0" type="void" line="164"/>
            <javadoc line="165">
                mkdir(const char path, mode_t mode)                
            </javadoc>
            <method name="mkdir" type="void" line="168">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="mode" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="169"/>
                <scope line="170"/>
                <scope line="173"/>
            </method>
            <method name="mkdir0" type="void" line="177"/>
            <javadoc line="178">
                rmdir(const char path)                
            </javadoc>
            <method name="rmdir" type="void" line="181">
                <params>
                    <param name="path" type="UnixPath"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="182"/>
                <scope line="183"/>
                <scope line="186"/>
            </method>
            <method name="rmdir0" type="void" line="190"/>
            <javadoc line="191">
                readlink(const char path, char buf, size_t bufsize)                
                <return>
                    link target                    
                </return>
            </javadoc>
            <method name="readlink" type="byte[]" line="195">
                <params>
                    <param name="path" type="UnixPath"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="196"/>
                <scope line="197"/>
                <scope line="200"/>
            </method>
            <method name="readlink0" type="byte[]" line="204"/>
            <javadoc line="205">
                realpath(const char path, char resolved_name)                
                <return>
                    resolved path                    
                </return>
            </javadoc>
            <method name="realpath" type="byte[]" line="209">
                <params>
                    <param name="path" type="UnixPath"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="210"/>
                <scope line="211"/>
                <scope line="214"/>
            </method>
            <method name="realpath0" type="byte[]" line="218"/>
            <javadoc line="219">
                symlink(const char name1, const char name2)                
            </javadoc>
            <method name="symlink" type="void" line="222">
                <params>
                    <param name="name1" type="byte[]"/>
                    <param name="name2" type="UnixPath"/>
                </params>
                <declaration name="targetBuffer" type="NativeBuffer" line="223"/>
                <declaration name="linkBuffer" type="NativeBuffer" line="224"/>
                <scope line="225"/>
                <scope line="228"/>
            </method>
            <method name="symlink0" type="void" line="233"/>
            <javadoc line="234">
                stat(const char path, struct stat buf)                
            </javadoc>
            <method name="stat" type="void" line="237">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="attrs" type="UnixFileAttributes"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="238"/>
                <scope line="239"/>
                <scope line="242"/>
            </method>
            <method name="stat0" type="void" line="246"/>
            <javadoc line="247">
                lstat(const char path, struct stat buf)                
            </javadoc>
            <method name="lstat" type="void" line="250">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="attrs" type="UnixFileAttributes"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="251"/>
                <scope line="252"/>
                <scope line="255"/>
            </method>
            <method name="lstat0" type="void" line="259"/>
            <method name="fstat" type="void" line="260"/>
            <javadoc line="260">
                fstat(int filedes, struct stat buf)                
            </javadoc>
            <javadoc line="264">
                fstatat(int filedes,const char path,  struct stat buf, int flag)                
            </javadoc>
            <method name="fstatat" type="void" line="267">
                <params>
                    <param name="dfd" type="int"/>
                    <param name="path" type="byte[]"/>
                    <param name="flag" type="int"/>
                    <param name="attrs" type="UnixFileAttributes"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="268"/>
                <scope line="269"/>
                <scope line="272"/>
            </method>
            <method name="fstatat0" type="void" line="276"/>
            <javadoc line="277">
                chown(const char path, uid_t owner, gid_t group)                
            </javadoc>
            <method name="chown" type="void" line="280">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="uid" type="int"/>
                    <param name="gid" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="281"/>
                <scope line="282"/>
                <scope line="285"/>
            </method>
            <method name="chown0" type="void" line="289"/>
            <javadoc line="290">
                lchown(const char path, uid_t owner, gid_t group)                
            </javadoc>
            <method name="lchown" type="void" line="293">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="uid" type="int"/>
                    <param name="gid" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="294"/>
                <scope line="295"/>
                <scope line="298"/>
            </method>
            <method name="lchown0" type="void" line="302"/>
            <method name="fchown" type="void" line="303"/>
            <javadoc line="303">
                fchown(int filedes, uid_t owner, gid_t group)                
            </javadoc>
            <javadoc line="307">
                chmod(const char path, mode_t mode)                
            </javadoc>
            <method name="chmod" type="void" line="310">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="mode" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="311"/>
                <scope line="312"/>
                <scope line="315"/>
            </method>
            <method name="chmod0" type="void" line="319"/>
            <method name="fchmod" type="void" line="320"/>
            <javadoc line="320">
                fchmod(int fildes, mode_t mode)                
            </javadoc>
            <javadoc line="324">
                utimes(conar char path, const struct timeval times[2])                
            </javadoc>
            <method name="utimes" type="void" line="327">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="times0" type="long"/>
                    <param name="times1" type="long"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="328"/>
                <scope line="329"/>
                <scope line="332"/>
            </method>
            <method name="utimes0" type="void" line="336"/>
            <method name="futimes" type="void" line="337"/>
            <javadoc line="337">
                futimes(int fildes,, const struct timeval times[2])                
            </javadoc>
            <javadoc line="341">
                DIR opendir(const char dirname)                
            </javadoc>
            <method name="opendir" type="long" line="344">
                <params>
                    <param name="path" type="UnixPath"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="345"/>
                <scope line="346"/>
                <scope line="349"/>
            </method>
            <method name="opendir0" type="long" line="353"/>
            <method name="fdopendir" type="long" line="354"/>
            <javadoc line="354">
                DIR fdopendir(int filedes)                
            </javadoc>
            <method name="closedir" type="void" line="358"/>
            <javadoc line="358">
                closedir(DIR dirp)                
            </javadoc>
            <method name="readdir" type="byte[]" line="362"/>
            <javadoc line="362">
                struct dirent readdir(DIR dirp)                
                <return>
                    dirent->d_name                    
                </return>
            </javadoc>
            <method name="read" type="int" line="367"/>
            <javadoc line="367">
                size_t read(int fildes, void buf, size_t nbyte)                
            </javadoc>
            <method name="write" type="int" line="371"/>
            <javadoc line="371">
                size_t writeint fildes, void buf, size_t nbyte)                
            </javadoc>
            <javadoc line="375">
                access(const char path, int amode);                
            </javadoc>
            <method name="access" type="void" line="378">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="amode" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="379"/>
                <scope line="380"/>
                <scope line="383"/>
            </method>
            <method name="access0" type="void" line="387"/>
            <method name="getpwuid" type="byte[]" line="388"/>
            <javadoc line="388">
                struct passwd getpwuid(uid_t uid);                
                <return>
                    passwd->pw_name                    
                </return>
            </javadoc>
            <method name="getgrgid" type="byte[]" line="393"/>
            <javadoc line="393">
                struct group getgrgid(gid_t gid);                
                <return>
                    group->gr_name                    
                </return>
            </javadoc>
            <javadoc line="398">
                struct passwd getpwnam(const char name);                
                <return>
                    passwd->pw_uid                    
                </return>
            </javadoc>
            <method name="getpwnam" type="int" line="402">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="403"/>
                <scope line="404"/>
                <scope line="407"/>
            </method>
            <method name="getpwnam0" type="int" line="411"/>
            <javadoc line="412">
                struct group getgrnam(const char name);                
                <return>
                    group->gr_name                    
                </return>
            </javadoc>
            <method name="getgrnam" type="int" line="416">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="417"/>
                <scope line="418"/>
                <scope line="421"/>
            </method>
            <method name="getgrnam0" type="int" line="425"/>
            <method name="getextmntent" type="int" line="426"/>
            <javadoc line="426">
                int getextmntent(FILE fp, struct extmnttab mp, int len);                
            </javadoc>
            <javadoc line="430">
                statvfs(const char path, struct statvfs buf)                
            </javadoc>
            <method name="statvfs" type="void" line="433">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="attrs" type="UnixFileStoreAttributes"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="434"/>
                <scope line="435"/>
                <scope line="438"/>
            </method>
            <method name="statvfs0" type="void" line="442"/>
            <javadoc line="443">
                long int pathconf(const char path, int name);                
            </javadoc>
            <method name="pathconf" type="long" line="446">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="name" type="int"/>
                </params>
                <declaration name="buffer" type="NativeBuffer" line="447"/>
                <scope line="448"/>
                <scope line="451"/>
            </method>
            <method name="pathconf0" type="long" line="455"/>
            <method name="fpathconf" type="long" line="456"/>
            <javadoc line="456">
                long fpathconf(int fildes, int name);                
            </javadoc>
            <method name="strerror" type="byte[]" line="460"/>
            <javadoc line="460">
                char strerror(int errnum)                
            </javadoc>
            <declaration name="hasAtSysCalls" type="boolean" line="464"/>
            <method name="supportsAtSysCalls" type="boolean" line="465"/>
            <method name="init" type="int" line="468"/>
            <declaration name="HAS_AT_SYSCALLS" type="int" line="469"/>
            <scope line="470">
                <anonymous_class line="471">
                    <method name="run" type="Void" line="472"/>
                </anonymous_class>
                <declaration name="flags" type="int" line="478"/>
            </scope>
        </class>
    </source>