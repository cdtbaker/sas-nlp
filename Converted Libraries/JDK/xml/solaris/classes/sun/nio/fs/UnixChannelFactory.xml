<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file"/>
        <import package="java.nio.channels"/>
        <import package="java.io.FileDescriptor"/>
        <import package="java.util.Set"/>
        <import package="sun.nio.ch.FileChannelImpl"/>
        <import package="sun.nio.ch.ThreadPool"/>
        <import package="sun.nio.ch.SimpleAsynchronousFileChannelImpl"/>
        <import package="sun.misc.SharedSecrets"/>
        <import package="sun.misc.JavaIOFileDescriptorAccess"/>
        <import package="com.sun.nio.file.ExtendedOpenOption"/>
        <import package="sun.nio.fs.UnixNativeDispatcher"/>
        <import package="sun.nio.fs.UnixConstants"/>
        <class name="UnixChannelFactory" line="44">
            <javadoc line="44">
                Factory for FileChannels and AsynchronousFileChannels                
            </javadoc>
            <declaration name="fdAccess" type="JavaIOFileDescriptorAccess" line="49"/>
            <method name="UnixChannelFactory" type="constructor" line="52"/>
            <class name="Flags" line="55">
                <javadoc line="55">
                    Represents the flags from a user-supplied set of open options.                    
                </javadoc>
                <declaration name="read" type="boolean" line="59"/>
                <declaration name="write" type="boolean" line="60"/>
                <declaration name="append" type="boolean" line="61"/>
                <declaration name="truncateExisting" type="boolean" line="62"/>
                <declaration name="noFollowLinks" type="boolean" line="63"/>
                <declaration name="create" type="boolean" line="64"/>
                <declaration name="createNew" type="boolean" line="65"/>
                <declaration name="deleteOnClose" type="boolean" line="66"/>
                <declaration name="sync" type="boolean" line="67"/>
                <declaration name="dsync" type="boolean" line="68"/>
                <method name="toFlags" type="Flags" line="70">
                    <params>
                        <param name="options" type="Set<? extends OpenOption>"/>
                    </params>
                    <comment line="83">
                                                
                    </comment>
                    <declaration name="flags" type="Flags" line="71"/>
                    <scope line="72">
                        <scope line="73"/>
                        <scope line="89"/>
                    </scope>
                </method>
            </class>
            <javadoc line="102">
                Constructs a file channel from an existing (open) file descriptor                
            </javadoc>
            <method name="newFileChannel" type="FileChannel" line="105">
                <params>
                    <param name="fd" type="int"/>
                    <param name="reading" type="boolean"/>
                    <param name="writing" type="boolean"/>
                </params>
                <declaration name="fdObj" type="FileDescriptor" line="106"/>
            </method>
            <javadoc line="111">
                Constructs a file channel by opening a file using a dfd/path pair                
            </javadoc>
            <method name="newFileChannel" type="FileChannel" line="120">
                <params>
                    <param name="dfd" type="int"/>
                    <param name="path" type="UnixPath"/>
                    <param name="pathForPermissionCheck" type="String"/>
                    <param name="options" type="Set<? extends OpenOption>"/>
                    <param name="mode" type="int"/>
                </params>
                <comment line="124">
                    default is reading; append =&gt; writing                    
                </comment>
                <comment line="133">
                    validation                    
                </comment>
                <declaration name="flags" type="Flags" line="121"/>
                <scope line="124">
                    <scope line="125"/>
                    <scope line="127"/>
                </scope>
                <declaration name="fdObj" type="FileDescriptor" line="138"/>
            </method>
            <javadoc line="142">
                Constructs a file channel by opening the given file.                
            </javadoc>
            <method name="newFileChannel" type="FileChannel" line="149">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="options" type="Set<? extends OpenOption>"/>
                    <param name="mode" type="int"/>
                </params>
            </method>
            <javadoc line="153">
                Constructs an asynchronous file channel by opening the given file.                
            </javadoc>
            <method name="newAsynchronousFileChannel" type="AsynchronousFileChannel" line="161">
                <params>
                    <param name="path" type="UnixPath"/>
                    <param name="options" type="Set<? extends OpenOption>"/>
                    <param name="mode" type="int"/>
                    <param name="pool" type="ThreadPool"/>
                </params>
                <comment line="165">
                    default is reading                    
                </comment>
                <comment line="170">
                    validation                    
                </comment>
                <comment line="174">
                    for now use simple implementation                    
                </comment>
                <declaration name="flags" type="Flags" line="162"/>
                <scope line="165"/>
                <declaration name="fdObj" type="FileDescriptor" line="174"/>
            </method>
            <javadoc line="178">
                Opens file based on parameters and options, returning a FileDescriptor
                  encapsulating the handle to the open file.                
            </javadoc>
            <method name="open" type="FileDescriptor" line="188">
                <params>
                    <param name="dfd" type="int"/>
                    <param name="path" type="UnixPath"/>
                    <param name="pathForPermissionCheck" type="String"/>
                    <param name="flags" type="Flags"/>
                    <param name="mode" type="int"/>
                </params>
                <comment line="190">
                    map to oflags                    
                </comment>
                <comment line="203">
                    create flags                    
                </comment>
                <comment line="207">
                    throw exception if file name is &quot;.&quot; to avoid confusing error                    
                </comment>
                <comment line="221">
                    follow links by default                    
                </comment>
                <comment line="233">
                    permission check before we open the file                    
                </comment>
                <comment line="254">
                    Linux error can be EISDIR or EEXIST when file exists                    
                </comment>
                <comment line="259">
                    handle ELOOP to avoid confusing message                    
                </comment>
                <comment line="267">
                    unlink file immediately if delete on close. The spec is clear that
                     an implementation cannot guarantee to unlink the correct file when
                     replaced by an attacker after it is opened.                    
                </comment>
                <comment line="278">
                    best-effort                    
                </comment>
                <comment line="282">
                    create java.io.FileDescriptor                    
                </comment>
                <declaration name="oflags" type="int" line="190"/>
                <scope line="191"/>
                <scope line="193"/>
                <scope line="196">
                    <scope line="203">
                        <declaration name="pathForSysCall" type="byte[]" line="204"/>
                        <scope line="210"/>
                    </scope>
                    <scope line="214"/>
                </scope>
                <declaration name="followLinks" type="boolean" line="221"/>
                <scope line="222"/>
                <declaration name="sm" type="SecurityManager" line="233"/>
                <scope line="234"/>
                <declaration name="fd" type="int" line="245"/>
                <scope line="246">
                    <scope line="247"/>
                    <scope line="249"/>
                </scope>
                <scope line="252">
                    <scope line="254"/>
                    <scope line="259"/>
                </scope>
                <scope line="269">
                    <scope line="270">
                        <scope line="271"/>
                        <scope line="273"/>
                    </scope>
                    <scope line="276"/>
                </scope>
                <declaration name="fdObj" type="FileDescriptor" line="282"/>
            </method>
        </class>
    </source>