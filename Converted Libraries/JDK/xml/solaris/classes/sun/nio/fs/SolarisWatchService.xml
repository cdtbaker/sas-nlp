<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util"/>
        <import package="java.io.IOException"/>
        <import package="sun.misc.Unsafe"/>
        <import package="sun.nio.fs.UnixConstants"/>
        <class name="SolarisWatchService" line="37">
            <extends class="AbstractWatchService"/>
            <comment line="53">
                typedef struct port_event {
                     int             portev_events;
                     ushort_t        portev_source;
                     ushort_t        portev_pad;
                     uintptr_t       portev_object;
                     void            portev_user;
                 } port_event_t;                
            </comment>
            <comment line="67">
                typedef struct file_obj {
                     timestruc_t     fo_atime;
                     timestruc_t     fo_mtime;
                     timestruc_t     fo_ctime;
                     uintptr_t       fo_pad[3];
                     char            fo_name;
                 } file_obj_t;                
            </comment>
            <comment line="79">
                port sources                
            </comment>
            <comment line="83">
                user-watchable events                
            </comment>
            <comment line="88">
                exception events                
            </comment>
            <comment line="95">
                background thread to read change events                
            </comment>
            <comment line="743">
                -- native methods --                
            </comment>
            <javadoc line="37">
                Solaris implementation of WatchService based on file events notification
                  facility.                
            </javadoc>
            <declaration name="unsafe" type="Unsafe" line="45"/>
            <declaration name="addressSize" type="int" line="46"/>
            <method name="dependsArch" type="int" line="48">
                <params>
                    <param name="value32" type="int"/>
                    <param name="value64" type="int"/>
                </params>
            </method>
            <declaration name="SIZEOF_PORT_EVENT" type="int" line="61"/>
            <declaration name="OFFSETOF_EVENTS" type="int" line="62"/>
            <declaration name="OFFSETOF_SOURCE" type="int" line="63"/>
            <declaration name="OFFSETOF_OBJECT" type="int" line="64"/>
            <declaration name="SIZEOF_FILEOBJ" type="int" line="75"/>
            <declaration name="OFFSET_FO_NAME" type="int" line="76"/>
            <declaration name="PORT_SOURCE_USER" type="short" line="79"/>
            <declaration name="PORT_SOURCE_FILE" type="short" line="80"/>
            <declaration name="FILE_MODIFIED" type="int" line="83"/>
            <declaration name="FILE_ATTRIB" type="int" line="84"/>
            <declaration name="FILE_NOFOLLOW" type="int" line="85"/>
            <declaration name="FILE_DELETE" type="int" line="88"/>
            <declaration name="FILE_RENAME_TO" type="int" line="89"/>
            <declaration name="FILE_RENAME_FROM" type="int" line="90"/>
            <declaration name="UNMOUNTED" type="int" line="91"/>
            <declaration name="MOUNTEDOVER" type="int" line="92"/>
            <declaration name="poller" type="Poller" line="95"/>
            <method name="SolarisWatchService" type="constructor" line="97">
                <params>
                    <param name="fs" type="UnixFileSystem"/>
                </params>
                <declaration name="port" type="int" line="98"/>
                <scope line="99"/>
                <scope line="101"/>
            </method>
            <method name="register" type="WatchKey" line="114">
                <params>
                    <param name="dir" type="Path"/>
                    <param name="events" type="WatchEvent.Kind<?>[]"/>
                    <param name="modifiers" type="WatchEvent.Modifier"/>
                </params>
                <comment line="116">
                    delegate to poller                    
                </comment>
            </method>
            <method name="implClose" type="void" line="120">
                <comment line="122">
                    delegate to poller                    
                </comment>
            </method>
            <class name="SolarisWatchKey" line="125">
                <extends class="AbstractWatchKey"/>
                <comment line="134">
                    pointer to native file_obj object                    
                </comment>
                <comment line="137">
                    events (may be changed). set to null when watch key is invalid                    
                </comment>
                <comment line="140">
                    map of entries in directory; created lazily; accessed only by
                     poller thread.                    
                </comment>
                <comment line="219">
                    maximum number of events to read per call to port_getn                    
                </comment>
                <comment line="222">
                    events that map to ENTRY_DELETE                    
                </comment>
                <comment line="226">
                    events that tell us not to re-associate the object                    
                </comment>
                <comment line="230">
                    address of event buffers (used to receive events with port_getn)                    
                </comment>
                <comment line="235">
                    the I/O port                    
                </comment>
                <comment line="238">
                    maps file key (dev/inode) to WatchKey                    
                </comment>
                <comment line="241">
                    maps file_obj object to Node                    
                </comment>
                <comment line="323">
                    cancel single key                    
                </comment>
                <comment line="350">
                    close watch service                    
                </comment>
                <implements interface="DirectoryNode"/>
                <javadoc line="125">
                    WatchKey implementation                    
                </javadoc>
                <declaration name="fileKey" type="UnixFileKey" line="131"/>
                <declaration name="object" type="long" line="134"/>
                <declaration name="events" type="Set&lt;? extends WatchEvent.Kind&lt;?&gt;&gt;" line="137"/>
                <declaration name="children" type="Map&lt;Path,EntryNode&gt;" line="141"/>
                <method name="SolarisWatchKey" type="constructor" line="148">
                    <params>
                        <param name="watcher" type="SolarisWatchService"/>
                        <param name="dir" type="UnixPath"/>
                        <param name="fileKey" type="UnixFileKey"/>
                        <param name="object" type="long"/>
                        <param name="events" type="Set<? extends WatchEvent.Kind<?>>"/>
                    </params>
                </method>
                <method name="getDirectory" type="UnixPath" line="155"/>
                <method name="getFileKey" type="UnixFileKey" line="159"/>
                <method name="object" type="long" line="164"/>
                <method name="invalidate" type="void" line="168"/>
                <method name="events" type="Set<? extends WatchEvent.Kind<?>>" line="172"/>
                <method name="setEvents" type="void" line="176">
                    <params>
                        <param name="events" type="Set<? extends WatchEvent.Kind<?>>"/>
                    </params>
                </method>
                <method name="isValid" type="boolean" line="181"/>
                <method name="cancel" type="void" line="186">
                    <comment line="189">
                        delegate to poller                        
                    </comment>
                    <scope line="187"/>
                </method>
                <method name="addChild" type="void" line="194">
                    <params>
                        <param name="name" type="Path"/>
                        <param name="node" type="EntryNode"/>
                    </params>
                </method>
                <method name="removeChild" type="void" line="201">
                    <params>
                        <param name="name" type="Path"/>
                    </params>
                </method>
                <method name="getChild" type="EntryNode" line="206">
                    <params>
                        <param name="name" type="Path"/>
                    </params>
                </method>
            </class>
            <class name="Poller" line="213">
                <extends class="AbstractPoller"/>
                <comment line="134">
                    pointer to native file_obj object                    
                </comment>
                <comment line="137">
                    events (may be changed). set to null when watch key is invalid                    
                </comment>
                <comment line="140">
                    map of entries in directory; created lazily; accessed only by
                     poller thread.                    
                </comment>
                <comment line="219">
                    maximum number of events to read per call to port_getn                    
                </comment>
                <comment line="222">
                    events that map to ENTRY_DELETE                    
                </comment>
                <comment line="226">
                    events that tell us not to re-associate the object                    
                </comment>
                <comment line="230">
                    address of event buffers (used to receive events with port_getn)                    
                </comment>
                <comment line="235">
                    the I/O port                    
                </comment>
                <comment line="238">
                    maps file key (dev/inode) to WatchKey                    
                </comment>
                <comment line="241">
                    maps file_obj object to Node                    
                </comment>
                <comment line="323">
                    cancel single key                    
                </comment>
                <comment line="350">
                    close watch service                    
                </comment>
                <javadoc line="213">
                    Background thread to read from port                    
                </javadoc>
                <declaration name="MAX_EVENT_COUNT" type="int" line="219"/>
                <declaration name="FILE_REMOVED" type="int" line="222"/>
                <declaration name="FILE_EXCEPTION" type="int" line="226"/>
                <declaration name="bufferAddress" type="long" line="230"/>
                <declaration name="watcher" type="SolarisWatchService" line="232"/>
                <declaration name="port" type="int" line="235"/>
                <declaration name="fileKey2WatchKey" type="Map&lt;UnixFileKey,SolarisWatchKey&gt;" line="238"/>
                <declaration name="object2Node" type="Map&lt;Long,Node&gt;" line="241"/>
                <javadoc line="243">
                    Create a new instance                    
                </javadoc>
                <method name="Poller" type="constructor" line="246">
                    <params>
                        <param name="fs" type="UnixFileSystem"/>
                        <param name="watcher" type="SolarisWatchService"/>
                        <param name="port" type="int"/>
                    </params>
                </method>
                <method name="wakeup" type="void" line="256">
                    <comment line="258">
                        write to port to wakeup polling thread                        
                    </comment>
                    <scope line="258"/>
                    <scope line="260"/>
                </method>
                <method name="implRegister" type="Object" line="269">
                    <params>
                        <param name="obj" type="Path"/>
                        <param name="events" type="Set<? extends WatchEvent.Kind<?>>"/>
                        <param name="modifiers" type="WatchEvent.Modifier"/>
                    </params>
                    <comment line="271">
                        no modifiers supported at this time                        
                    </comment>
                    <comment line="277">
                        ignore                        
                    </comment>
                    <comment line="284">
                        check file is directory                        
                    </comment>
                    <comment line="295">
                        return existing watch key after updating events if already
                         registered                        
                    </comment>
                    <comment line="304">
                        register directory                        
                    </comment>
                    <comment line="312">
                        create watch key and insert it into maps                        
                    </comment>
                    <comment line="317">
                        register all entries in directory                        
                    </comment>
                    <scope line="271">
                        <scope line="272"/>
                    </scope>
                    <declaration name="dir" type="UnixPath" line="281"/>
                    <declaration name="attrs" type="UnixFileAttributes" line="284"/>
                    <scope line="285"/>
                    <scope line="287"/>
                    <scope line="290"/>
                    <declaration name="fileKey" type="UnixFileKey" line="296"/>
                    <declaration name="watchKey" type="SolarisWatchKey" line="297"/>
                    <scope line="298"/>
                    <declaration name="object" type="long" line="304"/>
                    <scope line="305"/>
                    <scope line="307"/>
                </method>
                <method name="implCancelKey" type="void" line="324">
                    <params>
                        <param name="obj" type="WatchKey"/>
                    </params>
                    <comment line="330">
                        release resources for entries in directory                        
                    </comment>
                    <comment line="340">
                        release resources for directory                        
                    </comment>
                    <comment line="345">
                        and finally invalidate the key                        
                    </comment>
                    <declaration name="key" type="SolarisWatchKey" line="325"/>
                    <scope line="326">
                        <scope line="330">
                            <scope line="331">
                                <declaration name="node" type="EntryNode" line="332"/>
                                <declaration name="object" type="long" line="333"/>
                            </scope>
                        </scope>
                        <declaration name="object" type="long" line="340"/>
                    </scope>
                </method>
                <method name="implCloseAll" type="void" line="351">
                    <comment line="353">
                        release all native resources                        
                    </comment>
                    <comment line="358">
                        invalidate all keys                        
                    </comment>
                    <comment line="363">
                        clean-up                        
                    </comment>
                    <comment line="367">
                        free global resources                        
                    </comment>
                    <scope line="353"/>
                    <scope line="358"/>
                </method>
                <javadoc line="371">
                    Poller main loop. Blocks on port_getn waiting for events and then
                      processes them.                    
                </javadoc>
                <method name="run" type="void" line="376">
                    <scope line="377">
                        <scope line="378">
                            <declaration name="n" type="int" line="379"/>
                            <declaration name="address" type="long" line="382"/>
                            <scope line="383">
                                <declaration name="shutdown" type="boolean" line="384"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="390"/>
                </method>
                <javadoc line="395">
                    Process a single port_event
                      Returns true if poller thread is requested to shutdown.                    
                </javadoc>
                <method name="processEvent" type="boolean" line="400">
                    <params>
                        <param name="address" type="long"/>
                    </params>
                    <comment line="402">
                        pe-&gt;portev_source                        
                    </comment>
                    <comment line="404">
                        pe-&gt;portev_object                        
                    </comment>
                    <comment line="406">
                        pe-&gt;portev_events                        
                    </comment>
                    <comment line="409">
                        user event is trigger to process pending requests                        
                    </comment>
                    <comment line="412">
                        process any pending requests                        
                    </comment>
                    <comment line="420">
                        lookup object to get Node                        
                    </comment>
                    <comment line="423">
                        should not happen                        
                    </comment>
                    <comment line="427">
                        As a workaround for 6642290 and 6636438/6636412 we don&apos;t use
                         FILE_EXCEPTION events to tell use not to register the file.
                         boolean reregister = (events &amp; FILE_EXCEPTION) == 0;                        
                    </comment>
                    <comment line="432">
                        If node is EntryNode then event relates to entry in directory
                         If node is a SolarisWatchKey (DirectoryNode) then event relates
                         to a watched directory.                        
                    </comment>
                    <comment line="444">
                        need to re-associate to get further events                        
                    </comment>
                    <comment line="454">
                        unable to re-register                        
                    </comment>
                    <comment line="459">
                        object is not re-registered so release resources. If
                         object is a watched directory then signal key                        
                    </comment>
                    <comment line="462">
                        release resources                        
                    </comment>
                    <comment line="466">
                        if watch key then signal it                        
                    </comment>
                    <comment line="473">
                        if entry then remove it from parent                        
                    </comment>
                    <declaration name="source" type="short" line="402"/>
                    <declaration name="object" type="long" line="404"/>
                    <declaration name="events" type="int" line="406"/>
                    <scope line="409">
                        <scope line="410">
                            <declaration name="shutdown" type="boolean" line="412"/>
                        </scope>
                    </scope>
                    <declaration name="node" type="Node" line="420"/>
                    <scope line="421"/>
                    <declaration name="reregister" type="boolean" line="429"/>
                    <declaration name="isDirectory" type="boolean" line="434"/>
                    <scope line="435"/>
                    <scope line="437">
                        <declaration name="ignore" type="boolean" line="438"/>
                    </scope>
                    <scope line="444">
                        <scope line="445"/>
                        <scope line="452"/>
                    </scope>
                    <scope line="460">
                        <scope line="466">
                            <declaration name="key" type="SolarisWatchKey" line="467"/>
                        </scope>
                        <scope line="471">
                            <declaration name="entry" type="EntryNode" line="473"/>
                            <declaration name="key" type="SolarisWatchKey" line="474"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="482">
                    Process directory events. If directory is modified then re-scan
                      directory to register any new entries                    
                </javadoc>
                <method name="processDirectoryEvents" type="void" line="486">
                    <params>
                        <param name="key" type="SolarisWatchKey"/>
                        <param name="mask" type="int"/>
                    </params>
                    <scope line="487"/>
                </method>
                <javadoc line="493">
                    Process events for entries in registered directories. Returns {@codetrue} if events are ignored because the watch key has been cancelled.                    
                </javadoc>
                <method name="processEntryEvents" type="boolean" line="497">
                    <params>
                        <param name="node" type="EntryNode"/>
                        <param name="mask" type="int"/>
                    </params>
                    <comment line="502">
                        key has been cancelled so ignore event                        
                    </comment>
                    <comment line="506">
                        entry modified                        
                    </comment>
                    <comment line="513">
                        entry removed                        
                    </comment>
                    <comment line="517">
                        Due to 6636438/6636412 we may get a remove event for cases
                         where a rmdir/unlink/rename is attempted but fails. Until
                         this issue is resolved we re-lstat the file to check if it
                         exists. If it exists then we ignore the event. To keep the
                         workaround simple we don&apos;t check the st_ino so it isn&apos;t
                         effective when the file is replaced.                        
                    </comment>
                    <declaration name="key" type="SolarisWatchKey" line="498"/>
                    <declaration name="events" type="Set&lt;? extends WatchEvent.Kind&lt;?&gt;&gt;" line="499"/>
                    <scope line="500"/>
                    <scope line="508"/>
                    <scope line="515">
                        <declaration name="removed" type="boolean" line="522"/>
                        <scope line="523"/>
                        <scope line="527"/>
                    </scope>
                </method>
                <javadoc line="535">
                    Registers all entries in the given directory
                      The {@code sendEvents} parameter indicates if ENTRY_CREATE events
                      should be queued when new entries are found. When initially
                      registering a directory then will always be false. When re-scanning
                      a directory then it depends on if the event is enabled or not.                    
                </javadoc>
                <method name="registerChildren" type="void" line="546">
                    <params>
                        <param name="dir" type="UnixPath"/>
                        <param name="parent" type="SolarisWatchKey"/>
                        <param name="sendEvents" type="boolean"/>
                    </params>
                    <comment line="548">
                        if the ENTRY_MODIFY event is not enabled then we don&apos;t need
                         modification events for entries in the directory                        
                    </comment>
                    <comment line="558">
                        nothing we can do                        
                    </comment>
                    <comment line="565">
                        skip entry if already registered                        
                    </comment>
                    <comment line="569">
                        send ENTRY_CREATE if enabled                        
                    </comment>
                    <comment line="574">
                        register it                        
                    </comment>
                    <comment line="579">
                        can&apos;t register so ignore for now.                        
                    </comment>
                    <comment line="583">
                        create node                        
                    </comment>
                    <comment line="585">
                        tell the parent about it                        
                    </comment>
                    <comment line="590">
                        error during iteration which we ignore for now                        
                    </comment>
                    <declaration name="events" type="int" line="549"/>
                    <declaration name="stream" type="DirectoryStream&lt;Path&gt;" line="553"/>
                    <scope line="554"/>
                    <scope line="556"/>
                    <scope line="560">
                        <scope line="561">
                            <declaration name="name" type="Path" line="562"/>
                            <scope line="569"/>
                            <declaration name="object" type="long" line="574"/>
                            <scope line="575"/>
                            <scope line="577"/>
                            <declaration name="node" type="EntryNode" line="583"/>
                        </scope>
                    </scope>
                    <scope line="588"/>
                    <scope line="590">
                        <scope line="591"/>
                        <scope line="593"/>
                    </scope>
                </method>
                <javadoc line="597">
                    Update watch key&apos;s events. Where the ENTRY_MODIFY changes then we
                      need to update the events of registered children.                    
                </javadoc>
                <method name="updateEvents" type="void" line="601">
                    <params>
                        <param name="key" type="SolarisWatchKey"/>
                        <param name="events" type="Set<? extends WatchEvent.Kind<?>>"/>
                    </params>
                    <comment line="603">
                        update events, rembering if ENTRY_MODIFY was previously
                         enabled or disabled.                        
                    </comment>
                    <comment line="609">
                        check if ENTRY_MODIFY has changed                        
                    </comment>
                    <comment line="616">
                        if changed then update events of children                        
                    </comment>
                    <comment line="630">
                        nothing we can do.                        
                    </comment>
                    <declaration name="wasModifyEnabled" type="boolean" line="604"/>
                    <declaration name="isModifyEnabled" type="boolean" line="609"/>
                    <scope line="611"/>
                    <scope line="616">
                        <declaration name="ev" type="int" line="617"/>
                        <scope line="621">
                            <declaration name="object" type="long" line="622"/>
                            <scope line="623"/>
                            <scope line="628"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="635">
                    Calls port_associate to register the given path.
                      Returns pointer to fileobj structure that is allocated for
                      the registration.                    
                </javadoc>
                <method name="registerImpl" type="long" line="642">
                    <params>
                        <param name="dir" type="UnixPath"/>
                        <param name="events" type="int"/>
                    </params>
                    <comment line="644">
                        allocate memory for the path (file_obj-&gt;fo_name field)                        
                    </comment>
                    <comment line="652">
                        allocate memory for filedatanode structure - this is the object
                         to port_associate                        
                    </comment>
                    <comment line="658">
                        associate the object with the port                        
                    </comment>
                    <comment line="665">
                        debugging                        
                    </comment>
                    <declaration name="path" type="byte[]" line="644"/>
                    <declaration name="len" type="int" line="645"/>
                    <declaration name="name" type="long" line="646"/>
                    <declaration name="object" type="long" line="653"/>
                    <scope line="658"/>
                    <scope line="663">
                        <scope line="665"/>
                    </scope>
                </method>
                <javadoc line="677">
                    Frees all resources for an file_obj object; optionally remove
                      association from port                    
                </javadoc>
                <method name="releaseObject" type="void" line="681">
                    <params>
                        <param name="object" type="long"/>
                        <param name="dissociate" type="boolean"/>
                    </params>
                    <comment line="683">
                        remove association                        
                    </comment>
                    <comment line="688">
                        ignore                        
                    </comment>
                    <comment line="692">
                        free native memory                        
                    </comment>
                    <scope line="683">
                        <scope line="684"/>
                        <scope line="686"/>
                    </scope>
                    <declaration name="name" type="long" line="692"/>
                </method>
            </class>
            <interface name="Node">
                <comment line="134">
                    pointer to native file_obj object                    
                </comment>
                <comment line="137">
                    events (may be changed). set to null when watch key is invalid                    
                </comment>
                <comment line="140">
                    map of entries in directory; created lazily; accessed only by
                     poller thread.                    
                </comment>
                <comment line="219">
                    maximum number of events to read per call to port_getn                    
                </comment>
                <comment line="222">
                    events that map to ENTRY_DELETE                    
                </comment>
                <comment line="226">
                    events that tell us not to re-associate the object                    
                </comment>
                <comment line="230">
                    address of event buffers (used to receive events with port_getn)                    
                </comment>
                <comment line="235">
                    the I/O port                    
                </comment>
                <comment line="238">
                    maps file key (dev/inode) to WatchKey                    
                </comment>
                <comment line="241">
                    maps file_obj object to Node                    
                </comment>
                <comment line="323">
                    cancel single key                    
                </comment>
                <comment line="350">
                    close watch service                    
                </comment>
                <javadoc line="698">
                    A node with native (file_obj) resources                    
                </javadoc>
                <method name="object" type="long" line="702"/>
            </interface>
            <interface name="DirectoryNode">
                <implements interface="Node"/>
                <comment line="134">
                    pointer to native file_obj object                    
                </comment>
                <comment line="137">
                    events (may be changed). set to null when watch key is invalid                    
                </comment>
                <comment line="140">
                    map of entries in directory; created lazily; accessed only by
                     poller thread.                    
                </comment>
                <comment line="219">
                    maximum number of events to read per call to port_getn                    
                </comment>
                <comment line="222">
                    events that map to ENTRY_DELETE                    
                </comment>
                <comment line="226">
                    events that tell us not to re-associate the object                    
                </comment>
                <comment line="230">
                    address of event buffers (used to receive events with port_getn)                    
                </comment>
                <comment line="235">
                    the I/O port                    
                </comment>
                <comment line="238">
                    maps file key (dev/inode) to WatchKey                    
                </comment>
                <comment line="241">
                    maps file_obj object to Node                    
                </comment>
                <comment line="323">
                    cancel single key                    
                </comment>
                <comment line="350">
                    close watch service                    
                </comment>
                <javadoc line="705">
                    A directory node with a map of the entries in the directory                    
                </javadoc>
                <method name="addChild" type="void" line="709"/>
                <method name="removeChild" type="void" line="710"/>
                <method name="getChild" type="EntryNode" line="711"/>
            </interface>
            <class name="EntryNode" line="714">
                <comment line="134">
                    pointer to native file_obj object                    
                </comment>
                <comment line="137">
                    events (may be changed). set to null when watch key is invalid                    
                </comment>
                <comment line="140">
                    map of entries in directory; created lazily; accessed only by
                     poller thread.                    
                </comment>
                <comment line="219">
                    maximum number of events to read per call to port_getn                    
                </comment>
                <comment line="222">
                    events that map to ENTRY_DELETE                    
                </comment>
                <comment line="226">
                    events that tell us not to re-associate the object                    
                </comment>
                <comment line="230">
                    address of event buffers (used to receive events with port_getn)                    
                </comment>
                <comment line="235">
                    the I/O port                    
                </comment>
                <comment line="238">
                    maps file key (dev/inode) to WatchKey                    
                </comment>
                <comment line="241">
                    maps file_obj object to Node                    
                </comment>
                <comment line="323">
                    cancel single key                    
                </comment>
                <comment line="350">
                    close watch service                    
                </comment>
                <implements interface="Node"/>
                <javadoc line="714">
                    An implementation of a node that is an entry in a directory.                    
                </javadoc>
                <declaration name="object" type="long" line="718"/>
                <declaration name="name" type="Path" line="719"/>
                <declaration name="parent" type="DirectoryNode" line="720"/>
                <method name="EntryNode" type="constructor" line="722">
                    <params>
                        <param name="object" type="long"/>
                        <param name="name" type="Path"/>
                        <param name="parent" type="DirectoryNode"/>
                    </params>
                </method>
                <method name="object" type="long" line="729"/>
                <method name="name" type="Path" line="733"/>
                <method name="parent" type="DirectoryNode" line="737"/>
            </class>
            <method name="init" type="void" line="744"/>
            <method name="portCreate" type="int" line="746"/>
            <method name="portAssociate" type="void" line="748"/>
            <method name="portDissociate" type="void" line="751"/>
            <method name="portSend" type="void" line="754"/>
            <method name="portGetn" type="int" line="757"/>
            <scope line="760">
                <anonymous_class line="761">
                    <method name="run" type="Void" line="762"/>
                </anonymous_class>
            </scope>
        </class>
    </source>