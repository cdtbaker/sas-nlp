<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util"/>
        <import package="java.io.IOException"/>
        <import package="sun.misc.Unsafe"/>
        <import package="sun.nio.fs.UnixConstants"/>
        <class name="SolarisWatchService" line="9">
            <extends class="AbstractWatchService"/>
            <javadoc line="9">
                Solaris implementation of WatchService based on file events notification
                  facility.                
            </javadoc>
            <declaration name="unsafe" type="Unsafe" line="14"/>
            <declaration name="addressSize" type="int" line="15"/>
            <method name="dependsArch" type="int" line="16">
                <params>
                    <param name="value32" type="int"/>
                    <param name="value64" type="int"/>
                </params>
            </method>
            <declaration name="SIZEOF_PORT_EVENT" type="int" line="19"/>
            <declaration name="OFFSETOF_EVENTS" type="int" line="20"/>
            <declaration name="OFFSETOF_SOURCE" type="int" line="21"/>
            <declaration name="OFFSETOF_OBJECT" type="int" line="22"/>
            <declaration name="SIZEOF_FILEOBJ" type="int" line="23"/>
            <declaration name="OFFSET_FO_NAME" type="int" line="24"/>
            <declaration name="PORT_SOURCE_USER" type="short" line="25"/>
            <declaration name="PORT_SOURCE_FILE" type="short" line="26"/>
            <declaration name="FILE_MODIFIED" type="int" line="27"/>
            <declaration name="FILE_ATTRIB" type="int" line="28"/>
            <declaration name="FILE_NOFOLLOW" type="int" line="29"/>
            <declaration name="FILE_DELETE" type="int" line="30"/>
            <declaration name="FILE_RENAME_TO" type="int" line="31"/>
            <declaration name="FILE_RENAME_FROM" type="int" line="32"/>
            <declaration name="UNMOUNTED" type="int" line="33"/>
            <declaration name="MOUNTEDOVER" type="int" line="34"/>
            <declaration name="poller" type="Poller" line="35"/>
            <method name="SolarisWatchService" type="constructor" line="36">
                <params>
                    <param name="fs" type="UnixFileSystem"/>
                </params>
                <declaration name="port" type="int" line="37"/>
                <scope line="38"/>
                <scope line="41"/>
            </method>
            <method name="register" type="WatchKey" line="47">
                <params>
                    <param name="dir" type="Path"/>
                    <param name="events" type="WatchEvent.Kind<?>[]"/>
                    <param name="modifiers" type="WatchEvent.Modifier"/>
                </params>
            </method>
            <method name="implClose" type="void" line="50"/>
            <class name="SolarisWatchKey" line="53">
                <extends class="AbstractWatchKey"/>
                <implements interface="DirectoryNode"/>
                <javadoc line="53">
                    WatchKey implementation                    
                </javadoc>
                <declaration name="fileKey" type="UnixFileKey" line="57"/>
                <declaration name="object" type="long" line="58"/>
                <declaration name="events" type="Set&lt;? extends WatchEvent.Kind&lt;?&gt;&gt;" line="59"/>
                <declaration name="children" type="Map&lt;Path,EntryNode&gt;" line="60"/>
                <method name="SolarisWatchKey" type="constructor" line="61">
                    <params>
                        <param name="watcher" type="SolarisWatchService"/>
                        <param name="dir" type="UnixPath"/>
                        <param name="fileKey" type="UnixFileKey"/>
                        <param name="object" type="long"/>
                        <param name="events" type="Set<? extends WatchEvent.Kind<?>>"/>
                    </params>
                </method>
                <method name="getDirectory" type="UnixPath" line="67"/>
                <method name="getFileKey" type="UnixFileKey" line="70"/>
                <method name="object" type="long" line="73"/>
                <method name="invalidate" type="void" line="76"/>
                <method name="events" type="Set<? extends WatchEvent.Kind<?>>" line="79"/>
                <method name="setEvents" type="void" line="82">
                    <params>
                        <param name="events" type="Set<? extends WatchEvent.Kind<?>>"/>
                    </params>
                </method>
                <method name="isValid" type="boolean" line="85"/>
                <method name="cancel" type="void" line="88">
                    <scope line="89"/>
                </method>
                <method name="addChild" type="void" line="93">
                    <params>
                        <param name="name" type="Path"/>
                        <param name="node" type="EntryNode"/>
                    </params>
                </method>
                <method name="removeChild" type="void" line="97">
                    <params>
                        <param name="name" type="Path"/>
                    </params>
                </method>
                <method name="getChild" type="EntryNode" line="100">
                    <params>
                        <param name="name" type="Path"/>
                    </params>
                </method>
            </class>
            <class name="Poller" line="105">
                <extends class="AbstractPoller"/>
                <javadoc line="105">
                    Background thread to read from port                    
                </javadoc>
                <declaration name="MAX_EVENT_COUNT" type="int" line="109"/>
                <declaration name="FILE_REMOVED" type="int" line="110"/>
                <declaration name="FILE_EXCEPTION" type="int" line="111"/>
                <declaration name="bufferAddress" type="long" line="112"/>
                <declaration name="watcher" type="SolarisWatchService" line="113"/>
                <declaration name="port" type="int" line="114"/>
                <declaration name="fileKey2WatchKey" type="Map&lt;UnixFileKey,SolarisWatchKey&gt;" line="115"/>
                <declaration name="object2Node" type="Map&lt;Long,Node&gt;" line="116"/>
                <javadoc line="117">
                    Create a new instance                    
                </javadoc>
                <method name="Poller" type="constructor" line="120">
                    <params>
                        <param name="fs" type="UnixFileSystem"/>
                        <param name="watcher" type="SolarisWatchService"/>
                        <param name="port" type="int"/>
                    </params>
                </method>
                <method name="wakeup" type="void" line="127">
                    <scope line="128"/>
                    <scope line="131"/>
                </method>
                <method name="implRegister" type="Object" line="135">
                    <params>
                        <param name="obj" type="Path"/>
                        <param name="events" type="Set<? extends WatchEvent.Kind<?>>"/>
                        <param name="modifiers" type="WatchEvent.Modifier"/>
                    </params>
                    <scope line="136">
                        <scope line="137"/>
                    </scope>
                    <declaration name="dir" type="UnixPath" line="143"/>
                    <declaration name="attrs" type="UnixFileAttributes" line="144"/>
                    <scope line="145"/>
                    <scope line="148"/>
                    <scope line="151"/>
                    <declaration name="fileKey" type="UnixFileKey" line="154"/>
                    <declaration name="watchKey" type="SolarisWatchKey" line="155"/>
                    <scope line="156"/>
                    <declaration name="object" type="long" line="160"/>
                    <scope line="161"/>
                    <scope line="164"/>
                </method>
                <method name="implCancelKey" type="void" line="173">
                    <params>
                        <param name="obj" type="WatchKey"/>
                    </params>
                    <declaration name="key" type="SolarisWatchKey" line="174"/>
                    <scope line="175">
                        <scope line="177">
                            <scope line="178">
                                <declaration name="node" type="EntryNode" line="179"/>
                                <declaration name="object" type="long" line="180"/>
                            </scope>
                        </scope>
                        <declaration name="object" type="long" line="185"/>
                    </scope>
                </method>
                <method name="implCloseAll" type="void" line="191">
                    <scope line="192"/>
                    <scope line="195"/>
                </method>
                <javadoc line="203">
                    Poller main loop. Blocks on port_getn waiting for events and then
                      processes them.                    
                </javadoc>
                <method name="run" type="void" line="207"/>
                <javadoc line="224">
                    Process a single port_event
                      Returns true if poller thread is requested to shutdown.                    
                </javadoc>
                <method name="processEvent" type="boolean" line="228">
                    <params>
                        <param name="address" type="long"/>
                    </params>
                    <declaration name="source" type="short" line="229"/>
                    <declaration name="object" type="long" line="230"/>
                    <declaration name="events" type="int" line="231"/>
                    <scope line="232">
                        <scope line="233">
                            <declaration name="shutdown" type="boolean" line="234"/>
                        </scope>
                    </scope>
                    <declaration name="node" type="Node" line="239"/>
                    <scope line="240"/>
                    <declaration name="reregister" type="boolean" line="243"/>
                    <declaration name="isDirectory" type="boolean" line="244"/>
                    <scope line="245"/>
                    <scope line="248">
                        <declaration name="ignore" type="boolean" line="249"/>
                    </scope>
                    <scope line="252">
                        <scope line="253"/>
                        <scope line="258"/>
                    </scope>
                    <scope line="262">
                        <scope line="265">
                            <declaration name="key" type="SolarisWatchKey" line="266"/>
                        </scope>
                        <scope line="271">
                            <declaration name="entry" type="EntryNode" line="272"/>
                            <declaration name="key" type="SolarisWatchKey" line="273"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="279">
                    Process directory events. If directory is modified then re-scan
                      directory to register any new entries                    
                </javadoc>
                <method name="processDirectoryEvents" type="void" line="283">
                    <params>
                        <param name="key" type="SolarisWatchKey"/>
                        <param name="mask" type="int"/>
                    </params>
                    <scope line="284"/>
                </method>
                <javadoc line="288">
                    Process events for entries in registered directories. Returns {@codetrue} if events are ignored because the watch key has been cancelled.                    
                </javadoc>
                <method name="processEntryEvents" type="boolean" line="291">
                    <params>
                        <param name="node" type="EntryNode"/>
                        <param name="mask" type="int"/>
                    </params>
                    <declaration name="key" type="SolarisWatchKey" line="292"/>
                    <declaration name="events" type="Set&lt;? extends WatchEvent.Kind&lt;?&gt;&gt;" line="293"/>
                    <scope line="294"/>
                    <scope line="297"/>
                    <scope line="300">
                        <declaration name="removed" type="boolean" line="301"/>
                        <scope line="302"/>
                        <scope line="306"/>
                    </scope>
                </method>
                <javadoc line="312">
                    Registers all entries in the given directory
                      The {@code sendEvents} parameter indicates if ENTRY_CREATE events
                      should be queued when new entries are found. When initially
                      registering a directory then will always be false. When re-scanning
                      a directory then it depends on if the event is enabled or not.                    
                </javadoc>
                <method name="registerChildren" type="void" line="319">
                    <params>
                        <param name="dir" type="UnixPath"/>
                        <param name="parent" type="SolarisWatchKey"/>
                        <param name="sendEvents" type="boolean"/>
                    </params>
                    <declaration name="events" type="int" line="320"/>
                    <declaration name="stream" type="DirectoryStream&lt;Path&gt;" line="322"/>
                    <scope line="323"/>
                    <scope line="326"/>
                    <scope line="329">
                        <scope line="330">
                            <declaration name="name" type="Path" line="331"/>
                            <scope line="333"/>
                            <declaration name="object" type="long" line="336"/>
                            <scope line="337"/>
                            <scope line="340"/>
                            <declaration name="node" type="EntryNode" line="343"/>
                        </scope>
                    </scope>
                    <scope line="348"/>
                    <scope line="350">
                        <scope line="351"/>
                        <scope line="354"/>
                    </scope>
                </method>
                <javadoc line="358">
                    Update watch key&apos;s events. Where the ENTRY_MODIFY changes then we
                      need to update the events of registered children.                    
                </javadoc>
                <method name="updateEvents" type="void" line="362">
                    <params>
                        <param name="key" type="SolarisWatchKey"/>
                        <param name="events" type="Set<? extends WatchEvent.Kind<?>>"/>
                    </params>
                    <declaration name="wasModifyEnabled" type="boolean" line="363"/>
                    <declaration name="isModifyEnabled" type="boolean" line="365"/>
                    <scope line="366"/>
                    <scope line="369">
                        <declaration name="ev" type="int" line="370"/>
                        <scope line="372">
                            <declaration name="object" type="long" line="373"/>
                            <scope line="374"/>
                            <scope line="377"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="382">
                    Calls port_associate to register the given path.
                      Returns pointer to fileobj structure that is allocated for
                      the registration.                    
                </javadoc>
                <method name="registerImpl" type="long" line="387">
                    <params>
                        <param name="dir" type="UnixPath"/>
                        <param name="events" type="int"/>
                    </params>
                    <declaration name="path" type="byte[]" line="388"/>
                    <declaration name="len" type="int" line="389"/>
                    <declaration name="name" type="long" line="390"/>
                    <declaration name="object" type="long" line="393"/>
                    <scope line="396"/>
                    <scope line="399">
                        <scope line="400"/>
                    </scope>
                </method>
                <javadoc line="409">
                    Frees all resources for an file_obj object; optionally remove
                      association from port                    
                </javadoc>
                <method name="releaseObject" type="void" line="413">
                    <params>
                        <param name="object" type="long"/>
                        <param name="dissociate" type="boolean"/>
                    </params>
                    <scope line="414">
                        <scope line="415"/>
                        <scope line="418"/>
                    </scope>
                    <declaration name="name" type="long" line="421"/>
                </method>
            </class>
            <interface name="Node">
                <javadoc line="426">
                    A node with native (file_obj) resources                    
                </javadoc>
                <method name="object" type="long" line="430"/>
            </interface>
            <interface name="DirectoryNode">
                <implements interface="Node"/>
                <javadoc line="432">
                    A directory node with a map of the entries in the directory                    
                </javadoc>
                <method name="addChild" type="void" line="436"/>
                <method name="removeChild" type="void" line="437"/>
                <method name="getChild" type="EntryNode" line="438"/>
            </interface>
            <class name="EntryNode" line="440">
                <implements interface="Node"/>
                <javadoc line="440">
                    An implementation of a node that is an entry in a directory.                    
                </javadoc>
                <declaration name="object" type="long" line="444"/>
                <declaration name="name" type="Path" line="445"/>
                <declaration name="parent" type="DirectoryNode" line="446"/>
                <method name="EntryNode" type="constructor" line="447">
                    <params>
                        <param name="object" type="long"/>
                        <param name="name" type="Path"/>
                        <param name="parent" type="DirectoryNode"/>
                    </params>
                </method>
                <method name="object" type="long" line="452"/>
                <method name="name" type="Path" line="455"/>
                <method name="parent" type="DirectoryNode" line="458"/>
            </class>
            <method name="init" type="void" line="462"/>
            <method name="portCreate" type="int" line="463"/>
            <method name="portAssociate" type="void" line="464"/>
            <method name="portDissociate" type="void" line="465"/>
            <method name="portSend" type="void" line="466"/>
            <method name="portGetn" type="int" line="467"/>
            <scope line="468">
                <anonymous_class line="469">
                    <method name="run" type="Void" line="470"/>
                </anonymous_class>
            </scope>
        </class>
    </source>