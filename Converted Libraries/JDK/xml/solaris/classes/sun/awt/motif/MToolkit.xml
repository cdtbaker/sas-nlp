<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.motif">
        <import package="java.awt"/>
        <import package="java.awt.im.InputMethodHighlight"/>
        <import package="java.awt.im.spi.InputMethodDescriptor"/>
        <import package="java.awt.image"/>
        <import package="java.awt.peer"/>
        <import package="java.awt.datatransfer.Clipboard"/>
        <import package="java.awt.event"/>
        <import package="java.lang.reflect"/>
        <import package="java.lang.Math"/>
        <import package="java.io"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.util.Properties"/>
        <import package="java.util.Map"/>
        <import package="java.util.Iterator"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.AWTAutoShutdown"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.UNIXToolkit"/>
        <import package="sun.awt.GlobalCursorManager"/>
        <import package="sun.awt.datatransfer.DataTransferer"/>
        <import package="java.awt.dnd.DragSource"/>
        <import package="java.awt.dnd.DragGestureListener"/>
        <import package="java.awt.dnd.DragGestureEvent"/>
        <import package="java.awt.dnd.DragGestureRecognizer"/>
        <import package="java.awt.dnd.MouseDragGestureRecognizer"/>
        <import package="java.awt.dnd.InvalidDnDOperationException"/>
        <import package="java.awt.dnd.peer.DragSourceContextPeer"/>
        <import package="sun.awt.X11FontManager"/>
        <import package="sun.awt.X11GraphicsConfig"/>
        <import package="sun.awt.X11GraphicsEnvironment"/>
        <import package="sun.awt.XSettings"/>
        <import package="sun.print.PrintJob2D"/>
        <import package="sun.misc.PerformanceLogger"/>
        <import package="sun.misc.Unsafe"/>
        <import package="sun.security.action.GetBooleanAction"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="MToolkit" line="41">
            <extends class="UNIXToolkit"/>
            <implements interface="Runnable"/>
            <declaration name="log" type="PlatformLogger" line="42"/>
            <declaration name="dynamicLayoutSetting" type="boolean" line="43"/>
            <declaration name="loadedXSettings" type="boolean" line="44"/>
            <javadoc line="44">
                True when the x settings have been loaded.                
            </javadoc>
            <declaration name="xs" type="XSettings" line="48"/>
            <javadoc line="48">
                XSETTINGS for the default screen.
                  &lt;p&gt;
                  &lt;strong&gt;XXX:&lt;/strong&gt; see &lt;code&gt;MToolkit.parseXSettings&lt;/code&gt;
                  and &lt;code&gt;awt_xsettings_update&lt;/code&gt; in
                  &lt;samp&gt;awt_MToolkit.c&lt;/samp&gt;                
            </javadoc>
            <declaration name="config" type="X11GraphicsConfig" line="56"/>
            <declaration name="motifdnd" type="boolean" line="57"/>
            <scope line="58">
                <scope line="59"/>
                <scope line="62"/>
            </scope>
            <method name="MToolkit" type="constructor" line="67">
                <scope line="69"/>
                <scope line="72">
                    <declaration name="mainClassName" type="String" line="73"/>
                    <declaration name="trace" type="StackTraceElement" line="74"/>
                    <declaration name="bottom" type="int" line="75"/>
                    <scope line="76"/>
                    <scope line="79"/>
                    <declaration name="toolkitThread" type="Thread" line="83"/>
                    <anonymous_class line="86">
                        <method name="run" type="Void" line="87">
                            <declaration name="mainTG" type="ThreadGroup" line="88"/>
                            <declaration name="parentTG" type="ThreadGroup" line="89"/>
                            <scope line="90"/>
                            <anonymous_class line="94">
                                <method name="run" type="void" line="95"/>
                            </anonymous_class>
                            <declaration name="shutdownThread" type="Thread" line="94"/>
                        </method>
                    </anonymous_class>
                    <declaration name="a" type="PrivilegedAction&lt;Void&gt;" line="86"/>
                </scope>
            </method>
            <method name="init" type="void" line="111"/>
            <method name="run" type="void" line="112"/>
            <method name="shutdown" type="void" line="113"/>
            <method name="createButton" type="ButtonPeer" line="114">
                <params>
                    <param name="target" type="Button"/>
                </params>
            </method>
            <method name="createTextField" type="TextFieldPeer" line="117">
                <params>
                    <param name="target" type="TextField"/>
                </params>
            </method>
            <method name="createLabel" type="LabelPeer" line="120">
                <params>
                    <param name="target" type="Label"/>
                </params>
            </method>
            <method name="createList" type="ListPeer" line="123">
                <params>
                    <param name="target" type="List"/>
                </params>
            </method>
            <method name="createCheckbox" type="CheckboxPeer" line="126">
                <params>
                    <param name="target" type="Checkbox"/>
                </params>
            </method>
            <method name="createScrollbar" type="ScrollbarPeer" line="129">
                <params>
                    <param name="target" type="Scrollbar"/>
                </params>
            </method>
            <method name="createScrollPane" type="ScrollPanePeer" line="132">
                <params>
                    <param name="target" type="ScrollPane"/>
                </params>
            </method>
            <method name="createTextArea" type="TextAreaPeer" line="135">
                <params>
                    <param name="target" type="TextArea"/>
                </params>
            </method>
            <method name="createChoice" type="ChoicePeer" line="138">
                <params>
                    <param name="target" type="Choice"/>
                </params>
            </method>
            <method name="createFrame" type="FramePeer" line="141">
                <params>
                    <param name="target" type="Frame"/>
                </params>
            </method>
            <method name="createCanvas" type="CanvasPeer" line="144">
                <params>
                    <param name="target" type="Canvas"/>
                </params>
            </method>
            <method name="createPanel" type="PanelPeer" line="147">
                <params>
                    <param name="target" type="Panel"/>
                </params>
            </method>
            <method name="createWindow" type="WindowPeer" line="150">
                <params>
                    <param name="target" type="Window"/>
                </params>
            </method>
            <method name="createDialog" type="DialogPeer" line="153">
                <params>
                    <param name="target" type="Dialog"/>
                </params>
            </method>
            <method name="createFileDialog" type="FileDialogPeer" line="156">
                <params>
                    <param name="target" type="FileDialog"/>
                </params>
            </method>
            <method name="createMenuBar" type="MenuBarPeer" line="159">
                <params>
                    <param name="target" type="MenuBar"/>
                </params>
            </method>
            <method name="createMenu" type="MenuPeer" line="162">
                <params>
                    <param name="target" type="Menu"/>
                </params>
            </method>
            <method name="createPopupMenu" type="PopupMenuPeer" line="165">
                <params>
                    <param name="target" type="PopupMenu"/>
                </params>
            </method>
            <method name="createMenuItem" type="MenuItemPeer" line="168">
                <params>
                    <param name="target" type="MenuItem"/>
                </params>
            </method>
            <method name="createCheckboxMenuItem" type="CheckboxMenuItemPeer" line="171">
                <params>
                    <param name="target" type="CheckboxMenuItem"/>
                </params>
            </method>
            <method name="createKeyboardFocusManagerPeer" type="KeyboardFocusManagerPeer" line="174">
                <params>
                    <param name="manager" type="KeyboardFocusManager"/>
                </params>
            </method>
            <method name="getFontPeer" type="FontPeer" line="177">
                <params>
                    <param name="name" type="String"/>
                    <param name="style" type="int"/>
                </params>
            </method>
            <method name="setDynamicLayout" type="void" line="180">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <method name="isDynamicLayoutSet" type="boolean" line="183"/>
            <method name="isDynamicLayoutSupportedNative" type="boolean" line="186"/>
            <method name="isDynamicLayoutActive" type="boolean" line="187"/>
            <method name="isFrameStateSupported" type="boolean" line="190"/>
            <method name="createTrayIcon" type="TrayIconPeer" line="191">
                <params>
                    <param name="target" type="TrayIcon"/>
                </params>
            </method>
            <method name="createSystemTray" type="SystemTrayPeer" line="194">
                <params>
                    <param name="target" type="SystemTray"/>
                </params>
            </method>
            <method name="isTraySupported" type="boolean" line="197"/>
            <method name="makeColorModel" type="ColorModel" line="200"/>
            <declaration name="screenmodel" type="ColorModel" line="201"/>
            <method name="getStaticColorModel" type="ColorModel" line="202">
                <scope line="203"/>
            </method>
            <method name="getColorModel" type="ColorModel" line="208"/>
            <method name="getScreenResolution" type="int" line="211"/>
            <method name="getScreenInsets" type="Insets" line="212">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
            <method name="getScreenWidth" type="int" line="215"/>
            <method name="getScreenHeight" type="int" line="216"/>
            <method name="getFontMetrics" type="FontMetrics" line="217">
                <params>
                    <param name="font" type="Font"/>
                </params>
            </method>
            <method name="getPrintJob" type="PrintJob" line="220">
                <params>
                    <param name="frame" type="Frame"/>
                    <param name="doctitle" type="String"/>
                    <param name="props" type="Properties"/>
                </params>
                <scope line="221"/>
                <declaration name="printJob" type="PrintJob2D" line="224"/>
                <scope line="225"/>
            </method>
            <method name="getPrintJob" type="PrintJob" line="230">
                <params>
                    <param name="frame" type="Frame"/>
                    <param name="doctitle" type="String"/>
                    <param name="jobAttributes" type="JobAttributes"/>
                    <param name="pageAttributes" type="PageAttributes"/>
                </params>
                <scope line="231"/>
                <declaration name="printJob" type="PrintJob2D" line="234"/>
                <scope line="235"/>
            </method>
            <method name="beep" type="void" line="240"/>
            <method name="getSystemClipboard" type="Clipboard" line="241"/>
            <method name="getSystemSelection" type="Clipboard" line="244"/>
            <method name="getLockingKeyState" type="boolean" line="247">
                <params>
                    <param name="key" type="int"/>
                </params>
                <scope line="248"/>
            </method>
            <method name="getLockingKeyStateNative" type="boolean" line="253"/>
            <method name="loadSystemColors" type="void" line="254"/>
            <javadoc line="255">
                Give native peers the ability to query the native container
                  given a native component (e.g. the direct parent may be lightweight).                
            </javadoc>
            <method name="getNativeContainer" type="Container" line="259">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <method name="targetToPeer" type="Object" line="262">
                <params>
                    <param name="target" type="Object"/>
                </params>
            </method>
            <method name="targetDisposedPeer" type="void" line="265">
                <params>
                    <param name="target" type="Object"/>
                    <param name="peer" type="Object"/>
                </params>
            </method>
            <method name="createDragSourceContextPeer" type="DragSourceContextPeer" line="268">
                <params>
                    <param name="dge" type="DragGestureEvent"/>
                </params>
            </method>
            <method name="createDragGestureRecognizer" type="T" line="271">
                <params>
                    <param name="abstractRecognizerClass" type="Class<T>"/>
                    <param name="ds" type="DragSource"/>
                    <param name="c" type="Component"/>
                    <param name="srcActions" type="int"/>
                    <param name="dgl" type="DragGestureListener"/>
                </params>
            </method>
            <javadoc line="274">
                Returns a new input method adapter descriptor for native input methods.                
            </javadoc>
            <method name="getInputMethodAdapterDescriptor" type="InputMethodDescriptor" line="277"/>
            <javadoc line="280">
                Returns a style map for the input method highlight.                
            </javadoc>
            <method name="mapInputMethodHighlight" type="Map" line="283">
                <params>
                    <param name="highlight" type="InputMethodHighlight"/>
                </params>
            </method>
            <javadoc line="286">
                Returns a new custom cursor.                
            </javadoc>
            <method name="createCustomCursor" type="Cursor" line="289">
                <params>
                    <param name="cursor" type="Image"/>
                    <param name="hotSpot" type="Point"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="292">
                Returns the supported cursor size                
            </javadoc>
            <method name="getBestCursorSize" type="Dimension" line="295">
                <params>
                    <param name="preferredWidth" type="int"/>
                    <param name="preferredHeight" type="int"/>
                </params>
            </method>
            <method name="getMaximumCursorColors" type="int" line="298"/>
            <declaration name="prefix" type="String" line="301"/>
            <declaration name="postfix" type="String" line="302"/>
            <declaration name="dndPrefix" type="String" line="303"/>
            <method name="lazilyLoadDesktopProperty" type="Object" line="304">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="305">
                    <declaration name="cursorName" type="String" line="306"/>
                    <scope line="307"/>
                    <scope line="310"/>
                </scope>
                <scope line="315"/>
                <scope line="318">
                    <scope line="320"/>
                </scope>
            </method>
            <method name="lazilyLoadDynamicLayoutSupportedProperty" type="Boolean" line="328">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="nativeDynamic" type="boolean" line="329"/>
                <scope line="330"/>
            </method>
            <method name="getMulticlickTime" type="int" line="335"/>
            <method name="initializeDesktopProperties" type="void" line="336">
                <scope line="340"/>
            </method>
            <method name="createRobot" type="RobotPeer" line="345">
                <params>
                    <param name="target" type="Robot"/>
                    <param name="screen" type="GraphicsDevice"/>
                </params>
            </method>
            <method name="useMotifDnD" type="boolean" line="348"/>
            <method name="loadXSettings" type="void" line="351"/>
            <javadoc line="351">
                Triggers a callback to parseXSettings with the x settings values
                  from the window server. Note that this will NOT call
                  parseXSettings if we are not running on a GNOME desktop.                
            </javadoc>
            <javadoc line="357">
                Callback from the native side indicating some, or all, of the
                  desktop properties have changed and need to be reloaded.
                  &lt;code&gt;data&lt;/code&gt; is the byte array directly from the x server and
                  may be in little endian format.
                  &lt;p&gt;
                  NB: This could be called from any thread if triggered by
                  &lt;code&gt;loadXSettings&lt;/code&gt;.  It is called from the toolkit
                  thread if triggered by an XSETTINGS change.                
            </javadoc>
            <method name="parseXSettings" type="void" line="367">
                <params>
                    <param name="screen_XXX_ignored" type="int"/>
                    <param name="data" type="byte[]"/>
                </params>
                <scope line="368"/>
                <declaration name="updatedSettings" type="Map" line="371"/>
                <scope line="372"/>
                <declaration name="i" type="Iterator" line="375"/>
                <scope line="376">
                    <declaration name="e" type="Map.Entry" line="377"/>
                    <declaration name="name" type="String" line="378"/>
                </scope>
                <declaration name="dragThreshold" type="Integer" line="383"/>
                <scope line="384"/>
                <scope line="387"/>
            </method>
            <method name="needsXEmbedImpl" type="boolean" line="391"/>
            <method name="isModalityTypeSupported" type="boolean" line="394">
                <params>
                    <param name="modalityType" type="Dialog.ModalityType"/>
                </params>
            </method>
            <method name="isModalExclusionTypeSupported" type="boolean" line="397">
                <params>
                    <param name="exclusionType" type="Dialog.ModalExclusionType"/>
                </params>
            </method>
            <method name="isSyncUpdated" type="boolean" line="400"/>
            <method name="isSyncFailed" type="boolean" line="401"/>
            <method name="getEventNumber" type="int" line="402"/>
            <method name="updateSyncSelection" type="void" line="403"/>
            <declaration name="WORKAROUND_SLEEP" type="long" line="404"/>
            <javadoc line="405">
                @inheritDoc                
            </javadoc>
            <method name="syncNativeQueue" type="boolean" line="408">
                <params>
                    <param name="timeout" type="long"/>
                </params>
                <scope line="410">
                    <declaration name="event_number" type="long" line="411"/>
                    <declaration name="start" type="long" line="413"/>
                    <scope line="414">
                        <scope line="415"/>
                        <scope line="418"/>
                        <scope line="421"/>
                    </scope>
                    <scope line="425">
                        <scope line="427"/>
                        <scope line="430"/>
                        <scope line="433"/>
                    </scope>
                </scope>
                <scope line="439"/>
            </method>
            <method name="grab" type="void" line="443">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <declaration name="peer" type="WindowPeer" line="444"/>
                <scope line="445"/>
            </method>
            <method name="ungrab" type="void" line="449">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <declaration name="peer" type="WindowPeer" line="450"/>
                <scope line="451"/>
            </method>
            <method name="nativeGrab" type="void" line="455"/>
            <method name="nativeUnGrab" type="void" line="456"/>
            <method name="isDesktopSupported" type="boolean" line="457"/>
            <method name="createDesktopPeer" type="DesktopPeer" line="460">
                <params>
                    <param name="target" type="Desktop"/>
                </params>
            </method>
            <declaration name="UNDETERMINED_WM" type="int" line="463"/>
            <method name="getWMID" type="int" line="464">
                <declaration name="wmName" type="String" line="465"/>
                <scope line="466"/>
                <scope line="469"/>
                <scope line="472"/>
                <scope line="475"/>
                <scope line="478"/>
                <scope line="481"/>
                <scope line="484"/>
                <scope line="487"/>
                <scope line="490"/>
                <scope line="493"/>
                <scope line="496"/>
                <scope line="499"/>
            </method>
            <method name="getWMName" type="String" line="504"/>
        </class>
    </source>