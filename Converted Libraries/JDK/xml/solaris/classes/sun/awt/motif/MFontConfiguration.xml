<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.motif">
        <import package="java.awt.Font"/>
        <import package="java.io.BufferedReader"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Properties"/>
        <import package="java.util.Scanner"/>
        <import package="sun.awt.FontConfiguration"/>
        <import package="sun.awt.X11FontManager"/>
        <import package="sun.awt.X11GraphicsEnvironment"/>
        <import package="sun.font.FontManager"/>
        <import package="sun.font.SunFontManager"/>
        <import package="sun.font.FontManagerFactory"/>
        <import package="sun.font.FontUtilities"/>
        <import package="sun.java2d.SunGraphicsEnvironment"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="MFontConfiguration" line="22">
            <extends class="FontConfiguration"/>
            <declaration name="fontConfig" type="FontConfiguration" line="23"/>
            <declaration name="logger" type="PlatformLogger" line="24"/>
            <method name="MFontConfiguration" type="constructor" line="25">
                <params>
                    <param name="fm" type="SunFontManager"/>
                </params>
                <scope line="27"/>
            </method>
            <method name="MFontConfiguration" type="constructor" line="32">
                <params>
                    <param name="fm" type="SunFontManager"/>
                    <param name="preferLocaleFonts" type="boolean"/>
                    <param name="preferPropFonts" type="boolean"/>
                </params>
                <scope line="34"/>
            </method>
            <method name="initReorderMap" type="void" line="39">
                <scope line="41"/>
                <scope line="44"/>
            </method>
            <method name="initReorderMapForSolaris" type="void" line="48">
                <scope line="55"/>
                <scope line="58"/>
                <scope line="64"/>
                <scope line="67"/>
            </method>
            <method name="initReorderMapForLinux" type="void" line="88">
                <scope line="98"/>
                <scope line="101"/>
            </method>
            <javadoc line="105">
                Sets the OS name and version from environment information.                
            </javadoc>
            <method name="setOsNameAndVersion" type="void" line="108">
                <scope line="110"/>
                <scope line="113">
                    <scope line="114">
                        <declaration name="f" type="File" line="115"/>
                        <scope line="116"/>
                        <scope line="120"/>
                        <scope line="124"/>
                        <scope line="128"/>
                        <scope line="132">
                            <declaration name="props" type="Properties" line="133"/>
                        </scope>
                    </scope>
                    <scope line="139"/>
                </scope>
            </method>
            <javadoc line="144">
                Gets the OS version string from a Linux release-specific file.                
            </javadoc>
            <method name="getVersionString" type="String" line="147">
                <params>
                    <param name="f" type="File"/>
                </params>
                <scope line="148">
                    <declaration name="sc" type="Scanner" line="149"/>
                </scope>
                <scope line="152"/>
            </method>
            <declaration name="fontsDirPrefix" type="String" line="156"/>
            <method name="mapFileName" type="String" line="157">
                <params>
                    <param name="fileName" type="String"/>
                </params>
                <scope line="158"/>
            </method>
            <method name="getFallbackFamilyName" type="String" line="163">
                <params>
                    <param name="fontName" type="String"/>
                    <param name="defaultFallback" type="String"/>
                </params>
                <declaration name="compatibilityName" type="String" line="164"/>
                <scope line="165"/>
            </method>
            <method name="getEncoding" type="String" line="170">
                <params>
                    <param name="awtFontName" type="String"/>
                    <param name="characterSubsetName" type="String"/>
                </params>
                <declaration name="beginIndex" type="int" line="171"/>
                <declaration name="fieldNum" type="int" line="172"/>
                <scope line="173"/>
                <scope line="176"/>
                <declaration name="xlfdEncoding" type="String" line="179"/>
                <scope line="180">
                    <scope line="181"/>
                    <scope line="184"/>
                </scope>
                <declaration name="encoding" type="String" line="188"/>
                <scope line="189"/>
            </method>
            <method name="getDefaultFontCharset" type="Charset" line="194">
                <params>
                    <param name="fontName" type="String"/>
                </params>
            </method>
            <declaration name="motifFontSets" type="String[][]" line="197"/>
            <method name="getMotifFontSet" type="String" line="198">
                <params>
                    <param name="fontName" type="String"/>
                    <param name="style" type="int"/>
                </params>
            </method>
            <method name="getMotifFontSet" type="String" line="205">
                <params>
                    <param name="fontIndex" type="int"/>
                    <param name="styleIndex" type="int"/>
                </params>
                <declaration name="fontSet" type="String" line="206"/>
                <scope line="207"/>
            </method>
            <method name="buildMotifFontSet" type="String" line="213">
                <params>
                    <param name="fontIndex" type="int"/>
                    <param name="styleIndex" type="int"/>
                </params>
                <declaration name="buffer" type="StringBuilder" line="214"/>
                <declaration name="scripts" type="short[]" line="215"/>
                <scope line="216">
                    <declaration name="nameID" type="short" line="217"/>
                    <scope line="218"/>
                    <declaration name="name" type="String" line="221"/>
                    <scope line="222"/>
                    <scope line="225"/>
                </scope>
            </method>
            <method name="getFaceNameFromComponentFontName" type="String" line="232">
                <params>
                    <param name="componentFontName" type="String"/>
                </params>
            </method>
            <method name="getFileNameFromComponentFontName" type="String" line="235">
                <params>
                    <param name="componentFontName" type="String"/>
                </params>
                <declaration name="fileName" type="String" line="236"/>
                <scope line="237"/>
            </method>
            <javadoc line="242">
                Get default font for Motif widgets to use, preventing them from
                  wasting time accessing inappropriate X resources.  This is called
                  only from native code.
                  This is part of a Motif specific performance enhancement.  By
                  default, when Motif widgets are created and initialized, Motif will
                  set up default fonts for the widgets, which we ALWAYS override.
                  This set up includes finding the default font in the widget&apos;s X
                  resources and fairly expensive requests of the X server to identify
                  the specific font or fontset.  We avoid all of this overhead by
                  providing a well known font to use at the creation of widgets, where
                  possible.
                  The X11 fonts are specified by XLFD strings which have %d as a
                  marker to indicate where the fontsize should be substituted.  [The
                  libc function sprintf() is used to replace it.]  The value 140
                  specifies a font size of 14 points.                
            </javadoc>
            <method name="getDefaultMotifFontSet" type="String" line="259">
                <declaration name="font" type="String" line="260"/>
                <scope line="261">
                    <declaration name="i" type="int" line="262"/>
                    <scope line="263"/>
                </scope>
            </method>
            <method name="getAWTFontPathSet" type="HashSet<String>" line="269">
                <declaration name="fontDirs" type="HashSet&lt;String&gt;" line="270"/>
                <declaration name="scripts" type="short[]" line="271"/>
                <scope line="272">
                    <declaration name="path" type="String" line="273"/>
                    <scope line="274">
                        <declaration name="start" type="int" line="275"/>
                        <declaration name="colon" type="int" line="276"/>
                        <scope line="277"/>
                    </scope>
                </scope>
            </method>
            <declaration name="encodingMap" type="HashMap" line="287"/>
            <method name="initTables" type="void" line="288">
                <scope line="300"/>
                <scope line="303"/>
            </method>
        </class>
    </source>