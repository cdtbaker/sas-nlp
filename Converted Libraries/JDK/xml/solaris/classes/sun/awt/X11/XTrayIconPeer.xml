<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.peer.TrayIconPeer"/>
        <import package="sun.awt"/>
        <import package="java.awt.image"/>
        <import package="java.text.BreakIterator"/>
        <import package="java.util.concurrent.ArrayBlockingQueue"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="XTrayIconPeer" line="40">
            <comment line="336">
                It&apos;s synchronized with disposal by EDT.                
            </comment>
            <comment line="361">
                ******************************************************************                
            </comment>
            <comment line="362">
                ******************************************************************                
            </comment>
            <comment line="390">
                Private method for testing purposes.                
            </comment>
            <comment line="487">
                ***************************************                
            </comment>
            <comment line="488">
                Special embedded frame for tray icon                
            </comment>
            <comment line="489">
                ***************************************                
            </comment>
            <comment line="513">
                ***************************************                
            </comment>
            <comment line="514">
                Classes for painting an image on canvas                
            </comment>
            <comment line="515">
                ***************************************                
            </comment>
            <implements interface="TrayIconPeer"/>
            <implements interface="InfoWindow.Balloon.LiveArguments"/>
            <implements interface="InfoWindow.Tooltip.LiveArguments"/>
            <declaration name="ctrLog" type="PlatformLogger" line="44"/>
            <declaration name="target" type="TrayIcon" line="46"/>
            <declaration name="eventProxy" type="TrayIconEventProxy" line="47"/>
            <declaration name="eframe" type="XTrayIconEmbeddedFrame" line="48"/>
            <declaration name="canvas" type="TrayIconCanvas" line="49"/>
            <declaration name="balloon" type="InfoWindow.Balloon" line="50"/>
            <declaration name="tooltip" type="InfoWindow.Tooltip" line="51"/>
            <declaration name="popup" type="PopupMenu" line="52"/>
            <declaration name="tooltipString" type="String" line="53"/>
            <declaration name="isTrayIconDisplayed" type="boolean" line="54"/>
            <declaration name="eframeParentID" type="long" line="55"/>
            <declaration name="parentXED" type="XEventDispatcher" line="56"/>
            <declaration name="dummyXED" type="XEventDispatcher" line="58"/>
            <anonymous_class line="58">
                <method name="dispatchEvent" type="void" line="59">
                    <params>
                        <param name="ev" type="XEvent"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="isDisposed" type="boolean" line="62"/>
            <declaration name="isParentWindowLocated" type="boolean" line="64"/>
            <declaration name="old_x" type="int" line="65"/>
            <declaration name="ex_width" type="int" line="66"/>
            <declaration name="TRAY_ICON_WIDTH" type="int" line="68"/>
            <declaration name="TRAY_ICON_HEIGHT" type="int" line="69"/>
            <method name="XTrayIconPeer" type="constructor" line="73">
                <params>
                    <param name="target" type="TrayIcon"/>
                </params>
                <comment line="85">
                    Fix for 6317038: as EmbeddedFrame is instance of Frame, it is blocked                    
                </comment>
                <comment line="86">
                    by modal dialogs, but in the case of TrayIcon it shouldn&apos;t. So we                    
                </comment>
                <comment line="87">
                    set ModalExclusion property on it.                    
                </comment>
                <comment line="97">
                    We don&apos;t like to leave it &apos;null&apos;.                    
                </comment>
                <comment line="101">
                    It&apos;s executed under AWTLock.                    
                </comment>
                <comment line="113">
                    A workaround for Gnome/Metacity (it doesn&apos;t affect the behaviour on KDE).                    
                </comment>
                <comment line="114">
                    On Metacity the EmbeddedFrame&apos;s parent window bounds are larger                    
                </comment>
                <comment line="115">
                    than TrayIcon size required (that is we need a square but a rectangle                    
                </comment>
                <comment line="116">
                    is provided by the Panel Notification Area). The parent&apos;s background color                    
                </comment>
                <comment line="117">
                    differs from the Panel&apos;s one. To hide the background we resize parent                    
                </comment>
                <comment line="118">
                    window so that it fits the EmbeddedFrame.                    
                </comment>
                <comment line="119">
                    However due to resizing the parent window it loses centering in the Panel.                    
                </comment>
                <comment line="120">
                    We center it when discovering that some of its side is of size greater                    
                </comment>
                <comment line="121">
                    than the fixed value. Centering is being done by &quot;X&quot; (when the parent&apos;s width                    
                </comment>
                <comment line="122">
                    is greater) and by &quot;Y&quot; (when the parent&apos;s height is greater).                    
                </comment>
                <comment line="124">
                    Actually we need this workaround until we could detect taskbar color.                    
                </comment>
                <comment line="128">
                    If both the height and the width differ from the fixed size then WM                    
                </comment>
                <comment line="129">
                    must level at least one side to the fixed size. For some reason it may take                    
                </comment>
                <comment line="130">
                    a few hops (even after reparenting) and we have to skip the intermediate ones.                    
                </comment>
                <comment line="162">
                    If moving by both &quot;X&quot; and &quot;Y&quot;.                    
                </comment>
                <comment line="163">
                    When some tray icon gets removed from the tray, a Java icon may be repositioned.                    
                </comment>
                <comment line="164">
                    In this case the parent window also lose centering. We have to restore it.                    
                </comment>
                <comment line="195">
                    It&apos;s executed under AWTLock.                    
                </comment>
                <comment line="208">
                    most likely Notification Area was removed                    
                </comment>
                <comment line="229">
                    throws AWTException                    
                </comment>
                <comment line="231">
                    Wait till the EmbeddedFrame is reparented                    
                </comment>
                <comment line="250">
                    This is unlikely to happen.                    
                </comment>
                <anonymous_class line="88">
                    <method name="run" type="Object" line="89"/>
                </anonymous_class>
                <scope line="96"/>
                <scope line="99">
                    <anonymous_class line="100">
                        <method name="dispatchEvent" type="void" line="102">
                            <params>
                                <param name="ev" type="XEvent"/>
                            </params>
                            <comment line="113">
                                A workaround for Gnome/Metacity (it doesn&apos;t affect the behaviour on KDE).                                
                            </comment>
                            <comment line="114">
                                On Metacity the EmbeddedFrame&apos;s parent window bounds are larger                                
                            </comment>
                            <comment line="115">
                                than TrayIcon size required (that is we need a square but a rectangle                                
                            </comment>
                            <comment line="116">
                                is provided by the Panel Notification Area). The parent&apos;s background color                                
                            </comment>
                            <comment line="117">
                                differs from the Panel&apos;s one. To hide the background we resize parent                                
                            </comment>
                            <comment line="118">
                                window so that it fits the EmbeddedFrame.                                
                            </comment>
                            <comment line="119">
                                However due to resizing the parent window it loses centering in the Panel.                                
                            </comment>
                            <comment line="120">
                                We center it when discovering that some of its side is of size greater                                
                            </comment>
                            <comment line="121">
                                than the fixed value. Centering is being done by &quot;X&quot; (when the parent&apos;s width                                
                            </comment>
                            <comment line="122">
                                is greater) and by &quot;Y&quot; (when the parent&apos;s height is greater).                                
                            </comment>
                            <comment line="124">
                                Actually we need this workaround until we could detect taskbar color.                                
                            </comment>
                            <comment line="128">
                                If both the height and the width differ from the fixed size then WM                                
                            </comment>
                            <comment line="129">
                                must level at least one side to the fixed size. For some reason it may take                                
                            </comment>
                            <comment line="130">
                                a few hops (even after reparenting) and we have to skip the intermediate ones.                                
                            </comment>
                            <comment line="162">
                                If moving by both &quot;X&quot; and &quot;Y&quot;.                                
                            </comment>
                            <comment line="163">
                                When some tray icon gets removed from the tray, a Java icon may be repositioned.                                
                            </comment>
                            <comment line="164">
                                In this case the parent window also lose centering. We have to restore it.                                
                            </comment>
                            <scope line="103"/>
                            <declaration name="ce" type="XConfigureEvent" line="107"/>
                            <scope line="126"/>
                            <scope line="135"/>
                            <scope line="148"/>
                            <scope line="161">
                                <scope line="166"/>
                                <scope line="175"/>
                                <scope line="183"/>
                            </scope>
                        </method>
                    </anonymous_class>
                </scope>
                <anonymous_class line="194">
                    <declaration name="xtiPeer" type="XTrayIconPeer" line="196"/>
                    <method name="dispatchEvent" type="void" line="198">
                        <params>
                            <param name="ev" type="XEvent"/>
                        </params>
                        <comment line="208">
                            most likely Notification Area was removed                            
                        </comment>
                        <scope line="199"/>
                        <declaration name="re" type="XReparentEvent" line="203"/>
                        <scope line="206">
                            <scope line="208">
                                <anonymous_class line="209">
                                    <method name="run" type="void" line="210"/>
                                </anonymous_class>
                            </scope>
                        </scope>
                        <scope line="218"/>
                    </method>
                </anonymous_class>
                <declaration name="start" type="long" line="232"/>
                <declaration name="PERIOD" type="long" line="233"/>
                <scope line="235">
                    <scope line="236">
                        <scope line="237"/>
                        <scope line="239"/>
                        <scope line="242"/>
                    </scope>
                </scope>
                <scope line="246"/>
                <scope line="253"/>
            </method>
            <method name="dispose" type="void" line="266">
                <scope line="267"/>
                <scope line="269">
                    <scope line="270">
                        <anonymous_class line="271">
                            <method name="run" type="void" line="272"/>
                        </anonymous_class>
                    </scope>
                    <scope line="276"/>
                    <scope line="277"/>
                </scope>
            </method>
            <method name="disposeOnEDT" type="void" line="281">
                <comment line="282">
                    All actions that is to be synchronized with disposal                    
                </comment>
                <comment line="283">
                    should be executed either under AWTLock, or on EDT.                    
                </comment>
                <comment line="284">
                    isDisposed value must be checked.                    
                </comment>
            </method>
            <method name="suppressWarningString" type="void" line="297">
                <params>
                    <param name="w" type="Window"/>
                </params>
            </method>
            <method name="setToolTip" type="void" line="301">
                <params>
                    <param name="tooltip" type="String"/>
                </params>
            </method>
            <method name="getTooltipString" type="String" line="305"/>
            <method name="updateImage" type="void" line="309">
                <anonymous_class line="310">
                    <method name="run" type="void" line="311"/>
                </anonymous_class>
                <declaration name="r" type="Runnable" line="310"/>
                <scope line="316"/>
                <scope line="318"/>
            </method>
            <method name="displayMessage" type="void" line="323">
                <params>
                    <param name="caption" type="String"/>
                    <param name="text" type="String"/>
                    <param name="messageType" type="String"/>
                </params>
                <comment line="327">
                    Check if the tray icon is in the bounds of a screen.                    
                </comment>
                <declaration name="loc" type="Point" line="324"/>
                <declaration name="screen" type="Rectangle" line="325"/>
                <scope line="330"/>
            </method>
            <method name="showPopupMenu" type="void" line="336">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="newPopup" type="PopupMenu" line="342"/>
                <scope line="343">
                    <scope line="344"/>
                    <scope line="347"/>
                </scope>
                <scope line="353">
                    <declaration name="loc" type="Point" line="354"/>
                </scope>
            </method>
            <method name="addXED" type="void" line="364">
                <params>
                    <param name="window" type="long"/>
                    <param name="xed" type="XEventDispatcher"/>
                    <param name="mask" type="long"/>
                </params>
                <scope line="365"/>
                <scope line="369"/>
                <scope line="371"/>
            </method>
            <method name="removeXED" type="void" line="377">
                <params>
                    <param name="window" type="long"/>
                    <param name="xed" type="XEventDispatcher"/>
                </params>
                <scope line="378"/>
                <scope line="382"/>
                <scope line="384"/>
            </method>
            <method name="getLocationOnScreen" type="Point" line="390"/>
            <method name="getBounds" type="Rectangle" line="394">
                <declaration name="loc" type="Point" line="395"/>
            </method>
            <method name="addListeners" type="void" line="399"/>
            <method name="getWindow" type="long" line="404"/>
            <method name="isDisposed" type="boolean" line="408"/>
            <method name="getActionCommand" type="String" line="412"/>
            <class name="TrayIconEventProxy" line="416">
                <comment line="504">
                    embedded frame for tray icon shouldn&apos;t be disposed by anyone except tray icon                    
                </comment>
                <comment line="526">
                    Invoke on EDT.                    
                </comment>
                <comment line="549">
                    Invoke on EDT.                    
                </comment>
                <comment line="558">
                    Invoke on EDT.                    
                </comment>
                <comment line="576">
                    Invoke on EDT.                    
                </comment>
                <implements interface="MouseListener"/>
                <implements interface="MouseMotionListener"/>
                <declaration name="xtiPeer" type="XTrayIconPeer" line="417"/>
                <method name="TrayIconEventProxy" type="constructor" line="419">
                    <params>
                        <param name="xtiPeer" type="XTrayIconPeer"/>
                    </params>
                </method>
                <method name="handleEvent" type="void" line="423">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <comment line="424">
                        prevent DRAG events from being posted with TrayIcon source(CR 6565779)                        
                    </comment>
                    <comment line="429">
                        Event handling is synchronized with disposal by EDT.                        
                    </comment>
                    <comment line="442">
                        This is a hack in order to set non-Component source to MouseEvent                        
                    </comment>
                    <comment line="443">
                        instance.                        
                    </comment>
                    <comment line="444">
                        In some cases this could lead to unpredictable result (e.g. when                        
                    </comment>
                    <comment line="445">
                        other class tries to cast source field to Component).                        
                    </comment>
                    <comment line="446">
                        We already filter DRAG events out (CR 6565779).                        
                    </comment>
                    <scope line="425"/>
                    <scope line="430"/>
                    <declaration name="coord" type="Point" line="433"/>
                    <scope line="437"/>
                </method>
                <method name="mouseClicked" type="void" line="450">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="453">
                        <declaration name="aev" type="ActionEvent" line="454"/>
                    </scope>
                    <scope line="459"/>
                </method>
                <method name="mouseEntered" type="void" line="464">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseExited" type="void" line="468">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mousePressed" type="void" line="472">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseReleased" type="void" line="475">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseDragged" type="void" line="478">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseMoved" type="void" line="481">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
            </class>
            <class name="XTrayIconEmbeddedFrame" line="490">
                <extends class="XEmbeddedFrame"/>
                <comment line="504">
                    embedded frame for tray icon shouldn&apos;t be disposed by anyone except tray icon                    
                </comment>
                <comment line="526">
                    Invoke on EDT.                    
                </comment>
                <comment line="549">
                    Invoke on EDT.                    
                </comment>
                <comment line="558">
                    Invoke on EDT.                    
                </comment>
                <comment line="576">
                    Invoke on EDT.                    
                </comment>
                <method name="XTrayIconEmbeddedFrame" type="constructor" line="491"/>
                <method name="isUndecorated" type="boolean" line="495"/>
                <method name="isResizable" type="boolean" line="499"/>
                <method name="dispose" type="void" line="504"/>
                <method name="realDispose" type="void" line="507"/>
            </class>
            <class name="TrayIconCanvas" line="516">
                <extends class="IconCanvas"/>
                <comment line="504">
                    embedded frame for tray icon shouldn&apos;t be disposed by anyone except tray icon                    
                </comment>
                <comment line="526">
                    Invoke on EDT.                    
                </comment>
                <comment line="549">
                    Invoke on EDT.                    
                </comment>
                <comment line="558">
                    Invoke on EDT.                    
                </comment>
                <comment line="576">
                    Invoke on EDT.                    
                </comment>
                <declaration name="target" type="TrayIcon" line="517"/>
                <declaration name="autosize" type="boolean" line="518"/>
                <method name="TrayIconCanvas" type="constructor" line="520">
                    <params>
                        <param name="target" type="TrayIcon"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                    </params>
                </method>
                <method name="repaintImage" type="void" line="526">
                    <params>
                        <param name="doClear" type="boolean"/>
                    </params>
                    <declaration name="old_autosize" type="boolean" line="527"/>
                </method>
            </class>
            <class name="IconCanvas" line="537">
                <extends class="Canvas"/>
                <comment line="504">
                    embedded frame for tray icon shouldn&apos;t be disposed by anyone except tray icon                    
                </comment>
                <comment line="526">
                    Invoke on EDT.                    
                </comment>
                <comment line="549">
                    Invoke on EDT.                    
                </comment>
                <comment line="558">
                    Invoke on EDT.                    
                </comment>
                <comment line="576">
                    Invoke on EDT.                    
                </comment>
                <declaration name="image" type="Image" line="538"/>
                <declaration name="observer" type="IconObserver" line="539"/>
                <declaration name="width" type="int" line="540"/>
                <declaration name="curW" type="int" line="541"/>
                <method name="IconCanvas" type="constructor" line="543">
                    <params>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                    </params>
                </method>
                <method name="updateImage" type="void" line="549">
                    <params>
                        <param name="image" type="Image"/>
                    </params>
                    <scope line="551"/>
                </method>
                <method name="repaintImage" type="void" line="558">
                    <params>
                        <param name="doClear" type="boolean"/>
                    </params>
                    <declaration name="g" type="Graphics" line="559"/>
                    <scope line="560">
                        <scope line="561">
                            <scope line="562">
                                <scope line="563"/>
                                <scope line="565"/>
                            </scope>
                        </scope>
                        <scope line="569"/>
                    </scope>
                </method>
                <method name="paint" type="void" line="576">
                    <params>
                        <param name="g" type="Graphics"/>
                    </params>
                    <scope line="577">
                        <declaration name="bufImage" type="BufferedImage" line="578"/>
                        <declaration name="gr" type="Graphics2D" line="579"/>
                        <scope line="580">
                            <scope line="581"/>
                            <scope line="588"/>
                        </scope>
                    </scope>
                </method>
                <class name="IconObserver" line="595">
                    <implements interface="ImageObserver"/>
                    <method name="imageUpdate" type="boolean" line="596">
                        <params>
                            <param name="image" type="Image"/>
                            <param name="flags" type="int"/>
                            <param name="x" type="int"/>
                            <param name="y" type="int"/>
                            <param name="width" type="int"/>
                            <param name="height" type="int"/>
                        </params>
                        <comment line="597">
                            if the image has been changed                            
                        </comment>
                        <scope line="599"/>
                        <scope line="604">
                            <anonymous_class line="605">
                                <method name="run" type="void" line="606"/>
                            </anonymous_class>
                        </scope>
                    </method>
                </class>
            </class>
        </class>
    </source>