<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.X11GraphicsConfig"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="XScrollbar" line="8">
            <javadoc line="8">
                A simple vertical scroll bar.                
            </javadoc>
            <declaration name="log" type="PlatformLogger" line="12"/>
            <declaration name="scroller" type="XScrollRepeater" line="13"/>
            <javadoc line="13">
                The thread that asynchronously tells the scrollbar to scroll.                
                <see>
                    #startScrolling                    
                </see>
            </javadoc>
            <declaration name="i_scroller" type="XScrollRepeater" line="18"/>
            <declaration name="MIN_THUMB_H" type="int" line="19"/>
            <declaration name="ARROW_IND" type="int" line="20"/>
            <declaration name="sb" type="XScrollbarClient" line="21"/>
            <declaration name="val" type="int" line="22"/>
            <declaration name="min" type="int" line="23"/>
            <declaration name="max" type="int" line="24"/>
            <declaration name="vis" type="int" line="25"/>
            <declaration name="line" type="int" line="26"/>
            <declaration name="page" type="int" line="27"/>
            <declaration name="needsRepaint" type="boolean" line="28"/>
            <declaration name="pressed" type="boolean" line="29"/>
            <declaration name="dragging" type="boolean" line="30"/>
            <declaration name="firstArrow" type="Polygon" line="31"/>
            <declaration name="width" type="int" line="32"/>
            <declaration name="barWidth" type="int" line="33"/>
            <declaration name="arrowArea" type="int" line="34"/>
            <declaration name="alignment" type="int" line="35"/>
            <declaration name="ALIGNMENT_VERTICAL" type="int" line="36"/>
            <declaration name="mode" type="int" line="37"/>
            <declaration name="thumbOffset" type="Point" line="38"/>
            <declaration name="prevThumb" type="Rectangle" line="39"/>
            <method name="XScrollbar" type="constructor" line="40">
                <params>
                    <param name="alignment" type="int"/>
                    <param name="sb" type="XScrollbarClient"/>
                </params>
            </method>
            <method name="needsRepaint" type="boolean" line="44"/>
            <method name="notifyValue" type="void" line="47">
                <params>
                    <param name="v" type="int"/>
                </params>
            </method>
            <method name="notifyValue" type="void" line="50">
                <params>
                    <param name="v" type="int"/>
                    <param name="isAdjusting" type="boolean"/>
                </params>
                <scope line="51"/>
                <scope line="54"/>
                <declaration name="value" type="int" line="57"/>
                <declaration name="mode" type="int" line="58"/>
                <scope line="59">
                    <anonymous_class line="60">
                        <method name="run" type="void" line="61"/>
                    </anonymous_class>
                </scope>
            </method>
            <method name="rebuildArrows" type="void" line="68"/>
            <method name="setSize" type="void" line="69">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="74">
                Creates oriented directed arrow                
            </javadoc>
            <method name="createArrowShape" type="Polygon" line="77">
                <params>
                    <param name="vertical" type="boolean"/>
                    <param name="up" type="boolean"/>
                </params>
                <declaration name="arrow" type="Polygon" line="78"/>
                <scope line="79">
                    <declaration name="x" type="int" line="80"/>
                    <declaration name="y1" type="int" line="81"/>
                    <declaration name="y2" type="int" line="82"/>
                </scope>
                <scope line="88">
                    <declaration name="y" type="int" line="89"/>
                    <declaration name="x1" type="int" line="90"/>
                    <declaration name="x2" type="int" line="91"/>
                </scope>
            </method>
            <method name="getThumbArea" type="Rectangle" line="99"/>
            <javadoc line="99">
                Gets the area of the scroll track                
            </javadoc>
            <javadoc line="103">
                paint the scrollbar                
                <param>
                    g the graphics context to paint into                    
                </param>
                <param>
                    colors the colors to use when painting the scrollbar                    
                </param>
                <param>
                    width the width of the scrollbar                    
                </param>
                <param>
                    height the height of the scrollbar                    
                </param>
                <param>
                    paintAll paint the whole scrollbar if true, just the thumb is false                    
                </param>
            </javadoc>
            <method name="paint" type="void" line="111">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="colors" type="Color"/>
                    <param name="paintAll" type="boolean"/>
                </params>
                <declaration name="useBufferedImage" type="boolean" line="113"/>
                <declaration name="g2" type="Graphics2D" line="114"/>
                <declaration name="buffer" type="BufferedImage" line="115"/>
                <scope line="116">
                    <declaration name="graphicsConfig" type="X11GraphicsConfig" line="117"/>
                </scope>
                <scope line="122"/>
                <scope line="125">
                    <declaration name="thumbRect" type="Rectangle" line="126"/>
                    <declaration name="back" type="Color" line="128"/>
                    <declaration name="selectColor" type="Color" line="129"/>
                    <declaration name="darkShadow" type="Color" line="130"/>
                    <declaration name="lightShadow" type="Color" line="131"/>
                    <scope line="133"/>
                    <scope line="136"/>
                    <scope line="139">
                        <scope line="141"/>
                        <scope line="145"/>
                    </scope>
                    <scope line="156">
                        <declaration name="thumbArea" type="Rectangle" line="158"/>
                    </scope>
                    <scope line="161"/>
                </scope>
                <scope line="173">
                    <scope line="174"/>
                </scope>
                <scope line="178"/>
                <scope line="182"/>
                <scope line="185"/>
            </method>
            <method name="paintArrows" type="void" line="189">
                <params>
                    <param name="g" type="Graphics2D"/>
                    <param name="background" type="Color"/>
                    <param name="darkShadow" type="Color"/>
                    <param name="lightShadow" type="Color"/>
                </params>
                <scope line="191"/>
                <scope line="199"/>
                <scope line="208"/>
                <scope line="216"/>
            </method>
            <javadoc line="225">
                Tell the scroller to start scrolling.                
            </javadoc>
            <method name="startScrolling" type="void" line="228">
                <scope line="231"/>
                <scope line="234"/>
            </method>
            <javadoc line="239">
                Tell the instance scroller to start scrolling.
                  See 6243382 for more information                
            </javadoc>
            <method name="startScrollingInstance" type="void" line="243"/>
            <javadoc line="249">
                Tell the instance scroller to stop scrolling.
                  See 6243382 for more information                
            </javadoc>
            <method name="stopScrollingInstance" type="void" line="253"/>
            <javadoc line="257">
                The set method for mode property.
                  See 6243382 for more information                
            </javadoc>
            <method name="setMode" type="void" line="261">
                <params>
                    <param name="mode" type="int"/>
                </params>
            </method>
            <javadoc line="264">
                Scroll one unit.                
                <see>
                    notifyValue                    
                </see>
            </javadoc>
            <method name="scroll" type="void" line="268"/>
            <method name="isInArrow" type="boolean" line="285">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="coord" type="int" line="286"/>
                <declaration name="arrAreaH" type="int" line="287"/>
                <scope line="288"/>
            </method>
            <javadoc line="293">
                Is x,y in the scroll thumb?
                  If we ever cache the thumb rect, we may need to clone the result of
                  calculateThumbRect().                
            </javadoc>
            <method name="isInThumb" type="boolean" line="298">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="thumbRect" type="Rectangle" line="299"/>
            </method>
            <method name="beforeThumb" type="boolean" line="305"/>
            <javadoc line="306">
                @see java.awt.event.MouseEventMouseEvent.MOUSE_CLICKEDMouseEvent.MOUSE_PRESSED
                  MouseEvent.MOUSE_RELEASED
                  MouseEvent.MOUSE_MOVED
                  MouseEvent.MOUSE_ENTERED
                  MouseEvent.MOUSE_EXITED
                  MouseEvent.MOUSE_DRAGGED                
            </javadoc>
            <method name="handleMouseEvent" type="void" line="315">
                <params>
                    <param name="id" type="int"/>
                    <param name="modifiers" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="316"/>
                <scope line="319">
                    <declaration name="type" type="String" line="320"/>
                </scope>
                <scope line="338">
                    <scope line="340"/>
                    <scope line="343"/>
                </scope>
                <scope line="350"/>
                <scope line="353">
                    <scope line="354"/>
                    <scope line="357"/>
                </scope>
                <declaration name="pos" type="Rectangle" line="362"/>
                <scope line="369"/>
            </method>
            <method name="handleTrackEvent" type="void" line="379">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="isAdjusting" type="boolean"/>
                </params>
                <scope line="380"/>
            </method>
            <method name="calculateCursorOffset" type="int" line="384">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="385"/>
                <scope line="389"/>
            </method>
            <javadoc line="394">
                Sets the values for this Scrollbar.
                  This method enforces the same constraints as in java.awt.Scrollbar:
                  &lt;UL&gt;
                  &lt;LI&gt; The maximum must be greater than the minimum &lt;/LI&gt;
                  &lt;LI&gt; The value must be greater than or equal to the minumum
                  and less than or equal to the maximum minus the
                  visible amount &lt;/LI&gt;
                  &lt;LI&gt; The visible amount must be greater than 1 and less than or equal
                  to the difference between the maximum and minimum values. &lt;/LI&gt;
                  &lt;/UL&gt;
                  Values which do not meet these criteria are quietly coerced to the
                  appropriate boundary value.                
                <param>
                    value is the position in the current window.                    
                </param>
                <param>
                    visible is the amount visible per page                    
                </param>
                <param>
                    minimum is the minimum value of the scrollbar                    
                </param>
                <param>
                    maximum is the maximum value of the scrollbar                    
                </param>
            </javadoc>
            <method name="setValues" type="void" line="412">
                <params>
                    <param name="value" type="int"/>
                    <param name="visible" type="int"/>
                    <param name="minimum" type="int"/>
                    <param name="maximum" type="int"/>
                </params>
                <scope line="413"/>
                <scope line="416"/>
                <scope line="419"/>
                <scope line="422"/>
                <scope line="425"/>
            </method>
            <javadoc line="433">
                Sets param of this Scrollbar to the specified values.                
                <param>
                    value is the position in the current window.                    
                </param>
                <param>
                    visible is the amount visible per page                    
                </param>
                <param>
                    minimum is the minimum value of the scrollbar                    
                </param>
                <param>
                    maximum is the maximum value of the scrollbar                    
                </param>
                <param>
                    unitSize is the unit size for increment or decrement of the value                    
                </param>
                <param>
                    page is the block size for increment or decrement of the value                    
                </param>
                <see>
                    #setValues                    
                </see>
            </javadoc>
            <method name="setValues" type="void" line="443">
                <params>
                    <param name="value" type="int"/>
                    <param name="visible" type="int"/>
                    <param name="minimum" type="int"/>
                    <param name="maximum" type="int"/>
                    <param name="unitSize" type="int"/>
                    <param name="blockSize" type="int"/>
                </params>
            </method>
            <javadoc line="448">
                Returns the current value of this Scrollbar.                
                <see>
                    #getMinimum                    
                </see>
                <see>
                    #getMaximum                    
                </see>
            </javadoc>
            <method name="getValue" type="int" line="453"/>
            <javadoc line="456">
                Sets the value of this Scrollbar to the specified value.                
                <param>
                    value the new value of the Scrollbar. If this value is
                      below the current minimum or above the current maximum minus
                      the visible amount, it becomes the new one of those values,
                      respectively.                    
                </param>
                <see>
                    #getValue                    
                </see>
            </javadoc>
            <method name="setValue" type="void" line="464">
                <params>
                    <param name="newValue" type="int"/>
                </params>
            </method>
            <javadoc line="467">
                Returns the minimum value of this Scrollbar.                
                <see>
                    #getMaximum                    
                </see>
                <see>
                    #getValue                    
                </see>
            </javadoc>
            <method name="getMinimum" type="int" line="472"/>
            <javadoc line="475">
                Sets the minimum value for this Scrollbar.                
                <param>
                    minimum the minimum value of the scrollbar                    
                </param>
            </javadoc>
            <method name="setMinimum" type="void" line="479">
                <params>
                    <param name="newMinimum" type="int"/>
                </params>
            </method>
            <javadoc line="482">
                Returns the maximum value of this Scrollbar.                
                <see>
                    #getMinimum                    
                </see>
                <see>
                    #getValue                    
                </see>
            </javadoc>
            <method name="getMaximum" type="int" line="487"/>
            <javadoc line="490">
                Sets the maximum value for this Scrollbar.                
                <param>
                    maximum the maximum value of the scrollbar                    
                </param>
            </javadoc>
            <method name="setMaximum" type="void" line="494">
                <params>
                    <param name="newMaximum" type="int"/>
                </params>
            </method>
            <javadoc line="497">
                Returns the visible amount of this Scrollbar.                
            </javadoc>
            <method name="getVisibleAmount" type="int" line="500"/>
            <javadoc line="503">
                Sets the visible amount of this Scrollbar, which is the range
                  of values represented by the width of the scroll bar&apos;s bubble.                
                <param>
                    visible the amount visible per page                    
                </param>
            </javadoc>
            <method name="setVisibleAmount" type="void" line="508">
                <params>
                    <param name="newAmount" type="int"/>
                </params>
            </method>
            <javadoc line="511">
                Sets the unit increment for this scrollbar. This is the value
                  that will be added (subtracted) when the user hits the unit down
                  (up) gadgets.                
                <param>
                    unitSize is the unit size for increment or decrement of the value                    
                </param>
            </javadoc>
            <method name="setUnitIncrement" type="void" line="517">
                <params>
                    <param name="unitSize" type="int"/>
                </params>
            </method>
            <javadoc line="520">
                Gets the unit increment for this scrollbar.                
            </javadoc>
            <method name="getUnitIncrement" type="int" line="523"/>
            <javadoc line="526">
                Sets the block increment for this scrollbar. This is the value
                  that will be added (subtracted) when the user hits the block down
                  (up) gadgets.                
                <param>
                    blockSize is the block size for increment or decrement of the value                    
                </param>
            </javadoc>
            <method name="setBlockIncrement" type="void" line="532">
                <params>
                    <param name="blockSize" type="int"/>
                </params>
            </method>
            <javadoc line="535">
                Gets the block increment for this scrollbar.                
            </javadoc>
            <method name="getBlockIncrement" type="int" line="538"/>
            <javadoc line="541">
                Width of the arrow image                
            </javadoc>
            <method name="getArrowWidth" type="int" line="544"/>
            <javadoc line="547">
                Width of the area reserved for arrow                
            </javadoc>
            <method name="getArrowAreaWidth" type="int" line="550"/>
            <method name="calculateArrowWidth" type="void" line="553">
                <scope line="554"/>
                <scope line="557"/>
            </method>
            <javadoc line="561">
                Returns the scale factor for the thumbArea ( thumbAreaH / (max - min)).                
                <see>
                    #getArrowAreaSize                    
                </see>
            </javadoc>
            <method name="getScaleFactor" type="double" line="565">
                <declaration name="f" type="double" line="566"/>
            </method>
            <javadoc line="569">
                Method to calculate the scroll thumb&apos;s size and position.  This is
                  based on CalcSliderRect in ScrollBar.c of Motif source.
                  If we ever cache the thumb rect, we&apos;ll need to use a clone in
                  isInThumb().                
            </javadoc>
            <method name="calculateThumbRect" type="Rectangle" line="575">
                <declaration name="range" type="float" line="576"/>
                <declaration name="trueSize" type="float" line="577"/>
                <declaration name="factor" type="float" line="578"/>
                <declaration name="slideSize" type="float" line="579"/>
                <declaration name="minSliderWidth" type="int" line="580"/>
                <declaration name="minSliderHeight" type="int" line="581"/>
                <declaration name="hitTheWall" type="int" line="582"/>
                <declaration name="arrAreaH" type="int" line="583"/>
                <declaration name="retVal" type="Rectangle" line="584"/>
                <scope line="586"/>
                <scope line="590"/>
                <scope line="597">
                    <declaration name="localVal" type="int" line="598"/>
                    <declaration name="localMin" type="int" line="599"/>
                    <scope line="600"/>
                    <scope line="603"/>
                </scope>
                <scope line="609">
                    <declaration name="localVal" type="int" line="611"/>
                    <declaration name="localMin" type="int" line="612"/>
                    <scope line="613"/>
                    <scope line="616"/>
                </scope>
                <scope line="621"/>
                <scope line="626"/>
                <scope line="630"/>
            </method>
            <method name="toString" type="String" line="636"/>
        </class>
        <class name="XScrollRepeater" line="640">
            <implements interface="Runnable"/>
            <declaration name="beginPause" type="int" line="641"/>
            <javadoc line="641">
                Time to pause before the first scroll repeat.                
            </javadoc>
            <declaration name="repeatPause" type="int" line="645"/>
            <javadoc line="645">
                Time to pause between each scroll repeat.                
            </javadoc>
            <declaration name="sb" type="XScrollbar" line="649"/>
            <javadoc line="649">
                The scrollbar that we sending scrolling.                
            </javadoc>
            <declaration name="newScroll" type="boolean" line="653"/>
            <javadoc line="653">
                newScroll gets reset when a new scrollbar gets set.                
            </javadoc>
            <declaration name="shouldSkip" type="boolean" line="657"/>
            <javadoc line="658">
                Creates a new scroll repeater.                
                <param>
                    sb the scrollbar that this thread will scroll                    
                </param>
            </javadoc>
            <method name="XScrollRepeater" type="constructor" line="662">
                <params>
                    <param name="sb" type="XScrollbar"/>
                </params>
            </method>
            <method name="start" type="void" line="666"/>
            <method name="stop" type="void" line="671">
                <scope line="672"/>
            </method>
            <javadoc line="677">
                Sets the scrollbar.                
                <param>
                    sb the scrollbar that this thread will scroll                    
                </param>
            </javadoc>
            <method name="setScrollbar" type="void" line="681">
                <params>
                    <param name="sb" type="XScrollbar"/>
                </params>
            </method>
            <method name="run" type="void" line="686">
                <scope line="687">
                    <scope line="688"/>
                </scope>
            </method>
        </class>
    </source>