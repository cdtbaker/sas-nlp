<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt"/>
        <import package="java.awt.peer.ComponentPeer"/>
        <import package="java.awt.peer.TextAreaPeer"/>
        <import package="java.awt.event"/>
        <import package="javax.swing.event.DocumentListener"/>
        <import package="javax.swing.event.DocumentEvent"/>
        <import package="javax.swing.JTextArea"/>
        <import package="javax.swing.JComponent"/>
        <import package="javax.swing.JScrollPane"/>
        <import package="javax.swing.JScrollBar"/>
        <import package="javax.swing.plaf.ComponentUI"/>
        <import package="com.sun.java.swing.plaf.motif.MotifTextAreaUI"/>
        <import package="javax.swing.plaf.UIResource"/>
        <import package="javax.swing.UIDefaults"/>
        <import package="javax.swing.border.Border"/>
        <import package="javax.swing.border.EmptyBorder"/>
        <import package="javax.swing.border.CompoundBorder"/>
        <import package="javax.swing.border.AbstractBorder"/>
        <import package="javax.swing.JButton"/>
        <import package="javax.swing.JViewport"/>
        <import package="javax.swing.InputMap"/>
        <import package="javax.swing.SwingUtilities"/>
        <import package="javax.swing.TransferHandler"/>
        <import package="javax.swing.plaf.basic.BasicArrowButton"/>
        <import package="javax.swing.plaf.basic.BasicScrollBarUI"/>
        <import package="javax.swing.plaf.basic.BasicScrollPaneUI"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="javax.swing.text.Caret"/>
        <import package="javax.swing.text.DefaultCaret"/>
        <import package="javax.swing.text.JTextComponent"/>
        <import package="javax.swing.plaf.BorderUIResource"/>
        <import package="java.awt.im.InputMethodRequests"/>
        <import package="sun.awt.CausedFocusEvent"/>
        <import package="sun.awt.AWTAccessor"/>
        <import package="sun.awt.SunToolkit"/>
        <class name="XTextAreaPeer" line="67">
            <extends class="XComponentPeer"/>
            <comment line="79">
                                
            </comment>
            <comment line="86">
                                
            </comment>
            <comment line="180">
                The method overrides one from XComponentPeer
                 If ignoreSubComponents=={@code true} it calls super.
                 If ignoreSubComponents=={@code false} it uses the XTextArea machinery
                 to change cursor appropriately. In particular it changes the cursor to
                 default if over scrollbars.                
            </comment>
            <comment line="664">
                TODO : fix this duplicate code                
            </comment>
            <comment line="1257">
                This class dispatches &apos;MouseEvent&apos;s to &apos;XTextAreaPeer&apos;&apos;s (hidden)                
            </comment>
            <comment line="1258">
                subcomponents, and overrides mouse cursor, e.g. for scrollbars.                
            </comment>
            <comment line="1259">
                                
            </comment>
            <comment line="1260">
                However, current dispatching is a kind of fake, and is tuned to do only                
            </comment>
            <comment line="1261">
                what is necessary/possible. E.g. no additional mouse-exited/entered                
            </comment>
            <comment line="1262">
                events are generated, when mouse exits scrollbar and enters viewport                
            </comment>
            <comment line="1263">
                with JTextArea inside. Actually, no events are ever generated here (for                
            </comment>
            <comment line="1264">
                now). They are only dispatched as correctly as possible/neccessary.                
            </comment>
            <comment line="1265">
                                
            </comment>
            <comment line="1266">
                In future, it would be better to replace fake-emulation of grab-detection                
            </comment>
            <comment line="1267">
                and event-dispatching here, by reusing some common implementation of this                
            </comment>
            <comment line="1268">
                functionality. Mouse-cursor setting should also be freed of hacked                
            </comment>
            <comment line="1269">
                overloading here.                
            </comment>
            <implements interface="TextAreaPeer"/>
            <declaration name="editable" type="boolean" line="68"/>
            <declaration name="textPane" type="AWTTextPane" line="70"/>
            <declaration name="jtext" type="AWTTextArea" line="71"/>
            <declaration name="firstChangeSkipped" type="boolean" line="73"/>
            <declaration name="javaMouseEventHandler" type="JavaMouseEventHandler" line="75"/>
            <method name="filterEvents" type="long" line="80">
                <params>
                    <param name="mask" type="long"/>
                </params>
            </method>
            <method name="getCharacterBounds" type="Rectangle" line="86">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="getIndexAtPoint" type="int" line="91">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="97">
                Create a Text area.                
            </javadoc>
            <method name="XTextAreaPeer" type="constructor" line="100">
                <params>
                    <param name="target" type="TextArea"/>
                </params>
                <comment line="103">
                    some initializations require that target be set even                    
                </comment>
                <comment line="104">
                    though init(target) has not been called                    
                </comment>
                <comment line="107">
                    ComponentAccessor.enableEvents(target,AWTEvent.MOUSE_WHEEL_EVENT_MASK);                    
                </comment>
                <comment line="138">
                    This is a way to set the background color of the TextArea                    
                </comment>
                <comment line="139">
                    without calling setBackground - go through accessor                    
                </comment>
                <comment line="154">
                    Fix for 5100200                    
                </comment>
                <comment line="155">
                    Restoring Motif behaviour                    
                </comment>
                <comment line="156">
                    Since the end position of the selected text can be greater then the length of the text,                    
                </comment>
                <comment line="157">
                    so we should set caret to max position of the text                    
                </comment>
                <comment line="164">
                    set the text of this object to the text of its target                    
                </comment>
                <comment line="165">
                    ?? should this be setText                    
                </comment>
                <comment line="167">
                    After this line we should not change the component&apos;s text                    
                </comment>
                <declaration name="text" type="String" line="111"/>
                <declaration name="compAccessor" type="AWTAccessor.ComponentAccessor" line="123"/>
                <scope line="125"/>
                <scope line="131"/>
                <scope line="137"/>
                <scope line="142"/>
                <declaration name="start" type="int" line="148"/>
                <declaration name="end" type="int" line="149"/>
                <scope line="151"/>
                <declaration name="caretPosition" type="int" line="158"/>
            </method>
            <method name="dispose" type="void" line="171"/>
            <method name="pSetCursor" type="void" line="187">
                <params>
                    <param name="cursor" type="Cursor"/>
                    <param name="ignoreSubComponents" type="boolean"/>
                </params>
                <declaration name="onScreen" type="Point" line="188"/>
                <scope line="192"/>
                <declaration name="cursorPos" type="Point" line="197"/>
                <declaration name="localPoint" type="Point" line="200"/>
            </method>
            <method name="setScrollBarVisibility" type="void" line="206">
                <declaration name="visibility" type="int" line="207"/>
                <scope line="210"/>
                <scope line="215"/>
                <scope line="220"/>
                <scope line="225"/>
            </method>
            <javadoc line="231">
                Compute minimum size.                
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="234"/>
            <method name="getPreferredSize" type="Dimension" line="238">
                <params>
                    <param name="rows" type="int"/>
                    <param name="cols" type="int"/>
                </params>
            </method>
            <javadoc line="242">
                @see java.awt.peer.TextAreaPeer                
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="246">
                <params>
                    <param name="rows" type="int"/>
                    <param name="cols" type="int"/>
                </params>
                <comment line="247">
                    Dimension d = null;
                    if (jtext != null) {
                    d = jtext.getMinimumSize(rows,cols);
                    }
                    return d;                    
                </comment>
                <comment line="270">
                                        
                </comment>
                <comment line="271">
                                        
                </comment>
                <declaration name="vsbwidth" type="int" line="254"/>
                <declaration name="hsbheight" type="int" line="255"/>
                <declaration name="vsb" type="JScrollBar" line="257"/>
                <scope line="258"/>
                <declaration name="hsb" type="JScrollBar" line="262"/>
                <scope line="263"/>
                <declaration name="f" type="Font" line="267"/>
                <declaration name="fm" type="FontMetrics" line="268"/>
            </method>
            <method name="isFocusable" type="boolean" line="274"/>
            <method name="setVisible" type="void" line="278">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <method name="repaintText" type="void" line="284"/>
            <method name="focusGained" type="void" line="288">
                <params>
                    <param name="e" type="FocusEvent"/>
                </params>
            </method>
            <method name="focusLost" type="void" line="293">
                <params>
                    <param name="e" type="FocusEvent"/>
                </params>
            </method>
            <javadoc line="299">
                Paint the component
                  this method is called when the repaint instruction has been used                
            </javadoc>
            <method name="repaint" type="void" line="304">
                <comment line="306">
                    textPane.validate();                    
                </comment>
                <scope line="305"/>
            </method>
            <method name="paint" type="void" line="311">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="312"/>
            </method>
            <method name="setBounds" type="void" line="317">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="op" type="int"/>
                </params>
                <comment line="320">
                    Fixed 6277332, 6198290:
                     the coordinates is coming (to peer): relatively to closest HW parent
                     the coordinates is setting (to textPane): relatively to closest ANY parent
                     the parent of peer is target.getParent()
                     the parent of textPane is the same
                     see 6277332, 6198290 for more information                    
                </comment>
                <comment line="331">
                    we up to heavyweight parent in order to be sure                    
                </comment>
                <comment line="332">
                    that the coordinates of the text pane is relatively to closest parent                    
                </comment>
                <scope line="319">
                    <declaration name="childX" type="int" line="328"/>
                    <declaration name="childY" type="int" line="329"/>
                    <declaration name="parent" type="Component" line="330"/>
                    <scope line="333"/>
                </scope>
            </method>
            <method name="handleJavaKeyEvent" type="void" line="343">
                <params>
                    <param name="e" type="KeyEvent"/>
                </params>
            </method>
            <method name="handlesWheelScrolling" type="boolean" line="347"/>
            <method name="handleJavaMouseWheelEvent" type="void" line="349">
                <params>
                    <param name="e" type="MouseWheelEvent"/>
                </params>
            </method>
            <method name="handleJavaMouseEvent" type="void" line="353">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
            </method>
            <method name="handleJavaInputMethodEvent" type="void" line="358">
                <params>
                    <param name="e" type="InputMethodEvent"/>
                </params>
            </method>
            <javadoc line="363">
                @see java.awt.peer.TextComponentPeer                
            </javadoc>
            <method name="select" type="void" line="366">
                <params>
                    <param name="s" type="int"/>
                    <param name="e" type="int"/>
                </params>
                <comment line="368">
                    Fixed 5100806                    
                </comment>
                <comment line="369">
                    We must take care that Swing components repainted correctly                    
                </comment>
            </method>
            <method name="setBackground" type="void" line="373">
                <params>
                    <param name="c" type="Color"/>
                </params>
                <comment line="375">
                    synchronized (getStateLock()) {                    
                </comment>
                <comment line="376">
                    background = c;                    
                </comment>
                <comment line="377">
                    }                    
                </comment>
                <comment line="382">
                    repaintText();                    
                </comment>
                <scope line="378"/>
            </method>
            <method name="setForeground" type="void" line="385">
                <params>
                    <param name="c" type="Color"/>
                </params>
                <comment line="387">
                    synchronized (getStateLock()) {                    
                </comment>
                <comment line="388">
                    foreground = c;                    
                </comment>
                <comment line="389">
                    }                    
                </comment>
                <comment line="395">
                    repaintText();                    
                </comment>
                <scope line="390"/>
            </method>
            <method name="setFont" type="void" line="398">
                <params>
                    <param name="f" type="Font"/>
                </params>
                <comment line="400">
                    synchronized (getStateLock()) {                    
                </comment>
                <comment line="401">
                    font = f;                    
                </comment>
                <comment line="402">
                    }                    
                </comment>
                <scope line="403"/>
            </method>
            <javadoc line="410">
                @see java.awt.peer.TextComponentPeer                
            </javadoc>
            <method name="setEditable" type="void" line="413">
                <params>
                    <param name="editable" type="boolean"/>
                </params>
            </method>
            <javadoc line="419">
                @see java.awt.peer.ComponentPeer                
            </javadoc>
            <method name="setEnabled" type="void" line="422">
                <params>
                    <param name="enabled" type="boolean"/>
                </params>
                <scope line="424"/>
            </method>
            <javadoc line="430">
                @see java.awt.peer.TextComponentPeer                
            </javadoc>
            <method name="getInputMethodRequests" type="InputMethodRequests" line="433"/>
            <javadoc line="438">
                @see java.awt.peer.TextComponentPeer                
            </javadoc>
            <method name="getSelectionStart" type="int" line="441"/>
            <javadoc line="445">
                @see java.awt.peer.TextComponentPeer                
            </javadoc>
            <method name="getSelectionEnd" type="int" line="448"/>
            <javadoc line="452">
                @see java.awt.peer.TextComponentPeer                
            </javadoc>
            <method name="getText" type="String" line="455"/>
            <javadoc line="459">
                @see java.awt.peer.TextComponentPeer                
            </javadoc>
            <method name="setText" type="void" line="462">
                <params>
                    <param name="txt" type="String"/>
                </params>
            </method>
            <method name="setTextImpl" type="boolean" line="467">
                <params>
                    <param name="txt" type="String"/>
                </params>
                <comment line="469">
                    Please note that we do not want to post an event                    
                </comment>
                <comment line="470">
                    if setText() replaces an empty text by an empty text,                    
                </comment>
                <comment line="471">
                    that is, if component&apos;s text remains unchanged.                    
                </comment>
                <comment line="476">
                    JTextArea.setText() posts two different events (remove &amp; insert).                    
                </comment>
                <comment line="477">
                    Since we make no differences between text events,                    
                </comment>
                <comment line="478">
                    the document listener has to be disabled while                    
                </comment>
                <comment line="479">
                    JTextArea.setText() is called.                    
                </comment>
                <scope line="468">
                    <scope line="472"/>
                    <scope line="482"/>
                </scope>
            </method>
            <javadoc line="490">
                insert the text &quot;txt on position &quot;pos&quot; in the array lines                
                <see>
                    java.awt.peer.TextAreaPeer                    
                </see>
            </javadoc>
            <method name="insert" type="void" line="494">
                <params>
                    <param name="txt" type="String"/>
                    <param name="p" type="int"/>
                </params>
                <scope line="495">
                    <declaration name="doScroll" type="boolean" line="496"/>
                    <scope line="499">
                        <declaration name="bar" type="JScrollBar" line="500"/>
                        <scope line="501"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="508">
                replace the text between the position &quot;s&quot; and &quot;e&quot; with &quot;txt&quot;                
                <see>
                    java.awt.peer.TextAreaPeer                    
                </see>
            </javadoc>
            <method name="replaceRange" type="void" line="512">
                <params>
                    <param name="txt" type="String"/>
                    <param name="s" type="int"/>
                    <param name="e" type="int"/>
                </params>
                <comment line="514">
                    JTextArea.replaceRange() posts two different events.                    
                </comment>
                <comment line="515">
                    Since we make no differences between text events,                    
                </comment>
                <comment line="516">
                    the document listener has to be disabled while                    
                </comment>
                <comment line="517">
                    JTextArea.replaceRange() is called.                    
                </comment>
                <scope line="513"/>
            </method>
            <javadoc line="525">
                to be implemented.                
                <see>
                    java.awt.peer.TextComponentPeer                    
                </see>
            </javadoc>
            <method name="setCaretPosition" type="void" line="529">
                <params>
                    <param name="position" type="int"/>
                </params>
            </method>
            <javadoc line="533">
                to be implemented.                
                <see>
                    java.awt.peer.TextComponentPeer                    
                </see>
            </javadoc>
            <method name="getCaretPosition" type="int" line="537"/>
            <javadoc line="541">
                DEPRECATED                
                <see>
                    java.awt.peer.TextAreaPeer                    
                </see>
            </javadoc>
            <method name="insertText" type="void" line="545">
                <params>
                    <param name="txt" type="String"/>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <javadoc line="549">
                DEPRECATED                
                <see>
                    java.awt.peer.TextAreaPeer                    
                </see>
            </javadoc>
            <method name="replaceText" type="void" line="553">
                <params>
                    <param name="txt" type="String"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
            <javadoc line="557">
                DEPRECATED                
                <see>
                    java.awt.peer.TextAreaPeer                    
                </see>
            </javadoc>
            <method name="minimumSize" type="Dimension" line="561">
                <params>
                    <param name="rows" type="int"/>
                    <param name="cols" type="int"/>
                </params>
            </method>
            <javadoc line="565">
                DEPRECATED                
                <see>
                    java.awt.peer.TextAreaPeer                    
                </see>
            </javadoc>
            <method name="preferredSize" type="Dimension" line="569">
                <params>
                    <param name="rows" type="int"/>
                    <param name="cols" type="int"/>
                </params>
            </method>
            <class name="AWTTextAreaUI" line="574">
                <extends class="MotifTextAreaUI"/>
                <comment line="676">
                    Fix for 5100950: textarea.getSelectedText() returns the de-selected text, on XToolkit                    
                </comment>
                <comment line="677">
                    Restoring Motif behaviour                    
                </comment>
                <comment line="678">
                    If the text is unhighlighted then we should sets the selection range to zero                    
                </comment>
                <comment line="1015">
                    Fix for 4915454 - override the default implementation to avoid                    
                </comment>
                <comment line="1016">
                    loading SystemFlavorMap and associated classes.                    
                </comment>
                <comment line="1281">
                    1. We can make grab-tracking emulation here more robust to variations in                    
                </comment>
                <comment line="1282">
                    in mouse-events order and consistence. E.g. by using such code:                    
                </comment>
                <comment line="1283">
                    if( grabbed &amp;&amp; event.getID()==MouseEvent.MOUSE_MOVED ) grabbed = false;                    
                </comment>
                <comment line="1284">
                    Or we can also use &apos;assert&apos;ions.                    
                </comment>
                <comment line="1285">
                    2. WARNING: Currently, while grab-detection mechanism _here_ says, that                    
                </comment>
                <comment line="1286">
                    grab is in progress, we do not update &apos;current&apos;.  In case &apos;current&apos;                    
                </comment>
                <comment line="1287">
                    is set to a scrollbar or to a scroll-button, then references to their                    
                </comment>
                <comment line="1288">
                    &apos;Component&apos;-instances are &quot;remembered&quot;. And events are dispatched to                    
                </comment>
                <comment line="1289">
                    these remembered components, without checking, if XTextAreaPeer has                    
                </comment>
                <comment line="1290">
                    replaced these instances with another ones. This also aplies to                    
                </comment>
                <comment line="1291">
                    mouse-drags-from-outside (see comment in &apos;grabbed_update&apos; method).                    
                </comment>
                <comment line="1307">
                    Following is internally private:                    
                </comment>
                <comment line="1309">
                    Here dispatching is performed, of &apos;MouseEvent&apos;s to (some)                    
                </comment>
                <comment line="1310">
                    &apos;XTextAreaPeer&apos;&apos;s (hidden) subcomponents.                    
                </comment>
                <comment line="1383">
                    Current way of grab-detection causes interesting (but harmless)                    
                </comment>
                <comment line="1384">
                    side-effect. If mouse is draged from outside to inside of TextArea,                    
                </comment>
                <comment line="1385">
                    we will then (in some cases) be asked to dispatch mouse-entered/exited                    
                </comment>
                <comment line="1386">
                    events. But, as at least one mouse-button is down, we will detect                    
                </comment>
                <comment line="1387">
                    grab-mode is on (though the grab isn&apos;t ours).                    
                </comment>
                <comment line="1388">
                                        
                </comment>
                <comment line="1389">
                    Thus, we will not update &apos;current&apos; (see &apos;handle&apos; method), and will                    
                </comment>
                <comment line="1390">
                    dispatch events to the last subcomponent, the &apos;current&apos; was set to.                    
                </comment>
                <comment line="1391">
                    As always, we set cursor in this case also. But, all this seems                    
                </comment>
                <comment line="1392">
                    harmless, because mouse entered/exited events seem to have no effect                    
                </comment>
                <comment line="1393">
                    here, and cursor setting is ignored in case of drags from outside.                    
                </comment>
                <comment line="1394">
                                        
                </comment>
                <comment line="1395">
                    Grab-detection can be further improved, e.g. by taking into account                    
                </comment>
                <comment line="1396">
                    current event-ID, but I see not point in doing it now.                    
                </comment>
                <comment line="1406">
                    &apos;toLocalSpace&apos; and &apos;toViewportChildLocalSpace&apos; can be &quot;optimized&quot; to                    
                </comment>
                <comment line="1407">
                    &apos;return&apos; &apos;void&apos; and use &apos;Point&apos; input-argument also as output.                    
                </comment>
                <declaration name="jta" type="JTextArea" line="575"/>
                <javadoc line="575">
                    Creates a UI for a JTextArea.                    
                    <param>
                        c the text field                        
                    </param>
                    <return>
                        the UI                        
                    </return>
                </javadoc>
                <method name="getPropertyPrefix" type="String" line="583"/>
                <method name="installUI" type="void" line="585">
                    <params>
                        <param name="c" type="JComponent"/>
                    </params>
                    <declaration name="editor" type="JTextArea" line="590"/>
                    <declaration name="uidefaults" type="UIDefaults" line="592"/>
                    <declaration name="prefix" type="String" line="594"/>
                    <declaration name="f" type="Font" line="595"/>
                    <scope line="596"/>
                    <declaration name="bg" type="Color" line="600"/>
                    <scope line="601"/>
                    <declaration name="fg" type="Color" line="605"/>
                    <scope line="606"/>
                    <declaration name="color" type="Color" line="610"/>
                    <scope line="611"/>
                    <declaration name="s" type="Color" line="615"/>
                    <scope line="616"/>
                    <declaration name="sfg" type="Color" line="620"/>
                    <scope line="621"/>
                    <declaration name="dfg" type="Color" line="625"/>
                    <scope line="626"/>
                    <declaration name="b" type="Border" line="630"/>
                    <declaration name="margin" type="Insets" line="634"/>
                    <scope line="635"/>
                </method>
                <method name="installKeyboardActions" type="void" line="640">
                    <declaration name="comp" type="JTextComponent" line="643"/>
                    <declaration name="uidefaults" type="UIDefaults" line="645"/>
                    <declaration name="prefix" type="String" line="647"/>
                    <declaration name="map" type="InputMap" line="649"/>
                    <scope line="651"/>
                </method>
                <method name="createCaret" type="Caret" line="657"/>
            </class>
            <class name="XAWTCaret" line="664">
                <extends class="DefaultCaret"/>
                <comment line="676">
                    Fix for 5100950: textarea.getSelectedText() returns the de-selected text, on XToolkit                    
                </comment>
                <comment line="677">
                    Restoring Motif behaviour                    
                </comment>
                <comment line="678">
                    If the text is unhighlighted then we should sets the selection range to zero                    
                </comment>
                <comment line="1015">
                    Fix for 4915454 - override the default implementation to avoid                    
                </comment>
                <comment line="1016">
                    loading SystemFlavorMap and associated classes.                    
                </comment>
                <comment line="1281">
                    1. We can make grab-tracking emulation here more robust to variations in                    
                </comment>
                <comment line="1282">
                    in mouse-events order and consistence. E.g. by using such code:                    
                </comment>
                <comment line="1283">
                    if( grabbed &amp;&amp; event.getID()==MouseEvent.MOUSE_MOVED ) grabbed = false;                    
                </comment>
                <comment line="1284">
                    Or we can also use &apos;assert&apos;ions.                    
                </comment>
                <comment line="1285">
                    2. WARNING: Currently, while grab-detection mechanism _here_ says, that                    
                </comment>
                <comment line="1286">
                    grab is in progress, we do not update &apos;current&apos;.  In case &apos;current&apos;                    
                </comment>
                <comment line="1287">
                    is set to a scrollbar or to a scroll-button, then references to their                    
                </comment>
                <comment line="1288">
                    &apos;Component&apos;-instances are &quot;remembered&quot;. And events are dispatched to                    
                </comment>
                <comment line="1289">
                    these remembered components, without checking, if XTextAreaPeer has                    
                </comment>
                <comment line="1290">
                    replaced these instances with another ones. This also aplies to                    
                </comment>
                <comment line="1291">
                    mouse-drags-from-outside (see comment in &apos;grabbed_update&apos; method).                    
                </comment>
                <comment line="1307">
                    Following is internally private:                    
                </comment>
                <comment line="1309">
                    Here dispatching is performed, of &apos;MouseEvent&apos;s to (some)                    
                </comment>
                <comment line="1310">
                    &apos;XTextAreaPeer&apos;&apos;s (hidden) subcomponents.                    
                </comment>
                <comment line="1383">
                    Current way of grab-detection causes interesting (but harmless)                    
                </comment>
                <comment line="1384">
                    side-effect. If mouse is draged from outside to inside of TextArea,                    
                </comment>
                <comment line="1385">
                    we will then (in some cases) be asked to dispatch mouse-entered/exited                    
                </comment>
                <comment line="1386">
                    events. But, as at least one mouse-button is down, we will detect                    
                </comment>
                <comment line="1387">
                    grab-mode is on (though the grab isn&apos;t ours).                    
                </comment>
                <comment line="1388">
                                        
                </comment>
                <comment line="1389">
                    Thus, we will not update &apos;current&apos; (see &apos;handle&apos; method), and will                    
                </comment>
                <comment line="1390">
                    dispatch events to the last subcomponent, the &apos;current&apos; was set to.                    
                </comment>
                <comment line="1391">
                    As always, we set cursor in this case also. But, all this seems                    
                </comment>
                <comment line="1392">
                    harmless, because mouse entered/exited events seem to have no effect                    
                </comment>
                <comment line="1393">
                    here, and cursor setting is ignored in case of drags from outside.                    
                </comment>
                <comment line="1394">
                                        
                </comment>
                <comment line="1395">
                    Grab-detection can be further improved, e.g. by taking into account                    
                </comment>
                <comment line="1396">
                    current event-ID, but I see not point in doing it now.                    
                </comment>
                <comment line="1406">
                    &apos;toLocalSpace&apos; and &apos;toViewportChildLocalSpace&apos; can be &quot;optimized&quot; to                    
                </comment>
                <comment line="1407">
                    &apos;return&apos; &apos;void&apos; and use &apos;Point&apos; input-argument also as output.                    
                </comment>
                <method name="focusGained" type="void" line="665">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
                <method name="focusLost" type="void" line="670">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
                <method name="setSelectionVisible" type="void" line="678">
                    <params>
                        <param name="vis" type="boolean"/>
                    </params>
                    <comment line="682">
                        In order to de-select the selection                        
                    </comment>
                    <scope line="679"/>
                    <scope line="681"/>
                </method>
            </class>
            <class name="XAWTScrollBarButton" line="689">
                <extends class="BasicArrowButton"/>
                <comment line="676">
                    Fix for 5100950: textarea.getSelectedText() returns the de-selected text, on XToolkit                    
                </comment>
                <comment line="677">
                    Restoring Motif behaviour                    
                </comment>
                <comment line="678">
                    If the text is unhighlighted then we should sets the selection range to zero                    
                </comment>
                <comment line="1015">
                    Fix for 4915454 - override the default implementation to avoid                    
                </comment>
                <comment line="1016">
                    loading SystemFlavorMap and associated classes.                    
                </comment>
                <comment line="1281">
                    1. We can make grab-tracking emulation here more robust to variations in                    
                </comment>
                <comment line="1282">
                    in mouse-events order and consistence. E.g. by using such code:                    
                </comment>
                <comment line="1283">
                    if( grabbed &amp;&amp; event.getID()==MouseEvent.MOUSE_MOVED ) grabbed = false;                    
                </comment>
                <comment line="1284">
                    Or we can also use &apos;assert&apos;ions.                    
                </comment>
                <comment line="1285">
                    2. WARNING: Currently, while grab-detection mechanism _here_ says, that                    
                </comment>
                <comment line="1286">
                    grab is in progress, we do not update &apos;current&apos;.  In case &apos;current&apos;                    
                </comment>
                <comment line="1287">
                    is set to a scrollbar or to a scroll-button, then references to their                    
                </comment>
                <comment line="1288">
                    &apos;Component&apos;-instances are &quot;remembered&quot;. And events are dispatched to                    
                </comment>
                <comment line="1289">
                    these remembered components, without checking, if XTextAreaPeer has                    
                </comment>
                <comment line="1290">
                    replaced these instances with another ones. This also aplies to                    
                </comment>
                <comment line="1291">
                    mouse-drags-from-outside (see comment in &apos;grabbed_update&apos; method).                    
                </comment>
                <comment line="1307">
                    Following is internally private:                    
                </comment>
                <comment line="1309">
                    Here dispatching is performed, of &apos;MouseEvent&apos;s to (some)                    
                </comment>
                <comment line="1310">
                    &apos;XTextAreaPeer&apos;&apos;s (hidden) subcomponents.                    
                </comment>
                <comment line="1383">
                    Current way of grab-detection causes interesting (but harmless)                    
                </comment>
                <comment line="1384">
                    side-effect. If mouse is draged from outside to inside of TextArea,                    
                </comment>
                <comment line="1385">
                    we will then (in some cases) be asked to dispatch mouse-entered/exited                    
                </comment>
                <comment line="1386">
                    events. But, as at least one mouse-button is down, we will detect                    
                </comment>
                <comment line="1387">
                    grab-mode is on (though the grab isn&apos;t ours).                    
                </comment>
                <comment line="1388">
                                        
                </comment>
                <comment line="1389">
                    Thus, we will not update &apos;current&apos; (see &apos;handle&apos; method), and will                    
                </comment>
                <comment line="1390">
                    dispatch events to the last subcomponent, the &apos;current&apos; was set to.                    
                </comment>
                <comment line="1391">
                    As always, we set cursor in this case also. But, all this seems                    
                </comment>
                <comment line="1392">
                    harmless, because mouse entered/exited events seem to have no effect                    
                </comment>
                <comment line="1393">
                    here, and cursor setting is ignored in case of drags from outside.                    
                </comment>
                <comment line="1394">
                                        
                </comment>
                <comment line="1395">
                    Grab-detection can be further improved, e.g. by taking into account                    
                </comment>
                <comment line="1396">
                    current event-ID, but I see not point in doing it now.                    
                </comment>
                <comment line="1406">
                    &apos;toLocalSpace&apos; and &apos;toViewportChildLocalSpace&apos; can be &quot;optimized&quot; to                    
                </comment>
                <comment line="1407">
                    &apos;return&apos; &apos;void&apos; and use &apos;Point&apos; input-argument also as output.                    
                </comment>
                <declaration name="uidefaults" type="UIDefaults" line="691"/>
                <declaration name="darkShadow" type="Color" line="692"/>
                <declaration name="lightShadow" type="Color" line="693"/>
                <declaration name="buttonBack" type="Color" line="694"/>
                <method name="XAWTScrollBarButton" type="constructor" line="697">
                    <params>
                        <param name="direction" type="int"/>
                    </params>
                </method>
                <method name="getPreferredSize" type="Dimension" line="717"/>
                <method name="getMinimumSize" type="Dimension" line="729"/>
                <method name="getMaximumSize" type="Dimension" line="733"/>
                <method name="isFocusTraversable" type="boolean" line="737"/>
                <method name="paint" type="void" line="742">
                    <params>
                        <param name="g" type="Graphics"/>
                    </params>
                    <declaration name="w" type="int" line="743"/>
                    <declaration name="h" type="int" line="744"/>
                    <scope line="746"/>
                    <declaration name="isPressed" type="boolean" line="751"/>
                    <declaration name="lead" type="Color" line="752"/>
                    <declaration name="trail" type="Color" line="753"/>
                    <declaration name="fill" type="Color" line="754"/>
                    <declaration name="cx" type="int" line="756"/>
                    <declaration name="cy" type="int" line="757"/>
                    <declaration name="s" type="int" line="758"/>
                    <scope line="764">
                        <scope line="767"/>
                        <scope line="772"/>
                        <scope line="777"/>
                    </scope>
                    <scope line="788">
                        <scope line="791"/>
                        <scope line="796"/>
                    </scope>
                    <scope line="810">
                        <scope line="813"/>
                        <scope line="818"/>
                    </scope>
                    <scope line="832">
                        <scope line="835"/>
                        <scope line="840"/>
                        <scope line="845"/>
                    </scope>
                </method>
            </class>
            <class name="XAWTScrollBarUI" line="857">
                <extends class="BasicScrollBarUI"/>
                <comment line="676">
                    Fix for 5100950: textarea.getSelectedText() returns the de-selected text, on XToolkit                    
                </comment>
                <comment line="677">
                    Restoring Motif behaviour                    
                </comment>
                <comment line="678">
                    If the text is unhighlighted then we should sets the selection range to zero                    
                </comment>
                <comment line="1015">
                    Fix for 4915454 - override the default implementation to avoid                    
                </comment>
                <comment line="1016">
                    loading SystemFlavorMap and associated classes.                    
                </comment>
                <comment line="1281">
                    1. We can make grab-tracking emulation here more robust to variations in                    
                </comment>
                <comment line="1282">
                    in mouse-events order and consistence. E.g. by using such code:                    
                </comment>
                <comment line="1283">
                    if( grabbed &amp;&amp; event.getID()==MouseEvent.MOUSE_MOVED ) grabbed = false;                    
                </comment>
                <comment line="1284">
                    Or we can also use &apos;assert&apos;ions.                    
                </comment>
                <comment line="1285">
                    2. WARNING: Currently, while grab-detection mechanism _here_ says, that                    
                </comment>
                <comment line="1286">
                    grab is in progress, we do not update &apos;current&apos;.  In case &apos;current&apos;                    
                </comment>
                <comment line="1287">
                    is set to a scrollbar or to a scroll-button, then references to their                    
                </comment>
                <comment line="1288">
                    &apos;Component&apos;-instances are &quot;remembered&quot;. And events are dispatched to                    
                </comment>
                <comment line="1289">
                    these remembered components, without checking, if XTextAreaPeer has                    
                </comment>
                <comment line="1290">
                    replaced these instances with another ones. This also aplies to                    
                </comment>
                <comment line="1291">
                    mouse-drags-from-outside (see comment in &apos;grabbed_update&apos; method).                    
                </comment>
                <comment line="1307">
                    Following is internally private:                    
                </comment>
                <comment line="1309">
                    Here dispatching is performed, of &apos;MouseEvent&apos;s to (some)                    
                </comment>
                <comment line="1310">
                    &apos;XTextAreaPeer&apos;&apos;s (hidden) subcomponents.                    
                </comment>
                <comment line="1383">
                    Current way of grab-detection causes interesting (but harmless)                    
                </comment>
                <comment line="1384">
                    side-effect. If mouse is draged from outside to inside of TextArea,                    
                </comment>
                <comment line="1385">
                    we will then (in some cases) be asked to dispatch mouse-entered/exited                    
                </comment>
                <comment line="1386">
                    events. But, as at least one mouse-button is down, we will detect                    
                </comment>
                <comment line="1387">
                    grab-mode is on (though the grab isn&apos;t ours).                    
                </comment>
                <comment line="1388">
                                        
                </comment>
                <comment line="1389">
                    Thus, we will not update &apos;current&apos; (see &apos;handle&apos; method), and will                    
                </comment>
                <comment line="1390">
                    dispatch events to the last subcomponent, the &apos;current&apos; was set to.                    
                </comment>
                <comment line="1391">
                    As always, we set cursor in this case also. But, all this seems                    
                </comment>
                <comment line="1392">
                    harmless, because mouse entered/exited events seem to have no effect                    
                </comment>
                <comment line="1393">
                    here, and cursor setting is ignored in case of drags from outside.                    
                </comment>
                <comment line="1394">
                                        
                </comment>
                <comment line="1395">
                    Grab-detection can be further improved, e.g. by taking into account                    
                </comment>
                <comment line="1396">
                    current event-ID, but I see not point in doing it now.                    
                </comment>
                <comment line="1406">
                    &apos;toLocalSpace&apos; and &apos;toViewportChildLocalSpace&apos; can be &quot;optimized&quot; to                    
                </comment>
                <comment line="1407">
                    &apos;return&apos; &apos;void&apos; and use &apos;Point&apos; input-argument also as output.                    
                </comment>
                <method name="XAWTScrollBarUI" type="constructor" line="859"/>
                <method name="installDefaults" type="void" line="864"/>
                <method name="configureScrollBarColors" type="void" line="869">
                    <declaration name="uidefaults" type="UIDefaults" line="870"/>
                    <declaration name="bg" type="Color" line="871"/>
                    <scope line="872"/>
                    <declaration name="fg" type="Color" line="876"/>
                    <scope line="877"/>
                </method>
                <method name="createDecreaseButton" type="JButton" line="891">
                    <params>
                        <param name="orientation" type="int"/>
                    </params>
                    <declaration name="b" type="JButton" line="892"/>
                </method>
                <method name="createIncreaseButton" type="JButton" line="897">
                    <params>
                        <param name="orientation" type="int"/>
                    </params>
                    <declaration name="b" type="JButton" line="898"/>
                </method>
                <method name="getDecreaseButton" type="JButton" line="902"/>
                <method name="getIncreaseButton" type="JButton" line="906"/>
                <method name="paint" type="void" line="910">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="c" type="JComponent"/>
                    </params>
                    <declaration name="thumbBounds" type="Rectangle" line="912"/>
                </method>
                <method name="paintThumb" type="void" line="917">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="c" type="JComponent"/>
                        <param name="thumbBounds" type="Rectangle"/>
                    </params>
                    <scope line="918"/>
                    <declaration name="w" type="int" line="925"/>
                    <declaration name="h" type="int" line="926"/>
                </method>
            </class>
            <class name="AWTTextArea" line="945">
                <extends class="JTextArea"/>
                <comment line="676">
                    Fix for 5100950: textarea.getSelectedText() returns the de-selected text, on XToolkit                    
                </comment>
                <comment line="677">
                    Restoring Motif behaviour                    
                </comment>
                <comment line="678">
                    If the text is unhighlighted then we should sets the selection range to zero                    
                </comment>
                <comment line="1015">
                    Fix for 4915454 - override the default implementation to avoid                    
                </comment>
                <comment line="1016">
                    loading SystemFlavorMap and associated classes.                    
                </comment>
                <comment line="1281">
                    1. We can make grab-tracking emulation here more robust to variations in                    
                </comment>
                <comment line="1282">
                    in mouse-events order and consistence. E.g. by using such code:                    
                </comment>
                <comment line="1283">
                    if( grabbed &amp;&amp; event.getID()==MouseEvent.MOUSE_MOVED ) grabbed = false;                    
                </comment>
                <comment line="1284">
                    Or we can also use &apos;assert&apos;ions.                    
                </comment>
                <comment line="1285">
                    2. WARNING: Currently, while grab-detection mechanism _here_ says, that                    
                </comment>
                <comment line="1286">
                    grab is in progress, we do not update &apos;current&apos;.  In case &apos;current&apos;                    
                </comment>
                <comment line="1287">
                    is set to a scrollbar or to a scroll-button, then references to their                    
                </comment>
                <comment line="1288">
                    &apos;Component&apos;-instances are &quot;remembered&quot;. And events are dispatched to                    
                </comment>
                <comment line="1289">
                    these remembered components, without checking, if XTextAreaPeer has                    
                </comment>
                <comment line="1290">
                    replaced these instances with another ones. This also aplies to                    
                </comment>
                <comment line="1291">
                    mouse-drags-from-outside (see comment in &apos;grabbed_update&apos; method).                    
                </comment>
                <comment line="1307">
                    Following is internally private:                    
                </comment>
                <comment line="1309">
                    Here dispatching is performed, of &apos;MouseEvent&apos;s to (some)                    
                </comment>
                <comment line="1310">
                    &apos;XTextAreaPeer&apos;&apos;s (hidden) subcomponents.                    
                </comment>
                <comment line="1383">
                    Current way of grab-detection causes interesting (but harmless)                    
                </comment>
                <comment line="1384">
                    side-effect. If mouse is draged from outside to inside of TextArea,                    
                </comment>
                <comment line="1385">
                    we will then (in some cases) be asked to dispatch mouse-entered/exited                    
                </comment>
                <comment line="1386">
                    events. But, as at least one mouse-button is down, we will detect                    
                </comment>
                <comment line="1387">
                    grab-mode is on (though the grab isn&apos;t ours).                    
                </comment>
                <comment line="1388">
                                        
                </comment>
                <comment line="1389">
                    Thus, we will not update &apos;current&apos; (see &apos;handle&apos; method), and will                    
                </comment>
                <comment line="1390">
                    dispatch events to the last subcomponent, the &apos;current&apos; was set to.                    
                </comment>
                <comment line="1391">
                    As always, we set cursor in this case also. But, all this seems                    
                </comment>
                <comment line="1392">
                    harmless, because mouse entered/exited events seem to have no effect                    
                </comment>
                <comment line="1393">
                    here, and cursor setting is ignored in case of drags from outside.                    
                </comment>
                <comment line="1394">
                                        
                </comment>
                <comment line="1395">
                    Grab-detection can be further improved, e.g. by taking into account                    
                </comment>
                <comment line="1396">
                    current event-ID, but I see not point in doing it now.                    
                </comment>
                <comment line="1406">
                    &apos;toLocalSpace&apos; and &apos;toViewportChildLocalSpace&apos; can be &quot;optimized&quot; to                    
                </comment>
                <comment line="1407">
                    &apos;return&apos; &apos;void&apos; and use &apos;Point&apos; input-argument also as output.                    
                </comment>
                <implements interface="DocumentListener"/>
                <declaration name="isFocused" type="boolean" line="946"/>
                <declaration name="peer" type="XTextAreaPeer" line="947"/>
                <method name="AWTTextArea" type="constructor" line="949">
                    <params>
                        <param name="text" type="String"/>
                        <param name="peer" type="XTextAreaPeer"/>
                    </params>
                </method>
                <method name="insertUpdate" type="void" line="955">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                    </params>
                    <scope line="956"/>
                </method>
                <method name="removeUpdate" type="void" line="962">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                    </params>
                    <scope line="963"/>
                </method>
                <method name="changedUpdate" type="void" line="969">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                    </params>
                    <scope line="970"/>
                </method>
                <method name="forwardFocusGained" type="void" line="976">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                    <declaration name="fe" type="FocusEvent" line="978"/>
                </method>
                <method name="forwardFocusLost" type="void" line="983">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                    <declaration name="fe" type="FocusEvent" line="985"/>
                </method>
                <method name="hasFocus" type="boolean" line="989"/>
                <method name="repaintNow" type="void" line="993"/>
                <method name="processMouseEventPublic" type="void" line="997">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="processMouseMotionEventPublic" type="void" line="1001">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="processInputMethodEventPublic" type="void" line="1005">
                    <params>
                        <param name="e" type="InputMethodEvent"/>
                    </params>
                </method>
                <method name="updateUI" type="void" line="1009">
                    <declaration name="ui" type="ComponentUI" line="1010"/>
                </method>
                <method name="setTransferHandler" type="void" line="1016">
                    <params>
                        <param name="newHandler" type="TransferHandler"/>
                    </params>
                    <declaration name="oldHandler" type="TransferHandler" line="1017"/>
                </method>
            </class>
            <class name="XAWTScrollPaneUI" line="1027">
                <extends class="BasicScrollPaneUI"/>
                <comment line="676">
                    Fix for 5100950: textarea.getSelectedText() returns the de-selected text, on XToolkit                    
                </comment>
                <comment line="677">
                    Restoring Motif behaviour                    
                </comment>
                <comment line="678">
                    If the text is unhighlighted then we should sets the selection range to zero                    
                </comment>
                <comment line="1015">
                    Fix for 4915454 - override the default implementation to avoid                    
                </comment>
                <comment line="1016">
                    loading SystemFlavorMap and associated classes.                    
                </comment>
                <comment line="1281">
                    1. We can make grab-tracking emulation here more robust to variations in                    
                </comment>
                <comment line="1282">
                    in mouse-events order and consistence. E.g. by using such code:                    
                </comment>
                <comment line="1283">
                    if( grabbed &amp;&amp; event.getID()==MouseEvent.MOUSE_MOVED ) grabbed = false;                    
                </comment>
                <comment line="1284">
                    Or we can also use &apos;assert&apos;ions.                    
                </comment>
                <comment line="1285">
                    2. WARNING: Currently, while grab-detection mechanism _here_ says, that                    
                </comment>
                <comment line="1286">
                    grab is in progress, we do not update &apos;current&apos;.  In case &apos;current&apos;                    
                </comment>
                <comment line="1287">
                    is set to a scrollbar or to a scroll-button, then references to their                    
                </comment>
                <comment line="1288">
                    &apos;Component&apos;-instances are &quot;remembered&quot;. And events are dispatched to                    
                </comment>
                <comment line="1289">
                    these remembered components, without checking, if XTextAreaPeer has                    
                </comment>
                <comment line="1290">
                    replaced these instances with another ones. This also aplies to                    
                </comment>
                <comment line="1291">
                    mouse-drags-from-outside (see comment in &apos;grabbed_update&apos; method).                    
                </comment>
                <comment line="1307">
                    Following is internally private:                    
                </comment>
                <comment line="1309">
                    Here dispatching is performed, of &apos;MouseEvent&apos;s to (some)                    
                </comment>
                <comment line="1310">
                    &apos;XTextAreaPeer&apos;&apos;s (hidden) subcomponents.                    
                </comment>
                <comment line="1383">
                    Current way of grab-detection causes interesting (but harmless)                    
                </comment>
                <comment line="1384">
                    side-effect. If mouse is draged from outside to inside of TextArea,                    
                </comment>
                <comment line="1385">
                    we will then (in some cases) be asked to dispatch mouse-entered/exited                    
                </comment>
                <comment line="1386">
                    events. But, as at least one mouse-button is down, we will detect                    
                </comment>
                <comment line="1387">
                    grab-mode is on (though the grab isn&apos;t ours).                    
                </comment>
                <comment line="1388">
                                        
                </comment>
                <comment line="1389">
                    Thus, we will not update &apos;current&apos; (see &apos;handle&apos; method), and will                    
                </comment>
                <comment line="1390">
                    dispatch events to the last subcomponent, the &apos;current&apos; was set to.                    
                </comment>
                <comment line="1391">
                    As always, we set cursor in this case also. But, all this seems                    
                </comment>
                <comment line="1392">
                    harmless, because mouse entered/exited events seem to have no effect                    
                </comment>
                <comment line="1393">
                    here, and cursor setting is ignored in case of drags from outside.                    
                </comment>
                <comment line="1394">
                                        
                </comment>
                <comment line="1395">
                    Grab-detection can be further improved, e.g. by taking into account                    
                </comment>
                <comment line="1396">
                    current event-ID, but I see not point in doing it now.                    
                </comment>
                <comment line="1406">
                    &apos;toLocalSpace&apos; and &apos;toViewportChildLocalSpace&apos; can be &quot;optimized&quot; to                    
                </comment>
                <comment line="1407">
                    &apos;return&apos; &apos;void&apos; and use &apos;Point&apos; input-argument also as output.                    
                </comment>
                <declaration name="vsbMarginBorderR" type="Border" line="1029"/>
                <declaration name="vsbMarginBorderL" type="Border" line="1030"/>
                <declaration name="hsbMarginBorder" type="Border" line="1031"/>
                <declaration name="vsbBorder" type="Border" line="1033"/>
                <declaration name="hsbBorder" type="Border" line="1034"/>
                <declaration name="propertyChangeHandler" type="PropertyChangeListener" line="1036"/>
                <method name="installListeners" type="void" line="1038">
                    <params>
                        <param name="scrollPane" type="JScrollPane"/>
                    </params>
                </method>
                <method name="paint" type="void" line="1044">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="c" type="JComponent"/>
                    </params>
                    <declaration name="vpBorder" type="Border" line="1045"/>
                    <scope line="1046">
                        <declaration name="r" type="Rectangle" line="1047"/>
                    </scope>
                </method>
                <method name="uninstallListeners" type="void" line="1052">
                    <params>
                        <param name="scrollPane" type="JScrollPane"/>
                    </params>
                </method>
                <method name="createPropertyChangeHandler" type="PropertyChangeListener" line="1057">
                    <anonymous_class line="1058">
                        <method name="propertyChange" type="void" line="1059">
                            <params>
                                <param name="e" type="PropertyChangeEvent"/>
                            </params>
                            <declaration name="propertyName" type="String" line="1060"/>
                            <scope line="1062">
                                <declaration name="pane" type="JScrollPane" line="1063"/>
                                <declaration name="vsb" type="JScrollBar" line="1064"/>
                                <scope line="1065">
                                    <scope line="1066"/>
                                    <scope line="1069"/>
                                </scope>
                            </scope>
                        </method>
                    </anonymous_class>
                </method>
                <method name="isLeftToRight" type="boolean" line="1079">
                    <params>
                        <param name="c" type="Component"/>
                    </params>
                </method>
                <method name="installDefaults" type="void" line="1084">
                    <params>
                        <param name="scrollpane" type="JScrollPane"/>
                    </params>
                    <declaration name="b" type="Border" line="1085"/>
                    <declaration name="uidefaults" type="UIDefaults" line="1086"/>
                    <declaration name="vsb" type="JScrollBar" line="1090"/>
                    <scope line="1091">
                        <scope line="1092"/>
                        <scope line="1096"/>
                    </scope>
                    <declaration name="hsb" type="JScrollBar" line="1103"/>
                    <scope line="1104"/>
                </method>
                <method name="uninstallDefaults" type="void" line="1110">
                    <params>
                        <param name="c" type="JScrollPane"/>
                    </params>
                    <declaration name="vsb" type="JScrollBar" line="1113"/>
                    <scope line="1114">
                        <scope line="1115"/>
                    </scope>
                    <declaration name="hsb" type="JScrollBar" line="1121"/>
                    <scope line="1122">
                        <scope line="1123"/>
                    </scope>
                </method>
            </class>
            <class name="AWTTextPane" line="1132">
                <extends class="JScrollPane"/>
                <comment line="676">
                    Fix for 5100950: textarea.getSelectedText() returns the de-selected text, on XToolkit                    
                </comment>
                <comment line="677">
                    Restoring Motif behaviour                    
                </comment>
                <comment line="678">
                    If the text is unhighlighted then we should sets the selection range to zero                    
                </comment>
                <comment line="1015">
                    Fix for 4915454 - override the default implementation to avoid                    
                </comment>
                <comment line="1016">
                    loading SystemFlavorMap and associated classes.                    
                </comment>
                <comment line="1281">
                    1. We can make grab-tracking emulation here more robust to variations in                    
                </comment>
                <comment line="1282">
                    in mouse-events order and consistence. E.g. by using such code:                    
                </comment>
                <comment line="1283">
                    if( grabbed &amp;&amp; event.getID()==MouseEvent.MOUSE_MOVED ) grabbed = false;                    
                </comment>
                <comment line="1284">
                    Or we can also use &apos;assert&apos;ions.                    
                </comment>
                <comment line="1285">
                    2. WARNING: Currently, while grab-detection mechanism _here_ says, that                    
                </comment>
                <comment line="1286">
                    grab is in progress, we do not update &apos;current&apos;.  In case &apos;current&apos;                    
                </comment>
                <comment line="1287">
                    is set to a scrollbar or to a scroll-button, then references to their                    
                </comment>
                <comment line="1288">
                    &apos;Component&apos;-instances are &quot;remembered&quot;. And events are dispatched to                    
                </comment>
                <comment line="1289">
                    these remembered components, without checking, if XTextAreaPeer has                    
                </comment>
                <comment line="1290">
                    replaced these instances with another ones. This also aplies to                    
                </comment>
                <comment line="1291">
                    mouse-drags-from-outside (see comment in &apos;grabbed_update&apos; method).                    
                </comment>
                <comment line="1307">
                    Following is internally private:                    
                </comment>
                <comment line="1309">
                    Here dispatching is performed, of &apos;MouseEvent&apos;s to (some)                    
                </comment>
                <comment line="1310">
                    &apos;XTextAreaPeer&apos;&apos;s (hidden) subcomponents.                    
                </comment>
                <comment line="1383">
                    Current way of grab-detection causes interesting (but harmless)                    
                </comment>
                <comment line="1384">
                    side-effect. If mouse is draged from outside to inside of TextArea,                    
                </comment>
                <comment line="1385">
                    we will then (in some cases) be asked to dispatch mouse-entered/exited                    
                </comment>
                <comment line="1386">
                    events. But, as at least one mouse-button is down, we will detect                    
                </comment>
                <comment line="1387">
                    grab-mode is on (though the grab isn&apos;t ours).                    
                </comment>
                <comment line="1388">
                                        
                </comment>
                <comment line="1389">
                    Thus, we will not update &apos;current&apos; (see &apos;handle&apos; method), and will                    
                </comment>
                <comment line="1390">
                    dispatch events to the last subcomponent, the &apos;current&apos; was set to.                    
                </comment>
                <comment line="1391">
                    As always, we set cursor in this case also. But, all this seems                    
                </comment>
                <comment line="1392">
                    harmless, because mouse entered/exited events seem to have no effect                    
                </comment>
                <comment line="1393">
                    here, and cursor setting is ignored in case of drags from outside.                    
                </comment>
                <comment line="1394">
                                        
                </comment>
                <comment line="1395">
                    Grab-detection can be further improved, e.g. by taking into account                    
                </comment>
                <comment line="1396">
                    current event-ID, but I see not point in doing it now.                    
                </comment>
                <comment line="1406">
                    &apos;toLocalSpace&apos; and &apos;toViewportChildLocalSpace&apos; can be &quot;optimized&quot; to                    
                </comment>
                <comment line="1407">
                    &apos;return&apos; &apos;void&apos; and use &apos;Point&apos; input-argument also as output.                    
                </comment>
                <implements interface="FocusListener"/>
                <declaration name="jtext" type="JTextArea" line="1133"/>
                <declaration name="xwin" type="XWindow" line="1134"/>
                <declaration name="control" type="Color" line="1136"/>
                <declaration name="focus" type="Color" line="1137"/>
                <method name="AWTTextPane" type="constructor" line="1139">
                    <params>
                        <param name="jt" type="JTextArea"/>
                        <param name="xwin" type="XWindow"/>
                        <param name="parent" type="Container"/>
                    </params>
                </method>
                <method name="focusGained" type="void" line="1151">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                    <declaration name="g" type="Graphics" line="1152"/>
                    <declaration name="r" type="Rectangle" line="1153"/>
                </method>
                <method name="focusLost" type="void" line="1159">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                    <declaration name="g" type="Graphics" line="1160"/>
                    <declaration name="r" type="Rectangle" line="1161"/>
                </method>
                <method name="getRealParent" type="Window" line="1167"/>
                <method name="getPeer" type="ComponentPeer" line="1171"/>
                <method name="updateUI" type="void" line="1175">
                    <declaration name="ui" type="ComponentUI" line="1176"/>
                </method>
                <method name="createVerticalScrollBar" type="JScrollBar" line="1180"/>
                <method name="createHorizontalScrollBar" type="JScrollBar" line="1184"/>
                <method name="getTextArea" type="JTextArea" line="1188"/>
                <method name="getGraphics" type="Graphics" line="1192"/>
                <class name="XAWTScrollBar" line="1197">
                    <extends class="ScrollBar"/>
                    <method name="XAWTScrollBar" type="constructor" line="1199">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                    </method>
                    <method name="updateUI" type="void" line="1204">
                        <declaration name="ui" type="ComponentUI" line="1205"/>
                    </method>
                </class>
            </class>
            <class name="BevelBorder" line="1211">
                <extends class="AbstractBorder"/>
                <comment line="676">
                    Fix for 5100950: textarea.getSelectedText() returns the de-selected text, on XToolkit                    
                </comment>
                <comment line="677">
                    Restoring Motif behaviour                    
                </comment>
                <comment line="678">
                    If the text is unhighlighted then we should sets the selection range to zero                    
                </comment>
                <comment line="1015">
                    Fix for 4915454 - override the default implementation to avoid                    
                </comment>
                <comment line="1016">
                    loading SystemFlavorMap and associated classes.                    
                </comment>
                <comment line="1281">
                    1. We can make grab-tracking emulation here more robust to variations in                    
                </comment>
                <comment line="1282">
                    in mouse-events order and consistence. E.g. by using such code:                    
                </comment>
                <comment line="1283">
                    if( grabbed &amp;&amp; event.getID()==MouseEvent.MOUSE_MOVED ) grabbed = false;                    
                </comment>
                <comment line="1284">
                    Or we can also use &apos;assert&apos;ions.                    
                </comment>
                <comment line="1285">
                    2. WARNING: Currently, while grab-detection mechanism _here_ says, that                    
                </comment>
                <comment line="1286">
                    grab is in progress, we do not update &apos;current&apos;.  In case &apos;current&apos;                    
                </comment>
                <comment line="1287">
                    is set to a scrollbar or to a scroll-button, then references to their                    
                </comment>
                <comment line="1288">
                    &apos;Component&apos;-instances are &quot;remembered&quot;. And events are dispatched to                    
                </comment>
                <comment line="1289">
                    these remembered components, without checking, if XTextAreaPeer has                    
                </comment>
                <comment line="1290">
                    replaced these instances with another ones. This also aplies to                    
                </comment>
                <comment line="1291">
                    mouse-drags-from-outside (see comment in &apos;grabbed_update&apos; method).                    
                </comment>
                <comment line="1307">
                    Following is internally private:                    
                </comment>
                <comment line="1309">
                    Here dispatching is performed, of &apos;MouseEvent&apos;s to (some)                    
                </comment>
                <comment line="1310">
                    &apos;XTextAreaPeer&apos;&apos;s (hidden) subcomponents.                    
                </comment>
                <comment line="1383">
                    Current way of grab-detection causes interesting (but harmless)                    
                </comment>
                <comment line="1384">
                    side-effect. If mouse is draged from outside to inside of TextArea,                    
                </comment>
                <comment line="1385">
                    we will then (in some cases) be asked to dispatch mouse-entered/exited                    
                </comment>
                <comment line="1386">
                    events. But, as at least one mouse-button is down, we will detect                    
                </comment>
                <comment line="1387">
                    grab-mode is on (though the grab isn&apos;t ours).                    
                </comment>
                <comment line="1388">
                                        
                </comment>
                <comment line="1389">
                    Thus, we will not update &apos;current&apos; (see &apos;handle&apos; method), and will                    
                </comment>
                <comment line="1390">
                    dispatch events to the last subcomponent, the &apos;current&apos; was set to.                    
                </comment>
                <comment line="1391">
                    As always, we set cursor in this case also. But, all this seems                    
                </comment>
                <comment line="1392">
                    harmless, because mouse entered/exited events seem to have no effect                    
                </comment>
                <comment line="1393">
                    here, and cursor setting is ignored in case of drags from outside.                    
                </comment>
                <comment line="1394">
                                        
                </comment>
                <comment line="1395">
                    Grab-detection can be further improved, e.g. by taking into account                    
                </comment>
                <comment line="1396">
                    current event-ID, but I see not point in doing it now.                    
                </comment>
                <comment line="1406">
                    &apos;toLocalSpace&apos; and &apos;toViewportChildLocalSpace&apos; can be &quot;optimized&quot; to                    
                </comment>
                <comment line="1407">
                    &apos;return&apos; &apos;void&apos; and use &apos;Point&apos; input-argument also as output.                    
                </comment>
                <implements interface="UIResource"/>
                <declaration name="darkShadow" type="Color" line="1212"/>
                <declaration name="lightShadow" type="Color" line="1213"/>
                <declaration name="control" type="Color" line="1214"/>
                <declaration name="isRaised" type="boolean" line="1215"/>
                <method name="BevelBorder" type="constructor" line="1217">
                    <params>
                        <param name="isRaised" type="boolean"/>
                        <param name="darkShadow" type="Color"/>
                        <param name="lightShadow" type="Color"/>
                    </params>
                </method>
                <method name="paintBorder" type="void" line="1223">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                    <comment line="1225">
                        top                        
                    </comment>
                    <comment line="1226">
                        left                        
                    </comment>
                    <comment line="1229">
                        top                        
                    </comment>
                    <comment line="1230">
                        left                        
                    </comment>
                    <comment line="1233">
                        bottom                        
                    </comment>
                    <comment line="1234">
                        right                        
                    </comment>
                    <comment line="1237">
                        bottom                        
                    </comment>
                    <comment line="1238">
                        right                        
                    </comment>
                </method>
                <method name="getBorderInsets" type="Insets" line="1241">
                    <params>
                        <param name="c" type="Component"/>
                    </params>
                </method>
                <method name="getBorderInsets" type="Insets" line="1245">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="insets" type="Insets"/>
                    </params>
                </method>
                <method name="isOpaque" type="boolean" line="1250">
                    <params>
                        <param name="c" type="Component"/>
                    </params>
                </method>
            </class>
            <class name="JavaMouseEventHandler" line="1270">
                <comment line="676">
                    Fix for 5100950: textarea.getSelectedText() returns the de-selected text, on XToolkit                    
                </comment>
                <comment line="677">
                    Restoring Motif behaviour                    
                </comment>
                <comment line="678">
                    If the text is unhighlighted then we should sets the selection range to zero                    
                </comment>
                <comment line="1015">
                    Fix for 4915454 - override the default implementation to avoid                    
                </comment>
                <comment line="1016">
                    loading SystemFlavorMap and associated classes.                    
                </comment>
                <comment line="1281">
                    1. We can make grab-tracking emulation here more robust to variations in                    
                </comment>
                <comment line="1282">
                    in mouse-events order and consistence. E.g. by using such code:                    
                </comment>
                <comment line="1283">
                    if( grabbed &amp;&amp; event.getID()==MouseEvent.MOUSE_MOVED ) grabbed = false;                    
                </comment>
                <comment line="1284">
                    Or we can also use &apos;assert&apos;ions.                    
                </comment>
                <comment line="1285">
                    2. WARNING: Currently, while grab-detection mechanism _here_ says, that                    
                </comment>
                <comment line="1286">
                    grab is in progress, we do not update &apos;current&apos;.  In case &apos;current&apos;                    
                </comment>
                <comment line="1287">
                    is set to a scrollbar or to a scroll-button, then references to their                    
                </comment>
                <comment line="1288">
                    &apos;Component&apos;-instances are &quot;remembered&quot;. And events are dispatched to                    
                </comment>
                <comment line="1289">
                    these remembered components, without checking, if XTextAreaPeer has                    
                </comment>
                <comment line="1290">
                    replaced these instances with another ones. This also aplies to                    
                </comment>
                <comment line="1291">
                    mouse-drags-from-outside (see comment in &apos;grabbed_update&apos; method).                    
                </comment>
                <comment line="1307">
                    Following is internally private:                    
                </comment>
                <comment line="1309">
                    Here dispatching is performed, of &apos;MouseEvent&apos;s to (some)                    
                </comment>
                <comment line="1310">
                    &apos;XTextAreaPeer&apos;&apos;s (hidden) subcomponents.                    
                </comment>
                <comment line="1383">
                    Current way of grab-detection causes interesting (but harmless)                    
                </comment>
                <comment line="1384">
                    side-effect. If mouse is draged from outside to inside of TextArea,                    
                </comment>
                <comment line="1385">
                    we will then (in some cases) be asked to dispatch mouse-entered/exited                    
                </comment>
                <comment line="1386">
                    events. But, as at least one mouse-button is down, we will detect                    
                </comment>
                <comment line="1387">
                    grab-mode is on (though the grab isn&apos;t ours).                    
                </comment>
                <comment line="1388">
                                        
                </comment>
                <comment line="1389">
                    Thus, we will not update &apos;current&apos; (see &apos;handle&apos; method), and will                    
                </comment>
                <comment line="1390">
                    dispatch events to the last subcomponent, the &apos;current&apos; was set to.                    
                </comment>
                <comment line="1391">
                    As always, we set cursor in this case also. But, all this seems                    
                </comment>
                <comment line="1392">
                    harmless, because mouse entered/exited events seem to have no effect                    
                </comment>
                <comment line="1393">
                    here, and cursor setting is ignored in case of drags from outside.                    
                </comment>
                <comment line="1394">
                                        
                </comment>
                <comment line="1395">
                    Grab-detection can be further improved, e.g. by taking into account                    
                </comment>
                <comment line="1396">
                    current event-ID, but I see not point in doing it now.                    
                </comment>
                <comment line="1406">
                    &apos;toLocalSpace&apos; and &apos;toViewportChildLocalSpace&apos; can be &quot;optimized&quot; to                    
                </comment>
                <comment line="1407">
                    &apos;return&apos; &apos;void&apos; and use &apos;Point&apos; input-argument also as output.                    
                </comment>
                <declaration name="outer" type="XTextAreaPeer" line="1271"/>
                <declaration name="current" type="Pointer" line="1272"/>
                <declaration name="grabbed" type="boolean" line="1273"/>
                <method name="JavaMouseEventHandler" type="constructor" line="1275">
                    <params>
                        <param name="outer" type="XTextAreaPeer"/>
                    </params>
                </method>
                <method name="handle" type="void" line="1292">
                    <params>
                        <param name="event" type="MouseEvent"/>
                    </params>
                    <comment line="1294">
                        dispatch() needs up-to-date pointer in ungrabbed case.                        
                    </comment>
                    <scope line="1293"/>
                    <declaration name="wasGrabbed" type="boolean" line="1298"/>
                    <scope line="1300"/>
                </method>
                <method name="dispatch" type="void" line="1310">
                    <params>
                        <param name="event" type="MouseEvent"/>
                    </params>
                    <comment line="1326">
                        We perform (additional) dispatching of events to buttons of                        
                    </comment>
                    <comment line="1327">
                        scrollbar, instead of leaving it to JScrollbar. This is                        
                    </comment>
                    <comment line="1328">
                        required, because of different listeners in Swing and AWT,                        
                    </comment>
                    <comment line="1329">
                        which trigger scrolling (ArrowButtonListener vs. TrackListener,                        
                    </comment>
                    <comment line="1330">
                        accordingly). So we dispatch events to scroll-buttons, to                        
                    </comment>
                    <comment line="1331">
                        invoke a correct Swing button listener.                        
                    </comment>
                    <comment line="1332">
                        See CR 6175401 for more information.                        
                    </comment>
                    <declaration name="point" type="Point" line="1314"/>
                    <declaration name="jtext" type="XTextAreaPeer.AWTTextArea" line="1316"/>
                    <declaration name="newEvent" type="MouseEvent" line="1317"/>
                    <declaration name="id" type="int" line="1318"/>
                    <scope line="1319"/>
                    <scope line="1321"/>
                    <declaration name="c" type="Component" line="1335"/>
                    <declaration name="p" type="Point" line="1336"/>
                    <scope line="1337"/>
                </method>
                <method name="newMouseEvent" type="MouseEvent" line="1348">
                    <params>
                        <param name="source" type="Component"/>
                        <param name="point" type="Point"/>
                        <param name="template" type="MouseEvent"/>
                    </params>
                    <comment line="1357">
                        Because these MouseEvents are dispatched directly to                        
                    </comment>
                    <comment line="1358">
                        their target, we need to mark them as being                        
                    </comment>
                    <comment line="1359">
                        system-generated here                        
                    </comment>
                    <declaration name="e" type="MouseEvent" line="1349"/>
                    <declaration name="nme" type="MouseEvent" line="1350"/>
                </method>
                <method name="setCursor" type="void" line="1364">
                    <comment line="1366">
                        &apos;target.getCursor()&apos; is also applied from elsewhere                        
                    </comment>
                    <comment line="1367">
                        (at least now), but only when mouse &quot;entered&quot;, and                        
                    </comment>
                    <comment line="1368">
                        before &apos;XTextAreaPeer.handleJavaMouseEvent&apos; is invoked.                        
                    </comment>
                    <comment line="1372">
                        We can write here a more intelligent cursor selection                        
                    </comment>
                    <comment line="1373">
                        mechanism, like getting cursor from &apos;current&apos; component.                        
                    </comment>
                    <comment line="1374">
                        However, I see no point in doing so now. But if you feel                        
                    </comment>
                    <comment line="1375">
                        like implementing it, you&apos;ll probably need to introduce                        
                    </comment>
                    <comment line="1376">
                        &apos;Pointer.Type.PANEL&apos;.                        
                    </comment>
                    <scope line="1365"/>
                    <scope line="1371"/>
                </method>
                <method name="grabbed_update" type="void" line="1397">
                    <params>
                        <param name="event" type="MouseEvent"/>
                    </params>
                    <declaration name="allButtonsMask" type="int" line="1398"/>
                </method>
                <method name="toLocalSpace" type="Point" line="1408">
                    <params>
                        <param name="local" type="Component"/>
                        <param name="inParentSpace" type="Point"/>
                    </params>
                    <declaration name="p" type="Point" line="1409"/>
                    <declaration name="l" type="Point" line="1410"/>
                </method>
                <method name="toViewportChildLocalSpace" type="Point" line="1414">
                    <params>
                        <param name="v" type="JViewport"/>
                        <param name="inViewportParentSpace" type="Point"/>
                    </params>
                    <declaration name="l" type="Point" line="1415"/>
                    <declaration name="p" type="Point" line="1416"/>
                </method>
                <method name="setPointerToUnderPoint" type="void" line="1422">
                    <params>
                        <param name="point" type="Point"/>
                    </params>
                    <scope line="1423"/>
                    <scope line="1428">
                        <scope line="1431"/>
                    </scope>
                </method>
                <method name="setPointerIfPointOverScrollbar" type="boolean" line="1437">
                    <params>
                        <param name="bar" type="JScrollBar"/>
                        <param name="point" type="Point"/>
                    </params>
                    <scope line="1438"/>
                    <declaration name="local" type="Point" line="1442"/>
                    <declaration name="ui" type="XTextAreaPeer.XAWTScrollBarUI" line="1444"/>
                    <scope line="1447"/>
                </method>
                <method name="setPointerIfPointOverButton" type="boolean" line="1454">
                    <params>
                        <param name="button" type="JButton"/>
                        <param name="point" type="Point"/>
                    </params>
                    <scope line="1455"/>
                </method>
                <class name="Pointer" line="1462">
                    <method name="getType" type="Type" line="1466"/>
                    <method name="isNone" type="boolean" line="1469"/>
                    <method name="getBar" type="JScrollBar" line="1472">
                        <declaration name="ok" type="boolean" line="1473"/>
                    </method>
                    <method name="getButton" type="JButton" line="1477">
                        <declaration name="ok" type="boolean" line="1478"/>
                    </method>
                    <method name="setNone" type="void" line="1482"/>
                    <method name="setText" type="void" line="1485"/>
                    <method name="setBar" type="void" line="1488">
                        <params>
                            <param name="bar" type="JScrollBar"/>
                        </params>
                    </method>
                    <method name="setButton" type="void" line="1492">
                        <params>
                            <param name="button" type="JButton"/>
                        </params>
                    </method>
                    <declaration name="type" type="Type" line="1497"/>
                    <declaration name="bar" type="JScrollBar" line="1498"/>
                    <declaration name="button" type="JButton" line="1499"/>
                </class>
            </class>
        </class>
    </source>