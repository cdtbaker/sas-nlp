<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt.Frame"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="XNETProtocol" line="4">
            <extends class="XProtocol"/>
            <implements interface="XStateProtocol"/>
            <implements interface="XLayerProtocol"/>
            <declaration name="log" type="PlatformLogger" line="5"/>
            <declaration name="iconLog" type="PlatformLogger" line="6"/>
            <declaration name="stateLog" type="PlatformLogger" line="7"/>
            <javadoc line="8">
                XStateProtocol                
            </javadoc>
            <method name="supportsState" type="boolean" line="11">
                <params>
                    <param name="state" type="int"/>
                </params>
            </method>
            <method name="setState" type="void" line="14">
                <params>
                    <param name="window" type="XWindowPeer"/>
                    <param name="state" type="int"/>
                </params>
                <scope line="16"/>
                <scope line="19"/>
            </method>
            <method name="setInitialState" type="void" line="23">
                <params>
                    <param name="window" type="XWindowPeer"/>
                    <param name="state" type="int"/>
                </params>
                <declaration name="old_state" type="XAtomList" line="24"/>
                <scope line="26"/>
                <scope line="29"/>
                <scope line="32"/>
                <scope line="35"/>
            </method>
            <method name="requestState" type="void" line="41">
                <params>
                    <param name="window" type="XWindowPeer"/>
                    <param name="state" type="int"/>
                </params>
                <declaration name="old_net_state" type="int" line="42"/>
                <declaration name="max_changed" type="int" line="43"/>
                <declaration name="req" type="XClientMessageEvent" line="44"/>
                <scope line="45">
                    <scope line="71"/>
                    <scope line="74"/>
                </scope>
                <scope line="78"/>
            </method>
            <method name="getState" type="int" line="82">
                <params>
                    <param name="window" type="XWindowPeer"/>
                </params>
            </method>
            <method name="getStateImpl" type="int" line="85">
                <params>
                    <param name="window" type="XWindowPeer"/>
                </params>
                <declaration name="net_wm_state" type="XAtomList" line="86"/>
                <scope line="87"/>
                <declaration name="java_state" type="int" line="90"/>
                <scope line="91"/>
                <scope line="94"/>
            </method>
            <method name="isStateChange" type="boolean" line="99">
                <params>
                    <param name="e" type="XPropertyEvent"/>
                </params>
                <declaration name="res" type="boolean" line="100"/>
                <scope line="101">
                    <declaration name="wpeer" type="XWindowPeer" line="102"/>
                </scope>
            </method>
            <method name="unshadeKludge" type="void" line="107">
                <params>
                    <param name="window" type="XWindowPeer"/>
                </params>
                <declaration name="net_wm_state" type="XAtomList" line="108"/>
            </method>
            <javadoc line="112">
                XLayerProtocol                
            </javadoc>
            <method name="supportsLayer" type="boolean" line="115">
                <params>
                    <param name="layer" type="int"/>
                </params>
            </method>
            <method name="requestState" type="void" line="118">
                <params>
                    <param name="window" type="XWindow"/>
                    <param name="state" type="XAtom"/>
                    <param name="isAdd" type="boolean"/>
                </params>
                <declaration name="req" type="XClientMessageEvent" line="119"/>
                <scope line="120">
                    <scope line="130"/>
                    <scope line="133"/>
                </scope>
                <scope line="137"/>
            </method>
            <javadoc line="141">
                Helper function to set/reset one state in NET_WM_STATE
                  If window is showing then it uses ClientMessage, otherwise adjusts NET_WM_STATE list                
                <param>
                    window Window which NET_WM_STATE property is being modified                    
                </param>
                <param>
                    state State atom to be set/reset                    
                </param>
                <param>
                    reset Indicates operation, 'set' if false, 'reset' if true                    
                </param>
            </javadoc>
            <method name="setStateHelper" type="void" line="148">
                <params>
                    <param name="window" type="XWindowPeer"/>
                    <param name="state" type="XAtom"/>
                    <param name="set" type="boolean"/>
                </params>
                <scope line="150"/>
                <scope line="153">
                    <declaration name="net_wm_state" type="XAtomList" line="154"/>
                    <scope line="156"/>
                    <scope line="159"/>
                </scope>
            </method>
            <method name="setLayer" type="void" line="167">
                <params>
                    <param name="window" type="XWindowPeer"/>
                    <param name="layer" type="int"/>
                </params>
            </method>
            <declaration name="XA_UTF8_STRING" type="XAtom" line="170"/>
            <declaration name="XA_NET_SUPPORTING_WM_CHECK" type="XAtom" line="171"/>
            <declaration name="XA_NET_SUPPORTED" type="XAtom" line="172"/>
            <declaration name="XA_NET_WM_NAME" type="XAtom" line="173"/>
            <declaration name="XA_NET_WM_STATE" type="XAtom" line="174"/>
            <declaration name="XA_NET_WM_STATE_MAXIMIZED_HORZ" type="XAtom" line="175"/>
            <declaration name="XA_NET_WM_STATE_MAXIMIZED_VERT" type="XAtom" line="176"/>
            <declaration name="XA_NET_WM_STATE_SHADED" type="XAtom" line="177"/>
            <declaration name="XA_NET_WM_STATE_ABOVE" type="XAtom" line="178"/>
            <declaration name="XA_NET_WM_STATE_MODAL" type="XAtom" line="179"/>
            <declaration name="XA_NET_WM_STATE_FULLSCREEN" type="XAtom" line="180"/>
            <declaration name="XA_NET_WM_STATE_BELOW" type="XAtom" line="181"/>
            <declaration name="XA_NET_WM_STATE_HIDDEN" type="XAtom" line="182"/>
            <declaration name="XA_NET_WM_STATE_SKIP_TASKBAR" type="XAtom" line="183"/>
            <declaration name="XA_NET_WM_STATE_SKIP_PAGER" type="XAtom" line="184"/>
            <declaration name="XA_NET_WM_WINDOW_TYPE" type="XAtom" line="185"/>
            <declaration name="XA_NET_WM_WINDOW_TYPE_NORMAL" type="XAtom" line="186"/>
            <declaration name="XA_NET_WM_WINDOW_TYPE_DIALOG" type="XAtom" line="187"/>
            <declaration name="XA_NET_WM_WINDOW_TYPE_UTILITY" type="XAtom" line="188"/>
            <declaration name="XA_NET_WM_WINDOW_TYPE_POPUP_MENU" type="XAtom" line="189"/>
            <declaration name="XA_NET_WM_WINDOW_OPACITY" type="XAtom" line="190"/>
            <declaration name="_NET_WM_STATE_REMOVE" type="int" line="191"/>
            <declaration name="_NET_WM_STATE_ADD" type="int" line="192"/>
            <declaration name="_NET_WM_STATE_TOGGLE" type="int" line="193"/>
            <declaration name="supportChecked" type="boolean" line="194"/>
            <declaration name="NetWindow" type="long" line="195"/>
            <method name="detect" type="void" line="196">
                <scope line="197"/>
            </method>
            <method name="active" type="boolean" line="204"/>
            <method name="doStateProtocol" type="boolean" line="208">
                <declaration name="res" type="boolean" line="209"/>
            </method>
            <method name="doLayerProtocol" type="boolean" line="213">
                <declaration name="res" type="boolean" line="214"/>
            </method>
            <method name="doModalityProtocol" type="boolean" line="217">
                <declaration name="res" type="boolean" line="218"/>
            </method>
            <method name="doOpacityProtocol" type="boolean" line="221">
                <declaration name="res" type="boolean" line="222"/>
            </method>
            <method name="isWMName" type="boolean" line="225">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="226"/>
                <declaration name="net_wm_name_string" type="String" line="229"/>
                <scope line="230"/>
            </method>
            <declaration name="net_wm_name_cache" type="String" line="236"/>
            <method name="getWMName" type="String" line="237">
                <scope line="238"/>
                <scope line="241"/>
                <declaration name="charSet" type="String" line="244"/>
                <declaration name="net_wm_name" type="byte[]" line="245"/>
                <scope line="246"/>
                <scope line="250"/>
                <scope line="253"/>
                <scope line="257"/>
            </method>
            <javadoc line="261">
                Sets _NET_WM_ICON property on the window using the List of XIconInfo
                  If icons is null or empty list, removes _NET_WM_ICON property                
            </javadoc>
            <method name="setWMIcons" type="void" line="265">
                <params>
                    <param name="window" type="XWindowPeer"/>
                    <param name="icons" type="java.util.List<XIconInfo>"/>
                </params>
                <declaration name="iconsAtom" type="XAtom" line="267"/>
                <scope line="268"/>
                <declaration name="length" type="int" line="272"/>
                <scope line="273"/>
                <declaration name="cardinalSize" type="int" line="276"/>
                <declaration name="bufferSize" type="int" line="277"/>
                <scope line="278">
                    <declaration name="buffer" type="long" line="279"/>
                    <scope line="280">
                        <declaration name="ptr" type="long" line="281"/>
                        <scope line="282">
                            <declaration name="size" type="int" line="283"/>
                            <scope line="284"/>
                            <scope line="287"/>
                        </scope>
                    </scope>
                    <scope line="294"/>
                </scope>
                <scope line="298"/>
            </method>
            <method name="isWMStateNetHidden" type="boolean" line="302">
                <params>
                    <param name="window" type="XWindowPeer"/>
                </params>
                <scope line="303"/>
                <declaration name="state" type="XAtomList" line="306"/>
            </method>
        </class>
    </source>