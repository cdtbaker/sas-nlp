<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt.Frame"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="XNETProtocol" line="32">
            <extends class="XProtocol"/>
            <comment line="127">
                New &quot;NET&quot; WM spec: _NET_WM_STATEAtom[]                
            </comment>
            <comment line="156">
                Work around for 4775545.                
            </comment>
            <comment line="231">
                                
            </comment>
            <comment line="232">
                                
            </comment>
            <comment line="234">
                                
            </comment>
            <comment line="235">
                                
            </comment>
            <comment line="238">
                _NET_WM_STATE is a list of atoms.
                 NB: Standard spelling is &quot;HORZ&quot; (yes, without an &apos;I&apos;), but KDE2
                 uses misspelled &quot;HORIZ&quot; (see KDE bug #20229).  This was fixed in
                 KDE 2.2.  Under earlier versions of KDE2 horizontal and full
                 maximization doesn&apos;t work .                
            </comment>
            <comment line="264">
                                
            </comment>
            <comment line="265">
                                
            </comment>
            <comment line="266">
                                
            </comment>
            <comment line="267">
                                
            </comment>
            <implements interface="XStateProtocol"/>
            <implements interface="XLayerProtocol"/>
            <declaration name="log" type="PlatformLogger" line="34"/>
            <declaration name="iconLog" type="PlatformLogger" line="35"/>
            <declaration name="stateLog" type="PlatformLogger" line="36"/>
            <javadoc line="38">
                XStateProtocol                
            </javadoc>
            <method name="supportsState" type="boolean" line="41">
                <params>
                    <param name="state" type="int"/>
                </params>
                <comment line="43">
                    TODO - check for Frame constants                    
                </comment>
            </method>
            <method name="setState" type="void" line="45">
                <params>
                    <param name="window" type="XWindowPeer"/>
                    <param name="state" type="int"/>
                </params>
                <scope line="47"/>
                <scope line="49"/>
            </method>
            <method name="setInitialState" type="void" line="54">
                <params>
                    <param name="window" type="XWindowPeer"/>
                    <param name="state" type="int"/>
                </params>
                <declaration name="old_state" type="XAtomList" line="55"/>
                <scope line="57"/>
                <scope line="59"/>
                <scope line="62"/>
                <scope line="64"/>
            </method>
            <method name="requestState" type="void" line="71">
                <params>
                    <param name="window" type="XWindowPeer"/>
                    <param name="state" type="int"/>
                </params>
                <comment line="73">
                    We have to use toggle for maximization because of transitions
                     from maximization in one direction only to maximization in the
                     other direction only.                    
                </comment>
                <declaration name="old_net_state" type="int" line="77"/>
                <declaration name="max_changed" type="int" line="78"/>
                <declaration name="req" type="XClientMessageEvent" line="80"/>
                <scope line="81">
                    <scope line="107"/>
                    <scope line="114"/>
                </scope>
                <scope line="117"/>
            </method>
            <method name="getState" type="int" line="122">
                <params>
                    <param name="window" type="XWindowPeer"/>
                </params>
            </method>
            <method name="getStateImpl" type="int" line="129">
                <params>
                    <param name="window" type="XWindowPeer"/>
                </params>
                <declaration name="net_wm_state" type="XAtomList" line="130"/>
                <scope line="131"/>
                <declaration name="java_state" type="int" line="134"/>
                <scope line="135"/>
                <scope line="138"/>
            </method>
            <method name="isStateChange" type="boolean" line="144">
                <params>
                    <param name="e" type="XPropertyEvent"/>
                </params>
                <comment line="149">
                    Since state change happened, reset our cached state.  It will be re-read by getState                    
                </comment>
                <declaration name="res" type="boolean" line="145"/>
                <scope line="147">
                    <declaration name="wpeer" type="XWindowPeer" line="149"/>
                </scope>
            </method>
            <method name="unshadeKludge" type="void" line="158">
                <params>
                    <param name="window" type="XWindowPeer"/>
                </params>
                <declaration name="net_wm_state" type="XAtomList" line="159"/>
            </method>
            <javadoc line="164">
                XLayerProtocol                
            </javadoc>
            <method name="supportsLayer" type="boolean" line="167">
                <params>
                    <param name="layer" type="int"/>
                </params>
            </method>
            <method name="requestState" type="void" line="171">
                <params>
                    <param name="window" type="XWindow"/>
                    <param name="state" type="XAtom"/>
                    <param name="isAdd" type="boolean"/>
                </params>
                <comment line="181">
                    Fix for 6735584: req.data[2] must be set to 0 when only one property is changed                    
                </comment>
                <declaration name="req" type="XClientMessageEvent" line="172"/>
                <scope line="173">
                    <scope line="184"/>
                    <scope line="191"/>
                </scope>
                <scope line="194"/>
            </method>
            <javadoc line="199">
                Helper function to set/reset one state in NET_WM_STATE
                  If window is showing then it uses ClientMessage, otherwise adjusts NET_WM_STATE list                
                <param>
                    window Window which NET_WM_STATE property is being modified                    
                </param>
                <param>
                    state State atom to be set/reset                    
                </param>
                <param>
                    reset Indicates operation, 'set' if false, 'reset' if true                    
                </param>
            </javadoc>
            <method name="setStateHelper" type="void" line="206">
                <params>
                    <param name="window" type="XWindowPeer"/>
                    <param name="state" type="XAtom"/>
                    <param name="set" type="boolean"/>
                </params>
                <scope line="210"/>
                <scope line="212">
                    <declaration name="net_wm_state" type="XAtomList" line="213"/>
                    <scope line="215"/>
                    <scope line="217"/>
                </scope>
            </method>
            <method name="setLayer" type="void" line="226">
                <params>
                    <param name="window" type="XWindowPeer"/>
                    <param name="layer" type="int"/>
                </params>
            </method>
            <declaration name="XA_UTF8_STRING" type="XAtom" line="231"/>
            <declaration name="XA_NET_SUPPORTING_WM_CHECK" type="XAtom" line="232"/>
            <declaration name="XA_NET_SUPPORTED" type="XAtom" line="233"/>
            <declaration name="XA_NET_WM_NAME" type="XAtom" line="234"/>
            <declaration name="XA_NET_WM_STATE" type="XAtom" line="235"/>
            <declaration name="XA_NET_WM_STATE_MAXIMIZED_HORZ" type="XAtom" line="244"/>
            <declaration name="XA_NET_WM_STATE_MAXIMIZED_VERT" type="XAtom" line="245"/>
            <declaration name="XA_NET_WM_STATE_SHADED" type="XAtom" line="246"/>
            <declaration name="XA_NET_WM_STATE_ABOVE" type="XAtom" line="247"/>
            <declaration name="XA_NET_WM_STATE_MODAL" type="XAtom" line="248"/>
            <declaration name="XA_NET_WM_STATE_FULLSCREEN" type="XAtom" line="249"/>
            <declaration name="XA_NET_WM_STATE_BELOW" type="XAtom" line="250"/>
            <declaration name="XA_NET_WM_STATE_HIDDEN" type="XAtom" line="251"/>
            <declaration name="XA_NET_WM_STATE_SKIP_TASKBAR" type="XAtom" line="252"/>
            <declaration name="XA_NET_WM_STATE_SKIP_PAGER" type="XAtom" line="253"/>
            <declaration name="XA_NET_WM_WINDOW_TYPE" type="XAtom" line="255"/>
            <declaration name="XA_NET_WM_WINDOW_TYPE_NORMAL" type="XAtom" line="256"/>
            <declaration name="XA_NET_WM_WINDOW_TYPE_DIALOG" type="XAtom" line="257"/>
            <declaration name="XA_NET_WM_WINDOW_TYPE_UTILITY" type="XAtom" line="258"/>
            <declaration name="XA_NET_WM_WINDOW_TYPE_POPUP_MENU" type="XAtom" line="259"/>
            <declaration name="XA_NET_WM_WINDOW_OPACITY" type="XAtom" line="261"/>
            <declaration name="_NET_WM_STATE_REMOVE" type="int" line="264"/>
            <declaration name="_NET_WM_STATE_ADD" type="int" line="265"/>
            <declaration name="_NET_WM_STATE_TOGGLE" type="int" line="266"/>
            <declaration name="supportChecked" type="boolean" line="268"/>
            <declaration name="NetWindow" type="long" line="269"/>
            <method name="detect" type="void" line="270">
                <comment line="273">
                    TODO: How about detecting WM-restart or exit?                    
                </comment>
                <scope line="271"/>
            </method>
            <method name="active" type="boolean" line="280"/>
            <method name="doStateProtocol" type="boolean" line="285">
                <declaration name="res" type="boolean" line="286"/>
            </method>
            <method name="doLayerProtocol" type="boolean" line="291">
                <declaration name="res" type="boolean" line="292"/>
            </method>
            <method name="doModalityProtocol" type="boolean" line="296">
                <declaration name="res" type="boolean" line="297"/>
            </method>
            <method name="doOpacityProtocol" type="boolean" line="301">
                <declaration name="res" type="boolean" line="302"/>
            </method>
            <method name="isWMName" type="boolean" line="306">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="307"/>
                <declaration name="net_wm_name_string" type="String" line="310"/>
                <scope line="311"/>
            </method>
            <declaration name="net_wm_name_cache" type="String" line="318"/>
            <method name="getWMName" type="String" line="319">
                <comment line="329">
                    Check both UTF8_STRING and STRING.  We only call this function
                     with ASCII names and UTF8 preserves ASCII bit-wise.  wm-spec
                     mandates UTF8_STRING for _NET_WM_NAME but at least sawfish-1.0
                     still uses STRING.  (mmm, moving targets...).                    
                </comment>
                <scope line="320"/>
                <scope line="324"/>
                <declaration name="charSet" type="String" line="334"/>
                <declaration name="net_wm_name" type="byte[]" line="335"/>
                <scope line="336"/>
                <scope line="341"/>
                <scope line="344"/>
                <scope line="347"/>
            </method>
            <javadoc line="352">
                Sets _NET_WM_ICON property on the window using the List of XIconInfo
                  If icons is null or empty list, removes _NET_WM_ICON property                
            </javadoc>
            <method name="setWMIcons" type="void" line="356">
                <params>
                    <param name="window" type="XWindowPeer"/>
                    <param name="icons" type="java.util.List<XIconInfo>"/>
                </params>
                <declaration name="iconsAtom" type="XAtom" line="359"/>
                <scope line="360"/>
                <declaration name="length" type="int" line="365"/>
                <scope line="366"/>
                <declaration name="cardinalSize" type="int" line="369"/>
                <declaration name="bufferSize" type="int" line="370"/>
                <scope line="372">
                    <declaration name="buffer" type="long" line="373"/>
                    <scope line="374">
                        <declaration name="ptr" type="long" line="375"/>
                        <scope line="376">
                            <declaration name="size" type="int" line="377"/>
                            <scope line="378"/>
                            <scope line="380"/>
                        </scope>
                    </scope>
                    <scope line="386"/>
                </scope>
                <scope line="389"/>
            </method>
            <method name="isWMStateNetHidden" type="boolean" line="394">
                <params>
                    <param name="window" type="XWindowPeer"/>
                </params>
                <scope line="395"/>
                <declaration name="state" type="XAtomList" line="398"/>
            </method>
        </class>
    </source>