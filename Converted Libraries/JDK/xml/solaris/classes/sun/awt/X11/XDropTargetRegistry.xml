<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <import package="java.awt.Point"/>
        <class name="XDropTargetRegistry" line="39">
            <comment line="524">
                Returns a drop site that is embedded in the specified embedder window and
                 contains the point with the specified root coordinates.                
            </comment>
            <comment line="538">
                Note: this method should be called under AWT lock.                
            </comment>
            <comment line="579">
                Note: this method should be called under AWT lock.                
            </comment>
            <comment line="692">
                                
            </comment>
            <javadoc line="39">
                The class responsible for registration/deregistration of drop sites.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="logger" type="PlatformLogger" line="45"/>
            <declaration name="DELAYED_REGISTRATION_PERIOD" type="long" line="48"/>
            <declaration name="theInstance" type="XDropTargetRegistry" line="50"/>
            <declaration name="delayedRegistrationMap" type="HashMap&lt;Long,Runnable&gt;" line="53"/>
            <method name="XDropTargetRegistry" type="constructor" line="56"/>
            <method name="getRegistry" type="XDropTargetRegistry" line="58"/>
            <javadoc line="62">
                Returns the XID of the topmost window with WM_STATE set in the ancestor
                  heirarchy of the specified window or 0 if none found.                
            </javadoc>
            <method name="getToplevelWindow" type="long" line="66">
                <params>
                    <param name="window" type="long"/>
                </params>
                <comment line="76">
                    Traverse the ancestor tree from window up to the root and find                    
                </comment>
                <declaration name="candWindow" type="XBaseWindow" line="67"/>
                <scope line="68">
                    <declaration name="toplevel" type="XWindowPeer" line="69"/>
                    <scope line="70"/>
                </scope>
                <scope line="77">
                    <scope line="78"/>
                </scope>
            </method>
            <method name="getDnDProxyWindow" type="long" line="89"/>
            <class name="EmbeddedDropSiteEntry" line="93">
                <declaration name="root" type="long" line="94"/>
                <declaration name="event_mask" type="long" line="95"/>
                <declaration name="supportedProtocols" type="List&lt;XDropTargetProtocol&gt;" line="96"/>
                <declaration name="nonXEmbedClientSites" type="HashSet&lt;Long&gt;" line="97"/>
                <declaration name="sites" type="List&lt;Long&gt;" line="98"/>
                <method name="EmbeddedDropSiteEntry" type="constructor" line="101">
                    <params>
                        <param name="root" type="long"/>
                        <param name="event_mask" type="long"/>
                        <param name="supportedProtocols" type="List<XDropTargetProtocol>"/>
                    </params>
                    <scope line="102"/>
                </method>
                <method name="getRoot" type="long" line="110"/>
                <method name="getEventMask" type="long" line="113"/>
                <method name="hasNonXEmbedClientSites" type="boolean" line="116"/>
                <method name="addSite" type="void" line="119">
                    <params>
                        <param name="window" type="long"/>
                        <param name="isXEmbedClient" type="boolean"/>
                    </params>
                    <declaration name="lWindow" type="Long" line="120"/>
                    <scope line="121"/>
                    <scope line="124"/>
                </method>
                <method name="removeSite" type="void" line="128">
                    <params>
                        <param name="window" type="long"/>
                    </params>
                    <declaration name="lWindow" type="Long" line="129"/>
                </method>
                <method name="setSupportedProtocols" type="void" line="133">
                    <params>
                        <param name="list" type="List<XDropTargetProtocol>"/>
                    </params>
                </method>
                <method name="getSupportedProtocols" type="List<XDropTargetProtocol>" line="136"/>
                <method name="hasSites" type="boolean" line="139"/>
                <method name="getSites" type="long[]" line="142">
                    <declaration name="ret" type="long[]" line="143"/>
                    <declaration name="iter" type="Iterator" line="144"/>
                    <declaration name="index" type="int" line="145"/>
                    <scope line="146">
                        <declaration name="l" type="Long" line="147"/>
                    </scope>
                </method>
                <method name="getSite" type="long" line="152">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                    </params>
                    <declaration name="iter" type="Iterator&lt;Long&gt;" line="155"/>
                    <scope line="156">
                        <declaration name="l" type="Long" line="157"/>
                        <declaration name="window" type="long" line="158"/>
                        <declaration name="p" type="Point" line="160"/>
                        <scope line="162"/>
                        <declaration name="dest_x" type="int" line="166"/>
                        <declaration name="dest_y" type="int" line="167"/>
                        <scope line="168">
                            <declaration name="wattr" type="XWindowAttributes" line="169"/>
                            <scope line="170">
                                <declaration name="status" type="int" line="172"/>
                                <scope line="178"/>
                                <scope line="184"/>
                            </scope>
                            <scope line="187"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <declaration name="embeddedDropSiteRegistry" type="HashMap&lt;Long,EmbeddedDropSiteEntry&gt;" line="196"/>
            <method name="registerEmbedderDropSite" type="EmbeddedDropSiteEntry" line="199">
                <params>
                    <param name="embedder" type="long"/>
                </params>
                <comment line="205">
                    The list of protocols supported by the embedder.                    
                </comment>
                <comment line="218">
                    Grab server, since we are working with the window that belongs to                    
                </comment>
                <declaration name="dropTargetProtocols" type="Iterator" line="202"/>
                <declaration name="embedderProtocols" type="List&lt;XDropTargetProtocol&gt;" line="205"/>
                <scope line="207">
                    <declaration name="dropTargetProtocol" type="XDropTargetProtocol" line="208"/>
                    <scope line="210"/>
                </scope>
                <scope line="220">
                    <declaration name="root" type="long" line="221"/>
                    <declaration name="event_mask" type="long" line="222"/>
                    <declaration name="wattr" type="XWindowAttributes" line="223"/>
                    <scope line="224">
                        <declaration name="status" type="int" line="226"/>
                        <scope line="232"/>
                    </scope>
                    <scope line="238"/>
                    <scope line="242">
                        <scope line="249"/>
                    </scope>
                </scope>
                <scope line="255"/>
            </method>
            <declaration name="XEMBED_PROTOCOLS" type="boolean" line="260"/>
            <declaration name="NON_XEMBED_PROTOCOLS" type="boolean" line="261"/>
            <method name="registerProtocols" type="void" line="264">
                <params>
                    <param name="embedder" type="long"/>
                    <param name="protocols" type="boolean"/>
                    <param name="supportedProtocols" type="List<XDropTargetProtocol>"/>
                </params>
                <comment line="268">
                    By default, we register a drop site that supports all dnd
                     protocols. This approach is not appropriate in plugin
                     scenario if the browser supports Motif DnD and doesn&apos;t support
                     XDnD. If we forcibly set XdndAware on the browser toplevel, any drag
                     source that supports both protocols and prefers XDnD will be unable
                     to drop anything on the browser.
                     The solution for this problem is not to register XDnD drop site
                     if the browser supports only Motif DnD.
                     In general, if the browser already supports some protocols, we
                     register the embedded drop site only for those protocols. Otherwise
                     we register the embedded drop site for all protocols.                    
                </comment>
                <comment line="288">
                    Grab server, since we are working with the window that belongs to                    
                </comment>
                <declaration name="dropTargetProtocols" type="Iterator" line="265"/>
                <scope line="280"/>
                <scope line="282"/>
                <scope line="290">
                    <scope line="291">
                        <declaration name="dropTargetProtocol" type="XDropTargetProtocol" line="292"/>
                        <scope line="295"/>
                    </scope>
                </scope>
                <scope line="299"/>
            </method>
            <method name="updateEmbedderDropSite" type="void" line="304">
                <params>
                    <param name="embedder" type="long"/>
                </params>
                <comment line="307">
                    No need to update our own drop sites.                    
                </comment>
                <comment line="316">
                    The list of protocols supported by the embedder.                    
                </comment>
                <comment line="341">
                    By default, we register a drop site that supports all dnd
                     protocols. This approach is not appropriate in plugin
                     scenario if the browser supports Motif DnD and doesn&apos;t support
                     XDnD. If we forcibly set XdndAware on the browser toplevel, any drag
                     source that supports both protocols and prefers XDnD will be unable
                     to drop anything on the browser.
                     The solution for this problem is not to register XDnD drop site
                     if the browser supports only Motif DnD.
                     In general, if the browser already supports some protocols, we
                     register the embedded drop site only for those protocols. Otherwise
                     we register the embedded drop site for all protocols.                    
                </comment>
                <comment line="361">
                    Grab server, since we are working with the window that belongs to                    
                </comment>
                <declaration name="xbaseWindow" type="XBaseWindow" line="305"/>
                <scope line="307"/>
                <declaration name="dropTargetProtocols" type="Iterator" line="313"/>
                <declaration name="embedderProtocols" type="List&lt;XDropTargetProtocol&gt;" line="316"/>
                <scope line="318">
                    <declaration name="dropTargetProtocol" type="XDropTargetProtocol" line="319"/>
                    <scope line="321"/>
                </scope>
                <declaration name="lToplevel" type="Long" line="328"/>
                <declaration name="isXEmbedServer" type="boolean" line="329"/>
                <scope line="330">
                    <declaration name="entry" type="EmbeddedDropSiteEntry" line="331"/>
                    <scope line="333"/>
                </scope>
                <scope line="353"/>
                <scope line="355"/>
                <scope line="363">
                    <scope line="364">
                        <declaration name="dropTargetProtocol" type="XDropTargetProtocol" line="365"/>
                        <scope line="367"/>
                    </scope>
                </scope>
                <scope line="371"/>
            </method>
            <method name="unregisterEmbedderDropSite" type="void" line="377">
                <params>
                    <param name="embedder" type="long"/>
                    <param name="entry" type="EmbeddedDropSiteEntry"/>
                </params>
                <comment line="384">
                    Grab server, since we are working with the window that belongs to                    
                </comment>
                <comment line="396">
                                        
                </comment>
                <declaration name="dropTargetProtocols" type="Iterator" line="380"/>
                <scope line="386">
                    <scope line="387">
                        <declaration name="dropTargetProtocol" type="XDropTargetProtocol" line="388"/>
                    </scope>
                    <declaration name="event_mask" type="long" line="393"/>
                    <scope line="396">
                        <scope line="403"/>
                    </scope>
                </scope>
                <scope line="407"/>
            </method>
            <method name="registerEmbeddedDropSite" type="void" line="412">
                <params>
                    <param name="toplevel" type="long"/>
                    <param name="window" type="long"/>
                </params>
                <comment line="438">
                    Toplevel is an XEmbed server within this VM.
                     Register an XEmbed drop site.                    
                </comment>
                <comment line="441">
                    Create a dummy entry to register the embedded site.                    
                </comment>
                <comment line="445">
                    Foreign toplevel.
                     Select for PropertyNotify events on the toplevel, so that
                     we can track changes of the properties relevant to DnD
                     protocols.                    
                </comment>
                <comment line="450">
                    Register the toplevel with all DnD protocols that are not
                     supported by XEmbed - actually setup a proxy, so that
                     all DnD notifications sent to the toplevel are first
                     routed to us.                    
                </comment>
                <comment line="464">
                    For a foreign toplevel.                    
                </comment>
                <comment line="467">
                    Since this is not an XEmbed client we can no longer rely
                     on XEmbed to route DnD notifications even for DnD
                     protocols that are supported by XEmbed.
                     We rollback to the XEmbed-unfriendly solution - setup
                     a proxy, so that all DnD notifications sent to the
                     toplevel are first routed to us.                    
                </comment>
                <comment line="479">
                    Register the embedded window as a plain drop site with
                     all DnD protocols that are supported by XEmbed.                    
                </comment>
                <declaration name="xBaseWindow" type="XBaseWindow" line="413"/>
                <declaration name="isXEmbedClient" type="boolean" line="414"/>
                <declaration name="peer" type="XEmbedCanvasPeer" line="418"/>
                <scope line="419">
                    <declaration name="xbaseWindow" type="XBaseWindow" line="420"/>
                    <scope line="421">
                        <scope line="422"/>
                        <scope line="424"/>
                    </scope>
                </scope>
                <declaration name="lToplevel" type="Long" line="430"/>
                <declaration name="entry" type="EmbeddedDropSiteEntry" line="431"/>
                <scope line="432">
                    <scope line="435">
                        <scope line="436"/>
                        <scope line="443"/>
                    </scope>
                </scope>
                <scope line="462">
                    <scope line="464">
                        <scope line="465"/>
                        <scope line="474">
                            <declaration name="dropTargetProtocols" type="Iterator" line="475"/>
                            <scope line="480">
                                <declaration name="dropTargetProtocol" type="XDropTargetProtocol" line="481"/>
                                <scope line="483"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="unregisterEmbeddedDropSite" type="void" line="494">
                <params>
                    <param name="toplevel" type="long"/>
                    <param name="window" type="long"/>
                </params>
                <comment line="512">
                    Unregister an XEmbed drop site.                    
                </comment>
                <declaration name="lToplevel" type="Long" line="495"/>
                <declaration name="entry" type="EmbeddedDropSiteEntry" line="496"/>
                <scope line="497">
                    <scope line="500"/>
                    <scope line="504">
                        <declaration name="xbaseWindow" type="XBaseWindow" line="507"/>
                        <scope line="508">
                            <scope line="509">
                                <declaration name="peer" type="XEmbedCanvasPeer" line="510"/>
                            </scope>
                            <scope line="513"/>
                        </scope>
                        <scope line="516"/>
                    </scope>
                </scope>
            </method>
            <method name="getEmbeddedDropSite" type="long" line="527">
                <params>
                    <param name="embedder" type="long"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="lToplevel" type="Long" line="528"/>
                <declaration name="entry" type="EmbeddedDropSiteEntry" line="529"/>
                <scope line="531"/>
            </method>
            <method name="registerDropSite" type="void" line="540">
                <params>
                    <param name="window" type="long"/>
                </params>
                <comment line="552">
                    No window with WM_STATE property is found.
                     Since the window can be a plugin window reparented to the browser
                     toplevel, we cannot determine which window will eventually have
                     WM_STATE property set. So we schedule a timer callback that will
                     periodically attempt to find an ancestor with WM_STATE and
                     register the drop site appropriately.                    
                </comment>
                <scope line="543"/>
                <declaration name="toplevel" type="long" line="549"/>
                <scope line="559"/>
                <scope line="564">
                    <declaration name="dropTargetProtocols" type="Iterator" line="565"/>
                    <scope line="568">
                        <declaration name="dropTargetProtocol" type="XDropTargetProtocol" line="569"/>
                    </scope>
                </scope>
                <scope line="573"/>
            </method>
            <method name="unregisterDropSite" type="void" line="581">
                <params>
                    <param name="window" type="long"/>
                </params>
                <scope line="584"/>
                <declaration name="toplevel" type="long" line="588"/>
                <scope line="590">
                    <declaration name="dropProtocols" type="Iterator" line="591"/>
                    <scope line="596">
                        <declaration name="dropProtocol" type="XDropTargetProtocol" line="597"/>
                    </scope>
                </scope>
                <scope line="600"/>
            </method>
            <method name="registerXEmbedClient" type="void" line="605">
                <params>
                    <param name="canvasWindow" type="long"/>
                    <param name="clientWindow" type="long"/>
                </params>
                <comment line="607">
                    If the client has an associated XDnD drop site, add a drop target
                     to the XEmbedCanvasPeer&apos;s target to route drag notifications to the
                     client.                    
                </comment>
                <declaration name="xdndDragProtocol" type="XDragSourceProtocol" line="610"/>
                <declaration name="info" type="XDragSourceProtocol.TargetWindowInfo" line="612"/>
                <scope line="615">
                    <scope line="617"/>
                    <declaration name="dropTargetProtocols" type="Iterator" line="622"/>
                    <scope line="625">
                        <declaration name="dropTargetProtocol" type="XDropTargetProtocol" line="626"/>
                    </scope>
                    <scope line="631"/>
                </scope>
            </method>
            <method name="unregisterXEmbedClient" type="void" line="637">
                <params>
                    <param name="canvasWindow" type="long"/>
                    <param name="clientWindow" type="long"/>
                </params>
                <scope line="638"/>
                <declaration name="dropTargetProtocols" type="Iterator" line="641"/>
                <scope line="644">
                    <declaration name="dropTargetProtocol" type="XDropTargetProtocol" line="645"/>
                </scope>
                <scope line="652"/>
            </method>
            <javadoc line="657">
                Delayed drop site registration                
            </javadoc>
            <method name="addDelayedRegistrationEntry" type="void" line="659">
                <params>
                    <param name="window" type="long"/>
                </params>
                <declaration name="lWindow" type="Long" line="660"/>
                <anonymous_class line="661">
                    <method name="run" type="void" line="662"/>
                </anonymous_class>
                <declaration name="runnable" type="Runnable" line="661"/>
                <scope line="669"/>
                <scope line="673"/>
            </method>
            <method name="removeDelayedRegistrationEntry" type="void" line="678">
                <params>
                    <param name="window" type="long"/>
                </params>
                <declaration name="lWindow" type="Long" line="679"/>
                <scope line="682">
                    <declaration name="runnable" type="Runnable" line="683"/>
                    <scope line="684"/>
                </scope>
                <scope line="687"/>
            </method>
        </class>
    </source>