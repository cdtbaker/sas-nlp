<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.datatransfer.Clipboard"/>
        <import package="java.awt.dnd.DragSource"/>
        <import package="java.awt.dnd.DragGestureListener"/>
        <import package="java.awt.dnd.DragGestureEvent"/>
        <import package="java.awt.dnd.DragGestureRecognizer"/>
        <import package="java.awt.dnd.MouseDragGestureRecognizer"/>
        <import package="java.awt.dnd.InvalidDnDOperationException"/>
        <import package="java.awt.dnd.peer.DragSourceContextPeer"/>
        <import package="java.awt.im.InputMethodHighlight"/>
        <import package="java.awt.im.spi.InputMethodDescriptor"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.peer"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util"/>
        <import package="javax.swing.LookAndFeel"/>
        <import package="javax.swing.UIDefaults"/>
        <import package="sun.awt"/>
        <import package="sun.font.FontConfigManager"/>
        <import package="sun.font.FontManager"/>
        <import package="sun.misc.PerformanceLogger"/>
        <import package="sun.print.PrintJob2D"/>
        <import package="sun.security.action.GetBooleanAction"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="XToolkit" line="33">
            <extends class="UNIXToolkit"/>
            <implements interface="Runnable"/>
            <declaration name="log" type="PlatformLogger" line="34"/>
            <declaration name="eventLog" type="PlatformLogger" line="35"/>
            <declaration name="timeoutTaskLog" type="PlatformLogger" line="36"/>
            <declaration name="keyEventLog" type="PlatformLogger" line="37"/>
            <declaration name="backingStoreLog" type="PlatformLogger" line="38"/>
            <declaration name="AWT_MULTICLICK_DEFAULT_TIME" type="int" line="39"/>
            <declaration name="PRIMARY_LOOP" type="boolean" line="40"/>
            <declaration name="SECONDARY_LOOP" type="boolean" line="41"/>
            <declaration name="awtAppClassName" type="String" line="42"/>
            <declaration name="clipboard" type="XClipboard" line="43"/>
            <declaration name="selection" type="XClipboard" line="44"/>
            <declaration name="dynamicLayoutSetting" type="boolean" line="45"/>
            <declaration name="areExtraMouseButtonsEnabled" type="boolean" line="46"/>
            <declaration name="loadedXSettings" type="boolean" line="47"/>
            <javadoc line="47">
                True when the x settings have been loaded.                
            </javadoc>
            <declaration name="xs" type="XSettings" line="51"/>
            <javadoc line="51">
                XSETTINGS for the default screen.
                  &lt;p&gt;                
            </javadoc>
            <declaration name="fcManager" type="FontConfigManager" line="56"/>
            <declaration name="arrowCursor" type="int" line="57"/>
            <declaration name="winMap" type="TreeMap" line="58"/>
            <declaration name="specialPeerMap" type="HashMap" line="59"/>
            <declaration name="winToDispatcher" type="HashMap" line="60"/>
            <declaration name="_display" type="long" line="61"/>
            <declaration name="uidefaults" type="UIDefaults" line="62"/>
            <declaration name="localEnv" type="X11GraphicsEnvironment" line="63"/>
            <declaration name="device" type="X11GraphicsDevice" line="64"/>
            <declaration name="config" type="X11GraphicsConfig" line="65"/>
            <declaration name="awt_multiclick_time" type="int" line="66"/>
            <declaration name="securityWarningEnabled" type="boolean" line="67"/>
            <declaration name="screenWidth" type="int" line="68"/>
            <declaration name="awt_defaultFg" type="long" line="69"/>
            <declaration name="xPeer" type="XMouseInfoPeer" line="70"/>
            <declaration name="m_removeSourceEvents" type="Method" line="71"/>
            <scope line="72">
                <scope line="74"/>
                <scope line="77">
                    <scope line="81"/>
                </scope>
            </scope>
            <method name="getTrayIconDisplayTimeout" type="long" line="91"/>
            <declaration name="saved_error_handler" type="long" line="92"/>
            <declaration name="saved_error" type="XErrorEvent" line="93"/>
            <declaration name="current_error_handler" type="XErrorHandler" line="94"/>
            <declaration name="noisyAwtHandler" type="boolean" line="95"/>
            <method name="WITH_XERROR_HANDLER" type="void" line="96">
                <params>
                    <param name="handler" type="XErrorHandler"/>
                </params>
            </method>
            <method name="RESTORE_XERROR_HANDLER" type="void" line="100"/>
            <method name="SAVED_ERROR_HANDLER" type="int" line="104">
                <params>
                    <param name="display" type="long"/>
                    <param name="error" type="XErrorEvent"/>
                </params>
                <scope line="105"/>
                <scope line="107"/>
            </method>
            <method name="globalErrorHandler" type="int" line="112">
                <params>
                    <param name="display" type="long"/>
                    <param name="event_ptr" type="long"/>
                </params>
                <scope line="113"/>
                <declaration name="event" type="XErrorEvent" line="116"/>
                <scope line="118">
                    <scope line="119"/>
                    <scope line="122"/>
                </scope>
                <scope line="126"/>
            </method>
            <method name="initIDs" type="void" line="131"/>
            <method name="waitForEvents" type="void" line="132"/>
            <declaration name="toolkitThread" type="Thread" line="133"/>
            <method name="isToolkitThread" type="boolean" line="134"/>
            <method name="initSecurityWarning" type="void" line="137">
                <declaration name="runtime" type="String" line="138"/>
            </method>
            <method name="isSecurityWarningEnabled" type="boolean" line="141"/>
            <method name="awt_output_flush" type="void" line="144"/>
            <method name="awtFUnlock" type="void" line="145"/>
            <method name="nativeLoadSystemColors" type="void" line="149"/>
            <method name="getUIDefaults" type="UIDefaults" line="150">
                <scope line="151"/>
            </method>
            <method name="loadSystemColors" type="void" line="156">
                <params>
                    <param name="systemColors" type="int[]"/>
                </params>
            </method>
            <method name="initUIDefaults" type="void" line="160">
                <scope line="161">
                    <declaration name="c" type="Color" line="162"/>
                    <declaration name="lnf" type="LookAndFeel" line="163"/>
                </scope>
                <scope line="166"/>
            </method>
            <declaration name="displayLock" type="Object" line="170"/>
            <method name="getDisplay" type="long" line="171"/>
            <method name="getDefaultRootWindow" type="long" line="174">
                <scope line="176">
                    <declaration name="res" type="long" line="177"/>
                    <scope line="178"/>
                </scope>
                <scope line="183"/>
            </method>
            <method name="init" type="void" line="187">
                <scope line="189">
                    <scope line="191"/>
                    <declaration name="defaultScreen" type="AwtScreenData" line="195"/>
                </scope>
                <scope line="202"/>
                <anonymous_class line="205">
                    <method name="run" type="Void" line="206">
                        <declaration name="mainTG" type="ThreadGroup" line="207"/>
                        <declaration name="parentTG" type="ThreadGroup" line="208"/>
                        <scope line="209"/>
                        <anonymous_class line="213">
                            <method name="run" type="void" line="214">
                                <declaration name="peer" type="XSystemTrayPeer" line="215"/>
                                <scope line="216"/>
                                <scope line="219"/>
                                <scope line="223"/>
                            </method>
                        </anonymous_class>
                        <declaration name="shutdownThread" type="Thread" line="213"/>
                    </method>
                </anonymous_class>
                <declaration name="a" type="PrivilegedAction&lt;Void&gt;" line="205"/>
            </method>
            <method name="getCorrectXIDString" type="String" line="237">
                <params>
                    <param name="val" type="String"/>
                </params>
                <scope line="238"/>
                <scope line="241"/>
            </method>
            <method name="getEnv" type="String" line="245"/>
            <method name="getAWTAppClassName" type="String" line="246"/>
            <declaration name="DATA_TRANSFERER_CLASS_NAME" type="String" line="249"/>
            <method name="XToolkit" type="constructor" line="250">
                <scope line="252"/>
                <scope line="255">
                    <declaration name="mainClassName" type="String" line="256"/>
                    <declaration name="trace" type="StackTraceElement" line="257"/>
                    <declaration name="bottom" type="int" line="258"/>
                    <scope line="259"/>
                    <scope line="262"/>
                    <anonymous_class line="269">
                        <method name="run" type="Thread" line="270">
                            <declaration name="currentTG" type="ThreadGroup" line="271"/>
                            <declaration name="parentTG" type="ThreadGroup" line="272"/>
                            <scope line="273"/>
                            <declaration name="thread" type="Thread" line="277"/>
                        </method>
                    </anonymous_class>
                    <declaration name="action" type="PrivilegedAction&lt;Thread&gt;" line="269"/>
                </scope>
            </method>
            <method name="createButton" type="ButtonPeer" line="288">
                <params>
                    <param name="target" type="Button"/>
                </params>
                <declaration name="peer" type="ButtonPeer" line="289"/>
            </method>
            <method name="createFrame" type="FramePeer" line="293">
                <params>
                    <param name="target" type="Frame"/>
                </params>
                <declaration name="peer" type="FramePeer" line="294"/>
            </method>
            <method name="addToWinMap" type="void" line="298">
                <params>
                    <param name="window" type="long"/>
                    <param name="xwin" type="XBaseWindow"/>
                </params>
                <scope line="299"/>
            </method>
            <method name="removeFromWinMap" type="void" line="303">
                <params>
                    <param name="window" type="long"/>
                    <param name="xwin" type="XBaseWindow"/>
                </params>
                <scope line="304"/>
            </method>
            <method name="windowToXWindow" type="XBaseWindow" line="308">
                <params>
                    <param name="window" type="long"/>
                </params>
                <scope line="309"/>
            </method>
            <method name="addEventDispatcher" type="void" line="313">
                <params>
                    <param name="window" type="long"/>
                    <param name="dispatcher" type="XEventDispatcher"/>
                </params>
                <scope line="314">
                    <declaration name="key" type="Long" line="315"/>
                    <declaration name="dispatchers" type="Collection" line="316"/>
                    <scope line="317"/>
                </scope>
            </method>
            <method name="removeEventDispatcher" type="void" line="324">
                <params>
                    <param name="window" type="long"/>
                    <param name="dispatcher" type="XEventDispatcher"/>
                </params>
                <scope line="325">
                    <declaration name="key" type="Long" line="326"/>
                    <declaration name="dispatchers" type="Collection" line="327"/>
                    <scope line="328"/>
                </scope>
            </method>
            <declaration name="lastCursorPos" type="Point" line="333"/>
            <javadoc line="334">
                Returns whether there is last remembered cursor position.  The
                  position is remembered from X mouse events on our peers.  The
                  position is stored in &lt;code&gt;p&lt;/code&gt;.                
                <return>
                    true, if there is remembered last cursor position,
                      false otherwise                    
                </return>
            </javadoc>
            <method name="getLastCursorPos" type="boolean" line="341">
                <params>
                    <param name="p" type="Point"/>
                </params>
                <scope line="343">
                    <scope line="344"/>
                </scope>
                <scope line="350"/>
            </method>
            <method name="processGlobalMotionEvent" type="void" line="354">
                <params>
                    <param name="e" type="XEvent"/>
                </params>
                <scope line="355">
                    <declaration name="ev" type="XMotionEvent" line="356"/>
                    <scope line="358">
                        <scope line="359"/>
                        <scope line="362"/>
                    </scope>
                    <scope line="366"/>
                </scope>
                <scope line="370">
                    <scope line="372"/>
                    <scope line="375"/>
                </scope>
                <scope line="379">
                    <declaration name="ev" type="XCrossingEvent" line="380"/>
                    <scope line="382">
                        <scope line="383"/>
                        <scope line="386"/>
                    </scope>
                    <scope line="390"/>
                </scope>
            </method>
            <interface name="XEventListener">
                <method name="eventProcessed" type="void" line="396"/>
            </interface>
            <declaration name="listeners" type="Collection&lt;XEventListener&gt;" line="398"/>
            <method name="addXEventListener" type="void" line="399">
                <params>
                    <param name="listener" type="XEventListener"/>
                </params>
                <scope line="400"/>
            </method>
            <method name="notifyListeners" type="void" line="404">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <scope line="405">
                    <declaration name="copy" type="XEvent" line="407"/>
                    <scope line="408">
                        <scope line="409"/>
                    </scope>
                    <scope line="413"/>
                </scope>
            </method>
            <method name="dispatchEvent" type="void" line="418">
                <params>
                    <param name="ev" type="XEvent"/>
                </params>
                <declaration name="xany" type="XAnyEvent" line="419"/>
                <scope line="420"/>
                <scope line="423"/>
                <declaration name="dispatchers" type="Collection" line="429"/>
                <scope line="430">
                    <declaration name="key" type="Long" line="431"/>
                    <scope line="433"/>
                </scope>
                <scope line="437">
                    <declaration name="iter" type="Iterator" line="438"/>
                    <scope line="439">
                        <declaration name="disp" type="XEventDispatcher" line="440"/>
                    </scope>
                </scope>
            </method>
            <method name="processException" type="void" line="446">
                <params>
                    <param name="thr" type="Throwable"/>
                </params>
                <scope line="447"/>
            </method>
            <method name="awt_toolkit_init" type="void" line="451"/>
            <method name="run" type="void" line="452"/>
            <method name="run" type="void" line="456">
                <params>
                    <param name="loop" type="boolean"/>
                </params>
                <declaration name="ev" type="XEvent" line="457"/>
                <scope line="458">
                    <scope line="459">
                        <scope line="460"/>
                    </scope>
                    <scope line="465">
                        <scope line="466">
                            <scope line="467"/>
                        </scope>
                        <scope line="471">
                            <scope line="473"/>
                        </scope>
                        <scope line="479"/>
                        <scope line="482"/>
                        <scope line="485"/>
                        <scope line="488"/>
                        <declaration name="w" type="long" line="491"/>
                        <scope line="492">
                            <declaration name="owner" type="Component" line="493"/>
                            <scope line="494">
                                <declaration name="ownerWindow" type="XWindow" line="495"/>
                                <scope line="496"/>
                            </scope>
                        </scope>
                        <scope line="501"/>
                        <scope line="504"/>
                        <scope line="507"/>
                    </scope>
                    <scope line="512"/>
                    <scope line="516"/>
                    <scope line="520"/>
                </scope>
            </method>
            <method name="getDefaultScreenWidth" type="int" line="525">
                <scope line="526">
                    <declaration name="display" type="long" line="527"/>
                    <scope line="529"/>
                    <scope line="532"/>
                </scope>
            </method>
            <method name="getDefaultScreenHeight" type="int" line="538">
                <scope line="539">
                    <declaration name="display" type="long" line="540"/>
                    <scope line="542"/>
                    <scope line="545"/>
                </scope>
            </method>
            <method name="getScreenWidth" type="int" line="551"/>
            <method name="getScreenHeight" type="int" line="554"/>
            <method name="getWorkArea" type="Rectangle" line="557">
                <params>
                    <param name="root" type="long"/>
                </params>
                <declaration name="XA_NET_WORKAREA" type="XAtom" line="558"/>
                <declaration name="native_ptr" type="long" line="559"/>
                <scope line="560">
                    <declaration name="workareaPresent" type="boolean" line="561"/>
                    <scope line="562">
                        <declaration name="rootX" type="int" line="563"/>
                        <declaration name="rootY" type="int" line="564"/>
                        <declaration name="rootWidth" type="int" line="565"/>
                        <declaration name="rootHeight" type="int" line="566"/>
                    </scope>
                </scope>
                <scope line="570"/>
            </method>
            <method name="getScreenInsets" type="Insets" line="575">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
                <declaration name="netProto" type="XNETProtocol" line="576"/>
                <scope line="577"/>
                <scope line="581">
                    <declaration name="x11gc" type="X11GraphicsConfig" line="582"/>
                    <declaration name="x11gd" type="X11GraphicsDevice" line="583"/>
                    <declaration name="root" type="long" line="584"/>
                    <declaration name="rootBounds" type="Rectangle" line="585"/>
                    <declaration name="x11ge" type="X11GraphicsEnvironment" line="586"/>
                    <scope line="587">
                        <declaration name="workArea" type="Rectangle" line="588"/>
                        <scope line="589"/>
                    </scope>
                </scope>
                <scope line="595"/>
            </method>
            <method name="getScreenInsetsManually" type="Insets" line="599">
                <params>
                    <param name="root" type="long"/>
                    <param name="rootBounds" type="Rectangle"/>
                    <param name="screenBounds" type="Rectangle"/>
                </params>
                <declaration name="MAX_NESTED_LEVEL" type="int" line="600"/>
                <declaration name="XA_NET_WM_STRUT" type="XAtom" line="601"/>
                <declaration name="XA_NET_WM_STRUT_PARTIAL" type="XAtom" line="602"/>
                <declaration name="insets" type="Insets" line="603"/>
                <declaration name="search" type="java.util.List" line="604"/>
                <scope line="607">
                    <declaration name="window" type="long" line="608"/>
                    <declaration name="windowLevel" type="int" line="609"/>
                    <scope line="610"/>
                    <declaration name="native_ptr" type="long" line="613"/>
                    <scope line="614">
                        <declaration name="strutPresent" type="boolean" line="615"/>
                        <scope line="616"/>
                        <scope line="619">
                            <declaration name="windowBounds" type="Rectangle" line="620"/>
                            <scope line="621"/>
                            <scope line="624"/>
                        </scope>
                    </scope>
                    <scope line="632"/>
                    <scope line="635">
                        <declaration name="children" type="Set&lt;Long&gt;" line="636"/>
                        <scope line="637"/>
                    </scope>
                </scope>
            </method>
            <method name="targetToPeer" type="Object" line="645">
                <params>
                    <param name="target" type="Object"/>
                </params>
                <declaration name="p" type="Object" line="646"/>
                <scope line="647"/>
            </method>
            <method name="targetDisposedPeer" type="void" line="653">
                <params>
                    <param name="target" type="Object"/>
                    <param name="peer" type="Object"/>
                </params>
            </method>
            <method name="createRobot" type="RobotPeer" line="656">
                <params>
                    <param name="target" type="Robot"/>
                    <param name="screen" type="GraphicsDevice"/>
                </params>
            </method>
            <method name="setDynamicLayout" type="void" line="659">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <method name="isDynamicLayoutSet" type="boolean" line="662"/>
            <method name="isDynamicLayoutSupported" type="boolean" line="665"/>
            <method name="isDynamicLayoutActive" type="boolean" line="668"/>
            <method name="getFontPeer" type="FontPeer" line="671">
                <params>
                    <param name="name" type="String"/>
                    <param name="style" type="int"/>
                </params>
            </method>
            <method name="createDragSourceContextPeer" type="DragSourceContextPeer" line="674">
                <params>
                    <param name="dge" type="DragGestureEvent"/>
                </params>
            </method>
            <method name="createDragGestureRecognizer" type="T" line="677">
                <params>
                    <param name="recognizerClass" type="Class<T>"/>
                    <param name="ds" type="DragSource"/>
                    <param name="c" type="Component"/>
                    <param name="srcActions" type="int"/>
                    <param name="dgl" type="DragGestureListener"/>
                </params>
            </method>
            <method name="createCheckboxMenuItem" type="CheckboxMenuItemPeer" line="681">
                <params>
                    <param name="target" type="CheckboxMenuItem"/>
                </params>
                <declaration name="peer" type="XCheckboxMenuItemPeer" line="682"/>
            </method>
            <method name="createMenuItem" type="MenuItemPeer" line="685">
                <params>
                    <param name="target" type="MenuItem"/>
                </params>
                <declaration name="peer" type="XMenuItemPeer" line="686"/>
            </method>
            <method name="createTextField" type="TextFieldPeer" line="689">
                <params>
                    <param name="target" type="TextField"/>
                </params>
                <declaration name="peer" type="TextFieldPeer" line="690"/>
            </method>
            <method name="createLabel" type="LabelPeer" line="694">
                <params>
                    <param name="target" type="Label"/>
                </params>
                <declaration name="peer" type="LabelPeer" line="695"/>
            </method>
            <method name="createList" type="ListPeer" line="699">
                <params>
                    <param name="target" type="java.awt.List"/>
                </params>
                <declaration name="peer" type="ListPeer" line="700"/>
            </method>
            <method name="createCheckbox" type="CheckboxPeer" line="704">
                <params>
                    <param name="target" type="Checkbox"/>
                </params>
                <declaration name="peer" type="CheckboxPeer" line="705"/>
            </method>
            <method name="createScrollbar" type="ScrollbarPeer" line="709">
                <params>
                    <param name="target" type="Scrollbar"/>
                </params>
                <declaration name="peer" type="XScrollbarPeer" line="710"/>
            </method>
            <method name="createScrollPane" type="ScrollPanePeer" line="714">
                <params>
                    <param name="target" type="ScrollPane"/>
                </params>
                <declaration name="peer" type="XScrollPanePeer" line="715"/>
            </method>
            <method name="createTextArea" type="TextAreaPeer" line="719">
                <params>
                    <param name="target" type="TextArea"/>
                </params>
                <declaration name="peer" type="TextAreaPeer" line="720"/>
            </method>
            <method name="createChoice" type="ChoicePeer" line="724">
                <params>
                    <param name="target" type="Choice"/>
                </params>
                <declaration name="peer" type="XChoicePeer" line="725"/>
            </method>
            <method name="createCanvas" type="CanvasPeer" line="729">
                <params>
                    <param name="target" type="Canvas"/>
                </params>
                <declaration name="peer" type="XCanvasPeer" line="730"/>
            </method>
            <method name="createPanel" type="PanelPeer" line="734">
                <params>
                    <param name="target" type="Panel"/>
                </params>
                <declaration name="peer" type="PanelPeer" line="735"/>
            </method>
            <method name="createWindow" type="WindowPeer" line="739">
                <params>
                    <param name="target" type="Window"/>
                </params>
                <declaration name="peer" type="WindowPeer" line="740"/>
            </method>
            <method name="createDialog" type="DialogPeer" line="744">
                <params>
                    <param name="target" type="Dialog"/>
                </params>
                <declaration name="peer" type="DialogPeer" line="745"/>
            </method>
            <declaration name="sunAwtDisableGtkFileDialogs" type="Boolean" line="749"/>
            <javadoc line="750">
                Returns the value of &quot;sun.awt.disableGtkFileDialogs&quot; property. Default
                  value is {@code false}.                
            </javadoc>
            <method name="getSunAwtDisableGtkFileDialogs" type="boolean" line="754">
                <scope line="755"/>
            </method>
            <method name="createFileDialog" type="FileDialogPeer" line="760">
                <params>
                    <param name="target" type="FileDialog"/>
                </params>
                <declaration name="peer" type="FileDialogPeer" line="761"/>
                <scope line="762"/>
                <scope line="765"/>
            </method>
            <method name="createMenuBar" type="MenuBarPeer" line="771">
                <params>
                    <param name="target" type="MenuBar"/>
                </params>
                <declaration name="peer" type="XMenuBarPeer" line="772"/>
            </method>
            <method name="createMenu" type="MenuPeer" line="776">
                <params>
                    <param name="target" type="Menu"/>
                </params>
                <declaration name="peer" type="XMenuPeer" line="777"/>
            </method>
            <method name="createPopupMenu" type="PopupMenuPeer" line="780">
                <params>
                    <param name="target" type="PopupMenu"/>
                </params>
                <declaration name="peer" type="XPopupMenuPeer" line="781"/>
            </method>
            <method name="getMouseInfoPeer" type="MouseInfoPeer" line="785">
                <scope line="786"/>
            </method>
            <method name="createEmbeddedFrame" type="XEmbeddedFramePeer" line="791">
                <params>
                    <param name="target" type="XEmbeddedFrame"/>
                </params>
                <declaration name="peer" type="XEmbeddedFramePeer" line="792"/>
            </method>
            <method name="createEmbedProxy" type="XEmbedChildProxyPeer" line="796">
                <params>
                    <param name="target" type="XEmbedChildProxy"/>
                </params>
                <declaration name="peer" type="XEmbedChildProxyPeer" line="797"/>
            </method>
            <method name="createKeyboardFocusManagerPeer" type="KeyboardFocusManagerPeer" line="801">
                <params>
                    <param name="manager" type="KeyboardFocusManager"/>
                </params>
                <declaration name="peer" type="XKeyboardFocusManagerPeer" line="802"/>
            </method>
            <javadoc line="805">
                Returns a new custom cursor.                
            </javadoc>
            <method name="createCustomCursor" type="Cursor" line="808">
                <params>
                    <param name="cursor" type="Image"/>
                    <param name="hotSpot" type="Point"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="createTrayIcon" type="TrayIconPeer" line="811">
                <params>
                    <param name="target" type="TrayIcon"/>
                </params>
                <declaration name="peer" type="TrayIconPeer" line="812"/>
            </method>
            <method name="createSystemTray" type="SystemTrayPeer" line="816">
                <params>
                    <param name="target" type="SystemTray"/>
                </params>
                <declaration name="peer" type="SystemTrayPeer" line="817"/>
            </method>
            <method name="isTraySupported" type="boolean" line="820">
                <declaration name="peer" type="XSystemTrayPeer" line="821"/>
                <scope line="822"/>
            </method>
            <javadoc line="827">
                Returns the supported cursor size                
            </javadoc>
            <method name="getBestCursorSize" type="Dimension" line="830">
                <params>
                    <param name="preferredWidth" type="int"/>
                    <param name="preferredHeight" type="int"/>
                </params>
            </method>
            <method name="getMaximumCursorColors" type="int" line="833"/>
            <method name="mapInputMethodHighlight" type="Map" line="836">
                <params>
                    <param name="highlight" type="InputMethodHighlight"/>
                </params>
            </method>
            <method name="getLockingKeyState" type="boolean" line="839">
                <params>
                    <param name="key" type="int"/>
                </params>
                <scope line="840"/>
                <scope line="844"/>
                <scope line="847"/>
            </method>
            <method name="getSystemClipboard" type="Clipboard" line="851">
                <declaration name="security" type="SecurityManager" line="852"/>
                <scope line="853"/>
                <scope line="856">
                    <scope line="857"/>
                </scope>
            </method>
            <method name="getSystemSelection" type="Clipboard" line="863">
                <declaration name="security" type="SecurityManager" line="864"/>
                <scope line="865"/>
                <scope line="868">
                    <scope line="869"/>
                </scope>
            </method>
            <method name="beep" type="void" line="875">
                <scope line="877"/>
                <scope line="881"/>
            </method>
            <method name="getPrintJob" type="PrintJob" line="885">
                <params>
                    <param name="frame" type="Frame"/>
                    <param name="doctitle" type="String"/>
                    <param name="props" type="Properties"/>
                </params>
                <scope line="886"/>
                <declaration name="printJob" type="PrintJob2D" line="889"/>
                <scope line="890"/>
            </method>
            <method name="getPrintJob" type="PrintJob" line="895">
                <params>
                    <param name="frame" type="Frame"/>
                    <param name="doctitle" type="String"/>
                    <param name="jobAttributes" type="JobAttributes"/>
                    <param name="pageAttributes" type="PageAttributes"/>
                </params>
                <scope line="896"/>
                <declaration name="printJob" type="PrintJob2D" line="899"/>
                <scope line="900"/>
            </method>
            <method name="XSync" type="void" line="905">
                <scope line="907"/>
                <scope line="910"/>
            </method>
            <method name="getScreenResolution" type="int" line="914">
                <declaration name="display" type="long" line="915"/>
                <scope line="917"/>
                <scope line="920"/>
            </method>
            <method name="getDefaultXColormap" type="long" line="924"/>
            <method name="getDefaultScreenData" type="long" line="925"/>
            <declaration name="screenmodel" type="ColorModel" line="926"/>
            <method name="getStaticColorModel" type="ColorModel" line="927">
                <scope line="928"/>
            </method>
            <method name="getColorModel" type="ColorModel" line="933"/>
            <javadoc line="936">
                Returns a new input method adapter descriptor for native input methods.                
            </javadoc>
            <method name="getInputMethodAdapterDescriptor" type="InputMethodDescriptor" line="939"/>
            <method name="getMultiClickTime" type="int" line="942">
                <scope line="943"/>
            </method>
            <method name="initializeMultiClickTime" type="void" line="948">
                <scope line="950">
                    <scope line="951">
                        <declaration name="multiclick_time_query" type="String" line="952"/>
                        <scope line="953"/>
                        <scope line="956">
                            <scope line="958"/>
                            <scope line="961"/>
                        </scope>
                    </scope>
                    <scope line="966"/>
                    <scope line="969"/>
                </scope>
                <scope line="973"/>
                <scope line="976"/>
            </method>
            <method name="isFrameStateSupported" type="boolean" line="980">
                <params>
                    <param name="state" type="int"/>
                </params>
                <scope line="981"/>
                <scope line="984"/>
            </method>
            <method name="dumpPeers" type="void" line="988">
                <scope line="989">
                    <declaration name="iter" type="Iterator" line="991"/>
                    <scope line="992">
                        <declaration name="entry" type="Map.Entry" line="993"/>
                        <scope line="995">
                            <declaration name="target" type="Component" line="996"/>
                        </scope>
                    </scope>
                    <scope line="1003">
                        <declaration name="entry" type="Map.Entry" line="1004"/>
                    </scope>
                    <scope line="1009">
                        <declaration name="entry" type="Map.Entry" line="1010"/>
                    </scope>
                </scope>
            </method>
            <declaration name="initialized" type="boolean" line="1015"/>
            <declaration name="timeStampUpdated" type="boolean" line="1016"/>
            <declaration name="timeStamp" type="long" line="1017"/>
            <declaration name="timeFetcher" type="XEventDispatcher" line="1018"/>
            <anonymous_class line="1018">
                <method name="dispatchEvent" type="void" line="1019">
                    <params>
                        <param name="ev" type="XEvent"/>
                    </params>
                    <declaration name="xpe" type="XPropertyEvent" line="1022"/>
                    <scope line="1024"/>
                    <scope line="1029"/>
                </method>
            </anonymous_class>
            <declaration name="_XA_JAVA_TIME_PROPERTY_ATOM" type="XAtom" line="1037"/>
            <method name="getCurrentServerTime" type="long" line="1038">
                <scope line="1040">
                    <scope line="1041">
                        <scope line="1042"/>
                        <scope line="1050">
                            <declaration name="event" type="XEvent" line="1051"/>
                            <scope line="1052"/>
                            <scope line="1056"/>
                        </scope>
                        <scope line="1060">
                            <scope line="1061"/>
                        </scope>
                    </scope>
                    <scope line="1066"/>
                </scope>
                <scope line="1070"/>
            </method>
            <method name="initializeDesktopProperties" type="void" line="1075">
                <scope line="1080"/>
            </method>
            <method name="getNumberOfButtonsImpl" type="int" line="1085"/>
            <javadoc line="1085">
                This method runs through the XPointer and XExtendedPointer array.
                  XExtendedPointer has priority because on some systems XPointer
                  (which is assigned to the virtual pointer) reports the maximum
                  capabilities of the mouse pointer (i.e. 32 physical buttons).                
            </javadoc>
            <method name="getNumberOfButtons" type="int" line="1092">
                <scope line="1094">
                    <scope line="1095">
                        <scope line="1098"/>
                        <scope line="1101"/>
                    </scope>
                </scope>
                <scope line="1107"/>
            </method>
            <declaration name="prefix" type="String" line="1111"/>
            <declaration name="postfix" type="String" line="1112"/>
            <declaration name="dndPrefix" type="String" line="1113"/>
            <method name="lazilyLoadDesktopProperty" type="Object" line="1114">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="1115">
                    <declaration name="cursorName" type="String" line="1116"/>
                    <scope line="1117"/>
                    <scope line="1120"/>
                </scope>
                <scope line="1124"/>
                <scope line="1127"/>
            </method>
            <method name="addPropertyChangeListener" type="void" line="1132">
                <params>
                    <param name="name" type="String"/>
                    <param name="pcl" type="PropertyChangeListener"/>
                </params>
            </method>
            <javadoc line="1136">
                Initializes XAWTXSettings if a property for a given property name is provided by
                  XSettings and they are not initialized yet.                
                <return>
                    true if the method has initialized XAWTXSettings.                    
                </return>
            </javadoc>
            <method name="initXSettingsIfNeeded" type="boolean" line="1141">
                <params>
                    <param name="propName" type="String"/>
                </params>
                <scope line="1142">
                    <scope line="1144">
                        <scope line="1146">
                            <scope line="1147">
                                <declaration name="hint" type="Object" line="1148"/>
                                <scope line="1149"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="loadXSettings" type="void" line="1160"/>
            <javadoc line="1163">
                Callback from the native side indicating some, or all, of the
                  desktop properties have changed and need to be reloaded.
                  &lt;code&gt;data&lt;/code&gt; is the byte array directly from the x server and
                  may be in little endian format.
                  &lt;p&gt;
                  NB: This could be called from any thread if triggered by
                  &lt;code&gt;loadXSettings&lt;/code&gt;.  It is called from the System EDT
                  if triggered by an XSETTINGS change.                
            </javadoc>
            <method name="parseXSettings" type="void" line="1173">
                <params>
                    <param name="screen_XXX_ignored" type="int"/>
                    <param name="updatedSettings" type="Map"/>
                </params>
                <scope line="1174"/>
                <declaration name="i" type="Iterator" line="1177"/>
                <scope line="1178">
                    <declaration name="e" type="Map.Entry" line="1179"/>
                    <declaration name="name" type="String" line="1180"/>
                </scope>
                <declaration name="dragThreshold" type="Integer" line="1186"/>
                <scope line="1187"/>
                <scope line="1190"/>
            </method>
            <declaration name="altMask" type="int" line="1194"/>
            <declaration name="metaMask" type="int" line="1195"/>
            <declaration name="numLockMask" type="int" line="1196"/>
            <declaration name="modeSwitchMask" type="int" line="1197"/>
            <declaration name="modLockIsShiftLock" type="int" line="1198"/>
            <method name="keysymToPrimaryKeycode" type="int" line="1199">
                <params>
                    <param name="sym" type="long"/>
                </params>
                <scope line="1201">
                    <declaration name="code" type="int" line="1202"/>
                    <scope line="1203"/>
                    <declaration name="primary" type="long" line="1206"/>
                    <scope line="1207"/>
                </scope>
                <scope line="1212"/>
            </method>
            <method name="getModifierState" type="boolean" line="1216">
                <params>
                    <param name="jkc" type="int"/>
                </params>
                <declaration name="iKeyMask" type="int" line="1217"/>
                <declaration name="ks" type="long" line="1218"/>
                <declaration name="kc" type="int" line="1219"/>
                <scope line="1220"/>
                <scope line="1224">
                    <declaration name="modmap" type="XModifierKeymap" line="1225"/>
                    <declaration name="nkeys" type="int" line="1226"/>
                    <declaration name="map_ptr" type="long" line="1227"/>
                    <scope line="1228">
                        <scope line="1229">
                            <declaration name="keycode" type="int" line="1230"/>
                            <scope line="1231"/>
                            <scope line="1234"/>
                        </scope>
                        <scope line="1239"/>
                    </scope>
                    <scope line="1244"/>
                    <declaration name="window" type="long" line="1247"/>
                    <scope line="1248"/>
                    <scope line="1251"/>
                    <declaration name="res" type="boolean" line="1254"/>
                    <declaration name="mask" type="int" line="1255"/>
                </scope>
                <scope line="1258"/>
            </method>
            <method name="setupModifierMap" type="void" line="1262">
                <declaration name="metaL" type="int" line="1263"/>
                <declaration name="metaR" type="int" line="1264"/>
                <declaration name="altL" type="int" line="1265"/>
                <declaration name="altR" type="int" line="1266"/>
                <declaration name="numLock" type="int" line="1267"/>
                <declaration name="modeSwitch" type="int" line="1268"/>
                <declaration name="shiftLock" type="int" line="1269"/>
                <declaration name="capsLock" type="int" line="1270"/>
                <declaration name="modmask" type="int" line="1271"/>
                <scope line="1274">
                    <declaration name="modmap" type="XModifierKeymap" line="1275"/>
                    <declaration name="nkeys" type="int" line="1276"/>
                    <declaration name="map_ptr" type="long" line="1277"/>
                    <scope line="1278">
                        <scope line="1279">
                            <declaration name="keycode" type="int" line="1280"/>
                            <scope line="1281"/>
                            <scope line="1284"/>
                            <scope line="1288"/>
                            <scope line="1292"/>
                            <scope line="1296"/>
                        </scope>
                    </scope>
                    <scope line="1304">
                        <declaration name="keycode" type="int" line="1305"/>
                        <scope line="1306"/>
                        <scope line="1309"/>
                        <scope line="1313"/>
                    </scope>
                </scope>
                <scope line="1319"/>
                <scope line="1322"/>
            </method>
            <declaration name="timeoutTasks" type="SortedMap" line="1330"/>
            <javadoc line="1331">
                Removed the task from the list of waiting-to-be called tasks.
                  If the task has been scheduled several times removes only first one.                
            </javadoc>
            <method name="remove" type="void" line="1335">
                <params>
                    <param name="task" type="Runnable"/>
                </params>
                <scope line="1336"/>
                <scope line="1340">
                    <scope line="1341"/>
                    <scope line="1344">
                        <scope line="1345"/>
                    </scope>
                    <declaration name="values" type="Collection" line="1350"/>
                    <declaration name="iter" type="Iterator" line="1351"/>
                    <scope line="1352">
                        <declaration name="list" type="java.util.List" line="1353"/>
                        <declaration name="removed" type="boolean" line="1354"/>
                        <scope line="1355">
                            <scope line="1357"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1364"/>
            </method>
            <method name="wakeup_poll" type="void" line="1368"/>
            <javadoc line="1369">
                Registers a Runnable which &lt;code&gt;run()&lt;/code&gt; method will be called
                  once on the toolkit thread when a specified interval of time elapses.                
                <param>
                    task a Runnable which <code>run</code> method will be called
                      on the toolkit thread when <code>interval</code> milliseconds
                      elapse                    
                </param>
                <param>
                    interval an interal in milliseconds                    
                </param>
                <throws>
                    NullPointerException if <code>task</code> is <code>null</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>interval</code> is not positive                    
                </throws>
            </javadoc>
            <method name="schedule" type="void" line="1379">
                <params>
                    <param name="task" type="Runnable"/>
                    <param name="interval" type="long"/>
                </params>
                <scope line="1380"/>
                <scope line="1383"/>
                <scope line="1387">
                    <scope line="1388"/>
                    <scope line="1391"/>
                    <declaration name="time" type="Long" line="1394"/>
                    <declaration name="tasks" type="java.util.List" line="1395"/>
                    <scope line="1396"/>
                    <scope line="1401"/>
                </scope>
                <scope line="1405"/>
            </method>
            <method name="getNextTaskTime" type="long" line="1409">
                <scope line="1411">
                    <scope line="1412"/>
                </scope>
                <scope line="1417"/>
            </method>
            <javadoc line="1421">
                Executes mature timeout tasks registered with schedule().
                  Called from run() under awtLock.                
            </javadoc>
            <method name="callTimeoutTasks" type="void" line="1425">
                <scope line="1426"/>
                <scope line="1429"/>
                <declaration name="currentTime" type="Long" line="1432"/>
                <declaration name="time" type="Long" line="1433"/>
                <scope line="1434">
                    <declaration name="tasks" type="java.util.List" line="1435"/>
                    <scope line="1436">
                        <declaration name="task" type="Runnable" line="1437"/>
                        <scope line="1438"/>
                        <scope line="1441"/>
                        <scope line="1444"/>
                        <scope line="1447"/>
                    </scope>
                    <scope line="1451"/>
                </scope>
            </method>
            <method name="getAwtDefaultFg" type="long" line="1457"/>
            <method name="isLeftMouseButton" type="boolean" line="1460">
                <params>
                    <param name="me" type="MouseEvent"/>
                </params>
            </method>
            <method name="isRightMouseButton" type="boolean" line="1473">
                <params>
                    <param name="me" type="MouseEvent"/>
                </params>
                <declaration name="numButtons" type="int" line="1474"/>
            </method>
            <declaration name="reset_time_utc" type="long" line="1487"/>
            <declaration name="WRAP_TIME_MILLIS" type="long" line="1488"/>
            <method name="nowMillisUTC_offset" type="long" line="1489">
                <params>
                    <param name="server_offset" type="long"/>
                </params>
                <declaration name="current_time_utc" type="long" line="1490"/>
                <scope line="1491"/>
                <scope line="1494"/>
                <scope line="1497"/>
            </method>
            <javadoc line="1502">
                @see sun.awt.SunToolkit#needsXEmbedImpl                
            </javadoc>
            <method name="needsXEmbedImpl" type="boolean" line="1505"/>
            <method name="isModalityTypeSupported" type="boolean" line="1508">
                <params>
                    <param name="modalityType" type="Dialog.ModalityType"/>
                </params>
            </method>
            <method name="isModalExclusionTypeSupported" type="boolean" line="1511">
                <params>
                    <param name="exclusionType" type="Dialog.ModalExclusionType"/>
                </params>
            </method>
            <method name="getEventQueue" type="EventQueue" line="1514">
                <params>
                    <param name="target" type="Object"/>
                </params>
                <declaration name="appContext" type="AppContext" line="1515"/>
                <scope line="1516"/>
            </method>
            <method name="removeSourceEvents" type="void" line="1521">
                <params>
                    <param name="queue" type="EventQueue"/>
                    <param name="source" type="Object"/>
                    <param name="removeAllEvents" type="boolean"/>
                </params>
                <scope line="1522"/>
                <scope line="1525"/>
                <scope line="1528"/>
            </method>
            <method name="isAlwaysOnTopSupported" type="boolean" line="1532">
                <scope line="1533">
                    <scope line="1534"/>
                </scope>
            </method>
            <method name="useBufferPerWindow" type="boolean" line="1540"/>
            <javadoc line="1543">
                Returns one of XConstants: NotUseful, WhenMapped or Always.
                  If backing store is not available on at least one screen, or
                  java2d uses DGA(which conflicts with backing store) on at least one screen,
                  or the string system property &quot;sun.awt.backingStore&quot; is neither &quot;Always&quot;
                  nor &quot;WhenMapped&quot;, then the method returns XConstants.NotUseful.
                  Otherwise, if the system property &quot;sun.awt.backingStore&quot; is &quot;WhenMapped&quot;,
                  then the method returns XConstants.WhenMapped.
                  Otherwise (i.e., if the system property &quot;sun.awt.backingStore&quot; is &quot;Always&quot;),
                  the method returns XConstants.Always.                
            </javadoc>
            <method name="getBackingStoreType" type="int" line="1554"/>
            <method name="setBackingStoreType" type="void" line="1557">
                <declaration name="prop" type="String" line="1558"/>
                <scope line="1559">
                    <scope line="1561"/>
                </scope>
                <scope line="1566"/>
                <scope line="1570"/>
                <scope line="1573"/>
                <scope line="1576"/>
                <scope line="1579"/>
                <scope line="1582">
                    <scope line="1584"/>
                </scope>
                <scope line="1590">
                    <declaration name="screenCount" type="int" line="1591"/>
                    <scope line="1592">
                        <scope line="1593">
                            <scope line="1595"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1602"/>
            </method>
            <declaration name="backingStoreType" type="int" line="1606"/>
            <javadoc line="1606">
                One of XConstants: NotUseful, WhenMapped or Always.                
            </javadoc>
            <declaration name="XSUN_KP_BEHAVIOR" type="int" line="1610"/>
            <declaration name="XORG_KP_BEHAVIOR" type="int" line="1611"/>
            <declaration name="IS_SUN_KEYBOARD" type="int" line="1612"/>
            <declaration name="IS_NONSUN_KEYBOARD" type="int" line="1613"/>
            <declaration name="IS_KANA_KEYBOARD" type="int" line="1614"/>
            <declaration name="IS_NONKANA_KEYBOARD" type="int" line="1615"/>
            <declaration name="awt_IsXsunKPBehavior" type="int" line="1616"/>
            <declaration name="awt_UseXKB" type="boolean" line="1617"/>
            <declaration name="awt_UseXKB_Calls" type="boolean" line="1618"/>
            <declaration name="awt_XKBBaseEventCode" type="int" line="1619"/>
            <declaration name="awt_XKBEffectiveGroup" type="int" line="1620"/>
            <declaration name="awt_XKBDescPtr" type="long" line="1621"/>
            <javadoc line="1622">
                Check for Xsun convention regarding numpad keys.
                  Xsun and some other servers (i.e. derived from Xsun)
                  under certain conditions process numpad keys unlike Xorg.                
            </javadoc>
            <method name="isXsunKPBehavior" type="boolean" line="1627">
                <scope line="1629">
                    <scope line="1630">
                        <scope line="1631"/>
                        <scope line="1634"/>
                    </scope>
                </scope>
                <scope line="1640"/>
            </method>
            <declaration name="sunOrNotKeyboard" type="int" line="1644"/>
            <declaration name="kanaOrNotKeyboard" type="int" line="1645"/>
            <method name="resetKeyboardSniffer" type="void" line="1646"/>
            <method name="isSunKeyboard" type="boolean" line="1650">
                <scope line="1651">
                    <scope line="1652"/>
                    <scope line="1655"/>
                </scope>
            </method>
            <method name="isKanaKeyboard" type="boolean" line="1661">
                <scope line="1662">
                    <scope line="1663"/>
                    <scope line="1666"/>
                </scope>
            </method>
            <method name="isXKBenabled" type="boolean" line="1672">
                <scope line="1674"/>
                <scope line="1677"/>
            </method>
            <javadoc line="1681">
                Query XKEYBOARD extension.
                  If possible, initialize xkb library.                
            </javadoc>
            <method name="tryXKB" type="boolean" line="1685">
                <scope line="1687">
                    <declaration name="name" type="String" line="1688"/>
                    <scope line="1690">
                        <scope line="1692">
                            <scope line="1694"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1704"/>
            </method>
            <method name="canUseXKBCalls" type="boolean" line="1708">
                <scope line="1710"/>
                <scope line="1713"/>
            </method>
            <method name="getXKBEffectiveGroup" type="int" line="1717">
                <scope line="1719"/>
                <scope line="1722"/>
            </method>
            <method name="getXKBBaseEventCode" type="int" line="1726">
                <scope line="1728"/>
                <scope line="1731"/>
            </method>
            <method name="getXKBKbdDesc" type="long" line="1735">
                <scope line="1737"/>
                <scope line="1740"/>
            </method>
            <method name="freeXKB" type="void" line="1744">
                <scope line="1746">
                    <scope line="1747"/>
                </scope>
                <scope line="1752"/>
            </method>
            <method name="processXkbChanges" type="void" line="1756">
                <params>
                    <param name="ev" type="XEvent"/>
                </params>
                <declaration name="xke" type="XkbEvent" line="1757"/>
                <declaration name="xkb_type" type="int" line="1758"/>
                <scope line="1761"/>
            </method>
            <declaration name="eventNumber" type="long" line="1775"/>
            <method name="getEventNumber" type="long" line="1776">
                <scope line="1778"/>
                <scope line="1781"/>
            </method>
            <declaration name="oops_waiter" type="XEventDispatcher" line="1785"/>
            <declaration name="oops_updated" type="boolean" line="1786"/>
            <declaration name="oops_failed" type="boolean" line="1787"/>
            <declaration name="oops" type="XAtom" line="1788"/>
            <declaration name="WORKAROUND_SLEEP" type="long" line="1789"/>
            <javadoc line="1790">
                @inheritDoc                
            </javadoc>
            <method name="syncNativeQueue" type="boolean" line="1793">
                <params>
                    <param name="timeout" type="long"/>
                </params>
                <declaration name="win" type="XBaseWindow" line="1794"/>
                <scope line="1795">
                    <anonymous_class line="1796">
                        <method name="dispatchEvent" type="void" line="1797">
                            <params>
                                <param name="e" type="XEvent"/>
                            </params>
                            <scope line="1798">
                                <declaration name="pe" type="XSelectionEvent" line="1799"/>
                                <scope line="1800"/>
                                <scope line="1804"/>
                            </scope>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="1813"/>
                <scope line="1817">
                    <declaration name="event_number" type="long" line="1821"/>
                    <declaration name="atom" type="XAtom" line="1822"/>
                    <declaration name="start" type="long" line="1827"/>
                    <scope line="1828">
                        <scope line="1829"/>
                        <scope line="1832"/>
                        <scope line="1835"/>
                    </scope>
                    <scope line="1839">
                        <scope line="1842"/>
                        <scope line="1845"/>
                        <scope line="1848"/>
                    </scope>
                </scope>
                <scope line="1854"/>
            </method>
            <method name="grab" type="void" line="1860">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <scope line="1861"/>
            </method>
            <method name="ungrab" type="void" line="1865">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <scope line="1866"/>
            </method>
            <javadoc line="1870">
                Returns if the java.awt.Desktop class is supported on the current
                  desktop.
                  &lt;p&gt;
                  The methods of java.awt.Desktop class are supported on the Gnome desktop.
                  Check if the running desktop is Gnome by checking the window manager.                
            </javadoc>
            <method name="isDesktopSupported" type="boolean" line="1877"/>
            <method name="createDesktopPeer" type="DesktopPeer" line="1880">
                <params>
                    <param name="target" type="Desktop"/>
                </params>
            </method>
            <method name="areExtraMouseButtonsEnabled" type="boolean" line="1883"/>
            <method name="isWindowOpacitySupported" type="boolean" line="1886">
                <declaration name="net_protocol" type="XNETProtocol" line="1887"/>
                <scope line="1888"/>
            </method>
            <method name="isWindowShapingSupported" type="boolean" line="1893"/>
            <method name="isWindowTranslucencySupported" type="boolean" line="1896"/>
            <method name="isTranslucencyCapable" type="boolean" line="1899">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
                <scope line="1900"/>
            </method>
            <javadoc line="1905">
                Returns the value of &quot;sun.awt.disablegrab&quot; property. Default
                  value is {@code false}.                
            </javadoc>
            <method name="getSunAwtDisableGrab" type="boolean" line="1909"/>
        </class>
    </source>