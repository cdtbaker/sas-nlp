<?xml version="1.0" encoding="UTF-8"?>
    <source package="
 * Ported from awt_wm.c, SCCS v1.11, author Valeriy Ushakov
 * Author: Denis Mikhalkin
 */
package sun.awt.X11">
        <import package="sun.misc.Unsafe"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Frame"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.util.Collection"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.regex.Matcher"/>
        <import package="java.util.regex.Pattern"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <javadoc line="27">
            Ported from awt_wm.c, SCCS v1.11, author Valeriy Ushakov
              Author: Denis Mikhalkin            
        </javadoc>
        <class name="XWM" line="45">
            <comment line="62">
                                
            </comment>
            <comment line="66">
                                
            </comment>
            <comment line="68">
                                
            </comment>
            <comment line="71">
                                
            </comment>
            <comment line="74">
                                
            </comment>
            <comment line="77">
                                
            </comment>
            <comment line="81">
                                
            </comment>
            <comment line="88">
                                
            </comment>
            <comment line="222">
                MUST BE CALLED UNDER AWTLOCK.
                
                 If any window manager is running?
                
                 According to ICCCM 2.0 section 4.3.
                 WM will acquire ownership of a selection named WM_Sn, where n is
                 the screen number.
                
                 No selection owner, but, perhaps it is not ICCCM compliant WM
                 (e.g. CDESawfish).
                 Try selecting for SubstructureRedirect, that only one client
                 can select for, and if the request fails, than some other WM is
                 already running.
                
                 We also treat eXcursion as NO_WM.                
            </comment>
            <comment line="309">
                Helper function for isEnlightenment().
                 Enlightenment uses STRING property for its comms window id.  Gaaa!
                 The property is ENLIGHTENMENT_COMMS, STRING8 and the string format
                 is &quot;WINID %8x&quot;.  Gee, I haven&apos;t been using scanf for ages... :-)                
            </comment>
            <comment line="369">
                Is Enlightenment WM running?  Congruent to awt_wm_checkAnchor, but
                 uses STRING property peculiar to Enlightenment.                
            </comment>
            <comment line="388">
                Is CDE running?
                
                 XXX: This is hairy...  CDE is MWM as well.  It seems we simply test
                 for default setup and will be bitten if user changes things...
                
                 Check for _DT_SM_WINDOW_INFO(_DT_SM_WINDOW_INFO) on root.  Take the
                 second element of the property and check for presence of
                 _DT_SM_STATE_INFO(_DT_SM_STATE_INFO) on that window.
                
                 XXX: Any header that defines this structures???                
            </comment>
            <comment line="466">
                Is MWM running?  (Note that CDE will test positive as well).
                
                 Check for _MOTIF_WM_INFO(_MOTIF_WM_INFO) on root.  Take the
                 second element of the property and check for presence of
                 _DT_SM_STATE_INFO(_DT_SM_STATE_INFO) on that window.                
            </comment>
            <comment line="537">
                Is Sawfish running?                
            </comment>
            <comment line="544">
                Is KDE2 (KWin) running?                
            </comment>
            <comment line="559">
                Is Metacity running?                
            </comment>
            <comment line="574">
                Prepare IceWM check.
                
                 The only way to detect IceWM, seems to be by setting
                 _ICEWM_WINOPTHINT(_ICEWM_WINOPTHINT8) on root and checking if it
                 was immediately deleted by IceWM.
                
                 But messing with PropertyNotify here is way too much trouble, so
                 approximate the check by setting the property in this function and
                 checking if it still exists later on.
                
                 Gaa, dirty dances...                
            </comment>
            <comment line="625">
                Is IceWM running?
                
                 Note well: Only call this if awt_wm_prepareIsIceWM succeeded, or a
                 false positive will be reported.                
            </comment>
            <comment line="651">
                Is OpenLook WM running?
                
                 This one is pretty lame, but the only property peculiar to OLWM is
                 _SUN_WM_PROTOCOLS(ATOM[]).  Fortunately, olwm deletes it on exit.                
            </comment>
            <comment line="667">
                Temporary error handler that checks if selecting for
                 SubstructureRedirect failed.                
            </comment>
            <comment line="685">
                Make an educated guess about running window manager.
                 XXX: ideally, we should detect wm restart.                
            </comment>
            <comment line="811">
                If MWM_DECOR_ALL bit is set, then the rest of the bit-mask is taken
                 to be subtracted from the decorations.  Normalize decoration spec
                 so that we can map motif decor to something else bit-by-bit in the
                 rest of the code.                
            </comment>
            <comment line="829">
                If MWM_FUNC_ALL bit is set, then the rest of the bit-mask is taken
                 to be subtracted from the functions.  Normalize function spec
                 so that we can map motif func to something else bit-by-bit in the
                 rest of the code.                
            </comment>
            <comment line="848">
                Infer OL properties from MWM decorations.
                 Use _OL_DECOR_DEL(ATOM[]) to remove unwanted ones.                
            </comment>
            <comment line="881">
                Set MWM decorations.  Set MWM functions depending on resizability.                
            </comment>
            <comment line="908">
                Under some window managers if shell is already mapped, we MUST
                 unmap and later remap in order to effect the changes we make in the
                 window manager decorations.
                
                 N.B.  This unmapping  remapping of the shell exposes a bug in
                 XMotif or the Motif Window Manager.  When you attempt to map a
                 widget which is positioned (partially) off-screen, the window is
                 relocated to be entirely on screen. Good idea.  But if both the x
                 and the y coordinates are less than the origin (0,0), the first
                 (re)map will move the window to the origin, and any subsequent
                 (re)map will relocate the window at some other point on the screen.
                 I have written a short Motif test program to discover this bug.
                 This should occur infrequently and it does not cause any real
                 problem.  So for now we&apos;ll let it be.                
            </comment>
            <comment line="930">
                Set decoration hints on the shell to wdata-&gt;decor adjusted
                 appropriately if not resizable.                
            </comment>
            <comment line="962">
                Make specified shell resizable.                
            </comment>
            <comment line="988">
                Make specified shell non-resizable.
                 If justChangeSize is false, update decorations as well.
                 @param shellBounds bounds of the shell window                
            </comment>
            <comment line="1142">
                Returns current state (including extended) of a given window.                
            </comment>
            <comment line="1157">
                \
                
                 Settingchanging window state ...                
            </comment>
            <comment line="1206">
                Work around for 4775545.
                
                 If WM exits while the top-level is shaded, the shaded hint remains
                 on the top-level properties.  When WM restarts and sees the shaded
                 window it can reparent it into a &quot;pre-shaded&quot; decoration frame
                 (Metacity does), and our insets logic will go crazy, bc it will
                 see a huge nagative bottom inset.  There&apos;s no clean solution for
                 this, so let&apos;s just be weasels and drop the shaded hint if we
                 detect that WM exited.  NB: we are in for a race condition with WM
                 restart here.  NB2: e.g. WindowMaker saves the state in a private
                 property that this code knows nothing about, so this workaround is
                 not effective; other WMs might play similar tricks.                
            </comment>
            <comment line="1292">
                Some buggy WMs ignore window gravity when processing
                 ConfigureRequest and position window as if the gravity is Static.
                 We work around this in MWindowPeer.pReshape().
                
                 Starting with 1.5 we have introduced an Environment variable
                 _JAVA_AWT_WM_STATIC_GRAVITY that can be set to indicate to Java
                 explicitly that the WM has this behaviour, example is FVWM.                
            </comment>
            <comment line="1347">
                @return if WM implements the insets property - returns insets with values
                 specified in that property, null otherwise.                
            </comment>
            <comment line="1444">
                syncTopLEvelPos() is necessary to insure that the window manager has in
                 fact moved us to our final position relative to the reParented WM window.
                 We have noted a timing window which our shell has not been moved so we
                 screw up the insets thinking they are 0,0.  Wait (for a limited period of
                 time to let the WM hava a chance to move us.
                 @param window window ID of the shell, assuming it is the window
                 which will NOT have zero coordinates after the complete
                 reparenting                
            </comment>
            <javadoc line="45">
                Class incapsulating knowledge about window managers in general
                  Descendants should provide some information about specific window manager.                
            </javadoc>
            <declaration name="log" type="PlatformLogger" line="52"/>
            <declaration name="insLog" type="PlatformLogger" line="53"/>
            <declaration name="stateLog" type="PlatformLogger" line="54"/>
            <declaration name="XA_MWM_HINTS" type="XAtom" line="56"/>
            <declaration name="unsafe" type="Unsafe" line="58"/>
            <declaration name="XA_WM_STATE" type="XAtom" line="62"/>
            <declaration name="XA_UTF8_STRING" type="XAtom" line="65"/>
            <declaration name="AWT_NET_N_KNOWN_STATES" type="int" line="68"/>
            <declaration name="XA_E_FRAME_SIZE" type="XAtom" line="71"/>
            <declaration name="XA_KDE_NET_WM_FRAME_STRUT" type="XAtom" line="74"/>
            <declaration name="XA_KWM_WIN_ICONIFIED" type="XAtom" line="77"/>
            <declaration name="XA_KWM_WIN_MAXIMIZED" type="XAtom" line="78"/>
            <declaration name="XA_OL_DECOR_DEL" type="XAtom" line="81"/>
            <declaration name="XA_OL_DECOR_HEADER" type="XAtom" line="82"/>
            <declaration name="XA_OL_DECOR_RESIZE" type="XAtom" line="83"/>
            <declaration name="XA_OL_DECOR_PIN" type="XAtom" line="84"/>
            <declaration name="XA_OL_DECOR_CLOSE" type="XAtom" line="85"/>
            <declaration name="XA_NET_FRAME_EXTENTS" type="XAtom" line="88"/>
            <declaration name="XA_NET_REQUEST_FRAME_EXTENTS" type="XAtom" line="89"/>
            <declaration name="UNDETERMINED_WM" type="int" line="91"/>
            <method name="toString" type="String" line="105"/>
            <declaration name="WMID" type="int" line="138"/>
            <declaration name="zeroInsets" type="Insets" line="139"/>
            <declaration name="defaultInsets" type="Insets" line="140"/>
            <method name="XWM" type="constructor" line="142">
                <params>
                    <param name="WMID" type="int"/>
                </params>
            </method>
            <method name="getID" type="int" line="147"/>
            <method name="normalize" type="Insets" line="152">
                <params>
                    <param name="insets" type="Insets"/>
                </params>
                <scope line="153"/>
                <scope line="156"/>
                <scope line="159"/>
                <scope line="162"/>
            </method>
            <declaration name="g_net_protocol" type="XNETProtocol" line="168"/>
            <declaration name="g_win_protocol" type="XWINProtocol" line="169"/>
            <method name="isNetWMName" type="boolean" line="170">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="171"/>
                <scope line="173"/>
            </method>
            <method name="initAtoms" type="void" line="178">
                <declaration name="atomInitList" type="Object[][]" line="179"/>
                <declaration name="names" type="String[]" line="199"/>
                <scope line="200"/>
                <declaration name="atomSize" type="int" line="204"/>
                <declaration name="atoms" type="long" line="205"/>
                <scope line="207">
                    <declaration name="status" type="int" line="208"/>
                    <scope line="209"/>
                    <scope line="212"/>
                </scope>
                <scope line="215"/>
            </method>
            <method name="isNoWM" type="boolean" line="238">
                <comment line="239">
                    Quick checks for specific servers.                    
                </comment>
                <comment line="244">
                    Use NO_WM since in all other aspects eXcursion is like not
                     having a window manager running. I.e. it does not reparent
                     top level shells.                    
                </comment>
                <comment line="257">
                    Let&apos;s check an owner of WM_Sn selection for the default screen.                    
                </comment>
                <comment line="286">
                    If no WM is running then our selection for SubstructureRedirect
                     succeeded and needs to be undone (hey we are not a WM ;-).                    
                </comment>
                <declaration name="vendor_string" type="String" line="242"/>
                <scope line="243">
                    <scope line="249"/>
                </scope>
                <declaration name="substruct" type="XSetWindowAttributes" line="255"/>
                <scope line="256">
                    <declaration name="default_screen_number" type="long" line="260"/>
                    <declaration name="selection_name" type="String" line="262"/>
                    <declaration name="selection_owner" type="long" line="264"/>
                    <scope line="267"/>
                    <scope line="272"/>
                    <scope line="290">
                        <scope line="296"/>
                    </scope>
                </scope>
                <scope line="302"/>
            </method>
            <declaration name="XA_ENLIGHTENMENT_COMMS" type="XAtom" line="307"/>
            <method name="getECommsWindowIDProperty" type="long" line="314">
                <params>
                    <param name="window" type="long"/>
                </params>
                <comment line="336">
                    Convert data to String, ASCII                    
                </comment>
                <comment line="342">
                    Parse WINID                    
                </comment>
                <scope line="316"/>
                <declaration name="getter" type="WindowPropertyGetter" line="320"/>
                <scope line="323">
                    <declaration name="status" type="int" line="324"/>
                    <scope line="325"/>
                    <scope line="332"/>
                    <declaration name="bytes" type="byte[]" line="337"/>
                    <declaration name="id" type="String" line="338"/>
                    <declaration name="winIdPat" type="Pattern" line="343"/>
                    <scope line="344">
                        <declaration name="match" type="Matcher" line="345"/>
                        <scope line="346">
                            <declaration name="longId" type="String" line="348"/>
                            <declaration name="winid" type="long" line="350"/>
                        </scope>
                        <scope line="353"/>
                    </scope>
                    <scope line="357">
                        <scope line="358"/>
                    </scope>
                </scope>
                <scope line="363"/>
            </method>
            <method name="isEnlightenment" type="boolean" line="372">
                <declaration name="root_xref" type="long" line="374"/>
                <scope line="375"/>
                <declaration name="self_xref" type="long" line="379"/>
                <scope line="380"/>
            </method>
            <declaration name="XA_DT_SM_WINDOW_INFO" type="XAtom" line="399"/>
            <declaration name="XA_DT_SM_STATE_INFO" type="XAtom" line="400"/>
            <method name="isCDE" type="boolean" line="401">
                <comment line="426">
                    unsafe.getInt(getter.getData()+4);                    
                </comment>
                <comment line="433">
                                        
                </comment>
                <scope line="403"/>
                <declaration name="getter" type="WindowPropertyGetter" line="408"/>
                <scope line="412">
                    <declaration name="status" type="int" line="413"/>
                    <scope line="414"/>
                    <scope line="421"/>
                    <declaration name="wmwin" type="long" line="426"/>
                    <scope line="428"/>
                    <scope line="434"/>
                    <declaration name="getter2" type="WindowPropertyGetter" line="438"/>
                    <scope line="441">
                        <scope line="445"/>
                        <scope line="451"/>
                    </scope>
                    <scope line="457"/>
                </scope>
                <scope line="460"/>
            </method>
            <declaration name="XA_MOTIF_WM_INFO" type="XAtom" line="472"/>
            <declaration name="XA_DT_WORKSPACE_CURRENT" type="XAtom" line="473"/>
            <method name="isMotif" type="boolean" line="474">
                <comment line="476">
                                        
                </comment>
                <comment line="503">
                                        
                </comment>
                <comment line="510">
                    No DT_WORKSPACE, however in our tests MWM sometimes can be without desktop -                    
                </comment>
                <comment line="511">
                    and that is still MWM.  So simply check for the validity of this window                    
                </comment>
                <comment line="512">
                    (through WM_STATE property).                    
                </comment>
                <scope line="476"/>
                <declaration name="getter" type="WindowPropertyGetter" line="480"/>
                <scope line="485">
                    <declaration name="status" type="int" line="486"/>
                    <scope line="488"/>
                    <scope line="496"/>
                    <declaration name="wmwin" type="long" line="500"/>
                    <scope line="501">
                        <scope line="502">
                            <declaration name="curws" type="XAtom[]" line="504"/>
                            <scope line="505"/>
                        </scope>
                        <scope line="509">
                            <declaration name="state_getter" type="WindowPropertyGetter" line="513"/>
                            <scope line="518">
                                <scope line="522"/>
                            </scope>
                            <scope line="525"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="530"/>
            </method>
            <method name="isSawfish" type="boolean" line="539"/>
            <method name="isKDE2" type="boolean" line="546"/>
            <method name="isCompiz" type="boolean" line="550"/>
            <method name="isLookingGlass" type="boolean" line="554"/>
            <method name="isMetacity" type="boolean" line="561">
                <comment line="563">
                    || (                    
                </comment>
                <comment line="564">
                    XA_NET_SUPPORTING_WM_CHECK.                    
                </comment>
                <comment line="565">
                    getIntProperty(XToolkit.getDefaultRootWindow(), XA_NET_SUPPORTING_WM_CHECK.                    
                </comment>
                <comment line="566">
                    getIntProperty(XToolkit.getDefaultRootWindow(), XAtom.XA_CARDINAL)) == 0);                    
                </comment>
            </method>
            <method name="isNonReparentingWM" type="boolean" line="569"/>
            <declaration name="XA_ICEWM_WINOPTHINT" type="XAtom" line="586"/>
            <declaration name="opt" type="char" line="587"/>
            <method name="prepareIsIceWM" type="boolean" line="592">
                <comment line="593">
                    Choose something innocuous: &quot;AWT_ICEWM_TEST allWorkspaces 0&quot;.
                     IceWM expects &quot;class\0option\0arg\0&quot; with zero bytes as delimiters.                    
                </comment>
                <scope line="598"/>
                <scope line="604">
                    <scope line="613"/>
                </scope>
                <scope line="619"/>
            </method>
            <method name="isIceWM" type="boolean" line="630">
                <scope line="631"/>
                <declaration name="getter" type="WindowPropertyGetter" line="636"/>
                <scope line="640">
                    <declaration name="status" type="int" line="641"/>
                    <declaration name="res" type="boolean" line="642"/>
                </scope>
                <scope line="645"/>
            </method>
            <declaration name="XA_SUN_WM_PROTOCOLS" type="XAtom" line="656"/>
            <method name="isOpenLook" type="boolean" line="657">
                <scope line="658"/>
                <declaration name="list" type="XAtom[]" line="662"/>
            </method>
            <declaration name="winmgr_running" type="boolean" line="670"/>
            <declaration name="detectWMHandler" type="XErrorHandler" line="671"/>
            <anonymous_class line="671">
                <method name="handleError" type="int" line="673">
                    <params>
                        <param name="display" type="long"/>
                        <param name="err" type="XErrorEvent"/>
                    </params>
                    <scope line="676"/>
                </method>
            </anonymous_class>
            <declaration name="awt_wmgr" type="int" line="688"/>
            <declaration name="wm" type="XWM" line="689"/>
            <method name="getWM" type="XWM" line="690">
                <comment line="692">
                                        
                </comment>
                <scope line="691"/>
            </method>
            <method name="getWMID" type="int" line="696">
                <comment line="700">
                    Ideally, we should support cases when a different WM is started
                     during a Java app lifetime.                    
                </comment>
                <comment line="717">
                    Initialize _NET protocol - used to detect Window Manager.                    
                </comment>
                <comment line="718">
                    Later, WM will initialize its own version of protocol                    
                </comment>
                <comment line="727">
                                        
                </comment>
                <comment line="728">
                                        
                </comment>
                <comment line="730">
                    Ok, some WM is out there.  Check which one by testing for
                     &quot;distinguishing&quot; atoms.                    
                </comment>
                <comment line="749">
                    We don&apos;t check for legacy WM when we already know that WM
                     supports WIN or _NET wm spec.                    
                </comment>
                <comment line="758">
                    Check for legacy WMs.                    
                </comment>
                <comment line="761">
                                        
                </comment>
                <scope line="697"/>
                <scope line="705"/>
                <declaration name="substruct" type="XSetWindowAttributes" line="709"/>
                <scope line="711">
                    <scope line="712"/>
                    <declaration name="l_net_protocol" type="XNETProtocol" line="719"/>
                    <scope line="721"/>
                    <declaration name="win" type="XWINProtocol" line="724"/>
                    <declaration name="doIsIceWM" type="boolean" line="728"/>
                    <scope line="734"/>
                    <scope line="736"/>
                    <scope line="738"/>
                    <scope line="740"/>
                    <scope line="742"/>
                    <scope line="744"/>
                    <scope line="746"/>
                    <scope line="753"/>
                    <scope line="755"/>
                    <scope line="761"/>
                    <scope line="763"/>
                    <scope line="765"/>
                    <scope line="767"/>
                </scope>
                <scope line="772"/>
            </method>
            <javadoc line="779">
                \
                  Size and decoration hints ...
                  \                
            </javadoc>
            <method name="removeSizeHints" type="void" line="790">
                <params>
                    <param name="window" type="XDecoratedPeer"/>
                    <param name="mask" type="long"/>
                </params>
                <comment line="786">
                    Remove size hints specified by the mask.
                     XXX: Why do we need this in the first place???                    
                </comment>
                <scope line="794">
                    <declaration name="hints" type="XSizeHints" line="795"/>
                    <scope line="796"/>
                </scope>
                <scope line="805"/>
            </method>
            <method name="normalizeMotifDecor" type="int" line="816">
                <params>
                    <param name="decorations" type="int"/>
                </params>
                <scope line="817"/>
                <declaration name="d" type="int" line="820"/>
            </method>
            <method name="normalizeMotifFunc" type="int" line="834">
                <params>
                    <param name="functions" type="int"/>
                </params>
                <scope line="835"/>
                <declaration name="f" type="int" line="838"/>
            </method>
            <method name="setOLDecor" type="void" line="851">
                <params>
                    <param name="window" type="XWindow"/>
                    <param name="resizable" type="boolean"/>
                    <param name="decorations" type="int"/>
                </params>
                <scope line="852"/>
                <declaration name="decorDel" type="XAtomList" line="856"/>
                <scope line="859"/>
                <scope line="862"/>
                <scope line="868"/>
                <scope line="871"/>
                <scope line="874"/>
            </method>
            <method name="setMotifDecor" type="void" line="883">
                <params>
                    <param name="window" type="XWindow"/>
                    <param name="resizable" type="boolean"/>
                    <param name="decorations" type="int"/>
                    <param name="functions" type="int"/>
                </params>
                <comment line="884">
                                        
                </comment>
                <scope line="887"/>
                <scope line="892"/>
                <declaration name="hints" type="PropMwmHints" line="896"/>
            </method>
            <method name="needRemap" type="boolean" line="923">
                <params>
                    <param name="window" type="XDecoratedPeer"/>
                </params>
                <comment line="924">
                    Don&apos;t remap EmbeddedFrame,                    
                </comment>
                <comment line="925">
                    e.g. for TrayIcon it causes problems.                    
                </comment>
            </method>
            <method name="setShellDecor" type="void" line="933">
                <params>
                    <param name="window" type="XDecoratedPeer"/>
                </params>
                <comment line="948">
                                        
                </comment>
                <comment line="950">
                    Do the remapping at the Xlib level.  Since we essentially
                     work around a WM bug we don&apos;t want this hack to be exposed
                     to Intrinsics (i.e. don&apos;t mess with grabs, callbacks etc).                    
                </comment>
                <declaration name="decorations" type="int" line="934"/>
                <declaration name="functions" type="int" line="935"/>
                <declaration name="resizable" type="boolean" line="936"/>
                <scope line="938">
                    <scope line="939"/>
                    <scope line="941"/>
                </scope>
                <scope line="949"/>
            </method>
            <method name="setShellResizable" type="void" line="964">
                <params>
                    <param name="window" type="XDecoratedPeer"/>
                </params>
                <comment line="974">
                                        
                </comment>
                <comment line="975">
                    Fix for 4320050: Minimum size for java.awt.Frame is not being enforced.                    
                </comment>
                <comment line="976">
                    We need to update frame&apos;s minimum size, not to reset it                    
                </comment>
                <comment line="980">
                                        
                </comment>
                <scope line="967">
                    <declaration name="shellBounds" type="Rectangle" line="968"/>
                </scope>
                <scope line="982"/>
            </method>
            <method name="setShellNotResizable" type="void" line="994">
                <params>
                    <param name="window" type="XDecoratedPeer"/>
                    <param name="newDimensions" type="WindowDimensions"/>
                    <param name="shellBounds" type="Rectangle"/>
                    <param name="justChangeSize" type="boolean"/>
                </params>
                <comment line="999">
                                        
                </comment>
                <comment line="1007">
                                        
                </comment>
                <scope line="998">
                    <scope line="1000"/>
                    <scope line="1007"/>
                </scope>
                <scope line="1010"/>
            </method>
            <declaration name="protocolsMap" type="HashMap&lt;Class&lt;?&gt;,Collection&lt;?&gt;&gt;" line="1015"/>
            <javadoc line="1015">
                \
                  Protocols support                
            </javadoc>
            <javadoc line="1019">
                Returns all protocols supporting given protocol interface                
            </javadoc>
            <method name="getProtocols" type="Collection<T>" line="1022">
                <params>
                    <param name="protocolInterface" type="Class<T>"/>
                </params>
                <declaration name="res" type="Collection&lt;T&gt;" line="1023"/>
                <scope line="1024"/>
                <scope line="1026"/>
            </method>
            <method name="addProtocol" type="void" line="1031">
                <params>
                    <param name="protocolInterface" type="Class<T>"/>
                    <param name="protocol" type="T"/>
                </params>
                <declaration name="protocols" type="Collection&lt;T&gt;" line="1032"/>
            </method>
            <method name="supportsDynamicLayout" type="boolean" line="1037">
                <declaration name="wm" type="int" line="1038"/>
            </method>
            <javadoc line="1056">
                Check if state is supported.
                  Note that a compound state is always reported as not supported.
                  Note also that MAXIMIZED_BOTH is considered not a compound state.
                  Therefore, a compound state is just ICONIFIED | anything else.                
            </javadoc>
            <method name="supportsExtendedState" type="boolean" line="1063">
                <params>
                    <param name="state" type="int"/>
                </params>
                <comment line="1067">
                    WMs that talk NETWIN protocol, but do not support
                     unidirectional maximization.                    
                </comment>
                <comment line="1072">
                                        
                </comment>
                <comment line="1075">
                                        
                </comment>
                <scope line="1071"/>
                <scope line="1077">
                    <scope line="1078"/>
                </scope>
            </method>
            <javadoc line="1087">
                \
                  Reading state from different protocols
                  \                
            </javadoc>
            <method name="getExtendedState" type="int" line="1094">
                <params>
                    <param name="window" type="XWindowPeer"/>
                </params>
                <declaration name="state" type="int" line="1095"/>
                <scope line="1096"/>
                <scope line="1099"/>
                <scope line="1101"/>
            </method>
            <javadoc line="1106">
                \
                  Notice window state change when WM changes a property on the window ...
                  \                
            </javadoc>
            <method name="isStateChange" type="boolean" line="1116">
                <params>
                    <param name="window" type="XDecoratedPeer"/>
                    <param name="e" type="XPropertyEvent"/>
                </params>
                <comment line="1113">
                    Check if property change is a window state protocol message.                    
                </comment>
                <scope line="1117"/>
                <declaration name="wm_state" type="int" line="1122"/>
                <scope line="1123"/>
                <scope line="1126"/>
                <declaration name="is_state_change" type="boolean" line="1129"/>
                <scope line="1130"/>
                <scope line="1134"/>
            </method>
            <method name="getState" type="int" line="1144">
                <params>
                    <param name="window" type="XDecoratedPeer"/>
                </params>
                <declaration name="res" type="int" line="1145"/>
                <declaration name="wm_state" type="int" line="1146"/>
                <scope line="1147"/>
                <scope line="1149"/>
            </method>
            <javadoc line="1162">
                Moves window to the specified layer, layer is one of the constants defined
                  in XLayerProtocol                
            </javadoc>
            <method name="setLayer" type="void" line="1166">
                <params>
                    <param name="window" type="XWindowPeer"/>
                    <param name="layer" type="int"/>
                </params>
                <scope line="1167">
                    <scope line="1168"/>
                </scope>
            </method>
            <method name="setExtendedState" type="void" line="1175">
                <params>
                    <param name="window" type="XWindowPeer"/>
                    <param name="state" type="int"/>
                </params>
                <comment line="1184">
                    Purge KWM bits.
                     Not really tested with KWM, only with WindowMaker.                    
                </comment>
                <scope line="1176">
                    <scope line="1177"/>
                </scope>
                <scope line="1183">
                    <scope line="1189"/>
                    <scope line="1197"/>
                </scope>
            </method>
            <method name="unshadeKludge" type="void" line="1219">
                <params>
                    <param name="window" type="XDecoratedPeer"/>
                </params>
                <scope line="1222"/>
            </method>
            <declaration name="inited" type="boolean" line="1228"/>
            <method name="init" type="void" line="1229">
                <scope line="1230"/>
            </method>
            <method name="initializeProtocols" type="void" line="1239">
                <declaration name="net_protocol" type="XNETProtocol" line="1240"/>
                <scope line="1241">
                    <scope line="1242"/>
                    <scope line="1244">
                        <scope line="1245"/>
                        <scope line="1248"/>
                    </scope>
                </scope>
                <declaration name="win" type="XWINProtocol" line="1254"/>
                <scope line="1255">
                    <scope line="1256">
                        <scope line="1257"/>
                        <scope line="1260"/>
                    </scope>
                </scope>
            </method>
            <declaration name="storedInsets" type="HashMap" line="1267"/>
            <method name="guessInsets" type="Insets" line="1268">
                <params>
                    <param name="window" type="XDecoratedPeer"/>
                </params>
                <declaration name="res" type="Insets" line="1269"/>
                <scope line="1270"/>
            </method>
            <declaration name="awtWMStaticGravity" type="int" line="1301"/>
            <method name="configureGravityBuggy" type="boolean" line="1302">
                <comment line="1314">
                    See bug #228981 at IceWM&apos;s SourceForge pages.
                     Latest stable version 1.0.8-6 still has this problem.                    
                </comment>
                <comment line="1318">
                    Version 1.2.2 doesn&apos;t have this problem                    
                </comment>
                <comment line="1321">
                    Detect IceWM version                    
                </comment>
                <comment line="1339">
                                        
                </comment>
                <scope line="1304"/>
                <scope line="1308"/>
                <scope line="1322">
                    <declaration name="wm_name" type="String" line="1323"/>
                    <declaration name="pat" type="Pattern" line="1324"/>
                    <scope line="1325">
                        <declaration name="match" type="Matcher" line="1326"/>
                        <scope line="1327">
                            <declaration name="v1" type="int" line="1328"/>
                            <declaration name="v2" type="int" line="1329"/>
                            <declaration name="v3" type="int" line="1330"/>
                        </scope>
                    </scope>
                    <scope line="1333"/>
                </scope>
            </method>
            <method name="getInsetsFromExtents" type="Insets" line="1350">
                <params>
                    <param name="window" type="long"/>
                </params>
                <scope line="1351"/>
                <declaration name="net_protocol" type="XNETProtocol" line="1354"/>
                <scope line="1355">
                    <declaration name="insets" type="Insets" line="1356"/>
                    <scope line="1359"/>
                </scope>
            </method>
            <javadoc line="1373">
                Helper function reads property of type CARDINAL[4] = { left, right, top, bottom }
                  and converts it to Insets object.                
            </javadoc>
            <method name="getInsetsFromProp" type="Insets" line="1377">
                <params>
                    <param name="window" type="long"/>
                    <param name="atom" type="XAtom"/>
                </params>
                <comment line="1393">
                    top                    
                </comment>
                <comment line="1394">
                    left                    
                </comment>
                <comment line="1395">
                    bottom                    
                </comment>
                <comment line="1396">
                    right                    
                </comment>
                <scope line="1378"/>
                <declaration name="getter" type="WindowPropertyGetter" line="1382"/>
                <scope line="1385">
                    <scope line="1390"/>
                    <scope line="1392"/>
                </scope>
                <scope line="1398"/>
            </method>
            <javadoc line="1403">
                Asks WM to fill Frame Extents (insets) for the window.                
            </javadoc>
            <method name="requestWMExtents" type="void" line="1406">
                <params>
                    <param name="window" type="long"/>
                </params>
                <comment line="1407">
                    not initialized                    
                </comment>
                <comment line="1436">
                    XXX: should we wait for response? XIfEvent() would be useful here :)                    
                </comment>
                <scope line="1407"/>
                <declaration name="msg" type="XClientMessageEvent" line="1413"/>
                <scope line="1420">
                    <declaration name="net_protocol" type="XNETProtocol" line="1421"/>
                    <scope line="1422"/>
                    <scope line="1429"/>
                </scope>
                <scope line="1437"/>
            </method>
            <method name="syncTopLevelPos" type="boolean" line="1452">
                <params>
                    <param name="window" type="long"/>
                    <param name="attrs" type="XWindowAttributes"/>
                </params>
                <declaration name="tries" type="int" line="1453"/>
                <scope line="1455">
                    <scope line="1456">
                        <scope line="1458"/>
                    </scope>
                </scope>
                <scope line="1465"/>
            </method>
            <method name="getInsets" type="Insets" line="1471">
                <params>
                    <param name="win" type="XDecoratedPeer"/>
                    <param name="window" type="long"/>
                    <param name="parent" type="long"/>
                </params>
                <comment line="1472">
                    Unfortunately the concept of &quot;insets&quot; borrowed to AWT
                     from Win32 is absolutely, unbelievably foreign to
                     X11.  Few WMs provide the size of frame decor
                     (i.e. insets) in a property they set on the client
                     window, so we check if we can get away with just
                     peeking at it.  [Future versions of wm-spec might add a
                     standardized hint for this].
                    
                     Otherwise we do some special casing.  Actually the
                     fallback code (&quot;default&quot; case) seems to cover most of
                     the existing WMs (modulo ReparentConfigure order
                     perhaps?).
                    
                     Fallback code tries to account for the two most common cases:
                    
                     . single reparenting
                           parent window is the WM frame
                           [twm, olwm, sawfish]
                    
                     . double reparenting
                           parent is a lining exactly the size of the client
                           grandpa is the WM frame
                           [mwm, e!, kwin, fvwm2 ... ]                    
                </comment>
                <comment line="1510">
                                        
                </comment>
                <comment line="1512">
                                        
                </comment>
                <comment line="1516">
                    Now get the actual dimensions of the parent window
                     resolve the difference.  We can&apos;t rely on the left
                     to be equal to right or bottom...  Enlightment
                     breaks that assumption.                    
                </comment>
                <comment line="1532">
                    for 1.2.2.                    
                </comment>
                <comment line="1533">
                                        
                </comment>
                <comment line="1536">
                                        
                </comment>
                <comment line="1549">
                                        
                </comment>
                <comment line="1558">
                                        
                </comment>
                <comment line="1571">
                    Check for double-reparenting WM.
                    
                     If the parent is exactly the same size as the
                     top-level assume taht it&apos;s the &quot;lining&quot; window and
                     that the grandparent is the actual frame (NB: we
                     have already handled undecorated windows).
                    
                     XXX: what about timing issues that syncTopLevelPos
                     is supposed to work around?                    
                </comment>
                <comment line="1595">
                    This is not double-reparenting in a                    
                </comment>
                <comment line="1596">
                    general sense - we simply don&apos;t have                    
                </comment>
                <comment line="1597">
                    correct insets - return null to try to                    
                </comment>
                <comment line="1598">
                    get insets later                    
                </comment>
                <comment line="1607">
                    XXX: To be absolutely correct, we&apos;d need to take
                     parent&apos;s border-width into account too, but the
                     rest of the code is happily unaware about border
                     widths and innerouter distinction, so for the time
                     being, just ignore it.                    
                </comment>
                <comment line="1621">
                                        
                </comment>
                <comment line="1622">
                                        
                </comment>
                <declaration name="correctWM" type="Insets" line="1497"/>
                <scope line="1500">
                    <declaration name="lwinAttr" type="XWindowAttributes" line="1506"/>
                    <declaration name="pattr" type="XWindowAttributes" line="1507"/>
                    <scope line="1508">
                        <scope line="1511"/>
                        <scope line="1535">
                            <scope line="1537"/>
                            <scope line="1542"/>
                        </scope>
                        <scope line="1548"/>
                        <scope line="1558">
                            <declaration name="status" type="int" line="1561"/>
                            <scope line="1565"/>
                            <scope line="1585">
                                <declaration name="grand_parent" type="long" line="1592"/>
                                <scope line="1594"/>
                                <scope line="1600"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1623"/>
                </scope>
                <scope line="1628"/>
            </method>
            <method name="isDesktopWindow" type="boolean" line="1633">
                <params>
                    <param name="w" type="long"/>
                </params>
                <scope line="1634">
                    <declaration name="wtype" type="XAtomList" line="1635"/>
                </scope>
                <scope line="1637"/>
            </method>
            <method name="getNETProtocol" type="XNETProtocol" line="1642"/>
            <javadoc line="1646">
                Sets _NET_WN_ICON property on the window using the arrays of
                  raster-data for icons. If icons is null, removes _NET_WM_ICON
                  property.
                  This method invokes XNETProtocol.setWMIcon() for WMs that
                  support NET protocol.                
                <return>
                    true if hint was modified successfully, false otherwise                    
                </return>
            </javadoc>
            <method name="setNetWMIcon" type="boolean" line="1655">
                <params>
                    <param name="window" type="XWindowPeer"/>
                    <param name="icons" type="java.util.List<XIconInfo>"/>
                </params>
                <scope line="1656"/>
            </method>
        </class>
    </source>