<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="sun.misc.Unsafe"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Frame"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.util.Collection"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.regex.Matcher"/>
        <import package="java.util.regex.Pattern"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="XWM" line="16">
            <javadoc line="16">
                Class incapsulating knowledge about window managers in general
                  Descendants should provide some information about specific window manager.                
            </javadoc>
            <declaration name="log" type="PlatformLogger" line="21"/>
            <declaration name="insLog" type="PlatformLogger" line="22"/>
            <declaration name="stateLog" type="PlatformLogger" line="23"/>
            <declaration name="XA_MWM_HINTS" type="XAtom" line="24"/>
            <declaration name="unsafe" type="Unsafe" line="25"/>
            <declaration name="XA_WM_STATE" type="XAtom" line="26"/>
            <declaration name="XA_UTF8_STRING" type="XAtom" line="27"/>
            <declaration name="AWT_NET_N_KNOWN_STATES" type="int" line="28"/>
            <declaration name="XA_E_FRAME_SIZE" type="XAtom" line="29"/>
            <declaration name="XA_KDE_NET_WM_FRAME_STRUT" type="XAtom" line="30"/>
            <declaration name="XA_KWM_WIN_ICONIFIED" type="XAtom" line="31"/>
            <declaration name="XA_KWM_WIN_MAXIMIZED" type="XAtom" line="32"/>
            <declaration name="XA_OL_DECOR_DEL" type="XAtom" line="33"/>
            <declaration name="XA_OL_DECOR_HEADER" type="XAtom" line="34"/>
            <declaration name="XA_OL_DECOR_RESIZE" type="XAtom" line="35"/>
            <declaration name="XA_OL_DECOR_PIN" type="XAtom" line="36"/>
            <declaration name="XA_OL_DECOR_CLOSE" type="XAtom" line="37"/>
            <declaration name="XA_NET_FRAME_EXTENTS" type="XAtom" line="38"/>
            <declaration name="XA_NET_REQUEST_FRAME_EXTENTS" type="XAtom" line="39"/>
            <declaration name="UNDETERMINED_WM" type="int" line="40"/>
            <method name="toString" type="String" line="41"/>
            <declaration name="WMID" type="int" line="72"/>
            <declaration name="zeroInsets" type="Insets" line="73"/>
            <declaration name="defaultInsets" type="Insets" line="74"/>
            <method name="XWM" type="constructor" line="75">
                <params>
                    <param name="WMID" type="int"/>
                </params>
            </method>
            <method name="getID" type="int" line="80"/>
            <method name="normalize" type="Insets" line="83">
                <params>
                    <param name="insets" type="Insets"/>
                </params>
                <scope line="84"/>
                <scope line="87"/>
                <scope line="90"/>
                <scope line="93"/>
            </method>
            <declaration name="g_net_protocol" type="XNETProtocol" line="98"/>
            <declaration name="g_win_protocol" type="XWINProtocol" line="99"/>
            <method name="isNetWMName" type="boolean" line="100">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="101"/>
                <scope line="104"/>
            </method>
            <method name="initAtoms" type="void" line="108">
                <declaration name="atomInitList" type="Object[][]" line="109"/>
                <declaration name="names" type="String[]" line="110"/>
                <scope line="111"/>
                <declaration name="atomSize" type="int" line="114"/>
                <declaration name="atoms" type="long" line="115"/>
                <scope line="117">
                    <declaration name="status" type="int" line="118"/>
                    <scope line="119"/>
                    <scope line="122"/>
                </scope>
                <scope line="126"/>
            </method>
            <method name="isNoWM" type="boolean" line="131">
                <declaration name="vendor_string" type="String" line="132"/>
                <scope line="133">
                    <scope line="134"/>
                </scope>
                <declaration name="substruct" type="XSetWindowAttributes" line="139"/>
                <scope line="140">
                    <declaration name="default_screen_number" type="long" line="141"/>
                    <declaration name="selection_name" type="String" line="142"/>
                    <declaration name="selection_owner" type="long" line="143"/>
                    <scope line="144"/>
                    <scope line="147"/>
                    <scope line="155">
                        <scope line="158"/>
                    </scope>
                </scope>
                <scope line="164"/>
            </method>
            <declaration name="XA_ENLIGHTENMENT_COMMS" type="XAtom" line="168"/>
            <method name="getECommsWindowIDProperty" type="long" line="169">
                <params>
                    <param name="window" type="long"/>
                </params>
                <scope line="170"/>
                <declaration name="getter" type="WindowPropertyGetter" line="173"/>
                <scope line="174">
                    <declaration name="status" type="int" line="175"/>
                    <scope line="176"/>
                    <scope line="179"/>
                    <declaration name="bytes" type="byte[]" line="182"/>
                    <declaration name="id" type="String" line="183"/>
                    <declaration name="winIdPat" type="Pattern" line="185"/>
                    <scope line="186">
                        <declaration name="match" type="Matcher" line="187"/>
                        <scope line="188">
                            <declaration name="longId" type="String" line="190"/>
                            <declaration name="winid" type="long" line="192"/>
                        </scope>
                        <scope line="196"/>
                    </scope>
                    <scope line="201">
                        <scope line="202"/>
                    </scope>
                </scope>
                <scope line="208"/>
            </method>
            <method name="isEnlightenment" type="boolean" line="212">
                <declaration name="root_xref" type="long" line="213"/>
                <scope line="214"/>
                <declaration name="self_xref" type="long" line="217"/>
                <scope line="218"/>
            </method>
            <declaration name="XA_DT_SM_WINDOW_INFO" type="XAtom" line="223"/>
            <declaration name="XA_DT_SM_STATE_INFO" type="XAtom" line="224"/>
            <method name="isCDE" type="boolean" line="225">
                <scope line="226"/>
                <declaration name="getter" type="WindowPropertyGetter" line="230"/>
                <scope line="231">
                    <declaration name="status" type="int" line="232"/>
                    <scope line="233"/>
                    <scope line="237"/>
                    <declaration name="wmwin" type="long" line="241"/>
                    <scope line="242"/>
                    <scope line="246"/>
                    <declaration name="getter2" type="WindowPropertyGetter" line="250"/>
                    <scope line="251">
                        <scope line="253"/>
                        <scope line="257"/>
                    </scope>
                    <scope line="263"/>
                </scope>
                <scope line="267"/>
            </method>
            <declaration name="XA_MOTIF_WM_INFO" type="XAtom" line="271"/>
            <declaration name="XA_DT_WORKSPACE_CURRENT" type="XAtom" line="272"/>
            <method name="isMotif" type="boolean" line="273">
                <scope line="274"/>
                <declaration name="getter" type="WindowPropertyGetter" line="277"/>
                <scope line="278">
                    <declaration name="status" type="int" line="279"/>
                    <scope line="280"/>
                    <scope line="283"/>
                    <declaration name="wmwin" type="long" line="286"/>
                    <scope line="287">
                        <scope line="288">
                            <declaration name="curws" type="XAtom[]" line="289"/>
                            <scope line="290"/>
                        </scope>
                        <scope line="295">
                            <declaration name="state_getter" type="WindowPropertyGetter" line="296"/>
                            <scope line="297">
                                <scope line="298"/>
                            </scope>
                            <scope line="302"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="308"/>
            </method>
            <method name="isSawfish" type="boolean" line="313"/>
            <method name="isKDE2" type="boolean" line="316"/>
            <method name="isCompiz" type="boolean" line="319"/>
            <method name="isLookingGlass" type="boolean" line="322"/>
            <method name="isMetacity" type="boolean" line="325"/>
            <method name="isNonReparentingWM" type="boolean" line="328"/>
            <declaration name="XA_ICEWM_WINOPTHINT" type="XAtom" line="331"/>
            <declaration name="opt" type="char" line="332"/>
            <method name="prepareIsIceWM" type="boolean" line="333">
                <scope line="334"/>
                <scope line="339">
                    <scope line="343"/>
                </scope>
                <scope line="350"/>
            </method>
            <method name="isIceWM" type="boolean" line="354">
                <scope line="355"/>
                <declaration name="getter" type="WindowPropertyGetter" line="359"/>
                <scope line="360">
                    <declaration name="status" type="int" line="361"/>
                    <declaration name="res" type="boolean" line="362"/>
                </scope>
                <scope line="366"/>
            </method>
            <declaration name="XA_SUN_WM_PROTOCOLS" type="XAtom" line="370"/>
            <method name="isOpenLook" type="boolean" line="371">
                <scope line="372"/>
                <declaration name="list" type="XAtom[]" line="375"/>
            </method>
            <declaration name="winmgr_running" type="boolean" line="378"/>
            <declaration name="detectWMHandler" type="XErrorHandler" line="379"/>
            <anonymous_class line="379">
                <method name="handleError" type="int" line="380">
                    <params>
                        <param name="display" type="long"/>
                        <param name="err" type="XErrorEvent"/>
                    </params>
                    <scope line="381"/>
                </method>
            </anonymous_class>
            <declaration name="awt_wmgr" type="int" line="389"/>
            <declaration name="wm" type="XWM" line="390"/>
            <method name="getWM" type="XWM" line="391">
                <scope line="392"/>
            </method>
            <method name="getWMID" type="int" line="397">
                <scope line="398"/>
                <scope line="401"/>
                <declaration name="substruct" type="XSetWindowAttributes" line="404"/>
                <scope line="406">
                    <scope line="407"/>
                    <declaration name="l_net_protocol" type="XNETProtocol" line="411"/>
                    <scope line="413"/>
                    <declaration name="win" type="XWINProtocol" line="416"/>
                    <declaration name="doIsIceWM" type="boolean" line="418"/>
                    <scope line="419"/>
                    <scope line="422"/>
                    <scope line="425"/>
                    <scope line="428"/>
                    <scope line="431"/>
                    <scope line="434"/>
                    <scope line="437"/>
                    <scope line="440"/>
                    <scope line="443"/>
                    <scope line="446"/>
                    <scope line="449"/>
                    <scope line="452"/>
                    <scope line="455"/>
                </scope>
                <scope line="460"/>
            </method>
            <javadoc line="465">
                \
                  Size and decoration hints ...
                  \                
            </javadoc>
            <method name="removeSizeHints" type="void" line="470">
                <params>
                    <param name="window" type="XDecoratedPeer"/>
                    <param name="mask" type="long"/>
                </params>
                <scope line="473">
                    <declaration name="hints" type="XSizeHints" line="474"/>
                    <scope line="475"/>
                </scope>
                <scope line="482"/>
            </method>
            <method name="normalizeMotifDecor" type="int" line="486">
                <params>
                    <param name="decorations" type="int"/>
                </params>
                <scope line="487"/>
                <declaration name="d" type="int" line="490"/>
            </method>
            <method name="normalizeMotifFunc" type="int" line="494">
                <params>
                    <param name="functions" type="int"/>
                </params>
                <scope line="495"/>
                <declaration name="f" type="int" line="498"/>
            </method>
            <method name="setOLDecor" type="void" line="502">
                <params>
                    <param name="window" type="XWindow"/>
                    <param name="resizable" type="boolean"/>
                    <param name="decorations" type="int"/>
                </params>
                <scope line="503"/>
                <declaration name="decorDel" type="XAtomList" line="506"/>
                <scope line="509"/>
                <scope line="512"/>
                <scope line="515"/>
                <scope line="518"/>
                <scope line="522"/>
            </method>
            <method name="setMotifDecor" type="void" line="527">
                <params>
                    <param name="window" type="XWindow"/>
                    <param name="resizable" type="boolean"/>
                    <param name="decorations" type="int"/>
                    <param name="functions" type="int"/>
                </params>
                <scope line="528"/>
                <scope line="531"/>
                <declaration name="hints" type="PropMwmHints" line="534"/>
            </method>
            <method name="needRemap" type="boolean" line="541">
                <params>
                    <param name="window" type="XDecoratedPeer"/>
                </params>
            </method>
            <method name="setShellDecor" type="void" line="544">
                <params>
                    <param name="window" type="XDecoratedPeer"/>
                </params>
                <declaration name="decorations" type="int" line="545"/>
                <declaration name="functions" type="int" line="546"/>
                <declaration name="resizable" type="boolean" line="547"/>
                <scope line="548">
                    <scope line="549"/>
                    <scope line="552"/>
                </scope>
                <scope line="558"/>
            </method>
            <method name="setShellResizable" type="void" line="564">
                <params>
                    <param name="window" type="XDecoratedPeer"/>
                </params>
                <scope line="567">
                    <declaration name="shellBounds" type="Rectangle" line="568"/>
                </scope>
                <scope line="577"/>
            </method>
            <method name="setShellNotResizable" type="void" line="581">
                <params>
                    <param name="window" type="XDecoratedPeer"/>
                    <param name="newDimensions" type="WindowDimensions"/>
                    <param name="shellBounds" type="Rectangle"/>
                    <param name="justChangeSize" type="boolean"/>
                </params>
                <scope line="584">
                    <scope line="585"/>
                    <scope line="591"/>
                </scope>
                <scope line="595"/>
            </method>
            <declaration name="protocolsMap" type="HashMap&lt;Class&lt;?&gt;,Collection&lt;?&gt;&gt;" line="599"/>
            <javadoc line="599">
                \
                  Protocols support                
            </javadoc>
            <javadoc line="604">
                Returns all protocols supporting given protocol interface                
            </javadoc>
            <method name="getProtocols" type="Collection<T>" line="607">
                <params>
                    <param name="protocolInterface" type="Class<T>"/>
                </params>
                <declaration name="res" type="Collection&lt;T&gt;" line="608"/>
                <scope line="609"/>
                <scope line="612"/>
            </method>
            <method name="addProtocol" type="void" line="616">
                <params>
                    <param name="protocolInterface" type="Class<T>"/>
                    <param name="protocol" type="T"/>
                </params>
                <declaration name="protocols" type="Collection&lt;T&gt;" line="617"/>
            </method>
            <method name="supportsDynamicLayout" type="boolean" line="621">
                <declaration name="wm" type="int" line="622"/>
            </method>
            <javadoc line="638">
                Check if state is supported.
                  Note that a compound state is always reported as not supported.
                  Note also that MAXIMIZED_BOTH is considered not a compound state.
                  Therefore, a compound state is just ICONIFIED | anything else.                
            </javadoc>
            <method name="supportsExtendedState" type="boolean" line="644">
                <params>
                    <param name="state" type="int"/>
                </params>
                <scope line="648"/>
                <scope line="652">
                    <scope line="653"/>
                </scope>
            </method>
            <javadoc line="661">
                \
                  Reading state from different protocols
                  \                
            </javadoc>
            <method name="getExtendedState" type="int" line="666">
                <params>
                    <param name="window" type="XWindowPeer"/>
                </params>
                <declaration name="state" type="int" line="667"/>
                <scope line="668"/>
                <scope line="671"/>
                <scope line="674"/>
            </method>
            <javadoc line="678">
                \
                  Notice window state change when WM changes a property on the window ...
                  \                
            </javadoc>
            <method name="isStateChange" type="boolean" line="683">
                <params>
                    <param name="window" type="XDecoratedPeer"/>
                    <param name="e" type="XPropertyEvent"/>
                </params>
                <scope line="684"/>
                <declaration name="wm_state" type="int" line="688"/>
                <scope line="689"/>
                <scope line="693"/>
                <declaration name="is_state_change" type="boolean" line="696"/>
                <scope line="697"/>
                <scope line="700"/>
            </method>
            <method name="getState" type="int" line="706">
                <params>
                    <param name="window" type="XDecoratedPeer"/>
                </params>
                <declaration name="res" type="int" line="707"/>
                <declaration name="wm_state" type="int" line="708"/>
                <scope line="709"/>
                <scope line="712"/>
            </method>
            <javadoc line="718">
                Moves window to the specified layer, layer is one of the constants defined
                  in XLayerProtocol                
            </javadoc>
            <method name="setLayer" type="void" line="722">
                <params>
                    <param name="window" type="XWindowPeer"/>
                    <param name="layer" type="int"/>
                </params>
                <scope line="723">
                    <scope line="724"/>
                </scope>
            </method>
            <method name="setExtendedState" type="void" line="730">
                <params>
                    <param name="window" type="XWindowPeer"/>
                    <param name="state" type="int"/>
                </params>
                <scope line="731">
                    <scope line="732"/>
                </scope>
                <scope line="737">
                    <scope line="739"/>
                    <scope line="743"/>
                </scope>
            </method>
            <method name="unshadeKludge" type="void" line="749">
                <params>
                    <param name="window" type="XDecoratedPeer"/>
                </params>
                <scope line="751"/>
            </method>
            <declaration name="inited" type="boolean" line="756"/>
            <method name="init" type="void" line="757">
                <scope line="758"/>
            </method>
            <method name="initializeProtocols" type="void" line="765">
                <declaration name="net_protocol" type="XNETProtocol" line="766"/>
                <scope line="767">
                    <scope line="768"/>
                    <scope line="771">
                        <scope line="772"/>
                        <scope line="775"/>
                    </scope>
                </scope>
                <declaration name="win" type="XWINProtocol" line="780"/>
                <scope line="781">
                    <scope line="782">
                        <scope line="783"/>
                        <scope line="786"/>
                    </scope>
                </scope>
            </method>
            <declaration name="storedInsets" type="HashMap" line="792"/>
            <method name="guessInsets" type="Insets" line="793">
                <params>
                    <param name="window" type="XDecoratedPeer"/>
                </params>
                <declaration name="res" type="Insets" line="794"/>
                <scope line="795"/>
            </method>
            <declaration name="awtWMStaticGravity" type="int" line="816"/>
            <method name="configureGravityBuggy" type="boolean" line="817">
                <scope line="818"/>
                <scope line="821"/>
                <scope line="826">
                    <declaration name="wm_name" type="String" line="827"/>
                    <declaration name="pat" type="Pattern" line="828"/>
                    <scope line="829">
                        <declaration name="match" type="Matcher" line="830"/>
                        <scope line="831">
                            <declaration name="v1" type="int" line="832"/>
                            <declaration name="v2" type="int" line="833"/>
                            <declaration name="v3" type="int" line="834"/>
                        </scope>
                    </scope>
                    <scope line="838"/>
                </scope>
            </method>
            <method name="getInsetsFromExtents" type="Insets" line="849">
                <params>
                    <param name="window" type="long"/>
                </params>
                <scope line="850"/>
                <declaration name="net_protocol" type="XNETProtocol" line="853"/>
                <scope line="854">
                    <declaration name="insets" type="Insets" line="855"/>
                    <scope line="857"/>
                </scope>
            </method>
            <javadoc line="870">
                Helper function reads property of type CARDINAL[4] = { left, right, top, bottom }
                  and converts it to Insets object.                
            </javadoc>
            <method name="getInsetsFromProp" type="Insets" line="874">
                <params>
                    <param name="window" type="long"/>
                    <param name="atom" type="XAtom"/>
                </params>
                <scope line="875"/>
                <declaration name="getter" type="WindowPropertyGetter" line="878"/>
                <scope line="879">
                    <scope line="880"/>
                    <scope line="883"/>
                </scope>
                <scope line="887"/>
            </method>
            <javadoc line="891">
                Asks WM to fill Frame Extents (insets) for the window.                
            </javadoc>
            <method name="requestWMExtents" type="void" line="894">
                <params>
                    <param name="window" type="long"/>
                </params>
                <scope line="895"/>
                <declaration name="msg" type="XClientMessageEvent" line="899"/>
                <scope line="906">
                    <declaration name="net_protocol" type="XNETProtocol" line="907"/>
                    <scope line="908"/>
                    <scope line="912"/>
                </scope>
                <scope line="917"/>
            </method>
            <method name="syncTopLevelPos" type="boolean" line="922">
                <params>
                    <param name="window" type="long"/>
                    <param name="attrs" type="XWindowAttributes"/>
                </params>
                <declaration name="tries" type="int" line="923"/>
                <scope line="925">
                    <scope line="926">
                        <scope line="928"/>
                    </scope>
                </scope>
                <scope line="936"/>
            </method>
            <method name="getInsets" type="Insets" line="941">
                <params>
                    <param name="win" type="XDecoratedPeer"/>
                    <param name="window" type="long"/>
                    <param name="parent" type="long"/>
                </params>
                <declaration name="correctWM" type="Insets" line="942"/>
                <scope line="944">
                    <declaration name="lwinAttr" type="XWindowAttributes" line="948"/>
                    <declaration name="pattr" type="XWindowAttributes" line="949"/>
                    <scope line="950">
                        <scope line="953"/>
                        <scope line="966">
                            <scope line="967"/>
                            <scope line="973"/>
                        </scope>
                        <scope line="980"/>
                        <scope line="990">
                            <declaration name="status" type="int" line="993"/>
                            <scope line="995"/>
                            <scope line="1000">
                                <declaration name="grand_parent" type="long" line="1005"/>
                                <scope line="1006"/>
                                <scope line="1009"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1020"/>
                </scope>
                <scope line="1025"/>
            </method>
            <method name="isDesktopWindow" type="boolean" line="1030">
                <params>
                    <param name="w" type="long"/>
                </params>
                <scope line="1031">
                    <declaration name="wtype" type="XAtomList" line="1032"/>
                </scope>
                <scope line="1035"/>
            </method>
            <method name="getNETProtocol" type="XNETProtocol" line="1039"/>
            <javadoc line="1042">
                Sets _NET_WN_ICON property on the window using the arrays of
                  raster-data for icons. If icons is null, removes _NET_WM_ICON
                  property.
                  This method invokes XNETProtocol.setWMIcon() for WMs that
                  support NET protocol.                
                <return>
                    true if hint was modified successfully, false otherwise                    
                </return>
            </javadoc>
            <method name="setNetWMIcon" type="boolean" line="1050">
                <params>
                    <param name="window" type="XWindowPeer"/>
                    <param name="icons" type="java.util.List<XIconInfo>"/>
                </params>
                <scope line="1051"/>
            </method>
        </class>
    </source>