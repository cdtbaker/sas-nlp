<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="sun.misc"/>
        <class name="XlibWrapper" line="32">
            <comment line="36">
                strange constants                
            </comment>
            <comment line="40">
                define a private constructor here to prevent this class and all
                 its descendants from being created                
            </comment>
            <comment line="46">
                Display XOpenDisplay(display_name)
                char display_name;                
            </comment>
            <comment line="97">
                Window XCreateWindow(display, parent, x, y, width, height,
                border_width, depth,
                class, visual, valuemask, attributes)
                Display display;
                Window parent;
                int x, y;
                unsigned int width, height;
                unsigned int border_width;
                int depth;
                unsigned int class;
                Visual visual
                unsigned long valuemask;
                XSetWindowAttributes attributes;                
            </comment>
            <comment line="132">
                void XSetWMProperties(display, w, window_name, icon_name,
                argv, argc, normal_hints, wm_hints, class_hints)
                Display display;
                Window w;
                XTextProperty window_name;
                XTextProperty icon_name;
                char argv;
                int argc;
                XSizeHints normal_hints;
                XWMHints wm_hints;
                XClassHint class_hints;                
            </comment>
            <comment line="147">
                XMapWindow(display, w)
                Display display;
                Window w;                
            </comment>
            <comment line="166">
                XUnmapWindow(display, w)
                Display display;
                Window w;                
            </comment>
            <comment line="178">
                XSelectInput(display, w, event_mask)
                Display display;
                Window w;
                long event_mask;                
            </comment>
            <comment line="187">
                XNextEvent(display, event_return)
                Display display;
                XEvent event_return;                
            </comment>
            <comment line="196">
                XMaskEvent(display, event_mask, event_return)
                Display display;
                long event_mask;
                XEvent event_return;                
            </comment>
            <comment line="206">
                Bool XFilterEvent(event, w)
                XEvent event;
                Window w;                
            </comment>
            <comment line="213">
                Bool XSupportsLocale()                
            </comment>
            <comment line="218">
                char XSetLocaleModifiers(modifier_list)
                char modifier_list;                
            </comment>
            <comment line="231">
                XPeekEvent(display, event_return)
                Display display;
                XEvent event_return;                
            </comment>
            <comment line="240">
                XFlush(display)
                Display display;                
            </comment>
            <comment line="247">
                XSync(display, discard)
                Display display;
                Bool discard;                
            </comment>
            <comment line="256">
                XMoveResizeWindow(display, w, x, y, width, height)
                Display display;
                Window w;
                int x, y;
                unsigned int width, height;                
            </comment>
            <comment line="266">
                Bool XQueryPointer(display, w, root_return, child_return,
                root_x_return, root_y_return,
                win_x_return, win_y_return,
                mask_return)
                Display display;
                Window w;
                Window root_return, child_return;
                int root_x_return, root_y_return;
                int win_x_return, win_y_return;
                unsigned int mask_return;                
            </comment>
            <comment line="281">
                XFreeCursor(display, cursor)
                Display display;
                Cursor cursor;                
            </comment>
            <comment line="288">
                XSetWindowBackground(display, w, background_pixel)
                Display display;
                Window w;
                unsigned long background_pixel;                
            </comment>
            <comment line="299">
                Atom XInternAtom(display, atom_name, only_if_exists)
                Display display;
                char atom_name;
                Bool only_if_exists;                
            </comment>
            <comment line="362">
                Cursor XCreateFontCursor(display, shape)
                Display display;
                unsigned int shape;
                
                we always pass int as shape param.
                perhaps later we will need to change type of shape to long.                
            </comment>
            <comment line="373">
                Pixmap XCreateBitmapFromData(display, d, data, width,
                height)
                Display display;
                Drawable d;
                char data;
                unsigned int width, height;                
            </comment>
            <comment line="384">
                XFreePixmap(display, pixmap)
                Display display;
                Pixmap pixmap;                
            </comment>
            <comment line="392">
                Cursor XCreatePixmapCursor(display, source, mask,
                foreground_color, background_color, x, y)
                Display display;
                Pixmap source;
                Pixmap mask;
                XColor foreground_color;
                XColor background_color;
                unsigned int x, y;                
            </comment>
            <comment line="405">
                Status XQueryBestCursor(display, d, width, height,
                width_return, height_return)
                Display display;
                Drawable d;
                unsigned int width, height;
                unsigned int width_return, height_return;                
            </comment>
            <comment line="418">
                Status XAllocColor(display, colormap, screen_in_out)
                Display display;
                Colormap colormap;
                XColor screen_in_out;                
            </comment>
            <comment line="432">
                XChangeWindowAttributes(display, w, valuemask, attributes)
                Display display;
                Window w;
                unsigned long valuemask;
                XSetWindowAttributes attributes;                
            </comment>
            <comment line="499">
                xkb-related                
            </comment>
            <comment line="526">
                int (XSynchronize(Display display, Bool onoff))();
                display   Specifies the connection to the X server.
                onoff     Specifies a Boolean value that indicates whether to enable or disable synchronization.                
            </comment>
            <comment line="566">
                                
            </comment>
            <comment line="568">
                array to hold 8 longs                
            </comment>
            <comment line="569">
                array to hold 8 ints                
            </comment>
            <declaration name="unsafe" type="Unsafe" line="34"/>
            <declaration name="MAXSIZE" type="int" line="36"/>
            <declaration name="MINSIZE" type="int" line="37"/>
            <method name="XlibWrapper" type="constructor" line="42"/>
            <declaration name="eventToString" type="String" line="50"/>
            <method name="XFree" type="void" line="60"/>
            <method name="memcpy" type="void" line="61"/>
            <method name="getAddress" type="long" line="62"/>
            <method name="copyIntArray" type="void" line="63"/>
            <method name="copyLongArray" type="void" line="64"/>
            <method name="getStringBytes" type="byte[]" line="66"/>
            <javadoc line="66">
                Gets byte string from str_ptr and copies it into byte array
                  String should be NULL terminated                
            </javadoc>
            <method name="XOpenDisplay" type="long" line="72"/>
            <method name="XCloseDisplay" type="void" line="74"/>
            <method name="XDisplayString" type="long" line="76"/>
            <method name="XSetCloseDownMode" type="void" line="78"/>
            <method name="DefaultScreen" type="long" line="80"/>
            <method name="ScreenOfDisplay" type="long" line="82"/>
            <method name="DoesBackingStore" type="int" line="84"/>
            <method name="DisplayWidth" type="long" line="86"/>
            <method name="DisplayWidthMM" type="long" line="87"/>
            <method name="DisplayHeight" type="long" line="89"/>
            <method name="DisplayHeightMM" type="long" line="90"/>
            <method name="RootWindow" type="long" line="92"/>
            <method name="ScreenCount" type="int" line="93"/>
            <method name="XCreateWindow" type="long" line="112"/>
            <method name="XDestroyWindow" type="void" line="114"/>
            <method name="XGrabPointer" type="int" line="116"/>
            <method name="XUngrabPointer" type="void" line="120"/>
            <method name="XGrabKeyboard" type="int" line="122"/>
            <method name="XUngrabKeyboard" type="void" line="126"/>
            <method name="XGrabServer" type="void" line="128"/>
            <method name="XUngrabServer" type="void" line="129"/>
            <method name="XMapWindow" type="void" line="153"/>
            <method name="XMapRaised" type="void" line="154"/>
            <method name="XRaiseWindow" type="void" line="155"/>
            <method name="XLowerWindow" type="void" line="157"/>
            <method name="XRestackWindows" type="void" line="158"/>
            <method name="XConfigureWindow" type="void" line="159"/>
            <method name="XSetInputFocus" type="void" line="161"/>
            <method name="XSetInputFocus2" type="void" line="162"/>
            <method name="XGetInputFocus" type="long" line="163"/>
            <method name="XUnmapWindow" type="void" line="172"/>
            <method name="XSelectInput" type="void" line="184"/>
            <method name="XNextEvent" type="void" line="193"/>
            <method name="XMaskEvent" type="void" line="201"/>
            <method name="XWindowEvent" type="void" line="203"/>
            <method name="XFilterEvent" type="boolean" line="210"/>
            <method name="XSupportsLocale" type="boolean" line="215"/>
            <method name="XSetLocaleModifiers" type="String" line="221"/>
            <method name="XTranslateCoordinates" type="int" line="224"/>
            <method name="XPeekEvent" type="void" line="237"/>
            <method name="XFlush" type="void" line="244"/>
            <method name="XSync" type="void" line="252"/>
            <method name="XMoveResizeWindow" type="void" line="261"/>
            <method name="XResizeWindow" type="void" line="262"/>
            <method name="XMoveWindow" type="void" line="263"/>
            <method name="XQueryPointer" type="boolean" line="278"/>
            <method name="XFreeCursor" type="void" line="285"/>
            <method name="XSetWindowBackground" type="void" line="294"/>
            <method name="XEventsQueued" type="int" line="296"/>
            <method name="XInternAtoms" type="int" line="305"/>
            <method name="SetProperty" type="void" line="307"/>
            <method name="GetProperty" type="String" line="308"/>
            <method name="InternAtom" type="long" line="309"/>
            <method name="XGetWindowProperty" type="int" line="310"/>
            <method name="XChangePropertyImpl" type="void" line="315"/>
            <method name="XChangeProperty" type="void" line="320">
                <params>
                    <param name="display" type="long"/>
                    <param name="window" type="long"/>
                    <param name="atom" type="long"/>
                    <param name="type" type="long"/>
                    <param name="format" type="int"/>
                    <param name="mode" type="int"/>
                    <param name="data" type="long"/>
                    <param name="nelements" type="int"/>
                </params>
                <comment line="322">
                    TODO: handling of XChangePropertyImpl return value, if not Success - don&apos;t cache                    
                </comment>
                <scope line="326">
                    <declaration name="length" type="int" line="327"/>
                </scope>
            </method>
            <method name="XChangePropertyS" type="void" line="340"/>
            <method name="XDeleteProperty" type="void" line="342"/>
            <method name="XSetTransientFor" type="void" line="344"/>
            <method name="XSetWMHints" type="void" line="345"/>
            <method name="XGetWMHints" type="void" line="346"/>
            <method name="XAllocWMHints" type="long" line="347"/>
            <method name="XGetPointerMapping" type="int" line="348"/>
            <method name="XGetDefault" type="String" line="349"/>
            <method name="getScreenOfWindow" type="long" line="350"/>
            <method name="XScreenNumberOfScreen" type="long" line="351"/>
            <method name="XIconifyWindow" type="int" line="352"/>
            <method name="ServerVendor" type="String" line="353"/>
            <method name="VendorRelease" type="int" line="354"/>
            <method name="IsXsunKPBehavior" type="boolean" line="355"/>
            <method name="IsSunKeyboard" type="boolean" line="356"/>
            <method name="IsKanaKeyboard" type="boolean" line="357"/>
            <method name="XBell" type="void" line="359"/>
            <method name="XCreateFontCursor" type="int" line="370"/>
            <method name="XCreateBitmapFromData" type="long" line="381"/>
            <method name="XFreePixmap" type="void" line="389"/>
            <method name="XCreatePixmapCursor" type="long" line="401"/>
            <method name="XQueryBestCursor" type="boolean" line="414"/>
            <method name="XAllocColor" type="boolean" line="424"/>
            <method name="SetToolkitErrorHandler" type="long" line="427"/>
            <method name="XSetErrorHandler" type="void" line="428"/>
            <method name="CallErrorHandler" type="int" line="429"/>
            <method name="XChangeWindowAttributes" type="void" line="439"/>
            <method name="XGetWindowAttributes" type="int" line="440"/>
            <method name="XGetGeometry" type="int" line="441"/>
            <method name="XGetWMNormalHints" type="int" line="444"/>
            <method name="XSetWMNormalHints" type="void" line="445"/>
            <method name="XSetMinMaxHints" type="void" line="446"/>
            <method name="XAllocSizeHints" type="long" line="447"/>
            <method name="XSendEvent" type="int" line="449"/>
            <method name="XPutBackEvent" type="void" line="450"/>
            <method name="XQueryTree" type="int" line="451"/>
            <method name="XGetVisualInfo" type="long" line="452"/>
            <method name="XReparentWindow" type="void" line="453"/>
            <method name="XConvertSelection" type="void" line="455"/>
            <method name="XSetSelectionOwner" type="void" line="459"/>
            <method name="XGetSelectionOwner" type="long" line="462"/>
            <method name="XGetAtomName" type="String" line="464"/>
            <method name="XMaxRequestSize" type="long" line="466"/>
            <method name="XCreatePixmap" type="long" line="469"/>
            <method name="XCreateImage" type="long" line="470"/>
            <method name="XDestroyImage" type="void" line="473"/>
            <method name="XPutImage" type="void" line="474"/>
            <method name="XCreateGC" type="long" line="477"/>
            <method name="XFreeGC" type="void" line="478"/>
            <method name="XSetWindowBackgroundPixmap" type="void" line="479"/>
            <method name="XClearWindow" type="void" line="480"/>
            <method name="XGetIconSizes" type="int" line="481"/>
            <method name="XdbeQueryExtension" type="int" line="482"/>
            <method name="XQueryExtension" type="boolean" line="484"/>
            <method name="IsKeypadKey" type="boolean" line="486"/>
            <method name="XdbeAllocateBackBufferName" type="long" line="487"/>
            <method name="XdbeDeallocateBackBufferName" type="int" line="488"/>
            <method name="XdbeBeginIdiom" type="int" line="489"/>
            <method name="XdbeEndIdiom" type="int" line="490"/>
            <method name="XdbeSwapBuffers" type="int" line="491"/>
            <method name="XQueryKeymap" type="void" line="493"/>
            <method name="XKeycodeToKeysym" type="long" line="494"/>
            <method name="XKeysymToKeycode" type="int" line="496"/>
            <method name="XkbGetEffectiveGroup" type="int" line="499"/>
            <method name="XkbKeycodeToKeysym" type="long" line="500"/>
            <method name="XkbSelectEvents" type="void" line="501"/>
            <method name="XkbSelectEventDetails" type="void" line="502"/>
            <method name="XkbQueryExtension" type="boolean" line="504"/>
            <method name="XkbLibraryVersion" type="boolean" line="506"/>
            <method name="XkbGetMap" type="long" line="507"/>
            <method name="XkbGetUpdatedMap" type="long" line="508"/>
            <method name="XkbFreeKeyboard" type="void" line="509"/>
            <method name="XkbTranslateKeyCode" type="boolean" line="510"/>
            <method name="XConvertCase" type="void" line="513"/>
            <method name="XGetModifierMapping" type="long" line="517"/>
            <method name="XFreeModifiermap" type="void" line="518"/>
            <method name="XRefreshKeyboardMapping" type="void" line="519"/>
            <method name="XChangeActivePointerGrab" type="void" line="522"/>
            <method name="XSynchronize" type="int" line="530"/>
            <method name="XNextSecondaryLoopEvent" type="boolean" line="532"/>
            <javadoc line="532">
                Extracts an X event that can be processed in a secondary loop.
                  Should only be called on the toolkit thread.
                  Returns false if this secondary event was terminated.                
            </javadoc>
            <method name="ExitSecondaryLoop" type="void" line="538"/>
            <javadoc line="538">
                Terminates the topmost secondary loop (if any).
                  Should never be called on the toolkit thread.                
            </javadoc>
            <method name="XTextPropertyToStringList" type="String[]" line="544"/>
            <javadoc line="544">
                Calls XTextPropertyToStringList on the specified byte array and returns
                  the array of strings.                
            </javadoc>
            <method name="XShapeQueryExtension" type="boolean" line="550"/>
            <javadoc line="550">
                XSHAPE extension support.                
            </javadoc>
            <method name="SetRectangularShape" type="void" line="554"/>
            <method name="SetBitmapShape" type="void" line="557"/>
            <javadoc line="557">
                Each int in the bitmap array is one pixel with a 32-bit color:
                  R, G, B, and Alpha.                
            </javadoc>
            <method name="SetZOrder" type="void" line="563"/>
            <declaration name="lbuffer" type="long" line="567"/>
            <declaration name="ibuffer" type="long" line="568"/>
            <declaration name="larg1" type="long" line="570"/>
            <declaration name="larg2" type="long" line="571"/>
            <declaration name="larg3" type="long" line="572"/>
            <declaration name="larg4" type="long" line="573"/>
            <declaration name="larg5" type="long" line="574"/>
            <declaration name="larg6" type="long" line="575"/>
            <declaration name="larg7" type="long" line="576"/>
            <declaration name="larg8" type="long" line="577"/>
            <declaration name="iarg1" type="long" line="579"/>
            <declaration name="iarg2" type="long" line="580"/>
            <declaration name="iarg3" type="long" line="581"/>
            <declaration name="iarg4" type="long" line="582"/>
            <declaration name="iarg5" type="long" line="583"/>
            <declaration name="iarg6" type="long" line="584"/>
            <declaration name="iarg7" type="long" line="585"/>
            <declaration name="iarg8" type="long" line="586"/>
            <declaration name="dataModel" type="int" line="589"/>
            <declaration name="isBuildInternal" type="boolean" line="590"/>
            <scope line="592">
                <anonymous_class line="594">
                    <method name="run" type="Object" line="595"/>
                </anonymous_class>
                <declaration name="dataModelProp" type="String" line="593"/>
                <scope line="599"/>
                <scope line="601"/>
            </scope>
            <method name="getDataModel" type="int" line="610"/>
            <method name="hintsToString" type="String" line="614">
                <params>
                    <param name="flags" type="long"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="615"/>
                <scope line="616"/>
                <scope line="619"/>
                <scope line="622"/>
                <scope line="625"/>
                <scope line="628"/>
                <scope line="631"/>
                <scope line="634"/>
            </method>
            <method name="getEventToString" type="String" line="639">
                <params>
                    <param name="type" type="int"/>
                </params>
                <comment line="644">
                    XXX TODO various xkb types                    
                </comment>
                <scope line="640"/>
                <scope line="642"/>
            </method>
            <method name="getBuildInternal" type="boolean" line="649">
                <declaration name="javaVersion" type="String" line="650"/>
            </method>
            <method name="PrintXErrorEvent" type="void" line="654"/>
        </class>
    </source>