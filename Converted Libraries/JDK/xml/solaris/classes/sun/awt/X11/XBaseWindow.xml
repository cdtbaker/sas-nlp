<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt"/>
        <import package="sun.awt"/>
        <import package="java.util"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="XBaseWindow" line="6">
            <declaration name="log" type="PlatformLogger" line="7"/>
            <declaration name="insLog" type="PlatformLogger" line="8"/>
            <declaration name="eventLog" type="PlatformLogger" line="9"/>
            <declaration name="focusLog" type="PlatformLogger" line="10"/>
            <declaration name="grabLog" type="PlatformLogger" line="11"/>
            <declaration name="PARENT_WINDOW" type="String" line="12"/>
            <declaration name="delayedParams" type="XCreateWindowParams" line="13"/>
            <declaration name="children" type="Set&lt;Long&gt;" line="14"/>
            <declaration name="window" type="long" line="15"/>
            <declaration name="visible" type="boolean" line="16"/>
            <declaration name="mapped" type="boolean" line="17"/>
            <declaration name="embedded" type="boolean" line="18"/>
            <declaration name="maxBounds" type="Rectangle" line="19"/>
            <declaration name="parentWindow" type="XBaseWindow" line="20"/>
            <declaration name="disposed" type="boolean" line="21"/>
            <declaration name="screen" type="long" line="22"/>
            <declaration name="hints" type="XSizeHints" line="23"/>
            <declaration name="wmHints" type="XWMHints" line="24"/>
            <declaration name="MIN_SIZE" type="int" line="25"/>
            <declaration name="DEF_LOCATION" type="int" line="26"/>
            <declaration name="wm_client_leader" type="XAtom" line="27"/>
            <declaration name="InitialiseState" type="enum" line="28"/>
            <scope line="28"/>
            <declaration name="initialising" type="InitialiseState" line="29"/>
            <declaration name="x" type="int" line="30"/>
            <declaration name="y" type="int" line="31"/>
            <declaration name="width" type="int" line="32"/>
            <declaration name="height" type="int" line="33"/>
            <method name="awtLock" type="void" line="34"/>
            <method name="awtUnlock" type="void" line="37"/>
            <method name="awtLockNotifyAll" type="void" line="40"/>
            <method name="awtLockWait" type="void" line="43"/>
            <method name="init" type="void" line="46">
                <params>
                    <param name="parentWindow" type="long"/>
                    <param name="bounds" type="Rectangle"/>
                </params>
            </method>
            <method name="preInit" type="void" line="48"/>
            <method name="postInit" type="void" line="50"/>
            <class name="StateLock" line="52">
                <extends class="Object"/>
            </class>
            <declaration name="state_lock" type="StateLock" line="54"/>
            <javadoc line="55">
                Called for delayed inits during construction                
            </javadoc>
            <method name="instantPreInit" type="void" line="58">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
            </method>
            <javadoc line="62">
                Called before window creation, descendants should override to initialize the data,
                  initialize params.                
            </javadoc>
            <method name="preInit" type="void" line="66">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
                <declaration name="parent" type="Object" line="71"/>
                <scope line="72"/>
                <scope line="75">
                    <declaration name="parentWindowID" type="Long" line="76"/>
                    <scope line="77"/>
                </scope>
                <declaration name="eventMask" type="Long" line="81"/>
                <scope line="82">
                    <declaration name="mask" type="long" line="83"/>
                </scope>
            </method>
            <javadoc line="89">
                Called after window creation, descendants should override to initialize Window
                  with class-specific values and perform post-initialization actions.                
            </javadoc>
            <method name="postInit" type="void" line="93">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
            </method>
            <javadoc line="98">
                Creates window using parameters &lt;code&gt;params&lt;/code&gt;
                  If params contain flag DELAYED doesn&apos;t do anything.
                  Note: Descendants can call this method to create the window
                  at the time different to instance construction.                
            </javadoc>
            <method name="init" type="void" line="104">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
                <scope line="108">
                    <scope line="109"/>
                    <scope line="114"/>
                </scope>
                <scope line="123"/>
                <scope line="130"/>
            </method>
            <method name="checkInitialised" type="boolean" line="138">
                <scope line="140">
                    <scope line="145">
                        <scope line="146"/>
                    </scope>
                    <scope line="150"/>
                </scope>
                <scope line="161"/>
            </method>
            <method name="XBaseWindow" type="constructor" line="165"/>
            <javadoc line="168">
                Creates normal child window                
            </javadoc>
            <method name="XBaseWindow" type="constructor" line="171">
                <params>
                    <param name="parentWindow" type="long"/>
                    <param name="bounds" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="174">
                Creates top-level window                
            </javadoc>
            <method name="XBaseWindow" type="constructor" line="177">
                <params>
                    <param name="bounds" type="Rectangle"/>
                </params>
            </method>
            <method name="XBaseWindow" type="constructor" line="180">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
            </method>
            <method name="XBaseWindow" type="constructor" line="183">
                <params>
                    <param name="parentWindow" type="long"/>
                </params>
            </method>
            <javadoc line="186">
                Verifies that all required parameters are set. If not, sets them to default values.
                  Verifies values of critical parameters, adjust their values when needed.                
                <throws>
                    IllegalArgumentException if params is null                    
                </throws>
            </javadoc>
            <method name="checkParams" type="void" line="191">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
                <scope line="192"/>
                <declaration name="bounds" type="Rectangle" line="201"/>
                <declaration name="eventMaskObj" type="Long" line="204"/>
                <declaration name="eventMask" type="long" line="205"/>
            </method>
            <javadoc line="209">
                Creates window with parameters specified by &lt;code&gt;params&lt;/code&gt;                
                <see>
                    #init                    
                </see>
            </javadoc>
            <method name="create" type="void" line="213">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
                <scope line="215">
                    <declaration name="xattr" type="XSetWindowAttributes" line="216"/>
                    <scope line="217">
                        <declaration name="value_mask" type="long" line="219"/>
                        <declaration name="eventMask" type="Long" line="220"/>
                        <declaration name="border_pixel" type="Long" line="223"/>
                        <scope line="224"/>
                        <declaration name="colormap" type="Long" line="228"/>
                        <scope line="229"/>
                        <declaration name="background_pixmap" type="Long" line="233"/>
                        <scope line="234"/>
                        <declaration name="parentWindow" type="Long" line="238"/>
                        <declaration name="bounds" type="Rectangle" line="239"/>
                        <declaration name="depth" type="Integer" line="240"/>
                        <declaration name="visual_class" type="Integer" line="241"/>
                        <declaration name="visual" type="Long" line="242"/>
                        <declaration name="overrideRedirect" type="Boolean" line="243"/>
                        <scope line="244"/>
                        <declaration name="saveUnder" type="Boolean" line="248"/>
                        <scope line="249"/>
                        <declaration name="backingStore" type="Integer" line="253"/>
                        <scope line="254"/>
                        <declaration name="bitGravity" type="Integer" line="258"/>
                        <scope line="259"/>
                        <scope line="263"/>
                        <scope line="267"/>
                    </scope>
                    <scope line="272"/>
                </scope>
                <scope line="276"/>
            </method>
            <method name="getDelayedParams" type="XCreateWindowParams" line="280"/>
            <method name="getWMName" type="String" line="283"/>
            <method name="initClientLeader" type="void" line="286">
                <scope line="288">
                    <scope line="289"/>
                </scope>
                <scope line="294"/>
            </method>
            <method name="getXAWTRootWindow" type="XRootWindow" line="298"/>
            <method name="destroy" type="void" line="301">
                <scope line="303">
                    <scope line="304"/>
                    <scope line="310"/>
                    <scope line="314"/>
                </scope>
                <scope line="319"/>
            </method>
            <method name="flush" type="void" line="323">
                <scope line="325"/>
                <scope line="328"/>
            </method>
            <javadoc line="332">
                Helper function to set W                
            </javadoc>
            <method name="setWMHints" type="void" line="335">
                <params>
                    <param name="hints" type="XWMHints"/>
                </params>
                <scope line="337"/>
                <scope line="340"/>
            </method>
            <method name="getWMHints" type="XWMHints" line="344">
                <scope line="345"/>
            </method>
            <method name="getHints" type="XSizeHints" line="350">
                <scope line="351">
                    <declaration name="p_hints" type="long" line="352"/>
                </scope>
            </method>
            <method name="setSizeHints" type="void" line="357">
                <params>
                    <param name="flags" type="long"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="360">
                    <declaration name="hints" type="XSizeHints" line="361"/>
                    <scope line="362"/>
                    <scope line="366"/>
                    <scope line="370"/>
                    <scope line="373"/>
                    <scope line="377"/>
                    <scope line="380">
                        <scope line="381">
                            <scope line="382"/>
                            <scope line="385"/>
                            <scope line="388"/>
                            <scope line="391"/>
                        </scope>
                        <scope line="395"/>
                    </scope>
                    <scope line="400">
                        <scope line="402">
                            <scope line="403"/>
                            <scope line="406"/>
                            <scope line="409"/>
                            <scope line="412"/>
                        </scope>
                        <scope line="416"/>
                    </scope>
                </scope>
                <scope line="425"/>
            </method>
            <method name="isMinSizeSet" type="boolean" line="429">
                <declaration name="hints" type="XSizeHints" line="430"/>
                <declaration name="flags" type="long" line="431"/>
            </method>
            <javadoc line="434">
                This lock object can be used to protect instance data from concurrent access
                  by two threads. If both state lock and AWT lock are taken, AWT Lock should be taken first.                
            </javadoc>
            <method name="getStateLock" type="Object" line="438"/>
            <method name="getWindow" type="long" line="441"/>
            <method name="getContentWindow" type="long" line="444"/>
            <method name="getContentXWindow" type="XBaseWindow" line="447"/>
            <method name="getBounds" type="Rectangle" line="450"/>
            <method name="getSize" type="Dimension" line="453"/>
            <method name="toFront" type="void" line="456">
                <scope line="458"/>
                <scope line="461"/>
            </method>
            <method name="xRequestFocus" type="void" line="465">
                <params>
                    <param name="time" type="long"/>
                </params>
                <scope line="467"/>
                <scope line="471"/>
            </method>
            <method name="xRequestFocus" type="void" line="475">
                <scope line="477"/>
                <scope line="481"/>
            </method>
            <method name="xGetInputFocus" type="long" line="485">
                <scope line="487"/>
                <scope line="490"/>
            </method>
            <method name="xSetVisible" type="void" line="494">
                <params>
                    <param name="visible" type="boolean"/>
                </params>
                <scope line="497">
                    <scope line="499"/>
                    <scope line="502"/>
                </scope>
                <scope line="507"/>
            </method>
            <method name="isMapped" type="boolean" line="511"/>
            <method name="updateWMName" type="void" line="514">
                <declaration name="name" type="String" line="515"/>
                <scope line="517">
                    <scope line="518"/>
                    <declaration name="nameAtom" type="XAtom" line="521"/>
                    <declaration name="netNameAtom" type="XAtom" line="523"/>
                </scope>
                <scope line="526"/>
            </method>
            <method name="setWMClass" type="void" line="530">
                <params>
                    <param name="cl" type="String[]"/>
                </params>
                <scope line="531"/>
                <scope line="535">
                    <declaration name="xa" type="XAtom" line="536"/>
                </scope>
                <scope line="539"/>
            </method>
            <method name="isVisible" type="boolean" line="543"/>
            <method name="getScreenOfWindow" type="long" line="546">
                <params>
                    <param name="window" type="long"/>
                </params>
                <scope line="548"/>
                <scope line="551"/>
            </method>
            <method name="getScreenNumber" type="long" line="555">
                <scope line="557"/>
                <scope line="560"/>
            </method>
            <method name="getScreen" type="long" line="564">
                <scope line="565"/>
            </method>
            <method name="xSetBounds" type="void" line="570">
                <params>
                    <param name="bounds" type="Rectangle"/>
                </params>
            </method>
            <method name="xSetBounds" type="void" line="573">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="574"/>
                <scope line="582"/>
                <scope line="585"/>
            </method>
            <javadoc line="589">
                Translate coordinates from one window into another.  Optimized
                  for XAWT - uses cached data when possible.  Preferable over
                  pure XTranslateCoordinates.                
                <return>
                    coordinates relative to dst, or null if error happened                    
                </return>
            </javadoc>
            <method name="toOtherWindow" type="Point" line="595">
                <params>
                    <param name="src" type="long"/>
                    <param name="dst" type="long"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="rpt" type="Point" line="596"/>
                <declaration name="srcPeer" type="XBaseWindow" line="597"/>
                <declaration name="dstPeer" type="XBaseWindow" line="598"/>
                <scope line="599"/>
                <scope line="603"/>
                <scope line="607"/>
                <scope line="611"/>
            </method>
            <method name="toGlobal" type="Rectangle" line="616">
                <params>
                    <param name="rec" type="Rectangle"/>
                </params>
                <declaration name="p" type="Point" line="617"/>
                <declaration name="newRec" type="Rectangle" line="618"/>
                <scope line="619"/>
            </method>
            <method name="toGlobal" type="Point" line="624">
                <params>
                    <param name="pt" type="Point"/>
                </params>
                <declaration name="p" type="Point" line="625"/>
                <scope line="626"/>
                <scope line="629"/>
            </method>
            <method name="toGlobal" type="Point" line="633">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="root" type="long" line="634"/>
                <scope line="636"/>
                <scope line="639"/>
                <declaration name="p" type="Point" line="642"/>
                <scope line="643"/>
                <scope line="646"/>
            </method>
            <method name="toLocal" type="Point" line="650">
                <params>
                    <param name="pt" type="Point"/>
                </params>
                <declaration name="p" type="Point" line="651"/>
                <scope line="652"/>
                <scope line="655"/>
            </method>
            <method name="toLocal" type="Point" line="659">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="root" type="long" line="660"/>
                <scope line="662"/>
                <scope line="665"/>
                <declaration name="p" type="Point" line="668"/>
                <scope line="669"/>
                <scope line="672"/>
            </method>
            <javadoc line="676">
                We should always grab both keyboard and pointer to control event flow
                  on popups. This also simplifies synthetic grab implementation.
                  The active grab overrides activated automatic grab.                
            </javadoc>
            <method name="grabInput" type="boolean" line="681">
                <scope line="684">
                    <scope line="685"/>
                    <declaration name="prevGrabWindow" type="XBaseWindow" line="689"/>
                    <declaration name="eventMask" type="int" line="690"/>
                    <declaration name="ownerEvents" type="int" line="691"/>
                    <scope line="692">
                        <declaration name="ptrGrab" type="int" line="693"/>
                        <scope line="694"/>
                        <declaration name="keyGrab" type="int" line="700"/>
                        <scope line="701"/>
                    </scope>
                    <scope line="709"/>
                </scope>
                <scope line="716"/>
            </method>
            <method name="ungrabInput" type="void" line="720">
                <scope line="722">
                    <declaration name="grabWindow" type="XBaseWindow" line="723"/>
                    <scope line="725">
                        <scope line="727"/>
                    </scope>
                </scope>
                <scope line="735"/>
            </method>
            <method name="ungrabInputImpl" type="void" line="739"/>
            <method name="checkSecurity" type="void" line="741">
                <scope line="742">
                    <declaration name="stack" type="StackTraceElement" line="743"/>
                </scope>
            </method>
            <method name="getChildren" type="Set<Long>" line="747">
                <scope line="748"/>
            </method>
            <method name="handleMapNotifyEvent" type="void" line="752">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
            </method>
            <method name="handleUnmapNotifyEvent" type="void" line="755">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
            </method>
            <method name="handleReparentNotifyEvent" type="void" line="758">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <scope line="759">
                    <declaration name="msg" type="XReparentEvent" line="760"/>
                </scope>
            </method>
            <method name="handlePropertyNotify" type="void" line="764">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="msg" type="XPropertyEvent" line="765"/>
                <scope line="766"/>
                <scope line="769"/>
            </method>
            <method name="handleDestroyNotify" type="void" line="773">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="xany" type="XAnyEvent" line="774"/>
                <scope line="775">
                    <scope line="777"/>
                </scope>
                <scope line="781">
                    <scope line="782"/>
                </scope>
            </method>
            <method name="handleCreateNotify" type="void" line="787">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="xany" type="XAnyEvent" line="788"/>
                <scope line="789">
                    <scope line="790"/>
                </scope>
            </method>
            <method name="handleClientMessage" type="void" line="795">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <scope line="796">
                    <declaration name="msg" type="XClientMessageEvent" line="797"/>
                </scope>
            </method>
            <method name="handleVisibilityEvent" type="void" line="801">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
            </method>
            <method name="handleKeyPress" type="void" line="803">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
            </method>
            <method name="handleKeyRelease" type="void" line="805">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
            </method>
            <method name="handleExposeEvent" type="void" line="807">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
            </method>
            <javadoc line="809">
                Activate automatic grab on first ButtonPress,
                  deactivate on full mouse release                
            </javadoc>
            <method name="handleButtonPressRelease" type="void" line="813">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="xbe" type="XButtonEvent" line="814"/>
                <scope line="815"/>
                <declaration name="buttonState" type="int" line="818"/>
                <declaration name="buttonsNumber" type="int" line="819"/>
                <scope line="820"/>
                <scope line="825"/>
                <scope line="830"/>
            </method>
            <method name="handleMotionNotify" type="void" line="836">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
            </method>
            <method name="handleXCrossingEvent" type="void" line="838">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
            </method>
            <method name="handleConfigureNotifyEvent" type="void" line="840">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="xe" type="XConfigureEvent" line="841"/>
            </method>
            <javadoc line="848">
                Checks ButtonRelease released all Mouse buttons                
            </javadoc>
            <method name="isFullRelease" type="boolean" line="851">
                <params>
                    <param name="buttonState" type="int"/>
                    <param name="button" type="int"/>
                </params>
                <declaration name="buttonsNumber" type="int" line="852"/>
                <scope line="853"/>
                <scope line="856"/>
            </method>
            <method name="isGrabbedEvent" type="boolean" line="860">
                <params>
                    <param name="ev" type="XEvent"/>
                    <param name="target" type="XBaseWindow"/>
                </params>
            </method>
            <javadoc line="875">
                Dispatches event to the grab Window or event source window depending
                  on whether the grab is active and on the event type                
            </javadoc>
            <method name="dispatchToWindow" type="void" line="879">
                <params>
                    <param name="ev" type="XEvent"/>
                </params>
                <declaration name="target" type="XBaseWindow" line="880"/>
                <scope line="881"/>
                <scope line="884"/>
            </method>
            <method name="dispatchEvent" type="void" line="888">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="type" type="int" line="890"/>
                <scope line="891"/>
            </method>
            <method name="isEventDisabled" type="boolean" line="945">
                <params>
                    <param name="e" type="XEvent"/>
                </params>
            </method>
            <method name="getX" type="int" line="948"/>
            <method name="getY" type="int" line="951"/>
            <method name="getWidth" type="int" line="954"/>
            <method name="getHeight" type="int" line="957"/>
            <method name="setDisposed" type="void" line="960">
                <params>
                    <param name="d" type="boolean"/>
                </params>
            </method>
            <method name="isDisposed" type="boolean" line="963"/>
            <method name="getAbsoluteX" type="int" line="966">
                <declaration name="pw" type="XBaseWindow" line="967"/>
                <scope line="968"/>
                <scope line="971"/>
            </method>
            <method name="getAbsoluteY" type="int" line="975">
                <declaration name="pw" type="XBaseWindow" line="976"/>
                <scope line="977"/>
                <scope line="980"/>
            </method>
            <method name="getParentWindow" type="XBaseWindow" line="984"/>
            <method name="getToplevelXWindow" type="XWindowPeer" line="987">
                <declaration name="bw" type="XBaseWindow" line="988"/>
                <scope line="989"/>
            </method>
            <method name="toString" type="String" line="994"/>
            <javadoc line="997">
                Returns whether the given point is inside of the window.  Coordinates are local.                
            </javadoc>
            <method name="contains" type="boolean" line="1000">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="1003">
                Returns whether the given point is inside of the window.  Coordinates are global.                
            </javadoc>
            <method name="containsGlobal" type="boolean" line="1006">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
        </class>
    </source>