<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt"/>
        <import package="sun.awt"/>
        <import package="java.util"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="XBaseWindow" line="33">
            <comment line="59">
                copy old content on geometry change                
            </comment>
            <comment line="111">
                To prevent errors from overriding obsolete methods                
            </comment>
            <comment line="116">
                internal lock for synchronizing state changes and paint calls, initialized in preInit.
                 the order with other locks: AWTLock -&gt; stateLock                
            </comment>
            <comment line="236">
                Creates an invisible InputOnly window without an associated Component.                
            </comment>
            <comment line="265">
                This create is used by the XEmbeddedFramePeer since it has to create the window                
            </comment>
            <comment line="469">
                Call this method under AWTLock.
                 The lock should be acquired untill all operations with XSizeHints are completed.                
            </comment>
            <comment line="751">
                Convert to global coordinates.                
            </comment>
            <comment line="789">
                Convert to local coordinates.                
            </comment>
            <comment line="904">
                called from ungrabInput, used in popup windows to hide theirselfs in ungrabbing                
            </comment>
            <comment line="921">
                -------------- Event handling ----------------                
            </comment>
            <declaration name="log" type="PlatformLogger" line="34"/>
            <declaration name="insLog" type="PlatformLogger" line="35"/>
            <declaration name="eventLog" type="PlatformLogger" line="36"/>
            <declaration name="focusLog" type="PlatformLogger" line="37"/>
            <declaration name="grabLog" type="PlatformLogger" line="38"/>
            <declaration name="PARENT_WINDOW" type="String" line="40"/>
            <declaration name="delayedParams" type="XCreateWindowParams" line="59"/>
            <declaration name="children" type="Set&amp;lt;Long&amp;gt;" line="61"/>
            <declaration name="window" type="long" line="62"/>
            <declaration name="visible" type="boolean" line="63"/>
            <declaration name="mapped" type="boolean" line="64"/>
            <declaration name="embedded" type="boolean" line="65"/>
            <declaration name="maxBounds" type="Rectangle" line="66"/>
            <declaration name="parentWindow" type="XBaseWindow" line="67"/>
            <declaration name="disposed" type="boolean" line="69"/>
            <declaration name="screen" type="long" line="71"/>
            <declaration name="hints" type="XSizeHints" line="72"/>
            <declaration name="wmHints" type="XWMHints" line="73"/>
            <declaration name="MIN_SIZE" type="int" line="75"/>
            <declaration name="DEF_LOCATION" type="int" line="76"/>
            <declaration name="wm_client_leader" type="XAtom" line="78"/>
            <declaration name="InitialiseState" type="enum" line="80"/>
            <scope line="80"/>
            <declaration name="initialising" type="InitialiseState" line="87"/>
            <declaration name="x" type="int" line="89"/>
            <declaration name="y" type="int" line="90"/>
            <declaration name="width" type="int" line="91"/>
            <declaration name="height" type="int" line="92"/>
            <method name="awtLock" type="void" line="94"/>
            <method name="awtUnlock" type="void" line="98"/>
            <method name="awtLockNotifyAll" type="void" line="102"/>
            <method name="awtLockWait" type="void" line="106"/>
            <method name="init" type="void" line="111">
                <params>
                    <param name="parentWindow" type="long"/>
                    <param name="bounds" type="Rectangle"/>
                </params>
            </method>
            <method name="preInit" type="void" line="112"/>
            <method name="postInit" type="void" line="113"/>
            <class name="StateLock" line="117">
                <extends class="Object"/>
                <comment line="42">
                    parent window, Long                    
                </comment>
                <comment line="43">
                    bounds of the window, Rectangle                    
                </comment>
                <comment line="44">
                    override_redirect setting, Boolean                    
                </comment>
                <comment line="45">
                    event mask, Integer                    
                </comment>
                <comment line="46">
                    value mask, Long                    
                </comment>
                <comment line="47">
                    border pixel value, Integer                    
                </comment>
                <comment line="48">
                    color map, Long                    
                </comment>
                <comment line="49">
                    depth, Integer                    
                </comment>
                <comment line="50">
                    visual class, Integer                    
                </comment>
                <comment line="51">
                    visual, Long                    
                </comment>
                <comment line="52">
                    is embedded?, Boolean                    
                </comment>
                <comment line="53">
                    is creation delayed?, Boolean                    
                </comment>
                <comment line="54">
                    parent peer                    
                </comment>
                <comment line="55">
                    background pixmap                    
                </comment>
                <comment line="56">
                    whether it is visible by default                    
                </comment>
                <comment line="57">
                    save content under this window                    
                </comment>
                <comment line="58">
                    enables double buffering                    
                </comment>
            </class>
            <declaration name="state_lock" type="StateLock" line="118"/>
            <javadoc line="120">
                Called for delayed inits during construction                
            </javadoc>
            <method name="instantPreInit" type="void" line="123">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
            </method>
            <javadoc line="128">
                Called before window creation, descendants should override to initialize the data,
                  initialize params.                
            </javadoc>
            <method name="preInit" type="void" line="132">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
                <declaration name="parent" type="Object" line="138"/>
                <scope line="139"/>
                <scope line="141">
                    <declaration name="parentWindowID" type="Long" line="142"/>
                    <scope line="143"/>
                </scope>
                <declaration name="eventMask" type="Long" line="148"/>
                <scope line="149">
                    <declaration name="mask" type="long" line="150"/>
                </scope>
            </method>
            <javadoc line="158">
                Called after window creation, descendants should override to initialize Window
                  with class-specific values and perform post-initialization actions.                
            </javadoc>
            <method name="postInit" type="void" line="162">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
                <comment line="167">
                    Set WM_CLIENT_LEADER property                    
                </comment>
            </method>
            <javadoc line="170">
                Creates window using parameters &lt;code&gt;params&lt;/code&gt;
                  If params contain flag DELAYED doesn&apos;t do anything.
                  Note: Descendants can call this method to create the window
                  at the time different to instance construction.                
            </javadoc>
            <method name="init" type="void" line="176">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
                <scope line="181">
                    <scope line="182"/>
                    <scope line="186"/>
                </scope>
                <scope line="194"/>
                <scope line="200"/>
            </method>
            <method name="checkInitialised" type="boolean" line="209">
                <scope line="211">
                    <scope line="216">
                        <scope line="217"/>
                    </scope>
                    <scope line="220"/>
                </scope>
                <scope line="230"/>
            </method>
            <method name="XBaseWindow" type="constructor" line="238"/>
            <javadoc line="242">
                Creates normal child window                
            </javadoc>
            <method name="XBaseWindow" type="constructor" line="245">
                <params>
                    <param name="parentWindow" type="long"/>
                    <param name="bounds" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="251">
                Creates top-level window                
            </javadoc>
            <method name="XBaseWindow" type="constructor" line="254">
                <params>
                    <param name="bounds" type="Rectangle"/>
                </params>
            </method>
            <method name="XBaseWindow" type="constructor" line="260">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
            </method>
            <method name="XBaseWindow" type="constructor" line="266">
                <params>
                    <param name="parentWindow" type="long"/>
                </params>
            </method>
            <javadoc line="273">
                Verifies that all required parameters are set. If not, sets them to default values.
                  Verifies values of critical parameters, adjust their values when needed.                
                <throws>
                    IllegalArgumentException if params is null                    
                </throws>
            </javadoc>
            <method name="checkParams" type="void" line="278">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
                <comment line="295">
                    We use our own synthetic grab see XAwtState.getGrabWindow()
                     (see X vol. 1, 8.3.3.2)                    
                </comment>
                <scope line="279"/>
                <declaration name="bounds" type="Rectangle" line="288"/>
                <declaration name="eventMaskObj" type="Long" line="292"/>
                <declaration name="eventMask" type="long" line="293"/>
            </method>
            <javadoc line="300">
                Creates window with parameters specified by &lt;code&gt;params&lt;/code&gt;                
                <see>
                    #init                    
                </see>
            </javadoc>
            <method name="create" type="void" line="304">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
                <comment line="369">
                    location                    
                </comment>
                <comment line="370">
                    size                    
                </comment>
                <comment line="371">
                    border                    
                </comment>
                <comment line="372">
                    depth                    
                </comment>
                <comment line="373">
                    class                    
                </comment>
                <comment line="374">
                    visual                    
                </comment>
                <comment line="375">
                    value mask                    
                </comment>
                <comment line="376">
                    attributes                    
                </comment>
                <scope line="306">
                    <declaration name="xattr" type="XSetWindowAttributes" line="307"/>
                    <scope line="308">
                        <declaration name="value_mask" type="long" line="311"/>
                        <declaration name="eventMask" type="Long" line="313"/>
                        <declaration name="border_pixel" type="Long" line="317"/>
                        <scope line="318"/>
                        <declaration name="colormap" type="Long" line="323"/>
                        <scope line="324"/>
                        <declaration name="background_pixmap" type="Long" line="328"/>
                        <scope line="329"/>
                        <declaration name="parentWindow" type="Long" line="334"/>
                        <declaration name="bounds" type="Rectangle" line="335"/>
                        <declaration name="depth" type="Integer" line="336"/>
                        <declaration name="visual_class" type="Integer" line="337"/>
                        <declaration name="visual" type="Long" line="338"/>
                        <declaration name="overrideRedirect" type="Boolean" line="339"/>
                        <scope line="340"/>
                        <declaration name="saveUnder" type="Boolean" line="345"/>
                        <scope line="346"/>
                        <declaration name="backingStore" type="Integer" line="351"/>
                        <scope line="352"/>
                        <declaration name="bitGravity" type="Integer" line="357"/>
                        <scope line="358"/>
                        <scope line="363"/>
                        <scope line="377"/>
                    </scope>
                    <scope line="381"/>
                </scope>
                <scope line="384"/>
            </method>
            <method name="getDelayedParams" type="XCreateWindowParams" line="389"/>
            <method name="getWMName" type="String" line="393"/>
            <method name="initClientLeader" type="void" line="397">
                <scope line="399">
                    <scope line="400"/>
                </scope>
                <scope line="404"/>
            </method>
            <method name="getXAWTRootWindow" type="XRootWindow" line="409"/>
            <method name="destroy" type="void" line="413">
                <comment line="431">
                    Magic - getGrabWindow clear state if grabbing window is disposed of.                    
                </comment>
                <scope line="415">
                    <scope line="416"/>
                    <scope line="422"/>
                    <scope line="426"/>
                </scope>
                <scope line="431"/>
            </method>
            <method name="flush" type="void" line="436">
                <scope line="438"/>
                <scope line="440"/>
            </method>
            <javadoc line="445">
                Helper function to set W                
            </javadoc>
            <method name="setWMHints" type="void" line="448">
                <params>
                    <param name="hints" type="XWMHints"/>
                </params>
                <scope line="450"/>
                <scope line="452"/>
            </method>
            <method name="getWMHints" type="XWMHints" line="457">
                <comment line="461">
                    XlibWrapper.XGetWMHints(XToolkit.getDisplay(),
                                                          getWindow(),
                                                          wmHints.pData);                    
                </comment>
                <scope line="458"/>
            </method>
            <method name="getHints" type="XSizeHints" line="472">
                <comment line="477">
                    XlibWrapper.XGetWMNormalHints(XToolkit.getDisplay(), getWindow(), p_hints, XlibWrapper.larg1);                    
                </comment>
                <comment line="478">
                    TODO: Shouldn&apos;t we listen for WM updates on this property?                    
                </comment>
                <scope line="473">
                    <declaration name="p_hints" type="long" line="474"/>
                </scope>
            </method>
            <method name="setSizeHints" type="void" line="482">
                <params>
                    <param name="flags" type="long"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <comment line="488">
                    Note: if PPosition is not set in flags this means that
                     we want to reset PPosition in hints.  This is necessary
                     for locationByPlatform functionality                    
                </comment>
                <comment line="506">
                    Fix for 4320050: Minimum size for java.awt.Frame is not being enforced.
                    We don&apos;t need to reset minimum size if it&apos;s already set                    
                </comment>
                <comment line="539">
                    Leave intact                    
                </comment>
                <scope line="485">
                    <declaration name="hints" type="XSizeHints" line="486"/>
                    <scope line="490"/>
                    <scope line="494"/>
                    <scope line="497"/>
                    <scope line="500"/>
                    <scope line="503"/>
                    <scope line="508">
                        <scope line="509">
                            <scope line="510"/>
                            <scope line="512"/>
                            <scope line="515"/>
                            <scope line="517"/>
                        </scope>
                        <scope line="520"/>
                    </scope>
                    <scope line="524">
                        <scope line="526">
                            <scope line="527"/>
                            <scope line="529"/>
                            <scope line="532"/>
                            <scope line="534"/>
                        </scope>
                        <scope line="537"/>
                    </scope>
                </scope>
                <scope line="547"/>
            </method>
            <method name="isMinSizeSet" type="boolean" line="552">
                <declaration name="hints" type="XSizeHints" line="553"/>
                <declaration name="flags" type="long" line="554"/>
            </method>
            <javadoc line="558">
                This lock object can be used to protect instance data from concurrent access
                  by two threads. If both state lock and AWT lock are taken, AWT Lock should be taken first.                
            </javadoc>
            <method name="getStateLock" type="Object" line="562"/>
            <method name="getWindow" type="long" line="566"/>
            <method name="getContentWindow" type="long" line="569"/>
            <method name="getContentXWindow" type="XBaseWindow" line="573"/>
            <method name="getBounds" type="Rectangle" line="577"/>
            <method name="getSize" type="Dimension" line="580"/>
            <method name="toFront" type="void" line="585">
                <scope line="587"/>
                <scope line="589"/>
            </method>
            <method name="xRequestFocus" type="void" line="593">
                <params>
                    <param name="time" type="long"/>
                </params>
                <scope line="595"/>
                <scope line="598"/>
            </method>
            <method name="xRequestFocus" type="void" line="602">
                <scope line="604"/>
                <scope line="607"/>
            </method>
            <method name="xGetInputFocus" type="long" line="612">
                <scope line="614"/>
                <scope line="616"/>
            </method>
            <method name="xSetVisible" type="void" line="621">
                <params>
                    <param name="visible" type="boolean"/>
                </params>
                <scope line="624">
                    <scope line="626"/>
                    <scope line="629"/>
                </scope>
                <scope line="633"/>
            </method>
            <method name="isMapped" type="boolean" line="638"/>
            <method name="updateWMName" type="void" line="642">
                <declaration name="name" type="String" line="643"/>
                <scope line="645">
                    <scope line="646"/>
                    <declaration name="nameAtom" type="XAtom" line="649"/>
                    <declaration name="netNameAtom" type="XAtom" line="651"/>
                </scope>
                <scope line="653"/>
            </method>
            <method name="setWMClass" type="void" line="657">
                <params>
                    <param name="cl" type="String[]"/>
                </params>
                <scope line="658"/>
                <scope line="662">
                    <declaration name="xa" type="XAtom" line="663"/>
                </scope>
                <scope line="665"/>
            </method>
            <method name="isVisible" type="boolean" line="670"/>
            <method name="getScreenOfWindow" type="long" line="674">
                <params>
                    <param name="window" type="long"/>
                </params>
                <scope line="676"/>
                <scope line="678"/>
            </method>
            <method name="getScreenNumber" type="long" line="682">
                <scope line="684"/>
                <scope line="686"/>
            </method>
            <method name="getScreen" type="long" line="691">
                <comment line="693">
                    Not initialized                    
                </comment>
                <scope line="692"/>
            </method>
            <method name="xSetBounds" type="void" line="698">
                <params>
                    <param name="bounds" type="Rectangle"/>
                </params>
            </method>
            <method name="xSetBounds" type="void" line="702">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="703"/>
                <scope line="711"/>
                <scope line="713"/>
            </method>
            <javadoc line="718">
                Translate coordinates from one window into another.  Optimized
                  for XAWT - uses cached data when possible.  Preferable over
                  pure XTranslateCoordinates.                
                <return>
                    coordinates relative to dst, or null if error happened                    
                </return>
            </javadoc>
            <method name="toOtherWindow" type="Point" line="724">
                <params>
                    <param name="src" type="long"/>
                    <param name="dst" type="long"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <comment line="728">
                    Check if both windows belong to XAWT - then no X calls are necessary                    
                </comment>
                <comment line="734">
                    (x, y) is relative to src                    
                </comment>
                <comment line="738">
                    from root into peer                    
                </comment>
                <comment line="742">
                    from peer into root                    
                </comment>
                <declaration name="rpt" type="Point" line="725"/>
                <declaration name="srcPeer" type="XBaseWindow" line="729"/>
                <declaration name="dstPeer" type="XBaseWindow" line="730"/>
                <scope line="732"/>
                <scope line="736"/>
                <scope line="740"/>
                <scope line="744"/>
            </method>
            <method name="toGlobal" type="Rectangle" line="753">
                <params>
                    <param name="rec" type="Rectangle"/>
                </params>
                <declaration name="p" type="Point" line="754"/>
                <declaration name="newRec" type="Rectangle" line="755"/>
                <scope line="756"/>
            </method>
            <method name="toGlobal" type="Point" line="762">
                <params>
                    <param name="pt" type="Point"/>
                </params>
                <declaration name="p" type="Point" line="763"/>
                <scope line="764"/>
                <scope line="766"/>
            </method>
            <method name="toGlobal" type="Point" line="771">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="root" type="long" line="772"/>
                <scope line="774"/>
                <scope line="777"/>
                <declaration name="p" type="Point" line="780"/>
                <scope line="781"/>
                <scope line="783"/>
            </method>
            <method name="toLocal" type="Point" line="791">
                <params>
                    <param name="pt" type="Point"/>
                </params>
                <declaration name="p" type="Point" line="792"/>
                <scope line="793"/>
                <scope line="795"/>
            </method>
            <method name="toLocal" type="Point" line="800">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="root" type="long" line="801"/>
                <scope line="803"/>
                <scope line="806"/>
                <declaration name="p" type="Point" line="809"/>
                <scope line="810"/>
                <scope line="812"/>
            </method>
            <javadoc line="817">
                We should always grab both keyboard and pointer to control event flow
                  on popups. This also simplifies synthetic grab implementation.
                  The active grab overrides activated automatic grab.                
            </javadoc>
            <method name="grabInput" type="boolean" line="822">
                <comment line="834">
                    6273031: PIT. Choice drop down does not close once it is right clicked to show a popup menu
                    remember previous window having grab and if it&apos;s not null ungrab it.                    
                </comment>
                <comment line="843">
                    6714678: IDE (Netbeans, Eclipse, JDeveloper) Debugger hangs
                    process on Linux
                    The user must pass the sun.awt.disablegrab property to disable
                    taking grabs. This prevents hanging of the GUI when a breakpoint
                    is hit while a popup window taking the grab is open.                    
                </comment>
                <comment line="853">
                    Check grab results to be consistent with X server grab                    
                </comment>
                <scope line="826">
                    <scope line="829"/>
                    <declaration name="prevGrabWindow" type="XBaseWindow" line="835"/>
                    <declaration name="eventMask" type="int" line="836"/>
                    <declaration name="ownerEvents" type="int" line="839"/>
                    <scope line="847">
                        <declaration name="ptrGrab" type="int" line="848"/>
                        <scope line="853"/>
                        <declaration name="keyGrab" type="int" line="860"/>
                        <scope line="863"/>
                    </scope>
                    <scope line="871"/>
                </scope>
                <scope line="877"/>
            </method>
            <method name="ungrabInput" type="void" line="882">
                <comment line="895">
                    we need to call XFlush() here to force ungrab
                     see 6384219 for details                    
                </comment>
                <scope line="884">
                    <declaration name="grabWindow" type="XBaseWindow" line="885"/>
                    <scope line="887">
                        <scope line="889"/>
                    </scope>
                </scope>
                <scope line="898"/>
            </method>
            <method name="ungrabInputImpl" type="void" line="904"/>
            <method name="checkSecurity" type="void" line="907">
                <scope line="908">
                    <declaration name="stack" type="StackTraceElement" line="909"/>
                </scope>
            </method>
            <method name="getChildren" type="Set&lt;Long&gt;" line="914">
                <scope line="915"/>
            </method>
            <method name="handleMapNotifyEvent" type="void" line="921">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
            </method>
            <method name="handleUnmapNotifyEvent" type="void" line="924">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
            </method>
            <method name="handleReparentNotifyEvent" type="void" line="927">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <scope line="928">
                    <declaration name="msg" type="XReparentEvent" line="929"/>
                </scope>
            </method>
            <method name="handlePropertyNotify" type="void" line="933">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="msg" type="XPropertyEvent" line="934"/>
                <scope line="935"/>
                <scope line="938"/>
            </method>
            <method name="handleDestroyNotify" type="void" line="943">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="xany" type="XAnyEvent" line="944"/>
                <scope line="945">
                    <scope line="947"/>
                </scope>
                <scope line="951">
                    <scope line="952"/>
                </scope>
            </method>
            <method name="handleCreateNotify" type="void" line="958">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="xany" type="XAnyEvent" line="959"/>
                <scope line="960">
                    <scope line="961"/>
                </scope>
            </method>
            <method name="handleClientMessage" type="void" line="967">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <scope line="968">
                    <declaration name="msg" type="XClientMessageEvent" line="969"/>
                </scope>
            </method>
            <method name="handleVisibilityEvent" type="void" line="974">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
            </method>
            <method name="handleKeyPress" type="void" line="976">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
            </method>
            <method name="handleKeyRelease" type="void" line="978">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
            </method>
            <method name="handleExposeEvent" type="void" line="980">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
            </method>
            <javadoc line="982">
                Activate automatic grab on first ButtonPress,
                  deactivate on full mouse release                
            </javadoc>
            <method name="handleButtonPressRelease" type="void" line="986">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <comment line="989">
                    Ignore the buttons above 20 due to the bit limit for
                     InputEvent.BUTTON_DOWN_MASK.
                     One more bit is reserved for FIRST_HIGH_BIT.                    
                </comment>
                <declaration name="xbe" type="XButtonEvent" line="987"/>
                <scope line="993"/>
                <declaration name="buttonState" type="int" line="996"/>
                <declaration name="buttonsNumber" type="int" line="997"/>
                <scope line="998"/>
                <scope line="1003"/>
                <scope line="1008"/>
            </method>
            <method name="handleMotionNotify" type="void" line="1014">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
            </method>
            <method name="handleXCrossingEvent" type="void" line="1016">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
            </method>
            <method name="handleConfigureNotifyEvent" type="void" line="1018">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="xe" type="XConfigureEvent" line="1019"/>
            </method>
            <javadoc line="1026">
                Checks ButtonRelease released all Mouse buttons                
            </javadoc>
            <method name="isFullRelease" type="boolean" line="1029">
                <params>
                    <param name="buttonState" type="int"/>
                    <param name="button" type="int"/>
                </params>
                <declaration name="buttonsNumber" type="int" line="1030"/>
                <scope line="1032"/>
                <scope line="1034"/>
            </method>
            <method name="isGrabbedEvent" type="boolean" line="1039">
                <params>
                    <param name="ev" type="XEvent"/>
                    <param name="target" type="XBaseWindow"/>
                </params>
                <comment line="1050">
                    We shouldn&apos;t dispatch this events to the grabbed components (see 6317481)
                     But this logic is important if the grabbed component is top-level (see realSync)                    
                </comment>
            </method>
            <javadoc line="1056">
                Dispatches event to the grab Window or event source window depending
                  on whether the grab is active and on the event type                
            </javadoc>
            <method name="dispatchToWindow" type="void" line="1060">
                <params>
                    <param name="ev" type="XEvent"/>
                </params>
                <declaration name="target" type="XBaseWindow" line="1061"/>
                <scope line="1062"/>
                <scope line="1065"/>
            </method>
            <method name="dispatchEvent" type="void" line="1070">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="type" type="int" line="1072"/>
                <scope line="1074"/>
            </method>
            <method name="isEventDisabled" type="boolean" line="1131">
                <params>
                    <param name="e" type="XEvent"/>
                </params>
            </method>
            <method name="getX" type="int" line="1135"/>
            <method name="getY" type="int" line="1139"/>
            <method name="getWidth" type="int" line="1143"/>
            <method name="getHeight" type="int" line="1147"/>
            <method name="setDisposed" type="void" line="1151">
                <params>
                    <param name="d" type="boolean"/>
                </params>
            </method>
            <method name="isDisposed" type="boolean" line="1155"/>
            <method name="getAbsoluteX" type="int" line="1159">
                <comment line="1165">
                    Overridden for top-levels as their (x,y) is Java (x, y), not native location                    
                </comment>
                <declaration name="pw" type="XBaseWindow" line="1160"/>
                <scope line="1161"/>
                <scope line="1163"/>
            </method>
            <method name="getAbsoluteY" type="int" line="1169">
                <declaration name="pw" type="XBaseWindow" line="1170"/>
                <scope line="1171"/>
                <scope line="1173"/>
            </method>
            <method name="getParentWindow" type="XBaseWindow" line="1178"/>
            <method name="getToplevelXWindow" type="XWindowPeer" line="1182">
                <declaration name="bw" type="XBaseWindow" line="1183"/>
                <scope line="1184"/>
            </method>
            <method name="toString" type="String" line="1189"/>
            <javadoc line="1193">
                Returns whether the given point is inside of the window.  Coordinates are local.                
            </javadoc>
            <method name="contains" type="boolean" line="1196">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="1200">
                Returns whether the given point is inside of the window.  Coordinates are global.                
            </javadoc>
            <method name="containsGlobal" type="boolean" line="1203">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
        </class>
    </source>