<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt.datatransfer.Transferable"/>
        <import package="java.awt.dnd.DnDConstants"/>
        <import package="java.awt.dnd.InvalidDnDOperationException"/>
        <import package="java.util.Map"/>
        <class name="XDragSourceProtocol" line="35">
            <comment line="52">
                Always use the XAWT root window as the drag source window.                
            </comment>
            <comment line="111">
                                
            </comment>
            <comment line="147">
                                
            </comment>
            <comment line="162">
                                
            </comment>
            <comment line="165">
                                
            </comment>
            <comment line="168">
                                
            </comment>
            <comment line="172">
                                
            </comment>
            <comment line="175">
                                
            </comment>
            <javadoc line="35">
                An abstract class for drag protocols on X11 systems.
                  Contains protocol-independent drag source code.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="listener" type="XDragSourceProtocolListener" line="42"/>
            <declaration name="initialized" type="boolean" line="44"/>
            <declaration name="targetWindow" type="long" line="46"/>
            <declaration name="targetProxyWindow" type="long" line="47"/>
            <declaration name="targetProtocolVersion" type="int" line="48"/>
            <declaration name="targetWindowMask" type="long" line="49"/>
            <method name="getDragSourceWindow" type="long" line="52"/>
            <method name="XDragSourceProtocol" type="constructor" line="56">
                <params>
                    <param name="listener" type="XDragSourceProtocolListener"/>
                </params>
                <scope line="57"/>
            </method>
            <method name="getProtocolListener" type="XDragSourceProtocolListener" line="63"/>
            <method name="getProtocolName" type="String" line="67"/>
            <javadoc line="67">
                Returns the protocol name. The protocol name cannot be null.                
            </javadoc>
            <javadoc line="72">
                Initalizes a drag operation with the specified supported drop actions,
                  contents and data formats.                
                <param>
                    actions a bitwise mask of &lt;code&gt;DnDConstants&lt;/code&gt; that represent
                      the supported drop actions.                    
                </param>
                <param>
                    contents the contents for the drag operation.                    
                </param>
                <param>
                    formats an array of Atoms that represent the supported data formats.                    
                </param>
                <param>
                    formats an array of Atoms that represent the supported data formats.                    
                </param>
                <throws>
                    InvalidDnDOperationException if a drag operation is already
                      initialized.                    
                </throws>
                <throws>
                    IllegalArgumentException if some argument has invalid value.                    
                </throws>
                <throws>
                    XException if some X call failed.                    
                </throws>
            </javadoc>
            <method name="initializeDrag" type="void" line="89">
                <params>
                    <param name="actions" type="int"/>
                    <param name="contents" type="Transferable"/>
                    <param name="formatMap" type="Map"/>
                    <param name="formats" type="long[]"/>
                </params>
                <scope line="91">
                    <scope line="92">
                        <scope line="93"/>
                    </scope>
                    <scope line="100">
                        <scope line="101"/>
                    </scope>
                </scope>
                <scope line="105"/>
            </method>
            <method name="initializeDragImpl" type="void" line="111"/>
            <javadoc line="116">
                Terminates the current drag operation (if any) and resets the internal
                  state of this object.                
                <throws>
                    XException if some X call failed.                    
                </throws>
            </javadoc>
            <method name="cleanup" type="void" line="122"/>
            <javadoc line="127">
                Clears the information on the current drop target.                
                <throws>
                    XException if some X call failed.                    
                </throws>
            </javadoc>
            <method name="cleanupTargetInfo" type="void" line="132"/>
            <method name="processClientMessage" type="boolean" line="138"/>
            <javadoc line="138">
                Processes the specified client message event.                
                <returns>
                    true if the event was successfully processed.                    
                </returns>
            </javadoc>
            <method name="attachTargetWindow" type="boolean" line="147">
                <params>
                    <param name="window" type="long"/>
                    <param name="time" type="long"/>
                </params>
            </method>
            <method name="getTargetWindowInfo" type="TargetWindowInfo" line="162"/>
            <method name="sendEnterMessage" type="void" line="165"/>
            <method name="sendMoveMessage" type="void" line="168"/>
            <method name="sendLeaveMessage" type="void" line="172"/>
            <method name="sendDropMessage" type="void" line="175"/>
            <method name="initiateDrop" type="void" line="181">
                <params>
                    <param name="xRoot" type="int"/>
                    <param name="yRoot" type="int"/>
                    <param name="sourceAction" type="int"/>
                    <param name="sourceActions" type="int"/>
                    <param name="time" type="long"/>
                </params>
                <declaration name="wattr" type="XWindowAttributes" line="182"/>
                <scope line="183">
                    <declaration name="status" type="int" line="185"/>
                    <scope line="192"/>
                </scope>
                <scope line="197"/>
                <scope line="209"/>
            </method>
            <method name="finalizeDrop" type="void" line="216"/>
            <method name="processProxyModeEvent" type="boolean" line="223"/>
            <method name="getTargetWindow" type="long" line="226"/>
            <method name="getTargetProxyWindow" type="long" line="230">
                <scope line="231"/>
                <scope line="233"/>
            </method>
            <method name="getTargetProtocolVersion" type="int" line="238"/>
            <class name="TargetWindowInfo" line="242">
                <declaration name="proxyWindow" type="long" line="243"/>
                <declaration name="protocolVersion" type="int" line="244"/>
                <method name="TargetWindowInfo" type="constructor" line="245">
                    <params>
                        <param name="proxy" type="long"/>
                        <param name="version" type="int"/>
                    </params>
                </method>
                <method name="getProxyWindow" type="long" line="249"/>
                <method name="getProtocolVersion" type="int" line="252"/>
            </class>
        </class>
    </source>