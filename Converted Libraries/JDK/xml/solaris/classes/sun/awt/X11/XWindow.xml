<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.peer.ComponentPeer"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.reflect.Field"/>
        <import package="java.lang.reflect.Method"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <import package="sun.awt"/>
        <import package="sun.awt.image.PixelConverter"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.SurfaceData"/>
        <class name="XWindow" line="14">
            <extends class="XBaseWindow"/>
            <implements interface="X11ComponentPeer"/>
            <declaration name="log" type="PlatformLogger" line="15"/>
            <declaration name="insLog" type="PlatformLogger" line="16"/>
            <declaration name="eventLog" type="PlatformLogger" line="17"/>
            <declaration name="focusLog" type="PlatformLogger" line="18"/>
            <declaration name="keyEventLog" type="PlatformLogger" line="19"/>
            <declaration name="AWT_MULTICLICK_SMUDGE" type="int" line="20"/>
            <declaration name="rbutton" type="int" line="21"/>
            <declaration name="lastX" type="int" line="22"/>
            <declaration name="lastTime" type="long" line="23"/>
            <declaration name="lastButton" type="long" line="24"/>
            <declaration name="lastWindowRef" type="WeakReference" line="25"/>
            <declaration name="clickCount" type="int" line="26"/>
            <declaration name="oldWidth" type="int" line="27"/>
            <declaration name="oldHeight" type="int" line="28"/>
            <declaration name="mwm_hints" type="PropMwmHints" line="29"/>
            <declaration name="wm_protocols" type="XAtom" line="30"/>
            <declaration name="wm_delete_window" type="XAtom" line="31"/>
            <declaration name="wm_take_focus" type="XAtom" line="32"/>
            <declaration name="stateChanged" type="boolean" line="33"/>
            <declaration name="savedState" type="int" line="34"/>
            <declaration name="winAttr" type="XWindowAttributesData" line="35"/>
            <declaration name="graphicsConfig" type="X11GraphicsConfig" line="36"/>
            <declaration name="graphicsConfigData" type="AwtGraphicsConfigData" line="37"/>
            <declaration name="reparented" type="boolean" line="38"/>
            <declaration name="parent" type="XWindow" line="39"/>
            <declaration name="target" type="Component" line="40"/>
            <declaration name="JAWT_LOCK_ERROR" type="int" line="41"/>
            <declaration name="JAWT_LOCK_CLIP_CHANGED" type="int" line="42"/>
            <declaration name="JAWT_LOCK_BOUNDS_CHANGED" type="int" line="43"/>
            <declaration name="JAWT_LOCK_SURFACE_CHANGED" type="int" line="44"/>
            <declaration name="drawState" type="int" line="45"/>
            <declaration name="TARGET" type="String" line="46"/>
            <declaration name="surfaceData" type="SurfaceData" line="47"/>
            <declaration name="paintArea" type="XRepaintArea" line="48"/>
            <declaration name="defaultFont" type="Font" line="49"/>
            <method name="getDefaultFont" type="Font" line="50">
                <scope line="51"/>
            </method>
            <declaration name="mouseButtonClickAllowed" type="int" line="56"/>
            <method name="getNativeColor" type="int" line="57"/>
            <method name="getWMInsets" type="void" line="58"/>
            <method name="getTopWindow" type="long" line="59"/>
            <method name="getWindowBounds" type="void" line="60"/>
            <method name="initIDs" type="void" line="61"/>
            <declaration name="isPostedField" type="Field" line="62"/>
            <declaration name="rawCodeField" type="Field" line="63"/>
            <declaration name="primaryLevelUnicodeField" type="Field" line="64"/>
            <declaration name="extendedKeyCodeField" type="Field" line="65"/>
            <scope line="66"/>
            <method name="XWindow" type="constructor" line="69">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
            </method>
            <method name="XWindow" type="constructor" line="72"/>
            <method name="XWindow" type="constructor" line="74">
                <params>
                    <param name="parentWindow" type="long"/>
                    <param name="bounds" type="Rectangle"/>
                </params>
            </method>
            <method name="XWindow" type="constructor" line="77">
                <params>
                    <param name="target" type="Component"/>
                    <param name="parentWindow" type="long"/>
                    <param name="bounds" type="Rectangle"/>
                </params>
            </method>
            <method name="XWindow" type="constructor" line="80">
                <params>
                    <param name="target" type="Component"/>
                    <param name="parentWindow" type="long"/>
                </params>
            </method>
            <method name="XWindow" type="constructor" line="83">
                <params>
                    <param name="target" type="Component"/>
                </params>
            </method>
            <method name="XWindow" type="constructor" line="86">
                <params>
                    <param name="target" type="Object"/>
                </params>
            </method>
            <method name="XWindow" type="constructor" line="89">
                <params>
                    <param name="parentWindow" type="long"/>
                </params>
            </method>
            <method name="initGraphicsConfiguration" type="void" line="92"/>
            <method name="preInit" type="void" line="96">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
                <declaration name="gData" type="AwtGraphicsConfigData" line="101"/>
                <declaration name="config" type="X11GraphicsConfig" line="102"/>
                <declaration name="visInfo" type="XVisualInfo" line="103"/>
                <scope line="105"/>
                <scope line="108"/>
                <declaration name="parentWindow" type="Long" line="118"/>
                <scope line="119">
                    <scope line="121">
                        <declaration name="screen" type="int" line="122"/>
                        <scope line="123"/>
                        <scope line="126"/>
                    </scope>
                    <scope line="130"/>
                </scope>
                <scope line="135"/>
                <scope line="140">
                    <scope line="141"/>
                </scope>
                <scope line="147"/>
            </method>
            <method name="postInit" type="void" line="153">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
                <declaration name="c" type="Color" line="157"/>
                <scope line="158"/>
            </method>
            <method name="getGraphicsConfiguration" type="GraphicsConfiguration" line="162">
                <scope line="163"/>
            </method>
            <method name="getGraphicsConfigurationData" type="AwtGraphicsConfigData" line="168">
                <scope line="169"/>
            </method>
            <method name="getWMClass" type="String[]" line="174"/>
            <method name="setReparented" type="void" line="177">
                <params>
                    <param name="newValue" type="boolean"/>
                </params>
            </method>
            <method name="isReparented" type="boolean" line="180"/>
            <method name="getParentWindowID" type="long" line="183">
                <params>
                    <param name="target" type="Component"/>
                </params>
                <declaration name="peer" type="ComponentPeer" line="184"/>
                <declaration name="temp" type="Component" line="185"/>
                <scope line="186"/>
            </method>
            <method name="getParentXWindowObject" type="XWindow" line="193">
                <params>
                    <param name="target" type="Component"/>
                </params>
                <declaration name="temp" type="Component" line="195"/>
                <declaration name="peer" type="ComponentPeer" line="197"/>
                <scope line="199"/>
            </method>
            <method name="isParentOf" type="boolean" line="206">
                <params>
                    <param name="win" type="XWindow"/>
                </params>
                <scope line="207"/>
                <declaration name="parent" type="Container" line="210"/>
                <scope line="211"/>
            </method>
            <method name="getTarget" type="Object" line="216"/>
            <method name="getEventSource" type="Component" line="219"/>
            <method name="getColorModel" type="ColorModel" line="222">
                <params>
                    <param name="transparency" type="int"/>
                </params>
            </method>
            <method name="getColorModel" type="ColorModel" line="225">
                <scope line="226"/>
                <scope line="229"/>
            </method>
            <method name="getGraphics" type="Graphics" line="233">
                <params>
                    <param name="surfData" type="SurfaceData"/>
                    <param name="afore" type="Color"/>
                    <param name="aback" type="Color"/>
                    <param name="afont" type="Font"/>
                </params>
                <declaration name="target" type="Component" line="235"/>
                <declaration name="bgColor" type="Color" line="236"/>
                <scope line="237"/>
                <declaration name="fgColor" type="Color" line="240"/>
                <scope line="241"/>
                <declaration name="font" type="Font" line="244"/>
                <scope line="245"/>
            </method>
            <method name="getGraphics" type="Graphics" line="250"/>
            <method name="getFontMetrics" type="FontMetrics" line="253">
                <params>
                    <param name="font" type="Font"/>
                </params>
            </method>
            <method name="getTargetBounds" type="Rectangle" line="256"/>
            <javadoc line="259">
                Returns true if the event has been handled and should not be
                  posted to Java.                
            </javadoc>
            <method name="prePostEvent" type="boolean" line="263">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
            </method>
            <declaration name="m_sendMessage" type="Method" line="266"/>
            <method name="sendEvent" type="void" line="267">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="268"/>
                <anonymous_class line="272">
                    <method name="run" type="void" line="273">
                        <scope line="274"/>
                        <scope line="277"/>
                        <scope line="280"/>
                    </method>
                </anonymous_class>
                <declaration name="pe" type="PeerEvent" line="272"/>
            </method>
            <method name="postEvent" type="void" line="290">
                <params>
                    <param name="event" type="AWTEvent"/>
                </params>
            </method>
            <method name="postEventStatic" type="void" line="293">
                <params>
                    <param name="event" type="AWTEvent"/>
                </params>
            </method>
            <method name="postEventToEventQueue" type="void" line="296">
                <params>
                    <param name="event" type="AWTEvent"/>
                </params>
                <scope line="297"/>
            </method>
            <method name="doEraseBackground" type="boolean" line="301"/>
            <method name="xSetBackground" type="void" line="304">
                <params>
                    <param name="c" type="Color"/>
                </params>
                <scope line="306">
                    <scope line="308"/>
                    <declaration name="cm" type="ColorModel" line="311"/>
                    <declaration name="pixel" type="int" line="312"/>
                </scope>
                <scope line="315"/>
            </method>
            <method name="setBackground" type="void" line="319">
                <params>
                    <param name="c" type="Color"/>
                </params>
            </method>
            <declaration name="backgroundColor" type="Color" line="322"/>
            <method name="winBackground" type="void" line="323">
                <params>
                    <param name="c" type="Color"/>
                </params>
            </method>
            <method name="getWinBackground" type="Color" line="326">
                <declaration name="c" type="Color" line="327"/>
                <scope line="328"/>
                <scope line="331"/>
                <scope line="334"/>
            </method>
            <method name="isEmbedded" type="boolean" line="339"/>
            <method name="repaint" type="void" line="342">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="343"/>
                <declaration name="g" type="Graphics" line="346"/>
                <scope line="347">
                    <scope line="348"/>
                    <scope line="352"/>
                </scope>
            </method>
            <method name="repaint" type="void" line="357">
                <scope line="358"/>
                <declaration name="g" type="Graphics" line="361"/>
                <scope line="362">
                    <scope line="363"/>
                    <scope line="366"/>
                </scope>
            </method>
            <method name="paint" type="void" line="371">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <method name="flush" type="void" line="373">
                <scope line="375"/>
                <scope line="378"/>
            </method>
            <method name="popup" type="void" line="382">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="handleExposeEvent" type="void" line="385">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="xe" type="XExposeEvent" line="387"/>
                <scope line="388"/>
                <declaration name="x" type="int" line="391"/>
                <declaration name="y" type="int" line="392"/>
                <declaration name="w" type="int" line="393"/>
                <declaration name="h" type="int" line="394"/>
                <declaration name="target" type="Component" line="395"/>
                <declaration name="compAccessor" type="AWTAccessor.ComponentAccessor" line="396"/>
                <scope line="397"/>
            </method>
            <method name="handleExposeEvent" type="void" line="401">
                <params>
                    <param name="target" type="Component"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="event" type="PaintEvent" line="402"/>
                <scope line="403"/>
            </method>
            <method name="getModifiers" type="int" line="407">
                <params>
                    <param name="state" type="int"/>
                    <param name="button" type="int"/>
                    <param name="keyCode" type="int"/>
                </params>
            </method>
            <method name="getModifiers" type="int" line="410">
                <params>
                    <param name="state" type="int"/>
                    <param name="button" type="int"/>
                    <param name="keyCode" type="int"/>
                    <param name="type" type="int"/>
                    <param name="wheel_mouse" type="boolean"/>
                </params>
                <declaration name="modifiers" type="int" line="411"/>
                <scope line="412"/>
                <scope line="415"/>
                <scope line="418"/>
                <scope line="421"/>
                <scope line="424"/>
                <scope line="427">
                    <scope line="428">
                        <scope line="429"/>
                    </scope>
                </scope>
            </method>
            <method name="getXModifiers" type="int" line="436">
                <params>
                    <param name="stroke" type="AWTKeyStroke"/>
                </params>
                <declaration name="mods" type="int" line="437"/>
                <declaration name="res" type="int" line="438"/>
                <scope line="439"/>
                <scope line="442"/>
                <scope line="445"/>
                <scope line="448"/>
                <scope line="451"/>
            </method>
            <javadoc line="456">
                Returns true if this event is disabled and shouldn&apos;t be passed to Java.
                  Default implementation returns false for all events.                
            </javadoc>
            <method name="getRightButtonNumber" type="int" line="460">
                <scope line="461">
                    <scope line="463"/>
                    <scope line="466"/>
                </scope>
            </method>
            <method name="getMouseMovementSmudge" type="int" line="472"/>
            <method name="handleButtonPressRelease" type="void" line="475">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="xbe" type="XButtonEvent" line="477"/>
                <scope line="478"/>
                <declaration name="when" type="long" line="482"/>
                <declaration name="modifiers" type="int" line="483"/>
                <declaration name="popupTrigger" type="boolean" line="484"/>
                <declaration name="button" type="int" line="485"/>
                <declaration name="wheel_mouse" type="boolean" line="486"/>
                <declaration name="lbutton" type="int" line="487"/>
                <scope line="488"/>
                <declaration name="type" type="int" line="491"/>
                <declaration name="jWhen" type="long" line="493"/>
                <declaration name="x" type="int" line="494"/>
                <declaration name="y" type="int" line="495"/>
                <scope line="496">
                    <declaration name="localXY" type="Point" line="497"/>
                </scope>
                <scope line="501">
                    <declaration name="lastWindow" type="XWindow" line="503"/>
                    <scope line="505"/>
                    <scope line="508"/>
                    <scope line="516"/>
                    <scope line="519"/>
                </scope>
                <scope line="524"/>
                <scope line="527"/>
                <scope line="530"/>
                <scope line="534">
                    <declaration name="me" type="MouseEvent" line="535"/>
                    <scope line="537"/>
                </scope>
                <scope line="541">
                    <scope line="542">
                        <declaration name="mwe" type="MouseWheelEvent" line="543"/>
                    </scope>
                </scope>
                <scope line="547"/>
            </method>
            <method name="handleMotionNotify" type="void" line="551">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="xme" type="XMotionEvent" line="553"/>
                <scope line="554"/>
                <declaration name="mouseKeyState" type="int" line="557"/>
                <declaration name="buttonsNumber" type="int" line="558"/>
                <scope line="559">
                    <scope line="560"/>
                </scope>
                <declaration name="isDragging" type="boolean" line="564"/>
                <declaration name="mouseEventType" type="int" line="565"/>
                <scope line="566"/>
                <scope line="569"/>
                <declaration name="x" type="int" line="572"/>
                <declaration name="y" type="int" line="573"/>
                <declaration name="lastWindow" type="XWindow" line="574"/>
                <scope line="575"/>
                <declaration name="jWhen" type="long" line="583"/>
                <declaration name="modifiers" type="int" line="584"/>
                <declaration name="popupTrigger" type="boolean" line="585"/>
                <declaration name="source" type="Component" line="586"/>
                <scope line="587">
                    <declaration name="localXY" type="Point" line="588"/>
                </scope>
                <scope line="592">
                    <declaration name="mme" type="MouseEvent" line="593"/>
                </scope>
            </method>
            <method name="x11inputMethodLookupString" type="boolean" line="597"/>
            <method name="haveCurrentX11InputMethodInstance" type="boolean" line="598"/>
            <declaration name="mouseAboveMe" type="boolean" line="599"/>
            <method name="isMouseAbove" type="boolean" line="600">
                <scope line="601"/>
            </method>
            <method name="setMouseAbove" type="void" line="605">
                <params>
                    <param name="above" type="boolean"/>
                </params>
                <scope line="606"/>
            </method>
            <method name="enterNotify" type="void" line="610">
                <params>
                    <param name="window" type="long"/>
                </params>
                <scope line="611"/>
            </method>
            <method name="leaveNotify" type="void" line="615">
                <params>
                    <param name="window" type="long"/>
                </params>
                <scope line="616"/>
            </method>
            <method name="handleXCrossingEvent" type="void" line="620">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="xce" type="XCrossingEvent" line="622"/>
                <scope line="624"/>
                <scope line="627"/>
                <declaration name="toplevel" type="XWindowPeer" line="630"/>
                <scope line="631">
                    <scope line="632">
                        <scope line="633"/>
                        <scope line="637"/>
                    </scope>
                </scope>
                <declaration name="childWnd" type="long" line="643"/>
                <scope line="644">
                    <declaration name="child" type="XBaseWindow" line="645"/>
                    <scope line="646"/>
                </scope>
                <declaration name="compWithMouse" type="Component" line="650"/>
                <scope line="651">
                    <scope line="652">
                        <scope line="653"/>
                        <scope line="657"/>
                    </scope>
                    <scope line="661"/>
                </scope>
                <scope line="665"/>
                <declaration name="jWhen" type="long" line="668"/>
                <declaration name="modifiers" type="int" line="669"/>
                <declaration name="clickCount" type="int" line="670"/>
                <declaration name="popupTrigger" type="boolean" line="671"/>
                <declaration name="x" type="int" line="672"/>
                <declaration name="y" type="int" line="673"/>
                <scope line="674">
                    <declaration name="localXY" type="Point" line="675"/>
                </scope>
                <scope line="679">
                    <declaration name="me" type="MouseEvent" line="680"/>
                </scope>
                <scope line="685">
                    <declaration name="me" type="MouseEvent" line="686"/>
                </scope>
            </method>
            <method name="doLayout" type="void" line="690">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="handleConfigureNotifyEvent" type="void" line="692">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="oldBounds" type="Rectangle" line="693"/>
                <scope line="696"/>
                <declaration name="bounds" type="Rectangle" line="699"/>
                <scope line="700"/>
                <scope line="703"/>
            </method>
            <method name="handleMapNotifyEvent" type="void" line="707">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <scope line="710"/>
                <declaration name="ce" type="ComponentEvent" line="713"/>
            </method>
            <method name="handleUnmapNotifyEvent" type="void" line="717">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <scope line="719"/>
                <declaration name="ce" type="ComponentEvent" line="722"/>
            </method>
            <method name="dumpKeysymArray" type="void" line="726">
                <params>
                    <param name="ev" type="XKeyEvent"/>
                </params>
            </method>
            <javadoc line="729">
                Return unicode character or 0 if no correspondent character found.
                  Parameter is a keysym basically from keysymdef.h
                  XXX: how about vendor keys? Is there some with Unicode value and not in the list?                
            </javadoc>
            <method name="keysymToUnicode" type="int" line="734">
                <params>
                    <param name="keysym" type="long"/>
                    <param name="state" type="int"/>
                </params>
            </method>
            <method name="keyEventType2Id" type="int" line="737">
                <params>
                    <param name="xEventType" type="int"/>
                </params>
            </method>
            <method name="xkeycodeToKeysym" type="long" line="740">
                <params>
                    <param name="ev" type="XKeyEvent"/>
                </params>
            </method>
            <method name="xkeycodeToPrimaryKeysym" type="long" line="743">
                <params>
                    <param name="ev" type="XKeyEvent"/>
                </params>
            </method>
            <method name="primaryUnicode2JavaKeycode" type="int" line="746">
                <params>
                    <param name="uni" type="int"/>
                </params>
            </method>
            <method name="logIncomingKeyEvent" type="void" line="749">
                <params>
                    <param name="ev" type="XKeyEvent"/>
                </params>
            </method>
            <method name="handleKeyPress" type="void" line="754">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="ev" type="XKeyEvent" line="756"/>
                <scope line="758"/>
            </method>
            <method name="handleKeyPress" type="void" line="763">
                <params>
                    <param name="ev" type="XKeyEvent"/>
                </params>
                <declaration name="keysym" type="long" line="764"/>
                <declaration name="unicodeKey" type="int" line="765"/>
                <scope line="767"/>
                <scope line="770">
                    <scope line="771">
                        <scope line="772"/>
                    </scope>
                    <scope line="777">
                        <scope line="779"/>
                    </scope>
                </scope>
                <scope line="784">
                    <scope line="787"/>
                </scope>
                <declaration name="jkc" type="XKeysym.Keysym2JavaKeycode" line="791"/>
                <scope line="792"/>
                <declaration name="unicodeFromPrimaryKeysym" type="int" line="795"/>
                <scope line="796"/>
                <declaration name="jkeyToReturn" type="int" line="799"/>
                <declaration name="jkeyExtended" type="int" line="800"/>
                <scope line="802"/>
            </method>
            <method name="handleKeyRelease" type="void" line="807">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="ev" type="XKeyEvent" line="809"/>
                <scope line="811"/>
            </method>
            <method name="handleKeyRelease" type="void" line="816">
                <params>
                    <param name="ev" type="XKeyEvent"/>
                </params>
                <declaration name="keysym" type="long" line="817"/>
                <declaration name="unicodeKey" type="int" line="818"/>
                <scope line="820"/>
                <declaration name="jkc" type="XKeysym.Keysym2JavaKeycode" line="823"/>
                <scope line="824"/>
                <scope line="827"/>
                <declaration name="unicodeFromPrimaryKeysym" type="int" line="831"/>
                <declaration name="jkeyToReturn" type="int" line="832"/>
                <declaration name="jkeyExtended" type="int" line="833"/>
            </method>
            <method name="getWMState" type="int" line="836">
                <scope line="837">
                    <declaration name="getter" type="WindowPropertyGetter" line="839"/>
                    <scope line="840">
                        <declaration name="status" type="int" line="841"/>
                        <scope line="842"/>
                        <scope line="845"/>
                    </scope>
                    <scope line="850"/>
                </scope>
            </method>
            <javadoc line="856">
                Override this methods to get notifications when top-level window state changes. The state is
                  meant in terms of ICCCM: WithdrawnState, IconicState, NormalState                
            </javadoc>
            <method name="stateChanged" type="void" line="860">
                <params>
                    <param name="time" type="long"/>
                    <param name="oldState" type="int"/>
                    <param name="newState" type="int"/>
                </params>
            </method>
            <method name="handlePropertyNotify" type="void" line="862">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="ev" type="XPropertyEvent" line="864"/>
                <scope line="865"/>
            </method>
            <method name="reshape" type="void" line="870">
                <params>
                    <param name="bounds" type="Rectangle"/>
                </params>
            </method>
            <method name="reshape" type="void" line="873">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="874"/>
                <scope line="877"/>
            </method>
            <method name="layout" type="void" line="888"/>
            <method name="isShowing" type="boolean" line="890"/>
            <method name="isResizable" type="boolean" line="893"/>
            <method name="isLocationByPlatform" type="boolean" line="896"/>
            <method name="updateSizeHints" type="void" line="899"/>
            <method name="updateSizeHints" type="void" line="902">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="flags" type="long" line="903"/>
                <scope line="904"/>
                <scope line="908"/>
            </method>
            <method name="updateSizeHints" type="void" line="913">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="flags" type="long" line="914"/>
                <scope line="915"/>
                <scope line="919"/>
            </method>
            <method name="validateSurface" type="void" line="924">
                <scope line="925"/>
            </method>
            <method name="doValidateSurface" type="void" line="931">
                <declaration name="oldData" type="SurfaceData" line="932"/>
                <scope line="933"/>
            </method>
            <method name="getSurfaceData" type="SurfaceData" line="938"/>
            <method name="dispose" type="void" line="941">
                <declaration name="oldData" type="SurfaceData" line="942"/>
                <scope line="944"/>
            </method>
            <method name="getLocationOnScreen" type="Point" line="950">
                <scope line="951">
                    <declaration name="comp" type="Component" line="952"/>
                    <scope line="953"/>
                    <scope line="956"/>
                    <scope line="960">
                        <declaration name="wpeer" type="Object" line="961"/>
                        <scope line="962"/>
                        <declaration name="pt" type="Point" line="965"/>
                        <scope line="966"/>
                    </scope>
                    <scope line="973"/>
                </scope>
            </method>
            <declaration name="bdata" type="Field" line="978"/>
            <method name="setBData" type="void" line="979">
                <params>
                    <param name="e" type="KeyEvent"/>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="postKeyEvent" type="void" line="990">
                <params>
                    <param name="id" type="int"/>
                    <param name="when" type="long"/>
                    <param name="keyCode" type="int"/>
                    <param name="keyChar" type="int"/>
                    <param name="keyLocation" type="int"/>
                    <param name="state" type="int"/>
                    <param name="event" type="long"/>
                    <param name="eventSize" type="int"/>
                    <param name="rawCode" type="long"/>
                    <param name="unicodeFromPrimaryKeysym" type="int"/>
                    <param name="extendedKeyCode" type="int"/>
                </params>
                <declaration name="jWhen" type="long" line="991"/>
                <declaration name="modifiers" type="int" line="992"/>
                <scope line="993"/>
                <scope line="996"/>
                <scope line="999"/>
                <declaration name="ke" type="KeyEvent" line="1002"/>
                <scope line="1003">
                    <declaration name="data" type="byte[]" line="1004"/>
                </scope>
                <scope line="1007"/>
                <scope line="1012"/>
                <scope line="1015"/>
            </method>
            <method name="getAWTKeyCodeForKeySym" type="int" line="1020"/>
            <method name="getKeySymForAWTKeyCode" type="int" line="1021"/>
            <method name="getMWMHints" type="PropMwmHints" line="1022">
                <scope line="1023">
                    <scope line="1025"/>
                </scope>
            </method>
            <method name="setMWMHints" type="void" line="1031">
                <params>
                    <param name="hints" type="PropMwmHints"/>
                </params>
                <scope line="1033"/>
            </method>
            <method name="initWMProtocols" type="void" line="1037"/>
            <javadoc line="1040">
                Returns list of protocols which should be installed on this window.
                  Descendants can override this method to add class-specific protocols                
            </javadoc>
            <method name="getWMProtocols" type="XAtomList" line="1044"/>
            <declaration name="fullScreenExclusiveModeState" type="boolean" line="1047"/>
            <javadoc line="1047">
                Indicates if the window is currently in the FSEM.
                  Synchronization: state lock.                
            </javadoc>
            <method name="setFullScreenExclusiveModeState" type="void" line="1052">
                <params>
                    <param name="state" type="boolean"/>
                </params>
                <scope line="1053"/>
            </method>
            <method name="isFullScreenExclusiveMode" type="boolean" line="1057">
                <scope line="1058"/>
            </method>
        </class>
    </source>