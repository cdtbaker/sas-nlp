<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt.AWTKeyStroke"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <import package="sun.awt.X11GraphicsConfig"/>
        <import package="sun.awt.X11GraphicsDevice"/>
        <class name="XEmbedClientHelper" line="37">
            <extends class="XEmbedHelper"/>
            <comment line="46">
                XEmbed client                
            </comment>
            <comment line="47">
                XEmbed server                
            </comment>
            <implements interface="XEventDispatcher"/>
            <javadoc line="37">
                Helper class implementing XEmbed protocol handling routines(client side)
                  Window which wants to participate in a protocol should create an instance,
                  call install and forward all XClientMessageEvents to it.                
            </javadoc>
            <declaration name="xembedLog" type="PlatformLogger" line="43"/>
            <declaration name="embedded" type="XEmbeddedFramePeer" line="45"/>
            <declaration name="server" type="long" line="46"/>
            <declaration name="active" type="boolean" line="48"/>
            <declaration name="applicationActive" type="boolean" line="49"/>
            <method name="XEmbedClientHelper" type="constructor" line="51"/>
            <method name="setClient" type="void" line="55">
                <params>
                    <param name="client" type="XEmbeddedFramePeer"/>
                </params>
                <scope line="56"/>
                <scope line="59"/>
                <scope line="64"/>
            </method>
            <method name="install" type="void" line="69">
                <comment line="81">
                    XEmbeddedFrame is initially created with a null parent..
                     Here it is reparented to the proper parent window.                    
                </comment>
                <scope line="70"/>
                <declaration name="info" type="long[]" line="73"/>
                <declaration name="data" type="long" line="74"/>
                <scope line="75"/>
                <scope line="77"/>
                <declaration name="parentWindow" type="long" line="82"/>
                <scope line="83">
                    <scope line="85"/>
                    <scope line="90"/>
                </scope>
            </method>
            <method name="handleClientMessage" type="void" line="96">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <comment line="103">
                    Notification about embedding protocol start                    
                </comment>
                <comment line="106">
                    Check if window is reparented. If not - it was created with
                     parent and so we should update it here.                    
                </comment>
                <comment line="123">
                    We got focus!                    
                </comment>
                <comment line="124">
                    Check for direction                    
                </comment>
                <declaration name="msg" type="XClientMessageEvent" line="97"/>
                <scope line="99">
                    <scope line="107"/>
                    <scope line="117"/>
                    <scope line="127"/>
                </scope>
            </method>
            <method name="handleFocusIn" type="void" line="134">
                <params>
                    <param name="detail" type="int"/>
                </params>
                <comment line="141">
                    Do nothing - just restore to the current value                    
                </comment>
                <scope line="135"/>
                <anonymous_class line="143">
                    <method name="run" type="void" line="144">
                        <declaration name="comp" type="Component" line="145"/>
                        <scope line="146"/>
                    </method>
                </anonymous_class>
                <anonymous_class line="152">
                    <method name="run" type="void" line="153">
                        <declaration name="comp" type="Component" line="154"/>
                        <scope line="155"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="dispatchEvent" type="void" line="163">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
            </method>
            <method name="handleReparentNotify" type="void" line="173">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <comment line="178">
                    unregister accelerators, etc. for old parent                    
                </comment>
                <comment line="180">
                    check if newParent is a root window                    
                </comment>
                <comment line="186">
                    reparenting to root means XEmbed termination                    
                </comment>
                <comment line="189">
                    continue XEmbed with a new parent                    
                </comment>
                <declaration name="re" type="XReparentEvent" line="174"/>
                <declaration name="newParent" type="long" line="175"/>
                <scope line="176">
                    <declaration name="gc" type="X11GraphicsConfig" line="180"/>
                    <declaration name="gd" type="X11GraphicsDevice" line="181"/>
                    <scope line="184"/>
                    <scope line="187"/>
                </scope>
            </method>
            <method name="requestFocus" type="boolean" line="194">
                <scope line="195"/>
            </method>
            <method name="handleWindowFocusOut" type="void" line="201">
                <comment line="203">
                    fix for 6269309: it is possible that we call this method twice
                     (for example, when receiving XEMBED_WINDOW_DEACTIVATE and then
                     XEMBED_FOCUS_OUT client messages), so we first need to check if
                     embedded is an active window before sending WINDOW_LOST_FOCUS
                     to shared code                    
                </comment>
                <scope line="207"/>
            </method>
            <method name="getEmbedder" type="long" line="212">
                <params>
                    <param name="embedded" type="XWindowPeer"/>
                    <param name="info" type="XClientMessageEvent"/>
                </params>
                <comment line="214">
                    Embedder is the parent of embedded.                    
                </comment>
            </method>
            <method name="isApplicationActive" type="boolean" line="217"/>
            <method name="isActive" type="boolean" line="221"/>
            <method name="traverseOutForward" type="void" line="225">
                <scope line="226"/>
            </method>
            <method name="traverseOutBackward" type="void" line="231">
                <scope line="232"/>
            </method>
            <method name="registerAccelerator" type="void" line="237">
                <params>
                    <param name="stroke" type="AWTKeyStroke"/>
                    <param name="id" type="int"/>
                </params>
                <scope line="238">
                    <declaration name="sym" type="long" line="239"/>
                    <declaration name="mods" type="long" line="240"/>
                </scope>
            </method>
            <method name="unregisterAccelerator" type="void" line="244">
                <params>
                    <param name="id" type="int"/>
                </params>
                <scope line="245"/>
            </method>
            <method name="getX11KeySym" type="long" line="250">
                <params>
                    <param name="stroke" type="AWTKeyStroke"/>
                </params>
                <scope line="252"/>
                <scope line="254"/>
            </method>
            <method name="getX11Mods" type="long" line="259">
                <params>
                    <param name="stroke" type="AWTKeyStroke"/>
                </params>
            </method>
        </class>
    </source>