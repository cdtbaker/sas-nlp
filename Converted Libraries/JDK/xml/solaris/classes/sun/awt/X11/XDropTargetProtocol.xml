<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.io.IOException"/>
        <import package="java.util.HashMap"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="XDropTargetProtocol" line="34">
            <comment line="71">
                                
            </comment>
            <comment line="74">
                                
            </comment>
            <comment line="77">
                                
            </comment>
            <comment line="80">
                                
            </comment>
            <comment line="83">
                                
            </comment>
            <comment line="86">
                                
            </comment>
            <comment line="92">
                                
            </comment>
            <comment line="97">
                                
            </comment>
            <comment line="107">
                                
            </comment>
            <comment line="110">
                Forwards a drag notification to the embedding toplevel modifying the event
                 to match the protocol version supported by the toplevel.
                 The caller must hold AWT_LOCK.
                 Returns True if the event is sent, False otherwise.                
            </comment>
            <comment line="162">
                True iff the previous notification was MotionEvent and it was                
            </comment>
            <comment line="243">
                Retrieves the data from the drag source in the specified format.
                
                 @param ctxt a pointer to the XClientMessageEvent structure for this
                             protocol&apos;s drop message.
                 @param format the format in which the data should be retrieved.
                
                 @throws IllegalArgumentException if ctxt doesn&apos;t point to the
                         XClientMessageEvent structure for this protocol&apos;s drop message.
                 @throws IOException if data retrieval failed.                
            </comment>
            <comment line="272">
                Returns true if the XEmbed protocol prescribes that an XEmbed server must
                 support this DnD protocol for drop sites associated with XEmbed clients.                
            </comment>
            <comment line="298">
                                
            </comment>
            <javadoc line="34">
                An abstract class for drop protocols on X11 systems.
                  Contains protocol-independent drop target code.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="logger" type="PlatformLogger" line="41"/>
            <declaration name="listener" type="XDropTargetProtocolListener" line="44"/>
            <declaration name="EMBEDDER_ALREADY_REGISTERED" type="int" line="46"/>
            <declaration name="UNKNOWN_MESSAGE" type="int" line="48"/>
            <declaration name="ENTER_MESSAGE" type="int" line="49"/>
            <declaration name="MOTION_MESSAGE" type="int" line="50"/>
            <declaration name="LEAVE_MESSAGE" type="int" line="51"/>
            <declaration name="DROP_MESSAGE" type="int" line="52"/>
            <method name="XDropTargetProtocol" type="constructor" line="54">
                <params>
                    <param name="listener" type="XDropTargetProtocolListener"/>
                </params>
                <scope line="55"/>
            </method>
            <method name="getProtocolListener" type="XDropTargetProtocolListener" line="61"/>
            <method name="getProtocolName" type="String" line="65"/>
            <javadoc line="65">
                Returns the protocol name. The protocol name cannot be null.                
            </javadoc>
            <method name="registerDropTarget" type="void" line="71"/>
            <method name="unregisterDropTarget" type="void" line="74"/>
            <method name="registerEmbedderDropSite" type="void" line="77"/>
            <method name="unregisterEmbedderDropSite" type="void" line="80"/>
            <method name="registerEmbeddedDropSite" type="void" line="83"/>
            <method name="unregisterEmbeddedDropSite" type="void" line="86">
                <params>
                    <param name="embedded" type="long"/>
                </params>
            </method>
            <method name="isProtocolSupported" type="boolean" line="92"/>
            <method name="getMessageType" type="int" line="94"/>
            <method name="processClientMessage" type="boolean" line="97">
                <params>
                    <param name="xclient" type="XClientMessageEvent"/>
                </params>
                <declaration name="type" type="int" line="98"/>
                <declaration name="processed" type="boolean" line="99"/>
            </method>
            <method name="processClientMessageImpl" type="boolean" line="107"/>
            <method name="forwardClientMessageToToplevel" type="boolean" line="116">
                <params>
                    <param name="toplevel" type="long"/>
                    <param name="xclient" type="XClientMessageEvent"/>
                </params>
                <comment line="123">
                    Window not registered as an embedder for this protocol.                    
                </comment>
                <comment line="131">
                    Window didn&apos;t have an associated drop site, so there is no need
                     to forward the message.                    
                </comment>
                <declaration name="entry" type="EmbedderRegistryEntry" line="117"/>
                <scope line="119"/>
                <scope line="123"/>
                <scope line="127"/>
                <scope line="132"/>
                <declaration name="proxy" type="long" line="138"/>
                <scope line="140"/>
                <scope line="143"/>
                <scope line="150"/>
                <scope line="153"/>
            </method>
            <declaration name="motionPassedAlong" type="boolean" line="163"/>
            <method name="sendEnterMessageToToplevel" type="void" line="165"/>
            <method name="sendLeaveMessageToToplevel" type="void" line="168"/>
            <method name="postProcessClientMessage" type="void" line="173">
                <params>
                    <param name="xclient" type="XClientMessageEvent"/>
                    <param name="processed" type="boolean"/>
                    <param name="type" type="int"/>
                </params>
                <comment line="178">
                    This code forwards drag notifications to the browser according to the
                     following rules:
                      - the messages that we failed to process are always forwarded to the
                        browser;
                      - MotionEvents and DropEvents are forwarded if and only if the drag
                        is not over a plugin window;
                      - XDnD: EnterEvents and LeaveEvents are never forwarded, instead, we
                        send synthesized EnterEvents or LeaveEvents when the drag
                        respectively exits or enters plugin windows;
                      - Motif DnD: EnterEvents and LeaveEvents are always forwarded.
                     Synthetic EnterEvents and LeaveEvents are needed, because the XDnD drop
                     site implemented Netscape 6.2 has a nice feature: when it receives
                     the first XdndPosition it continuously sends XdndStatus messages to
                     the source (every 100ms) until the drag terminates or leaves the drop
                     site. When the mouse is dragged over plugin window embedded in the
                     browser frame, these XdndStatus messages are mixed with the XdndStatus
                     messages sent from the plugin.
                     For Motif DnD, synthetic events cause Motif warnings being displayed,
                     so these events are always forwarded. However, Motif DnD drop site in
                     Netscape 6.2 is implemented in the same way, so there could be similar
                     problems if the drag source choose Motif DnD for communication.                    
                </comment>
                <declaration name="toplevel" type="long" line="174"/>
                <scope line="176">
                    <scope line="200"/>
                    <scope line="202">
                        <declaration name="motifProtocol" type="boolean" line="203"/>
                        <scope line="209">
                            <scope line="210"/>
                        </scope>
                        <scope line="215">
                            <scope line="216"/>
                        </scope>
                        <scope line="223"/>
                        <scope line="230"/>
                    </scope>
                </scope>
            </method>
            <method name="sendResponse" type="boolean" line="240"/>
            <method name="getData" type="Object" line="253"/>
            <method name="sendDropDone" type="boolean" line="256"/>
            <method name="getSourceWindow" type="long" line="259"/>
            <method name="cleanup" type="void" line="261"/>
            <method name="isDragOverComponent" type="boolean" line="263"/>
            <method name="adjustEventForForwarding" type="void" line="266">
                <params>
                    <param name="xclient" type="XClientMessageEvent"/>
                    <param name="entry" type="EmbedderRegistryEntry"/>
                </params>
            </method>
            <method name="forwardEventToEmbedded" type="boolean" line="268"/>
            <method name="isXEmbedSupported" type="boolean" line="275"/>
            <class name="EmbedderRegistryEntry" line="277">
                <declaration name="overriden" type="boolean" line="278"/>
                <declaration name="version" type="int" line="279"/>
                <declaration name="proxy" type="long" line="280"/>
                <method name="EmbedderRegistryEntry" type="constructor" line="281">
                    <params>
                        <param name="overriden" type="boolean"/>
                        <param name="version" type="int"/>
                        <param name="proxy" type="long"/>
                    </params>
                </method>
                <method name="isOverriden" type="boolean" line="286"/>
                <method name="getVersion" type="int" line="289"/>
                <method name="getProxy" type="long" line="292"/>
            </class>
            <declaration name="embedderRegistry" type="HashMap" line="298"/>
            <method name="putEmbedderRegistryEntry" type="void" line="303">
                <params>
                    <param name="embedder" type="long"/>
                    <param name="overriden" type="boolean"/>
                    <param name="version" type="int"/>
                    <param name="proxy" type="long"/>
                </params>
                <scope line="304"/>
            </method>
            <method name="getEmbedderRegistryEntry" type="EmbedderRegistryEntry" line="311">
                <params>
                    <param name="embedder" type="long"/>
                </params>
                <scope line="312"/>
            </method>
            <method name="removeEmbedderRegistryEntry" type="void" line="318">
                <params>
                    <param name="embedder" type="long"/>
                </params>
                <scope line="319"/>
            </method>
        </class>
    </source>