<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.peer.TrayIconPeer"/>
        <import package="sun.awt"/>
        <import package="java.awt.image"/>
        <import package="java.text.BreakIterator"/>
        <import package="java.util.concurrent.ArrayBlockingQueue"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <class name="InfoWindow" line="12">
            <extends class="Window"/>
            <javadoc line="12">
                An utility window class. This is a base class for Tooltip and Balloon.                
            </javadoc>
            <declaration name="container" type="Container" line="16"/>
            <declaration name="closer" type="Closer" line="17"/>
            <method name="InfoWindow" type="constructor" line="18">
                <params>
                    <param name="parent" type="Frame"/>
                    <param name="borderColor" type="Color"/>
                </params>
                <anonymous_class line="21">
                    <method name="getInsets" type="Insets" line="22"/>
                </anonymous_class>
            </method>
            <method name="add" type="Component" line="33">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <method name="setCloser" type="void" line="37">
                <params>
                    <param name="action" type="Runnable"/>
                    <param name="time" type="int"/>
                </params>
            </method>
            <method name="show" type="void" line="40">
                <params>
                    <param name="corner" type="Point"/>
                    <param name="indent" type="int"/>
                </params>
            </method>
            <method name="hide" type="void" line="60"/>
            <class name="Closer" line="63">
                <implements interface="Runnable"/>
                <declaration name="action" type="Runnable" line="64"/>
                <declaration name="time" type="int" line="65"/>
                <method name="run" type="void" line="66"/>
                <method name="set" type="void" line="69">
                    <params>
                        <param name="action" type="Runnable"/>
                        <param name="time" type="int"/>
                    </params>
                </method>
                <method name="schedule" type="void" line="73"/>
                <method name="close" type="void" line="76"/>
                <method name="doClose" type="void" line="80">
                    <anonymous_class line="81">
                        <method name="run" type="void" line="82">
                            <scope line="85"/>
                        </method>
                    </anonymous_class>
                </method>
            </class>
            <interface name="LiveArguments">
                <method name="isDisposed" type="boolean" line="94"/>
                <javadoc line="94">
                    Whether the target of the InfoWindow is disposed.                    
                </javadoc>
                <method name="getBounds" type="Rectangle" line="98"/>
                <javadoc line="98">
                    The bounds of the target of the InfoWindow.                    
                </javadoc>
            </interface>
            <class name="Tooltip" line="103">
                <extends class="InfoWindow"/>
                <interface name="LiveArguments">
                    <implements interface="InfoWindow.LiveArguments"/>
                    <method name="getTooltipString" type="String" line="105"/>
                    <javadoc line="105">
                        The tooltip to be displayed.                        
                    </javadoc>
                </interface>
                <declaration name="target" type="Object" line="110"/>
                <declaration name="liveArguments" type="LiveArguments" line="111"/>
                <declaration name="textLabel" type="Label" line="112"/>
                <declaration name="starter" type="Runnable" line="113"/>
                <anonymous_class line="113">
                    <method name="run" type="void" line="114"/>
                </anonymous_class>
                <declaration name="TOOLTIP_SHOW_TIME" type="int" line="119"/>
                <declaration name="TOOLTIP_START_DELAY_TIME" type="int" line="120"/>
                <declaration name="TOOLTIP_MAX_LENGTH" type="int" line="121"/>
                <declaration name="TOOLTIP_MOUSE_CURSOR_INDENT" type="int" line="122"/>
                <declaration name="TOOLTIP_BACKGROUND_COLOR" type="Color" line="123"/>
                <declaration name="TOOLTIP_TEXT_FONT" type="Font" line="124"/>
                <method name="Tooltip" type="constructor" line="125">
                    <params>
                        <param name="parent" type="Frame"/>
                        <param name="target" type="Object"/>
                        <param name="liveArguments" type="LiveArguments"/>
                    </params>
                </method>
                <method name="display" type="void" line="135">
                    <anonymous_class line="136">
                        <method name="run" type="void" line="137">
                            <scope line="138"/>
                            <declaration name="tooltipString" type="String" line="141"/>
                            <scope line="142"/>
                            <scope line="145"/>
                            <scope line="148"/>
                            <anonymous_class line="151">
                                <method name="run" type="Object" line="152">
                                    <scope line="153"/>
                                </method>
                            </anonymous_class>
                            <declaration name="pointer" type="Point" line="151"/>
                            <scope line="160"/>
                        </method>
                    </anonymous_class>
                </method>
                <method name="enter" type="void" line="168"/>
                <method name="exit" type="void" line="171">
                    <scope line="173"/>
                </method>
                <method name="isPointerOverTrayIcon" type="boolean" line="177">
                    <params>
                        <param name="trayRect" type="Rectangle"/>
                    </params>
                    <declaration name="p" type="Point" line="178"/>
                </method>
            </class>
            <class name="Balloon" line="182">
                <extends class="InfoWindow"/>
                <interface name="LiveArguments">
                    <implements interface="InfoWindow.LiveArguments"/>
                    <method name="getActionCommand" type="String" line="184"/>
                    <javadoc line="184">
                        The action to be performed upon clicking the baloon.                        
                    </javadoc>
                </interface>
                <declaration name="liveArguments" type="LiveArguments" line="189"/>
                <declaration name="target" type="Object" line="190"/>
                <declaration name="BALLOON_SHOW_TIME" type="int" line="191"/>
                <declaration name="BALLOON_TEXT_MAX_LENGTH" type="int" line="192"/>
                <declaration name="BALLOON_WORD_LINE_MAX_LENGTH" type="int" line="193"/>
                <declaration name="BALLOON_WORD_LINE_MAX_COUNT" type="int" line="194"/>
                <declaration name="BALLOON_ICON_WIDTH" type="int" line="195"/>
                <declaration name="BALLOON_ICON_HEIGHT" type="int" line="196"/>
                <declaration name="BALLOON_TRAY_ICON_INDENT" type="int" line="197"/>
                <declaration name="BALLOON_CAPTION_BACKGROUND_COLOR" type="Color" line="198"/>
                <declaration name="BALLOON_CAPTION_FONT" type="Font" line="199"/>
                <declaration name="mainPanel" type="Panel" line="200"/>
                <declaration name="captionPanel" type="Panel" line="201"/>
                <declaration name="captionLabel" type="Label" line="202"/>
                <declaration name="closeButton" type="Button" line="203"/>
                <declaration name="textPanel" type="Panel" line="204"/>
                <declaration name="iconCanvas" type="XTrayIconPeer.IconCanvas" line="205"/>
                <declaration name="lineLabels" type="Label[]" line="206"/>
                <declaration name="ap" type="ActionPerformer" line="207"/>
                <declaration name="iconImage" type="Image" line="208"/>
                <declaration name="errorImage" type="Image" line="209"/>
                <declaration name="warnImage" type="Image" line="210"/>
                <declaration name="infoImage" type="Image" line="211"/>
                <declaration name="gtkImagesLoaded" type="boolean" line="212"/>
                <declaration name="displayer" type="Displayer" line="213"/>
                <method name="Balloon" type="constructor" line="214">
                    <params>
                        <param name="parent" type="Frame"/>
                        <param name="target" type="Object"/>
                        <param name="liveArguments" type="LiveArguments"/>
                    </params>
                    <anonymous_class line="219">
                        <method name="run" type="void" line="220">
                            <scope line="221">
                                <scope line="226"/>
                                <scope line="230"/>
                            </scope>
                        </method>
                    </anonymous_class>
                    <anonymous_class line="245">
                        <method name="actionPerformed" type="void" line="246">
                            <params>
                                <param name="e" type="ActionEvent"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <scope line="257"/>
                </method>
                <method name="display" type="void" line="264">
                    <params>
                        <param name="caption" type="String"/>
                        <param name="text" type="String"/>
                        <param name="messageType" type="String"/>
                    </params>
                    <scope line="265"/>
                </method>
                <method name="_display" type="void" line="270">
                    <params>
                        <param name="caption" type="String"/>
                        <param name="text" type="String"/>
                        <param name="messageType" type="String"/>
                    </params>
                    <declaration name="iter" type="BreakIterator" line="272"/>
                    <scope line="273">
                        <declaration name="start" type="int" line="275"/>
                        <declaration name="nLines" type="int" line="276"/>
                        <scope line="277">
                            <scope line="279"/>
                            <scope line="284">
                                <scope line="285"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="294"/>
                    <scope line="297"/>
                    <scope line="300"/>
                    <scope line="303"/>
                    <scope line="306">
                        <declaration name="tpSize" type="Dimension" line="307"/>
                    </scope>
                    <anonymous_class line="311">
                        <method name="run" type="void" line="312">
                            <scope line="313"/>
                            <declaration name="parLoc" type="Point" line="316"/>
                            <declaration name="parSize" type="Dimension" line="317"/>
                            <scope line="319"/>
                        </method>
                    </anonymous_class>
                </method>
                <method name="dispose" type="void" line="326"/>
                <method name="loadGtkImages" type="void" line="330">
                    <scope line="331"/>
                </method>
                <class name="ActionPerformer" line="338">
                    <extends class="MouseAdapter"/>
                    <method name="mouseClicked" type="void" line="339">
                        <params>
                            <param name="e" type="MouseEvent"/>
                        </params>
                        <scope line="341">
                            <declaration name="aev" type="ActionEvent" line="342"/>
                        </scope>
                    </method>
                </class>
                <class name="Displayer" line="347">
                    <extends class="Thread"/>
                    <declaration name="MAX_CONCURRENT_MSGS" type="int" line="348"/>
                    <declaration name="messageQueue" type="ArrayBlockingQueue&lt;Message&gt;" line="349"/>
                    <declaration name="isDisplayed" type="boolean" line="350"/>
                    <method name="Displayer" type="constructor" line="351"/>
                    <method name="run" type="void" line="354">
                        <scope line="355">
                            <declaration name="msg" type="Message" line="356"/>
                            <scope line="357"/>
                            <scope line="360"/>
                            <scope line="364">
                                <scope line="365">
                                    <scope line="366"/>
                                    <scope line="369"/>
                                </scope>
                            </scope>
                            <scope line="375"/>
                        </scope>
                    </method>
                    <method name="display" type="void" line="381">
                        <params>
                            <param name="caption" type="String"/>
                            <param name="text" type="String"/>
                            <param name="messageType" type="String"/>
                        </params>
                    </method>
                </class>
                <class name="Message" line="385">
                    <declaration name="caption" type="String" line="386"/>
                    <method name="Message" type="constructor" line="387">
                        <params>
                            <param name="caption" type="String"/>
                            <param name="text" type="String"/>
                            <param name="messageType" type="String"/>
                        </params>
                    </method>
                </class>
            </class>
        </class>
    </source>