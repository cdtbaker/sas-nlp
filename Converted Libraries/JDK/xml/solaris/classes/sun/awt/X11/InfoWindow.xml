<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.peer.TrayIconPeer"/>
        <import package="sun.awt"/>
        <import package="java.awt.image"/>
        <import package="java.text.BreakIterator"/>
        <import package="java.util.concurrent.ArrayBlockingQueue"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <class name="InfoWindow" line="39">
            <extends class="Window"/>
            <comment line="73">
                Must be executed on EDT.                
            </comment>
            <javadoc line="39">
                An utility window class. This is a base class for Tooltip and Balloon.                
            </javadoc>
            <declaration name="container" type="Container" line="43"/>
            <declaration name="closer" type="Closer" line="44"/>
            <method name="InfoWindow" type="constructor" line="46">
                <params>
                    <param name="parent" type="Frame"/>
                    <param name="borderColor" type="Color"/>
                </params>
                <anonymous_class line="49">
                    <method name="getInsets" type="Insets" line="51"/>
                </anonymous_class>
            </method>
            <method name="add" type="Component" line="63">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <method name="setCloser" type="void" line="68">
                <params>
                    <param name="action" type="Runnable"/>
                    <param name="time" type="int"/>
                </params>
            </method>
            <method name="show" type="void" line="73">
                <params>
                    <param name="corner" type="Point"/>
                    <param name="indent" type="int"/>
                </params>
                <comment line="80">
                    TODO: When 6356322 is fixed we should get screen bounds in
                     this way: eframe.getGraphicsConfiguration().getBounds().                    
                </comment>
                <comment line="84">
                    1st square                    
                </comment>
                <comment line="87">
                    2nd square                    
                </comment>
                <comment line="90">
                    3rd square                    
                </comment>
                <comment line="93">
                    4th square                    
                </comment>
                <declaration name="size" type="Dimension" line="78"/>
                <declaration name="scrSize" type="Dimension" line="81"/>
                <scope line="83"/>
                <scope line="86"/>
                <scope line="89"/>
                <scope line="92"/>
            </method>
            <method name="hide" type="void" line="100"/>
            <class name="Closer" line="104">
                <comment line="127">
                    WARNING: this method may be executed on Toolkit thread.                    
                </comment>
                <comment line="189">
                    WARNING: this method is executed on Toolkit thread!                    
                </comment>
                <implements interface="Runnable"/>
                <declaration name="action" type="Runnable" line="105"/>
                <declaration name="time" type="int" line="106"/>
                <method name="run" type="void" line="108"/>
                <method name="set" type="void" line="112">
                    <params>
                        <param name="action" type="Runnable"/>
                        <param name="time" type="int"/>
                    </params>
                </method>
                <method name="schedule" type="void" line="117"/>
                <method name="close" type="void" line="121"/>
                <method name="doClose" type="void" line="127">
                    <anonymous_class line="128">
                        <method name="run" type="void" line="129">
                            <scope line="132"/>
                        </method>
                    </anonymous_class>
                </method>
            </class>
            <interface name="LiveArguments">
                <comment line="127">
                    WARNING: this method may be executed on Toolkit thread.                    
                </comment>
                <comment line="189">
                    WARNING: this method is executed on Toolkit thread!                    
                </comment>
                <method name="isDisposed" type="boolean" line="142"/>
                <javadoc line="142">
                    Whether the target of the InfoWindow is disposed.                    
                </javadoc>
                <method name="getBounds" type="Rectangle" line="145"/>
                <javadoc line="145">
                    The bounds of the target of the InfoWindow.                    
                </javadoc>
            </interface>
            <class name="Tooltip" line="149">
                <extends class="InfoWindow"/>
                <comment line="127">
                    WARNING: this method may be executed on Toolkit thread.                    
                </comment>
                <comment line="189">
                    WARNING: this method is executed on Toolkit thread!                    
                </comment>
                <interface name="LiveArguments">
                    <implements interface="InfoWindow.LiveArguments"/>
                    <method name="getTooltipString" type="String" line="152"/>
                    <javadoc line="152">
                        The tooltip to be displayed.                        
                    </javadoc>
                </interface>
                <declaration name="target" type="Object" line="156"/>
                <declaration name="liveArguments" type="LiveArguments" line="157"/>
                <declaration name="textLabel" type="Label" line="159"/>
                <declaration name="starter" type="Runnable" line="160"/>
                <anonymous_class line="160">
                    <method name="run" type="void" line="161"/>
                </anonymous_class>
                <declaration name="TOOLTIP_SHOW_TIME" type="int" line="165"/>
                <declaration name="TOOLTIP_START_DELAY_TIME" type="int" line="166"/>
                <declaration name="TOOLTIP_MAX_LENGTH" type="int" line="167"/>
                <declaration name="TOOLTIP_MOUSE_CURSOR_INDENT" type="int" line="168"/>
                <declaration name="TOOLTIP_BACKGROUND_COLOR" type="Color" line="169"/>
                <declaration name="TOOLTIP_TEXT_FONT" type="Font" line="170"/>
                <method name="Tooltip" type="constructor" line="174">
                    <params>
                        <param name="parent" type="Frame"/>
                        <param name="target" type="Object"/>
                        <param name="liveArguments" type="LiveArguments"/>
                    </params>
                </method>
                <method name="display" type="void" line="191">
                    <comment line="193">
                        Execute on EDT to avoid deadlock (see 6280857).                        
                    </comment>
                    <anonymous_class line="193">
                        <method name="run" type="void" line="194">
                            <scope line="195"/>
                            <declaration name="tooltipString" type="String" line="199"/>
                            <scope line="200"/>
                            <scope line="202"/>
                            <scope line="204"/>
                            <anonymous_class line="208">
                                <method name="run" type="Object" line="209">
                                    <scope line="210"/>
                                </method>
                            </anonymous_class>
                            <declaration name="pointer" type="Point" line="208"/>
                            <scope line="216"/>
                        </method>
                    </anonymous_class>
                </method>
                <method name="enter" type="void" line="224"/>
                <method name="exit" type="void" line="228">
                    <scope line="230"/>
                </method>
                <method name="isPointerOverTrayIcon" type="boolean" line="235">
                    <params>
                        <param name="trayRect" type="Rectangle"/>
                    </params>
                    <declaration name="p" type="Point" line="236"/>
                </method>
            </class>
            <class name="Balloon" line="242">
                <extends class="InfoWindow"/>
                <comment line="127">
                    WARNING: this method may be executed on Toolkit thread.                    
                </comment>
                <comment line="189">
                    WARNING: this method is executed on Toolkit thread!                    
                </comment>
                <interface name="LiveArguments">
                    <implements interface="InfoWindow.LiveArguments"/>
                    <method name="getActionCommand" type="String" line="245"/>
                    <javadoc line="245">
                        The action to be performed upon clicking the baloon.                        
                    </javadoc>
                </interface>
                <declaration name="liveArguments" type="LiveArguments" line="249"/>
                <declaration name="target" type="Object" line="250"/>
                <declaration name="BALLOON_SHOW_TIME" type="int" line="252"/>
                <declaration name="BALLOON_TEXT_MAX_LENGTH" type="int" line="253"/>
                <declaration name="BALLOON_WORD_LINE_MAX_LENGTH" type="int" line="254"/>
                <declaration name="BALLOON_WORD_LINE_MAX_COUNT" type="int" line="255"/>
                <declaration name="BALLOON_ICON_WIDTH" type="int" line="256"/>
                <declaration name="BALLOON_ICON_HEIGHT" type="int" line="257"/>
                <declaration name="BALLOON_TRAY_ICON_INDENT" type="int" line="258"/>
                <declaration name="BALLOON_CAPTION_BACKGROUND_COLOR" type="Color" line="259"/>
                <declaration name="BALLOON_CAPTION_FONT" type="Font" line="260"/>
                <declaration name="mainPanel" type="Panel" line="262"/>
                <declaration name="captionPanel" type="Panel" line="263"/>
                <declaration name="captionLabel" type="Label" line="264"/>
                <declaration name="closeButton" type="Button" line="265"/>
                <declaration name="textPanel" type="Panel" line="266"/>
                <declaration name="iconCanvas" type="XTrayIconPeer.IconCanvas" line="267"/>
                <declaration name="lineLabels" type="Label[]" line="268"/>
                <declaration name="ap" type="ActionPerformer" line="269"/>
                <declaration name="iconImage" type="Image" line="271"/>
                <declaration name="errorImage" type="Image" line="272"/>
                <declaration name="warnImage" type="Image" line="273"/>
                <declaration name="infoImage" type="Image" line="274"/>
                <declaration name="gtkImagesLoaded" type="boolean" line="275"/>
                <declaration name="displayer" type="Displayer" line="277"/>
                <method name="Balloon" type="constructor" line="279">
                    <params>
                        <param name="parent" type="Frame"/>
                        <param name="target" type="Object"/>
                        <param name="liveArguments" type="LiveArguments"/>
                    </params>
                    <anonymous_class line="286">
                        <method name="run" type="void" line="287">
                            <scope line="288">
                                <scope line="293"/>
                                <scope line="296"/>
                            </scope>
                        </method>
                    </anonymous_class>
                    <anonymous_class line="314">
                        <method name="actionPerformed" type="void" line="315">
                            <params>
                                <param name="e" type="ActionEvent"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <scope line="328"/>
                </method>
                <method name="display" type="void" line="337">
                    <params>
                        <param name="caption" type="String"/>
                        <param name="text" type="String"/>
                        <param name="messageType" type="String"/>
                    </params>
                    <scope line="338"/>
                </method>
                <method name="_display" type="void" line="344">
                    <params>
                        <param name="caption" type="String"/>
                        <param name="text" type="String"/>
                        <param name="messageType" type="String"/>
                    </params>
                    <comment line="405">
                        call it after the show(..) above                        
                    </comment>
                    <declaration name="iter" type="BreakIterator" line="347"/>
                    <scope line="348">
                        <declaration name="start" type="int" line="350"/>
                        <declaration name="nLines" type="int" line="351"/>
                        <scope line="353">
                            <scope line="358"/>
                            <scope line="364">
                                <scope line="365"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="377"/>
                    <scope line="379"/>
                    <scope line="381"/>
                    <scope line="383"/>
                    <scope line="387">
                        <declaration name="tpSize" type="Dimension" line="388"/>
                    </scope>
                    <anonymous_class line="394">
                        <method name="run" type="void" line="395">
                            <comment line="405">
                                call it after the show(..) above                                
                            </comment>
                            <scope line="396"/>
                            <declaration name="parLoc" type="Point" line="399"/>
                            <declaration name="parSize" type="Dimension" line="400"/>
                            <scope line="403"/>
                        </method>
                    </anonymous_class>
                </method>
                <method name="dispose" type="void" line="410"/>
                <method name="loadGtkImages" type="void" line="415">
                    <scope line="416"/>
                </method>
                <class name="ActionPerformer" line="427">
                    <extends class="MouseAdapter"/>
                    <method name="mouseClicked" type="void" line="428">
                        <params>
                            <param name="e" type="MouseEvent"/>
                        </params>
                        <comment line="430">
                            hide the balloon by any click                            
                        </comment>
                        <scope line="431">
                            <declaration name="aev" type="ActionEvent" line="432"/>
                        </scope>
                    </method>
                </class>
                <class name="Displayer" line="440">
                    <extends class="Thread"/>
                    <declaration name="MAX_CONCURRENT_MSGS" type="int" line="441"/>
                    <declaration name="messageQueue" type="ArrayBlockingQueue&lt;Message&gt;" line="443"/>
                    <declaration name="isDisplayed" type="boolean" line="444"/>
                    <method name="Displayer" type="constructor" line="446"/>
                    <method name="run" type="void" line="450">
                        <comment line="460">
                            Wait till the previous message is displayed if any                            
                        </comment>
                        <scope line="451">
                            <declaration name="msg" type="Message" line="452"/>
                            <scope line="453"/>
                            <scope line="455"/>
                            <scope line="463">
                                <scope line="464">
                                    <scope line="465"/>
                                    <scope line="467"/>
                                </scope>
                            </scope>
                            <scope line="472"/>
                        </scope>
                    </method>
                    <method name="display" type="void" line="479">
                        <params>
                            <param name="caption" type="String"/>
                            <param name="text" type="String"/>
                            <param name="messageType" type="String"/>
                        </params>
                    </method>
                </class>
                <class name="Message" line="484">
                    <declaration name="caption" type="String" line="485"/>
                    <method name="Message" type="constructor" line="487">
                        <params>
                            <param name="caption" type="String"/>
                            <param name="text" type="String"/>
                            <param name="messageType" type="String"/>
                        </params>
                    </method>
                </class>
            </class>
        </class>
    </source>