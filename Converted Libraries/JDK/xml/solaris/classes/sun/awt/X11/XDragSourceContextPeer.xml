<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt.Component"/>
        <import package="java.awt.Cursor"/>
        <import package="java.awt.Window"/>
        <import package="java.awt.datatransfer.Transferable"/>
        <import package="java.awt.dnd.DnDConstants"/>
        <import package="java.awt.dnd.DragGestureEvent"/>
        <import package="java.awt.dnd.InvalidDnDOperationException"/>
        <import package="java.util"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <import package="sun.awt.dnd.SunDragSourceContextPeer"/>
        <import package="sun.awt.dnd.SunDropTargetContextPeer"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.AWTAccessor"/>
        <class name="XDragSourceContextPeer" line="47">
            <extends class="SunDragSourceContextPeer"/>
            <comment line="59">
                                
            </comment>
            <comment line="62">
                                
            </comment>
            <comment line="66">
                                
            </comment>
            <comment line="72">
                                
            </comment>
            <comment line="74">
                                
            </comment>
            <comment line="76">
                                
            </comment>
            <comment line="78">
                The drop action selected by the drag source based on the modifiers state                
            </comment>
            <comment line="81">
                The data formats supported by the drag source for the current drag                
            </comment>
            <comment line="84">
                                
            </comment>
            <comment line="86">
                                
            </comment>
            <comment line="89">
                                
            </comment>
            <comment line="92">
                                
            </comment>
            <comment line="95">
                                
            </comment>
            <comment line="490">
                DO NOT USE is_hint field of xmotion since it could not be set when we
                 convert XKeyEvent or XButtonRelease to XMotionEvent.                
            </comment>
            <comment line="748">
                                
            </comment>
            <implements interface="XDragSourceProtocolListener"/>
            <javadoc line="47">
                The XDragSourceContextPeer class is the class responsible for handling
                  the interaction between the XDnD/Motif DnD subsystem and Java drag sources.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="logger" type="PlatformLogger" line="55"/>
            <declaration name="ROOT_EVENT_MASK" type="int" line="59"/>
            <declaration name="GRAB_EVENT_MASK" type="int" line="62"/>
            <declaration name="rootEventMask" type="long" line="66"/>
            <declaration name="dndInProgress" type="boolean" line="67"/>
            <declaration name="dragInProgress" type="boolean" line="68"/>
            <declaration name="dragRootWindow" type="long" line="69"/>
            <declaration name="dragProtocol" type="XDragSourceProtocol" line="72"/>
            <declaration name="targetAction" type="int" line="74"/>
            <declaration name="sourceActions" type="int" line="76"/>
            <declaration name="sourceAction" type="int" line="79"/>
            <declaration name="sourceFormats" type="long[]" line="82"/>
            <declaration name="targetRootSubwindow" type="long" line="84"/>
            <declaration name="xRoot" type="int" line="86"/>
            <declaration name="yRoot" type="int" line="87"/>
            <declaration name="eventState" type="int" line="89"/>
            <declaration name="proxyModeSourceWindow" type="long" line="92"/>
            <declaration name="theInstance" type="XDragSourceContextPeer" line="95"/>
            <method name="XDragSourceContextPeer" type="constructor" line="98">
                <params>
                    <param name="dge" type="DragGestureEvent"/>
                </params>
            </method>
            <method name="getXDragSourceProtocolListener" type="XDragSourceProtocolListener" line="102"/>
            <method name="createDragSourceContextPeer" type="XDragSourceContextPeer" line="107">
                <params>
                    <param name="dge" type="DragGestureEvent"/>
                </params>
            </method>
            <method name="startDrag" type="void" line="113">
                <params>
                    <param name="transferable" type="Transferable"/>
                    <param name="formats" type="long[]"/>
                    <param name="formatMap" type="Map"/>
                </params>
                <comment line="135">
                                        
                </comment>
                <comment line="152">
                                        
                </comment>
                <comment line="176">
                                        
                </comment>
                <comment line="223">
                                        
                </comment>
                <comment line="233">
                                        
                </comment>
                <declaration name="component" type="Component" line="114"/>
                <declaration name="c" type="Component" line="115"/>
                <declaration name="wpeer" type="XWindowPeer" line="116"/>
                <scope line="121"/>
                <scope line="125"/>
                <declaration name="xcursor" type="long" line="130"/>
                <declaration name="rootWindow" type="long" line="131"/>
                <declaration name="dragWindow" type="long" line="132"/>
                <declaration name="timeStamp" type="long" line="133"/>
                <scope line="136">
                    <declaration name="cursor" type="Cursor" line="137"/>
                    <scope line="138"/>
                </scope>
                <scope line="144">
                    <scope line="145"/>
                    <scope line="148"/>
                    <scope line="153">
                        <declaration name="screen" type="long" line="154"/>
                    </scope>
                    <declaration name="dropActions" type="int" line="162"/>
                    <declaration name="dragProtocols" type="Iterator" line="164"/>
                    <scope line="165">
                        <declaration name="dragProtocol" type="XDragSourceProtocol" line="166"/>
                        <scope line="167"/>
                        <scope line="170"/>
                    </scope>
                    <scope line="177">
                        <declaration name="status" type="int" line="178"/>
                        <declaration name="wattr" type="XWindowAttributes" line="179"/>
                        <scope line="180">
                            <scope line="184"/>
                        </scope>
                        <scope line="192"/>
                        <scope line="204"/>
                        <scope line="216"/>
                    </scope>
                </scope>
                <scope line="229"/>
            </method>
            <method name="getProxyModeSourceWindow" type="long" line="239"/>
            <method name="setProxyModeSourceWindowImpl" type="void" line="243">
                <params>
                    <param name="window" type="long"/>
                </params>
            </method>
            <method name="setProxyModeSourceWindow" type="void" line="247">
                <params>
                    <param name="window" type="long"/>
                </params>
            </method>
            <javadoc line="251">
                set cursor                
            </javadoc>
            <method name="setCursor" type="void" line="255">
                <params>
                    <param name="c" type="Cursor"/>
                </params>
                <scope line="257"/>
                <scope line="259"/>
            </method>
            <method name="setNativeCursor" type="void" line="264">
                <params>
                    <param name="nativeCtxt" type="long"/>
                    <param name="c" type="Cursor"/>
                    <param name="cType" type="int"/>
                </params>
                <scope line="267"/>
                <declaration name="xcursor" type="long" line="271"/>
                <scope line="273"/>
            </method>
            <method name="needsBogusExitBeforeDrop" type="boolean" line="283"/>
            <method name="throwGrabFailureException" type="void" line="288">
                <params>
                    <param name="msg" type="String"/>
                    <param name="grabStatus" type="int"/>
                </params>
                <declaration name="msgCause" type="String" line="289"/>
            </method>
            <javadoc line="300">
                The caller must own awtLock.                
            </javadoc>
            <method name="cleanup" type="void" line="303">
                <params>
                    <param name="time" type="long"/>
                </params>
                <comment line="322">
                    Ignore the exception.                    
                </comment>
                <scope line="304">
                    <scope line="305"/>
                    <scope line="309"/>
                </scope>
                <declaration name="dragProtocols" type="Iterator" line="316"/>
                <scope line="317">
                    <declaration name="dragProtocol" type="XDragSourceProtocol" line="318"/>
                    <scope line="319"/>
                    <scope line="321"/>
                </scope>
            </method>
            <javadoc line="341">
                The caller must own awtLock.                
            </javadoc>
            <method name="cleanupTargetInfo" type="void" line="344"/>
            <method name="removeDnDGrab" type="void" line="350">
                <params>
                    <param name="time" type="long"/>
                </params>
                <comment line="356">
                                        
                </comment>
                <scope line="358"/>
            </method>
            <method name="processClientMessage" type="boolean" line="369">
                <params>
                    <param name="xclient" type="XClientMessageEvent"/>
                </params>
                <scope line="370"/>
            </method>
            <javadoc line="376">
                Updates the source action according to the specified state.                
                <returns>
                    true if the source                    
                </returns>
            </javadoc>
            <method name="updateSourceAction" type="boolean" line="381">
                <params>
                    <param name="state" type="int"/>
                </params>
                <declaration name="action" type="int" line="382"/>
                <scope line="384"/>
            </method>
            <javadoc line="391">
                Returns the client window under the specified root subwindow.                
            </javadoc>
            <method name="findClientWindow" type="long" line="394">
                <params>
                    <param name="window" type="long"/>
                </params>
                <scope line="395"/>
                <declaration name="children" type="Set&lt;Long&gt;" line="399"/>
                <scope line="400">
                    <declaration name="win" type="long" line="401"/>
                    <scope line="402"/>
                </scope>
            </method>
            <method name="doUpdateTargetWindow" type="void" line="410">
                <params>
                    <param name="subwindow" type="long"/>
                    <param name="time" type="long"/>
                </params>
                <comment line="431">
                                        
                </comment>
                <declaration name="clientWindow" type="long" line="411"/>
                <declaration name="proxyWindow" type="long" line="412"/>
                <declaration name="protocol" type="XDragSourceProtocol" line="413"/>
                <declaration name="isReceiver" type="boolean" line="414"/>
                <scope line="416"/>
                <scope line="420">
                    <declaration name="dragProtocols" type="Iterator" line="421"/>
                    <scope line="422">
                        <declaration name="dragProtocol" type="XDragSourceProtocol" line="423"/>
                        <scope line="424"/>
                    </scope>
                </scope>
            </method>
            <method name="updateTargetWindow" type="void" line="437">
                <params>
                    <param name="xmotion" type="XMotionEvent"/>
                </params>
                <comment line="445">
                    If this event had occurred before the pointer was grabbed,
                     query the server for the current root subwindow.                    
                </comment>
                <comment line="452">
                    root                    
                </comment>
                <comment line="453">
                    subwindow                    
                </comment>
                <comment line="454">
                    x_root                    
                </comment>
                <comment line="455">
                    y_root                    
                </comment>
                <comment line="456">
                    x                    
                </comment>
                <comment line="457">
                    y                    
                </comment>
                <comment line="458">
                    modifiers                    
                </comment>
                <comment line="466">
                    Neither Motif DnD nor XDnD provide a mean for the target
                     to notify the source that the pointer exits the drop site
                     that occupies the whole top level.
                     We detect this situation and post dragExit.                    
                </comment>
                <comment line="477">
                                        
                </comment>
                <declaration name="x" type="int" line="440"/>
                <declaration name="y" type="int" line="441"/>
                <declaration name="time" type="long" line="442"/>
                <declaration name="subwindow" type="long" line="443"/>
                <scope line="449"/>
                <scope line="462">
                    <scope line="463">
                        <scope line="472"/>
                    </scope>
                    <scope line="480"/>
                </scope>
            </method>
            <method name="processMouseMove" type="void" line="493">
                <params>
                    <param name="xmotion" type="XMotionEvent"/>
                </params>
                <scope line="494"/>
                <scope line="497"/>
                <scope line="506">
                    <scope line="507"/>
                </scope>
                <scope line="517"/>
            </method>
            <method name="processDrop" type="void" line="525">
                <params>
                    <param name="xbutton" type="XButtonEvent"/>
                </params>
                <scope line="526"/>
                <scope line="531"/>
            </method>
            <method name="processProxyModeEvent" type="boolean" line="536">
                <params>
                    <param name="ev" type="XEvent"/>
                </params>
                <scope line="537"/>
                <scope line="541"/>
                <scope line="545"/>
                <declaration name="xclient" type="XClientMessageEvent" line="551"/>
                <declaration name="dragProtocols" type="Iterator" line="553"/>
                <scope line="554">
                    <declaration name="dragProtocol" type="XDragSourceProtocol" line="555"/>
                    <scope line="558"/>
                </scope>
            </method>
            <javadoc line="566">
                The caller must own awtLock.                
                <returns>
                    true if the even was processed and shouldn't be passed along.                    
                </returns>
            </javadoc>
            <method name="doProcessEvent" type="boolean" line="571">
                <params>
                    <param name="ev" type="XEvent"/>
                </params>
                <comment line="590">
                                        
                </comment>
                <comment line="597">
                                        
                </comment>
                <comment line="606">
                                        
                </comment>
                <comment line="626">
                    root                    
                </comment>
                <comment line="627">
                    subwindow                    
                </comment>
                <comment line="628">
                    x_root                    
                </comment>
                <comment line="629">
                    y_root                    
                </comment>
                <comment line="630">
                    x                    
                </comment>
                <comment line="631">
                    y                    
                </comment>
                <comment line="632">
                    modifiers                    
                </comment>
                <comment line="648">
                    we do not use this field, so it&apos;s unset for now                    
                </comment>
                <comment line="649">
                    xmotion.set_is_hint(???);                    
                </comment>
                <comment line="652">
                    It&apos;s safe to use key event as motion event since we use only their common fields.                    
                </comment>
                <comment line="669">
                    Ignore the buttons above 20 due to the bit limit for
                     InputEvent.BUTTON_DOWN_MASK.
                     One more bit is reserved for FIRST_HIGH_BIT.                    
                </comment>
                <comment line="678">
                    On some X servers it could happen that ButtonRelease coordinates
                     differ from the latest MotionNotify coordinates, so we need to
                     process it as a mouse motion.                    
                </comment>
                <comment line="698">
                    we do not use this field, so it&apos;s unset for now                    
                </comment>
                <comment line="699">
                    xmotion.set_is_hint(???);                    
                </comment>
                <comment line="702">
                    It&apos;s safe to use key event as motion event since we use only their common fields.                    
                </comment>
                <comment line="709">
                    drag is initiated with Button1 or Button2 pressed and                    
                </comment>
                <comment line="710">
                    ended on release of either of these buttons (as the same                    
                </comment>
                <comment line="711">
                    behavior was with our old Motif DnD-based implementation)                    
                </comment>
                <comment line="715">
                    ACTION_NONE indicates that either the drop target rejects the
                     drop or it haven&apos;t responded yet. The latter could happen in
                     case of fast drag, slow target-server connection or slow
                     drag notifications processing on the target side.                    
                </comment>
                <scope line="574"/>
                <scope line="578"/>
                <scope line="583">
                    <declaration name="xclient" type="XClientMessageEvent" line="584"/>
                </scope>
                <scope line="587">
                    <declaration name="xde" type="XDestroyWindowEvent" line="588"/>
                    <scope line="593"/>
                </scope>
                <scope line="602"/>
                <scope line="609">
                    <declaration name="xkey" type="XKeyEvent" line="610"/>
                    <declaration name="keysym" type="long" line="611"/>
                    <scope line="614">
                        <scope line="615"/>
                    </scope>
                    <scope line="623">
                        <declaration name="xmotion" type="XMotionEvent" line="633"/>
                        <scope line="634"/>
                        <scope line="654"/>
                    </scope>
                </scope>
                <scope line="667">
                    <declaration name="xbutton" type="XButtonEvent" line="668"/>
                    <scope line="674"/>
                    <declaration name="xmotion" type="XMotionEvent" line="683"/>
                    <scope line="684"/>
                    <scope line="704"/>
                    <scope line="708">
                        <scope line="714"/>
                        <scope line="722"/>
                    </scope>
                </scope>
            </method>
            <method name="processEvent" type="boolean" line="733">
                <params>
                    <param name="ev" type="XEvent"/>
                </params>
                <scope line="735">
                    <scope line="736"/>
                    <scope line="738"/>
                </scope>
                <scope line="742"/>
            </method>
            <method name="handleDragReply" type="void" line="749">
                <params>
                    <param name="action" type="int"/>
                </params>
                <comment line="750">
                    NOTE: we have to use the current pointer location, since                    
                </comment>
                <comment line="751">
                    the target didn&apos;t specify the coordinates for the reply.                    
                </comment>
            </method>
            <method name="handleDragReply" type="void" line="755">
                <params>
                    <param name="action" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <comment line="756">
                    NOTE: we have to use the current modifiers state, since                    
                </comment>
                <comment line="757">
                    the target didn&apos;t specify the modifiers state for the reply.                    
                </comment>
            </method>
            <method name="handleDragReply" type="void" line="761">
                <params>
                    <param name="action" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="modifiers" type="int"/>
                </params>
                <comment line="774">
                    Note that we use the modifiers state a                    
                </comment>
                <scope line="763"/>
                <scope line="765">
                    <declaration name="type" type="int" line="766"/>
                    <scope line="768"/>
                    <scope line="770"/>
                </scope>
            </method>
            <method name="handleDragFinished" type="void" line="781">
                <comment line="782">
                                        
                </comment>
            </method>
            <method name="handleDragFinished" type="void" line="786">
                <params>
                    <param name="success" type="boolean"/>
                </params>
                <comment line="787">
                    Assume that the performed drop action is the latest drop action                    
                </comment>
            </method>
            <method name="handleDragFinished" type="void" line="792">
                <params>
                    <param name="success" type="boolean"/>
                    <param name="action" type="int"/>
                </params>
                <comment line="793">
                    NOTE: we have to use the current pointer location, since                    
                </comment>
                <comment line="794">
                    the target didn&apos;t specify the coordinates for the reply.                    
                </comment>
            </method>
            <method name="handleDragFinished" type="void" line="798">
                <params>
                    <param name="success" type="boolean"/>
                    <param name="action" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
        </class>
    </source>