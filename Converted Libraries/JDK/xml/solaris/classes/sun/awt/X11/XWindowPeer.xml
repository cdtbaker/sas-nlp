<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt"/>
        <import package="java.awt.event.ComponentEvent"/>
        <import package="java.awt.event.FocusEvent"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.peer.ComponentPeer"/>
        <import package="java.awt.peer.WindowPeer"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Set"/>
        <import package="java.util.Vector"/>
        <import package="java.util.concurrent.atomic.AtomicBoolean"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <import package="sun.awt.AWTAccessor"/>
        <import package="sun.awt.DisplayChangedListener"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.X11GraphicsDevice"/>
        <import package="sun.awt.X11GraphicsEnvironment"/>
        <import package="sun.java2d.pipe.Region"/>
        <class name="XWindowPeer" line="25">
            <extends class="XPanelPeer"/>
            <implements interface="WindowPeer"/>
            <implements interface="DisplayChangedListener"/>
            <declaration name="log" type="PlatformLogger" line="26"/>
            <declaration name="focusLog" type="PlatformLogger" line="27"/>
            <declaration name="insLog" type="PlatformLogger" line="28"/>
            <declaration name="grabLog" type="PlatformLogger" line="29"/>
            <declaration name="iconLog" type="PlatformLogger" line="30"/>
            <declaration name="windows" type="Set&lt;XWindowPeer&gt;" line="31"/>
            <declaration name="cachedFocusableWindow" type="boolean" line="32"/>
            <declaration name="warningWindow" type="XWarningWindow" line="33"/>
            <declaration name="alwaysOnTop" type="boolean" line="34"/>
            <declaration name="locationByPlatform" type="boolean" line="35"/>
            <declaration name="modalBlocker" type="Dialog" line="36"/>
            <declaration name="delayedModalBlocking" type="boolean" line="37"/>
            <declaration name="targetMinimumSize" type="Dimension" line="38"/>
            <declaration name="ownerPeer" type="XWindowPeer" line="39"/>
            <declaration name="prevTransientFor" type="XWindowPeer" line="40"/>
            <declaration name="curRealTransientFor" type="XWindowPeer" line="41"/>
            <declaration name="grab" type="boolean" line="42"/>
            <declaration name="isMapped" type="boolean" line="43"/>
            <declaration name="mustControlStackPosition" type="boolean" line="44"/>
            <declaration name="rootPropertyEventDispatcher" type="XEventDispatcher" line="45"/>
            <declaration name="isStartupNotificationRemoved" type="AtomicBoolean" line="46"/>
            <declaration name="isUnhiding" type="boolean" line="47"/>
            <declaration name="isBeforeFirstMapNotify" type="boolean" line="48"/>
            <declaration name="windowType" type="Window.Type" line="49"/>
            <javadoc line="49">
                The type of the window.
                  The type is supposed to be immutable while the peer object exists.
                  The value gets initialized in the preInit() method.                
            </javadoc>
            <method name="getWindowType" type="Window.Type" line="55"/>
            <declaration name="toplevelStateListeners" type="Vector&lt;ToplevelStateListener&gt;" line="58"/>
            <method name="XWindowPeer" type="constructor" line="59">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
            </method>
            <method name="XWindowPeer" type="constructor" line="62">
                <params>
                    <param name="target" type="Window"/>
                </params>
            </method>
            <declaration name="PREFERRED_SIZE_FOR_ICON" type="int" line="65"/>
            <declaration name="MAXIMUM_BUFFER_LENGTH_NET_WM_ICON" type="int" line="66"/>
            <method name="preInit" type="void" line="67">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
                <declaration name="eventMask" type="long" line="73"/>
                <scope line="74"/>
                <scope line="82"/>
                <scope line="85"/>
                <declaration name="f" type="Font" line="89"/>
                <scope line="90"/>
                <declaration name="c" type="Color" line="94"/>
                <scope line="95">
                    <declaration name="background" type="Color" line="96"/>
                </scope>
                <scope line="100"/>
                <declaration name="gc" type="GraphicsConfiguration" line="104"/>
            </method>
            <method name="getWMName" type="String" line="107">
                <declaration name="name" type="String" line="108"/>
                <scope line="109"/>
            </method>
            <method name="postInit" type="void" line="114">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
                <declaration name="t_window" type="Window" line="117"/>
                <declaration name="owner" type="Window" line="118"/>
                <scope line="119">
                    <scope line="121"/>
                    <declaration name="ownerWindow" type="long" line="127"/>
                    <scope line="128">
                        <scope line="130">
                            <declaration name="hints" type="XWMHints" line="133"/>
                        </scope>
                        <scope line="138"/>
                    </scope>
                </scope>
                <scope line="143">
                    <scope line="144"/>
                </scope>
            </method>
            <method name="updateIconImages" type="void" line="153">
                <declaration name="target" type="Window" line="154"/>
                <declaration name="iconImages" type="java.util.List&lt;Image&gt;" line="155"/>
                <declaration name="ownerPeer" type="XWindowPeer" line="156"/>
                <scope line="158">
                    <scope line="160">
                        <declaration name="image" type="Image" line="161"/>
                        <scope line="162">
                            <scope line="163"/>
                        </scope>
                        <declaration name="iconInfo" type="XIconInfo" line="168"/>
                        <scope line="169"/>
                        <scope line="172">
                            <scope line="173"/>
                        </scope>
                        <scope line="178"/>
                    </scope>
                </scope>
                <scope line="184">
                    <scope line="185"/>
                    <scope line="189"/>
                </scope>
            </method>
            <method name="normalizeIconImages" type="java.util.List<XIconInfo>" line="196">
                <params>
                    <param name="icons" type="java.util.List<XIconInfo>"/>
                </params>
                <declaration name="result" type="java.util.List&lt;XIconInfo&gt;" line="197"/>
                <declaration name="totalLength" type="int" line="198"/>
                <declaration name="haveLargeIcon" type="boolean" line="199"/>
                <scope line="200">
                    <declaration name="width" type="int" line="201"/>
                    <declaration name="height" type="int" line="202"/>
                    <declaration name="length" type="int" line="203"/>
                    <scope line="204">
                        <scope line="205"/>
                        <declaration name="scaledWidth" type="int" line="208"/>
                        <declaration name="scaledHeight" type="int" line="209"/>
                        <scope line="210"/>
                    </scope>
                    <scope line="217">
                        <scope line="220"/>
                    </scope>
                </scope>
                <scope line="225"/>
            </method>
            <method name="dumpIcons" type="void" line="230">
                <params>
                    <param name="icons" type="java.util.List<XIconInfo>"/>
                </params>
                <scope line="231">
                    <scope line="233"/>
                </scope>
            </method>
            <method name="recursivelySetIcon" type="void" line="238">
                <params>
                    <param name="icons" type="java.util.List<XIconInfo>"/>
                </params>
                <declaration name="target" type="Window" line="241"/>
                <declaration name="children" type="Window[]" line="242"/>
                <declaration name="cnt" type="int" line="243"/>
                <scope line="244">
                    <declaration name="childPeer" type="ComponentPeer" line="245"/>
                    <scope line="246">
                        <scope line="247"/>
                    </scope>
                </scope>
            </method>
            <method name="getIconInfo" type="java.util.List<XIconInfo>" line="254"/>
            <method name="setIconHints" type="void" line="257">
                <params>
                    <param name="icons" type="java.util.List<XIconInfo>"/>
                </params>
            </method>
            <declaration name="defaultIconInfo" type="ArrayList&lt;XIconInfo&gt;" line="259"/>
            <method name="getDefaultIconInfo" type="java.util.List<XIconInfo>" line="260">
                <scope line="261">
                    <scope line="263"/>
                    <scope line="269"/>
                </scope>
            </method>
            <method name="updateShape" type="void" line="278">
                <declaration name="shape" type="Shape" line="279"/>
                <scope line="280"/>
            </method>
            <method name="updateOpacity" type="void" line="284">
                <declaration name="opacity" type="float" line="285"/>
                <scope line="286"/>
            </method>
            <method name="updateMinimumSize" type="void" line="290"/>
            <method name="getTargetMinimumSize" type="Dimension" line="293"/>
            <method name="getOwnerPeer" type="XWindowPeer" line="296"/>
            <method name="setBounds" type="void" line="299">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="op" type="int"/>
                </params>
                <scope line="301">
                    <declaration name="oldBounds" type="Rectangle" line="302"/>
                    <declaration name="bounds" type="Rectangle" line="304"/>
                    <declaration name="hints" type="XSizeHints" line="305"/>
                    <declaration name="protocol" type="XNETProtocol" line="308"/>
                    <scope line="309">
                        <declaration name="net_wm_state" type="XAtomList" line="310"/>
                    </scope>
                    <declaration name="isResized" type="boolean" line="314"/>
                    <declaration name="isMoved" type="boolean" line="315"/>
                    <scope line="316"/>
                    <scope line="319"/>
                    <scope line="322"/>
                </scope>
                <scope line="326"/>
            </method>
            <method name="updateFocusability" type="void" line="330">
                <scope line="333">
                    <declaration name="hints" type="XWMHints" line="334"/>
                </scope>
                <scope line="339"/>
            </method>
            <method name="getInsets" type="Insets" line="343"/>
            <method name="handleIconify" type="void" line="346"/>
            <method name="handleDeiconify" type="void" line="349"/>
            <method name="handleStateChange" type="void" line="352">
                <params>
                    <param name="oldState" type="int"/>
                    <param name="newState" type="int"/>
                </params>
            </method>
            <javadoc line="355">
                DEPRECATED:  Replaced by getInsets().                
            </javadoc>
            <method name="insets" type="Insets" line="358"/>
            <method name="isAutoRequestFocus" type="boolean" line="361">
                <scope line="362"/>
                <scope line="365"/>
            </method>
            <method name="getNativeFocusedWindowPeer" type="XWindowPeer" line="369">
                <declaration name="baseWindow" type="XBaseWindow" line="370"/>
            </method>
            <method name="getNativeFocusedWindow" type="Window" line="373">
                <declaration name="peer" type="XWindowPeer" line="374"/>
            </method>
            <method name="isFocusableWindow" type="boolean" line="377">
                <scope line="378"/>
                <scope line="381"/>
            </method>
            <method name="isFocusedWindowModalBlocker" type="boolean" line="385"/>
            <method name="getFocusTargetWindow" type="long" line="388"/>
            <javadoc line="391">
                Returns whether or not this window peer has native X window
                  configured as non-focusable window. It might happen if:
                  - Java window is non-focusable
                  - Java window is simple Window(not Frame or Dialog)                
            </javadoc>
            <method name="isNativelyNonFocusableWindow" type="boolean" line="397">
                <scope line="398"/>
                <scope line="401"/>
            </method>
            <method name="handleWindowFocusIn_Dispatch" type="void" line="405">
                <scope line="406">
                    <declaration name="we" type="WindowEvent" line="408"/>
                </scope>
            </method>
            <method name="handleWindowFocusInSync" type="void" line="413">
                <params>
                    <param name="serial" type="long"/>
                </params>
                <declaration name="we" type="WindowEvent" line="414"/>
            </method>
            <method name="handleWindowFocusIn" type="void" line="418">
                <params>
                    <param name="serial" type="long"/>
                </params>
                <declaration name="we" type="WindowEvent" line="419"/>
            </method>
            <method name="handleWindowFocusOut" type="void" line="423">
                <params>
                    <param name="oppositeWindow" type="Window"/>
                    <param name="serial" type="long"/>
                </params>
                <declaration name="we" type="WindowEvent" line="424"/>
            </method>
            <method name="handleWindowFocusOutSync" type="void" line="429">
                <params>
                    <param name="oppositeWindow" type="Window"/>
                    <param name="serial" type="long"/>
                </params>
                <declaration name="we" type="WindowEvent" line="430"/>
            </method>
            <method name="checkIfOnNewScreen" type="void" line="435">
                <params>
                    <param name="newBounds" type="Rectangle"/>
                </params>
                <scope line="436"/>
                <scope line="439"/>
                <declaration name="area" type="int" line="442"/>
                <declaration name="intAmt" type="int" line="443"/>
                <declaration name="largestAmt" type="int" line="444"/>
                <declaration name="curScreenNum" type="int" line="445"/>
                <declaration name="newScreenNum" type="int" line="446"/>
                <declaration name="gds" type="GraphicsDevice" line="447"/>
                <declaration name="newGC" type="GraphicsConfiguration" line="448"/>
                <declaration name="screenBounds" type="Rectangle" line="449"/>
                <scope line="450">
                    <scope line="452">
                        <scope line="456"/>
                        <scope line="461"/>
                    </scope>
                </scope>
                <scope line="468">
                    <scope line="469"/>
                </scope>
            </method>
            <javadoc line="475">
                Helper method that executes the displayChanged(screen) method on
                  the event dispatch thread.  This method is used in the Xinerama case
                  and after display mode change events.                
            </javadoc>
            <method name="executeDisplayChangedOnEDT" type="void" line="480">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
                <anonymous_class line="481">
                    <method name="run" type="void" line="482"/>
                </anonymous_class>
                <declaration name="dc" type="Runnable" line="481"/>
            </method>
            <javadoc line="489">
                From the DisplayChangedListener interface; called from
                  X11GraphicsDevice when the display mode has been changed.                
            </javadoc>
            <method name="displayChanged" type="void" line="493"/>
            <javadoc line="496">
                From the DisplayChangedListener interface; top-levels do not need
                  to react to this event.                
            </javadoc>
            <method name="paletteChanged" type="void" line="500"/>
            <method name="handleConfigureNotifyEvent" type="void" line="502">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="xe" type="XConfigureEvent" line="503"/>
            </method>
            <method name="requestXFocus" type="void" line="508">
                <params>
                    <param name="time" type="long"/>
                </params>
            </method>
            <method name="requestXFocus" type="void" line="511"/>
            <javadoc line="514">
                Requests focus to this top-level. Descendants should override to provide
                  implementations based on a class of top-level.                
            </javadoc>
            <method name="requestXFocus" type="void" line="518">
                <params>
                    <param name="time" type="long"/>
                    <param name="timeProvided" type="boolean"/>
                </params>
            </method>
            <method name="focusAllowedFor" type="boolean" line="522">
                <scope line="523"/>
                <scope line="526"/>
            </method>
            <method name="handleFocusEvent" type="void" line="531">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="xfe" type="XFocusChangeEvent" line="532"/>
                <declaration name="fe" type="FocusEvent" line="533"/>
                <scope line="535"/>
                <scope line="538">
                    <scope line="539">
                        <scope line="540"/>
                    </scope>
                </scope>
                <scope line="545">
                    <scope line="546">
                        <scope line="547">
                            <declaration name="oppositeXWindow" type="XWindowPeer" line="548"/>
                            <declaration name="oppositeTarget" type="Object" line="549"/>
                            <declaration name="oppositeWindow" type="Window" line="550"/>
                            <scope line="551"/>
                            <scope line="554"/>
                            <scope line="557"/>
                            <scope line="560">
                                <scope line="561">
                                    <scope line="564"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="setSaveUnder" type="void" line="574">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="toFront" type="void" line="576">
                <scope line="577"/>
                <scope line="581">
                    <scope line="583"/>
                </scope>
                <scope line="587"/>
            </method>
            <method name="toBack" type="void" line="591">
                <scope line="593">
                    <scope line="594"/>
                    <scope line="597"/>
                </scope>
                <scope line="601"/>
            </method>
            <method name="lowerOverrideRedirect" type="void" line="605">
                <declaration name="toplevels" type="HashSet" line="606"/>
                <declaration name="topl" type="long" line="607"/>
                <scope line="608">
                    <scope line="610"/>
                </scope>
                <declaration name="laux" type="long" line="615"/>
                <declaration name="iMy" type="int" line="616"/>
                <declaration name="i" type="int" line="617"/>
                <declaration name="xqt" type="XQueryTree" line="618"/>
                <scope line="619">
                    <scope line="620">
                        <declaration name="nchildren" type="int" line="621"/>
                        <declaration name="children" type="long" line="622"/>
                        <scope line="623">
                            <scope line="625"/>
                            <scope line="628"/>
                            <scope line="632"/>
                        </scope>
                    </scope>
                    <declaration name="to_restack" type="long" line="639"/>
                    <scope line="644"/>
                </scope>
                <scope line="649"/>
            </method>
            <javadoc line="653">
                Get XID of closest to root window in a given window hierarchy.
                  FIXME: do not call it &quot;toplevel&quot; as it is misleading.
                  On error return 0.                
            </javadoc>
            <method name="getToplevelWindow" type="long" line="658">
                <params>
                    <param name="w" type="long"/>
                </params>
                <declaration name="wi" type="long" line="659"/>
                <scope line="660">
                    <declaration name="qt" type="XQueryTree" line="662"/>
                    <scope line="663">
                        <scope line="664"/>
                    </scope>
                    <scope line="670"/>
                </scope>
            </method>
            <method name="isDesktopWindow" type="boolean" line="677">
                <params>
                    <param name="wi" type="long"/>
                </params>
            </method>
            <method name="updateAlwaysOnTop" type="void" line="680"/>
            <method name="setAlwaysOnTop" type="void" line="684">
                <params>
                    <param name="alwaysOnTop" type="boolean"/>
                </params>
            </method>
            <method name="isLocationByPlatform" type="boolean" line="688"/>
            <method name="promoteDefaultPosition" type="void" line="691">
                <scope line="693">
                    <scope line="695">
                        <declaration name="bounds" type="Rectangle" line="696"/>
                        <declaration name="hints" type="XSizeHints" line="697"/>
                    </scope>
                    <scope line="700"/>
                </scope>
            </method>
            <method name="setVisible" type="void" line="705">
                <params>
                    <param name="vis" type="boolean"/>
                </params>
                <scope line="706">
                    <scope line="709"/>
                </scope>
                <scope line="715"/>
                <scope line="719">
                    <scope line="721">
                        <declaration name="unmap" type="XUnmapEvent" line="722"/>
                    </scope>
                    <scope line="730"/>
                </scope>
                <scope line="734"/>
            </method>
            <method name="suppressWmTakeFocus" type="void" line="739">
                <params>
                    <param name="doSuppress" type="boolean"/>
                </params>
            </method>
            <method name="isSimpleWindow" type="boolean" line="741"/>
            <method name="hasWarningWindow" type="boolean" line="744"/>
            <method name="getMenuBarHeight" type="int" line="747"/>
            <method name="updateChildrenSizes" type="void" line="750"/>
            <method name="repositionSecurityWarning" type="void" line="752">
                <scope line="753">
                    <declaration name="compAccessor" type="AWTAccessor.ComponentAccessor" line="754"/>
                    <declaration name="x" type="int" line="755"/>
                    <declaration name="y" type="int" line="756"/>
                    <declaration name="width" type="int" line="757"/>
                    <declaration name="height" type="int" line="758"/>
                </scope>
            </method>
            <method name="setMouseAbove" type="void" line="762">
                <params>
                    <param name="above" type="boolean"/>
                </params>
            </method>
            <method name="setFullScreenExclusiveModeState" type="void" line="766">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="updateSecurityWarningVisibility" type="void" line="770">
                <scope line="771"/>
                <scope line="774"/>
                <declaration name="show" type="boolean" line="777"/>
                <scope line="778">
                    <declaration name="state" type="int" line="779"/>
                    <scope line="780">
                        <scope line="781"/>
                        <scope line="784"/>
                    </scope>
                </scope>
            </method>
            <method name="isOverrideRedirect" type="boolean" line="791"/>
            <method name="isOLWMDecorBug" type="boolean" line="794"/>
            <method name="dispose" type="void" line="797">
                <scope line="799"/>
                <scope line="802"/>
                <scope line="805"/>
                <scope line="811">
                    <scope line="812">
                        <declaration name="owner" type="Window" line="813"/>
                    </scope>
                </scope>
            </method>
            <method name="isResizable" type="boolean" line="818"/>
            <method name="handleVisibilityEvent" type="void" line="821">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="ve" type="XVisibilityEvent" line="823"/>
            </method>
            <method name="handleRootPropertyNotify" type="void" line="827">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="ev" type="XPropertyEvent" line="828"/>
                <scope line="829">
                    <scope line="830"/>
                </scope>
            </method>
            <method name="removeStartupNotification" type="void" line="835">
                <scope line="836"/>
                <anonymous_class line="839">
                    <method name="run" type="String" line="840"/>
                </anonymous_class>
                <declaration name="desktopStartupId" type="String" line="839"/>
                <scope line="845"/>
                <declaration name="messageBuilder" type="StringBuilder" line="848"/>
                <scope line="850">
                    <scope line="851"/>
                </scope>
                <declaration name="message" type="byte[]" line="858"/>
                <scope line="859"/>
                <scope line="862"/>
                <declaration name="req" type="XClientMessageEvent" line="865"/>
                <scope line="867">
                    <declaration name="netStartupInfoBeginAtom" type="XAtom" line="868"/>
                    <declaration name="netStartupInfoAtom" type="XAtom" line="869"/>
                    <scope line="875">
                        <declaration name="msglen" type="int" line="876"/>
                        <declaration name="i" type="int" line="877"/>
                        <scope line="878"/>
                        <scope line="881"/>
                    </scope>
                </scope>
                <scope line="888">
                    <scope line="890"/>
                </scope>
            </method>
            <method name="handleMapNotifyEvent" type="void" line="895">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <scope line="899">
                    <scope line="902"/>
                    <scope line="905"/>
                </scope>
                <scope line="909"/>
                <scope line="916">
                    <scope line="917"/>
                </scope>
            </method>
            <method name="handleUnmapNotifyEvent" type="void" line="922">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <scope line="925">
                    <scope line="926"/>
                </scope>
            </method>
            <method name="shouldFocusOnMapNotify" type="boolean" line="931">
                <declaration name="res" type="boolean" line="932"/>
                <scope line="933"/>
                <scope line="936"/>
            </method>
            <method name="isWMStateNetHidden" type="boolean" line="942">
                <declaration name="protocol" type="XNETProtocol" line="943"/>
            </method>
            <method name="requestInitialFocus" type="void" line="946"/>
            <method name="addToplevelStateListener" type="void" line="949">
                <params>
                    <param name="l" type="ToplevelStateListener"/>
                </params>
            </method>
            <method name="removeToplevelStateListener" type="void" line="952">
                <params>
                    <param name="l" type="ToplevelStateListener"/>
                </params>
            </method>
            <javadoc line="955">
                Override this methods to get notifications when top-level window state changes. The state is
                  meant in terms of ICCCM: WithdrawnState, IconicState, NormalState                
            </javadoc>
            <method name="stateChanged" type="void" line="959">
                <params>
                    <param name="time" type="long"/>
                    <param name="oldState" type="int"/>
                    <param name="newState" type="int"/>
                </params>
                <scope line="961"/>
            </method>
            <method name="isWithdrawn" type="boolean" line="966"/>
            <method name="hasDecorations" type="boolean" line="969">
                <params>
                    <param name="decor" type="int"/>
                </params>
                <scope line="970"/>
                <scope line="973">
                    <declaration name="myDecor" type="int" line="974"/>
                    <declaration name="hasBits" type="boolean" line="975"/>
                </scope>
            </method>
            <method name="setReparented" type="void" line="980">
                <params>
                    <param name="newValue" type="boolean"/>
                </params>
                <scope line="983">
                    <scope line="984"/>
                </scope>
                <scope line="989"/>
            </method>
            <method name="collectJavaToplevels" type="Vector<XWindowPeer>" line="993">
                <declaration name="javaToplevels" type="Vector&lt;XWindowPeer&gt;" line="994"/>
                <declaration name="v" type="Vector&lt;Long&gt;" line="995"/>
                <declaration name="ge" type="X11GraphicsEnvironment" line="996"/>
                <declaration name="gds" type="GraphicsDevice[]" line="997"/>
                <scope line="998">
                    <scope line="999">
                        <declaration name="screen" type="int" line="1000"/>
                        <declaration name="rootWindow" type="long" line="1001"/>
                    </scope>
                </scope>
                <scope line="1005"/>
                <declaration name="windowsCount" type="int" line="1008"/>
                <scope line="1009">
                    <declaration name="win" type="long" line="1010"/>
                    <declaration name="qt" type="XQueryTree" line="1011"/>
                    <scope line="1012">
                        <scope line="1013">
                            <declaration name="nchildren" type="int" line="1014"/>
                            <declaration name="children" type="long" line="1015"/>
                            <scope line="1016">
                                <declaration name="child" type="long" line="1017"/>
                                <declaration name="childWindow" type="XBaseWindow" line="1018"/>
                                <scope line="1019"/>
                                <scope line="1022"/>
                                <scope line="1025">
                                    <declaration name="np" type="XWindowPeer" line="1026"/>
                                    <declaration name="k" type="int" line="1028"/>
                                    <declaration name="toCheck" type="XWindowPeer" line="1029"/>
                                    <scope line="1030">
                                        <declaration name="toCheckOwnerPeer" type="XWindowPeer" line="1031"/>
                                        <scope line="1032"/>
                                        <scope line="1036"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1045"/>
                </scope>
            </method>
            <method name="setModalBlocked" type="void" line="1051">
                <params>
                    <param name="d" type="Dialog"/>
                    <param name="blocked" type="boolean"/>
                </params>
            </method>
            <method name="setModalBlocked" type="void" line="1054">
                <params>
                    <param name="d" type="Dialog"/>
                    <param name="blocked" type="boolean"/>
                    <param name="javaToplevels" type="Vector<XWindowPeer>"/>
                </params>
                <scope line="1056">
                    <scope line="1057">
                        <declaration name="blockerPeer" type="XDialogPeer" line="1058"/>
                        <scope line="1059">
                            <scope line="1062"/>
                            <scope line="1065"/>
                        </scope>
                        <scope line="1069">
                            <scope line="1070"/>
                            <scope line="1074"/>
                            <scope line="1077"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1084"/>
            </method>
            <method name="setToplevelTransientFor" type="void" line="1088">
                <params>
                    <param name="window" type="XWindowPeer"/>
                    <param name="transientForWindow" type="XWindowPeer"/>
                    <param name="updateChain" type="boolean"/>
                    <param name="allStates" type="boolean"/>
                </params>
                <scope line="1089"/>
                <scope line="1092"/>
                <scope line="1096"/>
                <scope line="1099"/>
                <scope line="1102"/>
                <declaration name="bpw" type="long" line="1105"/>
                <scope line="1106"/>
                <declaration name="tpw" type="long" line="1109"/>
                <scope line="1110"/>
            </method>
            <method name="updateTransientFor" type="void" line="1116">
                <declaration name="state" type="int" line="1117"/>
                <declaration name="p" type="XWindowPeer" line="1118"/>
                <scope line="1119"/>
                <scope line="1122"/>
                <scope line="1125"/>
                <declaration name="n" type="XWindowPeer" line="1128"/>
                <scope line="1129"/>
                <scope line="1132"/>
            </method>
            <method name="removeTransientForHint" type="void" line="1136">
                <params>
                    <param name="window" type="XWindowPeer"/>
                </params>
                <declaration name="XA_WM_TRANSIENT_FOR" type="XAtom" line="1137"/>
                <declaration name="bpw" type="long" line="1138"/>
                <scope line="1139"/>
            </method>
            <method name="addToTransientFors" type="void" line="1145">
                <params>
                    <param name="blockerPeer" type="XDialogPeer"/>
                </params>
            </method>
            <method name="addToTransientFors" type="void" line="1148">
                <params>
                    <param name="blockerPeer" type="XDialogPeer"/>
                    <param name="javaToplevels" type="Vector<XWindowPeer>"/>
                </params>
                <declaration name="blockerChain" type="XWindowPeer" line="1149"/>
                <scope line="1150"/>
                <declaration name="thisChain" type="XWindowPeer" line="1153"/>
                <scope line="1154"/>
                <scope line="1157"/>
                <scope line="1160">
                    <scope line="1161"/>
                    <declaration name="mergedChain" type="XWindowPeer" line="1164"/>
                    <scope line="1165">
                        <declaration name="prevMergedChain" type="XWindowPeer" line="1166"/>
                        <scope line="1167">
                            <scope line="1168">
                                <scope line="1169"/>
                            </scope>
                            <scope line="1175"/>
                        </scope>
                        <scope line="1180"/>
                        <scope line="1184"/>
                        <scope line="1187"/>
                        <scope line="1190"/>
                        <scope line="1194"/>
                    </scope>
                </scope>
            </method>
            <method name="restoreTransientFor" type="void" line="1203">
                <params>
                    <param name="window" type="XWindowPeer"/>
                </params>
                <declaration name="ownerPeer" type="XWindowPeer" line="1204"/>
                <scope line="1205"/>
                <scope line="1208"/>
            </method>
            <method name="removeFromTransientFors" type="void" line="1212">
                <declaration name="thisChain" type="XWindowPeer" line="1213"/>
                <declaration name="otherChain" type="XWindowPeer" line="1214"/>
                <declaration name="thisChainBlockers" type="Set&lt;XWindowPeer&gt;" line="1215"/>
                <declaration name="chainToSplit" type="XWindowPeer" line="1217"/>
                <scope line="1218">
                    <declaration name="blocker" type="XWindowPeer" line="1219"/>
                    <scope line="1220"/>
                    <scope line="1225"/>
                </scope>
            </method>
            <method name="isModalBlocked" type="boolean" line="1238"/>
            <method name="getDecoratedOwner" type="Window" line="1241">
                <params>
                    <param name="window" type="Window"/>
                </params>
                <scope line="1242"/>
            </method>
            <method name="requestWindowFocus" type="boolean" line="1247">
                <params>
                    <param name="actualFocusedWindow" type="XWindowPeer"/>
                </params>
            </method>
            <method name="requestWindowFocus" type="boolean" line="1251"/>
            <method name="requestWindowFocus" type="boolean" line="1254">
                <params>
                    <param name="time" type="long"/>
                    <param name="timeProvided" type="boolean"/>
                </params>
                <declaration name="ownerWindow" type="Window" line="1256"/>
                <declaration name="focusedWindow" type="Window" line="1257"/>
                <declaration name="activeWindow" type="Window" line="1258"/>
                <scope line="1259"/>
                <scope line="1263"/>
                <declaration name="wpeer" type="XDecoratedPeer" line="1269"/>
                <scope line="1270"/>
            </method>
            <method name="setActualFocusedWindow" type="void" line="1277">
                <params>
                    <param name="actualFocusedWindow" type="XWindowPeer"/>
                </params>
            </method>
            <javadoc line="1279">
                Applies the current window type.                
            </javadoc>
            <method name="applyWindowType" type="void" line="1282">
                <declaration name="protocol" type="XNETProtocol" line="1283"/>
                <scope line="1284"/>
                <declaration name="typeAtom" type="XAtom" line="1287"/>
                <scope line="1299">
                    <declaration name="wtype" type="XAtomList" line="1300"/>
                </scope>
                <scope line="1304"/>
            </method>
            <method name="xSetVisible" type="void" line="1308">
                <params>
                    <param name="visible" type="boolean"/>
                </params>
                <scope line="1311">
                    <scope line="1313"/>
                    <scope line="1317"/>
                </scope>
                <scope line="1322"/>
            </method>
            <declaration name="dropTargetCount" type="int" line="1326"/>
            <method name="addDropTarget" type="void" line="1327">
                <scope line="1329">
                    <scope line="1330">
                        <declaration name="window" type="long" line="1331"/>
                        <scope line="1332"/>
                    </scope>
                </scope>
                <scope line="1338"/>
            </method>
            <method name="removeDropTarget" type="void" line="1342">
                <scope line="1344">
                    <scope line="1346">
                        <declaration name="window" type="long" line="1347"/>
                        <scope line="1348"/>
                    </scope>
                </scope>
                <scope line="1353"/>
            </method>
            <method name="addRootPropertyEventDispatcher" type="void" line="1357">
                <scope line="1358">
                    <anonymous_class line="1359">
                        <method name="dispatchEvent" type="void" line="1360">
                            <params>
                                <param name="ev" type="XEvent"/>
                            </params>
                            <scope line="1361"/>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <method name="removeRootPropertyEventDispatcher" type="void" line="1371">
                <scope line="1372"/>
            </method>
            <method name="updateFocusableWindowState" type="void" line="1377"/>
            <declaration name="XA_NET_WM_STATE" type="XAtom" line="1380"/>
            <declaration name="net_wm_state" type="XAtomList" line="1381"/>
            <method name="getNETWMState" type="XAtomList" line="1382">
                <scope line="1383"/>
            </method>
            <method name="setNETWMState" type="void" line="1388">
                <params>
                    <param name="state" type="XAtomList"/>
                </params>
                <scope line="1390"/>
            </method>
            <method name="getMWMHints" type="PropMwmHints" line="1394">
                <scope line="1395">
                    <scope line="1397"/>
                </scope>
            </method>
            <method name="setMWMHints" type="void" line="1403">
                <params>
                    <param name="hints" type="PropMwmHints"/>
                </params>
                <scope line="1405"/>
            </method>
            <method name="updateDropTarget" type="void" line="1409">
                <scope line="1411">
                    <scope line="1412">
                        <declaration name="window" type="long" line="1413"/>
                        <scope line="1414"/>
                    </scope>
                </scope>
                <scope line="1420"/>
            </method>
            <method name="setGrab" type="void" line="1424">
                <params>
                    <param name="grab" type="boolean"/>
                </params>
                <scope line="1426"/>
                <scope line="1430"/>
            </method>
            <method name="isGrabbed" type="boolean" line="1434"/>
            <method name="handleXCrossingEvent" type="void" line="1437">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="xce" type="XCrossingEvent" line="1438"/>
                <scope line="1439"/>
                <scope line="1442">
                    <declaration name="target" type="XBaseWindow" line="1443"/>
                    <scope line="1445"/>
                </scope>
            </method>
            <method name="handleMotionNotify" type="void" line="1452">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="xme" type="XMotionEvent" line="1453"/>
                <scope line="1454"/>
                <scope line="1457">
                    <declaration name="dragging" type="boolean" line="1458"/>
                    <declaration name="buttonsNumber" type="int" line="1459"/>
                    <scope line="1460">
                        <scope line="1461"/>
                    </scope>
                    <declaration name="target" type="XBaseWindow" line="1465"/>
                    <scope line="1466">
                        <declaration name="localCoord" type="Point" line="1469"/>
                    </scope>
                    <scope line="1474">
                        <scope line="1475"/>
                    </scope>
                    <scope line="1480"/>
                </scope>
            </method>
            <declaration name="pressTarget" type="XBaseWindow" line="1486"/>
            <method name="handleButtonPressRelease" type="void" line="1487">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="xbe" type="XButtonEvent" line="1488"/>
                <scope line="1489"/>
                <scope line="1492"/>
                <scope line="1495">
                    <declaration name="target" type="XBaseWindow" line="1496"/>
                    <scope line="1497">
                        <scope line="1499"/>
                        <scope line="1502">
                            <declaration name="localCoord" type="Point" line="1505"/>
                        </scope>
                        <scope line="1510"/>
                    </scope>
                    <scope line="1515">
                        <scope line="1516">
                            <scope line="1517">
                                <scope line="1518"/>
                            </scope>
                            <declaration name="toplevel" type="XWindowPeer" line="1524"/>
                            <scope line="1525">
                                <declaration name="w" type="Window" line="1526"/>
                                <scope line="1527">
                                    <scope line="1529"/>
                                </scope>
                                <scope line="1533"/>
                            </scope>
                            <scope line="1538"/>
                        </scope>
                        <scope line="1544"/>
                    </scope>
                </scope>
            </method>
            <method name="print" type="void" line="1553">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="shape" type="Shape" line="1554"/>
                <scope line="1555"/>
            </method>
            <method name="setOpacity" type="void" line="1560">
                <params>
                    <param name="opacity" type="float"/>
                </params>
                <declaration name="maxOpacity" type="long" line="1561"/>
                <declaration name="iOpacity" type="long" line="1562"/>
                <scope line="1563"/>
                <scope line="1566"/>
                <declaration name="netWmWindowOpacityAtom" type="XAtom" line="1569"/>
                <scope line="1570"/>
                <scope line="1573"/>
            </method>
            <method name="setOpaque" type="void" line="1577">
                <params>
                    <param name="isOpaque" type="boolean"/>
                </params>
            </method>
            <method name="updateWindow" type="void" line="1579"/>
        </class>
    </source>