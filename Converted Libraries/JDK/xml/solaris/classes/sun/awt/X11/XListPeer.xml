<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.peer"/>
        <import package="java.util.Vector"/>
        <import package="java.awt.geom"/>
        <import package="java.awt.image"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="XListPeer" line="9">
            <extends class="XComponentPeer"/>
            <implements interface="ListPeer"/>
            <implements interface="XScrollbarClient"/>
            <declaration name="log" type="PlatformLogger" line="10"/>
            <declaration name="MARGIN" type="int" line="11"/>
            <declaration name="SPACE" type="int" line="12"/>
            <declaration name="SCROLLBAR_AREA" type="int" line="13"/>
            <declaration name="SCROLLBAR_WIDTH" type="int" line="14"/>
            <declaration name="NONE" type="int" line="15"/>
            <declaration name="WINDOW" type="int" line="16"/>
            <declaration name="VERSCROLLBAR" type="int" line="17"/>
            <declaration name="HORSCROLLBAR" type="int" line="18"/>
            <declaration name="DEFAULT_VISIBLE_ROWS" type="int" line="19"/>
            <declaration name="HORIZ_SCROLL_AMT" type="int" line="20"/>
            <declaration name="PAINT_VSCROLL" type="int" line="21"/>
            <declaration name="PAINT_HSCROLL" type="int" line="22"/>
            <declaration name="PAINT_ITEMS" type="int" line="23"/>
            <declaration name="PAINT_FOCUS" type="int" line="24"/>
            <declaration name="PAINT_BACKGROUND" type="int" line="25"/>
            <declaration name="PAINT_HIDEFOCUS" type="int" line="26"/>
            <declaration name="PAINT_ALL" type="int" line="27"/>
            <declaration name="COPY_AREA" type="int" line="28"/>
            <declaration name="vsb" type="XVerticalScrollbar" line="29"/>
            <declaration name="hsb" type="XHorizontalScrollbar" line="30"/>
            <declaration name="painter" type="ListPainter" line="31"/>
            <declaration name="items" type="Vector" line="32"/>
            <declaration name="multipleSelections" type="boolean" line="33"/>
            <declaration name="active" type="int" line="34"/>
            <declaration name="selected" type="int" line="35"/>
            <declaration name="fontHeight" type="int" line="36"/>
            <declaration name="fontAscent" type="int" line="37"/>
            <declaration name="fontLeading" type="int" line="38"/>
            <declaration name="currentIndex" type="int" line="39"/>
            <declaration name="eventIndex" type="int" line="40"/>
            <declaration name="eventType" type="int" line="41"/>
            <declaration name="focusIndex" type="int" line="42"/>
            <declaration name="maxLength" type="int" line="43"/>
            <declaration name="vsbVis" type="boolean" line="44"/>
            <declaration name="hsbVis" type="boolean" line="45"/>
            <declaration name="listWidth" type="int" line="46"/>
            <declaration name="listHeight" type="int" line="47"/>
            <declaration name="firstTimeVisibleIndex" type="int" line="48"/>
            <declaration name="bgColorSet" type="boolean" line="49"/>
            <declaration name="fgColorSet" type="boolean" line="50"/>
            <declaration name="mouseDraggedOutHorizontally" type="boolean" line="51"/>
            <declaration name="mouseDraggedOutVertically" type="boolean" line="52"/>
            <declaration name="isScrollBarOriginated" type="boolean" line="53"/>
            <declaration name="isMousePressed" type="boolean" line="54"/>
            <javadoc line="55">
                Create a list                
            </javadoc>
            <method name="XListPeer" type="constructor" line="58">
                <params>
                    <param name="target" type="List"/>
                </params>
            </method>
            <javadoc line="61">
                Overridden from XWindow                
            </javadoc>
            <method name="preInit" type="void" line="64">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
            </method>
            <method name="postInit" type="void" line="73">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
                <declaration name="l" type="List" line="76"/>
                <declaration name="stop" type="int" line="77"/>
                <scope line="78"/>
                <declaration name="index" type="int" line="81"/>
                <scope line="82"/>
                <declaration name="sel" type="int" line="86"/>
                <scope line="88"/>
                <scope line="91"/>
                <scope line="94"/>
            </method>
            <javadoc line="99">
                add Vertical Scrollbar                
            </javadoc>
            <method name="createVerScrollbar" type="void" line="102"/>
            <javadoc line="106">
                add Horizontal scrollbar                
            </javadoc>
            <method name="createHorScrollbar" type="void" line="109"/>
            <method name="add" type="void" line="113">
                <params>
                    <param name="item" type="String"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="removeAll" type="void" line="116"/>
            <method name="setMultipleMode" type="void" line="120">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <method name="getPreferredSize" type="Dimension" line="123">
                <params>
                    <param name="rows" type="int"/>
                </params>
            </method>
            <method name="getMinimumSize" type="Dimension" line="126">
                <params>
                    <param name="rows" type="int"/>
                </params>
            </method>
            <javadoc line="129">
                Minimum size.                
            </javadoc>
            <method name="minimumSize" type="Dimension" line="132"/>
            <javadoc line="135">
                return the preferredSize                
            </javadoc>
            <method name="preferredSize" type="Dimension" line="138">
                <params>
                    <param name="v" type="int"/>
                </params>
            </method>
            <javadoc line="141">
                return the minimumsize                
            </javadoc>
            <method name="minimumSize" type="Dimension" line="144">
                <params>
                    <param name="v" type="int"/>
                </params>
                <declaration name="fm" type="FontMetrics" line="145"/>
            </method>
            <javadoc line="149">
                Calculate font metrics                
            </javadoc>
            <method name="initFontMetrics" type="void" line="152">
                <declaration name="fm" type="FontMetrics" line="153"/>
            </method>
            <javadoc line="158">
                return the length of the largest item in the list                
            </javadoc>
            <method name="maxLength" type="int" line="161">
                <declaration name="fm" type="FontMetrics" line="162"/>
                <declaration name="m" type="int" line="163"/>
                <declaration name="end" type="int" line="164"/>
                <scope line="165">
                    <declaration name="l" type="int" line="166"/>
                </scope>
            </method>
            <javadoc line="171">
                Calculates the width of item&apos;s label                
            </javadoc>
            <method name="getItemWidth" type="int" line="174">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="fm" type="FontMetrics" line="175"/>
            </method>
            <javadoc line="178">
                return the on-screen width of the given string &quot;str&quot;                
            </javadoc>
            <method name="stringLength" type="int" line="181">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="fm" type="FontMetrics" line="182"/>
            </method>
            <method name="setForeground" type="void" line="185">
                <params>
                    <param name="c" type="Color"/>
                </params>
            </method>
            <method name="setBackground" type="void" line="189">
                <params>
                    <param name="c" type="Color"/>
                </params>
            </method>
            <javadoc line="193">
                Returns the color that should be used to paint the background of
                  the list of items.  Note that this is not the same as
                  target.getBackground() which is the color of the scrollbars, and the
                  lower-right corner of the Component when the scrollbars are displayed.                
            </javadoc>
            <method name="getListBackground" type="Color" line="199">
                <params>
                    <param name="colors" type="Color[]"/>
                </params>
                <scope line="200"/>
                <scope line="203"/>
            </method>
            <javadoc line="207">
                Returns the color that should be used to paint the list item text.                
            </javadoc>
            <method name="getListForeground" type="Color" line="210">
                <params>
                    <param name="colors" type="Color[]"/>
                </params>
                <scope line="211"/>
                <scope line="214"/>
            </method>
            <method name="getVScrollBarRec" type="Rectangle" line="218"/>
            <method name="getHScrollBarRec" type="Rectangle" line="221"/>
            <method name="getFirstVisibleItem" type="int" line="224">
                <scope line="225"/>
                <scope line="228"/>
            </method>
            <method name="getLastVisibleItem" type="int" line="232">
                <scope line="233"/>
                <scope line="236"/>
            </method>
            <method name="repaintScrollbarRequest" type="void" line="240">
                <params>
                    <param name="scrollbar" type="XScrollbar"/>
                </params>
                <declaration name="g" type="Graphics" line="241"/>
                <scope line="242"/>
                <scope line="245"/>
            </method>
            <javadoc line="249">
                Overridden for performance                
            </javadoc>
            <method name="repaint" type="void" line="252"/>
            <method name="repaint" type="void" line="255">
                <params>
                    <param name="options" type="int"/>
                </params>
            </method>
            <method name="repaint" type="void" line="258">
                <params>
                    <param name="firstItem" type="int"/>
                    <param name="lastItem" type="int"/>
                    <param name="options" type="int"/>
                </params>
            </method>
            <javadoc line="261">
                In most cases the entire area of the component doesn&apos;t have
                  to be repainted. The method repaints the particular areas of
                  the component. The areas to repaint is specified by the option
                  parameter. The possible values of the option parameter are:
                  PAINT_VSCROLL, PAINT_HSCROLL, PAINT_ITEMS, PAINT_FOCUS,
                  PAINT_HIDEFOCUS, PAINT_BACKGROUND, PAINT_ALL, COPY_AREA.
                  Note that the COPY_AREA value initiates copy of a source area
                  of the component by a distance by means of the copyArea method
                  of the Graphics class.                
                <param>
                    firstItem the position of the first item of the range to repaint                    
                </param>
                <param>
                    lastItem the position of the last item of the range to repaint                    
                </param>
                <param>
                    options specifies the particular area of the component to repaint                    
                </param>
                <param>
                    source the area of the component to copy                    
                </param>
                <param>
                    distance the distance to copy the source area                    
                </param>
            </javadoc>
            <method name="repaint" type="void" line="277">
                <params>
                    <param name="firstItem" type="int"/>
                    <param name="lastItem" type="int"/>
                    <param name="options" type="int"/>
                    <param name="source" type="Rectangle"/>
                    <param name="distance" type="Point"/>
                </params>
                <declaration name="g" type="Graphics" line="278"/>
                <scope line="279"/>
                <scope line="282"/>
            </method>
            <method name="paint" type="void" line="286">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <method name="isFocusable" type="boolean" line="289"/>
            <method name="focusGained" type="void" line="292">
                <params>
                    <param name="e" type="FocusEvent"/>
                </params>
            </method>
            <method name="focusLost" type="void" line="296">
                <params>
                    <param name="e" type="FocusEvent"/>
                </params>
            </method>
            <javadoc line="300">
                Layout the sub-components of the List - that is, the scrollbars and the
                  list of items.                
            </javadoc>
            <method name="layout" type="void" line="304">
                <declaration name="vis" type="int" line="305"/>
                <declaration name="vsbWasVisible" type="boolean" line="306"/>
                <declaration name="origVSBVal" type="int" line="307"/>
                <scope line="320"/>
                <scope line="327"/>
            </method>
            <method name="getItemWidth" type="int" line="339"/>
            <method name="getItemHeight" type="int" line="342"/>
            <method name="getItemX" type="int" line="345"/>
            <method name="getItemY" type="int" line="348">
                <params>
                    <param name="item" type="int"/>
                </params>
            </method>
            <method name="getFocusIndex" type="int" line="351"/>
            <method name="setFocusIndex" type="void" line="354">
                <params>
                    <param name="value" type="int"/>
                </params>
            </method>
            <javadoc line="357">
                Update and return the focus rectangle.
                  Focus is around the focused item, if it is visible, or
                  around the border of the list if the focused item is scrolled off the top
                  or bottom of the list.                
            </javadoc>
            <method name="getFocusRect" type="Rectangle" line="363">
                <declaration name="focusRect" type="Rectangle" line="364"/>
                <scope line="367"/>
                <scope line="371"/>
            </method>
            <method name="handleConfigureNotifyEvent" type="void" line="378">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
            </method>
            <method name="handlesWheelScrolling" type="boolean" line="382"/>
            <method name="handleJavaMouseEvent" type="void" line="385">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
                <declaration name="i" type="int" line="387"/>
            </method>
            <method name="handleJavaMouseWheelEvent" type="void" line="400">
                <params>
                    <param name="e" type="MouseWheelEvent"/>
                </params>
                <scope line="401"/>
            </method>
            <method name="mousePressed" type="void" line="405">
                <params>
                    <param name="mouseEvent" type="MouseEvent"/>
                </params>
                <scope line="407">
                    <scope line="408">
                        <declaration name="i" type="int" line="411"/>
                        <scope line="412">
                            <scope line="413">
                                <scope line="414"/>
                                <scope line="419"/>
                            </scope>
                            <scope line="425"/>
                        </scope>
                        <scope line="433"/>
                    </scope>
                    <scope line="437"/>
                    <scope line="442"/>
                </scope>
            </method>
            <method name="mouseReleased" type="void" line="450">
                <params>
                    <param name="mouseEvent" type="MouseEvent"/>
                </params>
            </method>
            <method name="mouseDragged" type="void" line="478">
                <params>
                    <param name="mouseEvent" type="MouseEvent"/>
                </params>
                <scope line="479">
                    <scope line="480"/>
                    <scope line="483"/>
                    <scope line="486">
                        <declaration name="i" type="int" line="487"/>
                        <scope line="488">
                            <scope line="489">
                                <scope line="490"/>
                            </scope>
                        </scope>
                        <scope line="496">
                            <scope line="498">
                                <declaration name="oldSel" type="int" line="499"/>
                            </scope>
                        </scope>
                        <scope line="505"/>
                    </scope>
                </scope>
            </method>
            <method name="trackMouseDraggedScroll" type="void" line="512">
                <params>
                    <param name="mouseEvent" type="MouseEvent"/>
                </params>
                <scope line="513"/>
                <scope line="516"/>
                <scope line="519">
                    <scope line="520"/>
                </scope>
                <scope line="525">
                    <scope line="526"/>
                </scope>
                <scope line="531"/>
                <scope line="534"/>
                <scope line="537">
                    <scope line="538"/>
                </scope>
                <scope line="543">
                    <scope line="544"/>
                </scope>
            </method>
            <method name="trackMouseReleasedScroll" type="void" line="550">
                <scope line="551"/>
                <scope line="555"/>
            </method>
            <method name="handleJavaKeyEvent" type="void" line="560">
                <params>
                    <param name="e" type="KeyEvent"/>
                </params>
                <scope line="563"/>
            </method>
            <method name="keyPressed" type="void" line="569">
                <params>
                    <param name="e" type="KeyEvent"/>
                </params>
                <declaration name="keyCode" type="int" line="570"/>
                <scope line="575">
                    <scope line="578"/>
                    <scope line="582"/>
                    <scope line="585"/>
                </scope>
                <scope line="592">
                    <scope line="595"/>
                    <scope line="599"/>
                    <scope line="602"/>
                </scope>
                <scope line="608">
                    <declaration name="previousValue" type="int" line="609"/>
                    <declaration name="currentValue" type="int" line="611"/>
                    <scope line="612">
                        <scope line="614"/>
                    </scope>
                </scope>
                <scope line="623">
                    <declaration name="previousValue" type="int" line="624"/>
                    <declaration name="currentValue" type="int" line="626"/>
                    <scope line="627">
                        <scope line="629"/>
                    </scope>
                </scope>
                <scope line="639"/>
                <scope line="646"/>
                <scope line="653"/>
                <scope line="657"/>
                <scope line="665"/>
                <scope line="669"/>
                <scope line="676"/>
                <declaration name="isSelected" type="boolean" line="679"/>
                <scope line="680"/>
                <scope line="684"/>
                <scope line="690"/>
            </method>
            <javadoc line="696">
                return value from the scrollbar                
            </javadoc>
            <method name="notifyValue" type="void" line="699">
                <params>
                    <param name="obj" type="XScrollbar"/>
                    <param name="type" type="int"/>
                    <param name="v" type="int"/>
                    <param name="isAdjusting" type="boolean"/>
                </params>
                <declaration name="value" type="int" line="701"/>
                <scope line="702">
                    <declaration name="oldSel" type="int" line="704"/>
                    <declaration name="newSel" type="int" line="705"/>
                    <scope line="706"/>
                </scope>
                <scope line="714"/>
            </method>
            <javadoc line="718">
                deselect all items in List                
            </javadoc>
            <method name="deselectAllItems" type="void" line="721"/>
            <javadoc line="725">
                set multiple selections                
            </javadoc>
            <method name="setMultipleSelections" type="void" line="728">
                <params>
                    <param name="v" type="boolean"/>
                </params>
                <scope line="729">
                    <scope line="730">
                        <declaration name="selPos" type="int" line="731"/>
                        <scope line="733"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="740">
                add an item
                  if the index of the item is &lt; 0 or &gt;= than items.size()
                  then add the item to the end of the list                
            </javadoc>
            <method name="addItem" type="void" line="745">
                <params>
                    <param name="item" type="String"/>
                    <param name="i" type="int"/>
                </params>
                <declaration name="oldMaxLength" type="int" line="746"/>
                <declaration name="hsbWasVis" type="boolean" line="747"/>
                <declaration name="vsbWasVis" type="boolean" line="748"/>
                <declaration name="addedIndex" type="int" line="749"/>
                <scope line="750"/>
                <scope line="754"/>
                <scope line="759">
                    <scope line="762">
                        <scope line="763"/>
                    </scope>
                </scope>
                <declaration name="repaintItems" type="boolean" line="769"/>
                <declaration name="options" type="int" line="772"/>
                <scope line="773"/>
                <scope line="776"/>
            </method>
            <javadoc line="782">
                delete items starting with s (start position) to e (end position) including s and e
                  if s &lt; 0 then s = 0
                  if e &gt;= items.size() then e = items.size() - 1                
            </javadoc>
            <method name="delItems" type="void" line="787">
                <params>
                    <param name="s" type="int"/>
                    <param name="e" type="int"/>
                </params>
                <declaration name="hsbWasVisible" type="boolean" line="788"/>
                <declaration name="vsbWasVisible" type="boolean" line="789"/>
                <declaration name="oldLastDisplayed" type="int" line="790"/>
                <scope line="793"/>
                <scope line="796">
                    <declaration name="tmp" type="int" line="797"/>
                </scope>
                <scope line="801"/>
                <scope line="804"/>
                <declaration name="repaintNeeded" type="boolean" line="807"/>
                <scope line="808">
                    <declaration name="j" type="int" line="810"/>
                    <scope line="811">
                        <declaration name="newsel" type="int" line="812"/>
                    </scope>
                </scope>
                <declaration name="diff" type="int" line="818"/>
                <scope line="819">
                    <scope line="820"/>
                </scope>
                <declaration name="options" type="int" line="824"/>
                <scope line="825"/>
                <scope line="829">
                    <declaration name="focusBound" type="int" line="830"/>
                </scope>
                <scope line="835">
                    <scope line="836"/>
                    <scope line="839"/>
                </scope>
                <declaration name="oldMaxLength" type="int" line="843"/>
                <scope line="845"/>
                <scope line="850"/>
            </method>
            <javadoc line="855">
                ListPeer method                
            </javadoc>
            <method name="select" type="void" line="858">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="863">
                select the index
                  redraw the list to the screen                
            </javadoc>
            <method name="selectItem" type="void" line="867">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="869"/>
                <scope line="872">
                    <scope line="873"/>
                    <scope line="877">
                        <declaration name="oldSel" type="int" line="878"/>
                        <scope line="880"/>
                    </scope>
                </scope>
                <scope line="885">
                    <declaration name="newsel" type="int" line="886"/>
                    <declaration name="i" type="int" line="887"/>
                    <scope line="888"/>
                </scope>
                <scope line="896"/>
            </method>
            <javadoc line="900">
                ListPeer method
                  focusedIndex isn&apos;t updated according to native (Window, Motif) behaviour                
            </javadoc>
            <method name="deselect" type="void" line="904">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="907">
                deselect the index
                  redraw the list to the screen                
            </javadoc>
            <method name="deselectItem" type="void" line="911">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="912"/>
                <scope line="915"/>
                <scope line="918">
                    <declaration name="i" type="int" line="919"/>
                    <declaration name="newsel" type="int" line="920"/>
                </scope>
                <scope line="926"/>
            </method>
            <javadoc line="930">
                ensure that the given index is visible, scrolling the List
                  if necessary, or doing nothing if the item is already visible.
                  The List must be repainted for changes to be visible.                
            </javadoc>
            <method name="makeVisible" type="void" line="935">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="936"/>
                <scope line="939">
                    <scope line="940"/>
                    <scope line="943">
                        <declaration name="val" type="int" line="944"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="949">
                clear                
            </javadoc>
            <method name="clear" type="void" line="952"/>
            <javadoc line="962">
                return the selected indexes                
            </javadoc>
            <method name="getSelectedIndexes" type="int[]" line="965"/>
            <javadoc line="968">
                return the y value of the given index &quot;i&quot;.
                  the y value represents the top of the text
                  NOTE: index can be larger than items.size as long
                  as it can fit the window                
            </javadoc>
            <method name="index2y" type="int" line="974">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="h" type="int" line="975"/>
            </method>
            <method name="validY" type="boolean" line="978">
                <params>
                    <param name="y" type="int"/>
                </params>
                <declaration name="shown" type="int" line="979"/>
                <declaration name="lastY" type="int" line="980"/>
                <scope line="981"/>
                <scope line="984"/>
            </method>
            <javadoc line="989">
                return the position of the index in the selected array
                  if the index isn&apos;t in the array selected return -1;                
            </javadoc>
            <method name="posInSel" type="int" line="993">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="994">
                    <scope line="995"/>
                </scope>
            </method>
            <method name="isIndexDisplayed" type="boolean" line="1001">
                <params>
                    <param name="idx" type="int"/>
                </params>
                <declaration name="lastDisplayed" type="int" line="1002"/>
            </method>
            <javadoc line="1005">
                returns index of last item displayed in the List                
            </javadoc>
            <method name="lastItemDisplayed" type="int" line="1008">
                <declaration name="n" type="int" line="1009"/>
            </method>
            <javadoc line="1012">
                returns whether the given index is currently scrolled off the top or
                  bottom of the List.                
            </javadoc>
            <method name="isItemHidden" type="boolean" line="1016">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="1019">
                returns the width of the list portion of the component (accounts for
                  presence of vertical scrollbar)                
            </javadoc>
            <method name="getListWidth" type="int" line="1023"/>
            <javadoc line="1026">
                returns number of  items actually displayed in the List                
            </javadoc>
            <method name="itemsDisplayed" type="int" line="1029"/>
            <javadoc line="1032">
                scrollVertical
                  y is the number of items to scroll                
            </javadoc>
            <method name="scrollVertical" type="void" line="1036">
                <params>
                    <param name="y" type="int"/>
                </params>
                <declaration name="itemsInWin" type="int" line="1038"/>
                <declaration name="h" type="int" line="1039"/>
                <declaration name="pixelsToScroll" type="int" line="1040"/>
                <scope line="1041"/>
                <declaration name="source" type="Rectangle" line="1045"/>
                <declaration name="distance" type="Point" line="1046"/>
                <declaration name="firstItem" type="int" line="1047"/>
                <declaration name="options" type="int" line="1048"/>
                <scope line="1049">
                    <scope line="1050"/>
                </scope>
                <scope line="1058">
                    <scope line="1059"/>
                </scope>
            </method>
            <javadoc line="1069">
                scrollHorizontal
                  x is the number of pixels to scroll                
            </javadoc>
            <method name="scrollHorizontal" type="void" line="1073">
                <params>
                    <param name="x" type="int"/>
                </params>
                <declaration name="w" type="int" line="1075"/>
                <declaration name="h" type="int" line="1077"/>
                <declaration name="options" type="int" line="1079"/>
                <declaration name="source" type="Rectangle" line="1080"/>
                <declaration name="distance" type="Point" line="1081"/>
                <scope line="1082"/>
                <scope line="1087"/>
            </method>
            <javadoc line="1094">
                return the index                
            </javadoc>
            <method name="y2index" type="int" line="1097">
                <params>
                    <param name="y" type="int"/>
                </params>
                <scope line="1098"/>
                <declaration name="i" type="int" line="1101"/>
                <declaration name="last" type="int" line="1102"/>
                <scope line="1103"/>
            </method>
            <javadoc line="1108">
                is the index &quot;index&quot; selected                
            </javadoc>
            <method name="isSelected" type="boolean" line="1111">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="1112"/>
                <scope line="1115">
                    <scope line="1116"/>
                </scope>
            </method>
            <javadoc line="1122">
                return the number of items that can fit
                  in the current window                
            </javadoc>
            <method name="itemsInWindow" type="int" line="1126">
                <params>
                    <param name="scrollbarVisible" type="boolean"/>
                </params>
                <declaration name="h" type="int" line="1127"/>
                <scope line="1128"/>
                <scope line="1131"/>
            </method>
            <method name="itemsInWindow" type="int" line="1136"/>
            <javadoc line="1139">
                return true if the x and y position is in the horizontal scrollbar                
            </javadoc>
            <method name="inHorizontalScrollbar" type="boolean" line="1142">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="w" type="int" line="1143"/>
                <declaration name="h" type="int" line="1144"/>
            </method>
            <javadoc line="1147">
                return true if the x and y position is in the verticalscrollbar                
            </javadoc>
            <method name="inVerticalScrollbar" type="boolean" line="1150">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="w" type="int" line="1151"/>
                <declaration name="h" type="int" line="1152"/>
            </method>
            <javadoc line="1155">
                return true if the x and y position is in the window                
            </javadoc>
            <method name="inWindow" type="boolean" line="1158">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="w" type="int" line="1159"/>
                <declaration name="h" type="int" line="1160"/>
            </method>
            <javadoc line="1163">
                return true if vertical scrollbar is visible and false otherwise;
                  hsbVisible is the visibility of the horizontal scrollbar                
            </javadoc>
            <method name="vsbIsVisible" type="boolean" line="1167">
                <params>
                    <param name="hsbVisible" type="boolean"/>
                </params>
            </method>
            <javadoc line="1170">
                return true if horizontal scrollbar is visible and false otherwise;
                  vsbVisible is the visibility of the vertical scrollbar                
            </javadoc>
            <method name="hsbIsVisible" type="boolean" line="1174">
                <params>
                    <param name="vsbVisible" type="boolean"/>
                </params>
                <declaration name="w" type="int" line="1175"/>
            </method>
            <method name="prePostEvent" type="boolean" line="1178">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="1179"/>
            </method>
            <method name="prePostMouseEvent" type="boolean" line="1184">
                <params>
                    <param name="me" type="MouseEvent"/>
                </params>
                <scope line="1185"/>
                <declaration name="eventId" type="int" line="1188"/>
                <scope line="1189"/>
                <scope line="1191">
                    <scope line="1192"/>
                </scope>
                <scope line="1198">
                    <scope line="1199"/>
                </scope>
            </method>
            <method name="handleJavaMouseEventOnEDT" type="void" line="1207">
                <params>
                    <param name="me" type="MouseEvent"/>
                </params>
                <anonymous_class line="1208">
                    <method name="run" type="void" line="1209"/>
                </anonymous_class>
            </method>
            <method name="setFont" type="void" line="1215">
                <params>
                    <param name="f" type="Font"/>
                </params>
            </method>
            <class name="ListPainter" line="1221">
                <javadoc line="1221">
                    Sometimes painter is called on Toolkit thread, so the lock sequence is:
                      awtLock -&gt; Painter -&gt; awtLock
                      Sometimes it is called on other threads:
                      Painter -&gt; awtLock
                      Since we can&apos;t guarantee the sequence, use awtLock.                    
                </javadoc>
                <declaration name="buffer" type="VolatileImage" line="1229"/>
                <declaration name="colors" type="Color[]" line="1230"/>
                <method name="getListForeground" type="Color" line="1231">
                    <scope line="1232"/>
                    <scope line="1235"/>
                </method>
                <method name="getListBackground" type="Color" line="1239">
                    <scope line="1240"/>
                    <scope line="1243"/>
                </method>
                <method name="getDisabledColor" type="Color" line="1247">
                    <declaration name="backgroundColor" type="Color" line="1248"/>
                    <declaration name="foregroundColor" type="Color" line="1249"/>
                </method>
                <method name="createBuffer" type="boolean" line="1252">
                    <declaration name="localBuffer" type="VolatileImage" line="1253"/>
                    <scope line="1255"/>
                    <scope line="1258"/>
                    <scope line="1261"/>
                    <scope line="1266">
                        <scope line="1267"/>
                    </scope>
                    <scope line="1272"/>
                </method>
                <method name="invalidate" type="void" line="1277">
                    <scope line="1279">
                        <scope line="1280"/>
                    </scope>
                    <scope line="1285"/>
                </method>
                <method name="paint" type="void" line="1289">
                    <params>
                        <param name="listG" type="Graphics"/>
                        <param name="firstItem" type="int"/>
                        <param name="lastItem" type="int"/>
                        <param name="options" type="int"/>
                    </params>
                </method>
                <method name="paint" type="void" line="1292">
                    <params>
                        <param name="listG" type="Graphics"/>
                        <param name="firstItem" type="int"/>
                        <param name="lastItem" type="int"/>
                        <param name="options" type="int"/>
                        <param name="source" type="Rectangle"/>
                        <param name="distance" type="Point"/>
                    </params>
                    <scope line="1294">
                        <declaration name="t" type="int" line="1295"/>
                    </scope>
                    <scope line="1299"/>
                    <declaration name="localBuffer" type="VolatileImage" line="1303"/>
                    <scope line="1304">
                        <scope line="1306">
                            <scope line="1307"/>
                        </scope>
                        <scope line="1312"/>
                        <declaration name="g" type="Graphics" line="1323"/>
                        <scope line="1324">
                            <scope line="1326"/>
                            <scope line="1329"/>
                            <scope line="1332"/>
                            <scope line="1337"/>
                            <scope line="1340"/>
                            <scope line="1344"/>
                            <scope line="1348"/>
                        </scope>
                        <scope line="1352"/>
                    </scope>
                </method>
                <method name="paintBackground" type="void" line="1359">
                    <params>
                        <param name="g" type="Graphics"/>
                    </params>
                </method>
                <method name="paintItems" type="void" line="1366">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="firstItem" type="int"/>
                        <param name="lastItem" type="int"/>
                        <param name="options" type="int"/>
                    </params>
                    <scope line="1369">
                        <declaration name="t" type="int" line="1370"/>
                    </scope>
                    <scope line="1377"/>
                </method>
                <method name="paintItem" type="void" line="1381">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="1383">
                        <declaration name="clip" type="Shape" line="1384"/>
                        <declaration name="w" type="int" line="1385"/>
                        <declaration name="h" type="int" line="1386"/>
                        <declaration name="y" type="int" line="1387"/>
                        <declaration name="x" type="int" line="1388"/>
                        <scope line="1391"/>
                        <scope line="1395"/>
                        <scope line="1400">
                            <scope line="1401"/>
                            <scope line="1404"/>
                            <scope line="1407"/>
                            <declaration name="str" type="String" line="1410"/>
                        </scope>
                        <scope line="1413"/>
                    </scope>
                </method>
                <method name="paintScrollBar" type="void" line="1421">
                    <params>
                        <param name="scr" type="XScrollbar"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                        <param name="paintAll" type="boolean"/>
                    </params>
                </method>
                <javadoc line="1427">
                    Paint the horizontal scrollbar to the screen                    
                    <param>
                        g the graphics context to draw into                        
                    </param>
                    <param>
                        colors the colors used to draw the scrollbar                        
                    </param>
                    <param>
                        paintAll paint the whole scrollbar if true, just the thumb if false                        
                    </param>
                </javadoc>
                <method name="paintHorScrollbar" type="void" line="1433">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="paintAll" type="boolean"/>
                    </params>
                    <declaration name="w" type="int" line="1434"/>
                </method>
                <javadoc line="1437">
                    Paint the vertical scrollbar to the screen                    
                    <param>
                        g the graphics context to draw into                        
                    </param>
                    <param>
                        colors the colors used to draw the scrollbar                        
                    </param>
                    <param>
                        paintAll paint the whole scrollbar if true, just the thumb if false                        
                    </param>
                </javadoc>
                <method name="paintVerScrollbar" type="void" line="1443">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="paintAll" type="boolean"/>
                    </params>
                    <declaration name="h" type="int" line="1444"/>
                </method>
                <declaration name="prevFocusRect" type="Rectangle" line="1447"/>
                <method name="paintFocus" type="void" line="1448">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="options" type="int"/>
                    </params>
                    <declaration name="paintFocus" type="boolean" line="1449"/>
                    <scope line="1450"/>
                    <declaration name="clip" type="Shape" line="1454"/>
                    <declaration name="rect" type="Rectangle" line="1457"/>
                    <scope line="1458"/>
                    <scope line="1464"/>
                </method>
            </class>
        </class>
    </source>