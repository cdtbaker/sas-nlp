<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt"/>
        <import package="java.awt.dnd.DropTarget"/>
        <import package="java.awt.dnd.DropTargetListener"/>
        <import package="java.awt.event"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="java.awt.image.ImageProducer"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="java.awt.peer"/>
        <import package="sun.awt"/>
        <import package="sun.awt.motif.X11FontMetrics"/>
        <import package="java.lang.reflect"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <import package="java.util"/>
        <import package="sun.awt.X11.XEmbedHelper"/>
        <import package="java.security.AccessController"/>
        <import package="sun.security.action.GetBooleanAction"/>
        <class name="XEmbedCanvasPeer" line="47">
            <extends class="XCanvasPeer"/>
            <comment line="51">
                Whether the application is active(has focus)                
            </comment>
            <comment line="52">
                Helper object, contains XEmbed intrinsics                
            </comment>
            <comment line="53">
                Maps accelerator ID into AWTKeyStroke                
            </comment>
            <comment line="54">
                Maps AWTKeyStroke into accelerator ID                
            </comment>
            <comment line="55">
                A set of keys grabbed by client                
            </comment>
            <comment line="56">
                Lock object for working with accelerators;                
            </comment>
            <comment line="57">
                Lock object for working with keys grabbed by client                
            </comment>
            <comment line="288">
                Focusable is true in order to enable focus traversal through this Canvas                
            </comment>
            <implements interface="WindowFocusListener"/>
            <implements interface="KeyEventPostProcessor"/>
            <implements interface="ModalityListener"/>
            <implements interface="WindowIDProvider"/>
            <declaration name="xembedLog" type="PlatformLogger" line="48"/>
            <declaration name="applicationActive" type="boolean" line="50"/>
            <declaration name="xembed" type="XEmbedServer" line="51"/>
            <declaration name="accelerators" type="Map&amp;lt;Long,AWTKeyStroke&amp;gt;" line="52"/>
            <declaration name="accel_lookup" type="Map&amp;lt;AWTKeyStroke,Long&amp;gt;" line="53"/>
            <declaration name="grabbed_keys" type="Set&amp;lt;GrabbedKey&amp;gt;" line="54"/>
            <declaration name="ACCEL_LOCK" type="Object" line="55"/>
            <declaration name="GRAB_LOCK" type="Object" line="56"/>
            <method name="XEmbedCanvasPeer" type="constructor" line="58"/>
            <method name="XEmbedCanvasPeer" type="constructor" line="60">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
            </method>
            <method name="XEmbedCanvasPeer" type="constructor" line="64">
                <params>
                    <param name="target" type="Component"/>
                </params>
            </method>
            <method name="postInit" type="void" line="68">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
                <comment line="76">
                    XEmbed canvas should be non-traversable.
                     FIXME: Probably should be removed and enforced setting of it by the users                    
                </comment>
            </method>
            <method name="preInit" type="void" line="80">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
            </method>
            <method name="installModalityListener" type="void" line="91"/>
            <method name="deinstallModalityListener" type="void" line="95"/>
            <method name="installAcceleratorListener" type="void" line="99"/>
            <method name="deinstallAcceleratorListener" type="void" line="103"/>
            <method name="installActivateListener" type="void" line="107">
                <comment line="109">
                    FIXME: should watch for hierarchy changes                    
                </comment>
                <declaration name="toplevel" type="Window" line="109"/>
                <scope line="110"/>
            </method>
            <method name="deinstallActivateListener" type="void" line="116">
                <declaration name="toplevel" type="Window" line="117"/>
                <scope line="118"/>
            </method>
            <method name="isXEmbedActive" type="boolean" line="123"/>
            <method name="isApplicationActive" type="boolean" line="127"/>
            <method name="initDispatching" type="void" line="131">
                <scope line="134"/>
                <scope line="140"/>
            </method>
            <method name="endDispatching" type="void" line="148">
                <comment line="154">
                    We can&apos;t deselect input since someone else might be interested in it                    
                </comment>
                <scope line="151"/>
                <scope line="155"/>
            </method>
            <method name="embedChild" type="void" line="160">
                <params>
                    <param name="child" type="long"/>
                </params>
                <scope line="161"/>
            </method>
            <method name="childDestroyed" type="void" line="168"/>
            <method name="handleEvent" type="void" line="174">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="176">
                    <scope line="186"/>
                </scope>
            </method>
            <method name="dispatchEvent" type="void" line="194">
                <params>
                    <param name="ev" type="XEvent"/>
                </params>
                <comment line="230">
                    Reparented into us - embed it                    
                </comment>
                <comment line="233">
                    Reparented out of us - detach it                    
                </comment>
                <declaration name="cr" type="XCreateWindowEvent" line="198"/>
                <scope line="199"/>
                <scope line="202"/>
                <declaration name="dn" type="XDestroyWindowEvent" line="209"/>
                <scope line="210"/>
                <scope line="213"/>
                <declaration name="rep" type="XReparentEvent" line="219"/>
                <scope line="220"/>
                <scope line="223"/>
                <scope line="228"/>
                <scope line="231"/>
            </method>
            <method name="getPreferredSize" type="Dimension" line="239">
                <scope line="240">
                    <scope line="242">
                        <declaration name="p_hints" type="long" line="243"/>
                        <declaration name="hints" type="XSizeHints" line="244"/>
                        <declaration name="res" type="Dimension" line="246"/>
                    </scope>
                    <scope line="249"/>
                </scope>
                <scope line="252"/>
            </method>
            <method name="getMinimumSize" type="Dimension" line="256">
                <scope line="257">
                    <scope line="259">
                        <declaration name="p_hints" type="long" line="260"/>
                        <declaration name="hints" type="XSizeHints" line="261"/>
                        <declaration name="res" type="Dimension" line="263"/>
                    </scope>
                    <scope line="266"/>
                </scope>
                <scope line="269"/>
            </method>
            <method name="dispose" type="void" line="273">
                <comment line="282">
                    BUG: Focus traversal doesn&apos;t become enabled after the one round of embedding
                    target.setFocusTraversalKeysEnabled(true);                    
                </comment>
                <scope line="274"/>
            </method>
            <method name="isFocusable" type="boolean" line="288"/>
            <method name="getTopLevel" type="Window" line="292">
                <params>
                    <param name="comp" type="Component"/>
                </params>
                <scope line="293"/>
            </method>
            <method name="getClientBounds" type="Rectangle" line="299">
                <scope line="301">
                    <declaration name="wattr" type="XWindowAttributes" line="302"/>
                    <scope line="303">
                        <declaration name="status" type="int" line="305"/>
                        <scope line="312"/>
                    </scope>
                    <scope line="317"/>
                </scope>
                <scope line="320"/>
            </method>
            <method name="childResized" type="void" line="325">
                <comment line="330">
                    It is not required to update embedder&apos;s size when client size changes
                     However, since there is no any means to get client size it seems to be the
                     only way to provide it. However, it contradicts with Java layout concept -
                     so it is disabled for now.                    
                </comment>
                <comment line="334">
                    Rectangle my_bounds = getBounds();
                                 setBounds(my_bounds.x, my_bounds.y, bounds.width, bounds.height, SET_BOUNDS);                    
                </comment>
                <scope line="326">
                    <declaration name="bounds" type="Rectangle" line="327"/>
                </scope>
            </method>
            <method name="focusNext" type="void" line="339">
                <scope line="340">
                    <anonymous_class line="342">
                        <method name="run" type="void" line="343"/>
                    </anonymous_class>
                </scope>
                <scope line="347"/>
            </method>
            <method name="focusPrev" type="void" line="352">
                <scope line="353">
                    <anonymous_class line="355">
                        <method name="run" type="void" line="356"/>
                    </anonymous_class>
                </scope>
                <scope line="360"/>
            </method>
            <method name="requestXEmbedFocus" type="void" line="365">
                <scope line="366">
                    <anonymous_class line="368">
                        <method name="run" type="void" line="369"/>
                    </anonymous_class>
                </scope>
                <scope line="373"/>
            </method>
            <method name="notifyChildEmbedded" type="void" line="378">
                <scope line="380">
                    <scope line="383"/>
                </scope>
            </method>
            <method name="detachChild" type="void" line="390">
                <comment line="393">
                    XEmbed specification:
                      &quot;The embedder can unmap the client and reparent the client window to the root window. If the
                      client receives an ReparentNotify event, it should check the parent field of the XReparentEvent
                      structure. If this is the root window of the window&apos;s screen, then the protocol is finished and
                      there is no further interaction. If it is a window other than the root window, then the protocol
                      continues with the new parent acting as the embedder window.&quot;                    
                </comment>
                <scope line="401"/>
                <scope line="404"/>
            </method>
            <method name="windowGainedFocus" type="void" line="411">
                <params>
                    <param name="e" type="WindowEvent"/>
                </params>
                <scope line="413"/>
            </method>
            <method name="windowLostFocus" type="void" line="419">
                <params>
                    <param name="e" type="WindowEvent"/>
                </params>
                <scope line="421"/>
            </method>
            <method name="canvasFocusGained" type="void" line="427">
                <params>
                    <param name="e" type="FocusEvent"/>
                </params>
                <scope line="428">
                    <declaration name="flavor" type="int" line="430"/>
                    <scope line="431">
                        <declaration name="ce" type="CausedFocusEvent" line="432"/>
                        <scope line="433"/>
                        <scope line="435"/>
                    </scope>
                </scope>
            </method>
            <method name="canvasFocusLost" type="void" line="443">
                <params>
                    <param name="e" type="FocusEvent"/>
                </params>
                <scope line="444">
                    <declaration name="num" type="int" line="446"/>
                    <scope line="447">
                        <declaration name="opp" type="Component" line="448"/>
                        <scope line="449"/>
                        <scope line="451"/>
                    </scope>
                </scope>
            </method>
            <declaration name="bdataField" type="Field" line="458"/>
            <method name="getBData" type="byte[]" line="459">
                <params>
                    <param name="e" type="KeyEvent"/>
                </params>
                <scope line="460">
                    <scope line="461"/>
                </scope>
                <scope line="465"/>
            </method>
            <method name="forwardKeyEvent" type="void" line="470">
                <params>
                    <param name="e" type="KeyEvent"/>
                </params>
                <declaration name="bdata" type="byte[]" line="472"/>
                <declaration name="data" type="long" line="473"/>
                <scope line="474"/>
                <scope line="477">
                    <declaration name="ke" type="XKeyEvent" line="478"/>
                    <scope line="482"/>
                    <scope line="484"/>
                </scope>
                <scope line="487"/>
            </method>
            <javadoc line="493">
                Grab/ungrab key functionality is an unofficial API supported by
                  GTK.  Unfortunately, it doesn&apos;t support accelerator API, so,
                  since this is the ONLY shortcut-processing API available, we
                  must support it.  See XEmbed.NON_STANDARD_XEMBED_GTK_
                  messages.  The format of these messages is as follows:
                  - request from client:
                  data[1] = NON_STANDARD_XEMBED_GTK_GRAB_KEY or NON_STANDARD_XEMBED_GTK_UNGRAB_KEY
                  data[3] = X keysym
                  data[4] = X modifiers
                  - response from server (in case the grabbed key has been pressed):
                  forwarded XKeyEvent that matches keysym/modifiers pair                
            </javadoc>
            <method name="grabKey" type="void" line="507">
                <params>
                    <param name="keysym" type="long"/>
                    <param name="modifiers" type="long"/>
                </params>
                <anonymous_class line="508">
                    <method name="run" type="void" line="509">
                        <declaration name="grab" type="GrabbedKey" line="510"/>
                        <scope line="512"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="ungrabKey" type="void" line="519">
                <params>
                    <param name="keysym" type="long"/>
                    <param name="modifiers" type="long"/>
                </params>
                <anonymous_class line="520">
                    <method name="run" type="void" line="521">
                        <declaration name="grab" type="GrabbedKey" line="522"/>
                        <scope line="524"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="registerAccelerator" type="void" line="531">
                <params>
                    <param name="accel_id" type="long"/>
                    <param name="keysym" type="long"/>
                    <param name="modifiers" type="long"/>
                </params>
                <anonymous_class line="532">
                    <method name="run" type="void" line="533">
                        <declaration name="stroke" type="AWTKeyStroke" line="534"/>
                        <scope line="535">
                            <scope line="537"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="unregisterAccelerator" type="void" line="547">
                <params>
                    <param name="accel_id" type="long"/>
                </params>
                <comment line="557">
                    FIXME: How about several accelerators with the same stroke?                    
                </comment>
                <anonymous_class line="548">
                    <method name="run" type="void" line="549">
                        <comment line="557">
                            FIXME: How about several accelerators with the same stroke?                            
                        </comment>
                        <declaration name="stroke" type="AWTKeyStroke" line="550"/>
                        <scope line="551">
                            <scope line="553"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="propogateRegisterAccelerator" type="void" line="564">
                <params>
                    <param name="stroke" type="AWTKeyStroke"/>
                </params>
                <comment line="566">
                    Find the top-level and see if it is XEmbed client. If so, ask him to
                     register the accelerator                    
                </comment>
                <declaration name="parent" type="XWindowPeer" line="567"/>
                <scope line="568">
                    <declaration name="embedded" type="XEmbeddedFramePeer" line="569"/>
                </scope>
            </method>
            <method name="propogateUnRegisterAccelerator" type="void" line="574">
                <params>
                    <param name="stroke" type="AWTKeyStroke"/>
                </params>
                <comment line="576">
                    Find the top-level and see if it is XEmbed client. If so, ask him to
                     register the accelerator                    
                </comment>
                <declaration name="parent" type="XWindowPeer" line="577"/>
                <scope line="578">
                    <declaration name="embedded" type="XEmbeddedFramePeer" line="579"/>
                </scope>
            </method>
            <method name="postProcessKeyEvent" type="boolean" line="584">
                <params>
                    <param name="e" type="KeyEvent"/>
                </params>
                <comment line="586">
                    Processing events only if we are in the focused window but
                     we are not focus owner since otherwise we will get
                     duplicate shortcut events in the client - one is from
                     activate_accelerator, another from forwarded event
                     FIXME: This is probably an incompatibility, protocol
                     doesn&apos;t say anything about disable accelerators when client
                     is focused.                    
                </comment>
                <comment line="603">
                    Process ACCELERATORS                    
                </comment>
                <comment line="615">
                    FIXME: How about overloaded?                    
                </comment>
                <comment line="619">
                    Process Grabs, unofficial GTK feature                    
                </comment>
                <declaration name="parent" type="XWindowPeer" line="593"/>
                <scope line="594"/>
                <declaration name="result" type="boolean" line="598"/>
                <declaration name="stroke" type="AWTKeyStroke" line="603"/>
                <declaration name="accel_id" type="long" line="604"/>
                <declaration name="exists" type="boolean" line="605"/>
                <scope line="606">
                    <scope line="608"/>
                </scope>
                <scope line="612"/>
                <declaration name="key" type="GrabbedKey" line="620"/>
                <scope line="621"/>
                <scope line="624"/>
            </method>
            <method name="modalityPushed" type="void" line="633">
                <params>
                    <param name="ev" type="ModalityEvent"/>
                </params>
            </method>
            <method name="modalityPopped" type="void" line="637">
                <params>
                    <param name="ev" type="ModalityEvent"/>
                </params>
            </method>
            <method name="handleClientMessage" type="void" line="641">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="msg" type="XClientMessageEvent" line="643"/>
                <scope line="645"/>
                <scope line="648"/>
                <scope line="672"/>
            </method>
            <class name="XEmbedDropTarget" line="677">
                <extends class="DropTarget"/>
                <comment line="728">
                    Handle to XEmbed client                    
                </comment>
                <method name="addDropTargetListener" type="void" line="679">
                    <params>
                        <param name="dtl" type="DropTargetListener"/>
                    </params>
                    <comment line="681">
                        Drop target listeners registered with this target will never be
                         notified, since all drag notifications are routed to the XEmbed
                         client. To avoid confusion we prohibit listeners registration
                         by throwing TooManyListenersException as if there is a listener
                         registered with this target already.                        
                    </comment>
                </method>
            </class>
            <method name="setXEmbedDropTarget" type="void" line="689">
                <comment line="691">
                    Register a drop site on the top level.                    
                </comment>
                <anonymous_class line="691">
                    <method name="run" type="void" line="692"/>
                </anonymous_class>
                <declaration name="r" type="Runnable" line="691"/>
            </method>
            <method name="removeXEmbedDropTarget" type="void" line="699">
                <comment line="701">
                    Unregister a drop site on the top level.                    
                </comment>
                <anonymous_class line="701">
                    <method name="run" type="void" line="702">
                        <scope line="703"/>
                    </method>
                </anonymous_class>
                <declaration name="r" type="Runnable" line="701"/>
            </method>
            <method name="processXEmbedDnDEvent" type="boolean" line="711">
                <params>
                    <param name="ctxt" type="long"/>
                    <param name="eventID" type="int"/>
                </params>
                <scope line="712"/>
                <scope line="715">
                    <declaration name="appContext" type="AppContext" line="716"/>
                    <declaration name="peer" type="XDropTargetContextPeer" line="717"/>
                </scope>
                <scope line="721"/>
            </method>
            <class name="XEmbedServer" line="726">
                <extends class="XEmbedHelper"/>
                <comment line="728">
                    Handle to XEmbed client                    
                </comment>
                <implements interface="XEventDispatcher"/>
                <declaration name="handle" type="long" line="727"/>
                <declaration name="version" type="long" line="728"/>
                <declaration name="flags" type="long" line="729"/>
                <method name="processXEmbedInfo" type="boolean" line="731">
                    <comment line="736">
                        No more XEMBED_INFO? This is not XEmbed client!
                         Unfortunately this is the initial state of the most clients
                         FIXME: add 5-state processing
                        childDestroyed();                        
                    </comment>
                    <declaration name="xembed_info_data" type="long" line="732"/>
                    <scope line="733">
                        <scope line="734"/>
                        <declaration name="new_mapped" type="boolean" line="744"/>
                        <declaration name="currently_mapped" type="boolean" line="745"/>
                        <scope line="746">
                            <scope line="749">
                                <scope line="751"/>
                                <scope line="753"/>
                            </scope>
                            <scope line="756">
                                <scope line="758"/>
                                <scope line="760"/>
                            </scope>
                        </scope>
                        <scope line="764"/>
                    </scope>
                    <scope line="768"/>
                </method>
                <method name="handlePropertyNotify" type="void" line="773">
                    <params>
                        <param name="xev" type="XEvent"/>
                    </params>
                    <scope line="774">
                        <declaration name="ev" type="XPropertyEvent" line="775"/>
                        <scope line="777"/>
                        <scope line="779"/>
                        <scope line="782">
                            <scope line="785"/>
                        </scope>
                    </scope>
                    <scope line="790"/>
                </method>
                <method name="handleConfigureNotify" type="void" line="794">
                    <params>
                        <param name="xev" type="XEvent"/>
                    </params>
                    <scope line="795">
                        <declaration name="ev" type="XConfigureEvent" line="796"/>
                        <scope line="798"/>
                    </scope>
                </method>
                <method name="dispatchEvent" type="void" line="803">
                    <params>
                        <param name="xev" type="XEvent"/>
                    </params>
                    <declaration name="type" type="int" line="804"/>
                </method>
            </class>
            <class name="GrabbedKey" line="819">
                <comment line="728">
                    Handle to XEmbed client                    
                </comment>
                <declaration name="keysym" type="long" line="820"/>
                <declaration name="modifiers" type="long" line="821"/>
                <method name="GrabbedKey" type="constructor" line="822">
                    <params>
                        <param name="keysym" type="long"/>
                        <param name="modifiers" type="long"/>
                    </params>
                </method>
                <method name="GrabbedKey" type="constructor" line="827">
                    <params>
                        <param name="ev" type="KeyEvent"/>
                    </params>
                </method>
                <method name="init" type="void" line="831">
                    <params>
                        <param name="e" type="KeyEvent"/>
                    </params>
                    <comment line="847">
                        We recognize only these masks                        
                    </comment>
                    <declaration name="bdata" type="byte[]" line="832"/>
                    <declaration name="data" type="long" line="833"/>
                    <scope line="834"/>
                    <scope line="837">
                        <scope line="839"/>
                        <scope line="841"/>
                        <declaration name="ke" type="XKeyEvent" line="844"/>
                    </scope>
                    <scope line="849"/>
                </method>
                <method name="hashCode" type="int" line="854"/>
                <method name="equals" type="boolean" line="858">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="859"/>
                    <declaration name="key" type="GrabbedKey" line="862"/>
                </method>
                <method name="toString" type="String" line="866"/>
            </class>
        </class>
    </source>