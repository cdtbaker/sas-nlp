<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt"/>
        <import package="java.awt.dnd.DropTarget"/>
        <import package="java.awt.dnd.DropTargetListener"/>
        <import package="java.awt.event"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="java.awt.image.ImageProducer"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="java.awt.peer"/>
        <import package="sun.awt"/>
        <import package="sun.awt.motif.X11FontMetrics"/>
        <import package="java.lang.reflect"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <import package="java.util"/>
        <import package="sun.awt.X11.XEmbedHelper"/>
        <import package="java.security.AccessController"/>
        <import package="sun.security.action.GetBooleanAction"/>
        <class name="XEmbedCanvasPeer" line="19">
            <extends class="XCanvasPeer"/>
            <implements interface="WindowFocusListener"/>
            <implements interface="KeyEventPostProcessor"/>
            <implements interface="ModalityListener"/>
            <implements interface="WindowIDProvider"/>
            <declaration name="xembedLog" type="PlatformLogger" line="20"/>
            <declaration name="applicationActive" type="boolean" line="21"/>
            <declaration name="xembed" type="XEmbedServer" line="22"/>
            <declaration name="accelerators" type="Map&lt;Long,AWTKeyStroke&gt;" line="23"/>
            <declaration name="accel_lookup" type="Map&lt;AWTKeyStroke,Long&gt;" line="24"/>
            <declaration name="grabbed_keys" type="Set&lt;GrabbedKey&gt;" line="25"/>
            <declaration name="ACCEL_LOCK" type="Object" line="26"/>
            <declaration name="GRAB_LOCK" type="Object" line="27"/>
            <method name="XEmbedCanvasPeer" type="constructor" line="28"/>
            <method name="XEmbedCanvasPeer" type="constructor" line="30">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
            </method>
            <method name="XEmbedCanvasPeer" type="constructor" line="33">
                <params>
                    <param name="target" type="Component"/>
                </params>
            </method>
            <method name="postInit" type="void" line="36">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
            </method>
            <method name="preInit" type="void" line="43">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
            </method>
            <method name="installModalityListener" type="void" line="47"/>
            <method name="deinstallModalityListener" type="void" line="50"/>
            <method name="installAcceleratorListener" type="void" line="53"/>
            <method name="deinstallAcceleratorListener" type="void" line="56"/>
            <method name="installActivateListener" type="void" line="59">
                <declaration name="toplevel" type="Window" line="60"/>
                <scope line="61"/>
            </method>
            <method name="deinstallActivateListener" type="void" line="66">
                <declaration name="toplevel" type="Window" line="67"/>
                <scope line="68"/>
            </method>
            <method name="isXEmbedActive" type="boolean" line="72"/>
            <method name="isApplicationActive" type="boolean" line="75"/>
            <method name="initDispatching" type="void" line="78">
                <scope line="81"/>
                <scope line="86"/>
            </method>
            <method name="endDispatching" type="void" line="92">
                <scope line="95"/>
                <scope line="99"/>
            </method>
            <method name="embedChild" type="void" line="103">
                <params>
                    <param name="child" type="long"/>
                </params>
                <scope line="104"/>
            </method>
            <method name="childDestroyed" type="void" line="110"/>
            <method name="handleEvent" type="void" line="115">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="117">
                    <scope line="127"/>
                </scope>
            </method>
            <method name="dispatchEvent" type="void" line="134">
                <params>
                    <param name="ev" type="XEvent"/>
                </params>
                <declaration name="cr" type="XCreateWindowEvent" line="138"/>
                <scope line="139"/>
                <scope line="142"/>
                <declaration name="dn" type="XDestroyWindowEvent" line="148"/>
                <scope line="149"/>
                <scope line="152"/>
                <declaration name="rep" type="XReparentEvent" line="158"/>
                <scope line="159"/>
                <scope line="162"/>
                <scope line="165"/>
                <scope line="168"/>
            </method>
            <method name="getPreferredSize" type="Dimension" line="174">
                <scope line="175">
                    <scope line="177">
                        <declaration name="p_hints" type="long" line="178"/>
                        <declaration name="hints" type="XSizeHints" line="179"/>
                        <declaration name="res" type="Dimension" line="181"/>
                    </scope>
                    <scope line="185"/>
                </scope>
                <scope line="189"/>
            </method>
            <method name="getMinimumSize" type="Dimension" line="193">
                <scope line="194">
                    <scope line="196">
                        <declaration name="p_hints" type="long" line="197"/>
                        <declaration name="hints" type="XSizeHints" line="198"/>
                        <declaration name="res" type="Dimension" line="200"/>
                    </scope>
                    <scope line="204"/>
                </scope>
                <scope line="208"/>
            </method>
            <method name="dispose" type="void" line="212">
                <scope line="213"/>
            </method>
            <method name="isFocusable" type="boolean" line="221"/>
            <method name="getTopLevel" type="Window" line="224">
                <params>
                    <param name="comp" type="Component"/>
                </params>
                <scope line="225"/>
            </method>
            <method name="getClientBounds" type="Rectangle" line="230">
                <scope line="232">
                    <declaration name="wattr" type="XWindowAttributes" line="233"/>
                    <scope line="234">
                        <declaration name="status" type="int" line="236"/>
                        <scope line="238"/>
                    </scope>
                    <scope line="243"/>
                </scope>
                <scope line="247"/>
            </method>
            <method name="childResized" type="void" line="251">
                <scope line="252">
                    <declaration name="bounds" type="Rectangle" line="253"/>
                </scope>
            </method>
            <method name="focusNext" type="void" line="258">
                <scope line="259">
                    <anonymous_class line="261">
                        <method name="run" type="void" line="262"/>
                    </anonymous_class>
                </scope>
                <scope line="268"/>
            </method>
            <method name="focusPrev" type="void" line="272">
                <scope line="273">
                    <anonymous_class line="275">
                        <method name="run" type="void" line="276"/>
                    </anonymous_class>
                </scope>
                <scope line="282"/>
            </method>
            <method name="requestXEmbedFocus" type="void" line="286">
                <scope line="287">
                    <anonymous_class line="289">
                        <method name="run" type="void" line="290"/>
                    </anonymous_class>
                </scope>
                <scope line="296"/>
            </method>
            <method name="notifyChildEmbedded" type="void" line="300">
                <scope line="302">
                    <scope line="305"/>
                </scope>
            </method>
            <method name="detachChild" type="void" line="311">
                <scope line="314"/>
                <scope line="318"/>
            </method>
            <method name="windowGainedFocus" type="void" line="324">
                <params>
                    <param name="e" type="WindowEvent"/>
                </params>
                <scope line="326"/>
            </method>
            <method name="windowLostFocus" type="void" line="331">
                <params>
                    <param name="e" type="WindowEvent"/>
                </params>
                <scope line="333"/>
            </method>
            <method name="canvasFocusGained" type="void" line="338">
                <params>
                    <param name="e" type="FocusEvent"/>
                </params>
                <scope line="339">
                    <declaration name="flavor" type="int" line="341"/>
                    <scope line="342">
                        <declaration name="ce" type="CausedFocusEvent" line="343"/>
                        <scope line="344"/>
                        <scope line="347"/>
                    </scope>
                </scope>
            </method>
            <method name="canvasFocusLost" type="void" line="354">
                <params>
                    <param name="e" type="FocusEvent"/>
                </params>
                <scope line="355">
                    <declaration name="num" type="int" line="357"/>
                    <scope line="358">
                        <declaration name="opp" type="Component" line="359"/>
                        <scope line="360"/>
                        <scope line="363"/>
                    </scope>
                </scope>
            </method>
            <declaration name="bdataField" type="Field" line="369"/>
            <method name="getBData" type="byte[]" line="370">
                <params>
                    <param name="e" type="KeyEvent"/>
                </params>
                <scope line="371">
                    <scope line="372"/>
                </scope>
                <scope line="377"/>
            </method>
            <method name="forwardKeyEvent" type="void" line="381">
                <params>
                    <param name="e" type="KeyEvent"/>
                </params>
                <declaration name="bdata" type="byte[]" line="383"/>
                <declaration name="data" type="long" line="384"/>
                <scope line="385"/>
                <scope line="388">
                    <declaration name="ke" type="XKeyEvent" line="389"/>
                    <scope line="393"/>
                    <scope line="396"/>
                </scope>
                <scope line="400"/>
            </method>
            <javadoc line="404">
                Grab/ungrab key functionality is an unofficial API supported by
                  GTK.  Unfortunately, it doesn&apos;t support accelerator API, so,
                  since this is the ONLY shortcut-processing API available, we
                  must support it.  See XEmbed.NON_STANDARD_XEMBED_GTK_
                  messages.  The format of these messages is as follows:
                  - request from client:
                  data[1] = NON_STANDARD_XEMBED_GTK_GRAB_KEY or NON_STANDARD_XEMBED_GTK_UNGRAB_KEY
                  data[3] = X keysym
                  data[4] = X modifiers
                  - response from server (in case the grabbed key has been pressed):
                  forwarded XKeyEvent that matches keysym/modifiers pair                
            </javadoc>
            <method name="grabKey" type="void" line="417">
                <params>
                    <param name="keysym" type="long"/>
                    <param name="modifiers" type="long"/>
                </params>
                <anonymous_class line="418">
                    <method name="run" type="void" line="419">
                        <declaration name="grab" type="GrabbedKey" line="420"/>
                        <scope line="422"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="ungrabKey" type="void" line="429">
                <params>
                    <param name="keysym" type="long"/>
                    <param name="modifiers" type="long"/>
                </params>
                <anonymous_class line="430">
                    <method name="run" type="void" line="431">
                        <declaration name="grab" type="GrabbedKey" line="432"/>
                        <scope line="434"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="registerAccelerator" type="void" line="441">
                <params>
                    <param name="accel_id" type="long"/>
                    <param name="keysym" type="long"/>
                    <param name="modifiers" type="long"/>
                </params>
                <anonymous_class line="442">
                    <method name="run" type="void" line="443">
                        <declaration name="stroke" type="AWTKeyStroke" line="444"/>
                        <scope line="445">
                            <scope line="447"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="unregisterAccelerator" type="void" line="457">
                <params>
                    <param name="accel_id" type="long"/>
                </params>
                <anonymous_class line="458">
                    <method name="run" type="void" line="459">
                        <declaration name="stroke" type="AWTKeyStroke" line="460"/>
                        <scope line="461">
                            <scope line="463"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="propogateRegisterAccelerator" type="void" line="474">
                <params>
                    <param name="stroke" type="AWTKeyStroke"/>
                </params>
                <declaration name="parent" type="XWindowPeer" line="475"/>
                <scope line="476">
                    <declaration name="embedded" type="XEmbeddedFramePeer" line="477"/>
                </scope>
            </method>
            <method name="propogateUnRegisterAccelerator" type="void" line="481">
                <params>
                    <param name="stroke" type="AWTKeyStroke"/>
                </params>
                <declaration name="parent" type="XWindowPeer" line="482"/>
                <scope line="483">
                    <declaration name="embedded" type="XEmbeddedFramePeer" line="484"/>
                </scope>
            </method>
            <method name="postProcessKeyEvent" type="boolean" line="488">
                <params>
                    <param name="e" type="KeyEvent"/>
                </params>
                <declaration name="parent" type="XWindowPeer" line="489"/>
                <scope line="490"/>
                <declaration name="result" type="boolean" line="493"/>
                <declaration name="stroke" type="AWTKeyStroke" line="495"/>
                <declaration name="accel_id" type="long" line="496"/>
                <declaration name="exists" type="boolean" line="497"/>
                <scope line="498">
                    <scope line="500"/>
                </scope>
                <scope line="504"/>
                <declaration name="key" type="GrabbedKey" line="510"/>
                <scope line="511"/>
                <scope line="514"/>
            </method>
            <method name="modalityPushed" type="void" line="521">
                <params>
                    <param name="ev" type="ModalityEvent"/>
                </params>
            </method>
            <method name="modalityPopped" type="void" line="524">
                <params>
                    <param name="ev" type="ModalityEvent"/>
                </params>
            </method>
            <method name="handleClientMessage" type="void" line="527">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="msg" type="XClientMessageEvent" line="529"/>
                <scope line="531"/>
                <scope line="534"/>
                <scope line="559"/>
            </method>
            <class name="XEmbedDropTarget" line="563">
                <extends class="DropTarget"/>
                <method name="addDropTargetListener" type="void" line="564">
                    <params>
                        <param name="dtl" type="DropTargetListener"/>
                    </params>
                </method>
            </class>
            <method name="setXEmbedDropTarget" type="void" line="568">
                <anonymous_class line="569">
                    <method name="run" type="void" line="570"/>
                </anonymous_class>
                <declaration name="r" type="Runnable" line="569"/>
            </method>
            <method name="removeXEmbedDropTarget" type="void" line="577">
                <anonymous_class line="578">
                    <method name="run" type="void" line="579">
                        <scope line="580"/>
                    </method>
                </anonymous_class>
                <declaration name="r" type="Runnable" line="578"/>
            </method>
            <method name="processXEmbedDnDEvent" type="boolean" line="588">
                <params>
                    <param name="ctxt" type="long"/>
                    <param name="eventID" type="int"/>
                </params>
                <scope line="589"/>
                <scope line="592">
                    <declaration name="appContext" type="AppContext" line="593"/>
                    <declaration name="peer" type="XDropTargetContextPeer" line="594"/>
                </scope>
                <scope line="598"/>
            </method>
            <class name="XEmbedServer" line="602">
                <extends class="XEmbedHelper"/>
                <implements interface="XEventDispatcher"/>
                <declaration name="handle" type="long" line="603"/>
                <declaration name="version" type="long" line="604"/>
                <declaration name="flags" type="long" line="605"/>
                <method name="processXEmbedInfo" type="boolean" line="606">
                    <declaration name="xembed_info_data" type="long" line="607"/>
                    <scope line="608">
                        <scope line="609"/>
                        <declaration name="new_mapped" type="boolean" line="615"/>
                        <declaration name="currently_mapped" type="boolean" line="616"/>
                        <scope line="617">
                            <scope line="619">
                                <scope line="621"/>
                                <scope line="624"/>
                            </scope>
                            <scope line="628">
                                <scope line="630"/>
                                <scope line="633"/>
                            </scope>
                        </scope>
                        <scope line="638"/>
                    </scope>
                    <scope line="643"/>
                </method>
                <method name="handlePropertyNotify" type="void" line="647">
                    <params>
                        <param name="xev" type="XEvent"/>
                    </params>
                    <scope line="648">
                        <declaration name="ev" type="XPropertyEvent" line="649"/>
                        <scope line="651"/>
                        <scope line="654"/>
                        <scope line="657">
                            <scope line="659"/>
                        </scope>
                    </scope>
                    <scope line="664"/>
                </method>
                <method name="handleConfigureNotify" type="void" line="668">
                    <params>
                        <param name="xev" type="XEvent"/>
                    </params>
                    <scope line="669">
                        <declaration name="ev" type="XConfigureEvent" line="670"/>
                        <scope line="672"/>
                    </scope>
                </method>
                <method name="dispatchEvent" type="void" line="677">
                    <params>
                        <param name="xev" type="XEvent"/>
                    </params>
                    <declaration name="type" type="int" line="678"/>
                </method>
            </class>
            <class name="GrabbedKey" line="692">
                <declaration name="keysym" type="long" line="693"/>
                <declaration name="modifiers" type="long" line="694"/>
                <method name="GrabbedKey" type="constructor" line="695">
                    <params>
                        <param name="keysym" type="long"/>
                        <param name="modifiers" type="long"/>
                    </params>
                </method>
                <method name="GrabbedKey" type="constructor" line="699">
                    <params>
                        <param name="ev" type="KeyEvent"/>
                    </params>
                </method>
                <method name="init" type="void" line="702">
                    <params>
                        <param name="e" type="KeyEvent"/>
                    </params>
                    <declaration name="bdata" type="byte[]" line="703"/>
                    <declaration name="data" type="long" line="704"/>
                    <scope line="705"/>
                    <scope line="708">
                        <scope line="710"/>
                        <scope line="713"/>
                        <declaration name="ke" type="XKeyEvent" line="716"/>
                    </scope>
                    <scope line="720"/>
                </method>
                <method name="hashCode" type="int" line="724"/>
                <method name="equals" type="boolean" line="727">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="728"/>
                    <declaration name="key" type="GrabbedKey" line="731"/>
                </method>
                <method name="toString" type="String" line="734"/>
            </class>
        </class>
    </source>