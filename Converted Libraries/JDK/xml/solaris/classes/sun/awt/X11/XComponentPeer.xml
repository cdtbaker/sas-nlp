<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt.AWTEvent"/>
        <import package="java.awt.AWTException"/>
        <import package="java.awt.BufferCapabilities"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Cursor"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.FontMetrics"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.KeyboardFocusManager"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.SystemColor"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.Window"/>
        <import package="java.awt.dnd.DropTarget"/>
        <import package="java.awt.dnd.peer.DropTargetPeer"/>
        <import package="java.awt.event.FocusEvent"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.event.InputMethodEvent"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.event.MouseWheelEvent"/>
        <import package="java.awt.event.PaintEvent"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.awt.event.InvocationEvent"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="java.awt.image.ImageProducer"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="java.awt.peer.ComponentPeer"/>
        <import package="java.awt.peer.ContainerPeer"/>
        <import package="java.awt.peer.LightweightPeer"/>
        <import package="java.lang.reflect"/>
        <import package="java.security"/>
        <import package="java.util.Collection"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Set"/>
        <import package="java.util.Vector"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <import package="sun.awt"/>
        <import package="sun.awt.event.IgnorePaintEvent"/>
        <import package="sun.awt.image.SunVolatileImage"/>
        <import package="sun.awt.image.ToolkitImage"/>
        <import package="sun.java2d.BackBufferCapsProvider"/>
        <import package="sun.java2d.pipe.Region"/>
        <class name="XComponentPeer" line="51">
            <extends class="XWindow"/>
            <implements interface="ComponentPeer"/>
            <implements interface="DropTargetPeer"/>
            <implements interface="BackBufferCapsProvider"/>
            <declaration name="log" type="PlatformLogger" line="52"/>
            <declaration name="buffersLog" type="PlatformLogger" line="53"/>
            <declaration name="focusLog" type="PlatformLogger" line="54"/>
            <declaration name="fontLog" type="PlatformLogger" line="55"/>
            <declaration name="enableLog" type="PlatformLogger" line="56"/>
            <declaration name="shapeLog" type="PlatformLogger" line="57"/>
            <declaration name="paintPending" type="boolean" line="58"/>
            <declaration name="isLayouting" type="boolean" line="59"/>
            <declaration name="enabled" type="boolean" line="60"/>
            <declaration name="boundsOperation" type="int" line="61"/>
            <declaration name="foreground" type="Color" line="62"/>
            <declaration name="background" type="Color" line="63"/>
            <declaration name="darkShadow" type="Color" line="64"/>
            <declaration name="lightShadow" type="Color" line="65"/>
            <declaration name="selectColor" type="Color" line="66"/>
            <declaration name="font" type="Font" line="67"/>
            <declaration name="backBuffer" type="long" line="68"/>
            <declaration name="xBackBuffer" type="VolatileImage" line="69"/>
            <declaration name="systemColors" type="Color[]" line="70"/>
            <method name="XComponentPeer" type="constructor" line="71"/>
            <method name="XComponentPeer" type="constructor" line="73">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
            </method>
            <method name="XComponentPeer" type="constructor" line="76">
                <params>
                    <param name="target" type="Component"/>
                    <param name="parentWindow" type="long"/>
                    <param name="bounds" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="79">
                Standard peer constructor, with corresponding Component                
            </javadoc>
            <method name="XComponentPeer" type="constructor" line="82">
                <params>
                    <param name="target" type="Component"/>
                </params>
            </method>
            <method name="preInit" type="void" line="85">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
            </method>
            <method name="postInit" type="void" line="89">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
                <declaration name="c" type="Color" line="91"/>
                <declaration name="f" type="Font" line="92"/>
                <declaration name="cursor" type="Cursor" line="93"/>
                <scope line="98">
                    <declaration name="r" type="Rectangle" line="99"/>
                </scope>
                <declaration name="comp" type="Component" line="103"/>
                <scope line="104">
                    <scope line="106"/>
                </scope>
                <scope line="112"/>
            </method>
            <method name="isInitialReshape" type="boolean" line="116"/>
            <method name="reparent" type="void" line="119">
                <params>
                    <param name="newNativeParent" type="ContainerPeer"/>
                </params>
                <declaration name="newPeer" type="XComponentPeer" line="120"/>
                <scope line="122"/>
                <scope line="126"/>
            </method>
            <method name="isReparentSupported" type="boolean" line="130"/>
            <method name="isObscured" type="boolean" line="133">
                <declaration name="container" type="Container" line="134"/>
                <scope line="135"/>
                <declaration name="parent" type="Container" line="138"/>
                <scope line="139"/>
                <scope line="142">
                    <declaration name="wpeer" type="XWindowPeer" line="143"/>
                    <scope line="144"/>
                </scope>
            </method>
            <method name="canDetermineObscurity" type="boolean" line="150"/>
            <declaration name="bHasFocus" type="boolean" line="153"/>
            <javadoc line="153">
                Keeps the track of focused state of the _NATIVE_ window                
            </javadoc>
            <javadoc line="157">
                Descendants should use this method to determine whether or not native window
                  has focus.                
            </javadoc>
            <method name="hasFocus" type="boolean" line="161"/>
            <javadoc line="164">
                Called when component receives focus                
            </javadoc>
            <method name="focusGained" type="void" line="167">
                <params>
                    <param name="e" type="FocusEvent"/>
                </params>
            </method>
            <javadoc line="171">
                Called when component loses focus                
            </javadoc>
            <method name="focusLost" type="void" line="174">
                <params>
                    <param name="e" type="FocusEvent"/>
                </params>
            </method>
            <method name="isFocusable" type="boolean" line="178"/>
            <declaration name="seClass" type="Class" line="181"/>
            <declaration name="seCtor" type="Constructor" line="182"/>
            <method name="wrapInSequenced" type="AWTEvent" line="183">
                <params>
                    <param name="event" type="AWTEvent"/>
                </params>
            </method>
            <method name="requestFocus" type="boolean" line="217">
                <params>
                    <param name="lightweightChild" type="Component"/>
                    <param name="temporary" type="boolean"/>
                    <param name="focusedWindowChangeAllowed" type="boolean"/>
                    <param name="time" type="long"/>
                    <param name="cause" type="CausedFocusEvent.Cause"/>
                </params>
                <scope line="218"/>
                <declaration name="result" type="int" line="221"/>
                <declaration name="parentWindow" type="Window" line="227"/>
                <scope line="228"/>
                <declaration name="wpeer" type="XWindowPeer" line="231"/>
                <scope line="232"/>
                <declaration name="res" type="boolean" line="235"/>
                <scope line="237"/>
            </method>
            <method name="rejectFocusRequestHelper" type="boolean" line="246">
                <params>
                    <param name="logMsg" type="String"/>
                </params>
            </method>
            <method name="handleJavaFocusEvent" type="void" line="251">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="253"/>
                <scope line="256"/>
            </method>
            <method name="handleJavaWindowFocusEvent" type="void" line="260">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
            </method>
            <javadoc line="262">
                END OF FOCUS STUFF                
            </javadoc>
            <method name="setVisible" type="void" line="265">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <method name="hide" type="void" line="268"/>
            <javadoc line="271">
                @see java.awt.peer.ComponentPeer                
            </javadoc>
            <method name="setEnabled" type="void" line="274">
                <params>
                    <param name="value" type="boolean"/>
                </params>
                <declaration name="repaintNeeded" type="boolean" line="276"/>
                <scope line="278">
                    <declaration name="list" type="Component" line="279"/>
                    <scope line="280">
                        <declaration name="childEnabled" type="boolean" line="281"/>
                        <declaration name="p" type="ComponentPeer" line="282"/>
                        <scope line="283"/>
                    </scope>
                </scope>
                <scope line="288"/>
            </method>
            <method name="isEnabled" type="boolean" line="292"/>
            <method name="enable" type="void" line="295"/>
            <method name="disable" type="void" line="298"/>
            <method name="paint" type="void" line="301">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <method name="repaint" type="void" line="303">
                <params>
                    <param name="tm" type="long"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="getGraphics" type="Graphics" line="306"/>
            <method name="print" type="void" line="309">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <method name="setBounds" type="void" line="316">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="op" type="int"/>
                </params>
            </method>
            <method name="reshape" type="void" line="325">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="coalescePaintEvent" type="void" line="328">
                <params>
                    <param name="e" type="PaintEvent"/>
                </params>
                <declaration name="r" type="Rectangle" line="329"/>
                <scope line="330"/>
                <scope line="333"/>
            </method>
            <method name="getParentTopLevel" type="XWindowPeer" line="344">
                <declaration name="compAccessor" type="AWTAccessor.ComponentAccessor" line="345"/>
                <declaration name="parent" type="Container" line="346"/>
                <scope line="347"/>
                <scope line="350"/>
                <scope line="353"/>
            </method>
            <method name="handleJavaMouseEvent" type="void" line="357">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
                <scope line="360">
                    <declaration name="parentXWindow" type="XWindowPeer" line="361"/>
                    <declaration name="parentWindow" type="Window" line="362"/>
                </scope>
            </method>
            <method name="handleJavaKeyEvent" type="void" line="368">
                <params>
                    <param name="e" type="KeyEvent"/>
                </params>
            </method>
            <method name="handleJavaMouseWheelEvent" type="void" line="370">
                <params>
                    <param name="e" type="MouseWheelEvent"/>
                </params>
            </method>
            <method name="handleJavaInputMethodEvent" type="void" line="372">
                <params>
                    <param name="e" type="InputMethodEvent"/>
                </params>
            </method>
            <method name="handleF10JavaKeyEvent" type="void" line="374">
                <params>
                    <param name="e" type="KeyEvent"/>
                </params>
                <scope line="375">
                    <declaration name="winPeer" type="XWindowPeer" line="376"/>
                    <scope line="377">
                        <declaration name="mPeer" type="XMenuBarPeer" line="378"/>
                        <scope line="379"/>
                    </scope>
                </scope>
            </method>
            <method name="handleEvent" type="void" line="385">
                <params>
                    <param name="e" type="java.awt.AWTEvent"/>
                </params>
                <scope line="386">
                    <scope line="387">
                        <scope line="388"/>
                    </scope>
                    <scope line="393"/>
                </scope>
                <scope line="398"/>
                <scope line="401"/>
                <declaration name="id" type="int" line="404"/>
                <scope line="409"/>
            </method>
            <method name="handleButtonPressRelease" type="void" line="425">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <scope line="426">
                    <declaration name="parentXWindow" type="XWindowPeer" line="427"/>
                    <declaration name="parentWindow" type="Window" line="428"/>
                    <scope line="429">
                        <anonymous_class line="430">
                            <method name="run" type="void" line="431"/>
                        </anonymous_class>
                    </scope>
                </scope>
            </method>
            <method name="getMinimumSize" type="Dimension" line="440"/>
            <method name="getPreferredSize" type="Dimension" line="443"/>
            <method name="layout" type="void" line="446"/>
            <method name="getToolkit" type="java.awt.Toolkit" line="448"/>
            <method name="updateMotifColors" type="void" line="451">
                <params>
                    <param name="bg" type="Color"/>
                </params>
                <declaration name="red" type="int" line="452"/>
                <declaration name="green" type="int" line="453"/>
                <declaration name="blue" type="int" line="454"/>
            </method>
            <method name="drawMotif3DRect" type="void" line="459">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="topShadow" type="boolean"/>
                </params>
            </method>
            <method name="setBackground" type="void" line="467">
                <params>
                    <param name="c" type="Color"/>
                </params>
                <scope line="469"/>
            </method>
            <method name="setForeground" type="void" line="475">
                <params>
                    <param name="c" type="Color"/>
                </params>
                <scope line="477"/>
            </method>
            <javadoc line="482">
                Gets the font metrics for the specified font.                
                <param>
                    font the font for which font metrics is to be
                      obtained                    
                </param>
                <return>
                    the font metrics for <code>font</code>                    
                </return>
                <see>
                    #getFont                    
                </see>
                <see>
                    #getPeer                    
                </see>
                <see>
                    java.awt.peer.ComponentPeer#getFontMetrics(Font)                    
                </see>
                <see>
                    Toolkit#getFontMetrics(Font)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getFontMetrics" type="FontMetrics" line="493">
                <params>
                    <param name="font" type="Font"/>
                </params>
            </method>
            <method name="setFont" type="void" line="497">
                <params>
                    <param name="f" type="Font"/>
                </params>
                <scope line="498">
                    <scope line="499"/>
                </scope>
            </method>
            <method name="getFont" type="Font" line="505"/>
            <method name="updateCursorImmediately" type="void" line="508"/>
            <method name="pSetCursor" type="void" line="511">
                <params>
                    <param name="cursor" type="Cursor"/>
                </params>
            </method>
            <method name="pSetCursor" type="void" line="514">
                <params>
                    <param name="cursor" type="Cursor"/>
                    <param name="ignoreSubComponents" type="boolean"/>
                </params>
                <scope line="516">
                    <declaration name="xcursor" type="long" line="517"/>
                    <declaration name="xwa" type="XSetWindowAttributes" line="518"/>
                    <declaration name="valuemask" type="long" line="520"/>
                </scope>
                <scope line="525"/>
            </method>
            <method name="createImage" type="Image" line="529">
                <params>
                    <param name="producer" type="ImageProducer"/>
                </params>
            </method>
            <method name="createImage" type="Image" line="532">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="createVolatileImage" type="VolatileImage" line="535">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="prepareImage" type="boolean" line="538">
                <params>
                    <param name="img" type="Image"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="o" type="ImageObserver"/>
                </params>
            </method>
            <method name="checkImage" type="int" line="541">
                <params>
                    <param name="img" type="Image"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="o" type="ImageObserver"/>
                </params>
            </method>
            <method name="preferredSize" type="Dimension" line="544"/>
            <method name="minimumSize" type="Dimension" line="547"/>
            <method name="getInsets" type="Insets" line="550"/>
            <method name="beginValidate" type="void" line="553"/>
            <method name="endValidate" type="void" line="555"/>
            <javadoc line="557">
                DEPRECATED:  Replaced by getInsets().                
            </javadoc>
            <method name="insets" type="Insets" line="560"/>
            <method name="isPaintPending" type="boolean" line="563"/>
            <method name="handlesWheelScrolling" type="boolean" line="566"/>
            <method name="beginLayout" type="void" line="569"/>
            <method name="endLayout" type="void" line="572">
                <scope line="573"/>
            </method>
            <method name="getWinBackground" type="Color" line="578"/>
            <method name="getRGBvals" type="int[]" line="581">
                <params>
                    <param name="c" type="Color"/>
                </params>
                <declaration name="rgbvals" type="int" line="582"/>
            </method>
            <declaration name="BACKGROUND_COLOR" type="int" line="588"/>
            <declaration name="HIGHLIGHT_COLOR" type="int" line="589"/>
            <declaration name="SHADOW_COLOR" type="int" line="590"/>
            <declaration name="FOREGROUND_COLOR" type="int" line="591"/>
            <method name="getGUIcolors" type="Color[]" line="592">
                <declaration name="c" type="Color" line="593"/>
                <declaration name="backb" type="float" line="594"/>
                <scope line="596"/>
                <scope line="599"/>
                <declaration name="rgb" type="int[]" line="602"/>
                <declaration name="hsb" type="float[]" line="603"/>
                <scope line="609">
                    <scope line="610"/>
                    <scope line="613"/>
                </scope>
                <scope line="617">
                    <scope line="618">
                        <scope line="619"/>
                        <scope line="623"/>
                    </scope>
                </scope>
                <scope line="631"/>
                <scope line="634">
                    <declaration name="tc" type="Color" line="636"/>
                    <declaration name="bg" type="int" line="637"/>
                    <declaration name="fg" type="int" line="639"/>
                    <declaration name="ave" type="float" line="640"/>
                    <declaration name="newForeground" type="Color" line="641"/>
                    <scope line="642"/>
                </scope>
            </method>
            <javadoc line="649">
                Returns an array of Colors similar to getGUIcolors(), but using the
                  System colors.  This is useful if pieces of a Component (such as
                  the integrated scrollbars of a List) should retain the System color
                  instead of the background color set by Component.setBackground().                
            </javadoc>
            <method name="getSystemColors" type="Color[]" line="655">
                <scope line="656"/>
            </method>
            <javadoc line="665">
                Draw a 3D oval.                
            </javadoc>
            <method name="draw3DOval" type="void" line="668">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="colors" type="Color"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="raised" type="boolean"/>
                </params>
                <declaration name="c" type="Color" line="669"/>
            </method>
            <method name="draw3DRect" type="void" line="676">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="colors" type="Color"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="raised" type="boolean"/>
                </params>
                <declaration name="c" type="Color" line="677"/>
            </method>
            <method name="draw3DOval" type="void" line="686">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="bg" type="Color"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="raised" type="boolean"/>
                </params>
                <declaration name="c" type="Color" line="687"/>
                <declaration name="shadow" type="Color" line="688"/>
                <declaration name="highlight" type="Color" line="689"/>
            </method>
            <method name="draw3DRect" type="void" line="696">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="bg" type="Color"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="raised" type="boolean"/>
                </params>
                <declaration name="c" type="Color" line="697"/>
                <declaration name="shadow" type="Color" line="698"/>
                <declaration name="highlight" type="Color" line="699"/>
            </method>
            <method name="drawScrollbar" type="void" line="708">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="bg" type="Color"/>
                    <param name="thickness" type="int"/>
                    <param name="length" type="int"/>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                    <param name="val" type="int"/>
                    <param name="vis" type="int"/>
                    <param name="horizontal" type="boolean"/>
                </params>
                <declaration name="c" type="Color" line="709"/>
                <declaration name="f" type="double" line="710"/>
                <declaration name="v1" type="int" line="711"/>
                <declaration name="v2" type="int" line="712"/>
                <declaration name="w2" type="int" line="713"/>
                <declaration name="tpts_x" type="int" line="714"/>
                <declaration name="tpts_y" type="int" line="715"/>
                <scope line="716">
                    <scope line="718"/>
                </scope>
                <scope line="722"/>
                <declaration name="ctr" type="int" line="726"/>
                <declaration name="sbmin" type="int" line="727"/>
                <declaration name="sbmax" type="int" line="728"/>
                <scope line="729">
                    <declaration name="d" type="Color" line="730"/>
                    <scope line="732"/>
                    <scope line="735"/>
                </scope>
                <scope line="740">
                    <scope line="741"/>
                    <scope line="744"/>
                </scope>
                <scope line="754"/>
                <scope line="757"/>
                <scope line="763"/>
                <scope line="766"/>
                <declaration name="highlight" type="Color" line="769"/>
                <scope line="771"/>
                <scope line="778"/>
                <scope line="785">
                    <scope line="786"/>
                    <scope line="790"/>
                </scope>
                <declaration name="shadow" type="Color" line="795"/>
                <scope line="797"/>
                <scope line="804"/>
                <scope line="811">
                    <scope line="812"/>
                    <scope line="816"/>
                </scope>
            </method>
            <declaration name="backBufferCaps" type="BufferCapabilities" line="823"/>
            <javadoc line="823">
                The following multibuffering-related methods delegate to our
                  associated GraphicsConfig (X11 or GLX) to handle the appropriate
                  native windowing system specific actions.                
            </javadoc>
            <method name="createBuffers" type="void" line="829">
                <params>
                    <param name="numBuffers" type="int"/>
                    <param name="caps" type="BufferCapabilities"/>
                </params>
                <scope line="830"/>
            </method>
            <method name="getBackBufferCaps" type="BufferCapabilities" line="837"/>
            <method name="flip" type="void" line="840">
                <params>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                    <param name="flipAction" type="BufferCapabilities.FlipContents"/>
                </params>
                <scope line="841"/>
                <scope line="844"/>
            </method>
            <method name="getBackBuffer" type="Image" line="849">
                <scope line="850"/>
                <scope line="853"/>
            </method>
            <method name="destroyBuffers" type="void" line="858">
                <scope line="859"/>
            </method>
            <method name="notifyTextComponentChange" type="void" line="866">
                <params>
                    <param name="add" type="boolean"/>
                </params>
                <declaration name="parent" type="Container" line="867"/>
                <scope line="868"/>
            </method>
            <javadoc line="872">
                Returns true if this event is disabled and shouldn&apos;t be processed by window
                  Currently if target component is disabled the following event will be disabled on window:
                  ButtonPress, ButtonRelease, KeyPress, KeyRelease, EnterNotify, LeaveNotify, MotionNotify                
            </javadoc>
            <method name="isEventDisabled" type="boolean" line="877">
                <params>
                    <param name="e" type="XEvent"/>
                </params>
                <scope line="879"/>
            </method>
            <method name="getPeerBackground" type="Color" line="899"/>
            <method name="getPeerForeground" type="Color" line="902"/>
            <method name="getPeerFont" type="Font" line="905"/>
            <method name="getPeerSize" type="Dimension" line="908"/>
            <method name="setBoundsOperation" type="void" line="911">
                <params>
                    <param name="operation" type="int"/>
                </params>
                <scope line="912">
                    <scope line="913"/>
                    <scope line="916"/>
                </scope>
            </method>
            <method name="operationToString" type="String" line="921">
                <params>
                    <param name="operation" type="int"/>
                </params>
            </method>
            <javadoc line="934">
                Lowers this component at the bottom of the above HW peer. If the above parameter
                  is null then the method places this component at the top of the Z-order.                
            </javadoc>
            <method name="setZOrder" type="void" line="938">
                <params>
                    <param name="above" type="ComponentPeer"/>
                </params>
                <declaration name="aboveWindow" type="long" line="939"/>
                <scope line="941"/>
                <scope line="944"/>
            </method>
            <method name="addTree" type="void" line="948">
                <params>
                    <param name="order" type="Collection"/>
                    <param name="set" type="Set"/>
                    <param name="cont" type="Container"/>
                </params>
                <scope line="949">
                    <declaration name="comp" type="Component" line="950"/>
                    <declaration name="peer" type="ComponentPeer" line="951"/>
                    <scope line="952">
                        <declaration name="window" type="Long" line="953"/>
                        <scope line="954"/>
                    </scope>
                    <scope line="959"/>
                </scope>
            </method>
            <javadoc line="964">
                DropTargetPeer implementation                
            </javadoc>
            <method name="addDropTarget" type="void" line="967">
                <params>
                    <param name="dt" type="DropTarget"/>
                </params>
                <declaration name="comp" type="Component" line="968"/>
                <scope line="969"/>
                <scope line="972">
                    <declaration name="wpeer" type="XWindowPeer" line="973"/>
                    <scope line="974"/>
                </scope>
            </method>
            <method name="removeDropTarget" type="void" line="979">
                <params>
                    <param name="dt" type="DropTarget"/>
                </params>
                <declaration name="comp" type="Component" line="980"/>
                <scope line="981"/>
                <scope line="984">
                    <declaration name="wpeer" type="XWindowPeer" line="985"/>
                    <scope line="986"/>
                </scope>
            </method>
            <javadoc line="991">
                Applies the shape to the X-window.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="applyShape" type="void" line="995">
                <params>
                    <param name="shape" type="Region"/>
                </params>
                <scope line="996">
                    <scope line="997"/>
                    <scope line="1001">
                        <scope line="1002"/>
                        <scope line="1005"/>
                    </scope>
                    <scope line="1009"/>
                </scope>
                <scope line="1013">
                    <scope line="1014"/>
                </scope>
            </method>
            <method name="updateGraphicsData" type="boolean" line="1019">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
                <declaration name="oldVisual" type="int" line="1020"/>
                <scope line="1021"/>
                <scope line="1024"/>
                <scope line="1027"/>
            </method>
        </class>
    </source>