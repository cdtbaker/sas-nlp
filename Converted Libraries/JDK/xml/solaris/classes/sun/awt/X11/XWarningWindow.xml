<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.pipe.Region"/>
        <import package="sun.awt.AWTAccessor"/>
        <import package="sun.awt.SunToolkit"/>
        <class name="XWarningWindow" line="36">
            <extends class="XWindow"/>
            <comment line="53">
                -1 - uninitialized.
                 0 - 16x16
                 1 - 24x24
                 2 - 32x32
                 3 - 48x48                
            </comment>
            <declaration name="SHOWING_DELAY" type="int" line="37"/>
            <declaration name="HIDING_DELAY" type="int" line="38"/>
            <declaration name="ownerWindow" type="Window" line="40"/>
            <declaration name="ownerPeer" type="WeakReference&amp;lt;XWindowPeer&amp;gt;" line="41"/>
            <declaration name="parentWindow" type="long" line="42"/>
            <declaration name="OWNER" type="String" line="44"/>
            <declaration name="tooltip" type="InfoWindow.Tooltip" line="45"/>
            <declaration name="currentIcon" type="int" line="47"/>
            <javadoc line="47">
                Animation stage.                
            </javadoc>
            <declaration name="currentSize" type="int" line="58"/>
            <declaration name="icons" type="XIconInfo[][]" line="59"/>
            <method name="getSecurityIconInfo" type="XIconInfo" line="60">
                <params>
                    <param name="size" type="int"/>
                    <param name="num" type="int"/>
                </params>
                <scope line="61">
                    <scope line="62">
                        <scope line="64"/>
                        <scope line="77"/>
                    </scope>
                </scope>
                <declaration name="sizeIndex" type="int" line="93"/>
            </method>
            <method name="updateIconSize" type="void" line="97">
                <comment line="115">
                    Make sure we have a valid size                    
                </comment>
                <comment line="120">
                    Note: this is not the most wise solution to use awtLock here,
                     this should have been sync&apos;ed with the stateLock. However,
                     the awtLock must be taken first (see XBaseWindow.getStateLock()),
                     and we need the awtLock anyway to update the shape of the icon.
                     So it&apos;s easier to use just one lock instead.                    
                </comment>
                <declaration name="newSize" type="int" line="98"/>
                <scope line="100">
                    <declaration name="insets" type="Insets" line="101"/>
                    <declaration name="max" type="int" line="102"/>
                    <scope line="104"/>
                    <scope line="106"/>
                    <scope line="108"/>
                    <scope line="110"/>
                </scope>
                <scope line="115"/>
                <scope line="125">
                    <scope line="126">
                        <declaration name="ico" type="XIconInfo" line="128"/>
                    </scope>
                </scope>
                <scope line="134"/>
            </method>
            <method name="getSecurityIconInfo" type="XIconInfo" line="139"/>
            <method name="XWarningWindow" type="constructor" line="144">
                <params>
                    <param name="ownerWindow" type="Window"/>
                    <param name="parentWindow" type="long"/>
                    <param name="ownerPeer" type="XWindowPeer"/>
                </params>
                <anonymous_class line="152">
                    <method name="isDisposed" type="boolean" line="153"/>
                    <method name="getBounds" type="Rectangle" line="156"/>
                    <method name="getTooltipString" type="String" line="159"/>
                </anonymous_class>
            </method>
            <method name="requestNoTaskbar" type="void" line="166">
                <declaration name="netProtocol" type="XNETProtocol" line="167"/>
                <scope line="168"/>
            </method>
            <method name="postInit" type="void" line="174">
                <params>
                    <param name="params" type="XCreateWindowParams"/>
                </params>
                <scope line="177">
                    <declaration name="parentWindow" type="long" line="181"/>
                    <declaration name="hints" type="XWMHints" line="185"/>
                </scope>
                <scope line="193"/>
            </method>
            <javadoc line="198">
                @param x,y,w,h coordinates of the untrusted window                
            </javadoc>
            <method name="reposition" type="void" line="201">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="point" type="Point2D" line="202"/>
            </method>
            <method name="getWMName" type="String" line="208"/>
            <method name="getGraphics" type="Graphics" line="212"/>
            <method name="paint" type="void" line="219">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="getWarningString" type="String" line="223"/>
            <method name="getWidth" type="int" line="227"/>
            <method name="getHeight" type="int" line="231"/>
            <method name="getBackground" type="Color" line="235"/>
            <method name="getColor" type="Color" line="238"/>
            <method name="getFont" type="Font" line="241"/>
            <method name="repaint" type="void" line="244">
                <declaration name="bounds" type="Rectangle" line="245"/>
                <declaration name="g" type="Graphics" line="246"/>
                <scope line="247"/>
                <scope line="249"/>
            </method>
            <method name="handleExposeEvent" type="void" line="255">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="xe" type="XExposeEvent" line="258"/>
                <declaration name="x" type="int" line="259"/>
                <declaration name="y" type="int" line="260"/>
                <declaration name="width" type="int" line="261"/>
                <declaration name="height" type="int" line="262"/>
                <anonymous_class line="264">
                    <method name="run" type="void" line="265">
                        <declaration name="g" type="Graphics" line="266"/>
                        <scope line="267"/>
                        <scope line="269"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="isEventDisabled" type="boolean" line="277">
                <params>
                    <param name="e" type="XEvent"/>
                </params>
            </method>
            <javadoc line="281">
                Send a synthetic UnmapNotify in order to withdraw the window.                
            </javadoc>
            <method name="withdraw" type="void" line="283">
                <declaration name="req" type="XEvent" line="284"/>
                <scope line="285">
                    <declaration name="root" type="long" line="286"/>
                    <scope line="288"/>
                    <scope line="291"/>
                    <declaration name="umev" type="XUnmapEvent" line="297"/>
                    <scope line="304"/>
                    <scope line="311"/>
                </scope>
                <scope line="314"/>
            </method>
            <method name="stateChanged" type="void" line="320">
                <params>
                    <param name="time" type="long"/>
                    <param name="oldState" type="int"/>
                    <param name="newState" type="int"/>
                </params>
                <scope line="321"/>
            </method>
            <method name="setMouseAbove" type="void" line="328">
                <params>
                    <param name="above" type="boolean"/>
                </params>
                <declaration name="p" type="XWindowPeer" line="330"/>
                <scope line="331"/>
            </method>
            <method name="enterNotify" type="void" line="337">
                <params>
                    <param name="window" type="long"/>
                </params>
                <scope line="339"/>
            </method>
            <method name="leaveNotify" type="void" line="345">
                <params>
                    <param name="window" type="long"/>
                </params>
                <scope line="347"/>
            </method>
            <method name="xSetVisible" type="void" line="353">
                <params>
                    <param name="visible" type="boolean"/>
                </params>
                <comment line="357">
                    The _NET_WM_STATE_SKIP_TASKBAR got reset upon hiding/showing,
                     so we request it every time whenever we change the visibility.                    
                </comment>
            </method>
            <declaration name="hidingTask" type="Runnable" line="361"/>
            <anonymous_class line="361">
                <method name="run" type="void" line="362"/>
            </anonymous_class>
            <declaration name="showingTask" type="Runnable" line="367"/>
            <anonymous_class line="367">
                <method name="run" type="void" line="368">
                    <scope line="369">
                        <declaration name="peer" type="XWindowPeer" line="372"/>
                        <scope line="373"/>
                    </scope>
                    <scope line="378"/>
                </method>
            </anonymous_class>
            <method name="setSecurityWarningVisible" type="void" line="385">
                <params>
                    <param name="visible" type="boolean"/>
                    <param name="doSchedule" type="boolean"/>
                </params>
                <scope line="386">
                    <scope line="389"/>
                    <scope line="391"/>
                    <scope line="394"/>
                    <scope line="396"/>
                </scope>
                <scope line="399">
                    <scope line="402"/>
                    <scope line="405"/>
                    <scope line="407"/>
                </scope>
            </method>
        </class>
    </source>