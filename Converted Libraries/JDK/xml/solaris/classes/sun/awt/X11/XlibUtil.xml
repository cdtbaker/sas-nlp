<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt.Dimension"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Set"/>
        <import package="sun.awt.X11GraphicsConfig"/>
        <import package="sun.awt.X11GraphicsDevice"/>
        <import package="sun.awt.X11GraphicsEnvironment"/>
        <class name="XlibUtil" line="45">
            <javadoc line="47">
                The constructor is made private to eliminate any
                  instances of this class                
            </javadoc>
            <method name="XlibUtil" type="constructor" line="52"/>
            <javadoc line="55">
                Xinerama-aware version of XlibWrapper.RootWindow method.                
            </javadoc>
            <method name="getRootWindow" type="long" line="59">
                <params>
                    <param name="screenNumber" type="int"/>
                </params>
                <comment line="68">
                    all the Xinerama windows share the same root window                    
                </comment>
                <scope line="62">
                    <declaration name="x11ge" type="X11GraphicsEnvironment" line="63"/>
                    <scope line="66"/>
                    <scope line="71"/>
                </scope>
                <scope line="76"/>
            </method>
            <javadoc line="81">
                Checks if the given window is a root window for the given screen                
            </javadoc>
            <method name="isRoot" type="boolean" line="85">
                <params>
                    <param name="rootCandidate" type="long"/>
                    <param name="screenNumber" type="long"/>
                </params>
                <declaration name="root" type="long" line="86"/>
                <scope line="90"/>
                <scope line="95"/>
            </method>
            <javadoc line="102">
                Returns the bounds of the given window, in absolute coordinates                
            </javadoc>
            <method name="getWindowGeometry" type="Rectangle" line="106">
                <params>
                    <param name="window" type="long"/>
                </params>
                <comment line="113">
                    root_return                    
                </comment>
                <comment line="114">
                    x_return                    
                </comment>
                <comment line="115">
                    y_return                    
                </comment>
                <comment line="116">
                    width_return                    
                </comment>
                <comment line="117">
                    height_return                    
                </comment>
                <comment line="118">
                    border_width_return                    
                </comment>
                <comment line="119">
                    depth_return                    
                </comment>
                <scope line="109">
                    <declaration name="res" type="int" line="110"/>
                    <scope line="120"/>
                    <declaration name="x" type="int" line="124"/>
                    <declaration name="y" type="int" line="125"/>
                    <declaration name="width" type="long" line="126"/>
                    <declaration name="height" type="long" line="127"/>
                </scope>
                <scope line="132"/>
            </method>
            <javadoc line="137">
                Translates the given point from one window to another. Returns
                  null if the translation is failed                
            </javadoc>
            <method name="translateCoordinates" type="Point" line="142">
                <params>
                    <param name="src" type="long"/>
                    <param name="dst" type="long"/>
                    <param name="p" type="Point"/>
                </params>
                <declaration name="translated" type="Point" line="143"/>
                <scope line="147">
                    <declaration name="xtc" type="XTranslateCoordinates" line="148"/>
                    <scope line="151">
                        <declaration name="status" type="int" line="152"/>
                        <scope line="156"/>
                    </scope>
                    <scope line="161"/>
                </scope>
                <scope line="166"/>
            </method>
            <javadoc line="173">
                Translates the given rectangle from one window to another.
                  Returns null if the translation is failed                
            </javadoc>
            <method name="translateCoordinates" type="Rectangle" line="178">
                <params>
                    <param name="src" type="long"/>
                    <param name="dst" type="long"/>
                    <param name="r" type="Rectangle"/>
                </params>
                <declaration name="translatedLoc" type="Point" line="179"/>
                <scope line="181"/>
                <scope line="185"/>
            </method>
            <javadoc line="190">
                Returns the parent for the given window                
            </javadoc>
            <method name="getParentWindow" type="long" line="194">
                <params>
                    <param name="window" type="long"/>
                </params>
                <scope line="197">
                    <declaration name="bw" type="XBaseWindow" line="198"/>
                    <scope line="200">
                        <declaration name="pbw" type="XBaseWindow" line="201"/>
                        <scope line="203"/>
                    </scope>
                    <declaration name="qt" type="XQueryTree" line="208"/>
                    <scope line="210">
                        <scope line="212"/>
                        <scope line="216"/>
                    </scope>
                    <scope line="221"/>
                </scope>
                <scope line="226"/>
            </method>
            <javadoc line="231">
                Returns all the children for the given window                
            </javadoc>
            <method name="getChildWindows" type="Set<Long>" line="235">
                <params>
                    <param name="window" type="long"/>
                </params>
                <scope line="238">
                    <declaration name="bw" type="XBaseWindow" line="239"/>
                    <scope line="241"/>
                    <declaration name="xqt" type="XQueryTree" line="245"/>
                    <scope line="247">
                        <declaration name="status" type="int" line="248"/>
                        <scope line="250"/>
                        <declaration name="children" type="long" line="254"/>
                        <scope line="257"/>
                        <declaration name="childrenCount" type="int" line="261"/>
                        <declaration name="childrenSet" type="Set&lt;Long&gt;" line="263"/>
                        <scope line="265"/>
                    </scope>
                    <scope line="272"/>
                </scope>
                <scope line="277"/>
            </method>
            <javadoc line="282">
                Checks if the given window is a Java window and is an
                  instance of XWindowPeer                
            </javadoc>
            <method name="isXAWTToplevelWindow" type="boolean" line="287">
                <params>
                    <param name="window" type="long"/>
                </params>
            </method>
            <javadoc line="291">
                NOTICE: Right now returns only decorated top-levels (not Window)                
            </javadoc>
            <method name="isToplevelWindow" type="boolean" line="295">
                <params>
                    <param name="window" type="long"/>
                </params>
                <scope line="297"/>
                <scope line="303">
                    <declaration name="wpg" type="WindowPropertyGetter" line="304"/>
                    <scope line="308">
                        <scope line="311"/>
                    </scope>
                    <scope line="316"/>
                </scope>
                <scope line="323"/>
            </method>
            <javadoc line="328">
                The same as isToplevelWindow(window), but doesn&apos;t treat
                  XEmbeddedFramePeer as toplevel.                
            </javadoc>
            <method name="isTrueToplevelWindow" type="boolean" line="333">
                <params>
                    <param name="window" type="long"/>
                </params>
                <scope line="335"/>
            </method>
            <method name="getWindowMapState" type="int" line="343">
                <params>
                    <param name="window" type="long"/>
                </params>
                <declaration name="wattr" type="XWindowAttributes" line="345"/>
                <scope line="347">
                    <declaration name="status" type="int" line="349"/>
                    <scope line="355"/>
                </scope>
                <scope line="360"/>
            </method>
            <declaration name="isShapingSupported" type="Boolean" line="368"/>
            <javadoc line="368">
                XSHAPE extension support.                
            </javadoc>
            <javadoc line="377">
                Returns whether the XSHAPE extension available                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="isShapingSupported" type="boolean" line="381">
                <scope line="383">
                    <scope line="385"/>
                    <scope line="391"/>
                </scope>
            </method>
        </class>
    </source>