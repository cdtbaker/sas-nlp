<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt.Image"/>
        <import package="java.awt.datatransfer.DataFlavor"/>
        <import package="java.awt.datatransfer.Transferable"/>
        <import package="java.awt.datatransfer.UnsupportedFlavorException"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.io.BufferedReader"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.io.IOException"/>
        <import package="java.net.URI"/>
        <import package="java.net.URISyntaxException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="javax.imageio.ImageIO"/>
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <import package="javax.imageio.ImageWriter"/>
        <import package="javax.imageio.spi.ImageWriterSpi"/>
        <import package="sun.awt.datatransfer.DataTransferer"/>
        <import package="sun.awt.datatransfer.ToolkitThreadBlockedHandler"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <class name="XDataTransferer" line="60">
            <extends class="DataTransferer"/>
            <comment line="326">
                The XDnD protocol prescribes that the Atoms used as targets for data
                 transfer should have string names that represent the corresponding MIME
                 types.
                 To meet this requirement we check if the passed native format constitutes
                 a valid MIME and return a list of flavors to which the data in this MIME
                 type can be translated by the Data Transfer subsystem.                
            </comment>
            <comment line="389">
                The XDnD protocol prescribes that the Atoms used as targets for data
                 transfer should have string names that represent the corresponding MIME
                 types.
                 To meet this requirement we return a list of formats that represent
                 MIME types to which the data in this flavor can be translated by the Data
                 Transfer subsystem.                
            </comment>
            <javadoc line="60">
                Platform-specific support for the data transfer subsystem.                
            </javadoc>
            <declaration name="FILE_NAME_ATOM" type="XAtom" line="64"/>
            <declaration name="DT_NET_FILE_ATOM" type="XAtom" line="65"/>
            <declaration name="PNG_ATOM" type="XAtom" line="66"/>
            <declaration name="JFIF_ATOM" type="XAtom" line="67"/>
            <declaration name="TARGETS_ATOM" type="XAtom" line="68"/>
            <declaration name="INCR_ATOM" type="XAtom" line="69"/>
            <declaration name="MULTIPLE_ATOM" type="XAtom" line="70"/>
            <javadoc line="72">
                Singleton constructor                
            </javadoc>
            <method name="XDataTransferer" type="constructor" line="75"/>
            <declaration name="transferer" type="XDataTransferer" line="78"/>
            <method name="getInstanceImpl" type="XDataTransferer" line="80">
                <scope line="81">
                    <scope line="82"/>
                </scope>
            </method>
            <method name="getDefaultUnicodeEncoding" type="String" line="89"/>
            <method name="isLocaleDependentTextFormat" type="boolean" line="93">
                <params>
                    <param name="format" type="long"/>
                </params>
            </method>
            <method name="isTextFormat" type="boolean" line="97">
                <params>
                    <param name="format" type="long"/>
                </params>
            </method>
            <method name="getCharsetForTextFormat" type="String" line="102">
                <params>
                    <param name="lFormat" type="Long"/>
                </params>
                <comment line="108">
                    Ignore the charset parameter of the MIME type if the subtype
                     doesn&apos;t support charset.                    
                </comment>
                <declaration name="format" type="long" line="103"/>
                <scope line="104">
                    <declaration name="nat" type="String" line="105"/>
                    <declaration name="df" type="DataFlavor" line="106"/>
                    <scope line="109"/>
                    <declaration name="charset" type="String" line="112"/>
                    <scope line="113"/>
                </scope>
            </method>
            <method name="isURIListFormat" type="boolean" line="120">
                <params>
                    <param name="format" type="long"/>
                </params>
                <comment line="132">
                    Not a MIME format.                    
                </comment>
                <declaration name="nat" type="String" line="121"/>
                <scope line="122"/>
                <scope line="125">
                    <declaration name="df" type="DataFlavor" line="126"/>
                    <scope line="127"/>
                </scope>
                <scope line="130"/>
            </method>
            <method name="isFileFormat" type="boolean" line="136">
                <params>
                    <param name="format" type="long"/>
                </params>
            </method>
            <method name="isImageFormat" type="boolean" line="141">
                <params>
                    <param name="format" type="long"/>
                </params>
            </method>
            <method name="getFormatForNativeAsLong" type="Long" line="147">
                <params>
                    <param name="str" type="String"/>
                </params>
                <comment line="149">
                    Just get the atom. If it has already been retrived
                     once, we&apos;ll get a copy so this should be very fast.                    
                </comment>
                <declaration name="atom" type="long" line="150"/>
            </method>
            <method name="getNativeForFormat" type="String" line="154">
                <params>
                    <param name="format" type="long"/>
                </params>
            </method>
            <method name="getToolkitThreadBlockedHandler" type="ToolkitThreadBlockedHandler" line="158"/>
            <javadoc line="162">
                Gets an format name for a given format (atom)                
            </javadoc>
            <method name="getTargetNameForAtom" type="String" line="165">
                <params>
                    <param name="atom" type="long"/>
                </params>
            </method>
            <method name="imageToPlatformBytes" type="byte[]" line="170">
                <params>
                    <param name="image" type="Image"/>
                    <param name="format" type="long"/>
                </params>
                <comment line="178">
                    Check if an image MIME format.                    
                </comment>
                <comment line="187">
                    Not an image MIME format.                    
                </comment>
                <declaration name="mimeType" type="String" line="171"/>
                <scope line="172"/>
                <scope line="174"/>
                <scope line="176">
                    <scope line="178">
                        <declaration name="nat" type="String" line="179"/>
                        <declaration name="df" type="DataFlavor" line="180"/>
                        <declaration name="primaryType" type="String" line="181"/>
                        <scope line="182"/>
                    </scope>
                    <scope line="185"/>
                </scope>
                <scope line="189"/>
                <scope line="191">
                    <declaration name="nativeFormat" type="String" line="192"/>
                </scope>
            </method>
            <method name="convertFileListToBytes" type="ByteArrayOutputStream" line="200">
                <params>
                    <param name="fileList" type="ArrayList<String>"/>
                </params>
                <declaration name="bos" type="ByteArrayOutputStream" line="201"/>
                <scope line="203">
                    <declaration name="bytes" type="byte[]" line="204"/>
                </scope>
            </method>
            <javadoc line="211">
                Translates either a byte array or an input stream which contain
                  platform-specific image data in the given format into an Image.                
            </javadoc>
            <method name="platformImageBytesOrStreamToImage" type="Image" line="218">
                <params>
                    <param name="inputStream" type="InputStream"/>
                    <param name="bytes" type="byte[]"/>
                    <param name="format" type="long"/>
                </params>
                <comment line="226">
                    Check if an image MIME format.                    
                </comment>
                <comment line="235">
                    Not an image MIME format.                    
                </comment>
                <declaration name="mimeType" type="String" line="219"/>
                <scope line="220"/>
                <scope line="222"/>
                <scope line="224">
                    <scope line="226">
                        <declaration name="nat" type="String" line="227"/>
                        <declaration name="df" type="DataFlavor" line="228"/>
                        <declaration name="primaryType" type="String" line="229"/>
                        <scope line="230"/>
                    </scope>
                    <scope line="233"/>
                </scope>
                <scope line="237"/>
                <scope line="239">
                    <declaration name="nativeFormat" type="String" line="240"/>
                </scope>
            </method>
            <method name="dragQueryFile" type="String[]" line="246">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
                <scope line="248"/>
                <scope line="251"/>
            </method>
            <method name="dragQueryURIs" type="URI[]" line="260">
                <params>
                    <param name="stream" type="InputStream"/>
                    <param name="bytes" type="byte[]"/>
                    <param name="format" type="long"/>
                    <param name="localeTransferable" type="Transferable"/>
                </params>
                <comment line="278">
                    Only happens when we have a custom text type.                    
                </comment>
                <declaration name="charset" type="String" line="262"/>
                <scope line="265">
                    <scope line="266"/>
                    <scope line="271"/>
                </scope>
                <scope line="273"/>
                <scope line="276"/>
                <declaration name="reader" type="BufferedReader" line="281"/>
                <scope line="282">
                    <declaration name="line" type="String" line="284"/>
                    <declaration name="uriList" type="ArrayList&lt;URI&gt;" line="285"/>
                    <declaration name="uri" type="URI" line="286"/>
                    <scope line="287">
                        <scope line="288"/>
                        <scope line="290"/>
                    </scope>
                </scope>
                <scope line="296"/>
            </method>
            <javadoc line="302">
                Returns true if and only if the name of the specified format Atom
                  constitutes a valid MIME type with the specified primary type.                
            </javadoc>
            <method name="isMimeFormat" type="boolean" line="306">
                <params>
                    <param name="format" type="long"/>
                    <param name="primaryType" type="String"/>
                </params>
                <comment line="320">
                    Not a MIME format.                    
                </comment>
                <declaration name="nat" type="String" line="307"/>
                <scope line="309"/>
                <scope line="313">
                    <declaration name="df" type="DataFlavor" line="314"/>
                    <scope line="315"/>
                </scope>
                <scope line="318"/>
            </method>
            <method name="getPlatformMappingsForNative" type="List" line="333">
                <params>
                    <param name="nat" type="String"/>
                </params>
                <comment line="346">
                    The string doesn&apos;t constitute a valid MIME type.                    
                </comment>
                <comment line="354">
                    For text formats we map natives to MIME strings instead of data
                     flavors to enable dynamic text native-to-flavor mapping generation.
                     See SystemFlavorMap.getFlavorsForNative() for details.                    
                </comment>
                <declaration name="flavors" type="List" line="334"/>
                <scope line="336"/>
                <declaration name="df" type="DataFlavor" line="340"/>
                <scope line="342"/>
                <scope line="344"/>
                <declaration name="value" type="Object" line="349"/>
                <declaration name="primaryType" type="String" line="350"/>
                <declaration name="baseType" type="String" line="351"/>
                <scope line="356"/>
                <scope line="358">
                    <declaration name="readers" type="Iterator" line="359"/>
                    <scope line="360"/>
                </scope>
            </method>
            <declaration name="defaultSpecifier" type="ImageTypeSpecifier" line="370"/>
            <method name="getDefaultImageTypeSpecifier" type="ImageTypeSpecifier" line="372">
                <scope line="373">
                    <declaration name="model" type="ColorModel" line="374"/>
                    <declaration name="raster" type="WritableRaster" line="375"/>
                    <declaration name="bufferedImage" type="BufferedImage" line="378"/>
                </scope>
            </method>
            <method name="getPlatformMappingsForFlavor" type="List" line="396">
                <params>
                    <param name="df" type="DataFlavor"/>
                </params>
                <comment line="412">
                    Add a mapping to the MIME native whenever the representation class
                     doesn&apos;t require translation.                    
                </comment>
                <comment line="444">
                    stringFlavor is semantically equivalent to the standard
                     &quot;text/plain&quot; MIME type.                    
                </comment>
                <comment line="457">
                    Add a MIME format without specified charset.                    
                </comment>
                <declaration name="natives" type="List" line="397"/>
                <scope line="399"/>
                <declaration name="charset" type="String" line="403"/>
                <declaration name="baseType" type="String" line="404"/>
                <declaration name="mimeType" type="String" line="405"/>
                <scope line="407"/>
                <scope line="416"/>
                <scope line="420">
                    <declaration name="mimeTypes" type="String[]" line="421"/>
                    <scope line="422">
                        <scope line="423">
                            <declaration name="writers" type="Iterator" line="424"/>
                            <scope line="427">
                                <declaration name="imageWriter" type="ImageWriter" line="428"/>
                                <declaration name="writerSpi" type="ImageWriterSpi" line="429"/>
                                <scope line="433"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="440">
                    <declaration name="iter" type="Iterator" line="441"/>
                    <scope line="445"/>
                    <scope line="449">
                        <declaration name="encoding" type="String" line="450"/>
                        <scope line="451"/>
                    </scope>
                    <scope line="457"/>
                </scope>
            </method>
        </class>
    </source>