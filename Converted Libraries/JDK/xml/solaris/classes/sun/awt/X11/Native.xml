<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="sun.misc.Unsafe"/>
        <import package="java.util.Vector"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <class name="Native" line="33">
            <javadoc line="33">
                This class contains the collection of utility functions to help work with
                  native data types on different platforms similarly.                
            </javadoc>
            <declaration name="unsafe" type="Unsafe" line="40"/>
            <declaration name="longSize" type="int" line="42"/>
            <declaration name="dataModel" type="int" line="44"/>
            <scope line="45">
                <anonymous_class line="48">
                    <method name="run" type="Object" line="49"/>
                </anonymous_class>
                <declaration name="dataModelProp" type="String" line="46"/>
                <scope line="53"/>
                <scope line="55"/>
                <scope line="58"/>
                <scope line="60"/>
            </scope>
            <javadoc line="65">
                Set of helper function to read data of different PLATFORM types
                  from memory pointer by &lt;code&gt;ptr&lt;/code&gt;
                  Note, names of types in function are NATIVE PLATFORM types
                  and they have the same size as they would have in C compiler
                  on the same platform.                
            </javadoc>
            <method name="getBool" type="boolean" line="73">
                <params>
                    <param name="ptr" type="long"/>
                </params>
            </method>
            <method name="getBool" type="boolean" line="74">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="putBool" type="void" line="75">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="data" type="boolean"/>
                </params>
            </method>
            <method name="putBool" type="void" line="76">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                    <param name="data" type="boolean"/>
                </params>
            </method>
            <javadoc line="79">
                Access to C byte data(one byte)                
            </javadoc>
            <method name="getByteSize" type="int" line="82"/>
            <method name="getByte" type="byte" line="83">
                <params>
                    <param name="ptr" type="long"/>
                </params>
            </method>
            <method name="getByte" type="byte" line="85">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="88">
                Stores to C byte data(one byte)                
            </javadoc>
            <method name="putByte" type="void" line="91">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="data" type="byte"/>
                </params>
            </method>
            <method name="putByte" type="void" line="93">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                    <param name="data" type="byte"/>
                </params>
            </method>
            <javadoc line="96">
                Converts length bytes of data pointed by &lt;code&gt;data&lt;/code&gt; into byte array
                  Returns null if data is zero                
                <param>
                    data native pointer to native memory                    
                </param>
                <param>
                    length size in bytes of native memory                    
                </param>
            </javadoc>
            <method name="toBytes" type="byte[]" line="102">
                <params>
                    <param name="data" type="long"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="103"/>
                <declaration name="res" type="byte[]" line="106"/>
                <scope line="107"/>
            </method>
            <javadoc line="112">
                Stores byte array into native memory and returns pointer to this memory
                  Returns 0 if bytes is null                
            </javadoc>
            <method name="toData" type="long" line="116">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
                <scope line="117"/>
                <declaration name="res" type="long" line="120"/>
                <scope line="121"/>
            </method>
            <javadoc line="127">
                Access to C unsigned byte data(one byte)                
            </javadoc>
            <method name="getUByteSize" type="int" line="130"/>
            <method name="getUByte" type="short" line="131">
                <params>
                    <param name="ptr" type="long"/>
                </params>
            </method>
            <method name="getUByte" type="short" line="133">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="137">
                Stores to C unsigned byte data(one byte)                
            </javadoc>
            <method name="putUByte" type="void" line="140">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="data" type="short"/>
                </params>
            </method>
            <method name="putUByte" type="void" line="142">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                    <param name="data" type="short"/>
                </params>
            </method>
            <javadoc line="146">
                Converts length usnigned bytes of data pointed by &lt;code&gt;data&lt;/code&gt; into
                  short array
                  Returns null if data is zero                
                <param>
                    data native pointer to native memory                    
                </param>
                <param>
                    length size in bytes of native memory                    
                </param>
            </javadoc>
            <method name="toUBytes" type="short[]" line="153">
                <params>
                    <param name="data" type="long"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="154"/>
                <declaration name="res" type="short[]" line="157"/>
                <scope line="158"/>
            </method>
            <javadoc line="163">
                Stores short array as unsigned bytes into native memory and returns pointer
                  to this memory
                  Returns 0 if bytes is null                
            </javadoc>
            <method name="toUData" type="long" line="168">
                <params>
                    <param name="bytes" type="short[]"/>
                </params>
                <scope line="169"/>
                <declaration name="res" type="long" line="172"/>
                <scope line="173"/>
            </method>
            <javadoc line="179">
                Access to C short data(two bytes)                
            </javadoc>
            <method name="getShortSize" type="int" line="182"/>
            <method name="getShort" type="short" line="183">
                <params>
                    <param name="ptr" type="long"/>
                </params>
            </method>
            <javadoc line="184">
                Stores to C short data(two bytes)                
            </javadoc>
            <method name="putShort" type="void" line="187">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="data" type="short"/>
                </params>
            </method>
            <method name="putShort" type="void" line="188">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                    <param name="data" type="short"/>
                </params>
            </method>
            <method name="toData" type="long" line="191">
                <params>
                    <param name="shorts" type="short[]"/>
                </params>
                <scope line="192"/>
                <declaration name="res" type="long" line="195"/>
                <scope line="196"/>
            </method>
            <javadoc line="202">
                Access to C unsigned short data(two bytes)                
            </javadoc>
            <method name="getUShortSize" type="int" line="205"/>
            <method name="getUShort" type="int" line="207">
                <params>
                    <param name="ptr" type="long"/>
                </params>
            </method>
            <javadoc line="208">
                Stores to C unsigned short data(two bytes)                
            </javadoc>
            <method name="putUShort" type="void" line="211">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="data" type="int"/>
                </params>
            </method>
            <method name="putUShort" type="void" line="212">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                    <param name="data" type="int"/>
                </params>
            </method>
            <javadoc line="216">
                Stores int array as unsigned shorts into native memory and returns pointer
                  to this memory
                  Returns 0 if bytes is null                
            </javadoc>
            <method name="toUData" type="long" line="221">
                <params>
                    <param name="shorts" type="int[]"/>
                </params>
                <scope line="222"/>
                <declaration name="res" type="long" line="225"/>
                <scope line="226"/>
            </method>
            <javadoc line="232">
                Access to C int data(four bytes)                
            </javadoc>
            <method name="getIntSize" type="int" line="235"/>
            <method name="getInt" type="int" line="236">
                <params>
                    <param name="ptr" type="long"/>
                </params>
            </method>
            <method name="getInt" type="int" line="237">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="238">
                Stores to C int data(four bytes)                
            </javadoc>
            <method name="putInt" type="void" line="241">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="data" type="int"/>
                </params>
            </method>
            <method name="putInt" type="void" line="242">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                    <param name="data" type="int"/>
                </params>
            </method>
            <method name="toData" type="long" line="245">
                <params>
                    <param name="ints" type="int[]"/>
                </params>
                <scope line="246"/>
                <declaration name="res" type="long" line="249"/>
                <scope line="250"/>
            </method>
            <javadoc line="256">
                Access to C unsigned int data(four bytes)                
            </javadoc>
            <method name="getUIntSize" type="int" line="259"/>
            <method name="getUInt" type="long" line="260">
                <params>
                    <param name="ptr" type="long"/>
                </params>
            </method>
            <method name="getUInt" type="long" line="261">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="262">
                Stores to C unsigned int data(four bytes)                
            </javadoc>
            <method name="putUInt" type="void" line="265">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="data" type="long"/>
                </params>
            </method>
            <method name="putUInt" type="void" line="266">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                    <param name="data" type="long"/>
                </params>
            </method>
            <javadoc line="270">
                Stores long array as unsigned intss into native memory and returns pointer
                  to this memory
                  Returns 0 if bytes is null                
            </javadoc>
            <method name="toUData" type="long" line="275">
                <params>
                    <param name="ints" type="long[]"/>
                </params>
                <scope line="276"/>
                <declaration name="res" type="long" line="279"/>
                <scope line="280"/>
            </method>
            <javadoc line="286">
                Access to C long data(size depends on platform)                
            </javadoc>
            <method name="getLongSize" type="int" line="289"/>
            <method name="getLong" type="long" line="292">
                <params>
                    <param name="ptr" type="long"/>
                </params>
                <scope line="293"/>
                <scope line="295"/>
            </method>
            <javadoc line="299">
                Stores to C long data(four bytes)
                  Note: &lt;code&gt;data&lt;/code&gt; has &lt;code&gt;long&lt;/code&gt; type
                  to be able to keep 64-bit C &lt;code&gt;long&lt;/code&gt; data                
            </javadoc>
            <method name="putLong" type="void" line="304">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="data" type="long"/>
                </params>
                <scope line="305"/>
                <scope line="307"/>
            </method>
            <method name="putLong" type="void" line="312">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                    <param name="data" type="long"/>
                </params>
            </method>
            <javadoc line="316">
                Returns index&apos;s element of the array of native long pointed by ptr                
            </javadoc>
            <method name="getLong" type="long" line="319">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="322">
                Stores Java long[] array into memory. Memory location is treated as array
                  of native &lt;code&gt;long&lt;/code&gt;s                
            </javadoc>
            <method name="put" type="void" line="326">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="arr" type="long[]"/>
                </params>
                <scope line="327"/>
            </method>
            <javadoc line="332">
                Stores Java Vector of Longs into memory. Memory location is treated as array
                  of native &lt;code&gt;long&lt;/code&gt;s                
            </javadoc>
            <method name="putLong" type="void" line="336">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="arr" type="Vector"/>
                </params>
                <scope line="337"/>
            </method>
            <javadoc line="342">
                Stores Java Vector of Longs into memory. Memory location is treated as array
                  of native &lt;code&gt;long&lt;/code&gt;s. Array is stored in reverse order                
            </javadoc>
            <method name="putLongReverse" type="void" line="346">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="arr" type="Vector"/>
                </params>
                <scope line="347"/>
            </method>
            <javadoc line="351">
                Converts length bytes of data pointed by &lt;code&gt;data&lt;/code&gt; into byte array
                  Returns null if data is zero                
                <param>
                    data native pointer to native memory                    
                </param>
                <param>
                    length size in longs(platform dependent) of native memory                    
                </param>
            </javadoc>
            <method name="toLongs" type="long[]" line="357">
                <params>
                    <param name="data" type="long"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="358"/>
                <declaration name="res" type="long[]" line="361"/>
                <scope line="362"/>
            </method>
            <method name="toData" type="long" line="367">
                <params>
                    <param name="longs" type="long[]"/>
                </params>
                <scope line="368"/>
                <declaration name="res" type="long" line="371"/>
                <scope line="372"/>
            </method>
            <javadoc line="379">
                Access to C &quot;unsigned long&quot; date type, which is XID in X                
            </javadoc>
            <method name="getULong" type="long" line="382">
                <params>
                    <param name="ptr" type="long"/>
                </params>
                <comment line="384">
                    Compensate sign-expansion                    
                </comment>
                <comment line="387">
                    Can&apos;t do anything!!!                    
                </comment>
                <scope line="383"/>
                <scope line="386"/>
            </method>
            <method name="putULong" type="void" line="392">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="value" type="long"/>
                </params>
            </method>
            <javadoc line="396">
                Allocates memory for array of native &lt;code&gt;long&lt;/code&gt;s of the size &lt;code&gt;length&lt;/code&gt;                
            </javadoc>
            <method name="allocateLongArray" type="long" line="399">
                <params>
                    <param name="length" type="int"/>
                </params>
            </method>
            <method name="getWindow" type="long" line="404">
                <params>
                    <param name="ptr" type="long"/>
                </params>
            </method>
            <method name="getWindow" type="long" line="407">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="putWindow" type="void" line="411">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="window" type="long"/>
                </params>
            </method>
            <method name="putWindow" type="void" line="415">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                    <param name="window" type="long"/>
                </params>
            </method>
            <javadoc line="419">
                Set of function to return sizes of C data of the appropriate
                  type.                
            </javadoc>
            <method name="getWindowSize" type="int" line="423"/>
            <javadoc line="428">
                Set of function to access CARD32 type. All data which types are derived
                  from CARD32 should be accessed using this accessors.
                  These types are: XID(Window, Drawable, Font, Pixmap, Cursor, Colormap, GContext, KeySym),
                  Atom, Mask, VisualID, Time                
            </javadoc>
            <method name="getCard32" type="long" line="434">
                <params>
                    <param name="ptr" type="long"/>
                </params>
            </method>
            <method name="putCard32" type="void" line="437">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="value" type="long"/>
                </params>
            </method>
            <method name="getCard32" type="long" line="440">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="putCard32" type="void" line="443">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                    <param name="value" type="long"/>
                </params>
            </method>
            <method name="getCard32Size" type="int" line="446"/>
            <method name="card32ToArray" type="long[]" line="449">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <method name="card32ToData" type="long" line="452">
                <params>
                    <param name="arr" type="long[]"/>
                </params>
            </method>
        </class>
    </source>