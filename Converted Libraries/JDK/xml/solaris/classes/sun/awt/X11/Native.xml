<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="sun.misc.Unsafe"/>
        <import package="java.util.Vector"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <class name="Native" line="6">
            <javadoc line="6">
                This class contains the collection of utility functions to help work with
                  native data types on different platforms similarly.                
            </javadoc>
            <declaration name="unsafe" type="Unsafe" line="11"/>
            <declaration name="longSize" type="int" line="12"/>
            <declaration name="dataModel" type="int" line="13"/>
            <scope line="14">
                <anonymous_class line="15">
                    <method name="run" type="Object" line="16"/>
                </anonymous_class>
                <declaration name="dataModelProp" type="String" line="15"/>
                <scope line="21"/>
                <scope line="24"/>
                <scope line="27"/>
                <scope line="30"/>
            </scope>
            <javadoc line="34">
                Set of helper function to read data of different PLATFORM types
                  from memory pointer by &lt;code&gt;ptr&lt;/code&gt;
                  Note, names of types in function are NATIVE PLATFORM types
                  and they have the same size as they would have in C compiler
                  on the same platform.                
            </javadoc>
            <method name="getBool" type="boolean" line="41">
                <params>
                    <param name="ptr" type="long"/>
                </params>
            </method>
            <method name="getBool" type="boolean" line="44">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="putBool" type="void" line="47">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="data" type="boolean"/>
                </params>
            </method>
            <method name="putBool" type="void" line="50">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                    <param name="data" type="boolean"/>
                </params>
            </method>
            <javadoc line="53">
                Access to C byte data(one byte)                
            </javadoc>
            <method name="getByteSize" type="int" line="56"/>
            <method name="getByte" type="byte" line="59">
                <params>
                    <param name="ptr" type="long"/>
                </params>
            </method>
            <method name="getByte" type="byte" line="62">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="65">
                Stores to C byte data(one byte)                
            </javadoc>
            <method name="putByte" type="void" line="68">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="data" type="byte"/>
                </params>
            </method>
            <method name="putByte" type="void" line="71">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                    <param name="data" type="byte"/>
                </params>
            </method>
            <javadoc line="74">
                Converts length bytes of data pointed by &lt;code&gt;data&lt;/code&gt; into byte array
                  Returns null if data is zero                
                <param>
                    data native pointer to native memory                    
                </param>
                <param>
                    length size in bytes of native memory                    
                </param>
            </javadoc>
            <method name="toBytes" type="byte[]" line="80">
                <params>
                    <param name="data" type="long"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="81"/>
                <declaration name="res" type="byte[]" line="84"/>
                <scope line="85"/>
            </method>
            <javadoc line="90">
                Stores byte array into native memory and returns pointer to this memory
                  Returns 0 if bytes is null                
            </javadoc>
            <method name="toData" type="long" line="94">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
                <scope line="95"/>
                <declaration name="res" type="long" line="98"/>
                <scope line="99"/>
            </method>
            <javadoc line="104">
                Access to C unsigned byte data(one byte)                
            </javadoc>
            <method name="getUByteSize" type="int" line="107"/>
            <method name="getUByte" type="short" line="110">
                <params>
                    <param name="ptr" type="long"/>
                </params>
            </method>
            <method name="getUByte" type="short" line="113">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="116">
                Stores to C unsigned byte data(one byte)                
            </javadoc>
            <method name="putUByte" type="void" line="119">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="data" type="short"/>
                </params>
            </method>
            <method name="putUByte" type="void" line="122">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                    <param name="data" type="short"/>
                </params>
            </method>
            <javadoc line="125">
                Converts length usnigned bytes of data pointed by &lt;code&gt;data&lt;/code&gt; into
                  short array
                  Returns null if data is zero                
                <param>
                    data native pointer to native memory                    
                </param>
                <param>
                    length size in bytes of native memory                    
                </param>
            </javadoc>
            <method name="toUBytes" type="short[]" line="132">
                <params>
                    <param name="data" type="long"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="133"/>
                <declaration name="res" type="short[]" line="136"/>
                <scope line="137"/>
            </method>
            <javadoc line="142">
                Stores short array as unsigned bytes into native memory and returns pointer
                  to this memory
                  Returns 0 if bytes is null                
            </javadoc>
            <method name="toUData" type="long" line="147">
                <params>
                    <param name="bytes" type="short[]"/>
                </params>
                <scope line="148"/>
                <declaration name="res" type="long" line="151"/>
                <scope line="152"/>
            </method>
            <javadoc line="157">
                Access to C short data(two bytes)                
            </javadoc>
            <method name="getShortSize" type="int" line="160"/>
            <method name="getShort" type="short" line="163">
                <params>
                    <param name="ptr" type="long"/>
                </params>
            </method>
            <javadoc line="166">
                Stores to C short data(two bytes)                
            </javadoc>
            <method name="putShort" type="void" line="169">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="data" type="short"/>
                </params>
            </method>
            <method name="putShort" type="void" line="172">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                    <param name="data" type="short"/>
                </params>
            </method>
            <method name="toData" type="long" line="175">
                <params>
                    <param name="shorts" type="short[]"/>
                </params>
                <scope line="176"/>
                <declaration name="res" type="long" line="179"/>
                <scope line="180"/>
            </method>
            <javadoc line="185">
                Access to C unsigned short data(two bytes)                
            </javadoc>
            <method name="getUShortSize" type="int" line="188"/>
            <method name="getUShort" type="int" line="191">
                <params>
                    <param name="ptr" type="long"/>
                </params>
            </method>
            <javadoc line="194">
                Stores to C unsigned short data(two bytes)                
            </javadoc>
            <method name="putUShort" type="void" line="197">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="data" type="int"/>
                </params>
            </method>
            <method name="putUShort" type="void" line="200">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                    <param name="data" type="int"/>
                </params>
            </method>
            <javadoc line="203">
                Stores int array as unsigned shorts into native memory and returns pointer
                  to this memory
                  Returns 0 if bytes is null                
            </javadoc>
            <method name="toUData" type="long" line="208">
                <params>
                    <param name="shorts" type="int[]"/>
                </params>
                <scope line="209"/>
                <declaration name="res" type="long" line="212"/>
                <scope line="213"/>
            </method>
            <javadoc line="218">
                Access to C int data(four bytes)                
            </javadoc>
            <method name="getIntSize" type="int" line="221"/>
            <method name="getInt" type="int" line="224">
                <params>
                    <param name="ptr" type="long"/>
                </params>
            </method>
            <method name="getInt" type="int" line="227">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="230">
                Stores to C int data(four bytes)                
            </javadoc>
            <method name="putInt" type="void" line="233">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="data" type="int"/>
                </params>
            </method>
            <method name="putInt" type="void" line="236">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                    <param name="data" type="int"/>
                </params>
            </method>
            <method name="toData" type="long" line="239">
                <params>
                    <param name="ints" type="int[]"/>
                </params>
                <scope line="240"/>
                <declaration name="res" type="long" line="243"/>
                <scope line="244"/>
            </method>
            <javadoc line="249">
                Access to C unsigned int data(four bytes)                
            </javadoc>
            <method name="getUIntSize" type="int" line="252"/>
            <method name="getUInt" type="long" line="255">
                <params>
                    <param name="ptr" type="long"/>
                </params>
            </method>
            <method name="getUInt" type="long" line="258">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="261">
                Stores to C unsigned int data(four bytes)                
            </javadoc>
            <method name="putUInt" type="void" line="264">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="data" type="long"/>
                </params>
            </method>
            <method name="putUInt" type="void" line="267">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                    <param name="data" type="long"/>
                </params>
            </method>
            <javadoc line="270">
                Stores long array as unsigned intss into native memory and returns pointer
                  to this memory
                  Returns 0 if bytes is null                
            </javadoc>
            <method name="toUData" type="long" line="275">
                <params>
                    <param name="ints" type="long[]"/>
                </params>
                <scope line="276"/>
                <declaration name="res" type="long" line="279"/>
                <scope line="280"/>
            </method>
            <javadoc line="285">
                Access to C long data(size depends on platform)                
            </javadoc>
            <method name="getLongSize" type="int" line="288"/>
            <method name="getLong" type="long" line="291">
                <params>
                    <param name="ptr" type="long"/>
                </params>
                <scope line="292"/>
                <scope line="295"/>
            </method>
            <javadoc line="299">
                Stores to C long data(four bytes)
                  Note: &lt;code&gt;data&lt;/code&gt; has &lt;code&gt;long&lt;/code&gt; type
                  to be able to keep 64-bit C &lt;code&gt;long&lt;/code&gt; data                
            </javadoc>
            <method name="putLong" type="void" line="304">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="data" type="long"/>
                </params>
                <scope line="305"/>
                <scope line="308"/>
            </method>
            <method name="putLong" type="void" line="312">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                    <param name="data" type="long"/>
                </params>
            </method>
            <javadoc line="315">
                Returns index&apos;s element of the array of native long pointed by ptr                
            </javadoc>
            <method name="getLong" type="long" line="318">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="321">
                Stores Java long[] array into memory. Memory location is treated as array
                  of native &lt;code&gt;long&lt;/code&gt;s                
            </javadoc>
            <method name="put" type="void" line="325">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="arr" type="long[]"/>
                </params>
                <scope line="326"/>
            </method>
            <javadoc line="330">
                Stores Java Vector of Longs into memory. Memory location is treated as array
                  of native &lt;code&gt;long&lt;/code&gt;s                
            </javadoc>
            <method name="putLong" type="void" line="334">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="arr" type="Vector"/>
                </params>
                <scope line="335"/>
            </method>
            <javadoc line="339">
                Stores Java Vector of Longs into memory. Memory location is treated as array
                  of native &lt;code&gt;long&lt;/code&gt;s. Array is stored in reverse order                
            </javadoc>
            <method name="putLongReverse" type="void" line="343">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="arr" type="Vector"/>
                </params>
                <scope line="344"/>
            </method>
            <javadoc line="348">
                Converts length bytes of data pointed by &lt;code&gt;data&lt;/code&gt; into byte array
                  Returns null if data is zero                
                <param>
                    data native pointer to native memory                    
                </param>
                <param>
                    length size in longs(platform dependent) of native memory                    
                </param>
            </javadoc>
            <method name="toLongs" type="long[]" line="354">
                <params>
                    <param name="data" type="long"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="355"/>
                <declaration name="res" type="long[]" line="358"/>
                <scope line="359"/>
            </method>
            <method name="toData" type="long" line="364">
                <params>
                    <param name="longs" type="long[]"/>
                </params>
                <scope line="365"/>
                <declaration name="res" type="long" line="368"/>
                <scope line="369"/>
            </method>
            <javadoc line="374">
                Access to C &quot;unsigned long&quot; date type, which is XID in X                
            </javadoc>
            <method name="getULong" type="long" line="377">
                <params>
                    <param name="ptr" type="long"/>
                </params>
                <scope line="378"/>
                <scope line="381"/>
            </method>
            <method name="putULong" type="void" line="385">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="value" type="long"/>
                </params>
            </method>
            <javadoc line="388">
                Allocates memory for array of native &lt;code&gt;long&lt;/code&gt;s of the size &lt;code&gt;length&lt;/code&gt;                
            </javadoc>
            <method name="allocateLongArray" type="long" line="391">
                <params>
                    <param name="length" type="int"/>
                </params>
            </method>
            <method name="getWindow" type="long" line="394">
                <params>
                    <param name="ptr" type="long"/>
                </params>
            </method>
            <method name="getWindow" type="long" line="397">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="putWindow" type="void" line="400">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="window" type="long"/>
                </params>
            </method>
            <method name="putWindow" type="void" line="403">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                    <param name="window" type="long"/>
                </params>
            </method>
            <javadoc line="406">
                Set of function to return sizes of C data of the appropriate
                  type.                
            </javadoc>
            <method name="getWindowSize" type="int" line="410"/>
            <javadoc line="413">
                Set of function to access CARD32 type. All data which types are derived
                  from CARD32 should be accessed using this accessors.
                  These types are: XID(Window, Drawable, Font, Pixmap, Cursor, Colormap, GContext, KeySym),
                  Atom, Mask, VisualID, Time                
            </javadoc>
            <method name="getCard32" type="long" line="419">
                <params>
                    <param name="ptr" type="long"/>
                </params>
            </method>
            <method name="putCard32" type="void" line="422">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="value" type="long"/>
                </params>
            </method>
            <method name="getCard32" type="long" line="425">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="putCard32" type="void" line="428">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="index" type="int"/>
                    <param name="value" type="long"/>
                </params>
            </method>
            <method name="getCard32Size" type="int" line="431"/>
            <method name="card32ToArray" type="long[]" line="434">
                <params>
                    <param name="ptr" type="long"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <method name="card32ToData" type="long" line="437">
                <params>
                    <param name="arr" type="long[]"/>
                </params>
            </method>
        </class>
    </source>