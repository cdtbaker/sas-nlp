<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="java.awt.image.ImageProducer"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="java.awt.peer"/>
        <import package="sun.java2d.pipe.Region"/>
        <import package="sun.awt"/>
        <import package="sun.awt.motif.MToolkit"/>
        <import package="sun.awt.motif.X11FontMetrics"/>
        <class name="XEmbedChildProxyPeer" line="40">
            <implements interface="ComponentPeer"/>
            <implements interface="XEventDispatcher"/>
            <declaration name="container" type="XEmbeddingContainer" line="41"/>
            <declaration name="proxy" type="XEmbedChildProxy" line="42"/>
            <declaration name="handle" type="long" line="43"/>
            <method name="XEmbedChildProxyPeer" type="constructor" line="44">
                <params>
                    <param name="proxy" type="XEmbedChildProxy"/>
                </params>
            </method>
            <method name="initDispatching" type="void" line="51">
                <scope line="53"/>
                <scope line="58"/>
            </method>
            <method name="isObscured" type="boolean" line="63"/>
            <method name="canDetermineObscurity" type="boolean" line="64"/>
            <method name="setVisible" type="void" line="65">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="66">
                    <scope line="68"/>
                    <scope line="71"/>
                </scope>
                <scope line="74">
                    <scope line="76"/>
                    <scope line="79"/>
                </scope>
            </method>
            <method name="setEnabled" type="void" line="84">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <method name="paint" type="void" line="85">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <method name="repaint" type="void" line="86">
                <params>
                    <param name="tm" type="long"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="print" type="void" line="87">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <method name="setBounds" type="void" line="88">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="op" type="int"/>
                </params>
                <comment line="89">
                    Unimplemeneted: Check for min/max hints for non-resizable                    
                </comment>
                <scope line="91"/>
                <scope line="94"/>
            </method>
            <method name="handleEvent" type="void" line="98">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="110"/>
            </method>
            <method name="coalescePaintEvent" type="void" line="116">
                <params>
                    <param name="e" type="PaintEvent"/>
                </params>
            </method>
            <method name="getLocationOnScreen" type="Point" line="117">
                <declaration name="attr" type="XWindowAttributes" line="118"/>
                <scope line="120"/>
                <scope line="123"/>
            </method>
            <method name="getPreferredSize" type="Dimension" line="128">
                <declaration name="p_hints" type="long" line="130"/>
                <scope line="131">
                    <declaration name="hints" type="XSizeHints" line="132"/>
                    <declaration name="res" type="Dimension" line="134"/>
                </scope>
                <scope line="136"/>
            </method>
            <method name="getMinimumSize" type="Dimension" line="141">
                <declaration name="p_hints" type="long" line="143"/>
                <scope line="144">
                    <declaration name="hints" type="XSizeHints" line="145"/>
                    <declaration name="res" type="Dimension" line="147"/>
                </scope>
                <scope line="149"/>
            </method>
            <method name="getColorModel" type="ColorModel" line="154"/>
            <method name="getToolkit" type="Toolkit" line="155"/>
            <method name="getGraphics" type="Graphics" line="157"/>
            <method name="getFontMetrics" type="FontMetrics" line="158">
                <params>
                    <param name="font" type="Font"/>
                </params>
            </method>
            <method name="dispose" type="void" line="159"/>
            <method name="setForeground" type="void" line="162">
                <params>
                    <param name="c" type="Color"/>
                </params>
            </method>
            <method name="setBackground" type="void" line="163">
                <params>
                    <param name="c" type="Color"/>
                </params>
            </method>
            <method name="setFont" type="void" line="164">
                <params>
                    <param name="f" type="Font"/>
                </params>
            </method>
            <method name="updateCursorImmediately" type="void" line="165"/>
            <method name="postEvent" type="void" line="167">
                <params>
                    <param name="event" type="AWTEvent"/>
                </params>
            </method>
            <method name="simulateMotifRequestFocus" type="boolean" line="173">
                <params>
                    <param name="lightweightChild" type="Component"/>
                    <param name="temporary" type="boolean"/>
                    <param name="focusedWindowChangeAllowed" type="boolean"/>
                    <param name="time" type="long"/>
                </params>
                <comment line="187">
                    TODO: do we need to wrap in sequenced?                    
                </comment>
                <comment line="192">
                    End of Motif compatibility code                    
                </comment>
                <scope line="174"/>
                <declaration name="currentOwner" type="Component" line="177"/>
                <scope line="178"/>
                <declaration name="fg" type="FocusEvent" line="181"/>
                <declaration name="fl" type="FocusEvent" line="182"/>
                <scope line="183"/>
                <scope line="188"/>
            </method>
            <method name="requestFocus" type="boolean" line="201">
                <params>
                    <param name="lightweightChild" type="Component"/>
                    <param name="temporary" type="boolean"/>
                    <param name="focusedWindowChangeAllowed" type="boolean"/>
                    <param name="time" type="long"/>
                    <param name="cause" type="CausedFocusEvent.Cause"/>
                </params>
                <comment line="210">
                    Currently we just generate focus events like we deal with lightweight instead of calling                    
                </comment>
                <comment line="211">
                    XSetInputFocus on native window                    
                </comment>
                <comment line="213">
                    The problems with requests in non-focused window arise because shouldNativelyFocusHeavyweight
                     checks that native window is focused while appropriate WINDOW_GAINED_FOCUS has not yet
                     been processed - it is in EventQueue. Thus, SNFH allows native request and stores request record
                     in requests list - and it breaks our requests sequence as first record on WGF should be the last focus
                     owner which had focus before WLF. So, we should not add request record for such requests
                     but store this component in mostRecent - and return true as before for compatibility.                    
                </comment>
                <comment line="222">
                    Search for parent window                    
                </comment>
                <comment line="228">
                    and check that it is focused                    
                </comment>
                <comment line="230">
                    if it is not - skip requesting focus on Solaris                    
                </comment>
                <comment line="231">
                    but return true for compatibility.                    
                </comment>
                <comment line="236">
                    NOTE: We simulate heavyweight behavior of Motif - component receives focus right                    
                </comment>
                <comment line="237">
                    after request, not after event. Normally, we should better listen for event                    
                </comment>
                <comment line="238">
                    by listeners.                    
                </comment>
                <comment line="240">
                    TODO: consider replacing with XKeyboardFocusManagerPeer.deliverFocus                    
                </comment>
                <comment line="242">
                    Motif compatibility code                    
                </comment>
                <comment line="244">
                    Either lightweight or excessive requiest - all events are generated.                    
                </comment>
                <declaration name="result" type="int" line="202"/>
                <declaration name="parent" type="Container" line="221"/>
                <scope line="223"/>
                <scope line="226">
                    <declaration name="parentWindow" type="Window" line="227"/>
                    <scope line="229"/>
                </scope>
            </method>
            <method name="isFocusable" type="boolean" line="249"/>
            <method name="createImage" type="Image" line="253">
                <params>
                    <param name="producer" type="ImageProducer"/>
                </params>
            </method>
            <method name="createImage" type="Image" line="254">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="createVolatileImage" type="VolatileImage" line="255">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="prepareImage" type="boolean" line="256">
                <params>
                    <param name="img" type="Image"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="o" type="ImageObserver"/>
                </params>
            </method>
            <method name="checkImage" type="int" line="257">
                <params>
                    <param name="img" type="Image"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="o" type="ImageObserver"/>
                </params>
            </method>
            <method name="getGraphicsConfiguration" type="GraphicsConfiguration" line="258"/>
            <method name="handlesWheelScrolling" type="boolean" line="259"/>
            <method name="createBuffers" type="void" line="261">
                <params>
                    <param name="numBuffers" type="int"/>
                    <param name="caps" type="BufferCapabilities"/>
                </params>
            </method>
            <method name="getBackBuffer" type="Image" line="262"/>
            <method name="flip" type="void" line="263">
                <params>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                    <param name="flipAction" type="BufferCapabilities.FlipContents"/>
                </params>
            </method>
            <method name="destroyBuffers" type="void" line="264"/>
            <javadoc line="266">
                Used by lightweight implementations to tell a ComponentPeer to layout
                  its sub-elements.  For instance, a lightweight Checkbox needs to layout
                  the box, as well as the text label.                
            </javadoc>
            <method name="layout" type="void" line="271"/>
            <javadoc line="273">
                DEPRECATED:  Replaced by getPreferredSize().                
            </javadoc>
            <method name="preferredSize" type="Dimension" line="276"/>
            <javadoc line="280">
                DEPRECATED:  Replaced by getMinimumSize().                
            </javadoc>
            <method name="minimumSize" type="Dimension" line="283"/>
            <javadoc line="287">
                DEPRECATED:  Replaced by setVisible(boolean).                
            </javadoc>
            <method name="show" type="void" line="290"/>
            <javadoc line="294">
                DEPRECATED:  Replaced by setVisible(boolean).                
            </javadoc>
            <method name="hide" type="void" line="297"/>
            <javadoc line="301">
                DEPRECATED:  Replaced by setEnabled(boolean).                
            </javadoc>
            <method name="enable" type="void" line="304"/>
            <javadoc line="306">
                DEPRECATED:  Replaced by setEnabled(boolean).                
            </javadoc>
            <method name="disable" type="void" line="309"/>
            <javadoc line="311">
                DEPRECATED:  Replaced by setBounds(int, int, int, int).                
            </javadoc>
            <method name="reshape" type="void" line="314">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="getTopLevel" type="Window" line="318">
                <params>
                    <param name="comp" type="Component"/>
                </params>
                <scope line="319"/>
            </method>
            <method name="childResized" type="void" line="325">
                <comment line="328">
                    XToolkit.postEvent(XToolkit.targetToAppContext(proxy), new InvocationEvent(proxy, new Runnable() {                    
                </comment>
                <comment line="329">
                    public void run() {                    
                </comment>
                <comment line="330">
                    getTopLevel(proxy).invalidate();                    
                </comment>
                <comment line="331">
                    getTopLevel(proxy).pack();                    
                </comment>
                <comment line="332">
                    }                    
                </comment>
                <comment line="333">
                    }));                    
                </comment>
            </method>
            <method name="handlePropertyNotify" type="void" line="335">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="ev" type="XPropertyEvent" line="336"/>
                <scope line="337"/>
            </method>
            <method name="handleConfigureNotify" type="void" line="341">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
            </method>
            <method name="dispatchEvent" type="void" line="344">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="type" type="int" line="345"/>
            </method>
            <method name="requestXEmbedFocus" type="void" line="356">
                <anonymous_class line="357">
                    <method name="run" type="void" line="358"/>
                </anonymous_class>
            </method>
            <method name="reparent" type="void" line="364">
                <params>
                    <param name="newNativeParent" type="ContainerPeer"/>
                </params>
            </method>
            <method name="isReparentSupported" type="boolean" line="366"/>
            <method name="getBounds" type="Rectangle" line="369">
                <declaration name="attrs" type="XWindowAttributes" line="370"/>
                <scope line="372"/>
                <scope line="375"/>
            </method>
            <method name="setBoundsOperation" type="void" line="380">
                <params>
                    <param name="operation" type="int"/>
                </params>
            </method>
            <method name="applyShape" type="void" line="383">
                <params>
                    <param name="shape" type="Region"/>
                </params>
            </method>
            <method name="setZOrder" type="void" line="386">
                <params>
                    <param name="above" type="ComponentPeer"/>
                </params>
            </method>
            <method name="updateGraphicsData" type="boolean" line="389">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
        </class>
    </source>