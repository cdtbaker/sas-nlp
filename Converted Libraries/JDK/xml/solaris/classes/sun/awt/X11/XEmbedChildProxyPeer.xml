<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.X11">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="java.awt.image.ImageProducer"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="java.awt.peer"/>
        <import package="sun.java2d.pipe.Region"/>
        <import package="sun.awt"/>
        <import package="sun.awt.motif.MToolkit"/>
        <import package="sun.awt.motif.X11FontMetrics"/>
        <class name="XEmbedChildProxyPeer" line="13">
            <implements interface="ComponentPeer"/>
            <implements interface="XEventDispatcher"/>
            <declaration name="container" type="XEmbeddingContainer" line="14"/>
            <declaration name="proxy" type="XEmbedChildProxy" line="15"/>
            <declaration name="handle" type="long" line="16"/>
            <method name="XEmbedChildProxyPeer" type="constructor" line="17">
                <params>
                    <param name="proxy" type="XEmbedChildProxy"/>
                </params>
            </method>
            <method name="initDispatching" type="void" line="23">
                <scope line="25"/>
                <scope line="29"/>
            </method>
            <method name="isObscured" type="boolean" line="34"/>
            <method name="canDetermineObscurity" type="boolean" line="37"/>
            <method name="setVisible" type="void" line="40">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="41">
                    <scope line="43"/>
                    <scope line="46"/>
                </scope>
                <scope line="50">
                    <scope line="52"/>
                    <scope line="55"/>
                </scope>
            </method>
            <method name="setEnabled" type="void" line="60">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <method name="paint" type="void" line="62">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <method name="repaint" type="void" line="64">
                <params>
                    <param name="tm" type="long"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="print" type="void" line="66">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <method name="setBounds" type="void" line="68">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="op" type="int"/>
                </params>
                <scope line="70"/>
                <scope line="73"/>
            </method>
            <method name="handleEvent" type="void" line="77">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="89"/>
            </method>
            <method name="coalescePaintEvent" type="void" line="95">
                <params>
                    <param name="e" type="PaintEvent"/>
                </params>
            </method>
            <method name="getLocationOnScreen" type="Point" line="97">
                <declaration name="attr" type="XWindowAttributes" line="98"/>
                <scope line="100"/>
                <scope line="104"/>
            </method>
            <method name="getPreferredSize" type="Dimension" line="109">
                <declaration name="p_hints" type="long" line="111"/>
                <scope line="112">
                    <declaration name="hints" type="XSizeHints" line="113"/>
                    <declaration name="res" type="Dimension" line="115"/>
                </scope>
                <scope line="118"/>
            </method>
            <method name="getMinimumSize" type="Dimension" line="123">
                <declaration name="p_hints" type="long" line="125"/>
                <scope line="126">
                    <declaration name="hints" type="XSizeHints" line="127"/>
                    <declaration name="res" type="Dimension" line="129"/>
                </scope>
                <scope line="132"/>
            </method>
            <method name="getColorModel" type="ColorModel" line="137"/>
            <method name="getToolkit" type="Toolkit" line="140"/>
            <method name="getGraphics" type="Graphics" line="143"/>
            <method name="getFontMetrics" type="FontMetrics" line="146">
                <params>
                    <param name="font" type="Font"/>
                </params>
            </method>
            <method name="dispose" type="void" line="149"/>
            <method name="setForeground" type="void" line="152">
                <params>
                    <param name="c" type="Color"/>
                </params>
            </method>
            <method name="setBackground" type="void" line="154">
                <params>
                    <param name="c" type="Color"/>
                </params>
            </method>
            <method name="setFont" type="void" line="156">
                <params>
                    <param name="f" type="Font"/>
                </params>
            </method>
            <method name="updateCursorImmediately" type="void" line="158"/>
            <method name="postEvent" type="void" line="160">
                <params>
                    <param name="event" type="AWTEvent"/>
                </params>
            </method>
            <method name="simulateMotifRequestFocus" type="boolean" line="163">
                <params>
                    <param name="lightweightChild" type="Component"/>
                    <param name="temporary" type="boolean"/>
                    <param name="focusedWindowChangeAllowed" type="boolean"/>
                    <param name="time" type="long"/>
                </params>
                <scope line="164"/>
                <declaration name="currentOwner" type="Component" line="167"/>
                <scope line="168"/>
                <declaration name="fg" type="FocusEvent" line="171"/>
                <declaration name="fl" type="FocusEvent" line="172"/>
                <scope line="173"/>
                <scope line="176"/>
            </method>
            <method name="requestFocus" type="boolean" line="182">
                <params>
                    <param name="lightweightChild" type="Component"/>
                    <param name="temporary" type="boolean"/>
                    <param name="focusedWindowChangeAllowed" type="boolean"/>
                    <param name="time" type="long"/>
                    <param name="cause" type="CausedFocusEvent.Cause"/>
                </params>
                <declaration name="result" type="int" line="183"/>
                <declaration name="parent" type="Container" line="188"/>
                <scope line="189"/>
                <scope line="192">
                    <declaration name="parentWindow" type="Window" line="193"/>
                    <scope line="194"/>
                </scope>
            </method>
            <method name="isFocusable" type="boolean" line="204"/>
            <method name="createImage" type="Image" line="207">
                <params>
                    <param name="producer" type="ImageProducer"/>
                </params>
            </method>
            <method name="createImage" type="Image" line="210">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="createVolatileImage" type="VolatileImage" line="213">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="prepareImage" type="boolean" line="216">
                <params>
                    <param name="img" type="Image"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="o" type="ImageObserver"/>
                </params>
            </method>
            <method name="checkImage" type="int" line="219">
                <params>
                    <param name="img" type="Image"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="o" type="ImageObserver"/>
                </params>
            </method>
            <method name="getGraphicsConfiguration" type="GraphicsConfiguration" line="222"/>
            <method name="handlesWheelScrolling" type="boolean" line="225"/>
            <method name="createBuffers" type="void" line="228">
                <params>
                    <param name="numBuffers" type="int"/>
                    <param name="caps" type="BufferCapabilities"/>
                </params>
            </method>
            <method name="getBackBuffer" type="Image" line="230"/>
            <method name="flip" type="void" line="233">
                <params>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                    <param name="flipAction" type="BufferCapabilities.FlipContents"/>
                </params>
            </method>
            <method name="destroyBuffers" type="void" line="235"/>
            <javadoc line="237">
                Used by lightweight implementations to tell a ComponentPeer to layout
                  its sub-elements.  For instance, a lightweight Checkbox needs to layout
                  the box, as well as the text label.                
            </javadoc>
            <method name="layout" type="void" line="242"/>
            <javadoc line="244">
                DEPRECATED:  Replaced by getPreferredSize().                
            </javadoc>
            <method name="preferredSize" type="Dimension" line="247"/>
            <javadoc line="250">
                DEPRECATED:  Replaced by getMinimumSize().                
            </javadoc>
            <method name="minimumSize" type="Dimension" line="253"/>
            <javadoc line="256">
                DEPRECATED:  Replaced by setVisible(boolean).                
            </javadoc>
            <method name="show" type="void" line="259"/>
            <javadoc line="262">
                DEPRECATED:  Replaced by setVisible(boolean).                
            </javadoc>
            <method name="hide" type="void" line="265"/>
            <javadoc line="268">
                DEPRECATED:  Replaced by setEnabled(boolean).                
            </javadoc>
            <method name="enable" type="void" line="271"/>
            <javadoc line="273">
                DEPRECATED:  Replaced by setEnabled(boolean).                
            </javadoc>
            <method name="disable" type="void" line="276"/>
            <javadoc line="278">
                DEPRECATED:  Replaced by setBounds(int, int, int, int).                
            </javadoc>
            <method name="reshape" type="void" line="281">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="getTopLevel" type="Window" line="284">
                <params>
                    <param name="comp" type="Component"/>
                </params>
                <scope line="285"/>
            </method>
            <method name="childResized" type="void" line="290"/>
            <method name="handlePropertyNotify" type="void" line="294">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="ev" type="XPropertyEvent" line="295"/>
                <scope line="296"/>
            </method>
            <method name="handleConfigureNotify" type="void" line="300">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
            </method>
            <method name="dispatchEvent" type="void" line="303">
                <params>
                    <param name="xev" type="XEvent"/>
                </params>
                <declaration name="type" type="int" line="304"/>
            </method>
            <method name="requestXEmbedFocus" type="void" line="314">
                <anonymous_class line="315">
                    <method name="run" type="void" line="316"/>
                </anonymous_class>
            </method>
            <method name="reparent" type="void" line="322">
                <params>
                    <param name="newNativeParent" type="ContainerPeer"/>
                </params>
            </method>
            <method name="isReparentSupported" type="boolean" line="324"/>
            <method name="getBounds" type="Rectangle" line="327">
                <declaration name="attrs" type="XWindowAttributes" line="328"/>
                <scope line="330"/>
                <scope line="334"/>
            </method>
            <method name="setBoundsOperation" type="void" line="339">
                <params>
                    <param name="operation" type="int"/>
                </params>
            </method>
            <method name="applyShape" type="void" line="341">
                <params>
                    <param name="shape" type="Region"/>
                </params>
            </method>
            <method name="setZOrder" type="void" line="343">
                <params>
                    <param name="above" type="ComponentPeer"/>
                </params>
            </method>
            <method name="updateGraphicsData" type="boolean" line="345">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
        </class>
    </source>