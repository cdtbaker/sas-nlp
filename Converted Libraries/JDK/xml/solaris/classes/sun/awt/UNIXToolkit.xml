<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt">
        <import package="java.awt.RenderingHints"/>
        <import package="java.awt.RenderingHints"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.image"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="sun.security.action.GetIntegerAction"/>
        <import package="com.sun.java.swing.plaf.gtk.GTKConstants.TextDirection"/>
        <import package="sun.java2d.opengl.OGLRenderQueue"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <class name="UNIXToolkit" line="12">
            <extends class="SunToolkit"/>
            <declaration name="GTK_LOCK" type="Object" line="13"/>
            <javadoc line="13">
                All calls into GTK should be synchronized on this lock                
            </javadoc>
            <declaration name="BAND_OFFSETS" type="int[]" line="17"/>
            <declaration name="BAND_OFFSETS_ALPHA" type="int[]" line="18"/>
            <declaration name="DEFAULT_DATATRANSFER_TIMEOUT" type="int" line="19"/>
            <declaration name="nativeGTKAvailable" type="Boolean" line="20"/>
            <declaration name="nativeGTKLoaded" type="Boolean" line="21"/>
            <declaration name="tmpImage" type="BufferedImage" line="22"/>
            <method name="getDatatransferTimeout" type="int" line="23">
                <declaration name="dt" type="Integer" line="24"/>
                <scope line="25"/>
                <scope line="28"/>
            </method>
            <javadoc line="32">
                Returns true if the native GTK libraries are capable of being
                  loaded and are expected to work properly, false otherwise.  Note
                  that this method will not leave the native GTK libraries loaded if
                  they haven&apos;t already been loaded.  This allows, for example, Swing&apos;s
                  GTK L&amp;F to test for the presence of native GTK support without
                  leaving the native libraries loaded.  To attempt long-term loading
                  of the native GTK libraries, use the loadGTK() method instead.                
            </javadoc>
            <method name="isNativeGTKAvailable" type="boolean" line="41">
                <scope line="42">
                    <scope line="43"/>
                    <scope line="46"/>
                    <scope line="49">
                        <declaration name="success" type="boolean" line="50"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="56">
                Loads the GTK libraries, if necessary.  The first time this method
                  is called, it will attempt to load the native GTK library.  If
                  successful, it leaves the library open and returns true; otherwise,
                  the library is left closed and returns false.  On future calls to
                  this method, the status of the first attempt is returned (a simple
                  lightweight boolean check, no native calls required).                
            </javadoc>
            <method name="loadGTK" type="boolean" line="64">
                <scope line="65">
                    <scope line="66">
                        <declaration name="success" type="boolean" line="67"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="73">
                Overridden to handle GTK icon loading                
            </javadoc>
            <method name="lazilyLoadDesktopProperty" type="Object" line="76">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="77"/>
            </method>
            <javadoc line="82">
                Load a native Gtk stock icon.                
                <param>
                    longname a desktop property name. This contains icon name, size
                      and orientation, e.g. <code>"gtk.icon.gtk-add.4.rtl"</code>                    
                </param>
                <return>
                    an <code>Image</code> for the icon, or <code>null</code> if the
                      icon could not be loaded                    
                </return>
            </javadoc>
            <method name="lazilyLoadGTKIcon" type="Object" line="89">
                <params>
                    <param name="longname" type="String"/>
                </params>
                <declaration name="result" type="Object" line="90"/>
                <scope line="91"/>
                <declaration name="str" type="String" line="94"/>
                <scope line="95"/>
                <declaration name="size" type="int" line="98"/>
                <scope line="99"/>
                <scope line="102"/>
                <declaration name="dir" type="TextDirection" line="105"/>
                <declaration name="img" type="BufferedImage" line="106"/>
                <scope line="107"/>
            </method>
            <javadoc line="112">
                Returns a BufferedImage which contains the Gtk icon requested.  If no
                  such icon exists or an error occurs loading the icon the result will
                  be null.                
                <param>
                    filename                    
                </param>
                <return>
                    The icon or null if it was not found or loaded.                    
                </return>
            </javadoc>
            <method name="getGTKIcon" type="BufferedImage" line="119">
                <params>
                    <param name="filename" type="String"/>
                </params>
                <scope line="120"/>
                <scope line="123">
                    <scope line="124">
                        <scope line="125"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="132">
                Returns a BufferedImage which contains the Gtk stock icon requested.
                  If no such stock icon exists the result will be null.                
                <param>
                    widgetType one of WidgetType values defined in GTKNativeEngine or
                      -1 for system default stock icon.                    
                </param>
                <param>
                    stockId String which defines the stock id of the gtk item.
                      For a complete list reference the API at www.gtk.org for StockItems.                    
                </param>
                <param>
                    iconSize One of the GtkIconSize values defined in GTKConstants                    
                </param>
                <param>
                    textDirection One of the TextDirection values defined in
                      GTKConstants                    
                </param>
                <param>
                    detail Render detail that is passed to the native engine (feel
                      free to pass null)                    
                </param>
                <return>
                    The stock icon or null if it was not found or loaded.                    
                </return>
            </javadoc>
            <method name="getStockIcon" type="BufferedImage" line="146">
                <params>
                    <param name="widgetType" type="int"/>
                    <param name="stockId" type="String"/>
                    <param name="iconSize" type="int"/>
                    <param name="direction" type="int"/>
                    <param name="detail" type="String"/>
                </params>
                <scope line="147"/>
                <scope line="150">
                    <scope line="151">
                        <scope line="152"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="159">
                This method is used by JNI as a callback from load_stock_icon.
                  Image data is passed back to us via this method and loaded into the
                  local BufferedImage and then returned via getStockIcon.
                  Do NOT call this method directly.                
            </javadoc>
            <method name="loadIconCallback" type="void" line="165">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="rowStride" type="int"/>
                    <param name="bps" type="int"/>
                    <param name="channels" type="int"/>
                    <param name="alpha" type="boolean"/>
                </params>
                <declaration name="dataBuf" type="DataBuffer" line="167"/>
                <declaration name="raster" type="WritableRaster" line="168"/>
                <declaration name="colorModel" type="ColorModel" line="169"/>
            </method>
            <method name="check_gtk" type="boolean" line="172"/>
            <method name="load_gtk" type="boolean" line="173"/>
            <method name="unload_gtk" type="boolean" line="174"/>
            <method name="load_gtk_icon" type="boolean" line="175"/>
            <method name="load_stock_icon" type="boolean" line="176"/>
            <method name="nativeSync" type="void" line="177"/>
            <method name="sync" type="void" line="178"/>
            <declaration name="FONTCONFIGAAHINT" type="String" line="182"/>
            <method name="getDesktopAAHints" type="RenderingHints" line="183">
                <declaration name="aaValue" type="Object" line="184"/>
                <scope line="185">
                    <scope line="187"/>
                    <scope line="190"/>
                </scope>
                <declaration name="aa" type="boolean" line="194"/>
                <declaration name="aaHint" type="Object" line="195"/>
                <scope line="196">
                    <declaration name="subpixOrder" type="String" line="197"/>
                    <scope line="198"/>
                    <scope line="201"/>
                    <scope line="204"/>
                    <scope line="207"/>
                    <scope line="210"/>
                    <scope line="213"/>
                </scope>
                <scope line="217"/>
            </method>
            <method name="gtkCheckVersionImpl" type="boolean" line="222"/>
            <javadoc line="223">
                Returns {@code true} if the GTK+ library is compatible with the given
                  version.                
                <param>
                    majorThe required major version.                    
                </param>
                <param>
                    minorThe required minor version.                    
                </param>
                <param>
                    microThe required micro version.                    
                </param>
                <return>
                    {@code true} if the GTK+ library is compatible with the given
                      version.                    
                </return>
            </javadoc>
            <method name="checkGtkVersion" type="boolean" line="232">
                <params>
                    <param name="major" type="int"/>
                    <param name="minor" type="int"/>
                    <param name="micro" type="int"/>
                </params>
                <scope line="233"/>
            </method>
        </class>
    </source>