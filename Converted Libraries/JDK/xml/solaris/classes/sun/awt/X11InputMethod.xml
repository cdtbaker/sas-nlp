<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt">
        <import package="java.util.Collections"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <import package="java.awt.AWTEvent"/>
        <import package="java.awt.AWTException"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.EventQueue"/>
        <import package="java.awt.Window"/>
        <import package="java.awt.im.InputContext"/>
        <import package="java.awt.im.InputMethodHighlight"/>
        <import package="java.awt.im.spi.InputMethodContext"/>
        <import package="sun.awt.im.InputMethodAdapter"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.event.FocusEvent"/>
        <import package="java.awt.event.ComponentEvent"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.awt.event.InputMethodEvent"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.awt.font.TextHitInfo"/>
        <import package="java.awt.peer.ComponentPeer"/>
        <import package="java.lang.Character.Subset"/>
        <import package="java.text.AttributedString"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="java.io.File"/>
        <import package="java.io.FileReader"/>
        <import package="java.io.BufferedReader"/>
        <import package="java.io.IOException"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.regex.Pattern"/>
        <class name="X11InputMethod" line="36">
            <extends class="InputMethodAdapter"/>
            <javadoc line="36">
                Input Method Adapter for XIM                
                <author>
                    JavaSoft International                    
                </author>
            </javadoc>
            <declaration name="log" type="PlatformLogger" line="41"/>
            <declaration name="XIMReverse" type="int" line="42"/>
            <declaration name="XIMUnderline" type="int" line="43"/>
            <declaration name="XIMHighlight" type="int" line="44"/>
            <declaration name="XIMPrimary" type="int" line="45"/>
            <declaration name="XIMSecondary" type="int" line="46"/>
            <declaration name="XIMTertiary" type="int" line="47"/>
            <declaration name="XIMVisibleToForward" type="int" line="48"/>
            <declaration name="XIMVisibleToBackward" type="int" line="49"/>
            <declaration name="XIMVisibleCenter" type="int" line="50"/>
            <declaration name="XIMVisibleMask" type="int" line="51"/>
            <declaration name="locale" type="Locale" line="52"/>
            <declaration name="isXIMOpened" type="boolean" line="53"/>
            <declaration name="clientComponentWindow" type="Container" line="54"/>
            <declaration name="awtFocussedComponent" type="Component" line="55"/>
            <declaration name="lastXICFocussedComponent" type="Component" line="56"/>
            <declaration name="isLastXICActive" type="boolean" line="57"/>
            <declaration name="isLastTemporary" type="boolean" line="58"/>
            <declaration name="isActive" type="boolean" line="59"/>
            <declaration name="isActiveClient" type="boolean" line="60"/>
            <declaration name="highlightStyles" type="Map[]" line="61"/>
            <declaration name="disposed" type="boolean" line="62"/>
            <declaration name="needResetXIC" type="boolean" line="63"/>
            <declaration name="needResetXICClient" type="Component" line="64"/>
            <declaration name="compositionEnableSupported" type="boolean" line="65"/>
            <declaration name="savedCompositionState" type="boolean" line="66"/>
            <declaration name="committedText" type="String" line="67"/>
            <declaration name="composedText" type="StringBuffer" line="68"/>
            <declaration name="rawFeedbacks" type="IntBuffer" line="69"/>
            <declaration name="pData" type="long" line="70"/>
            <scope line="71">
                <declaration name="styles" type="Map" line="72"/>
                <declaration name="map" type="HashMap" line="73"/>
            </scope>
            <scope line="88"/>
            <method name="initIDs" type="void" line="91"/>
            <javadoc line="91">
                Initialize JNI field and method IDs for fields that may be
                  accessed from C.                
            </javadoc>
            <javadoc line="96">
                Constructs an X11InputMethod instance. It initializes the XIM
                  environment if it&apos;s not done yet.                
                <exception>
                    AWTException if XOpenIM() failed.                    
                </exception>
            </javadoc>
            <method name="X11InputMethod" type="constructor" line="101">
                <scope line="103"/>
            </method>
            <method name="finalize" type="void" line="107"/>
            <javadoc line="111">
                Invokes openIM() that invokes XOpenIM() if it&apos;s not opened yet.                
                <return>
                    true if openXIM() is successful or it's already been opened.                    
                </return>
            </javadoc>
            <method name="initXIM" type="boolean" line="115"/>
            <method name="openXIM" type="boolean" line="119"/>
            <method name="isDisposed" type="boolean" line="120"/>
            <method name="setXICFocus" type="void" line="123"/>
            <javadoc line="124">
                Does nothing - this adapter doesn&apos;t use the input method context.                
                <see>
                    java.awt.im.spi.InputMethod#setInputMethodContext                    
                </see>
            </javadoc>
            <method name="setInputMethodContext" type="void" line="128">
                <params>
                    <param name="context" type="InputMethodContext"/>
                </params>
            </method>
            <javadoc line="130">
                Set locale to input. If input method doesn&apos;t support specified locale,
                  false will be returned and its behavior is not changed.                
                <param>
                    lang locale to input                    
                </param>
                <return>
                    the true is returned when specified locale is supported.                    
                </return>
            </javadoc>
            <method name="setLocale" type="boolean" line="136">
                <params>
                    <param name="lang" type="Locale"/>
                </params>
                <scope line="137"/>
                <scope line="140"/>
            </method>
            <javadoc line="145">
                Returns current input locale.                
            </javadoc>
            <method name="getLocale" type="Locale" line="148"/>
            <javadoc line="151">
                Does nothing - XIM doesn&apos;t let you specify which characters you expect.                
                <see>
                    java.awt.im.spi.InputMethod#setCharacterSubsets                    
                </see>
            </javadoc>
            <method name="setCharacterSubsets" type="void" line="155">
                <params>
                    <param name="subsets" type="Subset[]"/>
                </params>
            </method>
            <javadoc line="157">
                Dispatch event to input method. InputContext dispatch event with this
                  method. Input method set consume flag if event is consumed in
                  input method.                
                <param>
                    e event                    
                </param>
            </javadoc>
            <method name="dispatchEvent" type="void" line="163">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
            </method>
            <method name="resetXICifneeded" type="void" line="165">
                <scope line="166"/>
            </method>
            <javadoc line="174">
                Reset the composition state to the current composition state.                
            </javadoc>
            <method name="resetCompositionState" type="void" line="177">
                <scope line="178">
                    <scope line="179"/>
                    <scope line="182"/>
                </scope>
            </method>
            <javadoc line="187">
                Query and then return the current composition state.                
                <returns>
                    the composition state if isCompositionEnabled call
                      is successful. Otherwise, it returns false.                    
                </returns>
            </javadoc>
            <method name="getCompositionState" type="boolean" line="192">
                <declaration name="compositionState" type="boolean" line="193"/>
                <scope line="194">
                    <scope line="195"/>
                    <scope line="198"/>
                </scope>
            </method>
            <javadoc line="204">
                Activate input method.                
            </javadoc>
            <method name="activate" type="void" line="207">
                <scope line="210"/>
                <scope line="213">
                    <scope line="214"/>
                </scope>
                <declaration name="lastXICFocussedComponentPeer" type="ComponentPeer" line="220"/>
                <declaration name="awtFocussedComponentPeer" type="ComponentPeer" line="221"/>
                <scope line="222"/>
                <scope line="225">
                    <scope line="226"/>
                    <scope line="229"/>
                </scope>
            </method>
            <method name="createXIC" type="boolean" line="238"/>
            <javadoc line="239">
                Deactivate input method.                
            </javadoc>
            <method name="deactivate" type="void" line="242">
                <params>
                    <param name="isTemporary" type="boolean"/>
                </params>
                <declaration name="isAc" type="boolean" line="243"/>
                <scope line="245"/>
            </method>
            <javadoc line="253">
                Explicitly disable the native IME. Native IME is not disabled when
                  deactivate is called.                
            </javadoc>
            <method name="disableInputMethod" type="void" line="257">
                <scope line="258"/>
            </method>
            <method name="hideWindows" type="void" line="264"/>
            <javadoc line="266">
                @see java.awt.Toolkit#mapInputMethodHighlight                
            </javadoc>
            <method name="mapInputMethodHighlight" type="Map" line="269">
                <params>
                    <param name="highlight" type="InputMethodHighlight"/>
                </params>
                <declaration name="index" type="int" line="270"/>
                <declaration name="state" type="int" line="271"/>
                <scope line="272"/>
                <scope line="275"/>
                <scope line="278"/>
                <scope line="281"/>
            </method>
            <javadoc line="286">
                @see sun.awt.im.InputMethodAdapter#setAWTFocussedComponent                
            </javadoc>
            <method name="setAWTFocussedComponent" type="void" line="289">
                <params>
                    <param name="component" type="Component"/>
                </params>
                <scope line="290"/>
                <scope line="293">
                    <declaration name="ac" type="boolean" line="294"/>
                </scope>
            </method>
            <javadoc line="300">
                @see sun.awt.im.InputMethodAdapter#stopListening                
            </javadoc>
            <method name="stopListening" type="void" line="303">
                <scope line="306"/>
            </method>
            <javadoc line="312">
                Returns the Window instance in which the client component is
                  contained. If not found, null is returned. (IS THIS POSSIBLE?)                
            </javadoc>
            <method name="getClientComponentWindow" type="Window" line="316">
                <declaration name="client" type="Component" line="317"/>
                <declaration name="container" type="Container" line="318"/>
                <scope line="319"/>
                <scope line="322"/>
                <scope line="325"/>
            </method>
            <method name="getParent" type="Container" line="330"/>
            <method name="getPeer" type="ComponentPeer" line="331"/>
            <javadoc line="331">
                Returns peer of the given client component. If the given client component
                  doesn&apos;t have peer, peer of the native container of the client is returned.                
            </javadoc>
            <method name="awtLock" type="void" line="336"/>
            <javadoc line="336">
                Used to protect preedit data                
            </javadoc>
            <method name="awtUnlock" type="void" line="340"/>
            <javadoc line="341">
                Creates an input method event from the arguments given
                  and posts it on the AWT event queue. For arguments,
                  see InputMethodEvent. Called by input method.                
                <see>
                    java.awt.event.InputMethodEvent#InputMethodEvent                    
                </see>
            </javadoc>
            <method name="postInputMethodEvent" type="void" line="347">
                <params>
                    <param name="id" type="int"/>
                    <param name="text" type="AttributedCharacterIterator"/>
                    <param name="committedCharacterCount" type="int"/>
                    <param name="caret" type="TextHitInfo"/>
                    <param name="visiblePosition" type="TextHitInfo"/>
                    <param name="when" type="long"/>
                </params>
                <declaration name="source" type="Component" line="348"/>
                <scope line="349">
                    <declaration name="event" type="InputMethodEvent" line="350"/>
                </scope>
            </method>
            <method name="postInputMethodEvent" type="void" line="354">
                <params>
                    <param name="id" type="int"/>
                    <param name="text" type="AttributedCharacterIterator"/>
                    <param name="committedCharacterCount" type="int"/>
                    <param name="caret" type="TextHitInfo"/>
                    <param name="visiblePosition" type="TextHitInfo"/>
                </params>
            </method>
            <javadoc line="357">
                Dispatches committed text from XIM to the awt event queue. This
                  method is invoked from the event handler in canvas.c in the
                  AWT Toolkit thread context and thus inside the AWT Lock.                
                <param>
                    str     committed text                    
                </param>
                <param>
                    long    when                    
                </param>
            </javadoc>
            <method name="dispatchCommittedText" type="void" line="364">
                <params>
                    <param name="str" type="String"/>
                    <param name="when" type="long"/>
                </params>
                <scope line="366">
                    <declaration name="attrstr" type="AttributedString" line="367"/>
                </scope>
                <scope line="370"/>
            </method>
            <method name="dispatchCommittedText" type="void" line="374">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="377">
                Updates composed text with XIM preedit information and
                  posts composed text to the awt event queue. The args of
                  this method correspond to the XIM preedit callback
                  information. The XIM highlight attributes are translated via
                  fixed mapping (i.e., independent from any underlying input
                  method engine). This method is invoked in the AWT Toolkit
                  (X event loop) thread context and thus inside the AWT Lock.                
            </javadoc>
            <method name="dispatchComposedText" type="void" line="386">
                <params>
                    <param name="chgText" type="String"/>
                    <param name="chgStyles" type="int"/>
                    <param name="chgOffset" type="int"/>
                    <param name="chgLength" type="int"/>
                    <param name="caretPosition" type="int"/>
                    <param name="when" type="long"/>
                </params>
                <scope line="387"/>
                <scope line="391"/>
                <scope line="395">
                    <scope line="396"/>
                    <scope line="399">
                        <scope line="400"/>
                        <scope line="404">
                            <scope line="405">
                                <scope line="406">
                                    <declaration name="text" type="String" line="407"/>
                                </scope>
                                <scope line="412"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="420"/>
                <scope line="424">
                    <scope line="427"/>
                </scope>
                <declaration name="composedOffset" type="int" line="435"/>
                <declaration name="inputText" type="AttributedString" line="436"/>
                <scope line="437"/>
                <scope line="442"/>
                <declaration name="currentFeedback" type="int" line="446"/>
                <declaration name="nextFeedback" type="int" line="447"/>
                <declaration name="startOffset" type="int" line="448"/>
                <declaration name="currentOffset" type="int" line="449"/>
                <declaration name="visiblePosition" type="int" line="450"/>
                <declaration name="visiblePositionInfo" type="TextHitInfo" line="451"/>
                <scope line="455">
                    <scope line="456">
                        <scope line="458">
                            <declaration name="index" type="int" line="459"/>
                        </scope>
                    </scope>
                    <scope line="465"/>
                </scope>
                <scope line="474"/>
            </method>
            <javadoc line="479">
                Flushes composed and committed text held in this context.
                  This method is invoked in the AWT Toolkit (X event loop) thread context
                  and thus inside the AWT Lock.                
            </javadoc>
            <method name="flushText" type="void" line="484">
                <declaration name="flush" type="String" line="485"/>
                <scope line="486"/>
                <scope line="489">
                    <declaration name="attrstr" type="AttributedString" line="490"/>
                </scope>
            </method>
            <method name="disposeImpl" type="void" line="496"/>
            <javadoc line="506">
                Frees all X Window resources associated with this object.                
                <see>
                    java.awt.im.spi.InputMethod#dispose                    
                </see>
            </javadoc>
            <method name="dispose" type="void" line="510">
                <declaration name="call_disposeImpl" type="boolean" line="511"/>
                <scope line="512">
                    <scope line="513">
                        <scope line="514"/>
                    </scope>
                </scope>
                <scope line="519"/>
            </method>
            <javadoc line="523">
                Returns null.                
                <see>
                    java.awt.im.spi.InputMethod#getControlObject                    
                </see>
            </javadoc>
            <method name="getControlObject" type="Object" line="527"/>
            <javadoc line="530">
                @see java.awt.im.spi.InputMethod#removeNotify                
            </javadoc>
            <method name="removeNotify" type="void" line="533"/>
            <javadoc line="536">
                @see java.awt.im.spi.InputMethod#setCompositionEnabled(boolean)                
            </javadoc>
            <method name="setCompositionEnabled" type="void" line="539">
                <params>
                    <param name="enable" type="boolean"/>
                </params>
                <scope line="540"/>
            </method>
            <javadoc line="544">
                @see java.awt.im.spi.InputMethod#isCompositionEnabled                
            </javadoc>
            <method name="isCompositionEnabled" type="boolean" line="547"/>
            <javadoc line="550">
                Ends any input composition that may currently be going on in this
                  context. Depending on the platform and possibly user preferences,
                  this may commit or delete uncommitted text. Any changes to the text
                  are communicated to the active component using an input method event.
                  &lt;p&gt;
                  A text editing component may call this in a variety of situations,
                  for example, when the user moves the insertion point within the text
                  (but outside the composed text), or when the component&apos;s text is
                  saved to a file or copied to the clipboard.                
            </javadoc>
            <method name="endComposition" type="void" line="561">
                <scope line="562"/>
                <declaration name="active" type="boolean" line="566"/>
                <scope line="567"/>
                <declaration name="text" type="String" line="572"/>
                <scope line="573"/>
                <scope line="579"/>
                <scope line="583"/>
            </method>
            <javadoc line="587">
                Returns a string with information about the current input method server, or null.
                  On both Linux &amp; SunOS, the value of environment variable XMODIFIERS is
                  returned if set. Otherwise, on SunOS, $HOME/.dtprofile will be parsed
                  to find out the language service engine (atok or wnn) since there is
                  no API in Xlib which returns the information of native
                  IM server or language service and we want to try our best to return as much
                  information as possible.
                  Note: This method could return null on Linux if XMODIFIERS is not set properly or
                  if any IOException is thrown.
                  See man page of XSetLocaleModifiers(3X11) for the usgae of XMODIFIERS,
                  atok12setup(1) and wnn6setup(1) for the information written to
                  $HOME/.dtprofile when you run these two commands.                
            </javadoc>
            <method name="getNativeInputMethodInfo" type="String" line="601">
                <declaration name="xmodifiers" type="String" line="602"/>
                <declaration name="imInfo" type="String" line="603"/>
                <scope line="604">
                    <declaration name="imIndex" type="int" line="605"/>
                    <scope line="606"/>
                </scope>
                <scope line="610">
                    <declaration name="dtprofile" type="File" line="611"/>
                    <declaration name="languageEngineInfo" type="String" line="612"/>
                    <scope line="613">
                        <declaration name="br" type="BufferedReader" line="614"/>
                        <declaration name="line" type="String" line="615"/>
                        <scope line="616">
                            <scope line="617">
                                <declaration name="tokens" type="StringTokenizer" line="618"/>
                                <scope line="619">
                                    <declaration name="token" type="String" line="620"/>
                                    <scope line="621"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="630"/>
                </scope>
            </method>
            <javadoc line="637">
                Performs mapping from an XIM visible feedback value to Java IM highlight.                
                <return>
                    Java input method highlight                    
                </return>
            </javadoc>
            <method name="convertVisualFeedbackToHighlight" type="InputMethodHighlight" line="641">
                <params>
                    <param name="feedback" type="int"/>
                </params>
                <declaration name="highlight" type="InputMethodHighlight" line="642"/>
            </method>
            <declaration name="INITIAL_SIZE" type="int" line="668"/>
            <class name="IntBuffer" line="669">
                <javadoc line="669">
                    IntBuffer is an inner class that manipulates an int array and
                      provides UNIX file io stream-like programming interfaces to
                      access it. (An alternative would be to use ArrayList which may
                      be too expensive for the work.)                    
                </javadoc>
                <declaration name="intArray" type="int[]" line="676"/>
                <declaration name="size" type="int" line="677"/>
                <declaration name="index" type="int" line="678"/>
                <method name="IntBuffer" type="constructor" line="679">
                    <params>
                        <param name="initialCapacity" type="int"/>
                    </params>
                </method>
                <method name="insert" type="void" line="684">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="values" type="int[]"/>
                    </params>
                    <declaration name="newSize" type="int" line="685"/>
                    <scope line="686">
                        <declaration name="newIntArray" type="int[]" line="687"/>
                    </scope>
                </method>
                <method name="remove" type="void" line="696">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <method name="replace" type="void" line="701">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="values" type="int[]"/>
                    </params>
                </method>
                <method name="removeAll" type="void" line="704"/>
                <method name="rewind" type="void" line="708"/>
                <method name="getNext" type="int" line="711"/>
                <method name="unget" type="void" line="715"/>
                <method name="getOffset" type="int" line="718"/>
                <method name="toString" type="String" line="721">
                    <declaration name="s" type="StringBuffer" line="722"/>
                    <scope line="723"/>
                </method>
            </class>
            <method name="resetXIC" type="String" line="730"/>
            <method name="disposeXIC" type="void" line="731"/>
            <method name="setCompositionEnabledNative" type="boolean" line="732"/>
            <method name="isCompositionEnabledNative" type="boolean" line="733"/>
            <method name="turnoffStatusWindow" type="void" line="734"/>
        </class>
    </source>