<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt">
        <import package="java.util.Collections"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <import package="java.awt.AWTEvent"/>
        <import package="java.awt.AWTException"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.EventQueue"/>
        <import package="java.awt.Window"/>
        <import package="java.awt.im.InputContext"/>
        <import package="java.awt.im.InputMethodHighlight"/>
        <import package="java.awt.im.spi.InputMethodContext"/>
        <import package="sun.awt.im.InputMethodAdapter"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.event.FocusEvent"/>
        <import package="java.awt.event.ComponentEvent"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.awt.event.InputMethodEvent"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.awt.font.TextHitInfo"/>
        <import package="java.awt.peer.ComponentPeer"/>
        <import package="java.lang.Character.Subset"/>
        <import package="java.text.AttributedString"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="java.io.File"/>
        <import package="java.io.FileReader"/>
        <import package="java.io.BufferedReader"/>
        <import package="java.io.IOException"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.regex.Pattern"/>
        <class name="X11InputMethod" line="65">
            <extends class="InputMethodAdapter"/>
            <comment line="73">
                The following XIM values must be the same as those defined in
                 Xlib.h                
            </comment>
            <comment line="84">
                visible position values                
            </comment>
            <comment line="106">
                reset the XIC if necessary                
            </comment>
            <comment line="110">
                The use of compositionEnableSupported is to reduce unnecessary                
            </comment>
            <comment line="111">
                native calls if set/isCompositionEnabled                
            </comment>
            <comment line="112">
                throws UnsupportedOperationException.                
            </comment>
            <comment line="113">
                It is set to false if that exception is thrown first time                
            </comment>
            <comment line="114">
                either of the two methods are called.                
            </comment>
            <comment line="116">
                The savedCompositionState indicates the composition mode when                
            </comment>
            <comment line="117">
                endComposition or setCompositionEnabled is called. It doesn&apos;t always                
            </comment>
            <comment line="118">
                reflect the actual composition state because it doesn&apos;t get updated                
            </comment>
            <comment line="119">
                when the user changes the composition state through direct interaction                
            </comment>
            <comment line="120">
                with the input method. It is used to save the composition mode when                
            </comment>
            <comment line="121">
                focus is traversed across different client components sharing the                
            </comment>
            <comment line="122">
                same java input context. Also if set/isCompositionEnabled are not                
            </comment>
            <comment line="123">
                supported, it remains false.                
            </comment>
            <comment line="126">
                variables to keep track of preedit context.                
            </comment>
            <comment line="127">
                these variables need to be accessed within AWT_LOCK/UNLOCK                
            </comment>
            <comment line="132">
                private data (X11InputMethodData structure defined in                
            </comment>
            <comment line="133">
                awt_InputMethod.c) for native methods                
            </comment>
            <comment line="134">
                this structure needs to be accessed within AWT_LOCK/UNLOCK                
            </comment>
            <comment line="135">
                accessed by native                
            </comment>
            <comment line="137">
                Initialize highlight mapping table                
            </comment>
            <comment line="422">
                implements java.awt.im.spi.InputMethod.hideWindows                
            </comment>
            <comment line="772">
                Subclasses should override disposeImpl() instead of dispose(). Client
                 code should always invoke dispose(), never disposeImpl().                
            </comment>
            <comment line="1008">
                initial capacity size for string buffer, etc.                
            </comment>
            <comment line="1091">
                Native methods                
            </comment>
            <javadoc line="65">
                Input Method Adapter for XIM                
                <author>
                    JavaSoft International                    
                </author>
            </javadoc>
            <declaration name="log" type="PlatformLogger" line="71"/>
            <declaration name="XIMReverse" type="int" line="76"/>
            <declaration name="XIMUnderline" type="int" line="77"/>
            <declaration name="XIMHighlight" type="int" line="78"/>
            <declaration name="XIMPrimary" type="int" line="79"/>
            <declaration name="XIMSecondary" type="int" line="80"/>
            <declaration name="XIMTertiary" type="int" line="81"/>
            <declaration name="XIMVisibleToForward" type="int" line="86"/>
            <declaration name="XIMVisibleToBackward" type="int" line="87"/>
            <declaration name="XIMVisibleCenter" type="int" line="88"/>
            <declaration name="XIMVisibleMask" type="int" line="89"/>
            <declaration name="locale" type="Locale" line="93"/>
            <declaration name="isXIMOpened" type="boolean" line="94"/>
            <declaration name="clientComponentWindow" type="Container" line="95"/>
            <declaration name="awtFocussedComponent" type="Component" line="96"/>
            <declaration name="lastXICFocussedComponent" type="Component" line="97"/>
            <declaration name="isLastXICActive" type="boolean" line="98"/>
            <declaration name="isLastTemporary" type="boolean" line="99"/>
            <declaration name="isActive" type="boolean" line="100"/>
            <declaration name="isActiveClient" type="boolean" line="101"/>
            <declaration name="highlightStyles" type="Map[]" line="102"/>
            <declaration name="disposed" type="boolean" line="103"/>
            <declaration name="needResetXIC" type="boolean" line="106"/>
            <declaration name="needResetXICClient" type="Component" line="107"/>
            <declaration name="compositionEnableSupported" type="boolean" line="114"/>
            <declaration name="savedCompositionState" type="boolean" line="123"/>
            <declaration name="committedText" type="String" line="127"/>
            <declaration name="composedText" type="StringBuffer" line="128"/>
            <declaration name="rawFeedbacks" type="IntBuffer" line="129"/>
            <declaration name="pData" type="long" line="134"/>
            <scope line="137">
                <declaration name="styles" type="Map" line="138"/>
                <declaration name="map" type="HashMap" line="139"/>
            </scope>
            <scope line="168"/>
            <method name="initIDs" type="void" line="172"/>
            <javadoc line="172">
                Initialize JNI field and method IDs for fields that may be
                  accessed from C.                
            </javadoc>
            <javadoc line="178">
                Constructs an X11InputMethod instance. It initializes the XIM
                  environment if it&apos;s not done yet.                
                <exception>
                    AWTException if XOpenIM() failed.                    
                </exception>
            </javadoc>
            <method name="X11InputMethod" type="constructor" line="184">
                <comment line="185">
                    supports only the locale in which the VM is started                    
                </comment>
                <scope line="187"/>
            </method>
            <method name="finalize" type="void" line="192"/>
            <javadoc line="197">
                Invokes openIM() that invokes XOpenIM() if it&apos;s not opened yet.                
                <return>
                    true if openXIM() is successful or it's already been opened.                    
                </return>
            </javadoc>
            <method name="initXIM" type="boolean" line="201"/>
            <method name="openXIM" type="boolean" line="207"/>
            <method name="isDisposed" type="boolean" line="209"/>
            <method name="setXICFocus" type="void" line="213"/>
            <javadoc line="216">
                Does nothing - this adapter doesn&apos;t use the input method context.                
                <see>
                    java.awt.im.spi.InputMethod#setInputMethodContext                    
                </see>
            </javadoc>
            <method name="setInputMethodContext" type="void" line="221">
                <params>
                    <param name="context" type="InputMethodContext"/>
                </params>
            </method>
            <javadoc line="224">
                Set locale to input. If input method doesn&apos;t support specified locale,
                  false will be returned and its behavior is not changed.                
                <param>
                    lang locale to input                    
                </param>
                <return>
                    the true is returned when specified locale is supported.                    
                </return>
            </javadoc>
            <method name="setLocale" type="boolean" line="231">
                <params>
                    <param name="lang" type="Locale"/>
                </params>
                <comment line="235">
                    special compatibility rule for Japanese and Korean                    
                </comment>
                <scope line="232"/>
                <scope line="237"/>
            </method>
            <javadoc line="243">
                Returns current input locale.                
            </javadoc>
            <method name="getLocale" type="Locale" line="246"/>
            <javadoc line="250">
                Does nothing - XIM doesn&apos;t let you specify which characters you expect.                
                <see>
                    java.awt.im.spi.InputMethod#setCharacterSubsets                    
                </see>
            </javadoc>
            <method name="setCharacterSubsets" type="void" line="255">
                <params>
                    <param name="subsets" type="Subset[]"/>
                </params>
            </method>
            <javadoc line="258">
                Dispatch event to input method. InputContext dispatch event with this
                  method. Input method set consume flag if event is consumed in
                  input method.                
                <param>
                    e event                    
                </param>
            </javadoc>
            <method name="dispatchEvent" type="void" line="265">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
            </method>
            <method name="resetXICifneeded" type="void" line="269">
                <comment line="270">
                    needResetXIC is used to indicate whether to call
                    resetXIC on the active client. resetXIC will always be
                    called on the passive client when endComposition is called.                    
                </comment>
                <comment line="278">
                    needs to reset the last xic focussed component.                    
                </comment>
                <scope line="275"/>
            </method>
            <javadoc line="287">
                Reset the composition state to the current composition state.                
            </javadoc>
            <method name="resetCompositionState" type="void" line="290">
                <comment line="293">
                    Restore the composition mode to the last saved composition                    
                </comment>
                <scope line="291">
                    <scope line="292"/>
                    <scope line="296"/>
                </scope>
            </method>
            <javadoc line="302">
                Query and then return the current composition state.                
                <returns>
                    the composition state if isCompositionEnabled call
                      is successful. Otherwise, it returns false.                    
                </returns>
            </javadoc>
            <method name="getCompositionState" type="boolean" line="307">
                <declaration name="compositionState" type="boolean" line="308"/>
                <scope line="309">
                    <scope line="310"/>
                    <scope line="312"/>
                </scope>
            </method>
            <javadoc line="319">
                Activate input method.                
            </javadoc>
            <method name="activate" type="void" line="322">
                <comment line="339">
                    reset input context if necessary and set the XIC focus                    
                </comment>
                <comment line="349">
                    If the last XIC focussed component has a different peer as the
                    current focussed component, change the XIC focus to the newly
                    focussed component.                    
                </comment>
                <scope line="327"/>
                <scope line="332">
                    <scope line="333"/>
                </scope>
                <declaration name="lastXICFocussedComponentPeer" type="ComponentPeer" line="342"/>
                <declaration name="awtFocussedComponentPeer" type="ComponentPeer" line="343"/>
                <scope line="345"/>
                <scope line="354">
                    <scope line="355"/>
                    <scope line="358"/>
                </scope>
            </method>
            <method name="createXIC" type="boolean" line="368"/>
            <javadoc line="370">
                Deactivate input method.                
            </javadoc>
            <method name="deactivate" type="void" line="373">
                <params>
                    <param name="isTemporary" type="boolean"/>
                </params>
                <comment line="375">
                    Usually as the client component, let&apos;s call it component A,
                    loses the focus, this method is called. Then when another client
                    component, let&apos;s call it component B,  gets the focus, activate is first called on
                    the previous focused compoent which is A, then endComposition is called on A,
                    deactivate is called on A again. And finally activate is called on the newly
                    focused component B. Here is the call sequence.
                    
                    A loses focus               B gains focus
                    -------------&gt; deactivate A -------------&gt; activate A -&gt; endComposition A -&gt;
                    deactivate A -&gt; activate B ----....
                    
                    So in order to carry the composition mode across the components sharing the same
                    input context, we save it when deactivate is called so that when activate is
                    called, it can be restored correctly till activate is called on the newly focused
                    component. (See also sunawtimInputContext and bug 6184471).
                    Last note, getCompositionState should be called before setXICFocus since
                    setXICFocus here sets the XIC to 0.                    
                </comment>
                <comment line="396">
                    turn the status window off...                    
                </comment>
                <comment line="400">
                    Delay resetting the XIC focus until activate is called and the newly
                    focussed component has a different peer as the last focussed component.                    
                </comment>
                <declaration name="isAc" type="boolean" line="374"/>
                <scope line="395"/>
            </method>
            <javadoc line="409">
                Explicitly disable the native IME. Native IME is not disabled when
                  deactivate is called.                
            </javadoc>
            <method name="disableInputMethod" type="void" line="413">
                <scope line="414"/>
            </method>
            <method name="hideWindows" type="void" line="422">
                <comment line="423">
                    ??? need real implementation                    
                </comment>
            </method>
            <javadoc line="426">
                @see java.awt.Toolkit#mapInputMethodHighlight                
            </javadoc>
            <method name="mapInputMethodHighlight" type="Map" line="429">
                <params>
                    <param name="highlight" type="InputMethodHighlight"/>
                </params>
                <declaration name="index" type="int" line="430"/>
                <declaration name="state" type="int" line="431"/>
                <scope line="432"/>
                <scope line="434"/>
                <scope line="436"/>
                <scope line="439"/>
            </method>
            <javadoc line="445">
                @see sun.awt.im.InputMethodAdapter#setAWTFocussedComponent                
            </javadoc>
            <method name="setAWTFocussedComponent" type="void" line="448">
                <params>
                    <param name="component" type="Component"/>
                </params>
                <comment line="453">
                    deactivate/activate are being suppressed during a focus change -                    
                </comment>
                <comment line="454">
                    this may happen when an input method window is made visible                    
                </comment>
                <scope line="449"/>
                <scope line="452">
                    <declaration name="ac" type="boolean" line="455"/>
                </scope>
            </method>
            <javadoc line="462">
                @see sun.awt.im.InputMethodAdapter#stopListening                
            </javadoc>
            <method name="stopListening" type="void" line="465">
                <comment line="466">
                    It is desirable to disable XIM by calling XSetICValues with                    
                </comment>
                <comment line="467">
                    XNPreeditState == XIMPreeditDisable.  But Solaris 2.6 and                    
                </comment>
                <comment line="468">
                    Solaris 7 do not implement this correctly without a patch,                    
                </comment>
                <comment line="469">
                    so just call resetXIC here.  Prior endComposition call commits                    
                </comment>
                <comment line="470">
                    the existing composed text.                    
                </comment>
                <comment line="472">
                    disable the native input method so that the other input                    
                </comment>
                <comment line="473">
                    method could get the input focus.                    
                </comment>
                <scope line="475"/>
            </method>
            <javadoc line="482">
                Returns the Window instance in which the client component is
                  contained. If not found, null is returned. (IS THIS POSSIBLE?)                
            </javadoc>
            <method name="getClientComponentWindow" type="Window" line="488">
                <comment line="486">
                    NOTE: This method may be called by privileged threads.                    
                </comment>
                <comment line="487">
                    DO NOT INVOKE CLIENT CODE ON THIS THREAD!                    
                </comment>
                <declaration name="client" type="Component" line="489"/>
                <declaration name="container" type="Container" line="490"/>
                <scope line="492"/>
                <scope line="494"/>
                <scope line="498"/>
            </method>
            <method name="getParent" type="Container" line="504"/>
            <method name="getPeer" type="ComponentPeer" line="506"/>
            <javadoc line="506">
                Returns peer of the given client component. If the given client component
                  doesn&apos;t have peer, peer of the native container of the client is returned.                
            </javadoc>
            <method name="awtLock" type="void" line="512"/>
            <javadoc line="512">
                Used to protect preedit data                
            </javadoc>
            <method name="awtUnlock" type="void" line="516"/>
            <javadoc line="518">
                Creates an input method event from the arguments given
                  and posts it on the AWT event queue. For arguments,
                  see InputMethodEvent. Called by input method.                
                <see>
                    java.awt.event.InputMethodEvent#InputMethodEvent                    
                </see>
            </javadoc>
            <method name="postInputMethodEvent" type="void" line="530">
                <params>
                    <param name="id" type="int"/>
                    <param name="text" type="AttributedCharacterIterator"/>
                    <param name="committedCharacterCount" type="int"/>
                    <param name="caret" type="TextHitInfo"/>
                    <param name="visiblePosition" type="TextHitInfo"/>
                    <param name="when" type="long"/>
                </params>
                <declaration name="source" type="Component" line="531"/>
                <scope line="532">
                    <declaration name="event" type="InputMethodEvent" line="533"/>
                </scope>
            </method>
            <method name="postInputMethodEvent" type="void" line="543">
                <params>
                    <param name="id" type="int"/>
                    <param name="text" type="AttributedCharacterIterator"/>
                    <param name="committedCharacterCount" type="int"/>
                    <param name="caret" type="TextHitInfo"/>
                    <param name="visiblePosition" type="TextHitInfo"/>
                </params>
            </method>
            <javadoc line="548">
                Dispatches committed text from XIM to the awt event queue. This
                  method is invoked from the event handler in canvas.c in the
                  AWT Toolkit thread context and thus inside the AWT Lock.                
                <param>
                    str     committed text                    
                </param>
                <param>
                    long    when                    
                </param>
            </javadoc>
            <method name="dispatchCommittedText" type="void" line="559">
                <params>
                    <param name="str" type="String"/>
                    <param name="when" type="long"/>
                </params>
                <comment line="555">
                    NOTE: This method may be called by privileged threads.                    
                </comment>
                <comment line="556">
                    This functionality is implemented in a package-private method                    
                </comment>
                <comment line="557">
                    to insure that it cannot be overridden by client subclasses.                    
                </comment>
                <comment line="558">
                    DO NOT INVOKE CLIENT CODE ON THIS THREAD!                    
                </comment>
                <comment line="572">
                    if there is composed text, wait until the preedit                    
                </comment>
                <comment line="573">
                    callback is invoked.                    
                </comment>
                <scope line="563">
                    <declaration name="attrstr" type="AttributedString" line="564"/>
                </scope>
                <scope line="571"/>
            </method>
            <method name="dispatchCommittedText" type="void" line="578">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="582">
                Updates composed text with XIM preedit information and
                  posts composed text to the awt event queue. The args of
                  this method correspond to the XIM preedit callback
                  information. The XIM highlight attributes are translated via
                  fixed mapping (i.e., independent from any underlying input
                  method engine). This method is invoked in the AWT Toolkit
                  (X event loop) thread context and thus inside the AWT Lock.                
            </javadoc>
            <method name="dispatchComposedText" type="void" line="600">
                <params>
                    <param name="chgText" type="String"/>
                    <param name="chgStyles" type="int"/>
                    <param name="chgOffset" type="int"/>
                    <param name="chgLength" type="int"/>
                    <param name="caretPosition" type="int"/>
                    <param name="when" type="long"/>
                </params>
                <comment line="591">
                    NOTE: This method may be called by privileged threads.                    
                </comment>
                <comment line="592">
                    This functionality is implemented in a package-private method                    
                </comment>
                <comment line="593">
                    to insure that it cannot be overridden by client subclasses.                    
                </comment>
                <comment line="594">
                    DO NOT INVOKE CLIENT CODE ON THIS THREAD!                    
                </comment>
                <comment line="605">
                    Workaround for deadlock bug on solaris2.6_zh bug#4170760                    
                </comment>
                <comment line="616">
                    TODO: avoid reallocation of those buffers                    
                </comment>
                <comment line="625">
                    optimization for the special case to replace the                    
                </comment>
                <comment line="626">
                    entire previous text                    
                </comment>
                <comment line="638">
                    in case to remove substring from chgOffset                    
                </comment>
                <comment line="639">
                    to the end                    
                </comment>
                <comment line="657">
                    if there is any outstanding committed text stored by                    
                </comment>
                <comment line="658">
                    dispatchCommittedText(), it has to be sent to the                    
                </comment>
                <comment line="659">
                    client component.                    
                </comment>
                <comment line="666">
                    otherwise, send null text to delete client&apos;s composed                    
                </comment>
                <comment line="667">
                    text.                    
                </comment>
                <comment line="678">
                    Now sending the composed text to the client                    
                </comment>
                <comment line="682">
                    if there is any partially committed text, concatenate it to                    
                </comment>
                <comment line="683">
                    the composed text.                    
                </comment>
                <scope line="601"/>
                <scope line="615"/>
                <scope line="620">
                    <scope line="621"/>
                    <scope line="623">
                        <scope line="624"/>
                        <scope line="629">
                            <scope line="630">
                                <scope line="631">
                                    <declaration name="text" type="String" line="632"/>
                                </scope>
                                <scope line="637"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="647"/>
                <scope line="653">
                    <scope line="660"/>
                </scope>
                <declaration name="composedOffset" type="int" line="679"/>
                <declaration name="inputText" type="AttributedString" line="680"/>
                <scope line="684"/>
                <scope line="688"/>
                <declaration name="currentFeedback" type="int" line="693"/>
                <declaration name="nextFeedback" type="int" line="694"/>
                <declaration name="startOffset" type="int" line="695"/>
                <declaration name="currentOffset" type="int" line="696"/>
                <declaration name="visiblePosition" type="int" line="697"/>
                <declaration name="visiblePositionInfo" type="TextHitInfo" line="698"/>
                <scope line="703">
                    <scope line="704">
                        <scope line="706">
                            <declaration name="index" type="int" line="707"/>
                        </scope>
                    </scope>
                    <scope line="716"/>
                </scope>
                <scope line="728"/>
            </method>
            <javadoc line="743">
                Flushes composed and committed text held in this context.
                  This method is invoked in the AWT Toolkit (X event loop) thread context
                  and thus inside the AWT Lock.                
            </javadoc>
            <method name="flushText" type="void" line="752">
                <comment line="748">
                    NOTE: This method may be called by privileged threads.                    
                </comment>
                <comment line="749">
                    This functionality is implemented in a package-private method                    
                </comment>
                <comment line="750">
                    to insure that it cannot be overridden by client subclasses.                    
                </comment>
                <comment line="751">
                    DO NOT INVOKE CLIENT CODE ON THIS THREAD!                    
                </comment>
                <declaration name="flush" type="String" line="753"/>
                <scope line="754"/>
                <scope line="758">
                    <declaration name="attrstr" type="AttributedString" line="759"/>
                </scope>
            </method>
            <method name="disposeImpl" type="void" line="775"/>
            <javadoc line="786">
                Frees all X Window resources associated with this object.                
                <see>
                    java.awt.im.spi.InputMethod#dispose                    
                </see>
            </javadoc>
            <method name="dispose" type="void" line="791">
                <declaration name="call_disposeImpl" type="boolean" line="792"/>
                <scope line="794">
                    <scope line="795">
                        <scope line="796"/>
                    </scope>
                </scope>
                <scope line="802"/>
            </method>
            <javadoc line="807">
                Returns null.                
                <see>
                    java.awt.im.spi.InputMethod#getControlObject                    
                </see>
            </javadoc>
            <method name="getControlObject" type="Object" line="812"/>
            <javadoc line="816">
                @see java.awt.im.spi.InputMethod#removeNotify                
            </javadoc>
            <method name="removeNotify" type="void" line="819"/>
            <javadoc line="823">
                @see java.awt.im.spi.InputMethod#setCompositionEnabled(boolean)                
            </javadoc>
            <method name="setCompositionEnabled" type="void" line="826">
                <params>
                    <param name="enable" type="boolean"/>
                </params>
                <comment line="827">
                    If the composition state is successfully changed, set
                    the savedCompositionState to &apos;enable&apos;. Otherwise, simply
                    return.
                    setCompositionEnabledNative may throw UnsupportedOperationException.
                    Don&apos;t try to catch it since the method may be called by clients.
                    Use package private mthod &apos;resetCompositionState&apos; if you want the
                    exception to be caught.                    
                </comment>
                <scope line="835"/>
            </method>
            <javadoc line="840">
                @see java.awt.im.spi.InputMethod#isCompositionEnabled                
            </javadoc>
            <method name="isCompositionEnabled" type="boolean" line="843">
                <comment line="844">
                    isCompositionEnabledNative may throw UnsupportedOperationException.
                    Don&apos;t try to catch it since this method may be called by clients.
                    Use package private method &apos;getCompositionState&apos; if you want the
                    exception to be caught.                    
                </comment>
            </method>
            <javadoc line="852">
                Ends any input composition that may currently be going on in this
                  context. Depending on the platform and possibly user preferences,
                  this may commit or delete uncommitted text. Any changes to the text
                  are communicated to the active component using an input method event.
                  &lt;p&gt;
                  A text editing component may call this in a variety of situations,
                  for example, when the user moves the insertion point within the text
                  (but outside the composed text), or when the component&apos;s text is
                  saved to a file or copied to the clipboard.                
            </javadoc>
            <method name="endComposition" type="void" line="865">
                <comment line="870">
                    Before calling resetXIC, record the current composition mode                    
                </comment>
                <comment line="881">
                    needResetXIC is only set to true for active client. So passive                    
                </comment>
                <comment line="887">
                    Remove any existing composed text by posting an InputMethodEvent                    
                </comment>
                <comment line="888">
                    with null composed text.  It would be desirable to wait for a                    
                </comment>
                <comment line="889">
                    dispatchComposedText call from X input method engine, but some                    
                </comment>
                <comment line="890">
                    input method does not conform to the XIM specification and does                    
                </comment>
                <comment line="891">
                    not call the preedit callback to erase preedit text on calling                    
                </comment>
                <comment line="892">
                    XmbResetIC.  To work around this problem, do it here by ourselves.                    
                </comment>
                <comment line="906">
                    Restore the preedit state if it was enabled                    
                </comment>
                <scope line="866"/>
                <declaration name="active" type="boolean" line="873"/>
                <scope line="874"/>
                <declaration name="text" type="String" line="880"/>
                <scope line="883"/>
                <scope line="901"/>
                <scope line="907"/>
            </method>
            <javadoc line="912">
                Returns a string with information about the current input method server, or null.
                  On both Linux &amp; SunOS, the value of environment variable XMODIFIERS is
                  returned if set. Otherwise, on SunOS, $HOME/.dtprofile will be parsed
                  to find out the language service engine (atok or wnn) since there is
                  no API in Xlib which returns the information of native
                  IM server or language service and we want to try our best to return as much
                  information as possible.
                  Note: This method could return null on Linux if XMODIFIERS is not set properly or
                  if any IOException is thrown.
                  See man page of XSetLocaleModifiers(3X11) for the usgae of XMODIFIERS,
                  atok12setup(1) and wnn6setup(1) for the information written to
                  $HOME/.dtprofile when you run these two commands.                
            </javadoc>
            <method name="getNativeInputMethodInfo" type="String" line="928">
                <comment line="932">
                    If XMODIFIERS is set, return the value                    
                </comment>
                <comment line="962">
                    Since this method is provided for internal testing only,                    
                </comment>
                <comment line="963">
                    we dump the stack trace for the ease of debugging.                    
                </comment>
                <declaration name="xmodifiers" type="String" line="929"/>
                <declaration name="imInfo" type="String" line="930"/>
                <scope line="933">
                    <declaration name="imIndex" type="int" line="934"/>
                    <scope line="935"/>
                </scope>
                <scope line="938">
                    <declaration name="dtprofile" type="File" line="939"/>
                    <declaration name="languageEngineInfo" type="String" line="941"/>
                    <scope line="942">
                        <declaration name="br" type="BufferedReader" line="943"/>
                        <declaration name="line" type="String" line="944"/>
                        <scope line="946">
                            <scope line="947">
                                <declaration name="tokens" type="StringTokenizer" line="948"/>
                                <scope line="949">
                                    <declaration name="token" type="String" line="950"/>
                                    <scope line="952"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="961"/>
                </scope>
            </method>
            <javadoc line="974">
                Performs mapping from an XIM visible feedback value to Java IM highlight.                
                <return>
                    Java input method highlight                    
                </return>
            </javadoc>
            <method name="convertVisualFeedbackToHighlight" type="InputMethodHighlight" line="978">
                <params>
                    <param name="feedback" type="int"/>
                </params>
                <declaration name="highlight" type="InputMethodHighlight" line="979"/>
            </method>
            <declaration name="INITIAL_SIZE" type="int" line="1008"/>
            <class name="IntBuffer" line="1010">
                <comment line="487">
                    NOTE: This method may be called by privileged threads.                    
                </comment>
                <comment line="488">
                    DO NOT INVOKE CLIENT CODE ON THIS THREAD!                    
                </comment>
                <comment line="556">
                    NOTE: This method may be called by privileged threads.                    
                </comment>
                <comment line="557">
                    This functionality is implemented in a package-private method                    
                </comment>
                <comment line="558">
                    to insure that it cannot be overridden by client subclasses.                    
                </comment>
                <comment line="559">
                    DO NOT INVOKE CLIENT CODE ON THIS THREAD!                    
                </comment>
                <comment line="592">
                    NOTE: This method may be called by privileged threads.                    
                </comment>
                <comment line="593">
                    This functionality is implemented in a package-private method                    
                </comment>
                <comment line="594">
                    to insure that it cannot be overridden by client subclasses.                    
                </comment>
                <comment line="595">
                    DO NOT INVOKE CLIENT CODE ON THIS THREAD!                    
                </comment>
                <comment line="749">
                    NOTE: This method may be called by privileged threads.                    
                </comment>
                <comment line="750">
                    This functionality is implemented in a package-private method                    
                </comment>
                <comment line="751">
                    to insure that it cannot be overridden by client subclasses.                    
                </comment>
                <comment line="752">
                    DO NOT INVOKE CLIENT CODE ON THIS THREAD!                    
                </comment>
                <javadoc line="1010">
                    IntBuffer is an inner class that manipulates an int array and
                      provides UNIX file io stream-like programming interfaces to
                      access it. (An alternative would be to use ArrayList which may
                      be too expensive for the work.)                    
                </javadoc>
                <declaration name="intArray" type="int[]" line="1017"/>
                <declaration name="size" type="int" line="1018"/>
                <declaration name="index" type="int" line="1019"/>
                <method name="IntBuffer" type="constructor" line="1021">
                    <params>
                        <param name="initialCapacity" type="int"/>
                    </params>
                </method>
                <method name="insert" type="void" line="1027">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="values" type="int[]"/>
                    </params>
                    <declaration name="newSize" type="int" line="1028"/>
                    <scope line="1029">
                        <declaration name="newIntArray" type="int[]" line="1030"/>
                    </scope>
                </method>
                <method name="remove" type="void" line="1042">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <method name="replace" type="void" line="1051">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="values" type="int[]"/>
                    </params>
                </method>
                <method name="removeAll" type="void" line="1055"/>
                <method name="rewind" type="void" line="1060"/>
                <method name="getNext" type="int" line="1064"/>
                <method name="unget" type="void" line="1070"/>
                <method name="getOffset" type="int" line="1075"/>
                <method name="toString" type="String" line="1079">
                    <declaration name="s" type="StringBuffer" line="1080"/>
                    <scope line="1081"/>
                </method>
            </class>
            <method name="resetXIC" type="String" line="1093"/>
            <method name="disposeXIC" type="void" line="1094"/>
            <method name="setCompositionEnabledNative" type="boolean" line="1095"/>
            <method name="isCompositionEnabledNative" type="boolean" line="1096"/>
            <method name="turnoffStatusWindow" type="void" line="1097"/>
        </class>
    </source>