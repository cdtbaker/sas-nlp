<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt">
        <import package="java.awt.AWTPermission"/>
        <import package="java.awt.DisplayMode"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.GraphicsDevice"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Window"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.HashMap"/>
        <import package="sun.java2d.opengl.GLXGraphicsConfig"/>
        <import package="sun.java2d.xr.XRGraphicsConfig"/>
        <import package="sun.java2d.loops.SurfaceType"/>
        <class name="X11GraphicsDevice" line="17">
            <extends class="GraphicsDevice"/>
            <implements interface="DisplayChangedListener"/>
            <javadoc line="17">
                This is an implementation of a GraphicsDevice object for a single
                  X11 screen.                
                <see>
                    GraphicsEnvironment                    
                </see>
                <see>
                    GraphicsConfiguration                    
                </see>
            </javadoc>
            <declaration name="screen" type="int" line="24"/>
            <declaration name="x11ProxyKeyMap" type="HashMap" line="25"/>
            <declaration name="fullScreenExclusivePermission" type="AWTPermission" line="26"/>
            <declaration name="xrandrExtSupported" type="Boolean" line="27"/>
            <declaration name="configLock" type="Object" line="28"/>
            <declaration name="topLevels" type="SunDisplayChanger" line="29"/>
            <declaration name="origDisplayMode" type="DisplayMode" line="30"/>
            <declaration name="shutdownHookRegistered" type="boolean" line="31"/>
            <method name="X11GraphicsDevice" type="constructor" line="32">
                <params>
                    <param name="screennum" type="int"/>
                </params>
            </method>
            <method name="initIDs" type="void" line="35"/>
            <scope line="36">
                <scope line="37"/>
            </scope>
            <javadoc line="41">
                Returns the X11 screen of the device.                
            </javadoc>
            <method name="getScreen" type="int" line="44"/>
            <method name="getProxyKeyFor" type="Object" line="47">
                <params>
                    <param name="st" type="SurfaceType"/>
                </params>
                <scope line="48">
                    <declaration name="o" type="Object" line="49"/>
                    <scope line="50"/>
                </scope>
            </method>
            <method name="getDisplay" type="long" line="57"/>
            <javadoc line="57">
                Returns the X11 Display of this device.
                  This method is also in MDrawingSurfaceInfo but need it here
                  to be able to allow a GraphicsConfigTemplate to get the Display.                
            </javadoc>
            <javadoc line="63">
                Returns the type of the graphics device.                
                <see>
                    #TYPE_RASTER_SCREEN                    
                </see>
                <see>
                    #TYPE_PRINTER                    
                </see>
                <see>
                    #TYPE_IMAGE_BUFFER                    
                </see>
            </javadoc>
            <method name="getType" type="int" line="69"/>
            <javadoc line="72">
                Returns the identification string associated with this graphics
                  device.                
            </javadoc>
            <method name="getIDstring" type="String" line="76"/>
            <declaration name="configs" type="GraphicsConfiguration[]" line="79"/>
            <declaration name="defaultConfig" type="GraphicsConfiguration" line="80"/>
            <declaration name="doubleBufferVisuals" type="HashSet" line="81"/>
            <javadoc line="82">
                Returns all of the graphics
                  configurations associated with this graphics device.                
            </javadoc>
            <method name="getConfigurations" type="GraphicsConfiguration[]" line="86">
                <scope line="87">
                    <scope line="88"/>
                </scope>
            </method>
            <method name="makeConfigurations" type="void" line="94">
                <scope line="95">
                    <declaration name="i" type="int" line="96"/>
                    <declaration name="num" type="int" line="97"/>
                    <declaration name="ret" type="GraphicsConfiguration[]" line="98"/>
                    <scope line="99"/>
                    <scope line="102"/>
                    <declaration name="glxSupported" type="boolean" line="105"/>
                    <declaration name="xrenderSupported" type="boolean" line="106"/>
                    <declaration name="dbeSupported" type="boolean" line="107"/>
                    <scope line="108"/>
                    <scope line="112">
                        <declaration name="visNum" type="int" line="113"/>
                        <declaration name="depth" type="int" line="114"/>
                        <scope line="115"/>
                        <scope line="118">
                            <declaration name="doubleBuffer" type="boolean" line="119"/>
                            <scope line="120"/>
                            <scope line="123"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getNumConfigs" type="int" line="131"/>
            <method name="getConfigVisualId" type="int" line="132"/>
            <method name="getConfigDepth" type="int" line="133"/>
            <method name="getConfigColormap" type="int" line="134"/>
            <method name="isDBESupported" type="boolean" line="135"/>
            <method name="addDoubleBufferVisual" type="void" line="136">
                <params>
                    <param name="visNum" type="int"/>
                </params>
            </method>
            <method name="getDoubleBufferVisuals" type="void" line="139"/>
            <javadoc line="140">
                Returns the default graphics configuration
                  associated with this graphics device.                
            </javadoc>
            <method name="getDefaultConfiguration" type="GraphicsConfiguration" line="144">
                <scope line="145">
                    <scope line="146"/>
                </scope>
            </method>
            <method name="makeDefaultConfiguration" type="void" line="152">
                <scope line="153">
                    <declaration name="visNum" type="int" line="154"/>
                    <scope line="155">
                        <scope line="157">
                            <scope line="158"/>
                            <scope line="161"/>
                        </scope>
                    </scope>
                    <scope line="167">
                        <declaration name="depth" type="int" line="168"/>
                        <declaration name="doubleBuffer" type="boolean" line="169"/>
                        <scope line="170"/>
                        <scope line="175">
                            <scope line="176"/>
                        </scope>
                        <scope line="181"/>
                    </scope>
                </scope>
            </method>
            <method name="enterFullScreenExclusive" type="void" line="187"/>
            <method name="exitFullScreenExclusive" type="void" line="188"/>
            <method name="initXrandrExtension" type="boolean" line="189"/>
            <method name="getCurrentDisplayMode" type="DisplayMode" line="190"/>
            <method name="enumDisplayModes" type="void" line="191"/>
            <method name="configDisplayMode" type="void" line="192"/>
            <method name="resetNativeData" type="void" line="193"/>
            <javadoc line="194">
                Returns true only if:
                  - the Xrandr extension is present
                  - the necessary Xrandr functions were loaded successfully
                  - XINERAMA is not enabled                
            </javadoc>
            <method name="isXrandrExtensionSupported" type="boolean" line="200">
                <scope line="201"/>
            </method>
            <method name="isFullScreenSupported" type="boolean" line="206">
                <declaration name="fsAvailable" type="boolean" line="207"/>
                <scope line="208">
                    <declaration name="security" type="SecurityManager" line="209"/>
                    <scope line="210">
                        <scope line="211"/>
                        <scope line="214"/>
                        <scope line="217"/>
                    </scope>
                </scope>
            </method>
            <method name="isDisplayChangeSupported" type="boolean" line="224"/>
            <method name="enterFullScreenExclusive" type="void" line="227">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <declaration name="peer" type="X11ComponentPeer" line="228"/>
                <scope line="229"/>
            </method>
            <method name="exitFullScreenExclusive" type="void" line="234">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <declaration name="peer" type="X11ComponentPeer" line="235"/>
                <scope line="236"/>
            </method>
            <method name="setFullScreenWindow" type="void" line="241">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <declaration name="old" type="Window" line="242"/>
                <scope line="243"/>
                <declaration name="fsSupported" type="boolean" line="246"/>
                <scope line="247"/>
                <scope line="252">
                    <scope line="253"/>
                </scope>
            </method>
            <method name="getDefaultDisplayMode" type="DisplayMode" line="259">
                <declaration name="gc" type="GraphicsConfiguration" line="260"/>
                <declaration name="r" type="Rectangle" line="261"/>
            </method>
            <method name="getDisplayMode" type="DisplayMode" line="264">
                <scope line="265"/>
                <scope line="268">
                    <scope line="269"/>
                </scope>
            </method>
            <method name="getDisplayModes" type="DisplayMode[]" line="275">
                <scope line="276"/>
                <declaration name="modes" type="ArrayList&lt;DisplayMode&gt;" line="279"/>
                <declaration name="retArray" type="DisplayMode[]" line="281"/>
            </method>
            <method name="setDisplayMode" type="void" line="284">
                <params>
                    <param name="dm" type="DisplayMode"/>
                </params>
                <scope line="285"/>
                <declaration name="w" type="Window" line="289"/>
                <scope line="290"/>
                <scope line="293"/>
                <scope line="296"/>
                <scope line="299">
                    <anonymous_class line="301">
                        <method name="run" type="Void" line="302">
                            <declaration name="mainTG" type="ThreadGroup" line="303"/>
                            <declaration name="parentTG" type="ThreadGroup" line="304"/>
                            <scope line="305"/>
                            <anonymous_class line="309">
                                <method name="run" type="void" line="310">
                                    <declaration name="old" type="Window" line="311"/>
                                    <scope line="312"/>
                                </method>
                            </anonymous_class>
                            <declaration name="r" type="Runnable" line="309"/>
                            <declaration name="t" type="Thread" line="319"/>
                        </method>
                    </anonymous_class>
                    <declaration name="a" type="PrivilegedAction&lt;Void&gt;" line="301"/>
                </scope>
            </method>
            <method name="getMatchingDisplayMode" type="DisplayMode" line="332">
                <params>
                    <param name="dm" type="DisplayMode"/>
                </params>
                <scope line="333"/>
                <declaration name="modes" type="DisplayMode[]" line="336"/>
                <scope line="337">
                    <scope line="338"/>
                </scope>
            </method>
            <javadoc line="344">
                From the DisplayChangedListener interface; called from
                  X11GraphicsEnvironment when the display mode has been changed.                
            </javadoc>
            <method name="displayChanged" type="void" line="348"/>
            <javadoc line="355">
                From the DisplayChangedListener interface; devices do not need
                  to react to this event.                
            </javadoc>
            <method name="paletteChanged" type="void" line="359"/>
            <javadoc line="361">
                Add a DisplayChangeListener to be notified when the display settings
                  are changed.  Typically, only top-level containers need to be added
                  to X11GraphicsDevice.                
            </javadoc>
            <method name="addDisplayChangedListener" type="void" line="366">
                <params>
                    <param name="client" type="DisplayChangedListener"/>
                </params>
            </method>
            <javadoc line="369">
                Remove a DisplayChangeListener from this X11GraphicsDevice.                
            </javadoc>
            <method name="removeDisplayChangedListener" type="void" line="372">
                <params>
                    <param name="client" type="DisplayChangedListener"/>
                </params>
            </method>
            <method name="toString" type="String" line="375"/>
        </class>
    </source>