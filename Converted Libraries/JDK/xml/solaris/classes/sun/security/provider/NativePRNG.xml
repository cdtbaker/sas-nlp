<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider">
        <import package="java.io"/>
        <import package="java.security"/>
        <import package="java.security.SecureRandom"/>
        <class name="NativePRNG" line="5">
            <extends class="SecureRandomSpi"/>
            <javadoc line="5">
                Native PRNG implementation for Solaris/Linux. It interacts with
                  /dev/random and /dev/urandom, so it is only available if those
                  files are present. Otherwise, SHA1PRNG is used instead of this class.
                  getSeed() and setSeed() directly read/write /dev/random. However,
                  /dev/random is only writable by root in many configurations. Because
                  we cannot just ignore bytes specified via setSeed(), we keep a
                  SHA1PRNG around in parallel.
                  nextBytes() reads the bytes directly from /dev/urandom (and then
                  mixes them with bytes from the SHA1PRNG for the reasons explained
                  above). Reading bytes from /dev/urandom means that constantly get
                  new entropy the operating system has collected. This is a notable
                  advantage over the SHA1PRNG model, which acquires entropy only
                  initially during startup although the VM may be running for months.
                  Also note that we do not need any initial pure random seed from
                  /dev/random. This is an advantage because on some versions of Linux
                  it can be exhausted very quickly and could thus impact startup time.
                  Finally, note that we use a singleton for the actual work (RandomIO)
                  to avoid having to open and close /dev/[u]random constantly. However,
                  there may me many NativePRNG instances created by the JCA framework.                
                <since>
                    1.5                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="29"/>
            <declaration name="NAME_RANDOM" type="String" line="30"/>
            <declaration name="NAME_URANDOM" type="String" line="31"/>
            <declaration name="INSTANCE" type="RandomIO" line="32"/>
            <method name="initIO" type="RandomIO" line="33">
                <anonymous_class line="34">
                    <method name="run" type="RandomIO" line="35">
                        <declaration name="randomFile" type="File" line="36"/>
                        <scope line="37"/>
                        <declaration name="urandomFile" type="File" line="40"/>
                        <scope line="41"/>
                        <scope line="44"/>
                        <scope line="47"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="isAvailable" type="boolean" line="54"/>
            <method name="NativePRNG" type="constructor" line="57">
                <scope line="59"/>
            </method>
            <method name="engineSetSeed" type="void" line="63">
                <params>
                    <param name="seed" type="byte[]"/>
                </params>
            </method>
            <method name="engineNextBytes" type="void" line="66">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
            </method>
            <method name="engineGenerateSeed" type="byte[]" line="69">
                <params>
                    <param name="numBytes" type="int"/>
                </params>
            </method>
            <class name="RandomIO" line="72">
                <javadoc line="72">
                    Nested class doing the actual work. Singleton, see INSTANCE above.                    
                </javadoc>
                <declaration name="MAX_BUFFER_TIME" type="long" line="76"/>
                <declaration name="BUFFER_SIZE" type="int" line="77"/>
                <declaration name="randomIn" type="InputStream" line="78"/>
                <declaration name="randomOut" type="OutputStream" line="79"/>
                <declaration name="randomOutInitialized" type="boolean" line="80"/>
                <declaration name="mixRandom" type="sun.security.provider.SecureRandom" line="81"/>
                <declaration name="urandomBuffer" type="byte[]" line="82"/>
                <declaration name="buffered" type="int" line="83"/>
                <declaration name="lastRead" type="long" line="84"/>
                <declaration name="LOCK_GET_BYTES" type="Object" line="85"/>
                <declaration name="LOCK_GET_SEED" type="Object" line="86"/>
                <declaration name="LOCK_SET_SEED" type="Object" line="87"/>
                <method name="RandomIO" type="constructor" line="88">
                    <params>
                        <param name="randomFile" type="File"/>
                        <param name="urandomFile" type="File"/>
                    </params>
                </method>
                <method name="getMixRandom" type="sun.security.provider.SecureRandom" line="93">
                    <declaration name="r" type="sun.security.provider.SecureRandom" line="94"/>
                    <scope line="95">
                        <scope line="96">
                            <scope line="98">
                                <scope line="100">
                                    <declaration name="b" type="byte[]" line="101"/>
                                </scope>
                                <scope line="105"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="readFully" type="void" line="114">
                    <params>
                        <param name="in" type="InputStream"/>
                        <param name="data" type="byte[]"/>
                    </params>
                    <declaration name="len" type="int" line="115"/>
                    <declaration name="ofs" type="int" line="116"/>
                    <scope line="117">
                        <declaration name="k" type="int" line="118"/>
                        <scope line="119"/>
                    </scope>
                    <scope line="125"/>
                </method>
                <method name="implGenerateSeed" type="byte[]" line="129">
                    <params>
                        <param name="numBytes" type="int"/>
                    </params>
                    <scope line="130">
                        <scope line="131">
                            <declaration name="b" type="byte[]" line="132"/>
                        </scope>
                        <scope line="136"/>
                    </scope>
                </method>
                <method name="implSetSeed" type="void" line="141">
                    <params>
                        <param name="seed" type="byte[]"/>
                    </params>
                    <scope line="142">
                        <scope line="143">
                            <anonymous_class line="145">
                                <method name="run" type="OutputStream" line="146">
                                    <scope line="147"/>
                                    <scope line="150"/>
                                </method>
                            </anonymous_class>
                        </scope>
                        <scope line="157">
                            <scope line="158"/>
                            <scope line="161"/>
                        </scope>
                    </scope>
                </method>
                <method name="ensureBufferValid" type="void" line="168">
                    <declaration name="time" type="long" line="169"/>
                    <scope line="170"/>
                </method>
                <method name="implNextBytes" type="void" line="177">
                    <params>
                        <param name="data" type="byte[]"/>
                    </params>
                    <scope line="178">
                        <scope line="179">
                            <declaration name="len" type="int" line="181"/>
                            <declaration name="ofs" type="int" line="182"/>
                            <scope line="183">
                                <declaration name="bufferOfs" type="int" line="185"/>
                                <scope line="186"/>
                            </scope>
                        </scope>
                        <scope line="193"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>