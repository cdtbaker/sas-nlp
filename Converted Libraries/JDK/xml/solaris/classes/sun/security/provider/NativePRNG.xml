<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider">
        <import package="java.io"/>
        <import package="java.security"/>
        <import package="java.security.SecureRandom"/>
        <class name="NativePRNG" line="33">
            <extends class="SecureRandomSpi"/>
            <comment line="66">
                name of the pure random file (also used for setSeed())                
            </comment>
            <comment line="68">
                name of the pseudo random file                
            </comment>
            <comment line="71">
                singleton instance or null if not available                
            </comment>
            <comment line="95">
                return whether the NativePRNG is available                
            </comment>
            <comment line="100">
                constructor, called by the JCA framework                
            </comment>
            <comment line="108">
                set the seed                
            </comment>
            <comment line="113">
                get pseudo random bytes                
            </comment>
            <comment line="118">
                get true random bytes                
            </comment>
            <javadoc line="33">
                Native PRNG implementation for Solaris/Linux. It interacts with
                  /dev/random and /dev/urandom, so it is only available if those
                  files are present. Otherwise, SHA1PRNG is used instead of this class.
                  getSeed() and setSeed() directly read/write /dev/random. However,
                  /dev/random is only writable by root in many configurations. Because
                  we cannot just ignore bytes specified via setSeed(), we keep a
                  SHA1PRNG around in parallel.
                  nextBytes() reads the bytes directly from /dev/urandom (and then
                  mixes them with bytes from the SHA1PRNG for the reasons explained
                  above). Reading bytes from /dev/urandom means that constantly get
                  new entropy the operating system has collected. This is a notable
                  advantage over the SHA1PRNG model, which acquires entropy only
                  initially during startup although the VM may be running for months.
                  Also note that we do not need any initial pure random seed from
                  /dev/random. This is an advantage because on some versions of Linux
                  it can be exhausted very quickly and could thus impact startup time.
                  Finally, note that we use a singleton for the actual work (RandomIO)
                  to avoid having to open and close /dev/[u]random constantly. However,
                  there may me many NativePRNG instances created by the JCA framework.                
                <since>
                    1.5                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="63"/>
            <declaration name="NAME_RANDOM" type="String" line="66"/>
            <declaration name="NAME_URANDOM" type="String" line="68"/>
            <declaration name="INSTANCE" type="RandomIO" line="71"/>
            <method name="initIO" type="RandomIO" line="73">
                <anonymous_class line="75">
                    <method name="run" type="RandomIO" line="76">
                        <declaration name="randomFile" type="File" line="77"/>
                        <scope line="78"/>
                        <declaration name="urandomFile" type="File" line="81"/>
                        <scope line="82"/>
                        <scope line="85"/>
                        <scope line="87"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="isAvailable" type="boolean" line="95"/>
            <method name="NativePRNG" type="constructor" line="100">
                <scope line="102"/>
            </method>
            <method name="engineSetSeed" type="void" line="108">
                <params>
                    <param name="seed" type="byte[]"/>
                </params>
            </method>
            <method name="engineNextBytes" type="void" line="113">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
            </method>
            <method name="engineGenerateSeed" type="byte[]" line="118">
                <params>
                    <param name="numBytes" type="int"/>
                </params>
            </method>
            <class name="RandomIO" line="122">
                <comment line="128">
                    we buffer data we read from /dev/urandom for efficiency,                    
                </comment>
                <comment line="129">
                    but we limit the lifetime to avoid using stale bits                    
                </comment>
                <comment line="130">
                    lifetime in ms, currently 100 ms (0.1 s)                    
                </comment>
                <comment line="133">
                    size of the /dev/urandom buffer                    
                </comment>
                <comment line="136">
                    In/OutputStream for /dev/random and /dev/urandom                    
                </comment>
                <comment line="140">
                    flag indicating if we have tried to open randomOut yet                    
                </comment>
                <comment line="143">
                    SHA1PRNG instance for mixing                    
                </comment>
                <comment line="144">
                    initialized lazily on demand to avoid problems during startup                    
                </comment>
                <comment line="147">
                    buffer for /dev/urandom bits                    
                </comment>
                <comment line="150">
                    number of bytes left in urandomBuffer                    
                </comment>
                <comment line="153">
                    time we read the data into the urandomBuffer                    
                </comment>
                <comment line="156">
                    mutex lock for nextBytes()                    
                </comment>
                <comment line="159">
                    mutex lock for getSeed()                    
                </comment>
                <comment line="162">
                    mutex lock for setSeed()                    
                </comment>
                <comment line="165">
                    constructor, called only once from initIO()                    
                </comment>
                <comment line="172">
                    get the SHA1PRNG for mixing                    
                </comment>
                <comment line="173">
                    initialize if not yet created                    
                </comment>
                <comment line="195">
                    read data.length bytes from in                    
                </comment>
                <comment line="196">
                    /dev/[u]random are not normal files, so we need to loop the read.                    
                </comment>
                <comment line="197">
                    just keep trying as long as we are making progress                    
                </comment>
                <comment line="215">
                    get true random bytes, just read from /dev/random                    
                </comment>
                <comment line="228">
                    supply random bytes to the OS                    
                </comment>
                <comment line="229">
                    write to /dev/random if possible                    
                </comment>
                <comment line="230">
                    always add the seed to our mixing random                    
                </comment>
                <comment line="257">
                    ensure that there is at least one valid byte in the buffer                    
                </comment>
                <comment line="258">
                    if not, read new bytes                    
                </comment>
                <comment line="269">
                    get pseudo random bytes                    
                </comment>
                <comment line="270">
                    read from /dev/urandom and XOR with bytes generated by the                    
                </comment>
                <comment line="271">
                    mixing SHA1PRNG                    
                </comment>
                <javadoc line="122">
                    Nested class doing the actual work. Singleton, see INSTANCE above.                    
                </javadoc>
                <declaration name="MAX_BUFFER_TIME" type="long" line="130"/>
                <declaration name="BUFFER_SIZE" type="int" line="133"/>
                <declaration name="randomIn" type="InputStream" line="136"/>
                <declaration name="randomOut" type="OutputStream" line="137"/>
                <declaration name="randomOutInitialized" type="boolean" line="140"/>
                <declaration name="mixRandom" type="sun.security.provider.SecureRandom" line="144"/>
                <declaration name="urandomBuffer" type="byte[]" line="147"/>
                <declaration name="buffered" type="int" line="150"/>
                <declaration name="lastRead" type="long" line="153"/>
                <declaration name="LOCK_GET_BYTES" type="Object" line="156"/>
                <declaration name="LOCK_GET_SEED" type="Object" line="159"/>
                <declaration name="LOCK_SET_SEED" type="Object" line="162"/>
                <method name="RandomIO" type="constructor" line="165">
                    <params>
                        <param name="randomFile" type="File"/>
                        <param name="urandomFile" type="File"/>
                    </params>
                </method>
                <method name="getMixRandom" type="sun.security.provider.SecureRandom" line="173">
                    <declaration name="r" type="sun.security.provider.SecureRandom" line="174"/>
                    <scope line="175">
                        <scope line="176">
                            <scope line="178">
                                <scope line="180">
                                    <declaration name="b" type="byte[]" line="181"/>
                                </scope>
                                <scope line="184"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="readFully" type="void" line="198">
                    <params>
                        <param name="in" type="InputStream"/>
                        <param name="data" type="byte[]"/>
                    </params>
                    <declaration name="len" type="int" line="199"/>
                    <declaration name="ofs" type="int" line="200"/>
                    <scope line="201">
                        <declaration name="k" type="int" line="202"/>
                        <scope line="203"/>
                    </scope>
                    <scope line="209"/>
                </method>
                <method name="implGenerateSeed" type="byte[]" line="215">
                    <params>
                        <param name="numBytes" type="int"/>
                    </params>
                    <scope line="216">
                        <scope line="217">
                            <declaration name="b" type="byte[]" line="218"/>
                        </scope>
                        <scope line="221"/>
                    </scope>
                </method>
                <method name="implSetSeed" type="void" line="230">
                    <params>
                        <param name="seed" type="byte[]"/>
                    </params>
                    <scope line="231">
                        <scope line="232">
                            <anonymous_class line="235">
                                <method name="run" type="OutputStream" line="236">
                                    <scope line="237"/>
                                    <scope line="239"/>
                                </method>
                            </anonymous_class>
                        </scope>
                        <scope line="245">
                            <scope line="246"/>
                            <scope line="248"/>
                        </scope>
                    </scope>
                </method>
                <method name="ensureBufferValid" type="void" line="258">
                    <declaration name="time" type="long" line="259"/>
                    <scope line="260"/>
                </method>
                <method name="implNextBytes" type="void" line="271">
                    <params>
                        <param name="data" type="byte[]"/>
                    </params>
                    <scope line="272">
                        <scope line="273">
                            <declaration name="len" type="int" line="275"/>
                            <declaration name="ofs" type="int" line="276"/>
                            <scope line="277">
                                <declaration name="bufferOfs" type="int" line="279"/>
                                <scope line="280"/>
                            </scope>
                        </scope>
                        <scope line="286"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>