<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <import package="java.util.Locale"/>
        <import package="sun.awt.SunHints"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="FontConfigManager" line="34">
            <comment line="42">
                                
            </comment>
            <comment line="45">
                Begin support for GTK Look and Feel - query libfontconfig and
                 return a composite Font to Swing that uses the desktop font(s).                
            </comment>
            <comment line="49">
                These next three classes are just data structures.                
            </comment>
            <comment line="74">
                fontconfig recognises slants roman, italic, as well as oblique,
                 and a slew of weights, where the ones that matter here are
                 regular and bold.
                 To fully qualify what we want, we can for example ask for (eg)
                 Font.PLAIN             : &quot;serif:regular:roman&quot;
                 Font.BOLD              : &quot;serif:bold:roman&quot;
                 Font.ITALIC            : &quot;serif:regular:italic&quot;
                 Font.BOLD|Font.ITALIC  : &quot;serif:bold:italic&quot;                
            </comment>
            <comment line="100">
                This array has the array elements created in Java code and is
                 passed down to native to be filled in.                
            </comment>
            <comment line="116">
                Called from code that needs to know what are the AA settings
                 that apps using FC would pick up for the default desktop font.
                 Note apps can change the default desktop font. etc, so this
                 isn&apos;t certain to be right but its going to correct for most cases.
                 Native return values map to the text aa values in sun.awt.SunHints.
                 which is used to look up the renderinghint value object.                
            </comment>
            <comment line="127">
                This is public solely so that for debugging purposes it can be called
                 with other names, which might (eg) include a size, eg &quot;sans-24&quot;
                 The return value is a text aa rendering hint value.
                 Normally we should call the no-args version.                
            </comment>
            <comment line="157">
                This does cause the native libfontconfig to be loaded and unloaded,
                 but it does not incur the overhead of initialisation of its
                 data structures, so shouldn&apos;t have a measurable impact.                
            </comment>
            <comment line="163">
                This can be made public if it&apos;s needed to force a re-read
                 rather than using the cached values. The re-read would be needed
                 only if some event signalled that the fontconfig has changed.
                 In that event this method would need to return directly the array
                 to be used by the caller in case it subsequently changed.                
            </comment>
            <comment line="342">
                We need to return a Composite font which has as the font in
                 its first slot one obtained from fontconfig.                
            </comment>
            <comment line="450">
                Return an array of FcCompFont structs describing the primary
                 font located for each of fontconfigGTKPango&apos;s logical font names.                
            </comment>
            <javadoc line="34">
                Small utility class to manage FontConfig.                
            </javadoc>
            <declaration name="fontConfigFailed" type="boolean" line="39"/>
            <declaration name="fcInfo" type="FontConfigInfo" line="42"/>
            <class name="FontConfigFont" line="50">
                <comment line="52">
                    eg Bitstream Vera Sans                    
                </comment>
                <comment line="53">
                    eg Bold                    
                </comment>
                <comment line="54">
                    eg Bitstream Vera Sans Bold                    
                </comment>
                <comment line="55">
                    eg /usr/X11/lib/fonts/foo.ttf                    
                </comment>
                <comment line="59">
                    eg sans                    
                </comment>
                <comment line="60">
                    eg sans                    
                </comment>
                <comment line="61">
                    eg sansserif                    
                </comment>
                <comment line="62">
                    eg 0=PLAIN                    
                </comment>
                <comment line="65">
                    boolean preferBitmaps;    // if embedded bitmaps preferred over AA                    
                </comment>
                <comment line="66">
                    null if not yet created/known.                    
                </comment>
                <declaration name="familyName" type="String" line="51"/>
                <declaration name="styleStr" type="String" line="52"/>
                <declaration name="fullName" type="String" line="53"/>
                <declaration name="fontFile" type="String" line="54"/>
            </class>
            <class name="FcCompFont" line="57">
                <comment line="52">
                    eg Bitstream Vera Sans                    
                </comment>
                <comment line="53">
                    eg Bold                    
                </comment>
                <comment line="54">
                    eg Bitstream Vera Sans Bold                    
                </comment>
                <comment line="55">
                    eg /usr/X11/lib/fonts/foo.ttf                    
                </comment>
                <comment line="59">
                    eg sans                    
                </comment>
                <comment line="60">
                    eg sans                    
                </comment>
                <comment line="61">
                    eg sansserif                    
                </comment>
                <comment line="62">
                    eg 0=PLAIN                    
                </comment>
                <comment line="65">
                    boolean preferBitmaps;    // if embedded bitmaps preferred over AA                    
                </comment>
                <comment line="66">
                    null if not yet created/known.                    
                </comment>
                <declaration name="fcName" type="String" line="58"/>
                <declaration name="fcFamily" type="String" line="59"/>
                <declaration name="jdkName" type="String" line="60"/>
                <declaration name="style" type="int" line="61"/>
                <declaration name="firstFont" type="FontConfigFont" line="62"/>
                <declaration name="allFonts" type="FontConfigFont[]" line="63"/>
                <declaration name="compFont" type="CompositeFont" line="65"/>
            </class>
            <class name="FontConfigInfo" line="68">
                <comment line="52">
                    eg Bitstream Vera Sans                    
                </comment>
                <comment line="53">
                    eg Bold                    
                </comment>
                <comment line="54">
                    eg Bitstream Vera Sans Bold                    
                </comment>
                <comment line="55">
                    eg /usr/X11/lib/fonts/foo.ttf                    
                </comment>
                <comment line="59">
                    eg sans                    
                </comment>
                <comment line="60">
                    eg sans                    
                </comment>
                <comment line="61">
                    eg sansserif                    
                </comment>
                <comment line="62">
                    eg 0=PLAIN                    
                </comment>
                <comment line="65">
                    boolean preferBitmaps;    // if embedded bitmaps preferred over AA                    
                </comment>
                <comment line="66">
                    null if not yet created/known.                    
                </comment>
                <declaration name="fcVersion" type="int" line="69"/>
                <declaration name="cacheDirs" type="String[]" line="70"/>
            </class>
            <declaration name="fontConfigNames" type="String[]" line="82"/>
            <declaration name="fontConfigFonts" type="FcCompFont[]" line="102"/>
            <javadoc line="104">
                Instantiates a new FontConfigManager getting the default instance
                  of FontManager from the FontManagerFactory.                
            </javadoc>
            <method name="FontConfigManager" type="constructor" line="108"/>
            <method name="getFontConfigNames" type="String[]" line="111"/>
            <method name="getFontConfigAAHint" type="Object" line="122"/>
            <method name="getFontConfigAAHint" type="Object" line="131">
                <params>
                    <param name="fcFamily" type="String"/>
                </params>
                <scope line="132"/>
                <scope line="134">
                    <declaration name="hint" type="int" line="135"/>
                    <scope line="136"/>
                    <scope line="138"/>
                </scope>
            </method>
            <method name="getFCLocaleStr" type="String" line="146">
                <declaration name="l" type="Locale" line="147"/>
                <declaration name="localeStr" type="String" line="148"/>
                <declaration name="country" type="String" line="149"/>
                <scope line="150"/>
            </method>
            <method name="getFontConfigVersion" type="int" line="160"/>
            <method name="initFontConfigFonts" type="void" line="168">
                <params>
                    <param name="includeFallbacks" type="boolean"/>
                </params>
                <comment line="195">
                    depends on array order.                    
                </comment>
                <comment line="199">
                                        
                </comment>
                <scope line="170">
                    <scope line="171"/>
                </scope>
                <scope line="176"/>
                <declaration name="t0" type="long" line="180"/>
                <scope line="181"/>
                <declaration name="fontConfigNames" type="String[]" line="185"/>
                <declaration name="fontArr" type="FcCompFont[]" line="186"/>
                <scope line="188">
                    <declaration name="colonPos" type="int" line="191"/>
                </scope>
                <declaration name="anyFont" type="FontConfigFont" line="197"/>
                <scope line="199">
                    <declaration name="fci" type="FcCompFont" line="200"/>
                    <scope line="201">
                        <scope line="202">
                            <declaration name="logger" type="PlatformLogger" line="203"/>
                        </scope>
                    </scope>
                    <scope line="208"/>
                </scope>
                <scope line="213">
                    <scope line="214">
                        <declaration name="logger" type="PlatformLogger" line="215"/>
                    </scope>
                </scope>
                <scope line="220">
                    <scope line="221">
                        <scope line="222"/>
                    </scope>
                </scope>
                <scope line="230">
                    <declaration name="logger" type="PlatformLogger" line="232"/>
                    <declaration name="t1" type="long" line="234"/>
                    <scope line="238">
                        <declaration name="fci" type="FcCompFont" line="239"/>
                        <scope line="243">
                            <scope line="244">
                                <declaration name="fcf" type="FontConfigFont" line="245"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="registerFromFcInfo" type="PhysicalFont" line="256">
                <params>
                    <param name="fcInfo" type="FcCompFont"/>
                </params>
                <comment line="261">
                    If it&apos;s a TTC file we need to know that as we will need to                    
                </comment>
                <comment line="271">
                    If this file is already registered, can just return its font.
                     However we do need to check in case it&apos;s a TTC as we need
                     a specific font, so rather than directly returning it, let
                     findFont2D resolve that.                    
                </comment>
                <comment line="282">
                                        
                </comment>
                <comment line="292">
                    If the font may hide a JRE font (eg fontconfig says it is
                     Lucida Sans), we want to use the JRE version, so make it
                     point to the JRE font.                    
                </comment>
                <comment line="299">
                    It is also possible the font file is on the &quot;deferred&quot; list,
                     in which case we can just initialise it now.                    
                </comment>
                <comment line="305">
                                        
                </comment>
                <comment line="311">
                                        
                </comment>
                <comment line="322">
                    In the majority of cases we reach here, and need to determine
                     the type and rank to register the font.                    
                </comment>
                <declaration name="fm" type="SunFontManager" line="258"/>
                <declaration name="fontFile" type="String" line="262"/>
                <declaration name="offset" type="int" line="263"/>
                <scope line="264"/>
                <declaration name="ext" type="String" line="267"/>
                <declaration name="isTTC" type="boolean" line="268"/>
                <declaration name="physFont" type="PhysicalFont" line="275"/>
                <scope line="276">
                    <scope line="277">
                        <declaration name="f2d" type="Font2D" line="278"/>
                        <scope line="281"/>
                        <scope line="283"/>
                    </scope>
                    <scope line="286"/>
                </scope>
                <scope line="302">
                    <scope line="305">
                        <scope line="306">
                            <declaration name="f2d" type="Font2D" line="307"/>
                            <scope line="310"/>
                            <scope line="312"/>
                        </scope>
                        <scope line="315"/>
                    </scope>
                </scope>
                <scope line="324">
                    <declaration name="fontFormat" type="int" line="325"/>
                    <declaration name="fontRank" type="int" line="326"/>
                    <scope line="328"/>
                    <scope line="331"/>
                </scope>
            </method>
            <method name="getFontConfigFont" type="CompositeFont" line="345">
                <params>
                    <param name="name" type="String"/>
                    <param name="style" type="int"/>
                </params>
                <comment line="375">
                    jdkFont is going to be used for slots 1..N and as a fallback.
                     Slot 0 will be the physical font from fontconfig.                    
                </comment>
                <comment line="387">
                    First, see if the family and exact style is already registered.
                     If it is, use it. If it&apos;s not, then try to register it.
                     If that registration fails (signalled by null) just return the
                     regular JDK composite.
                     Algorithmically styled fonts won&apos;t match on exact style, so
                     will fall through this code, but the regisration code will
                     find that file already registered and return its font.                    
                </comment>
                <comment line="413">
                    Now register the fonts in the family (the other styles) after
                     checking that they aren&apos;t already registered and are actually in
                     a different file. They may be the same file in CJK cases.
                     For cases where they are different font files - eg as is common for
                     Latin fonts, then we rely on fontconfig to report these correctly.
                     Assume that all styles of this font are found by fontconfig,
                     so we can find all the family members which must be registered
                     together to prevent synthetic styling.                    
                </comment>
                <comment line="433">
                    Now we have a physical font. We will back this up with the JDK
                     logical font (sansserif, serif, or monospaced) that corresponds
                     to the PangoGTKFC logical font name.                    
                </comment>
                <declaration name="fcInfo" type="FcCompFont" line="351"/>
                <scope line="352">
                    <scope line="354"/>
                </scope>
                <scope line="359"/>
                <scope line="363"/>
                <scope line="370"/>
                <declaration name="fm" type="FontManager" line="377"/>
                <declaration name="jdkFont" type="CompositeFont" line="378"/>
                <scope line="382"/>
                <declaration name="family" type="FontFamily" line="394"/>
                <declaration name="physFont" type="PhysicalFont" line="395"/>
                <scope line="396">
                    <declaration name="f2D" type="Font2D" line="397"/>
                    <scope line="398"/>
                </scope>
                <scope line="404">
                    <scope line="406"/>
                </scope>
                <scope line="421">
                    <declaration name="fc" type="FcCompFont" line="422"/>
                    <scope line="426"/>
                </scope>
            </method>
            <javadoc line="439">
                @param locale                
                <param>
                    fcFamily                    
                </param>
                <return>
                                        
                </return>
            </javadoc>
            <method name="getFontConfigFonts" type="FcCompFont[]" line="445"/>
            <method name="getFontConfig" type="void" line="452"/>
            <method name="populateFontConfig" type="void" line="457">
                <params>
                    <param name="fcInfo" type="FcCompFont[]"/>
                </params>
            </method>
            <method name="loadFontConfig" type="FcCompFont[]" line="461"/>
            <method name="getFontConfigInfo" type="FontConfigInfo" line="466"/>
            <method name="getFontConfigAASettings" type="int" line="471"/>
        </class>
    </source>