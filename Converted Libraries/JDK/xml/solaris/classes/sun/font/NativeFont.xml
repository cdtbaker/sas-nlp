<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <import package="java.awt.Font"/>
        <import package="java.awt.FontFormatException"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.geom.GeneralPath"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.util.Locale"/>
        <class name="NativeFont" line="57">
            <extends class="PhysicalFont"/>
            <comment line="191">
                Wildcard all the size fields in the XLFD and retrieve a list of
                 XLFD&apos;s that match.
                 We only look for scaleable fonts, so we can just replace the 0&apos;s
                 with &apos;s and see what we get back
                 No matches means even the scaleable version wasn&apos;t found. This is
                 means the X font path isn&apos;t set up for this font at all.
                 One match means only the scaleable version we started with was found
                 -monotype-arial-bold-i-normal--0-0-0-0-p-0-iso8859-1
                 Two matches apparently means as well as the above, a scaleable
                 specified for 72 dpi is found, not that there are bitmaps : eg
                 -monotype-arial-bold-i-normal--0-0-72-72-p-0-iso8859-1
                 So require at least 3 matches (no need to parse) to determine that
                 there are external bitmaps.                
            </comment>
            <comment line="326">
                Specify that the dpi is 72x72, as this corresponds to JDK&apos;s
                 default user space. These are the 10th and 11th fields in the XLFD.
                 ptSize in XLFD is in 10th&apos;s of a point so multiply by 10,
                 Replace the 9th field in the XLFD (ie after the 8th hyphen)
                 with this pt size (this corresponds to the field that&apos;s &quot;%d&quot; in the
                 font configuration files). Wild card the other numeric fields.
                 ie to request 12 pt Times New Roman italic font, use an XLFD like :
                 -monotype-times new roman-regular-i----120-72-72-p--iso8859-1                
            </comment>
            <declaration name="encoding" type="String" line="59"/>
            <declaration name="numGlyphs" type="int" line="61"/>
            <declaration name="isBitmapDelegate" type="boolean" line="62"/>
            <declaration name="delegateFont" type="PhysicalFont" line="63"/>
            <javadoc line="65">
                Verifies native font is accessible.                
                <throws>
                    FontFormatException - if the font can't be located.                    
                </throws>
            </javadoc>
            <method name="NativeFont" type="constructor" line="70">
                <params>
                    <param name="platName" type="String"/>
                    <param name="bitmapDelegate" type="boolean"/>
                </params>
                <comment line="73">
                    This is set true if this is an instance of a NativeFont
                     created by some other font, to get native bitmaps.
                     The delegating font will call this font only for &quot;basic&quot;
                     cases - ie non-rotated, uniform scale, monochrome bitmaps.
                     If this is false, then this instance may need to itself
                     delegate to another font for non-basic cases. Since
                     NativeFonts are used in that way only for symbol and dingbats
                     we know its safe to delegate these to the JRE&apos;s default
                     physical font (Lucida Sans Regular).                    
                </comment>
                <scope line="85"/>
                <scope line="90"/>
            </method>
            <method name="initNames" type="void" line="95">
                <comment line="96">
                    Valid XLFD has exactly 14 &quot;-&quot; chars.
                     First run over the string to verify have at least this many
                     At the same time record the locations of the hyphens
                     so we can just pick the right substring later on                    
                </comment>
                <comment line="118">
                                        
                </comment>
                <comment line="183">
                    familyName = &quot;Unknown&quot;;                    
                </comment>
                <comment line="184">
                    fullName = &quot;Unknown&quot;;                    
                </comment>
                <comment line="185">
                    style = Font.PLAIN;                    
                </comment>
                <comment line="186">
                    encoding = &quot;iso8859-1&quot;;                    
                </comment>
                <declaration name="hPos" type="int[]" line="101"/>
                <declaration name="hyphenCnt" type="int" line="102"/>
                <declaration name="pos" type="int" line="103"/>
                <declaration name="xlfd" type="String" line="105"/>
                <scope line="106">
                    <scope line="107">
                        <scope line="109"/>
                    </scope>
                </scope>
                <scope line="116">
                    <declaration name="tmpFamily" type="String" line="119"/>
                    <declaration name="sBuffer" type="StringBuilder" line="120"/>
                    <declaration name="ch" type="char" line="121"/>
                    <scope line="123">
                        <scope line="124"/>
                    </scope>
                    <declaration name="tmpWeight" type="String" line="131"/>
                    <declaration name="tmpSlant" type="String" line="132"/>
                    <declaration name="styleStr" type="String" line="134"/>
                    <scope line="137"/>
                    <scope line="143">
                        <scope line="146"/>
                        <scope line="148"/>
                    </scope>
                    <scope line="153">
                        <scope line="155"/>
                        <scope line="157"/>
                    </scope>
                    <scope line="162"/>
                    <scope line="164"/>
                    <scope line="169"/>
                    <scope line="172">
                        <scope line="173"/>
                        <scope line="175"/>
                        <scope line="177"/>
                    </scope>
                </scope>
                <scope line="181"/>
            </method>
            <method name="hasExternalBitmaps" type="boolean" line="204">
                <params>
                    <param name="platName" type="String"/>
                </params>
                <comment line="205">
                    Turn -monotype-arial-bold-i-normal--0-0-0-0-p-0-iso8859-1
                     into -monotype-arial-bold-i-normal------p--iso8859-1
                     by replacing all -0- substrings with --                    
                </comment>
                <declaration name="sb" type="StringBuilder" line="209"/>
                <declaration name="pos" type="int" line="210"/>
                <scope line="211"/>
                <declaration name="xlfd" type="String" line="215"/>
                <declaration name="bytes" type="byte[]" line="216"/>
                <scope line="217"/>
                <scope line="219"/>
            </method>
            <method name="fontExists" type="boolean" line="225">
                <params>
                    <param name="xlfd" type="String"/>
                </params>
                <declaration name="bytes" type="byte[]" line="226"/>
                <scope line="227"/>
                <scope line="229"/>
            </method>
            <method name="haveBitmapFonts" type="boolean" line="235"/>
            <method name="fontExists" type="boolean" line="236"/>
            <method name="getMapper" type="CharToGlyphMapper" line="238">
                <comment line="241">
                                        
                </comment>
                <comment line="244">
                                        
                </comment>
                <scope line="239">
                    <scope line="240"/>
                    <scope line="243">
                        <declaration name="fm" type="SunFontManager" line="245"/>
                    </scope>
                </scope>
            </method>
            <method name="createStrike" type="FontStrike" line="253">
                <params>
                    <param name="desc" type="FontStrikeDesc"/>
                </params>
                <comment line="261">
                    If no FileFont&apos;s are found, delegate font may be
                     a NativeFont, so we need to avoid recursing here.                    
                </comment>
                <scope line="254"/>
                <scope line="256">
                    <scope line="257">
                        <declaration name="fm" type="SunFontManager" line="258"/>
                    </scope>
                    <scope line="264"/>
                    <declaration name="delegate" type="FontStrike" line="267"/>
                </scope>
            </method>
            <method name="getMaxCharBounds" type="Rectangle2D" line="272">
                <params>
                    <param name="frc" type="FontRenderContext"/>
                </params>
            </method>
            <method name="getFontMetrics" type="StrikeMetrics" line="276"/>
            <method name="getGlyphAdvance" type="float" line="278"/>
            <method name="getGlyphOutlineBounds" type="Rectangle2D.Float" line="281">
                <params>
                    <param name="pScalerContext" type="long"/>
                    <param name="glyphCode" type="int"/>
                </params>
            </method>
            <method name="getGlyphOutline" type="GeneralPath" line="288">
                <params>
                    <param name="pScalerContext" type="long"/>
                    <param name="glyphCode" type="int"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="getGlyphImage" type="long" line="292"/>
            <method name="getGlyphImageNoDefault" type="long" line="294"/>
            <method name="getGlyphMetrics" type="void" line="297">
                <params>
                    <param name="pScalerContext" type="long"/>
                    <param name="glyphCode" type="int"/>
                    <param name="metrics" type="Point2D.Float"/>
                </params>
            </method>
            <method name="getGlyphVectorOutline" type="GeneralPath" line="303">
                <params>
                    <param name="pScalerContext" type="long"/>
                    <param name="glyphs" type="int[]"/>
                    <param name="numGlyphs" type="int"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="countGlyphs" type="int" line="307"/>
            <method name="getNumGlyphs" type="int" line="309">
                <scope line="310">
                    <declaration name="bytes" type="byte[]" line="311"/>
                </scope>
            </method>
            <method name="getDelegateFont" type="PhysicalFont" line="317">
                <scope line="318">
                    <declaration name="fm" type="SunFontManager" line="319"/>
                </scope>
            </method>
            <method name="getPlatformNameBytes" type="byte[]" line="334">
                <params>
                    <param name="ptSize" type="int"/>
                </params>
                <comment line="348">
                                        
                </comment>
                <comment line="355">
                    replace the 3 lines above with the next 3 lines to get the 1.4.2
                     behaviour                    
                </comment>
                <comment line="358">
                    sb.replace(hPos[11]+1, hPos[12], &quot;0&quot;);                    
                </comment>
                <comment line="359">
                    sb.replace(hPos[9]+1, hPos[10], &quot;0&quot;);                    
                </comment>
                <comment line="360">
                    sb.replace(hPos[8]+1, hPos[9], &quot;0&quot;);                    
                </comment>
                <comment line="366">
                    replace the 1 line above with the next line to get the 1.4.2
                     behaviour                    
                </comment>
                <comment line="369">
                    sb.replace(hPos[6]+1, hPos[7], &quot;0&quot;);                    
                </comment>
                <comment line="371">
                                        
                </comment>
                <comment line="373">
                    null foundry name : some linux font configuration files have
                     symbol font entries like this and its just plain wrong.
                     Replace with a wild card. (Although those fonts should be
                     located via disk access rather than X11).                    
                </comment>
                <declaration name="hPos" type="int[]" line="335"/>
                <declaration name="hyphenCnt" type="int" line="336"/>
                <declaration name="pos" type="int" line="337"/>
                <scope line="339">
                    <scope line="341"/>
                </scope>
                <declaration name="sizeStr" type="String" line="346"/>
                <declaration name="sb" type="StringBuilder" line="347"/>
                <scope line="372"/>
                <declaration name="xlfd" type="String" line="381"/>
                <declaration name="bytes" type="byte[]" line="382"/>
                <scope line="383"/>
                <scope line="385"/>
            </method>
            <method name="toString" type="String" line="391"/>
        </class>
    </source>