<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <import package="java.awt.FontFormatException"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.geom.GeneralPath"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Locale"/>
        <import package="java.nio.charset"/>
        <import package="java.nio.CharBuffer"/>
        <import package="java.nio.ByteBuffer"/>
        <class name="XMap" line="38">
            <comment line="43">
                ConvertedGlyphs has unicode code points as indexes and values
                 are platform-encoded multi-bytes chars packed into java chars.
                 These platform-encoded characters are equated to glyph ids, although
                 that&apos;s not strictly true, as X11 only supports using chars.
                 The assumption carried over from the native implementation that
                 a char is big enough to hold an X11 glyph id (ie platform char).                
            </comment>
            <declaration name="xMappers" type="HashMap" line="40"/>
            <declaration name="convertedGlyphs" type="char[]" line="49"/>
            <method name="getXMapper" type="XMap" line="51">
                <params>
                    <param name="encoding" type="String"/>
                </params>
                <declaration name="mapper" type="XMap" line="52"/>
                <scope line="53"/>
            </method>
            <declaration name="SINGLE_BYTE" type="int" line="60"/>
            <declaration name="DOUBLE_BYTE" type="int" line="61"/>
            <method name="getXMapperInternal" type="XMap" line="63">
                <params>
                    <param name="encoding" type="String"/>
                </params>
                <comment line="88">
                    this is mapping the latin supplement range 128-&gt;255 which                    
                </comment>
                <comment line="89">
                    doesn&apos;t exist in JIS0201. This needs examination.                    
                </comment>
                <comment line="90">
                    it was also overwriting a couple of the mappings of                    
                </comment>
                <comment line="91">
                    7E and A5 which in JIS201 are different chars than in                    
                </comment>
                <comment line="92">
                    Latin 1. I have revised AddAscii to not overwrite chars                    
                </comment>
                <comment line="93">
                    which are already converted.                    
                </comment>
                <declaration name="jclass" type="String" line="65"/>
                <declaration name="nBytes" type="int" line="66"/>
                <declaration name="maxU" type="int" line="67"/>
                <declaration name="minU" type="int" line="68"/>
                <declaration name="addAscii" type="boolean" line="69"/>
                <declaration name="lowPartOnly" type="boolean" line="70"/>
                <scope line="71"/>
                <scope line="75"/>
                <scope line="79"/>
                <scope line="81"/>
                <scope line="83"/>
                <scope line="86"/>
                <scope line="96"/>
                <scope line="99"/>
                <scope line="101"/>
                <scope line="103"/>
                <scope line="105"/>
                <scope line="107"/>
                <scope line="109"/>
                <scope line="111"/>
                <scope line="113"/>
                <scope line="115"/>
                <scope line="117"/>
                <scope line="119"/>
                <scope line="122"/>
                <scope line="125"/>
                <scope line="128"/>
                <scope line="131"/>
                <scope line="134"/>
                <scope line="137"/>
                <scope line="140"/>
                <scope line="144"/>
                <scope line="146"/>
                <scope line="149"/>
                <scope line="152"/>
                <scope line="155"/>
                <scope line="158"/>
            </method>
            <declaration name="SURR_MIN" type="char" line="165"/>
            <declaration name="SURR_MAX" type="char" line="166"/>
            <method name="XMap" type="constructor" line="169">
                <params>
                    <param name="className" type="String"/>
                    <param name="minU" type="int"/>
                    <param name="maxU" type="int"/>
                    <param name="nBytes" type="int"/>
                    <param name="addAscii" type="boolean"/>
                    <param name="lowPartOnly" type="boolean"/>
                </params>
                <comment line="188">
                    chars is set to the unicode values to convert,
                     bytes is where the X11 character codes will be output.
                     Finally we pack the byte pairs into chars.                    
                </comment>
                <comment line="199">
                                        
                </comment>
                <comment line="207">
                    Since we dont support surrogates in any X11 encoding, skip                    
                </comment>
                <comment line="208">
                    the surrogate area, otherwise the sequence of &quot;Oxdbff0xdc00&quot;                    
                </comment>
                <comment line="209">
                    will accidently cause the surrogate-aware nio charset to treat                    
                </comment>
                <comment line="210">
                    them as a legal pair and then undesirablly skip 2 &quot;chars&quot;                    
                </comment>
                <comment line="211">
                    for one &quot;unmappable character&quot;                    
                </comment>
                <declaration name="enc" type="CharsetEncoder" line="171"/>
                <scope line="172">
                    <scope line="173">
                        <scope line="174"/>
                        <scope line="176"/>
                    </scope>
                    <scope line="179"/>
                </scope>
                <scope line="181">
                    <scope line="183"/>
                </scope>
                <scope line="187">
                    <declaration name="count" type="int" line="192"/>
                    <declaration name="bytes" type="byte[]" line="193"/>
                    <declaration name="chars" type="char[]" line="194"/>
                    <scope line="195"/>
                    <declaration name="startCharIndex" type="int" line="198"/>
                    <scope line="200"/>
                    <declaration name="rbytes" type="byte[]" line="203"/>
                    <scope line="204">
                        <declaration name="cbLen" type="int" line="205"/>
                        <declaration name="bbLen" type="int" line="206"/>
                        <scope line="212"/>
                    </scope>
                    <scope line="231"/>
                    <scope line="234">
                        <scope line="235"/>
                        <scope line="237"/>
                    </scope>
                </scope>
                <declaration name="max" type="int" line="244"/>
                <scope line="245">
                    <scope line="246">
                        <scope line="247"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>