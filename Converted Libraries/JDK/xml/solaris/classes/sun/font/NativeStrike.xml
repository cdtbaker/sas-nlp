<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.GeneralPath"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.NoninvertibleTransformException"/>
        <class name="NativeStrike" line="35">
            <extends class="PhysicalStrike"/>
            <comment line="43">
                The following method prepares data used in obtaining FontMetrics.
                 This is the one case in which we allow anything other than a
                 simple scale to be used with a native font. We do this because in
                 order to ensure that clients get the overall metrics they expect
                 for a font whatever coordinate system (combination of font and
                 device transform) they use.
                 X11 fonts can only have a scale applied (remind : non-uniform?)
                 We strip out everything else and if necessary obtain an inverse
                 tx which we use to return metrics for the font in the transformed
                 coordinate system of the font. ie we pass X11 a simple scale, and
                 then apply the non-scale part of the font TX to that result.                
            </comment>
            <comment line="131">
                The asymmetry of the following methods is to help preserve
                 performance with minimal textual changes to the calling code
                 when moving initialisation of these arrays out of the constructor.
                 This may be restructured later when there&apos;s more room for changes                
            </comment>
            <comment line="188">
                We want the native font to be responsible for reporting the
                 font metrics, even if it often delegates to another font.
                 The code here isn&apos;t yet implementing exactly that. If the glyph
                 transform was something native couldn&apos;t handle, there&apos;s no native
                 context from which to obtain metrics. Need to revise this to obtain
                 the metrics and transform them. But currently in such a case it
                 gets the metrics from a different font - its glyph delegate font.                
            </comment>
            <comment line="261">
                This is used when a FileFont uses the native names to create a
                 delegate NativeFontStrike to get images from native. This is used
                 because Solaris TrueType fonts have external PCF bitmaps rather than
                 embedded bitmaps. This is really only important for CJK fonts as
                 for most scripts the external X11 bitmaps aren&apos;t much better - if
                 at all - than the results from hinting the outlines.                
            </comment>
            <comment line="316">
                We want the native font to be responsible for reporting the
                 font metrics, even if it often delegates to another font.
                 The code here isn&apos;t yet implementing exactly that. If the glyph
                 transform was something native couldn&apos;t handle, there&apos;s no native
                 context from which to obtain metrics. Need to revise this to obtain
                 the metrics and transform them. But currently in such a case it
                 gets the metrics from a different font - its glyph delegate font.                
            </comment>
            <declaration name="nativeFont" type="NativeFont" line="37"/>
            <declaration name="numGlyphs" type="int" line="38"/>
            <declaration name="invertDevTx" type="AffineTransform" line="39"/>
            <declaration name="fontTx" type="AffineTransform" line="40"/>
            <method name="getNativePointSize" type="int" line="54">
                <comment line="56">
                    Make a copy of the glyphTX in which we will store the
                     font transform, inverting the devTx if necessary                    
                </comment>
                <comment line="63">
                                        
                </comment>
                <comment line="74">
                    At this point the fontTx may be a simple +ve scale, or it
                     may be something more complex.                    
                </comment>
                <comment line="83">
                    We need to create an inverse transform that doesn&apos;t
                     include the point size (strictly the uniform scale)                    
                </comment>
                <comment line="88">
                    no need                    
                </comment>
                <declaration name="mat" type="double[]" line="58"/>
                <scope line="64">
                    <scope line="65"/>
                    <scope line="68"/>
                </scope>
                <declaration name="pt" type="Point2D.Float" line="76"/>
                <declaration name="ptSize" type="double" line="78"/>
                <declaration name="ttype" type="int" line="79"/>
                <scope line="81"/>
                <scope line="86"/>
            </method>
            <method name="NativeStrike" type="constructor" line="92">
                <params>
                    <param name="nativeFont" type="NativeFont"/>
                    <param name="desc" type="FontStrikeDesc"/>
                </params>
                <comment line="98">
                    If this is a delegate for bitmaps, we expect to have
                     been invoked only for a simple scale. If that&apos;s not
                     true, just bail                    
                </comment>
                <scope line="101">
                    <declaration name="ttype" type="int" line="102"/>
                    <scope line="104"/>
                </scope>
                <declaration name="ptSize" type="int" line="110"/>
                <declaration name="nameBytes" type="byte[]" line="111"/>
                <declaration name="scale" type="double" line="112"/>
                <scope line="114">
                    <scope line="118"/>
                </scope>
            </method>
            <method name="usingIntGlyphImages" type="boolean" line="135">
                <comment line="142">
                    We could obtain minGlyphIndex and index relative to that
                     if we need to save space.                    
                </comment>
                <comment line="147">
                                        
                </comment>
                <scope line="136"/>
                <scope line="138"/>
                <scope line="140">
                    <declaration name="glyphLenArray" type="int" line="144"/>
                    <scope line="147"/>
                </scope>
            </method>
            <method name="getLongGlyphImages" type="long[]" line="156">
                <comment line="160">
                    We could obtain minGlyphIndex and index relative to that
                     if we need to save space.                    
                </comment>
                <comment line="165">
                                        
                </comment>
                <scope line="157">
                    <declaration name="glyphLenArray" type="int" line="162"/>
                    <scope line="165"/>
                </scope>
            </method>
            <method name="NativeStrike" type="constructor" line="175">
                <params>
                    <param name="nativeFont" type="NativeFont"/>
                    <param name="desc" type="FontStrikeDesc"/>
                    <param name="nocache" type="boolean"/>
                </params>
                <comment line="181">
                    uniform scale                    
                </comment>
                <declaration name="ptSize" type="int" line="179"/>
                <declaration name="scale" type="double" line="180"/>
                <declaration name="nameBytes" type="byte[]" line="181"/>
                <declaration name="numGlyphs" type="int" line="184"/>
            </method>
            <method name="getFontMetrics" type="StrikeMetrics" line="195">
                <scope line="196">
                    <scope line="197"/>
                    <scope line="200"/>
                </scope>
            </method>
            <method name="createScalerContext" type="long" line="207"/>
            <method name="getMaxGlyph" type="int" line="210"/>
            <method name="createNullScalerContext" type="long" line="212"/>
            <method name="getGlyphImagePtrs" type="void" line="214">
                <params>
                    <param name="glyphCodes" type="int[]"/>
                    <param name="images" type="long[]"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="215"/>
            </method>
            <method name="getGlyphImagePtr" type="long" line="220">
                <params>
                    <param name="glyphCode" type="int"/>
                </params>
                <comment line="229">
                    Synchronize in case some other thread has updated this
                     cache entry already - unlikely but possible.                    
                </comment>
                <comment line="243">
                                        
                </comment>
                <declaration name="glyphPtr" type="long" line="221"/>
                <scope line="223">
                    <scope line="224"/>
                    <scope line="226">
                        <scope line="231">
                            <scope line="232"/>
                            <scope line="235"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="243"/>
                <scope line="245">
                    <scope line="248">
                        <scope line="249"/>
                        <scope line="252"/>
                    </scope>
                </scope>
            </method>
            <method name="getGlyphImagePtrNoCache" type="long" line="267">
                <params>
                    <param name="glyphCode" type="int"/>
                </params>
            </method>
            <method name="getGlyphImageBounds" type="void" line="272">
                <params>
                    <param name="glyphcode" type="int"/>
                    <param name="pt" type="Point2D.Float"/>
                    <param name="result" type="Rectangle"/>
                </params>
            </method>
            <method name="getGlyphMetrics" type="Point2D.Float" line="275">
                <params>
                    <param name="glyphCode" type="int"/>
                </params>
                <declaration name="pt" type="Point2D.Float" line="276"/>
            </method>
            <method name="getGlyphAdvance" type="float" line="280">
                <params>
                    <param name="glyphCode" type="int"/>
                </params>
            </method>
            <method name="getGlyphOutlineBounds" type="Rectangle2D.Float" line="284">
                <params>
                    <param name="glyphCode" type="int"/>
                </params>
            </method>
            <method name="getGlyphOutline" type="GeneralPath" line="288">
                <params>
                    <param name="glyphCode" type="int"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="getGlyphVectorOutline" type="GeneralPath" line="292">
                <params>
                    <param name="glyphs" type="int[]"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
        </class>
        <class name="DelegateStrike" line="305">
            <extends class="NativeStrike"/>
            <comment line="43">
                The following method prepares data used in obtaining FontMetrics.
                 This is the one case in which we allow anything other than a
                 simple scale to be used with a native font. We do this because in
                 order to ensure that clients get the overall metrics they expect
                 for a font whatever coordinate system (combination of font and
                 device transform) they use.
                 X11 fonts can only have a scale applied (remind : non-uniform?)
                 We strip out everything else and if necessary obtain an inverse
                 tx which we use to return metrics for the font in the transformed
                 coordinate system of the font. ie we pass X11 a simple scale, and
                 then apply the non-scale part of the font TX to that result.                
            </comment>
            <comment line="131">
                The asymmetry of the following methods is to help preserve
                 performance with minimal textual changes to the calling code
                 when moving initialisation of these arrays out of the constructor.
                 This may be restructured later when there&apos;s more room for changes                
            </comment>
            <comment line="188">
                We want the native font to be responsible for reporting the
                 font metrics, even if it often delegates to another font.
                 The code here isn&apos;t yet implementing exactly that. If the glyph
                 transform was something native couldn&apos;t handle, there&apos;s no native
                 context from which to obtain metrics. Need to revise this to obtain
                 the metrics and transform them. But currently in such a case it
                 gets the metrics from a different font - its glyph delegate font.                
            </comment>
            <comment line="261">
                This is used when a FileFont uses the native names to create a
                 delegate NativeFontStrike to get images from native. This is used
                 because Solaris TrueType fonts have external PCF bitmaps rather than
                 embedded bitmaps. This is really only important for CJK fonts as
                 for most scripts the external X11 bitmaps aren&apos;t much better - if
                 at all - than the results from hinting the outlines.                
            </comment>
            <comment line="316">
                We want the native font to be responsible for reporting the
                 font metrics, even if it often delegates to another font.
                 The code here isn&apos;t yet implementing exactly that. If the glyph
                 transform was something native couldn&apos;t handle, there&apos;s no native
                 context from which to obtain metrics. Need to revise this to obtain
                 the metrics and transform them. But currently in such a case it
                 gets the metrics from a different font - its glyph delegate font.                
            </comment>
            <declaration name="delegateStrike" type="FontStrike" line="307"/>
            <method name="DelegateStrike" type="constructor" line="310">
                <params>
                    <param name="nativeFont" type="NativeFont"/>
                    <param name="desc" type="FontStrikeDesc"/>
                    <param name="delegate" type="FontStrike"/>
                </params>
            </method>
            <method name="getFontMetrics" type="StrikeMetrics" line="323">
                <scope line="324">
                    <scope line="325"/>
                    <scope line="328"/>
                </scope>
            </method>
            <method name="getGlyphImagePtrs" type="void" line="335">
                <params>
                    <param name="glyphCodes" type="int[]"/>
                    <param name="images" type="long[]"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="getGlyphImagePtr" type="long" line="339">
                <params>
                    <param name="glyphCode" type="int"/>
                </params>
            </method>
            <method name="getGlyphImageBounds" type="void" line="344">
                <params>
                    <param name="glyphCode" type="int"/>
                    <param name="pt" type="Point2D.Float"/>
                    <param name="result" type="Rectangle"/>
                </params>
            </method>
            <method name="getGlyphMetrics" type="Point2D.Float" line="348">
                <params>
                    <param name="glyphCode" type="int"/>
                </params>
            </method>
            <method name="getGlyphAdvance" type="float" line="352">
                <params>
                    <param name="glyphCode" type="int"/>
                </params>
            </method>
            <method name="getCharMetrics" type="Point2D.Float" line="356">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <method name="getCodePointAdvance" type="float" line="360">
                <params>
                    <param name="cp" type="int"/>
                </params>
                <scope line="361"/>
            </method>
            <method name="getGlyphOutlineBounds" type="Rectangle2D.Float" line="367">
                <params>
                    <param name="glyphCode" type="int"/>
                </params>
            </method>
            <method name="getGlyphOutline" type="GeneralPath" line="371">
                <params>
                    <param name="glyphCode" type="int"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="getGlyphVectorOutline" type="GeneralPath" line="375">
                <params>
                    <param name="glyphs" type="int[]"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
        </class>
    </source>