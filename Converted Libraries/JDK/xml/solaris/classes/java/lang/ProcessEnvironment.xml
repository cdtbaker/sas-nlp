<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.io"/>
        <import package="java.util"/>
        <class name="ProcessEnvironment" line="4">
            <declaration name="theEnvironment" type="HashMap&lt;Variable,Value&gt;" line="5"/>
            <declaration name="theUnmodifiableEnvironment" type="Map&lt;String,String&gt;" line="6"/>
            <declaration name="MIN_NAME_LENGTH" type="int" line="7"/>
            <scope line="8">
                <declaration name="environ" type="byte[][]" line="9"/>
            </scope>
            <method name="getenv" type="String" line="14">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getenv" type="Map<String,String>" line="17"/>
            <method name="environment" type="Map<String,String>" line="20"/>
            <method name="emptyEnvironment" type="Map<String,String>" line="23">
                <params>
                    <param name="capacity" type="int"/>
                </params>
            </method>
            <method name="environ" type="byte[][]" line="26"/>
            <method name="ProcessEnvironment" type="constructor" line="27"/>
            <method name="validateVariable" type="void" line="29">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="validateValue" type="void" line="32">
                <params>
                    <param name="value" type="String"/>
                </params>
            </method>
            <class name="ExternalData" line="35">
                <declaration name="str" type="String" line="36"/>
                <declaration name="bytes" type="byte[]" line="37"/>
                <method name="ExternalData" type="constructor" line="38">
                    <params>
                        <param name="str" type="String"/>
                        <param name="bytes" type="byte[]"/>
                    </params>
                </method>
                <method name="getBytes" type="byte[]" line="42"/>
                <method name="toString" type="String" line="45"/>
                <method name="equals" type="boolean" line="48">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="hashCode" type="int" line="51"/>
            </class>
            <class name="Variable" line="55">
                <extends class="ExternalData"/>
                <implements interface="Comparable">
                    <type_params>
                        <type_param name="Variable"/>
                    </type_params>
                </implements>
                <method name="Variable" type="constructor" line="56">
                    <params>
                        <param name="str" type="String"/>
                        <param name="bytes" type="byte[]"/>
                    </params>
                </method>
                <method name="valueOfQueryOnly" type="Variable" line="59">
                    <params>
                        <param name="str" type="Object"/>
                    </params>
                </method>
                <method name="valueOfQueryOnly" type="Variable" line="62">
                    <params>
                        <param name="str" type="String"/>
                    </params>
                </method>
                <method name="valueOf" type="Variable" line="65">
                    <params>
                        <param name="str" type="String"/>
                    </params>
                </method>
                <method name="valueOf" type="Variable" line="69">
                    <params>
                        <param name="bytes" type="byte[]"/>
                    </params>
                </method>
                <method name="compareTo" type="int" line="72">
                    <params>
                        <param name="variable" type="Variable"/>
                    </params>
                </method>
                <method name="equals" type="boolean" line="75">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="Value" line="79">
                <extends class="ExternalData"/>
                <implements interface="Comparable">
                    <type_params>
                        <type_param name="Value"/>
                    </type_params>
                </implements>
                <method name="Value" type="constructor" line="80">
                    <params>
                        <param name="str" type="String"/>
                        <param name="bytes" type="byte[]"/>
                    </params>
                </method>
                <method name="valueOfQueryOnly" type="Value" line="83">
                    <params>
                        <param name="str" type="Object"/>
                    </params>
                </method>
                <method name="valueOfQueryOnly" type="Value" line="86">
                    <params>
                        <param name="str" type="String"/>
                    </params>
                </method>
                <method name="valueOf" type="Value" line="89">
                    <params>
                        <param name="str" type="String"/>
                    </params>
                </method>
                <method name="valueOf" type="Value" line="93">
                    <params>
                        <param name="bytes" type="byte[]"/>
                    </params>
                </method>
                <method name="compareTo" type="int" line="96">
                    <params>
                        <param name="value" type="Value"/>
                    </params>
                </method>
                <method name="equals" type="boolean" line="99">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="StringEnvironment" line="103">
                <extends class="AbstractMap">
                    <type_params>
                        <type_param name="String"/>
                        <type_param name="String"/>
                    </type_params>
                </extends>
                <declaration name="m" type="Map&lt;Variable,Value&gt;" line="104"/>
                <method name="toString" type="String" line="105">
                    <params>
                        <param name="v" type="Value"/>
                    </params>
                </method>
                <method name="StringEnvironment" type="constructor" line="108">
                    <params>
                        <param name="m" type="Map<Variable,Value>"/>
                    </params>
                </method>
                <method name="size" type="int" line="111"/>
                <method name="isEmpty" type="boolean" line="114"/>
                <method name="clear" type="void" line="117"/>
                <method name="containsKey" type="boolean" line="120">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                </method>
                <method name="containsValue" type="boolean" line="123">
                    <params>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <method name="get" type="String" line="126">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                </method>
                <method name="put" type="String" line="129">
                    <params>
                        <param name="key" type="String"/>
                        <param name="value" type="String"/>
                    </params>
                </method>
                <method name="remove" type="String" line="132">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                </method>
                <method name="keySet" type="Set<String>" line="135"/>
                <method name="entrySet" type="Set<Map.Entry<String,String>>" line="138"/>
                <method name="values" type="Collection<String>" line="141"/>
                <method name="toEnvironmentBlock" type="byte[]" line="144">
                    <params>
                        <param name="envc" type="int[]"/>
                    </params>
                    <declaration name="count" type="int" line="145"/>
                    <scope line="146"/>
                    <declaration name="block" type="byte[]" line="150"/>
                    <declaration name="i" type="int" line="151"/>
                    <scope line="152">
                        <declaration name="key" type="byte[]" line="153"/>
                        <declaration name="value" type="byte[]" line="154"/>
                    </scope>
                </method>
            </class>
            <method name="toEnvironmentBlock" type="byte[]" line="165">
                <params>
                    <param name="map" type="Map<String,String>"/>
                    <param name="envc" type="int[]"/>
                </params>
            </method>
            <class name="StringEntry" line="168">
                <implements interface="Map.Entry">
                    <type_params>
                        <type_param name="String"/>
                        <type_param name="String"/>
                    </type_params>
                </implements>
                <declaration name="e" type="Map.Entry&lt;Variable,Value&gt;" line="169"/>
                <method name="StringEntry" type="constructor" line="170">
                    <params>
                        <param name="e" type="Map.Entry<Variable,Value>"/>
                    </params>
                </method>
                <method name="getKey" type="String" line="173"/>
                <method name="getValue" type="String" line="176"/>
                <method name="setValue" type="String" line="179">
                    <params>
                        <param name="newValue" type="String"/>
                    </params>
                </method>
                <method name="toString" type="String" line="182"/>
                <method name="equals" type="boolean" line="185">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="hashCode" type="int" line="188"/>
            </class>
            <class name="StringEntrySet" line="192">
                <extends class="AbstractSet">
                    <type_params>
                        <type_param name="Map.Entry<String,String>"/>
                    </type_params>
                </extends>
                <declaration name="s" type="Set&lt;Map.Entry&lt;Variable,Value&gt;&gt;" line="193"/>
                <method name="StringEntrySet" type="constructor" line="194">
                    <params>
                        <param name="s" type="Set<Map.Entry<Variable,Value>>"/>
                    </params>
                </method>
                <method name="size" type="int" line="197"/>
                <method name="isEmpty" type="boolean" line="200"/>
                <method name="clear" type="void" line="203"/>
                <method name="iterator" type="Iterator<Map.Entry<String,String>>" line="206">
                    <anonymous_class line="207">
                        <declaration name="i" type="Iterator&lt;Map.Entry&lt;Variable,Value&gt;&gt;" line="208"/>
                        <method name="hasNext" type="boolean" line="209"/>
                        <method name="next" type="Map.Entry<String,String>" line="212"/>
                        <method name="remove" type="void" line="215"/>
                    </anonymous_class>
                </method>
                <method name="vvEntry" type="Map.Entry<Variable,Value>" line="221">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <anonymous_class line="223">
                        <method name="getKey" type="Variable" line="224"/>
                        <method name="getValue" type="Value" line="227"/>
                        <method name="setValue" type="Value" line="230">
                            <params>
                                <param name="value" type="Value"/>
                            </params>
                        </method>
                    </anonymous_class>
                </method>
                <method name="contains" type="boolean" line="236">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="remove" type="boolean" line="239">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="equals" type="boolean" line="242">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="hashCode" type="int" line="245"/>
            </class>
            <class name="StringValues" line="249">
                <extends class="AbstractCollection">
                    <type_params>
                        <type_param name="String"/>
                    </type_params>
                </extends>
                <declaration name="c" type="Collection&lt;Value&gt;" line="250"/>
                <method name="StringValues" type="constructor" line="251">
                    <params>
                        <param name="c" type="Collection<Value>"/>
                    </params>
                </method>
                <method name="size" type="int" line="254"/>
                <method name="isEmpty" type="boolean" line="257"/>
                <method name="clear" type="void" line="260"/>
                <method name="iterator" type="Iterator<String>" line="263">
                    <anonymous_class line="264">
                        <declaration name="i" type="Iterator&lt;Value&gt;" line="265"/>
                        <method name="hasNext" type="boolean" line="266"/>
                        <method name="next" type="String" line="269"/>
                        <method name="remove" type="void" line="272"/>
                    </anonymous_class>
                </method>
                <method name="contains" type="boolean" line="278">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="remove" type="boolean" line="281">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="equals" type="boolean" line="284">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="hashCode" type="int" line="287"/>
            </class>
            <class name="StringKeySet" line="291">
                <extends class="AbstractSet">
                    <type_params>
                        <type_param name="String"/>
                    </type_params>
                </extends>
                <declaration name="s" type="Set&lt;Variable&gt;" line="292"/>
                <method name="StringKeySet" type="constructor" line="293">
                    <params>
                        <param name="s" type="Set<Variable>"/>
                    </params>
                </method>
                <method name="size" type="int" line="296"/>
                <method name="isEmpty" type="boolean" line="299"/>
                <method name="clear" type="void" line="302"/>
                <method name="iterator" type="Iterator<String>" line="305">
                    <anonymous_class line="306">
                        <declaration name="i" type="Iterator&lt;Variable&gt;" line="307"/>
                        <method name="hasNext" type="boolean" line="308"/>
                        <method name="next" type="String" line="311"/>
                        <method name="remove" type="void" line="314"/>
                    </anonymous_class>
                </method>
                <method name="contains" type="boolean" line="320">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="remove" type="boolean" line="323">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
            </class>
            <method name="arrayCompare" type="int" line="327">
                <params>
                    <param name="x" type="byte[]"/>
                    <param name="y" type="byte[]"/>
                </params>
                <declaration name="min" type="int" line="328"/>
            </method>
            <method name="arrayEquals" type="boolean" line="332">
                <params>
                    <param name="x" type="byte[]"/>
                    <param name="y" type="byte[]"/>
                </params>
            </method>
            <method name="arrayHash" type="int" line="337">
                <params>
                    <param name="x" type="byte[]"/>
                </params>
                <declaration name="hash" type="int" line="338"/>
            </method>
        </class>
    </source>