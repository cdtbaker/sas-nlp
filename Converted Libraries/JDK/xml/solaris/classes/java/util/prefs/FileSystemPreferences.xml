<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.util.prefs">
        <import package="java.util"/>
        <import package="java.io"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="FileSystemPreferences" line="9">
            <extends class="AbstractPreferences"/>
            <javadoc line="9">
                Preferences implementation for Unix.  Preferences are stored in the file
                  system, with one directory per preferences node.  All of the preferences
                  at each node are stored in a single file.  Atomic file system operations
                  (e.g. File.renameTo) are used to ensure integrity.  An in-memory cache of
                  the &quot;explored&quot; portion of the tree is maintained for performance, and
                  written back to the disk periodically.  File-locking is used to ensure
                  reasonable behavior when multiple VMs are running at the same time.
                  (The file lock is obtained only for sync(), flush() and removeNode().)                
                <author>
                    Josh Bloch                    
                </author>
                <see>
                    Preferences                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="SYNC_INTERVAL" type="int" line="23"/>
            <javadoc line="23">
                Sync interval in seconds.                
            </javadoc>
            <javadoc line="27">
                Returns logger for error messages. Backing store exceptions are logged at
                  WARNING level.                
            </javadoc>
            <method name="getLogger" type="PlatformLogger" line="31"/>
            <declaration name="systemRootDir" type="File" line="34"/>
            <javadoc line="34">
                Directory for system preferences.                
            </javadoc>
            <declaration name="isSystemRootWritable" type="boolean" line="38"/>
            <declaration name="userRootDir" type="File" line="39"/>
            <javadoc line="39">
                Directory for user preferences.                
            </javadoc>
            <declaration name="isUserRootWritable" type="boolean" line="43"/>
            <declaration name="userRoot" type="Preferences" line="44"/>
            <javadoc line="44">
                The user root.                
            </javadoc>
            <method name="getUserRoot" type="Preferences" line="48">
                <scope line="49"/>
            </method>
            <method name="setupUserRoot" type="void" line="55">
                <anonymous_class line="56">
                    <method name="run" type="Void" line="57">
                        <scope line="59">
                            <scope line="60">
                                <scope line="61"/>
                                <scope line="64"/>
                            </scope>
                        </scope>
                        <declaration name="USER_NAME" type="String" line="72"/>
                        <scope line="75">
                            <declaration name="result" type="int" line="77"/>
                        </scope>
                        <scope line="80"/>
                    </method>
                </anonymous_class>
            </method>
            <declaration name="systemRoot" type="Preferences" line="89"/>
            <javadoc line="89">
                The system root.                
            </javadoc>
            <method name="getSystemRoot" type="Preferences" line="93">
                <scope line="94"/>
            </method>
            <method name="setupSystemRoot" type="void" line="100">
                <anonymous_class line="101">
                    <method name="run" type="Void" line="102">
                        <declaration name="systemPrefsDirName" type="String" line="103"/>
                        <scope line="105">
                            <scope line="107">
                                <scope line="108">
                                    <scope line="110"/>
                                    <scope line="113"/>
                                </scope>
                                <scope line="116"/>
                            </scope>
                        </scope>
                        <scope line="124">
                            <declaration name="result" type="int" line="126"/>
                        </scope>
                        <scope line="129"/>
                    </method>
                </anonymous_class>
            </method>
            <declaration name="USER_READ_WRITE" type="int" line="138"/>
            <javadoc line="138">
                Unix user write/read permission                
            </javadoc>
            <declaration name="USER_RW_ALL_READ" type="int" line="142"/>
            <declaration name="USER_RWX_ALL_RX" type="int" line="143"/>
            <declaration name="USER_RWX" type="int" line="144"/>
            <declaration name="userLockFile" type="File" line="145"/>
            <javadoc line="145">
                The lock file for the user tree.                
            </javadoc>
            <declaration name="systemLockFile" type="File" line="149"/>
            <javadoc line="149">
                The lock file for the system tree.                
            </javadoc>
            <declaration name="userRootLockHandle" type="int" line="153"/>
            <javadoc line="153">
                Unix lock handle for userRoot.
                  Zero, if unlocked.                
            </javadoc>
            <declaration name="systemRootLockHandle" type="int" line="158"/>
            <javadoc line="158">
                Unix lock handle for systemRoot.
                  Zero, if unlocked.                
            </javadoc>
            <declaration name="dir" type="File" line="163"/>
            <javadoc line="163">
                The directory representing this preference node.  There is no guarantee
                  that this directory exits, as another VM can delete it at any time
                  that it (the other VM) holds the file-lock.  While the root node cannot
                  be deleted, it may not yet have been created, or the underlying
                  directory could have been deleted accidentally.                
            </javadoc>
            <declaration name="prefsFile" type="File" line="171"/>
            <javadoc line="171">
                The file representing this preference node&apos;s preferences.
                  The file format is undocumented, and subject to change
                  from release to release, but I&apos;m sure that you can figure
                  it out if you try real hard.                
            </javadoc>
            <declaration name="tmpFile" type="File" line="178"/>
            <javadoc line="178">
                A temporary file used for saving changes to preferences.  As part of
                  the sync operation, changes are first saved into this file, and then
                  atomically renamed to prefsFile.  This results in an atomic state
                  change from one valid set of preferences to another.  The
                  the file-lock is held for the duration of this transformation.                
            </javadoc>
            <declaration name="userRootModFile" type="File" line="186"/>
            <javadoc line="186">
                File, which keeps track of global modifications of userRoot.                
            </javadoc>
            <declaration name="isUserRootModified" type="boolean" line="190"/>
            <javadoc line="190">
                Flag, which indicated whether userRoot was modified by another VM                
            </javadoc>
            <declaration name="userRootModTime" type="long" line="194"/>
            <javadoc line="194">
                Keeps track of userRoot modification time. This time is reset to
                  zero after UNIX reboot, and is increased by 1 second each time
                  userRoot is modified.                
            </javadoc>
            <declaration name="systemRootModFile" type="File" line="200"/>
            <declaration name="isSystemRootModified" type="boolean" line="201"/>
            <declaration name="systemRootModTime" type="long" line="202"/>
            <javadoc line="202">
                Keeps track of systemRoot modification time. This time is reset to
                  zero after system reboot, and is increased by 1 second each time
                  systemRoot is modified.                
            </javadoc>
            <declaration name="prefsCache" type="Map&lt;String,String&gt;" line="208"/>
            <javadoc line="208">
                Locally cached preferences for this node (includes uncommitted
                  changes).  This map is initialized with from disk when the first get or
                  put operation occurs on this node.  It is synchronized with the
                  corresponding disk file (prefsFile) by the sync operation.  The initial
                  value is read without acquiring the file-lock.                
            </javadoc>
            <declaration name="lastSyncTime" type="long" line="216"/>
            <javadoc line="216">
                The last modification time of the file backing this node at the time
                  that prefCache was last synchronized (or initially read).  This
                  value is set before reading the file, so it&apos;s conservative; the
                  actual timestamp could be (slightly) higher.  A value of zero indicates
                  that we were unable to initialize prefsCache from the disk, or
                  have not yet attempted to do so.  (If prefsCache is non-null, it
                  indicates the former; if it&apos;s null, the latter.)                
            </javadoc>
            <declaration name="EAGAIN" type="int" line="226"/>
            <javadoc line="226">
                Unix error code for locked file.                
            </javadoc>
            <declaration name="EACCES" type="int" line="230"/>
            <javadoc line="230">
                Unix error code for denied access.                
            </javadoc>
            <declaration name="LOCK_HANDLE" type="int" line="234"/>
            <declaration name="ERROR_CODE" type="int" line="235"/>
            <declaration name="changeLog" type="List&lt;Change&gt;" line="236"/>
            <javadoc line="236">
                A list of all uncommitted preference changes.  The elements in this
                  list are of type PrefChange.  If this node is concurrently modified on
                  disk by another VM, the two sets of changes are merged when this node
                  is sync&apos;ed by overwriting our prefsCache with the preference map last
                  written out to disk (by the other VM), and then replaying this change
                  log against that map.  The resulting map is then written back
                  to the disk.                
            </javadoc>
            <class name="Change" line="246">
                <javadoc line="246">
                    Represents a change to a preference.                    
                </javadoc>
                <method name="replay" type="void" line="250"/>
                <javadoc line="250">
                    Reapplies the change to prefsCache.                    
                </javadoc>
            </class>
            <class name="Put" line="255">
                <extends class="Change"/>
                <javadoc line="255">
                    Represents a preference put.                    
                </javadoc>
                <declaration name="key" type="String" line="259"/>
                <method name="Put" type="constructor" line="260">
                    <params>
                        <param name="key" type="String"/>
                        <param name="value" type="String"/>
                    </params>
                </method>
                <method name="replay" type="void" line="264"/>
            </class>
            <class name="Remove" line="268">
                <extends class="Change"/>
                <javadoc line="268">
                    Represents a preference remove.                    
                </javadoc>
                <declaration name="key" type="String" line="272"/>
                <method name="Remove" type="constructor" line="273">
                    <params>
                        <param name="key" type="String"/>
                    </params>
                </method>
                <method name="replay" type="void" line="276"/>
            </class>
            <class name="NodeCreate" line="280">
                <extends class="Change"/>
                <javadoc line="280">
                    Represents the creation of this node.                    
                </javadoc>
                <javadoc line="284">
                    Performs no action, but the presence of this object in changeLog
                      will force the node and its ancestors to be made permanent at the
                      next sync.                    
                </javadoc>
                <method name="replay" type="void" line="289"/>
            </class>
            <declaration name="nodeCreate" type="NodeCreate" line="292"/>
            <javadoc line="292">
                NodeCreate object for this node.                
            </javadoc>
            <javadoc line="296">
                Replay changeLog against prefsCache.                
            </javadoc>
            <method name="replayChanges" type="void" line="299"/>
            <declaration name="syncTimer" type="Timer" line="302"/>
            <scope line="303">
                <anonymous_class line="304">
                    <method name="run" type="void" line="305"/>
                </anonymous_class>
                <anonymous_class line="310">
                    <method name="run" type="Void" line="311">
                        <anonymous_class line="312">
                            <method name="run" type="void" line="313"/>
                        </anonymous_class>
                    </method>
                </anonymous_class>
            </scope>
            <method name="syncWorld" type="void" line="324">
                <declaration name="userRt" type="Preferences" line="325"/>
                <declaration name="systemRt" type="Preferences" line="326"/>
                <scope line="327"/>
                <scope line="331"/>
                <scope line="334"/>
                <scope line="337"/>
                <scope line="340"/>
            </method>
            <declaration name="isUserNode" type="boolean" line="344"/>
            <javadoc line="345">
                Special constructor for roots (both user and system).  This constructor
                  will only be called twice, by the static initializer.                
            </javadoc>
            <method name="FileSystemPreferences" type="constructor" line="349">
                <params>
                    <param name="user" type="boolean"/>
                </params>
            </method>
            <javadoc line="356">
                Construct a new FileSystemPreferences instance with the specified
                  parent node and name.  This constructor, called from childSpi,
                  is used to make every node except for the two //roots.                
            </javadoc>
            <method name="FileSystemPreferences" type="constructor" line="361">
                <params>
                    <param name="parent" type="FileSystemPreferences"/>
                    <param name="name" type="String"/>
                </params>
                <anonymous_class line="367">
                    <method name="run" type="Void" line="368"/>
                </anonymous_class>
                <scope line="374"/>
            </method>
            <method name="isUserNode" type="boolean" line="380"/>
            <method name="putSpi" type="void" line="383">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <method name="getSpi" type="String" line="388">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <method name="removeSpi" type="void" line="392">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <javadoc line="397">
                Initialize prefsCache if it has yet to be initialized.  When this method
                  returns, prefsCache will be non-null.  If the data was successfully
                  read from the file, lastSyncTime will be updated.  If prefsCache was
                  null, but it was impossible to read the file (because it didn&apos;t
                  exist or for any other reason) prefsCache will be initialized to an
                  empty, modifiable Map, and lastSyncTime remain zero.                
            </javadoc>
            <method name="initCacheIfNecessary" type="void" line="405">
                <scope line="407"/>
                <scope line="410"/>
            </method>
            <javadoc line="414">
                Attempt to load prefsCache from the backing store.  If the attempt
                  succeeds, lastSyncTime will be updated (the new value will typically
                  correspond to the data loaded into the map, but it may be less,
                  if another VM is updating this node concurrently).  If the attempt
                  fails, a BackingStoreException is thrown and both prefsCache and
                  lastSyncTime are unaffected by the call.                
            </javadoc>
            <method name="loadCache" type="void" line="422"/>
            <javadoc line="458">
                Attempt to write back prefsCache to the backing store.  If the attempt
                  succeeds, lastSyncTime will be updated (the new value will correspond
                  exactly to the data thust written back, as we hold the file lock, which
                  prevents a concurrent write.  If the attempt fails, a
                  BackingStoreException is thrown and both the backing store (prefsFile)
                  and lastSyncTime will be unaffected by this call.  This call will
                  NEVER leave prefsFile in a corrupt state.                
            </javadoc>
            <method name="writeBackCache" type="void" line="467"/>
            <method name="keysSpi" type="String[]" line="491"/>
            <method name="childrenNamesSpi" type="String[]" line="495">
                <anonymous_class line="496">
                    <method name="run" type="String[]" line="497">
                        <declaration name="result" type="List&lt;String&gt;" line="498"/>
                        <declaration name="dirContents" type="File[]" line="499"/>
                        <scope line="500"/>
                    </method>
                </anonymous_class>
            </method>
            <declaration name="EMPTY_STRING_ARRAY" type="String[]" line="508"/>
            <method name="childSpi" type="AbstractPreferences" line="509">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="removeNode" type="void" line="512">
                <scope line="513">
                    <scope line="515"/>
                    <scope line="518"/>
                </scope>
            </method>
            <javadoc line="523">
                Called with file lock held (in addition to node locks).                
            </javadoc>
            <method name="removeNodeSpi" type="void" line="526">
                <scope line="527">
                    <anonymous_class line="528">
                        <method name="run" type="Void" line="529">
                            <scope line="530"/>
                            <declaration name="junk" type="File[]" line="538"/>
                            <scope line="539"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="549"/>
            </method>
            <method name="sync" type="void" line="553">
                <declaration name="userNode" type="boolean" line="554"/>
                <declaration name="shared" type="boolean" line="555"/>
                <scope line="556"/>
                <scope line="559"/>
                <scope line="562">
                    <anonymous_class line="564">
                        <method name="run" type="Long" line="565">
                            <declaration name="nmt" type="long" line="566"/>
                            <scope line="567"/>
                            <scope line="571"/>
                        </method>
                    </anonymous_class>
                    <declaration name="newModTime" type="Long" line="564"/>
                    <scope line="579">
                        <anonymous_class line="581">
                            <method name="run" type="Void" line="582">
                                <scope line="583"/>
                                <scope line="587"/>
                            </method>
                        </anonymous_class>
                    </scope>
                    <scope line="596"/>
                </scope>
            </method>
            <method name="syncSpi" type="void" line="601">
                <scope line="602">
                    <anonymous_class line="603">
                        <method name="run" type="Void" line="604"/>
                    </anonymous_class>
                </scope>
                <scope line="611"/>
            </method>
            <method name="syncSpiPrivileged" type="void" line="615">
                <declaration name="lastModifiedTime" type="long" line="618"/>
                <scope line="619">
                    <scope line="621"/>
                </scope>
                <scope line="627"/>
                <scope line="631">
                    <scope line="634"/>
                </scope>
            </method>
            <method name="flush" type="void" line="641"/>
            <method name="flushSpi" type="void" line="645"/>
            <javadoc line="647">
                Returns true if the specified character is appropriate for use in
                  Unix directory names.  A character is appropriate if it&apos;s a printable
                  ASCII character (&gt; 0x1f &amp;&amp; &lt; 0x7f) and unequal to slash (&apos;/&apos;, 0x2f),
                  dot (&apos;.&apos;, 0x2e), or underscore (&apos;_&apos;, 0x5f).                
            </javadoc>
            <method name="isDirChar" type="boolean" line="653">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="656">
                Returns the directory name corresponding to the specified node name.
                  Generally, this is just the node name.  If the node name includes
                  inappropriate characters (as per isDirChar) it is translated to Base64.
                  with the underscore  character (&apos;_&apos;, 0x5f) prepended.                
            </javadoc>
            <method name="dirName" type="String" line="662">
                <params>
                    <param name="nodeName" type="String"/>
                </params>
            </method>
            <javadoc line="666">
                Translate a string into a byte array by translating each character
                  into two bytes, high-byte first (&quot;big-endian&quot;).                
            </javadoc>
            <method name="byteArray" type="byte[]" line="670">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="len" type="int" line="671"/>
                <declaration name="result" type="byte[]" line="672"/>
                <scope line="673">
                    <declaration name="c" type="char" line="674"/>
                </scope>
            </method>
            <javadoc line="680">
                Returns the node name corresponding to the specified directory name.
                  (Inverts the transformation of dirName(String).                
            </javadoc>
            <method name="nodeName" type="String" line="684">
                <params>
                    <param name="dirName" type="String"/>
                </params>
                <declaration name="a" type="byte" line="686"/>
                <declaration name="result" type="StringBuffer" line="687"/>
                <scope line="688">
                    <declaration name="highByte" type="int" line="689"/>
                    <declaration name="lowByte" type="int" line="690"/>
                </scope>
            </method>
            <javadoc line="695">
                Try to acquire the appropriate file lock (user or system).  If
                  the initial attempt fails, several more attempts are made using
                  an exponential backoff strategy.  If all attempts fail, this method
                  returns false.                
                <throws>
                    SecurityException if file access denied.                    
                </throws>
            </javadoc>
            <method name="lockFile" type="boolean" line="702">
                <params>
                    <param name="shared" type="boolean"/>
                </params>
                <declaration name="usernode" type="boolean" line="703"/>
                <declaration name="result" type="int[]" line="704"/>
                <declaration name="errorCode" type="int" line="705"/>
                <declaration name="lockFile" type="File" line="706"/>
                <declaration name="sleepTime" type="long" line="707"/>
                <scope line="708">
                    <scope line="709">
                        <declaration name="perm" type="int" line="710"/>
                        <scope line="713">
                            <scope line="714"/>
                            <scope line="717"/>
                        </scope>
                    </scope>
                    <scope line="723"/>
                    <scope line="725"/>
                    <scope line="728"/>
                </scope>
            </method>
            <javadoc line="737">
                Checks if unlockFile0() returned an error. Throws a SecurityException,
                  if access denied. Logs a warning otherwise.                
            </javadoc>
            <method name="checkLockFile0ErrorCode" type="void" line="741">
                <params>
                    <param name="errorCode" type="int"/>
                </params>
            </method>
            <method name="lockFile0" type="int[]" line="745"/>
            <javadoc line="745">
                Locks file using UNIX file locking.                
                <param>
                    fileName Absolute file name of the lock file.                    
                </param>
                <return>
                    Returns a lock handle, used to unlock the file.                    
                </return>
            </javadoc>
            <method name="unlockFile0" type="int" line="751"/>
            <javadoc line="751">
                Unlocks file previously locked by lockFile0().                
                <param>
                    lockHandle Handle to the file lock.                    
                </param>
                <return>
                    Returns zero if OK, UNIX error code if failure.                    
                </return>
            </javadoc>
            <method name="chmod" type="int" line="757"/>
            <javadoc line="757">
                Changes UNIX file permissions.                
            </javadoc>
            <declaration name="INIT_SLEEP_TIME" type="int" line="761"/>
            <javadoc line="761">
                Initial time between lock attempts, in ms.  The time is doubled
                  after each failing attempt (except the first).                
            </javadoc>
            <declaration name="MAX_ATTEMPTS" type="int" line="766"/>
            <javadoc line="766">
                Maximum number of lock attempts.                
            </javadoc>
            <javadoc line="770">
                Release the the appropriate file lock (user or system).                
                <throws>
                    SecurityException if file access denied.                    
                </throws>
            </javadoc>
            <method name="unlockFile" type="void" line="774">
                <declaration name="result" type="int" line="775"/>
                <declaration name="usernode" type="boolean" line="776"/>
                <declaration name="lockFile" type="File" line="777"/>
                <declaration name="lockHandle" type="int" line="778"/>
                <scope line="779"/>
                <scope line="784"/>
                <scope line="788"/>
                <scope line="791"/>
            </method>
        </class>
    </source>