<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <import package="java.util.concurrent.atomic.AtomicInteger"/>
        <class name="FileDescriptor" line="30">
            <comment line="138">
                                
            </comment>
            <comment line="145">
                Set up JavaIOFileDescriptorAccess in SharedSecrets                
            </comment>
            <comment line="168">
                package private methods used by FIS, FOS and RAF                
            </comment>
            <javadoc line="30">
                Instances of the file descriptor class serve as an opaque handle
                  to the underlying machine-specific structure representing an open
                  file, an open socket, or another source or sink of bytes. The
                  main practical use for a file descriptor is to create a
                  &lt;code&gt;FileInputStream&lt;/code&gt; or &lt;code&gt;FileOutputStream&lt;/code&gt; to
                  contain it.
                  &lt;p&gt;
                  Applications should not create their own file descriptors.                
                <author>
                    Pavani Diwanji                    
                </author>
                <see>
                    java.io.FileInputStream                    
                </see>
                <see>
                    java.io.FileOutputStream                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="fd" type="int" line="47"/>
            <declaration name="useCount" type="AtomicInteger" line="49"/>
            <javadoc line="49">
                A counter for tracking the FIS/FOS/RAF instances that
                  use this FileDescriptor. The FIS/FOS.finalize() will not release
                  the FileDescriptor if it is still under user by a stream.                
            </javadoc>
            <javadoc line="56">
                Constructs an (invalid) FileDescriptor
                  object.                
            </javadoc>
            <method name="FileDescriptor" type="constructor" line="60">
                <comment line="60">
                                        
                </comment>
            </method>
            <method name="FileDescriptor" type="constructor" line="65">
                <params>
                    <param name="fd" type="int"/>
                </params>
            </method>
            <declaration name="in" type="FileDescriptor" line="70"/>
            <javadoc line="70">
                A handle to the standard input stream. Usually, this file
                  descriptor is not used directly, but rather via the input stream
                  known as &lt;code&gt;System.in&lt;/code&gt;.                
                <see>
                    java.lang.System#in                    
                </see>
            </javadoc>
            <declaration name="out" type="FileDescriptor" line="79"/>
            <javadoc line="79">
                A handle to the standard output stream. Usually, this file
                  descriptor is not used directly, but rather via the output stream
                  known as &lt;code&gt;System.out&lt;/code&gt;.                
                <see>
                    java.lang.System#out                    
                </see>
            </javadoc>
            <declaration name="err" type="FileDescriptor" line="87"/>
            <javadoc line="87">
                A handle to the standard error stream. Usually, this file
                  descriptor is not used directly, but rather via the output stream
                  known as &lt;code&gt;System.err&lt;/code&gt;.                
                <see>
                    java.lang.System#err                    
                </see>
            </javadoc>
            <javadoc line="96">
                Tests if this file descriptor object is valid.                
                <return>
                    <code>true</code> if the file descriptor object represents a
                      valid, open file, socket, or other active I/O connection;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="valid" type="boolean" line="103"/>
            <method name="sync" type="void" line="107"/>
            <javadoc line="107">
                Force all system buffers to synchronize with the underlying
                  device.  This method returns after all modified data and
                  attributes of this FileDescriptor have been written to the
                  relevant device(s).  In particular, if this FileDescriptor
                  refers to a physical storage medium, such as a file in a file
                  system, sync will not return until all in-memory modified copies
                  of buffers associated with this FileDescriptor have been
                  written to the physical medium.
                  sync is meant to be used by code that requires physical
                  storage (such as a file) to be in a known state  For
                  example, a class that provided a simple transaction facility
                  might use sync to ensure that all changes to a file caused
                  by a given transaction were recorded on a storage medium.
                  sync only affects buffers downstream of this FileDescriptor.  If
                  any in-memory buffering is being done by the application (for
                  example, by a BufferedOutputStream object), those buffers must
                  be flushed into the FileDescriptor (for example, by invoking
                  OutputStream.flush) before that data will be affected by sync.                
                <exception>
                    SyncFailedExceptionThrown when the buffers cannot be flushed,
                      or because the system cannot guarantee that all the
                      buffers have been synchronized with physical media.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="initIDs" type="void" line="138"/>
            <scope line="140"/>
            <scope line="145">
                <anonymous_class line="147">
                    <method name="set" type="void" line="148">
                        <params>
                            <param name="obj" type="FileDescriptor"/>
                            <param name="fd" type="int"/>
                        </params>
                    </method>
                    <method name="get" type="int" line="152">
                        <params>
                            <param name="obj" type="FileDescriptor"/>
                        </params>
                    </method>
                    <method name="setHandle" type="void" line="156">
                        <params>
                            <param name="obj" type="FileDescriptor"/>
                            <param name="handle" type="long"/>
                        </params>
                    </method>
                    <method name="getHandle" type="long" line="160">
                        <params>
                            <param name="obj" type="FileDescriptor"/>
                        </params>
                    </method>
                </anonymous_class>
            </scope>
            <method name="incrementAndGetUseCount" type="int" line="169"/>
            <method name="decrementAndGetUseCount" type="int" line="173"/>
        </class>
    </source>