<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.swing">
        <import package="java.beans.PropertyChangeListener"/>
        <import package="javax.swing.Action"/>
        <class name="UIAction" line="4">
            <implements interface="Action"/>
            <javadoc line="4">
                UIAction is the basis of all of basic&apos;s action classes that are used in
                  an ActionMap. Subclasses need to override &lt;code&gt;actionPerformed&lt;/code&gt;.
                  &lt;p&gt;
                  A typical subclass will look like:
                  &lt;pre&gt;
                  private static class Actions extends UIAction {
                  Actions(String name) {
                  super(name);
                  }
                  public void actionPerformed(ActionEvent ae) {
                  if (getName() == &quot;selectAll&quot;) {
                  selectAll();
                  }
                  else if (getName() == &quot;cancelEditing&quot;) {
                  cancelEditing();
                  }
                  }
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Subclasses that wish to conditionalize the enabled state should override
                  &lt;code&gt;isEnabled(Component)&lt;/code&gt;, and be aware that the passed in
                  &lt;code&gt;Component&lt;/code&gt; may be null.                
                <see>
                    com.sun.java.swing.ExtendedAction                    
                </see>
                <see>
                    javax.swing.Action                    
                </see>
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="name" type="String" line="33"/>
            <method name="UIAction" type="constructor" line="34">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getName" type="String" line="37"/>
            <method name="getValue" type="Object" line="40">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="41"/>
            </method>
            <method name="putValue" type="void" line="46">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <method name="setEnabled" type="void" line="48">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="50">
                Cover method for &lt;code&gt;isEnabled(null)&lt;/code&gt;.                
            </javadoc>
            <method name="isEnabled" type="boolean" line="53"/>
            <javadoc line="56">
                Subclasses that need to conditionalize the enabled state should
                  override this. Be aware that &lt;code&gt;sender&lt;/code&gt; may be null.                
                <param>
                    sender Widget enabled state is being asked for, may be null.                    
                </param>
            </javadoc>
            <method name="isEnabled" type="boolean" line="61">
                <params>
                    <param name="sender" type="Object"/>
                </params>
            </method>
            <method name="addPropertyChangeListener" type="void" line="64">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
            </method>
            <method name="removePropertyChangeListener" type="void" line="66">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
            </method>
        </class>
    </source>