<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.swing">
        <import package="java.awt"/>
        <import package="java.awt.image"/>
        <import package="java.util"/>
        <class name="CachedPainter" line="5">
            <javadoc line="5">
                A base class used for icons or images that are expensive to paint.
                  A subclass will do the following:
                  &lt;ol&gt;
                  &lt;li&gt;Invoke &lt;code&gt;paint&lt;/code&gt; when you want to paint the image,
                  if you are implementing &lt;code&gt;Icon&lt;/code&gt; you&apos;ll invoke this from
                  &lt;code&gt;paintIcon&lt;/code&gt;.
                  The args argument is useful when additional state is needed.
                  &lt;li&gt;Override &lt;code&gt;paintToImage&lt;/code&gt; to render the image.  The code that
                  lives here is equivalent to what previously would go in
                  &lt;code&gt;paintIcon&lt;/code&gt;, for an &lt;code&gt;Icon&lt;/code&gt;.
                  &lt;/ol&gt;
                  The two ways to use this class are:
                  &lt;ol&gt;
                  &lt;li&gt;Invoke &lt;code&gt;paint&lt;/code&gt; to draw the cached reprensentation at
                  the specified location.
                  &lt;li&gt;Invoke &lt;code&gt;getImage&lt;/code&gt; to get the cached reprensentation and
                  draw the image yourself.  This is primarly useful when you are not
                  using &lt;code&gt;VolatileImage&lt;/code&gt;.
                  &lt;/ol&gt;                
            </javadoc>
            <declaration name="cacheMap" type="Map&amp;lt;Object,ImageCache&amp;gt;" line="27"/>
            <method name="getCache" type="ImageCache" line="28">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <scope line="29">
                    <declaration name="cache" type="ImageCache" line="30"/>
                    <scope line="31"/>
                </scope>
            </method>
            <javadoc line="38">
                Creates an instance of &lt;code&gt;CachedPainter&lt;/code&gt; that will cache up
                  to &lt;code&gt;cacheCount&lt;/code&gt; images of this class.                
                <param>
                    cacheCount Max number of images to cache                    
                </param>
            </javadoc>
            <method name="CachedPainter" type="constructor" line="43">
                <params>
                    <param name="cacheCount" type="int"/>
                </params>
            </method>
            <javadoc line="46">
                Renders the cached image to the the passed in &lt;code&gt;Graphic&lt;/code&gt;.
                  If there is no cached image &lt;code&gt;paintToImage&lt;/code&gt; will be invoked.
                  &lt;code&gt;paintImage&lt;/code&gt; is invoked to paint the cached image.                
                <param>
                    c Component rendering to, this may be null.                    
                </param>
                <param>
                    g Graphics to paint to                    
                </param>
                <param>
                    x X-coordinate to render to                    
                </param>
                <param>
                    y Y-coordinate to render to                    
                </param>
                <param>
                    w Width to render in                    
                </param>
                <param>
                    h Height to render in                    
                </param>
                <param>
                    arg Variable arguments that will be passed to paintToImage                    
                </param>
            </javadoc>
            <method name="paint" type="void" line="58">
                <params>
                    <param name="c" type="Component"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="args" type="Object"/>
                </params>
                <scope line="59"/>
                <scope line="62">
                    <scope line="63">
                        <scope line="64"/>
                    </scope>
                </scope>
                <scope line="69">
                    <scope line="70"/>
                </scope>
            </method>
            <method name="paint0" type="void" line="75">
                <params>
                    <param name="c" type="Component"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="args" type="Object"/>
                </params>
                <declaration name="key" type="Object" line="76"/>
                <declaration name="config" type="GraphicsConfiguration" line="77"/>
                <declaration name="cache" type="ImageCache" line="78"/>
                <declaration name="image" type="Image" line="79"/>
                <declaration name="attempts" type="int" line="80"/>
                <scope line="81">
                    <declaration name="draw" type="boolean" line="82"/>
                    <scope line="83"/>
                    <scope line="94"/>
                    <scope line="99">
                        <declaration name="g2" type="Graphics" line="100"/>
                    </scope>
                </scope>
            </method>
            <method name="paintToImage" type="void" line="108"/>
            <javadoc line="108">
                Paints the representation to cache to the supplied Graphics.                
                <param>
                    c Component painting to, may be null.                    
                </param>
                <param>
                    image Image to paint to                    
                </param>
                <param>
                    g Graphics to paint to, obtained from the passed in Image.                    
                </param>
                <param>
                    w Width to paint to                    
                </param>
                <param>
                    h Height to paint to                    
                </param>
                <param>
                    args Arguments supplied to &lt;code&gt;paint&lt;/code&gt;                    
                </param>
            </javadoc>
            <javadoc line="118">
                Paints the image to the specified location.                
                <param>
                    c Component painting to                    
                </param>
                <param>
                    g Graphics to paint to                    
                </param>
                <param>
                    x X coordinate to paint to                    
                </param>
                <param>
                    y Y coordinate to paint to                    
                </param>
                <param>
                    w Width to paint to                    
                </param>
                <param>
                    h Height to paint to                    
                </param>
                <param>
                    image Image to paint                    
                </param>
                <param>
                    args Arguments supplied to &lt;code&gt;paint&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="paintImage" type="void" line="129">
                <params>
                    <param name="c" type="Component"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="image" type="Image"/>
                    <param name="args" type="Object[]"/>
                </params>
            </method>
            <javadoc line="132">
                Creates the image to cache.  This returns an opaque image, subclasses
                  that require translucency or transparency will need to override this
                  method.                
                <param>
                    c Component painting to                    
                </param>
                <param>
                    w Width of image to create                    
                </param>
                <param>
                    h Height to image to create                    
                </param>
                <param>
                    config GraphicsConfiguration that will be
                      rendered to, this may be null.                    
                </param>
                <param>
                    args Arguments passed to paint                    
                </param>
            </javadoc>
            <method name="createImage" type="Image" line="143">
                <params>
                    <param name="c" type="Component"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="config" type="GraphicsConfiguration"/>
                    <param name="args" type="Object[]"/>
                </params>
                <scope line="144"/>
            </method>
            <javadoc line="149">
                Clear the image cache                
            </javadoc>
            <method name="flush" type="void" line="152">
                <scope line="153"/>
            </method>
            <method name="getGraphicsConfiguration" type="GraphicsConfiguration" line="157">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <scope line="158"/>
            </method>
        </class>
    </source>