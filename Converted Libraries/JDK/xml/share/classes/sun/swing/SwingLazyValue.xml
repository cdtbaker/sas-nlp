<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.swing">
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.AccessibleObject"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="javax.swing.UIDefaults"/>
        <class name="SwingLazyValue" line="34">
            <implements interface="UIDefaults.LazyValue"/>
            <javadoc line="34">
                SwingLazyValue is a copy of ProxyLazyValue that does not snapshot the
                  AccessControlContext or use a doPrivileged to resolve the class name.
                  It&apos;s intented for use in places in Swing where we need ProxyLazyValue, this
                  should never be used in a place where the developer could supply the
                  arguments.                
            </javadoc>
            <declaration name="className" type="String" line="43"/>
            <declaration name="methodName" type="String" line="44"/>
            <declaration name="args" type="Object[]" line="45"/>
            <method name="SwingLazyValue" type="constructor" line="47">
                <params>
                    <param name="c" type="String"/>
                </params>
            </method>
            <method name="SwingLazyValue" type="constructor" line="50">
                <params>
                    <param name="c" type="String"/>
                    <param name="m" type="String"/>
                </params>
            </method>
            <method name="SwingLazyValue" type="constructor" line="53">
                <params>
                    <param name="c" type="String"/>
                    <param name="o" type="Object[]"/>
                </params>
            </method>
            <method name="SwingLazyValue" type="constructor" line="56">
                <params>
                    <param name="c" type="String"/>
                    <param name="m" type="String"/>
                    <param name="o" type="Object[]"/>
                </params>
                <scope line="59"/>
            </method>
            <method name="createValue" type="Object" line="64">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
                <comment line="81">
                    Ideally we would throw an exception, unfortunately
                     often times there are errors as an initial look and
                     feel is loaded before one can be switched. Perhaps a
                     flag should be added for debugging, so that if true
                     the exception would be thrown.                    
                </comment>
                <scope line="65">
                    <declaration name="cl" type="Object" line="66"/>
                    <declaration name="c" type="Class&lt;?&gt;" line="67"/>
                    <scope line="68">
                        <declaration name="types" type="Class[]" line="69"/>
                        <declaration name="m" type="Method" line="70"/>
                    </scope>
                    <scope line="73">
                        <declaration name="types" type="Class[]" line="74"/>
                        <declaration name="constructor" type="Constructor" line="75"/>
                    </scope>
                </scope>
                <scope line="79"/>
            </method>
            <method name="makeAccessible" type="void" line="89">
                <params>
                    <param name="object" type="AccessibleObject"/>
                </params>
                <anonymous_class line="90">
                    <method name="run" type="Void" line="91"/>
                </anonymous_class>
            </method>
            <method name="getClassArray" type="Class[]" line="98">
                <params>
                    <param name="args" type="Object[]"/>
                </params>
                <comment line="104">
                    PENDING(ges): At present only the primitive types
                    used are handled correctly; this should eventually                    
                </comment>
                <comment line="112">
                    PENDING(ges) Currently the Reflection APIs do not
                    search superclasses of parameters supplied for
                    constructormethod lookup.  Since we only have
                    one case where this is needed, we substitute
                    directly instead of adding a massive amount
                    of mechanism for this.  Eventually this will
                    probably need to handle the general case as well.                    
                </comment>
                <declaration name="types" type="Class[]" line="99"/>
                <scope line="100">
                    <scope line="102">
                        <scope line="106"/>
                        <scope line="108"/>
                        <scope line="110"/>
                        <scope line="120"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>