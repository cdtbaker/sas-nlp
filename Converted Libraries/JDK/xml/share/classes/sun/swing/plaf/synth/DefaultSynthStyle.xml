<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.swing.plaf.synth">
        <import package="javax.swing.plaf.synth"/>
        <import package="java.awt"/>
        <import package="java.util"/>
        <import package="javax.swing"/>
        <import package="javax.swing.border.Border"/>
        <import package="javax.swing.plaf"/>
        <class name="DefaultSynthStyle" line="34">
            <extends class="SynthStyle"/>
            <implements interface="Cloneable"/>
            <javadoc line="34">
                Default implementation of SynthStyle. Has setters for the various
                  SynthStyle methods. Many of the properties can be specified for all states,
                  using SynthStyle directly, or a specific state using one of the StateInfo
                  methods.
                  &lt;p&gt;
                  Beyond the constructor a subclass should override the &lt;code&gt;addTo&lt;/code&gt;
                  and &lt;code&gt;clone&lt;/code&gt; methods, these are used when the Styles are being
                  merged into a resulting style.                
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="PENDING" type="String" line="47"/>
            <declaration name="opaque" type="boolean" line="49"/>
            <javadoc line="49">
                Should the component be opaque?                
            </javadoc>
            <declaration name="insets" type="Insets" line="53"/>
            <javadoc line="53">
                Insets.                
            </javadoc>
            <declaration name="states" type="StateInfo[]" line="57"/>
            <javadoc line="57">
                Information specific to ComponentState.                
            </javadoc>
            <declaration name="data" type="Map" line="61"/>
            <javadoc line="61">
                User specific data.                
            </javadoc>
            <declaration name="font" type="Font" line="66"/>
            <javadoc line="66">
                Font to use if there is no matching StateInfo, or the StateInfo doesn&apos;t
                  define one.                
            </javadoc>
            <declaration name="synthGraphics" type="SynthGraphicsUtils" line="72"/>
            <javadoc line="72">
                SynthGraphics, may be null.                
            </javadoc>
            <declaration name="painter" type="SynthPainter" line="77"/>
            <javadoc line="77">
                Painter to use if the StateInfo doesn&apos;t have one.                
            </javadoc>
            <javadoc line="83">
                Nullary constructor, intended for subclassers.                
            </javadoc>
            <method name="DefaultSynthStyle" type="constructor" line="86"/>
            <javadoc line="89">
                Creates a new DefaultSynthStyle that is a copy of the passed in
                  style. Any StateInfo&apos;s of the passed in style are clonsed as well.                
                <param>
                    style Style to duplicate                    
                </param>
            </javadoc>
            <method name="DefaultSynthStyle" type="constructor" line="95">
                <params>
                    <param name="style" type="DefaultSynthStyle"/>
                </params>
                <scope line="97"/>
                <scope line="101">
                    <scope line="104"/>
                </scope>
                <scope line="108"/>
            </method>
            <javadoc line="117">
                Creates a new DefaultSynthStyle.                
                <param>
                    insets Insets for the Style                    
                </param>
                <param>
                    opaque Whether or not the background is completely painted in
                      an opaque color                    
                </param>
                <param>
                    states StateInfos describing properties per state                    
                </param>
                <param>
                    data Style specific data.                    
                </param>
            </javadoc>
            <method name="DefaultSynthStyle" type="constructor" line="127">
                <params>
                    <param name="insets" type="Insets"/>
                    <param name="opaque" type="boolean"/>
                    <param name="states" type="StateInfo[]"/>
                    <param name="data" type="Map"/>
                </params>
            </method>
            <method name="getColor" type="Color" line="134">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="type" type="ColorType"/>
                </params>
            </method>
            <method name="getColor" type="Color" line="140">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="id" type="Region"/>
                    <param name="state" type="int"/>
                    <param name="type" type="ColorType"/>
                </params>
                <comment line="142">
                    For the enabled state, prefer the widget&apos;s colors                    
                </comment>
                <comment line="151">
                    If getForeground returns a non-UIResource it means the
                     developer has explicitly set the foreground, use it over
                     that of TEXT_FOREGROUND as that is typically the expected
                     behavior.                    
                </comment>
                <comment line="161">
                    Then use what we&apos;ve locally defined                    
                </comment>
                <comment line="164">
                    No color, fallback to that of the widget.                    
                </comment>
                <scope line="142">
                    <scope line="143"/>
                    <scope line="146"/>
                    <scope line="149">
                        <declaration name="color" type="Color" line="154"/>
                        <scope line="155"/>
                    </scope>
                </scope>
                <declaration name="color" type="Color" line="161"/>
                <scope line="162">
                    <scope line="165"/>
                    <scope line="169"/>
                </scope>
            </method>
            <method name="getColorForState" type="Color" line="176">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="type" type="ColorType"/>
                </params>
            </method>
            <javadoc line="181">
                Returns the color for the specified state.                
                <param>
                    c JComponent the style is associated with                    
                </param>
                <param>
                    id Region identifier                    
                </param>
                <param>
                    state State of the region.                    
                </param>
                <param>
                    type Type of color being requested.                    
                </param>
                <return>
                    Color to render with                    
                </return>
            </javadoc>
            <method name="getColorForState" type="Color" line="191">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="id" type="Region"/>
                    <param name="state" type="int"/>
                    <param name="type" type="ColorType"/>
                </params>
                <comment line="193">
                    Use the best state.                    
                </comment>
                <declaration name="si" type="StateInfo" line="193"/>
                <declaration name="color" type="Color" line="194"/>
                <scope line="195"/>
                <scope line="198">
                    <scope line="200"/>
                </scope>
            </method>
            <javadoc line="207">
                Sets the font that is used if there is no matching StateInfo, or
                  it does not define a font.                
                <param>
                    font Font to use for rendering                    
                </param>
            </javadoc>
            <method name="setFont" type="void" line="213">
                <params>
                    <param name="font" type="Font"/>
                </params>
            </method>
            <method name="getFont" type="Font" line="217">
                <params>
                    <param name="state" type="SynthContext"/>
                </params>
            </method>
            <method name="getFont" type="Font" line="222">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="id" type="Region"/>
                    <param name="state" type="int"/>
                </params>
                <scope line="223"/>
                <declaration name="cFont" type="Font" line="226"/>
                <scope line="227"/>
            </method>
            <javadoc line="233">
                Returns the font for the specified state. This should NOT callback
                  to the JComponent.                
                <param>
                    c JComponent the style is associated with                    
                </param>
                <param>
                    id Region identifier                    
                </param>
                <param>
                    state State of the region.                    
                </param>
                <return>
                    Font to render with                    
                </return>
            </javadoc>
            <method name="getFontForState" type="Font" line="242">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="id" type="Region"/>
                    <param name="state" type="int"/>
                </params>
                <comment line="247">
                    First pass, look for the best match                    
                </comment>
                <comment line="259">
                    Fallback font.                    
                </comment>
                <scope line="243"/>
                <declaration name="si" type="StateInfo" line="247"/>
                <declaration name="font" type="Font" line="248"/>
                <scope line="249"/>
                <scope line="252">
                    <scope line="254"/>
                </scope>
            </method>
            <method name="getFontForState" type="Font" line="262">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
            </method>
            <javadoc line="267">
                Sets the SynthGraphicsUtils that will be used for rendering.                
                <param>
                    graphics SynthGraphics                    
                </param>
            </javadoc>
            <method name="setGraphicsUtils" type="void" line="272">
                <params>
                    <param name="graphics" type="SynthGraphicsUtils"/>
                </params>
            </method>
            <javadoc line="276">
                Returns a SynthGraphicsUtils.                
                <param>
                    context SynthContext indentifying requestor                    
                </param>
                <return>
                    SynthGraphicsUtils                    
                </return>
            </javadoc>
            <method name="getGraphicsUtils" type="SynthGraphicsUtils" line="282">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
                <scope line="283"/>
            </method>
            <javadoc line="289">
                Sets the insets.                
                <param>
                    Insets.                    
                </param>
            </javadoc>
            <method name="setInsets" type="void" line="294">
                <params>
                    <param name="insets" type="Insets"/>
                </params>
            </method>
            <javadoc line="298">
                Returns the Insets. If &lt;code&gt;to&lt;/code&gt; is non-null the resulting
                  insets will be placed in it, otherwise a new Insets object will be
                  created and returned.                
                <param>
                    context SynthContext indentifying requestor                    
                </param>
                <param>
                    to Where to place Insets                    
                </param>
                <return>
                    Insets.                    
                </return>
            </javadoc>
            <method name="getInsets" type="Insets" line="307">
                <params>
                    <param name="state" type="SynthContext"/>
                    <param name="to" type="Insets"/>
                </params>
                <scope line="308"/>
                <scope line="311"/>
                <scope line="317"/>
            </method>
            <javadoc line="323">
                Sets the Painter to use for the border.                
                <param>
                    painter Painter for the Border.                    
                </param>
            </javadoc>
            <method name="setPainter" type="void" line="328">
                <params>
                    <param name="painter" type="SynthPainter"/>
                </params>
            </method>
            <javadoc line="332">
                Returns the Painter for the passed in Component. This may return null.                
                <param>
                    ss SynthContext indentifying requestor                    
                </param>
                <return>
                    Painter for the border                    
                </return>
            </javadoc>
            <method name="getPainter" type="SynthPainter" line="338">
                <params>
                    <param name="ss" type="SynthContext"/>
                </params>
            </method>
            <javadoc line="342">
                Sets whether or not the JComponent should be opaque.                
                <param>
                    opaque Whether or not the JComponent should be opaque.                    
                </param>
            </javadoc>
            <method name="setOpaque" type="void" line="347">
                <params>
                    <param name="opaque" type="boolean"/>
                </params>
            </method>
            <javadoc line="351">
                Returns the value to initialize the opacity property of the Component
                  to. A Style should NOT assume the opacity will remain this value, the
                  developer may reset it or override it.                
                <param>
                    ss SynthContext indentifying requestor                    
                </param>
                <return>
                    opaque Whether or not the JComponent is opaque.                    
                </return>
            </javadoc>
            <method name="isOpaque" type="boolean" line="359">
                <params>
                    <param name="ss" type="SynthContext"/>
                </params>
            </method>
            <javadoc line="363">
                Sets style specific values. This does NOT copy the data, it
                  assigns it directly to this Style.                
                <param>
                    data Style specific values                    
                </param>
            </javadoc>
            <method name="setData" type="void" line="369">
                <params>
                    <param name="data" type="Map"/>
                </params>
            </method>
            <javadoc line="373">
                Returns the style specific data.                
                <return>
                    Style specific data.                    
                </return>
            </javadoc>
            <method name="getData" type="Map" line="378"/>
            <javadoc line="382">
                Getter for a region specific style property.                
                <param>
                    state SynthContext indentifying requestor                    
                </param>
                <param>
                    key Property being requested.                    
                </param>
                <return>
                    Value of the named property                    
                </return>
            </javadoc>
            <method name="get" type="Object" line="389">
                <params>
                    <param name="state" type="SynthContext"/>
                    <param name="key" type="Object"/>
                </params>
                <comment line="391">
                    Look for the best match                    
                </comment>
                <declaration name="si" type="StateInfo" line="391"/>
                <scope line="392"/>
                <scope line="396"/>
            </method>
            <method name="getKeyFromData" type="Object" line="405">
                <params>
                    <param name="stateData" type="Map"/>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="value" type="Object" line="406"/>
                <scope line="407">
                    <scope line="409"/>
                    <scope line="412">
                        <scope line="413">
                            <scope line="414"/>
                            <scope line="416"/>
                        </scope>
                    </scope>
                    <scope line="420">
                        <scope line="421"/>
                        <scope line="425"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="434">
                Returns the default value for a particular property.  This is only
                  invoked if this style doesn&apos;t define a property for &lt;code&gt;key&lt;/code&gt;.                
                <param>
                    state SynthContext indentifying requestor                    
                </param>
                <param>
                    key Property being requested.                    
                </param>
                <return>
                    Value of the named property                    
                </return>
            </javadoc>
            <method name="getDefaultValue" type="Object" line="442">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="446">
                Creates a clone of this style.                
                <return>
                    Clone of this style                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="451">
                <declaration name="style" type="DefaultSynthStyle" line="452"/>
                <scope line="453"/>
                <scope line="455"/>
                <scope line="458">
                    <scope line="460"/>
                </scope>
                <scope line="464"/>
            </method>
            <javadoc line="471">
                Merges the contents of this Style with that of the passed in Style,
                  returning the resulting merged syle. Properties of this
                  &lt;code&gt;DefaultSynthStyle&lt;/code&gt; will take precedence over those of the
                  passed in &lt;code&gt;DefaultSynthStyle&lt;/code&gt;. For example, if this
                  style specifics a non-null font, the returned style will have its
                  font so to that regardless of the &lt;code&gt;style&lt;/code&gt;&apos;s font.                
                <param>
                    style Style to add our styles to                    
                </param>
                <return>
                    Merged style.                    
                </return>
            </javadoc>
            <method name="addTo" type="DefaultSynthStyle" line="482">
                <params>
                    <param name="style" type="DefaultSynthStyle"/>
                </params>
                <comment line="508">
                    Find the number of new states in unique, merging any
                     matching states as we go. Also, move any merge styles
                     to the end to give them precedence.                    
                </comment>
                <comment line="512">
                    Number of StateInfos that match.                    
                </comment>
                <comment line="526">
                    Move StateInfo to end, giving it precedence.                    
                </comment>
                <comment line="542">
                    There are states that exist in this Style that
                     don&apos;t exist in the other style, recreate the array
                     and add them.                    
                </comment>
                <scope line="483"/>
                <scope line="486"/>
                <scope line="489"/>
                <scope line="492"/>
                <scope line="496">
                    <scope line="497">
                        <scope line="499">
                            <scope line="500"/>
                        </scope>
                    </scope>
                    <scope line="506">
                        <declaration name="unique" type="int" line="510"/>
                        <declaration name="matchCount" type="int" line="512"/>
                        <declaration name="maxOStyles" type="int" line="513"/>
                        <scope line="515">
                            <declaration name="state" type="int" line="516"/>
                            <declaration name="found" type="boolean" line="517"/>
                            <scope line="520">
                                <scope line="522">
                                    <declaration name="tmp" type="StateInfo" line="526"/>
                                </scope>
                            </scope>
                            <scope line="536"/>
                        </scope>
                        <scope line="540">
                            <declaration name="newStates" type="StateInfo[]" line="544"/>
                            <declaration name="newIndex" type="int" line="546"/>
                            <scope line="550">
                                <declaration name="state" type="int" line="551"/>
                                <declaration name="found" type="boolean" line="552"/>
                                <scope line="555">
                                    <scope line="557"/>
                                </scope>
                                <scope line="562"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="571">
                    <scope line="572"/>
                </scope>
            </method>
            <javadoc line="580">
                Sets the array of StateInfo&apos;s which are used to specify properties
                  specific to a particular style.                
                <param>
                    states StateInfos                    
                </param>
            </javadoc>
            <method name="setStateInfo" type="void" line="586">
                <params>
                    <param name="states" type="StateInfo[]"/>
                </params>
            </method>
            <javadoc line="590">
                Returns the array of StateInfo&apos;s that that are used to specify
                  properties specific to a particular style.                
                <return>
                    Array of StateInfos.                    
                </return>
            </javadoc>
            <method name="getStateInfo" type="StateInfo[]" line="596"/>
            <javadoc line="600">
                Returns the best matching StateInfo for a particular state.                
                <param>
                    state Component state.                    
                </param>
                <return>
                    Best matching StateInfo, or null                    
                </return>
            </javadoc>
            <method name="getStateInfo" type="StateInfo" line="606">
                <params>
                    <param name="state" type="int"/>
                </params>
                <comment line="608">
                    Use the StateInfo with the most bits that matches that of state.
                     If there is none, than fallback to
                     the StateInfo with a state of 0, indicating it&apos;ll match anything.                    
                </comment>
                <comment line="612">
                    Consider if we have 3 StateInfos a, b and c with states:
                     SELECTED, SELECTED | ENABLED, 0
                    
                     Input                          Return Value
                     -----                          ------------
                     SELECTED                       a
                     SELECTED | ENABLED             b
                     MOUSE_OVER                     c
                     SELECTED | ENABLED | FOCUSED   b
                     ENABLED                        c                    
                </comment>
                <comment line="645">
                    This is key, we need to make sure all bits of the
                     StateInfo match, otherwise a StateInfo with
                     SELECTED | ENABLED would match ENABLED, which we
                     don&apos;t want.                    
                </comment>
                <comment line="650">
                    This comes from BigInteger.bitCnt                    
                </comment>
                <scope line="622">
                    <declaration name="bestCount" type="int" line="623"/>
                    <declaration name="bestIndex" type="int" line="624"/>
                    <declaration name="wildIndex" type="int" line="625"/>
                    <scope line="627">
                        <scope line="628">
                            <scope line="629"/>
                        </scope>
                    </scope>
                    <scope line="635">
                        <declaration name="oState" type="int" line="636"/>
                        <scope line="638">
                            <scope line="639"/>
                        </scope>
                        <scope line="643">
                            <declaration name="bitCount" type="int" line="650"/>
                            <scope line="658"/>
                        </scope>
                    </scope>
                    <scope line="664"/>
                    <scope line="667"/>
                </scope>
            </method>
            <method name="toString" type="String" line="675">
                <comment line="700">
                    remove last newline                    
                </comment>
                <declaration name="buf" type="StringBuffer" line="676"/>
                <declaration name="states" type="StateInfo[]" line="690"/>
                <scope line="691">
                    <scope line="693"/>
                </scope>
            </method>
            <class name="StateInfo" line="706">
                <javadoc line="706">
                    StateInfo represents Style information specific to the state of
                      a component.                    
                </javadoc>
                <declaration name="data" type="Map" line="711"/>
                <declaration name="font" type="Font" line="712"/>
                <declaration name="colors" type="Color[]" line="713"/>
                <declaration name="state" type="int" line="714"/>
                <javadoc line="716">
                    Creates a new StateInfo.                    
                </javadoc>
                <method name="StateInfo" type="constructor" line="719"/>
                <javadoc line="722">
                    Creates a new StateInfo with the specified properties                    
                    <param>
                        state Component state(s) that this StateInfo should be used
                          for                        
                    </param>
                    <param>
                        painter Painter responsible for rendering                        
                    </param>
                    <param>
                        bgPainter Painter responsible for rendering the background                        
                    </param>
                    <param>
                        font Font for this state                        
                    </param>
                    <param>
                        colors Colors for this state                        
                    </param>
                </javadoc>
                <method name="StateInfo" type="constructor" line="732">
                    <params>
                        <param name="state" type="int"/>
                        <param name="font" type="Font"/>
                        <param name="colors" type="Color[]"/>
                    </params>
                </method>
                <javadoc line="738">
                    Creates a new StateInfo that is a copy of the passed in
                      StateInfo.                    
                    <param>
                        info StateInfo to copy.                        
                    </param>
                </javadoc>
                <method name="StateInfo" type="constructor" line="744">
                    <params>
                        <param name="info" type="StateInfo"/>
                    </params>
                    <scope line="747">
                        <scope line="748"/>
                    </scope>
                    <scope line="753"/>
                </method>
                <method name="getData" type="Map" line="759"/>
                <method name="setData" type="void" line="763">
                    <params>
                        <param name="data" type="Map"/>
                    </params>
                </method>
                <javadoc line="767">
                    Sets the font for this state.                    
                    <param>
                        font Font to use for rendering                        
                    </param>
                </javadoc>
                <method name="setFont" type="void" line="772">
                    <params>
                        <param name="font" type="Font"/>
                    </params>
                </method>
                <javadoc line="776">
                    Returns the font for this state.                    
                    <return>
                        Returns the font to use for rendering this state                        
                    </return>
                </javadoc>
                <method name="getFont" type="Font" line="781"/>
                <javadoc line="785">
                    Sets the array of colors to use for rendering this state. This
                      is indexed by &lt;code&gt;ColorType.getID()&lt;/code&gt;.                    
                    <param>
                        colors Array of colors                        
                    </param>
                </javadoc>
                <method name="setColors" type="void" line="791">
                    <params>
                        <param name="colors" type="Color[]"/>
                    </params>
                </method>
                <javadoc line="795">
                    Returns the array of colors to use for rendering this state. This
                      is indexed by &lt;code&gt;ColorType.getID()&lt;/code&gt;.                    
                    <return>
                        Array of colors                        
                    </return>
                </javadoc>
                <method name="getColors" type="Color[]" line="801"/>
                <javadoc line="805">
                    Returns the Color to used for the specified ColorType.                    
                    <return>
                        Color.                        
                    </return>
                </javadoc>
                <method name="getColor" type="Color" line="810">
                    <params>
                        <param name="type" type="ColorType"/>
                    </params>
                    <scope line="811">
                        <declaration name="id" type="int" line="812"/>
                        <scope line="814"/>
                    </scope>
                </method>
                <javadoc line="821">
                    Merges the contents of this StateInfo with that of the passed in
                      StateInfo, returning the resulting merged StateInfo. Properties of
                      this &lt;code&gt;StateInfo&lt;/code&gt; will take precedence over those of the
                      passed in &lt;code&gt;StateInfo&lt;/code&gt;. For example, if this
                      StateInfo specifics a non-null font, the returned StateInfo will
                      have its font so to that regardless of the &lt;code&gt;StateInfo&lt;/code&gt;&apos;s
                      font.                    
                    <param>
                        info StateInfo to add our styles to                        
                    </param>
                    <return>
                        Merged StateInfo.                        
                    </return>
                </javadoc>
                <method name="addTo" type="StateInfo" line="833">
                    <params>
                        <param name="info" type="StateInfo"/>
                    </params>
                    <scope line="834"/>
                    <scope line="837">
                        <scope line="838"/>
                    </scope>
                    <scope line="843">
                        <scope line="844"/>
                        <scope line="849">
                            <scope line="850">
                                <declaration name="old" type="Color[]" line="851"/>
                            </scope>
                            <scope line="857">
                                <scope line="858"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="867">
                    Sets the state this StateInfo corresponds to.                    
                    <see>
                        SynthConstants                        
                    </see>
                    <param>
                        state info.                        
                    </param>
                </javadoc>
                <method name="setComponentState" type="void" line="873">
                    <params>
                        <param name="state" type="int"/>
                    </params>
                </method>
                <javadoc line="877">
                    Returns the state this StateInfo corresponds to.                    
                    <see>
                        SynthConstants                        
                    </see>
                    <return>
                        state info.                        
                    </return>
                </javadoc>
                <method name="getComponentState" type="int" line="883"/>
                <javadoc line="887">
                    Returns the number of states that are similar between the
                      ComponentState this StateInfo represents and val.                    
                </javadoc>
                <method name="getMatchCount" type="int" line="891">
                    <params>
                        <param name="val" type="int"/>
                    </params>
                    <comment line="893">
                        This comes from BigInteger.bitCnt                        
                    </comment>
                </method>
                <javadoc line="902">
                    Creates and returns a copy of this StateInfo.                    
                    <return>
                        Copy of this StateInfo.                        
                    </return>
                </javadoc>
                <method name="clone" type="Object" line="907"/>
                <method name="toString" type="String" line="911">
                    <declaration name="buf" type="StringBuffer" line="912"/>
                    <scope line="920"/>
                </method>
            </class>
        </class>
    </source>