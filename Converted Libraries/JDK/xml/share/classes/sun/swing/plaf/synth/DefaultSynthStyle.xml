<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.swing.plaf.synth">
        <import package="javax.swing.plaf.synth"/>
        <import package="java.awt"/>
        <import package="java.util"/>
        <import package="javax.swing"/>
        <import package="javax.swing.border.Border"/>
        <import package="javax.swing.plaf"/>
        <class name="DefaultSynthStyle" line="8">
            <extends class="SynthStyle"/>
            <implements interface="Cloneable"/>
            <javadoc line="8">
                Default implementation of SynthStyle. Has setters for the various
                  SynthStyle methods. Many of the properties can be specified for all states,
                  using SynthStyle directly, or a specific state using one of the StateInfo
                  methods.
                  &lt;p&gt;
                  Beyond the constructor a subclass should override the &lt;code&gt;addTo&lt;/code&gt;
                  and &lt;code&gt;clone&lt;/code&gt; methods, these are used when the Styles are being
                  merged into a resulting style.                
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="PENDING" type="String" line="20"/>
            <declaration name="opaque" type="boolean" line="21"/>
            <javadoc line="21">
                Should the component be opaque?                
            </javadoc>
            <declaration name="insets" type="Insets" line="25"/>
            <javadoc line="25">
                Insets.                
            </javadoc>
            <declaration name="states" type="StateInfo[]" line="29"/>
            <javadoc line="29">
                Information specific to ComponentState.                
            </javadoc>
            <declaration name="data" type="Map" line="33"/>
            <javadoc line="33">
                User specific data.                
            </javadoc>
            <declaration name="font" type="Font" line="37"/>
            <javadoc line="37">
                Font to use if there is no matching StateInfo, or the StateInfo doesn&apos;t
                  define one.                
            </javadoc>
            <declaration name="synthGraphics" type="SynthGraphicsUtils" line="42"/>
            <javadoc line="42">
                SynthGraphics, may be null.                
            </javadoc>
            <declaration name="painter" type="SynthPainter" line="46"/>
            <javadoc line="46">
                Painter to use if the StateInfo doesn&apos;t have one.                
            </javadoc>
            <javadoc line="50">
                Nullary constructor, intended for subclassers.                
            </javadoc>
            <method name="DefaultSynthStyle" type="constructor" line="53"/>
            <javadoc line="55">
                Creates a new DefaultSynthStyle that is a copy of the passed in
                  style. Any StateInfo&apos;s of the passed in style are clonsed as well.                
                <param>
                    style Style to duplicate                    
                </param>
            </javadoc>
            <method name="DefaultSynthStyle" type="constructor" line="60">
                <params>
                    <param name="style" type="DefaultSynthStyle"/>
                </params>
                <scope line="62"/>
                <scope line="65">
                    <scope line="67"/>
                </scope>
                <scope line="71"/>
            </method>
            <javadoc line="79">
                Creates a new DefaultSynthStyle.                
                <param>
                    insets Insets for the Style                    
                </param>
                <param>
                    opaque Whether or not the background is completely painted in
                      an opaque color                    
                </param>
                <param>
                    states StateInfos describing properties per state                    
                </param>
                <param>
                    data Style specific data.                    
                </param>
            </javadoc>
            <method name="DefaultSynthStyle" type="constructor" line="87">
                <params>
                    <param name="insets" type="Insets"/>
                    <param name="opaque" type="boolean"/>
                    <param name="states" type="StateInfo[]"/>
                    <param name="data" type="Map"/>
                </params>
            </method>
            <method name="getColor" type="Color" line="93">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="type" type="ColorType"/>
                </params>
            </method>
            <method name="getColor" type="Color" line="96">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="id" type="Region"/>
                    <param name="state" type="int"/>
                    <param name="type" type="ColorType"/>
                </params>
                <scope line="97">
                    <scope line="98"/>
                    <scope line="101"/>
                    <scope line="104">
                        <declaration name="color" type="Color" line="105"/>
                        <scope line="106"/>
                    </scope>
                </scope>
                <declaration name="color" type="Color" line="111"/>
                <scope line="112">
                    <scope line="113"/>
                    <scope line="116"/>
                </scope>
            </method>
            <method name="getColorForState" type="Color" line="122">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="type" type="ColorType"/>
                </params>
            </method>
            <javadoc line="125">
                Returns the color for the specified state.                
                <param>
                    c JComponent the style is associated with                    
                </param>
                <param>
                    id Region identifier                    
                </param>
                <param>
                    state State of the region.                    
                </param>
                <param>
                    type Type of color being requested.                    
                </param>
                <return>
                    Color to render with                    
                </return>
            </javadoc>
            <method name="getColorForState" type="Color" line="133">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="id" type="Region"/>
                    <param name="state" type="int"/>
                    <param name="type" type="ColorType"/>
                </params>
                <declaration name="si" type="StateInfo" line="134"/>
                <declaration name="color" type="Color" line="135"/>
                <scope line="136"/>
                <scope line="139">
                    <scope line="141"/>
                </scope>
            </method>
            <javadoc line="147">
                Sets the font that is used if there is no matching StateInfo, or
                  it does not define a font.                
                <param>
                    font Font to use for rendering                    
                </param>
            </javadoc>
            <method name="setFont" type="void" line="152">
                <params>
                    <param name="font" type="Font"/>
                </params>
            </method>
            <method name="getFont" type="Font" line="155">
                <params>
                    <param name="state" type="SynthContext"/>
                </params>
            </method>
            <method name="getFont" type="Font" line="158">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="id" type="Region"/>
                    <param name="state" type="int"/>
                </params>
                <scope line="159"/>
                <declaration name="cFont" type="Font" line="162"/>
                <scope line="163"/>
            </method>
            <javadoc line="168">
                Returns the font for the specified state. This should NOT callback
                  to the JComponent.                
                <param>
                    c JComponent the style is associated with                    
                </param>
                <param>
                    id Region identifier                    
                </param>
                <param>
                    state State of the region.                    
                </param>
                <return>
                    Font to render with                    
                </return>
            </javadoc>
            <method name="getFontForState" type="Font" line="176">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="id" type="Region"/>
                    <param name="state" type="int"/>
                </params>
                <scope line="177"/>
                <declaration name="si" type="StateInfo" line="180"/>
                <declaration name="font" type="Font" line="181"/>
                <scope line="182"/>
                <scope line="185">
                    <scope line="187"/>
                </scope>
            </method>
            <method name="getFontForState" type="Font" line="193">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
            </method>
            <javadoc line="196">
                Sets the SynthGraphicsUtils that will be used for rendering.                
                <param>
                    graphics SynthGraphics                    
                </param>
            </javadoc>
            <method name="setGraphicsUtils" type="void" line="200">
                <params>
                    <param name="graphics" type="SynthGraphicsUtils"/>
                </params>
            </method>
            <javadoc line="203">
                Returns a SynthGraphicsUtils.                
                <param>
                    context SynthContext indentifying requestor                    
                </param>
                <return>
                    SynthGraphicsUtils                    
                </return>
            </javadoc>
            <method name="getGraphicsUtils" type="SynthGraphicsUtils" line="208">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
                <scope line="209"/>
            </method>
            <javadoc line="214">
                Sets the insets.                
                <param>
                    Insets.                    
                </param>
            </javadoc>
            <method name="setInsets" type="void" line="218">
                <params>
                    <param name="insets" type="Insets"/>
                </params>
            </method>
            <javadoc line="221">
                Returns the Insets. If &lt;code&gt;to&lt;/code&gt; is non-null the resulting
                  insets will be placed in it, otherwise a new Insets object will be
                  created and returned.                
                <param>
                    context SynthContext indentifying requestor                    
                </param>
                <param>
                    to Where to place Insets                    
                </param>
                <return>
                    Insets.                    
                </return>
            </javadoc>
            <method name="getInsets" type="Insets" line="229">
                <params>
                    <param name="state" type="SynthContext"/>
                    <param name="to" type="Insets"/>
                </params>
                <scope line="230"/>
                <scope line="233"/>
                <scope line="239"/>
            </method>
            <javadoc line="244">
                Sets the Painter to use for the border.                
                <param>
                    painter Painter for the Border.                    
                </param>
            </javadoc>
            <method name="setPainter" type="void" line="248">
                <params>
                    <param name="painter" type="SynthPainter"/>
                </params>
            </method>
            <javadoc line="251">
                Returns the Painter for the passed in Component. This may return null.                
                <param>
                    ss SynthContext indentifying requestor                    
                </param>
                <return>
                    Painter for the border                    
                </return>
            </javadoc>
            <method name="getPainter" type="SynthPainter" line="256">
                <params>
                    <param name="ss" type="SynthContext"/>
                </params>
            </method>
            <javadoc line="259">
                Sets whether or not the JComponent should be opaque.                
                <param>
                    opaque Whether or not the JComponent should be opaque.                    
                </param>
            </javadoc>
            <method name="setOpaque" type="void" line="263">
                <params>
                    <param name="opaque" type="boolean"/>
                </params>
            </method>
            <javadoc line="266">
                Returns the value to initialize the opacity property of the Component
                  to. A Style should NOT assume the opacity will remain this value, the
                  developer may reset it or override it.                
                <param>
                    ss SynthContext indentifying requestor                    
                </param>
                <return>
                    opaque Whether or not the JComponent is opaque.                    
                </return>
            </javadoc>
            <method name="isOpaque" type="boolean" line="273">
                <params>
                    <param name="ss" type="SynthContext"/>
                </params>
            </method>
            <javadoc line="276">
                Sets style specific values. This does NOT copy the data, it
                  assigns it directly to this Style.                
                <param>
                    data Style specific values                    
                </param>
            </javadoc>
            <method name="setData" type="void" line="281">
                <params>
                    <param name="data" type="Map"/>
                </params>
            </method>
            <javadoc line="284">
                Returns the style specific data.                
                <return>
                    Style specific data.                    
                </return>
            </javadoc>
            <method name="getData" type="Map" line="288"/>
            <javadoc line="291">
                Getter for a region specific style property.                
                <param>
                    state SynthContext indentifying requestor                    
                </param>
                <param>
                    key Property being requested.                    
                </param>
                <return>
                    Value of the named property                    
                </return>
            </javadoc>
            <method name="get" type="Object" line="297">
                <params>
                    <param name="state" type="SynthContext"/>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="si" type="StateInfo" line="298"/>
                <scope line="299"/>
                <scope line="303"/>
            </method>
            <method name="getKeyFromData" type="Object" line="309">
                <params>
                    <param name="stateData" type="Map"/>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="value" type="Object" line="310"/>
                <scope line="311">
                    <scope line="312"/>
                    <scope line="315">
                        <scope line="316">
                            <scope line="317"/>
                            <scope line="320"/>
                        </scope>
                    </scope>
                    <scope line="325">
                        <scope line="326"/>
                        <scope line="330"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="338">
                Returns the default value for a particular property.  This is only
                  invoked if this style doesn&apos;t define a property for &lt;code&gt;key&lt;/code&gt;.                
                <param>
                    state SynthContext indentifying requestor                    
                </param>
                <param>
                    key Property being requested.                    
                </param>
                <return>
                    Value of the named property                    
                </return>
            </javadoc>
            <method name="getDefaultValue" type="Object" line="345">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="348">
                Creates a clone of this style.                
                <return>
                    Clone of this style                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="352">
                <declaration name="style" type="DefaultSynthStyle" line="353"/>
                <scope line="354"/>
                <scope line="357"/>
                <scope line="360">
                    <scope line="362"/>
                </scope>
                <scope line="366"/>
            </method>
            <javadoc line="372">
                Merges the contents of this Style with that of the passed in Style,
                  returning the resulting merged syle. Properties of this
                  &lt;code&gt;DefaultSynthStyle&lt;/code&gt; will take precedence over those of the
                  passed in &lt;code&gt;DefaultSynthStyle&lt;/code&gt;. For example, if this
                  style specifics a non-null font, the returned style will have its
                  font so to that regardless of the &lt;code&gt;style&lt;/code&gt;&apos;s font.                
                <param>
                    style Style to add our styles to                    
                </param>
                <return>
                    Merged style.                    
                </return>
            </javadoc>
            <method name="addTo" type="DefaultSynthStyle" line="382">
                <params>
                    <param name="style" type="DefaultSynthStyle"/>
                </params>
                <scope line="383"/>
                <scope line="386"/>
                <scope line="389"/>
                <scope line="392"/>
                <scope line="396">
                    <scope line="397">
                        <scope line="399">
                            <scope line="400"/>
                        </scope>
                    </scope>
                    <scope line="405">
                        <declaration name="unique" type="int" line="406"/>
                        <declaration name="matchCount" type="int" line="407"/>
                        <declaration name="maxOStyles" type="int" line="408"/>
                        <scope line="409">
                            <declaration name="state" type="int" line="410"/>
                            <declaration name="found" type="boolean" line="411"/>
                            <scope line="412">
                                <scope line="413">
                                    <declaration name="tmp" type="StateInfo" line="415"/>
                                </scope>
                            </scope>
                            <scope line="423"/>
                        </scope>
                        <scope line="427">
                            <declaration name="newStates" type="StateInfo[]" line="428"/>
                            <declaration name="newIndex" type="int" line="429"/>
                            <scope line="431">
                                <declaration name="state" type="int" line="432"/>
                                <declaration name="found" type="boolean" line="433"/>
                                <scope line="434">
                                    <scope line="435"/>
                                </scope>
                                <scope line="440"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="448">
                    <scope line="449"/>
                </scope>
            </method>
            <javadoc line="456">
                Sets the array of StateInfo&apos;s which are used to specify properties
                  specific to a particular style.                
                <param>
                    states StateInfos                    
                </param>
            </javadoc>
            <method name="setStateInfo" type="void" line="461">
                <params>
                    <param name="states" type="StateInfo[]"/>
                </params>
            </method>
            <javadoc line="464">
                Returns the array of StateInfo&apos;s that that are used to specify
                  properties specific to a particular style.                
                <return>
                    Array of StateInfos.                    
                </return>
            </javadoc>
            <method name="getStateInfo" type="StateInfo[]" line="469"/>
            <javadoc line="472">
                Returns the best matching StateInfo for a particular state.                
                <param>
                    state Component state.                    
                </param>
                <return>
                    Best matching StateInfo, or null                    
                </return>
            </javadoc>
            <method name="getStateInfo" type="StateInfo" line="477">
                <params>
                    <param name="state" type="int"/>
                </params>
                <scope line="478">
                    <declaration name="bestCount" type="int" line="479"/>
                    <declaration name="bestIndex" type="int" line="480"/>
                    <declaration name="wildIndex" type="int" line="481"/>
                    <scope line="482">
                        <scope line="483">
                            <scope line="484"/>
                        </scope>
                    </scope>
                    <scope line="490">
                        <declaration name="oState" type="int" line="491"/>
                        <scope line="492">
                            <scope line="493"/>
                        </scope>
                        <scope line="497">
                            <declaration name="bitCount" type="int" line="498"/>
                            <scope line="505"/>
                        </scope>
                    </scope>
                    <scope line="511"/>
                    <scope line="514"/>
                </scope>
            </method>
            <method name="toString" type="String" line="520">
                <declaration name="buf" type="StringBuffer" line="521"/>
                <declaration name="states" type="StateInfo[]" line="528"/>
                <scope line="529">
                    <scope line="531"/>
                </scope>
            </method>
            <class name="StateInfo" line="539">
                <javadoc line="539">
                    StateInfo represents Style information specific to the state of
                      a component.                    
                </javadoc>
                <declaration name="data" type="Map" line="544"/>
                <declaration name="font" type="Font" line="545"/>
                <declaration name="colors" type="Color[]" line="546"/>
                <declaration name="state" type="int" line="547"/>
                <javadoc line="548">
                    Creates a new StateInfo.                    
                </javadoc>
                <method name="StateInfo" type="constructor" line="551"/>
                <javadoc line="553">
                    Creates a new StateInfo with the specified properties                    
                    <param>
                        state Component state(s) that this StateInfo should be used
                          for                        
                    </param>
                    <param>
                        painter Painter responsible for rendering                        
                    </param>
                    <param>
                        bgPainter Painter responsible for rendering the background                        
                    </param>
                    <param>
                        font Font for this state                        
                    </param>
                    <param>
                        colors Colors for this state                        
                    </param>
                </javadoc>
                <method name="StateInfo" type="constructor" line="562">
                    <params>
                        <param name="state" type="int"/>
                        <param name="font" type="Font"/>
                        <param name="colors" type="Color[]"/>
                    </params>
                </method>
                <javadoc line="567">
                    Creates a new StateInfo that is a copy of the passed in
                      StateInfo.                    
                    <param>
                        info StateInfo to copy.                        
                    </param>
                </javadoc>
                <method name="StateInfo" type="constructor" line="572">
                    <params>
                        <param name="info" type="StateInfo"/>
                    </params>
                    <scope line="575">
                        <scope line="576"/>
                    </scope>
                    <scope line="581"/>
                </method>
                <method name="getData" type="Map" line="586"/>
                <method name="setData" type="void" line="589">
                    <params>
                        <param name="data" type="Map"/>
                    </params>
                </method>
                <javadoc line="592">
                    Sets the font for this state.                    
                    <param>
                        font Font to use for rendering                        
                    </param>
                </javadoc>
                <method name="setFont" type="void" line="596">
                    <params>
                        <param name="font" type="Font"/>
                    </params>
                </method>
                <javadoc line="599">
                    Returns the font for this state.                    
                    <return>
                        Returns the font to use for rendering this state                        
                    </return>
                </javadoc>
                <method name="getFont" type="Font" line="603"/>
                <javadoc line="606">
                    Sets the array of colors to use for rendering this state. This
                      is indexed by &lt;code&gt;ColorType.getID()&lt;/code&gt;.                    
                    <param>
                        colors Array of colors                        
                    </param>
                </javadoc>
                <method name="setColors" type="void" line="611">
                    <params>
                        <param name="colors" type="Color[]"/>
                    </params>
                </method>
                <javadoc line="614">
                    Returns the array of colors to use for rendering this state. This
                      is indexed by &lt;code&gt;ColorType.getID()&lt;/code&gt;.                    
                    <return>
                        Array of colors                        
                    </return>
                </javadoc>
                <method name="getColors" type="Color[]" line="619"/>
                <javadoc line="622">
                    Returns the Color to used for the specified ColorType.                    
                    <return>
                        Color.                        
                    </return>
                </javadoc>
                <method name="getColor" type="Color" line="626">
                    <params>
                        <param name="type" type="ColorType"/>
                    </params>
                    <scope line="627">
                        <declaration name="id" type="int" line="628"/>
                        <scope line="629"/>
                    </scope>
                </method>
                <javadoc line="635">
                    Merges the contents of this StateInfo with that of the passed in
                      StateInfo, returning the resulting merged StateInfo. Properties of
                      this &lt;code&gt;StateInfo&lt;/code&gt; will take precedence over those of the
                      passed in &lt;code&gt;StateInfo&lt;/code&gt;. For example, if this
                      StateInfo specifics a non-null font, the returned StateInfo will
                      have its font so to that regardless of the &lt;code&gt;StateInfo&lt;/code&gt;&apos;s
                      font.                    
                    <param>
                        info StateInfo to add our styles to                        
                    </param>
                    <return>
                        Merged StateInfo.                        
                    </return>
                </javadoc>
                <method name="addTo" type="StateInfo" line="646">
                    <params>
                        <param name="info" type="StateInfo"/>
                    </params>
                    <scope line="647"/>
                    <scope line="650">
                        <scope line="651"/>
                    </scope>
                    <scope line="656">
                        <scope line="657"/>
                        <scope line="661">
                            <scope line="662">
                                <declaration name="old" type="Color[]" line="663"/>
                            </scope>
                            <scope line="667">
                                <scope line="668"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="676">
                    Sets the state this StateInfo corresponds to.                    
                    <see>
                        SynthConstants                        
                    </see>
                    <param>
                        state info.                        
                    </param>
                </javadoc>
                <method name="setComponentState" type="void" line="681">
                    <params>
                        <param name="state" type="int"/>
                    </params>
                </method>
                <javadoc line="684">
                    Returns the state this StateInfo corresponds to.                    
                    <see>
                        SynthConstants                        
                    </see>
                    <return>
                        state info.                        
                    </return>
                </javadoc>
                <method name="getComponentState" type="int" line="689"/>
                <javadoc line="692">
                    Returns the number of states that are similar between the
                      ComponentState this StateInfo represents and val.                    
                </javadoc>
                <method name="getMatchCount" type="int" line="696">
                    <params>
                        <param name="val" type="int"/>
                    </params>
                </method>
                <javadoc line="705">
                    Creates and returns a copy of this StateInfo.                    
                    <return>
                        Copy of this StateInfo.                        
                    </return>
                </javadoc>
                <method name="clone" type="Object" line="709"/>
                <method name="toString" type="String" line="712">
                    <declaration name="buf" type="StringBuffer" line="713"/>
                    <scope line="717"/>
                </method>
            </class>
        </class>
    </source>