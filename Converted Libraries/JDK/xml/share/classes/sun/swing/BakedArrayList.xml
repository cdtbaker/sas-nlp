<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.swing">
        <import package="java.util"/>
        <class name="BakedArrayList" line="29">
            <extends class="ArrayList"/>
            <javadoc line="29">
                &lt;b&gt;WARNING:&lt;/b&gt; This class is an implementation detail and is only
                  public so that it can be used by two packages. You should NOT consider
                  this public API.
                  &lt;p&gt;
                  &lt;b&gt;WARNING 2:&lt;/b&gt; This is not a general purpose List implementation! It
                  has a specific use and will not work correctly if you use it outside of
                  its use.
                  &lt;p&gt;
                  A specialized ArrayList that caches its hashCode as well as overriding
                  equals to avoid creating an Iterator. This class is useful in scenarios
                  where the list won&apos;t change and you want to avoid the overhead of hashCode
                  iterating through the elements invoking hashCode. This also assumes you&apos;ll
                  only ever compare a BakedArrayList to another BakedArrayList.                
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="_hashCode" type="int" line="47"/>
            <javadoc line="47">
                The cached hashCode.                
            </javadoc>
            <method name="BakedArrayList" type="constructor" line="52">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <method name="BakedArrayList" type="constructor" line="56">
                <params>
                    <param name="data" type="java.util.List"/>
                </params>
                <scope line="58"/>
            </method>
            <javadoc line="64">
                Caches the hash code. It is assumed you won&apos;t modify the list, or that
                  if you do you&apos;ll call cacheHashCode again.                
            </javadoc>
            <method name="cacheHashCode" type="void" line="68">
                <scope line="70"/>
            </method>
            <method name="hashCode" type="int" line="75"/>
            <method name="equals" type="boolean" line="79">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="list" type="BakedArrayList" line="80"/>
                <declaration name="size" type="int" line="81"/>
                <scope line="83"/>
                <scope line="86">
                    <scope line="87"/>
                </scope>
            </method>
        </class>
    </source>