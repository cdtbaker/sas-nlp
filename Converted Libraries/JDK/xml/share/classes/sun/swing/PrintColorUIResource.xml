<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.swing">
        <import package="java.awt.Color"/>
        <import package="javax.swing.plaf.ColorUIResource"/>
        <class name="PrintColorUIResource" line="4">
            <extends class="ColorUIResource"/>
            <javadoc line="4">
                A subclass of ColorUIResource that wraps an alternate color
                  for use during printing. Useful to replace color values that
                  may look poor in printed output.                
                <author>
                    Shannon Hickey                    
                </author>
            </javadoc>
            <declaration name="printColor" type="Color" line="11"/>
            <javadoc line="11">
                The color to use during printing                
            </javadoc>
            <javadoc line="15">
                Construct an instance for the given RGB value and
                  alternate color to use during printing.                
                <param>
                    rgb the color rgb value                    
                </param>
                <param>
                    printColor the alternate color for printing                    
                </param>
            </javadoc>
            <method name="PrintColorUIResource" type="constructor" line="21">
                <params>
                    <param name="rgb" type="int"/>
                    <param name="printColor" type="Color"/>
                </params>
            </method>
            <javadoc line="25">
                Return the color to use during printing. If no alternate
                  color was specified on construction, this method will
                  return &lt;code&gt;this&lt;/code&gt;.                
                <return>
                    the color to use during printing                    
                </return>
            </javadoc>
            <method name="getPrintColor" type="Color" line="31"/>
            <javadoc line="34">
                Replaces this object with a plain {@code ColorUIResource} during
                  serialization. Since {@code PrintColorUIResource} resides in the
                  sun.swing package, access can be disallowed to it by a security
                  manager. When access is disallowed, deserialization of any object
                  with reference to a {@code PrintColorUIResource} fails.
                  &lt;p&gt;
                  Since {@code PrintColorUIResource) is used only by Swing&apos;s look
                  and feels, and we know that UI supplied colors are replaced after
                  deserialization when the UI is re-installed, the only important}aspect of the {@code PrintColorUIResource} that needs to be
                  persisted is the fact that it is a {@code ColorUIResource}. As
                  such, we can avoid the problem outlined above by replacing
                  the problematic {@code PrintColorUIResource} with a plain{@code ColorUIResource}.
                  &lt;p&gt;
                  Note: As a result of this method, it is not possible to write
                  a {@code PrintColorUIResource} to a stream and then read
                  back a {@code PrintColorUIResource}. This is acceptable since we
                  don&apos;t have a requirement for that in Swing.                
            </javadoc>
            <method name="writeReplace" type="Object" line="53"/>
        </class>
    </source>