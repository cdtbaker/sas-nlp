<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.swing">
        <import package="java.security"/>
        <import package="java.lang.reflect"/>
        <import package="java.awt"/>
        <import package="java.awt.RenderingHints"/>
        <import package="java.awt.event"/>
        <import package="java.awt.font"/>
        <import package="java.awt.geom"/>
        <import package="java.awt.print.PrinterGraphics"/>
        <import package="java.text.Bidi"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="java.text.AttributedString"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.text.Highlighter"/>
        <import package="javax.swing.text.JTextComponent"/>
        <import package="javax.swing.text.DefaultHighlighter"/>
        <import package="javax.swing.text.DefaultCaret"/>
        <import package="javax.swing.table.TableCellRenderer"/>
        <import package="javax.swing.table.TableColumnModel"/>
        <import package="sun.swing.PrintColorUIResource"/>
        <import package="sun.swing.ImageIconUIResource"/>
        <import package="sun.print.ProxyPrintGraphics"/>
        <import package="sun.awt"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.security.util.SecurityConstants"/>
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="sun.font.FontDesignMetrics"/>
        <import package="sun.font.FontUtilities"/>
        <import package="sun.java2d.SunGraphicsEnvironment"/>
        <import package="java.util.concurrent.Callable"/>
        <import package="java.util.concurrent.Future"/>
        <import package="java.util.concurrent.FutureTask"/>
        <class name="SwingUtilities2" line="35">
            <javadoc line="35">
                A collection of utility methods for Swing.
                  &lt;p&gt;
                  &lt;b&gt;WARNING:&lt;/b&gt; While this class is public, it should not be treated as
                  public API and its API may change in incompatable ways between dot dot
                  releases and even patch releases. You should not rely on this class even
                  existing.                
            </javadoc>
            <declaration name="LAF_STATE_KEY" type="Object" line="44"/>
            <javadoc line="44">
                The &lt;code&gt;AppContext&lt;/code&gt; key for our one &lt;code&gt;LAFState&lt;/code&gt;
                  instance.                
            </javadoc>
            <declaration name="fontCache" type="LSBCacheEntry[]" line="49"/>
            <declaration name="CACHE_SIZE" type="int" line="50"/>
            <declaration name="nextIndex" type="int" line="51"/>
            <declaration name="searchKey" type="LSBCacheEntry" line="52"/>
            <declaration name="MIN_CHAR_INDEX" type="int" line="53"/>
            <declaration name="MAX_CHAR_INDEX" type="int" line="54"/>
            <declaration name="DEFAULT_FRC" type="FontRenderContext" line="55"/>
            <declaration name="AA_TEXT_PROPERTY_KEY" type="Object" line="56"/>
            <javadoc line="56">
                A JComponent client property is used to determine text aa settings.
                  To avoid having this property persist between look and feels changes
                  the value of the property is set to null in JComponent.setUI                
            </javadoc>
            <declaration name="IMPLIED_CR" type="String" line="62"/>
            <javadoc line="62">
                Attribute key for the content elements.  If it is set on an element, the
                  element is considered to be a line break.                
            </javadoc>
            <declaration name="SKIP_CLICK_COUNT" type="StringBuilder" line="67"/>
            <javadoc line="67">
                Used to tell a text component, being used as an editor for table
                  or tree, how many clicks it took to start editing.                
            </javadoc>
            <class name="AATextInfo" line="72">
                <method name="getAATextInfoFromMap" type="AATextInfo" line="73">
                    <params>
                        <param name="hints" type="Map"/>
                    </params>
                    <declaration name="aaHint" type="Object" line="74"/>
                    <declaration name="contHint" type="Object" line="75"/>
                    <scope line="76"/>
                    <scope line="79"/>
                </method>
                <method name="getAATextInfo" type="AATextInfo" line="83">
                    <params>
                        <param name="lafCondition" type="boolean"/>
                    </params>
                    <declaration name="tk" type="Toolkit" line="85"/>
                    <declaration name="map" type="Object" line="86"/>
                    <scope line="87"/>
                    <scope line="90"/>
                </method>
                <declaration name="aaHint" type="Object" line="94"/>
                <declaration name="lcdContrastHint" type="Integer" line="95"/>
                <declaration name="frc" type="FontRenderContext" line="96"/>
                <method name="AATextInfo" type="constructor" line="97">
                    <params>
                        <param name="aaHint" type="Object"/>
                        <param name="lcdContrastHint" type="Integer"/>
                    </params>
                    <scope line="98"/>
                    <scope line="101"/>
                </method>
            </class>
            <declaration name="COMPONENT_UI_PROPERTY_KEY" type="Object" line="109"/>
            <javadoc line="109">
                Key used in client properties used to indicate that the
                  &lt;code&gt;ComponentUI&lt;/code&gt; of the JComponent instance should be returned.                
            </javadoc>
            <declaration name="BASICMENUITEMUI_MAX_TEXT_OFFSET" type="StringUIClientPropertyKey" line="114"/>
            <javadoc line="114">
                Client Property key for the text maximal offsets for BasicMenuItemUI                
            </javadoc>
            <declaration name="inputEvent_CanAccessSystemClipboard_Field" type="Field" line="118"/>
            <declaration name="UntrustedClipboardAccess" type="String" line="119"/>
            <declaration name="CHAR_BUFFER_SIZE" type="int" line="120"/>
            <declaration name="charsBufferLock" type="Object" line="121"/>
            <declaration name="charsBuffer" type="char[]" line="122"/>
            <scope line="123"/>
            <javadoc line="126">
                Fill the character buffer cache.  Return the buffer length.                
            </javadoc>
            <method name="syncCharsBuffer" type="int" line="129">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="length" type="int" line="130"/>
                <scope line="131"/>
                <scope line="134"/>
            </method>
            <javadoc line="139">
                checks whether TextLayout is required to handle characters.                
                <param>
                    text characters to be tested                    
                </param>
                <param>
                    start start                    
                </param>
                <param>
                    limit limit                    
                </param>
                <return>
                    <tt>true</tt>  if TextLayout is required
                      <tt>false</tt> if TextLayout is not required                    
                </return>
            </javadoc>
            <method name="isComplexLayout" type="boolean" line="147">
                <params>
                    <param name="text" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                </params>
            </method>
            <javadoc line="150">
                Returns whether or not text should be drawn antialiased.                
                <param>
                    c JComponent to test.                    
                </param>
                <return>
                    Whether or not text should be drawn antialiased for the
                      specified component.                    
                </return>
            </javadoc>
            <method name="drawTextAntialiased" type="AATextInfo" line="156">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="157"/>
            </method>
            <javadoc line="162">
                Returns the left side bearing of the first character of string. The
                  left side bearing is calculated from the passed in
                  FontMetrics.  If the passed in String is less than one
                  character {@code 0} is returned.                
                <param>
                    c JComponent that will display the string                    
                </param>
                <param>
                    fm FontMetrics used to measure the String width                    
                </param>
                <param>
                    string String to get the left side bearing for.                    
                </param>
                <throws>
                    NullPointerException if {@code string} is {@code null}                    
                </throws>
                <return>
                    the left side bearing of the first character of string
                      or {@code 0} if the string is empty                    
                </return>
            </javadoc>
            <method name="getLeftSideBearing" type="int" line="174">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="fm" type="FontMetrics"/>
                    <param name="string" type="String"/>
                </params>
                <scope line="175"/>
            </method>
            <javadoc line="180">
                Returns the left side bearing of the first character of string. The
                  left side bearing is calculated from the passed in FontMetrics.                
                <param>
                    c JComponent that will display the string                    
                </param>
                <param>
                    fm FontMetrics used to measure the String width                    
                </param>
                <param>
                    firstChar Character to get the left side bearing for.                    
                </param>
            </javadoc>
            <method name="getLeftSideBearing" type="int" line="187">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="fm" type="FontMetrics"/>
                    <param name="firstChar" type="char"/>
                </params>
                <declaration name="charIndex" type="int" line="188"/>
                <scope line="189">
                    <declaration name="lsbs" type="byte[]" line="190"/>
                    <declaration name="frc" type="FontRenderContext" line="191"/>
                    <declaration name="font" type="Font" line="192"/>
                    <scope line="193">
                        <declaration name="entry" type="LSBCacheEntry" line="194"/>
                        <scope line="195"/>
                        <scope line="198"/>
                        <scope line="201">
                            <scope line="202"/>
                        </scope>
                        <scope line="207"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="218">
                Returns the FontMetrics for the current Font of the passed
                  in Graphics.  This method is used when a Graphics
                  is available, typically when painting.  If a Graphics is not
                  available the JComponent method of the same name should be used.
                  &lt;p&gt;
                  Callers should pass in a non-null JComponent, the exception
                  to this is if a JComponent is not readily available at the time of
                  painting.
                  &lt;p&gt;
                  This does not necessarily return the FontMetrics from the
                  Graphics.                
                <param>
                    c JComponent requesting FontMetrics, may be null                    
                </param>
                <param>
                    g Graphics Graphics                    
                </param>
            </javadoc>
            <method name="getFontMetrics" type="FontMetrics" line="233">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="236">
                Returns the FontMetrics for the specified Font.
                  This method is used when a Graphics is available, typically when
                  painting.  If a Graphics is not available the JComponent method of
                  the same name should be used.
                  &lt;p&gt;
                  Callers should pass in a non-null JComonent, the exception
                  to this is if a JComponent is not readily available at the time of
                  painting.
                  &lt;p&gt;
                  This does not necessarily return the FontMetrics from the
                  Graphics.                
                <param>
                    c JComponent requesting FontMetrics, may be null                    
                </param>
                <param>
                    c Graphics Graphics                    
                </param>
                <param>
                    font Font to get FontMetrics for                    
                </param>
            </javadoc>
            <method name="getFontMetrics" type="FontMetrics" line="252">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="g" type="Graphics"/>
                    <param name="font" type="Font"/>
                </params>
                <scope line="253"/>
            </method>
            <javadoc line="258">
                Returns the width of the passed in String.
                  If the passed String is &lt;code&gt;null&lt;/code&gt;, returns zero.                
                <param>
                    c JComponent that will display the string, may be null                    
                </param>
                <param>
                    fm FontMetrics used to measure the String width                    
                </param>
                <param>
                    string String to get the width of                    
                </param>
            </javadoc>
            <method name="stringWidth" type="int" line="265">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="fm" type="FontMetrics"/>
                    <param name="string" type="String"/>
                </params>
                <scope line="266"/>
                <declaration name="needsTextLayout" type="boolean" line="269"/>
                <scope line="270">
                    <scope line="271">
                        <declaration name="length" type="int" line="272"/>
                    </scope>
                </scope>
                <scope line="276">
                    <declaration name="layout" type="TextLayout" line="277"/>
                </scope>
                <scope line="280"/>
            </method>
            <javadoc line="284">
                Clips the passed in String to the space provided.                
                <param>
                    c JComponent that will display the string, may be null                    
                </param>
                <param>
                    fm FontMetrics used to measure the String width                    
                </param>
                <param>
                    string String to display                    
                </param>
                <param>
                    availTextWidth Amount of space that the string can be drawn in                    
                </param>
                <return>
                    Clipped string that can fit in the provided space.                    
                </return>
            </javadoc>
            <method name="clipStringIfNecessary" type="String" line="292">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="fm" type="FontMetrics"/>
                    <param name="string" type="String"/>
                    <param name="availTextWidth" type="int"/>
                </params>
                <scope line="293"/>
                <declaration name="textWidth" type="int" line="296"/>
                <scope line="297"/>
            </method>
            <javadoc line="302">
                Clips the passed in String to the space provided.  NOTE: this assumes
                  the string does not fit in the available space.                
                <param>
                    c JComponent that will display the string, may be null                    
                </param>
                <param>
                    fm FontMetrics used to measure the String width                    
                </param>
                <param>
                    string String to display                    
                </param>
                <param>
                    availTextWidth Amount of space that the string can be drawn in                    
                </param>
                <return>
                    Clipped string that can fit in the provided space.                    
                </return>
            </javadoc>
            <method name="clipString" type="String" line="311">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="fm" type="FontMetrics"/>
                    <param name="string" type="String"/>
                    <param name="availTextWidth" type="int"/>
                </params>
                <declaration name="clipString" type="String" line="312"/>
                <scope line="314"/>
                <declaration name="needsTextLayout" type="boolean" line="317"/>
                <scope line="318">
                    <declaration name="stringLength" type="int" line="319"/>
                    <scope line="321">
                        <declaration name="width" type="int" line="322"/>
                        <scope line="323">
                            <scope line="325"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="332">
                    <declaration name="frc" type="FontRenderContext" line="333"/>
                    <declaration name="aString" type="AttributedString" line="334"/>
                    <scope line="335"/>
                    <declaration name="measurer" type="LineBreakMeasurer" line="338"/>
                    <declaration name="nChars" type="int" line="339"/>
                </scope>
            </method>
            <javadoc line="344">
                Draws the string at the specified location.                
                <param>
                    c JComponent that will display the string, may be null                    
                </param>
                <param>
                    g Graphics to draw the text to                    
                </param>
                <param>
                    text String to display                    
                </param>
                <param>
                    x X coordinate to draw the text at                    
                </param>
                <param>
                    y Y coordinate to draw the text at                    
                </param>
            </javadoc>
            <method name="drawString" type="void" line="352">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="g" type="Graphics"/>
                    <param name="text" type="String"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="353"/>
                <scope line="356">
                    <declaration name="g2d" type="Graphics2D" line="357"/>
                    <scope line="358">
                        <declaration name="screenWidth" type="float" line="359"/>
                        <declaration name="layout" type="TextLayout" line="360"/>
                        <declaration name="col" type="Color" line="362"/>
                        <scope line="363"/>
                    </scope>
                </scope>
                <declaration name="info" type="AATextInfo" line="371"/>
                <scope line="372">
                    <declaration name="g2" type="Graphics2D" line="373"/>
                    <declaration name="oldContrast" type="Object" line="374"/>
                    <declaration name="oldAAValue" type="Object" line="375"/>
                    <scope line="376"/>
                    <scope line="379"/>
                    <scope line="382">
                        <scope line="384"/>
                        <scope line="387"/>
                    </scope>
                    <declaration name="needsTextLayout" type="boolean" line="391"/>
                    <scope line="392">
                        <scope line="393">
                            <declaration name="length" type="int" line="394"/>
                        </scope>
                    </scope>
                    <scope line="398">
                        <declaration name="layout" type="TextLayout" line="399"/>
                    </scope>
                    <scope line="402"/>
                    <scope line="405"/>
                    <scope line="408"/>
                </scope>
                <scope line="412"/>
            </method>
            <javadoc line="416">
                Draws the string at the specified location underlining the specified
                  character.                
                <param>
                    c JComponent that will display the string, may be null                    
                </param>
                <param>
                    g Graphics to draw the text to                    
                </param>
                <param>
                    text String to display                    
                </param>
                <param>
                    underlinedIndex Index of a character in the string to underline                    
                </param>
                <param>
                    x X coordinate to draw the text at                    
                </param>
                <param>
                    y Y coordinate to draw the text at                    
                </param>
            </javadoc>
            <method name="drawStringUnderlineCharAt" type="void" line="426">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="g" type="Graphics"/>
                    <param name="text" type="String"/>
                    <param name="underlinedIndex" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="427"/>
                <declaration name="textLength" type="int" line="431"/>
                <scope line="432">
                    <declaration name="underlineRectY" type="int" line="433"/>
                    <declaration name="underlineRectHeight" type="int" line="434"/>
                    <declaration name="underlineRectX" type="int" line="435"/>
                    <declaration name="underlineRectWidth" type="int" line="436"/>
                    <declaration name="isPrinting" type="boolean" line="437"/>
                    <declaration name="needsTextLayout" type="boolean" line="438"/>
                    <scope line="439">
                        <scope line="440"/>
                    </scope>
                    <scope line="445">
                        <declaration name="fm" type="FontMetrics" line="446"/>
                    </scope>
                    <scope line="450">
                        <declaration name="g2d" type="Graphics2D" line="451"/>
                        <scope line="452">
                            <declaration name="layout" type="TextLayout" line="453"/>
                            <scope line="454">
                                <declaration name="screenWidth" type="float" line="455"/>
                            </scope>
                            <declaration name="leading" type="TextHitInfo" line="458"/>
                            <declaration name="trailing" type="TextHitInfo" line="459"/>
                            <declaration name="shape" type="Shape" line="460"/>
                            <declaration name="rect" type="Rectangle" line="461"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="469">
                A variation of locationToIndex() which only returns an index if the
                  Point is within the actual bounds of a list item (not just in the cell)
                  and if the JList has the &quot;List.isFileList&quot; client property set.
                  Otherwise, this method returns -1.
                  This is used to make WindowsL&amp;F JFileChooser act like native dialogs.                
            </javadoc>
            <method name="loc2IndexFileList" type="int" line="476">
                <params>
                    <param name="list" type="JList"/>
                    <param name="point" type="Point"/>
                </params>
                <declaration name="index" type="int" line="477"/>
                <scope line="478">
                    <declaration name="bySize" type="Object" line="479"/>
                    <scope line="480"/>
                </scope>
            </method>
            <javadoc line="486">
                Returns true if the given point is within the actual bounds of the
                  JList item at index (not just inside the cell).                
            </javadoc>
            <method name="pointIsInActualBounds" type="boolean" line="490">
                <params>
                    <param name="list" type="JList"/>
                    <param name="index" type="int"/>
                    <param name="point" type="Point"/>
                </params>
                <declaration name="renderer" type="ListCellRenderer" line="491"/>
                <declaration name="dataModel" type="ListModel" line="492"/>
                <declaration name="value" type="Object" line="493"/>
                <declaration name="item" type="Component" line="494"/>
                <declaration name="itemSize" type="Dimension" line="495"/>
                <declaration name="cellBounds" type="Rectangle" line="496"/>
                <scope line="497"/>
            </method>
            <javadoc line="503">
                Returns true if the given point is outside the preferredSize of the
                  item at the given row of the table.  (Column must be 0).
                  Does not check the &quot;Table.isFileList&quot; property. That should be checked
                  before calling this method.
                  This is used to make WindowsL&amp;F JFileChooser act like native dialogs.                
            </javadoc>
            <method name="pointOutsidePrefSize" type="boolean" line="510">
                <params>
                    <param name="table" type="JTable"/>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="p" type="Point"/>
                </params>
                <scope line="511"/>
                <declaration name="tcr" type="TableCellRenderer" line="514"/>
                <declaration name="value" type="Object" line="515"/>
                <declaration name="cell" type="Component" line="516"/>
                <declaration name="itemSize" type="Dimension" line="517"/>
                <declaration name="cellBounds" type="Rectangle" line="518"/>
            </method>
            <javadoc line="524">
                Set the lead and anchor without affecting selection.                
            </javadoc>
            <method name="setLeadAnchorWithoutSelection" type="void" line="527">
                <params>
                    <param name="model" type="ListSelectionModel"/>
                    <param name="lead" type="int"/>
                    <param name="anchor" type="int"/>
                </params>
                <scope line="528"/>
                <scope line="531"/>
                <scope line="535">
                    <scope line="536"/>
                    <scope line="539"/>
                </scope>
            </method>
            <javadoc line="545">
                Ignore mouse events if the component is null, not enabled, the event
                  is not associated with the left mouse button, or the event has been
                  consumed.                
            </javadoc>
            <method name="shouldIgnore" type="boolean" line="550">
                <params>
                    <param name="me" type="MouseEvent"/>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="553">
                Request focus on the given component if it doesn&apos;t already have it
                  and &lt;code&gt;isRequestFocusEnabled()&lt;/code&gt; returns true.                
            </javadoc>
            <method name="adjustFocus" type="void" line="557">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="558"/>
            </method>
            <javadoc line="562">
                The following draw functions have the same semantic as the
                  Graphics methods with the same names.
                  this is used for printing                
            </javadoc>
            <method name="drawChars" type="int" line="567">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="g" type="Graphics"/>
                    <param name="data" type="char[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="568"/>
                <declaration name="nextX" type="int" line="571"/>
                <scope line="572">
                    <declaration name="g2d" type="Graphics2D" line="573"/>
                    <scope line="574">
                        <declaration name="deviceFontRenderContext" type="FontRenderContext" line="575"/>
                        <declaration name="frc" type="FontRenderContext" line="576"/>
                        <scope line="577">
                            <declaration name="layout" type="TextLayout" line="578"/>
                            <declaration name="screenWidth" type="float" line="579"/>
                            <declaration name="col" type="Color" line="581"/>
                            <scope line="582"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="info" type="AATextInfo" line="591"/>
                <scope line="592">
                    <declaration name="g2" type="Graphics2D" line="593"/>
                    <declaration name="oldContrast" type="Object" line="594"/>
                    <declaration name="oldAAValue" type="Object" line="595"/>
                    <scope line="596"/>
                    <scope line="599"/>
                    <scope line="602">
                        <scope line="604"/>
                        <scope line="607"/>
                    </scope>
                    <scope line="612"/>
                    <scope line="615"/>
                </scope>
                <scope line="619"/>
            </method>
            <method name="drawString" type="float" line="624">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="g" type="Graphics"/>
                    <param name="iterator" type="AttributedCharacterIterator"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="retVal" type="float" line="625"/>
                <declaration name="isPrinting" type="boolean" line="626"/>
                <declaration name="col" type="Color" line="627"/>
                <scope line="628">
                    <scope line="629"/>
                </scope>
                <declaration name="g2d" type="Graphics2D" line="633"/>
                <scope line="634"/>
                <scope line="638">
                    <declaration name="frc" type="FontRenderContext" line="639"/>
                    <scope line="640">
                        <scope line="642"/>
                    </scope>
                    <scope line="646"/>
                    <scope line="648"/>
                    <declaration name="layout" type="TextLayout" line="651"/>
                    <scope line="652">
                        <declaration name="deviceFRC" type="FontRenderContext" line="653"/>
                        <scope line="654">
                            <declaration name="screenWidth" type="float" line="655"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="663"/>
            </method>
            <method name="createTextLayout" type="TextLayout" line="668">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="s" type="String"/>
                    <param name="f" type="Font"/>
                    <param name="frc" type="FontRenderContext"/>
                </params>
                <declaration name="shaper" type="Object" line="669"/>
                <scope line="670"/>
                <scope line="673">
                    <declaration name="a" type="Map&lt;TextAttribute,Object&gt;" line="674"/>
                </scope>
            </method>
            <method name="isFontRenderContextPrintCompatible" type="boolean" line="680">
                <params>
                    <param name="frc1" type="FontRenderContext"/>
                    <param name="frc2" type="FontRenderContext"/>
                </params>
                <scope line="681"/>
                <scope line="684"/>
                <scope line="687"/>
                <scope line="690"/>
                <declaration name="mat1" type="double[]" line="693"/>
                <declaration name="mat2" type="double[]" line="694"/>
            </method>
            <method name="getGraphics2D" type="Graphics2D" line="699">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="700"/>
                <scope line="703"/>
                <scope line="706"/>
            </method>
            <method name="getFontRenderContext" type="FontRenderContext" line="710">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <javadoc line="719">
                A convenience method to get FontRenderContext.
                  Returns the FontRenderContext for the passed in FontMetrics or
                  for the passed in Component if FontMetrics is null                
            </javadoc>
            <method name="getFontRenderContext" type="FontRenderContext" line="724">
                <params>
                    <param name="c" type="Component"/>
                    <param name="fm" type="FontMetrics"/>
                </params>
            </method>
            <method name="getFontMetrics" type="FontMetrics" line="728">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="font" type="Font"/>
                </params>
                <declaration name="frc" type="FontRenderContext" line="729"/>
                <scope line="730"/>
            </method>
            <method name="getFRCProperty" type="FontRenderContext" line="735">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="736">
                    <declaration name="info" type="AATextInfo" line="737"/>
                    <scope line="738"/>
                </scope>
            </method>
            <method name="isPrinting" type="boolean" line="744">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="747">
                Determines whether the SelectedTextColor should be used for painting text
                  foreground for the specified highlight.
                  Returns true only if the highlight painter for the specified highlight
                  is the swing painter (whether inner class of javax.swing.text.DefaultHighlighter
                  or com.sun.java.swing.plaf.windows.WindowsTextUI) and its background color
                  is null or equals to the selection color of the text component.
                  This is a hack for fixing both bugs 4761990 and 5003294                
            </javadoc>
            <method name="useSelectedTextColor" type="boolean" line="756">
                <params>
                    <param name="h" type="Highlighter.Highlight"/>
                    <param name="c" type="JTextComponent"/>
                </params>
                <declaration name="painter" type="Highlighter.HighlightPainter" line="757"/>
                <declaration name="painterClass" type="String" line="758"/>
                <scope line="759"/>
                <scope line="762">
                    <declaration name="defPainter" type="DefaultHighlighter.DefaultHighlightPainter" line="763"/>
                    <scope line="764"/>
                </scope>
                <scope line="768"/>
            </method>
            <class name="LSBCacheEntry" line="773">
                <javadoc line="773">
                    LSBCacheEntry is used to cache the left side bearing (lsb) for
                      a particular &lt;code&gt;Font&lt;/code&gt; and &lt;code&gt;FontRenderContext&lt;/code&gt;.
                      This only caches characters that fall in the range
                      &lt;code&gt;MIN_CHAR_INDEX&lt;/code&gt; to &lt;code&gt;MAX_CHAR_INDEX&lt;/code&gt;.                    
                </javadoc>
                <declaration name="UNSET" type="byte" line="780"/>
                <declaration name="oneChar" type="char[]" line="781"/>
                <declaration name="lsbCache" type="byte[]" line="782"/>
                <declaration name="font" type="Font" line="783"/>
                <declaration name="frc" type="FontRenderContext" line="784"/>
                <method name="LSBCacheEntry" type="constructor" line="785">
                    <params>
                        <param name="frc" type="FontRenderContext"/>
                        <param name="font" type="Font"/>
                    </params>
                </method>
                <method name="reset" type="void" line="789">
                    <params>
                        <param name="frc" type="FontRenderContext"/>
                        <param name="font" type="Font"/>
                    </params>
                    <scope line="792"/>
                </method>
                <method name="getLeftSideBearing" type="int" line="796">
                    <params>
                        <param name="aChar" type="char"/>
                    </params>
                    <declaration name="index" type="int" line="797"/>
                    <declaration name="lsb" type="byte" line="799"/>
                    <scope line="800">
                        <declaration name="gv" type="GlyphVector" line="802"/>
                        <scope line="804">
                            <declaration name="aaHint" type="Object" line="805"/>
                            <scope line="806"/>
                        </scope>
                    </scope>
                </method>
                <method name="equals" type="boolean" line="814">
                    <params>
                        <param name="entry" type="Object"/>
                    </params>
                    <scope line="815"/>
                    <scope line="818"/>
                    <declaration name="oEntry" type="LSBCacheEntry" line="821"/>
                </method>
                <method name="hashCode" type="int" line="824">
                    <declaration name="result" type="int" line="825"/>
                    <scope line="826"/>
                    <scope line="829"/>
                </method>
            </class>
            <javadoc line="835">
                checks the security permissions for accessing system clipboard
                  for untrusted context (see isTrustedContext) checks the
                  permissions for the current event being handled                
            </javadoc>
            <method name="canAccessSystemClipboard" type="boolean" line="840">
                <declaration name="canAccess" type="boolean" line="841"/>
                <scope line="842">
                    <declaration name="sm" type="SecurityManager" line="843"/>
                    <scope line="844"/>
                    <scope line="847">
                        <scope line="848"/>
                        <scope line="852"/>
                        <scope line="854"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="861">
                Returns true if EventQueue.getCurrentEvent() has the permissions to
                  access the system clipboard                
            </javadoc>
            <method name="canCurrentEventAccessSystemClipboard" type="boolean" line="865"/>
            <javadoc line="868">
                Returns true if the given event has permissions to access the
                  system clipboard                
                <param>
                    e AWTEvent to check                    
                </param>
            </javadoc>
            <method name="canEventAccessSystemClipboard" type="boolean" line="873">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
            </method>
            <javadoc line="876">
                returns canAccessSystemClipboard field from InputEvent                
                <param>
                    ie InputEvent to get the field from                    
                </param>
            </javadoc>
            <method name="inputEvent_canAccessSystemClipboard" type="boolean" line="880">
                <params>
                    <param name="ie" type="InputEvent"/>
                </params>
                <scope line="881">
                    <anonymous_class line="882">
                        <method name="run" type="Field" line="883">
                            <scope line="884">
                                <declaration name="field" type="Field" line="885"/>
                            </scope>
                            <scope line="889"/>
                            <scope line="891"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="898"/>
                <declaration name="ret" type="boolean" line="901"/>
                <scope line="902"/>
                <scope line="905"/>
            </method>
            <javadoc line="909">
                Returns true if the given event is corrent gesture for
                  accessing clipboard                
                <param>
                    ie InputEvent to check                    
                </param>
            </javadoc>
            <method name="isAccessClipboardGesture" type="boolean" line="914">
                <params>
                    <param name="ie" type="InputEvent"/>
                </params>
                <declaration name="allowedGesture" type="boolean" line="915"/>
                <scope line="916">
                    <declaration name="ke" type="KeyEvent" line="917"/>
                    <declaration name="keyCode" type="int" line="918"/>
                    <declaration name="keyModifiers" type="int" line="919"/>
                </scope>
            </method>
            <javadoc line="941">
                Returns true if e has the permissions to
                  access the system clipboard and if it is allowed gesture (if
                  checkGesture is true)                
                <param>
                    e AWTEvent to check                    
                </param>
                <param>
                    checkGesture boolean                    
                </param>
            </javadoc>
            <method name="canEventAccessSystemClipboard" type="boolean" line="948">
                <params>
                    <param name="e" type="AWTEvent"/>
                    <param name="checkGesture" type="boolean"/>
                </params>
                <scope line="949">
                    <scope line="950"/>
                    <scope line="953"/>
                </scope>
                <scope line="957"/>
            </method>
            <javadoc line="961">
                Returns true if EventQueue.getCurrentEvent() has the permissions to
                  access the system clipboard and if it is allowed gesture (if
                  checkGesture true)                
                <param>
                    checkGesture boolean                    
                </param>
            </javadoc>
            <method name="canCurrentEventAccessSystemClipboard" type="boolean" line="967">
                <params>
                    <param name="checkGesture" type="boolean"/>
                </params>
                <declaration name="event" type="AWTEvent" line="968"/>
            </method>
            <javadoc line="971">
                see RFE 5012841 [Per AppContect security permissions] for the
                  details                
            </javadoc>
            <method name="isTrustedContext" type="boolean" line="975"/>
            <method name="displayPropertiesToCSS" type="String" line="978">
                <params>
                    <param name="font" type="Font"/>
                    <param name="fg" type="Color"/>
                </params>
                <declaration name="rule" type="StringBuffer" line="979"/>
                <scope line="980">
                    <scope line="987"/>
                    <scope line="990"/>
                </scope>
                <scope line="994">
                    <scope line="996"/>
                    <scope line="1000"/>
                    <scope line="1004"/>
                </scope>
            </method>
            <javadoc line="1013">
                Utility method that creates a &lt;code&gt;UIDefaults.LazyValue&lt;/code&gt; that
                  creates an &lt;code&gt;ImageIcon&lt;/code&gt; &lt;code&gt;UIResource&lt;/code&gt; for the
                  specified image file name. The image is loaded using
                  &lt;code&gt;getResourceAsStream&lt;/code&gt;, starting with a call to that method
                  on the base class parameter. If it cannot be found, searching will
                  continue through the base class&apos; inheritance hierarchy, up to and
                  including &lt;code&gt;rootClass&lt;/code&gt;.                
                <param>
                    baseClass the first class to use in searching for the resource                    
                </param>
                <param>
                    rootClass an ancestor of <code>baseClass</code> to finish the
                      search at                    
                </param>
                <param>
                    imageFile the name of the file to be found                    
                </param>
                <return>
                    a lazy value that creates the <code>ImageIcon</code>
                      <code>UIResource</code> for the image,
                      or null if it cannot be found                    
                </return>
            </javadoc>
            <method name="makeIcon" type="Object" line="1029">
                <params>
                    <param name="baseClass" type="Class<?>"/>
                    <param name="rootClass" type="Class<?>"/>
                    <param name="imageFile" type="String"/>
                </params>
                <anonymous_class line="1030">
                    <method name="createValue" type="Object" line="1031">
                        <params>
                            <param name="table" type="UIDefaults"/>
                        </params>
                        <anonymous_class line="1032">
                            <method name="run" type="byte[]" line="1033">
                                <scope line="1034">
                                    <declaration name="resource" type="InputStream" line="1035"/>
                                    <declaration name="srchClass" type="Class&lt;?&gt;" line="1036"/>
                                    <scope line="1037">
                                        <scope line="1039"/>
                                    </scope>
                                    <scope line="1044"/>
                                    <declaration name="in" type="BufferedInputStream" line="1047"/>
                                    <declaration name="out" type="ByteArrayOutputStream" line="1048"/>
                                    <declaration name="buffer" type="byte[]" line="1049"/>
                                    <declaration name="n" type="int" line="1050"/>
                                    <scope line="1051"/>
                                </scope>
                                <scope line="1058"/>
                            </method>
                        </anonymous_class>
                        <declaration name="buffer" type="byte[]" line="1032"/>
                        <scope line="1065"/>
                        <scope line="1068"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="isLocalDisplay" type="boolean" line="1077">
                <declaration name="isLocal" type="boolean" line="1078"/>
                <declaration name="ge" type="GraphicsEnvironment" line="1079"/>
                <scope line="1080"/>
                <scope line="1083"/>
            </method>
            <javadoc line="1088">
                Returns an integer from the defaults table. If &lt;code&gt;key&lt;/code&gt; does
                  not map to a valid &lt;code&gt;Integer&lt;/code&gt;, or can not be convered from
                  a &lt;code&gt;String&lt;/code&gt; to an integer, the value 0 is returned.                
                <param>
                    key  an <code>Object</code> specifying the int.                    
                </param>
                <return>
                    the int                    
                </return>
            </javadoc>
            <method name="getUIDefaultsInt" type="int" line="1095">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="1098">
                Returns an integer from the defaults table that is appropriate
                  for the given locale. If &lt;code&gt;key&lt;/code&gt; does not map to a valid
                  &lt;code&gt;Integer&lt;/code&gt;, or can not be convered from a &lt;code&gt;String&lt;/code&gt;
                  to an integer, the value 0 is returned.                
                <param>
                    key  an <code>Object</code> specifying the int. Returned value
                      is 0 if <code>key</code> is not available,                    
                </param>
                <param>
                    l the <code>Locale</code> for which the int is desired                    
                </param>
                <return>
                    the int                    
                </return>
            </javadoc>
            <method name="getUIDefaultsInt" type="int" line="1108">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
            </method>
            <javadoc line="1111">
                Returns an integer from the defaults table. If &lt;code&gt;key&lt;/code&gt; does
                  not map to a valid &lt;code&gt;Integer&lt;/code&gt;, or can not be convered from
                  a &lt;code&gt;String&lt;/code&gt; to an integer, &lt;code&gt;default&lt;/code&gt; is
                  returned.                
                <param>
                    key  an <code>Object</code> specifying the int. Returned value
                      is 0 if <code>key</code> is not available,                    
                </param>
                <param>
                    defaultValue Returned value if <code>key</code> is not available,
                      or is not an Integer                    
                </param>
                <return>
                    the int                    
                </return>
            </javadoc>
            <method name="getUIDefaultsInt" type="int" line="1122">
                <params>
                    <param name="key" type="Object"/>
                    <param name="defaultValue" type="int"/>
                </params>
            </method>
            <javadoc line="1125">
                Returns an integer from the defaults table that is appropriate
                  for the given locale. If &lt;code&gt;key&lt;/code&gt; does not map to a valid
                  &lt;code&gt;Integer&lt;/code&gt;, or can not be convered from a &lt;code&gt;String&lt;/code&gt;
                  to an integer, &lt;code&gt;default&lt;/code&gt; is returned.                
                <param>
                    key  an <code>Object</code> specifying the int. Returned value
                      is 0 if <code>key</code> is not available,                    
                </param>
                <param>
                    l the <code>Locale</code> for which the int is desired                    
                </param>
                <param>
                    defaultValue Returned value if <code>key</code> is not available,
                      or is not an Integer                    
                </param>
                <return>
                    the int                    
                </return>
            </javadoc>
            <method name="getUIDefaultsInt" type="int" line="1137">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                    <param name="defaultValue" type="int"/>
                </params>
                <declaration name="value" type="Object" line="1138"/>
                <scope line="1139"/>
                <scope line="1142">
                    <scope line="1143"/>
                    <scope line="1146"/>
                </scope>
            </method>
            <method name="compositeRequestFocus" type="Component" line="1151">
                <params>
                    <param name="component" type="Component"/>
                </params>
                <scope line="1152">
                    <declaration name="container" type="Container" line="1153"/>
                    <scope line="1154">
                        <declaration name="policy" type="FocusTraversalPolicy" line="1155"/>
                        <declaration name="comp" type="Component" line="1156"/>
                        <scope line="1157"/>
                    </scope>
                    <declaration name="rootAncestor" type="Container" line="1162"/>
                    <scope line="1163">
                        <declaration name="policy" type="FocusTraversalPolicy" line="1164"/>
                        <declaration name="comp" type="Component" line="1165"/>
                        <scope line="1166"/>
                    </scope>
                </scope>
                <scope line="1172"/>
            </method>
            <javadoc line="1178">
                Change focus to the visible component in {@code JTabbedPane}.
                  This is not a general-purpose method and is here only to permit
                  sharing code.                
            </javadoc>
            <method name="tabbedPaneChangeFocusTo" type="boolean" line="1183">
                <params>
                    <param name="comp" type="Component"/>
                </params>
                <scope line="1184">
                    <scope line="1185"/>
                    <scope line="1189"/>
                </scope>
            </method>
            <javadoc line="1195">
                Submits a value-returning task for execution on the EDT and
                  returns a Future representing the pending results of the task.                
                <param>
                    task the task to submit                    
                </param>
                <return>
                    a Future representing pending completion of the task                    
                </return>
                <throws>
                    NullPointerException if the task is null                    
                </throws>
            </javadoc>
            <method name="submit" type="Future<V>" line="1202">
                <params>
                    <param name="task" type="Callable<V>"/>
                </params>
                <scope line="1203"/>
                <declaration name="future" type="FutureTask&lt;V&gt;" line="1206"/>
            </method>
            <javadoc line="1210">
                Submits a Runnable task for execution on the EDT and returns a
                  Future representing that task.                
                <param>
                    task the task to submit                    
                </param>
                <param>
                    result the result to return upon successful completion                    
                </param>
                <return>
                    a Future representing pending completion of the task,
                      and whose <tt>get()</tt> method will return the given
                      result value upon completion                    
                </return>
                <throws>
                    NullPointerException if the task is null                    
                </throws>
            </javadoc>
            <method name="submit" type="Future<V>" line="1220">
                <params>
                    <param name="task" type="Runnable"/>
                    <param name="result" type="V"/>
                </params>
                <scope line="1221"/>
                <declaration name="future" type="FutureTask&lt;V&gt;" line="1224"/>
            </method>
            <javadoc line="1228">
                Sends a Runnable to the EDT for the execution.                
            </javadoc>
            <method name="execute" type="void" line="1231">
                <params>
                    <param name="command" type="Runnable"/>
                </params>
            </method>
            <javadoc line="1234">
                Sets the {@code SKIP_CLICK_COUNT} client property on the component
                  if it is an instance of {@code JTextComponent} with a{@code DefaultCaret}. This property, used for text components acting
                  as editors in a table or tree, tells {@code DefaultCaret} how many
                  clicks to skip before starting selection.                
            </javadoc>
            <method name="setSkipClickCount" type="void" line="1240">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="count" type="int"/>
                </params>
                <scope line="1241"/>
            </method>
            <javadoc line="1245">
                Return the MouseEvent&apos;s click count, possibly reduced by the value of
                  the component&apos;s {@code SKIP_CLICK_COUNT} client property. Clears
                  the {@code SKIP_CLICK_COUNT} property if the mouse event&apos;s click count
                  is 1. In order for clearing of the property to work correctly, there
                  must be a mousePressed implementation on the caller with this
                  call as the first line.                
            </javadoc>
            <method name="getAdjustedClickCount" type="int" line="1253">
                <params>
                    <param name="comp" type="JTextComponent"/>
                    <param name="e" type="MouseEvent"/>
                </params>
                <declaration name="cc" type="int" line="1254"/>
                <scope line="1255"/>
                <scope line="1258">
                    <declaration name="sub" type="Integer" line="1259"/>
                    <scope line="1260"/>
                </scope>
            </method>
            <declaration name="Section" type="enum" line="1266"/>
            <javadoc line="1266">
                Used by the {@code liesIn} method to return which section
                  the point lies in.                
                <see>
                    #liesIn                    
                </see>
            </javadoc>
            <scope line="1271"/>
            <javadoc line="1281">
                This method divides a rectangle into two or three sections along
                  the specified axis and determines which section the given point
                  lies in on that axis; used by drag and drop when calculating drop
                  locations.
                  &lt;p&gt;
                  For two sections, the rectangle is divided equally and the method
                  returns whether the point lies in {@code Section.LEADING} or{@code Section.TRAILING}. For horizontal divisions, the calculation
                  respects component orientation.
                  &lt;p&gt;
                  For three sections, if the rectangle is greater than or equal to
                  30 pixels in length along the axis, the calculation gives 10 pixels
                  to each of the leading and trailing sections and the remainder to the
                  middle. For smaller sizes, the rectangle is divided equally into three
                  sections.
                  &lt;p&gt;
                  Note: This method assumes that the point is within the bounds of
                  the given rectangle on the specified axis. However, in cases where
                  it isn&apos;t, the results still have meaning: {@code Section.MIDDLE}remains the same, {@code Section.LEADING} indicates that the point
                  is in or somewhere before the leading section, and{@code Section.TRAILING} indicates that the point is in or somewhere
                  after the trailing section.                
                <param>
                    rect the rectangle                    
                </param>
                <param>
                    p the point the check                    
                </param>
                <param>
                    horizontal {@code true} to use the horizontal axis,
                      or {@code false} for the vertical axis                    
                </param>
                <param>
                    ltr {@code true} for left to right orientation,
                      or {@code false} for right to left orientation;
                      only used for horizontal calculations                    
                </param>
                <param>
                    three {@code true} for three sections,
                      or {@code false} for two                    
                </param>
                <return>
                    the {@code Section} where the point lies                    
                </return>
                <throws>
                    NullPointerException if {@code rect} or {@code p} are{@code null}                    
                </throws>
            </javadoc>
            <method name="liesIn" type="Section" line="1314">
                <params>
                    <param name="rect" type="Rectangle"/>
                    <param name="p" type="Point"/>
                    <param name="horizontal" type="boolean"/>
                    <param name="ltr" type="boolean"/>
                    <param name="three" type="boolean"/>
                </params>
                <declaration name="p0" type="int" line="1315"/>
                <declaration name="pComp" type="int" line="1316"/>
                <declaration name="length" type="int" line="1317"/>
                <declaration name="forward" type="boolean" line="1318"/>
                <scope line="1319"/>
                <scope line="1325"/>
                <scope line="1331">
                    <declaration name="boundary" type="int" line="1332"/>
                    <scope line="1333"/>
                    <scope line="1336"/>
                </scope>
                <scope line="1341">
                    <declaration name="middle" type="int" line="1342"/>
                    <scope line="1343"/>
                    <scope line="1346"/>
                </scope>
            </method>
            <javadoc line="1351">
                This method divides a rectangle into two or three sections along
                  the horizontal axis and determines which section the given point
                  lies in; used by drag and drop when calculating drop locations.
                  &lt;p&gt;
                  See the documentation for {@link #liesIn} for more information
                  on how the section is calculated.                
                <param>
                    rect the rectangle                    
                </param>
                <param>
                    p the point the check                    
                </param>
                <param>
                    ltr {@code true} for left to right orientation,
                      or {@code false} for right to left orientation                    
                </param>
                <param>
                    three {@code true} for three sections,
                      or {@code false} for two                    
                </param>
                <return>
                    the {@code Section} where the point lies                    
                </return>
                <throws>
                    NullPointerException if {@code rect} or {@code p} are{@code null}                    
                </throws>
            </javadoc>
            <method name="liesInHorizontal" type="Section" line="1367">
                <params>
                    <param name="rect" type="Rectangle"/>
                    <param name="p" type="Point"/>
                    <param name="ltr" type="boolean"/>
                    <param name="three" type="boolean"/>
                </params>
            </method>
            <javadoc line="1370">
                This method divides a rectangle into two or three sections along
                  the vertical axis and determines which section the given point
                  lies in; used by drag and drop when calculating drop locations.
                  &lt;p&gt;
                  See the documentation for {@link #liesIn} for more information
                  on how the section is calculated.                
                <param>
                    rect the rectangle                    
                </param>
                <param>
                    p the point the check                    
                </param>
                <param>
                    three {@code true} for three sections,
                      or {@code false} for two                    
                </param>
                <return>
                    the {@code Section} where the point lies                    
                </return>
                <throws>
                    NullPointerException if {@code rect} or {@code p} are{@code null}                    
                </throws>
            </javadoc>
            <method name="liesInVertical" type="Section" line="1384">
                <params>
                    <param name="rect" type="Rectangle"/>
                    <param name="p" type="Point"/>
                    <param name="three" type="boolean"/>
                </params>
            </method>
            <javadoc line="1387">
                Maps the index of the column in the view at{@code viewColumnIndex} to the index of the column
                  in the table model.  Returns the index of the corresponding
                  column in the model.  If {@code viewColumnIndex}is less than zero, returns {@code viewColumnIndex}.                
                <param>
                    cm the table model                    
                </param>
                <param>
                    viewColumnIndex     the index of the column in the view                    
                </param>
                <return>
                    the index of the corresponding column in the model                    
                </return>
                <see>
                    JTable#convertColumnIndexToModel(int)                    
                </see>
                <see>
                    javax.swing.plaf.basic.BasicTableHeaderUI                    
                </see>
            </javadoc>
            <method name="convertColumnIndexToModel" type="int" line="1397">
                <params>
                    <param name="cm" type="TableColumnModel"/>
                    <param name="viewColumnIndex" type="int"/>
                </params>
                <scope line="1398"/>
            </method>
            <javadoc line="1403">
                Maps the index of the column in the {@code cm} at{@code modelColumnIndex} to the index of the column
                  in the view.  Returns the index of the
                  corresponding column in the view; returns {@code -1} if this column
                  is not being displayed. If {@code modelColumnIndex} is less than zero,
                  returns {@code modelColumnIndex}.                
                <param>
                    cm the table model                    
                </param>
                <param>
                    modelColumnIndex the index of the column in the model                    
                </param>
                <return>
                    the index of the corresponding column in the view                    
                </return>
                <see>
                    JTable#convertColumnIndexToView(int)                    
                </see>
                <see>
                    javax.swing.plaf.basic.BasicTableHeaderUI                    
                </see>
            </javadoc>
            <method name="convertColumnIndexToView" type="int" line="1415">
                <params>
                    <param name="cm" type="TableColumnModel"/>
                    <param name="modelColumnIndex" type="int"/>
                </params>
                <scope line="1416"/>
                <scope line="1419">
                    <scope line="1420"/>
                </scope>
            </method>
        </class>
    </source>