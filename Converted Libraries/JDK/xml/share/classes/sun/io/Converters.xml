<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.io">
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.util.Properties"/>
        <class name="Converters" line="5">
            <javadoc line="5">
                Package-private utility class that caches the default converter classes and
                  provides other logic common to both the ByteToCharConverter and
                  CharToByteConverter classes.                
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    1.2                    
                </since>
                <deprecated>
                    Replaced by {@link java.nio.charset}.  THIS API WILL BE
                      REMOVED IN J2SE 1.6.                    
                </deprecated>
            </javadoc>
            <method name="Converters" type="constructor" line="15"/>
            <declaration name="lock" type="Object" line="17"/>
            <declaration name="converterPackageName" type="String" line="18"/>
            <declaration name="defaultEncoding" type="String" line="19"/>
            <declaration name="BYTE_TO_CHAR" type="int" line="20"/>
            <declaration name="CHAR_TO_BYTE" type="int" line="21"/>
            <declaration name="converterPrefix" type="String[]" line="22"/>
            <declaration name="CACHE_SIZE" type="int" line="23"/>
            <declaration name="DEFAULT_NAME" type="Object" line="24"/>
            <declaration name="classCache" type="SoftReference&amp;lt;Object[]&amp;gt;[][]" line="25"/>
            <method name="moveToFront" type="void" line="26">
                <params>
                    <param name="oa" type="Object[]"/>
                    <param name="i" type="int"/>
                </params>
                <declaration name="ob" type="Object" line="27"/>
            </method>
            <method name="cache" type="Class&lt;?&gt;" line="31">
                <params>
                    <param name="type" type="int"/>
                    <param name="encoding" type="Object"/>
                </params>
                <declaration name="srs" type="SoftReference&amp;lt;Object[]&amp;gt;[]" line="32"/>
                <scope line="33">
                    <declaration name="sr" type="SoftReference&amp;lt;Object[]&amp;gt;" line="34"/>
                    <declaration name="oa" type="Object[]" line="36"/>
                    <scope line="37"/>
                    <scope line="41"/>
                </scope>
            </method>
            <method name="cache" type="Class&lt;?&gt;" line="48">
                <params>
                    <param name="type" type="int"/>
                    <param name="encoding" type="Object"/>
                    <param name="c" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="srs" type="SoftReference&amp;lt;Object[]&amp;gt;[]" line="49"/>
            </method>
            <method name="isCached" type="boolean" line="54">
                <params>
                    <param name="type" type="int"/>
                    <param name="encoding" type="String"/>
                </params>
                <scope line="55">
                    <declaration name="srs" type="SoftReference&amp;lt;Object[]&amp;gt;[]" line="56"/>
                    <scope line="57">
                        <declaration name="sr" type="SoftReference&amp;lt;Object[]&amp;gt;" line="58"/>
                        <declaration name="oa" type="Object[]" line="60"/>
                        <scope line="61"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="70">
                Get the name of the converter package                
            </javadoc>
            <method name="getConverterPackageName" type="String" line="73">
                <declaration name="cp" type="String" line="74"/>
                <declaration name="pa" type="java.security.PrivilegedAction&amp;lt;String&amp;gt;" line="76"/>
                <scope line="78"/>
                <scope line="81"/>
            </method>
            <method name="getDefaultEncodingName" type="String" line="86">
                <scope line="87">
                    <scope line="88">
                        <declaration name="pa" type="java.security.PrivilegedAction&amp;lt;String&amp;gt;" line="89"/>
                    </scope>
                </scope>
            </method>
            <method name="resetDefaultEncodingName" type="void" line="95">
                <scope line="97">
                    <declaration name="p" type="Properties" line="99"/>
                </scope>
            </method>
            <javadoc line="104">
                Get the class that implements the given type of converter for the named
                  encoding, or throw an UnsupportedEncodingException if no such class can
                  be found                
            </javadoc>
            <method name="getConverterClass" type="Class&lt;?&gt;" line="109">
                <params>
                    <param name="type" type="int"/>
                    <param name="encoding" type="String"/>
                </params>
                <declaration name="enc" type="String" line="110"/>
                <scope line="111">
                    <scope line="112"/>
                    <scope line="115"/>
                    <scope line="118"/>
                    <scope line="121"/>
                </scope>
                <scope line="125"/>
                <scope line="128"/>
                <scope line="131"/>
            </method>
            <javadoc line="135">
                Instantiate the given converter class, or throw an
                  UnsupportedEncodingException if it cannot be instantiated                
            </javadoc>
            <method name="newConverter" type="Object" line="139">
                <params>
                    <param name="enc" type="String"/>
                    <param name="c" type="Class&lt;?&gt;"/>
                </params>
                <scope line="140"/>
                <scope line="143"/>
                <scope line="146"/>
            </method>
            <javadoc line="150">
                Create a converter object that implements the given type of converter
                  for the given encoding, or throw an UnsupportedEncodingException if no
                  appropriate converter class can be found and instantiated                
            </javadoc>
            <method name="newConverter" type="Object" line="155">
                <params>
                    <param name="type" type="int"/>
                    <param name="enc" type="String"/>
                </params>
                <declaration name="c" type="Class&amp;lt;?&amp;gt;" line="156"/>
                <scope line="157">
                    <scope line="159"/>
                </scope>
            </method>
            <javadoc line="166">
                Find the class that implements the given type of converter for the
                  default encoding.  If the default encoding cannot be determined or is
                  not yet defined, return a class that implements the fallback default
                  encoding, which is just ISO 8859-1.                
            </javadoc>
            <method name="getDefaultConverterClass" type="Class&lt;?&gt;" line="172">
                <params>
                    <param name="type" type="int"/>
                </params>
                <declaration name="fillCache" type="boolean" line="173"/>
                <declaration name="c" type="Class&amp;lt;?&amp;gt;" line="174"/>
                <declaration name="enc" type="String" line="177"/>
                <scope line="178"/>
                <scope line="181"/>
                <scope line="184">
                    <scope line="186"/>
                </scope>
                <scope line="190">
                    <scope line="191"/>
                    <scope line="194"/>
                </scope>
            </method>
            <javadoc line="200">
                Create a converter object that implements the given type of converter
                  for the default encoding, falling back to ISO 8859-1 if the default
                  encoding cannot be determined.                
            </javadoc>
            <method name="newDefaultConverter" type="Object" line="205">
                <params>
                    <param name="type" type="int"/>
                </params>
                <declaration name="c" type="Class&amp;lt;?&amp;gt;" line="206"/>
                <scope line="207"/>
                <scope line="210"/>
                <scope line="213"/>
            </method>
        </class>
    </source>