<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.io">
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.util.Properties"/>
        <class name="Converters" line="32">
            <comment line="47">
                                
            </comment>
            <comment line="49">
                                
            </comment>
            <comment line="52">
                                
            </comment>
            <comment line="53">
                                
            </comment>
            <comment line="54">
                                
            </comment>
            <comment line="56">
                                
            </comment>
            <comment line="63">
                -- Converter class cache --                
            </comment>
            <comment line="67">
                                
            </comment>
            <comment line="70">
                Cached converter classes, CACHE_SIZE per converter type.  Each cache
                 entry is a soft reference to a two-object array; the first element of
                 the array is the converter class, the second is an object (typically a
                 string) representing the encoding name that was used to request the
                 converter, e.g.,
                
                     ((Object[])classCache[CHAR_TO_BYTE][i].get())[0]
                
                 will be a CharToByteConverter and
                
                     ((Object[])classCache[CHAR_TO_BYTE][i].get())[1]
                
                 will be the string encoding name used to request it, assuming that cache
                 entry i is valid.
                
                 Ordinarily we&apos;d do this with a private static utility class, but since
                 this code can be involved in the startup sequence it&apos;s important to keep
                 the footprint down.                
            </comment>
            <comment line="129">
                Used to avoid doing expensive charset lookups for charsets that are not
                 yet directly supported by NIO.                
            </comment>
            <javadoc line="32">
                Package-private utility class that caches the default converter classes and
                  provides other logic common to both the ByteToCharConverter and
                  CharToByteConverter classes.                
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    1.2                    
                </since>
                <deprecated>
                    Replaced by {@link java.nio.charset}.  THIS API WILL BE
                      REMOVED IN J2SE 1.6.                    
                </deprecated>
            </javadoc>
            <method name="Converters" type="constructor" line="46"/>
            <declaration name="lock" type="Object" line="49"/>
            <declaration name="converterPackageName" type="String" line="52"/>
            <declaration name="defaultEncoding" type="String" line="53"/>
            <declaration name="BYTE_TO_CHAR" type="int" line="56"/>
            <declaration name="CHAR_TO_BYTE" type="int" line="57"/>
            <declaration name="converterPrefix" type="String[]" line="58"/>
            <declaration name="CACHE_SIZE" type="int" line="64"/>
            <declaration name="DEFAULT_NAME" type="Object" line="67"/>
            <declaration name="classCache" type="SoftReference&lt;Object[]&gt;[][]" line="88"/>
            <method name="moveToFront" type="void" line="95">
                <params>
                    <param name="oa" type="Object[]"/>
                    <param name="i" type="int"/>
                </params>
                <declaration name="ob" type="Object" line="96"/>
            </method>
            <method name="cache" type="Class<?>" line="102">
                <params>
                    <param name="type" type="int"/>
                    <param name="encoding" type="Object"/>
                </params>
                <declaration name="srs" type="SoftReference&lt;Object[]&gt;[]" line="103"/>
                <scope line="104">
                    <declaration name="sr" type="SoftReference&lt;Object[]&gt;" line="105"/>
                    <declaration name="oa" type="Object[]" line="108"/>
                    <scope line="109"/>
                    <scope line="113"/>
                </scope>
            </method>
            <method name="cache" type="Class<?>" line="121">
                <params>
                    <param name="type" type="int"/>
                    <param name="encoding" type="Object"/>
                    <param name="c" type="Class<?>"/>
                </params>
                <declaration name="srs" type="SoftReference&lt;Object[]&gt;[]" line="122"/>
            </method>
            <method name="isCached" type="boolean" line="131">
                <params>
                    <param name="type" type="int"/>
                    <param name="encoding" type="String"/>
                </params>
                <scope line="132">
                    <declaration name="srs" type="SoftReference&lt;Object[]&gt;[]" line="133"/>
                    <scope line="134">
                        <declaration name="sr" type="SoftReference&lt;Object[]&gt;" line="135"/>
                        <declaration name="oa" type="Object[]" line="138"/>
                        <scope line="139"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="152">
                Get the name of the converter package                
            </javadoc>
            <method name="getConverterPackageName" type="String" line="153">
                <comment line="160">
                                        
                </comment>
                <comment line="163">
                                        
                </comment>
                <declaration name="cp" type="String" line="154"/>
                <declaration name="pa" type="java.security.PrivilegedAction&lt;String&gt;" line="156"/>
                <scope line="159"/>
                <scope line="162"/>
            </method>
            <method name="getDefaultEncodingName" type="String" line="169">
                <scope line="170">
                    <scope line="171">
                        <declaration name="pa" type="java.security.PrivilegedAction&lt;String&gt;" line="172"/>
                    </scope>
                </scope>
            </method>
            <method name="resetDefaultEncodingName" type="void" line="180">
                <comment line="181">
                    This method should only be called during VM initialization.                    
                </comment>
                <scope line="185">
                    <declaration name="p" type="Properties" line="187"/>
                </scope>
            </method>
            <javadoc line="193">
                Get the class that implements the given type of converter for the named
                  encoding, or throw an UnsupportedEncodingException if no such class can
                  be found                
            </javadoc>
            <method name="getConverterClass" type="Class<?>" line="200">
                <params>
                    <param name="type" type="int"/>
                    <param name="encoding" type="String"/>
                </params>
                <comment line="203">
                    &quot;ISO8859_1&quot; is the canonical name for the ISO-Latin-1 encoding.
                    Native code in the JDK commonly uses the alias &quot;8859_1&quot; instead of
                    &quot;ISO8859_1&quot;.  We hardwire this alias here in order to avoid loading                    
                </comment>
                <comment line="210">
                    On Solaris with nl_langinfo() called in GetJavaProperties():
                    
                       locale undefined -&gt; NULL -&gt; hardcoded default
                       &quot;C&quot; locale       -&gt; &quot;&quot; -&gt; hardcoded default    (on 2.6)
                       &quot;C&quot; locale       -&gt; &quot;646&quot;                      (on 2.7)
                       &quot;en_US&quot; locale -&gt; &quot;ISO8859-1&quot;
                       &quot;en_GB&quot; locale -&gt; &quot;ISO8859-1&quot;                  (on 2.7)
                       &quot;en_UK&quot; locale -&gt; &quot;ISO8859-1&quot;                  (on 2.6)                    
                </comment>
                <declaration name="enc" type="String" line="201"/>
                <scope line="207">
                    <scope line="208"/>
                    <scope line="220"/>
                    <scope line="222"/>
                    <scope line="224"/>
                </scope>
                <scope line="228"/>
                <scope line="232"/>
                <scope line="235"/>
            </method>
            <javadoc line="241">
                Instantiate the given converter class, or throw an
                  UnsupportedEncodingException if it cannot be instantiated                
            </javadoc>
            <method name="newConverter" type="Object" line="247">
                <params>
                    <param name="enc" type="String"/>
                    <param name="c" type="Class<?>"/>
                </params>
                <scope line="248"/>
                <scope line="250"/>
                <scope line="252"/>
            </method>
            <javadoc line="257">
                Create a converter object that implements the given type of converter
                  for the given encoding, or throw an UnsupportedEncodingException if no
                  appropriate converter class can be found and instantiated                
            </javadoc>
            <method name="newConverter" type="Object" line="264">
                <params>
                    <param name="type" type="int"/>
                    <param name="enc" type="String"/>
                </params>
                <declaration name="c" type="Class&lt;?&gt;" line="265"/>
                <scope line="266">
                    <scope line="268"/>
                </scope>
            </method>
            <javadoc line="277">
                Find the class that implements the given type of converter for the
                  default encoding.  If the default encoding cannot be determined or is
                  not yet defined, return a class that implements the fallback default
                  encoding, which is just ISO 8859-1.                
            </javadoc>
            <method name="getDefaultConverterClass" type="Class<?>" line="283">
                <params>
                    <param name="type" type="int"/>
                </params>
                <comment line="287">
                                        
                </comment>
                <comment line="292">
                                        
                </comment>
                <comment line="295">
                                        
                </comment>
                <comment line="298">
                    file.encoding has not been set, so use a default encoding which                    
                </comment>
                <comment line="303">
                                        
                </comment>
                <comment line="310">
                                        
                </comment>
                <declaration name="fillCache" type="boolean" line="284"/>
                <declaration name="c" type="Class&lt;?&gt;" line="285"/>
                <declaration name="enc" type="String" line="293"/>
                <scope line="294"/>
                <scope line="297"/>
                <scope line="304">
                    <scope line="306"/>
                </scope>
                <scope line="309">
                    <scope line="311"/>
                    <scope line="313"/>
                </scope>
            </method>
            <javadoc line="323">
                Create a converter object that implements the given type of converter
                  for the default encoding, falling back to ISO 8859-1 if the default
                  encoding cannot be determined.                
            </javadoc>
            <method name="newDefaultConverter" type="Object" line="328">
                <params>
                    <param name="type" type="int"/>
                </params>
                <declaration name="c" type="Class&lt;?&gt;" line="329"/>
                <scope line="330"/>
                <scope line="333"/>
                <scope line="335"/>
            </method>
        </class>
    </source>