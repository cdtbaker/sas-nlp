<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.io">
        <import package="java.io"/>
        <class name="CharToByteConverter" line="31">
            <comment line="130">
                Converts any array of characters, including malformed surrogate
                 pairs, into an array of bytes in the target character encoding.
                 A precondition is that substitution mode is turned on. This method
                 allows a buffer by buffer conversion of a data stream.
                 The state of the conversion is saved between calls to convert.
                 All conversions should be finished with a call to the flushAny method.
                
                 @return the number of bytes written to output.
                 @param input array containing Unicode characters to be converted.
                 @param inStart begin conversion at this offset in input array.
                 @param inEnd stop conversion at this offset in input array (exclusive).
                 @param output byte array to receive conversion result.
                 @param outStart start writing to output array at this offset.
                 @param outEnd stop writing to output array at this offset (exclusive).
                 @exception ConversionBufferFullException if output array is filled prior
                 to converting all the input.                
            </comment>
            <javadoc line="31">
                An abstract base class for subclasses which convert Unicode
                  characters into an external encoding.                
                <author>
                    Asmus Freytag                    
                </author>
                <author>
                    Lloyd Honomichl, Novell, Inc.                    
                </author>
                <deprecated>
                    Replaced by {@link java.nio.charset}.  THIS API WILL BE
                      REMOVED IN J2SE 1.6.                    
                </deprecated>
            </javadoc>
            <declaration name="subMode" type="boolean" line="44"/>
            <javadoc line="44">
                Substitution mode flag.                
            </javadoc>
            <declaration name="subBytes" type="byte[]" line="49"/>
            <javadoc line="49">
                Bytes to substitute for unmappable input.                
            </javadoc>
            <declaration name="charOff" type="int" line="54"/>
            <javadoc line="54">
                Offset of next character to be converted.                
            </javadoc>
            <declaration name="byteOff" type="int" line="59"/>
            <javadoc line="59">
                Offset of next byte to be output.                
            </javadoc>
            <declaration name="badInputLength" type="int" line="64"/>
            <javadoc line="64">
                Length of bad input that caused conversion to stop.                
            </javadoc>
            <javadoc line="69">
                Create an instance of the default CharToByteConverter subclass.                
            </javadoc>
            <method name="getDefault" type="CharToByteConverter" line="72">
                <declaration name="cvt" type="Object" line="73"/>
            </method>
            <javadoc line="78">
                Returns appropriate CharToByteConverter subclass instance.                
                <param>
                    string represets encoding                    
                </param>
            </javadoc>
            <method name="getConverter" type="CharToByteConverter" line="84">
                <params>
                    <param name="encoding" type="String"/>
                </params>
                <declaration name="cvt" type="Object" line="85"/>
            </method>
            <method name="getCharacterEncoding" type="String" line="90"/>
            <javadoc line="90">
                Returns the character set id for the conversion.                
            </javadoc>
            <method name="convert" type="int" line="95"/>
            <javadoc line="95">
                Converts an array of Unicode characters into an array of bytes
                  in the target character encoding.  This method allows a buffer by
                  buffer conversion of a data stream.  The state of the conversion is
                  saved between calls to convert.  If a call to convert results in
                  an exception, the conversion may be continued by calling convert again
                  with suitably modified parameters.  All conversions should be finished
                  with a call to the flush method.                
                <return>
                    the number of bytes written to output.                    
                </return>
                <param>
                    input array containing Unicode characters to be converted.                    
                </param>
                <param>
                    inStart begin conversion at this offset in input array.                    
                </param>
                <param>
                    inEnd stop conversion at this offset in input array (exclusive).                    
                </param>
                <param>
                    output byte array to receive conversion result.                    
                </param>
                <param>
                    outStart start writing to output array at this offset.                    
                </param>
                <param>
                    outEnd stop writing to output array at this offset (exclusive).                    
                </param>
                <exception>
                    MalformedInputException if the input buffer contains any
                      sequence of chars that is illegal in Unicode (principally unpaired
                      surrogates and \uFFFF or \uFFFE). After this exception is thrown,
                      the method nextCharIndex can be called to obtain the index of the
                      first invalid input character.  The MalformedInputException can
                      be queried for the length of the invalid input.                    
                </exception>
                <exception>
                    UnknownCharacterException for any character that
                      that cannot be converted to the external character encoding. Thrown
                      only when converter is not in substitution mode.                    
                </exception>
                <exception>
                    ConversionBufferFullException if output array is filled prior
                      to converting all the input.                    
                </exception>
            </javadoc>
            <method name="convertAny" type="int" line="150">
                <params>
                    <param name="input" type="char[]"/>
                    <param name="inStart" type="int"/>
                    <param name="inEnd" type="int"/>
                    <param name="output" type="byte[]"/>
                    <param name="outStart" type="int"/>
                    <param name="outEnd" type="int"/>
                </params>
                <comment line="152">
                                        
                </comment>
                <comment line="155">
                                        
                </comment>
                <comment line="156">
                    For safety, use the public interface to charOff and byteOff, but                    
                </comment>
                <comment line="182">
                                        
                </comment>
                <scope line="151"/>
                <declaration name="localInOff" type="int" line="157"/>
                <declaration name="localOutOff" type="int" line="158"/>
                <scope line="159">
                    <scope line="160">
                        <declaration name="discard" type="int" line="161"/>
                    </scope>
                    <scope line="164">
                        <declaration name="s" type="byte[]" line="165"/>
                        <declaration name="subSize" type="int" line="166"/>
                        <scope line="175"/>
                    </scope>
                    <scope line="180"/>
                </scope>
            </method>
            <javadoc line="192">
                Converts an array of Unicode characters into an array of bytes
                  in the target character encoding.  Unlike convert, this method
                  does not do incremental conversion.  It assumes that the given
                  input array contains all the characters to be converted. The
                  state of the converter is reset at the beginning of this method
                  and is left in the reset state on successful termination.
                  The converter is not reset if an exception is thrown.
                  This allows the caller to determine where the bad input
                  was encountered by calling nextCharIndex.
                  &lt;p&gt;
                  This method uses substitution mode when performing the conversion.
                  The method setSubstitutionBytes may be used to determine what
                  bytes are substituted.  Even though substitution mode is used,
                  the state of the converter&apos;s substitution mode is not changed
                  at the end of this method.                
                <return>
                    an array of bytes containing the converted characters.                    
                </return>
                <param>
                    input array containing Unicode characters to be converted.                    
                </param>
                <exception>
                    MalformedInputException if the input buffer contains any
                      sequence of chars that is illegal in Unicode (principally unpaired
                      surrogates and \uFFFF or \uFFFE). After this exception is thrown,
                      the method nextCharIndex can be called to obtain the index of the
                      first invalid input character and getBadInputLength can be called
                      to determine the length of the invalid input.                    
                </exception>
                <see>
                    #nextCharIndex                    
                </see>
                <see>
                    #setSubstitutionMode                    
                </see>
                <see>
                    #setSubstitutionBytes                    
                </see>
                <see>
                    #getBadInputLength                    
                </see>
            </javadoc>
            <method name="convertAll" type="byte[]" line="223">
                <params>
                    <param name="input" type="char"/>
                </params>
                <comment line="241">
                    Not supposed to happen.  If it does, getMaxBytesPerChar() lied.                    
                </comment>
                <comment line="246">
                    Not supposed to happen since we&apos;re in substitution mode.                    
                </comment>
                <declaration name="savedSubMode" type="boolean" line="225"/>
                <declaration name="output" type="byte[]" line="228"/>
                <scope line="230">
                    <declaration name="outputLength" type="int" line="231"/>
                    <declaration name="returnedOutput" type="byte[]" line="235"/>
                </scope>
                <scope line="239"/>
                <scope line="244"/>
                <scope line="248"/>
            </method>
            <method name="flush" type="int" line="253"/>
            <javadoc line="253">
                Writes any remaining output to the output buffer and resets the
                  converter to its initial state.                
                <param>
                    output byte array to receive flushed output.                    
                </param>
                <param>
                    outStart start writing to output array at this offset.                    
                </param>
                <param>
                    outEnd stop writing to output array at this offset (exclusive).                    
                </param>
                <exception>
                    MalformedInputException if the output to be flushed contained
                      a partial or invalid multibyte character sequence.  Will occur if the
                      input buffer on the last call to convert ended with the first character
                      of a surrogate pair. flush will write what it can to the output buffer
                      and reset the converter before throwing this exception.  An additional
                      call to flush is not required.                    
                </exception>
                <exception>
                    ConversionBufferFullException if output array is filled
                      before all the output can be flushed. flush will write what it can
                      to the output buffer and remember its state.  An additional call to
                      flush with a new output buffer will conclude the operation.                    
                </exception>
            </javadoc>
            <javadoc line="274">
                Writes any remaining output to the output buffer and resets the
                  converter to its initial state. May only be called when substitution
                  mode is turned on, and never complains about malformed input (always
                  substitutes).                
                <param>
                    output byte array to receive flushed output.                    
                </param>
                <param>
                    outStart start writing to output array at this offset.                    
                </param>
                <param>
                    outEnd stop writing to output array at this offset (exclusive).                    
                </param>
                <return>
                    number of bytes writter into output.                    
                </return>
                <exception>
                    ConversionBufferFullException if output array is filled
                      before all the output can be flushed. flush will write what it can
                      to the output buffer and remember its state.  An additional call to
                      flush with a new output buffer will conclude the operation.                    
                </exception>
            </javadoc>
            <method name="flushAny" type="int" line="291">
                <params>
                    <param name="output" type="byte[]"/>
                    <param name="outStart" type="int"/>
                    <param name="outEnd" type="int"/>
                </params>
                <comment line="293">
                                        
                </comment>
                <comment line="299">
                    Assume that if a malformed input exception has occurred,
                    no useful data has been placed in the output buffer.
                    i.e. there is no mixture of left over good + some bad data.
                    Usually occurs with a trailing high surrogate pair element.
                    Special cases occur in Cp970, 949c and 933 that seem                    
                </comment>
                <comment line="312">
                    Reset the internal state.                    
                </comment>
                <scope line="292"/>
                <scope line="295"/>
                <scope line="297">
                    <declaration name="subSize" type="int" line="304"/>
                    <declaration name="s" type="byte[]" line="305"/>
                    <declaration name="outIndex" type="int" line="306"/>
                </scope>
            </method>
            <method name="reset" type="void" line="317"/>
            <javadoc line="317">
                Resets converter to its initial state.                
            </javadoc>
            <javadoc line="322">
                Returns true if the given character can be converted to the
                  target character encoding.                
                <return>
                    true if given character is translatable, false otherwise.                    
                </return>
                <param>
                    c character to test                    
                </param>
            </javadoc>
            <method name="canConvert" type="boolean" line="328">
                <params>
                    <param name="c" type="char"/>
                </params>
                <comment line="331">
                    FIXME output buffer size should use getMaxBytesPerChar value.                    
                </comment>
                <scope line="329">
                    <declaration name="input" type="char[]" line="331"/>
                    <declaration name="output" type="byte[]" line="332"/>
                </scope>
                <scope line="336"/>
            </method>
            <method name="getMaxBytesPerChar" type="int" line="341"/>
            <javadoc line="341">
                Returns the maximum number of bytes needed to convert a char. Useful
                  for calculating the maximum output buffer size needed for a particular
                  input buffer.                
            </javadoc>
            <javadoc line="348">
                Returns the length, in chars, of the input which caused a
                  MalformedInputException.  Always refers to the last
                  MalformedInputException thrown by the converter.  If none have
                  ever been thrown, returns 0.                
            </javadoc>
            <method name="getBadInputLength" type="int" line="354"/>
            <javadoc line="358">
                Returns the index of the character just past
                  the last character successfully converted by the previous call
                  to convert.                
            </javadoc>
            <method name="nextCharIndex" type="int" line="363"/>
            <javadoc line="367">
                Returns the index of the byte just past the last byte written by
                  the previous call to convert.                
            </javadoc>
            <method name="nextByteIndex" type="int" line="371"/>
            <javadoc line="375">
                Sets converter into substitution mode.  In substitution mode,
                  the converter will replace untranslatable characters in the source
                  encoding with the substitution character set by setSubstitutionBytes.
                  When not in substitution mode, the converter will throw an
                  UnknownCharacterException when it encounters untranslatable input.                
                <param>
                    doSub if true, enable substitution mode.                    
                </param>
                <see>
                    #setSubstitutionBytes                    
                </see>
            </javadoc>
            <method name="setSubstitutionMode" type="void" line="385">
                <params>
                    <param name="doSub" type="boolean"/>
                </params>
            </method>
            <javadoc line="389">
                Sets the substitution bytes to use when the converter is in
                  substitution mode.  The given bytes should represent a valid
                  character in the target character encoding and must not be
                  longer than the value returned by getMaxBytesPerChar for this
                  converter.                
                <param>
                    newSubBytes the substitution bytes                    
                </param>
                <exception>
                    IllegalArgumentException if given byte array is longer than
                      the value returned by the method getMaxBytesPerChar.                    
                </exception>
                <see>
                    #setSubstitutionMode                    
                </see>
                <see>
                    #getMaxBytesPerChar                    
                </see>
            </javadoc>
            <method name="setSubstitutionBytes" type="void" line="404">
                <params>
                    <param name="newSubBytes" type="byte[]"/>
                </params>
                <scope line="405"/>
            </method>
            <javadoc line="413">
                Returns a string representation of the class.                
            </javadoc>
            <method name="toString" type="String" line="416"/>
        </class>
    </source>