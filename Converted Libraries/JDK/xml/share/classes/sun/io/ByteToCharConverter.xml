<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.io">
        <import package="java.io"/>
        <class name="ByteToCharConverter" line="31">
            <comment line="45">
                Substitution mode flag.                
            </comment>
            <comment line="50">
                Characters to use for automatic substitution.                
            </comment>
            <comment line="55">
                Offset of next character to be output                
            </comment>
            <comment line="60">
                Offset of next byte to be converted                
            </comment>
            <comment line="65">
                Length of bad input that caused a MalformedInputException.                
            </comment>
            <comment line="262">
                Sets the substitution characters to use when the converter is in
                 substitution mode.  The given chars must not be
                 longer than the value returned by getMaxCharsPerByte for this
                 converter.
                
                 @param newSubBytes the substitution bytes
                 @exception IllegalArgumentException if given byte array is longer than
                    the value returned by the method getMaxBytesPerChar.
                 @see #setSubstitutionMode
                 @see #getMaxBytesPerChar                
            </comment>
            <javadoc line="31">
                An abstract base class for subclasses which convert character data
                  in an external encoding into Unicode characters.                
                <author>
                    Asmus Freytag                    
                </author>
                <author>
                    Lloyd Honomichl                    
                </author>
                <deprecated>
                    Replaced by {@link java.nio.charset}.  THIS API WILL BE
                      REMOVED IN J2SE 1.6.                    
                </deprecated>
            </javadoc>
            <declaration name="subMode" type="boolean" line="47"/>
            <declaration name="subChars" type="char[]" line="52"/>
            <declaration name="charOff" type="int" line="57"/>
            <declaration name="byteOff" type="int" line="62"/>
            <declaration name="badInputLength" type="int" line="67"/>
            <javadoc line="69">
                Create an instance of the default ByteToCharConverter subclass.                
            </javadoc>
            <method name="getDefault" type="ByteToCharConverter" line="72">
                <declaration name="cvt" type="Object" line="73"/>
            </method>
            <javadoc line="78">
                Returns appropriate ByteToCharConverter subclass instance.                
                <param>
                    string represents encoding                    
                </param>
            </javadoc>
            <method name="getConverter" type="ByteToCharConverter" line="84">
                <params>
                    <param name="encoding" type="String"/>
                </params>
                <declaration name="cvt" type="Object" line="85"/>
            </method>
            <method name="getCharacterEncoding" type="String" line="90"/>
            <javadoc line="90">
                Returns the character set id for the conversion                
            </javadoc>
            <method name="convert" type="int" line="95"/>
            <javadoc line="95">
                Converts an array of bytes containing characters in an external
                  encoding into an array of Unicode characters.  This  method allows
                  a buffer by buffer conversion of a data stream.  The state of the
                  conversion is saved between calls to convert.  Among other things,
                  this means multibyte input sequences can be split between calls.
                  If a call to convert results in an exception, the conversion may be
                  continued by calling convert again with suitably modified parameters.
                  All conversions should be finished with a call to the flush method.                
                <return>
                    the number of bytes written to output.                    
                </return>
                <param>
                    input byte array containing text to be converted.                    
                </param>
                <param>
                    inStart begin conversion at this offset in input array.                    
                </param>
                <param>
                    inEnd stop conversion at this offset in input array (exclusive).                    
                </param>
                <param>
                    output character array to receive conversion result.                    
                </param>
                <param>
                    outStart start writing to output array at this offset.                    
                </param>
                <param>
                    outEnd stop writing to output array at this offset (exclusive).                    
                </param>
                <exception>
                    MalformedInputException if the input buffer contains any
                      sequence of bytes that is illegal for the input character set.                    
                </exception>
                <exception>
                    UnknownCharacterException for any character that
                      that cannot be converted to Unicode. Thrown only when converter
                      is not in substitution mode.                    
                </exception>
                <exception>
                    ConversionBufferFullException if output array is filled prior
                      to converting all the input.                    
                </exception>
            </javadoc>
            <javadoc line="126">
                Converts an array of bytes containing characters in an external
                  encoding into an array of Unicode characters.  Unlike convert,
                  this method does not do incremental conversion.  It assumes that
                  the given input array contains all the characters to be
                  converted. The state of the converter is reset at the beginning
                  of this method and is left in the reset state on successful
                  termination.  The converter is not reset if an exception is
                  thrown.  This allows the caller to determine where the bad input
                  was encountered by calling nextByteIndex.
                  &lt;p&gt;
                  This method uses substitution mode when performing the
                  conversion.  The method setSubstitutionChars may be used to
                  determine what characters are substituted.  Even though substitution
                  mode is used, the state of the converter&apos;s substitution mode is
                  not changed at the end of this method.                
                <return>
                    an array of chars containing the converted characters.                    
                </return>
                <param>
                    input array containing Unicode characters to be converted.                    
                </param>
                <exception>
                    MalformedInputException if the input buffer contains any
                      sequence of chars that is illegal in the input character encoding.
                      After this exception is thrown,
                      the method nextByteIndex can be called to obtain the index of the
                      first invalid input byte and getBadInputLength can be called
                      to determine the length of the invalid input.                    
                </exception>
                <see>
                    #nextByteIndex                    
                </see>
                <see>
                    #setSubstitutionMode                    
                </see>
                <see>
                    sun.io.CharToByteConverter#setSubstitutionBytes(byte[])                    
                </see>
                <see>
                    #getBadInputLength                    
                </see>
            </javadoc>
            <method name="convertAll" type="char[]" line="157">
                <params>
                    <param name="input" type="byte"/>
                </params>
                <comment line="174">
                    Not supposed to happen.  If it does, getMaxCharsPerByte() lied.                    
                </comment>
                <comment line="179">
                    Not supposed to happen since we&apos;re in substitution mode.                    
                </comment>
                <declaration name="savedSubMode" type="boolean" line="159"/>
                <declaration name="output" type="char[]" line="162"/>
                <scope line="164">
                    <declaration name="outputLength" type="int" line="165"/>
                    <declaration name="returnedOutput" type="char[]" line="169"/>
                </scope>
                <scope line="173"/>
                <scope line="178"/>
                <scope line="182"/>
            </method>
            <method name="flush" type="int" line="187"/>
            <javadoc line="187">
                Writes any remaining output to the output buffer and resets the
                  converter to its initial state.                
                <param>
                    output char array to receive flushed output.                    
                </param>
                <param>
                    outStart start writing to output array at this offset.                    
                </param>
                <param>
                    outEnd stop writing to output array at this offset (exclusive).                    
                </param>
                <exception>
                    MalformedInputException if the output to be flushed contained
                      a partial or invalid multibyte character sequence.  flush will
                      write what it can to the output buffer and reset the converter before
                      throwing this exception.  An additional call to flush is not required.                    
                </exception>
                <exception>
                    ConversionBufferFullException if output array is filled
                      before all the output can be flushed. flush will write what it can
                      to the output buffer and remember its state.  An additional call to
                      flush with a new output buffer will conclude the operation.                    
                </exception>
            </javadoc>
            <method name="reset" type="void" line="206"/>
            <javadoc line="206">
                Resets converter to its initial state.                
            </javadoc>
            <javadoc line="211">
                Returns the maximum number of characters needed to convert a byte. Useful
                  for calculating the maximum output buffer size needed for a particular
                  input buffer.                
            </javadoc>
            <method name="getMaxCharsPerByte" type="int" line="216">
                <comment line="217">
                    Until UTF-16, this will do for every encoding                    
                </comment>
            </method>
            <javadoc line="221">
                Returns the length, in bytes, of the input which caused a
                  MalformedInputException.  Always refers to the last
                  MalformedInputException thrown by the converter.  If none have
                  ever been thrown, returns 0.                
            </javadoc>
            <method name="getBadInputLength" type="int" line="227"/>
            <javadoc line="231">
                Returns the index of the  character just past the last character
                  written by the previous call to convert.                
            </javadoc>
            <method name="nextCharIndex" type="int" line="235"/>
            <javadoc line="239">
                Returns the index of the byte just past the last byte successfully
                  converted by the previous call to convert.                
            </javadoc>
            <method name="nextByteIndex" type="int" line="243"/>
            <javadoc line="247">
                Sets converter into substitution mode.  In substitution mode,
                  the converter will replace untranslatable characters in the source
                  encoding with the substitution character set by setSubstitionChars.
                  When not in substitution mode, the converter will throw an
                  UnknownCharacterException when it encounters untranslatable input.                
                <param>
                    doSub if true, enable substitution mode.                    
                </param>
                <see>
                    #setSubstitutionChars                    
                </see>
            </javadoc>
            <method name="setSubstitutionMode" type="void" line="257">
                <params>
                    <param name="doSub" type="boolean"/>
                </params>
            </method>
            <javadoc line="273">
                sets the substitution character to use                
                <param>
                    c the substitution character                    
                </param>
            </javadoc>
            <method name="setSubstitutionChars" type="void" line="279">
                <params>
                    <param name="c" type="char[]"/>
                </params>
                <scope line="280"/>
            </method>
            <javadoc line="288">
                returns a string representation of the character conversion                
            </javadoc>
            <method name="toString" type="String" line="291"/>
        </class>
    </source>