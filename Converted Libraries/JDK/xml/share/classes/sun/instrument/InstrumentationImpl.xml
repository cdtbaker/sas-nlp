<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.instrument">
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.AccessibleObject"/>
        <import package="java.lang.instrument.ClassFileTransformer"/>
        <import package="java.lang.instrument.ClassDefinition"/>
        <import package="java.lang.instrument.Instrumentation"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.ProtectionDomain"/>
        <import package="java.util.jar.JarFile"/>
        <class name="InstrumentationImpl" line="46">
            <comment line="57">
                needs to store a native pointer, so use 64 bits                
            </comment>
            <comment line="240">
                Natives                
            </comment>
            <comment line="278">
                Internals                
            </comment>
            <comment line="283">
                Enable or disable Java programming language access checks on a                
            </comment>
            <comment line="284">
                reflected object (for example, a method)                
            </comment>
            <comment line="293">
                Attempt to load and start an agent                
            </comment>
            <comment line="392">
                WARNING: the native code knows the name &amp; signature of this method                
            </comment>
            <comment line="402">
                WARNING: the native code knows the name &amp; signature of this method                
            </comment>
            <comment line="411">
                WARNING: the native code knows the name &amp; signature of this method                
            </comment>
            <implements interface="Instrumentation"/>
            <javadoc line="46">
                The Java side of the JPLIS implementation. Works in concert with a native JVMTI agent
                  to implement the JPLIS API set. Provides both the Java API implementation of
                  the Instrumentation interface and utility Java routines to support the native code.
                  Keeps a pointer to the native data structure in a scalar field to allow native
                  processing behind native methods.                
            </javadoc>
            <declaration name="mTransformerManager" type="TransformerManager" line="54"/>
            <declaration name="mRetransfomableTransformerManager" type="TransformerManager" line="55"/>
            <declaration name="mNativeAgent" type="long" line="57"/>
            <declaration name="mEnvironmentSupportsRedefineClasses" type="boolean" line="58"/>
            <declaration name="mEnvironmentSupportsRetransformClassesKnown" type="boolean" line="59"/>
            <declaration name="mEnvironmentSupportsRetransformClasses" type="boolean" line="60"/>
            <declaration name="mEnvironmentSupportsNativeMethodPrefix" type="boolean" line="61"/>
            <method name="InstrumentationImpl" type="constructor" line="66">
                <params>
                    <param name="nativeAgent" type="long"/>
                    <param name="environmentSupportsRedefineClasses" type="boolean"/>
                    <param name="environmentSupportsNativeMethodPrefix" type="boolean"/>
                </params>
                <comment line="71">
                    false = need to ask                    
                </comment>
                <comment line="72">
                    don&apos;t know yet                    
                </comment>
            </method>
            <method name="addTransformer" type="void" line="77">
                <params>
                    <param name="transformer" type="ClassFileTransformer"/>
                </params>
            </method>
            <method name="addTransformer" type="void" line="82">
                <params>
                    <param name="transformer" type="ClassFileTransformer"/>
                    <param name="canRetransform" type="boolean"/>
                </params>
                <scope line="83"/>
                <scope line="86">
                    <scope line="87"/>
                    <scope line="91"/>
                    <scope line="95"/>
                </scope>
                <scope line="98"/>
            </method>
            <method name="removeTransformer" type="boolean" line="104">
                <params>
                    <param name="transformer" type="ClassFileTransformer"/>
                </params>
                <scope line="105"/>
                <declaration name="mgr" type="TransformerManager" line="108"/>
                <scope line="109">
                    <scope line="111"/>
                </scope>
            </method>
            <method name="isModifiableClass" type="boolean" line="120">
                <params>
                    <param name="theClass" type="Class<?>"/>
                </params>
                <scope line="121"/>
            </method>
            <method name="isRetransformClassesSupported" type="boolean" line="129">
                <comment line="130">
                    ask lazily since there is some overhead                    
                </comment>
                <scope line="131"/>
            </method>
            <method name="retransformClasses" type="void" line="139">
                <params>
                    <param name="classes" type="Class<?>[]"/>
                </params>
                <scope line="140"/>
            </method>
            <method name="isRedefineClassesSupported" type="boolean" line="148"/>
            <method name="redefineClasses" type="void" line="154">
                <params>
                    <param name="definitions" type="ClassDefinition[]"/>
                </params>
                <comment line="167">
                    short-circuit if there are no changes requested                    
                </comment>
                <scope line="155"/>
                <scope line="158"/>
                <scope line="161">
                    <scope line="162"/>
                </scope>
                <scope line="166"/>
            </method>
            <method name="getAllLoadedClasses" type="Class[]" line="174"/>
            <method name="getInitiatedClasses" type="Class[]" line="179">
                <params>
                    <param name="loader" type="ClassLoader"/>
                </params>
            </method>
            <method name="getObjectSize" type="long" line="184">
                <params>
                    <param name="objectToSize" type="Object"/>
                </params>
                <scope line="185"/>
            </method>
            <method name="appendToBootstrapClassLoaderSearch" type="void" line="192">
                <params>
                    <param name="jarfile" type="JarFile"/>
                </params>
            </method>
            <method name="appendToSystemClassLoaderSearch" type="void" line="197">
                <params>
                    <param name="jarfile" type="JarFile"/>
                </params>
            </method>
            <method name="isNativeMethodPrefixSupported" type="boolean" line="202"/>
            <method name="setNativeMethodPrefix" type="void" line="207">
                <params>
                    <param name="transformer" type="ClassFileTransformer"/>
                    <param name="prefix" type="String"/>
                </params>
                <scope line="208"/>
                <scope line="212"/>
                <declaration name="mgr" type="TransformerManager" line="216"/>
                <scope line="217"/>
                <declaration name="prefixes" type="String[]" line="222"/>
            </method>
            <method name="findTransformerManager" type="TransformerManager" line="227">
                <params>
                    <param name="transformer" type="ClassFileTransformer"/>
                </params>
                <scope line="228"/>
                <scope line="232"/>
            </method>
            <method name="isModifiableClass0" type="boolean" line="242"/>
            <method name="isRetransformClassesSupported0" type="boolean" line="245"/>
            <method name="setHasRetransformableTransformers" type="void" line="248"/>
            <method name="retransformClasses0" type="void" line="251"/>
            <method name="redefineClasses0" type="void" line="254"/>
            <method name="getAllLoadedClasses0" type="Class[]" line="258"/>
            <method name="getInitiatedClasses0" type="Class[]" line="261"/>
            <method name="getObjectSize0" type="long" line="264"/>
            <method name="appendToClassLoaderSearch0" type="void" line="267"/>
            <method name="setNativeMethodPrefixes" type="void" line="270"/>
            <scope line="273"/>
            <method name="setAccessible" type="void" line="284">
                <params>
                    <param name="ao" type="AccessibleObject"/>
                    <param name="accessible" type="boolean"/>
                </params>
                <anonymous_class line="285">
                    <method name="run" type="Object" line="286"/>
                </anonymous_class>
            </method>
            <method name="loadClassAndStartAgent" type="void" line="297">
                <params>
                    <param name="classname" type="String"/>
                    <param name="methodname" type="String"/>
                    <param name="optionsString" type="String"/>
                </params>
                <comment line="306">
                    The agent class must have a premain or agentmain method that                    
                </comment>
                <comment line="307">
                    has 1 or 2 arguments. We check in the following order:                    
                </comment>
                <comment line="308">
                                        
                </comment>
                <comment line="309">
                    1) declared with a signature of (String, Instrumentation)                    
                </comment>
                <comment line="310">
                    2) declared with a signature of (String)                    
                </comment>
                <comment line="311">
                    3) inherited with a signature of (String, Instrumentation)                    
                </comment>
                <comment line="312">
                    4) inherited with a signature of (String)                    
                </comment>
                <comment line="313">
                                        
                </comment>
                <comment line="314">
                    So the declared version of either 1-arg or 2-arg always takes                    
                </comment>
                <comment line="315">
                    primary precedence over an inherited version. After that, the                    
                </comment>
                <comment line="316">
                    2-arg version takes precedence over the 1-arg version.                    
                </comment>
                <comment line="317">
                                        
                </comment>
                <comment line="318">
                    If no method is found then we throw the NoSuchMethodException                    
                </comment>
                <comment line="319">
                    from the first attempt so that the exception text indicates                    
                </comment>
                <comment line="320">
                    the lookup failed for the 2-arg method (same as JDK5.0).                    
                </comment>
                <comment line="331">
                    remember the NoSuchMethodException                    
                </comment>
                <comment line="336">
                    now try the declared 1-arg method                    
                </comment>
                <comment line="341">
                    ignore this exception because we&apos;ll try                    
                </comment>
                <comment line="342">
                    two arg inheritance next                    
                </comment>
                <comment line="347">
                    now try the inherited 2-arg method                    
                </comment>
                <comment line="357">
                    ignore this exception because we&apos;ll try                    
                </comment>
                <comment line="358">
                    one arg inheritance next                    
                </comment>
                <comment line="363">
                    finally try the inherited 1-arg method                    
                </comment>
                <comment line="368">
                    none of the methods exists so we throw the                    
                </comment>
                <comment line="369">
                    first NoSuchMethodException as per 5.0                    
                </comment>
                <comment line="374">
                    the premain method should not be required to be public,                    
                </comment>
                <comment line="375">
                    make it accessible so we can call it                    
                </comment>
                <comment line="376">
                    Note: The spec says the following:                    
                </comment>
                <comment line="377">
                    The agent class must implement a public static premain method...                    
                </comment>
                <comment line="380">
                    invoke the 1 or 2-arg method                    
                </comment>
                <comment line="387">
                    don&apos;t let others access a non-public premain method                    
                </comment>
                <declaration name="mainAppLoader" type="ClassLoader" line="299"/>
                <declaration name="javaAgentClass" type="Class&lt;?&gt;" line="300"/>
                <declaration name="m" type="Method" line="302"/>
                <declaration name="firstExc" type="NoSuchMethodException" line="303"/>
                <declaration name="twoArgAgent" type="boolean" line="304"/>
                <scope line="322"/>
                <scope line="330"/>
                <scope line="335">
                    <scope line="337"/>
                    <scope line="340"/>
                </scope>
                <scope line="346">
                    <scope line="348"/>
                    <scope line="356"/>
                </scope>
                <scope line="362">
                    <scope line="364"/>
                    <scope line="367"/>
                </scope>
                <scope line="381"/>
                <scope line="383"/>
            </method>
            <method name="loadClassAndCallPremain" type="void" line="395">
                <params>
                    <param name="classname" type="String"/>
                    <param name="optionsString" type="String"/>
                </params>
            </method>
            <method name="loadClassAndCallAgentmain" type="void" line="405">
                <params>
                    <param name="classname" type="String"/>
                    <param name="optionsString" type="String"/>
                </params>
            </method>
            <method name="transform" type="byte[]" line="417">
                <params>
                    <param name="loader" type="ClassLoader"/>
                    <param name="classname" type="String"/>
                    <param name="classBeingRedefined" type="Class"/>
                    <param name="protectionDomain" type="ProtectionDomain"/>
                    <param name="classfileBuffer" type="byte[]"/>
                    <param name="isRetransformer" type="boolean"/>
                </params>
                <comment line="422">
                    no manager, no transform                    
                </comment>
                <declaration name="mgr" type="TransformerManager" line="418"/>
                <scope line="421"/>
                <scope line="423"/>
            </method>
        </class>
    </source>