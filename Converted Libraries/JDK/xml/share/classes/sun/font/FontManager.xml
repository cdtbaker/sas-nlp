<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <import package="java.awt.Font"/>
        <import package="java.awt.FontFormatException"/>
        <import package="java.io.File"/>
        <import package="java.util.Locale"/>
        <import package="java.util.TreeMap"/>
        <import package="javax.swing.plaf.FontUIResource"/>
        <interface name="FontManager">
            <javadoc line="8">
                Interface between Java Fonts (java.awt.Font) and the underlying
                  font files/native font resources and the Java and native font scalers.                
            </javadoc>
            <declaration name="NO_FALLBACK" type="int" line="13"/>
            <declaration name="PHYSICAL_FALLBACK" type="int" line="14"/>
            <declaration name="LOGICAL_FALLBACK" type="int" line="15"/>
            <method name="registerFont" type="boolean" line="16"/>
            <javadoc line="16">
                Register a new font. Please, note that {@code null} is not a valid
                  argument, and it&apos;s caller&apos;s responsibility to ensure that, but to keep
                  compatibility, if {@code null} is passed as an argument, {@code false}is returned, and no {@link NullPointerException}is thrown.
                  As additional note, an implementation should ensure that this font
                  cannot override existing installed fonts.                
                <param>
                    font                    
                </param>
                <return>
                    {@code true} is the font is successfully registered,{@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="deRegisterBadFont" type="void" line="26"/>
            <method name="findFont2D" type="Font2D" line="27"/>
            <javadoc line="27">
                The client supplies a name and a style.
                  The name could be a family name, or a full name.
                  A font may exist with the specified style, or it may
                  exist only in some other style. For non-native fonts the scaler
                  may be able to emulate the required style.                
            </javadoc>
            <method name="createFont2D" type="Font2D" line="35"/>
            <javadoc line="35">
                Creates a Font2D for the specified font file, that is expected
                  to be in the specified font format (according to the constants
                  in java.awt.Font). The parameter {@code isCopy} is set to true
                  when the specified font file is actually a copy of the font data
                  and needs to be deleted afterwards. This method is called
                  for the Font.createFont() methods.                
                <param>
                    fontFile the file holding the font data                    
                </param>
                <param>
                    fontFormat the expected font format                    
                </param>
                <param>
                    isCopy {@code true} if the file is a copy and needs to be
                      deleted, {@code false} otherwise                    
                </param>
                <return>
                    the created Font2D instance                    
                </return>
            </javadoc>
            <method name="usingPerAppContextComposites" type="boolean" line="49"/>
            <javadoc line="49">
                If usingPerAppContextComposites is true, we are in &quot;applet&quot;
                  (eg browser) enviroment and at least one context has selected
                  an alternate composite font behaviour.                
            </javadoc>
            <method name="getNewComposite" type="Font2DHandle" line="55"/>
            <javadoc line="55">
                Creates a derived composite font from the specified font (handle).                
                <param>
                    family the font family of the derived font                    
                </param>
                <param>
                    style the font style of the derived font                    
                </param>
                <param>
                    handle the original font (handle)                    
                </param>
                <return>
                    the handle for the derived font                    
                </return>
            </javadoc>
            <method name="preferLocaleFonts" type="void" line="63"/>
            <javadoc line="63">
                Indicates a preference for locale-specific fonts in the mapping of
                  logical fonts to physical fonts. Calling this method indicates that font
                  rendering should primarily use fonts specific to the primary writing
                  system (the one indicated by the default encoding and the initial
                  default locale). For example, if the primary writing system is
                  Japanese, then characters should be rendered using a Japanese font
                  if possible, and other fonts should only be used for characters for
                  which the Japanese font doesn&apos;t have glyphs.
                  &lt;p&gt;
                  The actual change in font rendering behavior resulting from a call
                  to this method is implementation dependent; it may have no effect at
                  all, or the requested behavior may already match the default behavior.
                  The behavior may differ between font rendering in lightweight
                  and peered components.  Since calling this method requests a
                  different font, clients should expect different metrics, and may need
                  to recalculate window sizes and layout. Therefore this method should
                  be called before user interface initialisation.                
                <see>
                    #preferProportionalFonts()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="preferProportionalFonts" type="void" line="85"/>
            <javadoc line="85">
                preferLocaleFonts() and preferProportionalFonts() are called to inform
                  that the application could be using an alternate set of composite
                  fonts, and so the implementation should try to create a CompositeFonts
                  with this directive in mind.                
                <see>
                    #preferLocaleFonts()                    
                </see>
            </javadoc>
        </interface>
    </source>