<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <import package="java.awt.Font"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="sun.awt.SunHints"/>
        <class name="FontStrikeDesc" line="41">
            <comment line="44">
                Values to use as a mask that is used for faster comparison of
                 two strikes using just an int equality test.
                 The ones we don&apos;t use are listed here but commented out.
                 ie style is already built and hint &quot;OFF&quot; values are zero.
                 Note that this is used as a strike key and the same strike is used
                 for HRGB and HBGR, so only the orientation needed (H or V) is needed
                 to construct and distinguish a FontStrikeDesc. The rgb ordering
                 needed for rendering is stored in the graphics state.                
            </comment>
            <comment line="53">
                static final int STYLE_PLAIN       = Font.PLAIN;            // 0x0000                
            </comment>
            <comment line="54">
                static final int STYLE_BOLD        = Font.BOLD;             // 0x0001                
            </comment>
            <comment line="55">
                static final int STYLE_ITALIC      = Font.ITALIC;           // 0x0002                
            </comment>
            <comment line="56">
                static final int STYLE_BOLDITALIC  = Font.BOLD|Font.ITALIC; // 0x0003                
            </comment>
            <comment line="57">
                static final int AA_OFF            = 0x0000;                
            </comment>
            <comment line="61">
                static final int FRAC_METRICS_OFF  = 0x0000;                
            </comment>
            <comment line="65">
                devTx is to get an inverse transform to get user space values
                 for metrics. Its not used otherwise, as the glyphTx is the important
                 one. But it does mean that a strike representing a 6pt font and identity
                 graphics transform is not equal to one for a 12 pt font and 2x scaled
                 graphics transform. Its likely to be very rare that this causes
                 duplication.                
            </comment>
            <comment line="73">
                all of ptSize, Font tx and Graphics tx.                
            </comment>
            <comment line="107">
                This maps a public text AA hint value into one of the subset of values
                 used to index strikes. For the purpose of the strike cache there are
                 only 4 values : OFF, ON, LCD_HRGB, LCD_VRGB.
                 Font and ptSize are needed to resolve the &apos;gasp&apos; table. The ptSize
                 must therefore include device and font transforms.                
            </comment>
            <comment line="136">
                This maps a public text AA hint value into one of the subset of values
                 used to index strikes. For the purpose of the strike cache there are
                 only 4 values : OFF, ON, LCD_HRGB, LCD_VRGB.
                 Font and FontRenderContext are needed to resolve the &apos;gasp&apos; table.
                 This is similar to the method above, but used by callers which have not
                 already calculated the glyph device point size.                
            </comment>
            <declaration name="AA_ON" type="int" line="57"/>
            <declaration name="AA_LCD_H" type="int" line="58"/>
            <declaration name="AA_LCD_V" type="int" line="59"/>
            <declaration name="FRAC_METRICS_ON" type="int" line="61"/>
            <declaration name="FRAC_METRICS_SP" type="int" line="62"/>
            <declaration name="devTx" type="AffineTransform" line="71"/>
            <declaration name="glyphTx" type="AffineTransform" line="72"/>
            <declaration name="style" type="int" line="73"/>
            <declaration name="aaHint" type="int" line="74"/>
            <declaration name="fmHint" type="int" line="75"/>
            <declaration name="hashCode" type="int" line="76"/>
            <declaration name="valuemask" type="int" line="77"/>
            <method name="hashCode" type="int" line="79">
                <comment line="80">
                                        
                </comment>
                <scope line="81"/>
            </method>
            <method name="equals" type="boolean" line="87">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="94">
                    class cast or NP exceptions should not happen often, if ever,
                     and I am hoping that this is faster than an instanceof check.                    
                </comment>
                <scope line="88">
                    <declaration name="desc" type="FontStrikeDesc" line="89"/>
                </scope>
                <scope line="93"/>
            </method>
            <method name="FontStrikeDesc" type="constructor" line="101">
                <comment line="102">
                    used with init                    
                </comment>
            </method>
            <method name="getAAHintIntVal" type="int" line="112">
                <params>
                    <param name="aa" type="Object"/>
                    <param name="font2D" type="Font2D"/>
                    <param name="ptSize" type="int"/>
                </params>
                <scope line="114"/>
                <scope line="116"/>
                <scope line="118">
                    <scope line="119"/>
                    <scope line="121"/>
                </scope>
                <scope line="125"/>
                <scope line="128"/>
                <scope line="130"/>
            </method>
            <method name="getAAHintIntVal" type="int" line="143">
                <params>
                    <param name="font2D" type="Font2D"/>
                    <param name="font" type="Font"/>
                    <param name="frc" type="FontRenderContext"/>
                </params>
                <comment line="151">
                                        
                </comment>
                <comment line="157">
                                        
                </comment>
                <declaration name="aa" type="Object" line="144"/>
                <scope line="146"/>
                <scope line="148"/>
                <scope line="150">
                    <declaration name="ptSize" type="int" line="152"/>
                    <declaration name="tx" type="AffineTransform" line="153"/>
                    <scope line="154"/>
                    <scope line="156">
                        <declaration name="size" type="float" line="158"/>
                        <scope line="159"/>
                        <scope line="162">
                            <scope line="164"/>
                        </scope>
                        <declaration name="shearx" type="double" line="168"/>
                        <declaration name="scaley" type="double" line="169"/>
                        <scope line="170"/>
                    </scope>
                    <scope line="175"/>
                    <scope line="177"/>
                </scope>
                <scope line="181"/>
                <scope line="184"/>
                <scope line="186"/>
            </method>
            <method name="getFMHintIntVal" type="int" line="191">
                <params>
                    <param name="fm" type="Object"/>
                </params>
                <scope line="193"/>
                <scope line="195"/>
            </method>
            <method name="FontStrikeDesc" type="constructor" line="201">
                <params>
                    <param name="devAt" type="AffineTransform"/>
                    <param name="at" type="AffineTransform"/>
                    <param name="fStyle" type="int"/>
                    <param name="aa" type="int"/>
                    <param name="fm" type="int"/>
                </params>
                <comment line="203">
                    not cloning glyphTx. Callers trusted to not mutate it.                    
                </comment>
                <scope line="224"/>
            </method>
            <method name="FontStrikeDesc" type="constructor" line="229">
                <params>
                    <param name="desc" type="FontStrikeDesc"/>
                </params>
                <comment line="231">
                    Clone the TX in this case as this is called when its known                    
                </comment>
                <comment line="232">
                    that &quot;desc&quot; is being re-used by its creator.                    
                </comment>
            </method>
            <method name="toString" type="String" line="242"/>
        </class>
    </source>