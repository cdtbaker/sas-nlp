<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <class name="ScriptRun" line="2">
            <javadoc line="2">
                &lt;code&gt;ScriptRun&lt;/code&gt; is used to find runs of characters in
                  the same script, as defined in the &lt;code&gt;Script&lt;/code&gt; class.
                  It implements a simple iterator over an array of characters.
                  The iterator will assign &lt;code&gt;COMMON&lt;/code&gt; and &lt;code&gt;INHERITED&lt;/code&gt;
                  characters to the same script as the preceeding characters. If the
                  COMMON and INHERITED characters are first, they will be assigned to
                  the same script as the following characters.
                  The iterator will try to match paired punctuation. If it sees an
                  opening punctuation character, it will remember the script that
                  was assigned to that character, and assign the same script to the
                  matching closing punctuation.
                  No attempt is made to combine related scripts into a single run. In
                  particular, Hiragana, Katakana, and Han characters will appear in seperate
                  runs.
                  Here is an example of how to iterate over script runs:
                  &lt;pre&gt;
                  void printScriptRuns(char[] text)
                  {
                  ScriptRun scriptRun = new ScriptRun(text, 0, text.length);
                  while (scriptRun.next()) {
                  int start  = scriptRun.getScriptStart();
                  int limit  = scriptRun.getScriptLimit();
                  int script = scriptRun.getScriptCode();
                  System.out.println(&quot;Script \&quot;&quot; + Script.getName(script) + &quot;\&quot; from &quot; +
                  start + &quot; to &quot; + limit + &quot;.&quot;);
                  }
                  }
                  &lt;/pre&gt;                
            </javadoc>
            <declaration name="text" type="char[]" line="33"/>
            <declaration name="textStart" type="int" line="34"/>
            <declaration name="textLimit" type="int" line="35"/>
            <declaration name="scriptStart" type="int" line="36"/>
            <declaration name="scriptLimit" type="int" line="37"/>
            <declaration name="scriptCode" type="int" line="38"/>
            <declaration name="stack" type="int" line="39"/>
            <declaration name="parenSP" type="int" line="40"/>
            <method name="ScriptRun" type="constructor" line="41"/>
            <javadoc line="43">
                Construct a &lt;code&gt;ScriptRun&lt;/code&gt; object which iterates over a subrange
                  of the given characetrs.                
                <param>
                    chars the array of characters over which to iterate.                    
                </param>
                <param>
                    start the index of the first character over which to iterate                    
                </param>
                <param>
                    count the number of characters over which to iterate                    
                </param>
            </javadoc>
            <method name="ScriptRun" type="constructor" line="50">
                <params>
                    <param name="chars" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                </params>
            </method>
            <method name="init" type="void" line="53">
                <params>
                    <param name="chars" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <scope line="54"/>
            </method>
            <javadoc line="65">
                Get the starting index of the current script run.                
                <return>
                    the index of the first character in the current script run.                    
                </return>
            </javadoc>
            <method name="getScriptStart" type="int" line="69"/>
            <javadoc line="72">
                Get the index of the first character after the current script run.                
                <return>
                    the index of the first character after the current script run.                    
                </return>
            </javadoc>
            <method name="getScriptLimit" type="int" line="76"/>
            <javadoc line="79">
                Get the script code for the script of the current script run.                
                <return>
                    the script code for the script of the current script run.                    
                </return>
                <see>
                    #Script                    
                </see>
            </javadoc>
            <method name="getScriptCode" type="int" line="84"/>
            <javadoc line="87">
                Find the next script run. Returns &lt;code&gt;false&lt;/code&gt; if there
                  isn&apos;t another run, returns &lt;code&gt;true&lt;/code&gt; if there is.                
                <return>
                    &lt;code&gt;false&lt;/code&gt; if there isn&apos;t another run, &lt;code&gt;true&lt;/code&gt; if there is.                    
                </return>
            </javadoc>
            <method name="next" type="boolean" line="92">
                <declaration name="startSP" type="int" line="93"/>
                <scope line="94"/>
                <declaration name="ch" type="int" line="99"/>
                <scope line="100">
                    <declaration name="sc" type="int" line="101"/>
                    <declaration name="pairIndex" type="int" line="102"/>
                    <scope line="103">
                        <scope line="104">
                            <scope line="105"/>
                            <scope line="108">
                                <declaration name="newstack" type="int[]" line="109"/>
                            </scope>
                        </scope>
                        <scope line="116">
                            <declaration name="pi" type="int" line="117"/>
                            <scope line="119"/>
                            <scope line="122"/>
                            <scope line="125"/>
                        </scope>
                    </scope>
                    <scope line="130">
                        <scope line="131">
                            <scope line="133"/>
                        </scope>
                        <scope line="138"/>
                    </scope>
                    <scope line="142"/>
                </scope>
            </method>
            <declaration name="SURROGATE_START" type="int" line="149"/>
            <declaration name="LEAD_START" type="int" line="150"/>
            <declaration name="LEAD_LIMIT" type="int" line="151"/>
            <declaration name="TAIL_START" type="int" line="152"/>
            <declaration name="TAIL_LIMIT" type="int" line="153"/>
            <declaration name="LEAD_SURROGATE_SHIFT" type="int" line="154"/>
            <declaration name="SURROGATE_OFFSET" type="int" line="155"/>
            <declaration name="DONE" type="int" line="156"/>
            <method name="nextCodePoint" type="int" line="157">
                <scope line="158"/>
                <declaration name="ch" type="int" line="161"/>
                <scope line="162">
                    <declaration name="nch" type="int" line="163"/>
                    <scope line="164"/>
                </scope>
            </method>
            <method name="pushback" type="void" line="171">
                <params>
                    <param name="ch" type="int"/>
                </params>
                <scope line="172">
                    <scope line="173"/>
                    <scope line="176"/>
                </scope>
            </method>
            <javadoc line="181">
                Compare two script codes to see if they are in the same script. If one script is
                  a strong script, and the other is INHERITED or COMMON, it will compare equal.                
                <param>
                    scriptOne one of the script codes.                    
                </param>
                <param>
                    scriptTwo the other script code.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the two scripts are the same.                    
                </return>
                <see>
                    com.ibm.icu.lang.Script                    
                </see>
            </javadoc>
            <method name="sameScript" type="boolean" line="189">
                <params>
                    <param name="scriptOne" type="int"/>
                    <param name="scriptTwo" type="int"/>
                </params>
            </method>
            <javadoc line="192">
                Find the highest bit that&apos;s set in a word. Uses a binary search through
                  the bits.                
                <param>
                    n the word in which to find the highest bit that&apos;s set.                    
                </param>
                <return>
                    the bit number (counting from the low order bit) of the highest bit.                    
                </return>
            </javadoc>
            <method name="highBit" type="byte" line="198">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="199"/>
                <declaration name="bit" type="byte" line="202"/>
                <scope line="203"/>
                <scope line="207"/>
                <scope line="211"/>
                <scope line="215"/>
                <scope line="219"/>
            </method>
            <javadoc line="225">
                Search the pairedChars array for the given character.                
                <param>
                    ch the character for which to search.                    
                </param>
                <return>
                    the index of the character in the table, or -1 if it&apos;s not there.                    
                </return>
            </javadoc>
            <method name="getPairIndex" type="int" line="230">
                <params>
                    <param name="ch" type="int"/>
                </params>
                <declaration name="probe" type="int" line="231"/>
                <declaration name="index" type="int" line="232"/>
                <scope line="233"/>
                <scope line="236">
                    <scope line="238"/>
                </scope>
                <scope line="242"/>
            </method>
            <declaration name="pairedChars" type="int" line="247"/>
            <declaration name="pairedCharPower" type="int" line="248"/>
            <declaration name="pairedCharExtra" type="int" line="249"/>
        </class>
    </source>