<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <import package="java.awt.Font"/>
        <import package="java.awt.font.GlyphJustificationInfo"/>
        <import package="java.awt.font.LineMetrics"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <class name="ExtendedTextLabel" line="40">
            <extends class="TextLabel"/>
            <implements interface="TextLineComponent"/>
            <javadoc line="40">
                An extension of TextLabel that maintains information
                  about characters.                
            </javadoc>
            <method name="getNumCharacters" type="int" line="47"/>
            <javadoc line="47">
                Return the number of characters represented by this label.                
            </javadoc>
            <method name="getCoreMetrics" type="CoreMetrics" line="52"/>
            <javadoc line="52">
                Return the line metrics for all text in this label.                
            </javadoc>
            <method name="getCharX" type="float" line="57"/>
            <javadoc line="57">
                Return the x location of the character at the given logical index.                
            </javadoc>
            <method name="getCharY" type="float" line="62"/>
            <javadoc line="62">
                Return the y location of the character at the given logical index.                
            </javadoc>
            <method name="getCharAdvance" type="float" line="67"/>
            <javadoc line="67">
                Return the advance of the character at the given logical index.                
            </javadoc>
            <method name="getCharVisualBounds" type="Rectangle2D" line="72"/>
            <javadoc line="72">
                Return the visual bounds of the character at the given logical index.
                  This bounds encloses all the pixels of the character when the label is rendered
                  at x, y.                
            </javadoc>
            <method name="logicalToVisual" type="int" line="79"/>
            <javadoc line="79">
                Return the visual index of the character at the given logical index.                
            </javadoc>
            <method name="visualToLogical" type="int" line="84"/>
            <javadoc line="84">
                Return the logical index of the character at the given visual index.                
            </javadoc>
            <method name="getLineBreakIndex" type="int" line="89"/>
            <javadoc line="89">
                Return the logical index of the character, starting with the character at
                  logicalStart, whose accumulated advance exceeds width.  If the advances of
                  all characters do not exceed width, return getNumCharacters.  If width is
                  less than zero, return logicalStart - 1.                
            </javadoc>
            <method name="getAdvanceBetween" type="float" line="97"/>
            <javadoc line="97">
                Return the accumulated advances of all characters between logicalStart and
                  logicalLimit.                
            </javadoc>
            <method name="caretAtOffsetIsValid" type="boolean" line="103"/>
            <javadoc line="103">
                Return whether a caret can exist on the leading edge of the
                  character at offset.  If the character is part of a ligature
                  (for example) a caret may not be appropriate at offset.                
            </javadoc>
            <javadoc line="110">
                A convenience overload of getCharVisualBounds that defaults the label origin
                  to 0, 0.                
            </javadoc>
            <method name="getCharVisualBounds" type="Rectangle2D" line="114">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="getSubset" type="TextLineComponent" line="118"/>
            <method name="getNumJustificationInfos" type="int" line="120"/>
            <javadoc line="120">
                Return the number of justification records this uses.                
            </javadoc>
            <method name="getJustificationInfos" type="void" line="125"/>
            <javadoc line="125">
                Return GlyphJustificationInfo objects for the characters between
                  charStart and charLimit, starting at offset infoStart.  Infos
                  will be in visual order.  All positions between infoStart and
                  getNumJustificationInfos will be set.  If a position corresponds
                  to a character outside the provided range, it is set to null.                
            </javadoc>
            <method name="applyJustificationDeltas" type="TextLineComponent" line="134"/>
            <javadoc line="134">
                Apply deltas to the data in this component, starting at offset
                  deltaStart, and return the new component.  There are two floats
                  for each justification info, for a total of 2  getNumJustificationInfos.
                  The first delta is the left adjustment, the second is the right
                  adjustment.
                  &lt;p&gt;
                  If flags[0] is true on entry, rejustification is allowed.  If
                  the new component requires rejustification (ligatures were
                  formed or split), flags[0] will be set on exit.                
            </javadoc>
        </class>
    </source>