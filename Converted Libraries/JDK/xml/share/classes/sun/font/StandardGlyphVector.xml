<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.RenderingHints"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.font.GlyphMetrics"/>
        <import package="java.awt.font.GlyphJustificationInfo"/>
        <import package="java.awt.font.GlyphVector"/>
        <import package="java.awt.font.LineMetrics"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.GeneralPath"/>
        <import package="java.awt.geom.NoninvertibleTransformException"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.text.CharacterIterator"/>
        <import package="sun.awt.SunHints"/>
        <import package="sun.java2d.loops.FontInfo"/>
        <class name="StandardGlyphVector" line="24">
            <extends class="GlyphVector"/>
            <javadoc line="24">
                Standard implementation of GlyphVector used by Font, GlyphList, and
                  SunGraphics2D.
                  The main issues involve the semantics of the various transforms
                  (font, glyph, device) and their effect on rendering and metrics.
                  Very, very unfortunately, the translation component of the font
                  transform affects where the text gets rendered.  It offsets the
                  rendering origin.  None of the other metrics of the glyphvector
                  are affected, making them inconsistent with the rendering behavior.
                  I think the translation component of the font would be better
                  interpreted as the translation component of a per-glyph transform,
                  but I don&apos;t know if this is possible to change.
                  After the font transform is applied, the glyph transform is
                  applied.  This makes glyph transforms relative to font transforms,
                  if the font transform changes, the glyph transform will have the
                  same (relative) effect on the outline of the glyph.  The outline
                  and logical bounds are passed through the glyph transform before
                  being returned.  The glyph metrics ignore the glyph transform, but
                  provide the outline bounds and the advance vector of the glyph (the
                  latter will be rotated if the font is rotated).  The default layout
                  places each glyph at the end of the advance vector of the previous
                  glyph, and since the glyph transform translates the advance vector,
                  this means a glyph transform affects the positions of all
                  subsequent glyphs if defaultLayout is called after setting a glyph
                  transform.  In the glyph info array, the bounds are the outline
                  bounds including the glyph transform, and the positions are as
                  computed, and the advances are the deltas between the positions.
                  (There&apos;s a bug in the logical bounds of a rotated glyph for
                  composite fonts, it&apos;s not to spec (in 1.4.0, 1.4.1, 1.4.2).  The
                  problem is that the rotated composite doesn&apos;t handle the multiple
                  ascents and descents properly in both x and y.  You end up with
                  a rotated advance vector but an unrotated ascent and descent.)
                  Finally, the whole thing is transformed by the device transform to
                  position it on the page.
                  Another bug: The glyph outline seems to ignore fractional point
                  size information, but the images (and advances) don&apos;t ignore it.
                  Small fonts drawn at large magnification have odd advances when
                  fractional metrics is off-- that&apos;s because the advances depend on
                  the frc.  When the frc is scaled appropriately, the advances are
                  fine.  FM or a large frc (high numbers) make the advances right.
                  The buffer aa flag doesn&apos;t affect rendering, the glyph vector
                  renders as AA if aa is set in its frc, and as non-aa if aa is not
                  set in its frc.
                  font rotation, baseline, vertical etc.
                  Font rotation and baseline Line metrics should be measured along a
                  unit vector pi/4 cc from the baseline vector.  For &apos;horizontal&apos;
                  fonts the baseline vector is the x vector passed through the font
                  transform (ignoring translation), for &apos;vertical&apos; it is the y
                  vector.  This definition makes ascent, descent, etc independent of
                  shear, so shearing can be used to simulate italic. This means no
                  fonts have &apos;negative ascents&apos; or &apos;zero ascents&apos; etc.
                  Having a coordinate system with orthogonal axes where one is
                  parallel to the baseline means we could use rectangles and interpret
                  them in terms of this coordinate system.  Unfortunately there
                  is support for rotated fonts in the jdk already so maintaining
                  the semantics of existing code (getlogical bounds, etc) might
                  be difficult.
                  A font transform transforms both the baseline and all the glyphs
                  in the font, so it does not rotate the glyph w.r.t the baseline.
                  If you do want to rotate individual glyphs, you need to apply a
                  glyph transform.  If performDefaultLayout is called after this,
                  the transformed glyph advances will affect the glyph positions.
                  useful additions
                  - select vertical metrics - glyphs are rotated pi/4 cc and vertical
                  metrics are used to align them to the baseline.
                  - define baseline for font (glyph rotation not linked to baseline)
                  - define extra space (delta between each glyph along baseline)
                  - define offset (delta from &apos;true&apos; baseline, impacts ascent and
                  descent as these are still computed from true basline and pinned
                  to zero, used in superscript).                
            </javadoc>
            <declaration name="font" type="Font" line="96"/>
            <declaration name="frc" type="FontRenderContext" line="97"/>
            <declaration name="glyphs" type="int[]" line="98"/>
            <declaration name="userGlyphs" type="int[]" line="99"/>
            <declaration name="positions" type="float[]" line="100"/>
            <declaration name="charIndices" type="int[]" line="101"/>
            <declaration name="flags" type="int" line="102"/>
            <declaration name="UNINITIALIZED_FLAGS" type="int" line="103"/>
            <declaration name="gti" type="GlyphTransformInfo" line="104"/>
            <declaration name="ftx" type="AffineTransform" line="105"/>
            <declaration name="dtx" type="AffineTransform" line="106"/>
            <declaration name="invdtx" type="AffineTransform" line="107"/>
            <declaration name="frctx" type="AffineTransform" line="108"/>
            <declaration name="font2D" type="Font2D" line="109"/>
            <declaration name="fsref" type="SoftReference" line="110"/>
            <method name="StandardGlyphVector" type="constructor" line="111">
                <params>
                    <param name="font" type="Font"/>
                    <param name="str" type="String"/>
                    <param name="frc" type="FontRenderContext"/>
                </params>
            </method>
            <method name="StandardGlyphVector" type="constructor" line="114">
                <params>
                    <param name="font" type="Font"/>
                    <param name="text" type="char[]"/>
                    <param name="frc" type="FontRenderContext"/>
                </params>
            </method>
            <method name="StandardGlyphVector" type="constructor" line="117">
                <params>
                    <param name="font" type="Font"/>
                    <param name="text" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                    <param name="frc" type="FontRenderContext"/>
                </params>
            </method>
            <method name="getTracking" type="float" line="120">
                <params>
                    <param name="font" type="Font"/>
                </params>
                <scope line="121">
                    <declaration name="values" type="AttributeValues" line="122"/>
                </scope>
            </method>
            <method name="StandardGlyphVector" type="constructor" line="127">
                <params>
                    <param name="font" type="Font"/>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="glyphs" type="int[]"/>
                    <param name="positions" type="float[]"/>
                    <param name="indices" type="int[]"/>
                    <param name="flags" type="int"/>
                </params>
                <declaration name="track" type="float" line="129"/>
                <scope line="130">
                    <declaration name="trackPt" type="Point2D.Float" line="132"/>
                    <scope line="133">
                        <declaration name="at" type="AffineTransform" line="134"/>
                    </scope>
                    <declaration name="f2d" type="Font2D" line="137"/>
                    <declaration name="strike" type="FontStrike" line="138"/>
                    <declaration name="deltas" type="float[]" line="139"/>
                    <scope line="140">
                        <declaration name="inc" type="float" line="141"/>
                        <scope line="142">
                            <declaration name="delta" type="float" line="143"/>
                            <scope line="144">
                                <scope line="145"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="initGlyphVector" type="void" line="155">
                <params>
                    <param name="font" type="Font"/>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="glyphs" type="int[]"/>
                    <param name="positions" type="float[]"/>
                    <param name="indices" type="int[]"/>
                    <param name="flags" type="int"/>
                </params>
            </method>
            <method name="StandardGlyphVector" type="constructor" line="165">
                <params>
                    <param name="font" type="Font"/>
                    <param name="iter" type="CharacterIterator"/>
                    <param name="frc" type="FontRenderContext"/>
                </params>
                <declaration name="offset" type="int" line="166"/>
                <declaration name="text" type="char[]" line="167"/>
                <scope line="168"/>
            </method>
            <method name="StandardGlyphVector" type="constructor" line="173">
                <params>
                    <param name="font" type="Font"/>
                    <param name="glyphs" type="int[]"/>
                    <param name="frc" type="FontRenderContext"/>
                </params>
            </method>
            <method name="getStandardGV" type="StandardGlyphVector" line="181">
                <params>
                    <param name="gv" type="GlyphVector"/>
                    <param name="info" type="FontInfo"/>
                </params>
                <scope line="182">
                    <declaration name="aaHint" type="Object" line="183"/>
                    <scope line="184">
                        <declaration name="frc" type="FontRenderContext" line="185"/>
                    </scope>
                </scope>
                <scope line="190"/>
            </method>
            <method name="getFont" type="Font" line="195"/>
            <method name="getFontRenderContext" type="FontRenderContext" line="198"/>
            <method name="performDefaultLayout" type="void" line="201">
                <scope line="203"/>
            </method>
            <method name="getNumGlyphs" type="int" line="207"/>
            <method name="getGlyphCode" type="int" line="210">
                <params>
                    <param name="glyphIndex" type="int"/>
                </params>
            </method>
            <method name="getGlyphCodes" type="int[]" line="213">
                <params>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                    <param name="result" type="int[]"/>
                </params>
                <scope line="214"/>
                <scope line="217"/>
                <scope line="220"/>
                <scope line="223"/>
                <scope line="226"/>
            </method>
            <method name="getGlyphCharIndex" type="int" line="231">
                <params>
                    <param name="ix" type="int"/>
                </params>
                <scope line="232"/>
                <scope line="235">
                    <scope line="236"/>
                </scope>
            </method>
            <method name="getGlyphCharIndices" type="int[]" line="243">
                <params>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                    <param name="result" type="int[]"/>
                </params>
                <scope line="244"/>
                <scope line="247"/>
                <scope line="250">
                    <scope line="251">
                        <scope line="252"/>
                    </scope>
                    <scope line="256">
                        <scope line="257"/>
                    </scope>
                </scope>
                <scope line="262">
                    <scope line="263"/>
                </scope>
            </method>
            <method name="getLogicalBounds" type="Rectangle2D" line="269">
                <declaration name="lm" type="LineMetrics" line="272"/>
                <declaration name="minX" type="float" line="273"/>
                <scope line="278"/>
            </method>
            <method name="getVisualBounds" type="Rectangle2D" line="283">
                <declaration name="result" type="Rectangle2D" line="284"/>
                <scope line="285">
                    <declaration name="glyphVB" type="Rectangle2D" line="286"/>
                    <scope line="287">
                        <scope line="288"/>
                        <scope line="291"/>
                    </scope>
                </scope>
                <scope line="296"/>
            </method>
            <method name="getPixelBounds" type="Rectangle" line="301">
                <params>
                    <param name="renderFRC" type="FontRenderContext"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="getOutline" type="Shape" line="304"/>
            <method name="getOutline" type="Shape" line="307">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="getGlyphOutline" type="Shape" line="310">
                <params>
                    <param name="ix" type="int"/>
                </params>
            </method>
            <method name="getGlyphOutline" type="Shape" line="313">
                <params>
                    <param name="ix" type="int"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="getGlyphPosition" type="Point2D" line="316">
                <params>
                    <param name="ix" type="int"/>
                </params>
            </method>
            <method name="setGlyphPosition" type="void" line="321">
                <params>
                    <param name="ix" type="int"/>
                    <param name="pos" type="Point2D"/>
                </params>
                <declaration name="ix2" type="int" line="323"/>
            </method>
            <method name="getGlyphTransform" type="AffineTransform" line="329">
                <params>
                    <param name="ix" type="int"/>
                </params>
                <scope line="330"/>
                <scope line="333"/>
            </method>
            <method name="setGlyphTransform" type="void" line="338">
                <params>
                    <param name="ix" type="int"/>
                    <param name="newTX" type="AffineTransform"/>
                </params>
                <scope line="339"/>
                <scope line="342">
                    <scope line="343"/>
                </scope>
                <scope line="349"/>
            </method>
            <method name="getLayoutFlags" type="int" line="353">
                <scope line="354">
                    <scope line="356">
                        <declaration name="ltr" type="boolean" line="357"/>
                        <declaration name="rtl" type="boolean" line="358"/>
                        <declaration name="rtlix" type="int" line="359"/>
                        <scope line="360">
                            <declaration name="cx" type="int" line="361"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getGlyphPositions" type="float[]" line="371">
                <params>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                    <param name="result" type="float[]"/>
                </params>
                <scope line="372"/>
                <scope line="375"/>
                <scope line="378"/>
            </method>
            <method name="getGlyphLogicalBounds" type="Shape" line="383">
                <params>
                    <param name="ix" type="int"/>
                </params>
                <scope line="384"/>
                <declaration name="lbcache" type="Shape[]" line="387"/>
                <scope line="388"/>
                <declaration name="result" type="Shape" line="392"/>
                <scope line="393">
                    <declaration name="adl" type="ADL" line="396"/>
                    <declaration name="gs" type="GlyphStrike" line="397"/>
                    <declaration name="adv" type="Point2D.Float" line="399"/>
                    <declaration name="wx" type="float" line="400"/>
                    <declaration name="wy" type="float" line="401"/>
                    <declaration name="hx" type="float" line="402"/>
                    <declaration name="hy" type="float" line="403"/>
                    <declaration name="x" type="float" line="404"/>
                    <declaration name="y" type="float" line="405"/>
                    <declaration name="gp" type="GeneralPath" line="406"/>
                </scope>
            </method>
            <declaration name="lbcacheRef" type="SoftReference" line="417"/>
            <method name="getGlyphVisualBounds" type="Shape" line="418">
                <params>
                    <param name="ix" type="int"/>
                </params>
                <scope line="419"/>
                <declaration name="vbcache" type="Shape[]" line="422"/>
                <scope line="423"/>
                <declaration name="result" type="Shape" line="427"/>
                <scope line="428"/>
            </method>
            <declaration name="vbcacheRef" type="SoftReference" line="434"/>
            <method name="getGlyphPixelBounds" type="Rectangle" line="435">
                <params>
                    <param name="index" type="int"/>
                    <param name="renderFRC" type="FontRenderContext"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="getGlyphMetrics" type="GlyphMetrics" line="438">
                <params>
                    <param name="ix" type="int"/>
                </params>
                <scope line="439"/>
                <declaration name="vb" type="Rectangle2D" line="442"/>
                <declaration name="pt" type="Point2D" line="443"/>
                <declaration name="adv" type="Point2D.Float" line="445"/>
                <declaration name="gm" type="GlyphMetrics" line="446"/>
            </method>
            <method name="getGlyphJustificationInfo" type="GlyphJustificationInfo" line="449">
                <params>
                    <param name="ix" type="int"/>
                </params>
                <scope line="450"/>
            </method>
            <method name="equals" type="boolean" line="455">
                <params>
                    <param name="rhs" type="GlyphVector"/>
                </params>
                <scope line="456"/>
                <scope line="459"/>
                <scope line="462">
                    <declaration name="other" type="StandardGlyphVector" line="463"/>
                    <scope line="464"/>
                    <scope line="467">
                        <scope line="468"/>
                    </scope>
                    <scope line="472"/>
                    <scope line="475"/>
                    <scope line="478">
                        <scope line="479"/>
                        <scope line="482"/>
                    </scope>
                    <scope line="486">
                        <scope line="487">
                            <scope line="488"/>
                        </scope>
                    </scope>
                    <scope line="493"/>
                    <scope line="496"/>
                </scope>
                <scope line="500"/>
            </method>
            <javadoc line="504">
                As a concrete subclass of Object that implements equality, this must
                  implement hashCode.                
            </javadoc>
            <method name="hashCode" type="int" line="508"/>
            <javadoc line="511">
                Since we implement equality comparisons for GlyphVector, we implement
                  the inherited Object.equals(Object) as well.  GlyphVector should do
                  this, and define two glyphvectors as not equal if the classes differ.                
            </javadoc>
            <method name="equals" type="boolean" line="516">
                <params>
                    <param name="rhs" type="Object"/>
                </params>
                <scope line="517"/>
                <scope line="520"/>
            </method>
            <javadoc line="524">
                Sometimes I wish java had covariant return types...                
            </javadoc>
            <method name="copy" type="StandardGlyphVector" line="527"/>
            <javadoc line="530">
                As a concrete subclass of GlyphVector, this must implement clone.                
            </javadoc>
            <method name="clone" type="Object" line="533">
                <scope line="534">
                    <declaration name="result" type="StandardGlyphVector" line="535"/>
                    <scope line="537"/>
                    <scope line="540"/>
                </scope>
                <scope line="545"/>
            </method>
            <method name="setGlyphPositions" type="void" line="549">
                <params>
                    <param name="srcPositions" type="float[]"/>
                    <param name="srcStart" type="int"/>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <scope line="550"/>
                <scope line="554"/>
            </method>
            <javadoc line="560">
                Set all the glyph positions, including the &apos;after last glyph&apos; position.
                  The srcPositions array must be of length (numGlyphs + 1)  2.                
            </javadoc>
            <method name="setGlyphPositions" type="void" line="564">
                <params>
                    <param name="srcPositions" type="float[]"/>
                </params>
                <declaration name="requiredLength" type="int" line="565"/>
                <scope line="566"/>
            </method>
            <javadoc line="573">
                This is a convenience overload that gets all the glyph positions, which
                  is what you usually want to do if you&apos;re getting more than one.
                  !!! should I bother taking result parameter?                
            </javadoc>
            <method name="getGlyphPositions" type="float[]" line="578">
                <params>
                    <param name="result" type="float[]"/>
                </params>
            </method>
            <javadoc line="581">
                Get transform information for the requested range of glyphs.
                  If no glyphs have a transform, return null.
                  If a glyph has no transform (or is the identity transform) its entry in the result array will be null.
                  If the passed-in result is null an array will be allocated for the caller.
                  Each transform instance in the result array will unique, and independent of the GlyphVector&apos;s transform.                
            </javadoc>
            <method name="getGlyphTransforms" type="AffineTransform[]" line="588">
                <params>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                    <param name="result" type="AffineTransform[]"/>
                </params>
                <scope line="589"/>
                <scope line="592"/>
                <scope line="595"/>
                <scope line="598"/>
            </method>
            <javadoc line="603">
                Convenience overload for getGlyphTransforms(int, int, AffineTransform[], int);                
            </javadoc>
            <method name="getGlyphTransforms" type="AffineTransform[]" line="606"/>
            <javadoc line="609">
                Set a number of glyph transforms.
                  Original transforms are unchanged.  The array may contain nulls, and also may
                  contain multiple references to the same transform instance.                
            </javadoc>
            <method name="setGlyphTransforms" type="void" line="614">
                <params>
                    <param name="srcTransforms" type="AffineTransform[]"/>
                    <param name="srcStart" type="int"/>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <scope line="615"/>
            </method>
            <javadoc line="619">
                Convenience overload of setGlyphTransforms(AffineTransform[], int, int, int).                
            </javadoc>
            <method name="setGlyphTransforms" type="void" line="622">
                <params>
                    <param name="srcTransforms" type="AffineTransform[]"/>
                </params>
            </method>
            <javadoc line="625">
                For each glyph return posx, posy, advx, advy, visx, visy, visw, vish.                
            </javadoc>
            <method name="getGlyphInfo" type="float[]" line="628">
                <declaration name="result" type="float[]" line="631"/>
                <scope line="632">
                    <declaration name="x" type="float" line="633"/>
                    <declaration name="y" type="float" line="634"/>
                    <declaration name="glyphID" type="int" line="637"/>
                    <declaration name="s" type="GlyphStrike" line="638"/>
                    <declaration name="adv" type="Point2D.Float" line="639"/>
                    <declaration name="vb" type="Rectangle2D" line="642"/>
                </scope>
            </method>
            <javadoc line="650">
                !!! not used currently, but might be by getPixelbounds?                
            </javadoc>
            <method name="pixellate" type="void" line="653">
                <params>
                    <param name="renderFRC" type="FontRenderContext"/>
                    <param name="loc" type="Point2D"/>
                    <param name="pxResult" type="Point"/>
                </params>
                <scope line="654"/>
                <declaration name="at" type="AffineTransform" line="657"/>
                <scope line="662"/>
                <scope line="665"/>
            </method>
            <method name="needsPositions" type="boolean" line="669">
                <params>
                    <param name="devTX" type="double[]"/>
                </params>
            </method>
            <method name="setupGlyphImages" type="Object" line="672">
                <params>
                    <param name="images" type="long[]"/>
                    <param name="positions" type="float[]"/>
                    <param name="devTX" type="double[]"/>
                </params>
                <scope line="675"/>
                <declaration name="gs" type="GlyphStrike" line="678"/>
                <scope line="680">
                    <scope line="681"/>
                    <scope line="684"/>
                </scope>
            </method>
            <method name="matchTX" type="boolean" line="690">
                <params>
                    <param name="lhs" type="double[]"/>
                    <param name="rhs" type="AffineTransform"/>
                </params>
            </method>
            <method name="getNonTranslateTX" type="AffineTransform" line="693">
                <params>
                    <param name="tx" type="AffineTransform"/>
                </params>
                <scope line="694"/>
            </method>
            <method name="equalNonTranslateTX" type="boolean" line="699">
                <params>
                    <param name="lhs" type="AffineTransform"/>
                    <param name="rhs" type="AffineTransform"/>
                </params>
            </method>
            <method name="setRenderTransform" type="void" line="702">
                <params>
                    <param name="devTX" type="double[]"/>
                </params>
                <scope line="704"/>
            </method>
            <method name="setDTX" type="void" line="708">
                <params>
                    <param name="tx" type="AffineTransform"/>
                </params>
                <scope line="709"/>
            </method>
            <method name="setFRCTX" type="void" line="713">
                <scope line="714"/>
            </method>
            <javadoc line="718">
                Change the dtx for the strike refs we use.  Keeps a reference to the at.  At
                  must not contain translation.
                  Called by setRenderTransform, setDTX, initFontData.                
            </javadoc>
            <method name="resetDTX" type="void" line="723">
                <params>
                    <param name="at" type="AffineTransform"/>
                </params>
                <scope line="727">
                    <scope line="728"/>
                    <scope line="731"/>
                </scope>
                <scope line="734"/>
            </method>
            <javadoc line="738">
                Utility used by getStandardGV.
                  Constructs a StandardGlyphVector from a generic glyph vector.
                  Do not call this from new contexts without considering the comment
                  about &quot;userGlyphs&quot;.                
            </javadoc>
            <method name="StandardGlyphVector" type="constructor" line="744">
                <params>
                    <param name="gv" type="GlyphVector"/>
                    <param name="frc" type="FontRenderContext"/>
                </params>
                <declaration name="nGlyphs" type="int" line="748"/>
                <scope line="750"/>
                <scope line="753"/>
                <scope line="757"/>
                <scope line="760"/>
                <scope line="763">
                    <declaration name="txs" type="AffineTransform[]" line="764"/>
                    <scope line="765"/>
                </scope>
            </method>
            <method name="getValidatedGlyphs" type="int[]" line="771">
                <params>
                    <param name="oglyphs" type="int[]"/>
                </params>
                <declaration name="len" type="int" line="772"/>
                <declaration name="vglyphs" type="int[]" line="773"/>
                <scope line="774">
                    <scope line="775"/>
                    <scope line="778"/>
                </scope>
            </method>
            <method name="init" type="void" line="784">
                <params>
                    <param name="font" type="Font"/>
                    <param name="text" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="flags" type="int"/>
                </params>
                <scope line="785"/>
                <scope line="791"/>
                <scope line="794">
                    <declaration name="temp" type="char[]" line="795"/>
                </scope>
            </method>
            <method name="initFontData" type="void" line="804">
                <declaration name="s" type="float" line="806"/>
                <scope line="807">
                    <scope line="809"/>
                </scope>
                <scope line="815"/>
            </method>
            <javadoc line="821">
                Copy glyph position data into a result array starting at the indicated
                  offset in the array.  If the passed-in result array is null, a new
                  array will be allocated and returned.
                  This is an internal method and does no extra argument checking.                
                <param>
                    start the index of the first glyph to get                    
                </param>
                <param>
                    count the number of glyphs to get                    
                </param>
                <param>
                    offset the offset into result at which to put the data                    
                </param>
                <param>
                    result an array to hold the x,y positions                    
                </param>
                <return>
                    the modified position array                    
                </return>
            </javadoc>
            <method name="internalGetGlyphPositions" type="float[]" line="832">
                <params>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                    <param name="offset" type="int"/>
                    <param name="result" type="float[]"/>
                </params>
                <scope line="833"/>
                <scope line="837"/>
            </method>
            <method name="getGlyphOutlineBounds" type="Rectangle2D" line="842">
                <params>
                    <param name="ix" type="int"/>
                </params>
            </method>
            <javadoc line="847">
                Used by getOutline, getGlyphsOutline                
            </javadoc>
            <method name="getGlyphsOutline" type="Shape" line="850">
                <params>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <declaration name="result" type="GeneralPath" line="853"/>
                <scope line="854">
                    <declaration name="px" type="float" line="855"/>
                    <declaration name="py" type="float" line="856"/>
                </scope>
            </method>
            <method name="getGlyphsPixelBounds" type="Rectangle" line="861">
                <params>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <declaration name="tx" type="AffineTransform" line="863"/>
                <scope line="864"/>
                <scope line="867"/>
                <scope line="871"/>
                <declaration name="fs" type="FontStrike" line="874"/>
                <declaration name="result" type="Rectangle" line="875"/>
                <declaration name="r" type="Rectangle" line="876"/>
                <declaration name="pt" type="Point2D.Float" line="877"/>
                <declaration name="n" type="int" line="878"/>
                <scope line="879">
                    <scope line="884">
                        <scope line="885"/>
                        <scope line="888"/>
                    </scope>
                </scope>
            </method>
            <method name="clearCaches" type="void" line="895">
                <params>
                    <param name="ix" type="int"/>
                </params>
                <scope line="896">
                    <declaration name="lbcache" type="Shape[]" line="897"/>
                    <scope line="898"/>
                </scope>
                <scope line="902">
                    <declaration name="vbcache" type="Shape[]" line="903"/>
                    <scope line="904"/>
                </scope>
            </method>
            <method name="clearCaches" type="void" line="909"/>
            <declaration name="FLAG_USES_VERTICAL_BASELINE" type="int" line="913"/>
            <javadoc line="913">
                A flag used with getLayoutFlags that indicates whether this &lt;code&gt;GlyphVector&lt;/code&gt; uses
                  a vertical baseline.                
            </javadoc>
            <declaration name="FLAG_USES_VERTICAL_METRICS" type="int" line="918"/>
            <javadoc line="918">
                A flag used with getLayoutFlags that indicates whether this &lt;code&gt;GlyphVector&lt;/code&gt; uses
                  vertical glyph metrics.  A &lt;code&gt;GlyphVector&lt;/code&gt; can use vertical metrics on a
                  horizontal line, or vice versa.                
            </javadoc>
            <declaration name="FLAG_USES_ALTERNATE_ORIENTATION" type="int" line="924"/>
            <javadoc line="924">
                A flag used with getLayoutFlags that indicates whether this &lt;code&gt;GlyphVector&lt;/code&gt; uses
                  the &apos;alternate orientation.&apos;  Glyphs have a default orientation given a
                  particular baseline and metrics orientation, this is the orientation appropriate
                  for left-to-right text.  For example, the letter &apos;A&apos; can have four orientations,
                  with the point at 12, 3, 6, or 9 &apos;o clock.  The following table shows where the
                  point displays for different values of vertical baseline (vb), vertical
                  metrics (vm) and alternate orientation (fo):&lt;br&gt;
                  &lt;blockquote&gt;
                  vb vm ao
                  -- -- --  --
                  f  f  f  12   ^  horizontal metrics on horizontal lines
                  f  f  t   6   v
                  f  t  f   9   &lt;  vertical metrics on horizontal lines
                  f  t  t   3   &gt;
                  t  f  f   3   &gt;  horizontal metrics on vertical lines
                  t  f  t   9   &lt;
                  t  t  f  12   ^  vertical metrics on vertical lines
                  t  t  t   6   v
                  &lt;/blockquote&gt;                
            </javadoc>
            <javadoc line="946">
                Ensure that the positions array exists and holds position data.
                  If the array is null, this allocates it and sets default positions.                
            </javadoc>
            <method name="initPositions" type="void" line="950">
                <scope line="951">
                    <declaration name="trackPt" type="Point2D.Float" line="954"/>
                    <declaration name="track" type="float" line="955"/>
                    <scope line="956"/>
                    <declaration name="pt" type="Point2D.Float" line="960"/>
                    <scope line="961">
                        <declaration name="at" type="AffineTransform" line="962"/>
                        <scope line="966"/>
                    </scope>
                    <scope line="970">
                        <scope line="972"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="981">
                OR newFlags with existing flags.  First computes existing flags if needed.                
            </javadoc>
            <method name="addFlags" type="void" line="984">
                <params>
                    <param name="newflags" type="int"/>
                </params>
            </method>
            <javadoc line="987">
                AND the complement of clearedFlags with existing flags.  First computes existing flags if needed.                
            </javadoc>
            <method name="clearFlags" type="void" line="990">
                <params>
                    <param name="clearedFlags" type="int"/>
                </params>
            </method>
            <method name="getGlyphStrike" type="GlyphStrike" line="993">
                <params>
                    <param name="ix" type="int"/>
                </params>
                <scope line="994"/>
                <scope line="997"/>
            </method>
            <method name="getDefaultStrike" type="GlyphStrike" line="1001">
                <declaration name="gs" type="GlyphStrike" line="1002"/>
                <scope line="1003"/>
                <scope line="1006"/>
            </method>
            <class name="GlyphTransformInfo" line="1012">
                <declaration name="sgv" type="StandardGlyphVector" line="1013"/>
                <declaration name="indices" type="int[]" line="1014"/>
                <declaration name="transforms" type="double[]" line="1015"/>
                <declaration name="strikesRef" type="SoftReference" line="1016"/>
                <declaration name="haveAllStrikes" type="boolean" line="1017"/>
                <method name="GlyphTransformInfo" type="constructor" line="1018">
                    <params>
                        <param name="sgv" type="StandardGlyphVector"/>
                    </params>
                </method>
                <method name="GlyphTransformInfo" type="constructor" line="1021">
                    <params>
                        <param name="sgv" type="StandardGlyphVector"/>
                        <param name="rhs" type="GlyphTransformInfo"/>
                    </params>
                </method>
                <method name="equals" type="boolean" line="1027">
                    <params>
                        <param name="rhs" type="GlyphTransformInfo"/>
                    </params>
                    <scope line="1028"/>
                    <scope line="1031"/>
                    <scope line="1034"/>
                    <scope line="1037"/>
                    <scope line="1040">
                        <declaration name="tix" type="int" line="1041"/>
                        <declaration name="rix" type="int" line="1042"/>
                        <scope line="1043"/>
                        <scope line="1046">
                            <scope line="1049">
                                <scope line="1050"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="setGlyphTransform" type="void" line="1058">
                    <params>
                        <param name="glyphIndex" type="int"/>
                        <param name="newTX" type="AffineTransform"/>
                    </params>
                    <declaration name="temp" type="double[]" line="1059"/>
                    <declaration name="isIdentity" type="boolean" line="1060"/>
                    <scope line="1061"/>
                    <scope line="1064"/>
                    <scope line="1068">
                        <scope line="1069"/>
                    </scope>
                    <scope line="1076">
                        <declaration name="addSlot" type="boolean" line="1077"/>
                        <declaration name="newIndex" type="int" line="1078"/>
                        <scope line="1079"/>
                        <scope line="1082">
                            <declaration name="i" type="int" line="1084"/>
                            <scope line="1085">
                                <scope line="1086">
                                    <scope line="1087"/>
                                </scope>
                            </scope>
                        </scope>
                        <declaration name="oldIndex" type="int" line="1096"/>
                        <scope line="1097">
                            <declaration name="removeSlot" type="boolean" line="1098"/>
                            <scope line="1099">
                                <scope line="1101">
                                    <scope line="1102"/>
                                </scope>
                            </scope>
                            <scope line="1108"/>
                            <scope line="1112">
                                <scope line="1113"/>
                                <declaration name="ttemp" type="double[]" line="1121"/>
                                <scope line="1125">
                                    <scope line="1126"/>
                                </scope>
                                <scope line="1130"/>
                            </scope>
                            <scope line="1134">
                                <declaration name="ttemp" type="double[]" line="1135"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="getGlyphTransform" type="AffineTransform" line="1147">
                    <params>
                        <param name="ix" type="int"/>
                    </params>
                    <declaration name="index" type="int" line="1148"/>
                    <scope line="1149"/>
                    <declaration name="x" type="int" line="1152"/>
                </method>
                <method name="transformCount" type="int" line="1155">
                    <scope line="1156"/>
                </method>
                <javadoc line="1161">
                    The strike cache works like this.
                      -Each glyph is thought of as having a transform, usually identity.
                      -Each request for a strike is based on a device transform, either the
                      one in the frc or the rendering transform.
                      -For general info, strikes are held with soft references.
                      -When rendering, strikes must be held with hard references for the
                      duration of the rendering call.  GlyphList will have to hold this
                      info along with the image and position info, but toss the strike info
                      when done.
                      -Build the strike cache as needed.  If the dev transform we want to use
                      has changed from the last time it is built, the cache is flushed by
                      the caller before these methods are called.
                      Use a tx that doesn&apos;t include translation components of dst tx.                    
                </javadoc>
                <method name="setupGlyphImages" type="Object" line="1176">
                    <params>
                        <param name="images" type="long[]"/>
                        <param name="positions" type="float[]"/>
                        <param name="tx" type="AffineTransform"/>
                    </params>
                    <declaration name="len" type="int" line="1177"/>
                    <declaration name="sl" type="GlyphStrike[]" line="1178"/>
                    <scope line="1179">
                        <declaration name="gs" type="GlyphStrike" line="1180"/>
                        <declaration name="glyphID" type="int" line="1181"/>
                    </scope>
                </method>
                <method name="getGlyphsPixelBounds" type="Rectangle" line="1188">
                    <params>
                        <param name="tx" type="AffineTransform"/>
                        <param name="x" type="float"/>
                        <param name="y" type="float"/>
                        <param name="start" type="int"/>
                        <param name="count" type="int"/>
                    </params>
                    <declaration name="result" type="Rectangle" line="1189"/>
                    <declaration name="r" type="Rectangle" line="1190"/>
                    <declaration name="pt" type="Point2D.Float" line="1191"/>
                    <declaration name="n" type="int" line="1192"/>
                    <scope line="1193">
                        <declaration name="gs" type="GlyphStrike" line="1194"/>
                        <scope line="1199">
                            <scope line="1200"/>
                            <scope line="1203"/>
                        </scope>
                    </scope>
                </method>
                <method name="getStrike" type="GlyphStrike" line="1210">
                    <params>
                        <param name="glyphIndex" type="int"/>
                    </params>
                    <scope line="1211">
                        <declaration name="strikes" type="GlyphStrike[]" line="1212"/>
                    </scope>
                </method>
                <method name="getAllStrikes" type="GlyphStrike[]" line="1217">
                    <scope line="1218"/>
                    <declaration name="strikes" type="GlyphStrike[]" line="1221"/>
                    <scope line="1222">
                        <scope line="1223"/>
                    </scope>
                </method>
                <method name="getStrikeArray" type="GlyphStrike[]" line="1230">
                    <declaration name="strikes" type="GlyphStrike[]" line="1231"/>
                    <scope line="1232"/>
                    <scope line="1235"/>
                </method>
                <method name="getStrikeAtIndex" type="GlyphStrike" line="1242">
                    <params>
                        <param name="strikes" type="GlyphStrike[]"/>
                        <param name="strikeIndex" type="int"/>
                    </params>
                    <declaration name="strike" type="GlyphStrike" line="1243"/>
                    <scope line="1244">
                        <scope line="1245"/>
                        <scope line="1248">
                            <declaration name="ix" type="int" line="1249"/>
                            <declaration name="gtx" type="AffineTransform" line="1250"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="GlyphStrike" line="1258">
                <declaration name="sgv" type="StandardGlyphVector" line="1259"/>
                <declaration name="strike" type="FontStrike" line="1260"/>
                <declaration name="dx" type="float" line="1261"/>
                <declaration name="dy" type="float" line="1262"/>
                <method name="create" type="GlyphStrike" line="1263">
                    <params>
                        <param name="sgv" type="StandardGlyphVector"/>
                        <param name="dtx" type="AffineTransform"/>
                        <param name="gtx" type="AffineTransform"/>
                    </params>
                    <declaration name="dx" type="float" line="1264"/>
                    <declaration name="dy" type="float" line="1265"/>
                    <declaration name="tx" type="AffineTransform" line="1266"/>
                    <scope line="1267">
                        <scope line="1269"/>
                        <scope line="1274"/>
                    </scope>
                    <declaration name="ptSize" type="int" line="1278"/>
                    <declaration name="aaHint" type="Object" line="1279"/>
                    <scope line="1280">
                        <scope line="1281">
                            <declaration name="shearx" type="double" line="1282"/>
                            <scope line="1283">
                                <declaration name="scaley" type="double" line="1284"/>
                            </scope>
                            <scope line="1287"/>
                        </scope>
                    </scope>
                    <declaration name="aa" type="int" line="1292"/>
                    <declaration name="fm" type="int" line="1293"/>
                    <declaration name="desc" type="FontStrikeDesc" line="1294"/>
                    <declaration name="strike" type="FontStrike" line="1295"/>
                </method>
                <method name="GlyphStrike" type="constructor" line="1298">
                    <params>
                        <param name="sgv" type="StandardGlyphVector"/>
                        <param name="strike" type="FontStrike"/>
                        <param name="dx" type="float"/>
                        <param name="dy" type="float"/>
                    </params>
                </method>
                <method name="getADL" type="void" line="1304">
                    <params>
                        <param name="result" type="ADL"/>
                    </params>
                    <declaration name="sm" type="StrikeMetrics" line="1305"/>
                    <declaration name="delta" type="Point2D.Float" line="1306"/>
                    <scope line="1307"/>
                </method>
                <method name="getGlyphPosition" type="void" line="1319">
                    <params>
                        <param name="glyphID" type="int"/>
                        <param name="ix" type="int"/>
                        <param name="positions" type="float[]"/>
                        <param name="result" type="float[]"/>
                    </params>
                </method>
                <method name="addDefaultGlyphAdvance" type="void" line="1324">
                    <params>
                        <param name="glyphID" type="int"/>
                        <param name="result" type="Point2D.Float"/>
                    </params>
                    <declaration name="adv" type="Point2D.Float" line="1325"/>
                </method>
                <method name="getGlyphOutlineBounds" type="Rectangle2D" line="1329">
                    <params>
                        <param name="glyphID" type="int"/>
                        <param name="x" type="float"/>
                        <param name="y" type="float"/>
                    </params>
                    <declaration name="result" type="Rectangle2D" line="1330"/>
                    <scope line="1331"/>
                    <scope line="1335">
                        <declaration name="gp" type="GeneralPath" line="1336"/>
                    </scope>
                    <scope line="1340"/>
                </method>
                <method name="appendGlyphOutline" type="void" line="1345">
                    <params>
                        <param name="glyphID" type="int"/>
                        <param name="result" type="GeneralPath"/>
                        <param name="x" type="float"/>
                        <param name="y" type="float"/>
                    </params>
                    <declaration name="gp" type="GeneralPath" line="1346"/>
                    <scope line="1347"/>
                    <scope line="1350"/>
                    <declaration name="iterator" type="PathIterator" line="1355"/>
                </method>
            </class>
            <method name="toString" type="String" line="1359"/>
            <method name="appendString" type="StringBuffer" line="1362">
                <params>
                    <param name="buf" type="StringBuffer"/>
                </params>
                <scope line="1363"/>
                <scope line="1366">
                    <scope line="1374">
                        <scope line="1375"/>
                    </scope>
                    <scope line="1381">
                        <scope line="1385">
                            <scope line="1386"/>
                        </scope>
                    </scope>
                    <scope line="1395">
                        <scope line="1399">
                            <scope line="1400"/>
                        </scope>
                    </scope>
                    <scope line="1408"/>
                    <scope line="1411">
                        <scope line="1412"/>
                        <scope line="1415"/>
                        <scope line="1418"/>
                        <scope line="1421"/>
                    </scope>
                </scope>
                <scope line="1426"/>
            </method>
            <class name="ADL" line="1432">
                <declaration name="ascentX" type="float" line="1433"/>
                <declaration name="ascentY" type="float" line="1434"/>
                <declaration name="descentX" type="float" line="1435"/>
                <declaration name="descentY" type="float" line="1436"/>
                <declaration name="leadingX" type="float" line="1437"/>
                <declaration name="leadingY" type="float" line="1438"/>
                <method name="toString" type="String" line="1439"/>
                <method name="toStringBuffer" type="StringBuffer" line="1442">
                    <params>
                        <param name="result" type="StringBuffer"/>
                    </params>
                    <scope line="1443"/>
                </method>
            </class>
        </class>
    </source>