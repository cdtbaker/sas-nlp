<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.font.GlyphJustificationInfo"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.font.LineMetrics"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <interface name="TextLineComponent">
            <comment line="59">
                measures characters in context, in logical order                
            </comment>
            <comment line="62">
                measures characters in context, in logical order                
            </comment>
            <comment line="71">
                return true if this wraps a glyphvector with no baseline rotation and
                 has no styles requiring complex pixel bounds calculations.                
            </comment>
            <comment line="75">
                return the pixel bounds if we wrap a glyphvector, else throw an
                 internal error                
            </comment>
            <method name="getCoreMetrics" type="CoreMetrics" line="44"/>
            <method name="draw" type="void" line="45"/>
            <method name="getCharVisualBounds" type="Rectangle2D" line="46"/>
            <method name="getVisualBounds" type="Rectangle2D" line="47"/>
            <method name="getAdvance" type="float" line="48"/>
            <method name="getOutline" type="Shape" line="49"/>
            <method name="getNumCharacters" type="int" line="51"/>
            <method name="getCharX" type="float" line="53"/>
            <method name="getCharY" type="float" line="54"/>
            <method name="getCharAdvance" type="float" line="55"/>
            <method name="caretAtOffsetIsValid" type="boolean" line="56"/>
            <method name="getLineBreakIndex" type="int" line="59"/>
            <method name="getAdvanceBetween" type="float" line="62"/>
            <method name="getLogicalBounds" type="Rectangle2D" line="64"/>
            <method name="getItalicBounds" type="Rectangle2D" line="66"/>
            <method name="getBaselineTransform" type="AffineTransform" line="68"/>
            <method name="isSimple" type="boolean" line="72"/>
            <method name="getPixelBounds" type="Rectangle" line="76"/>
            <declaration name="LEFT_TO_RIGHT" type="int" line="78"/>
            <javadoc line="78">
                Force subset characters to run left-to-right.                
            </javadoc>
            <declaration name="RIGHT_TO_LEFT" type="int" line="82"/>
            <javadoc line="82">
                Force subset characters to run right-to-left.                
            </javadoc>
            <declaration name="UNCHANGED" type="int" line="87"/>
            <javadoc line="87">
                Leave subset character direction and ordering unchanged.                
            </javadoc>
            <method name="getSubset" type="TextLineComponent" line="92"/>
            <javadoc line="92">
                Return a TextLineComponent for the characters in the range
                  start, limit.  The range is relative to this TextLineComponent
                  (ie, the first character is at 0).                
                <param>
                    dir one of the constants LEFT_TO_RIGHT, RIGHT_TO_LEFT, or UNCHANGED                    
                </param>
            </javadoc>
            <method name="getNumJustificationInfos" type="int" line="100"/>
            <javadoc line="100">
                Return the number of justification records this uses.                
            </javadoc>
            <method name="getJustificationInfos" type="void" line="105"/>
            <javadoc line="105">
                Return GlyphJustificationInfo objects for the characters between
                  charStart and charLimit, starting at offset infoStart.  Infos
                  will be in visual order.  All positions between infoStart and
                  getNumJustificationInfos will be set.  If a position corresponds
                  to a character outside the provided range, it is set to null.                
            </javadoc>
            <method name="applyJustificationDeltas" type="TextLineComponent" line="114"/>
            <javadoc line="114">
                Apply deltas to the data in this component, starting at offset
                  deltaStart, and return the new component.  There are two floats
                  for each justification info, for a total of 2  getNumJustificationInfos.
                  The first delta is the left adjustment, the second is the right
                  adjustment.
                  &lt;p&gt;
                  If flags[0] is true on entry, rejustification is allowed.  If
                  the new component requires rejustification (ligatures were
                  formed or split), flags[0] will be set on exit.                
            </javadoc>
        </interface>
    </source>