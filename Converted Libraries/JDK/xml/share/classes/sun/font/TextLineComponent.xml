<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.font.GlyphJustificationInfo"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.font.LineMetrics"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <interface name="TextLineComponent">
            <method name="getCoreMetrics" type="CoreMetrics" line="11"/>
            <method name="draw" type="void" line="12"/>
            <method name="getCharVisualBounds" type="Rectangle2D" line="13"/>
            <method name="getVisualBounds" type="Rectangle2D" line="14"/>
            <method name="getAdvance" type="float" line="15"/>
            <method name="getOutline" type="Shape" line="16"/>
            <method name="getNumCharacters" type="int" line="17"/>
            <method name="getCharX" type="float" line="18"/>
            <method name="getCharY" type="float" line="19"/>
            <method name="getCharAdvance" type="float" line="20"/>
            <method name="caretAtOffsetIsValid" type="boolean" line="21"/>
            <method name="getLineBreakIndex" type="int" line="22"/>
            <method name="getAdvanceBetween" type="float" line="23"/>
            <method name="getLogicalBounds" type="Rectangle2D" line="24"/>
            <method name="getItalicBounds" type="Rectangle2D" line="25"/>
            <method name="getBaselineTransform" type="AffineTransform" line="26"/>
            <method name="isSimple" type="boolean" line="27"/>
            <method name="getPixelBounds" type="Rectangle" line="28"/>
            <declaration name="LEFT_TO_RIGHT" type="int" line="29"/>
            <javadoc line="29">
                Force subset characters to run left-to-right.                
            </javadoc>
            <declaration name="RIGHT_TO_LEFT" type="int" line="33"/>
            <javadoc line="33">
                Force subset characters to run right-to-left.                
            </javadoc>
            <declaration name="UNCHANGED" type="int" line="37"/>
            <javadoc line="37">
                Leave subset character direction and ordering unchanged.                
            </javadoc>
            <method name="getSubset" type="TextLineComponent" line="41"/>
            <javadoc line="41">
                Return a TextLineComponent for the characters in the range
                  start, limit.  The range is relative to this TextLineComponent
                  (ie, the first character is at 0).                
                <param>
                    dir one of the constants LEFT_TO_RIGHT, RIGHT_TO_LEFT, or UNCHANGED                    
                </param>
            </javadoc>
            <method name="getNumJustificationInfos" type="int" line="48"/>
            <javadoc line="48">
                Return the number of justification records this uses.                
            </javadoc>
            <method name="getJustificationInfos" type="void" line="52"/>
            <javadoc line="52">
                Return GlyphJustificationInfo objects for the characters between
                  charStart and charLimit, starting at offset infoStart.  Infos
                  will be in visual order.  All positions between infoStart and
                  getNumJustificationInfos will be set.  If a position corresponds
                  to a character outside the provided range, it is set to null.                
            </javadoc>
            <method name="applyJustificationDeltas" type="TextLineComponent" line="60"/>
            <javadoc line="60">
                Apply deltas to the data in this component, starting at offset
                  deltaStart, and return the new component.  There are two floats
                  for each justification info, for a total of 2  getNumJustificationInfos.
                  The first delta is the left adjustment, the second is the right
                  adjustment.
                  &lt;p&gt;
                  If flags[0] is true on entry, rejustification is allowed.  If
                  the new component requires rejustification (ligatures were
                  formed or split), flags[0] will be set on exit.                
            </javadoc>
        </interface>
    </source>