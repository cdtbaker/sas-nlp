<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Point2D"/>
        <class name="StrikeMetrics" line="53">
            <comment line="68">
                The no-args constructor is used by CompositeStrike, which then
                 merges in the metrics of physical fonts.
                 The approach here is the same as earlier releases but it is flawed
                 take for example the following which ignores leading for simplicity.
                 Say we have a composite with an element asc=-9, dsc=2, and another with
                 asc=-7, dsc=3.  The merged font is (-9,3) for height of -(-9)+3=12.
                 Suppose this same font has been derived with a 180% rotation
                 Now its signs for ascentdescent are reversed. Its (9,-2) and (7,-3)
                 Its merged values are (using the code in this class) (7,-2) for
                 a height of -(7)+-2 = =-9!
                 We need to have a more intelligent merging algorithm,
                 which so far as I can see needs to apply an inverse of the font
                 tx, do its merging, and then reapply the font tx.
                 This wouldn&apos;t often be a problem as there rarely is a font TX, and
                 the tricky part is getting the information. Probably the no-args
                 constructor needs to pass a TX in to be applied to all merges.
                 CompositeStrike would be left with the problem of figuring out what
                 tx to use.
                 But at least for now we are probably no worse than 1.4 ...
                 REMIND: FIX THIS.                
            </comment>
            <comment line="125">
                Currently only used to merge together slot metrics to create
                 the metrics for a composite font.                
            </comment>
            <comment line="165">
                Used to transform the values back into user space.
                 This is done ONCE by the strike so clients should not need
                 to worry about this                
            </comment>
            <declaration name="ascentX" type="float" line="55"/>
            <declaration name="ascentY" type="float" line="56"/>
            <declaration name="descentX" type="float" line="57"/>
            <declaration name="descentY" type="float" line="58"/>
            <declaration name="baselineX" type="float" line="59"/>
            <declaration name="baselineY" type="float" line="60"/>
            <declaration name="leadingX" type="float" line="61"/>
            <declaration name="leadingY" type="float" line="62"/>
            <declaration name="maxAdvanceX" type="float" line="63"/>
            <declaration name="maxAdvanceY" type="float" line="64"/>
            <method name="StrikeMetrics" type="constructor" line="88"/>
            <method name="StrikeMetrics" type="constructor" line="95">
                <params>
                    <param name="ax" type="float"/>
                    <param name="ay" type="float"/>
                    <param name="dx" type="float"/>
                    <param name="dy" type="float"/>
                    <param name="bx" type="float"/>
                    <param name="by" type="float"/>
                    <param name="lx" type="float"/>
                    <param name="ly" type="float"/>
                    <param name="mx" type="float"/>
                    <param name="my" type="float"/>
                </params>
            </method>
            <method name="getAscent" type="float" line="108"/>
            <method name="getDescent" type="float" line="112"/>
            <method name="getLeading" type="float" line="116"/>
            <method name="getMaxAdvance" type="float" line="120"/>
            <method name="merge" type="void" line="128">
                <params>
                    <param name="other" type="StrikeMetrics"/>
                </params>
                <scope line="129"/>
                <scope line="132"/>
                <scope line="135"/>
                <scope line="138"/>
                <scope line="141"/>
                <scope line="144"/>
                <scope line="147"/>
                <scope line="150"/>
                <scope line="153"/>
                <scope line="156"/>
                <scope line="159"/>
            </method>
            <method name="convertToUserSpace" type="void" line="168">
                <params>
                    <param name="invTx" type="AffineTransform"/>
                </params>
                <declaration name="pt2D" type="Point2D.Float" line="169"/>
            </method>
            <method name="toString" type="String" line="192"/>
        </class>
    </source>