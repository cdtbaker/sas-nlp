<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <import package="java.lang.ref.Reference"/>
        <import package="java.awt.FontFormatException"/>
        <import package="java.awt.geom.GeneralPath"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.io.File"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="sun.java2d.Disposer"/>
        <import package="sun.java2d.DisposerRecord"/>
        <import package="java.io.IOException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <class name="FileFont" line="43">
            <extends class="PhysicalFont"/>
            <comment line="48">
                IO and file operations are always synchronized on the font
                 object. Two threads can be accessing the font and retrieving
                 information, and synchronized only to the extent that filesystem
                 operations require.
                 A limited number of files can be open at a time, to limit the
                 absorption of file descriptors. If a file needs to be opened
                 when there are none free, then the synchronization of all IO
                 ensures that any in progress operation will complete before some
                 other thread closes the descriptor in order to allocate another one.                
            </comment>
            <comment line="58">
                NB consider using a RAF. FIS has finalize method so may take a
                 little longer to be GC&apos;d. We don&apos;t use this stream at all anyway.
                 In fact why increase the size of a FileFont object if the stream
                 isn&apos;t needed ..
                protected FileInputStream stream;
                protected FileChannel channel;                
            </comment>
            <comment line="68">
                The following variables are used, (and in the case of the arrays,
                 only initialised) for select fonts where a native scaler may be
                 used to get glyph images and metrics.
                 glyphToCharMap is filled in on the fly and used to do a reverse
                 lookup when a FileFont needs to get the charcode back from a glyph
                 code so it can re-map via a NativeGlyphMapper to get a native glyph.
                 This isn&apos;t a big hit in time, since a boolean test is sufficient
                 to choose the usual default path, nor in memory for fonts which take
                 the native path, since fonts have contiguous zero-based glyph indexes,
                 and these obviously do all exist in the font.                
            </comment>
            <comment line="83">
                @throws FontFormatException - if the font can&apos;t be opened                
            </comment>
            <comment line="104">
                This method needs to be accessible to FontManager if there is
                 file pool management. It may be a no-op.                
            </comment>
            <comment line="110">
                This is the public interface. The subclasses need to implement
                 this. The returned block may be longer than the requested length.                
            </comment>
            <comment line="125">
                This is called when a font scaler is determined to
                 be unusable (ie bad).
                 We want to replace current scaler with NullFontScaler, so
                 we never try to use same font scaler again.
                 Scaler native resources could have already been disposed
                 or they will be eventually by Java2D disposer.
                 However, it should be safe to call dispose() explicitly here.
                
                 For safety we also invalidate all strike&apos;s scaler context.
                 So, in case they cache pointer to native scaler
                 it will not ever be used.
                
                 It also appears desirable to remove all the entries from the
                 cache so no other code will pick them up. But we can&apos;t just
                 &apos;delete&apos; them as code may be using them. And simply dropping
                 the reference to the cache will make the reference objects
                 unreachable and so they will not get disposed.
                 Since a strike may hold (via java arrays) native pointers to many
                 rasterised glyphs, this would be a memory leak.
                 The solution is :
                 - to move all the entries to another map where they
                   are no longer locatable
                 - update FontStrikeDisposer to be able to distinguish which
                 map they are held in via a boolean flag
                 Since this isn&apos;t expected to be anything other than an extremely
                 rare maybe it is not worth doing this last part.                
            </comment>
            <comment line="234">
                T1 &amp; TT implementation differ so this method is abstract.                
            </comment>
            <declaration name="useJavaRasterizer" type="boolean" line="45"/>
            <declaration name="fileSize" type="int" line="63"/>
            <declaration name="scaler" type="FontScaler" line="65"/>
            <declaration name="checkedNatives" type="boolean" line="78"/>
            <declaration name="useNatives" type="boolean" line="79"/>
            <declaration name="nativeFonts" type="NativeFont[]" line="80"/>
            <declaration name="glyphToCharMap" type="char[]" line="81"/>
            <method name="FileFont" type="constructor" line="86">
                <params>
                    <param name="platname" type="String"/>
                    <param name="nativeNames" type="Object"/>
                </params>
            </method>
            <method name="createStrike" type="FontStrike" line="91">
                <params>
                    <param name="desc" type="FontStrikeDesc"/>
                </params>
                <scope line="92"/>
            </method>
            <method name="checkUseNatives" type="boolean" line="98"/>
            <method name="close" type="void" line="106"/>
            <method name="readBlock" type="ByteBuffer" line="113"/>
            <method name="canDoStyle" type="boolean" line="115">
                <params>
                    <param name="style" type="int"/>
                </params>
            </method>
            <method name="setFileToRemove" type="void" line="119">
                <params>
                    <param name="file" type="File"/>
                    <param name="tracker" type="CreatedFontTracker"/>
                </params>
            </method>
            <method name="deregisterFontAndClearStrikeCache" type="void" line="151">
                <comment line="158">
                    NB we know these are all FileFontStrike instances
                     because the cache is on this FileFont                    
                </comment>
                <declaration name="fm" type="SunFontManager" line="152"/>
                <scope line="155">
                    <scope line="156">
                        <declaration name="strike" type="FileFontStrike" line="160"/>
                        <scope line="161"/>
                    </scope>
                </scope>
            </method>
            <method name="getFontMetrics" type="StrikeMetrics" line="170">
                <params>
                    <param name="pScalerContext" type="long"/>
                </params>
                <scope line="171"/>
                <scope line="173"/>
            </method>
            <method name="getGlyphAdvance" type="float" line="179">
                <params>
                    <param name="pScalerContext" type="long"/>
                    <param name="glyphCode" type="int"/>
                </params>
                <scope line="180"/>
                <scope line="182"/>
            </method>
            <method name="getGlyphMetrics" type="void" line="188">
                <params>
                    <param name="pScalerContext" type="long"/>
                    <param name="glyphCode" type="int"/>
                    <param name="metrics" type="Point2D.Float"/>
                </params>
                <scope line="189"/>
                <scope line="191"/>
            </method>
            <method name="getGlyphImage" type="long" line="197">
                <params>
                    <param name="pScalerContext" type="long"/>
                    <param name="glyphCode" type="int"/>
                </params>
                <scope line="198"/>
                <scope line="200"/>
            </method>
            <method name="getGlyphOutlineBounds" type="Rectangle2D.Float" line="206">
                <params>
                    <param name="pScalerContext" type="long"/>
                    <param name="glyphCode" type="int"/>
                </params>
                <scope line="207"/>
                <scope line="209"/>
            </method>
            <method name="getGlyphOutline" type="GeneralPath" line="215">
                <params>
                    <param name="pScalerContext" type="long"/>
                    <param name="glyphCode" type="int"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <scope line="216"/>
                <scope line="218"/>
            </method>
            <method name="getGlyphVectorOutline" type="GeneralPath" line="224">
                <params>
                    <param name="pScalerContext" type="long"/>
                    <param name="glyphs" type="int[]"/>
                    <param name="numGlyphs" type="int"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <scope line="225"/>
                <scope line="227"/>
            </method>
            <method name="getScaler" type="FontScaler" line="235"/>
            <method name="getUnitsPerEm" type="long" line="237"/>
            <class name="CreatedFontFileDisposerRecord" line="241">
                <implements interface="DisposerRecord"/>
                <declaration name="fontFile" type="File" line="244"/>
                <declaration name="tracker" type="CreatedFontTracker" line="245"/>
                <method name="CreatedFontFileDisposerRecord" type="constructor" line="248">
                    <params>
                        <param name="file" type="File"/>
                        <param name="tracker" type="CreatedFontTracker"/>
                    </params>
                </method>
                <method name="dispose" type="void" line="253">
                    <comment line="263">
                        REMIND: is it possible that the file is
                         still open? It will be closed when the
                         font2D is disposed but could this code
                         execute first? If so the file would not
                         be deleted on MS-windows.                        
                    </comment>
                    <comment line="270">
                                                
                    </comment>
                    <comment line="271">
                        FIXME: still need to be refactored                        
                    </comment>
                    <anonymous_class line="255">
                        <method name="run" type="Object" line="256">
                            <comment line="263">
                                REMIND: is it possible that the file is
                                 still open? It will be closed when the
                                 font2D is disposed but could this code
                                 execute first? If so the file would not
                                 be deleted on MS-windows.                                
                            </comment>
                            <comment line="270">
                                                                
                            </comment>
                            <comment line="271">
                                FIXME: still need to be refactored                                
                            </comment>
                            <scope line="257">
                                <scope line="258">
                                    <scope line="259"/>
                                </scope>
                                <scope line="272"/>
                            </scope>
                        </method>
                    </anonymous_class>
                </method>
            </class>
            <method name="getPublicFileName" type="String" line="281">
                <comment line="319">
                    unable to verify whether value of java.io.tempdir will be
                     exposed, so return only a name of the font file.                    
                </comment>
                <declaration name="sm" type="SecurityManager" line="282"/>
                <scope line="283"/>
                <declaration name="canReadProperty" type="boolean" line="286"/>
                <scope line="288"/>
                <scope line="290"/>
                <scope line="294"/>
                <declaration name="f" type="File" line="298"/>
                <declaration name="isTmpFile" type="Boolean" line="300"/>
                <scope line="301">
                    <anonymous_class line="303">
                        <method name="run" type="Boolean" line="304">
                            <declaration name="tmp" type="File" line="305"/>
                            <scope line="306">
                                <declaration name="tpath" type="String" line="307"/>
                                <declaration name="fpath" type="String" line="308"/>
                            </scope>
                            <scope line="311"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="317"/>
            </method>
        </class>
    </source>