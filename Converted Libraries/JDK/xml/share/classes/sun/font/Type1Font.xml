<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.awt.FontFormatException"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.io.IOException"/>
        <import package="java.io.RandomAccessFile"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.ByteOrder"/>
        <import package="java.nio.MappedByteBuffer"/>
        <import package="java.nio.BufferUnderflowException"/>
        <import package="java.nio.channels.ClosedChannelException"/>
        <import package="java.nio.channels.FileChannel"/>
        <import package="sun.java2d.Disposer"/>
        <import package="sun.java2d.DisposerRecord"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.HashMap"/>
        <import package="java.awt.Font"/>
        <class name="Type1Font" line="78">
            <extends class="FileFont"/>
            <comment line="229">
                                
            </comment>
            <comment line="359">
                Need to parse the ascii contents of the Type1 font file,
                 looking for FullName, FamilyName and FontName.
                 If explicit names are not found then extract them from first text line.
                 Operating on bytes so can&apos;t use Java String utilities, which
                 is a large part of why this is a hack.
                
                 Also check for mandatory FontType and verify if it is supported.                
            </comment>
            <comment line="557">
                                
            </comment>
            <comment line="574">
                Token types:
                 PSNAMETOKEN - 
                 PSSTRINGTOKEN - literal text string                
            </comment>
            <comment line="600">
                Read simple token (sequence of non-whitespace characters)
                starting from the current position.                
            </comment>
            <class name="T1DisposerRecord" line="80">
                <implements interface="DisposerRecord"/>
                <declaration name="fileName" type="String" line="81"/>
                <method name="T1DisposerRecord" type="constructor" line="83">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="dispose" type="void" line="87">
                    <anonymous_class line="89">
                        <method name="run" type="Object" line="90">
                            <scope line="92"/>
                        </method>
                    </anonymous_class>
                </method>
            </class>
            <declaration name="bufferRef" type="WeakReference" line="101"/>
            <declaration name="psName" type="String" line="103"/>
            <declaration name="styleAbbreviationsMapping" type="HashMap" line="105"/>
            <declaration name="styleNameTokes" type="HashSet" line="106"/>
            <scope line="108">
                <declaration name="nm" type="String" line="117"/>
                <declaration name="abbrv" type="String" line="124"/>
                <declaration name="styleTokens" type="String" line="134"/>
                <scope line="140"/>
                <scope line="143"/>
            </scope>
            <javadoc line="149">
                Constructs a Type1 Font.                
                <param>
                    platname - Platform identifier of the font. Typically file name.                    
                </param>
                <param>
                    nativeNames - Native names - typically XLFDs on Unix.                    
                </param>
            </javadoc>
            <method name="Type1Font" type="constructor" line="155">
                <params>
                    <param name="platname" type="String"/>
                    <param name="nativeNames" type="Object"/>
                </params>
            </method>
            <javadoc line="160">
                - does basic verification of the file
                  - reads the names (full, family).
                  - determines the style of the font.                
                <throws>
                    FontFormatException - if the font can't be opened
                      or fails verification,  or there's no usable cmap                    
                </throws>
            </javadoc>
            <method name="Type1Font" type="constructor" line="168">
                <params>
                    <param name="platname" type="String"/>
                    <param name="nativeNames" type="Object"/>
                    <param name="createdCopy" type="boolean"/>
                </params>
                <scope line="172"/>
                <scope line="174">
                    <scope line="175">
                        <declaration name="ref" type="T1DisposerRecord" line="176"/>
                    </scope>
                    <scope line="180"/>
                    <scope line="182"/>
                </scope>
            </method>
            <method name="getBuffer" type="ByteBuffer" line="188">
                <comment line="192">
                    System.out.println(&quot;open T1 &quot; + platName);                    
                </comment>
                <comment line="214">
                    NIO IO is interruptible, recurse to retry operation.
                     Clear interrupts before recursing in case NIO didn&apos;t.                    
                </comment>
                <declaration name="mapBuf" type="MappedByteBuffer" line="189"/>
                <scope line="190">
                    <scope line="192">
                        <anonymous_class line="195">
                            <method name="run" type="Object" line="196">
                                <scope line="197"/>
                                <scope line="199"/>
                            </method>
                        </anonymous_class>
                        <declaration name="raf" type="RandomAccessFile" line="193"/>
                        <declaration name="fc" type="FileChannel" line="204"/>
                    </scope>
                    <scope line="210"/>
                    <scope line="212"/>
                    <scope line="218"/>
                </scope>
            </method>
            <method name="close" type="void" line="225"/>
            <method name="readFile" type="void" line="229">
                <params>
                    <param name="buffer" type="ByteBuffer"/>
                </params>
                <comment line="256">
                    NIO IO is interruptible, recurse to retry operation.
                     Clear interrupts before recursing in case NIO didn&apos;t.                    
                </comment>
                <declaration name="raf" type="RandomAccessFile" line="230"/>
                <declaration name="fc" type="FileChannel" line="231"/>
                <scope line="232">
                    <anonymous_class line="235">
                        <method name="run" type="Object" line="236">
                            <scope line="237"/>
                            <scope line="239"/>
                        </method>
                    </anonymous_class>
                    <scope line="245"/>
                </scope>
                <scope line="246"/>
                <scope line="247">
                    <scope line="248">
                        <scope line="249"/>
                    </scope>
                    <scope line="253"/>
                </scope>
                <scope line="260"/>
                <scope line="261">
                    <scope line="262">
                        <scope line="263"/>
                        <scope line="265"/>
                    </scope>
                </scope>
            </method>
            <method name="readBlock" type="ByteBuffer" line="271">
                <params>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="mappedBuf" type="ByteBuffer" line="272"/>
                <scope line="273">
                    <scope line="275"/>
                </scope>
                <scope line="280"/>
            </method>
            <method name="verify" type="void" line="285">
                <comment line="287">
                    Normal usage should not call getBuffer(), as its state
                     ie endianness, position etc, are shared. verify() can do
                     this as its called only from within the constructor before
                     there are other users of this object.                    
                </comment>
                <declaration name="bb" type="ByteBuffer" line="291"/>
                <scope line="292"/>
                <declaration name="val" type="int" line="295"/>
                <scope line="296"/>
                <scope line="299"/>
                <scope line="304"/>
            </method>
            <method name="getFileSize" type="int" line="310">
                <scope line="311">
                    <scope line="312"/>
                    <scope line="314"/>
                </scope>
            </method>
            <method name="verifyPFA" type="void" line="320">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
                <comment line="322">
                    0x2521 is %!                    
                </comment>
                <comment line="325">
                    remind - additional verification needed?                    
                </comment>
                <scope line="321"/>
            </method>
            <method name="verifyPFB" type="void" line="327">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
                <declaration name="pos" type="int" line="329"/>
                <scope line="330">
                    <scope line="331">
                        <declaration name="segType" type="int" line="332"/>
                        <scope line="333">
                            <declaration name="segLen" type="int" line="335"/>
                            <scope line="337"/>
                        </scope>
                        <scope line="341"/>
                        <scope line="343"/>
                    </scope>
                    <scope line="346"/>
                    <scope line="348"/>
                </scope>
            </method>
            <declaration name="PSEOFTOKEN" type="int" line="354"/>
            <declaration name="PSNAMETOKEN" type="int" line="355"/>
            <declaration name="PSSTRINGTOKEN" type="int" line="356"/>
            <method name="initNames" type="void" line="366">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
                <comment line="371">
                    Parse font looking for explicit FullName, FamilyName and FontName
                      (acording to Type1 spec they are optional)                    
                </comment>
                <comment line="392">
                    look for
                    FontType id def                    
                </comment>
                <comment line="401">
                    skip token                    
                </comment>
                <comment line="411">
                                        
                </comment>
                <comment line="416">
                    no explicit FontName                    
                </comment>
                <comment line="417">
                    Try to extract font name from the first text line.
                     According to Type1 spec first line consist of
                      &quot;%!FontType1-SpecVersion: FontName FontVersion&quot;
                     or
                      &quot;%!PS-AdobeFont-1.0: FontName version&quot;                    
                </comment>
                <comment line="423">
                    if pfb (do not start with &quot;%!&quot;)                    
                </comment>
                <comment line="424">
                    skip segment header and &quot;%!&quot;                    
                </comment>
                <comment line="426">
                    NB: assume that first segment is ASCII one
                      (is it possible to have valid Type1 font with first binary segment?)                    
                </comment>
                <comment line="436">
                    if we got to the end of file then we did not find at least one of FullName or FamilyName
                    Try to deduce missing names from present ones
                    NB: At least psName must be already initialized by this moment                    
                </comment>
                <comment line="440">
                    if we find fullName or familyName then use it as another name too                    
                </comment>
                <comment line="445">
                    fallback - use postscript font name to deduce full and family names                    
                </comment>
                <declaration name="eof" type="boolean" line="367"/>
                <declaration name="fontType" type="String" line="368"/>
                <scope line="369">
                    <scope line="372">
                        <declaration name="tokenType" type="int" line="373"/>
                        <scope line="374">
                            <declaration name="pos" type="int" line="375"/>
                            <scope line="376">
                                <declaration name="s" type="String" line="377"/>
                                <scope line="378">
                                    <scope line="379"/>
                                </scope>
                                <scope line="382">
                                    <scope line="383"/>
                                </scope>
                                <scope line="386">
                                    <scope line="387"/>
                                </scope>
                                <scope line="390">
                                    <declaration name="token" type="String" line="394"/>
                                    <scope line="395"/>
                                </scope>
                            </scope>
                            <scope line="399"/>
                        </scope>
                        <scope line="402"/>
                    </scope>
                </scope>
                <scope line="406"/>
                <scope line="411"/>
                <scope line="415">
                    <scope line="422"/>
                    <declaration name="formatType" type="String" line="428"/>
                    <scope line="429"/>
                </scope>
                <scope line="438">
                    <scope line="440"/>
                    <scope line="442"/>
                    <scope line="444"/>
                </scope>
            </method>
            <method name="fullName2FamilyName" type="String" line="451">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="454">
                    length of family name part                    
                </comment>
                <comment line="456">
                    FamilyName is truncated version of FullName
                    Truncated tail must contain only style modifiers                    
                </comment>
                <comment line="465">
                    as soon as we meet first non style token truncate
                     current tail and return                    
                </comment>
                <comment line="473">
                    should not happen                    
                </comment>
                <declaration name="res" type="String" line="452"/>
                <declaration name="len" type="int" line="453"/>
                <scope line="460">
                    <scope line="466"/>
                </scope>
            </method>
            <method name="expandAbbreviation" type="String" line="475">
                <params>
                    <param name="abbr" type="String"/>
                </params>
            </method>
            <method name="isStyleToken" type="boolean" line="481">
                <params>
                    <param name="token" type="String"/>
                </params>
            </method>
            <method name="psName2FullName" type="String" line="485">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="490">
                    According to Adobe technical note #5088 psName (aka FontName) has form
                       &lt;Family Name&gt;&lt;VendorID&gt;-&lt;Weight&gt;&lt;Width&gt;&lt;Slant&gt;&lt;Character Set&gt;
                    where spaces are not allowed.                    
                </comment>
                <comment line="494">
                    Conversion: Expand abbreviations in style portion (everything after &apos;-&apos;),
                                replace &apos;-&apos; with space and insert missing spaces                    
                </comment>
                <declaration name="res" type="String" line="486"/>
                <declaration name="pos" type="int" line="487"/>
                <scope line="496"/>
                <scope line="499"/>
            </method>
            <method name="psName2FamilyName" type="String" line="506">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="510">
                    According to Adobe technical note #5088 psName (aka FontName) has form
                       &lt;Family Name&gt;&lt;VendorID&gt;-&lt;Weight&gt;&lt;Width&gt;&lt;Slant&gt;&lt;Character Set&gt;
                    where spaces are not allowed.                    
                </comment>
                <comment line="514">
                    Conversion: Truncate style portion (everything after &apos;-&apos;)
                                and insert missing spaces                    
                </comment>
                <declaration name="tmp" type="String" line="507"/>
                <scope line="516"/>
            </method>
            <method name="nextCapitalLetter" type="int" line="523">
                <params>
                    <param name="s" type="String"/>
                    <param name="off" type="int"/>
                </params>
                <scope line="524"/>
            </method>
            <method name="expandName" type="String" line="531">
                <params>
                    <param name="s" type="String"/>
                    <param name="tryExpandAbbreviations" type="boolean"/>
                </params>
                <declaration name="res" type="StringBuffer" line="532"/>
                <declaration name="start" type="int" line="533"/>
                <scope line="535">
                    <scope line="537"/>
                    <scope line="541"/>
                    <scope line="545"/>
                    <scope line="547"/>
                </scope>
            </method>
            <method name="skip" type="byte" line="557">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
                <declaration name="b" type="byte" line="558"/>
                <scope line="559">
                    <scope line="560">
                        <scope line="562"/>
                    </scope>
                </scope>
                <scope line="567"/>
            </method>
            <method name="nextTokenType" type="int" line="578">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
                <comment line="585">
                    PS defined name follows.                    
                </comment>
                <comment line="587">
                    PS string follows                    
                </comment>
                <scope line="580">
                    <declaration name="b" type="byte" line="581"/>
                    <scope line="583">
                        <scope line="584"/>
                        <scope line="586"/>
                        <scope line="588"/>
                        <scope line="590"/>
                    </scope>
                </scope>
                <scope line="594"/>
            </method>
            <method name="getSimpleToken" type="String" line="602">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
                <declaration name="pos1" type="int" line="604"/>
                <declaration name="pos2" type="int" line="606"/>
                <declaration name="nameBytes" type="byte[]" line="607"/>
                <scope line="610"/>
                <scope line="612"/>
            </method>
            <method name="getString" type="String" line="617">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
                <declaration name="pos1" type="int" line="618"/>
                <declaration name="pos2" type="int" line="620"/>
                <declaration name="nameBytes" type="byte[]" line="621"/>
                <scope line="624"/>
                <scope line="626"/>
            </method>
            <method name="getPostscriptName" type="String" line="632"/>
            <method name="getScaler" type="FontScaler" line="636">
                <scope line="637"/>
            </method>
            <method name="getMapper" type="CharToGlyphMapper" line="644">
                <scope line="645"/>
            </method>
            <method name="getNumGlyphs" type="int" line="651">
                <scope line="652"/>
                <scope line="654"/>
            </method>
            <method name="getMissingGlyphCode" type="int" line="660">
                <scope line="661"/>
                <scope line="663"/>
            </method>
            <method name="getGlyphCode" type="int" line="669">
                <params>
                    <param name="charCode" type="char"/>
                </params>
                <scope line="670"/>
                <scope line="672"/>
            </method>
            <method name="toString" type="String" line="678"/>
        </class>
    </source>