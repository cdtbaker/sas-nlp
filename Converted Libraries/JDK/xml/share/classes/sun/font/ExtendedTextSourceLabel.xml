<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.font.GlyphJustificationInfo"/>
        <import package="java.awt.font.GlyphMetrics"/>
        <import package="java.awt.font.LineMetrics"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.util.Map"/>
        <class name="ExtendedTextSourceLabel" line="15">
            <extends class="ExtendedTextLabel"/>
            <implements interface="Decoration.Label"/>
            <javadoc line="15">
                Default implementation of ExtendedTextLabel.                
            </javadoc>
            <declaration name="source" type="TextSource" line="19"/>
            <declaration name="decorator" type="Decoration" line="20"/>
            <declaration name="font" type="Font" line="21"/>
            <declaration name="baseTX" type="AffineTransform" line="22"/>
            <declaration name="cm" type="CoreMetrics" line="23"/>
            <declaration name="lb" type="Rectangle2D" line="24"/>
            <declaration name="ab" type="Rectangle2D" line="25"/>
            <declaration name="vb" type="Rectangle2D" line="26"/>
            <declaration name="ib" type="Rectangle2D" line="27"/>
            <declaration name="gv" type="StandardGlyphVector" line="28"/>
            <declaration name="charinfo" type="float[]" line="29"/>
            <javadoc line="30">
                Create from a TextSource.                
            </javadoc>
            <method name="ExtendedTextSourceLabel" type="constructor" line="33">
                <params>
                    <param name="source" type="TextSource"/>
                    <param name="decorator" type="Decoration"/>
                </params>
            </method>
            <javadoc line="38">
                Create from a TextSource, optionally using cached data from oldLabel starting at the offset.
                  If present oldLabel must have been created from a run of text that includes the text used in
                  the new label.  Start in source corresponds to logical character offset in oldLabel.                
            </javadoc>
            <method name="ExtendedTextSourceLabel" type="constructor" line="43">
                <params>
                    <param name="source" type="TextSource"/>
                    <param name="oldLabel" type="ExtendedTextSourceLabel"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <method name="finishInit" type="void" line="48">
                <declaration name="atts" type="Map&amp;lt;TextAttribute,?&amp;gt;" line="50"/>
                <scope line="52"/>
                <scope line="55">
                    <declaration name="charTX" type="AffineTransform" line="56"/>
                    <scope line="57"/>
                    <declaration name="lm" type="LineMetrics" line="61"/>
                </scope>
            </method>
            <method name="getLogicalBounds" type="Rectangle2D" line="65"/>
            <method name="getLogicalBounds" type="Rectangle2D" line="68">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <scope line="69"/>
            </method>
            <method name="getAdvance" type="float" line="74">
                <scope line="75"/>
            </method>
            <method name="getVisualBounds" type="Rectangle2D" line="80">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <scope line="81"/>
            </method>
            <method name="getAlignBounds" type="Rectangle2D" line="86">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <scope line="87"/>
            </method>
            <method name="getItalicBounds" type="Rectangle2D" line="92">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <scope line="93"/>
            </method>
            <method name="getPixelBounds" type="Rectangle" line="98">
                <params>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="isSimple" type="boolean" line="101"/>
            <method name="getBaselineTransform" type="AffineTransform" line="104"/>
            <method name="handleGetOutline" type="Shape" line="107">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="getOutline" type="Shape" line="110">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="handleDraw" type="void" line="113">
                <params>
                    <param name="g" type="Graphics2D"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="draw" type="void" line="116">
                <params>
                    <param name="g" type="Graphics2D"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <javadoc line="119">
                The logical bounds extends from the origin of the glyphvector to the
                  position at which a following glyphvector&apos;s origin should be placed.
                  We always assume glyph vectors are rendered from left to right, so
                  the origin is always to the left.
                  &lt;p&gt; On a left-to-right run, combining marks and &apos;ligatured away&apos;
                  characters are to the right of their base characters.  The charinfo
                  array will record the character positions for these &apos;missing&apos; characters
                  as being at the origin+advance of the base glyph, with zero advance.
                  (This is not necessarily the same as the glyph position, for example,
                  an umlaut glyph may have a position to the left of this point, it depends
                  on whether the font was designed so that such glyphs overhang to the left
                  of their origin, or whether it presumes some kind of kerning to position
                  the glyphs).  Anyway, the left of the bounds is the origin of the first
                  logical (leftmost) character, and the right is the origin + advance of the
                  last logical (rightmost) character.
                  &lt;p&gt; On a right-to-left run, these special characters are to the left
                  of their base characters.  Again, since &apos;glyph position&apos; has been abstracted
                  away, we can use the origin of the leftmost character, and the origin +
                  advance of the rightmost character.
                  &lt;p&gt; On a mixed run (hindi) we can&apos;t rely on the first logical character
                  being the leftmost character.  However we can again rely on the leftmost
                  character origin and the rightmost character + advance.                
            </javadoc>
            <method name="createLogicalBounds" type="Rectangle2D" line="143"/>
            <method name="handleGetVisualBounds" type="Rectangle2D" line="146"/>
            <javadoc line="149">
                Like createLogicalBounds except ignore leading and logically trailing white space.
                  this assumes logically trailing whitespace is also visually trailing.
                  Whitespace is anything that has a zero visual width, regardless of its advance.
                  &lt;p&gt; We make the same simplifying assumptions as in createLogicalBounds, namely
                  that we can rely on the charinfo to shield us from any glyph positioning oddities
                  in the font that place the glyph for a character at other than the pos + advance
                  of the character to its left.  So we no longer need to skip chars with zero
                  advance, as their bounds (right and left) are already correct.                
            </javadoc>
            <method name="createAlignBounds" type="Rectangle2D" line="159">
                <declaration name="info" type="float[]" line="160"/>
                <declaration name="al" type="float" line="161"/>
                <declaration name="at" type="float" line="162"/>
                <declaration name="aw" type="float" line="163"/>
                <declaration name="ah" type="float" line="164"/>
                <declaration name="lineIsLTR" type="boolean" line="165"/>
                <declaration name="rn" type="int" line="166"/>
                <scope line="167">
                    <scope line="168"/>
                </scope>
                <scope line="172">
                    <declaration name="ln" type="int" line="173"/>
                    <scope line="174"/>
                </scope>
            </method>
            <method name="createItalicBounds" type="Rectangle2D" line="182">
                <declaration name="ia" type="float" line="183"/>
                <declaration name="lb" type="Rectangle2D" line="184"/>
                <declaration name="l" type="float" line="185"/>
                <declaration name="t" type="float" line="186"/>
                <declaration name="r" type="float" line="187"/>
                <declaration name="b" type="float" line="188"/>
                <scope line="189">
                    <scope line="190"/>
                    <scope line="194"/>
                </scope>
            </method>
            <method name="getGV" type="StandardGlyphVector" line="201">
                <scope line="202"/>
            </method>
            <method name="createGV" type="StandardGlyphVector" line="207">
                <declaration name="frc" type="FontRenderContext" line="208"/>
                <declaration name="flags" type="int" line="209"/>
                <declaration name="context" type="char[]" line="210"/>
                <declaration name="start" type="int" line="211"/>
                <declaration name="length" type="int" line="212"/>
                <declaration name="gl" type="GlyphLayout" line="213"/>
            </method>
            <declaration name="posx" type="int" line="218"/>
            <declaration name="numvals" type="int" line="219"/>
            <method name="getNumCharacters" type="int" line="220"/>
            <method name="getCoreMetrics" type="CoreMetrics" line="223"/>
            <method name="getCharX" type="float" line="226">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getCharY" type="float" line="230">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getCharAdvance" type="float" line="234">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="handleGetCharVisualBounds" type="Rectangle2D" line="238">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="charinfo" type="float[]" line="240"/>
            </method>
            <method name="getCharVisualBounds" type="Rectangle2D" line="244">
                <params>
                    <param name="index" type="int"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <declaration name="bounds" type="Rectangle2D" line="245"/>
                <scope line="246"/>
            </method>
            <method name="validate" type="void" line="251">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="252"/>
                <scope line="255"/>
            </method>
            <method name="logicalToVisual" type="int" line="259">
                <params>
                    <param name="logicalIndex" type="int"/>
                </params>
            </method>
            <method name="visualToLogical" type="int" line="263">
                <params>
                    <param name="visualIndex" type="int"/>
                </params>
            </method>
            <method name="getLineBreakIndex" type="int" line="267">
                <params>
                    <param name="start" type="int"/>
                    <param name="width" type="float"/>
                </params>
                <declaration name="charinfo" type="float[]" line="268"/>
                <declaration name="length" type="int" line="269"/>
                <scope line="271">
                    <declaration name="adv" type="float" line="272"/>
                </scope>
            </method>
            <method name="getAdvanceBetween" type="float" line="277">
                <params>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                </params>
                <declaration name="a" type="float" line="278"/>
                <declaration name="charinfo" type="float[]" line="279"/>
                <scope line="281"/>
            </method>
            <method name="caretAtOffsetIsValid" type="boolean" line="286">
                <params>
                    <param name="offset" type="int"/>
                </params>
                <scope line="287"/>
                <declaration name="c" type="char" line="290"/>
                <scope line="291"/>
                <declaration name="v" type="int" line="294"/>
            </method>
            <method name="getCharinfo" type="float[]" line="297">
                <scope line="298"/>
            </method>
            <method name="createCharinfo" type="float[]" line="303">
                <declaration name="gv" type="StandardGlyphVector" line="304"/>
                <declaration name="glyphinfo" type="float[]" line="305"/>
                <scope line="306"/>
                <scope line="309"/>
                <declaration name="numGlyphs" type="int" line="312"/>
                <declaration name="indices" type="int[]" line="313"/>
                <declaration name="DEBUG" type="boolean" line="314"/>
                <scope line="315">
                    <scope line="317"/>
                </scope>
                <declaration name="minIndex" type="int" line="321"/>
                <declaration name="maxIndex" type="int" line="322"/>
                <declaration name="nextMin" type="int" line="323"/>
                <declaration name="cp" type="int" line="324"/>
                <declaration name="cx" type="int" line="325"/>
                <declaration name="gp" type="int" line="326"/>
                <declaration name="gx" type="int" line="327"/>
                <declaration name="gxlimit" type="int" line="328"/>
                <declaration name="pdelta" type="int" line="329"/>
                <declaration name="xdelta" type="int" line="330"/>
                <declaration name="ltr" type="boolean" line="331"/>
                <scope line="332"/>
                <declaration name="cposl" type="float" line="344"/>
                <declaration name="baseline" type="float" line="345"/>
                <declaration name="mustCopy" type="boolean" line="346"/>
                <scope line="347">
                    <declaration name="haveCopy" type="boolean" line="348"/>
                    <declaration name="clusterExtraGlyphs" type="int" line="349"/>
                    <scope line="354">
                        <scope line="355">
                            <declaration name="gps" type="int" line="356"/>
                        </scope>
                        <declaration name="radvx" type="float" line="366"/>
                        <scope line="367">
                            <declaration name="rposx" type="float" line="368"/>
                        </scope>
                        <declaration name="rvisw" type="float" line="372"/>
                        <scope line="373">
                            <declaration name="rvisx" type="float" line="374"/>
                            <declaration name="rvisy" type="float" line="375"/>
                        </scope>
                    </scope>
                    <scope line="386"/>
                    <scope line="392">
                        <scope line="399"/>
                        <scope line="402">
                            <scope line="403"/>
                            <declaration name="iMinIndex" type="int" line="408"/>
                            <scope line="409">
                                <scope line="413"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="428">
                        <declaration name="gpr" type="int" line="429"/>
                    </scope>
                </scope>
                <scope line="440"/>
                <scope line="444">
                    <declaration name="chars" type="char[]" line="445"/>
                    <declaration name="start" type="int" line="446"/>
                    <declaration name="length" type="int" line="447"/>
                    <scope line="449"/>
                </scope>
            </method>
            <javadoc line="455">
                Map logical character index to visual character index.
                  &lt;p&gt;
                  This ignores hindi reordering.  @see createCharinfo                
            </javadoc>
            <method name="l2v" type="int" line="460">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="463">
                Map visual character index to logical character index.
                  &lt;p&gt;
                  This ignores hindi reordering.  @see createCharinfo                
            </javadoc>
            <method name="v2l" type="int" line="468">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getSubset" type="TextLineComponent" line="471">
                <params>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="dir" type="int"/>
                </params>
            </method>
            <method name="toString" type="String" line="474">
                <scope line="475"/>
                <declaration name="buf" type="StringBuffer" line="478"/>
                <scope line="491"/>
                <scope line="494">
                    <scope line="496"/>
                </scope>
            </method>
            <method name="getNumJustificationInfos" type="int" line="504"/>
            <method name="getJustificationInfos" type="void" line="507">
                <params>
                    <param name="infos" type="GlyphJustificationInfo[]"/>
                    <param name="infoStart" type="int"/>
                    <param name="charStart" type="int"/>
                    <param name="charLimit" type="int"/>
                </params>
                <declaration name="gv" type="StandardGlyphVector" line="508"/>
                <declaration name="charinfo" type="float[]" line="509"/>
                <declaration name="size" type="float" line="510"/>
                <declaration name="nullInfo" type="GlyphJustificationInfo" line="511"/>
                <declaration name="spaceInfo" type="GlyphJustificationInfo" line="512"/>
                <declaration name="kanjiInfo" type="GlyphJustificationInfo" line="513"/>
                <declaration name="chars" type="char[]" line="514"/>
                <declaration name="offset" type="int" line="515"/>
                <declaration name="numGlyphs" type="int" line="516"/>
                <declaration name="minGlyph" type="int" line="517"/>
                <declaration name="maxGlyph" type="int" line="518"/>
                <declaration name="ltr" type="boolean" line="519"/>
                <scope line="520">
                    <scope line="521"/>
                    <scope line="525"/>
                </scope>
                <scope line="530">
                    <declaration name="info" type="GlyphJustificationInfo" line="531"/>
                    <scope line="532">
                        <scope line="533"/>
                        <scope line="536">
                            <declaration name="ci" type="int" line="537"/>
                            <declaration name="c" type="char" line="538"/>
                            <scope line="539"/>
                            <scope line="542"/>
                            <scope line="545"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="applyJustificationDeltas" type="TextLineComponent" line="553">
                <params>
                    <param name="deltas" type="float[]"/>
                    <param name="deltaStart" type="int"/>
                    <param name="flags" type="boolean[]"/>
                </params>
                <declaration name="newCharinfo" type="float[]" line="554"/>
                <declaration name="newgv" type="StandardGlyphVector" line="556"/>
                <declaration name="newPositions" type="float[]" line="557"/>
                <declaration name="numGlyphs" type="int" line="558"/>
                <declaration name="chars" type="char[]" line="559"/>
                <declaration name="offset" type="int" line="560"/>
                <declaration name="deltaPos" type="float" line="561"/>
                <scope line="562">
                    <scope line="563">
                        <declaration name="deltaAdv" type="float" line="565"/>
                    </scope>
                    <scope line="571"/>
                </scope>
                <declaration name="result" type="ExtendedTextSourceLabel" line="581"/>
            </method>
        </class>
    </source>