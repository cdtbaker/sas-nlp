<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.font.GlyphVector"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.NoninvertibleTransformException"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.concurrent.ConcurrentHashMap"/>
        <import package="java.lang.Character"/>
        <class name="GlyphLayout" line="12">
            <declaration name="_gvdata" type="GVData" line="13"/>
            <declaration name="cache" type="GlyphLayout" line="14"/>
            <declaration name="_lef" type="LayoutEngineFactory" line="15"/>
            <declaration name="_textRecord" type="TextRecord" line="16"/>
            <declaration name="_scriptRuns" type="ScriptRun" line="17"/>
            <declaration name="_fontRuns" type="FontRunIterator" line="18"/>
            <declaration name="_ercount" type="int" line="19"/>
            <declaration name="_erecords" type="ArrayList" line="20"/>
            <declaration name="_pt" type="Point2D.Float" line="21"/>
            <declaration name="_sd" type="FontStrikeDesc" line="22"/>
            <declaration name="_mat" type="float[]" line="23"/>
            <declaration name="_typo_flags" type="int" line="24"/>
            <declaration name="_offset" type="int" line="25"/>
            <class name="LayoutEngineKey" line="26">
                <declaration name="font" type="Font2D" line="27"/>
                <declaration name="script" type="int" line="28"/>
                <declaration name="lang" type="int" line="29"/>
                <method name="LayoutEngineKey" type="constructor" line="30"/>
                <method name="LayoutEngineKey" type="constructor" line="32">
                    <params>
                        <param name="font" type="Font2D"/>
                        <param name="script" type="int"/>
                        <param name="lang" type="int"/>
                    </params>
                </method>
                <method name="init" type="void" line="35">
                    <params>
                        <param name="font" type="Font2D"/>
                        <param name="script" type="int"/>
                        <param name="lang" type="int"/>
                    </params>
                </method>
                <method name="copy" type="LayoutEngineKey" line="40"/>
                <method name="font" type="Font2D" line="43"/>
                <method name="script" type="int" line="46"/>
                <method name="lang" type="int" line="49"/>
                <method name="equals" type="boolean" line="52">
                    <params>
                        <param name="rhs" type="Object"/>
                    </params>
                    <scope line="55">
                        <declaration name="that" type="LayoutEngineKey" line="56"/>
                    </scope>
                    <scope line="59"/>
                </method>
                <method name="hashCode" type="int" line="63"/>
            </class>
            <interface name="LayoutEngineFactory">
                <method name="getEngine" type="LayoutEngine" line="68"/>
                <javadoc line="68">
                    Given a font, script, and language, determine a layout engine to use.                    
                </javadoc>
                <method name="getEngine" type="LayoutEngine" line="72"/>
                <javadoc line="72">
                    Given a key, determine a layout engine to use.                    
                </javadoc>
            </interface>
            <interface name="LayoutEngine">
                <method name="layout" type="void" line="78"/>
                <javadoc line="78">
                    Given a strike descriptor, text, rtl flag, and starting point, append information about
                      glyphs, positions, and character indices to the glyphvector data, and advance the point.
                      If the GVData does not have room for the glyphs, throws an IndexOutOfBoundsException and
                      leave pt and the gvdata unchanged.                    
                </javadoc>
            </interface>
            <javadoc line="86">
                Return a new instance of GlyphLayout, using the provided layout engine factory.
                  If null, the system layout engine factory will be used.                
            </javadoc>
            <method name="get" type="GlyphLayout" line="90">
                <params>
                    <param name="lef" type="LayoutEngineFactory"/>
                </params>
                <scope line="91"/>
                <declaration name="result" type="GlyphLayout" line="94"/>
                <scope line="95">
                    <scope line="96"/>
                </scope>
                <scope line="101"/>
            </method>
            <javadoc line="107">
                Return the old instance of GlyphLayout when you are done.  This enables reuse
                  of GlyphLayout objects.                
            </javadoc>
            <method name="done" type="void" line="111">
                <params>
                    <param name="gl" type="GlyphLayout"/>
                </params>
            </method>
            <class name="SDCache" line="115">
                <declaration name="key_font" type="Font" line="116"/>
                <declaration name="key_frc" type="FontRenderContext" line="117"/>
                <declaration name="dtx" type="AffineTransform" line="118"/>
                <declaration name="invdtx" type="AffineTransform" line="119"/>
                <declaration name="gtx" type="AffineTransform" line="120"/>
                <declaration name="delta" type="Point2D.Float" line="121"/>
                <declaration name="sd" type="FontStrikeDesc" line="122"/>
                <method name="SDCache" type="constructor" line="123">
                    <params>
                        <param name="font" type="Font"/>
                        <param name="frc" type="FontRenderContext"/>
                    </params>
                    <scope line="128">
                        <scope line="129"/>
                        <scope line="132"/>
                    </scope>
                    <declaration name="ptSize" type="float" line="136"/>
                    <scope line="137"/>
                    <scope line="144"/>
                    <declaration name="aa" type="int" line="149"/>
                    <declaration name="fm" type="int" line="150"/>
                </method>
                <declaration name="ZERO_DELTA" type="Point2D.Float" line="153"/>
                <declaration name="cacheRef" type="SoftReference&lt;ConcurrentHashMap&lt;SDKey,SDCache&gt;&gt;" line="154"/>
                <class name="SDKey" line="155">
                    <declaration name="font" type="Font" line="156"/>
                    <declaration name="frc" type="FontRenderContext" line="157"/>
                    <declaration name="hash" type="int" line="158"/>
                    <method name="SDKey" type="constructor" line="159">
                        <params>
                            <param name="font" type="Font"/>
                            <param name="frc" type="FontRenderContext"/>
                        </params>
                    </method>
                    <method name="hashCode" type="int" line="164"/>
                    <method name="equals" type="boolean" line="167">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                        <scope line="168">
                            <declaration name="rhs" type="SDKey" line="169"/>
                        </scope>
                        <scope line="172"/>
                    </method>
                </class>
                <method name="get" type="SDCache" line="177">
                    <params>
                        <param name="font" type="Font"/>
                        <param name="frc" type="FontRenderContext"/>
                    </params>
                    <scope line="178">
                        <declaration name="transform" type="AffineTransform" line="179"/>
                        <scope line="180"/>
                    </scope>
                    <declaration name="key" type="SDKey" line="185"/>
                    <declaration name="cache" type="ConcurrentHashMap&lt;SDKey,SDCache&gt;" line="186"/>
                    <declaration name="res" type="SDCache" line="187"/>
                    <scope line="188">
                        <scope line="190"/>
                    </scope>
                    <scope line="194">
                        <scope line="196"/>
                        <scope line="200"/>
                    </scope>
                </method>
            </class>
            <javadoc line="208">
                Create a glyph vector.                
                <param>
                    font the font to use                    
                </param>
                <param>
                    frc the font render context                    
                </param>
                <param>
                    text the text, including optional context before start and after start + count                    
                </param>
                <param>
                    offset the start of the text to lay out                    
                </param>
                <param>
                    count the length of the text to lay out                    
                </param>
                <param>
                    flags bidi and context flags {@see #java.awt.Font}                    
                </param>
                <param>
                    result a StandardGlyphVector to modify, can be null                    
                </param>
                <return>
                    the layed out glyphvector, if result was passed in, it is returned                    
                </return>
            </javadoc>
            <method name="layout" type="StandardGlyphVector" line="219">
                <params>
                    <param name="font" type="Font"/>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="text" type="char[]"/>
                    <param name="offset" type="int"/>
                    <param name="count" type="int"/>
                    <param name="flags" type="int"/>
                    <param name="result" type="StandardGlyphVector"/>
                </params>
                <scope line="220"/>
                <scope line="224">
                    <declaration name="values" type="AttributeValues" line="225"/>
                </scope>
                <declaration name="txinfo" type="SDCache" line="230"/>
                <declaration name="lim" type="int" line="236"/>
                <declaration name="min" type="int" line="237"/>
                <declaration name="max" type="int" line="238"/>
                <scope line="239">
                    <scope line="240"/>
                    <scope line="243"/>
                    <scope line="246"/>
                </scope>
                <declaration name="lang" type="int" line="250"/>
                <declaration name="font2D" type="Font2D" line="251"/>
                <declaration name="start" type="int" line="253"/>
                <scope line="254">
                    <scope line="257">
                        <declaration name="limit" type="int" line="258"/>
                        <declaration name="script" type="int" line="259"/>
                        <scope line="260">
                            <declaration name="pfont" type="Font2D" line="261"/>
                            <scope line="262"/>
                            <declaration name="gmask" type="int" line="265"/>
                            <declaration name="pos" type="int" line="266"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="272">
                    <scope line="274">
                        <declaration name="limit" type="int" line="275"/>
                        <declaration name="script" type="int" line="276"/>
                    </scope>
                </scope>
                <declaration name="ix" type="int" line="281"/>
                <declaration name="stop" type="int" line="282"/>
                <declaration name="dir" type="int" line="283"/>
                <scope line="284"/>
                <scope line="290">
                    <declaration name="er" type="EngineRecord" line="291"/>
                    <scope line="292">
                        <scope line="293"/>
                        <scope line="297"/>
                    </scope>
                </scope>
                <declaration name="gv" type="StandardGlyphVector" line="302"/>
            </method>
            <method name="GlyphLayout" type="constructor" line="305"/>
            <method name="init" type="void" line="315">
                <params>
                    <param name="capacity" type="int"/>
                </params>
            </method>
            <method name="nextEngineRecord" type="void" line="320">
                <params>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="script" type="int"/>
                    <param name="lang" type="int"/>
                    <param name="font" type="Font2D"/>
                    <param name="gmask" type="int"/>
                </params>
                <declaration name="er" type="EngineRecord" line="321"/>
                <scope line="322"/>
                <scope line="326"/>
            </method>
            <class name="GVData" line="332">
                <javadoc line="332">
                    Storage for layout to build glyph vector data, then generate a real GlyphVector                    
                </javadoc>
                <declaration name="_count" type="int" line="336"/>
                <declaration name="_flags" type="int" line="337"/>
                <declaration name="_glyphs" type="int[]" line="338"/>
                <declaration name="_positions" type="float[]" line="339"/>
                <declaration name="_indices" type="int[]" line="340"/>
                <declaration name="UNINITIALIZED_FLAGS" type="int" line="341"/>
                <method name="init" type="void" line="342">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                    <scope line="345">
                        <scope line="346"/>
                    </scope>
                </method>
                <method name="grow" type="void" line="354"/>
                <method name="grow" type="void" line="357">
                    <params>
                        <param name="delta" type="int"/>
                    </params>
                    <declaration name="size" type="int" line="358"/>
                    <declaration name="nglyphs" type="int[]" line="359"/>
                    <declaration name="npositions" type="float[]" line="362"/>
                    <declaration name="nindices" type="int[]" line="365"/>
                </method>
                <method name="adjustPositions" type="void" line="369">
                    <params>
                        <param name="invdtx" type="AffineTransform"/>
                    </params>
                </method>
                <method name="createGlyphVector" type="StandardGlyphVector" line="372">
                    <params>
                        <param name="font" type="Font"/>
                        <param name="frc" type="FontRenderContext"/>
                        <param name="result" type="StandardGlyphVector"/>
                    </params>
                    <scope line="373">
                        <scope line="375">
                            <declaration name="ltr" type="boolean" line="376"/>
                            <declaration name="rtl" type="boolean" line="377"/>
                            <declaration name="rtlix" type="int" line="378"/>
                            <scope line="379">
                                <declaration name="cx" type="int" line="380"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="glyphs" type="int[]" line="389"/>
                    <declaration name="positions" type="float[]" line="391"/>
                    <scope line="392"/>
                    <declaration name="indices" type="int[]" line="396"/>
                    <scope line="397"/>
                    <scope line="401"/>
                    <scope line="404"/>
                </method>
            </class>
            <class name="EngineRecord" line="410">
                <javadoc line="410">
                    Utility class to keep track of script runs, which may have to be reordered rtl when we&apos;re
                      finished.                    
                </javadoc>
                <declaration name="start" type="int" line="415"/>
                <declaration name="limit" type="int" line="416"/>
                <declaration name="gmask" type="int" line="417"/>
                <declaration name="eflags" type="int" line="418"/>
                <declaration name="key" type="LayoutEngineKey" line="419"/>
                <declaration name="engine" type="LayoutEngine" line="420"/>
                <method name="EngineRecord" type="constructor" line="421"/>
                <method name="init" type="void" line="424">
                    <params>
                        <param name="start" type="int"/>
                        <param name="limit" type="int"/>
                        <param name="font" type="Font2D"/>
                        <param name="script" type="int"/>
                        <param name="lang" type="int"/>
                        <param name="gmask" type="int"/>
                    </params>
                    <scope line="430">
                        <declaration name="ch" type="int" line="431"/>
                        <scope line="432"/>
                        <declaration name="gc" type="int" line="435"/>
                        <scope line="436"/>
                    </scope>
                </method>
                <method name="layout" type="void" line="443"/>
            </class>
        </class>
    </source>