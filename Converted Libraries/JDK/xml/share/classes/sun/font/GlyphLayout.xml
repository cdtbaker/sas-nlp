<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.font.GlyphVector"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.NoninvertibleTransformException"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.concurrent.ConcurrentHashMap"/>
        <import package="java.lang.Character"/>
        <class name="GlyphLayout" line="83">
            <comment line="85">
                data for glyph vector                
            </comment>
            <comment line="88">
                cached glyph layout data for reuse                
            </comment>
            <comment line="89">
                reusable                
            </comment>
            <comment line="91">
                set when get is called, unset when done is called                
            </comment>
            <comment line="92">
                the text we&apos;re working on, used by iterators                
            </comment>
            <comment line="93">
                iterator over script runs                
            </comment>
            <comment line="94">
                iterator over physical fonts in a composite                
            </comment>
            <comment line="482">
                private methods                
            </comment>
            <declaration name="_gvdata" type="GVData" line="85"/>
            <declaration name="cache" type="GlyphLayout" line="88"/>
            <declaration name="_lef" type="LayoutEngineFactory" line="90"/>
            <declaration name="_textRecord" type="TextRecord" line="91"/>
            <declaration name="_scriptRuns" type="ScriptRun" line="92"/>
            <declaration name="_fontRuns" type="FontRunIterator" line="93"/>
            <declaration name="_ercount" type="int" line="94"/>
            <declaration name="_erecords" type="ArrayList" line="95"/>
            <declaration name="_pt" type="Point2D.Float" line="96"/>
            <declaration name="_sd" type="FontStrikeDesc" line="97"/>
            <declaration name="_mat" type="float[]" line="98"/>
            <declaration name="_typo_flags" type="int" line="99"/>
            <declaration name="_offset" type="int" line="100"/>
            <class name="LayoutEngineKey" line="102">
                <comment line="519">
                    number of glyphs, &gt;= number of chars                    
                </comment>
                <declaration name="font" type="Font2D" line="103"/>
                <declaration name="script" type="int" line="104"/>
                <declaration name="lang" type="int" line="105"/>
                <method name="LayoutEngineKey" type="constructor" line="107"/>
                <method name="LayoutEngineKey" type="constructor" line="110">
                    <params>
                        <param name="font" type="Font2D"/>
                        <param name="script" type="int"/>
                        <param name="lang" type="int"/>
                    </params>
                </method>
                <method name="init" type="void" line="114">
                    <params>
                        <param name="font" type="Font2D"/>
                        <param name="script" type="int"/>
                        <param name="lang" type="int"/>
                    </params>
                </method>
                <method name="copy" type="LayoutEngineKey" line="120"/>
                <method name="font" type="Font2D" line="124"/>
                <method name="script" type="int" line="128"/>
                <method name="lang" type="int" line="132"/>
                <method name="equals" type="boolean" line="136">
                    <params>
                        <param name="rhs" type="Object"/>
                    </params>
                    <scope line="139">
                        <declaration name="that" type="LayoutEngineKey" line="140"/>
                    </scope>
                    <scope line="145"/>
                </method>
                <method name="hashCode" type="int" line="150"/>
            </class>
            <interface name="LayoutEngineFactory">
                <comment line="519">
                    number of glyphs, &gt;= number of chars                    
                </comment>
                <method name="getEngine" type="LayoutEngine" line="156"/>
                <javadoc line="156">
                    Given a font, script, and language, determine a layout engine to use.                    
                </javadoc>
                <method name="getEngine" type="LayoutEngine" line="161"/>
                <javadoc line="161">
                    Given a key, determine a layout engine to use.                    
                </javadoc>
            </interface>
            <interface name="LayoutEngine">
                <comment line="519">
                    number of glyphs, &gt;= number of chars                    
                </comment>
                <method name="layout" type="void" line="168"/>
                <javadoc line="168">
                    Given a strike descriptor, text, rtl flag, and starting point, append information about
                      glyphs, positions, and character indices to the glyphvector data, and advance the point.
                      If the GVData does not have room for the glyphs, throws an IndexOutOfBoundsException and
                      leave pt and the gvdata unchanged.                    
                </javadoc>
            </interface>
            <javadoc line="179">
                Return a new instance of GlyphLayout, using the provided layout engine factory.
                  If null, the system layout engine factory will be used.                
            </javadoc>
            <method name="get" type="GlyphLayout" line="183">
                <params>
                    <param name="lef" type="LayoutEngineFactory"/>
                </params>
                <scope line="184"/>
                <declaration name="result" type="GlyphLayout" line="187"/>
                <scope line="188">
                    <scope line="189"/>
                </scope>
                <scope line="194"/>
            </method>
            <javadoc line="201">
                Return the old instance of GlyphLayout when you are done.  This enables reuse
                  of GlyphLayout objects.                
            </javadoc>
            <method name="done" type="void" line="205">
                <params>
                    <param name="gl" type="GlyphLayout"/>
                </params>
                <comment line="208">
                    object reference assignment is thread safe, it says here...                    
                </comment>
            </method>
            <class name="SDCache" line="210">
                <comment line="519">
                    number of glyphs, &gt;= number of chars                    
                </comment>
                <declaration name="key_font" type="Font" line="211"/>
                <declaration name="key_frc" type="FontRenderContext" line="212"/>
                <declaration name="dtx" type="AffineTransform" line="214"/>
                <declaration name="invdtx" type="AffineTransform" line="215"/>
                <declaration name="gtx" type="AffineTransform" line="216"/>
                <declaration name="delta" type="Point2D.Float" line="217"/>
                <declaration name="sd" type="FontStrikeDesc" line="218"/>
                <method name="SDCache" type="constructor" line="220">
                    <params>
                        <param name="font" type="Font"/>
                        <param name="frc" type="FontRenderContext"/>
                    </params>
                    <comment line="225">
                        !!! add getVectorTransform and hasVectorTransform to frc?  then
                         we could just skip this work...                        
                    </comment>
                    <comment line="257">
                        Similar logic to that used in SunGraphics2D.checkFontInfo().
                         Whether a grey (AA) strike is needed is size dependent if
                         AA mode is &apos;gasp&apos;.                        
                    </comment>
                    <scope line="231">
                        <scope line="232"/>
                        <scope line="235"/>
                    </scope>
                    <declaration name="ptSize" type="float" line="240"/>
                    <scope line="241"/>
                    <scope line="250"/>
                    <declaration name="aa" type="int" line="260"/>
                    <declaration name="fm" type="int" line="264"/>
                </method>
                <declaration name="ZERO_DELTA" type="Point2D.Float" line="269"/>
                <declaration name="cacheRef" type="SoftReference&lt;ConcurrentHashMap&lt;SDKey,SDCache&gt;&gt;" line="271"/>
                <class name="SDKey" line="274">
                    <declaration name="font" type="Font" line="275"/>
                    <declaration name="frc" type="FontRenderContext" line="276"/>
                    <declaration name="hash" type="int" line="277"/>
                    <method name="SDKey" type="constructor" line="279">
                        <params>
                            <param name="font" type="Font"/>
                            <param name="frc" type="FontRenderContext"/>
                        </params>
                    </method>
                    <method name="hashCode" type="int" line="285"/>
                    <method name="equals" type="boolean" line="289">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                        <scope line="290">
                            <declaration name="rhs" type="SDKey" line="291"/>
                        </scope>
                        <scope line="297"/>
                    </method>
                </class>
                <method name="get" type="SDCache" line="303">
                    <params>
                        <param name="font" type="Font"/>
                        <param name="frc" type="FontRenderContext"/>
                    </params>
                    <comment line="306">
                        It is possible a translation component will be in the FRC.
                         It doesn&apos;t affect us except adversely as we would consider
                         FRC&apos;s which are really the same to be different. If we
                         detect a translation component, then we need to exclude it
                         by creating a new transform which excludes the translation.                        
                    </comment>
                    <comment line="327">
                        garbage, yuck...                        
                    </comment>
                    <scope line="310">
                        <declaration name="transform" type="AffineTransform" line="311"/>
                        <scope line="313"/>
                    </scope>
                    <declaration name="key" type="SDKey" line="326"/>
                    <declaration name="cache" type="ConcurrentHashMap&lt;SDKey,SDCache&gt;" line="327"/>
                    <declaration name="res" type="SDCache" line="328"/>
                    <scope line="329">
                        <scope line="331"/>
                    </scope>
                    <scope line="335">
                        <scope line="337"/>
                        <scope line="341"/>
                    </scope>
                </method>
            </class>
            <javadoc line="350">
                Create a glyph vector.                
                <param>
                    font the font to use                    
                </param>
                <param>
                    frc the font render context                    
                </param>
                <param>
                    text the text, including optional context before start and after start + count                    
                </param>
                <param>
                    offset the start of the text to lay out                    
                </param>
                <param>
                    count the length of the text to lay out                    
                </param>
                <param>
                    flags bidi and context flags {@see #java.awt.Font}                    
                </param>
                <param>
                    result a StandardGlyphVector to modify, can be null                    
                </param>
                <return>
                    the layed out glyphvector, if result was passed in, it is returned                    
                </return>
            </javadoc>
            <method name="layout" type="StandardGlyphVector" line="364">
                <params>
                    <param name="font" type="Font"/>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="text" type="char[]"/>
                    <param name="offset" type="int"/>
                    <param name="count" type="int"/>
                    <param name="flags" type="int"/>
                    <param name="result" type="StandardGlyphVector"/>
                </params>
                <comment line="372">
                    need to set after init
                     go through the back door for this                    
                </comment>
                <comment line="382">
                    use cache now - can we use the strike cache for this?                    
                </comment>
                <comment line="397">
                    RTL                    
                </comment>
                <comment line="409">
                    default for now                    
                </comment>
                <comment line="416">
                    ??? how to handle &apos;common&apos; chars                    
                </comment>
                <comment line="423">
                    layout can&apos;t deal with NativeFont instances. The
                     native font is assumed to know of a suitable non-native
                     substitute font. This currently works because
                     its consistent with the way NativeFonts delegate
                     in other cases too.                    
                </comment>
                <comment line="439">
                    ??? don&apos;t worry about &apos;common&apos; chars                    
                </comment>
                <comment line="452">
                    RTL                    
                </comment>
                <comment line="458">
                    _sd.init(dtx, gtx, font.getStyle(), frc.isAntiAliased(), frc.usesFractionalMetrics());                    
                </comment>
                <comment line="473">
                    if (txinfo.invdtx != null) {
                                _gvdata.adjustPositions(txinfo.invdtx);
                            }                    
                </comment>
                <comment line="478">
                    System.err.println(&quot;Layout returns: &quot; + gv);                    
                </comment>
                <scope line="365"/>
                <scope line="373">
                    <declaration name="values" type="AttributeValues" line="374"/>
                </scope>
                <declaration name="txinfo" type="SDCache" line="383"/>
                <declaration name="lim" type="int" line="390"/>
                <declaration name="min" type="int" line="392"/>
                <declaration name="max" type="int" line="393"/>
                <scope line="394">
                    <scope line="395"/>
                    <scope line="399"/>
                    <scope line="403"/>
                </scope>
                <declaration name="lang" type="int" line="408"/>
                <declaration name="font2D" type="Font2D" line="410"/>
                <declaration name="start" type="int" line="413"/>
                <scope line="414">
                    <scope line="417">
                        <declaration name="limit" type="int" line="418"/>
                        <declaration name="script" type="int" line="419"/>
                        <scope line="420">
                            <declaration name="pfont" type="Font2D" line="421"/>
                            <scope line="428"/>
                            <declaration name="gmask" type="int" line="431"/>
                            <declaration name="pos" type="int" line="432"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="437">
                    <scope line="439">
                        <declaration name="limit" type="int" line="440"/>
                        <declaration name="script" type="int" line="441"/>
                    </scope>
                </scope>
                <declaration name="ix" type="int" line="447"/>
                <declaration name="stop" type="int" line="448"/>
                <declaration name="dir" type="int" line="449"/>
                <scope line="451"/>
                <scope line="459">
                    <declaration name="er" type="EngineRecord" line="460"/>
                    <scope line="461">
                        <scope line="462"/>
                        <scope line="466"/>
                    </scope>
                </scope>
                <declaration name="gv" type="StandardGlyphVector" line="476"/>
            </method>
            <method name="GlyphLayout" type="constructor" line="485"/>
            <method name="init" type="void" line="496">
                <params>
                    <param name="capacity" type="int"/>
                </params>
            </method>
            <method name="nextEngineRecord" type="void" line="502">
                <params>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="script" type="int"/>
                    <param name="lang" type="int"/>
                    <param name="font" type="Font2D"/>
                    <param name="gmask" type="int"/>
                </params>
                <declaration name="er" type="EngineRecord" line="503"/>
                <scope line="504"/>
                <scope line="507"/>
            </method>
            <class name="GVData" line="514">
                <comment line="519">
                    number of glyphs, &gt;= number of chars                    
                </comment>
                <javadoc line="514">
                    Storage for layout to build glyph vector data, then generate a real GlyphVector                    
                </javadoc>
                <declaration name="_count" type="int" line="518"/>
                <declaration name="_flags" type="int" line="519"/>
                <declaration name="_glyphs" type="int[]" line="520"/>
                <declaration name="_positions" type="float[]" line="521"/>
                <declaration name="_indices" type="int[]" line="522"/>
                <declaration name="UNINITIALIZED_FLAGS" type="int" line="524"/>
                <method name="init" type="void" line="526">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                    <scope line="530">
                        <scope line="531"/>
                    </scope>
                </method>
                <method name="grow" type="void" line="540">
                    <comment line="542">
                        always grows because min length is 20                        
                    </comment>
                </method>
                <method name="grow" type="void" line="544">
                    <params>
                        <param name="delta" type="int"/>
                    </params>
                    <declaration name="size" type="int" line="545"/>
                    <declaration name="nglyphs" type="int[]" line="546"/>
                    <declaration name="npositions" type="float[]" line="550"/>
                    <declaration name="nindices" type="int[]" line="554"/>
                </method>
                <method name="adjustPositions" type="void" line="559">
                    <params>
                        <param name="invdtx" type="AffineTransform"/>
                    </params>
                </method>
                <method name="createGlyphVector" type="StandardGlyphVector" line="563">
                    <params>
                        <param name="font" type="Font"/>
                        <param name="frc" type="FontRenderContext"/>
                        <param name="result" type="StandardGlyphVector"/>
                    </params>
                    <comment line="566">
                        !!! default initialization until we let layout engines do it                        
                    </comment>
                    <comment line="570">
                        if only 1 glyph assume LTR                        
                    </comment>
                    <comment line="574">
                        rtl index                        
                    </comment>
                    <comment line="586">
                        !!! layout engines need to tell us whether they performed
                         position adjustments. currently they don&apos;t tell us, so
                         we must assume they did                        
                    </comment>
                    <scope line="566">
                        <scope line="569">
                            <declaration name="ltr" type="boolean" line="570"/>
                            <declaration name="rtl" type="boolean" line="571"/>
                            <declaration name="rtlix" type="int" line="573"/>
                            <scope line="574">
                                <declaration name="cx" type="int" line="575"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="glyphs" type="int[]" line="591"/>
                    <declaration name="positions" type="float[]" line="594"/>
                    <scope line="595"/>
                    <declaration name="indices" type="int[]" line="600"/>
                    <scope line="601"/>
                    <scope line="606"/>
                    <scope line="608"/>
                </method>
            </class>
            <class name="EngineRecord" line="616">
                <comment line="519">
                    number of glyphs, &gt;= number of chars                    
                </comment>
                <javadoc line="616">
                    Utility class to keep track of script runs, which may have to be reordered rtl when we&apos;re
                      finished.                    
                </javadoc>
                <declaration name="start" type="int" line="621"/>
                <declaration name="limit" type="int" line="622"/>
                <declaration name="gmask" type="int" line="623"/>
                <declaration name="eflags" type="int" line="624"/>
                <declaration name="key" type="LayoutEngineKey" line="625"/>
                <declaration name="engine" type="LayoutEngine" line="626"/>
                <method name="EngineRecord" type="constructor" line="628"/>
                <method name="init" type="void" line="632">
                    <params>
                        <param name="start" type="int"/>
                        <param name="limit" type="int"/>
                        <param name="font" type="Font2D"/>
                        <param name="script" type="int"/>
                        <param name="lang" type="int"/>
                        <param name="gmask" type="int"/>
                    </params>
                    <comment line="640">
                        only request canonical substitution if we have combining marks                        
                    </comment>
                    <comment line="646">
                        rare case                        
                    </comment>
                    <comment line="647">
                        inc                        
                    </comment>
                    <comment line="652">
                        could do range test also                        
                    </comment>
                    <comment line="659">
                        flags?                        
                    </comment>
                    <scope line="640">
                        <declaration name="ch" type="int" line="641"/>
                        <scope line="644"/>
                        <declaration name="gc" type="int" line="648"/>
                        <scope line="651"/>
                    </scope>
                </method>
                <method name="layout" type="void" line="661"/>
            </class>
        </class>
    </source>