<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.lang.ref.Reference"/>
        <import package="java.lang.ref.ReferenceQueue"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.util"/>
        <import package="sun.java2d.Disposer"/>
        <import package="sun.java2d.pipe.BufferedContext"/>
        <import package="sun.java2d.pipe.RenderQueue"/>
        <import package="sun.java2d.pipe.hw.AccelGraphicsConfig"/>
        <import package="sun.misc.Unsafe"/>
        <class name="StrikeCache" line="14">
            <javadoc line="14">
                A FontStrike is the keeper of scaled glyph image data which is expensive
                  to compute so needs to be cached.
                  So long as that data may be being used it cannot be invalidated.
                  Yet we also need to limit the amount of native memory and number of
                  strike objects in use.
                  For scaleability and ease of use, a key goal is multi-threaded read
                  access to a strike, so that it may be shared by multiple client objects,
                  potentially executing on different threads, with no special reference
                  counting or &quot;check-out/check-in&quot; requirements which would pass on the
                  burden of keeping track of strike references to the SG2D and other clients.
                  A cache of strikes is maintained via Reference objects.
                  This helps in two ways :
                  1. The VM will free references when memory is low or they have not been
                  used in a long time.
                  2. Reference queues provide a way to get notification of this so we can
                  free native memory resources.                
            </javadoc>
            <declaration name="unsafe" type="Unsafe" line="33"/>
            <declaration name="refQueue" type="ReferenceQueue" line="34"/>
            <declaration name="disposeListeners" type="ArrayList&lt;GlyphDisposedListener&gt;" line="35"/>
            <declaration name="MINSTRIKES" type="int" line="36"/>
            <declaration name="recentStrikeIndex" type="int" line="37"/>
            <declaration name="recentStrikes" type="FontStrike[]" line="38"/>
            <declaration name="cacheRefTypeWeak" type="boolean" line="39"/>
            <declaration name="nativeAddressSize" type="int" line="40"/>
            <declaration name="glyphInfoSize" type="int" line="41"/>
            <declaration name="xAdvanceOffset" type="int" line="42"/>
            <declaration name="yAdvanceOffset" type="int" line="43"/>
            <declaration name="boundsOffset" type="int" line="44"/>
            <declaration name="widthOffset" type="int" line="45"/>
            <declaration name="heightOffset" type="int" line="46"/>
            <declaration name="rowBytesOffset" type="int" line="47"/>
            <declaration name="topLeftXOffset" type="int" line="48"/>
            <declaration name="topLeftYOffset" type="int" line="49"/>
            <declaration name="pixelDataOffset" type="int" line="50"/>
            <declaration name="cacheCellOffset" type="int" line="51"/>
            <declaration name="managedOffset" type="int" line="52"/>
            <declaration name="invisibleGlyphPtr" type="long" line="53"/>
            <method name="getGlyphCacheDescription" type="void" line="54"/>
            <scope line="55">
                <declaration name="nativeInfo" type="long[]" line="56"/>
                <scope line="71"/>
                <anonymous_class line="74">
                    <method name="run" type="Object" line="75">
                        <declaration name="refType" type="String" line="76"/>
                        <declaration name="minStrikesStr" type="String" line="78"/>
                        <scope line="79">
                            <scope line="80">
                                <scope line="82"/>
                            </scope>
                            <scope line="86"/>
                        </scope>
                    </method>
                </anonymous_class>
            </scope>
            <method name="refStrike" type="void" line="95">
                <params>
                    <param name="strike" type="FontStrike"/>
                </params>
                <declaration name="index" type="int" line="96"/>
                <scope line="99"/>
            </method>
            <method name="doDispose" type="void" line="104">
                <params>
                    <param name="disposer" type="FontStrikeDisposer"/>
                </params>
                <scope line="105"/>
                <scope line="108"/>
                <scope line="111">
                    <scope line="112">
                        <scope line="113"/>
                    </scope>
                    <scope line="119"/>
                </scope>
                <scope line="123">
                    <scope line="124">
                        <scope line="125"/>
                    </scope>
                    <scope line="131"/>
                </scope>
                <scope line="135">
                    <scope line="136"/>
                    <scope line="139"/>
                </scope>
            </method>
            <method name="longAddresses" type="boolean" line="144"/>
            <method name="disposeStrike" type="void" line="147">
                <params>
                    <param name="disposer" type="FontStrikeDisposer"/>
                </params>
                <scope line="148"/>
                <declaration name="rq" type="RenderQueue" line="152"/>
                <declaration name="ge" type="GraphicsEnvironment" line="153"/>
                <scope line="154">
                    <declaration name="gc" type="GraphicsConfiguration" line="155"/>
                    <scope line="156">
                        <declaration name="agc" type="AccelGraphicsConfig" line="157"/>
                        <declaration name="bc" type="BufferedContext" line="158"/>
                        <scope line="159"/>
                    </scope>
                </scope>
                <scope line="164">
                    <scope line="166">
                        <anonymous_class line="167">
                            <method name="run" type="void" line="168"/>
                        </anonymous_class>
                    </scope>
                    <scope line="175"/>
                </scope>
                <scope line="179"/>
            </method>
            <method name="freeIntPointer" type="void" line="183"/>
            <method name="freeLongPointer" type="void" line="184"/>
            <method name="freeIntMemory" type="void" line="185"/>
            <method name="freeLongMemory" type="void" line="186"/>
            <method name="freeCachedIntMemory" type="void" line="187">
                <params>
                    <param name="glyphPtrs" type="int[]"/>
                    <param name="pContext" type="long"/>
                </params>
                <scope line="188">
                    <scope line="189">
                        <declaration name="gids" type="ArrayList&lt;Long&gt;" line="190"/>
                        <scope line="191">
                            <scope line="192">
                                <scope line="193"/>
                            </scope>
                        </scope>
                        <scope line="199"/>
                    </scope>
                </scope>
            </method>
            <method name="freeCachedLongMemory" type="void" line="206">
                <params>
                    <param name="glyphPtrs" type="long[]"/>
                    <param name="pContext" type="long"/>
                </params>
                <scope line="207">
                    <scope line="208">
                        <declaration name="gids" type="ArrayList&lt;Long&gt;" line="209"/>
                        <scope line="210">
                            <scope line="211">
                                <scope line="212"/>
                            </scope>
                        </scope>
                        <scope line="218"/>
                    </scope>
                </scope>
            </method>
            <method name="addGlyphDisposedListener" type="void" line="225">
                <params>
                    <param name="listener" type="GlyphDisposedListener"/>
                </params>
                <scope line="226"/>
            </method>
            <method name="notifyDisposeListeners" type="void" line="230">
                <params>
                    <param name="glyphs" type="ArrayList<Long>"/>
                </params>
                <scope line="231"/>
            </method>
            <method name="getStrikeRef" type="Reference" line="235">
                <params>
                    <param name="strike" type="FontStrike"/>
                </params>
            </method>
            <method name="getStrikeRef" type="Reference" line="238">
                <params>
                    <param name="strike" type="FontStrike"/>
                    <param name="weak" type="boolean"/>
                </params>
                <scope line="239">
                    <scope line="240"/>
                    <scope line="243"/>
                </scope>
                <scope line="247"/>
                <scope line="250"/>
            </method>
            <interface name="DisposableStrike">
                <method name="getDisposer" type="FontStrikeDisposer" line="255"/>
            </interface>
            <class name="SoftDisposerRef" line="257">
                <extends class="SoftReference"/>
                <implements interface="DisposableStrike"/>
                <declaration name="disposer" type="FontStrikeDisposer" line="258"/>
                <method name="getDisposer" type="FontStrikeDisposer" line="259"/>
                <method name="SoftDisposerRef" type="constructor" line="262">
                    <params>
                        <param name="strike" type="FontStrike"/>
                    </params>
                </method>
            </class>
            <class name="WeakDisposerRef" line="268">
                <extends class="WeakReference"/>
                <implements interface="DisposableStrike"/>
                <declaration name="disposer" type="FontStrikeDisposer" line="269"/>
                <method name="getDisposer" type="FontStrikeDisposer" line="270"/>
                <method name="WeakDisposerRef" type="constructor" line="273">
                    <params>
                        <param name="strike" type="FontStrike"/>
                    </params>
                </method>
            </class>
        </class>
    </source>