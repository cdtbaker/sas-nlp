<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.font.LineMetrics"/>
        <import package="java.awt.font.GraphicAttribute"/>
        <import package="java.awt.font.GlyphJustificationInfo"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.GeneralPath"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.text.Bidi"/>
        <import package="java.util.Map"/>
        <class name="GraphicComponent" line="47">
            <comment line="55">
                possibly null                
            </comment>
            <comment line="56">
                possibly null                
            </comment>
            <comment line="58">
                evaluated in computeVisualBounds                
            </comment>
            <comment line="61">
                used everywhere so we&apos;ll cache it                
            </comment>
            <comment line="293">
                measures characters in context, in logical order                
            </comment>
            <comment line="303">
                measures characters in context, in logical order                
            </comment>
            <implements interface="TextLineComponent"/>
            <implements interface="Decoration.Label"/>
            <declaration name="GRAPHIC_LEADING" type="float" line="50"/>
            <declaration name="graphic" type="GraphicAttribute" line="52"/>
            <declaration name="graphicCount" type="int" line="53"/>
            <declaration name="charsLtoV" type="int[]" line="54"/>
            <declaration name="levels" type="byte[]" line="55"/>
            <declaration name="visualBounds" type="Rectangle2D" line="58"/>
            <declaration name="graphicAdvance" type="float" line="61"/>
            <declaration name="baseTx" type="AffineTransform" line="63"/>
            <declaration name="cm" type="CoreMetrics" line="65"/>
            <declaration name="decorator" type="Decoration" line="66"/>
            <javadoc line="69">
                Create a new GraphicComponent.  start and limit are indices
                  into charLtoV and levels.  charsLtoV and levels may be adopted.                
            </javadoc>
            <method name="GraphicComponent" type="constructor" line="79">
                <params>
                    <param name="graphic" type="GraphicAttribute"/>
                    <param name="decorator" type="Decoration"/>
                    <param name="charsLtoV" type="int[]"/>
                    <param name="levels" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="baseTx" type="AffineTransform"/>
                </params>
                <scope line="81"/>
            </method>
            <method name="GraphicComponent" type="constructor" line="93">
                <params>
                    <param name="parent" type="GraphicComponent"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="dir" type="int"/>
                </params>
                <declaration name="charsLtoV" type="int[]" line="101"/>
                <declaration name="levels" type="byte[]" line="102"/>
                <scope line="104"/>
                <scope line="108">
                    <scope line="111">
                        <scope line="114"/>
                    </scope>
                </scope>
                <scope line="120"/>
            </method>
            <javadoc line="127">
                Initialize graphicCount, also charsLtoV and levels arrays.                
            </javadoc>
            <method name="initLocalOrdering" type="void" line="133">
                <params>
                    <param name="charsLtoV" type="int[]"/>
                    <param name="levels" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                </params>
                <comment line="136">
                    todo: should be codepoints?                    
                </comment>
                <scope line="137"/>
                <scope line="140"/>
                <scope line="144"/>
                <scope line="147"/>
            </method>
            <method name="isSimple" type="boolean" line="153"/>
            <method name="getPixelBounds" type="Rectangle" line="157">
                <params>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="handleGetVisualBounds" type="Rectangle2D" line="161">
                <declaration name="bounds" type="Rectangle2D" line="163"/>
                <declaration name="width" type="float" line="165"/>
            </method>
            <method name="getCoreMetrics" type="CoreMetrics" line="174"/>
            <method name="createCoreMetrics" type="CoreMetrics" line="178">
                <params>
                    <param name="graphic" type="GraphicAttribute"/>
                </params>
                <comment line="190">
                    ss offset                    
                </comment>
                <comment line="191">
                    italic angle -- need api for this                    
                </comment>
            </method>
            <method name="getItalicAngle" type="float" line="193"/>
            <method name="getVisualBounds" type="Rectangle2D" line="198">
                <scope line="200"/>
                <declaration name="bounds" type="Rectangle2D.Float" line="203"/>
            </method>
            <method name="handleGetOutline" type="Shape" line="208">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <declaration name="matrix" type="double[]" line="209"/>
                <scope line="211">
                    <declaration name="tx" type="AffineTransform" line="212"/>
                </scope>
                <declaration name="gp" type="GeneralPath" line="216"/>
                <scope line="217">
                    <declaration name="tx" type="AffineTransform" line="218"/>
                </scope>
            </method>
            <method name="getBaselineTransform" type="AffineTransform" line="226"/>
            <method name="getOutline" type="Shape" line="230">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="handleDraw" type="void" line="235">
                <params>
                    <param name="g2d" type="Graphics2D"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <scope line="237"/>
            </method>
            <method name="draw" type="void" line="244">
                <params>
                    <param name="g2d" type="Graphics2D"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="getCharVisualBounds" type="Rectangle2D" line="249">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getNumCharacters" type="int" line="254"/>
            <method name="getCharX" type="float" line="259">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="visIndex" type="int" line="261"/>
            </method>
            <method name="getCharY" type="float" line="265">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getCharAdvance" type="float" line="270">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="caretAtOffsetIsValid" type="boolean" line="275">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="handleGetCharVisualBounds" type="Rectangle2D" line="280">
                <params>
                    <param name="index" type="int"/>
                </params>
                <comment line="284">
                    don&apos;t modify their rectangle, just in case they don&apos;t copy                    
                </comment>
                <declaration name="bounds" type="Rectangle2D" line="282"/>
                <declaration name="charBounds" type="Rectangle2D.Float" line="285"/>
            </method>
            <method name="getLineBreakIndex" type="int" line="293">
                <params>
                    <param name="start" type="int"/>
                    <param name="width" type="float"/>
                </params>
                <declaration name="index" type="int" line="295"/>
                <scope line="296"/>
            </method>
            <method name="getAdvanceBetween" type="float" line="303">
                <params>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                </params>
            </method>
            <method name="getLogicalBounds" type="Rectangle2D" line="308">
                <declaration name="left" type="float" line="310"/>
                <declaration name="top" type="float" line="311"/>
                <declaration name="width" type="float" line="312"/>
                <declaration name="height" type="float" line="313"/>
            </method>
            <method name="getAdvance" type="float" line="318"/>
            <method name="getItalicBounds" type="Rectangle2D" line="322"/>
            <method name="getSubset" type="TextLineComponent" line="326">
                <params>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="dir" type="int"/>
                </params>
                <scope line="328"/>
                <scope line="333"/>
            </method>
            <method name="toString" type="String" line="340"/>
            <javadoc line="345">
                Return the number of justification records this uses.                
            </javadoc>
            <method name="getNumJustificationInfos" type="int" line="348"/>
            <javadoc line="352">
                Return GlyphJustificationInfo objects for the characters between
                  charStart and charLimit, starting at offset infoStart.  Infos
                  will be in visual order.  All positions between infoStart and
                  getNumJustificationInfos will be set.  If a position corresponds
                  to a character outside the provided range, it is set to null.                
            </javadoc>
            <method name="getJustificationInfos" type="void" line="359">
                <params>
                    <param name="infos" type="GlyphJustificationInfo[]"/>
                    <param name="infoStart" type="int"/>
                    <param name="charStart" type="int"/>
                    <param name="charLimit" type="int"/>
                </params>
            </method>
            <javadoc line="362">
                Apply deltas to the data in this component, starting at offset
                  deltaStart, and return the new component.  There are two floats
                  for each justification info, for a total of 2  getNumJustificationInfos.
                  The first delta is the left adjustment, the second is the right
                  adjustment.
                  &lt;p&gt;
                  If flags[0] is true on entry, rejustification is allowed.  If
                  the new component requires rejustification (ligatures were
                  formed or split), flags[0] will be set on exit.                
            </javadoc>
            <method name="applyJustificationDeltas" type="TextLineComponent" line="373">
                <params>
                    <param name="deltas" type="float[]"/>
                    <param name="deltaStart" type="int"/>
                    <param name="flags" type="boolean[]"/>
                </params>
            </method>
        </class>
    </source>