<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.font.LineMetrics"/>
        <import package="java.awt.font.GraphicAttribute"/>
        <import package="java.awt.font.GlyphJustificationInfo"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.GeneralPath"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.text.Bidi"/>
        <import package="java.util.Map"/>
        <class name="GraphicComponent" line="15">
            <implements interface="TextLineComponent"/>
            <implements interface="Decoration.Label"/>
            <declaration name="GRAPHIC_LEADING" type="float" line="16"/>
            <declaration name="graphic" type="GraphicAttribute" line="17"/>
            <declaration name="graphicCount" type="int" line="18"/>
            <declaration name="charsLtoV" type="int[]" line="19"/>
            <declaration name="levels" type="byte[]" line="20"/>
            <declaration name="visualBounds" type="Rectangle2D" line="21"/>
            <declaration name="graphicAdvance" type="float" line="22"/>
            <declaration name="baseTx" type="AffineTransform" line="23"/>
            <declaration name="cm" type="CoreMetrics" line="24"/>
            <declaration name="decorator" type="Decoration" line="25"/>
            <javadoc line="26">
                Create a new GraphicComponent.  start and limit are indices
                  into charLtoV and levels.  charsLtoV and levels may be adopted.                
            </javadoc>
            <method name="GraphicComponent" type="constructor" line="30">
                <params>
                    <param name="graphic" type="GraphicAttribute"/>
                    <param name="decorator" type="Decoration"/>
                    <param name="charsLtoV" type="int[]"/>
                    <param name="levels" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="baseTx" type="AffineTransform"/>
                </params>
                <scope line="31"/>
            </method>
            <method name="GraphicComponent" type="constructor" line="41">
                <params>
                    <param name="parent" type="GraphicComponent"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="dir" type="int"/>
                </params>
                <declaration name="charsLtoV" type="int[]" line="47"/>
                <declaration name="levels" type="byte[]" line="48"/>
                <scope line="49"/>
                <scope line="53">
                    <scope line="56">
                        <scope line="59"/>
                    </scope>
                </scope>
                <scope line="65"/>
            </method>
            <javadoc line="70">
                Initialize graphicCount, also charsLtoV and levels arrays.                
            </javadoc>
            <method name="initLocalOrdering" type="void" line="73">
                <params>
                    <param name="charsLtoV" type="int[]"/>
                    <param name="levels" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                </params>
                <scope line="75"/>
                <scope line="78"/>
                <scope line="81"/>
                <scope line="84"/>
            </method>
            <method name="isSimple" type="boolean" line="89"/>
            <method name="getPixelBounds" type="Rectangle" line="92">
                <params>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="handleGetVisualBounds" type="Rectangle2D" line="95">
                <declaration name="bounds" type="Rectangle2D" line="96"/>
                <declaration name="width" type="float" line="97"/>
            </method>
            <method name="getCoreMetrics" type="CoreMetrics" line="100"/>
            <method name="createCoreMetrics" type="CoreMetrics" line="103">
                <params>
                    <param name="graphic" type="GraphicAttribute"/>
                </params>
            </method>
            <method name="getItalicAngle" type="float" line="106"/>
            <method name="getVisualBounds" type="Rectangle2D" line="109">
                <scope line="110"/>
                <declaration name="bounds" type="Rectangle2D.Float" line="113"/>
            </method>
            <method name="handleGetOutline" type="Shape" line="117">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <declaration name="matrix" type="double[]" line="118"/>
                <scope line="119">
                    <declaration name="tx" type="AffineTransform" line="120"/>
                </scope>
                <declaration name="gp" type="GeneralPath" line="123"/>
                <scope line="124">
                    <declaration name="tx" type="AffineTransform" line="125"/>
                </scope>
            </method>
            <method name="getBaselineTransform" type="AffineTransform" line="131"/>
            <method name="getOutline" type="Shape" line="134">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="handleDraw" type="void" line="137">
                <params>
                    <param name="g2d" type="Graphics2D"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <scope line="138"/>
            </method>
            <method name="draw" type="void" line="143">
                <params>
                    <param name="g2d" type="Graphics2D"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="getCharVisualBounds" type="Rectangle2D" line="146">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getNumCharacters" type="int" line="149"/>
            <method name="getCharX" type="float" line="152">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="visIndex" type="int" line="153"/>
            </method>
            <method name="getCharY" type="float" line="156">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getCharAdvance" type="float" line="159">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="caretAtOffsetIsValid" type="boolean" line="162">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="handleGetCharVisualBounds" type="Rectangle2D" line="165">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="bounds" type="Rectangle2D" line="166"/>
                <declaration name="charBounds" type="Rectangle2D.Float" line="167"/>
            </method>
            <method name="getLineBreakIndex" type="int" line="172">
                <params>
                    <param name="start" type="int"/>
                    <param name="width" type="float"/>
                </params>
                <declaration name="index" type="int" line="173"/>
                <scope line="174"/>
            </method>
            <method name="getAdvanceBetween" type="float" line="179">
                <params>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                </params>
            </method>
            <method name="getLogicalBounds" type="Rectangle2D" line="182">
                <declaration name="left" type="float" line="183"/>
                <declaration name="top" type="float" line="184"/>
                <declaration name="width" type="float" line="185"/>
                <declaration name="height" type="float" line="186"/>
            </method>
            <method name="getAdvance" type="float" line="189"/>
            <method name="getItalicBounds" type="Rectangle2D" line="192"/>
            <method name="getSubset" type="TextLineComponent" line="195">
                <params>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="dir" type="int"/>
                </params>
                <scope line="196"/>
                <scope line="199"/>
            </method>
            <method name="toString" type="String" line="204"/>
            <javadoc line="207">
                Return the number of justification records this uses.                
            </javadoc>
            <method name="getNumJustificationInfos" type="int" line="210"/>
            <javadoc line="213">
                Return GlyphJustificationInfo objects for the characters between
                  charStart and charLimit, starting at offset infoStart.  Infos
                  will be in visual order.  All positions between infoStart and
                  getNumJustificationInfos will be set.  If a position corresponds
                  to a character outside the provided range, it is set to null.                
            </javadoc>
            <method name="getJustificationInfos" type="void" line="220">
                <params>
                    <param name="infos" type="GlyphJustificationInfo[]"/>
                    <param name="infoStart" type="int"/>
                    <param name="charStart" type="int"/>
                    <param name="charLimit" type="int"/>
                </params>
            </method>
            <javadoc line="222">
                Apply deltas to the data in this component, starting at offset
                  deltaStart, and return the new component.  There are two floats
                  for each justification info, for a total of 2  getNumJustificationInfos.
                  The first delta is the left adjustment, the second is the right
                  adjustment.
                  &lt;p&gt;
                  If flags[0] is true on entry, rejustification is allowed.  If
                  the new component requires rejustification (ligatures were
                  formed or split), flags[0] will be set on exit.                
            </javadoc>
            <method name="applyJustificationDeltas" type="TextLineComponent" line="233">
                <params>
                    <param name="deltas" type="float[]"/>
                    <param name="deltaStart" type="int"/>
                    <param name="flags" type="boolean[]"/>
                </params>
            </method>
        </class>
    </source>