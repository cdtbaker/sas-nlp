<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <class name="FontRunIterator" line="33">
            <comment line="43">
                handy cache                
            </comment>
            <comment line="75">
                characters that are in the &apos;common&apos; script become part of the
                 surrounding script run.  we want to fetch these from the same font
                 used to get surrounding characters, where possible.  but we don&apos;t
                 want to force non-common characters to come from other than their
                 standard font.
                
                 what we really want to do is this:
                 1) fetch a code point from the text.
                 2) get its &apos;native&apos; script code
                 3) determine its &apos;resolved&apos; script code
                 4) if its native script is COMMON, and its resolved script is the same as the previous
                    code point&apos;s, then see if the previous font supports this code point.  if so, use it.
                 5) otherwise resolve the font as usual
                 6) break the run when either the physical font or the resolved script changes.
                
                 problems: we optimize latin-1 and cjk text assuming a fixed
                 width for each character.  since latin-1 digits and punctuation
                 are common, following this algorithm they will change to match
                 the fonts used for the preceeding text, and potentially change metrics.
                
                 this also seems to have the potential for changing arbitrary runs of text, e.g.
                 any number of digits and spaces can change depending on the preceeding (or following!)
                 non-COMMON character&apos;s font assignment.  this is not good.
                
                 since the goal is to enable layout to be performed using as few physical fonts as
                 possible, and the primary cause of switching fonts is to handle spaces, perhaps
                 we should just special-case spaces and assign them from the current font, whatever
                 it may be.
                
                 One could also argue that the job of the composite font is to assign physical fonts
                 to text runs, however it wishes.  we don&apos;t necessarily have to provide script info
                 to let it do this.  it can determine based on whatever.  so having a special &apos;next&apos;
                 function that takes script (and limit) is redundant.  It can fetch the script again
                 if need be.
                
                 both this and the script iterator are turning char sequences into code point
                 sequences.  maybe it would be better to feed a single code point into each iterator-- push
                 the data instead of pull it?                
            </comment>
            <javadoc line="33">
                Iterates over runs of fonts in a CompositeFont, optionally taking script runs into account.                
            </javadoc>
            <declaration name="font" type="CompositeFont" line="37"/>
            <declaration name="text" type="char[]" line="38"/>
            <declaration name="start" type="int" line="39"/>
            <declaration name="limit" type="int" line="40"/>
            <declaration name="mapper" type="CompositeGlyphMapper" line="42"/>
            <declaration name="slot" type="int" line="44"/>
            <declaration name="pos" type="int" line="45"/>
            <method name="init" type="void" line="47">
                <params>
                    <param name="font" type="CompositeFont"/>
                    <param name="text" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                </params>
                <scope line="48"/>
            </method>
            <method name="getFont" type="PhysicalFont" line="62"/>
            <method name="getGlyphMask" type="int" line="66"/>
            <method name="getPos" type="int" line="70"/>
            <method name="next" type="boolean" line="115">
                <params>
                    <param name="script" type="int"/>
                    <param name="lim" type="int"/>
                </params>
                <scope line="116"/>
                <declaration name="ch" type="int" line="120"/>
                <declaration name="sl" type="int" line="121"/>
            </method>
            <method name="next" type="boolean" line="129"/>
            <declaration name="SURROGATE_START" type="int" line="133"/>
            <declaration name="LEAD_START" type="int" line="134"/>
            <declaration name="LEAD_LIMIT" type="int" line="135"/>
            <declaration name="TAIL_START" type="int" line="136"/>
            <declaration name="TAIL_LIMIT" type="int" line="137"/>
            <declaration name="LEAD_SURROGATE_SHIFT" type="int" line="138"/>
            <declaration name="SURROGATE_OFFSET" type="int" line="139"/>
            <declaration name="DONE" type="int" line="141"/>
            <method name="nextCodePoint" type="int" line="143"/>
            <method name="nextCodePoint" type="int" line="147">
                <params>
                    <param name="lim" type="int"/>
                </params>
                <scope line="148"/>
                <declaration name="ch" type="int" line="151"/>
                <scope line="152">
                    <declaration name="nch" type="int" line="153"/>
                    <scope line="154"/>
                </scope>
            </method>
            <method name="pushback" type="void" line="162">
                <params>
                    <param name="ch" type="int"/>
                </params>
                <scope line="163">
                    <scope line="164"/>
                    <scope line="166"/>
                </scope>
            </method>
        </class>
    </source>