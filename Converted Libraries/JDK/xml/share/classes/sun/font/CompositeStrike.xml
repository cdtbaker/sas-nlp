<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <import package="java.awt.Font"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.geom.GeneralPath"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <class name="CompositeStrike" line="42">
            <extends class="FontStrike"/>
            <comment line="69">
                                
            </comment>
            <comment line="102">
                Performance tweak: Slot 0 can often return all the glyphs
                 Note slot zero doesn&apos;t need to be masked.
                 Could go a step further and support getting a run of glyphs.
                 This would help many locales a little.
                
                 Note that if a client constructs an invalid a composite glyph that
                 references an invalid slot, that the behaviour is currently
                 that this slot index falls through to CompositeFont.getSlotFont(int)
                 which will substitute a default font, from which to obtain the
                 strike. If its an invalid glyph code for a valid slot, then the
                 physical font for that slot will substitute the missing glyph.                
            </comment>
            <comment line="151">
                REMIND where to cache?
                 The glyph advance is already cached by physical strikes and that&apos;s a lot
                 of the work.
                 Also FontDesignMetrics maintains a latin char advance cache, so don&apos;t
                 cache advances here as apps tend to hold onto metrics objects when
                 performance is sensitive to it. Revisit this assumption later.                
            </comment>
            <comment line="178">
                The physical font slot for each glyph is encoded in the glyph ID
                 To be as efficient as possible we find a run of glyphs from the
                 same slot and create a temporary array of these glyphs decoded
                 to the slot. The slot font is then queried for the GeneralPath
                 for that run of glyphs. GeneralPaths from each run are appended
                 to create the shape for the whole glyph array.                
            </comment>
            <declaration name="SLOTMASK" type="int" line="44"/>
            <declaration name="compFont" type="CompositeFont" line="46"/>
            <declaration name="strikes" type="PhysicalStrike[]" line="47"/>
            <declaration name="numGlyphs" type="int" line="48"/>
            <method name="CompositeStrike" type="constructor" line="50">
                <params>
                    <param name="font2D" type="CompositeFont"/>
                    <param name="desc" type="FontStrikeDesc"/>
                </params>
                <scope line="54">
                    <scope line="57"/>
                    <scope line="61"/>
                </scope>
            </method>
            <method name="getStrikeForGlyph" type="PhysicalStrike" line="69">
                <params>
                    <param name="glyphCode" type="int"/>
                </params>
            </method>
            <method name="getStrikeForSlot" type="PhysicalStrike" line="73">
                <params>
                    <param name="slot" type="int"/>
                </params>
                <declaration name="strike" type="PhysicalStrike" line="75"/>
                <scope line="76"/>
            </method>
            <method name="getNumGlyphs" type="int" line="85"/>
            <method name="getFontMetrics" type="StrikeMetrics" line="89">
                <scope line="90">
                    <declaration name="compMetrics" type="StrikeMetrics" line="91"/>
                    <scope line="92"/>
                </scope>
            </method>
            <method name="getGlyphImagePtrs" type="void" line="113">
                <params>
                    <param name="glyphCodes" type="int[]"/>
                    <param name="images" type="long[]"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="strike" type="PhysicalStrike" line="114"/>
                <declaration name="numptrs" type="int" line="115"/>
                <scope line="116"/>
                <scope line="119"/>
            </method>
            <method name="getGlyphImagePtr" type="long" line="126">
                <params>
                    <param name="glyphCode" type="int"/>
                </params>
                <declaration name="strike" type="PhysicalStrike" line="127"/>
            </method>
            <method name="getGlyphImageBounds" type="void" line="131">
                <params>
                    <param name="glyphCode" type="int"/>
                    <param name="pt" type="Point2D.Float"/>
                    <param name="result" type="Rectangle"/>
                </params>
                <declaration name="strike" type="PhysicalStrike" line="132"/>
            </method>
            <method name="getGlyphMetrics" type="Point2D.Float" line="136">
                <params>
                    <param name="glyphCode" type="int"/>
                </params>
                <declaration name="strike" type="PhysicalStrike" line="137"/>
            </method>
            <method name="getCharMetrics" type="Point2D.Float" line="141">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <method name="getGlyphAdvance" type="float" line="145">
                <params>
                    <param name="glyphCode" type="int"/>
                </params>
                <declaration name="strike" type="PhysicalStrike" line="146"/>
            </method>
            <method name="getCodePointAdvance" type="float" line="157">
                <params>
                    <param name="cp" type="int"/>
                </params>
            </method>
            <method name="getGlyphOutlineBounds" type="Rectangle2D.Float" line="161">
                <params>
                    <param name="glyphCode" type="int"/>
                </params>
                <declaration name="strike" type="PhysicalStrike" line="162"/>
            </method>
            <method name="getGlyphOutline" type="GeneralPath" line="166">
                <params>
                    <param name="glyphCode" type="int"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <declaration name="strike" type="PhysicalStrike" line="168"/>
                <declaration name="path" type="GeneralPath" line="169"/>
                <scope line="170"/>
                <scope line="172"/>
            </method>
            <method name="getGlyphVectorOutline" type="GeneralPath" line="184">
                <params>
                    <param name="glyphs" type="int[]"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <declaration name="path" type="GeneralPath" line="185"/>
                <declaration name="gp" type="GeneralPath" line="186"/>
                <declaration name="glyphIndex" type="int" line="187"/>
                <declaration name="tmpGlyphs" type="int[]" line="188"/>
                <scope line="190">
                    <declaration name="start" type="int" line="191"/>
                    <declaration name="slot" type="int" line="192"/>
                    <scope line="194"/>
                    <declaration name="tmpLen" type="int" line="197"/>
                    <scope line="199"/>
                    <scope line="203"/>
                    <scope line="205"/>
                </scope>
                <scope line="209"/>
                <scope line="211"/>
            </method>
        </class>
    </source>