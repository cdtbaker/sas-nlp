<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.font">
        <import package="sun.font.EAttribute"/>
        <import package="java.lang.Math"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Paint"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.font.GraphicAttribute"/>
        <import package="java.awt.font.NumericShaper"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.awt.font.TransformAttribute"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.NoninvertibleTransformException"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.im.InputMethodHighlight"/>
        <import package="java.io.Serializable"/>
        <import package="java.text.Annotation"/>
        <import package="java.text.AttributedCharacterIterator.Attribute"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Hashtable"/>
        <class name="AttributeValues" line="60">
            <comment line="68">
                0f                
            </comment>
            <comment line="70">
                0f                
            </comment>
            <comment line="71">
                null                
            </comment>
            <comment line="72">
                null == identity                
            </comment>
            <comment line="73">
                null                
            </comment>
            <comment line="74">
                null                
            </comment>
            <comment line="75">
                null                
            </comment>
            <comment line="77">
                null                
            </comment>
            <comment line="78">
                (can be either Attribute wrapping IMH, or IMH itself                
            </comment>
            <comment line="79">
                here for completeness, don&apos;t actually use                
            </comment>
            <comment line="80">
                same default as underline                
            </comment>
            <comment line="81">
                0                
            </comment>
            <comment line="82">
                arrgh, value for ON is 0                
            </comment>
            <comment line="83">
                BIDI.DIRECTION_DEFAULT_LEFT_TO_RIGHT                
            </comment>
            <comment line="84">
                0                
            </comment>
            <comment line="85">
                0                
            </comment>
            <comment line="86">
                0                
            </comment>
            <comment line="87">
                false                
            </comment>
            <comment line="88">
                false                
            </comment>
            <comment line="90">
                derived from transform                
            </comment>
            <comment line="91">
                derived from transform                
            </comment>
            <comment line="95">
                type-specific API                
            </comment>
            <comment line="200">
                mask api                
            </comment>
            <comment line="240">
                generic EAttribute API                
            </comment>
            <comment line="307">
                merging                
            </comment>
            <comment line="352">
                creation API                
            </comment>
            <comment line="379">
                key must be serializable, so use String, not Object                
            </comment>
            <comment line="435">
                boilerplate                
            </comment>
            <comment line="551">
                internal utilities                
            </comment>
            <comment line="570">
                dispatch                
            </comment>
            <comment line="757">
                Until textlayout is fixed to use AttributeValues, we&apos;ll end up                
            </comment>
            <comment line="758">
                creating a map from the values for it.  This is a compromise between                
            </comment>
            <comment line="759">
                creating the whole map and just checking a particular value.                
            </comment>
            <comment line="760">
                Plan to remove these.                
            </comment>
            <implements interface="Cloneable"/>
            <declaration name="defined" type="int" line="61"/>
            <declaration name="nondefault" type="int" line="62"/>
            <declaration name="family" type="String" line="64"/>
            <declaration name="weight" type="float" line="65"/>
            <declaration name="width" type="float" line="66"/>
            <declaration name="posture" type="float" line="67"/>
            <declaration name="size" type="float" line="68"/>
            <declaration name="tracking" type="float" line="69"/>
            <declaration name="numericShaping" type="NumericShaper" line="70"/>
            <declaration name="transform" type="AffineTransform" line="71"/>
            <declaration name="charReplacement" type="GraphicAttribute" line="72"/>
            <declaration name="foreground" type="Paint" line="73"/>
            <declaration name="background" type="Paint" line="74"/>
            <declaration name="justification" type="float" line="75"/>
            <declaration name="imHighlight" type="Object" line="76"/>
            <declaration name="font" type="Font" line="78"/>
            <declaration name="imUnderline" type="byte" line="79"/>
            <declaration name="superscript" type="byte" line="80"/>
            <declaration name="underline" type="byte" line="81"/>
            <declaration name="runDirection" type="byte" line="82"/>
            <declaration name="bidiEmbedding" type="byte" line="83"/>
            <declaration name="kerning" type="byte" line="84"/>
            <declaration name="ligatures" type="byte" line="85"/>
            <declaration name="strikethrough" type="boolean" line="86"/>
            <declaration name="swapColors" type="boolean" line="87"/>
            <declaration name="baselineTransform" type="AffineTransform" line="89"/>
            <declaration name="charTransform" type="AffineTransform" line="90"/>
            <declaration name="DEFAULT" type="AttributeValues" line="92"/>
            <method name="getFamily" type="String" line="95"/>
            <method name="setFamily" type="void" line="96">
                <params>
                    <param name="f" type="String"/>
                </params>
            </method>
            <method name="getWeight" type="float" line="98"/>
            <method name="setWeight" type="void" line="99">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <method name="getWidth" type="float" line="101"/>
            <method name="setWidth" type="void" line="102">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <method name="getPosture" type="float" line="104"/>
            <method name="setPosture" type="void" line="105">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <method name="getSize" type="float" line="107"/>
            <method name="setSize" type="void" line="108">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <method name="getTransform" type="AffineTransform" line="110"/>
            <method name="setTransform" type="void" line="111">
                <params>
                    <param name="f" type="AffineTransform"/>
                </params>
            </method>
            <method name="setTransform" type="void" line="118">
                <params>
                    <param name="f" type="TransformAttribute"/>
                </params>
            </method>
            <method name="getSuperscript" type="int" line="126"/>
            <method name="setSuperscript" type="void" line="127">
                <params>
                    <param name="f" type="int"/>
                </params>
            </method>
            <method name="getFont" type="Font" line="130"/>
            <method name="setFont" type="void" line="131">
                <params>
                    <param name="f" type="Font"/>
                </params>
            </method>
            <method name="getCharReplacement" type="GraphicAttribute" line="133"/>
            <method name="setCharReplacement" type="void" line="134">
                <params>
                    <param name="f" type="GraphicAttribute"/>
                </params>
            </method>
            <method name="getForeground" type="Paint" line="137"/>
            <method name="setForeground" type="void" line="138">
                <params>
                    <param name="f" type="Paint"/>
                </params>
            </method>
            <method name="getBackground" type="Paint" line="141"/>
            <method name="setBackground" type="void" line="142">
                <params>
                    <param name="f" type="Paint"/>
                </params>
            </method>
            <method name="getUnderline" type="int" line="145"/>
            <method name="setUnderline" type="void" line="146">
                <params>
                    <param name="f" type="int"/>
                </params>
            </method>
            <method name="getStrikethrough" type="boolean" line="149"/>
            <method name="setStrikethrough" type="void" line="150">
                <params>
                    <param name="f" type="boolean"/>
                </params>
            </method>
            <method name="getRunDirection" type="int" line="153"/>
            <method name="setRunDirection" type="void" line="154">
                <params>
                    <param name="f" type="int"/>
                </params>
            </method>
            <method name="getBidiEmbedding" type="int" line="157"/>
            <method name="setBidiEmbedding" type="void" line="158">
                <params>
                    <param name="f" type="int"/>
                </params>
            </method>
            <method name="getJustification" type="float" line="161"/>
            <method name="setJustification" type="void" line="162">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <method name="getInputMethodHighlight" type="Object" line="165"/>
            <method name="setInputMethodHighlight" type="void" line="166">
                <params>
                    <param name="f" type="Annotation"/>
                </params>
            </method>
            <method name="setInputMethodHighlight" type="void" line="168">
                <params>
                    <param name="f" type="InputMethodHighlight"/>
                </params>
            </method>
            <method name="getInputMethodUnderline" type="int" line="171"/>
            <method name="setInputMethodUnderline" type="void" line="172">
                <params>
                    <param name="f" type="int"/>
                </params>
            </method>
            <method name="getSwapColors" type="boolean" line="175"/>
            <method name="setSwapColors" type="void" line="176">
                <params>
                    <param name="f" type="boolean"/>
                </params>
            </method>
            <method name="getNumericShaping" type="NumericShaper" line="179"/>
            <method name="setNumericShaping" type="void" line="180">
                <params>
                    <param name="f" type="NumericShaper"/>
                </params>
            </method>
            <method name="getKerning" type="int" line="183"/>
            <method name="setKerning" type="void" line="184">
                <params>
                    <param name="f" type="int"/>
                </params>
            </method>
            <method name="getTracking" type="float" line="187"/>
            <method name="setTracking" type="void" line="188">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <method name="getLigatures" type="int" line="191"/>
            <method name="setLigatures" type="void" line="192">
                <params>
                    <param name="f" type="int"/>
                </params>
            </method>
            <method name="getBaselineTransform" type="AffineTransform" line="196"/>
            <method name="getCharTransform" type="AffineTransform" line="197"/>
            <method name="getMask" type="int" line="201">
                <params>
                    <param name="att" type="EAttribute"/>
                </params>
            </method>
            <method name="getMask" type="int" line="205">
                <params>
                    <param name="atts" type="EAttribute"/>
                </params>
                <declaration name="mask" type="int" line="206"/>
                <scope line="207"/>
            </method>
            <declaration name="MASK_ALL" type="int" line="213"/>
            <method name="unsetDefault" type="void" line="216"/>
            <method name="defineAll" type="void" line="220">
                <params>
                    <param name="mask" type="int"/>
                </params>
                <scope line="222"/>
            </method>
            <method name="allDefined" type="boolean" line="227">
                <params>
                    <param name="mask" type="int"/>
                </params>
            </method>
            <method name="anyDefined" type="boolean" line="231">
                <params>
                    <param name="mask" type="int"/>
                </params>
            </method>
            <method name="anyNonDefault" type="boolean" line="235">
                <params>
                    <param name="mask" type="int"/>
                </params>
            </method>
            <method name="isDefined" type="boolean" line="241">
                <params>
                    <param name="a" type="EAttribute"/>
                </params>
            </method>
            <method name="isNonDefault" type="boolean" line="245">
                <params>
                    <param name="a" type="EAttribute"/>
                </params>
            </method>
            <method name="setDefault" type="void" line="249">
                <params>
                    <param name="a" type="EAttribute"/>
                </params>
                <scope line="250"/>
            </method>
            <method name="unset" type="void" line="258">
                <params>
                    <param name="a" type="EAttribute"/>
                </params>
                <scope line="259"/>
            </method>
            <method name="set" type="void" line="267">
                <params>
                    <param name="a" type="EAttribute"/>
                    <param name="src" type="AttributeValues"/>
                </params>
                <scope line="268"/>
                <scope line="271"/>
                <scope line="273">
                    <scope line="274"/>
                </scope>
            </method>
            <method name="set" type="void" line="281">
                <params>
                    <param name="a" type="EAttribute"/>
                    <param name="o" type="Object"/>
                </params>
                <scope line="282"/>
                <scope line="285">
                    <scope line="286"/>
                    <scope line="290"/>
                </scope>
            </method>
            <method name="get" type="Object" line="296">
                <params>
                    <param name="a" type="EAttribute"/>
                </params>
                <scope line="297"/>
                <scope line="300"/>
            </method>
            <method name="merge" type="AttributeValues" line="308">
                <params>
                    <param name="map" type="Map<? extends Attribute,?>"/>
                </params>
            </method>
            <method name="merge" type="AttributeValues" line="313">
                <params>
                    <param name="map" type="Map<? extends Attribute,?>"/>
                    <param name="mask" type="int"/>
                </params>
                <comment line="325">
                    IGNORED                    
                </comment>
                <scope line="315"/>
                <scope line="317">
                    <scope line="318">
                        <scope line="319">
                            <declaration name="ea" type="EAttribute" line="320"/>
                            <scope line="321"/>
                        </scope>
                        <scope line="324"/>
                    </scope>
                </scope>
            </method>
            <method name="merge" type="AttributeValues" line="332">
                <params>
                    <param name="src" type="AttributeValues"/>
                </params>
            </method>
            <method name="merge" type="AttributeValues" line="336">
                <params>
                    <param name="src" type="AttributeValues"/>
                    <param name="mask" type="int"/>
                </params>
                <declaration name="m" type="int" line="337"/>
                <scope line="338">
                    <scope line="339"/>
                    <scope line="342"/>
                </scope>
            </method>
            <method name="fromMap" type="AttributeValues" line="353">
                <params>
                    <param name="map" type="Map<? extends Attribute,?>"/>
                </params>
            </method>
            <method name="fromMap" type="AttributeValues" line="358">
                <params>
                    <param name="map" type="Map<? extends Attribute,?>"/>
                    <param name="mask" type="int"/>
                </params>
            </method>
            <method name="toMap" type="Map<TextAttribute,Object>" line="362">
                <params>
                    <param name="fill" type="Map<TextAttribute,Object>"/>
                </params>
                <scope line="363"/>
                <scope line="367">
                    <declaration name="ea" type="EAttribute" line="368"/>
                    <scope line="369"/>
                </scope>
            </method>
            <declaration name="DEFINED_KEY" type="String" line="379"/>
            <method name="is16Hashtable" type="boolean" line="382">
                <params>
                    <param name="ht" type="Hashtable<Object,Object>"/>
                </params>
            </method>
            <method name="fromSerializableHashtable" type="AttributeValues" line="388">
                <params>
                    <param name="ht" type="Hashtable<Object,Object>"/>
                </params>
                <declaration name="result" type="AttributeValues" line="389"/>
                <scope line="390">
                    <scope line="391">
                        <declaration name="key" type="Object" line="392"/>
                        <declaration name="val" type="Object" line="393"/>
                        <scope line="394"/>
                        <scope line="396">
                            <scope line="397">
                                <declaration name="ea" type="EAttribute" line="398"/>
                                <scope line="400"/>
                            </scope>
                            <scope line="404"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="toSerializableHashtable" type="Hashtable<Object,Object>" line="412">
                <comment line="421">
                    hashkey will handle it                    
                </comment>
                <comment line="422">
                    check all...                    
                </comment>
                <declaration name="ht" type="Hashtable" line="413"/>
                <declaration name="hashkey" type="int" line="414"/>
                <scope line="415">
                    <declaration name="ea" type="EAttribute" line="416"/>
                    <scope line="417">
                        <declaration name="o" type="Object" line="419"/>
                        <scope line="420"/>
                        <scope line="422"/>
                        <scope line="424"/>
                    </scope>
                </scope>
            </method>
            <method name="hashCode" type="int" line="435"/>
            <method name="equals" type="boolean" line="439">
                <params>
                    <param name="rhs" type="Object"/>
                </params>
                <scope line="440"/>
                <scope line="443"/>
            </method>
            <method name="equals" type="boolean" line="448">
                <params>
                    <param name="rhs" type="AttributeValues"/>
                </params>
                <comment line="449">
                    test in order of most likely to differ and easiest to compare                    
                </comment>
                <comment line="450">
                    also assumes we&apos;re generally calling this only if family,                    
                </comment>
                <comment line="451">
                    size, weight, posture are the same                    
                </comment>
            </method>
            <method name="clone" type="AttributeValues" line="483">
                <comment line="486">
                    AffineTransform is mutable                    
                </comment>
                <comment line="490">
                    if transform is null, derived transforms are null                    
                </comment>
                <comment line="491">
                    so there&apos;s nothing to do                    
                </comment>
                <comment line="495">
                    never happens                    
                </comment>
                <scope line="484">
                    <declaration name="result" type="AttributeValues" line="485"/>
                    <scope line="486"/>
                </scope>
                <scope line="494"/>
            </method>
            <method name="toString" type="String" line="500">
                <declaration name="b" type="StringBuilder" line="501"/>
                <scope line="503">
                    <declaration name="ea" type="EAttribute" line="504"/>
                    <scope line="505">
                        <scope line="507"/>
                        <scope line="540"/>
                    </scope>
                </scope>
            </method>
            <method name="equals" type="boolean" line="552">
                <params>
                    <param name="lhs" type="Object"/>
                    <param name="rhs" type="Object"/>
                </params>
            </method>
            <method name="update" type="void" line="556">
                <params>
                    <param name="a" type="EAttribute"/>
                </params>
                <scope line="558">
                    <scope line="559"/>
                    <scope line="561"/>
                </scope>
                <scope line="564"/>
            </method>
            <method name="i_set" type="void" line="571">
                <params>
                    <param name="a" type="EAttribute"/>
                    <param name="src" type="AttributeValues"/>
                </params>
            </method>
            <method name="i_equals" type="boolean" line="600">
                <params>
                    <param name="a" type="EAttribute"/>
                    <param name="src" type="AttributeValues"/>
                </params>
            </method>
            <method name="i_set" type="void" line="629">
                <params>
                    <param name="a" type="EAttribute"/>
                    <param name="o" type="Object"/>
                </params>
                <scope line="636">
                    <scope line="637">
                        <declaration name="ta" type="TransformAttribute" line="638"/>
                        <scope line="639"/>
                        <scope line="641"/>
                    </scope>
                    <scope line="644"/>
                </scope>
                <scope line="656">
                    <scope line="657"/>
                    <scope line="659"/>
                </scope>
                <scope line="665">
                    <scope line="666">
                        <declaration name="at" type="Annotation" line="667"/>
                    </scope>
                    <scope line="669"/>
                </scope>
            </method>
            <method name="i_get" type="Object" line="684">
                <params>
                    <param name="a" type="EAttribute"/>
                </params>
                <comment line="704">
                    todo: figure out a way to indicate this value                    
                </comment>
                <comment line="705">
                    case -1: return Integer.valueOf(runDirection);                    
                </comment>
                <comment line="710">
                    not reachable                    
                </comment>
                <scope line="702"/>
            </method>
            <method name="i_validate" type="boolean" line="724">
                <params>
                    <param name="a" type="EAttribute"/>
                </params>
            </method>
            <method name="getJustification" type="float" line="760">
                <params>
                    <param name="map" type="Map<?,?>"/>
                </params>
                <scope line="761">
                    <scope line="763"/>
                    <declaration name="obj" type="Object" line="766"/>
                    <scope line="767"/>
                </scope>
            </method>
            <method name="getNumericShaping" type="NumericShaper" line="774">
                <params>
                    <param name="map" type="Map<?,?>"/>
                </params>
                <scope line="775">
                    <scope line="777"/>
                    <declaration name="obj" type="Object" line="780"/>
                    <scope line="781"/>
                </scope>
            </method>
            <javadoc line="788">
                If this has an imHighlight, create copy of this with those attributes
                  applied to it.  Otherwise return this unchanged.                
            </javadoc>
            <method name="applyIMHighlight" type="AttributeValues" line="792">
                <scope line="793">
                    <declaration name="hl" type="InputMethodHighlight" line="794"/>
                    <scope line="795"/>
                    <scope line="797"/>
                    <declaration name="imStyles" type="Map" line="801"/>
                    <scope line="802">
                        <declaration name="tk" type="Toolkit" line="803"/>
                    </scope>
                    <scope line="807"/>
                </scope>
            </method>
            <method name="getBaselineTransform" type="AffineTransform" line="815">
                <params>
                    <param name="map" type="Map<?,?>"/>
                </params>
                <comment line="822">
                    yuck                    
                </comment>
                <scope line="816">
                    <declaration name="av" type="AttributeValues" line="817"/>
                    <scope line="819"/>
                    <scope line="821"/>
                    <scope line="824"/>
                </scope>
            </method>
            <method name="getCharTransform" type="AffineTransform" line="831">
                <params>
                    <param name="map" type="Map<?,?>"/>
                </params>
                <comment line="838">
                    yuck                    
                </comment>
                <scope line="832">
                    <declaration name="av" type="AttributeValues" line="833"/>
                    <scope line="835"/>
                    <scope line="837"/>
                    <scope line="840"/>
                </scope>
            </method>
            <method name="updateDerivedTransforms" type="void" line="847">
                <comment line="848">
                    this also updates the mask for the baseline transform                    
                </comment>
                <scope line="849"/>
                <scope line="852">
                    <scope line="856"/>
                    <scope line="860"/>
                </scope>
                <scope line="865"/>
                <scope line="867"/>
            </method>
            <method name="extractXRotation" type="AffineTransform" line="873">
                <params>
                    <param name="tx" type="AffineTransform"/>
                    <param name="andTranslation" type="boolean"/>
                </params>
            </method>
            <method name="extractYRotation" type="AffineTransform" line="878">
                <params>
                    <param name="tx" type="AffineTransform"/>
                    <param name="andTranslation" type="boolean"/>
                </params>
            </method>
            <method name="extractRotation" type="AffineTransform" line="883">
                <params>
                    <param name="pt" type="Point2D.Double"/>
                    <param name="tx" type="AffineTransform"/>
                    <param name="andTranslation" type="boolean"/>
                </params>
                <declaration name="rtx" type="AffineTransform" line="886"/>
                <scope line="888">
                    <declaration name="rtxi" type="AffineTransform" line="889"/>
                    <declaration name="dx" type="double" line="890"/>
                    <declaration name="dy" type="double" line="891"/>
                    <scope line="893">
                        <scope line="894"/>
                    </scope>
                </scope>
                <scope line="902"/>
            </method>
        </class>
    </source>