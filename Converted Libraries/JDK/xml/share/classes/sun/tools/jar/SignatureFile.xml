<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.jar">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.security"/>
        <import package="sun.net.www.MessageHeader"/>
        <import package="sun.misc.BASE64Encoder"/>
        <import package="sun.misc.BASE64Decoder"/>
        <import package="sun.security.pkcs"/>
        <import package="sun.security.x509.AlgorithmId"/>
        <class name="SignatureFile" line="10">
            <javadoc line="10">
                &lt;p&gt;A signature file as defined in the &lt;a
                  href=&quot;manifest.html&quot;&gt;Manifest and Signature Format&lt;/a&gt;. It has
                  essentially the same structure as a Manifest file in that it is a
                  set of RFC 822 headers (sections). The first section contains meta
                  data relevant to the entire file (i.e &quot;Signature-Version:1.0&quot;) and
                  each subsequent section contains data relevant to specific entries:
                  entry sections.
                  &lt;p&gt;Each entry section contains the name of an entry (which must
                  have a counterpart in the manifest). Like the manifest it contains
                  a hash, the hash of the manifest section correspondind to the
                  name. Since the manifest entry contains the hash of the data, this
                  is equivalent to a signature of the data, plus the attributes of
                  the manifest entry.
                  &lt;p&gt;This signature file format deal with PKCS7 encoded DSA signature
                  block. It should be straightforward to extent to support other
                  algorithms.                
                <author>
                    David Brown                    
                </author>
                <author>
                    Benjamin Renaud                    
                </author>
            </javadoc>
            <declaration name="debug" type="boolean" line="31"/>
            <declaration name="entries" type="Vector" line="32"/>
            <declaration name="hashes" type="String[]" line="33"/>
            <method name="debug" type="void" line="34">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <declaration name="manifest" type="Manifest" line="37"/>
            <declaration name="rawName" type="String" line="38"/>
            <declaration name="signatureBlock" type="PKCS7" line="39"/>
            <javadoc line="40">
                Private constructor which takes a name a given signature
                  file. The name must be extension-less and less or equal to 8
                  character in length.                
            </javadoc>
            <method name="SignatureFile" type="constructor" line="45">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="47">
                    <scope line="48"/>
                </scope>
            </method>
            <javadoc line="54">
                Private constructor which takes a name a given signature file
                  and a new file predicate. If it is a new file, a main header
                  will be added.                
            </javadoc>
            <method name="SignatureFile" type="constructor" line="59">
                <params>
                    <param name="name" type="String"/>
                    <param name="newFile" type="boolean"/>
                </params>
                <scope line="61">
                    <declaration name="globals" type="MessageHeader" line="62"/>
                </scope>
            </method>
            <javadoc line="67">
                Constructs a new Signature file corresponding to a given
                  Manifest. All entries in the manifest are signed.                
                <param>
                    manifest the manifest to use.                    
                </param>
                <param>
                    name for this signature file. This should
                      be less than 8 characters, and without a suffix (i.e.
                      without a period in it.                    
                </param>
                <exception>
                    JarException if an invalid name is passed in.                    
                </exception>
            </javadoc>
            <method name="SignatureFile" type="constructor" line="76">
                <params>
                    <param name="manifest" type="Manifest"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="enum_" type="Enumeration" line="79"/>
                <scope line="80">
                    <declaration name="mh" type="MessageHeader" line="81"/>
                    <declaration name="entryName" type="String" line="82"/>
                    <scope line="83"/>
                </scope>
            </method>
            <javadoc line="88">
                Constructs a new Signature file corresponding to a given
                  Manifest. Specific entries in the manifest are signed.                
                <param>
                    manifest the manifest to use.                    
                </param>
                <param>
                    entries the entries to sign.                    
                </param>
                <param>
                    filename for this signature file. This should
                      be less than 8 characters, and without a suffix (i.e.
                      without a period in it.                    
                </param>
                <exception>
                    JarException if an invalid name is passed in.                    
                </exception>
            </javadoc>
            <method name="SignatureFile" type="constructor" line="98">
                <params>
                    <param name="manifest" type="Manifest"/>
                    <param name="entries" type="String[]"/>
                    <param name="filename" type="String"/>
                </params>
            </method>
            <javadoc line="103">
                Construct a Signature file from an input stream.                
                <exception>
                    IOException if an invalid name is passed in or if a
                      stream exception occurs.                    
                </exception>
            </javadoc>
            <method name="SignatureFile" type="constructor" line="108">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="filename" type="String"/>
                </params>
                <scope line="110">
                    <declaration name="m" type="MessageHeader" line="111"/>
                </scope>
            </method>
            <javadoc line="115">
                Construct a Signature file from an input stream.                
                <exception>
                    IOException if an invalid name is passed in or if a
                      stream exception occurs.                    
                </exception>
            </javadoc>
            <method name="SignatureFile" type="constructor" line="120">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
            </method>
            <method name="SignatureFile" type="constructor" line="123">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
            </method>
            <javadoc line="126">
                Returns the name of the signature file, ending with a &quot;.SF&quot;
                  suffix                
            </javadoc>
            <method name="getName" type="String" line="130"/>
            <javadoc line="133">
                Returns the name of the block file, ending with a block suffix
                  such as &quot;.DSA&quot;.                
            </javadoc>
            <method name="getBlockName" type="String" line="137">
                <declaration name="suffix" type="String" line="138"/>
                <scope line="139">
                    <declaration name="info" type="SignerInfo" line="140"/>
                    <declaration name="temp" type="String" line="142"/>
                </scope>
            </method>
            <javadoc line="147">
                Returns the signature block associated with this file.                
            </javadoc>
            <method name="getBlock" type="PKCS7" line="150"/>
            <javadoc line="153">
                Sets the signature block associated with this file.                
            </javadoc>
            <method name="setBlock" type="void" line="156">
                <params>
                    <param name="block" type="PKCS7"/>
                </params>
            </method>
            <javadoc line="159">
                Add a set of entries from the current manifest.                
            </javadoc>
            <method name="add" type="void" line="162">
                <params>
                    <param name="entries" type="String[]"/>
                </params>
                <scope line="163"/>
            </method>
            <javadoc line="167">
                Add a specific entry from the current manifest.                
            </javadoc>
            <method name="add" type="void" line="170">
                <params>
                    <param name="entry" type="String"/>
                </params>
                <declaration name="mh" type="MessageHeader" line="171"/>
                <scope line="172"/>
                <declaration name="smh" type="MessageHeader" line="175"/>
                <scope line="176"/>
                <scope line="179"/>
            </method>
            <javadoc line="184">
                Get the entry corresponding to a given name. Returns null if
                  the entry does not exist.                
            </javadoc>
            <method name="getEntry" type="MessageHeader" line="188">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="enum_" type="Enumeration" line="189"/>
                <scope line="190">
                    <declaration name="mh" type="MessageHeader" line="191"/>
                    <scope line="192"/>
                </scope>
            </method>
            <javadoc line="198">
                Returns the n-th entry. The global header is a entry 0.                
            </javadoc>
            <method name="entryAt" type="MessageHeader" line="201">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="204">
                Returns an enumeration of the entries.                
            </javadoc>
            <method name="entries" type="Enumeration" line="207"/>
            <javadoc line="210">
                Given a manifest entry, computes the signature entry for this
                  manifest entry.                
            </javadoc>
            <method name="computeEntry" type="MessageHeader" line="214">
                <params>
                    <param name="mh" type="MessageHeader"/>
                </params>
                <declaration name="smh" type="MessageHeader" line="215"/>
                <declaration name="name" type="String" line="216"/>
                <scope line="217"/>
                <declaration name="encoder" type="BASE64Encoder" line="221"/>
                <scope line="222">
                    <scope line="223">
                        <declaration name="dig" type="MessageDigest" line="224"/>
                        <declaration name="baos" type="ByteArrayOutputStream" line="225"/>
                        <declaration name="ps" type="PrintStream" line="226"/>
                        <declaration name="headerBytes" type="byte[]" line="228"/>
                        <declaration name="digest" type="byte[]" line="229"/>
                    </scope>
                </scope>
                <scope line="234"/>
            </method>
            <declaration name="digests" type="Hashtable" line="238"/>
            <method name="getDigest" type="MessageDigest" line="239">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <declaration name="dig" type="MessageDigest" line="240"/>
                <scope line="241"/>
            </method>
            <javadoc line="248">
                Add a signature file at current position in a stream                
            </javadoc>
            <method name="stream" type="void" line="251">
                <params>
                    <param name="os" type="OutputStream"/>
                </params>
                <declaration name="globals" type="MessageHeader" line="252"/>
                <scope line="253"/>
                <declaration name="ps" type="PrintStream" line="256"/>
                <scope line="258">
                    <declaration name="mh" type="MessageHeader" line="259"/>
                </scope>
            </method>
        </class>
    </source>