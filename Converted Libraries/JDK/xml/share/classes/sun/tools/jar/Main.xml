<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.jar">
        <import package="java.io"/>
        <import package="java.nio.file.Path"/>
        <import package="java.nio.file.Files"/>
        <import package="java.util"/>
        <import package="java.util.zip"/>
        <import package="java.util.jar"/>
        <import package="java.util.jar.Manifest"/>
        <import package="java.text.MessageFormat"/>
        <import package="sun.misc.JarIndex"/>
        <import package="sun.misc.JarIndex.INDEX_NAME"/>
        <import package="java.util.jar.JarFile.MANIFEST_NAME"/>
        <import package="java.nio.file.StandardCopyOption.REPLACE_EXISTING"/>
        <class name="Main" line="14">
            <javadoc line="14">
                This class implements a simple utility for creating files in the JAR
                  (Java Archive) file format. The JAR format is based on the ZIP file
                  format, with optional meta-information stored in a MANIFEST entry.                
            </javadoc>
            <declaration name="program" type="String" line="20"/>
            <declaration name="out" type="PrintStream" line="21"/>
            <declaration name="fname" type="String" line="22"/>
            <declaration name="zname" type="String" line="23"/>
            <declaration name="files" type="String[]" line="24"/>
            <declaration name="rootjar" type="String" line="25"/>
            <declaration name="entryMap" type="Map&amp;lt;String,File&amp;gt;" line="26"/>
            <declaration name="entries" type="Set&amp;lt;File&amp;gt;" line="27"/>
            <declaration name="paths" type="Set&amp;lt;String&amp;gt;" line="28"/>
            <declaration name="cflag" type="boolean" line="29"/>
            <declaration name="MANIFEST_DIR" type="String" line="30"/>
            <declaration name="VERSION" type="String" line="31"/>
            <declaration name="rsrc" type="ResourceBundle" line="32"/>
            <declaration name="useExtractionTime" type="boolean" line="33"/>
            <javadoc line="33">
                If true, maintain compatibility with JDK releases prior to 6.0 by
                  timestamping extracted files with the time at which they are extracted.
                  Default is to use the time given in the archive.                
            </javadoc>
            <javadoc line="39">
                Initialize ResourceBundle                
            </javadoc>
            <scope line="42">
                <scope line="43"/>
                <scope line="46"/>
            </scope>
            <method name="getMsg" type="String" line="50">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="51"/>
                <scope line="54"/>
            </method>
            <method name="formatMsg" type="String" line="58">
                <params>
                    <param name="key" type="String"/>
                    <param name="arg" type="String"/>
                </params>
                <declaration name="msg" type="String" line="59"/>
                <declaration name="args" type="String[]" line="60"/>
            </method>
            <method name="formatMsg2" type="String" line="64">
                <params>
                    <param name="key" type="String"/>
                    <param name="arg" type="String"/>
                    <param name="arg1" type="String"/>
                </params>
                <declaration name="msg" type="String" line="65"/>
                <declaration name="args" type="String[]" line="66"/>
            </method>
            <method name="Main" type="constructor" line="71">
                <params>
                    <param name="out" type="PrintStream"/>
                    <param name="err" type="PrintStream"/>
                    <param name="program" type="String"/>
                </params>
            </method>
            <javadoc line="76">
                Creates a new empty temporary file in the same directory as the
                  specified file.  A variant of File.createTempFile.                
            </javadoc>
            <method name="createTempFileInSameDirectoryAs" type="File" line="80">
                <params>
                    <param name="file" type="File"/>
                </params>
                <declaration name="dir" type="File" line="81"/>
            </method>
            <declaration name="ok" type="boolean" line="85"/>
            <javadoc line="86">
                Starts main program with the specified arguments.                
            </javadoc>
            <method name="run" type="boolean" line="89">
                <params>
                    <param name="args" type="String"/>
                </params>
                <scope line="91"/>
                <scope line="94">
                    <scope line="95">
                        <scope line="96">
                            <scope line="98"/>
                        </scope>
                    </scope>
                    <scope line="103">
                        <declaration name="manifest" type="Manifest" line="104"/>
                        <declaration name="in" type="InputStream" line="105"/>
                        <scope line="106">
                            <scope line="107"/>
                            <scope line="111"/>
                            <scope line="116">
                                <scope line="117"/>
                            </scope>
                            <scope line="122"/>
                        </scope>
                        <declaration name="out" type="OutputStream" line="126"/>
                        <scope line="127"/>
                        <scope line="130">
                            <scope line="132"/>
                        </scope>
                        <scope line="138"/>
                    </scope>
                    <scope line="143">
                        <declaration name="inputFile" type="File" line="144"/>
                        <declaration name="in" type="FileInputStream" line="145"/>
                        <declaration name="out" type="FileOutputStream" line="146"/>
                        <scope line="147"/>
                        <scope line="153"/>
                        <declaration name="manifest" type="InputStream" line="158"/>
                        <declaration name="updateOk" type="boolean" line="160"/>
                        <scope line="161"/>
                        <scope line="166"/>
                        <scope line="169">
                            <scope line="171"/>
                        </scope>
                    </scope>
                    <scope line="178">
                        <scope line="180"/>
                        <scope line="183">
                            <declaration name="in" type="InputStream" line="184"/>
                            <scope line="185"/>
                            <scope line="188"/>
                        </scope>
                    </scope>
                    <scope line="193">
                        <scope line="195"/>
                        <scope line="198">
                            <declaration name="in" type="InputStream" line="199"/>
                            <scope line="200"/>
                            <scope line="203"/>
                        </scope>
                    </scope>
                    <scope line="208"/>
                </scope>
                <scope line="212"/>
                <scope line="216"/>
                <scope line="220"/>
            </method>
            <javadoc line="228">
                Parses command line arguments.                
            </javadoc>
            <method name="parseArgs" type="boolean" line="231">
                <params>
                    <param name="args" type="String"/>
                </params>
                <scope line="232"/>
                <scope line="235"/>
                <scope line="239"/>
                <declaration name="count" type="int" line="243"/>
                <scope line="244">
                    <declaration name="flags" type="String" line="245"/>
                    <scope line="246"/>
                    <scope line="249">
                        <scope line="252"/>
                        <scope line="259"/>
                        <scope line="266"/>
                        <scope line="273"/>
                        <scope line="295"/>
                    </scope>
                </scope>
                <scope line="312"/>
                <scope line="316"/>
                <declaration name="n" type="int" line="321"/>
                <scope line="322">
                    <declaration name="k" type="int" line="323"/>
                    <declaration name="nameBuf" type="String[]" line="324"/>
                    <scope line="325">
                        <scope line="326">
                            <scope line="327">
                                <declaration name="dir" type="String" line="328"/>
                                <scope line="331"/>
                            </scope>
                            <scope line="337"/>
                        </scope>
                    </scope>
                    <scope line="342"/>
                </scope>
                <scope line="349"/>
                <scope line="354">
                    <scope line="355"/>
                    <scope line="358"/>
                </scope>
            </method>
            <javadoc line="366">
                Expands list of files to process into full list of all files that
                  can be found by recursively descending directories.                
            </javadoc>
            <method name="expand" type="void" line="370">
                <params>
                    <param name="dir" type="File"/>
                    <param name="files" type="String[]"/>
                    <param name="isUpdate" type="boolean"/>
                </params>
                <scope line="371"/>
                <scope line="374">
                    <declaration name="f" type="File" line="375"/>
                    <scope line="376"/>
                    <scope line="379"/>
                    <scope line="382">
                        <scope line="383"/>
                    </scope>
                    <scope line="387">
                        <scope line="388">
                            <scope line="389">
                                <declaration name="dirPath" type="String" line="390"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="397"/>
                </scope>
            </method>
            <javadoc line="403">
                Creates a new JAR file.                
            </javadoc>
            <method name="create" type="void" line="406">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="manifest" type="Manifest"/>
                </params>
                <declaration name="zos" type="ZipOutputStream" line="407"/>
                <scope line="408"/>
                <scope line="411">
                    <scope line="412"/>
                    <declaration name="e" type="ZipEntry" line="415"/>
                    <scope line="422"/>
                </scope>
                <scope line="429"/>
            </method>
            <method name="toUpperCaseASCII" type="char" line="434">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="437">
                Compares two strings for equality, ignoring case.  The second
                  argument must contain only upper-case ASCII characters.
                  We don&apos;t want case comparison to be locale-dependent (else we
                  have the notorious &quot;turkish i bug&quot;).                
            </javadoc>
            <method name="equalsIgnoreCase" type="boolean" line="443">
                <params>
                    <param name="s" type="String"/>
                    <param name="upper" type="String"/>
                </params>
            </method>
            <javadoc line="454">
                Updates an existing jar file.                
            </javadoc>
            <method name="update" type="boolean" line="457">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="out" type="OutputStream"/>
                    <param name="newManifest" type="InputStream"/>
                    <param name="jarIndex" type="JarIndex"/>
                </params>
                <declaration name="zis" type="ZipInputStream" line="458"/>
                <declaration name="zos" type="ZipOutputStream" line="459"/>
                <declaration name="e" type="ZipEntry" line="460"/>
                <declaration name="foundManifest" type="boolean" line="461"/>
                <declaration name="updateOk" type="boolean" line="462"/>
                <scope line="463"/>
                <scope line="466">
                    <declaration name="name" type="String" line="467"/>
                    <declaration name="isManifestEntry" type="boolean" line="468"/>
                    <scope line="469"/>
                    <scope line="472">
                        <scope line="474">
                            <declaration name="fis" type="FileInputStream" line="475"/>
                            <declaration name="ambiguous" type="boolean" line="476"/>
                            <scope line="478"/>
                        </scope>
                        <declaration name="old" type="Manifest" line="482"/>
                        <scope line="483"/>
                    </scope>
                    <scope line="488">
                        <scope line="489">
                            <declaration name="e2" type="ZipEntry" line="490"/>
                            <scope line="495"/>
                        </scope>
                        <scope line="502">
                            <declaration name="f" type="File" line="503"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="510"/>
                <scope line="513">
                    <scope line="514">
                        <declaration name="m" type="Manifest" line="515"/>
                        <scope line="517"/>
                    </scope>
                    <scope line="521"/>
                </scope>
            </method>
            <method name="addIndex" type="void" line="529">
                <params>
                    <param name="index" type="JarIndex"/>
                    <param name="zos" type="ZipOutputStream"/>
                </params>
                <declaration name="e" type="ZipEntry" line="530"/>
                <scope line="532">
                    <declaration name="os" type="CRC32OutputStream" line="533"/>
                </scope>
            </method>
            <method name="updateManifest" type="void" line="541">
                <params>
                    <param name="m" type="Manifest"/>
                    <param name="zos" type="ZipOutputStream"/>
                </params>
                <scope line="544"/>
                <declaration name="e" type="ZipEntry" line="547"/>
                <scope line="549"/>
                <scope line="554"/>
            </method>
            <method name="entryName" type="String" line="558">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="matchPath" type="String" line="560"/>
                <scope line="561">
                    <scope line="562"/>
                </scope>
                <scope line="567"/>
                <scope line="570"/>
            </method>
            <method name="addVersion" type="void" line="575">
                <params>
                    <param name="m" type="Manifest"/>
                </params>
                <declaration name="global" type="Attributes" line="576"/>
                <scope line="577"/>
            </method>
            <method name="addCreatedBy" type="void" line="581">
                <params>
                    <param name="m" type="Manifest"/>
                </params>
                <declaration name="global" type="Attributes" line="582"/>
                <scope line="583">
                    <declaration name="javaVendor" type="String" line="584"/>
                    <declaration name="jdkVersion" type="String" line="585"/>
                </scope>
            </method>
            <method name="addMainClass" type="void" line="589">
                <params>
                    <param name="m" type="Manifest"/>
                    <param name="mainApp" type="String"/>
                </params>
                <declaration name="global" type="Attributes" line="590"/>
            </method>
            <method name="isAmbiguousMainClass" type="boolean" line="593">
                <params>
                    <param name="m" type="Manifest"/>
                </params>
                <scope line="594">
                    <declaration name="global" type="Attributes" line="595"/>
                    <scope line="596"/>
                </scope>
            </method>
            <javadoc line="604">
                Adds a new file entry to the ZIP output stream.                
            </javadoc>
            <method name="addFile" type="void" line="607">
                <params>
                    <param name="zos" type="ZipOutputStream"/>
                    <param name="file" type="File"/>
                </params>
                <declaration name="name" type="String" line="608"/>
                <declaration name="isDir" type="boolean" line="609"/>
                <scope line="610"/>
                <scope line="614"/>
                <scope line="617">
                    <scope line="618"/>
                </scope>
                <declaration name="size" type="long" line="623"/>
                <scope line="624"/>
                <declaration name="e" type="ZipEntry" line="627"/>
                <scope line="629"/>
                <scope line="634"/>
                <scope line="638"/>
                <scope line="642">
                    <declaration name="csize" type="long" line="644"/>
                    <scope line="646">
                        <declaration name="ratio" type="long" line="647"/>
                        <scope line="648"/>
                    </scope>
                    <scope line="653"/>
                </scope>
            </method>
            <declaration name="copyBuf" type="byte[]" line="658"/>
            <javadoc line="658">
                A buffer for use only by copy(InputStream, OutputStream).
                  Not as clean as allocating a new buffer as needed by copy,
                  but significantly more efficient.                
            </javadoc>
            <javadoc line="664">
                Copies all bytes from the input stream to the output stream.
                  Does not close or flush either stream.                
                <param>
                    from the input stream to read from                    
                </param>
                <param>
                    to the output stream to write to                    
                </param>
                <throws>
                    IOException if an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="copy" type="void" line="671">
                <params>
                    <param name="from" type="InputStream"/>
                    <param name="to" type="OutputStream"/>
                </params>
                <declaration name="n" type="int" line="672"/>
            </method>
            <javadoc line="675">
                Copies all bytes from the input file to the output stream.
                  Does not close or flush the output stream.                
                <param>
                    from the input file to read from                    
                </param>
                <param>
                    to the output stream to write to                    
                </param>
                <throws>
                    IOException if an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="copy" type="void" line="682">
                <params>
                    <param name="from" type="File"/>
                    <param name="to" type="OutputStream"/>
                </params>
                <declaration name="in" type="InputStream" line="683"/>
                <scope line="684"/>
                <scope line="687"/>
            </method>
            <javadoc line="691">
                Copies all bytes from the input stream to the output file.
                  Does not close the input stream.                
                <param>
                    from the input stream to read from                    
                </param>
                <param>
                    to the output file to write to                    
                </param>
                <throws>
                    IOException if an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="copy" type="void" line="698">
                <params>
                    <param name="from" type="InputStream"/>
                    <param name="to" type="File"/>
                </params>
                <declaration name="out" type="OutputStream" line="699"/>
                <scope line="700"/>
                <scope line="703"/>
            </method>
            <javadoc line="707">
                Computes the crc32 of a Manifest.  This is necessary when the
                  ZipOutputStream is in STORED mode.                
            </javadoc>
            <method name="crc32Manifest" type="void" line="711">
                <params>
                    <param name="e" type="ZipEntry"/>
                    <param name="m" type="Manifest"/>
                </params>
                <declaration name="os" type="CRC32OutputStream" line="712"/>
            </method>
            <javadoc line="716">
                Computes the crc32 of a File.  This is necessary when the
                  ZipOutputStream is in STORED mode.                
            </javadoc>
            <method name="crc32File" type="void" line="720">
                <params>
                    <param name="e" type="ZipEntry"/>
                    <param name="f" type="File"/>
                </params>
                <declaration name="os" type="CRC32OutputStream" line="721"/>
                <scope line="723"/>
            </method>
            <method name="replaceFSC" type="void" line="728">
                <params>
                    <param name="files" type="String"/>
                </params>
                <scope line="729">
                    <scope line="730"/>
                </scope>
            </method>
            <method name="newDirSet" type="Set&lt;ZipEntry&gt;" line="735">
                <anonymous_class line="736">
                    <method name="add" type="boolean" line="737">
                        <params>
                            <param name="e" type="ZipEntry"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <method name="updateLastModifiedTime" type="void" line="743">
                <params>
                    <param name="zes" type="Set&lt;ZipEntry&gt;"/>
                </params>
                <scope line="744">
                    <declaration name="lastModified" type="long" line="745"/>
                    <scope line="746">
                        <declaration name="f" type="File" line="747"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="752">
                Extracts specified entries from JAR file.                
            </javadoc>
            <method name="extract" type="void" line="755">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="files" type="String"/>
                </params>
                <declaration name="zis" type="ZipInputStream" line="756"/>
                <declaration name="e" type="ZipEntry" line="757"/>
                <declaration name="dirs" type="Set&amp;lt;ZipEntry&amp;gt;" line="758"/>
                <scope line="759">
                    <scope line="760"/>
                    <scope line="763">
                        <declaration name="name" type="String" line="764"/>
                        <scope line="765">
                            <scope line="766"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="775">
                Extracts specified entries from JAR file, via ZipFile.                
            </javadoc>
            <method name="extract" type="void" line="778">
                <params>
                    <param name="fname" type="String"/>
                    <param name="files" type="String"/>
                </params>
                <declaration name="zf" type="ZipFile" line="779"/>
                <declaration name="dirs" type="Set&amp;lt;ZipEntry&amp;gt;" line="780"/>
                <declaration name="zes" type="Enumeration&amp;lt;? extends ZipEntry&amp;gt;" line="781"/>
                <scope line="782">
                    <declaration name="e" type="ZipEntry" line="783"/>
                    <declaration name="is" type="InputStream" line="784"/>
                    <scope line="785"/>
                    <scope line="788">
                        <declaration name="name" type="String" line="789"/>
                        <scope line="790">
                            <scope line="791"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="801">
                Extracts next entry from JAR file, creating directories as needed.  If
                  the entry is for a directory which doesn&apos;t exist prior to this
                  invocation, returns that entry, otherwise returns null.                
            </javadoc>
            <method name="extractFile" type="ZipEntry" line="806">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="e" type="ZipEntry"/>
                </params>
                <declaration name="rc" type="ZipEntry" line="807"/>
                <declaration name="name" type="String" line="808"/>
                <declaration name="f" type="File" line="809"/>
                <scope line="810">
                    <scope line="811">
                        <scope line="812"/>
                    </scope>
                    <scope line="816">
                        <scope line="817"/>
                        <scope line="820"/>
                    </scope>
                    <scope line="824"/>
                </scope>
                <scope line="828">
                    <scope line="829">
                        <declaration name="d" type="File" line="830"/>
                        <scope line="831"/>
                    </scope>
                    <scope line="835"/>
                    <scope line="838"/>
                    <scope line="842">
                        <scope line="843"/>
                        <scope line="846"/>
                    </scope>
                </scope>
                <scope line="851">
                    <declaration name="lastModified" type="long" line="852"/>
                    <scope line="853"/>
                </scope>
            </method>
            <javadoc line="859">
                Lists contents of JAR file.                
            </javadoc>
            <method name="list" type="void" line="862">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="files" type="String"/>
                </params>
                <declaration name="zis" type="ZipInputStream" line="863"/>
                <declaration name="e" type="ZipEntry" line="864"/>
                <scope line="865"/>
            </method>
            <javadoc line="870">
                Lists contents of JAR file, via ZipFile.                
            </javadoc>
            <method name="list" type="void" line="873">
                <params>
                    <param name="fname" type="String"/>
                    <param name="files" type="String"/>
                </params>
                <declaration name="zf" type="ZipFile" line="874"/>
                <declaration name="zes" type="Enumeration&amp;lt;? extends ZipEntry&amp;gt;" line="875"/>
                <scope line="876"/>
            </method>
            <javadoc line="881">
                Outputs the class index table to the INDEX.LIST file of the
                  root jar file.                
            </javadoc>
            <method name="dumpIndex" type="void" line="885">
                <params>
                    <param name="rootjar" type="String"/>
                    <param name="index" type="JarIndex"/>
                </params>
                <declaration name="jarFile" type="File" line="886"/>
                <declaration name="jarPath" type="Path" line="887"/>
                <declaration name="tmpPath" type="Path" line="888"/>
                <scope line="889">
                    <scope line="890">
                        <scope line="891"/>
                        <scope line="894"/>
                    </scope>
                </scope>
                <scope line="899"/>
            </method>
            <declaration name="jarPaths" type="HashSet&amp;lt;String&amp;gt;" line="903"/>
            <javadoc line="904">
                Generates the transitive closure of the Class-Path attribute for
                  the specified jar file.                
            </javadoc>
            <method name="getJarPath" type="List&lt;String&gt;" line="908">
                <params>
                    <param name="jar" type="String"/>
                </params>
                <declaration name="files" type="List&amp;lt;String&amp;gt;" line="909"/>
                <declaration name="path" type="String" line="912"/>
                <declaration name="rf" type="JarFile" line="913"/>
                <scope line="914">
                    <declaration name="man" type="Manifest" line="915"/>
                    <scope line="916">
                        <declaration name="attr" type="Attributes" line="917"/>
                        <scope line="918">
                            <declaration name="value" type="String" line="919"/>
                            <scope line="920">
                                <declaration name="st" type="StringTokenizer" line="921"/>
                                <scope line="922">
                                    <declaration name="ajar" type="String" line="923"/>
                                    <scope line="924">
                                        <scope line="926"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="938">
                Generates class index file for the specified root jar file.                
            </javadoc>
            <method name="genIndex" type="void" line="941">
                <params>
                    <param name="rootjar" type="String"/>
                    <param name="files" type="String[]"/>
                </params>
                <declaration name="jars" type="List&amp;lt;String&amp;gt;" line="942"/>
                <declaration name="njars" type="int" line="943"/>
                <declaration name="jarfiles" type="String[]" line="944"/>
                <scope line="945">
                    <scope line="946"/>
                </scope>
                <declaration name="index" type="JarIndex" line="952"/>
            </method>
            <javadoc line="955">
                Prints entry information, if requested.                
            </javadoc>
            <method name="printEntry" type="void" line="958">
                <params>
                    <param name="e" type="ZipEntry"/>
                    <param name="files" type="String[]"/>
                </params>
                <scope line="959"/>
                <scope line="962">
                    <declaration name="name" type="String" line="963"/>
                    <scope line="964">
                        <scope line="965"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="972">
                Prints entry information.                
            </javadoc>
            <method name="printEntry" type="void" line="975">
                <params>
                    <param name="e" type="ZipEntry"/>
                </params>
                <scope line="976">
                    <declaration name="sb" type="StringBuilder" line="977"/>
                    <declaration name="s" type="String" line="978"/>
                    <scope line="979"/>
                </scope>
                <scope line="986"/>
            </method>
            <javadoc line="990">
                Prints usage message.                
            </javadoc>
            <method name="usageError" type="void" line="993"/>
            <javadoc line="996">
                A fatal exception has been caught.  No recovery possible                
            </javadoc>
            <method name="fatalError" type="void" line="999">
                <params>
                    <param name="e" type="Exception"/>
                </params>
            </method>
            <javadoc line="1002">
                A fatal condition has been detected; message is &quot;s&quot;.
                  No recovery possible                
            </javadoc>
            <method name="fatalError" type="void" line="1006">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="1009">
                Print an output message; like verbose output and the like                
            </javadoc>
            <method name="output" type="void" line="1012">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="1015">
                Print an error mesage; like something is broken                
            </javadoc>
            <method name="error" type="void" line="1018">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="1021">
                Main routine to start program.                
            </javadoc>
            <method name="main" type="void" line="1024">
                <params>
                    <param name="args" type="String"/>
                </params>
                <declaration name="jartool" type="Main" line="1025"/>
            </method>
            <class name="CRC32OutputStream" line="1028">
                <extends class="java.io.OutputStream"/>
                <javadoc line="1028">
                    An OutputStream that doesn&apos;t send its output anywhere, (but could).
                      It&apos;s here to find the CRC32 of an input file, necessary for STORED
                      mode in ZIP.                    
                </javadoc>
                <declaration name="crc" type="CRC32" line="1034"/>
                <declaration name="n" type="long" line="1035"/>
                <method name="CRC32OutputStream" type="constructor" line="1036"/>
                <method name="write" type="void" line="1038">
                    <params>
                        <param name="r" type="int"/>
                    </params>
                </method>
                <method name="write" type="void" line="1042">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <javadoc line="1046">
                    Updates a ZipEntry which describes the data read by this
                      output stream, in STORED mode.                    
                </javadoc>
                <method name="updateEntry" type="void" line="1050">
                    <params>
                        <param name="e" type="ZipEntry"/>
                    </params>
                </method>
            </class>
        </class>
    </source>