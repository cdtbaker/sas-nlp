<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.jar">
        <import package="java.io"/>
        <import package="java.nio.file.Path"/>
        <import package="java.nio.file.Files"/>
        <import package="java.util"/>
        <import package="java.util.zip"/>
        <import package="java.util.jar"/>
        <import package="java.util.jar.Manifest"/>
        <import package="java.text.MessageFormat"/>
        <import package="sun.misc.JarIndex"/>
        <import package="sun.misc.JarIndex.INDEX_NAME"/>
        <import package="java.util.jar.JarFile.MANIFEST_NAME"/>
        <import package="java.nio.file.StandardCopyOption.REPLACE_EXISTING"/>
        <class name="Main" line="41">
            <comment line="56">
                An entryName(path)-&gt;File map generated during &quot;expand&quot;, it helps to                
            </comment>
            <comment line="57">
                decide whether or not an existing entry in a jar file needs to be                
            </comment>
            <comment line="58">
                replaced, during the &quot;update&quot; operation.                
            </comment>
            <comment line="61">
                All files need to be added/updated.                
            </comment>
            <comment line="64">
                Directories specified by &quot;-C&quot; operation.                
            </comment>
            <comment line="67">
                cflag: create
                 uflag: update
                 xflag: xtract
                 tflag: table
                 vflag: verbose
                 flag0: no zip compression (store only)
                 Mflag: DO NOT generate a manifest file (just ZIP)
                 iflag: generate jar index                
            </comment>
            <javadoc line="41">
                This class implements a simple utility for creating files in the JAR
                  (Java Archive) file format. The JAR format is based on the ZIP file
                  format, with optional meta-information stored in a MANIFEST entry.                
            </javadoc>
            <declaration name="program" type="String" line="48"/>
            <declaration name="out" type="PrintStream" line="49"/>
            <declaration name="fname" type="String" line="50"/>
            <declaration name="zname" type="String" line="51"/>
            <declaration name="files" type="String[]" line="52"/>
            <declaration name="rootjar" type="String" line="53"/>
            <declaration name="entryMap" type="Map&lt;String,File&gt;" line="58"/>
            <declaration name="entries" type="Set&lt;File&gt;" line="61"/>
            <declaration name="paths" type="Set&lt;String&gt;" line="64"/>
            <declaration name="cflag" type="boolean" line="76"/>
            <declaration name="MANIFEST_DIR" type="String" line="78"/>
            <declaration name="VERSION" type="String" line="79"/>
            <declaration name="rsrc" type="ResourceBundle" line="81"/>
            <declaration name="useExtractionTime" type="boolean" line="83"/>
            <javadoc line="83">
                If true, maintain compatibility with JDK releases prior to 6.0 by
                  timestamping extracted files with the time at which they are extracted.
                  Default is to use the time given in the archive.                
            </javadoc>
            <javadoc line="91">
                Initialize ResourceBundle                
            </javadoc>
            <scope line="94">
                <scope line="95"/>
                <scope line="97"/>
            </scope>
            <method name="getMsg" type="String" line="102">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="103"/>
                <scope line="105"/>
            </method>
            <method name="formatMsg" type="String" line="110">
                <params>
                    <param name="key" type="String"/>
                    <param name="arg" type="String"/>
                </params>
                <declaration name="msg" type="String" line="111"/>
                <declaration name="args" type="String[]" line="112"/>
            </method>
            <method name="formatMsg2" type="String" line="117">
                <params>
                    <param name="key" type="String"/>
                    <param name="arg" type="String"/>
                    <param name="arg1" type="String"/>
                </params>
                <declaration name="msg" type="String" line="118"/>
                <declaration name="args" type="String[]" line="119"/>
            </method>
            <method name="Main" type="constructor" line="125">
                <params>
                    <param name="out" type="PrintStream"/>
                    <param name="err" type="PrintStream"/>
                    <param name="program" type="String"/>
                </params>
            </method>
            <javadoc line="131">
                Creates a new empty temporary file in the same directory as the
                  specified file.  A variant of File.createTempFile.                
            </javadoc>
            <method name="createTempFileInSameDirectoryAs" type="File" line="136">
                <params>
                    <param name="file" type="File"/>
                </params>
                <declaration name="dir" type="File" line="137"/>
            </method>
            <declaration name="ok" type="boolean" line="143"/>
            <javadoc line="145">
                Starts main program with the specified arguments.                
            </javadoc>
            <method name="run" type="boolean" line="148">
                <params>
                    <param name="args" type="String"/>
                </params>
                <comment line="156">
                    The name of the zip file as it would appear as its own                    
                </comment>
                <comment line="157">
                    zip file entry. We use this to make sure that we don&apos;t                    
                </comment>
                <comment line="158">
                    add the zip file to itself.                    
                </comment>
                <comment line="194">
                    Disable verbose output so that it does not appear                    
                </comment>
                <comment line="195">
                    on stdout along with file data                    
                </comment>
                <comment line="196">
                    error(&quot;Warning: -v option ignored&quot;);                    
                </comment>
                <comment line="234">
                    on Win32, we need this delete                    
                </comment>
                <scope line="150"/>
                <scope line="153">
                    <scope line="154">
                        <scope line="155">
                            <scope line="160"/>
                        </scope>
                    </scope>
                    <scope line="165">
                        <declaration name="manifest" type="Manifest" line="166"/>
                        <declaration name="in" type="InputStream" line="167"/>
                        <scope line="169">
                            <scope line="170"/>
                            <scope line="173"/>
                            <scope line="178">
                                <scope line="179"/>
                            </scope>
                            <scope line="184"/>
                        </scope>
                        <declaration name="out" type="OutputStream" line="188"/>
                        <scope line="189"/>
                        <scope line="191">
                            <scope line="193"/>
                        </scope>
                        <scope line="202"/>
                    </scope>
                    <scope line="206">
                        <declaration name="inputFile" type="File" line="207"/>
                        <declaration name="in" type="FileInputStream" line="208"/>
                        <declaration name="out" type="FileOutputStream" line="209"/>
                        <scope line="210"/>
                        <scope line="215"/>
                        <declaration name="manifest" type="InputStream" line="220"/>
                        <declaration name="updateOk" type="boolean" line="223"/>
                        <scope line="225"/>
                        <scope line="230"/>
                        <scope line="233">
                            <scope line="236"/>
                        </scope>
                    </scope>
                    <scope line="242">
                        <scope line="244"/>
                        <scope line="246">
                            <declaration name="in" type="InputStream" line="247"/>
                            <scope line="248"/>
                            <scope line="250"/>
                        </scope>
                    </scope>
                    <scope line="254">
                        <scope line="256"/>
                        <scope line="258">
                            <declaration name="in" type="InputStream" line="259"/>
                            <scope line="262"/>
                            <scope line="264"/>
                        </scope>
                    </scope>
                    <scope line="268"/>
                </scope>
                <scope line="271"/>
                <scope line="274"/>
                <scope line="277"/>
            </method>
            <javadoc line="286">
                Parses command line arguments.                
            </javadoc>
            <method name="parseArgs" type="boolean" line="289">
                <params>
                    <param name="args" type="String"/>
                </params>
                <comment line="290">
                                        
                </comment>
                <comment line="300">
                                        
                </comment>
                <comment line="357">
                    do not increase the counter, files will contain rootjar                    
                </comment>
                <comment line="380">
                                        
                </comment>
                <comment line="388">
                                        
                </comment>
                <comment line="414">
                                        
                </comment>
                <scope line="291"/>
                <scope line="293"/>
                <scope line="296"/>
                <declaration name="count" type="int" line="301"/>
                <scope line="302">
                    <declaration name="flags" type="String" line="303"/>
                    <scope line="304"/>
                    <scope line="307">
                        <scope line="310"/>
                        <scope line="317"/>
                        <scope line="324"/>
                        <scope line="331"/>
                        <scope line="353"/>
                    </scope>
                </scope>
                <scope line="371"/>
                <scope line="375"/>
                <declaration name="n" type="int" line="381"/>
                <scope line="382">
                    <declaration name="k" type="int" line="383"/>
                    <declaration name="nameBuf" type="String[]" line="384"/>
                    <scope line="385">
                        <scope line="386">
                            <scope line="387">
                                <declaration name="dir" type="String" line="389"/>
                                <scope line="393"/>
                            </scope>
                            <scope line="398"/>
                        </scope>
                    </scope>
                    <scope line="402"/>
                </scope>
                <scope line="408"/>
                <scope line="412">
                    <scope line="413"/>
                    <scope line="416"/>
                </scope>
            </method>
            <javadoc line="425">
                Expands list of files to process into full list of all files that
                  can be found by recursively descending directories.                
            </javadoc>
            <method name="expand" type="void" line="429">
                <params>
                    <param name="dir" type="File"/>
                    <param name="files" type="String[]"/>
                    <param name="isUpdate" type="boolean"/>
                </params>
                <scope line="430"/>
                <scope line="433">
                    <declaration name="f" type="File" line="434"/>
                    <scope line="435"/>
                    <scope line="437"/>
                    <scope line="440">
                        <scope line="441"/>
                    </scope>
                    <scope line="445">
                        <scope line="446">
                            <scope line="447">
                                <declaration name="dirPath" type="String" line="448"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="455"/>
                </scope>
            </method>
            <javadoc line="462">
                Creates a new JAR file.                
            </javadoc>
            <method name="create" type="void" line="467">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="manifest" type="Manifest"/>
                </params>
                <declaration name="zos" type="ZipOutputStream" line="468"/>
                <scope line="469"/>
                <scope line="472">
                    <scope line="473"/>
                    <declaration name="e" type="ZipEntry" line="476"/>
                    <scope line="483"/>
                </scope>
                <scope line="490"/>
            </method>
            <method name="toUpperCaseASCII" type="char" line="496">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="500">
                Compares two strings for equality, ignoring case.  The second
                  argument must contain only upper-case ASCII characters.
                  We don&apos;t want case comparison to be locale-dependent (else we
                  have the notorious &quot;turkish i bug&quot;).                
            </javadoc>
            <method name="equalsIgnoreCase" type="boolean" line="506">
                <params>
                    <param name="s" type="String"/>
                    <param name="upper" type="String"/>
                </params>
                <declaration name="len" type="int" line="508"/>
                <scope line="511">
                    <declaration name="c1" type="char" line="512"/>
                    <declaration name="c2" type="char" line="513"/>
                </scope>
            </method>
            <javadoc line="520">
                Updates an existing jar file.                
            </javadoc>
            <method name="update" type="boolean" line="526">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="out" type="OutputStream"/>
                    <param name="newManifest" type="InputStream"/>
                    <param name="jarIndex" type="JarIndex"/>
                </params>
                <comment line="537">
                    put the old entries first, replace if necessary                    
                </comment>
                <comment line="550">
                    Don&apos;t read from the newManifest InputStream, as we                    
                </comment>
                <comment line="551">
                    might need it below, and we can&apos;t re-read the same data                    
                </comment>
                <comment line="552">
                    twice.                    
                </comment>
                <comment line="561">
                    Update the manifest.                    
                </comment>
                <comment line="568">
                    copy the old stuff                    
                </comment>
                <comment line="569">
                    do our own compression                    
                </comment>
                <comment line="581">
                    replace with the new files                    
                </comment>
                <comment line="590">
                    add the remaining new files                    
                </comment>
                <declaration name="zis" type="ZipInputStream" line="527"/>
                <declaration name="zos" type="ZipOutputStream" line="528"/>
                <declaration name="e" type="ZipEntry" line="529"/>
                <declaration name="foundManifest" type="boolean" line="530"/>
                <declaration name="updateOk" type="boolean" line="531"/>
                <scope line="533"/>
                <scope line="538">
                    <declaration name="name" type="String" line="539"/>
                    <declaration name="isManifestEntry" type="boolean" line="541"/>
                    <scope line="544"/>
                    <scope line="547">
                        <scope line="549">
                            <declaration name="fis" type="FileInputStream" line="553"/>
                            <declaration name="ambiguous" type="boolean" line="554"/>
                            <scope line="556"/>
                        </scope>
                        <declaration name="old" type="Manifest" line="562"/>
                        <scope line="563"/>
                    </scope>
                    <scope line="567">
                        <scope line="568">
                            <declaration name="e2" type="ZipEntry" line="570"/>
                            <scope line="575"/>
                        </scope>
                        <scope line="581">
                            <declaration name="f" type="File" line="582"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="591"/>
                <scope line="594">
                    <scope line="595">
                        <declaration name="m" type="Manifest" line="596"/>
                        <scope line="598"/>
                    </scope>
                    <scope line="601"/>
                </scope>
            </method>
            <method name="addIndex" type="void" line="613">
                <params>
                    <param name="index" type="JarIndex"/>
                    <param name="zos" type="ZipOutputStream"/>
                </params>
                <declaration name="e" type="ZipEntry" line="614"/>
                <scope line="616">
                    <declaration name="os" type="CRC32OutputStream" line="617"/>
                </scope>
            </method>
            <method name="updateManifest" type="void" line="628">
                <params>
                    <param name="m" type="Manifest"/>
                    <param name="zos" type="ZipOutputStream"/>
                </params>
                <scope line="631"/>
                <declaration name="e" type="ZipEntry" line="634"/>
                <scope line="636"/>
                <scope line="641"/>
            </method>
            <method name="entryName" type="String" line="647">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="matchPath" type="String" line="649"/>
                <scope line="650">
                    <scope line="652"/>
                </scope>
                <scope line="658"/>
                <scope line="660"/>
            </method>
            <method name="addVersion" type="void" line="666">
                <params>
                    <param name="m" type="Manifest"/>
                </params>
                <declaration name="global" type="Attributes" line="667"/>
                <scope line="668"/>
            </method>
            <method name="addCreatedBy" type="void" line="673">
                <params>
                    <param name="m" type="Manifest"/>
                </params>
                <declaration name="global" type="Attributes" line="674"/>
                <scope line="675">
                    <declaration name="javaVendor" type="String" line="676"/>
                    <declaration name="jdkVersion" type="String" line="677"/>
                </scope>
            </method>
            <method name="addMainClass" type="void" line="683">
                <params>
                    <param name="m" type="Manifest"/>
                    <param name="mainApp" type="String"/>
                </params>
                <comment line="686">
                    overrides any existing Main-Class attribute                    
                </comment>
                <declaration name="global" type="Attributes" line="684"/>
            </method>
            <method name="isAmbiguousMainClass" type="boolean" line="690">
                <params>
                    <param name="m" type="Manifest"/>
                </params>
                <scope line="691">
                    <declaration name="global" type="Attributes" line="692"/>
                    <scope line="693"/>
                </scope>
            </method>
            <javadoc line="702">
                Adds a new file entry to the ZIP output stream.                
            </javadoc>
            <method name="addFile" type="void" line="705">
                <params>
                    <param name="zos" type="ZipOutputStream"/>
                    <param name="file" type="File"/>
                </params>
                <comment line="743">
                                        
                </comment>
                <declaration name="name" type="String" line="706"/>
                <declaration name="isDir" type="boolean" line="707"/>
                <scope line="708"/>
                <scope line="714"/>
                <scope line="717">
                    <scope line="718"/>
                </scope>
                <declaration name="size" type="long" line="724"/>
                <scope line="726"/>
                <declaration name="e" type="ZipEntry" line="729"/>
                <scope line="731"/>
                <scope line="735"/>
                <scope line="739"/>
                <scope line="744">
                    <declaration name="csize" type="long" line="746"/>
                    <scope line="749">
                        <declaration name="ratio" type="long" line="750"/>
                        <scope line="751"/>
                    </scope>
                    <scope line="755"/>
                </scope>
            </method>
            <declaration name="copyBuf" type="byte[]" line="761"/>
            <javadoc line="761">
                A buffer for use only by copy(InputStream, OutputStream).
                  Not as clean as allocating a new buffer as needed by copy,
                  but significantly more efficient.                
            </javadoc>
            <javadoc line="768">
                Copies all bytes from the input stream to the output stream.
                  Does not close or flush either stream.                
                <param>
                    from the input stream to read from                    
                </param>
                <param>
                    to the output stream to write to                    
                </param>
                <throws>
                    IOException if an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="copy" type="void" line="776">
                <params>
                    <param name="from" type="InputStream"/>
                    <param name="to" type="OutputStream"/>
                </params>
                <declaration name="n" type="int" line="777"/>
            </method>
            <javadoc line="782">
                Copies all bytes from the input file to the output stream.
                  Does not close or flush the output stream.                
                <param>
                    from the input file to read from                    
                </param>
                <param>
                    to the output stream to write to                    
                </param>
                <throws>
                    IOException if an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="copy" type="void" line="790">
                <params>
                    <param name="from" type="File"/>
                    <param name="to" type="OutputStream"/>
                </params>
                <declaration name="in" type="InputStream" line="791"/>
                <scope line="792"/>
                <scope line="794"/>
            </method>
            <javadoc line="799">
                Copies all bytes from the input stream to the output file.
                  Does not close the input stream.                
                <param>
                    from the input stream to read from                    
                </param>
                <param>
                    to the output file to write to                    
                </param>
                <throws>
                    IOException if an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="copy" type="void" line="807">
                <params>
                    <param name="from" type="InputStream"/>
                    <param name="to" type="File"/>
                </params>
                <declaration name="out" type="OutputStream" line="808"/>
                <scope line="809"/>
                <scope line="811"/>
            </method>
            <javadoc line="816">
                Computes the crc32 of a Manifest.  This is necessary when the
                  ZipOutputStream is in STORED mode.                
            </javadoc>
            <method name="crc32Manifest" type="void" line="820">
                <params>
                    <param name="e" type="ZipEntry"/>
                    <param name="m" type="Manifest"/>
                </params>
                <declaration name="os" type="CRC32OutputStream" line="821"/>
            </method>
            <javadoc line="826">
                Computes the crc32 of a File.  This is necessary when the
                  ZipOutputStream is in STORED mode.                
            </javadoc>
            <method name="crc32File" type="void" line="830">
                <params>
                    <param name="e" type="ZipEntry"/>
                    <param name="f" type="File"/>
                </params>
                <declaration name="os" type="CRC32OutputStream" line="831"/>
                <scope line="833"/>
            </method>
            <method name="replaceFSC" type="void" line="840">
                <params>
                    <param name="files" type="String"/>
                </params>
                <scope line="841">
                    <scope line="842"/>
                </scope>
            </method>
            <method name="newDirSet" type="Set<ZipEntry>" line="849">
                <anonymous_class line="850">
                    <method name="add" type="boolean" line="851">
                        <params>
                            <param name="e" type="ZipEntry"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <method name="updateLastModifiedTime" type="void" line="856">
                <params>
                    <param name="zes" type="Set<ZipEntry>"/>
                </params>
                <scope line="857">
                    <declaration name="lastModified" type="long" line="858"/>
                    <scope line="859">
                        <declaration name="f" type="File" line="860"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="866">
                Extracts specified entries from JAR file.                
            </javadoc>
            <method name="extract" type="void" line="869">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="files" type="String"/>
                </params>
                <comment line="872">
                    Set of all directory entries specified in archive.  Disallows                    
                </comment>
                <comment line="873">
                    null entries.  Disallows all entries if using pre-6.0 behavior.                    
                </comment>
                <comment line="889">
                    Update timestamps of directories specified in archive with their                    
                </comment>
                <comment line="890">
                    timestamps as given in the archive.  We do this after extraction,                    
                </comment>
                <comment line="891">
                    instead of during, because creating a file in a directory changes                    
                </comment>
                <comment line="892">
                    that directory&apos;s timestamp.                    
                </comment>
                <declaration name="zis" type="ZipInputStream" line="870"/>
                <declaration name="e" type="ZipEntry" line="871"/>
                <declaration name="dirs" type="Set&lt;ZipEntry&gt;" line="874"/>
                <scope line="875">
                    <scope line="876"/>
                    <scope line="878">
                        <declaration name="name" type="String" line="879"/>
                        <scope line="880">
                            <scope line="881"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="896">
                Extracts specified entries from JAR file, via ZipFile.                
            </javadoc>
            <method name="extract" type="void" line="899">
                <params>
                    <param name="fname" type="String"/>
                    <param name="files" type="String"/>
                </params>
                <declaration name="zf" type="ZipFile" line="900"/>
                <declaration name="dirs" type="Set&lt;ZipEntry&gt;" line="901"/>
                <declaration name="zes" type="Enumeration&lt;? extends ZipEntry&gt;" line="902"/>
                <scope line="903">
                    <declaration name="e" type="ZipEntry" line="904"/>
                    <declaration name="is" type="InputStream" line="905"/>
                    <scope line="906"/>
                    <scope line="908">
                        <declaration name="name" type="String" line="909"/>
                        <scope line="910">
                            <scope line="911"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="922">
                Extracts next entry from JAR file, creating directories as needed.  If
                  the entry is for a directory which doesn&apos;t exist prior to this
                  invocation, returns that entry, otherwise returns null.                
            </javadoc>
            <method name="extractFile" type="ZipEntry" line="927">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="e" type="ZipEntry"/>
                </params>
                <declaration name="rc" type="ZipEntry" line="928"/>
                <declaration name="name" type="String" line="929"/>
                <declaration name="f" type="File" line="930"/>
                <scope line="931">
                    <scope line="932">
                        <scope line="933"/>
                    </scope>
                    <scope line="937">
                        <scope line="938"/>
                        <scope line="941"/>
                    </scope>
                    <scope line="946"/>
                </scope>
                <scope line="949">
                    <scope line="950">
                        <declaration name="d" type="File" line="951"/>
                        <scope line="952"/>
                    </scope>
                    <scope line="957"/>
                    <scope line="959"/>
                    <scope line="965">
                        <scope line="966"/>
                        <scope line="968"/>
                    </scope>
                </scope>
                <scope line="973">
                    <declaration name="lastModified" type="long" line="974"/>
                    <scope line="975"/>
                </scope>
            </method>
            <javadoc line="982">
                Lists contents of JAR file.                
            </javadoc>
            <method name="list" type="void" line="985">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="files" type="String"/>
                </params>
                <comment line="989">
                    In the case of a compressed (deflated) entry, the entry size
                     is stored immediately following the entry data and cannot be
                     determined until the entry is fully read. Therefore, we close
                     the entry first before printing out its attributes.                    
                </comment>
                <declaration name="zis" type="ZipInputStream" line="986"/>
                <declaration name="e" type="ZipEntry" line="987"/>
                <scope line="988"/>
            </method>
            <javadoc line="1000">
                Lists contents of JAR file, via ZipFile.                
            </javadoc>
            <method name="list" type="void" line="1003">
                <params>
                    <param name="fname" type="String"/>
                    <param name="files" type="String"/>
                </params>
                <declaration name="zf" type="ZipFile" line="1004"/>
                <declaration name="zes" type="Enumeration&lt;? extends ZipEntry&gt;" line="1005"/>
                <scope line="1006"/>
            </method>
            <javadoc line="1012">
                Outputs the class index table to the INDEX.LIST file of the
                  root jar file.                
            </javadoc>
            <method name="dumpIndex" type="void" line="1016">
                <params>
                    <param name="rootjar" type="String"/>
                    <param name="index" type="JarIndex"/>
                </params>
                <declaration name="jarFile" type="File" line="1017"/>
                <declaration name="jarPath" type="Path" line="1018"/>
                <declaration name="tmpPath" type="Path" line="1019"/>
                <scope line="1020">
                    <scope line="1023">
                        <scope line="1024"/>
                        <scope line="1026"/>
                    </scope>
                </scope>
                <scope line="1030"/>
            </method>
            <declaration name="jarPaths" type="HashSet&lt;String&gt;" line="1035"/>
            <javadoc line="1037">
                Generates the transitive closure of the Class-Path attribute for
                  the specified jar file.                
            </javadoc>
            <method name="getJarPath" type="List<String>" line="1041">
                <params>
                    <param name="jar" type="String"/>
                </params>
                <comment line="1046">
                    take out the current path                    
                </comment>
                <comment line="1049">
                    class path attribute will give us jar file name with                    
                </comment>
                <comment line="1050">
                    &apos;/&apos; as separators, so we need to change them to the                    
                </comment>
                <comment line="1051">
                    appropriate one before we open the jar file.                    
                </comment>
                <comment line="1064">
                    it is a jar file                    
                </comment>
                <comment line="1066">
                                        
                </comment>
                <declaration name="files" type="List&lt;String&gt;" line="1042"/>
                <declaration name="path" type="String" line="1047"/>
                <declaration name="rf" type="JarFile" line="1052"/>
                <scope line="1054">
                    <declaration name="man" type="Manifest" line="1055"/>
                    <scope line="1056">
                        <declaration name="attr" type="Attributes" line="1057"/>
                        <scope line="1058">
                            <declaration name="value" type="String" line="1059"/>
                            <scope line="1060">
                                <declaration name="st" type="StringTokenizer" line="1061"/>
                                <scope line="1062">
                                    <declaration name="ajar" type="String" line="1063"/>
                                    <scope line="1064">
                                        <scope line="1067"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1080">
                Generates class index file for the specified root jar file.                
            </javadoc>
            <method name="genIndex" type="void" line="1083">
                <params>
                    <param name="rootjar" type="String"/>
                    <param name="files" type="String[]"/>
                </params>
                <comment line="1089">
                    no class-path attribute defined in rootjar, will                    
                </comment>
                <comment line="1090">
                    use command line specified list of jars                    
                </comment>
                <declaration name="jars" type="List&lt;String&gt;" line="1084"/>
                <declaration name="njars" type="int" line="1085"/>
                <declaration name="jarfiles" type="String[]" line="1086"/>
                <scope line="1088">
                    <scope line="1091"/>
                </scope>
                <declaration name="index" type="JarIndex" line="1097"/>
            </method>
            <javadoc line="1101">
                Prints entry information, if requested.                
            </javadoc>
            <method name="printEntry" type="void" line="1104">
                <params>
                    <param name="e" type="ZipEntry"/>
                    <param name="files" type="String[]"/>
                </params>
                <scope line="1105"/>
                <scope line="1107">
                    <declaration name="name" type="String" line="1108"/>
                    <scope line="1109">
                        <scope line="1110"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1118">
                Prints entry information.                
            </javadoc>
            <method name="printEntry" type="void" line="1121">
                <params>
                    <param name="e" type="ZipEntry"/>
                </params>
                <scope line="1122">
                    <declaration name="sb" type="StringBuilder" line="1123"/>
                    <declaration name="s" type="String" line="1124"/>
                    <scope line="1125"/>
                </scope>
                <scope line="1131"/>
            </method>
            <javadoc line="1136">
                Prints usage message.                
            </javadoc>
            <method name="usageError" type="void" line="1139"/>
            <javadoc line="1143">
                A fatal exception has been caught.  No recovery possible                
            </javadoc>
            <method name="fatalError" type="void" line="1146">
                <params>
                    <param name="e" type="Exception"/>
                </params>
            </method>
            <javadoc line="1150">
                A fatal condition has been detected; message is &quot;s&quot;.
                  No recovery possible                
            </javadoc>
            <method name="fatalError" type="void" line="1154">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="1158">
                Print an output message; like verbose output and the like                
            </javadoc>
            <method name="output" type="void" line="1161">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="1165">
                Print an error mesage; like something is broken                
            </javadoc>
            <method name="error" type="void" line="1168">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="1172">
                Main routine to start program.                
            </javadoc>
            <method name="main" type="void" line="1175">
                <params>
                    <param name="args" type="String"/>
                </params>
                <declaration name="jartool" type="Main" line="1176"/>
            </method>
            <class name="CRC32OutputStream" line="1180">
                <extends class="java.io.OutputStream"/>
                <javadoc line="1180">
                    An OutputStream that doesn&apos;t send its output anywhere, (but could).
                      It&apos;s here to find the CRC32 of an input file, necessary for STORED
                      mode in ZIP.                    
                </javadoc>
                <declaration name="crc" type="CRC32" line="1186"/>
                <declaration name="n" type="long" line="1187"/>
                <method name="CRC32OutputStream" type="constructor" line="1189"/>
                <method name="write" type="void" line="1191">
                    <params>
                        <param name="r" type="int"/>
                    </params>
                </method>
                <method name="write" type="void" line="1196">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <javadoc line="1201">
                    Updates a ZipEntry which describes the data read by this
                      output stream, in STORED mode.                    
                </javadoc>
                <method name="updateEntry" type="void" line="1205">
                    <params>
                        <param name="e" type="ZipEntry"/>
                    </params>
                </method>
            </class>
        </class>
    </source>