<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.javac">
        <import package="sun.tools.java"/>
        <import package="sun.tools.tree.Node"/>
        <import package="sun.tools.java.Package"/>
        <import package="java.util"/>
        <import package="java.io"/>
        <class name="BatchEnvironment" line="7">
            <extends class="Environment"/>
            <implements interface="ErrorConsumer"/>
            <javadoc line="7">
                Main environment of the batch version of the Java compiler,
                  this needs more work.
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="out" type="OutputStream" line="15"/>
            <javadoc line="15">
                The stream where error message are printed.                
            </javadoc>
            <declaration name="sourcePath" type="ClassPath" line="19"/>
            <javadoc line="19">
                The path we use for finding source files.                
            </javadoc>
            <declaration name="binaryPath" type="ClassPath" line="23"/>
            <javadoc line="23">
                The path we use for finding class (binary) files.                
            </javadoc>
            <declaration name="packages" type="Hashtable" line="27"/>
            <javadoc line="27">
                A hashtable of resource contexts.                
            </javadoc>
            <declaration name="classesOrdered" type="Vector" line="31"/>
            <javadoc line="31">
                The classes, in order of appearance.                
            </javadoc>
            <declaration name="classes" type="Hashtable" line="35"/>
            <javadoc line="35">
                The classes, keyed by ClassDeclaration.                
            </javadoc>
            <declaration name="flags" type="int" line="39"/>
            <javadoc line="39">
                flags                
            </javadoc>
            <declaration name="majorVersion" type="short" line="43"/>
            <javadoc line="43">
                Major and minor versions to use for generated class files.
                  Environments that extend BatchEnvironment (such as javadoc&apos;s
                  Env class) get the default values below.
                  javac itself may override these versions with values determined
                  from the command line &quot;-target&quot; option.                
            </javadoc>
            <declaration name="minorVersion" type="short" line="51"/>
            <declaration name="covFile" type="File" line="52"/>
            <javadoc line="52">
                coverage data file                
            </javadoc>
            <declaration name="nerrors" type="int" line="56"/>
            <javadoc line="56">
                The number of errors and warnings                
            </javadoc>
            <declaration name="nwarnings" type="int" line="60"/>
            <declaration name="ndeprecations" type="int" line="61"/>
            <declaration name="deprecationFiles" type="Vector" line="62"/>
            <javadoc line="62">
                A list of files containing deprecation warnings.                
            </javadoc>
            <declaration name="errorConsumer" type="ErrorConsumer" line="66"/>
            <javadoc line="66">
                writes out error messages                
            </javadoc>
            <javadoc line="70">
                Old constructors -- these constructors build a BatchEnvironment
                  with an old-style class path.                
            </javadoc>
            <method name="BatchEnvironment" type="constructor" line="74">
                <params>
                    <param name="path" type="ClassPath"/>
                </params>
            </method>
            <method name="BatchEnvironment" type="constructor" line="77">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="path" type="ClassPath"/>
                </params>
            </method>
            <method name="BatchEnvironment" type="constructor" line="80">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="path" type="ClassPath"/>
                    <param name="errorConsumer" type="ErrorConsumer"/>
                </params>
            </method>
            <javadoc line="83">
                New constructors -- these constructors build a BatchEnvironment
                  with a source path and a binary path.                
            </javadoc>
            <method name="BatchEnvironment" type="constructor" line="87">
                <params>
                    <param name="sourcePath" type="ClassPath"/>
                    <param name="binaryPath" type="ClassPath"/>
                </params>
            </method>
            <method name="BatchEnvironment" type="constructor" line="90">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="sourcePath" type="ClassPath"/>
                    <param name="binaryPath" type="ClassPath"/>
                </params>
            </method>
            <method name="BatchEnvironment" type="constructor" line="93">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="sourcePath" type="ClassPath"/>
                    <param name="binaryPath" type="ClassPath"/>
                    <param name="errorConsumer" type="ErrorConsumer"/>
                </params>
            </method>
            <javadoc line="99">
                Factory                
            </javadoc>
            <method name="create" type="BatchEnvironment" line="102">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="srcPathString" type="String"/>
                    <param name="classPathString" type="String"/>
                    <param name="sysClassPathString" type="String"/>
                    <param name="extDirsString" type="String"/>
                </params>
                <declaration name="classPaths" type="ClassPath[]" line="103"/>
            </method>
            <method name="classPaths" type="ClassPath[]" line="106">
                <params>
                    <param name="srcPathString" type="String"/>
                    <param name="classPathString" type="String"/>
                    <param name="sysClassPathString" type="String"/>
                    <param name="extDirsString" type="String"/>
                </params>
                <declaration name="sourcePath" type="ClassPath" line="107"/>
                <declaration name="binaryPath" type="ClassPath" line="108"/>
                <declaration name="binaryPathBuffer" type="StringBuffer" line="109"/>
                <scope line="110">
                    <scope line="112"/>
                </scope>
                <scope line="116"/>
                <scope line="119">
                    <scope line="121"/>
                </scope>
                <scope line="126"/>
                <scope line="129">
                    <declaration name="st" type="StringTokenizer" line="130"/>
                    <scope line="131">
                        <declaration name="dirName" type="String" line="132"/>
                        <declaration name="dir" type="File" line="133"/>
                        <scope line="134"/>
                        <scope line="137">
                            <declaration name="files" type="String[]" line="138"/>
                            <scope line="139">
                                <declaration name="name" type="String" line="140"/>
                                <scope line="141"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="appendPath" type="void" line="153">
                <params>
                    <param name="buf" type="StringBuffer"/>
                    <param name="str" type="String"/>
                </params>
                <scope line="154">
                    <scope line="155"/>
                </scope>
            </method>
            <javadoc line="161">
                Return flags                
            </javadoc>
            <method name="getFlags" type="int" line="164"/>
            <javadoc line="167">
                Return major version to use for generated class files                
            </javadoc>
            <method name="getMajorVersion" type="short" line="170"/>
            <javadoc line="173">
                Return minor version to use for generated class files                
            </javadoc>
            <method name="getMinorVersion" type="short" line="176"/>
            <javadoc line="179">
                Return coverage data file                
            </javadoc>
            <method name="getcovFile" type="File" line="182"/>
            <javadoc line="185">
                Return an enumeration of all the currently defined classes
                  in order of appearance to getClassDeclaration().                
            </javadoc>
            <method name="getClasses" type="Enumeration" line="189"/>
            <declaration name="exemptPackages" type="Set" line="192"/>
            <javadoc line="192">
                A set of Identifiers for all packages exempt from the &quot;exists&quot;
                  check in Imports#resolve().  These are the current packages for
                  all classes being compiled as of the first call to isExemptPackage.                
            </javadoc>
            <javadoc line="198">
                Tells whether an Identifier refers to a package which should be
                  exempt from the &quot;exists&quot; check in Imports#resolve().                
            </javadoc>
            <method name="isExemptPackage" type="boolean" line="202">
                <params>
                    <param name="id" type="Identifier"/>
                </params>
                <scope line="203"/>
            </method>
            <javadoc line="208">
                Set the set of packages which are exempt from the exists check
                  in Imports#resolve().                
            </javadoc>
            <method name="setExemptPackages" type="void" line="212">
                <scope line="214">
                    <declaration name="c" type="ClassDeclaration" line="215"/>
                    <scope line="216">
                        <declaration name="def" type="SourceClass" line="217"/>
                        <declaration name="pkg" type="Identifier" line="219"/>
                        <scope line="220"/>
                    </scope>
                </scope>
                <scope line="225">
                    <scope line="227">
                        <scope line="228"/>
                    </scope>
                    <scope line="233"/>
                </scope>
            </method>
            <javadoc line="238">
                Get a class, given the fully qualified class name                
            </javadoc>
            <method name="getClassDeclaration" type="ClassDeclaration" line="241">
                <params>
                    <param name="nm" type="Identifier"/>
                </params>
            </method>
            <method name="getClassDeclaration" type="ClassDeclaration" line="244">
                <params>
                    <param name="t" type="Type"/>
                </params>
                <declaration name="c" type="ClassDeclaration" line="245"/>
                <scope line="246"/>
            </method>
            <javadoc line="252">
                Check if a class exists
                  Applies only to package members (non-nested classes).                
            </javadoc>
            <method name="classExists" type="boolean" line="256">
                <params>
                    <param name="nm" type="Identifier"/>
                </params>
                <scope line="257"/>
                <declaration name="t" type="Type" line="260"/>
                <scope line="261">
                    <declaration name="c" type="ClassDeclaration" line="262"/>
                </scope>
                <scope line="265"/>
            </method>
            <javadoc line="269">
                Get the package path for a package                
            </javadoc>
            <method name="getPackage" type="Package" line="272">
                <params>
                    <param name="pkg" type="Identifier"/>
                </params>
                <declaration name="p" type="Package" line="273"/>
                <scope line="274"/>
            </method>
            <javadoc line="279">
                Parse a source file                
            </javadoc>
            <method name="parseFile" type="void" line="282">
                <params>
                    <param name="file" type="ClassFile"/>
                </params>
                <declaration name="tm" type="long" line="283"/>
                <declaration name="input" type="InputStream" line="284"/>
                <declaration name="p" type="BatchParser" line="285"/>
                <declaration name="env" type="Environment" line="287"/>
                <scope line="288"/>
                <scope line="293"/>
                <scope line="297"/>
                <scope line="300"/>
                <scope line="303"/>
                <scope line="306"/>
                <scope line="308"/>
                <scope line="312"/>
                <scope line="315">
                    <declaration name="e" type="Enumeration" line="316"/>
                    <declaration name="first" type="ClassDefinition" line="317"/>
                    <scope line="318"/>
                    <declaration name="current" type="ClassDefinition" line="321"/>
                    <declaration name="next" type="ClassDefinition" line="322"/>
                    <scope line="323">
                        <scope line="325"/>
                    </scope>
                    <scope line="332"/>
                </scope>
            </method>
            <javadoc line="339">
                Load a binary file                
            </javadoc>
            <method name="loadFile" type="BinaryClass" line="342">
                <params>
                    <param name="file" type="ClassFile"/>
                </params>
                <declaration name="tm" type="long" line="343"/>
                <declaration name="input" type="InputStream" line="344"/>
                <declaration name="c" type="BinaryClass" line="345"/>
                <scope line="347">
                    <declaration name="is" type="DataInputStream" line="348"/>
                </scope>
                <scope line="351"/>
                <scope line="356"/>
                <scope line="361"/>
            </method>
            <javadoc line="368">
                Default flags for loadFile.  Subclasses may override this.                
            </javadoc>
            <method name="loadFileFlags" type="int" line="371"/>
            <javadoc line="374">
                Load a binary class                
            </javadoc>
            <method name="needsCompilation" type="boolean" line="377">
                <params>
                    <param name="check" type="Hashtable"/>
                    <param name="c" type="ClassDeclaration"/>
                </params>
                <scope line="385">
                    <declaration name="bin" type="BinaryClass" line="387"/>
                    <scope line="388">
                        <declaration name="dep" type="ClassDeclaration" line="389"/>
                        <scope line="390"/>
                    </scope>
                </scope>
                <scope line="400"/>
            </method>
            <javadoc line="409">
                Load the definition of a class
                  or at least determine how to load it.
                  The caller must repeat calls to this method
                  until it the state converges to CS_BINARY, CS_PARSED, or the like..                
                <see>
                    ClassDeclaration#getClassDefinition                    
                </see>
            </javadoc>
            <method name="loadDefinition" type="void" line="416">
                <params>
                    <param name="c" type="ClassDeclaration"/>
                </params>
                <scope line="420">
                    <declaration name="nm" type="Identifier" line="422"/>
                    <declaration name="pkg" type="Package" line="423"/>
                    <scope line="424"/>
                    <scope line="427"/>
                    <declaration name="binfile" type="ClassFile" line="433"/>
                    <scope line="434"/>
                    <declaration name="srcfile" type="ClassFile" line="439"/>
                    <scope line="440">
                        <declaration name="bc" type="BinaryClass" line="442"/>
                        <scope line="443"/>
                        <scope line="446"/>
                        <scope line="452"/>
                        <scope line="457"/>
                        <scope line="462">
                            <scope line="465">
                                <scope line="467"/>
                                <scope line="474"/>
                                <scope line="478"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="bc" type="BinaryClass" line="493"/>
                    <scope line="494">
                        <scope line="495"/>
                    </scope>
                    <scope line="502"/>
                    <scope line="506"/>
                    <scope line="511">
                        <declaration name="name" type="Identifier" line="512"/>
                        <scope line="513">
                            <scope line="514"/>
                            <scope line="518"/>
                        </scope>
                        <scope line="523">
                            <scope line="526"/>
                            <scope line="530"/>
                        </scope>
                    </scope>
                    <scope line="536"/>
                </scope>
                <scope line="545">
                    <declaration name="tab" type="Hashtable" line="547"/>
                    <scope line="548">
                        <scope line="549">
                            <declaration name="dep" type="ClassDeclaration" line="550"/>
                            <scope line="551"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="561">
                    <declaration name="srcfile" type="ClassFile" line="563"/>
                    <declaration name="pkg" type="Package" line="564"/>
                    <scope line="565">
                        <scope line="566"/>
                        <scope line="570"/>
                        <scope line="574">
                            <declaration name="fn" type="String" line="575"/>
                        </scope>
                    </scope>
                    <scope line="579">
                        <declaration name="nm" type="Identifier" line="580"/>
                        <scope line="581"/>
                        <scope line="585"/>
                        <scope line="589"/>
                    </scope>
                    <scope line="595"/>
                    <scope line="598"/>
                    <scope line="602"/>
                </scope>
            </method>
            <javadoc line="613">
                Create a new class.                
            </javadoc>
            <method name="makeClassDefinition" type="ClassDefinition" line="616">
                <params>
                    <param name="toplevelEnv" type="Environment"/>
                    <param name="where" type="long"/>
                    <param name="name" type="IdentifierToken"/>
                    <param name="doc" type="String"/>
                    <param name="modifiers" type="int"/>
                    <param name="superClass" type="IdentifierToken"/>
                    <param name="interfaces" type="IdentifierToken"/>
                    <param name="outerClass" type="ClassDefinition"/>
                </params>
                <declaration name="nm" type="Identifier" line="617"/>
                <declaration name="nmpos" type="long" line="618"/>
                <declaration name="pkgNm" type="Identifier" line="619"/>
                <declaration name="mangledName" type="String" line="620"/>
                <declaration name="localContextClass" type="ClassDefinition" line="621"/>
                <declaration name="localName" type="Identifier" line="622"/>
                <scope line="623"/>
                <scope line="626">
                    <scope line="628">
                        <scope line="630"/>
                    </scope>
                    <declaration name="outerNm" type="Identifier" line="634"/>
                    <scope line="636"/>
                    <scope line="639"/>
                </scope>
                <scope line="643"/>
                <scope line="646"/>
                <declaration name="c" type="ClassDeclaration" line="649"/>
                <scope line="650"/>
                <scope line="654"/>
                <declaration name="sourceClass" type="ClassDefinition" line="657"/>
                <scope line="658">
                    <scope line="660"/>
                </scope>
            </method>
            <javadoc line="666">
                Create a new field.                
            </javadoc>
            <method name="makeMemberDefinition" type="MemberDefinition" line="669">
                <params>
                    <param name="origEnv" type="Environment"/>
                    <param name="where" type="long"/>
                    <param name="clazz" type="ClassDefinition"/>
                    <param name="doc" type="String"/>
                    <param name="modifiers" type="int"/>
                    <param name="type" type="Type"/>
                    <param name="name" type="Identifier"/>
                    <param name="argNames" type="IdentifierToken"/>
                    <param name="expIds" type="IdentifierToken"/>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="v" type="Vector" line="671"/>
                <scope line="672">
                    <scope line="674"/>
                </scope>
                <declaration name="f" type="SourceMember" line="678"/>
            </method>
            <javadoc line="682">
                Release resources in classpath.                
            </javadoc>
            <method name="shutdown" type="void" line="685">
                <scope line="686">
                    <scope line="687"/>
                    <scope line="690"/>
                </scope>
                <scope line="694"/>
            </method>
            <javadoc line="701">
                Error String                
            </javadoc>
            <method name="errorString" type="String" line="704">
                <params>
                    <param name="err" type="String"/>
                    <param name="arg1" type="Object"/>
                    <param name="arg2" type="Object"/>
                    <param name="arg3" type="Object"/>
                </params>
                <declaration name="key" type="String" line="705"/>
            </method>
            <declaration name="errorFileName" type="String" line="710"/>
            <javadoc line="710">
                The filename where the last errors have occurred                
            </javadoc>
            <declaration name="errors" type="ErrorMessage" line="714"/>
            <javadoc line="714">
                List of outstanding error messages                
            </javadoc>
            <javadoc line="718">
                Insert an error message in the list of outstanding error messages.
                  The list is sorted on input position and contains no duplicates.
                  The return value indicates whether or not the message was
                  actually inserted.
                  The method flushErrors() used to check for duplicate error messages.
                  It would only detect duplicates if they were contiguous.  Removing
                  non-contiguous duplicate error messages is slightly less complicated
                  at insertion time, so the functionality was moved here.  This also
                  saves a miniscule number of allocations.                
            </javadoc>
            <method name="insertError" type="boolean" line="729">
                <params>
                    <param name="where" type="long"/>
                    <param name="message" type="String"/>
                </params>
                <scope line="730">
                    <declaration name="newMsg" type="ErrorMessage" line="731"/>
                </scope>
                <scope line="735"/>
                <scope line="738">
                    <declaration name="current" type="ErrorMessage" line="739"/>
                    <declaration name="next" type="ErrorMessage" line="740"/>
                    <scope line="741"/>
                    <scope line="744">
                        <scope line="745"/>
                    </scope>
                    <declaration name="newMsg" type="ErrorMessage" line="750"/>
                </scope>
            </method>
            <declaration name="errorsPushed" type="int" line="756"/>
            <declaration name="errorLimit" type="int" line="757"/>
            <javadoc line="757">
                Maximum number of errors to print.                
            </javadoc>
            <declaration name="hitErrorLimit" type="boolean" line="761"/>
            <javadoc line="762">
                Flush outstanding errors                
            </javadoc>
            <method name="pushError" type="void" line="765">
                <params>
                    <param name="errorFileName" type="String"/>
                    <param name="line" type="int"/>
                    <param name="message" type="String"/>
                    <param name="referenceText" type="String"/>
                    <param name="referenceTextPointer" type="String"/>
                </params>
                <declaration name="limit" type="int" line="766"/>
                <scope line="767">
                    <scope line="768"/>
                </scope>
                <scope line="774"/>
                <scope line="779"/>
            </method>
            <method name="flushErrors" type="void" line="783">
                <scope line="784"/>
                <declaration name="inputAvail" type="boolean" line="787"/>
                <declaration name="data" type="char" line="788"/>
                <declaration name="dataLength" type="int" line="789"/>
                <scope line="790">
                    <declaration name="in" type="FileInputStream" line="791"/>
                    <declaration name="reader" type="InputStreamReader" line="793"/>
                </scope>
                <scope line="798"/>
                <scope line="800">
                    <declaration name="ln" type="int" line="801"/>
                    <declaration name="off" type="int" line="802"/>
                    <declaration name="referenceString" type="String" line="804"/>
                    <declaration name="markerString" type="String" line="805"/>
                    <scope line="806">
                        <declaration name="i" type="int" line="807"/>
                        <declaration name="strdata" type="char" line="811"/>
                        <scope line="812"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="822">
                Report error                
            </javadoc>
            <method name="reportError" type="void" line="825">
                <params>
                    <param name="src" type="Object"/>
                    <param name="where" type="long"/>
                    <param name="err" type="String"/>
                    <param name="msg" type="String"/>
                </params>
                <scope line="826">
                    <scope line="827"/>
                    <scope line="831">
                        <scope line="832"/>
                    </scope>
                </scope>
                <scope line="842">
                    <declaration name="fileName" type="String" line="843"/>
                    <scope line="844"/>
                    <scope line="848">
                        <scope line="849">
                            <scope line="850"/>
                            <scope line="853">
                                <scope line="854"/>
                            </scope>
                            <scope line="858"/>
                        </scope>
                        <scope line="862">
                            <scope line="863">
                                <scope line="864"/>
                            </scope>
                            <scope line="868"/>
                        </scope>
                    </scope>
                    <scope line="873">
                        <scope line="874"/>
                    </scope>
                </scope>
                <scope line="880"/>
                <scope line="883"/>
                <scope line="886">
                    <scope line="887"/>
                    <scope line="890"/>
                </scope>
                <scope line="894">
                    <declaration name="c" type="ClassDefinition" line="895"/>
                    <scope line="896"/>
                </scope>
                <scope line="901"/>
                <scope line="904"/>
            </method>
            <javadoc line="908">
                Issue an error                
            </javadoc>
            <method name="error" type="void" line="911">
                <params>
                    <param name="source" type="Object"/>
                    <param name="where" type="long"/>
                    <param name="err" type="String"/>
                    <param name="arg1" type="Object"/>
                    <param name="arg2" type="Object"/>
                    <param name="arg3" type="Object"/>
                </params>
                <scope line="912"/>
                <scope line="915"/>
            </method>
            <javadoc line="921">
                Output a string. This can either be an error message or something
                  for debugging.                
            </javadoc>
            <method name="output" type="void" line="925">
                <params>
                    <param name="msg" type="String"/>
                </params>
                <declaration name="out" type="PrintStream" line="926"/>
            </method>
        </class>
    </source>