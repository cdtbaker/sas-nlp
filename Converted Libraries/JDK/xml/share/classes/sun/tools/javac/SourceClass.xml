<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.javac">
        <import package="sun.tools.java"/>
        <import package="sun.tools.tree"/>
        <import package="sun.tools.tree.CompoundStatement"/>
        <import package="sun.tools.asm.Assembler"/>
        <import package="sun.tools.asm.ConstantPool"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Iterator"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.File"/>
        <class name="SourceClass" line="16">
            <extends class="ClassDefinition"/>
            <javadoc line="16">
                This class represents an Java class as it is read from
                  an Java source file.
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="toplevelEnv" type="Environment" line="24"/>
            <javadoc line="24">
                The toplevel environment, shared with the parser                
            </javadoc>
            <declaration name="defConstructor" type="SourceMember" line="28"/>
            <javadoc line="28">
                The default constructor                
            </javadoc>
            <declaration name="tab" type="ConstantPool" line="32"/>
            <javadoc line="32">
                The constant pool                
            </javadoc>
            <declaration name="deps" type="Hashtable" line="36"/>
            <javadoc line="36">
                The list of class dependencies                
            </javadoc>
            <declaration name="thisArg" type="LocalMember" line="40"/>
            <javadoc line="40">
                The field used to represent &quot;this&quot; in all of my code.                
            </javadoc>
            <declaration name="endPosition" type="long" line="44"/>
            <javadoc line="44">
                Last token of class, as reported by parser.                
            </javadoc>
            <declaration name="dummyArgumentType" type="Type" line="48"/>
            <javadoc line="48">
                Access methods for constructors are distinguished from
                  the constructors themselves by a dummy first argument.
                  A unique type used for this purpose and shared by all
                  constructor access methods within a package-member class is
                  maintained here.
                  &lt;p&gt;
                  This field is null except in an outermost class containing
                  one or more classes needing such an access method.                
            </javadoc>
            <javadoc line="59">
                Constructor                
            </javadoc>
            <method name="SourceClass" type="constructor" line="62">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="where" type="long"/>
                    <param name="declaration" type="ClassDeclaration"/>
                    <param name="documentation" type="String"/>
                    <param name="modifiers" type="int"/>
                    <param name="superClass" type="IdentifierToken"/>
                    <param name="interfaces" type="IdentifierToken"/>
                    <param name="outerClass" type="SourceClass"/>
                    <param name="localName" type="Identifier"/>
                </params>
                <scope line="67"/>
                <scope line="70"/>
                <scope line="74">
                    <scope line="75"/>
                    <scope line="78">
                        <scope line="81"/>
                    </scope>
                </scope>
                <scope line="86"/>
                <scope line="90"/>
                <scope line="94">
                    <declaration name="outerArg" type="LocalMember" line="95"/>
                    <declaration name="r" type="UplevelReference" line="96"/>
                </scope>
                <declaration name="thisName" type="Identifier" line="100"/>
                <scope line="101">
                    <scope line="102">
                        <declaration name="outerName" type="Identifier" line="103"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="108">
                Return last position in this class.                
                <see>
                    #getWhere                    
                </see>
            </javadoc>
            <method name="getEndPosition" type="long" line="112"/>
            <method name="setEndPosition" type="void" line="115">
                <params>
                    <param name="endPosition" type="long"/>
                </params>
            </method>
            <javadoc line="118">
                Return absolute name of source file                
            </javadoc>
            <method name="getAbsoluteName" type="String" line="121">
                <declaration name="AbsName" type="String" line="122"/>
            </method>
            <javadoc line="125">
                Return imports                
            </javadoc>
            <method name="getImports" type="Imports" line="128"/>
            <javadoc line="131">
                Find or create my &quot;this&quot; argument, which is used for all methods.                
            </javadoc>
            <method name="getThisArgument" type="LocalMember" line="134">
                <scope line="135"/>
            </method>
            <javadoc line="140">
                Add a dependency                
            </javadoc>
            <method name="addDependency" type="void" line="143">
                <params>
                    <param name="c" type="ClassDeclaration"/>
                </params>
                <scope line="144"/>
                <scope line="147"/>
            </method>
            <javadoc line="151">
                Add a field (check it first)                
            </javadoc>
            <method name="addMember" type="void" line="154">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="f" type="MemberDefinition"/>
                </params>
                <scope line="163"/>
                <scope line="166"/>
                <scope line="171">
                    <scope line="172"/>
                    <scope line="176">
                        <scope line="177"/>
                    </scope>
                    <scope line="182"/>
                </scope>
                <scope line="186">
                    <scope line="187">
                        <scope line="188"/>
                        <scope line="192"/>
                    </scope>
                    <scope line="197">
                        <scope line="198"/>
                    </scope>
                    <scope line="203"/>
                    <scope line="206"/>
                    <scope line="210"/>
                    <scope line="214"/>
                    <scope line="218">
                        <scope line="219"/>
                        <scope line="223"/>
                        <scope line="227"/>
                        <scope line="231"/>
                        <scope line="235"/>
                    </scope>
                    <scope line="240">
                        <scope line="241"/>
                    </scope>
                    <scope line="246">
                        <scope line="247">
                            <scope line="248"/>
                            <scope line="251"/>
                        </scope>
                    </scope>
                    <declaration name="arguments" type="Vector" line="257"/>
                    <scope line="258">
                        <declaration name="argumentLength" type="int" line="259"/>
                        <declaration name="argTypes" type="Type" line="260"/>
                        <scope line="261">
                            <declaration name="arg" type="Object" line="262"/>
                            <declaration name="where" type="long" line="263"/>
                            <scope line="264"/>
                            <scope line="268"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="274">
                    <scope line="275"/>
                    <scope line="279">
                        <declaration name="c" type="ClassDefinition" line="283"/>
                    </scope>
                </scope>
                <scope line="288">
                    <scope line="289"/>
                    <scope line="293"/>
                    <scope line="297"/>
                    <scope line="301"/>
                    <scope line="305"/>
                    <scope line="309"/>
                    <scope line="313"/>
                </scope>
                <scope line="319">
                    <scope line="320">
                        <scope line="321"/>
                        <scope line="325"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="333">
                Create an environment suitable for checking this class.
                  Make sure the source and imports are set right.
                  Make sure the environment contains no context information.
                  (Actually, throw away env altogether and use toplevelEnv instead.)                
            </javadoc>
            <method name="setupEnv" type="Environment" line="339">
                <params>
                    <param name="env" type="Environment"/>
                </params>
            </method>
            <javadoc line="342">
                A source class never reports deprecation, since the compiler
                  allows access to deprecated features that are being compiled
                  in the same job.                
            </javadoc>
            <method name="reportDeprecated" type="boolean" line="347">
                <params>
                    <param name="env" type="Environment"/>
                </params>
            </method>
            <javadoc line="350">
                See if the source file of this class is right.                
                <see>
                    ClassDefinition#noteUsedBy                    
                </see>
            </javadoc>
            <method name="noteUsedBy" type="void" line="354">
                <params>
                    <param name="ref" type="ClassDefinition"/>
                    <param name="where" type="long"/>
                    <param name="env" type="Environment"/>
                </params>
                <declaration name="def" type="ClassDefinition" line="356"/>
                <scope line="357"/>
                <scope line="360"/>
                <scope line="363"/>
                <scope line="366"/>
            </method>
            <javadoc line="371">
                Check this class and all its fields.                
            </javadoc>
            <method name="check" type="void" line="374">
                <params>
                    <param name="env" type="Environment"/>
                </params>
                <scope line="376"/>
                <scope line="380">
                    <scope line="381"/>
                    <declaration name="vset" type="Vset" line="385"/>
                    <declaration name="ctx" type="Context" line="386"/>
                </scope>
            </method>
            <method name="maybeCheck" type="void" line="392">
                <params>
                    <param name="env" type="Environment"/>
                </params>
                <declaration name="c" type="ClassDeclaration" line="394"/>
                <scope line="395"/>
            </method>
            <method name="checkInternal" type="Vset" line="400">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                </params>
                <declaration name="nm" type="Identifier" line="401"/>
                <scope line="402"/>
                <declaration name="sup" type="ClassDeclaration" line="407"/>
                <scope line="408">
                    <declaration name="where" type="long" line="409"/>
                </scope>
                <scope line="413">
                    <declaration name="intf" type="ClassDeclaration" line="414"/>
                    <declaration name="where" type="long" line="415"/>
                    <scope line="416"/>
                </scope>
                <scope line="421">
                    <declaration name="simpleName" type="Identifier" line="422"/>
                    <scope line="423">
                        <declaration name="imports" type="Imports" line="424"/>
                        <declaration name="ID" type="Identifier" line="425"/>
                    </scope>
                    <scope line="428">
                        <declaration name="ID" type="Identifier" line="429"/>
                    </scope>
                    <scope line="432"/>
                    <scope line="434"/>
                </scope>
            </method>
            <declaration name="sourceFileChecked" type="boolean" line="441"/>
            <javadoc line="442">
                See if the source file of this class is of the right name.                
            </javadoc>
            <method name="checkSourceFile" type="void" line="445">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="where" type="long"/>
                </params>
                <declaration name="fname" type="String" line="448"/>
                <declaration name="src" type="String" line="449"/>
                <scope line="450">
                    <scope line="451"/>
                    <scope line="454"/>
                </scope>
            </method>
            <declaration name="supersChecked" type="boolean" line="459"/>
            <javadoc line="460">
                Overrides &apos;ClassDefinition.getSuperClass&apos;.                
            </javadoc>
            <method name="getSuperClass" type="ClassDeclaration" line="463">
                <params>
                    <param name="env" type="Environment"/>
                </params>
                <scope line="465"/>
            </method>
            <javadoc line="471">
                Check that all superclasses and superinterfaces are defined and
                  well formed.  Among other checks, verify that the inheritance
                  graph is acyclic.  Called from &apos;resolveTypeStructure&apos;.                
            </javadoc>
            <method name="checkSupers" type="void" line="476">
                <params>
                    <param name="env" type="Environment"/>
                </params>
                <scope line="479">
                    <scope line="480">
                        <declaration name="nm" type="Identifier" line="481"/>
                    </scope>
                </scope>
                <scope line="485">
                    <scope line="486">
                        <declaration name="where" type="long" line="487"/>
                        <scope line="489">
                            <declaration name="def" type="ClassDefinition" line="490"/>
                            <scope line="492"/>
                            <scope line="496"/>
                            <scope line="500"/>
                            <scope line="504"/>
                            <scope line="508"/>
                            <scope line="511"/>
                            <scope line="514">
                                <declaration name="sup" type="ClassDefinition" line="515"/>
                                <scope line="516">
                                    <scope line="517"/>
                                    <declaration name="s" type="ClassDeclaration" line="522"/>
                                    <scope line="523"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="530">
                            <scope line="531">
                                <scope line="532"/>
                                <scope line="535"/>
                                <scope line="540"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="547">
                        <scope line="548"/>
                        <scope line="551"/>
                    </scope>
                </scope>
                <scope line="557">
                    <declaration name="intf" type="ClassDeclaration" line="558"/>
                    <declaration name="where" type="long" line="559"/>
                    <scope line="560"/>
                    <scope line="563">
                        <declaration name="def" type="ClassDefinition" line="564"/>
                        <scope line="566"/>
                        <scope line="569"/>
                        <scope line="572"/>
                        <scope line="575"/>
                    </scope>
                    <scope line="580">
                        <scope line="581">
                            <scope line="582"/>
                            <scope line="585"/>
                            <scope line="590"/>
                        </scope>
                    </scope>
                    <declaration name="newInterfaces" type="ClassDeclaration" line="596"/>
                </scope>
            </method>
            <javadoc line="604">
                Check all of the members of this class.
                  &lt;p&gt;
                  Inner classes are checked in the following way.  Any class which
                  is immediately contained in a block (anonymous and local classes)
                  is checked along with its containing method; see the
                  SourceMember.check() method for more information.  Member classes
                  of this class are checked immediately after this class, unless this
                  class is insideLocal(), in which case, they are checked with the
                  rest of the members.                
            </javadoc>
            <method name="checkMembers" type="Vset" line="615">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                </params>
                <scope line="616"/>
                <scope line="619">
                    <scope line="620">
                        <declaration name="cdef" type="SourceClass" line="621"/>
                        <scope line="622"/>
                    </scope>
                </scope>
                <scope line="627"/>
                <scope line="630">
                    <declaration name="iter" type="Iterator" line="632"/>
                    <scope line="633">
                        <declaration name="method" type="MemberDefinition" line="634"/>
                    </scope>
                    <scope line="638">
                        <declaration name="method" type="MemberDefinition" line="639"/>
                        <scope line="640"/>
                    </scope>
                </scope>
                <declaration name="ctxInit" type="Context" line="645"/>
                <declaration name="vsInst" type="Vset" line="646"/>
                <declaration name="vsClass" type="Vset" line="647"/>
                <scope line="648">
                    <scope line="649">
                        <declaration name="number" type="int" line="650"/>
                        <scope line="651"/>
                        <scope line="655"/>
                    </scope>
                </scope>
                <declaration name="ctxInst" type="Context" line="661"/>
                <declaration name="thisArg" type="LocalMember" line="662"/>
                <declaration name="thisNumber" type="int" line="663"/>
                <scope line="665">
                    <scope line="666">
                        <scope line="667">
                            <scope line="668"/>
                            <scope line="671"/>
                        </scope>
                    </scope>
                    <scope line="676"/>
                </scope>
                <scope line="681">
                    <scope line="682">
                        <scope line="683">
                            <declaration name="vsCon" type="Vset" line="684"/>
                        </scope>
                        <scope line="687">
                            <declaration name="vsFld" type="Vset" line="688"/>
                        </scope>
                    </scope>
                    <scope line="691"/>
                </scope>
                <scope line="696">
                    <scope line="697">
                        <declaration name="cdef" type="SourceClass" line="698"/>
                        <scope line="699"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="706">
                Make sure all my blank finals exist now.                
            </javadoc>
            <method name="checkBlankFinals" type="void" line="709">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctxInit" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="isStatic" type="boolean"/>
                </params>
                <scope line="710">
                    <scope line="711">
                        <declaration name="ff" type="MemberDefinition" line="712"/>
                        <scope line="713"/>
                    </scope>
                </scope>
            </method>
            <declaration name="basicChecking" type="boolean" line="719"/>
            <javadoc line="719">
                Check this class has its superclass and its interfaces.  Also
                  force it to have an &lt;init&gt; method (if it doesn&apos;t already have one)
                  and to have all the abstract methods of its parents.                
            </javadoc>
            <declaration name="basicCheckDone" type="boolean" line="725"/>
            <method name="basicCheck" type="void" line="726">
                <params>
                    <param name="env" type="Environment"/>
                </params>
                <scope line="729"/>
                <declaration name="imports" type="Imports" line="736"/>
                <scope line="737"/>
                <scope line="741">
                    <scope line="742">
                        <declaration name="code" type="Node" line="743"/>
                        <declaration name="t" type="Type" line="744"/>
                        <declaration name="accessModifiers" type="int" line="745"/>
                    </scope>
                </scope>
                <scope line="749"/>
            </method>
            <javadoc line="756">
                Add a group of methods to this class as miranda methods.
                  For a definition of Miranda methods, see the comment above the
                  method addMirandaMethods() in the file
                  sun/tools/java/ClassDeclaration.java                
            </javadoc>
            <method name="addMirandaMethods" type="void" line="762">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="mirandas" type="Iterator"/>
                </params>
                <scope line="763">
                    <declaration name="method" type="MemberDefinition" line="764"/>
                </scope>
            </method>
            <declaration name="resolving" type="boolean" line="768"/>
            <javadoc line="768">
                &lt;em&gt;After parsing is complete&lt;/em&gt;, resolve all names
                  except those inside method bodies or initializers.
                  In particular, this is the point at which we find out what
                  kinds of variables and methods there are in the classes,
                  and therefore what is each class&apos;s interface to the world.
                  &lt;p&gt;
                  Also perform certain other transformations, such as inserting
                  &quot;this$C&quot; arguments into constructors, and reorganizing structure
                  to flatten qualified member names.
                  &lt;p&gt;
                  Do not perform type-based or name-based consistency checks
                  or normalizations (such as default nullary constructors),
                  and do not attempt to compile code against this class,
                  until after this phase.                
            </javadoc>
            <method name="resolveTypeStructure" type="void" line="785">
                <params>
                    <param name="env" type="Environment"/>
                </params>
                <declaration name="oc" type="ClassDefinition" line="787"/>
                <scope line="788"/>
                <scope line="791"/>
                <scope line="799"/>
                <scope line="802"/>
                <scope line="805"/>
                <scope line="810">
                    <scope line="813">
                        <scope line="815"/>
                        <scope line="819"/>
                    </scope>
                </scope>
            </method>
            <method name="resolveSupers" type="void" line="827">
                <params>
                    <param name="env" type="Environment"/>
                </params>
                <scope line="829">
                    <scope line="831"/>
                </scope>
                <scope line="836">
                    <scope line="838">
                        <scope line="840">
                            <scope line="841">
                                <declaration name="id" type="Identifier" line="842"/>
                                <declaration name="where" type="long" line="843"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="resolveSuper" type="ClassDeclaration" line="851">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="t" type="IdentifierToken"/>
                </params>
                <declaration name="name" type="Identifier" line="852"/>
                <declaration name="result" type="ClassDeclaration" line="856"/>
            </method>
            <javadoc line="860">
                During the type-checking of an outer method body or initializer,
                  this routine is called to check a local class body
                  in the proper context.                
                <param>
                    sup     the named super class or interface (if anonymous)                    
                </param>
                <param>
                    args    the actual arguments (if anonymous)                    
                </param>
            </javadoc>
            <method name="checkLocalClass" type="Vset" line="867">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="sup" type="ClassDefinition"/>
                    <param name="args" type="Expression"/>
                    <param name="argTypes" type="Type"/>
                </params>
                <scope line="869"/>
                <scope line="872"/>
            </method>
            <javadoc line="878">
                As with checkLocalClass, run the inline phase for a local class.                
            </javadoc>
            <method name="inlineLocalClass" type="void" line="881">
                <params>
                    <param name="env" type="Environment"/>
                </params>
                <scope line="882">
                    <scope line="883"/>
                    <scope line="886"/>
                    <scope line="889"/>
                </scope>
                <scope line="893">
                    <scope line="895">
                        <scope line="896"/>
                    </scope>
                </scope>
            </method>
            <declaration name="inlinedLocalClass" type="boolean" line="902"/>
            <javadoc line="903">
                Check a class which is inside a local class, but is not itself local.                
            </javadoc>
            <method name="checkInsideClass" type="Vset" line="906">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                </params>
                <scope line="907"/>
            </method>
            <javadoc line="912">
                Just before checking an anonymous class, decide its true
                  inheritance, and build its (sole, implicit) constructor.                
            </javadoc>
            <method name="resolveAnonymousStructure" type="void" line="916">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="sup" type="ClassDefinition"/>
                    <param name="args" type="Expression"/>
                    <param name="argTypes" type="Type"/>
                </params>
                <scope line="918">
                    <declaration name="ni" type="int" line="919"/>
                    <declaration name="i1" type="ClassDeclaration" line="920"/>
                    <scope line="921">
                        <scope line="923">
                            <declaration name="id1" type="IdentifierToken" line="924"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="934"/>
                <declaration name="t" type="Type" line="937"/>
                <declaration name="names" type="IdentifierToken" line="938"/>
                <scope line="939"/>
                <declaration name="outerArg" type="int" line="942"/>
                <declaration name="superArgs" type="Expression" line="943"/>
                <scope line="944"/>
                <declaration name="where" type="long" line="947"/>
                <declaration name="superExp" type="Expression" line="948"/>
                <scope line="949"/>
                <scope line="952"/>
                <declaration name="superCall" type="Expression" line="955"/>
                <declaration name="body" type="Statement" line="956"/>
                <declaration name="code" type="Node" line="957"/>
                <declaration name="mod" type="int" line="958"/>
            </method>
            <declaration name="classModifierBits" type="int" line="961"/>
            <javadoc line="961">
                Convert class modifiers to a string for diagnostic purposes.
                  Accepts modifiers applicable to inner classes and that appear
                  in the InnerClasses attribute only, as well as those that may
                  appear in the class modifier proper.                
            </javadoc>
            <declaration name="classModifierNames" type="String" line="968"/>
            <method name="classModifierString" type="String" line="969">
                <params>
                    <param name="mods" type="int"/>
                </params>
                <declaration name="s" type="String" line="970"/>
                <scope line="971">
                    <scope line="972"/>
                </scope>
                <scope line="977"/>
            </method>
            <javadoc line="982">
                Find or create an access method for a private member,
                  or return null if this is not possible.                
            </javadoc>
            <method name="getAccessMember" type="MemberDefinition" line="986">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="field" type="MemberDefinition"/>
                    <param name="isSuper" type="boolean"/>
                </params>
            </method>
            <method name="getUpdateMember" type="MemberDefinition" line="989">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="field" type="MemberDefinition"/>
                    <param name="isSuper" type="boolean"/>
                </params>
                <scope line="990"/>
            </method>
            <method name="getAccessMember" type="MemberDefinition" line="995">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="field" type="MemberDefinition"/>
                    <param name="isUpdate" type="boolean"/>
                    <param name="isSuper" type="boolean"/>
                </params>
                <declaration name="isStatic" type="boolean" line="996"/>
                <declaration name="isMethod" type="boolean" line="997"/>
                <declaration name="af" type="MemberDefinition" line="998"/>
                <scope line="999">
                    <scope line="1000">
                        <scope line="1001"/>
                        <declaration name="nargs" type="int" line="1004"/>
                        <scope line="1005"/>
                    </scope>
                </scope>
                <scope line="1010">
                    <scope line="1011"/>
                    <scope line="1014">
                        <declaration name="uf" type="MemberDefinition" line="1015"/>
                        <scope line="1016"/>
                    </scope>
                </scope>
                <scope line="1021"/>
                <declaration name="anm" type="Identifier" line="1024"/>
                <declaration name="dummyType" type="Type" line="1025"/>
                <scope line="1026">
                    <declaration name="outerMostClass" type="SourceClass" line="1028"/>
                    <scope line="1030">
                        <declaration name="sup" type="IdentifierToken" line="1031"/>
                        <declaration name="interfaces" type="IdentifierToken" line="1032"/>
                        <declaration name="t" type="IdentifierToken" line="1033"/>
                        <declaration name="mod" type="int" line="1034"/>
                        <scope line="1035"/>
                        <declaration name="dummyClass" type="ClassDefinition" line="1038"/>
                        <declaration name="argsX" type="Expression" line="1040"/>
                        <declaration name="argTypesX" type="Type" line="1041"/>
                        <scope line="1042">
                            <declaration name="supcls" type="ClassDefinition" line="1043"/>
                        </scope>
                        <scope line="1046"/>
                    </scope>
                </scope>
                <scope line="1053">
                    <scope line="1054">
                        <scope line="1056"/>
                    </scope>
                </scope>
                <declaration name="argTypes" type="Type" line="1061"/>
                <declaration name="t" type="Type" line="1062"/>
                <scope line="1063">
                    <scope line="1064">
                        <scope line="1065">
                            <declaration name="at" type="Type" line="1066"/>
                        </scope>
                        <scope line="1070">
                            <declaration name="at" type="Type" line="1071"/>
                        </scope>
                    </scope>
                    <scope line="1076"/>
                </scope>
                <scope line="1080">
                    <declaration name="classType" type="Type" line="1081"/>
                    <scope line="1082">
                        <scope line="1083">
                            <declaration name="at" type="Type" line="1084"/>
                        </scope>
                        <scope line="1088">
                            <declaration name="at" type="Type" line="1089"/>
                        </scope>
                    </scope>
                    <scope line="1094">
                        <declaration name="at" type="Type" line="1095"/>
                        <declaration name="nargs" type="int" line="1096"/>
                        <scope line="1097">
                            <declaration name="outerThisArg" type="MemberDefinition" line="1098"/>
                            <scope line="1099">
                                <scope line="1100"/>
                                <scope line="1105"/>
                            </scope>
                            <scope line="1109">
                                <scope line="1112"/>
                            </scope>
                        </scope>
                        <scope line="1117">
                            <scope line="1120"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="nlen" type="int" line="1127"/>
                <declaration name="where" type="long" line="1128"/>
                <declaration name="names" type="IdentifierToken" line="1129"/>
                <scope line="1130"/>
                <declaration name="access" type="Expression" line="1133"/>
                <declaration name="thisArg" type="Expression" line="1134"/>
                <declaration name="args" type="Expression" line="1135"/>
                <scope line="1136">
                    <scope line="1138"/>
                </scope>
                <scope line="1142">
                    <scope line="1143">
                        <scope line="1146"/>
                    </scope>
                    <scope line="1150">
                        <scope line="1153"/>
                    </scope>
                </scope>
                <scope line="1159">
                    <scope line="1161"/>
                </scope>
                <scope line="1165"/>
                <declaration name="code" type="Statement" line="1168"/>
                <scope line="1169"/>
                <scope line="1172"/>
                <declaration name="body" type="Statement" line="1175"/>
                <declaration name="mod" type="int" line="1177"/>
                <scope line="1178"/>
                <declaration name="newf" type="SourceMember" line="1181"/>
                <scope line="1184"/>
                <declaration name="checkContext" type="Context" line="1188"/>
                <scope line="1189">
                    <scope line="1190"/>
                    <scope line="1193"/>
                </scope>
            </method>
            <javadoc line="1199">
                Find an inner class of &apos;this&apos;, chosen arbitrarily.
                  Result is always an actual class, never an interface.
                  Returns null if none found.                
            </javadoc>
            <method name="findLookupContext" type="SourceClass" line="1204">
                <scope line="1205">
                    <scope line="1206">
                        <declaration name="ic" type="SourceClass" line="1207"/>
                        <scope line="1208"/>
                    </scope>
                </scope>
                <scope line="1213">
                    <scope line="1214">
                        <declaration name="lc" type="SourceClass" line="1215"/>
                        <scope line="1216"/>
                    </scope>
                </scope>
            </method>
            <declaration name="lookup" type="MemberDefinition" line="1223"/>
            <javadoc line="1224">
                Get helper method for class literal lookup.                
            </javadoc>
            <method name="getClassLiteralLookup" type="MemberDefinition" line="1227">
                <params>
                    <param name="fwhere" type="long"/>
                </params>
                <scope line="1228"/>
                <scope line="1231"/>
                <declaration name="c" type="ClassDefinition" line="1235"/>
                <declaration name="needNewClass" type="boolean" line="1236"/>
                <scope line="1237">
                    <scope line="1239">
                        <declaration name="sup" type="IdentifierToken" line="1241"/>
                        <declaration name="interfaces" type="IdentifierToken" line="1242"/>
                        <declaration name="t" type="IdentifierToken" line="1243"/>
                        <declaration name="mod" type="int" line="1244"/>
                    </scope>
                </scope>
                <declaration name="idDClass" type="Identifier" line="1248"/>
                <declaration name="strarg" type="Type" line="1249"/>
                <declaration name="w" type="long" line="1250"/>
                <declaration name="arg" type="IdentifierToken" line="1251"/>
                <declaration name="e" type="Expression" line="1252"/>
                <declaration name="a1" type="Expression" line="1253"/>
                <declaration name="idForName" type="Identifier" line="1254"/>
                <declaration name="body" type="Statement" line="1256"/>
                <declaration name="idClassNotFound" type="Identifier" line="1257"/>
                <declaration name="idNoClassDefFound" type="Identifier" line="1258"/>
                <declaration name="ctyp" type="Type" line="1259"/>
                <declaration name="exptyp" type="Type" line="1260"/>
                <declaration name="idGetMessage" type="Identifier" line="1261"/>
                <declaration name="a2" type="Expression" line="1264"/>
                <declaration name="handler" type="Statement" line="1266"/>
                <declaration name="handlers" type="Statement" line="1267"/>
                <declaration name="mtype" type="Type" line="1269"/>
                <declaration name="args" type="IdentifierToken" line="1270"/>
                <scope line="1272">
                    <scope line="1273"/>
                    <declaration name="argsX" type="Expression" line="1277"/>
                    <declaration name="argTypesX" type="Type" line="1278"/>
                    <scope line="1279">
                        <declaration name="sup" type="ClassDefinition" line="1280"/>
                    </scope>
                    <scope line="1283"/>
                </scope>
            </method>
            <declaration name="active" type="Vector" line="1289"/>
            <javadoc line="1289">
                A list of active ongoing compilations. This list
                  is used to stop two compilations from saving the
                  same class.                
            </javadoc>
            <javadoc line="1295">
                Compile this class                
            </javadoc>
            <method name="compile" type="void" line="1298">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <declaration name="env" type="Environment" line="1299"/>
                <scope line="1300">
                    <scope line="1301"/>
                </scope>
                <scope line="1306"/>
                <scope line="1309"/>
                <scope line="1312">
                    <scope line="1313"/>
                </scope>
            </method>
            <javadoc line="1319">
                Verify that the modifier bits included in &apos;required&apos; are
                  all present in &apos;mods&apos;, otherwise signal an internal error.
                  Note that errors in the source program may corrupt the modifiers,
                  thus we rely on the fact that &apos;CompilerError&apos; exceptions are
                  silently ignored after an error message has been issued.                
            </javadoc>
            <method name="assertModifiers" type="void" line="1326">
                <params>
                    <param name="mods" type="int"/>
                    <param name="required" type="int"/>
                </params>
                <scope line="1327"/>
            </method>
            <method name="compileClass" type="void" line="1331">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="out" type="OutputStream"/>
                </params>
                <declaration name="variables" type="Vector" line="1332"/>
                <declaration name="methods" type="Vector" line="1333"/>
                <declaration name="innerClasses" type="Vector" line="1334"/>
                <declaration name="init" type="CompilerMember" line="1335"/>
                <declaration name="ctx" type="Context" line="1336"/>
                <scope line="1337"/>
                <declaration name="ncsize" type="int" line="1340"/>
                <declaration name="haveDeprecated" type="boolean" line="1343"/>
                <declaration name="haveSynthetic" type="boolean" line="1344"/>
                <declaration name="haveConstantValue" type="boolean" line="1345"/>
                <declaration name="haveExceptions" type="boolean" line="1346"/>
                <scope line="1347">
                    <scope line="1350">
                        <scope line="1351">
                            <scope line="1353">
                                <scope line="1354"/>
                            </scope>
                            <scope line="1358">
                                <declaration name="f" type="CompilerMember" line="1359"/>
                            </scope>
                        </scope>
                        <scope line="1364"/>
                        <scope line="1367">
                            <declaration name="f" type="CompilerMember" line="1369"/>
                            <scope line="1371"/>
                        </scope>
                    </scope>
                    <scope line="1377"/>
                </scope>
                <scope line="1382"/>
                <scope line="1386"/>
                <declaration name="nClassAttrs" type="int" line="1389"/>
                <scope line="1390"/>
                <scope line="1393"/>
                <declaration name="sourceFile" type="String" line="1396"/>
                <scope line="1397"/>
                <scope line="1403"/>
                <scope line="1406"/>
                <scope line="1409">
                    <scope line="1411"/>
                </scope>
                <scope line="1415">
                    <scope line="1417"/>
                </scope>
                <scope line="1421"/>
                <scope line="1427"/>
                <scope line="1430"/>
                <declaration name="absoluteSourcePath" type="String" line="1434"/>
                <declaration name="timeStamp" type="long" line="1435"/>
                <scope line="1436"/>
                <scope line="1442"/>
                <scope line="1445"/>
                <declaration name="ordered_methods" type="CompilerMember[]" line="1448"/>
                <scope line="1452">
                    <declaration name="f" type="CompilerMember" line="1453"/>
                    <scope line="1454">
                        <declaration name="exp" type="ClassDeclaration" line="1459"/>
                        <scope line="1460"/>
                    </scope>
                    <scope line="1464"/>
                </scope>
                <scope line="1470">
                    <declaration name="f" type="CompilerMember" line="1471"/>
                    <declaration name="val" type="Object" line="1474"/>
                    <scope line="1475"/>
                </scope>
                <scope line="1479">
                    <declaration name="inner" type="ClassDefinition" line="1480"/>
                    <scope line="1482">
                        <declaration name="outer" type="ClassDefinition" line="1483"/>
                    </scope>
                    <declaration name="inner_local_name" type="Identifier" line="1486"/>
                    <scope line="1487"/>
                </scope>
                <declaration name="data" type="DataOutputStream" line="1491"/>
                <declaration name="cmods" type="int" line="1496"/>
                <scope line="1497"/>
                <scope line="1500"/>
                <scope line="1503">
                    <scope line="1505"/>
                </scope>
                <scope line="1510">
                    <declaration name="cn" type="Identifier" line="1511"/>
                    <declaration name="nm" type="Identifier" line="1512"/>
                </scope>
                <scope line="1520"/>
                <declaration name="buf" type="ByteArrayOutputStream" line="1523"/>
                <declaration name="attbuf" type="ByteArrayOutputStream" line="1524"/>
                <declaration name="databuf" type="DataOutputStream" line="1525"/>
                <scope line="1527">
                    <declaration name="f" type="CompilerMember" line="1528"/>
                    <declaration name="val" type="Object" line="1529"/>
                    <declaration name="fieldAtts" type="int" line="1533"/>
                    <declaration name="dep" type="boolean" line="1534"/>
                    <declaration name="syn" type="boolean" line="1535"/>
                    <scope line="1538"/>
                    <scope line="1543"/>
                    <scope line="1547"/>
                </scope>
                <scope line="1553">
                    <declaration name="f" type="CompilerMember" line="1554"/>
                    <declaration name="xmods" type="int" line="1555"/>
                    <scope line="1556"/>
                    <scope line="1559">
                        <scope line="1560"/>
                    </scope>
                    <declaration name="exp" type="ClassDeclaration" line="1567"/>
                    <declaration name="methodAtts" type="int" line="1568"/>
                    <declaration name="dep" type="boolean" line="1569"/>
                    <declaration name="syn" type="boolean" line="1570"/>
                    <scope line="1572">
                        <declaration name="natts" type="int" line="1575"/>
                        <scope line="1576"/>
                        <scope line="1579"/>
                        <scope line="1582"/>
                        <scope line="1586"/>
                        <scope line="1593"/>
                        <scope line="1600"/>
                    </scope>
                    <scope line="1612"/>
                    <scope line="1616">
                        <scope line="1620"/>
                    </scope>
                    <scope line="1624"/>
                    <scope line="1628"/>
                </scope>
                <scope line="1634"/>
                <scope line="1639"/>
                <scope line="1643"/>
                <scope line="1647"/>
                <scope line="1655">
                    <scope line="1659">
                        <declaration name="inner" type="ClassDefinition" line="1660"/>
                        <scope line="1662"/>
                        <scope line="1665">
                            <declaration name="outer" type="ClassDefinition" line="1666"/>
                        </scope>
                        <declaration name="inner_name" type="Identifier" line="1669"/>
                        <scope line="1670">
                            <scope line="1671"/>
                        </scope>
                        <scope line="1676"/>
                        <declaration name="imods" type="int" line="1679"/>
                        <scope line="1680"/>
                        <scope line="1683"/>
                        <scope line="1688">
                            <declaration name="fn" type="Identifier" line="1689"/>
                            <declaration name="nm" type="Identifier" line="1690"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1698">
                    <declaration name="CovAsm" type="Assembler" line="1699"/>
                </scope>
            </method>
            <javadoc line="1703">
                Print out the dependencies for this class (-xdepend) option                
            </javadoc>
            <method name="printClassDependencies" type="void" line="1706">
                <params>
                    <param name="env" type="Environment"/>
                </params>
                <scope line="1707">
                    <declaration name="src" type="String" line="1708"/>
                    <declaration name="className" type="String" line="1709"/>
                    <declaration name="startLine" type="long" line="1710"/>
                    <declaration name="endLine" type="long" line="1711"/>
                    <scope line="1713">
                        <declaration name="data" type="ClassDeclaration" line="1714"/>
                        <declaration name="depName" type="String" line="1715"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>