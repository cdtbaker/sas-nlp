<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.jstat">
        <import package="java.util"/>
        <class name="ColumnFormat" line="30">
            <extends class="OptionFormat"/>
            <comment line="52">
                method to apply various validation rules to the ColumnFormat object.                
            </comment>
            <javadoc line="30">
                A class to represent the format for a column of data.                
                <author>
                    Brian Doherty                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="number" type="int" line="37"/>
            <declaration name="width" type="int" line="38"/>
            <declaration name="align" type="Alignment" line="39"/>
            <declaration name="scale" type="Scale" line="40"/>
            <declaration name="format" type="String" line="41"/>
            <declaration name="header" type="String" line="42"/>
            <declaration name="expression" type="Expression" line="43"/>
            <declaration name="previousValue" type="Object" line="44"/>
            <method name="ColumnFormat" type="constructor" line="46">
                <params>
                    <param name="number" type="int"/>
                </params>
            </method>
            <method name="validate" type="void" line="54">
                <comment line="56">
                    if we allow column spanning, then this method must change. it                    
                </comment>
                <comment line="57">
                    should allow null data statments                    
                </comment>
                <comment line="60">
                    current policy is that a data statment must be specified                    
                </comment>
                <comment line="64">
                    current policy is that if a header is not specified, then we                    
                </comment>
                <comment line="65">
                    will use the last component of the name as the header and                    
                </comment>
                <comment line="66">
                    insert the default anchor characters for center alignment..                    
                </comment>
                <comment line="70">
                    if no formating is specified, then the format is set to output                    
                </comment>
                <comment line="71">
                    the raw data.                    
                </comment>
                <scope line="59"/>
                <scope line="63"/>
                <scope line="69"/>
            </method>
            <method name="setWidth" type="void" line="76">
                <params>
                    <param name="width" type="int"/>
                </params>
            </method>
            <method name="setAlignment" type="void" line="80">
                <params>
                    <param name="align" type="Alignment"/>
                </params>
            </method>
            <method name="setScale" type="void" line="84">
                <params>
                    <param name="scale" type="Scale"/>
                </params>
            </method>
            <method name="setFormat" type="void" line="88">
                <params>
                    <param name="format" type="String"/>
                </params>
            </method>
            <method name="setHeader" type="void" line="92">
                <params>
                    <param name="header" type="String"/>
                </params>
            </method>
            <method name="getHeader" type="String" line="96"/>
            <method name="getFormat" type="String" line="100"/>
            <method name="getWidth" type="int" line="104"/>
            <method name="getAlignment" type="Alignment" line="108"/>
            <method name="getScale" type="Scale" line="112"/>
            <method name="getExpression" type="Expression" line="116"/>
            <method name="setExpression" type="void" line="120">
                <params>
                    <param name="e" type="Expression"/>
                </params>
            </method>
            <method name="setPreviousValue" type="void" line="124">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <method name="getPreviousValue" type="Object" line="128"/>
            <method name="printFormat" type="void" line="132">
                <params>
                    <param name="indentLevel" type="int"/>
                </params>
                <comment line="146">
                                        
                </comment>
                <declaration name="indentAmount" type="String" line="133"/>
                <declaration name="indent" type="StringBuilder" line="135"/>
                <scope line="136"/>
                <scope line="146">
                    <declaration name="of" type="OptionFormat" line="147"/>
                </scope>
            </method>
            <method name="getValue" type="String" line="154"/>
        </class>
    </source>