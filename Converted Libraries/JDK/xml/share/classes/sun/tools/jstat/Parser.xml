<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.jstat">
        <import package="java.io"/>
        <import package="java.util"/>
        <class name="Parser" line="4">
            <javadoc line="4">
                A class implementing a simple predictive parser for output format
                  specification language for the jstat command.                
                <author>
                    Brian Doherty                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="pdebug" type="boolean" line="11"/>
            <declaration name="ldebug" type="boolean" line="12"/>
            <declaration name="OPENBLOCK" type="char" line="13"/>
            <declaration name="CLOSEBLOCK" type="char" line="14"/>
            <declaration name="DOUBLEQUOTE" type="char" line="15"/>
            <declaration name="PERCENT_CHAR" type="char" line="16"/>
            <declaration name="OPENPAREN" type="char" line="17"/>
            <declaration name="CLOSEPAREN" type="char" line="18"/>
            <declaration name="OPERATOR_PLUS" type="char" line="19"/>
            <declaration name="OPERATOR_MINUS" type="char" line="20"/>
            <declaration name="OPERATOR_MULTIPLY" type="char" line="21"/>
            <declaration name="OPERATOR_DIVIDE" type="char" line="22"/>
            <declaration name="OPTION" type="String" line="23"/>
            <declaration name="COLUMN" type="String" line="24"/>
            <declaration name="DATA" type="String" line="25"/>
            <declaration name="HEADER" type="String" line="26"/>
            <declaration name="WIDTH" type="String" line="27"/>
            <declaration name="FORMAT" type="String" line="28"/>
            <declaration name="ALIGN" type="String" line="29"/>
            <declaration name="SCALE" type="String" line="30"/>
            <declaration name="START" type="String" line="31"/>
            <declaration name="scaleKeyWords" type="Set" line="32"/>
            <declaration name="alignKeyWords" type="Set" line="33"/>
            <declaration name="otherKeyWords" type="String[]" line="34"/>
            <declaration name="infixOps" type="char[]" line="35"/>
            <declaration name="delimiters" type="char[]" line="36"/>
            <declaration name="reservedWords" type="Set&lt;String&gt;" line="37"/>
            <declaration name="st" type="StreamTokenizer" line="38"/>
            <declaration name="filename" type="String" line="39"/>
            <declaration name="lookahead" type="Token" line="40"/>
            <declaration name="previous" type="Token" line="41"/>
            <declaration name="columnCount" type="int" line="42"/>
            <declaration name="optionFormat" type="OptionFormat" line="43"/>
            <method name="Parser" type="constructor" line="44">
                <params>
                    <param name="filename" type="String"/>
                </params>
                <declaration name="r" type="Reader" line="46"/>
            </method>
            <method name="Parser" type="constructor" line="48">
                <params>
                    <param name="r" type="Reader"/>
                </params>
                <scope line="55"/>
                <scope line="58"/>
                <scope line="61"/>
            </method>
            <javadoc line="65">
                push back the lookahead token and restore the lookahead token
                  to the previous token.                
            </javadoc>
            <method name="pushBack" type="void" line="69"/>
            <javadoc line="73">
                retrieve the next token, placing the token value in the lookahead
                  member variable, storing its previous value in the previous member
                  variable.                
            </javadoc>
            <method name="nextToken" type="void" line="78">
                <declaration name="t" type="int" line="79"/>
            </method>
            <javadoc line="84">
                match one of the token values in the given set of key words
                  token is assumed to be of type TT_WORD, and the set is assumed
                  to contain String objects.                
            </javadoc>
            <method name="matchOne" type="Token" line="89">
                <params>
                    <param name="keyWords" type="Set"/>
                </params>
                <scope line="90">
                    <declaration name="t" type="Token" line="91"/>
                </scope>
            </method>
            <javadoc line="97">
                match a token with TT_TYPE=type, and the token value is a given sequence
                  of characters.                
            </javadoc>
            <method name="match" type="void" line="101">
                <params>
                    <param name="ttype" type="int"/>
                    <param name="token" type="String"/>
                </params>
                <scope line="102"/>
                <scope line="105"/>
            </method>
            <javadoc line="109">
                match a token with TT_TYPE=type                
            </javadoc>
            <method name="match" type="void" line="112">
                <params>
                    <param name="ttype" type="int"/>
                </params>
                <scope line="113"/>
                <scope line="116"/>
            </method>
            <javadoc line="120">
                match a token with TT_TYPE=char, where the token value is the given char.                
            </javadoc>
            <method name="match" type="void" line="123">
                <params>
                    <param name="ttype" type="char"/>
                </params>
                <scope line="124"/>
                <scope line="127"/>
            </method>
            <javadoc line="131">
                match a token with TT_TYPE=&apos;&quot;&apos;, where the token value is a sequence
                  of characters between matching quote characters.                
            </javadoc>
            <method name="matchQuotedString" type="void" line="135"/>
            <javadoc line="138">
                match a TT_NUMBER token that matches a parsed number value                
            </javadoc>
            <method name="matchNumber" type="void" line="141"/>
            <javadoc line="144">
                match a TT_WORD token that matches an arbitrary, not quoted token.                
            </javadoc>
            <method name="matchID" type="void" line="147"/>
            <javadoc line="150">
                match a TT_WORD token that matches the given string                
            </javadoc>
            <method name="match" type="void" line="153">
                <params>
                    <param name="token" type="String"/>
                </params>
            </method>
            <javadoc line="156">
                determine if the given word is a reserved key word                
            </javadoc>
            <method name="isReservedWord" type="boolean" line="159">
                <params>
                    <param name="word" type="String"/>
                </params>
            </method>
            <javadoc line="162">
                determine if the give work is a reserved key word                
            </javadoc>
            <method name="isInfixOperator" type="boolean" line="165">
                <params>
                    <param name="op" type="char"/>
                </params>
                <scope line="166">
                    <scope line="167"/>
                </scope>
            </method>
            <javadoc line="173">
                scalestmt -&gt; &apos;scale&apos; scalespec
                  scalespec -&gt; &lt;see above scaleTerminals array&gt;                
            </javadoc>
            <method name="scaleStmt" type="void" line="177">
                <params>
                    <param name="cf" type="ColumnFormat"/>
                </params>
                <declaration name="t" type="Token" line="179"/>
                <declaration name="scaleString" type="String" line="181"/>
            </method>
            <javadoc line="184">
                alignstmt -&gt; &apos;align&apos; alignspec
                  alignspec -&gt; &lt;see above alignTerminals array&gt;                
            </javadoc>
            <method name="alignStmt" type="void" line="188">
                <params>
                    <param name="cf" type="ColumnFormat"/>
                </params>
                <declaration name="t" type="Token" line="190"/>
                <declaration name="alignString" type="String" line="192"/>
            </method>
            <javadoc line="195">
                headerstmt -&gt; &apos;header&apos; quotedstring                
            </javadoc>
            <method name="headerStmt" type="void" line="198">
                <params>
                    <param name="cf" type="ColumnFormat"/>
                </params>
                <declaration name="headerString" type="String" line="200"/>
            </method>
            <javadoc line="205">
                widthstmt -&gt; &apos;width&apos; integer                
            </javadoc>
            <method name="widthStmt" type="void" line="208">
                <params>
                    <param name="cf" type="ColumnFormat"/>
                </params>
                <declaration name="width" type="double" line="210"/>
            </method>
            <javadoc line="215">
                formatstmt -&gt; &apos;format&apos; quotedstring                
            </javadoc>
            <method name="formatStmt" type="void" line="218">
                <params>
                    <param name="cf" type="ColumnFormat"/>
                </params>
                <declaration name="formatString" type="String" line="220"/>
            </method>
            <javadoc line="225">
                Primary -&gt; Literal | Identifier | &apos;(&apos; Expression &apos;)&apos;                
            </javadoc>
            <method name="primary" type="Expression" line="228">
                <declaration name="e" type="Expression" line="229"/>
                <declaration name="s" type="String" line="237"/>
                <scope line="238"/>
                <declaration name="literal" type="double" line="246"/>
            </method>
            <javadoc line="257">
                Unary -&gt; (&apos;+&apos;|&apos;-&apos;) Unary | Primary                
            </javadoc>
            <method name="unary" type="Expression" line="260">
                <declaration name="e" type="Expression" line="261"/>
                <declaration name="op" type="Operator" line="262"/>
                <scope line="263">
                    <declaration name="e1" type="Expression" line="278"/>
                </scope>
            </method>
            <javadoc line="286">
                MultExpression -&gt; Unary ((&apos;&apos; | &apos;/&apos;) Unary)                
            </javadoc>
            <method name="multExpression" type="Expression" line="289">
                <declaration name="e" type="Expression" line="290"/>
                <declaration name="op" type="Operator" line="291"/>
                <scope line="292">
                    <declaration name="e1" type="Expression" line="306"/>
                </scope>
            </method>
            <javadoc line="314">
                AddExpression -&gt; MultExpression ((&apos;+&apos; | &apos;-&apos;) MultExpression)                
            </javadoc>
            <method name="addExpression" type="Expression" line="317">
                <declaration name="e" type="Expression" line="318"/>
                <declaration name="op" type="Operator" line="319"/>
                <scope line="320">
                    <declaration name="e1" type="Expression" line="334"/>
                </scope>
            </method>
            <javadoc line="342">
                Expression -&gt; AddExpression                
            </javadoc>
            <method name="expression" type="Expression" line="345">
                <declaration name="e" type="Expression" line="346"/>
            </method>
            <javadoc line="350">
                datastmt -&gt; &apos;data&apos; expression                
            </javadoc>
            <method name="dataStmt" type="void" line="353">
                <params>
                    <param name="cf" type="ColumnFormat"/>
                </params>
                <declaration name="e" type="Expression" line="355"/>
            </method>
            <javadoc line="359">
                statementlist -&gt; optionalstmt statementlist
                  optionalstmt -&gt; &apos;data&apos; expression
                  &apos;header&apos; quotedstring
                  &apos;width&apos; integer
                  &apos;format&apos; formatstring
                  &apos;align&apos; alignspec
                  &apos;scale&apos; scalespec                
            </javadoc>
            <method name="statementList" type="void" line="368">
                <params>
                    <param name="cf" type="ColumnFormat"/>
                </params>
                <scope line="369">
                    <scope line="370"/>
                    <scope line="373"/>
                    <scope line="376"/>
                    <scope line="379"/>
                    <scope line="382"/>
                    <scope line="385"/>
                    <scope line="388"/>
                    <scope line="391"/>
                </scope>
            </method>
            <javadoc line="396">
                optionlist -&gt; columspec optionlist
                  null
                  columspec -&gt; &apos;column&apos; &apos;{&apos; statementlist &apos;}&apos;                
            </javadoc>
            <method name="optionList" type="void" line="401">
                <params>
                    <param name="of" type="OptionFormat"/>
                </params>
                <scope line="402">
                    <scope line="403"/>
                    <declaration name="cf" type="ColumnFormat" line="408"/>
                </scope>
            </method>
            <javadoc line="415">
                optionstmt -&gt; &apos;option&apos; ID &apos;{&apos; optionlist &apos;}&apos;                
            </javadoc>
            <method name="optionStmt" type="OptionFormat" line="418">
                <declaration name="optionName" type="String" line="420"/>
                <declaration name="of" type="OptionFormat" line="423"/>
            </method>
            <javadoc line="428">
                parse the specification for the given option identifier                
            </javadoc>
            <method name="parse" type="OptionFormat" line="431">
                <params>
                    <param name="option" type="String"/>
                </params>
                <scope line="433">
                    <scope line="434"/>
                    <scope line="439"/>
                    <scope line="443"/>
                </scope>
            </method>
            <method name="parseOptions" type="Set<OptionFormat>" line="449">
                <declaration name="options" type="Set&lt;OptionFormat&gt;" line="450"/>
                <scope line="452">
                    <scope line="453"/>
                    <declaration name="of" type="OptionFormat" line="457"/>
                </scope>
            </method>
            <method name="getOptionFormat" type="OptionFormat" line="462"/>
            <method name="log" type="void" line="465">
                <params>
                    <param name="logging" type="boolean"/>
                    <param name="s" type="String"/>
                </params>
                <scope line="466"/>
            </method>
        </class>
    </source>