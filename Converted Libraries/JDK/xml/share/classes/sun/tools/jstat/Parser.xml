<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.jstat">
        <import package="java.io"/>
        <import package="java.util"/>
        <class name="Parser" line="31">
            <javadoc line="31">
                A class implementing a simple predictive parser for output format
                  specification language for the jstat command.                
                <author>
                    Brian Doherty                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="pdebug" type="boolean" line="40"/>
            <declaration name="ldebug" type="boolean" line="41"/>
            <declaration name="OPENBLOCK" type="char" line="43"/>
            <declaration name="CLOSEBLOCK" type="char" line="44"/>
            <declaration name="DOUBLEQUOTE" type="char" line="45"/>
            <declaration name="PERCENT_CHAR" type="char" line="46"/>
            <declaration name="OPENPAREN" type="char" line="47"/>
            <declaration name="CLOSEPAREN" type="char" line="48"/>
            <declaration name="OPERATOR_PLUS" type="char" line="50"/>
            <declaration name="OPERATOR_MINUS" type="char" line="51"/>
            <declaration name="OPERATOR_MULTIPLY" type="char" line="52"/>
            <declaration name="OPERATOR_DIVIDE" type="char" line="53"/>
            <declaration name="OPTION" type="String" line="55"/>
            <declaration name="COLUMN" type="String" line="56"/>
            <declaration name="DATA" type="String" line="57"/>
            <declaration name="HEADER" type="String" line="58"/>
            <declaration name="WIDTH" type="String" line="59"/>
            <declaration name="FORMAT" type="String" line="60"/>
            <declaration name="ALIGN" type="String" line="61"/>
            <declaration name="SCALE" type="String" line="62"/>
            <declaration name="START" type="String" line="64"/>
            <declaration name="scaleKeyWords" type="Set" line="66"/>
            <declaration name="alignKeyWords" type="Set" line="67"/>
            <declaration name="otherKeyWords" type="String[]" line="68"/>
            <declaration name="infixOps" type="char[]" line="72"/>
            <declaration name="delimiters" type="char[]" line="76"/>
            <declaration name="reservedWords" type="Set&lt;String&gt;" line="81"/>
            <declaration name="st" type="StreamTokenizer" line="83"/>
            <declaration name="filename" type="String" line="84"/>
            <declaration name="lookahead" type="Token" line="85"/>
            <declaration name="previous" type="Token" line="86"/>
            <declaration name="columnCount" type="int" line="87"/>
            <declaration name="optionFormat" type="OptionFormat" line="88"/>
            <method name="Parser" type="constructor" line="90">
                <params>
                    <param name="filename" type="String"/>
                </params>
                <declaration name="r" type="Reader" line="92"/>
            </method>
            <method name="Parser" type="constructor" line="95">
                <params>
                    <param name="r" type="Reader"/>
                </params>
                <comment line="99">
                    allow both c++ style comments                    
                </comment>
                <scope line="105"/>
                <scope line="109"/>
                <scope line="113"/>
            </method>
            <javadoc line="118">
                push back the lookahead token and restore the lookahead token
                  to the previous token.                
            </javadoc>
            <method name="pushBack" type="void" line="122"/>
            <javadoc line="127">
                retrieve the next token, placing the token value in the lookahead
                  member variable, storing its previous value in the previous member
                  variable.                
            </javadoc>
            <method name="nextToken" type="void" line="132">
                <declaration name="t" type="int" line="133"/>
            </method>
            <javadoc line="139">
                match one of the token values in the given set of key words
                  token is assumed to be of type TT_WORD, and the set is assumed
                  to contain String objects.                
            </javadoc>
            <method name="matchOne" type="Token" line="144">
                <params>
                    <param name="keyWords" type="Set"/>
                </params>
                <scope line="146">
                    <declaration name="t" type="Token" line="147"/>
                </scope>
            </method>
            <javadoc line="154">
                match a token with TT_TYPE=type, and the token value is a given sequence
                  of characters.                
            </javadoc>
            <method name="match" type="void" line="159">
                <params>
                    <param name="ttype" type="int"/>
                    <param name="token" type="String"/>
                </params>
                <scope line="160"/>
                <scope line="162"/>
            </method>
            <javadoc line="168">
                match a token with TT_TYPE=type                
            </javadoc>
            <method name="match" type="void" line="171">
                <params>
                    <param name="ttype" type="int"/>
                </params>
                <scope line="172"/>
                <scope line="174"/>
            </method>
            <javadoc line="179">
                match a token with TT_TYPE=char, where the token value is the given char.                
            </javadoc>
            <method name="match" type="void" line="182">
                <params>
                    <param name="ttype" type="char"/>
                </params>
                <scope line="183"/>
                <scope line="186"/>
            </method>
            <javadoc line="192">
                match a token with TT_TYPE=&apos;&quot;&apos;, where the token value is a sequence
                  of characters between matching quote characters.                
            </javadoc>
            <method name="matchQuotedString" type="void" line="196"/>
            <javadoc line="200">
                match a TT_NUMBER token that matches a parsed number value                
            </javadoc>
            <method name="matchNumber" type="void" line="203"/>
            <javadoc line="207">
                match a TT_WORD token that matches an arbitrary, not quoted token.                
            </javadoc>
            <method name="matchID" type="void" line="210"/>
            <javadoc line="214">
                match a TT_WORD token that matches the given string                
            </javadoc>
            <method name="match" type="void" line="217">
                <params>
                    <param name="token" type="String"/>
                </params>
            </method>
            <javadoc line="221">
                determine if the given word is a reserved key word                
            </javadoc>
            <method name="isReservedWord" type="boolean" line="224">
                <params>
                    <param name="word" type="String"/>
                </params>
            </method>
            <javadoc line="228">
                determine if the give work is a reserved key word                
            </javadoc>
            <method name="isInfixOperator" type="boolean" line="231">
                <params>
                    <param name="op" type="char"/>
                </params>
                <scope line="232">
                    <scope line="233"/>
                </scope>
            </method>
            <javadoc line="240">
                scalestmt -&gt; &apos;scale&apos; scalespec
                  scalespec -&gt; &lt;see above scaleTerminals array&gt;                
            </javadoc>
            <method name="scaleStmt" type="void" line="245">
                <params>
                    <param name="cf" type="ColumnFormat"/>
                </params>
                <declaration name="t" type="Token" line="247"/>
                <declaration name="scaleString" type="String" line="249"/>
            </method>
            <javadoc line="253">
                alignstmt -&gt; &apos;align&apos; alignspec
                  alignspec -&gt; &lt;see above alignTerminals array&gt;                
            </javadoc>
            <method name="alignStmt" type="void" line="258">
                <params>
                    <param name="cf" type="ColumnFormat"/>
                </params>
                <declaration name="t" type="Token" line="260"/>
                <declaration name="alignString" type="String" line="262"/>
            </method>
            <javadoc line="266">
                headerstmt -&gt; &apos;header&apos; quotedstring                
            </javadoc>
            <method name="headerStmt" type="void" line="270">
                <params>
                    <param name="cf" type="ColumnFormat"/>
                </params>
                <declaration name="headerString" type="String" line="272"/>
            </method>
            <javadoc line="278">
                widthstmt -&gt; &apos;width&apos; integer                
            </javadoc>
            <method name="widthStmt" type="void" line="282">
                <params>
                    <param name="cf" type="ColumnFormat"/>
                </params>
                <declaration name="width" type="double" line="284"/>
            </method>
            <javadoc line="290">
                formatstmt -&gt; &apos;format&apos; quotedstring                
            </javadoc>
            <method name="formatStmt" type="void" line="294">
                <params>
                    <param name="cf" type="ColumnFormat"/>
                </params>
                <declaration name="formatString" type="String" line="296"/>
            </method>
            <javadoc line="302">
                Primary -&gt; Literal | Identifier | &apos;(&apos; Expression &apos;)&apos;                
            </javadoc>
            <method name="primary" type="Expression" line="305">
                <declaration name="e" type="Expression" line="306"/>
                <declaration name="s" type="String" line="315"/>
                <scope line="316"/>
                <declaration name="literal" type="double" line="325"/>
            </method>
            <javadoc line="337">
                Unary -&gt; (&apos;+&apos;|&apos;-&apos;) Unary | Primary                
            </javadoc>
            <method name="unary" type="Expression" line="340">
                <declaration name="e" type="Expression" line="341"/>
                <declaration name="op" type="Operator" line="342"/>
                <scope line="344">
                    <declaration name="e1" type="Expression" line="359"/>
                </scope>
            </method>
            <javadoc line="368">
                MultExpression -&gt; Unary ((&apos;&apos; | &apos;/&apos;) Unary)                
            </javadoc>
            <method name="multExpression" type="Expression" line="371">
                <declaration name="e" type="Expression" line="372"/>
                <declaration name="op" type="Operator" line="373"/>
                <scope line="375">
                    <declaration name="e1" type="Expression" line="389"/>
                </scope>
            </method>
            <javadoc line="398">
                AddExpression -&gt; MultExpression ((&apos;+&apos; | &apos;-&apos;) MultExpression)                
            </javadoc>
            <method name="addExpression" type="Expression" line="401">
                <declaration name="e" type="Expression" line="402"/>
                <declaration name="op" type="Operator" line="403"/>
                <scope line="405">
                    <declaration name="e1" type="Expression" line="419"/>
                </scope>
            </method>
            <javadoc line="428">
                Expression -&gt; AddExpression                
            </javadoc>
            <method name="expression" type="Expression" line="431">
                <declaration name="e" type="Expression" line="432"/>
            </method>
            <javadoc line="437">
                datastmt -&gt; &apos;data&apos; expression                
            </javadoc>
            <method name="dataStmt" type="void" line="440">
                <params>
                    <param name="cf" type="ColumnFormat"/>
                </params>
                <declaration name="e" type="Expression" line="442"/>
            </method>
            <javadoc line="447">
                statementlist -&gt; optionalstmt statementlist
                  optionalstmt -&gt; &apos;data&apos; expression
                  &apos;header&apos; quotedstring
                  &apos;width&apos; integer
                  &apos;format&apos; formatstring
                  &apos;align&apos; alignspec
                  &apos;scale&apos; scalespec                
            </javadoc>
            <method name="statementList" type="void" line="457">
                <params>
                    <param name="cf" type="ColumnFormat"/>
                </params>
                <scope line="458">
                    <scope line="459"/>
                    <scope line="463"/>
                    <scope line="465"/>
                    <scope line="467"/>
                    <scope line="469"/>
                    <scope line="471"/>
                    <scope line="473"/>
                    <scope line="475"/>
                </scope>
            </method>
            <javadoc line="481">
                optionlist -&gt; columspec optionlist
                  null
                  columspec -&gt; &apos;column&apos; &apos;{&apos; statementlist &apos;}&apos;                
            </javadoc>
            <method name="optionList" type="void" line="487">
                <params>
                    <param name="of" type="OptionFormat"/>
                </params>
                <scope line="488">
                    <scope line="489"/>
                    <declaration name="cf" type="ColumnFormat" line="495"/>
                </scope>
            </method>
            <javadoc line="503">
                optionstmt -&gt; &apos;option&apos; ID &apos;{&apos; optionlist &apos;}&apos;                
            </javadoc>
            <method name="optionStmt" type="OptionFormat" line="506">
                <declaration name="optionName" type="String" line="508"/>
                <declaration name="of" type="OptionFormat" line="511"/>
            </method>
            <javadoc line="517">
                parse the specification for the given option identifier                
            </javadoc>
            <method name="parse" type="OptionFormat" line="521">
                <params>
                    <param name="option" type="String"/>
                </params>
                <comment line="525">
                    this search stops on the first occurance of an option
                     statement with a name matching the given option. Any
                     duplicate options are ignored.                    
                </comment>
                <comment line="531">
                    look for the start symbol                    
                </comment>
                <comment line="534">
                    skip tokens until a start symbol is found                    
                </comment>
                <comment line="539">
                    check if the option name is the one we are interested in                    
                </comment>
                <comment line="544">
                    this is the one we are looking for, parse it                    
                </comment>
                <comment line="548">
                    not what we are looking for, start skipping tokens                    
                </comment>
                <scope line="529">
                    <scope line="532"/>
                    <scope line="542"/>
                    <scope line="546"/>
                </scope>
            </method>
            <method name="parseOptions" type="Set<OptionFormat>" line="554">
                <comment line="561">
                    look for the start symbol                    
                </comment>
                <comment line="564">
                    skip tokens until a start symbol is found                    
                </comment>
                <comment line="569">
                    note: if a duplicate option statement exists, then
                     first one encountered is the chosen definition.                    
                </comment>
                <declaration name="options" type="Set&lt;OptionFormat&gt;" line="555"/>
                <scope line="559">
                    <scope line="562"/>
                    <declaration name="of" type="OptionFormat" line="570"/>
                </scope>
            </method>
            <method name="getOptionFormat" type="OptionFormat" line="576"/>
            <method name="log" type="void" line="580">
                <params>
                    <param name="logging" type="boolean"/>
                    <param name="s" type="String"/>
                </params>
                <scope line="581"/>
            </method>
        </class>
    </source>