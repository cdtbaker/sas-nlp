<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="sun.tools.asm.Assembler"/>
        <import package="java.io.PrintStream"/>
        <import package="java.util.Hashtable"/>
        <class name="AssignExpression" line="33">
            <extends class="BinaryAssignExpression"/>
            <javadoc line="33">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="updater" type="FieldUpdater" line="41"/>
            <javadoc line="43">
                Constructor                
            </javadoc>
            <method name="AssignExpression" type="constructor" line="46">
                <params>
                    <param name="where" type="long"/>
                    <param name="left" type="Expression"/>
                    <param name="right" type="Expression"/>
                </params>
            </method>
            <javadoc line="50">
                Check an assignment expression                
            </javadoc>
            <method name="checkValue" type="Vset" line="53">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
                <comment line="55">
                    we don&apos;t want to mark an identifier as having a value                    
                </comment>
                <comment line="56">
                    until having evaluated the right-hand side                    
                </comment>
                <comment line="60">
                    normally left to right evaluation.                    
                </comment>
                <comment line="67">
                    Get field updater (access method) if needed, else null.                    
                </comment>
                <scope line="54"/>
                <scope line="59"/>
            </method>
            <javadoc line="73">
                Inline                
            </javadoc>
            <method name="inlineValue" type="Expression" line="76">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <comment line="79">
                    Must be &apos;inlineLHS&apos; here.  But compare with similar case in                    
                </comment>
                <comment line="80">
                    &apos;AssignOpExpression&apos; and &apos;IncDecExpression&apos;, which needs &apos;inlineValue&apos;.                    
                </comment>
                <scope line="83"/>
            </method>
            <javadoc line="89">
                Create a copy of the expression for method inlining                
            </javadoc>
            <method name="copyInline" type="Expression" line="92">
                <params>
                    <param name="ctx" type="Context"/>
                </params>
                <declaration name="e" type="AssignExpression" line="95"/>
                <scope line="98"/>
            </method>
            <javadoc line="104">
                The cost of inlining this expression                
            </javadoc>
            <method name="costInline" type="int" line="107">
                <params>
                    <param name="thresh" type="int"/>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <comment line="108">
                    ----------
                    return 2 + super.costInline(thresh, env, ctx);                    
                </comment>
                <comment line="112">
                    Cost of rhs expression + cost of access method call.                    
                </comment>
                <comment line="113">
                    Access method call cost includes lhs cost.                    
                </comment>
                <comment line="116">
                    Cost of rhs expression + cost of lhs expression +                    
                </comment>
                <comment line="117">
                    cost of store instruction.                    
                </comment>
            </method>
            <javadoc line="122">
                Code                
            </javadoc>
            <method name="codeValue" type="void" line="125">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
                <comment line="127">
                    Field is directly accessible.                    
                </comment>
                <comment line="133">
                    Must use access method.                    
                </comment>
                <comment line="134">
                    Left operand is always a &apos;FieldExpression&apos;, or                    
                </comment>
                <comment line="135">
                    is rewritten as one via &apos;implementation&apos;.                    
                </comment>
                <scope line="126">
                    <declaration name="depth" type="int" line="128"/>
                </scope>
                <scope line="132"/>
            </method>
            <method name="code" type="void" line="142">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
                <comment line="144">
                    Field is directly accessible.                    
                </comment>
                <comment line="149">
                    Must use access method.                    
                </comment>
                <comment line="150">
                    Left operand is always a &apos;FieldExpression&apos;, or                    
                </comment>
                <comment line="151">
                    is rewritten as one via &apos;implementation&apos;.                    
                </comment>
                <scope line="143"/>
                <scope line="148"/>
            </method>
        </class>
    </source>