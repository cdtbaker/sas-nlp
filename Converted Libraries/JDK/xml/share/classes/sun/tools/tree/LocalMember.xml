<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="sun.tools.tree"/>
        <import package="java.util.Vector"/>
        <class name="LocalMember" line="32">
            <extends class="MemberDefinition"/>
            <comment line="203">
                Used by class Context, only on members of MemberDefinition.available:                
            </comment>
            <comment line="210">
                Used by class Context, only on &quot;AccessVar&quot; constructor args                
            </comment>
            <javadoc line="32">
                A local Field
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="number" type="int" line="42"/>
            <javadoc line="42">
                The number of the variable                
            </javadoc>
            <declaration name="readcount" type="int" line="47"/>
            <javadoc line="47">
                Some statistics                
            </javadoc>
            <declaration name="writecount" type="int" line="51"/>
            <declaration name="scopeNumber" type="int" line="53"/>
            <javadoc line="53">
                An indication of which block the variable comes from.
                  Helps identify uplevel references.                
            </javadoc>
            <javadoc line="59">
                Return current nesting level, i.e., the value of &apos;scopeNumber&apos;.
                  Made public for the benefit of &apos;ClassDefinition.resolveName&apos;.                
            </javadoc>
            <method name="getScopeNumber" type="int" line="63"/>
            <declaration name="originalOfCopy" type="LocalMember" line="67"/>
            <javadoc line="67">
                Used by copyInline to record the original of this copy.                
            </javadoc>
            <declaration name="prev" type="LocalMember" line="72"/>
            <javadoc line="72">
                The previous local variable, this list is used to build a nested
                  context of local variables.                
            </javadoc>
            <javadoc line="78">
                Constructor                
            </javadoc>
            <method name="LocalMember" type="constructor" line="82">
                <params>
                    <param name="where" type="long"/>
                    <param name="clazz" type="ClassDefinition"/>
                    <param name="modifiers" type="int"/>
                    <param name="type" type="Type"/>
                    <param name="name" type="Identifier"/>
                </params>
            </method>
            <javadoc line="86">
                Constructor for a block-inner class.                
            </javadoc>
            <method name="LocalMember" type="constructor" line="89">
                <params>
                    <param name="innerClass" type="ClassDefinition"/>
                </params>
                <comment line="93">
                    The class&apos;s &quot;real&quot; name is something like &quot;foo$1$bar&quot;, but locally:                    
                </comment>
            </method>
            <javadoc line="96">
                Constructor for a proxy to an instance or class variable.                
            </javadoc>
            <method name="LocalMember" type="constructor" line="99">
                <params>
                    <param name="field" type="MemberDefinition"/>
                </params>
                <comment line="102">
                    use this random slot to store the info:                    
                </comment>
            </method>
            <javadoc line="105">
                Is this a proxy for the given field?                
            </javadoc>
            <method name="getMember" type="MemberDefinition" line="108"/>
            <javadoc line="112">
                Special checks                
            </javadoc>
            <method name="isLocal" type="boolean" line="115"/>
            <javadoc line="119">
                Make a copy of this field, which is an argument to a method
                  or constructor.  Arrange so that when occurrences of the field
                  are encountered in an immediately following copyInline() operation,
                  the expression nodes will replace the original argument by the
                  fresh copy.                
            </javadoc>
            <method name="copyInline" type="LocalMember" line="126">
                <params>
                    <param name="ctx" type="Context"/>
                </params>
                <comment line="134">
                    Make a temporary link from the original.
                     It only stays valid through the next call to copyInline().
                     (This means that recursive inlining won&apos;t work.)
                     To stay honest, we mark these inline copies:                    
                </comment>
                <declaration name="copy" type="LocalMember" line="127"/>
                <scope line="139"/>
            </method>
            <javadoc line="147">
                Returns the previous result of copyInline(ctx).
                  Must be called in the course of an Expression.copyInline()
                  operation that immediately follows the LocalMember.copyInline().
                  Return &quot;this&quot; if there is no such copy.                
            </javadoc>
            <method name="getCurrentInlineCopy" type="LocalMember" line="153">
                <params>
                    <param name="ctx" type="Context"/>
                </params>
                <declaration name="accessPeer" type="MemberDefinition" line="154"/>
                <scope line="155">
                    <declaration name="copy" type="LocalMember" line="156"/>
                </scope>
            </method>
            <javadoc line="162">
                May inline copies of all the arguments of the given method.                
            </javadoc>
            <method name="copyArguments" type="LocalMember[]" line="165">
                <params>
                    <param name="ctx" type="Context"/>
                    <param name="field" type="MemberDefinition"/>
                </params>
                <declaration name="v" type="Vector" line="166"/>
                <declaration name="res" type="LocalMember" line="167"/>
                <scope line="169"/>
            </method>
            <javadoc line="175">
                Call this when finished with the result of a copyArguments() call.                
            </javadoc>
            <method name="doneWithArguments" type="void" line="178">
                <params>
                    <param name="ctx" type="Context"/>
                    <param name="res" type="LocalMember"/>
                </params>
                <scope line="179">
                    <scope line="180"/>
                </scope>
            </method>
            <javadoc line="186">
                Is this local variable&apos;s value stable and simple enough to be directly
                  substituted for occurrences of the variable itself?
                  (This decision is made by VarDeclarationStatement.inline().)                
            </javadoc>
            <method name="isInlineable" type="boolean" line="191">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="fromFinal" type="boolean"/>
                </params>
            </method>
            <javadoc line="195">
                Check if used                
            </javadoc>
            <method name="isUsed" type="boolean" line="198"/>
            <method name="getAccessVar" type="LocalMember" line="203"/>
            <method name="setAccessVar" type="void" line="206">
                <params>
                    <param name="f" type="LocalMember"/>
                </params>
            </method>
            <method name="getAccessVarMember" type="MemberDefinition" line="210"/>
            <method name="setAccessVarMember" type="void" line="213">
                <params>
                    <param name="f" type="MemberDefinition"/>
                </params>
            </method>
            <javadoc line="218">
                Return value                
            </javadoc>
            <method name="getValue" type="Node" line="221">
                <params>
                    <param name="env" type="Environment"/>
                </params>
            </method>
            <javadoc line="225">
                Value number for vsets, or -1 if none.                
            </javadoc>
            <method name="getNumber" type="int" line="228">
                <params>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
        </class>
    </source>