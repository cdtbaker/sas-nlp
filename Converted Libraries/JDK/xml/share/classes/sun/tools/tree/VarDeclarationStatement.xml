<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="sun.tools.asm.Assembler"/>
        <import package="sun.tools.asm.LocalVariable"/>
        <import package="java.io.PrintStream"/>
        <import package="java.util.Hashtable"/>
        <class name="VarDeclarationStatement" line="34">
            <extends class="Statement"/>
            <javadoc line="34">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="field" type="LocalMember" line="41"/>
            <declaration name="expr" type="Expression" line="42"/>
            <javadoc line="44">
                Constructor                
            </javadoc>
            <method name="VarDeclarationStatement" type="constructor" line="47">
                <params>
                    <param name="where" type="long"/>
                    <param name="expr" type="Expression"/>
                </params>
            </method>
            <method name="VarDeclarationStatement" type="constructor" line="51">
                <params>
                    <param name="where" type="long"/>
                    <param name="field" type="LocalMember"/>
                    <param name="expr" type="Expression"/>
                </params>
            </method>
            <javadoc line="57">
                Check statement                
            </javadoc>
            <method name="checkDeclaration" type="Vset" line="60">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="mod" type="int"/>
                    <param name="t" type="Type"/>
                    <param name="exp" type="Hashtable"/>
                </params>
                <comment line="85">
                    Argument &apos;expr&apos; is either an IdentifierExpression for a declaration of                    
                </comment>
                <comment line="86">
                    the form &apos;type x&apos; or an AssignmentExpression for a declaration of the                    
                </comment>
                <comment line="87">
                    form &apos;type x = initvalue&apos;.  Note that these expressions are treated                    
                </comment>
                <comment line="88">
                    specially in this context, and don&apos;t have much connection to their ordinary                    
                </comment>
                <comment line="89">
                    meaning.                    
                </comment>
                <comment line="122">
                    for the sake of non-blank finals                    
                </comment>
                <comment line="124">
                    Keep in mind that isConstant() only means expressions                    
                </comment>
                <comment line="125">
                    that are constant according to the JLS.  They might                    
                </comment>
                <comment line="126">
                    not be either constants or evaluable (eg. 1/0).                    
                </comment>
                <scope line="61"/>
                <scope line="64">
                    <scope line="66"/>
                    <scope line="71">
                        <declaration name="body" type="ClassDefinition" line="72"/>
                        <scope line="73"/>
                        <scope line="76"/>
                    </scope>
                </scope>
                <declaration name="e" type="Expression" line="91"/>
                <scope line="93"/>
                <scope line="96"/>
                <declaration name="declError" type="boolean" line="100"/>
                <scope line="101">
                    <declaration name="array" type="ArrayAccessExpression" line="102"/>
                    <scope line="103"/>
                </scope>
                <scope line="110">
                    <declaration name="id" type="Identifier" line="111"/>
                    <scope line="112"/>
                    <scope line="119">
                        <scope line="123"/>
                    </scope>
                    <scope line="130"/>
                    <scope line="132"/>
                </scope>
            </method>
            <javadoc line="141">
                Inline                
            </javadoc>
            <method name="inline" type="Statement" line="144">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <comment line="151">
                    Don&apos;t generate code for variable if unused and                    
                </comment>
                <comment line="152">
                    optimization is on, whether or not debugging is on                    
                </comment>
                <comment line="161">
                    for the sake of non-blank finals                    
                </comment>
                <comment line="165">
                    This code looks like it tests whether a final variable                    
                </comment>
                <comment line="166">
                    is being initialized by an identifier expression.                    
                </comment>
                <comment line="167">
                    Then if the identifier is a local of the same method                    
                </comment>
                <comment line="168">
                    it makes the final variable eligible to be inlined.                    
                </comment>
                <comment line="169">
                    BUT: why isn&apos;t the local also checked to make sure                    
                </comment>
                <comment line="170">
                    it is itself final?  Unknown.                    
                </comment>
                <comment line="175">
                    System.out.println(&quot;FINAL IDENT = &quot; + field + &quot; in &quot; + ctx.field);                    
                </comment>
                <comment line="179">
                    The two lines below used to elide the declaration                    
                </comment>
                <comment line="180">
                    of inlineable variables, on the theory that there                    
                </comment>
                <comment line="181">
                    wouldn&apos;t be any references.  But this breaks the                    
                </comment>
                <comment line="182">
                    translation of nested classes, which might refer to                    
                </comment>
                <comment line="183">
                    the variable.                    
                </comment>
                <comment line="185">
                    expr = null;                    
                </comment>
                <comment line="186">
                    return null;                    
                </comment>
                <comment line="190">
                    System.out.println(&quot;FINAL = &quot; + field + &quot; in &quot; + ctx.field);                    
                </comment>
                <comment line="194">
                    The two lines below used to elide the declaration                    
                </comment>
                <comment line="195">
                    of inlineable variables, on the theory that there                    
                </comment>
                <comment line="196">
                    wouldn&apos;t be any references.  But this breaks the                    
                </comment>
                <comment line="197">
                    translation of nested classes, which might refer to                    
                </comment>
                <comment line="198">
                    the variable.  Fix for 4073244.                    
                </comment>
                <comment line="200">
                    expr = null;                    
                </comment>
                <comment line="201">
                    return null;                    
                </comment>
                <scope line="145">
                    <declaration name="body" type="ClassDefinition" line="146"/>
                </scope>
                <scope line="153"/>
                <scope line="159">
                    <scope line="162">
                        <scope line="163">
                            <declaration name="e" type="IdentifierExpression" line="172"/>
                            <scope line="174"/>
                        </scope>
                        <scope line="189"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="208">
                Create a copy of the statement for method inlining                
            </javadoc>
            <method name="copyInline" type="Statement" line="211">
                <params>
                    <param name="ctx" type="Context"/>
                    <param name="valNeeded" type="boolean"/>
                </params>
                <declaration name="s" type="VarDeclarationStatement" line="212"/>
                <scope line="213"/>
            </method>
            <javadoc line="219">
                The cost of inlining this statement                
            </javadoc>
            <method name="costInline" type="int" line="222">
                <params>
                    <param name="thresh" type="int"/>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <comment line="224">
                    don&apos;t copy classes...                    
                </comment>
                <scope line="223"/>
            </method>
            <javadoc line="229">
                Code                
            </javadoc>
            <method name="code" type="void" line="232">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
                <comment line="234">
                    The two lines of code directly following this comment used                    
                </comment>
                <comment line="235">
                    to be in the opposite order.  They were switched so that                    
                </comment>
                <comment line="236">
                    lines like the following:                    
                </comment>
                <comment line="237">
                                        
                </comment>
                <comment line="238">
                    int j = (j = 4);                    
                </comment>
                <comment line="239">
                                        
                </comment>
                <comment line="240">
                    will compile correctly.  (Constructions like the above are                    
                </comment>
                <comment line="241">
                    legal.  JLS 14.3.2 says that the scope of a local variable                    
                </comment>
                <comment line="242">
                    includes its own initializer.)  It is important that we                    
                </comment>
                <comment line="243">
                    declare `field&apos; before we code `expr&apos;, because otherwise                    
                </comment>
                <comment line="244">
                    situations can arise where `field&apos; thinks it is assigned                    
                </comment>
                <comment line="245">
                    a local variable slot that is, in actuality, assigned to                    
                </comment>
                <comment line="246">
                    an entirely different variable.  (Bug id 4076729)                    
                </comment>
                <comment line="255">
                    an initial side effect, rather than an initial value                    
                </comment>
                <scope line="233"/>
                <scope line="252">
                    <scope line="254"/>
                </scope>
            </method>
            <javadoc line="261">
                Print                
            </javadoc>
            <method name="print" type="void" line="264">
                <params>
                    <param name="out" type="PrintStream"/>
                    <param name="indent" type="int"/>
                </params>
                <scope line="266">
                    <scope line="268"/>
                </scope>
                <scope line="272"/>
            </method>
        </class>
    </source>