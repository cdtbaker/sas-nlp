<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="sun.tools.asm.Assembler"/>
        <import package="java.util.Hashtable"/>
        <class name="IncDecExpression" line="32">
            <extends class="UnaryExpression"/>
            <javadoc line="32">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="updater" type="FieldUpdater" line="40"/>
            <javadoc line="42">
                Constructor                
            </javadoc>
            <method name="IncDecExpression" type="constructor" line="45">
                <params>
                    <param name="op" type="int"/>
                    <param name="where" type="long"/>
                    <param name="right" type="Expression"/>
                </params>
            </method>
            <javadoc line="49">
                Check an increment or decrement expression                
            </javadoc>
            <method name="checkValue" type="Vset" line="52">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
                <comment line="62">
                    Must be called after &apos;checkAssignOp&apos;.                    
                </comment>
                <scope line="54"/>
                <scope line="56">
                    <scope line="57"/>
                </scope>
            </method>
            <javadoc line="66">
                Check void expression                
            </javadoc>
            <method name="check" type="Vset" line="69">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
            </method>
            <javadoc line="73">
                Inline                
            </javadoc>
            <method name="inline" type="Expression" line="76">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <method name="inlineValue" type="Expression" line="79">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <comment line="80">
                    Why not inlineLHS?  But that does not work.                    
                </comment>
                <scope line="82"/>
            </method>
            <method name="costInline" type="int" line="88">
                <params>
                    <param name="thresh" type="int"/>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <comment line="92">
                    Increment variable in place.  Count 3 bytes for &apos;iinc&apos;.                    
                </comment>
                <comment line="95">
                    Cost to load lhs reference, fetch local, increment, and store.                    
                </comment>
                <comment line="96">
                    Load/store cost will be higher if variable is a field.  Note that                    
                </comment>
                <comment line="97">
                    costs are highly approximate. See &apos;AssignOpExpression.costInline&apos;                    
                </comment>
                <comment line="98">
                    Does not account for cost of conversions,or duplications in                    
                </comment>
                <comment line="99">
                    value-needed context..                    
                </comment>
                <comment line="102">
                    Cost of two access method calls (get/set) + cost of increment.                    
                </comment>
                <scope line="89">
                    <scope line="91"/>
                </scope>
                <scope line="101"/>
            </method>
            <javadoc line="108">
                Code                
            </javadoc>
            <method name="codeIncDecOp" type="void" line="112">
                <params>
                    <param name="asm" type="Assembler"/>
                    <param name="inc" type="boolean"/>
                </params>
            </method>
            <method name="codeIncDec" type="void" line="150">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                    <param name="inc" type="boolean"/>
                    <param name="prefix" type="boolean"/>
                    <param name="valNeeded" type="boolean"/>
                </params>
                <comment line="152">
                    The &apos;iinc&apos; instruction cannot be used if an access method call is required.                    
                </comment>
                <comment line="169">
                    Field is directly accessible.                    
                </comment>
                <comment line="182">
                    Must use access methods.                    
                </comment>
                <scope line="154">
                    <scope line="155"/>
                    <declaration name="v" type="int" line="158"/>
                    <declaration name="operands" type="int[]" line="159"/>
                    <scope line="161"/>
                </scope>
                <scope line="168">
                    <declaration name="depth" type="int" line="170"/>
                    <scope line="173"/>
                    <scope line="177"/>
                </scope>
                <scope line="181"/>
            </method>
        </class>
    </source>