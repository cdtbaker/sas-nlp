<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="sun.tools.asm.Assembler"/>
        <class name="Context" line="4">
            <implements interface="Constants"/>
            <javadoc line="4">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="prev" type="Context" line="10"/>
            <declaration name="node" type="Node" line="11"/>
            <declaration name="varNumber" type="int" line="12"/>
            <declaration name="locals" type="LocalMember" line="13"/>
            <declaration name="classes" type="LocalMember" line="14"/>
            <declaration name="field" type="MemberDefinition" line="15"/>
            <declaration name="scopeNumber" type="int" line="16"/>
            <declaration name="frameNumber" type="int" line="17"/>
            <javadoc line="18">
                Create the initial context for a method
                  The incoming context is inherited from                
            </javadoc>
            <method name="Context" type="constructor" line="22">
                <params>
                    <param name="ctx" type="Context"/>
                    <param name="field" type="MemberDefinition"/>
                </params>
                <scope line="24"/>
                <scope line="29">
                    <scope line="33"/>
                    <scope line="37"/>
                </scope>
            </method>
            <javadoc line="44">
                Create a new context, for initializing a class.                
            </javadoc>
            <method name="Context" type="constructor" line="47">
                <params>
                    <param name="ctx" type="Context"/>
                    <param name="c" type="ClassDefinition"/>
                </params>
            </method>
            <javadoc line="50">
                Create a new nested context, for a block statement                
            </javadoc>
            <method name="Context" type="constructor" line="53">
                <params>
                    <param name="ctx" type="Context"/>
                    <param name="node" type="Node"/>
                </params>
                <scope line="54"/>
                <scope line="59"/>
            </method>
            <method name="Context" type="constructor" line="70">
                <params>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <javadoc line="73">
                Declare local                
            </javadoc>
            <method name="declare" type="int" line="76">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="local" type="LocalMember"/>
                </params>
                <scope line="78"/>
                <scope line="81"/>
            </method>
            <javadoc line="92">
                Get a local variable by name                
            </javadoc>
            <method name="getLocalField" type="LocalMember" line="95">
                <params>
                    <param name="name" type="Identifier"/>
                </params>
                <scope line="96">
                    <scope line="97"/>
                </scope>
            </method>
            <javadoc line="103">
                Get the scope number for a reference to a member of this class
                  (Larger scope numbers are more deeply nested.)                
                <see>
                    LocalMember#scopeNumber                    
                </see>
            </javadoc>
            <method name="getScopeNumber" type="int" line="108">
                <params>
                    <param name="c" type="ClassDefinition"/>
                </params>
                <scope line="109">
                    <scope line="111"/>
                </scope>
            </method>
            <method name="getFieldCommon" type="MemberDefinition" line="117">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="name" type="Identifier"/>
                    <param name="apparentOnly" type="boolean"/>
                </params>
                <declaration name="lf" type="LocalMember" line="118"/>
                <declaration name="ls" type="int" line="119"/>
                <declaration name="thisClass" type="ClassDefinition" line="120"/>
                <scope line="121">
                    <declaration name="f" type="MemberDefinition" line="122"/>
                    <scope line="123">
                        <scope line="124"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="132">
                Assign a number to a class field.
                  (This is used to track definite assignment of some blank finals.)                
            </javadoc>
            <method name="declareFieldNumber" type="int" line="136">
                <params>
                    <param name="field" type="MemberDefinition"/>
                </params>
            </method>
            <javadoc line="139">
                Retrieve a number previously assigned by declareMember().
                  Return -1 if there was no such assignment in this context.                
            </javadoc>
            <method name="getFieldNumber" type="int" line="143">
                <params>
                    <param name="field" type="MemberDefinition"/>
                </params>
                <scope line="144">
                    <scope line="145"/>
                </scope>
            </method>
            <javadoc line="151">
                Return the local field or member field corresponding to a number.
                  Return null if there is no such field.                
            </javadoc>
            <method name="getElement" type="MemberDefinition" line="155">
                <params>
                    <param name="number" type="int"/>
                </params>
                <scope line="156">
                    <scope line="157">
                        <declaration name="field" type="MemberDefinition" line="158"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="164">
                Get a local class by name                
            </javadoc>
            <method name="getLocalClass" type="LocalMember" line="167">
                <params>
                    <param name="name" type="Identifier"/>
                </params>
                <scope line="168">
                    <scope line="169"/>
                </scope>
            </method>
            <method name="getClassCommon" type="MemberDefinition" line="175">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="name" type="Identifier"/>
                    <param name="apparentOnly" type="boolean"/>
                </params>
                <declaration name="lf" type="LocalMember" line="176"/>
                <declaration name="ls" type="int" line="177"/>
                <scope line="178">
                    <declaration name="f" type="MemberDefinition" line="179"/>
                    <scope line="180">
                        <scope line="181"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="189">
                Get either a local variable, or a field in a current class                
            </javadoc>
            <method name="getField" type="MemberDefinition" line="192">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="name" type="Identifier"/>
                </params>
            </method>
            <javadoc line="195">
                Like getField, except that it skips over inherited fields.
                  Used for error checking.                
            </javadoc>
            <method name="getApparentField" type="MemberDefinition" line="199">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="name" type="Identifier"/>
                </params>
            </method>
            <javadoc line="202">
                Check if the given field is active in this context.                
            </javadoc>
            <method name="isInScope" type="boolean" line="205">
                <params>
                    <param name="field" type="LocalMember"/>
                </params>
                <scope line="206">
                    <scope line="207"/>
                </scope>
            </method>
            <javadoc line="213">
                Notice a reference (usually an uplevel one).
                  Update the references list of every enclosing class
                  which is enclosed by the scope of the target.
                  Update decisions about which uplevels to make into fields.
                  Return the uplevel reference descriptor, or null if it&apos;s local.
                  &lt;p&gt;
                  The target must be in scope in this context.
                  So, call this method only from the check phase.
                  (In other phases, the context may be less complete.)
                  &lt;p&gt;
                  This can and should be called both before and after classes are frozen.
                  It should be a no-op, and will raise a compiler error if not.                
            </javadoc>
            <method name="noteReference" type="UplevelReference" line="227">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="target" type="LocalMember"/>
                </params>
                <declaration name="targetScopeNumber" type="int" line="228"/>
                <declaration name="res" type="UplevelReference" line="229"/>
                <declaration name="currentFrameNumber" type="int" line="230"/>
                <scope line="231">
                    <scope line="232"/>
                    <scope line="236"/>
                    <declaration name="refc" type="ClassDefinition" line="239"/>
                    <declaration name="r" type="UplevelReference" line="240"/>
                    <scope line="242"/>
                </scope>
            </method>
            <javadoc line="248">
                Implement a reference (usually an uplevel one).
                  Call noteReference() first, to make sure the reference
                  lists are up to date.
                  &lt;p&gt;
                  The resulting expression tree does not need checking;
                  it can be code-generated right away.
                  If the reference is not uplevel, the result is an IDENT or THIS.                
            </javadoc>
            <method name="makeReference" type="Expression" line="257">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="target" type="LocalMember"/>
                </params>
                <declaration name="r" type="UplevelReference" line="258"/>
                <scope line="259"/>
                <scope line="262"/>
                <scope line="265"/>
            </method>
            <javadoc line="269">
                Return a local expression which can serve as the base reference
                  for the given field.  If the field is a constructor, return an
                  expression for the implicit enclosing instance argument.
                  &lt;p&gt;
                  Return null if there is no need for such an argument,
                  or if there was an error.                
            </javadoc>
            <method name="findOuterLink" type="Expression" line="277">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="where" type="long"/>
                    <param name="f" type="MemberDefinition"/>
                </params>
                <declaration name="fc" type="ClassDefinition" line="278"/>
                <declaration name="reqc" type="ClassDefinition" line="279"/>
                <scope line="280"/>
            </method>
            <method name="match" type="boolean" line="285">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="thisc" type="ClassDefinition"/>
                    <param name="reqc" type="ClassDefinition"/>
                </params>
                <scope line="286"/>
                <scope line="289"/>
            </method>
            <method name="findOuterLink" type="Expression" line="293">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="where" type="long"/>
                    <param name="reqc" type="ClassDefinition"/>
                    <param name="f" type="MemberDefinition"/>
                    <param name="needExactMatch" type="boolean"/>
                </params>
                <scope line="294">
                    <scope line="295">
                        <declaration name="nm" type="Identifier" line="296"/>
                    </scope>
                    <scope line="299"/>
                    <scope line="302"/>
                    <scope line="305"/>
                    <declaration name="e" type="Expression" line="308"/>
                </scope>
                <declaration name="lp" type="LocalMember" line="312"/>
                <declaration name="thise" type="Expression" line="313"/>
                <declaration name="root" type="LocalMember" line="314"/>
                <declaration name="thisc" type="ClassDefinition" line="315"/>
                <declaration name="conCls" type="ClassDefinition" line="316"/>
                <scope line="317"/>
                <scope line="320"/>
                <scope line="324">
                    <scope line="325">
                        <scope line="326"/>
                        <scope line="329"/>
                    </scope>
                    <scope line="337"/>
                    <declaration name="outerMember" type="MemberDefinition" line="340"/>
                    <scope line="341"/>
                    <declaration name="prevc" type="ClassDefinition" line="345"/>
                    <scope line="347">
                        <declaration name="nm" type="Identifier" line="348"/>
                        <declaration name="arg" type="IdentifierExpression" line="349"/>
                    </scope>
                    <scope line="353"/>
                </scope>
                <scope line="357"/>
                <scope line="360">
                    <declaration name="nm" type="Identifier" line="361"/>
                </scope>
                <scope line="364"/>
                <scope line="367"/>
                <declaration name="e" type="Expression" line="370"/>
            </method>
            <javadoc line="374">
                Is there a &quot;this&quot; of type reqc in scope?                
            </javadoc>
            <method name="outerLinkExists" type="boolean" line="377">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="reqc" type="ClassDefinition"/>
                    <param name="thisc" type="ClassDefinition"/>
                </params>
                <scope line="378">
                    <scope line="379"/>
                </scope>
            </method>
            <javadoc line="386">
                From which enclosing class do members of this type come?                
            </javadoc>
            <method name="findScope" type="ClassDefinition" line="389">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="reqc" type="ClassDefinition"/>
                </params>
                <declaration name="thisc" type="ClassDefinition" line="390"/>
                <scope line="391"/>
            </method>
            <javadoc line="396">
                Resolve a type name from within a local scope.                
                <see>
                    Environment#resolveName                    
                </see>
            </javadoc>
            <method name="resolveName" type="Identifier" line="400">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="name" type="Identifier"/>
                </params>
                <scope line="401">
                    <declaration name="rhead" type="Identifier" line="402"/>
                    <scope line="403"/>
                    <scope line="406"/>
                    <scope line="409"/>
                    <scope line="412"/>
                </scope>
                <scope line="416">
                    <declaration name="f" type="MemberDefinition" line="417"/>
                    <scope line="418"/>
                </scope>
                <scope line="422"/>
            </method>
            <javadoc line="426">
                Return the name of a lexically apparent type,
                  skipping inherited members, and ignoring
                  the current pacakge and imports.
                  This is used for error checking.                
            </javadoc>
            <method name="getApparentClassName" type="Identifier" line="432">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="name" type="Identifier"/>
                </params>
                <scope line="433">
                    <declaration name="rhead" type="Identifier" line="434"/>
                </scope>
                <scope line="437">
                    <declaration name="f" type="MemberDefinition" line="438"/>
                    <scope line="439"/>
                </scope>
                <scope line="443"/>
                <declaration name="topnm" type="Identifier" line="445"/>
                <scope line="446"/>
            </method>
            <javadoc line="451">
                Raise an error if a blank final was definitely unassigned
                  on entry to a loop, but has possibly been assigned on the
                  back-branch.  If this is the case, the loop may be assigning
                  it multiple times.                
            </javadoc>
            <method name="checkBackBranch" type="void" line="457">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="loop" type="Statement"/>
                    <param name="vsEntry" type="Vset"/>
                    <param name="vsBack" type="Vset"/>
                </params>
                <scope line="458">
                    <scope line="459"/>
                </scope>
            </method>
            <javadoc line="464">
                Check if a field can reach another field (only considers
                  forward references, not the access modifiers).                
            </javadoc>
            <method name="canReach" type="boolean" line="468">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="f" type="MemberDefinition"/>
                </params>
            </method>
            <javadoc line="471">
                Get the context that corresponds to a label, return null if
                  not found.                
            </javadoc>
            <method name="getLabelContext" type="Context" line="475">
                <params>
                    <param name="lbl" type="Identifier"/>
                </params>
                <scope line="476">
                    <scope line="477"/>
                </scope>
            </method>
            <javadoc line="483">
                Get the destination context of a break                
            </javadoc>
            <method name="getBreakContext" type="Context" line="486">
                <params>
                    <param name="lbl" type="Identifier"/>
                </params>
                <scope line="487"/>
                <scope line="490">
                    <scope line="491"/>
                </scope>
            </method>
            <javadoc line="503">
                Get the destination context of a continue                
            </javadoc>
            <method name="getContinueContext" type="Context" line="506">
                <params>
                    <param name="lbl" type="Identifier"/>
                </params>
                <scope line="507"/>
                <scope line="510">
                    <scope line="511"/>
                </scope>
            </method>
            <javadoc line="522">
                Get the destination context of a return (the method body)                
            </javadoc>
            <method name="getReturnContext" type="CheckContext" line="525">
                <scope line="526">
                    <scope line="527"/>
                </scope>
            </method>
            <javadoc line="533">
                Get the context of the innermost surrounding try-block.
                  Consider only try-blocks contained within the same method.
                  (There could be others when searching from within a method
                  of a local class, but they are irrelevant to our purpose.)
                  This is used for recording DA/DU information preceding
                  all abnormal transfers of control: break, continue, return,
                  and throw.                
            </javadoc>
            <method name="getTryExitContext" type="CheckContext" line="542">
                <scope line="543">
                    <scope line="544"/>
                </scope>
            </method>
            <javadoc line="550">
                Get the nearest inlined context                
            </javadoc>
            <method name="getInlineContext" type="Context" line="553">
                <scope line="554">
                    <scope line="555"/>
                </scope>
            </method>
            <javadoc line="565">
                Get the context of a field that is being inlined                
            </javadoc>
            <method name="getInlineMemberContext" type="Context" line="568">
                <params>
                    <param name="field" type="MemberDefinition"/>
                </params>
                <scope line="569">
                    <scope line="570">
                        <scope line="573"/>
                        <scope line="578"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="586">
                Remove variables from the vset set  that are no longer part of
                  this context.                
            </javadoc>
            <method name="removeAdditionalVars" type="Vset" line="590">
                <params>
                    <param name="vset" type="Vset"/>
                </params>
            </method>
            <method name="getVarNumber" type="int" line="593"/>
            <javadoc line="596">
                Return the number of the innermost current instance reference.                
            </javadoc>
            <method name="getThisNumber" type="int" line="599">
                <declaration name="thisf" type="LocalMember" line="600"/>
                <scope line="601"/>
            </method>
            <javadoc line="606">
                Return the field containing the present context.                
            </javadoc>
            <method name="getField" type="MemberDefinition" line="609"/>
            <javadoc line="612">
                Extend an environment with the given context.
                  The resulting environment behaves the same as
                  the given one, except that resolveName() takes
                  into account local class names in this context.                
            </javadoc>
            <method name="newEnvironment" type="Environment" line="618">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
        </class>
        <class name="ContextEnvironment" line="622">
            <extends class="Environment"/>
            <declaration name="ctx" type="Context" line="623"/>
            <declaration name="innerEnv" type="Environment" line="624"/>
            <method name="ContextEnvironment" type="constructor" line="625">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <method name="resolveName" type="Identifier" line="630">
                <params>
                    <param name="name" type="Identifier"/>
                </params>
            </method>
        </class>
    </source>