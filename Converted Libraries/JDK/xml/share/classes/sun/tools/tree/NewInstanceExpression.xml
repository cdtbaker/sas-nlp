<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="sun.tools.asm.Assembler"/>
        <import package="java.util.Hashtable"/>
        <class name="NewInstanceExpression" line="5">
            <extends class="NaryExpression"/>
            <javadoc line="5">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="field" type="MemberDefinition" line="11"/>
            <declaration name="outerArg" type="Expression" line="12"/>
            <declaration name="body" type="ClassDefinition" line="13"/>
            <declaration name="implMethod" type="MemberDefinition" line="14"/>
            <javadoc line="15">
                Constructor                
            </javadoc>
            <method name="NewInstanceExpression" type="constructor" line="18">
                <params>
                    <param name="where" type="long"/>
                    <param name="right" type="Expression"/>
                    <param name="args" type="Expression"/>
                </params>
            </method>
            <method name="NewInstanceExpression" type="constructor" line="21">
                <params>
                    <param name="where" type="long"/>
                    <param name="right" type="Expression"/>
                    <param name="args" type="Expression"/>
                    <param name="outerArg" type="Expression"/>
                    <param name="body" type="ClassDefinition"/>
                </params>
            </method>
            <javadoc line="26">
                From the &quot;new&quot; in an expression of the form outer.new InnerCls(...),
                  return the &quot;outer&quot; expression, or null if there is none.                
            </javadoc>
            <method name="getOuterArg" type="Expression" line="30"/>
            <method name="precedence" type="int" line="33"/>
            <method name="order" type="Expression" line="36">
                <scope line="37">
                    <declaration name="e" type="UnaryExpression" line="38"/>
                </scope>
            </method>
            <javadoc line="45">
                Check expression type                
            </javadoc>
            <method name="checkValue" type="Vset" line="48">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
                <declaration name="def" type="ClassDefinition" line="49"/>
                <declaration name="alreadyChecked" type="Expression" line="50"/>
                <scope line="51">
                    <scope line="52">
                        <declaration name="typeName" type="Identifier" line="55"/>
                        <scope line="56"/>
                        <scope line="59">
                            <scope line="60"/>
                        </scope>
                        <scope line="65">
                            <declaration name="oc" type="ClassDefinition" line="66"/>
                            <declaration name="nm" type="Identifier" line="67"/>
                        </scope>
                    </scope>
                    <scope line="72"/>
                </scope>
                <scope line="77"/>
                <scope line="80"/>
                <declaration name="t" type="Type" line="83"/>
                <declaration name="hasErrors" type="boolean" line="84"/>
                <scope line="85">
                    <scope line="86"/>
                </scope>
                <scope line="91"/>
                <declaration name="args" type="Expression" line="95"/>
                <declaration name="argTypes" type="Type" line="99"/>
                <scope line="100">
                    <scope line="101"/>
                </scope>
                <scope line="107">
                    <scope line="108"/>
                    <declaration name="sourceClass" type="ClassDefinition" line="112"/>
                    <declaration name="c" type="ClassDeclaration" line="113"/>
                    <scope line="114">
                        <declaration name="packageName" type="Identifier" line="115"/>
                        <declaration name="superDef" type="ClassDefinition" line="116"/>
                        <scope line="117"/>
                        <scope line="120"/>
                        <declaration name="constructor" type="MemberDefinition" line="123"/>
                        <scope line="124"/>
                    </scope>
                    <scope line="131">
                        <scope line="132"/>
                        <scope line="136"/>
                    </scope>
                    <scope line="142">
                        <declaration name="anyInit" type="MemberDefinition" line="143"/>
                        <declaration name="sig" type="String" line="145"/>
                    </scope>
                    <scope line="150">
                        <declaration name="cdef" type="ClassDefinition" line="151"/>
                        <scope line="152"/>
                    </scope>
                    <scope line="156"/>
                    <scope line="160"/>
                    <scope line="163"/>
                </scope>
                <scope line="167"/>
                <scope line="171"/>
                <scope line="176"/>
                <scope line="179">
                    <scope line="181"/>
                </scope>
                <declaration name="exceptions" type="ClassDeclaration" line="185"/>
                <scope line="186">
                    <scope line="187"/>
                </scope>
            </method>
            <javadoc line="194">
                Given a list of arguments for a constructor,
                  return a possibly modified list which includes the hidden
                  argument which initializes the uplevel self pointer.                
                <arg>
                    def the class which perhaps contains an outer link.                    
                </arg>
                <arg>
                    outerArg if non-null, an explicit location in which to construct.                    
                </arg>
            </javadoc>
            <method name="insertOuterLink" type="Expression[]" line="201">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="where" type="long"/>
                    <param name="def" type="ClassDefinition"/>
                    <param name="outerArg" type="Expression"/>
                    <param name="args" type="Expression"/>
                </params>
                <scope line="202">
                    <declaration name="args2" type="Expression" line="203"/>
                    <scope line="205"/>
                    <scope line="208"/>
                </scope>
            </method>
            <javadoc line="215">
                Check void expression                
            </javadoc>
            <method name="check" type="Vset" line="218">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
            </method>
            <declaration name="MAXINLINECOST" type="int" line="221"/>
            <javadoc line="221">
                Inline                
            </javadoc>
            <method name="copyInline" type="Expression" line="225">
                <params>
                    <param name="ctx" type="Context"/>
                </params>
                <declaration name="e" type="NewInstanceExpression" line="226"/>
                <scope line="227"/>
            </method>
            <method name="inlineNewInstance" type="Expression" line="232">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="s" type="Statement"/>
                </params>
                <scope line="233"/>
                <declaration name="v" type="LocalMember" line="236"/>
                <declaration name="body" type="Statement" line="237"/>
                <declaration name="o" type="int" line="238"/>
                <scope line="239"/>
                <scope line="243"/>
                <scope line="246"/>
            </method>
            <method name="inline" type="Expression" line="253">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <method name="inlineValue" type="Expression" line="256">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <scope line="257"/>
                <declaration name="refc" type="ClassDefinition" line="260"/>
                <declaration name="r" type="UplevelReference" line="261"/>
                <scope line="262"/>
                <scope line="265">
                    <scope line="266"/>
                    <scope line="270"/>
                    <scope line="273">
                        <declaration name="s" type="Statement" line="274"/>
                        <scope line="275"/>
                    </scope>
                </scope>
                <scope line="280"/>
                <scope line="283">
                    <declaration name="e" type="Expression" line="284"/>
                </scope>
            </method>
            <method name="costInline" type="int" line="290">
                <params>
                    <param name="thresh" type="int"/>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <scope line="291"/>
                <scope line="294"/>
                <declaration name="sourceClass" type="ClassDefinition" line="297"/>
                <scope line="298">
                    <scope line="299"/>
                </scope>
                <scope line="303"/>
            </method>
            <javadoc line="307">
                Code                
            </javadoc>
            <method name="code" type="void" line="310">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
            </method>
            <method name="codeValue" type="void" line="313">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
            </method>
            <method name="codeCommon" type="void" line="316">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                    <param name="forValue" type="boolean"/>
                </params>
                <scope line="318"/>
                <declaration name="refc" type="ClassDefinition" line="321"/>
                <declaration name="r" type="UplevelReference" line="322"/>
                <scope line="323"/>
                <scope line="326">
                    <scope line="334">
                        <declaration name="f" type="MemberDefinition" line="335"/>
                        <scope line="336"/>
                    </scope>
                    <scope line="341">
                        <declaration name="c" type="ClassDefinition" line="342"/>
                        <declaration name="getc" type="MemberDefinition" line="343"/>
                    </scope>
                    <scope line="348"/>
                </scope>
                <scope line="352"/>
                <scope line="355"/>
            </method>
        </class>
    </source>