<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="sun.tools.asm.Assembler"/>
        <import package="sun.tools.asm.Label"/>
        <import package="java.io.PrintStream"/>
        <import package="java.util.Hashtable"/>
        <class name="Statement" line="7">
            <extends class="Node"/>
            <javadoc line="7">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="DEAD_END" type="Vset" line="13"/>
            <declaration name="labels" type="Identifier" line="14"/>
            <javadoc line="15">
                Constructor                
            </javadoc>
            <method name="Statement" type="constructor" line="18">
                <params>
                    <param name="op" type="int"/>
                    <param name="where" type="long"/>
                </params>
            </method>
            <declaration name="empty" type="Statement" line="21"/>
            <javadoc line="21">
                An empty statement.  Its costInline is infinite.                
            </javadoc>
            <declaration name="MAXINLINECOST" type="int" line="25"/>
            <javadoc line="25">
                The largest possible interesting inline cost value.                
            </javadoc>
            <javadoc line="29">
                Insert a bit of code at the front of a statement.
                  Side-effect s2, if it is a CompoundStatement.                
            </javadoc>
            <method name="insertStatement" type="Statement" line="33">
                <params>
                    <param name="s1" type="Statement"/>
                    <param name="s2" type="Statement"/>
                </params>
                <scope line="34"/>
                <scope line="37"/>
                <scope line="40">
                    <declaration name="body" type="Statement" line="41"/>
                </scope>
            </method>
            <javadoc line="46">
                Set the label of a statement                
            </javadoc>
            <method name="setLabel" type="void" line="49">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="e" type="Expression"/>
                </params>
                <scope line="50">
                    <scope line="51"/>
                    <scope line="54">
                        <declaration name="newLabels" type="Identifier" line="55"/>
                    </scope>
                </scope>
                <scope line="61"/>
            </method>
            <javadoc line="65">
                Check a statement                
            </javadoc>
            <method name="checkMethod" type="Vset" line="68">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
                <declaration name="mctx" type="CheckContext" line="69"/>
                <scope line="72">
                    <scope line="73"/>
                </scope>
            </method>
            <method name="checkDeclaration" type="Vset" line="80">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="mod" type="int"/>
                    <param name="t" type="Type"/>
                    <param name="exp" type="Hashtable"/>
                </params>
            </method>
            <javadoc line="83">
                Make sure the labels on this statement do not duplicate the
                  labels on any enclosing statement.  Provided as a convenience
                  for subclasses.                
            </javadoc>
            <method name="checkLabel" type="void" line="88">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <scope line="89">
                    <scope line="90">
                        <scope line="91">
                            <scope line="92"/>
                        </scope>
                        <declaration name="destCtx" type="CheckContext" line="97"/>
                        <scope line="98">
                            <scope line="99"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="check" type="Vset" line="106">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
            </method>
            <javadoc line="109">
                This is called in contexts where declarations are valid.                
            </javadoc>
            <method name="checkBlockStatement" type="Vset" line="112">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
            </method>
            <method name="reach" type="Vset" line="115">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="vset" type="Vset"/>
                </params>
                <scope line="116"/>
            </method>
            <javadoc line="122">
                Inline                
            </javadoc>
            <method name="inline" type="Statement" line="125">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <javadoc line="128">
                Eliminate this statement, which is only possible if it has no label.                
            </javadoc>
            <method name="eliminate" type="Statement" line="131">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="s" type="Statement"/>
                </params>
                <scope line="132">
                    <declaration name="args" type="Statement" line="133"/>
                </scope>
            </method>
            <javadoc line="139">
                Code                
            </javadoc>
            <method name="code" type="void" line="142">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
            </method>
            <javadoc line="145">
                Generate the code to call all finally&apos;s for a break, continue, or
                  return statement.  We must call &quot;jsr&quot; on all the cleanup code between
                  the current context &quot;ctx&quot;, and the destination context &quot;stopctx&quot;.
                  If &apos;save&apos; isn&apos;t null, there is also a value on the top of the stack                
            </javadoc>
            <method name="codeFinally" type="void" line="151">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                    <param name="stopctx" type="Context"/>
                    <param name="save" type="Type"/>
                </params>
                <declaration name="num" type="Integer" line="152"/>
                <declaration name="haveCleanup" type="boolean" line="153"/>
                <declaration name="haveNonLocalFinally" type="boolean" line="154"/>
                <scope line="155">
                    <scope line="157"/>
                    <scope line="160">
                        <declaration name="st" type="FinallyStatement" line="162"/>
                        <scope line="163"/>
                    </scope>
                </scope>
                <scope line="169"/>
                <scope line="172">
                    <declaration name="def" type="ClassDefinition" line="173"/>
                    <scope line="174">
                        <declaration name="lf" type="LocalMember" line="175"/>
                    </scope>
                    <scope line="179"/>
                </scope>
                <scope line="193">
                    <scope line="195"/>
                    <scope line="198">
                        <declaration name="st" type="FinallyStatement" line="199"/>
                        <declaration name="label" type="Label" line="200"/>
                        <scope line="201"/>
                        <scope line="204"/>
                    </scope>
                </scope>
                <scope line="210"/>
            </method>
            <method name="hasLabel" type="boolean" line="214">
                <params>
                    <param name="lbl" type="Identifier"/>
                </params>
                <declaration name="labels" type="Identifier" line="215"/>
                <scope line="216">
                    <scope line="217">
                        <scope line="218"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="225">
                Check if the first thing is a constructor invocation                
            </javadoc>
            <method name="firstConstructor" type="Expression" line="228"/>
            <javadoc line="231">
                Create a copy of the statement for method inlining                
            </javadoc>
            <method name="copyInline" type="Statement" line="234">
                <params>
                    <param name="ctx" type="Context"/>
                    <param name="valNeeded" type="boolean"/>
                </params>
            </method>
            <method name="costInline" type="int" line="237">
                <params>
                    <param name="thresh" type="int"/>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <javadoc line="240">
                Print                
            </javadoc>
            <method name="printIndent" type="void" line="243">
                <params>
                    <param name="out" type="PrintStream"/>
                    <param name="indent" type="int"/>
                </params>
                <scope line="244"/>
            </method>
            <method name="print" type="void" line="248">
                <params>
                    <param name="out" type="PrintStream"/>
                    <param name="indent" type="int"/>
                </params>
                <scope line="249"/>
            </method>
            <method name="print" type="void" line="253">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
            </method>
        </class>
    </source>