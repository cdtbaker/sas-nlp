<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="sun.tools.asm.Assembler"/>
        <import package="sun.tools.asm.Label"/>
        <import package="java.io.PrintStream"/>
        <import package="java.util.Hashtable"/>
        <class name="Statement" line="34">
            <extends class="Node"/>
            <comment line="292">
                Return true if the statement has the given label                
            </comment>
            <javadoc line="34">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="DEAD_END" type="Vset" line="41"/>
            <declaration name="labels" type="Identifier" line="42"/>
            <javadoc line="44">
                Constructor                
            </javadoc>
            <method name="Statement" type="constructor" line="47">
                <params>
                    <param name="op" type="int"/>
                    <param name="where" type="long"/>
                </params>
            </method>
            <declaration name="empty" type="Statement" line="51"/>
            <javadoc line="51">
                An empty statement.  Its costInline is infinite.                
            </javadoc>
            <declaration name="MAXINLINECOST" type="int" line="56"/>
            <javadoc line="56">
                The largest possible interesting inline cost value.                
            </javadoc>
            <javadoc line="63">
                Insert a bit of code at the front of a statement.
                  Side-effect s2, if it is a CompoundStatement.                
            </javadoc>
            <method name="insertStatement" type="Statement" line="67">
                <params>
                    <param name="s1" type="Statement"/>
                    <param name="s2" type="Statement"/>
                </params>
                <comment line="72">
                    Do not add another level of block nesting.                    
                </comment>
                <scope line="68"/>
                <scope line="70"/>
                <scope line="73">
                    <declaration name="body" type="Statement" line="74"/>
                </scope>
            </method>
            <javadoc line="80">
                Set the label of a statement                
            </javadoc>
            <method name="setLabel" type="void" line="83">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="e" type="Expression"/>
                </params>
                <comment line="89">
                    this should almost never happen.  Multiple labels on
                     the same statement.  But handle it gracefully.                    
                </comment>
                <scope line="84">
                    <scope line="85"/>
                    <scope line="87">
                        <declaration name="newLabels" type="Identifier" line="90"/>
                    </scope>
                </scope>
                <scope line="95"/>
            </method>
            <javadoc line="100">
                Check a statement                
            </javadoc>
            <method name="checkMethod" type="Vset" line="103">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
                <comment line="105">
                    Set up ctx.getReturnContext() for the sake of ReturnStatement.check().                    
                </comment>
                <comment line="111">
                    Check for return                    
                </comment>
                <comment line="113">
                    In general, we suppress further error messages due to
                     unreachable statements after reporting the first error
                     along a flow path (using &apos;clearDeadEnd&apos;).   Here, we
                     report an error anyway, because the end of the method
                     should be unreachable despite the earlier error.  The
                     difference in treatment is due to the fact that, in this
                     case, the error is reachability, not unreachability.
                     NOTE: In addition to this subtle difference in the quality
                     of the error diagnostics, this treatment is essential to
                     preserve the correctness of using &apos;clearDeadEnd&apos; to implement
                     the special-case reachability rules for if-then and if-then-else.                    
                </comment>
                <comment line="129">
                    Simulate a return at the end.                    
                </comment>
                <declaration name="mctx" type="CheckContext" line="105"/>
                <scope line="111">
                    <scope line="123"/>
                </scope>
            </method>
            <method name="checkDeclaration" type="Vset" line="133">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="mod" type="int"/>
                    <param name="t" type="Type"/>
                    <param name="exp" type="Hashtable"/>
                </params>
            </method>
            <javadoc line="137">
                Make sure the labels on this statement do not duplicate the
                  labels on any enclosing statement.  Provided as a convenience
                  for subclasses.                
            </javadoc>
            <method name="checkLabel" type="void" line="142">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <comment line="146">
                    Make sure there is not a double label on this statement.                    
                </comment>
                <comment line="154">
                    Make sure no enclosing statement has the same label.                    
                </comment>
                <comment line="159">
                    Check to make sure the label is in not uplevel.                    
                </comment>
                <comment line="164">
                    end loop                    
                </comment>
                <scope line="143">
                    <scope line="144">
                        <scope line="146">
                            <scope line="147"/>
                        </scope>
                        <declaration name="destCtx" type="CheckContext" line="154"/>
                        <scope line="157">
                            <scope line="159"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="check" type="Vset" line="167">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
            </method>
            <javadoc line="171">
                This is called in contexts where declarations are valid.                
            </javadoc>
            <method name="checkBlockStatement" type="Vset" line="172">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
            </method>
            <method name="reach" type="Vset" line="176">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="vset" type="Vset"/>
                </params>
                <scope line="177"/>
            </method>
            <javadoc line="184">
                Inline                
            </javadoc>
            <method name="inline" type="Statement" line="187">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <javadoc line="191">
                Eliminate this statement, which is only possible if it has no label.                
            </javadoc>
            <method name="eliminate" type="Statement" line="194">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="s" type="Statement"/>
                </params>
                <scope line="195">
                    <declaration name="args" type="Statement" line="196"/>
                </scope>
            </method>
            <javadoc line="204">
                Code                
            </javadoc>
            <method name="code" type="void" line="207">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
            </method>
            <javadoc line="211">
                Generate the code to call all finally&apos;s for a break, continue, or
                  return statement.  We must call &quot;jsr&quot; on all the cleanup code between
                  the current context &quot;ctx&quot;, and the destination context &quot;stopctx&quot;.
                  If &apos;save&apos; isn&apos;t null, there is also a value on the top of the stack                
            </javadoc>
            <method name="codeFinally" type="void" line="218">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                    <param name="stopctx" type="Context"/>
                    <param name="save" type="Type"/>
                </params>
                <comment line="221">
                    there is a finally or synchronize;                    
                </comment>
                <comment line="222">
                    some finally doesn&apos;t return;                    
                </comment>
                <comment line="231">
                    c.contLabel == null indicates we&apos;re in the &quot;finally&quot; part                    
                </comment>
                <comment line="236">
                    after hitting a non-local finally, no need generating
                     further code, because it won&apos;t get executed.                    
                </comment>
                <comment line="243">
                    there is no cleanup that needs to be done.  Just quit.                    
                </comment>
                <comment line="247">
                    This statement has a return value on the stack.                    
                </comment>
                <comment line="250">
                    Save the return value in the register which should have
                     been reserved.                    
                </comment>
                <comment line="256">
                    Pop the return value.                    
                </comment>
                <comment line="267">
                    Call each of the cleanup functions, as necessary.                    
                </comment>
                <comment line="280">
                    the code never returns, so we&apos;re done.                    
                </comment>
                <comment line="286">
                    Move the return value from the register back to the stack.                    
                </comment>
                <declaration name="num" type="Integer" line="219"/>
                <declaration name="haveCleanup" type="boolean" line="220"/>
                <declaration name="haveNonLocalFinally" type="boolean" line="221"/>
                <scope line="223">
                    <scope line="226"/>
                    <scope line="229">
                        <declaration name="st" type="FinallyStatement" line="232"/>
                        <scope line="233"/>
                    </scope>
                </scope>
                <scope line="241"/>
                <scope line="245">
                    <declaration name="def" type="ClassDefinition" line="247"/>
                    <scope line="248">
                        <declaration name="lf" type="LocalMember" line="251"/>
                    </scope>
                    <scope line="254"/>
                </scope>
                <scope line="267">
                    <scope line="270"/>
                    <scope line="273">
                        <declaration name="st" type="FinallyStatement" line="274"/>
                        <declaration name="label" type="Label" line="275"/>
                        <scope line="276"/>
                        <scope line="278"/>
                    </scope>
                </scope>
                <scope line="286"/>
            </method>
            <method name="hasLabel" type="boolean" line="294">
                <params>
                    <param name="lbl" type="Identifier"/>
                </params>
                <declaration name="labels" type="Identifier" line="295"/>
                <scope line="296">
                    <scope line="297">
                        <scope line="298"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="306">
                Check if the first thing is a constructor invocation                
            </javadoc>
            <method name="firstConstructor" type="Expression" line="309"/>
            <javadoc line="313">
                Create a copy of the statement for method inlining                
            </javadoc>
            <method name="copyInline" type="Statement" line="316">
                <params>
                    <param name="ctx" type="Context"/>
                    <param name="valNeeded" type="boolean"/>
                </params>
            </method>
            <method name="costInline" type="int" line="320">
                <params>
                    <param name="thresh" type="int"/>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <javadoc line="325">
                Print                
            </javadoc>
            <method name="printIndent" type="void" line="328">
                <params>
                    <param name="out" type="PrintStream"/>
                    <param name="indent" type="int"/>
                </params>
                <scope line="329"/>
            </method>
            <method name="print" type="void" line="333">
                <params>
                    <param name="out" type="PrintStream"/>
                    <param name="indent" type="int"/>
                </params>
                <scope line="334"/>
            </method>
            <method name="print" type="void" line="339">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
            </method>
        </class>
    </source>