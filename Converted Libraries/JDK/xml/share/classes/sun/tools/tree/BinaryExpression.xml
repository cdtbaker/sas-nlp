<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="sun.tools.asm.Label"/>
        <import package="sun.tools.asm.Assembler"/>
        <import package="java.io.PrintStream"/>
        <import package="java.util.Hashtable"/>
        <class name="BinaryExpression" line="34">
            <extends class="UnaryExpression"/>
            <javadoc line="34">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="left" type="Expression" line="41"/>
            <javadoc line="43">
                Constructor                
            </javadoc>
            <method name="BinaryExpression" type="constructor" line="46">
                <params>
                    <param name="op" type="int"/>
                    <param name="where" type="long"/>
                    <param name="type" type="Type"/>
                    <param name="left" type="Expression"/>
                    <param name="right" type="Expression"/>
                </params>
            </method>
            <javadoc line="51">
                Order the expression based on precedence                
            </javadoc>
            <method name="order" type="Expression" line="54">
                <scope line="55">
                    <declaration name="e" type="UnaryExpression" line="56"/>
                </scope>
            </method>
            <javadoc line="64">
                Check a binary expression                
            </javadoc>
            <method name="checkValue" type="Vset" line="67">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
                <declaration name="tm" type="int" line="71"/>
                <scope line="72"/>
                <scope line="77"/>
            </method>
            <javadoc line="83">
                Check if constant                
            </javadoc>
            <method name="isConstant" type="boolean" line="86"/>
            <javadoc line="111">
                Evaluate                
            </javadoc>
            <method name="eval" type="Expression" line="114">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="117">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="120">
                <params>
                    <param name="a" type="float"/>
                    <param name="b" type="float"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="123">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="126">
                <params>
                    <param name="a" type="boolean"/>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="129">
                <params>
                    <param name="a" type="String"/>
                    <param name="b" type="String"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="132">
                <comment line="134">
                    See also the eval() code in BinaryShiftExpression.java.                    
                </comment>
                <scope line="134"/>
            </method>
            <javadoc line="156">
                Inline                
            </javadoc>
            <method name="inline" type="Expression" line="159">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <method name="inlineValue" type="Expression" line="164">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <comment line="171">
                    Got rid of this error message.  It isn&apos;t illegal to
                     have a program which does a constant division by
                     zero.  We return `this&apos; to make the compiler to
                     generate code here.
                     (bugs 4019304, 4089107).
                    
                     env.error(where, &quot;arithmetic.exception&quot;);                    
                </comment>
                <scope line="167"/>
                <scope line="169"/>
            </method>
            <javadoc line="181">
                Create a copy of the expression for method inlining                
            </javadoc>
            <method name="copyInline" type="Expression" line="184">
                <params>
                    <param name="ctx" type="Context"/>
                </params>
                <declaration name="e" type="BinaryExpression" line="185"/>
                <scope line="186"/>
                <scope line="189"/>
            </method>
            <javadoc line="195">
                The cost of inlining this expression                
            </javadoc>
            <method name="costInline" type="int" line="198">
                <params>
                    <param name="thresh" type="int"/>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <javadoc line="203">
                Code                
            </javadoc>
            <method name="codeOperation" type="void" line="206">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
            </method>
            <method name="codeValue" type="void" line="209">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
                <scope line="210">
                    <declaration name="l1" type="Label" line="211"/>
                    <declaration name="l2" type="Label" line="212"/>
                </scope>
                <scope line="220"/>
            </method>
            <javadoc line="227">
                Print                
            </javadoc>
            <method name="print" type="void" line="230">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
                <scope line="232"/>
                <scope line="234"/>
                <scope line="238"/>
                <scope line="240"/>
            </method>
        </class>
    </source>