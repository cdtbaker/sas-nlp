<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="sun.tools.asm.Label"/>
        <import package="sun.tools.asm.Assembler"/>
        <import package="java.io.PrintStream"/>
        <import package="java.util.Hashtable"/>
        <class name="BinaryExpression" line="7">
            <extends class="UnaryExpression"/>
            <javadoc line="7">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="left" type="Expression" line="13"/>
            <javadoc line="14">
                Constructor                
            </javadoc>
            <method name="BinaryExpression" type="constructor" line="17">
                <params>
                    <param name="op" type="int"/>
                    <param name="where" type="long"/>
                    <param name="type" type="Type"/>
                    <param name="left" type="Expression"/>
                    <param name="right" type="Expression"/>
                </params>
            </method>
            <javadoc line="21">
                Order the expression based on precedence                
            </javadoc>
            <method name="order" type="Expression" line="24">
                <scope line="25">
                    <declaration name="e" type="UnaryExpression" line="26"/>
                </scope>
            </method>
            <javadoc line="33">
                Check a binary expression                
            </javadoc>
            <method name="checkValue" type="Vset" line="36">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
                <declaration name="tm" type="int" line="39"/>
                <scope line="40"/>
                <scope line="44"/>
            </method>
            <javadoc line="49">
                Check if constant                
            </javadoc>
            <method name="isConstant" type="boolean" line="52"/>
            <javadoc line="77">
                Evaluate                
            </javadoc>
            <method name="eval" type="Expression" line="80">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="83">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="86">
                <params>
                    <param name="a" type="float"/>
                    <param name="b" type="float"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="89">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="92">
                <params>
                    <param name="a" type="boolean"/>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="95">
                <params>
                    <param name="a" type="String"/>
                    <param name="b" type="String"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="98">
                <scope line="99"/>
            </method>
            <javadoc line="120">
                Inline                
            </javadoc>
            <method name="inline" type="Expression" line="123">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <method name="inlineValue" type="Expression" line="128">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <scope line="131"/>
                <scope line="134"/>
            </method>
            <javadoc line="138">
                Create a copy of the expression for method inlining                
            </javadoc>
            <method name="copyInline" type="Expression" line="141">
                <params>
                    <param name="ctx" type="Context"/>
                </params>
                <declaration name="e" type="BinaryExpression" line="142"/>
                <scope line="143"/>
                <scope line="146"/>
            </method>
            <javadoc line="151">
                The cost of inlining this expression                
            </javadoc>
            <method name="costInline" type="int" line="154">
                <params>
                    <param name="thresh" type="int"/>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <javadoc line="157">
                Code                
            </javadoc>
            <method name="codeOperation" type="void" line="160">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
            </method>
            <method name="codeValue" type="void" line="163">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
                <scope line="164">
                    <declaration name="l1" type="Label" line="165"/>
                    <declaration name="l2" type="Label" line="166"/>
                </scope>
                <scope line="174"/>
            </method>
            <javadoc line="180">
                Print                
            </javadoc>
            <method name="print" type="void" line="183">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
                <scope line="185"/>
                <scope line="188"/>
                <scope line="192"/>
                <scope line="195"/>
            </method>
        </class>
    </source>