<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="sun.tools.asm.Assembler"/>
        <class name="AssignAddExpression" line="31">
            <extends class="AssignOpExpression"/>
            <javadoc line="31">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <javadoc line="38">
                Constructor                
            </javadoc>
            <method name="AssignAddExpression" type="constructor" line="41">
                <params>
                    <param name="where" type="long"/>
                    <param name="left" type="Expression"/>
                    <param name="right" type="Expression"/>
                </params>
            </method>
            <javadoc line="46">
                The cost of inlining this statement                
            </javadoc>
            <method name="costInline" type="int" line="49">
                <params>
                    <param name="thresh" type="int"/>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <javadoc line="53">
                Code                
            </javadoc>
            <method name="code" type="void" line="56">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                    <param name="valNeeded" type="boolean"/>
                </params>
                <comment line="58">
                    Create code for     String += &lt;value&gt;                    
                </comment>
                <comment line="60">
                    Create new string buffer.                    
                </comment>
                <comment line="67">
                    No access method is needed.                    
                </comment>
                <comment line="71">
                    stack: ...&lt;buffer&gt;&lt;buffer&gt;                    
                </comment>
                <comment line="73">
                    copy past 2 string buffers                    
                </comment>
                <comment line="74">
                    stack: ...[&lt;getter args&gt;]&lt;buffer&gt;&lt;buffer&gt;[&lt;getter args&gt;]                    
                </comment>
                <comment line="75">
                    where &lt;buffer&gt; isn&apos;t yet initialized, and the &lt;getter args&gt;                    
                </comment>
                <comment line="76">
                    has length depth and is whatever is needed to get/set the                    
                </comment>
                <comment line="77">
                    value                    
                </comment>
                <comment line="79">
                    Why is this needed?                    
                </comment>
                <comment line="80">
                    stack: ...[&lt;getter args&gt;]&lt;buffer&gt;&lt;buffer&gt;&lt;string&gt;                    
                </comment>
                <comment line="81">
                    call .&lt;init&gt;(String)                    
                </comment>
                <comment line="87">
                    stack: ...[&lt;getter args&gt;]&lt;initialized buffer&gt;                    
                </comment>
                <comment line="88">
                    .append(value).toString()                    
                </comment>
                <comment line="93">
                    stack: ...[&lt;getter args&gt;]&lt;string&gt;                    
                </comment>
                <comment line="94">
                    dup the string past the &lt;getter args&gt;, if necessary.                    
                </comment>
                <comment line="97">
                    stack: ...&lt;string&gt;[&lt;getter args&gt;]&lt;string&gt;                    
                </comment>
                <comment line="99">
                    store                    
                </comment>
                <comment line="104">
                    Access method is required.                    
                </comment>
                <comment line="105">
                    (Handling this case fixes 4102566.)                    
                </comment>
                <comment line="108">
                    stack: ...[&lt;getter args&gt;]&lt;string&gt;                    
                </comment>
                <comment line="109">
                    Why is this needed?                    
                </comment>
                <comment line="111">
                    stack: ...[&lt;getter args&gt;]&lt;string&gt;&lt;buffer&gt;                    
                </comment>
                <comment line="113">
                    stack: ...[&lt;getter args&gt;]&lt;buffer&gt;&lt;string&gt;&lt;buffer&gt;                    
                </comment>
                <comment line="115">
                    stack: ...[&lt;getter args&gt;]&lt;buffer&gt;&lt;buffer&gt;&lt;string&gt;                    
                </comment>
                <comment line="116">
                    call .&lt;init&gt;(String)                    
                </comment>
                <comment line="122">
                    stack: ...[&lt;getter args&gt;]&lt;initialized buffer&gt;                    
                </comment>
                <comment line="123">
                    .append(value).toString()                    
                </comment>
                <comment line="128">
                    stack: .. [&lt;getter args&gt;]&lt;string&gt;                    
                </comment>
                <scope line="57">
                    <scope line="59">
                        <declaration name="argTypes" type="Type" line="61"/>
                        <declaration name="c" type="ClassDeclaration" line="62"/>
                        <scope line="65">
                            <declaration name="depth" type="int" line="72"/>
                            <declaration name="sourceClass" type="ClassDefinition" line="82"/>
                            <declaration name="f" type="MemberDefinition" line="83"/>
                            <scope line="95"/>
                        </scope>
                        <scope line="102">
                            <declaration name="sourceClass" type="ClassDefinition" line="117"/>
                            <declaration name="f" type="MemberDefinition" line="118"/>
                        </scope>
                    </scope>
                    <scope line="133"/>
                    <scope line="135"/>
                </scope>
                <scope line="138"/>
            </method>
            <javadoc line="143">
                Code                
            </javadoc>
            <method name="codeOperation" type="void" line="146">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
            </method>
        </class>
    </source>