<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="sun.tools.asm.Assembler"/>
        <import package="sun.tools.asm.Label"/>
        <import package="java.io.PrintStream"/>
        <import package="java.util.Hashtable"/>
        <class name="ConditionalExpression" line="34">
            <extends class="BinaryExpression"/>
            <javadoc line="34">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="cond" type="Expression" line="41"/>
            <javadoc line="43">
                Constructor                
            </javadoc>
            <method name="ConditionalExpression" type="constructor" line="46">
                <params>
                    <param name="where" type="long"/>
                    <param name="cond" type="Expression"/>
                    <param name="left" type="Expression"/>
                    <param name="right" type="Expression"/>
                </params>
            </method>
            <javadoc line="51">
                Order the expression based on precedence                
            </javadoc>
            <method name="order" type="Expression" line="54">
                <scope line="55">
                    <declaration name="e" type="UnaryExpression" line="56"/>
                </scope>
            </method>
            <javadoc line="64">
                Check the expression                
            </javadoc>
            <method name="checkValue" type="Vset" line="67">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
                <comment line="88">
                    This is wrong.  We should be using their most common                    
                </comment>
                <comment line="89">
                    ancestor, instead.                    
                </comment>
                <declaration name="cvars" type="ConditionVars" line="68"/>
                <declaration name="tm" type="int" line="73"/>
                <scope line="74"/>
                <scope line="78"/>
                <scope line="80"/>
                <scope line="82"/>
                <scope line="84"/>
                <scope line="86">
                    <scope line="87"/>
                    <scope line="92"/>
                </scope>
                <scope line="95"/>
                <scope line="97"/>
                <scope line="99"/>
                <scope line="101"/>
            </method>
            <method name="check" type="Vset" line="110">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
            </method>
            <javadoc line="116">
                Check if constant                
            </javadoc>
            <method name="isConstant" type="boolean" line="119"/>
            <javadoc line="123">
                Simplify                
            </javadoc>
            <method name="simplify" type="Expression" line="126">
                <scope line="127"/>
                <scope line="130"/>
            </method>
            <javadoc line="136">
                Inline                
            </javadoc>
            <method name="inline" type="Expression" line="139">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <scope line="142"/>
                <scope line="145"/>
            </method>
            <method name="inlineValue" type="Expression" line="154">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <javadoc line="161">
                The cost of inlining this expression                
            </javadoc>
            <method name="costInline" type="int" line="164">
                <params>
                    <param name="thresh" type="int"/>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <comment line="165">
                    We need to check if right is null in case costInline()                    
                </comment>
                <comment line="166">
                    is called after this expression has been inlined.                    
                </comment>
                <comment line="167">
                    This call can happen, for example, in MemberDefinition#cleanup().                    
                </comment>
                <comment line="168">
                    (Fix for 4069861).                    
                </comment>
            </method>
            <javadoc line="175">
                Create a copy of the expression for method inlining                
            </javadoc>
            <method name="copyInline" type="Expression" line="178">
                <params>
                    <param name="ctx" type="Context"/>
                </params>
                <comment line="183">
                    If copyInline() is called after inlining is complete,                    
                </comment>
                <comment line="184">
                    right could be null.                    
                </comment>
                <declaration name="e" type="ConditionalExpression" line="179"/>
            </method>
            <javadoc line="190">
                Code                
            </javadoc>
            <method name="codeValue" type="void" line="193">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
                <declaration name="l1" type="Label" line="194"/>
                <declaration name="l2" type="Label" line="195"/>
            </method>
            <method name="code" type="void" line="204">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
                <declaration name="l1" type="Label" line="205"/>
                <scope line="208">
                    <declaration name="l2" type="Label" line="209"/>
                </scope>
                <scope line="214"/>
            </method>
            <javadoc line="219">
                Print                
            </javadoc>
            <method name="print" type="void" line="222">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
                <scope line="228"/>
                <scope line="230"/>
            </method>
        </class>
    </source>