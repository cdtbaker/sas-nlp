<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="sun.tools.asm.Assembler"/>
        <import package="sun.tools.asm.Label"/>
        <import package="sun.tools.asm.TryData"/>
        <import package="sun.tools.asm.CatchData"/>
        <import package="java.io.PrintStream"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <class name="TryStatement" line="37">
            <extends class="Statement"/>
            <comment line="47">
                private note posted from MethodExpression                
            </comment>
            <javadoc line="37">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="body" type="Statement" line="44"/>
            <declaration name="args" type="Statement" line="45"/>
            <declaration name="arrayCloneWhere" type="long" line="46"/>
            <javadoc line="48">
                Constructor                
            </javadoc>
            <method name="TryStatement" type="constructor" line="51">
                <params>
                    <param name="where" type="long"/>
                    <param name="body" type="Statement"/>
                    <param name="args" type="Statement"/>
                </params>
            </method>
            <javadoc line="57">
                Check statement                
            </javadoc>
            <method name="check" type="Vset" line="60">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
                <comment line="68">
                    Check &apos;try&apos; block.  A variable is DA (DU) before the try
                     block if it is DA (DU) before the try statement.                    
                </comment>
                <comment line="72">
                    A variable is DA before a catch block if it is DA before the
                     try statement.  A variable is DU before a catch block if it
                     is DU after the try block and before any &apos;break&apos;, &apos;continue&apos;,
                     &apos;throw&apos;, or &apos;return&apos; contained therein. That is, the variable
                     is DU upon entry to the try-statement and is not assigned to
                     anywhere within the try block.                    
                </comment>
                <comment line="81">
                    A variable is DA (DU) after a try statement if
                     it is DA (DU) after every catch block.                    
                </comment>
                <comment line="86">
                    Check that catch statements are actually reached                    
                </comment>
                <comment line="112">
                    Make sure the exception is actually throw in that part of the code                    
                </comment>
                <comment line="120">
                    CatchStatement.checkValue() will have already printed
                     an error message                    
                </comment>
                <comment line="127">
                    Anyone can throw these!                    
                </comment>
                <comment line="133">
                    Make sure the exception is actually throw in that part of the code                    
                </comment>
                <comment line="152">
                    Only carry over exceptions that are not caught                    
                </comment>
                <comment line="174">
                    A variable is DA (DU) after a try statement if it is DA (DU)
                     after the try block and after every catch block. These variables
                     are represented by &apos;vs&apos;.  If the try statement is labelled, we
                     may also exit from it (including from within a catch block) via
                     a break statement.
                     If there is a finally block, the Vset returned here is further
                     adjusted. Note that this &apos;TryStatement&apos; node will be a child of
                     a &apos;FinallyStatement&apos; node in that case.                    
                </comment>
                <scope line="62">
                    <declaration name="newexp" type="Hashtable" line="64"/>
                    <declaration name="newctx" type="CheckContext" line="65"/>
                    <declaration name="vs" type="Vset" line="69"/>
                    <declaration name="cvs" type="Vset" line="77"/>
                    <scope line="79"/>
                    <scope line="86">
                        <declaration name="cs" type="CatchStatement" line="87"/>
                        <scope line="88"/>
                        <declaration name="type" type="Type" line="91"/>
                        <declaration name="def" type="ClassDefinition" line="92"/>
                        <scope line="94">
                            <declaration name="cs2" type="CatchStatement" line="95"/>
                            <scope line="96"/>
                            <declaration name="t" type="Type" line="99"/>
                            <declaration name="c" type="ClassDeclaration" line="100"/>
                            <scope line="101"/>
                        </scope>
                    </scope>
                    <declaration name="ignore1" type="ClassDeclaration" line="108"/>
                    <declaration name="ignore2" type="ClassDeclaration" line="109"/>
                    <scope line="112">
                        <declaration name="cs" type="CatchStatement" line="113"/>
                        <scope line="114"/>
                        <declaration name="type" type="Type" line="117"/>
                        <scope line="118"/>
                        <declaration name="def" type="ClassDefinition" line="124"/>
                        <scope line="128"/>
                        <declaration name="ok" type="boolean" line="133"/>
                        <scope line="134">
                            <declaration name="c" type="ClassDeclaration" line="135"/>
                            <scope line="136"/>
                        </scope>
                        <scope line="142"/>
                        <scope line="146"/>
                    </scope>
                    <scope line="152">
                        <declaration name="c" type="ClassDeclaration" line="153"/>
                        <declaration name="def" type="ClassDefinition" line="154"/>
                        <declaration name="add" type="boolean" line="155"/>
                        <scope line="156">
                            <declaration name="cs" type="CatchStatement" line="157"/>
                            <scope line="158"/>
                            <declaration name="type" type="Type" line="161"/>
                            <scope line="164"/>
                        </scope>
                        <scope line="169"/>
                    </scope>
                </scope>
                <scope line="182"/>
            </method>
            <javadoc line="188">
                Inline                
            </javadoc>
            <method name="inline" type="Statement" line="191">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <scope line="192"/>
                <scope line="195"/>
                <scope line="198">
                    <scope line="199"/>
                </scope>
            </method>
            <javadoc line="206">
                Create a copy of the statement for method inlining                
            </javadoc>
            <method name="copyInline" type="Statement" line="209">
                <params>
                    <param name="ctx" type="Context"/>
                    <param name="valNeeded" type="boolean"/>
                </params>
                <declaration name="s" type="TryStatement" line="210"/>
                <scope line="211"/>
                <scope line="215">
                    <scope line="216"/>
                </scope>
            </method>
            <javadoc line="223">
                Compute cost of inlining this statement                
            </javadoc>
            <method name="costInline" type="int" line="226">
                <params>
                    <param name="thresh" type="int"/>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <comment line="229">
                    Don&apos;t inline methods containing try statements.
                     If the try statement is being inlined in order to
                     inline a method that returns a value which is
                     a subexpression of an expression involving the
                     operand stack, then the early operands may get lost.
                     This shows up as a verifier error.  For example,
                     in the following:
                    
                        public static int test() {
                           try { return 2; } catch (Exception e)  { return 0; }
                        }
                    
                        System.out.println(test());
                    
                     an inlined call to test() might look like this:
                    
                         0 getstatic &lt;Field java.io.PrintStream out&gt;
                         3 iconst_2
                         4 goto 9
                         7 pop
                         8 iconst_0
                         9 invokevirtual &lt;Method void println(int)&gt;
                        12 return
                      Exception table:
                         from   to  target type
                           3     7     7   &lt;Class java.lang.Exception&gt;
                    
                     This fails to verify because the operand stored
                     for System.out gets axed at an exception, leading to
                     an inconsistent stack depth at pc=7.
                    
                     Note that although all code must be able to be inlined
                     to implement initializers, this problem doesn&apos;t come up,
                     as try statements themselves can never be expressions.
                     It suffices here to make sure they are never inlined as part
                     of optimization.                    
                </comment>
            </method>
            <javadoc line="268">
                Code                
            </javadoc>
            <method name="code" type="void" line="271">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
                <declaration name="newctx" type="CodeContext" line="272"/>
                <declaration name="td" type="TryData" line="274"/>
                <scope line="275">
                    <declaration name="t" type="Type" line="276"/>
                    <scope line="277"/>
                    <scope line="279"/>
                </scope>
                <scope line="284"/>
                <scope line="291">
                    <declaration name="cd" type="CatchData" line="292"/>
                </scope>
            </method>
            <javadoc line="301">
                Print                
            </javadoc>
            <method name="print" type="void" line="304">
                <params>
                    <param name="out" type="PrintStream"/>
                    <param name="indent" type="int"/>
                </params>
                <scope line="307"/>
                <scope line="309"/>
                <scope line="312"/>
            </method>
        </class>
    </source>