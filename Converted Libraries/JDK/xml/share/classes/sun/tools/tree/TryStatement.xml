<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="sun.tools.asm.Assembler"/>
        <import package="sun.tools.asm.Label"/>
        <import package="sun.tools.asm.TryData"/>
        <import package="sun.tools.asm.CatchData"/>
        <import package="java.io.PrintStream"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <class name="TryStatement" line="37">
            <extends class="Statement"/>
            <comment line="47">
                private note posted from MethodExpression                
            </comment>
            <javadoc line="37">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="body" type="Statement" line="44"/>
            <declaration name="args" type="Statement" line="45"/>
            <declaration name="arrayCloneWhere" type="long" line="46"/>
            <javadoc line="48">
                Constructor                
            </javadoc>
            <method name="TryStatement" type="constructor" line="51">
                <params>
                    <param name="where" type="long"/>
                    <param name="body" type="Statement"/>
                    <param name="args" type="Statement"/>
                </params>
            </method>
            <javadoc line="57">
                Check statement                
            </javadoc>
            <method name="check" type="Vset" line="60">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
                <comment line="67">
                    Check &apos;try&apos; block.  A variable is DA (DU) before the try                    
                </comment>
                <comment line="68">
                    block if it is DA (DU) before the try statement.                    
                </comment>
                <comment line="71">
                    A variable is DA before a catch block if it is DA before the                    
                </comment>
                <comment line="72">
                    try statement.  A variable is DU before a catch block if it                    
                </comment>
                <comment line="73">
                    is DU after the try block and before any &apos;break&apos;, &apos;continue&apos;,                    
                </comment>
                <comment line="74">
                    &apos;throw&apos;, or &apos;return&apos; contained therein. That is, the variable                    
                </comment>
                <comment line="75">
                    is DU upon entry to the try-statement and is not assigned to                    
                </comment>
                <comment line="76">
                    anywhere within the try block.                    
                </comment>
                <comment line="80">
                    A variable is DA (DU) after a try statement if                    
                </comment>
                <comment line="81">
                    it is DA (DU) after every catch block.                    
                </comment>
                <comment line="85">
                    Check that catch statements are actually reached                    
                </comment>
                <comment line="111">
                    Make sure the exception is actually throw in that part of the code                    
                </comment>
                <comment line="119">
                    CatchStatement.checkValue() will have already printed                    
                </comment>
                <comment line="120">
                    an error message                    
                </comment>
                <comment line="126">
                    Anyone can throw these!                    
                </comment>
                <comment line="132">
                    Make sure the exception is actually throw in that part of the code                    
                </comment>
                <comment line="151">
                    Only carry over exceptions that are not caught                    
                </comment>
                <comment line="173">
                    A variable is DA (DU) after a try statement if it is DA (DU)                    
                </comment>
                <comment line="174">
                    after the try block and after every catch block. These variables                    
                </comment>
                <comment line="175">
                    are represented by &apos;vs&apos;.  If the try statement is labelled, we                    
                </comment>
                <comment line="176">
                    may also exit from it (including from within a catch block) via                    
                </comment>
                <comment line="177">
                    a break statement.                    
                </comment>
                <comment line="178">
                    If there is a finally block, the Vset returned here is further                    
                </comment>
                <comment line="179">
                    adjusted. Note that this &apos;TryStatement&apos; node will be a child of                    
                </comment>
                <comment line="180">
                    a &apos;FinallyStatement&apos; node in that case.                    
                </comment>
                <scope line="62">
                    <declaration name="newexp" type="Hashtable" line="64"/>
                    <declaration name="newctx" type="CheckContext" line="65"/>
                    <declaration name="vs" type="Vset" line="69"/>
                    <declaration name="cvs" type="Vset" line="77"/>
                    <scope line="79"/>
                    <scope line="86">
                        <declaration name="cs" type="CatchStatement" line="87"/>
                        <scope line="88"/>
                        <declaration name="type" type="Type" line="91"/>
                        <declaration name="def" type="ClassDefinition" line="92"/>
                        <scope line="94">
                            <declaration name="cs2" type="CatchStatement" line="95"/>
                            <scope line="96"/>
                            <declaration name="t" type="Type" line="99"/>
                            <declaration name="c" type="ClassDeclaration" line="100"/>
                            <scope line="101"/>
                        </scope>
                    </scope>
                    <declaration name="ignore1" type="ClassDeclaration" line="108"/>
                    <declaration name="ignore2" type="ClassDeclaration" line="109"/>
                    <scope line="112">
                        <declaration name="cs" type="CatchStatement" line="113"/>
                        <scope line="114"/>
                        <declaration name="type" type="Type" line="117"/>
                        <scope line="118"/>
                        <declaration name="def" type="ClassDefinition" line="124"/>
                        <scope line="128"/>
                        <declaration name="ok" type="boolean" line="133"/>
                        <scope line="134">
                            <declaration name="c" type="ClassDeclaration" line="135"/>
                            <scope line="136"/>
                        </scope>
                        <scope line="142"/>
                        <scope line="146"/>
                    </scope>
                    <scope line="152">
                        <declaration name="c" type="ClassDeclaration" line="153"/>
                        <declaration name="def" type="ClassDefinition" line="154"/>
                        <declaration name="add" type="boolean" line="155"/>
                        <scope line="156">
                            <declaration name="cs" type="CatchStatement" line="157"/>
                            <scope line="158"/>
                            <declaration name="type" type="Type" line="161"/>
                            <scope line="164"/>
                        </scope>
                        <scope line="169"/>
                    </scope>
                </scope>
                <scope line="182"/>
            </method>
            <javadoc line="188">
                Inline                
            </javadoc>
            <method name="inline" type="Statement" line="191">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <scope line="192"/>
                <scope line="195"/>
                <scope line="198">
                    <scope line="199"/>
                </scope>
            </method>
            <javadoc line="206">
                Create a copy of the statement for method inlining                
            </javadoc>
            <method name="copyInline" type="Statement" line="209">
                <params>
                    <param name="ctx" type="Context"/>
                    <param name="valNeeded" type="boolean"/>
                </params>
                <declaration name="s" type="TryStatement" line="210"/>
                <scope line="211"/>
                <scope line="215">
                    <scope line="216"/>
                </scope>
            </method>
            <javadoc line="223">
                Compute cost of inlining this statement                
            </javadoc>
            <method name="costInline" type="int" line="226">
                <params>
                    <param name="thresh" type="int"/>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <comment line="228">
                    Don&apos;t inline methods containing try statements.                    
                </comment>
                <comment line="229">
                    If the try statement is being inlined in order to                    
                </comment>
                <comment line="230">
                    inline a method that returns a value which is                    
                </comment>
                <comment line="231">
                    a subexpression of an expression involving the                    
                </comment>
                <comment line="232">
                    operand stack, then the early operands may get lost.                    
                </comment>
                <comment line="233">
                    This shows up as a verifier error.  For example,                    
                </comment>
                <comment line="234">
                    in the following:                    
                </comment>
                <comment line="235">
                                        
                </comment>
                <comment line="236">
                    public static int test() {                    
                </comment>
                <comment line="237">
                    try { return 2; } catch (Exception e)  { return 0; }                    
                </comment>
                <comment line="238">
                    }                    
                </comment>
                <comment line="239">
                                        
                </comment>
                <comment line="240">
                    System.out.println(test());                    
                </comment>
                <comment line="241">
                                        
                </comment>
                <comment line="242">
                    an inlined call to test() might look like this:                    
                </comment>
                <comment line="243">
                                        
                </comment>
                <comment line="244">
                    0 getstatic &lt;Field java.io.PrintStream out&gt;                    
                </comment>
                <comment line="245">
                    3 iconst_2                    
                </comment>
                <comment line="246">
                    4 goto 9                    
                </comment>
                <comment line="247">
                    7 pop                    
                </comment>
                <comment line="248">
                    8 iconst_0                    
                </comment>
                <comment line="249">
                    9 invokevirtual &lt;Method void println(int)&gt;                    
                </comment>
                <comment line="250">
                    12 return                    
                </comment>
                <comment line="251">
                    Exception table:                    
                </comment>
                <comment line="252">
                    from   to  target type                    
                </comment>
                <comment line="253">
                    3     7     7   &lt;Class java.lang.Exception&gt;                    
                </comment>
                <comment line="254">
                                        
                </comment>
                <comment line="255">
                    This fails to verify because the operand stored                    
                </comment>
                <comment line="256">
                    for System.out gets axed at an exception, leading to                    
                </comment>
                <comment line="257">
                    an inconsistent stack depth at pc=7.                    
                </comment>
                <comment line="258">
                                        
                </comment>
                <comment line="259">
                    Note that although all code must be able to be inlined                    
                </comment>
                <comment line="260">
                    to implement initializers, this problem doesn&apos;t come up,                    
                </comment>
                <comment line="261">
                    as try statements themselves can never be expressions.                    
                </comment>
                <comment line="262">
                    It suffices here to make sure they are never inlined as part                    
                </comment>
                <comment line="263">
                    of optimization.                    
                </comment>
            </method>
            <javadoc line="268">
                Code                
            </javadoc>
            <method name="code" type="void" line="271">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
                <declaration name="newctx" type="CodeContext" line="272"/>
                <declaration name="td" type="TryData" line="274"/>
                <scope line="275">
                    <declaration name="t" type="Type" line="276"/>
                    <scope line="277"/>
                    <scope line="279"/>
                </scope>
                <scope line="284"/>
                <scope line="291">
                    <declaration name="cd" type="CatchData" line="292"/>
                </scope>
            </method>
            <javadoc line="301">
                Print                
            </javadoc>
            <method name="print" type="void" line="304">
                <params>
                    <param name="out" type="PrintStream"/>
                    <param name="indent" type="int"/>
                </params>
                <scope line="307"/>
                <scope line="309"/>
                <scope line="312"/>
            </method>
        </class>
    </source>