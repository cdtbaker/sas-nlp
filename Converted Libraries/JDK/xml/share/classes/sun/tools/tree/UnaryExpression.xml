<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="java.io.PrintStream"/>
        <import package="java.util.Hashtable"/>
        <class name="UnaryExpression" line="32">
            <extends class="Expression"/>
            <javadoc line="32">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="right" type="Expression" line="39"/>
            <javadoc line="41">
                Constructor                
            </javadoc>
            <method name="UnaryExpression" type="constructor" line="44">
                <params>
                    <param name="op" type="int"/>
                    <param name="where" type="long"/>
                    <param name="type" type="Type"/>
                    <param name="right" type="Expression"/>
                </params>
            </method>
            <javadoc line="49">
                Order the expression based on precedence                
            </javadoc>
            <method name="order" type="Expression" line="52">
                <scope line="53">
                    <declaration name="e" type="UnaryExpression" line="54"/>
                </scope>
            </method>
            <javadoc line="62">
                Select the type of the expression                
            </javadoc>
            <method name="selectType" type="void" line="65">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="tm" type="int"/>
                </params>
            </method>
            <javadoc line="69">
                Check a unary expression                
            </javadoc>
            <method name="checkValue" type="Vset" line="72">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
                <declaration name="tm" type="int" line="75"/>
                <scope line="77"/>
            </method>
            <javadoc line="83">
                Check if constant                
            </javadoc>
            <method name="isConstant" type="boolean" line="86">
                <comment line="93">
                    generated inside of CastExpression                    
                </comment>
            </method>
            <javadoc line="99">
                Evaluate                
            </javadoc>
            <method name="eval" type="Expression" line="102">
                <params>
                    <param name="a" type="int"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="105">
                <params>
                    <param name="a" type="long"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="108">
                <params>
                    <param name="a" type="float"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="111">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="114">
                <params>
                    <param name="a" type="boolean"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="117">
                <params>
                    <param name="a" type="String"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="120"/>
            <javadoc line="141">
                Inline                
            </javadoc>
            <method name="inline" type="Expression" line="144">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <method name="inlineValue" type="Expression" line="147">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <comment line="152">
                    Got rid of this error message.  It isn&apos;t illegal to                    
                </comment>
                <comment line="153">
                    have a program which does a constant division by                    
                </comment>
                <comment line="154">
                    zero.  We return `this&apos; to make the compiler to                    
                </comment>
                <comment line="155">
                    generate code here.                    
                </comment>
                <comment line="156">
                    (bugs 4019304, 4089107).                    
                </comment>
                <comment line="157">
                                        
                </comment>
                <comment line="158">
                    I am not positive that this catch is ever reached.                    
                </comment>
                <comment line="159">
                                        
                </comment>
                <comment line="160">
                    env.error(where, &quot;arithmetic.exception&quot;);                    
                </comment>
                <scope line="149"/>
                <scope line="151"/>
            </method>
            <javadoc line="165">
                Create a copy of the expression for method inlining                
            </javadoc>
            <method name="copyInline" type="Expression" line="168">
                <params>
                    <param name="ctx" type="Context"/>
                </params>
                <declaration name="e" type="UnaryExpression" line="169"/>
                <scope line="170"/>
            </method>
            <javadoc line="176">
                The cost of inlining this expression                
            </javadoc>
            <method name="costInline" type="int" line="179">
                <params>
                    <param name="thresh" type="int"/>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <javadoc line="183">
                Print                
            </javadoc>
            <method name="print" type="void" line="186">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
            </method>
        </class>
    </source>