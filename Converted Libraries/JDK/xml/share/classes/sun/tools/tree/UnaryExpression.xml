<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="java.io.PrintStream"/>
        <import package="java.util.Hashtable"/>
        <class name="UnaryExpression" line="5">
            <extends class="Expression"/>
            <javadoc line="5">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="right" type="Expression" line="11"/>
            <javadoc line="12">
                Constructor                
            </javadoc>
            <method name="UnaryExpression" type="constructor" line="15">
                <params>
                    <param name="op" type="int"/>
                    <param name="where" type="long"/>
                    <param name="type" type="Type"/>
                    <param name="right" type="Expression"/>
                </params>
            </method>
            <javadoc line="19">
                Order the expression based on precedence                
            </javadoc>
            <method name="order" type="Expression" line="22">
                <scope line="23">
                    <declaration name="e" type="UnaryExpression" line="24"/>
                </scope>
            </method>
            <javadoc line="31">
                Select the type of the expression                
            </javadoc>
            <method name="selectType" type="void" line="34">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="tm" type="int"/>
                </params>
            </method>
            <javadoc line="37">
                Check a unary expression                
            </javadoc>
            <method name="checkValue" type="Vset" line="40">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
                <declaration name="tm" type="int" line="42"/>
                <scope line="44"/>
            </method>
            <javadoc line="49">
                Check if constant                
            </javadoc>
            <method name="isConstant" type="boolean" line="52"/>
            <javadoc line="64">
                Evaluate                
            </javadoc>
            <method name="eval" type="Expression" line="67">
                <params>
                    <param name="a" type="int"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="70">
                <params>
                    <param name="a" type="long"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="73">
                <params>
                    <param name="a" type="float"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="76">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="79">
                <params>
                    <param name="a" type="boolean"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="82">
                <params>
                    <param name="a" type="String"/>
                </params>
            </method>
            <method name="eval" type="Expression" line="85"/>
            <javadoc line="105">
                Inline                
            </javadoc>
            <method name="inline" type="Expression" line="108">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <method name="inlineValue" type="Expression" line="111">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <scope line="113"/>
                <scope line="116"/>
            </method>
            <javadoc line="120">
                Create a copy of the expression for method inlining                
            </javadoc>
            <method name="copyInline" type="Expression" line="123">
                <params>
                    <param name="ctx" type="Context"/>
                </params>
                <declaration name="e" type="UnaryExpression" line="124"/>
                <scope line="125"/>
            </method>
            <javadoc line="130">
                The cost of inlining this expression                
            </javadoc>
            <method name="costInline" type="int" line="133">
                <params>
                    <param name="thresh" type="int"/>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <javadoc line="136">
                Print                
            </javadoc>
            <method name="print" type="void" line="139">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
            </method>
        </class>
    </source>