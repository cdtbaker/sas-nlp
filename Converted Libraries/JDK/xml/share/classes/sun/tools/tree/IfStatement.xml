<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="sun.tools.asm.Assembler"/>
        <import package="sun.tools.asm.Label"/>
        <import package="java.io.PrintStream"/>
        <import package="java.util.Hashtable"/>
        <class name="IfStatement" line="34">
            <extends class="Statement"/>
            <javadoc line="34">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="cond" type="Expression" line="41"/>
            <declaration name="ifTrue" type="Statement" line="42"/>
            <declaration name="ifFalse" type="Statement" line="43"/>
            <javadoc line="45">
                Constructor                
            </javadoc>
            <method name="IfStatement" type="constructor" line="48">
                <params>
                    <param name="where" type="long"/>
                    <param name="cond" type="Expression"/>
                    <param name="ifTrue" type="Statement"/>
                    <param name="ifFalse" type="Statement"/>
                </params>
            </method>
            <javadoc line="55">
                Check statement                
            </javadoc>
            <method name="check" type="Vset" line="58">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
                <comment line="62">
                    Vset vsExtra = vset.copy();  // See comment below.                    
                </comment>
                <comment line="66">
                    The following code, now deleted, was apparently an erroneous attempt
                     at providing better error diagnostics.  The comment read: &apos;If either
                     the true clause or the false clause is unreachable, do a reasonable
                     check on the child anyway.&apos;
                        Vset vsTrue  = cvars.vsTrue.isDeadEnd() ? vsExtra : cvars.vsTrue;
                        Vset vsFalse = cvars.vsFalse.isDeadEnd() ? vsExtra : cvars.vsFalse;
                     Unfortunately, this violates the rules laid out in the JLS, and leads to
                     blatantly incorrect results.  For example, &apos;i&apos; will not be recognized
                     as definitely assigned following the statement &apos;if (true) i = 1;&apos;.
                     It is best to slavishly follow the JLS here.  A cleverer approach could
                     only correctly issue warnings, as JLS 16.2.6 is quite explicit, and it
                     is OK for a dead branch of an if-statement to omit an assignment that
                     would be required in the other branch.  A complication: This code also
                     had the effect of implementing the special-case rules for &apos;if-then&apos; and
                     &apos;if-then-else&apos; in JLS 14.19, &quot;Unreachable Statements&quot;.  We now use
                     &apos;Vset.clearDeadEnd&apos; to remove the dead-end status of unreachable branches
                     without affecting the definite-assignment status of the variables, thus
                     maintaining a correct implementation of JLS 16.2.6.  Fixes 4094353.
                     Note that the code below will not consider the branches unreachable if
                     the entire statement is unreachable.  This is consistent with the error
                     recovery policy that reports the only the first unreachable statement
                     along an acyclic execution path.                    
                </comment>
                <declaration name="newctx" type="CheckContext" line="60"/>
                <declaration name="cvars" type="ConditionVars" line="62"/>
                <declaration name="vsTrue" type="Vset" line="87"/>
                <declaration name="vsFalse" type="Vset" line="88"/>
            </method>
            <javadoc line="96">
                Inline                
            </javadoc>
            <method name="inline" type="Statement" line="99">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <comment line="104">
                    The compiler currently needs to perform inlining on both
                     branches of the if statement -- even if `cond&apos; is a constant
                     true or false.  Why?  The compiler will later try to compile
                     all classes that it has seen; this includes classes that
                     appear in dead code.  If we don&apos;t inline the dead branch here
                     then the compiler will never perform inlining on any local
                     classes appearing on the dead code.  When the compiler tries
                     to compile an un-inlined local class with uplevel references,
                     it dies.  (bug 4059492)
                    
                     A better solution to this would be to walk the dead branch and
                     mark any local classes appearing therein as unneeded.  Then the
                     compilation phase could skip these classes.                    
                </comment>
                <scope line="116"/>
                <scope line="119"/>
                <scope line="122"/>
                <scope line="125"/>
                <scope line="128"/>
                <scope line="131"/>
            </method>
            <javadoc line="138">
                Create a copy of the statement for method inlining                
            </javadoc>
            <method name="copyInline" type="Statement" line="141">
                <params>
                    <param name="ctx" type="Context"/>
                    <param name="valNeeded" type="boolean"/>
                </params>
                <declaration name="s" type="IfStatement" line="142"/>
                <scope line="144"/>
                <scope line="147"/>
            </method>
            <javadoc line="153">
                The cost of inlining this statement                
            </javadoc>
            <method name="costInline" type="int" line="156">
                <params>
                    <param name="thresh" type="int"/>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <declaration name="cost" type="int" line="157"/>
                <scope line="158"/>
                <scope line="161"/>
            </method>
            <javadoc line="167">
                Code                
            </javadoc>
            <method name="code" type="void" line="170">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
                <declaration name="newctx" type="CodeContext" line="171"/>
                <declaration name="l1" type="Label" line="173"/>
                <scope line="176">
                    <declaration name="l2" type="Label" line="177"/>
                </scope>
                <scope line="182"/>
            </method>
            <javadoc line="189">
                Print                
            </javadoc>
            <method name="print" type="void" line="192">
                <params>
                    <param name="out" type="PrintStream"/>
                    <param name="indent" type="int"/>
                </params>
                <scope line="198"/>
            </method>
        </class>
    </source>