<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="sun.tools.asm.Assembler"/>
        <import package="sun.tools.asm.LocalVariable"/>
        <import package="java.io.PrintStream"/>
        <import package="java.util.Hashtable"/>
        <class name="IdentifierExpression" line="34">
            <extends class="Expression"/>
            <comment line="368">
                Convert an expresion to a type in a context where a qualified
                 type name is expected, e.g., in the prefix of a qualified type
                 name. We do not necessarily know where the package prefix ends,
                 so we operate similarly to &apos;checkAmbiguousName&apos;.  This is the
                 base case -- the first component of the qualified name.                
            </comment>
            <comment line="375">
                -------------------------------------------------------
                Type toQualifiedType(Environment env, Context ctx) {
                 We do not look for non-type fields.  Is this correct?
                ClassDefinition c = toResolvedType(env, ctx, true);
                 Is it a real type?
                if (c != null) {
                return c.getType();
                }
                 We hope it is a package prefix.  Let the caller decide.
                return Type.tPackage;
                }                
            </comment>
            <javadoc line="34">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="id" type="Identifier" line="41"/>
            <declaration name="field" type="MemberDefinition" line="42"/>
            <declaration name="implementation" type="Expression" line="43"/>
            <javadoc line="45">
                Constructor                
            </javadoc>
            <method name="IdentifierExpression" type="constructor" line="48">
                <params>
                    <param name="where" type="long"/>
                    <param name="id" type="Identifier"/>
                </params>
            </method>
            <method name="IdentifierExpression" type="constructor" line="52">
                <params>
                    <param name="id" type="IdentifierToken"/>
                </params>
            </method>
            <method name="IdentifierExpression" type="constructor" line="55">
                <params>
                    <param name="where" type="long"/>
                    <param name="field" type="MemberDefinition"/>
                </params>
            </method>
            <method name="getImplementation" type="Expression" line="61"/>
            <javadoc line="67">
                Check if the expression is equal to a value                
            </javadoc>
            <method name="equals" type="boolean" line="70">
                <params>
                    <param name="id" type="Identifier"/>
                </params>
            </method>
            <javadoc line="75">
                Assign a value to this identifier.  [It must already be &quot;bound&quot;]                
            </javadoc>
            <method name="assign" type="Vset" line="78">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                </params>
                <comment line="85">
                    allow definite single assignment of blank finals                    
                </comment>
                <scope line="79">
                    <declaration name="local" type="LocalMember" line="80"/>
                    <scope line="81"/>
                    <scope line="84">
                        <scope line="86"/>
                        <scope line="88"/>
                    </scope>
                </scope>
                <scope line="94"/>
            </method>
            <javadoc line="101">
                Get the value of this identifier.  [ It must already be &quot;bound&quot;]                
            </javadoc>
            <method name="get" type="Vset" line="104">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                </params>
                <scope line="105">
                    <declaration name="local" type="LocalMember" line="106"/>
                    <scope line="107"/>
                    <scope line="110"/>
                </scope>
                <scope line="115">
                    <scope line="116">
                        <scope line="117"/>
                    </scope>
                    <scope line="122">
                        <declaration name="number" type="int" line="123"/>
                        <scope line="124"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="132">
                Bind to a field                
            </javadoc>
            <method name="bind" type="boolean" line="135">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <comment line="153">
                    Check access permission                    
                </comment>
                <comment line="161">
                    Find out how to access this variable.                    
                </comment>
                <comment line="165">
                    get a &quot;val$x&quot; copy via the current object                    
                </comment>
                <comment line="178">
                    Maybe an inherited field hides an apparent variable.                    
                </comment>
                <comment line="194">
                    Rewrite as a FieldExpression.                    
                </comment>
                <comment line="195">
                    Access methods for private fields, if needed, will be added                    
                </comment>
                <comment line="196">
                    during subsequent processing of the FieldExpression.  See                    
                </comment>
                <comment line="197">
                    method &apos;FieldExpression.checkCommon&apos;. This division of labor                    
                </comment>
                <comment line="198">
                    is somewhat awkward, as most further processing of a                    
                </comment>
                <comment line="199">
                    FieldExpression during the checking phase is suppressed when                    
                </comment>
                <comment line="200">
                    the referenced field is pre-set as it is here.                    
                </comment>
                <comment line="214">
                    Check forward reference                    
                </comment>
                <scope line="136">
                    <scope line="138">
                        <scope line="140">
                            <scope line="141"/>
                        </scope>
                    </scope>
                    <scope line="154"/>
                    <scope line="162">
                        <declaration name="local" type="LocalMember" line="163"/>
                        <scope line="164"/>
                    </scope>
                    <scope line="168">
                        <declaration name="f" type="MemberDefinition" line="169"/>
                        <scope line="171"/>
                        <declaration name="fclass" type="ClassDefinition" line="176"/>
                        <scope line="177">
                            <declaration name="f2" type="MemberDefinition" line="179"/>
                            <scope line="180">
                                <declaration name="c" type="ClassDefinition" line="181"/>
                                <scope line="183"/>
                                <scope line="186"/>
                            </scope>
                        </scope>
                        <scope line="202">
                            <declaration name="base" type="Expression" line="203"/>
                        </scope>
                        <scope line="206">
                            <declaration name="base" type="Expression" line="207"/>
                            <scope line="208"/>
                        </scope>
                    </scope>
                    <scope line="215"/>
                </scope>
                <scope line="221"/>
                <scope line="223"/>
            </method>
            <javadoc line="231">
                Check expression                
            </javadoc>
            <method name="checkValue" type="Vset" line="234">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
                <comment line="236">
                    An internally pre-set field, such as an argument copying                    
                </comment>
                <comment line="237">
                    an uplevel value.  Do not re-check it.                    
                </comment>
                <scope line="235"/>
                <scope line="240"/>
            </method>
            <javadoc line="249">
                Check the expression if it appears on the LHS of an assignment                
            </javadoc>
            <method name="checkLHS" type="Vset" line="253">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
            </method>
            <javadoc line="262">
                Check the expression if it appears on the LHS of an op= expression                
            </javadoc>
            <method name="checkAssignOp" type="Vset" line="266">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                    <param name="outside" type="Expression"/>
                </params>
            </method>
            <javadoc line="275">
                Return an accessor if one is needed for assignments to this expression.                
            </javadoc>
            <method name="getAssigner" type="FieldUpdater" line="278">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <javadoc line="284">
                Return an updater if one is needed for assignments to this expression.                
            </javadoc>
            <method name="getUpdater" type="FieldUpdater" line="287">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <javadoc line="293">
                Check if the present name is part of a scoping prefix.                
            </javadoc>
            <method name="checkAmbigName" type="Vset" line="297">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                    <param name="loc" type="UnaryExpression"/>
                </params>
                <comment line="300">
                    if this is a local field, there&apos;s nothing more to do.                    
                </comment>
                <comment line="306">
                    Can this be interpreted as a type?                    
                </comment>
                <comment line="308">
                    Is it a real type??                    
                </comment>
                <comment line="313">
                    We hope it is a package prefix.  Let the caller decide.                    
                </comment>
                <scope line="298">
                    <scope line="299"/>
                </scope>
                <scope line="303"/>
                <scope line="304"/>
                <declaration name="c" type="ClassDefinition" line="307"/>
                <scope line="309"/>
            </method>
            <javadoc line="318">
                Convert an identifier to a known type, or null.                
            </javadoc>
            <method name="toResolvedType" type="ClassDefinition" line="322">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="pkgOK" type="boolean"/>
                </params>
                <comment line="332">
                    Maybe an inherited class hides an apparent class.                    
                </comment>
                <declaration name="rid" type="Identifier" line="323"/>
                <declaration name="t" type="Type" line="324"/>
                <scope line="325"/>
                <scope line="328">
                    <scope line="329">
                        <declaration name="c" type="ClassDefinition" line="330"/>
                        <scope line="333">
                            <declaration name="sc" type="ClassDefinition" line="334"/>
                            <scope line="335">
                                <declaration name="rid2" type="Identifier" line="336"/>
                                <scope line="337"/>
                            </scope>
                        </scope>
                        <scope line="344"/>
                    </scope>
                    <scope line="349"/>
                </scope>
            </method>
            <javadoc line="355">
                Convert an identifier to a type.
                  If one is not known, use the current package as a qualifier.                
            </javadoc>
            <method name="toType" type="Type" line="359">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <declaration name="c" type="ClassDefinition" line="360"/>
                <scope line="361"/>
            </method>
            <javadoc line="387">
                Check if constant:  Will it inline away?                
            </javadoc>
            <method name="isConstant" type="boolean" line="390">
                <scope line="393"/>
            </method>
            <javadoc line="399">
                Inline                
            </javadoc>
            <method name="inline" type="Expression" line="402">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <method name="inlineValue" type="Expression" line="405">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <scope line="408"/>
                <scope line="411">
                    <scope line="412">
                        <scope line="413">
                            <declaration name="e" type="Expression" line="414"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="420"/>
            </method>
            <method name="inlineLHS" type="Expression" line="424">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <method name="copyInline" type="Expression" line="430">
                <params>
                    <param name="ctx" type="Context"/>
                </params>
                <declaration name="e" type="IdentifierExpression" line="433"/>
                <scope line="435"/>
            </method>
            <method name="costInline" type="int" line="441">
                <params>
                    <param name="thresh" type="int"/>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <javadoc line="447">
                Code local vars (object fields have been inlined away)                
            </javadoc>
            <method name="codeLValue" type="int" line="450">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
            </method>
            <method name="codeLoad" type="void" line="453">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
            </method>
            <method name="codeStore" type="void" line="457">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
                <declaration name="local" type="LocalMember" line="458"/>
            </method>
            <method name="codeValue" type="void" line="462">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
            </method>
            <javadoc line="467">
                Print                
            </javadoc>
            <method name="print" type="void" line="470">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
                <scope line="472"/>
            </method>
        </class>
    </source>