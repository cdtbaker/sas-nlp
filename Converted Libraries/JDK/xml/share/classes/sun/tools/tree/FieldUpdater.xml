<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="sun.tools.asm.Assembler"/>
        <import package="java.io.PrintStream"/>
        <class name="FieldUpdater" line="32">
            <comment line="51">
                Location for reporting errors.                
            </comment>
            <comment line="52">
                Errors will always indicate compiler failure, but these will be easier to diagnose                
            </comment>
            <comment line="53">
                if the bogus error is localized to the offending assignment.                
            </comment>
            <comment line="56">
                The field to which this updater applies.                
            </comment>
            <comment line="57">
                It would be easy to eliminate the need to store the field here, but we retain it for                
            </comment>
            <comment line="58">
                diagnostic  purposes.                
            </comment>
            <comment line="61">
                Expression denoting the object to which the getter and setter are applied.                
            </comment>
            <comment line="62">
                If the field is static, &apos;base&apos; may be null, but need not be, as a static field                
            </comment>
            <comment line="63">
                may be selected from an object reference. Even though the value of the object                
            </comment>
            <comment line="64">
                reference will be ignored, it may have side-effects.                
            </comment>
            <comment line="67">
                The getter and setter methods, generated by &apos;getAccessMember&apos; and &apos;getUpdateMember&apos;.                
            </comment>
            <comment line="71">
                The number of words occupied on the stack by the object reference.                
            </comment>
            <comment line="72">
                For static fields, this is zero.                
            </comment>
            <implements interface="Constants"/>
            <javadoc line="32">
                This class encapsulates the information required to generate an update to a private
                  field referenced from another class, e.g., an inner class.  An expression denoting a
                  reference to the object to which the field belongs is associated with getter and
                  setter methods.
                  &lt;p&gt;
                  We use this class only for assignment, increment, and decrement operators, in which
                  the old value is first retrieved and then a new value is computed and stored.
                  Simple assignment expressions in which a value is copied without modification are
                  handled by another mechanism.
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="where" type="long" line="53"/>
            <declaration name="field" type="MemberDefinition" line="58"/>
            <declaration name="base" type="Expression" line="64"/>
            <declaration name="getter" type="MemberDefinition" line="67"/>
            <declaration name="setter" type="MemberDefinition" line="68"/>
            <declaration name="depth" type="int" line="72"/>
            <javadoc line="74">
                Constructor.                
            </javadoc>
            <method name="FieldUpdater" type="constructor" line="79">
                <params>
                    <param name="where" type="long"/>
                    <param name="field" type="MemberDefinition"/>
                    <param name="base" type="Expression"/>
                    <param name="getter" type="MemberDefinition"/>
                    <param name="setter" type="MemberDefinition"/>
                </params>
            </method>
            <javadoc line="88">
                Since the object reference expression may be captured before it has been inlined,
                  we must inline it later.  A &lt;code&gt;FieldUpdater&lt;/code&gt; is inlined essentially as if
                  it were a child of the assignment node to which it belongs.                
            </javadoc>
            <method name="inline" type="FieldUpdater" line="94">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <scope line="95">
                    <scope line="96"/>
                    <scope line="98"/>
                </scope>
            </method>
            <method name="copyInline" type="FieldUpdater" line="105">
                <params>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <method name="costInline" type="int" line="109">
                <params>
                    <param name="thresh" type="int"/>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="needGet" type="boolean"/>
                </params>
                <comment line="110">
                    Size of &apos;invokestatic&apos; call for access method is 3 bytes.                    
                </comment>
                <comment line="111">
                    getter needs extra invokestatic + dup                    
                </comment>
                <comment line="112">
                    Size of expression to compute &apos;this&apos; arg if needed.                    
                </comment>
                <comment line="116">
                    We ignore the cost of duplicating value in value-needed context.                    
                </comment>
                <declaration name="cost" type="int" line="111"/>
                <scope line="113"/>
            </method>
            <javadoc line="120">
                Duplicate &lt;code&gt;items&lt;/code&gt; words from the top of the stack, locating them
                  below the topmost &lt;code&gt;depth&lt;/code&gt; words on the stack.                
            </javadoc>
            <method name="codeDup" type="void" line="128">
                <params>
                    <param name="asm" type="Assembler"/>
                    <param name="items" type="int"/>
                    <param name="depth" type="int"/>
                </params>
                <comment line="125">
                    This code was cribbed from &apos;Expression.java&apos;.  We cannot reuse that code here,                    
                </comment>
                <comment line="126">
                    because we do not inherit from class &apos;Expression&apos;.                    
                </comment>
            </method>
            <javadoc line="164">
                Begin a field update by an assignment, increment, or decrement operator.
                  The current value of the field is left at the top of the stack.
                  If &lt;code&gt;valNeeded&lt;/code&gt; is true, we arrange for the initial value to remain
                  on the stack after the update.                
            </javadoc>
            <method name="startUpdate" type="void" line="171">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                    <param name="valNeeded" type="boolean"/>
                </params>
                <comment line="176">
                    Provide explicit &apos;this&apos; argument.                    
                </comment>
                <comment line="180">
                    May need to evaluate &apos;base&apos; for effect.                    
                </comment>
                <comment line="181">
                    If &apos;base&apos; was a type expression, it should have previously been inlined away.                    
                </comment>
                <scope line="172"/>
                <scope line="175"/>
                <scope line="179">
                    <scope line="182"/>
                </scope>
                <scope line="189"/>
            </method>
            <javadoc line="194">
                Complete a field update by an assignment, increment, or decrement operator.
                  The original value of the field left on the stack by &lt;code&gt;startUpdate&lt;/code&gt;
                  must have been replaced with the updated value, with no other stack alterations.
                  If &lt;code&gt;valNeeded&lt;/code&gt; is true, we arrange for the updated value to remain
                  on the stack after the update.  The &lt;code&gt;valNeeded&lt;/code&gt; argument must not be
                  true in both &lt;code&gt;startUpdate&lt;/code&gt; and &lt;code&gt;finishUpdate&lt;/code&gt;.                
            </javadoc>
            <method name="finishUpdate" type="void" line="203">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                    <param name="valNeeded" type="boolean"/>
                </params>
                <scope line="204"/>
            </method>
            <javadoc line="210">
                Like above, but used when assigning a new value independent of the
                  old, as in a simple assignment expression.  After &apos;startAssign&apos;,
                  code must be emitted to leave one additional value on the stack without
                  altering any others, followed by &apos;finishAssign&apos;.                
            </javadoc>
            <method name="startAssign" type="void" line="217">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
                <comment line="222">
                    Provide explicit &apos;this&apos; argument.                    
                </comment>
                <comment line="226">
                    May need to evaluate &apos;base&apos; for effect.                    
                </comment>
                <comment line="227">
                    If &apos;base&apos; was a type expression, it should have previously been inlined away.                    
                </comment>
                <scope line="218"/>
                <scope line="221"/>
                <scope line="225">
                    <scope line="228"/>
                </scope>
            </method>
            <method name="finishAssign" type="void" line="235">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                    <param name="valNeeded" type="boolean"/>
                </params>
                <scope line="236"/>
            </method>
        </class>
    </source>