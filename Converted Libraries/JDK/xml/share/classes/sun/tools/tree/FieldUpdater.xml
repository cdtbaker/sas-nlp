<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="sun.tools.asm.Assembler"/>
        <import package="java.io.PrintStream"/>
        <class name="FieldUpdater" line="5">
            <implements interface="Constants"/>
            <javadoc line="5">
                This class encapsulates the information required to generate an update to a private
                  field referenced from another class, e.g., an inner class.  An expression denoting a
                  reference to the object to which the field belongs is associated with getter and
                  setter methods.
                  &lt;p&gt;
                  We use this class only for assignment, increment, and decrement operators, in which
                  the old value is first retrieved and then a new value is computed and stored.
                  Simple assignment expressions in which a value is copied without modification are
                  handled by another mechanism.
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="where" type="long" line="20"/>
            <declaration name="field" type="MemberDefinition" line="21"/>
            <declaration name="base" type="Expression" line="22"/>
            <declaration name="getter" type="MemberDefinition" line="23"/>
            <declaration name="setter" type="MemberDefinition" line="24"/>
            <declaration name="depth" type="int" line="25"/>
            <javadoc line="26">
                Constructor.                
            </javadoc>
            <method name="FieldUpdater" type="constructor" line="29">
                <params>
                    <param name="where" type="long"/>
                    <param name="field" type="MemberDefinition"/>
                    <param name="base" type="Expression"/>
                    <param name="getter" type="MemberDefinition"/>
                    <param name="setter" type="MemberDefinition"/>
                </params>
            </method>
            <javadoc line="36">
                Since the object reference expression may be captured before it has been inlined,
                  we must inline it later.  A &lt;code&gt;FieldUpdater&lt;/code&gt; is inlined essentially as if
                  it were a child of the assignment node to which it belongs.                
            </javadoc>
            <method name="inline" type="FieldUpdater" line="41">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <scope line="42">
                    <scope line="43"/>
                    <scope line="46"/>
                </scope>
            </method>
            <method name="copyInline" type="FieldUpdater" line="52">
                <params>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <method name="costInline" type="int" line="55">
                <params>
                    <param name="thresh" type="int"/>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="needGet" type="boolean"/>
                </params>
                <declaration name="cost" type="int" line="56"/>
                <scope line="57"/>
            </method>
            <javadoc line="62">
                Duplicate &lt;code&gt;items&lt;/code&gt; words from the top of the stack, locating them
                  below the topmost &lt;code&gt;depth&lt;/code&gt; words on the stack.                
            </javadoc>
            <method name="codeDup" type="void" line="66">
                <params>
                    <param name="asm" type="Assembler"/>
                    <param name="items" type="int"/>
                    <param name="depth" type="int"/>
                </params>
            </method>
            <javadoc line="99">
                Begin a field update by an assignment, increment, or decrement operator.
                  The current value of the field is left at the top of the stack.
                  If &lt;code&gt;valNeeded&lt;/code&gt; is true, we arrange for the initial value to remain
                  on the stack after the update.                
            </javadoc>
            <method name="startUpdate" type="void" line="105">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                    <param name="valNeeded" type="boolean"/>
                </params>
                <scope line="106"/>
                <scope line="109"/>
                <scope line="113">
                    <scope line="114"/>
                </scope>
                <scope line="121"/>
            </method>
            <javadoc line="125">
                Complete a field update by an assignment, increment, or decrement operator.
                  The original value of the field left on the stack by &lt;code&gt;startUpdate&lt;/code&gt;
                  must have been replaced with the updated value, with no other stack alterations.
                  If &lt;code&gt;valNeeded&lt;/code&gt; is true, we arrange for the updated value to remain
                  on the stack after the update.  The &lt;code&gt;valNeeded&lt;/code&gt; argument must not be
                  true in both &lt;code&gt;startUpdate&lt;/code&gt; and &lt;code&gt;finishUpdate&lt;/code&gt;.                
            </javadoc>
            <method name="finishUpdate" type="void" line="133">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                    <param name="valNeeded" type="boolean"/>
                </params>
                <scope line="134"/>
            </method>
            <javadoc line="139">
                Like above, but used when assigning a new value independent of the
                  old, as in a simple assignment expression.  After &apos;startAssign&apos;,
                  code must be emitted to leave one additional value on the stack without
                  altering any others, followed by &apos;finishAssign&apos;.                
            </javadoc>
            <method name="startAssign" type="void" line="145">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
                <scope line="146"/>
                <scope line="149"/>
                <scope line="153">
                    <scope line="154"/>
                </scope>
            </method>
            <method name="finishAssign" type="void" line="160">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                    <param name="valNeeded" type="boolean"/>
                </params>
                <scope line="161"/>
            </method>
        </class>
    </source>