<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="sun.tools.asm"/>
        <import package="java.io.PrintStream"/>
        <import package="java.util.Hashtable"/>
        <class name="FieldExpression" line="6">
            <extends class="UnaryExpression"/>
            <javadoc line="6">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="id" type="Identifier" line="12"/>
            <declaration name="field" type="MemberDefinition" line="13"/>
            <declaration name="implementation" type="Expression" line="14"/>
            <declaration name="clazz" type="ClassDefinition" line="15"/>
            <declaration name="superBase" type="ClassDefinition" line="16"/>
            <javadoc line="17">
                constructor                
            </javadoc>
            <method name="FieldExpression" type="constructor" line="20">
                <params>
                    <param name="where" type="long"/>
                    <param name="right" type="Expression"/>
                    <param name="id" type="Identifier"/>
                </params>
            </method>
            <method name="FieldExpression" type="constructor" line="24">
                <params>
                    <param name="where" type="long"/>
                    <param name="right" type="Expression"/>
                    <param name="field" type="MemberDefinition"/>
                </params>
            </method>
            <method name="getImplementation" type="Expression" line="29"/>
            <javadoc line="33">
                Return true if the field is being selected from
                  a qualified &apos;super&apos;.                
            </javadoc>
            <method name="isQualSuper" type="boolean" line="37"/>
            <javadoc line="40">
                Convert an &apos;.&apos; expression to a qualified identifier                
            </javadoc>
            <method name="toIdentifier" type="Identifier" line="43">
                <params>
                    <param name="e" type="Expression"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="44"/>
                <scope line="45">
                    <declaration name="fe" type="FieldExpression" line="46"/>
                    <scope line="47"/>
                </scope>
                <scope line="54"/>
            </method>
            <javadoc line="60">
                Convert an &apos;.&apos; expression to a type                
            </javadoc>
            <method name="toType" type="Type" line="63">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <declaration name="id" type="Identifier" line="64"/>
                <scope line="65"/>
                <declaration name="t" type="Type" line="69"/>
                <scope line="70"/>
            </method>
            <javadoc line="75">
                Check if the present name is part of a scoping prefix.                
            </javadoc>
            <method name="checkAmbigName" type="Vset" line="78">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                    <param name="loc" type="UnaryExpression"/>
                </params>
                <scope line="79"/>
            </method>
            <javadoc line="84">
                Check the expression                
            </javadoc>
            <method name="checkValue" type="Vset" line="87">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
                <scope line="89"/>
            </method>
            <javadoc line="94">
                If &apos;checkAmbiguousName&apos; returns &apos;Package.tPackage&apos;, then it was
                  unable to resolve any prefix of the qualified name.  This method
                  attempts to diagnose the problem.                
            </javadoc>
            <method name="reportFailedPackagePrefix" type="void" line="99">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="right" type="Expression"/>
                </params>
            </method>
            <method name="reportFailedPackagePrefix" type="void" line="102">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="right" type="Expression"/>
                    <param name="mustBeType" type="boolean"/>
                </params>
                <declaration name="idp" type="Expression" line="103"/>
                <declaration name="ie" type="IdentifierExpression" line="105"/>
                <scope line="106"/>
                <scope line="109"/>
                <scope line="113"/>
                <scope line="115">
                    <scope line="116"/>
                    <scope line="119"/>
                </scope>
                <scope line="123">
                    <scope line="124"/>
                    <scope line="127"/>
                </scope>
            </method>
            <javadoc line="132">
                Rewrite accesses to private fields of another class.                
            </javadoc>
            <method name="implementFieldAccess" type="Expression" line="135">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="base" type="Expression"/>
                    <param name="isLHS" type="boolean"/>
                </params>
                <declaration name="abase" type="ClassDefinition" line="136"/>
                <scope line="137">
                    <scope line="138">
                        <declaration name="e" type="Expression" line="139"/>
                        <scope line="140"/>
                    </scope>
                    <declaration name="af" type="MemberDefinition" line="144"/>
                    <scope line="145">
                        <scope line="146">
                            <declaration name="args" type="Expression" line="147"/>
                            <declaration name="call" type="Expression" line="148"/>
                        </scope>
                        <scope line="151">
                            <declaration name="args" type="Expression" line="152"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="159">
                Determine if an access method is required, and, if so, return
                  the class in which it should appear, else return null.                
            </javadoc>
            <method name="accessBase" type="ClassDefinition" line="163">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <scope line="164">
                    <declaration name="cdef" type="ClassDefinition" line="165"/>
                    <declaration name="ctxClass" type="ClassDefinition" line="166"/>
                    <scope line="167"/>
                </scope>
                <scope line="172">
                    <scope line="173"/>
                    <declaration name="cdef" type="ClassDefinition" line="176"/>
                    <declaration name="ctxClass" type="ClassDefinition" line="177"/>
                    <scope line="178"/>
                </scope>
                <scope line="183"/>
            </method>
            <javadoc line="187">
                Determine if a type is accessible from a given class.                
            </javadoc>
            <method name="isTypeAccessible" type="boolean" line="190">
                <params>
                    <param name="where" type="long"/>
                    <param name="env" type="Environment"/>
                    <param name="t" type="Type"/>
                    <param name="c" type="ClassDefinition"/>
                </params>
                <scope line="193">
                    <declaration name="nm" type="Identifier" line="194"/>
                    <declaration name="def" type="ClassDefinition" line="195"/>
                </scope>
                <scope line="198"/>
            </method>
            <javadoc line="207">
                Common code for checkValue and checkAmbigName                
            </javadoc>
            <method name="checkCommon" type="Vset" line="210">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                    <param name="loc" type="UnaryExpression"/>
                    <param name="isLHS" type="boolean"/>
                </params>
                <scope line="211">
                    <declaration name="t" type="Type" line="212"/>
                    <scope line="213">
                        <scope line="214"/>
                        <declaration name="wrc" type="String" line="218"/>
                        <declaration name="wid" type="Identifier" line="251"/>
                        <declaration name="wcls" type="Expression" line="252"/>
                    </scope>
                    <scope line="258"/>
                    <declaration name="fwhere" type="long" line="263"/>
                    <declaration name="fcls" type="ClassDefinition" line="264"/>
                    <declaration name="lookup" type="MemberDefinition" line="265"/>
                    <declaration name="sig" type="String" line="266"/>
                    <declaration name="className" type="String" line="267"/>
                    <scope line="268"/>
                    <scope line="271"/>
                    <scope line="274"/>
                    <scope line="277">
                        <declaration name="inClass" type="ClassDefinition" line="278"/>
                        <declaration name="cfld" type="MemberDefinition" line="279"/>
                    </scope>
                </scope>
                <scope line="286"/>
                <scope line="291">
                    <scope line="292"/>
                    <declaration name="nm" type="Identifier" line="296"/>
                    <scope line="297">
                        <declaration name="ctxClass" type="ClassDefinition" line="299"/>
                    </scope>
                </scope>
                <declaration name="ctxClass" type="ClassDefinition" line="306"/>
                <declaration name="staticRef" type="boolean" line="307"/>
                <scope line="308">
                    <scope line="309">
                        <scope line="310">
                            <scope line="311">
                                <declaration name="cdecl" type="ClassDeclaration" line="312"/>
                                <scope line="313"/>
                                <scope line="316"/>
                            </scope>
                        </scope>
                        <scope line="324"/>
                    </scope>
                    <declaration name="sourceClass" type="ClassDefinition" line="329"/>
                    <scope line="330">
                        <declaration name="id" type="Identifier" line="331"/>
                        <scope line="332"/>
                        <scope line="335"/>
                    </scope>
                    <scope line="341">
                        <scope line="342"/>
                        <scope line="348"/>
                        <scope line="351"/>
                    </scope>
                    <scope line="357">
                        <scope line="359"/>
                    </scope>
                    <scope line="363">
                        <scope line="364"/>
                        <scope line="367"/>
                    </scope>
                    <scope line="372">
                        <declaration name="cdecl" type="ClassDeclaration" line="373"/>
                        <scope line="374"/>
                        <scope line="377"/>
                    </scope>
                    <scope line="382"/>
                    <scope line="386"/>
                    <scope line="390"/>
                    <scope line="393"/>
                    <scope line="397"/>
                    <scope line="400"/>
                    <scope line="403">
                        <declaration name="declarer" type="ClassDefinition" line="404"/>
                        <scope line="405"/>
                    </scope>
                </scope>
                <scope line="411"/>
                <scope line="414"/>
            </method>
            <javadoc line="419">
                Return a &lt;code&gt;FieldUpdater&lt;/code&gt; object to be used in updating the
                  value of the location denoted by &lt;code&gt;this&lt;/code&gt;, which must be an
                  expression suitable for the left-hand side of an assignment.
                  This is used for implementing assignments to private fields for which
                  an access method is required.  Returns null if no access method is
                  needed, in which case the assignment is handled in the usual way, by
                  direct access.  Only simple assignment expressions are handled here
                  Assignment operators and pre/post increment/decrement operators are
                  are handled by &apos;getUpdater&apos; below.
                  &lt;p&gt;
                  Must be called after &apos;checkValue&apos;, else &apos;right&apos; will be invalid.                
            </javadoc>
            <method name="getAssigner" type="FieldUpdater" line="432">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <scope line="433"/>
                <declaration name="abase" type="ClassDefinition" line="436"/>
                <scope line="437">
                    <declaration name="setter" type="MemberDefinition" line="438"/>
                    <declaration name="base" type="Expression" line="439"/>
                </scope>
            </method>
            <javadoc line="444">
                Return a &lt;code&gt;FieldUpdater&lt;/code&gt; object to be used in updating the
                  value of the location denoted by &lt;code&gt;this&lt;/code&gt;, which must be an
                  expression suitable for the left-hand side of an assignment.  This is
                  used for implementing the assignment operators and the increment and
                  decrement operators on private fields that are accessed from another
                  class, e.g, uplevel from an inner class. Returns null if no access
                  method is needed.
                  &lt;p&gt;
                  Must be called after &apos;checkValue&apos;, else &apos;right&apos; will be invalid.                
            </javadoc>
            <method name="getUpdater" type="FieldUpdater" line="455">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <scope line="456"/>
                <declaration name="abase" type="ClassDefinition" line="459"/>
                <scope line="460">
                    <declaration name="getter" type="MemberDefinition" line="461"/>
                    <declaration name="setter" type="MemberDefinition" line="462"/>
                    <declaration name="base" type="Expression" line="463"/>
                </scope>
            </method>
            <javadoc line="468">
                This field expression is an inner class reference.
                  Finish checking it.                
            </javadoc>
            <method name="checkInnerClass" type="Vset" line="472">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                    <param name="loc" type="UnaryExpression"/>
                </params>
                <declaration name="inner" type="ClassDefinition" line="473"/>
                <scope line="475"/>
                <declaration name="te" type="Expression" line="478"/>
                <declaration name="ctxClass" type="ClassDefinition" line="479"/>
                <scope line="480">
                    <scope line="481">
                        <declaration name="clazz" type="ClassDefinition" line="482"/>
                    </scope>
                    <scope line="486"/>
                </scope>
                <scope line="492"/>
            </method>
            <javadoc line="500">
                Check the expression if it appears on the LHS of an assignment                
            </javadoc>
            <method name="checkLHS" type="Vset" line="503">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                </params>
                <declaration name="hadField" type="boolean" line="504"/>
                <scope line="506"/>
                <scope line="509">
                    <scope line="510">
                        <scope line="511">
                            <scope line="512"/>
                        </scope>
                        <scope line="516">
                            <scope line="517"/>
                        </scope>
                    </scope>
                    <scope line="524"/>
                </scope>
            </method>
            <javadoc line="530">
                Check the expression if it appears on the LHS of an op= expression                
            </javadoc>
            <method name="checkAssignOp" type="Vset" line="533">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                    <param name="outside" type="Expression"/>
                </params>
                <scope line="535"/>
                <scope line="538"/>
            </method>
            <javadoc line="543">
                There is a simple assignment being made to the given final field.
                  The field was named either by a simple name or by an almost-simple
                  expression of the form &quot;this.v&quot;.
                  Check if this is a legal assignment.
                  &lt;p&gt;
                  Blank final variables can be set in initializers or constructor
                  bodies.  In all cases there must be definite single assignment.
                  (All instance and instance variable initializers and each
                  constructor body are treated as if concatenated for the purposes
                  of this check.  Assignment to &quot;this.x&quot; is treated as a definite
                  assignment to the simple name &quot;x&quot; which names the instance variable.)                
            </javadoc>
            <method name="checkFinalAssign" type="Vset" line="556">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="where" type="long"/>
                    <param name="field" type="MemberDefinition"/>
                </params>
                <scope line="557">
                    <declaration name="number" type="int" line="558"/>
                    <scope line="559"/>
                    <scope line="562">
                        <declaration name="id" type="Identifier" line="563"/>
                    </scope>
                </scope>
                <scope line="567">
                    <declaration name="id" type="Identifier" line="568"/>
                </scope>
            </method>
            <method name="getClassLiteralCache" type="MemberDefinition" line="573">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="className" type="String"/>
                    <param name="c" type="ClassDefinition"/>
                </params>
                <declaration name="lname" type="String" line="574"/>
                <scope line="575"/>
                <scope line="578">
                    <scope line="581"/>
                </scope>
                <declaration name="fname" type="Identifier" line="586"/>
                <declaration name="cfld" type="MemberDefinition" line="587"/>
                <scope line="588"/>
                <scope line="591"/>
                <scope line="594"/>
                <scope line="597"/>
            </method>
            <method name="makeClassLiteralCacheRef" type="Expression" line="602">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="lookup" type="MemberDefinition"/>
                    <param name="cfld" type="MemberDefinition"/>
                    <param name="className" type="String"/>
                </params>
                <declaration name="ccls" type="Expression" line="603"/>
                <declaration name="cache" type="Expression" line="604"/>
                <declaration name="cacheOK" type="Expression" line="605"/>
                <declaration name="lcls" type="Expression" line="606"/>
                <declaration name="name" type="Expression" line="607"/>
                <declaration name="namearg" type="Expression" line="608"/>
                <declaration name="setCache" type="Expression" line="609"/>
            </method>
            <method name="makeClassLiteralInlineRef" type="Expression" line="613">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="lookup" type="MemberDefinition"/>
                    <param name="className" type="String"/>
                </params>
                <declaration name="lcls" type="Expression" line="614"/>
                <declaration name="name" type="Expression" line="615"/>
                <declaration name="namearg" type="Expression" line="616"/>
                <declaration name="getClass" type="Expression" line="617"/>
            </method>
            <javadoc line="620">
                Check if constant:  Will it inline away?                
            </javadoc>
            <method name="isConstant" type="boolean" line="623">
                <scope line="625"/>
            </method>
            <javadoc line="630">
                Inline                
            </javadoc>
            <method name="inline" type="Expression" line="633">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <declaration name="e" type="Expression" line="635"/>
                <scope line="636">
                    <declaration name="fe" type="FieldExpression" line="637"/>
                </scope>
            </method>
            <method name="inlineValue" type="Expression" line="642">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <scope line="644">
                    <scope line="645"/>
                    <scope line="648">
                        <declaration name="e" type="Expression" line="649"/>
                        <scope line="650"/>
                    </scope>
                    <scope line="656">
                        <scope line="657">
                            <declaration name="e" type="Expression" line="658"/>
                            <scope line="660"/>
                        </scope>
                        <scope line="664"/>
                    </scope>
                </scope>
                <scope line="670"/>
            </method>
            <method name="inlineLHS" type="Expression" line="674">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <scope line="676">
                    <scope line="677">
                        <declaration name="e" type="Expression" line="678"/>
                        <scope line="680"/>
                    </scope>
                    <scope line="684"/>
                </scope>
            </method>
            <method name="copyInline" type="Expression" line="690">
                <params>
                    <param name="ctx" type="Context"/>
                </params>
            </method>
            <javadoc line="694">
                The cost of inlining this expression                
            </javadoc>
            <method name="costInline" type="int" line="697">
                <params>
                    <param name="thresh" type="int"/>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                </params>
                <scope line="699"/>
                <declaration name="ctxClass" type="ClassDefinition" line="702"/>
                <scope line="703">
                    <scope line="704">
                        <scope line="705"/>
                        <scope line="708">
                            <declaration name="rt" type="ClassDeclaration" line="709"/>
                            <scope line="710"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="716"/>
            </method>
            <javadoc line="720">
                Code                
            </javadoc>
            <method name="codeLValue" type="int" line="723">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
                <scope line="725">
                    <scope line="726"/>
                </scope>
            </method>
            <method name="codeLoad" type="void" line="735">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
                <scope line="736"/>
                <scope line="739"/>
                <scope line="742"/>
            </method>
            <method name="codeStore" type="void" line="746">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
                <scope line="747"/>
                <scope line="750"/>
            </method>
            <method name="codeValue" type="void" line="754">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
            </method>
            <javadoc line="758">
                Print                
            </javadoc>
            <method name="print" type="void" line="761">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
                <scope line="763"/>
                <scope line="766"/>
                <scope line="770"/>
            </method>
        </class>
    </source>