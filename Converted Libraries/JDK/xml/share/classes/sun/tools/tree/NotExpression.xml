<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="sun.tools.asm.Assembler"/>
        <import package="sun.tools.asm.Label"/>
        <import package="java.util.Hashtable"/>
        <class name="NotExpression" line="33">
            <extends class="UnaryExpression"/>
            <comment line="55">
                Check a &quot;not&quot; expression.
                
                 cvars is modified so that
                    cvar.vsTrue indicates variables with a known value if
                         the expression is true.
                    cvars.vsFalse indicates variables with a known value if
                         the expression is false
                
                 For &quot;not&quot; expressions, we look at the inside expression, and then
                 swap true and false.                
            </comment>
            <javadoc line="33">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <javadoc line="40">
                Constructor                
            </javadoc>
            <method name="NotExpression" type="constructor" line="43">
                <params>
                    <param name="where" type="long"/>
                    <param name="right" type="Expression"/>
                </params>
            </method>
            <javadoc line="47">
                Select the type of the expression                
            </javadoc>
            <method name="selectType" type="void" line="50">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="tm" type="int"/>
                </params>
            </method>
            <method name="checkCondition" type="void" line="68">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                    <param name="cvars" type="ConditionVars"/>
                </params>
                <comment line="72">
                    swap true and false                    
                </comment>
                <declaration name="temp" type="Vset" line="72"/>
            </method>
            <javadoc line="77">
                Evaluate                
            </javadoc>
            <method name="eval" type="Expression" line="80">
                <params>
                    <param name="a" type="boolean"/>
                </params>
            </method>
            <javadoc line="84">
                Simplify                
            </javadoc>
            <method name="simplify" type="Expression" line="87">
                <comment line="89">
                    Check if the expression can be optimized                    
                </comment>
                <comment line="106">
                    Can&apos;t negate real comparisons                    
                </comment>
                <comment line="112">
                    Negate comparison                    
                </comment>
                <declaration name="bin" type="BinaryExpression" line="106"/>
                <scope line="107"/>
            </method>
            <javadoc line="129">
                Code                
            </javadoc>
            <method name="codeBranch" type="void" line="132">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                    <param name="lbl" type="Label"/>
                    <param name="whenTrue" type="boolean"/>
                </params>
            </method>
            <javadoc line="136">
                Instead of relying on the default code generation which uses
                  conditional branching, generate a simpler stream using XOR.                
            </javadoc>
            <method name="codeValue" type="void" line="140">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
            </method>
        </class>
    </source>