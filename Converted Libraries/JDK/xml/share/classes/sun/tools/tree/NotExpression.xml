<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.tree">
        <import package="sun.tools.java"/>
        <import package="sun.tools.asm.Assembler"/>
        <import package="sun.tools.asm.Label"/>
        <import package="java.util.Hashtable"/>
        <class name="NotExpression" line="6">
            <extends class="UnaryExpression"/>
            <javadoc line="6">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <javadoc line="12">
                Constructor                
            </javadoc>
            <method name="NotExpression" type="constructor" line="15">
                <params>
                    <param name="where" type="long"/>
                    <param name="right" type="Expression"/>
                </params>
            </method>
            <javadoc line="18">
                Select the type of the expression                
            </javadoc>
            <method name="selectType" type="void" line="21">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="tm" type="int"/>
                </params>
            </method>
            <method name="checkCondition" type="void" line="24">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                    <param name="exp" type="Hashtable"/>
                    <param name="cvars" type="ConditionVars"/>
                </params>
                <declaration name="temp" type="Vset" line="27"/>
            </method>
            <javadoc line="31">
                Evaluate                
            </javadoc>
            <method name="eval" type="Expression" line="34">
                <params>
                    <param name="a" type="boolean"/>
                </params>
            </method>
            <javadoc line="37">
                Simplify                
            </javadoc>
            <method name="simplify" type="Expression" line="40">
                <declaration name="bin" type="BinaryExpression" line="54"/>
                <scope line="55"/>
            </method>
            <javadoc line="74">
                Code                
            </javadoc>
            <method name="codeBranch" type="void" line="77">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                    <param name="lbl" type="Label"/>
                    <param name="whenTrue" type="boolean"/>
                </params>
            </method>
            <javadoc line="80">
                Instead of relying on the default code generation which uses
                  conditional branching, generate a simpler stream using XOR.                
            </javadoc>
            <method name="codeValue" type="void" line="84">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
            </method>
        </class>
    </source>