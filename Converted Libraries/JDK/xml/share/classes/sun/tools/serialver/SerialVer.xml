<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.serialver">
        <import package="java.io"/>
        <import package="java.awt"/>
        <import package="java.applet"/>
        <import package="java.io.ObjectStreamClass"/>
        <import package="java.util.Properties"/>
        <import package="java.text.MessageFormat"/>
        <import package="java.util.ResourceBundle"/>
        <import package="java.util.MissingResourceException"/>
        <import package="java.net.URLClassLoader"/>
        <import package="java.net.URL"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.util.StringTokenizer"/>
        <import package="sun.net.www.ParseUtil"/>
        <class name="SerialVer" line="42">
            <extends class="Applet"/>
            <comment line="142">
                A class loader that will load from the CLASSPATH environment
                 variable set by the user.                
            </comment>
            <comment line="148">
                Create a URL class loader that will load classes from the
                 specified classpath.                
            </comment>
            <comment line="165">
                From the classname find the serialVersionUID string formatted
                 for to be copied to a java class.                
            </comment>
            <comment line="345">
                Construct a new Frame with title and menu.                
            </comment>
            <comment line="363">
                Handle a window destroy event by exiting.                
            </comment>
            <comment line="372">
                Handle an Exit event by exiting.                
            </comment>
            <comment line="382">
                Cleanup and exit.                
            </comment>
            <declaration name="gb" type="GridBagLayout" line="43"/>
            <declaration name="classname_t" type="TextField" line="44"/>
            <declaration name="show_b" type="Button" line="45"/>
            <declaration name="serialversion_t" type="TextField" line="46"/>
            <declaration name="footer_l" type="Label" line="47"/>
            <declaration name="serialVersionUID" type="long" line="49"/>
            <method name="init" type="void" line="51">
                <comment line="71">
                                        
                </comment>
                <comment line="92">
                                        
                </comment>
                <declaration name="c" type="GridBagConstraints" line="55"/>
                <declaration name="l1" type="Label" line="58"/>
                <declaration name="l2" type="Label" line="75"/>
            </method>
            <method name="start" type="void" line="96">
                <comment line="97">
                                        
                </comment>
            </method>
            <method name="action" type="boolean" line="101">
                <params>
                    <param name="ev" type="Event"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="102"/>
                <scope line="105"/>
            </method>
            <method name="handleEvent" type="boolean" line="113">
                <params>
                    <param name="ev" type="Event"/>
                </params>
                <declaration name="rc" type="boolean" line="114"/>
            </method>
            <javadoc line="118">
                Lookup the specified classname and display it.                
            </javadoc>
            <method name="show" type="void" line="121">
                <params>
                    <param name="classname" type="String"/>
                </params>
                <comment line="123">
                    Clear the message                    
                </comment>
                <comment line="124">
                    clear the last value                    
                </comment>
                <scope line="122">
                    <scope line="126"/>
                    <declaration name="s" type="String" line="130"/>
                    <scope line="131"/>
                    <scope line="133"/>
                </scope>
                <scope line="136"/>
            </method>
            <declaration name="loader" type="URLClassLoader" line="145"/>
            <method name="initializeLoader" type="void" line="152">
                <params>
                    <param name="cp" type="String"/>
                </params>
                <declaration name="urls" type="URL[]" line="153"/>
                <declaration name="st" type="StringTokenizer" line="154"/>
                <declaration name="count" type="int" line="155"/>
                <scope line="157"/>
            </method>
            <method name="serialSyntax" type="String" line="168">
                <params>
                    <param name="classname" type="String"/>
                </params>
                <comment line="172">
                    If using old style of qualifyling inner classes with &apos;$&apos;s.                    
                </comment>
                <comment line="176">
                    Try to resolve the fully qualified name and if that fails, start
                     replacing the &apos;.&apos;s with &apos;$&apos;s starting from the last &apos;.&apos;, until
                     the class is resolved.                    
                </comment>
                <comment line="184">
                                        
                </comment>
                <comment line="197">
                                        
                </comment>
                <declaration name="ret" type="String" line="169"/>
                <declaration name="classFound" type="boolean" line="170"/>
                <scope line="173"/>
                <scope line="175">
                    <scope line="180"/>
                    <scope line="183"/>
                    <scope line="186">
                        <declaration name="workBuffer" type="StringBuffer" line="187"/>
                        <declaration name="workName" type="String" line="188"/>
                        <declaration name="i" type="int" line="189"/>
                        <scope line="190">
                            <scope line="192"/>
                            <scope line="196"/>
                        </scope>
                    </scope>
                    <scope line="201"/>
                </scope>
            </method>
            <method name="resolveClass" type="String" line="208">
                <params>
                    <param name="classname" type="String"/>
                </params>
                <declaration name="cl" type="Class" line="209"/>
                <declaration name="desc" type="ObjectStreamClass" line="210"/>
                <scope line="211"/>
                <scope line="214"/>
            </method>
            <method name="main" type="void" line="220">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <comment line="246">
                    drop into processing class names                    
                </comment>
                <comment line="251">
                    Get user&apos;s CLASSPATH environment variable, if the -classpath option
                     is not defined, and make a loader that can read from that path.                    
                </comment>
                <comment line="257">
                    If environment variable not set, add current directory to path.                    
                </comment>
                <comment line="276">
                    Check if there are any class names specified, if it is not a
                     invocation with the -show option.                    
                </comment>
                <comment line="285">
                    The rest of the parameters are classnames.                    
                </comment>
                <comment line="313">
                    f.setLayout(new FlowLayout());                    
                </comment>
                <declaration name="show" type="boolean" line="221"/>
                <declaration name="envcp" type="String" line="222"/>
                <declaration name="i" type="int" line="223"/>
                <scope line="225"/>
                <scope line="230">
                    <scope line="231"/>
                    <scope line="233">
                        <scope line="234"/>
                    </scope>
                    <scope line="241"/>
                    <scope line="245"/>
                </scope>
                <scope line="255">
                    <scope line="260"/>
                </scope>
                <scope line="265"/>
                <scope line="267"/>
                <scope line="270"/>
                <scope line="275">
                    <scope line="280"/>
                    <declaration name="exitFlag" type="boolean" line="288"/>
                    <scope line="289">
                        <scope line="290">
                            <declaration name="syntax" type="String" line="291"/>
                            <scope line="294"/>
                        </scope>
                        <scope line="299"/>
                    </scope>
                    <scope line="304"/>
                </scope>
                <scope line="307">
                    <scope line="308"/>
                    <declaration name="f" type="Frame" line="312"/>
                    <declaration name="sv" type="SerialVer" line="314"/>
                </scope>
            </method>
            <javadoc line="324">
                Usage                
            </javadoc>
            <method name="usage" type="void" line="327"/>
        </class>
        <class name="SerialVerFrame" line="333">
            <extends class="Frame"/>
            <comment line="142">
                A class loader that will load from the CLASSPATH environment
                 variable set by the user.                
            </comment>
            <comment line="148">
                Create a URL class loader that will load classes from the
                 specified classpath.                
            </comment>
            <comment line="165">
                From the classname find the serialVersionUID string formatted
                 for to be copied to a java class.                
            </comment>
            <comment line="345">
                Construct a new Frame with title and menu.                
            </comment>
            <comment line="363">
                Handle a window destroy event by exiting.                
            </comment>
            <comment line="372">
                Handle an Exit event by exiting.                
            </comment>
            <comment line="382">
                Cleanup and exit.                
            </comment>
            <javadoc line="333">
                Top level frame so serialVer can be run as an main program
                  and have an exit menu item.                
            </javadoc>
            <declaration name="menu_mb" type="MenuBar" line="338"/>
            <declaration name="file_m" type="Menu" line="339"/>
            <declaration name="exit_i" type="MenuItem" line="340"/>
            <declaration name="serialVersionUID" type="long" line="342"/>
            <method name="SerialVerFrame" type="constructor" line="347">
                <comment line="350">
                                        
                </comment>
                <comment line="354">
                                        
                </comment>
                <comment line="358">
                                        
                </comment>
                <comment line="359">
                    Bug in JDK1.1        setMenuBar(menu_mb);                    
                </comment>
            </method>
            <method name="handleEvent" type="boolean" line="365">
                <params>
                    <param name="e" type="Event"/>
                </params>
                <scope line="366"/>
            </method>
            <method name="action" type="boolean" line="374">
                <params>
                    <param name="ev" type="Event"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="375"/>
            </method>
            <method name="exit" type="void" line="384">
                <params>
                    <param name="ret" type="int"/>
                </params>
            </method>
        </class>
        <class name="Res" line="390">
            <comment line="142">
                A class loader that will load from the CLASSPATH environment
                 variable set by the user.                
            </comment>
            <comment line="148">
                Create a URL class loader that will load classes from the
                 specified classpath.                
            </comment>
            <comment line="165">
                From the classname find the serialVersionUID string formatted
                 for to be copied to a java class.                
            </comment>
            <comment line="345">
                Construct a new Frame with title and menu.                
            </comment>
            <comment line="363">
                Handle a window destroy event by exiting.                
            </comment>
            <comment line="372">
                Handle an Exit event by exiting.                
            </comment>
            <comment line="382">
                Cleanup and exit.                
            </comment>
            <javadoc line="390">
                Utility for integrating with serialver and for localization.
                  Handle Resources. Access to error and warning counts.
                  Message formatting.                
                <see>
                    java.util.ResourceBundle                    
                </see>
                <see>
                    java.text.MessageFormat                    
                </see>
            </javadoc>
            <declaration name="messageRB" type="ResourceBundle" line="400"/>
            <javadoc line="402">
                Initialize ResourceBundle                
            </javadoc>
            <method name="initResource" type="void" line="405">
                <scope line="406"/>
                <scope line="409"/>
            </method>
            <javadoc line="414">
                get and format message string from resource                
                <param>
                    key selects message from resource                    
                </param>
            </javadoc>
            <method name="getText" type="String" line="419">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <javadoc line="423">
                get and format message string from resource                
                <param>
                    key selects message from resource                    
                </param>
                <param>
                    a1 first argument                    
                </param>
            </javadoc>
            <method name="getText" type="String" line="429">
                <params>
                    <param name="key" type="String"/>
                    <param name="a1" type="String"/>
                </params>
            </method>
            <javadoc line="433">
                get and format message string from resource                
                <param>
                    key selects message from resource                    
                </param>
                <param>
                    a1 first argument                    
                </param>
                <param>
                    a2 second argument                    
                </param>
            </javadoc>
            <method name="getText" type="String" line="440">
                <params>
                    <param name="key" type="String"/>
                    <param name="a1" type="String"/>
                    <param name="a2" type="String"/>
                </params>
            </method>
            <javadoc line="444">
                get and format message string from resource                
                <param>
                    key selects message from resource                    
                </param>
                <param>
                    a1 first argument                    
                </param>
                <param>
                    a2 second argument                    
                </param>
                <param>
                    a3 third argument                    
                </param>
            </javadoc>
            <method name="getText" type="String" line="452">
                <params>
                    <param name="key" type="String"/>
                    <param name="a1" type="String"/>
                    <param name="a2" type="String"/>
                    <param name="a3" type="String"/>
                </params>
                <scope line="453"/>
                <scope line="456">
                    <declaration name="message" type="String" line="457"/>
                    <declaration name="args" type="String[]" line="458"/>
                </scope>
                <scope line="463"/>
            </method>
        </class>
    </source>