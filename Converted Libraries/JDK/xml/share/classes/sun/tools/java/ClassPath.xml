<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.java">
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.io.File"/>
        <import package="java.io.IOException"/>
        <import package="java.util.zip"/>
        <class name="ClassPath" line="34">
            <comment line="291">
                cache of sub-directory listings                
            </comment>
            <javadoc line="34">
                This class is used to represent a class path, which can contain both
                  directories and zip files.
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="dirSeparator" type="char" line="44"/>
            <declaration name="pathstr" type="String" line="46"/>
            <javadoc line="46">
                The original class path string                
            </javadoc>
            <declaration name="path" type="ClassPathEntry[]" line="51"/>
            <javadoc line="51">
                List of class path entries                
            </javadoc>
            <javadoc line="56">
                Build a class path from the specified path string                
            </javadoc>
            <method name="ClassPath" type="constructor" line="59">
                <params>
                    <param name="pathstr" type="String"/>
                </params>
            </method>
            <javadoc line="63">
                Build a class path from the specified array of class path
                  element strings.  This constructor, and the corresponding
                  &quot;init&quot; method, were added as part of the fix for 6473331, which
                  adds support for Class-Path manifest entries in JAR files to
                  rmic.  It is conceivable that the value of a Class-Path
                  manifest entry will contain a path separator, which would cause
                  incorrect behavior if the expanded path were passed to the
                  previous constructor as a single path-separator-delimited
                  string; use of this constructor avoids that problem.                
            </javadoc>
            <method name="ClassPath" type="constructor" line="74">
                <params>
                    <param name="patharray" type="String[]"/>
                </params>
            </method>
            <javadoc line="78">
                Build a default class path from the path strings specified by
                  the properties sun.boot.class.path and env.class.path, in that
                  order.                
            </javadoc>
            <method name="ClassPath" type="constructor" line="83">
                <declaration name="syscp" type="String" line="84"/>
                <declaration name="envcp" type="String" line="85"/>
                <declaration name="cp" type="String" line="87"/>
            </method>
            <method name="init" type="void" line="91">
                <params>
                    <param name="pathstr" type="String"/>
                </params>
                <comment line="93">
                    Save original class path string                    
                </comment>
                <comment line="100">
                    Count the number of path separators                    
                </comment>
                <comment line="105">
                    Build the class path                    
                </comment>
                <comment line="124">
                    Ignore exceptions, at least for now...                    
                </comment>
                <comment line="132">
                    Trim class path to exact size                    
                </comment>
                <declaration name="i" type="int" line="92"/>
                <scope line="96"/>
                <scope line="102"/>
                <declaration name="path" type="ClassPathEntry[]" line="106"/>
                <declaration name="len" type="int" line="107"/>
                <scope line="108">
                    <scope line="109"/>
                    <scope line="112"/>
                    <scope line="115">
                        <declaration name="file" type="File" line="116"/>
                        <scope line="117">
                            <scope line="118">
                                <declaration name="zip" type="ZipFile" line="119"/>
                            </scope>
                            <scope line="122"/>
                            <scope line="123"/>
                        </scope>
                        <scope line="126"/>
                    </scope>
                </scope>
            </method>
            <method name="init" type="void" line="137">
                <params>
                    <param name="patharray" type="String[]"/>
                </params>
                <comment line="138">
                    Save original class path string                    
                </comment>
                <comment line="150">
                    Build the class path                    
                </comment>
                <comment line="162">
                    Ignore exceptions, at least for now...                    
                </comment>
                <comment line="169">
                    Trim class path to exact size                    
                </comment>
                <scope line="139"/>
                <scope line="141">
                    <declaration name="sb" type="StringBuilder" line="142"/>
                    <scope line="143"/>
                </scope>
                <declaration name="path" type="ClassPathEntry[]" line="151"/>
                <declaration name="n" type="int" line="152"/>
                <scope line="153">
                    <declaration name="file" type="File" line="154"/>
                    <scope line="155">
                        <scope line="156">
                            <declaration name="zip" type="ZipFile" line="157"/>
                        </scope>
                        <scope line="160"/>
                        <scope line="161"/>
                    </scope>
                    <scope line="164"/>
                </scope>
            </method>
            <javadoc line="174">
                Find the specified directory in the class path                
            </javadoc>
            <method name="getDirectory" type="ClassFile" line="177">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="181">
                Load the specified file from the class path                
            </javadoc>
            <method name="getFile" type="ClassFile" line="184">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <declaration name="fileSeparatorChar" type="String" line="188"/>
            <method name="getFile" type="ClassFile" line="190">
                <params>
                    <param name="name" type="String"/>
                    <param name="isDirectory" type="boolean"/>
                </params>
                <comment line="199">
                    zip files are picky about &quot;foo&quot; vs. &quot;foo/&quot;.                    
                </comment>
                <comment line="200">
                    also, the getFiles caches are keyed with a trailing /                    
                </comment>
                <comment line="202">
                    Note: isDirectory==true &amp; basename==&quot;&quot;                    
                </comment>
                <comment line="221">
                    Don&apos;t bother checking !file.isDir,                    
                </comment>
                <comment line="222">
                    since we only look for names which                    
                </comment>
                <comment line="223">
                    cannot already be packages (foo.java, etc).                    
                </comment>
                <declaration name="subdir" type="String" line="191"/>
                <declaration name="basename" type="String" line="192"/>
                <scope line="193">
                    <declaration name="i" type="int" line="194"/>
                </scope>
                <scope line="198"/>
                <scope line="204">
                    <scope line="205">
                        <declaration name="newname" type="String" line="206"/>
                        <declaration name="entry" type="ZipEntry" line="207"/>
                        <scope line="208"/>
                    </scope>
                    <scope line="211">
                        <declaration name="file" type="File" line="212"/>
                        <declaration name="list" type="String" line="213"/>
                        <scope line="214">
                            <scope line="215"/>
                        </scope>
                        <scope line="218">
                            <scope line="219">
                                <scope line="220"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="233">
                Returns list of files given a package name and extension.                
            </javadoc>
            <method name="getFiles" type="Enumeration" line="236">
                <params>
                    <param name="pkg" type="String"/>
                    <param name="ext" type="String"/>
                </params>
                <declaration name="files" type="Hashtable" line="237"/>
                <scope line="238">
                    <scope line="239">
                        <declaration name="e" type="Enumeration" line="240"/>
                        <scope line="241">
                            <declaration name="entry" type="ZipEntry" line="242"/>
                            <declaration name="name" type="String" line="243"/>
                            <scope line="245"/>
                        </scope>
                    </scope>
                    <scope line="249">
                        <declaration name="list" type="String[]" line="250"/>
                        <scope line="251">
                            <declaration name="name" type="String" line="252"/>
                            <scope line="253">
                                <declaration name="file" type="File" line="255"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="264">
                Release resources.                
            </javadoc>
            <method name="close" type="void" line="267">
                <scope line="268">
                    <scope line="269"/>
                </scope>
            </method>
            <javadoc line="275">
                Returns original class path string                
            </javadoc>
            <method name="toString" type="String" line="278"/>
        </class>
        <class name="ClassPathEntry" line="283">
            <comment line="291">
                cache of sub-directory listings                
            </comment>
            <javadoc line="283">
                A class path entry, which can either be a directory or an open zip file.                
            </javadoc>
            <declaration name="dir" type="File" line="287"/>
            <declaration name="zip" type="ZipFile" line="288"/>
            <declaration name="subdirs" type="Hashtable" line="290"/>
            <method name="getFiles" type="String[]" line="291">
                <params>
                    <param name="subdir" type="String"/>
                </params>
                <comment line="294">
                    search the directory, exactly once                    
                </comment>
                <comment line="299">
                    should not happen, but just in case, fail silently                    
                </comment>
                <declaration name="files" type="String" line="292"/>
                <scope line="293">
                    <declaration name="sd" type="File" line="295"/>
                    <scope line="296">
                        <scope line="298"/>
                        <scope line="302">
                            <declaration name="nonEmpty" type="String" line="303"/>
                        </scope>
                    </scope>
                    <scope line="306"/>
                </scope>
            </method>
        </class>
    </source>