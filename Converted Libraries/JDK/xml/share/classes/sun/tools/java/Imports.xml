<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.java">
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.List"/>
        <import package="java.util.Collections"/>
        <import package="java.io.IOException"/>
        <class name="Imports" line="35">
            <comment line="407">
                for compatibility                
            </comment>
            <comment line="437">
                for compatibility                
            </comment>
            <implements interface="Constants"/>
            <javadoc line="35">
                This class describes the classes and packages imported
                  from a source file. A Hashtable called bindings is maintained
                  to quickly map symbol names to classes. This table is flushed
                  everytime a new import is added.
                  A class name is resolved as follows:
                  - if it is a qualified name then return the corresponding class
                  - if the name corresponds to an individually imported class then return that class
                  - check if the class is defined in any of the imported packages,
                  if it is then return it, make sure it is defined in only one package
                  - assume that the class is defined in the current package
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="currentPackage" type="Identifier" line="55"/>
            <javadoc line="55">
                The current package, which is implicitly imported,
                  and has precedence over other imported packages.                
            </javadoc>
            <declaration name="currentPackageWhere" type="long" line="61"/>
            <javadoc line="61">
                A location for the current package declaration.  Used to
                  report errors against the current package.                
            </javadoc>
            <declaration name="classes" type="Hashtable" line="67"/>
            <javadoc line="67">
                The imported classes, including memoized imports from packages.                
            </javadoc>
            <declaration name="packages" type="Vector" line="72"/>
            <javadoc line="72">
                The imported package identifiers.  This will not contain duplicate
                  imports for the same package.  It will also not contain the
                  current package.                
            </javadoc>
            <declaration name="singles" type="Vector" line="79"/>
            <javadoc line="79">
                The (originally) imported classes.
                  A vector of IdentifierToken.                
            </javadoc>
            <declaration name="checked" type="int" line="85"/>
            <javadoc line="85">
                Are the import names checked yet?                
            </javadoc>
            <javadoc line="90">
                Constructor, always import java.lang.                
            </javadoc>
            <method name="Imports" type="constructor" line="93">
                <params>
                    <param name="env" type="Environment"/>
                </params>
            </method>
            <javadoc line="97">
                Check the names of the imports.                
            </javadoc>
            <method name="resolve" type="void" line="100">
                <params>
                    <param name="env" type="Environment"/>
                </params>
                <comment line="106">
                    After all class information has been read, now we can                    
                </comment>
                <comment line="107">
                    safely inspect import information for errors.                    
                </comment>
                <comment line="108">
                    If we did this before all parsing was finished,                    
                </comment>
                <comment line="109">
                    we could get vicious circularities, since files can                    
                </comment>
                <comment line="110">
                    import each others&apos; classes.                    
                </comment>
                <comment line="112">
                    A note: the resolution of the package java.lang takes place                    
                </comment>
                <comment line="113">
                    in the sun.tools.javac.BatchEnvironment#setExemptPackages().                    
                </comment>
                <comment line="115">
                    Make sure that the current package&apos;s name does not collide                    
                </comment>
                <comment line="116">
                    with the name of an existing class. (bug 4101529)                    
                </comment>
                <comment line="117">
                                        
                </comment>
                <comment line="118">
                    This change has been backed out because, on WIN32, it                    
                </comment>
                <comment line="119">
                    failed to distinguish between java.awt.event and                    
                </comment>
                <comment line="120">
                    java.awt.Event when looking for a directory.  We will                    
                </comment>
                <comment line="121">
                    add this back in later.                    
                </comment>
                <comment line="122">
                                        
                </comment>
                <comment line="123">
                    if (currentPackage != idNull) {                    
                </comment>
                <comment line="124">
                    Identifier resolvedName =                    
                </comment>
                <comment line="125">
                    env.resolvePackageQualifiedName(currentPackage);                    
                </comment>
                <comment line="126">
                                        
                </comment>
                <comment line="127">
                    Identifier className = resolvedName.getTopName();                    
                </comment>
                <comment line="128">
                                        
                </comment>
                <comment line="129">
                    if (importable(className, env)) {                    
                </comment>
                <comment line="130">
                    // The name of the current package is also the name                    
                </comment>
                <comment line="131">
                    // of a class.                    
                </comment>
                <comment line="132">
                    env.error(currentPackageWhere, &quot;package.class.conflict&quot;,                    
                </comment>
                <comment line="133">
                    currentPackage, className);                    
                </comment>
                <comment line="134">
                    }                    
                </comment>
                <comment line="135">
                    }                    
                </comment>
                <comment line="143">
                    Check to see if this package is exempt from the &quot;exists&quot;                    
                </comment>
                <comment line="144">
                    check.  See the note in                    
                </comment>
                <comment line="145">
                    sun.tools.javac.BatchEnvironment#setExemptPackages()                    
                </comment>
                <comment line="146">
                    for more information.                    
                </comment>
                <comment line="152">
                    (Note: This code is moved from BatchParser.importPackage().)                    
                </comment>
                <comment line="156">
                    This name is a real class; better not be a package too.                    
                </comment>
                <comment line="161">
                    Pass an &quot;inner&quot; name to the imports.                    
                </comment>
                <comment line="168">
                    nm exists, and rnm.getTopName() is a parent package                    
                </comment>
                <comment line="184">
                    (Note: This code is moved from BatchParser.importClass().)                    
                </comment>
                <comment line="190">
                    (Note: This code is moved from Imports.addClass().)                    
                </comment>
                <comment line="193">
                    make sure it isn&apos;t already imported explicitly                    
                </comment>
                <comment line="207">
                    The code here needs to check to see, if we                    
                </comment>
                <comment line="208">
                    are importing an inner class, that all of its                    
                </comment>
                <comment line="209">
                    enclosing classes are visible to us.  To check this,                    
                </comment>
                <comment line="210">
                    we need to construct a definition for the class.                    
                </comment>
                <comment line="211">
                    The code here used to call...                    
                </comment>
                <comment line="212">
                                        
                </comment>
                <comment line="213">
                    ClassDefinition def = env.getClassDefinition(nm);                    
                </comment>
                <comment line="214">
                                        
                </comment>
                <comment line="215">
                    ...but that interfered with the basicCheck()&apos;ing of                    
                </comment>
                <comment line="216">
                    interfaces in certain cases (bug no. 4086139).  Never                    
                </comment>
                <comment line="217">
                    fear.  Instead we load the class with a call to the                    
                </comment>
                <comment line="218">
                    new getClassDefinitionNoCheck() which does no basicCheck() and                    
                </comment>
                <comment line="219">
                    lets us answer the questions we are interested in w/o                    
                </comment>
                <comment line="220">
                    interfering with the demand-driven nature of basicCheck().                    
                </comment>
                <comment line="223">
                    Get a declaration                    
                </comment>
                <comment line="226">
                    Get the definition (no env argument)                    
                </comment>
                <comment line="229">
                    Get the true name of the package containing this class.                    
                </comment>
                <comment line="230">
                    `pkg&apos; from above is insufficient.  It includes the                    
                </comment>
                <comment line="231">
                    names of our enclosing classes.  Fix for 4086815.                    
                </comment>
                <comment line="234">
                    Walk out the outerClass chain, ensuring that each level                    
                </comment>
                <comment line="235">
                    is visible from our perspective.                    
                </comment>
                <scope line="101"/>
                <declaration name="resolvedPackages" type="Vector" line="137"/>
                <scope line="138">
                    <declaration name="t" type="IdentifierToken" line="139"/>
                    <declaration name="nm" type="Identifier" line="140"/>
                    <declaration name="where" type="long" line="141"/>
                    <scope line="147"/>
                    <scope line="153">
                        <declaration name="rnm" type="Identifier" line="154"/>
                        <scope line="155">
                            <scope line="157"/>
                        </scope>
                        <scope line="165"/>
                        <scope line="167"/>
                    </scope>
                    <scope line="172"/>
                </scope>
                <scope line="178">
                    <declaration name="t" type="IdentifierToken" line="179"/>
                    <declaration name="nm" type="Identifier" line="180"/>
                    <declaration name="where" type="long" line="181"/>
                    <declaration name="pkg" type="Identifier" line="182"/>
                    <scope line="186"/>
                    <declaration name="snm" type="Identifier" line="191"/>
                    <declaration name="className" type="Identifier" line="194"/>
                    <scope line="195">
                        <declaration name="f1" type="Identifier" line="196"/>
                        <declaration name="f2" type="Identifier" line="198"/>
                        <scope line="200"/>
                    </scope>
                    <scope line="222">
                        <declaration name="decl" type="ClassDeclaration" line="224"/>
                        <declaration name="def" type="ClassDefinition" line="227"/>
                        <declaration name="importedPackage" type="Identifier" line="232"/>
                        <scope line="236">
                            <scope line="239"/>
                        </scope>
                    </scope>
                    <scope line="244"/>
                    <scope line="246"/>
                </scope>
            </method>
            <javadoc line="253">
                Lookup a class, given the current set of imports,
                  AmbiguousClass exception is thrown if the name can be
                  resolved in more than one way. A ClassNotFound exception
                  is thrown if the class is not found in the imported classes
                  and packages.                
            </javadoc>
            <method name="resolve" type="Identifier" line="260">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="nm" type="Identifier"/>
                </params>
                <comment line="263">
                    If the class has the special ambiguous prefix, then we will                    
                </comment>
                <comment line="264">
                    get the original AmbiguousClass exception by removing the                    
                </comment>
                <comment line="265">
                    prefix and proceeding in the normal fashion.                    
                </comment>
                <comment line="266">
                    (part of solution for 4059855)                    
                </comment>
                <comment line="272">
                    Don&apos;t bother it is already qualified                    
                </comment>
                <comment line="282">
                    Check if it was imported before                    
                </comment>
                <comment line="289">
                    Note: the section below has changed a bit during the fix                    
                </comment>
                <comment line="290">
                    for bug 4093217.  The current package is no longer grouped                    
                </comment>
                <comment line="291">
                    with the rest of the import-on-demands; it is now checked                    
                </comment>
                <comment line="292">
                    separately.  Also, the list of import-on-demands is now                    
                </comment>
                <comment line="293">
                    guarranteed to be duplicate-free, so the code below can afford                    
                </comment>
                <comment line="294">
                    to be a bit simpler.                    
                </comment>
                <comment line="296">
                    First we look in the current package.  The current package                    
                </comment>
                <comment line="297">
                    is given precedence over the rest of the import-on-demands,                    
                </comment>
                <comment line="298">
                    which means, among other things, that a class in the current                    
                </comment>
                <comment line="299">
                    package cannot be ambiguous.                    
                </comment>
                <comment line="304">
                    If it isn&apos;t in the current package, try to find it in                    
                </comment>
                <comment line="305">
                    our import-on-demands.                    
                </comment>
                <comment line="313">
                    We haven&apos;t found any other matching classes yet.                    
                </comment>
                <comment line="314">
                    Set className to what we&apos;ve found and continue                    
                </comment>
                <comment line="315">
                    looking for an ambiguity.                    
                </comment>
                <comment line="321">
                    We&apos;ve found an ambiguity.                    
                </comment>
                <comment line="328">
                    Make sure a class was found                    
                </comment>
                <comment line="334">
                    Remember the binding                    
                </comment>
                <scope line="267"/>
                <scope line="271"/>
                <scope line="277"/>
                <declaration name="className" type="Identifier" line="283"/>
                <scope line="284"/>
                <declaration name="id" type="Identifier" line="300"/>
                <scope line="301"/>
                <scope line="303">
                    <declaration name="e" type="Enumeration" line="306"/>
                    <scope line="307">
                        <declaration name="t" type="IdentifierToken" line="308"/>
                        <scope line="311">
                            <scope line="312"/>
                            <scope line="317"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="329"/>
            </method>
            <javadoc line="340">
                Check to see if &apos;id&apos; names an importable class in `env&apos;.
                  This method was made public and static for utility.                
            </javadoc>
            <method name="importable" type="boolean" line="344">
                <params>
                    <param name="id" type="Identifier"/>
                    <param name="env" type="Environment"/>
                </params>
                <comment line="350">
                    load the top class and look inside it                    
                </comment>
                <comment line="352">
                    There used to be a call to...                    
                </comment>
                <comment line="353">
                    env.getClassDeclaration(id.getTopName());                    
                </comment>
                <comment line="354">
                    ...here.  It has been replaced with the                    
                </comment>
                <comment line="355">
                    two statements below.  These should be functionally                    
                </comment>
                <comment line="356">
                    the same except for the fact that                    
                </comment>
                <comment line="357">
                    getClassDefinitionNoCheck() does not call                    
                </comment>
                <comment line="358">
                    basicCheck().  This allows us to avoid a circular                    
                </comment>
                <comment line="359">
                    need to do basicChecking that can arise with                    
                </comment>
                <comment line="360">
                    certain patterns of importing and inheritance.                    
                </comment>
                <comment line="361">
                    This is a fix for a variant of bug 4086139.                    
                </comment>
                <comment line="362">
                                        
                </comment>
                <comment line="363">
                    Note: the special case code in env.getClassDefinition()                    
                </comment>
                <comment line="364">
                    which handles inner class names is not replicated below.                    
                </comment>
                <comment line="365">
                    This should be okay, as we are looking up id.getTopName(),                    
                </comment>
                <comment line="366">
                    not id.                    
                </comment>
                <scope line="345"/>
                <scope line="347"/>
                <scope line="349">
                    <scope line="351">
                        <declaration name="decl" type="ClassDeclaration" line="367"/>
                        <declaration name="c" type="ClassDefinition" line="369"/>
                    </scope>
                    <scope line="373"/>
                </scope>
            </method>
            <javadoc line="379">
                Suppose a resolve() call has failed.
                  This routine can be used silently to give a reasonable
                  default qualification (the current package) to the identifier.
                  This decision is recorded for future reference.                
            </javadoc>
            <method name="forceResolve" type="Identifier" line="385">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="nm" type="Identifier"/>
                </params>
                <declaration name="className" type="Identifier" line="389"/>
                <scope line="390"/>
            </method>
            <javadoc line="400">
                Add a class import                
            </javadoc>
            <method name="addClass" type="void" line="403">
                <params>
                    <param name="t" type="IdentifierToken"/>
                </params>
            </method>
            <method name="addClass" type="void" line="407">
                <params>
                    <param name="nm" type="Identifier"/>
                </params>
            </method>
            <javadoc line="411">
                Add a package import, or perhaps an inner class scope.
                  Ignore any duplicate imports.                
            </javadoc>
            <method name="addPackage" type="void" line="415">
                <params>
                    <param name="t" type="IdentifierToken"/>
                </params>
                <comment line="418">
                    If this is a duplicate import for the current package,                    
                </comment>
                <comment line="419">
                    ignore it.                    
                </comment>
                <comment line="424">
                    If this is a duplicate of a package which has already been                    
                </comment>
                <comment line="425">
                    added to the list, ignore it.                    
                </comment>
                <comment line="433">
                    Add the package to the list.                    
                </comment>
                <declaration name="name" type="Identifier" line="416"/>
                <scope line="420"/>
                <declaration name="size" type="int" line="426"/>
                <scope line="427">
                    <scope line="428"/>
                </scope>
            </method>
            <method name="addPackage" type="void" line="437">
                <params>
                    <param name="id" type="Identifier"/>
                </params>
            </method>
            <javadoc line="441">
                Specify the current package with an IdentifierToken.                
            </javadoc>
            <method name="setCurrentPackage" type="void" line="444">
                <params>
                    <param name="t" type="IdentifierToken"/>
                </params>
            </method>
            <javadoc line="449">
                Specify the current package                
            </javadoc>
            <method name="setCurrentPackage" type="void" line="452">
                <params>
                    <param name="id" type="Identifier"/>
                </params>
            </method>
            <javadoc line="456">
                Report the current package                
            </javadoc>
            <method name="getCurrentPackage" type="Identifier" line="459"/>
            <javadoc line="463">
                Return an unmodifiable list of IdentifierToken representing
                  packages specified as imports.                
            </javadoc>
            <method name="getImportedPackages" type="List" line="467"/>
            <javadoc line="471">
                Return an unmodifiable list of IdentifierToken representing
                  classes specified as imports.                
            </javadoc>
            <method name="getImportedClasses" type="List" line="475"/>
            <javadoc line="479">
                Extend an environment with my resolve() method.                
            </javadoc>
            <method name="newEnvironment" type="Environment" line="482">
                <params>
                    <param name="env" type="Environment"/>
                </params>
            </method>
        </class>
        <class name="ImportEnvironment" line="487">
            <extends class="Environment"/>
            <comment line="407">
                for compatibility                
            </comment>
            <comment line="437">
                for compatibility                
            </comment>
            <declaration name="imports" type="Imports" line="489"/>
            <method name="ImportEnvironment" type="constructor" line="491">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="imports" type="Imports"/>
                </params>
            </method>
            <method name="resolve" type="Identifier" line="496">
                <params>
                    <param name="nm" type="Identifier"/>
                </params>
            </method>
            <method name="getImports" type="Imports" line="500"/>
        </class>
    </source>