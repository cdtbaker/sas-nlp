<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.java">
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.util.Hashtable"/>
        <class name="Scanner" line="5">
            <implements interface="Constants"/>
            <javadoc line="5">
                A Scanner for Java tokens. Errors are reported
                  to the environment object.&lt;p&gt;
                  The scanner keeps track of the current token,
                  the value of the current token (if any), and the start
                  position of the current token.&lt;p&gt;
                  The scan() method advances the scanner to the next
                  token in the input.&lt;p&gt;
                  The match() method is used to quickly match opening
                  brackets (ie: &apos;(&apos;, &apos;{&apos;, or &apos;[&apos;) with their closing
                  counter part. This is useful during error recovery.&lt;p&gt;
                  An position consists of: ((linenr &lt;&lt; WHEREOFFSETBITS) | offset)
                  this means that both the line number and the exact offset into
                  the file are encoded in each position value.&lt;p&gt;
                  The compiler treats either &quot;\n&quot;, &quot;\r&quot; or &quot;\r\n&quot; as the
                  end of a line.&lt;p&gt;
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
                <author>
                    Arthur van Hoff                    
                </author>
            </javadoc>
            <declaration name="OFFSETINC" type="long" line="27"/>
            <javadoc line="27">
                The increment for each character.                
            </javadoc>
            <declaration name="LINEINC" type="long" line="31"/>
            <javadoc line="31">
                The increment for each line.                
            </javadoc>
            <declaration name="EOF" type="int" line="35"/>
            <javadoc line="35">
                End of input                
            </javadoc>
            <declaration name="env" type="Environment" line="39"/>
            <javadoc line="39">
                Where errors are reported                
            </javadoc>
            <declaration name="in" type="ScannerInputReader" line="43"/>
            <javadoc line="43">
                Input reader                
            </javadoc>
            <declaration name="scanComments" type="boolean" line="47"/>
            <javadoc line="47">
                If true, present all comments as tokens.
                  Contents are not saved, but positions are recorded accurately,
                  so the comment can be recovered from the text.
                  Line terminations are also returned as comment tokens,
                  and may be distinguished by their start and end positions,
                  which are equal (meaning, these tokens contain no chars).                
            </javadoc>
            <declaration name="token" type="int" line="56"/>
            <javadoc line="56">
                Current token                
            </javadoc>
            <declaration name="pos" type="long" line="60"/>
            <javadoc line="60">
                The position of the current token                
            </javadoc>
            <declaration name="prevPos" type="long" line="64"/>
            <javadoc line="64">
                The position of the previous token                
            </javadoc>
            <declaration name="ch" type="int" line="68"/>
            <javadoc line="68">
                The current character                
            </javadoc>
            <declaration name="charValue" type="char" line="72"/>
            <declaration name="intValue" type="int" line="73"/>
            <declaration name="longValue" type="long" line="74"/>
            <declaration name="floatValue" type="float" line="75"/>
            <declaration name="doubleValue" type="double" line="76"/>
            <declaration name="stringValue" type="String" line="77"/>
            <declaration name="idValue" type="Identifier" line="78"/>
            <declaration name="radix" type="int" line="79"/>
            <declaration name="docComment" type="String" line="80"/>
            <declaration name="count" type="int" line="81"/>
            <declaration name="buffer" type="char" line="82"/>
            <method name="growBuffer" type="void" line="83">
                <declaration name="newBuffer" type="char" line="84"/>
            </method>
            <method name="putc" type="void" line="88">
                <params>
                    <param name="ch" type="int"/>
                </params>
                <scope line="89"/>
            </method>
            <method name="bufferString" type="String" line="94"/>
            <javadoc line="97">
                Create a scanner to scan an input stream.                
            </javadoc>
            <method name="Scanner" type="constructor" line="100">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <javadoc line="104">
                Setup input from the given input stream,
                  and scan the first token from it.                
            </javadoc>
            <method name="useInputStream" type="void" line="108">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <scope line="109"/>
                <scope line="112"/>
            </method>
            <javadoc line="120">
                Create a scanner to scan an input stream.                
            </javadoc>
            <method name="Scanner" type="constructor" line="123">
                <params>
                    <param name="env" type="Environment"/>
                </params>
            </method>
            <javadoc line="126">
                Define a keyword.                
            </javadoc>
            <method name="defineKeyword" type="void" line="129">
                <params>
                    <param name="val" type="int"/>
                </params>
            </method>
            <javadoc line="132">
                Initialized keyword and token Hashtables                
            </javadoc>
            <scope line="135"/>
            <javadoc line="188">
                Scan a comment. This method should be
                  called once the initial /,  and the next
                  character have been read.                
            </javadoc>
            <method name="skipComment" type="void" line="193">
                <scope line="194">
                    <scope line="200"/>
                </scope>
            </method>
            <javadoc line="211">
                Scan a doc comment. This method should be called
                  once the initial /,  and  have been read. It gathers
                  the content of the comment (witout leading spaces and &apos;&apos;s)
                  in the string buffer.                
            </javadoc>
            <method name="scanDocComment" type="String" line="217">
                <declaration name="c" type="int" line="218"/>
                <declaration name="in" type="ScannerInputReader" line="219"/>
                <declaration name="buffer" type="char[]" line="220"/>
                <declaration name="count" type="int" line="221"/>
                <scope line="223"/>
                <scope line="227"/>
                <scope line="230">
                    <scope line="231"/>
                    <scope line="263">
                        <scope line="264"/>
                        <scope line="268"/>
                    </scope>
                    <scope line="273">
                        <scope line="281"/>
                        <scope line="285"/>
                        <scope line="292"/>
                        <scope line="339"/>
                    </scope>
                </scope>
                <scope line="349">
                    <declaration name="i" type="int" line="350"/>
                    <scope line="351"/>
                </scope>
                <scope line="404"/>
            </method>
            <javadoc line="408">
                Scan a number. The first digit of the number should be the current
                  character.  We may be scanning hex, decimal, or octal at this point                
            </javadoc>
            <method name="scanNumber" type="void" line="412">
                <declaration name="seenNonOctal" type="boolean" line="413"/>
                <declaration name="overflow" type="boolean" line="414"/>
                <declaration name="seenDigit" type="boolean" line="415"/>
                <declaration name="value" type="long" line="417"/>
                <scope line="420">
                    <scope line="439"/>
                    <scope line="444"/>
                    <scope line="448"/>
                    <scope line="459"/>
                    <scope line="483"/>
                    <scope line="488"/>
                </scope>
                <scope line="497">
                    <scope line="499"/>
                </scope>
                <scope line="506"/>
                <scope line="511"/>
                <scope line="516">
                    <scope line="517">
                        <scope line="519"/>
                    </scope>
                    <scope line="536">
                        <scope line="537"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="556">
                Scan a float.  We are either looking at the decimal, or we have already
                  seen it and put it into the buffer.  We haven&apos;t seen an exponent.
                  Scan a float.  Should be called with the current character is either
                  the &apos;e&apos;, &apos;E&apos; or &apos;.&apos;                
            </javadoc>
            <method name="scanReal" type="void" line="562">
                <declaration name="seenExponent" type="boolean" line="563"/>
                <declaration name="isSingleFloat" type="boolean" line="564"/>
                <declaration name="lastChar" type="char" line="565"/>
                <scope line="566"/>
                <scope line="570"/>
                <scope line="608">
                    <scope line="610"/>
                </scope>
                <scope line="617">
                    <scope line="619">
                        <scope line="621"/>
                        <scope line="624">
                            <declaration name="string" type="String" line="625"/>
                            <scope line="627"/>
                            <scope line="630"/>
                        </scope>
                        <scope line="634">
                            <declaration name="string" type="String" line="635"/>
                            <scope line="637"/>
                            <scope line="640"/>
                        </scope>
                    </scope>
                    <scope line="645"/>
                </scope>
            </method>
            <method name="looksLikeZero" type="boolean" line="653">
                <params>
                    <param name="token" type="String"/>
                </params>
                <declaration name="length" type="int" line="654"/>
                <scope line="655"/>
            </method>
            <javadoc line="679">
                Scan an escape character.                
                <return>
                    the character or -1 if it escaped an
                      end-of-line.                    
                </return>
            </javadoc>
            <method name="scanEscapeChar" type="int" line="684">
                <declaration name="p" type="long" line="685"/>
                <scope line="695">
                    <declaration name="n" type="int" line="696"/>
                    <scope line="697">
                        <scope line="710"/>
                    </scope>
                    <scope line="717"/>
                </scope>
            </method>
            <javadoc line="751">
                Scan a string. The current character
                  should be the opening &quot; of the string.                
            </javadoc>
            <method name="scanString" type="void" line="755">
                <scope line="759">
                    <scope line="776">
                        <declaration name="c" type="int" line="777"/>
                        <scope line="778"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="790">
                Scan a character. The current character should be
                  the opening &apos; of the character constant.                
            </javadoc>
            <method name="scanCharacter" type="void" line="794">
                <declaration name="c" type="int" line="798"/>
                <scope line="805"/>
                <scope line="819"/>
                <scope line="822">
                    <scope line="824"/>
                </scope>
            </method>
            <javadoc line="839">
                Scan an Identifier. The current character should
                  be the first character of the identifier.                
            </javadoc>
            <method name="scanIdentifier" type="void" line="843">
                <scope line="845">
                    <scope line="914"/>
                </scope>
            </method>
            <javadoc line="922">
                The ending position of the current token                
            </javadoc>
            <method name="getEndPos" type="long" line="925"/>
            <javadoc line="928">
                If the current token is IDENT, return the identifier occurrence.
                  It will be freshly allocated.                
            </javadoc>
            <method name="getIdToken" type="IdentifierToken" line="932"/>
            <javadoc line="935">
                Scan the next token.                
                <return>
                    the position of the previous token.                    
                </return>
            </javadoc>
            <method name="scan" type="long" line="939"/>
            <method name="xscan" type="long" line="942">
                <declaration name="in" type="ScannerInputReader" line="943"/>
                <declaration name="retPos" type="long" line="944"/>
                <scope line="947">
                    <scope line="954"/>
                    <scope line="968"/>
                    <scope line="975"/>
                    <scope line="978"/>
                    <scope line="981"/>
                    <scope line="1105"/>
                    <scope line="1128"/>
                    <scope line="1172"/>
                    <scope line="1180"/>
                    <scope line="1188"/>
                    <scope line="1196"/>
                    <scope line="1204"/>
                    <scope line="1268"/>
                    <scope line="1276"/>
                </scope>
            </method>
            <javadoc line="1286">
                Scan to a matching &apos;}&apos;, &apos;]&apos; or &apos;)&apos;. The current token must be
                  a &apos;{&apos;, &apos;[&apos; or &apos;(&apos;;                
            </javadoc>
            <method name="match" type="void" line="1290">
                <params>
                    <param name="open" type="int"/>
                    <param name="close" type="int"/>
                </params>
                <declaration name="depth" type="int" line="1291"/>
                <scope line="1292">
                    <scope line="1294"/>
                    <scope line="1297">
                        <scope line="1298"/>
                    </scope>
                    <scope line="1302"/>
                </scope>
            </method>
        </class>
    </source>