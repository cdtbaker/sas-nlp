<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.java">
        <import package="sun.tools.tree.Node"/>
        <import package="sun.tools.tree.Vset"/>
        <import package="sun.tools.tree.Expression"/>
        <import package="sun.tools.tree.Statement"/>
        <import package="sun.tools.tree.Context"/>
        <import package="sun.tools.asm.Assembler"/>
        <import package="java.io.PrintStream"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <class name="MemberDefinition" line="12">
            <implements interface="Constants"/>
            <javadoc line="12">
                This class defines a member of a Java class:
                  a variable, a method, or an inner class.
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="where" type="long" line="20"/>
            <declaration name="modifiers" type="int" line="21"/>
            <declaration name="type" type="Type" line="22"/>
            <declaration name="documentation" type="String" line="23"/>
            <declaration name="expIds" type="IdentifierToken" line="24"/>
            <declaration name="exp" type="ClassDeclaration" line="25"/>
            <declaration name="value" type="Node" line="26"/>
            <declaration name="clazz" type="ClassDefinition" line="27"/>
            <declaration name="name" type="Identifier" line="28"/>
            <declaration name="innerClass" type="ClassDefinition" line="29"/>
            <declaration name="nextMember" type="MemberDefinition" line="30"/>
            <declaration name="nextMatch" type="MemberDefinition" line="31"/>
            <declaration name="accessPeer" type="MemberDefinition" line="32"/>
            <declaration name="superAccessMethod" type="boolean" line="33"/>
            <javadoc line="34">
                Constructor                
            </javadoc>
            <method name="MemberDefinition" type="constructor" line="37">
                <params>
                    <param name="where" type="long"/>
                    <param name="clazz" type="ClassDefinition"/>
                    <param name="modifiers" type="int"/>
                    <param name="type" type="Type"/>
                    <param name="name" type="Identifier"/>
                    <param name="expIds" type="IdentifierToken"/>
                    <param name="value" type="Node"/>
                </params>
                <scope line="38"/>
            </method>
            <javadoc line="49">
                Constructor for an inner class.
                  Inner classes are represented as fields right along with
                  variables and methods for simplicity of data structure,
                  and to reflect properly the textual declaration order.
                  &lt;p&gt;
                  This constructor calls the generic constructor for this
                  class, extracting all necessary values from the innerClass.                
            </javadoc>
            <method name="MemberDefinition" type="constructor" line="58">
                <params>
                    <param name="innerClass" type="ClassDefinition"/>
                </params>
            </method>
            <declaration name="proxyCache" type="Map" line="62"/>
            <javadoc line="62">
                A cache of previously created proxy members.  Used to ensure
                  uniqueness of proxy objects.  See the makeProxyMember method
                  defined below.                
            </javadoc>
            <javadoc line="68">
                Create a member which is externally the same as `field&apos; but
                  is defined in class `classDef&apos;.  This is used by code
                  in sun.tools.tree.(MethodExpression,FieldExpression) as
                  part of the fix for bug 4135692.
                  Proxy members should not be added, ala addMember(), to classes.
                  They are merely &quot;stand-ins&quot; to produce modified MethodRef
                  constant pool entries during code generation.
                  We keep a cache of previously created proxy members not to
                  save time or space, but to ensure uniqueness of the proxy
                  member for any (field,classDef) pair.  If these are not made
                  unique then we can end up generating duplicate MethodRef
                  constant pool entries during code generation.                
            </javadoc>
            <method name="makeProxyMember" type="MemberDefinition" line="82">
                <params>
                    <param name="field" type="MemberDefinition"/>
                    <param name="classDef" type="ClassDefinition"/>
                    <param name="env" type="Environment"/>
                </params>
                <scope line="83"/>
                <declaration name="key" type="String" line="86"/>
                <declaration name="proxy" type="MemberDefinition" line="87"/>
            </method>
            <javadoc line="94">
                Get the position in the input                
            </javadoc>
            <method name="getWhere" type="long" line="97"/>
            <javadoc line="100">
                Get the class declaration                
            </javadoc>
            <method name="getClassDeclaration" type="ClassDeclaration" line="103"/>
            <javadoc line="106">
                A stub.  Subclasses can do more checking.                
            </javadoc>
            <method name="resolveTypeStructure" type="void" line="109">
                <params>
                    <param name="env" type="Environment"/>
                </params>
            </method>
            <javadoc line="111">
                Get the class declaration in which the field is actually defined                
            </javadoc>
            <method name="getDefiningClassDeclaration" type="ClassDeclaration" line="114"/>
            <javadoc line="117">
                Get the class definition                
            </javadoc>
            <method name="getClassDefinition" type="ClassDefinition" line="120"/>
            <javadoc line="123">
                Get the field&apos;s top-level enclosing class                
            </javadoc>
            <method name="getTopClass" type="ClassDefinition" line="126"/>
            <javadoc line="129">
                Get the field&apos;s modifiers                
            </javadoc>
            <method name="getModifiers" type="int" line="132"/>
            <method name="subModifiers" type="void" line="135">
                <params>
                    <param name="mod" type="int"/>
                </params>
            </method>
            <method name="addModifiers" type="void" line="138">
                <params>
                    <param name="mod" type="int"/>
                </params>
            </method>
            <javadoc line="141">
                Get the field&apos;s type                
            </javadoc>
            <method name="getType" type="Type" line="144"/>
            <javadoc line="147">
                Get the field&apos;s name                
            </javadoc>
            <method name="getName" type="Identifier" line="150"/>
            <javadoc line="153">
                Get arguments (a vector of LocalMember)                
            </javadoc>
            <method name="getArguments" type="Vector" line="156"/>
            <javadoc line="159">
                Get the exceptions that are thrown by this method.                
            </javadoc>
            <method name="getExceptions" type="ClassDeclaration[]" line="162">
                <params>
                    <param name="env" type="Environment"/>
                </params>
                <scope line="163"/>
            </method>
            <method name="getExceptionIds" type="IdentifierToken[]" line="169"/>
            <javadoc line="172">
                Get an inner class.                
            </javadoc>
            <method name="getInnerClass" type="ClassDefinition" line="175"/>
            <javadoc line="178">
                Is this a synthetic field which holds a copy of,
                  or reference to, a local variable or enclosing instance?                
            </javadoc>
            <method name="isUplevelValue" type="boolean" line="182">
                <scope line="183"/>
                <declaration name="name" type="String" line="186"/>
            </method>
            <method name="isAccessMethod" type="boolean" line="189"/>
            <javadoc line="192">
                Is this a synthetic method which provides access to a
                  visible private member?                
            </javadoc>
            <method name="getAccessMethodTarget" type="MemberDefinition" line="196">
                <scope line="197">
                    <scope line="198">
                        <scope line="199"/>
                    </scope>
                </scope>
            </method>
            <method name="setAccessMethodTarget" type="void" line="206">
                <params>
                    <param name="target" type="MemberDefinition"/>
                </params>
                <scope line="207">
                    <scope line="208"/>
                </scope>
            </method>
            <javadoc line="214">
                If this method is a getter for a private field, return the setter.                
            </javadoc>
            <method name="getAccessUpdateMember" type="MemberDefinition" line="217">
                <scope line="218">
                    <scope line="219">
                        <scope line="220"/>
                    </scope>
                </scope>
            </method>
            <method name="setAccessUpdateMember" type="void" line="227">
                <params>
                    <param name="updater" type="MemberDefinition"/>
                </params>
                <scope line="228">
                    <scope line="229"/>
                </scope>
            </method>
            <javadoc line="236">
                Is this an access method for a field selection or method call
                  of the form &apos;...super.foo&apos; or &apos;...super.foo()&apos;?                
            </javadoc>
            <method name="isSuperAccessMethod" type="boolean" line="240"/>
            <javadoc line="243">
                Mark this member as an access method for a field selection
                  or method call via the &apos;super&apos; keyword.                
            </javadoc>
            <method name="setIsSuperAccessMethod" type="void" line="247">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="250">
                Tell if this is a final variable without an initializer.
                  Such variables are subject to definite single assignment.                
            </javadoc>
            <method name="isBlankFinal" type="boolean" line="254"/>
            <method name="isNeverNull" type="boolean" line="257">
                <scope line="258"/>
            </method>
            <javadoc line="263">
                Get the field&apos;s final value (may return null)                
            </javadoc>
            <method name="getValue" type="Node" line="266">
                <params>
                    <param name="env" type="Environment"/>
                </params>
            </method>
            <method name="getValue" type="Node" line="269"/>
            <method name="setValue" type="void" line="272">
                <params>
                    <param name="value" type="Node"/>
                </params>
            </method>
            <method name="getInitialValue" type="Object" line="275"/>
            <javadoc line="278">
                Get the next field or the next match                
            </javadoc>
            <method name="getNextMember" type="MemberDefinition" line="281"/>
            <method name="getNextMatch" type="MemberDefinition" line="284"/>
            <javadoc line="287">
                Get the field&apos;s documentation                
            </javadoc>
            <method name="getDocumentation" type="String" line="290"/>
            <javadoc line="293">
                Request a check of the field definition.                
            </javadoc>
            <method name="check" type="void" line="296">
                <params>
                    <param name="env" type="Environment"/>
                </params>
            </method>
            <javadoc line="298">
                Really check the field definition.                
            </javadoc>
            <method name="check" type="Vset" line="301">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="vset" type="Vset"/>
                </params>
            </method>
            <javadoc line="304">
                Generate code                
            </javadoc>
            <method name="code" type="void" line="307">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="asm" type="Assembler"/>
                </params>
            </method>
            <method name="codeInit" type="void" line="310">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="ctx" type="Context"/>
                    <param name="asm" type="Assembler"/>
                </params>
            </method>
            <javadoc line="313">
                Tells whether to report a deprecation error for this field.                
            </javadoc>
            <method name="reportDeprecated" type="boolean" line="316">
                <params>
                    <param name="env" type="Environment"/>
                </params>
            </method>
            <javadoc line="319">
                Check if a field can reach another field (only considers
                  forward references, not the access modifiers).                
            </javadoc>
            <method name="canReach" type="boolean" line="323">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="f" type="MemberDefinition"/>
                </params>
                <scope line="325"/>
            </method>
            <declaration name="PUBLIC_ACCESS" type="int" line="331"/>
            <javadoc line="331">
                Constants used by getAccessLevel() to represent the access
                  modifiers as numbers.                
            </javadoc>
            <declaration name="PROTECTED_ACCESS" type="int" line="336"/>
            <declaration name="PACKAGE_ACCESS" type="int" line="337"/>
            <declaration name="PRIVATE_ACCESS" type="int" line="338"/>
            <javadoc line="339">
                Return the access modifier of this member as a number.  The idea
                  is that this number may be used to check properties like &quot;the
                  access modifier of x is more restrictive than the access
                  modifier of y&quot; with a simple inequality test:
                  &quot;x.getAccessLevel() &gt; y.getAccessLevel.
                  This is an internal utility method.                
            </javadoc>
            <method name="getAccessLevel" type="int" line="347">
                <scope line="348"/>
                <scope line="351"/>
                <scope line="354"/>
                <scope line="357"/>
                <scope line="360"/>
            </method>
            <javadoc line="364">
                Munge our error message to report whether the override conflict
                  came from an inherited method or a declared method.                
            </javadoc>
            <method name="reportError" type="void" line="368">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="errorString" type="String"/>
                    <param name="clazz" type="ClassDeclaration"/>
                    <param name="method" type="MemberDefinition"/>
                </params>
                <scope line="369"/>
                <scope line="372"/>
            </method>
            <javadoc line="376">
                Convenience method to see if two methods return the same type                
            </javadoc>
            <method name="sameReturnType" type="boolean" line="379">
                <params>
                    <param name="method" type="MemberDefinition"/>
                </params>
                <scope line="380"/>
                <declaration name="myReturnType" type="Type" line="383"/>
                <declaration name="yourReturnType" type="Type" line="384"/>
            </method>
            <javadoc line="387">
                Check to see if `this&apos; can override/hide `method&apos;.  Caller is
                  responsible for verifying that `method&apos; has the same signature
                  as `this&apos;.  Caller is also responsible for verifying that
                  `method&apos; is visible to the class where this override is occurring.
                  This method is called for the case when class B extends A and both
                  A and B define some method.
                  &lt;pre&gt;
                  A - void foo() throws e1
                  |
                  |
                  B - void foo() throws e2
                  &lt;/pre&gt;                
            </javadoc>
            <method name="checkOverride" type="boolean" line="401">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="method" type="MemberDefinition"/>
                </params>
            </method>
            <javadoc line="404">
                Checks whether `this&apos; can override `method&apos;.  It `clazz&apos; is
                  null, it reports the errors in the class where `this&apos; is
                  declared.  If `clazz&apos; is not null, it reports the error in `clazz&apos;.                
            </javadoc>
            <method name="checkOverride" type="boolean" line="409">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="method" type="MemberDefinition"/>
                    <param name="clazz" type="ClassDeclaration"/>
                </params>
                <declaration name="success" type="boolean" line="410"/>
                <scope line="411"/>
                <scope line="414">
                    <scope line="415"/>
                </scope>
                <scope line="419"/>
                <scope line="422"/>
                <scope line="426"/>
                <scope line="430"/>
                <scope line="434"/>
                <scope line="437"/>
                <scope line="441"/>
                <scope line="443"/>
            </method>
            <javadoc line="449">
                Check to see if two method definitions are compatible, that is
                  do they have a `meet&apos;.  The meet of two methods is essentially
                  and `intersection&apos; of
                  two methods.  This method is called when some class C inherits
                  declarations for some method foo from two parents (superclass,
                  interfaces) but it does not, itself, have a declaration of foo.
                  Caller is responsible for making sure that both methods are
                  indeed visible in clazz.
                  &lt;pre&gt;
                  A - void foo() throws e1
                  \
                  \     B void foo() throws e2
                  \   /
                  \ /
                  C
                  &lt;/pre&gt;                
            </javadoc>
            <method name="checkMeet" type="boolean" line="467">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="method" type="MemberDefinition"/>
                    <param name="clazz" type="ClassDeclaration"/>
                </params>
                <scope line="468"/>
                <scope line="471"/>
                <scope line="474"/>
                <scope line="477"/>
                <scope line="480"/>
                <scope line="483"/>
            </method>
            <javadoc line="489">
                This method is meant to be used to determine if one of two inherited
                  methods could override the other.  Unlike checkOverride(), failure
                  is not an error.  This method is only meant to be called after
                  checkMeet() has succeeded on the two methods.
                  If you call couldOverride() without doing a checkMeet() first, then
                  you are on your own.                
            </javadoc>
            <method name="couldOverride" type="boolean" line="497">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="method" type="MemberDefinition"/>
                </params>
                <scope line="498"/>
                <scope line="501"/>
                <scope line="504"/>
                <scope line="507"/>
            </method>
            <javadoc line="512">
                Check to see if the exceptions of `this&apos; fit within the
                  exceptions of `method&apos;.                
            </javadoc>
            <method name="exceptionsFit" type="boolean" line="516">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="method" type="MemberDefinition"/>
                </params>
                <declaration name="e1" type="ClassDeclaration" line="517"/>
                <declaration name="e2" type="ClassDeclaration" line="518"/>
                <scope line="519">
                    <scope line="520">
                        <declaration name="c1" type="ClassDefinition" line="521"/>
                        <scope line="522">
                            <scope line="523"/>
                        </scope>
                    </scope>
                    <scope line="531"/>
                </scope>
            </method>
            <javadoc line="537">
                Checks                
            </javadoc>
            <method name="isPublic" type="boolean" line="540"/>
            <method name="isPrivate" type="boolean" line="543"/>
            <method name="isProtected" type="boolean" line="546"/>
            <method name="isPackagePrivate" type="boolean" line="549"/>
            <method name="isFinal" type="boolean" line="552"/>
            <method name="isStatic" type="boolean" line="555"/>
            <method name="isSynchronized" type="boolean" line="558"/>
            <method name="isAbstract" type="boolean" line="561"/>
            <method name="isNative" type="boolean" line="564"/>
            <method name="isVolatile" type="boolean" line="567"/>
            <method name="isTransient" type="boolean" line="570"/>
            <method name="isMethod" type="boolean" line="573"/>
            <method name="isVariable" type="boolean" line="576"/>
            <method name="isSynthetic" type="boolean" line="579"/>
            <method name="isDeprecated" type="boolean" line="582"/>
            <method name="isStrict" type="boolean" line="585"/>
            <method name="isInnerClass" type="boolean" line="588"/>
            <method name="isInitializer" type="boolean" line="591"/>
            <method name="isConstructor" type="boolean" line="594"/>
            <method name="isLocal" type="boolean" line="597"/>
            <method name="isInlineable" type="boolean" line="600">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="fromFinal" type="boolean"/>
                </params>
            </method>
            <javadoc line="603">
                Check if constant:  Will it inline away to a constant?                
            </javadoc>
            <method name="isConstant" type="boolean" line="606">
                <scope line="607">
                    <scope line="608"/>
                    <scope line="612"/>
                </scope>
            </method>
            <javadoc line="618">
                toString                
            </javadoc>
            <method name="toString" type="String" line="621">
                <declaration name="name" type="Identifier" line="622"/>
                <scope line="623"/>
                <scope line="626">
                    <declaration name="buf" type="StringBuffer" line="627"/>
                    <declaration name="argTypes" type="Type" line="630"/>
                    <scope line="631">
                        <scope line="632"/>
                    </scope>
                </scope>
                <scope line="640"/>
            </method>
            <javadoc line="645">
                Print for debugging                
            </javadoc>
            <method name="print" type="void" line="648">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
                <scope line="649"/>
                <scope line="652"/>
                <scope line="655"/>
                <scope line="658"/>
                <scope line="661"/>
                <scope line="664"/>
                <scope line="667"/>
                <scope line="670"/>
                <scope line="673"/>
                <scope line="676"/>
            </method>
            <method name="cleanup" type="void" line="681">
                <params>
                    <param name="env" type="Environment"/>
                </params>
                <scope line="683">
                    <declaration name="cost" type="int" line="684"/>
                    <scope line="685"/>
                    <scope line="688"/>
                    <scope line="691">
                        <scope line="692">
                            <scope line="693"/>
                        </scope>
                        <scope line="697"/>
                    </scope>
                    <scope line="700"/>
                </scope>
                <scope line="704">
                    <scope line="705"/>
                </scope>
            </method>
        </class>
    </source>