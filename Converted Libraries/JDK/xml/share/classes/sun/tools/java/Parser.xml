<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.java">
        <import package="sun.tools.tree"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Vector"/>
        <class name="Parser" line="7">
            <extends class="Scanner"/>
            <implements interface="ParserActions"/>
            <implements interface="Constants"/>
            <javadoc line="7">
                This class is used to parse Java statements and expressions.
                  The result is a parse tree.&lt;p&gt;
                  This class implements an operator precedence parser. Errors are
                  reported to the Environment object, if the error can&apos;t be
                  resolved immediately, a SyntaxError exception is thrown.&lt;p&gt;
                  Error recovery is implemented by catching SyntaxError exceptions
                  and discarding input tokens until an input token is reached that
                  is possibly a legal continuation.&lt;p&gt;
                  The parse tree that is constructed represents the input
                  exactly (no rewrites to simpler forms). This is important
                  if the resulting tree is to be used for code formatting in
                  a programming environment. Currently only documentation comments
                  are retained.&lt;p&gt;
                  The parsing algorithm does NOT use any type information. Changes
                  in the type system do not affect the structure of the parse tree.
                  This restriction does introduce an ambiguity an expression of the
                  form: (e1) e2 is assumed to be a cast if e2 does not start with
                  an operator. That means that (a) - b is interpreted as subtract
                  b from a and not cast negative b to type a. However, if a is a
                  simple type (byte, int, ...) then it is assumed to be a cast.&lt;p&gt;
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
                <author>
                    Arthur van Hoff                    
                </author>
            </javadoc>
            <javadoc line="34">
                Create a parser                
            </javadoc>
            <method name="Parser" type="constructor" line="37">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <javadoc line="42">
                Create a parser, given a scanner.                
            </javadoc>
            <method name="Parser" type="constructor" line="45">
                <params>
                    <param name="scanner" type="Scanner"/>
                </params>
            </method>
            <javadoc line="53">
                Create a parser, given a scanner and the semantic callback.                
            </javadoc>
            <method name="Parser" type="constructor" line="56">
                <params>
                    <param name="scanner" type="Scanner"/>
                    <param name="actions" type="ParserActions"/>
                </params>
            </method>
            <declaration name="actions" type="ParserActions" line="60"/>
            <javadoc line="60">
                Usually &lt;code&gt;this.actions == (ParserActions)this&lt;/code&gt;.
                  However, a delegate scanner can produce tokens for this parser,
                  in which case &lt;code&gt;(Scanner)this&lt;/code&gt; is unused,
                  except for &lt;code&gt;this.token&lt;/code&gt; and &lt;code&gt;this.pos&lt;/code&gt;
                  instance variables which are filled from the real scanner
                  by &lt;code&gt;this.scan()&lt;/code&gt; and the constructor.                
            </javadoc>
            <javadoc line="69">
                package declaration                
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="packageDeclaration" type="void" line="73">
                <params>
                    <param name="off" type="long"/>
                    <param name="nm" type="IdentifierToken"/>
                </params>
            </method>
            <javadoc line="76">
                @deprecated                
            </javadoc>
            <method name="packageDeclaration" type="void" line="79">
                <params>
                    <param name="off" type="long"/>
                    <param name="nm" type="Identifier"/>
                </params>
            </method>
            <javadoc line="82">
                import class                
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="importClass" type="void" line="86">
                <params>
                    <param name="off" type="long"/>
                    <param name="nm" type="IdentifierToken"/>
                </params>
            </method>
            <javadoc line="89">
                @deprecated Use the version with the IdentifierToken arguments.                
            </javadoc>
            <method name="importClass" type="void" line="92">
                <params>
                    <param name="off" type="long"/>
                    <param name="nm" type="Identifier"/>
                </params>
            </method>
            <javadoc line="95">
                import package                
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="importPackage" type="void" line="99">
                <params>
                    <param name="off" type="long"/>
                    <param name="nm" type="IdentifierToken"/>
                </params>
            </method>
            <javadoc line="102">
                @deprecated Use the version with the IdentifierToken arguments.                
            </javadoc>
            <method name="importPackage" type="void" line="105">
                <params>
                    <param name="off" type="long"/>
                    <param name="nm" type="Identifier"/>
                </params>
            </method>
            <javadoc line="108">
                Define class                
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="beginClass" type="ClassDefinition" line="112">
                <params>
                    <param name="off" type="long"/>
                    <param name="doc" type="String"/>
                    <param name="mod" type="int"/>
                    <param name="nm" type="IdentifierToken"/>
                    <param name="sup" type="IdentifierToken"/>
                    <param name="impl" type="IdentifierToken"/>
                </params>
                <declaration name="supId" type="Identifier" line="113"/>
                <declaration name="implIds" type="Identifier" line="114"/>
                <scope line="115">
                    <scope line="117"/>
                </scope>
            </method>
            <javadoc line="124">
                @deprecated Use the version with the IdentifierToken arguments.                
            </javadoc>
            <method name="beginClass" type="void" line="127">
                <params>
                    <param name="off" type="long"/>
                    <param name="doc" type="String"/>
                    <param name="mod" type="int"/>
                    <param name="nm" type="Identifier"/>
                    <param name="sup" type="Identifier"/>
                    <param name="impl" type="Identifier"/>
                </params>
            </method>
            <javadoc line="130">
                Report the current class under construction.
                  By default, it&apos;s a no-op which returns null.
                  It may only be called before the corresponding endClass().                
            </javadoc>
            <method name="getCurrentClass" type="ClassDefinition" line="135"/>
            <javadoc line="138">
                End class                
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="endClass" type="void" line="142">
                <params>
                    <param name="off" type="long"/>
                    <param name="c" type="ClassDefinition"/>
                </params>
            </method>
            <javadoc line="145">
                @deprecated Use the version with the IdentifierToken arguments.                
            </javadoc>
            <method name="endClass" type="void" line="148">
                <params>
                    <param name="off" type="long"/>
                    <param name="nm" type="Identifier"/>
                </params>
            </method>
            <javadoc line="151">
                Define a field                
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="defineField" type="void" line="155">
                <params>
                    <param name="where" type="long"/>
                    <param name="c" type="ClassDefinition"/>
                    <param name="doc" type="String"/>
                    <param name="mod" type="int"/>
                    <param name="t" type="Type"/>
                    <param name="nm" type="IdentifierToken"/>
                    <param name="args" type="IdentifierToken"/>
                    <param name="exp" type="IdentifierToken"/>
                    <param name="val" type="Node"/>
                </params>
                <declaration name="argIds" type="Identifier" line="156"/>
                <declaration name="expIds" type="Identifier" line="157"/>
                <scope line="158">
                    <scope line="160"/>
                </scope>
                <scope line="164">
                    <scope line="166"/>
                </scope>
            </method>
            <javadoc line="172">
                @deprecated Use the version with the IdentifierToken arguments.                
            </javadoc>
            <method name="defineField" type="void" line="175">
                <params>
                    <param name="where" type="long"/>
                    <param name="doc" type="String"/>
                    <param name="mod" type="int"/>
                    <param name="t" type="Type"/>
                    <param name="nm" type="Identifier"/>
                    <param name="args" type="Identifier"/>
                    <param name="exp" type="Identifier"/>
                    <param name="val" type="Node"/>
                </params>
            </method>
            <declaration name="args" type="Node" line="178"/>
            <declaration name="argIndex" type="int" line="179"/>
            <method name="addArgument" type="void" line="180">
                <params>
                    <param name="n" type="Node"/>
                </params>
                <scope line="181">
                    <declaration name="newArgs" type="Node" line="182"/>
                </scope>
            </method>
            <method name="exprArgs" type="Expression" line="188">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="e" type="Expression" line="189"/>
            </method>
            <method name="statArgs" type="Statement" line="194">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="s" type="Statement" line="195"/>
            </method>
            <javadoc line="200">
                Expect a token, return its value, scan the next token or
                  throw an exception.                
            </javadoc>
            <method name="expect" type="void" line="204">
                <params>
                    <param name="t" type="int"/>
                </params>
                <scope line="205"/>
            </method>
            <javadoc line="218">
                Parse a type expression. Does not parse the []&apos;s.                
            </javadoc>
            <method name="parseTypeExpression" type="Expression" line="221">
                <declaration name="e" type="Expression" line="242"/>
                <scope line="244"/>
            </method>
            <javadoc line="253">
                Parse a method invocation. Should be called when the current
                  then is the &apos;(&apos; of the argument list.                
            </javadoc>
            <method name="parseMethodExpression" type="Expression" line="257">
                <params>
                    <param name="e" type="Expression"/>
                    <param name="id" type="Identifier"/>
                </params>
                <declaration name="p" type="long" line="258"/>
                <declaration name="i" type="int" line="259"/>
                <scope line="260">
                    <scope line="262"/>
                </scope>
            </method>
            <javadoc line="270">
                Parse a new instance expression.  Should be called when the current
                  token is the &apos;(&apos; of the argument list.                
            </javadoc>
            <method name="parseNewInstanceExpression" type="Expression" line="274">
                <params>
                    <param name="p" type="long"/>
                    <param name="outerArg" type="Expression"/>
                    <param name="type" type="Expression"/>
                </params>
                <declaration name="i" type="int" line="275"/>
                <scope line="277">
                    <scope line="279"/>
                </scope>
                <declaration name="body" type="ClassDefinition" line="285"/>
                <scope line="286">
                    <declaration name="tp" type="long" line="287"/>
                    <declaration name="superName" type="Identifier" line="288"/>
                    <scope line="289"/>
                    <declaration name="ext" type="Vector" line="292"/>
                    <declaration name="impl" type="Vector" line="293"/>
                    <scope line="295"/>
                </scope>
                <scope line="301"/>
            </method>
            <javadoc line="306">
                Parse a primary expression.                
            </javadoc>
            <method name="parseTerm" type="Expression" line="309">
                <scope line="312">
                    <declaration name="v" type="char" line="313"/>
                </scope>
                <scope line="317">
                    <declaration name="v" type="int" line="318"/>
                    <declaration name="q" type="long" line="319"/>
                </scope>
                <scope line="324">
                    <declaration name="v" type="long" line="325"/>
                    <declaration name="q" type="long" line="326"/>
                </scope>
                <scope line="331">
                    <declaration name="v" type="float" line="332"/>
                </scope>
                <scope line="336">
                    <declaration name="v" type="double" line="337"/>
                </scope>
                <scope line="341">
                    <declaration name="v" type="String" line="342"/>
                </scope>
                <scope line="346">
                    <declaration name="v" type="Identifier" line="347"/>
                    <declaration name="p" type="long" line="348"/>
                </scope>
                <scope line="358">
                    <declaration name="e" type="Expression" line="359"/>
                </scope>
                <scope line="363">
                    <declaration name="e" type="Expression" line="364"/>
                </scope>
                <scope line="378">
                    <declaration name="p" type="long" line="379"/>
                    <scope line="382">
                        <declaration name="v" type="int" line="383"/>
                        <declaration name="q" type="long" line="384"/>
                    </scope>
                    <scope line="389">
                        <declaration name="v" type="long" line="390"/>
                        <declaration name="q" type="long" line="391"/>
                    </scope>
                    <scope line="396">
                        <declaration name="v" type="float" line="397"/>
                    </scope>
                    <scope line="401">
                        <declaration name="v" type="double" line="402"/>
                    </scope>
                </scope>
                <scope line="409">
                    <declaration name="p" type="long" line="410"/>
                    <scope line="413">
                        <declaration name="v" type="int" line="414"/>
                    </scope>
                    <scope line="418">
                        <declaration name="v" type="long" line="419"/>
                    </scope>
                    <scope line="423">
                        <declaration name="v" type="float" line="424"/>
                    </scope>
                    <scope line="428">
                        <declaration name="v" type="double" line="429"/>
                    </scope>
                </scope>
                <scope line="444">
                    <declaration name="p" type="long" line="445"/>
                    <declaration name="e" type="Expression" line="446"/>
                    <scope line="448"/>
                </scope>
                <scope line="477">
                    <declaration name="p" type="long" line="478"/>
                    <declaration name="i" type="int" line="479"/>
                    <scope line="480">
                        <scope line="482">
                            <scope line="484"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="494">
                    <declaration name="p" type="long" line="495"/>
                    <declaration name="i" type="int" line="496"/>
                    <scope line="497">
                        <declaration name="e" type="Expression" line="499"/>
                    </scope>
                    <declaration name="e" type="Expression" line="504"/>
                    <scope line="505">
                        <scope line="506"/>
                        <declaration name="dims" type="Expression[]" line="511"/>
                        <scope line="512"/>
                    </scope>
                    <scope line="517"/>
                </scope>
            </method>
            <javadoc line="525">
                Parse an expression.                
            </javadoc>
            <method name="parseExpression" type="Expression" line="528">
                <scope line="529">
                    <declaration name="more" type="Expression" line="530"/>
                </scope>
            </method>
            <javadoc line="536">
                Given a left-hand term, parse an operator and right-hand term.                
            </javadoc>
            <method name="parseBinaryExpression" type="Expression" line="539">
                <params>
                    <param name="e" type="Expression"/>
                </params>
                <scope line="540">
                    <scope line="543">
                        <declaration name="p" type="long" line="544"/>
                        <declaration name="index" type="Expression" line="545"/>
                    </scope>
                    <scope line="557">
                        <declaration name="p" type="long" line="558"/>
                        <scope line="559">
                            <declaration name="q" type="long" line="560"/>
                            <scope line="561"/>
                            <scope line="565"/>
                        </scope>
                        <scope line="570">
                            <declaration name="q" type="long" line="571"/>
                            <scope line="572"/>
                            <scope line="576"/>
                        </scope>
                        <scope line="581"/>
                        <scope line="587"/>
                        <declaration name="id" type="Identifier" line="592"/>
                        <scope line="594"/>
                        <scope line="597"/>
                    </scope>
                    <scope line="699">
                        <declaration name="p" type="long" line="700"/>
                        <declaration name="second" type="Expression" line="701"/>
                        <declaration name="third" type="Expression" line="703"/>
                        <scope line="704"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="716">
                Recover after a syntax error in a statement. This involves
                  discarding tokens until EOF or a possible continuation is
                  encountered.                
            </javadoc>
            <method name="recoverStatement" type="boolean" line="721">
                <scope line="722"/>
            </method>
            <javadoc line="762">
                Parse declaration, called after the type expression
                  has been parsed and the current token is IDENT.                
            </javadoc>
            <method name="parseDeclaration" type="Statement" line="766">
                <params>
                    <param name="p" type="long"/>
                    <param name="mod" type="int"/>
                    <param name="type" type="Expression"/>
                </params>
                <declaration name="i" type="int" line="767"/>
                <scope line="768">
                    <scope line="770"/>
                </scope>
            </method>
            <javadoc line="777">
                Check if an expression is a legal toplevel expression.
                  Only method, inc, dec, and new expression are allowed.                
            </javadoc>
            <method name="topLevelExpression" type="void" line="781">
                <params>
                    <param name="e" type="Expression"/>
                </params>
            </method>
            <javadoc line="805">
                Parse a statement.                
            </javadoc>
            <method name="parseStatement" type="Statement" line="808">
                <scope line="815">
                    <declaration name="p" type="long" line="816"/>
                    <declaration name="c" type="Expression" line="818"/>
                    <declaration name="t" type="Statement" line="820"/>
                    <scope line="821"/>
                    <scope line="825"/>
                </scope>
                <scope line="830"/>
                <scope line="835">
                    <declaration name="p" type="long" line="836"/>
                    <declaration name="init" type="Statement" line="837"/>
                    <declaration name="cond" type="Expression" line="838"/>
                    <scope line="840">
                        <declaration name="p2" type="long" line="841"/>
                        <declaration name="mod" type="int" line="842"/>
                        <declaration name="e" type="Expression" line="843"/>
                        <scope line="844"/>
                        <scope line="847">
                            <scope line="848"/>
                            <scope line="852">
                                <declaration name="p3" type="long" line="853"/>
                                <declaration name="e2" type="Expression" line="854"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="862"/>
                    <scope line="866">
                        <scope line="869">
                            <declaration name="p2" type="long" line="870"/>
                            <declaration name="e2" type="Expression" line="871"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="880">
                    <declaration name="p" type="long" line="881"/>
                    <declaration name="cond" type="Expression" line="883"/>
                </scope>
                <scope line="888">
                    <declaration name="p" type="long" line="889"/>
                    <declaration name="body" type="Statement" line="890"/>
                    <declaration name="cond" type="Expression" line="893"/>
                </scope>
                <scope line="899">
                    <declaration name="p" type="long" line="900"/>
                    <declaration name="label" type="Identifier" line="901"/>
                    <scope line="902"/>
                </scope>
                <scope line="910">
                    <declaration name="p" type="long" line="911"/>
                    <declaration name="label" type="Identifier" line="912"/>
                    <scope line="913"/>
                </scope>
                <scope line="921">
                    <declaration name="p" type="long" line="922"/>
                    <declaration name="e" type="Expression" line="923"/>
                    <scope line="924"/>
                </scope>
                <scope line="931">
                    <declaration name="p" type="long" line="932"/>
                    <declaration name="i" type="int" line="933"/>
                    <declaration name="e" type="Expression" line="935"/>
                    <scope line="938">
                        <declaration name="j" type="int" line="939"/>
                        <scope line="940"/>
                        <scope line="955">
                            <scope line="957"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="966">
                    <scope line="968"/>
                </scope>
                <scope line="976"/>
                <scope line="983">
                    <declaration name="p" type="long" line="984"/>
                    <declaration name="init" type="Statement" line="985"/>
                    <declaration name="i" type="int" line="986"/>
                    <declaration name="catches" type="boolean" line="987"/>
                    <scope line="988">
                        <declaration name="p2" type="long" line="990"/>
                        <declaration name="mod" type="int" line="991"/>
                        <declaration name="e" type="Expression" line="992"/>
                        <scope line="993"/>
                        <scope line="996">
                            <scope line="997"/>
                        </scope>
                    </scope>
                    <declaration name="s" type="Statement" line="1004"/>
                    <scope line="1005"/>
                    <scope line="1007">
                        <declaration name="pp" type="long" line="1008"/>
                        <declaration name="mod" type="int" line="1011"/>
                        <declaration name="t" type="Expression" line="1012"/>
                        <declaration name="id" type="IdentifierToken" line="1013"/>
                    </scope>
                    <scope line="1021"/>
                    <scope line="1025"/>
                    <scope line="1028"/>
                </scope>
                <scope line="1034">
                    <declaration name="s" type="Statement" line="1036"/>
                    <scope line="1037"/>
                    <scope line="1047"/>
                </scope>
                <scope line="1054"/>
                <scope line="1060">
                    <declaration name="p" type="long" line="1061"/>
                    <declaration name="e" type="Expression" line="1062"/>
                </scope>
                <scope line="1067">
                    <declaration name="p" type="long" line="1068"/>
                </scope>
                <scope line="1075">
                    <declaration name="p" type="long" line="1076"/>
                    <declaration name="e" type="Expression" line="1078"/>
                </scope>
                <scope line="1089">
                    <declaration name="p" type="long" line="1090"/>
                    <declaration name="mod" type="int" line="1091"/>
                    <scope line="1105">
                        <scope line="1106"/>
                        <declaration name="e" type="Expression" line="1110"/>
                        <scope line="1111"/>
                        <declaration name="s" type="Statement" line="1114"/>
                    </scope>
                </scope>
                <declaration name="p" type="long" line="1131"/>
                <declaration name="e" type="Expression" line="1132"/>
                <scope line="1133">
                    <declaration name="s" type="Statement" line="1134"/>
                </scope>
                <scope line="1138">
                    <declaration name="s" type="Statement" line="1140"/>
                </scope>
            </method>
            <method name="parseBlockStatement" type="Statement" line="1148">
                <scope line="1149"/>
                <declaration name="p" type="long" line="1153"/>
                <declaration name="i" type="int" line="1154"/>
                <scope line="1155">
                    <declaration name="j" type="int" line="1156"/>
                    <scope line="1157"/>
                    <scope line="1160">
                        <scope line="1162"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1170">
                Parse an identifier. ie: a.b.c returns &quot;a.b.c&quot;
                  If star is true then &quot;a.b.&quot; is allowed.
                  The return value encodes both the identifier and its location.                
            </javadoc>
            <method name="parseName" type="IdentifierToken" line="1175">
                <params>
                    <param name="star" type="boolean"/>
                </params>
                <declaration name="res" type="IdentifierToken" line="1176"/>
                <scope line="1178"/>
                <declaration name="buf" type="StringBuffer" line="1181"/>
                <scope line="1182">
                    <scope line="1184"/>
                    <scope line="1190"/>
                </scope>
            </method>
            <javadoc line="1198">
                @deprecated                
                <see>
                    #parseName                    
                </see>
            </javadoc>
            <method name="parseIdentifier" type="Identifier" line="1202">
                <params>
                    <param name="star" type="boolean"/>
                </params>
            </method>
            <javadoc line="1205">
                Parse a type expression, this results in a Type.
                  The parse includes trailing array brackets.                
            </javadoc>
            <method name="parseType" type="Type" line="1209">
                <declaration name="t" type="Type" line="1210"/>
            </method>
            <javadoc line="1257">
                Parse the tail of a type expression, which might be array brackets.
                  Return the given type, as possibly modified by the suffix.                
            </javadoc>
            <method name="parseArrayBrackets" type="Type" line="1261">
                <params>
                    <param name="t" type="Type"/>
                </params>
                <scope line="1262">
                    <scope line="1264"/>
                </scope>
            </method>
            <declaration name="aCount" type="int" line="1273"/>
            <declaration name="aTypes" type="Type" line="1274"/>
            <declaration name="aNames" type="IdentifierToken" line="1275"/>
            <method name="addArgument" type="void" line="1276">
                <params>
                    <param name="mod" type="int"/>
                    <param name="t" type="Type"/>
                    <param name="nm" type="IdentifierToken"/>
                </params>
                <scope line="1278">
                    <declaration name="newATypes" type="Type" line="1279"/>
                    <declaration name="newANames" type="IdentifierToken" line="1282"/>
                </scope>
            </method>
            <javadoc line="1289">
                Parse a possibly-empty sequence of modifier keywords.
                  Return the resulting bitmask.
                  Diagnose repeated modifiers, but make no other checks.
                  Only modifiers mentioned in the given bitmask are scanned;
                  an unmatched modifier must be handled by the caller.                
            </javadoc>
            <method name="parseModifiers" type="int" line="1296">
                <params>
                    <param name="mask" type="int"/>
                </params>
                <declaration name="mod" type="int" line="1297"/>
                <scope line="1298">
                    <scope line="1299"/>
                    <declaration name="nextmod" type="int" line="1303"/>
                    <scope line="1339"/>
                    <scope line="1342"/>
                </scope>
            </method>
            <declaration name="curClass" type="ClassDefinition" line="1350"/>
            <javadoc line="1351">
                Parse a field.                
            </javadoc>
            <method name="parseField" type="void" line="1354">
                <scope line="1355"/>
                <declaration name="doc" type="String" line="1359"/>
                <declaration name="p" type="long" line="1360"/>
                <declaration name="mod" type="int" line="1361"/>
                <scope line="1362"/>
                <scope line="1366"/>
                <declaration name="t" type="Type" line="1371"/>
                <declaration name="id" type="IdentifierToken" line="1372"/>
                <scope line="1385">
                    <scope line="1388">
                        <declaration name="am" type="int" line="1389"/>
                        <declaration name="at" type="Type" line="1390"/>
                        <declaration name="an" type="IdentifierToken" line="1391"/>
                        <scope line="1395"/>
                    </scope>
                    <declaration name="atypes" type="Type" line="1407"/>
                    <declaration name="anames" type="IdentifierToken" line="1409"/>
                    <declaration name="exp" type="IdentifierToken" line="1412"/>
                    <scope line="1413">
                        <declaration name="v" type="Vector" line="1414"/>
                        <scope line="1417"/>
                    </scope>
                    <declaration name="oldFPstate" type="int" line="1426"/>
                    <scope line="1427"/>
                    <scope line="1430"/>
                    <scope line="1441"/>
                    <scope line="1444"/>
                </scope>
                <scope line="1450">
                    <declaration name="vt" type="Type" line="1452"/>
                    <declaration name="init" type="Node" line="1453"/>
                    <scope line="1454"/>
                    <scope line="1459"/>
                </scope>
            </method>
            <javadoc line="1468">
                Recover after a syntax error in a field. This involves
                  discarding tokens until an EOF or a possible legal
                  continuation is encountered.                
            </javadoc>
            <method name="recoverField" type="void" line="1473">
                <params>
                    <param name="newClass" type="ClassDefinition"/>
                </params>
                <scope line="1474"/>
            </method>
            <javadoc line="1518">
                Parse a top-level class or interface declaration.                
            </javadoc>
            <method name="parseClass" type="void" line="1521">
                <declaration name="doc" type="String" line="1522"/>
                <declaration name="mod" type="int" line="1523"/>
            </method>
            <declaration name="FPstate" type="int" line="1526"/>
            <javadoc line="1527">
                Parse a block-local class or interface declaration.                
            </javadoc>
            <method name="parseLocalClass" type="Statement" line="1530">
                <params>
                    <param name="mod" type="int"/>
                </params>
                <declaration name="p" type="long" line="1531"/>
                <declaration name="body" type="ClassDefinition" line="1532"/>
                <declaration name="ds" type="Statement" line="1533"/>
                <declaration name="type" type="Expression" line="1534"/>
            </method>
            <javadoc line="1537">
                Parse a named class or interface declaration,
                  starting at &quot;class&quot; or &quot;interface&quot;.                
                <arg>
                    ctx Syntactic context of the class, one of {PACKAGE CLASS STAT EXPR}.                    
                </arg>
            </javadoc>
            <method name="parseNamedClass" type="ClassDefinition" line="1542">
                <params>
                    <param name="mod" type="int"/>
                    <param name="ctx" type="int"/>
                    <param name="doc" type="String"/>
                </params>
                <declaration name="oldFPstate" type="int" line="1555"/>
                <scope line="1556"/>
                <scope line="1559"/>
                <declaration name="nm" type="IdentifierToken" line="1562"/>
                <declaration name="p" type="long" line="1563"/>
                <declaration name="ext" type="Vector" line="1565"/>
                <declaration name="impl" type="Vector" line="1566"/>
                <declaration name="tmp" type="ClassDefinition" line="1568"/>
            </method>
            <method name="parseInheritance" type="void" line="1572">
                <params>
                    <param name="ext" type="Vector"/>
                    <param name="impl" type="Vector"/>
                </params>
                <scope line="1573">
                    <scope line="1576"/>
                </scope>
                <scope line="1581">
                    <scope line="1584"/>
                </scope>
            </method>
            <javadoc line="1590">
                Parse the body of a class or interface declaration,
                  starting at the left brace.                
            </javadoc>
            <method name="parseClassBody" type="ClassDefinition" line="1594">
                <params>
                    <param name="nm" type="IdentifierToken"/>
                    <param name="mod" type="int"/>
                    <param name="ctx" type="int"/>
                    <param name="doc" type="String"/>
                    <param name="ext" type="Vector"/>
                    <param name="impl" type="Vector"/>
                    <param name="p" type="long"/>
                </params>
                <declaration name="sup" type="IdentifierToken" line="1595"/>
                <scope line="1596">
                    <scope line="1597"/>
                </scope>
                <scope line="1602">
                    <scope line="1603">
                        <scope line="1604"/>
                    </scope>
                </scope>
                <declaration name="oldClass" type="ClassDefinition" line="1610"/>
                <declaration name="implids" type="IdentifierToken" line="1611"/>
                <declaration name="newClass" type="ClassDefinition" line="1613"/>
                <scope line="1615">
                    <scope line="1616"/>
                    <scope line="1620"/>
                    <scope line="1623"/>
                </scope>
            </method>
            <javadoc line="1631">
                Recover after a syntax error in the file.
                  This involves discarding tokens until an EOF
                  or a possible legal continuation is encountered.                
            </javadoc>
            <method name="recoverFile" type="void" line="1636">
                <scope line="1637"/>
            </method>
            <javadoc line="1662">
                Parse an Java file.                
            </javadoc>
            <method name="parseFile" type="void" line="1665">
                <scope line="1666">
                    <scope line="1667">
                        <scope line="1668">
                            <declaration name="p" type="long" line="1669"/>
                            <declaration name="id" type="IdentifierToken" line="1670"/>
                        </scope>
                    </scope>
                    <scope line="1675"/>
                    <scope line="1678">
                        <scope line="1679">
                            <declaration name="p" type="long" line="1680"/>
                            <declaration name="id" type="IdentifierToken" line="1681"/>
                            <scope line="1683"/>
                            <scope line="1687"/>
                        </scope>
                        <scope line="1691"/>
                    </scope>
                    <scope line="1695">
                        <scope line="1696"/>
                        <scope line="1717"/>
                    </scope>
                </scope>
                <scope line="1722"/>
            </method>
            <declaration name="scanner" type="Scanner" line="1727"/>
            <javadoc line="1727">
                Usually &lt;code&gt;this.scanner == (Scanner)this&lt;/code&gt;.
                  However, a delegate scanner can produce tokens for this parser,
                  in which case &lt;code&gt;(Scanner)this&lt;/code&gt; is unused,
                  except for &lt;code&gt;this.token&lt;/code&gt; and &lt;code&gt;this.pos&lt;/code&gt;
                  instance variables which are filled from the real scanner
                  by &lt;code&gt;this.scan()&lt;/code&gt; and the constructor.                
            </javadoc>
            <method name="scan" type="long" line="1736">
                <scope line="1737">
                    <declaration name="result" type="long" line="1738"/>
                </scope>
            </method>
            <method name="match" type="void" line="1745">
                <params>
                    <param name="open" type="int"/>
                    <param name="close" type="int"/>
                </params>
                <scope line="1746"/>
            </method>
        </class>
    </source>