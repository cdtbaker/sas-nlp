<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.java">
        <import package="java.util.Hashtable"/>
        <class name="Type" line="3">
            <implements interface="Constants"/>
            <javadoc line="3">
                This class represents an Java Type.&lt;p&gt;
                  It encapsulates an Java type signature and it provides
                  quick access to the components of the type. Note that
                  all types are hashed into a hashtable (typeHash), that
                  means that each distinct type is only allocated once,
                  saving space and making equality checks cheap.&lt;p&gt;
                  For simple types use the constants defined in this class.
                  (Type.tInt, Type.tShort, ...). To create complex types use
                  the static methods Type.tArray, Type.tMethod or Type.tClass.
                  For classes, arrays and method types a sub class of class
                  type is created which defines the extra type components.
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
                <see>
                    ArrayType                    
                </see>
                <see>
                    ClassType                    
                </see>
                <see>
                    MethodType                    
                </see>
                <author>
                    Arthur van Hoff                    
                </author>
            </javadoc>
            <declaration name="typeHash" type="Hashtable" line="24"/>
            <javadoc line="24">
                This hashtable is used to cache types                
            </javadoc>
            <declaration name="typeCode" type="int" line="28"/>
            <javadoc line="28">
                The TypeCode of this type. The value of this field is one
                  of the TC_ contant values defined in Constants.                
                <see>
                    Constants                    
                </see>
            </javadoc>
            <declaration name="typeSig" type="String" line="34"/>
            <javadoc line="34">
                The TypeSignature of this type. This type signature is
                  equivalent to the runtime type signatures used by the
                  interpreter.                
            </javadoc>
            <declaration name="noArgs" type="Type" line="40"/>
            <declaration name="tError" type="Type" line="41"/>
            <declaration name="tPackage" type="Type" line="42"/>
            <declaration name="tNull" type="Type" line="43"/>
            <declaration name="tVoid" type="Type" line="44"/>
            <declaration name="tBoolean" type="Type" line="45"/>
            <declaration name="tByte" type="Type" line="46"/>
            <declaration name="tChar" type="Type" line="47"/>
            <declaration name="tShort" type="Type" line="48"/>
            <declaration name="tInt" type="Type" line="49"/>
            <declaration name="tFloat" type="Type" line="50"/>
            <declaration name="tLong" type="Type" line="51"/>
            <declaration name="tDouble" type="Type" line="52"/>
            <declaration name="tObject" type="Type" line="53"/>
            <declaration name="tClassDesc" type="Type" line="54"/>
            <declaration name="tString" type="Type" line="55"/>
            <declaration name="tCloneable" type="Type" line="56"/>
            <declaration name="tSerializable" type="Type" line="57"/>
            <javadoc line="58">
                Create a type given a typecode and a type signature.                
            </javadoc>
            <method name="Type" type="constructor" line="61">
                <params>
                    <param name="typeCode" type="int"/>
                    <param name="typeSig" type="String"/>
                </params>
            </method>
            <javadoc line="66">
                Return the Java type signature.                
            </javadoc>
            <method name="getTypeSignature" type="String" line="69"/>
            <javadoc line="72">
                Return the type code.                
            </javadoc>
            <method name="getTypeCode" type="int" line="75"/>
            <javadoc line="78">
                Return the type mask. The bits in this mask correspond
                  to the TM_ constants defined in Constants. Only one bit
                  is set at a type.                
                <see>
                    Constants                    
                </see>
            </javadoc>
            <method name="getTypeMask" type="int" line="84"/>
            <javadoc line="87">
                Check for a certain type.                
            </javadoc>
            <method name="isType" type="boolean" line="90">
                <params>
                    <param name="tc" type="int"/>
                </params>
            </method>
            <javadoc line="93">
                Check to see if this is the bogus type &quot;array of void&quot;
                  Although this highly degenerate &quot;type&quot; is not constructable from
                  the grammar, the Parser accepts it.  Rather than monkey with the
                  Parser, we check for the bogus type at specific points and give
                  a nice error.                
            </javadoc>
            <method name="isVoidArray" type="boolean" line="100">
                <scope line="101"/>
                <declaration name="type" type="Type" line="104"/>
            </method>
            <javadoc line="108">
                Check for a certain set of types.                
            </javadoc>
            <method name="inMask" type="boolean" line="111">
                <params>
                    <param name="tm" type="int"/>
                </params>
            </method>
            <javadoc line="114">
                Create an array type.                
            </javadoc>
            <method name="tArray" type="Type" line="117">
                <params>
                    <param name="elem" type="Type"/>
                </params>
                <declaration name="sig" type="String" line="118"/>
                <declaration name="t" type="Type" line="119"/>
                <scope line="120"/>
            </method>
            <javadoc line="125">
                Return the element type of an array type. Only works
                  for array types.                
            </javadoc>
            <method name="getElementType" type="Type" line="129"/>
            <javadoc line="132">
                Return the array dimension. Only works for
                  array types.                
            </javadoc>
            <method name="getArrayDimension" type="int" line="136"/>
            <javadoc line="139">
                Create a class type.                
                <arg>
                    className the fully qualified class name                    
                </arg>
            </javadoc>
            <method name="tClass" type="Type" line="143">
                <params>
                    <param name="className" type="Identifier"/>
                </params>
                <scope line="144">
                    <declaration name="t" type="Type" line="145"/>
                </scope>
                <scope line="149"/>
                <declaration name="sig" type="String" line="152"/>
                <declaration name="t" type="Type" line="153"/>
                <scope line="154"/>
            </method>
            <javadoc line="160">
                Return the ClassName. Only works on class types.                
            </javadoc>
            <method name="getClassName" type="Identifier" line="163"/>
            <javadoc line="166">
                Given an inner identifier, return the non-inner, mangled
                  representation used to manage signatures.
                  Note: It is changed to &apos;public&apos; for Jcov file generation.
                  (see Assembler.java)                
            </javadoc>
            <method name="mangleInnerType" type="Identifier" line="172">
                <params>
                    <param name="className" type="Identifier"/>
                </params>
                <declaration name="mname" type="Identifier" line="174"/>
            </method>
            <javadoc line="178">
                We have learned that a signature means something other
                  that what we thought it meant.  Live with it:  Change all
                  affected data structures to reflect the new name of the old type.
                  &lt;p&gt;
                  (This is necessary because of an ambiguity between the
                  low-level signatures of inner types and their manglings.
                  Note that the latter are also valid class names.)                
            </javadoc>
            <method name="changeClassName" type="void" line="187">
                <params>
                    <param name="oldName" type="Identifier"/>
                    <param name="newName" type="Identifier"/>
                </params>
            </method>
            <javadoc line="190">
                Create a method type with no arguments.                
            </javadoc>
            <method name="tMethod" type="Type" line="193">
                <params>
                    <param name="ret" type="Type"/>
                </params>
            </method>
            <javadoc line="196">
                Create a method type with arguments.                
            </javadoc>
            <method name="tMethod" type="Type" line="199">
                <params>
                    <param name="returnType" type="Type"/>
                    <param name="argTypes" type="Type"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="200"/>
                <scope line="202"/>
                <declaration name="sig" type="String" line="207"/>
                <declaration name="t" type="Type" line="208"/>
                <scope line="209"/>
            </method>
            <javadoc line="214">
                Return the return type. Only works for method types.                
            </javadoc>
            <method name="getReturnType" type="Type" line="217"/>
            <javadoc line="220">
                Return the argument types. Only works for method types.                
            </javadoc>
            <method name="getArgumentTypes" type="Type" line="223"/>
            <javadoc line="226">
                Create a Type from an Java type signature.                
                <exception>
                    CompilerError invalid type signature.                    
                </exception>
            </javadoc>
            <method name="tType" type="Type" line="230">
                <params>
                    <param name="sig" type="String"/>
                </params>
                <declaration name="t" type="Type" line="231"/>
                <scope line="232"/>
                <scope line="241">
                    <declaration name="argv" type="Type" line="242"/>
                    <declaration name="argc" type="int" line="243"/>
                    <declaration name="i" type="int" line="244"/>
                    <scope line="245">
                        <scope line="247"/>
                        <scope line="250">
                            <declaration name="newargv" type="Type" line="251"/>
                        </scope>
                    </scope>
                    <declaration name="argtypes" type="Type" line="257"/>
                </scope>
            </method>
            <javadoc line="264">
                Check if the type arguments are the same.                
                <return>
                    true if both types are method types and the
                      argument types are identical.                    
                </return>
            </javadoc>
            <method name="equalArguments" type="boolean" line="269">
                <params>
                    <param name="t" type="Type"/>
                </params>
            </method>
            <javadoc line="272">
                Return the amount of space this type takes up on the
                  Java operand stack. For a method this is equal to the
                  total space taken up by the arguments.                
            </javadoc>
            <method name="stackSize" type="int" line="277"/>
            <javadoc line="297">
                Return the type code offset. This offset can be added to
                  an opcode to get the right opcode type. Most opcodes
                  are ordered: int, long, float, double, array. For
                  example: iload, lload fload, dload, aload. So the
                  appropriate opcode is iadd + type.getTypeCodeOffset().                
            </javadoc>
            <method name="getTypeCodeOffset" type="int" line="304"/>
            <javadoc line="325">
                Convert a Type to a string, if abbrev is true class names are
                  not fully qualified, if ret is true the return type is included.                
            </javadoc>
            <method name="typeString" type="String" line="329">
                <params>
                    <param name="id" type="String"/>
                    <param name="abbrev" type="boolean"/>
                    <param name="ret" type="boolean"/>
                </params>
                <declaration name="s" type="String" line="330"/>
            </method>
            <javadoc line="371">
                Create a type string, given an identifier.                
            </javadoc>
            <method name="typeString" type="String" line="374">
                <params>
                    <param name="id" type="String"/>
                </params>
            </method>
            <javadoc line="377">
                Convert to a String                
            </javadoc>
            <method name="toString" type="String" line="380"/>
        </class>
    </source>