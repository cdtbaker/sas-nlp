<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.java">
        <import package="java.io.IOException"/>
        <import package="java.io.DataInputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Hashtable"/>
        <class name="BinaryConstantPool" line="34">
            <implements interface="Constants"/>
            <javadoc line="34">
                This class is used to represent a constant table once
                  it is read from a class file.
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="types" type="byte" line="44"/>
            <declaration name="cpool" type="Object" line="45"/>
            <javadoc line="47">
                Constructor                
            </javadoc>
            <method name="BinaryConstantPool" type="constructor" line="50">
                <params>
                    <param name="in" type="DataInputStream"/>
                </params>
                <comment line="52">
                    JVM 4.1 ClassFile.constant_pool_count                    
                </comment>
                <comment line="57">
                    JVM 4.4 cp_info.tag                    
                </comment>
                <comment line="78">
                    JVM 4.4.3 CONSTANT_String_info.string_index
                     or JVM 4.4.1 CONSTANT_Class_info.name_index                    
                </comment>
                <comment line="87">
                    JVM 4.4.2 CONSTANT_*ref_info.class_index &amp; name_and_type_index                    
                </comment>
                <scope line="54">
                    <declaration name="j" type="int" line="55"/>
                </scope>
            </method>
            <javadoc line="97">
                get a integer                
            </javadoc>
            <method name="getInteger" type="int" line="100">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="104">
                get a value                
            </javadoc>
            <method name="getValue" type="Object" line="107">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="111">
                get a string                
            </javadoc>
            <method name="getString" type="String" line="114">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="118">
                get an identifier                
            </javadoc>
            <method name="getIdentifier" type="Identifier" line="121">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="125">
                get class declaration                
            </javadoc>
            <method name="getDeclarationFromName" type="ClassDeclaration" line="128">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="132">
                get class declaration                
            </javadoc>
            <method name="getDeclaration" type="ClassDeclaration" line="135">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="139">
                get a type from a type signature                
            </javadoc>
            <method name="getType" type="Type" line="142">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="146">
                get the type of constant given an index                
            </javadoc>
            <method name="getConstantType" type="int" line="149">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="153">
                get the n-th constant from the constant pool                
            </javadoc>
            <method name="getConstant" type="Object" line="156">
                <params>
                    <param name="n" type="int"/>
                    <param name="env" type="Environment"/>
                </params>
                <declaration name="constant_type" type="int" line="157"/>
                <scope line="174">
                    <declaration name="key" type="int" line="175"/>
                    <declaration name="clazz" type="ClassDefinition" line="176"/>
                    <declaration name="name_and_type" type="int" line="178"/>
                    <declaration name="id" type="Identifier" line="179"/>
                    <declaration name="type" type="Type" line="180"/>
                    <scope line="184">
                        <declaration name="field_type" type="Type" line="185"/>
                    </scope>
                </scope>
                <scope line="191"/>
            </method>
            <javadoc line="202">
                Get a list of dependencies, ie: all the classes referenced in this
                  constant pool.                
            </javadoc>
            <method name="getDependencies" type="Vector" line="206">
                <params>
                    <param name="env" type="Environment"/>
                </params>
                <declaration name="v" type="Vector" line="207"/>
                <scope line="208"/>
            </method>
            <declaration name="indexHashObject" type="Hashtable" line="218"/>
            <declaration name="MoreStuff" type="Vector" line="219"/>
            <javadoc line="221">
                Find the index of an Object in the constant pool                
            </javadoc>
            <method name="indexObject" type="int" line="224">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="env" type="Environment"/>
                </params>
                <declaration name="result" type="Integer" line="227"/>
            </method>
            <javadoc line="234">
                Find the index of an ascii string in the constant pool.  If it&apos;s not in
                  the constant pool, then add it at the end.                
            </javadoc>
            <method name="indexString" type="int" line="238">
                <params>
                    <param name="string" type="String"/>
                    <param name="env" type="Environment"/>
                </params>
                <declaration name="result" type="Integer" line="241"/>
                <scope line="242"/>
            </method>
            <javadoc line="251">
                Create a hash table of all the items in the constant pool that could
                  possibly be referenced from the outside.                
            </javadoc>
            <method name="createIndexHash" type="void" line="256">
                <params>
                    <param name="env" type="Environment"/>
                </params>
                <scope line="259">
                    <scope line="260"/>
                    <scope line="262">
                        <scope line="263"/>
                        <scope line="265"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="271">
                Write out the contents of the constant pool, including any additions
                  that have been added.                
            </javadoc>
            <method name="write" type="void" line="275">
                <params>
                    <param name="out" type="DataOutputStream"/>
                    <param name="env" type="Environment"/>
                </params>
                <declaration name="length" type="int" line="276"/>
                <scope line="280">
                    <declaration name="type" type="int" line="281"/>
                    <declaration name="x" type="Object" line="282"/>
                    <scope line="309">
                        <declaration name="value" type="int" line="310"/>
                    </scope>
                </scope>
                <scope line="320">
                    <declaration name="string" type="String" line="321"/>
                </scope>
            </method>
        </class>
    </source>