<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.java">
        <import package="java.io.IOException"/>
        <import package="java.io.DataInputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <class name="BinaryClass" line="37">
            <extends class="ClassDefinition"/>
            <implements interface="Constants"/>
            <javadoc line="37">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="cpool" type="BinaryConstantPool" line="44"/>
            <declaration name="atts" type="BinaryAttribute" line="45"/>
            <declaration name="dependencies" type="Vector" line="46"/>
            <declaration name="haveLoadedNested" type="boolean" line="47"/>
            <javadoc line="49">
                Constructor                
            </javadoc>
            <method name="BinaryClass" type="constructor" line="54">
                <params>
                    <param name="source" type="Object"/>
                    <param name="declaration" type="ClassDeclaration"/>
                    <param name="modifiers" type="int"/>
                    <param name="superClass" type="ClassDeclaration"/>
                    <param name="interfaces" type="ClassDeclaration"/>
                    <param name="dependencies" type="Vector"/>
                </params>
            </method>
            <declaration name="basicCheckDone" type="boolean" line="61"/>
            <javadoc line="61">
                Flags used by basicCheck() to avoid duplicate calls.
                  (Part of fix for 4105911)                
            </javadoc>
            <declaration name="basicChecking" type="boolean" line="66"/>
            <javadoc line="68">
                Ready a BinaryClass for further checking.  Note that, until recently,
                  BinaryClass relied on the default basicCheck() provided by
                  ClassDefinition.  The definition here has been added to ensure that
                  the information generated by collectInheritedMethods is available
                  for BinaryClasses.                
            </javadoc>
            <method name="basicCheck" type="void" line="75">
                <params>
                    <param name="env" type="Environment"/>
                </params>
                <comment line="78">
                    We need to guard against duplicate calls to basicCheck().  They                    
                </comment>
                <comment line="79">
                    can lead to calling collectInheritedMethods() for this class                    
                </comment>
                <comment line="80">
                    from within a previous call to collectInheritedMethods() for                    
                </comment>
                <comment line="81">
                    this class.  That is not allowed.                    
                </comment>
                <comment line="82">
                    (Part of fix for 4105911)                    
                </comment>
                <comment line="93">
                    Collect inheritance information.                    
                </comment>
                <scope line="83"/>
                <scope line="94"/>
            </method>
            <javadoc line="103">
                Load a binary class                
            </javadoc>
            <method name="load" type="BinaryClass" line="106">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="in" type="DataInputStream"/>
                </params>
            </method>
            <method name="load" type="BinaryClass" line="111">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="in" type="DataInputStream"/>
                    <param name="mask" type="int"/>
                </params>
                <comment line="112">
                    Read the header                    
                </comment>
                <comment line="113">
                    JVM 4.1 ClassFile.magic                    
                </comment>
                <comment line="117">
                    JVM 4.1 ClassFile.minor_version                    
                </comment>
                <comment line="118">
                    JVM 4.1 ClassFile.major_version                    
                </comment>
                <comment line="133">
                    Read the constant pool                    
                </comment>
                <comment line="136">
                    The dependencies of this class                    
                </comment>
                <comment line="139">
                    Read modifiers                    
                </comment>
                <comment line="140">
                    JVM 4.1 ClassFile.access_flags                    
                </comment>
                <comment line="142">
                    Read the class name - from JVM 4.1 ClassFile.this_class                    
                </comment>
                <comment line="145">
                    Read the super class name (may be null) - from JVM 4.1 ClassFile.super_class                    
                </comment>
                <comment line="148">
                    Read the interface names - from JVM 4.1 ClassFile.interfaces_count                    
                </comment>
                <comment line="151">
                    JVM 4.1 ClassFile.interfaces[]                    
                </comment>
                <comment line="155">
                    Allocate the class                    
                </comment>
                <comment line="160">
                    Add any additional dependencies                    
                </comment>
                <comment line="163">
                    Read the fields                    
                </comment>
                <comment line="164">
                    JVM 4.1 ClassFile.fields_count                    
                </comment>
                <comment line="166">
                    JVM 4.5 field_info.access_flags                    
                </comment>
                <comment line="168">
                    JVM 4.5 field_info.name_index                    
                </comment>
                <comment line="170">
                    JVM 4.5 field_info.descriptor_index                    
                </comment>
                <comment line="176">
                    Read the methods                    
                </comment>
                <comment line="177">
                    JVM 4.1 ClassFile.methods_count                    
                </comment>
                <comment line="179">
                    JVM 4.6 method_info.access_flags                    
                </comment>
                <comment line="181">
                    JVM 4.6 method_info.name_index                    
                </comment>
                <comment line="183">
                    JVM 4.6 method_info.descriptor_index                    
                </comment>
                <comment line="189">
                    Read the class attributes                    
                </comment>
                <comment line="192">
                    See if the SourceFile is known                    
                </comment>
                <comment line="196">
                    JVM 4.7.2 SourceFile_attribute.sourcefile_index                    
                </comment>
                <comment line="200">
                    See if the Documentation is know                    
                </comment>
                <comment line="206">
                    Was it compiled as deprecated?                    
                </comment>
                <comment line="211">
                    Was it synthesized by the compiler?                    
                </comment>
                <declaration name="magic" type="int" line="113"/>
                <scope line="114"/>
                <declaration name="minor_version" type="int" line="117"/>
                <declaration name="version" type="int" line="118"/>
                <scope line="119"/>
                <scope line="126"/>
                <declaration name="cpool" type="BinaryConstantPool" line="134"/>
                <declaration name="dependencies" type="Vector" line="137"/>
                <declaration name="classMod" type="int" line="140"/>
                <declaration name="classDecl" type="ClassDeclaration" line="143"/>
                <declaration name="superClassDecl" type="ClassDeclaration" line="146"/>
                <declaration name="interfaces" type="ClassDeclaration" line="149"/>
                <scope line="150"/>
                <declaration name="c" type="BinaryClass" line="156"/>
                <declaration name="nfields" type="int" line="164"/>
                <scope line="165">
                    <declaration name="fieldMod" type="int" line="167"/>
                    <declaration name="fieldName" type="Identifier" line="169"/>
                    <declaration name="fieldType" type="Type" line="171"/>
                    <declaration name="atts" type="BinaryAttribute" line="172"/>
                </scope>
                <declaration name="nmethods" type="int" line="177"/>
                <scope line="178">
                    <declaration name="methMod" type="int" line="180"/>
                    <declaration name="methName" type="Identifier" line="182"/>
                    <declaration name="methType" type="Type" line="184"/>
                    <declaration name="atts" type="BinaryAttribute" line="185"/>
                </scope>
                <declaration name="data" type="byte" line="193"/>
                <scope line="194">
                    <declaration name="dataStream" type="DataInputStream" line="195"/>
                </scope>
                <scope line="202"/>
                <scope line="207"/>
                <scope line="212"/>
            </method>
            <javadoc line="219">
                Called when an environment ties a binary definition to a declaration.
                  At this point, auxiliary definitions may be loaded.                
            </javadoc>
            <method name="loadNested" type="void" line="224">
                <params>
                    <param name="env" type="Environment"/>
                </params>
            </method>
            <method name="loadNested" type="void" line="228">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="flags" type="int"/>
                </params>
                <comment line="229">
                    Sanity check.                    
                </comment>
                <comment line="231">
                    Duplicate calls most likely should not occur, but they do                    
                </comment>
                <comment line="232">
                    in javap.  Be tolerant of them for the time being.                    
                </comment>
                <comment line="233">
                    throw new CompilerError(&quot;multiple loadNested&quot;);                    
                </comment>
                <comment line="238">
                    Read class-nesting information.                    
                </comment>
                <comment line="246">
                    The inner classes attribute is not well-formed.                    
                </comment>
                <comment line="247">
                    It may, for example, contain no data.  Report this.                    
                </comment>
                <comment line="248">
                    We used to throw a CompilerError here (bug 4095108).                    
                </comment>
                <scope line="230"/>
                <scope line="239">
                    <declaration name="data" type="byte" line="240"/>
                    <scope line="242"/>
                </scope>
                <scope line="245"/>
            </method>
            <method name="initInnerClasses" type="void" line="258">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="data" type="byte"/>
                    <param name="flags" type="int"/>
                </params>
                <comment line="260">
                    InnerClasses_attribute.number_of_classes                    
                </comment>
                <comment line="262">
                    For each inner class name transformation, we have a record                    
                </comment>
                <comment line="263">
                    with the following fields:                    
                </comment>
                <comment line="264">
                                        
                </comment>
                <comment line="265">
                    u2 inner_class_info_index;   // CONSTANT_Class_info index                    
                </comment>
                <comment line="266">
                    u2 outer_class_info_index;   // CONSTANT_Class_info index                    
                </comment>
                <comment line="267">
                    u2 inner_name_index;         // CONSTANT_Utf8_info index                    
                </comment>
                <comment line="268">
                    u2 inner_class_access_flags; // access_flags bitmask                    
                </comment>
                <comment line="269">
                                        
                </comment>
                <comment line="270">
                    The spec states that outer_class_info_index is 0 iff                    
                </comment>
                <comment line="271">
                    the inner class is not a member of its enclosing class (i.e.                    
                </comment>
                <comment line="272">
                    it is a local or anonymous class).  The spec also states                    
                </comment>
                <comment line="273">
                    that if a class is anonymous then inner_name_index should                    
                </comment>
                <comment line="274">
                    be 0.                    
                </comment>
                <comment line="275">
                                        
                </comment>
                <comment line="276">
                    Prior to jdk1.2, javac did not implement the spec.  Instead                    
                </comment>
                <comment line="277">
                    it &lt;em&gt;always&lt;/em&gt; set outer_class_info_index to the                    
                </comment>
                <comment line="278">
                    enclosing outer class and if the class was anonymous,                    
                </comment>
                <comment line="279">
                    it set inner_name_index to be the index of a CONSTANT_Utf8                    
                </comment>
                <comment line="280">
                    entry containing the null string &quot;&quot; (idNull).  This code is                    
                </comment>
                <comment line="281">
                    designed to handle either kind of class file.                    
                </comment>
                <comment line="282">
                                        
                </comment>
                <comment line="283">
                    See also the compileClass() method in SourceClass.java.                    
                </comment>
                <comment line="285">
                    Read in the inner_class_info                    
                </comment>
                <comment line="286">
                    InnerClasses_attribute.classes.inner_class_info_index                    
                </comment>
                <comment line="288">
                    could check for zero.                    
                </comment>
                <comment line="291">
                    Read in the outer_class_info.  Note that the index will be                    
                </comment>
                <comment line="292">
                    zero if the class is &quot;not a member&quot;.                    
                </comment>
                <comment line="294">
                    InnerClasses_attribute.classes.outer_class_info_index                    
                </comment>
                <comment line="300">
                    Read in the inner_name_index.  This may be zero.  An anonymous                    
                </comment>
                <comment line="301">
                    class will either have an inner_nm_index of zero (as the spec                    
                </comment>
                <comment line="302">
                    dictates) or it will have an inner_nm of idNull (for classes                    
                </comment>
                <comment line="303">
                    generated by pre-1.2 compilers).  Handle both.                    
                </comment>
                <comment line="305">
                    InnerClasses_attribute.classes.inner_name_index                    
                </comment>
                <comment line="311">
                    Read in the modifiers for the inner class.                    
                </comment>
                <comment line="312">
                    InnerClasses_attribute.classes.inner_name_index                    
                </comment>
                <comment line="315">
                    Is the class accessible?                    
                </comment>
                <comment line="316">
                    The old code checked for                    
                </comment>
                <comment line="317">
                                        
                </comment>
                <comment line="318">
                    (!inner_nm.equals(idNull) &amp;&amp; (mods &amp; M_PRIVATE) == 0)                    
                </comment>
                <comment line="319">
                                        
                </comment>
                <comment line="320">
                    which we will preserve to keep it working for class files                    
                </comment>
                <comment line="321">
                    generated by 1.1 compilers.  In addition we check for                    
                </comment>
                <comment line="322">
                                        
                </comment>
                <comment line="323">
                    (outer != null)                    
                </comment>
                <comment line="324">
                                        
                </comment>
                <comment line="325">
                    as an additional check that only makes sense with 1.2                    
                </comment>
                <comment line="326">
                    generated files.  Note that it is entirely possible that                    
                </comment>
                <comment line="327">
                    the M_PRIVATE bit is always enough.  We are being                    
                </comment>
                <comment line="328">
                    conservative here.                    
                </comment>
                <comment line="329">
                                        
                </comment>
                <comment line="330">
                    The ATT_ALLCLASSES flag causes the M_PRIVATE modifier                    
                </comment>
                <comment line="331">
                    to be ignored, and is used by tools such as &apos;javap&apos; that                    
                </comment>
                <comment line="332">
                    wish to examine all classes regardless of the normal access                    
                </comment>
                <comment line="333">
                    controls that apply during compilation.  Note that anonymous                    
                </comment>
                <comment line="334">
                    and local classes are still not considered accessible, though                    
                </comment>
                <comment line="335">
                    named local classes in jdk1.1 may slip through.  Note that                    
                </comment>
                <comment line="336">
                    this accessibility test is an optimization, and it is safe to                    
                </comment>
                <comment line="337">
                    err on the side of greater accessibility.                    
                </comment>
                <comment line="344">
                    The reader should note that there has been a significant change                    
                </comment>
                <comment line="345">
                    in the way that the InnerClasses attribute is being handled.                    
                </comment>
                <comment line="346">
                    In particular, previously the compiler called initInner() for                    
                </comment>
                <comment line="347">
                    &lt;em&gt;every&lt;/em&gt; inner class.  Now the compiler does not call                    
                </comment>
                <comment line="348">
                    initInner() if the inner class is inaccessible.  This means                    
                </comment>
                <comment line="349">
                    that inaccessible inner classes don&apos;t have any of the processing                    
                </comment>
                <comment line="350">
                    from initInner() done for them: fixing the access flags,                    
                </comment>
                <comment line="351">
                    setting outerClass, setting outerMember in their outerClass,                    
                </comment>
                <comment line="352">
                    etc.  We believe this is fine: if the class is inaccessible                    
                </comment>
                <comment line="353">
                    and binary, then everyone who needs to see its internals                    
                </comment>
                <comment line="354">
                    has already been compiled.  Hopefully.                    
                </comment>
                <comment line="360">
                    Tell the type module about the nesting relation:                    
                </comment>
                <comment line="364">
                    The inner class in the record is this class.                    
                </comment>
                <comment line="369">
                    report the error elsewhere                    
                </comment>
                <comment line="372">
                    The outer class in the record is this class.                    
                </comment>
                <comment line="378">
                    report the error elsewhere                    
                </comment>
                <declaration name="ds" type="DataInputStream" line="259"/>
                <declaration name="nrec" type="int" line="260"/>
                <scope line="261">
                    <declaration name="inner_index" type="int" line="287"/>
                    <declaration name="inner" type="ClassDeclaration" line="289"/>
                    <declaration name="outer" type="ClassDeclaration" line="293"/>
                    <declaration name="outer_index" type="int" line="295"/>
                    <scope line="296"/>
                    <declaration name="inner_nm" type="Identifier" line="304"/>
                    <declaration name="inner_nm_index" type="int" line="306"/>
                    <scope line="307"/>
                    <declaration name="mods" type="int" line="313"/>
                    <declaration name="accessible" type="boolean" line="338"/>
                    <scope line="356">
                        <declaration name="nm" type="Identifier" line="357"/>
                        <scope line="363">
                            <scope line="365">
                                <declaration name="outerClass" type="ClassDefinition" line="366"/>
                            </scope>
                            <scope line="368"/>
                        </scope>
                        <scope line="371">
                            <scope line="373">
                                <declaration name="innerClass" type="ClassDefinition" line="374"/>
                            </scope>
                            <scope line="377"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="initInner" type="void" line="385">
                <params>
                    <param name="outerClass" type="ClassDefinition"/>
                    <param name="mods" type="int"/>
                </params>
                <comment line="387">
                    already done                    
                </comment>
                <comment line="388">
                    Maybe set static, protected, or private.
                    if ((modifiers &amp; M_PUBLIC) != 0)
                    mods &amp;= M_STATIC;
                    else
                    mods &amp;= M_PRIVATE | M_PROTECTED | M_STATIC;
                    modifiers |= mods;                    
                </comment>
                <comment line="396">
                    For an inner class, the class access may have been weakened                    
                </comment>
                <comment line="397">
                    from that originally declared the source.  We must take the                    
                </comment>
                <comment line="398">
                    actual access permissions against which we check any source                    
                </comment>
                <comment line="399">
                    we are currently compiling from the InnerClasses attribute.                    
                </comment>
                <comment line="400">
                    We attempt to guard here against bogus combinations of modifiers.                    
                </comment>
                <comment line="402">
                    Private cannot be combined with public or protected.                    
                </comment>
                <comment line="405">
                    Protected cannot be combined with public.                    
                </comment>
                <comment line="409">
                    All interfaces are implicitly abstract.                    
                </comment>
                <comment line="410">
                    All interfaces that are members of a type are implicitly static.                    
                </comment>
                <comment line="414">
                    All types that are members of interfaces are implicitly                    
                </comment>
                <comment line="415">
                    public and static.                    
                </comment>
                <scope line="401"/>
                <scope line="404"/>
                <scope line="408"/>
                <scope line="413"/>
                <scope line="425">
                    <scope line="428"/>
                </scope>
            </method>
            <method name="initOuter" type="void" line="434">
                <params>
                    <param name="innerClass" type="ClassDefinition"/>
                    <param name="mods" type="int"/>
                </params>
            </method>
            <javadoc line="440">
                Write the class out to a given stream.  This function mirrors the loader.                
            </javadoc>
            <method name="write" type="void" line="443">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="out" type="OutputStream"/>
                </params>
                <comment line="446">
                    write out the header                    
                </comment>
                <comment line="451">
                    Write out the constant pool                    
                </comment>
                <comment line="454">
                    Write class information                    
                </comment>
                <comment line="464">
                    count the fields and the methods                    
                </comment>
                <comment line="469">
                    write out each the field count, and then each field                    
                </comment>
                <comment line="482">
                    write out each method count, and then each method                    
                </comment>
                <comment line="495">
                    write out the class attributes                    
                </comment>
                <declaration name="data" type="DataOutputStream" line="444"/>
                <scope line="460"/>
                <declaration name="fieldCount" type="int" line="465"/>
                <scope line="471">
                    <scope line="472">
                        <declaration name="name" type="String" line="474"/>
                        <declaration name="signature" type="String" line="475"/>
                    </scope>
                </scope>
                <scope line="484">
                    <scope line="485">
                        <declaration name="name" type="String" line="487"/>
                        <declaration name="signature" type="String" line="488"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="500">
                Get the dependencies                
            </javadoc>
            <method name="getDependencies" type="Enumeration" line="503"/>
            <javadoc line="507">
                Add a dependency                
            </javadoc>
            <method name="addDependency" type="void" line="510">
                <params>
                    <param name="c" type="ClassDeclaration"/>
                </params>
                <scope line="511"/>
            </method>
            <javadoc line="516">
                Get the constant pool                
            </javadoc>
            <method name="getConstants" type="BinaryConstantPool" line="519"/>
            <javadoc line="523">
                Get a class attribute                
            </javadoc>
            <method name="getAttribute" type="byte" line="526">
                <params>
                    <param name="name" type="Identifier"/>
                </params>
                <scope line="527">
                    <scope line="528"/>
                </scope>
            </method>
        </class>
    </source>