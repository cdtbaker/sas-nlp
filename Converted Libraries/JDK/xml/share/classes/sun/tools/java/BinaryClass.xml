<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.java">
        <import package="java.io.IOException"/>
        <import package="java.io.DataInputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <class name="BinaryClass" line="10">
            <extends class="ClassDefinition"/>
            <implements interface="Constants"/>
            <javadoc line="10">
                WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="cpool" type="BinaryConstantPool" line="16"/>
            <declaration name="atts" type="BinaryAttribute" line="17"/>
            <declaration name="dependencies" type="Vector" line="18"/>
            <declaration name="haveLoadedNested" type="boolean" line="19"/>
            <javadoc line="20">
                Constructor                
            </javadoc>
            <method name="BinaryClass" type="constructor" line="23">
                <params>
                    <param name="source" type="Object"/>
                    <param name="declaration" type="ClassDeclaration"/>
                    <param name="modifiers" type="int"/>
                    <param name="superClass" type="ClassDeclaration"/>
                    <param name="interfaces" type="ClassDeclaration"/>
                    <param name="dependencies" type="Vector"/>
                </params>
            </method>
            <declaration name="basicCheckDone" type="boolean" line="29"/>
            <javadoc line="29">
                Flags used by basicCheck() to avoid duplicate calls.
                  (Part of fix for 4105911)                
            </javadoc>
            <declaration name="basicChecking" type="boolean" line="34"/>
            <javadoc line="35">
                Ready a BinaryClass for further checking.  Note that, until recently,
                  BinaryClass relied on the default basicCheck() provided by
                  ClassDefinition.  The definition here has been added to ensure that
                  the information generated by collectInheritedMethods is available
                  for BinaryClasses.                
            </javadoc>
            <method name="basicCheck" type="void" line="42">
                <params>
                    <param name="env" type="Environment"/>
                </params>
                <scope line="44"/>
                <scope line="51"/>
            </method>
            <javadoc line="58">
                Load a binary class                
            </javadoc>
            <method name="load" type="BinaryClass" line="61">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="in" type="DataInputStream"/>
                </params>
            </method>
            <method name="load" type="BinaryClass" line="64">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="in" type="DataInputStream"/>
                    <param name="mask" type="int"/>
                </params>
                <declaration name="magic" type="int" line="65"/>
                <scope line="66"/>
                <declaration name="minor_version" type="int" line="69"/>
                <declaration name="version" type="int" line="70"/>
                <scope line="71"/>
                <scope line="74"/>
                <declaration name="cpool" type="BinaryConstantPool" line="77"/>
                <declaration name="dependencies" type="Vector" line="78"/>
                <declaration name="classMod" type="int" line="79"/>
                <declaration name="classDecl" type="ClassDeclaration" line="80"/>
                <declaration name="superClassDecl" type="ClassDeclaration" line="81"/>
                <declaration name="interfaces" type="ClassDeclaration" line="82"/>
                <scope line="83"/>
                <declaration name="c" type="BinaryClass" line="86"/>
                <declaration name="nfields" type="int" line="89"/>
                <scope line="90">
                    <declaration name="fieldMod" type="int" line="91"/>
                    <declaration name="fieldName" type="Identifier" line="92"/>
                    <declaration name="fieldType" type="Type" line="93"/>
                    <declaration name="atts" type="BinaryAttribute" line="94"/>
                </scope>
                <declaration name="nmethods" type="int" line="97"/>
                <scope line="98">
                    <declaration name="methMod" type="int" line="99"/>
                    <declaration name="methName" type="Identifier" line="100"/>
                    <declaration name="methType" type="Type" line="101"/>
                    <declaration name="atts" type="BinaryAttribute" line="102"/>
                </scope>
                <declaration name="data" type="byte" line="106"/>
                <scope line="107">
                    <declaration name="dataStream" type="DataInputStream" line="108"/>
                </scope>
                <scope line="112"/>
                <scope line="115"/>
                <scope line="118"/>
            </method>
            <javadoc line="123">
                Called when an environment ties a binary definition to a declaration.
                  At this point, auxiliary definitions may be loaded.                
            </javadoc>
            <method name="loadNested" type="void" line="127">
                <params>
                    <param name="env" type="Environment"/>
                </params>
            </method>
            <method name="loadNested" type="void" line="130">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="flags" type="int"/>
                </params>
                <scope line="131"/>
                <scope line="136">
                    <declaration name="data" type="byte" line="137"/>
                    <scope line="139"/>
                </scope>
                <scope line="143"/>
            </method>
            <method name="initInnerClasses" type="void" line="148">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="data" type="byte"/>
                    <param name="flags" type="int"/>
                </params>
                <declaration name="ds" type="DataInputStream" line="149"/>
                <declaration name="nrec" type="int" line="150"/>
                <scope line="151">
                    <declaration name="inner_index" type="int" line="152"/>
                    <declaration name="inner" type="ClassDeclaration" line="153"/>
                    <declaration name="outer" type="ClassDeclaration" line="154"/>
                    <declaration name="outer_index" type="int" line="155"/>
                    <scope line="156"/>
                    <declaration name="inner_nm" type="Identifier" line="159"/>
                    <declaration name="inner_nm_index" type="int" line="160"/>
                    <scope line="161"/>
                    <declaration name="mods" type="int" line="164"/>
                    <declaration name="accessible" type="boolean" line="165"/>
                    <scope line="166">
                        <declaration name="nm" type="Identifier" line="167"/>
                        <scope line="169">
                            <scope line="170">
                                <declaration name="outerClass" type="ClassDefinition" line="171"/>
                            </scope>
                            <scope line="174"/>
                        </scope>
                        <scope line="177">
                            <scope line="178">
                                <declaration name="innerClass" type="ClassDefinition" line="179"/>
                            </scope>
                            <scope line="182"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="initInner" type="void" line="188">
                <params>
                    <param name="outerClass" type="ClassDefinition"/>
                    <param name="mods" type="int"/>
                </params>
                <scope line="190"/>
                <scope line="193"/>
                <scope line="196"/>
                <scope line="199"/>
                <scope line="205">
                    <scope line="206"/>
                </scope>
            </method>
            <method name="initOuter" type="void" line="211">
                <params>
                    <param name="innerClass" type="ClassDefinition"/>
                    <param name="mods" type="int"/>
                </params>
            </method>
            <javadoc line="215">
                Write the class out to a given stream.  This function mirrors the loader.                
            </javadoc>
            <method name="write" type="void" line="218">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="out" type="OutputStream"/>
                </params>
                <declaration name="data" type="DataOutputStream" line="219"/>
                <scope line="228"/>
                <declaration name="fieldCount" type="int" line="231"/>
                <scope line="235">
                    <scope line="236">
                        <declaration name="name" type="String" line="238"/>
                        <declaration name="signature" type="String" line="239"/>
                    </scope>
                </scope>
                <scope line="246">
                    <scope line="247">
                        <declaration name="name" type="String" line="249"/>
                        <declaration name="signature" type="String" line="250"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="259">
                Get the dependencies                
            </javadoc>
            <method name="getDependencies" type="Enumeration" line="262"/>
            <javadoc line="265">
                Add a dependency                
            </javadoc>
            <method name="addDependency" type="void" line="268">
                <params>
                    <param name="c" type="ClassDeclaration"/>
                </params>
                <scope line="269"/>
            </method>
            <javadoc line="273">
                Get the constant pool                
            </javadoc>
            <method name="getConstants" type="BinaryConstantPool" line="276"/>
            <javadoc line="279">
                Get a class attribute                
            </javadoc>
            <method name="getAttribute" type="byte" line="282">
                <params>
                    <param name="name" type="Identifier"/>
                </params>
                <scope line="283">
                    <scope line="284"/>
                </scope>
            </method>
        </class>
    </source>