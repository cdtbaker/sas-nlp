<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.java">
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.io.BufferedReader"/>
        <import package="java.io.FilterReader"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <class name="ScannerInputReader" line="35">
            <extends class="FilterReader"/>
            <comment line="52">
                A note.  This class does not really properly subclass FilterReader.                
            </comment>
            <comment line="53">
                Since this class only overrides the single character read method,                
            </comment>
            <comment line="54">
                and not the multi-character read method, any use of the latter                
            </comment>
            <comment line="55">
                will not work properly.  Any attempt to use this code outside of                
            </comment>
            <comment line="56">
                the compiler should take that into account.                
            </comment>
            <comment line="57">
                                
            </comment>
            <comment line="58">
                For efficiency, it might be worth moving this code to Scanner and                
            </comment>
            <comment line="59">
                getting rid of this class.                
            </comment>
            <comment line="85">
                ------------------------------------------------------------                
            </comment>
            <comment line="86">
                Buffering code.                
            </comment>
            <comment line="88">
                The size of our buffer.                
            </comment>
            <comment line="91">
                A character buffer.                
            </comment>
            <comment line="94">
                The index of the next character to be &quot;read&quot; from the buffer.                
            </comment>
            <comment line="97">
                The number of characters in the buffer.  -1 if EOF is reached.                
            </comment>
            <comment line="123">
                ------------------------------------------------------------                
            </comment>
            <implements interface="Constants"/>
            <javadoc line="35">
                An input stream for java programs. The stream treats either &quot;\n&quot;, &quot;\r&quot;
                  or &quot;\r\n&quot; as the end of a line, it always returns \n. It also parses
                  UNICODE characters expressed as \uffff. However, if it sees &quot;\\&quot;, the
                  second slash cannot begin a unicode sequence. It keeps track of the current
                  position in the input stream.
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
                <author>
                    Arthur van Hoff                    
                </author>
            </javadoc>
            <declaration name="env" type="Environment" line="60"/>
            <declaration name="pos" type="long" line="61"/>
            <declaration name="chpos" type="long" line="63"/>
            <declaration name="pushBack" type="int" line="64"/>
            <method name="ScannerInputReader" type="constructor" line="68">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="in" type="InputStream"/>
                </params>
                <comment line="69">
                    ScannerInputStream has been modified to no longer use                    
                </comment>
                <comment line="70">
                    BufferedReader.  It now does its own buffering for                    
                </comment>
                <comment line="71">
                    performance.                    
                </comment>
                <comment line="76">
                    Start out the buffer empty.                    
                </comment>
            </method>
            <declaration name="BUFFERLEN" type="int" line="88"/>
            <declaration name="buffer" type="char[]" line="91"/>
            <declaration name="currentIndex" type="int" line="94"/>
            <declaration name="numChars" type="int" line="97"/>
            <javadoc line="99">
                Get the next character from our buffer.
                  Note: this method has been inlined by hand in the `read&apos; method
                  below.  Any changes made to this method should be equally applied
                  to that code.                
            </javadoc>
            <method name="getNextChar" type="int" line="105">
                <comment line="106">
                    Check to see if we have either run out of characters in our                    
                </comment>
                <comment line="107">
                    buffer or gotten to EOF on a previous call.                    
                </comment>
                <comment line="111">
                    We have reached EOF.                    
                </comment>
                <comment line="115">
                    No EOF.  currentIndex points to first char in buffer.                    
                </comment>
                <scope line="108">
                    <scope line="110"/>
                </scope>
            </method>
            <method name="read" type="int" line="124">
                <params>
                    <param name="buffer" type="char[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="read" type="int" line="129">
                <comment line="136">
                    Here the call...                    
                </comment>
                <comment line="137">
                    c = getNextChar();                    
                </comment>
                <comment line="138">
                    has been inlined by hand for performance.                    
                </comment>
                <comment line="143">
                    We have reached EOF.                    
                </comment>
                <comment line="148">
                    No EOF.  currentIndex points to first char in buffer.                    
                </comment>
                <comment line="155">
                    this is fatal error                    
                </comment>
                <comment line="162">
                    parse special characters                    
                </comment>
                <comment line="165">
                    -2 is a special code indicating a pushback of a backslash that                    
                </comment>
                <comment line="166">
                    definitely isn&apos;t the start of a unicode sequence.                    
                </comment>
                <comment line="174">
                    we have a unicode sequence                    
                </comment>
                <comment line="180">
                    unicode escape sequence                    
                </comment>
                <comment line="205">
                    To read the following line, switch \ and /...                    
                </comment>
                <comment line="206">
                    Handle /u000a, /u000A, /u000d, /u000D properly as                    
                </comment>
                <comment line="207">
                    line terminators as per JLS 3.4, even though they are encoded                    
                </comment>
                <comment line="208">
                    (this properly respects the order given in JLS 3.2).                    
                </comment>
                <declaration name="c" type="int" line="133"/>
                <scope line="134">
                    <scope line="135">
                        <scope line="140">
                            <scope line="142"/>
                        </scope>
                    </scope>
                    <scope line="153"/>
                </scope>
                <scope line="158"/>
                <scope line="170"/>
                <scope line="176"/>
                <declaration name="d" type="int" line="181"/>
                <scope line="182"/>
                <scope line="214"/>
                <scope line="216"/>
                <scope line="230"/>
                <scope line="232"/>
            </method>
        </class>
    </source>