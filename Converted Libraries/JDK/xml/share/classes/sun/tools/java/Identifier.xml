<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.java">
        <import package="java.util.Hashtable"/>
        <import package="java.io.PrintStream"/>
        <import package="java.util.Enumeration"/>
        <class name="Identifier" line="5">
            <implements interface="Constants"/>
            <javadoc line="5">
                A class to represent identifiers.&lt;p&gt;
                  An identifier instance is very similar to a String. The difference
                  is that identifier can&apos;t be instanciated directly, instead they are
                  looked up in a hash table. This means that identifiers with the same
                  name map to the same identifier object. This makes comparisons of
                  identifiers much faster.&lt;p&gt;
                  A lot of identifiers are qualified, that is they have &apos;.&apos;s in them.
                  Each qualified identifier is chopped up into the qualifier and the
                  name. The qualifier is cached in the value field.&lt;p&gt;
                  Unqualified identifiers can have a type. This type is an integer that
                  can be used by a scanner as a token value. This value has to be set
                  using the setType method.&lt;p&gt;
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
                <author>
                    Arthur van Hoff                    
                </author>
            </javadoc>
            <declaration name="hash" type="Hashtable" line="24"/>
            <javadoc line="24">
                The hashtable of identifiers                
            </javadoc>
            <declaration name="name" type="String" line="28"/>
            <javadoc line="28">
                The name of the identifier                
            </javadoc>
            <declaration name="value" type="Object" line="32"/>
            <javadoc line="32">
                The value of the identifier, for keywords this is an
                  instance of class Integer, for qualified names this is
                  another identifier (the qualifier).                
            </javadoc>
            <declaration name="typeObject" type="Type" line="38"/>
            <javadoc line="38">
                The Type which corresponds to this Identifier.  This is used as
                  cache for Type.tClass() and shouldn&apos;t be used outside of that
                  context.                
            </javadoc>
            <declaration name="ipos" type="int" line="44"/>
            <javadoc line="44">
                The index of INNERCLASS_PREFIX in the name, or -1 if none.                
            </javadoc>
            <javadoc line="48">
                Construct an identifier. Don&apos;t call this directly,
                  use lookup instead.                
                <see>
                    Identifier.lookup                    
                </see>
            </javadoc>
            <method name="Identifier" type="constructor" line="53">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="57">
                Get the type of the identifier.                
            </javadoc>
            <method name="getType" type="int" line="60"/>
            <javadoc line="63">
                Set the type of the identifier.                
            </javadoc>
            <method name="setType" type="void" line="66">
                <params>
                    <param name="t" type="int"/>
                </params>
            </method>
            <javadoc line="69">
                Lookup an identifier.                
            </javadoc>
            <method name="lookup" type="Identifier" line="72">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="id" type="Identifier" line="73"/>
                <scope line="74"/>
            </method>
            <javadoc line="79">
                Lookup a qualified identifier.                
            </javadoc>
            <method name="lookup" type="Identifier" line="82">
                <params>
                    <param name="q" type="Identifier"/>
                    <param name="n" type="Identifier"/>
                </params>
                <declaration name="id" type="Identifier" line="85"/>
            </method>
            <javadoc line="89">
                Lookup an inner identifier.
                  (Note:  n can be idNull.)                
            </javadoc>
            <method name="lookupInner" type="Identifier" line="93">
                <params>
                    <param name="c" type="Identifier"/>
                    <param name="n" type="Identifier"/>
                </params>
                <declaration name="id" type="Identifier" line="94"/>
                <scope line="95"/>
                <scope line="99"/>
            </method>
            <javadoc line="105">
                Convert to a string.                
            </javadoc>
            <method name="toString" type="String" line="108"/>
            <javadoc line="111">
                Check if the name is qualified (ie: it contains a &apos;.&apos;).                
            </javadoc>
            <method name="isQualified" type="boolean" line="114">
                <scope line="115">
                    <declaration name="idot" type="int" line="116"/>
                    <declaration name="index" type="int" line="119"/>
                </scope>
            </method>
            <javadoc line="124">
                Return the qualifier. The null identifier is returned if
                  the name was not qualified.  The qualifier does not include
                  any inner part of the name.                
            </javadoc>
            <method name="getQualifier" type="Identifier" line="129"/>
            <javadoc line="132">
                Return the unqualified name.
                  In the case of an inner name, the unqualified name
                  will itself contain components.                
            </javadoc>
            <method name="getName" type="Identifier" line="137"/>
            <declaration name="INNERCLASS_PREFIX" type="char" line="140"/>
            <javadoc line="140">
                A space character, which precedes the first inner class
                  name in a qualified name, and thus marks the qualification
                  as involving inner classes, instead of merely packages.&lt;p&gt;
                  Ex:  &lt;tt&gt;java.util.Vector. Enumerator&lt;/tt&gt;.                
            </javadoc>
            <javadoc line="147">
                Check if the name is inner (ie: it contains a &apos; &apos;).                
            </javadoc>
            <method name="isInner" type="boolean" line="150"/>
            <javadoc line="153">
                Return the class name, without its qualifier,
                  and with any nesting flattened into a new qualfication structure.
                  If the original identifier is inner,
                  the result will be qualified, and can be further
                  decomposed by means of &lt;tt&gt;getQualifier&lt;/tt&gt; and &lt;tt&gt;getName&lt;/tt&gt;.
                  &lt;p&gt;
                  For example:
                  &lt;pre&gt;
                  Identifier id = Identifier.lookup(&quot;pkg.Foo. Bar&quot;);
                  id.getName().name      =&gt;  &quot;Foo. Bar&quot;
                  id.getFlatName().name  =&gt;  &quot;Foo.Bar&quot;
                  &lt;/pre&gt;                
            </javadoc>
            <method name="getFlatName" type="Identifier" line="167">
                <scope line="168"/>
                <scope line="171">
                    <scope line="172"/>
                    <declaration name="n" type="String" line="175"/>
                    <declaration name="t" type="String" line="176"/>
                </scope>
            </method>
            <method name="getTopName" type="Identifier" line="181"/>
            <javadoc line="185">
                Yet another way to slice qualified identifiers:
                  The head of an identifier is its first qualifier component,
                  and the tail is the rest of them.                
            </javadoc>
            <method name="getHead" type="Identifier" line="190">
                <declaration name="id" type="Identifier" line="191"/>
            </method>
            <javadoc line="195">
                @see getHead                
            </javadoc>
            <method name="getTail" type="Identifier" line="198">
                <declaration name="id" type="Identifier" line="199"/>
            </method>
            <declaration name="ambigPrefix" type="String" line="203"/>
            <javadoc line="203">
                A special prefix to add to ambiguous names.                
            </javadoc>
            <javadoc line="207">
                Determine whether an Identifier has been marked as ambiguous.                
            </javadoc>
            <method name="hasAmbigPrefix" type="boolean" line="210"/>
            <javadoc line="213">
                Add ambigPrefix to `this&apos; to make a new Identifier marked as
                  ambiguous.  It is important that this new Identifier not refer
                  to an existing class.                
            </javadoc>
            <method name="addAmbigPrefix" type="Identifier" line="218"/>
            <javadoc line="221">
                Remove the ambigPrefix from `this&apos; to get the original identifier.                
            </javadoc>
            <method name="removeAmbigPrefix" type="Identifier" line="224">
                <scope line="225"/>
                <scope line="228"/>
            </method>
        </class>
    </source>