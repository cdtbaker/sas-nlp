<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.asm">
        <import package="sun.tools.java"/>
        <import package="java.util.Enumeration"/>
        <import package="java.io.IOException"/>
        <import package="java.io.DataOutputStream"/>
        <class name="Instruction" line="33">
            <comment line="48">
                JCOV                
            </comment>
            <comment line="49">
                boolean flagCondInverted;         if true, the condition  is reversed                
            </comment>
            <comment line="51">
                boolean flagNoCovered = false;  if true, the command will                
            </comment>
            <comment line="83">
                end JCOV                
            </comment>
            <implements interface="Constants"/>
            <javadoc line="33">
                An Java instruction
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="where" type="long" line="42"/>
            <declaration name="pc" type="int" line="43"/>
            <declaration name="opc" type="int" line="44"/>
            <declaration name="value" type="Object" line="45"/>
            <declaration name="next" type="Instruction" line="46"/>
            <declaration name="flagCondInverted" type="boolean" line="48"/>
            <declaration name="flagNoCovered" type="boolean" line="50"/>
            <javadoc line="54">
                Constructor                
            </javadoc>
            <method name="Instruction" type="constructor" line="57">
                <params>
                    <param name="where" type="long"/>
                    <param name="opc" type="int"/>
                    <param name="value" type="Object"/>
                    <param name="flagCondInverted" type="boolean"/>
                </params>
            </method>
            <javadoc line="64">
                Constructor                
            </javadoc>
            <method name="Instruction" type="constructor" line="67">
                <params>
                    <param name="flagNoCovered" type="boolean"/>
                    <param name="where" type="long"/>
                    <param name="opc" type="int"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="74">
                Constructor                
            </javadoc>
            <method name="Instruction" type="constructor" line="77">
                <params>
                    <param name="where" type="long"/>
                    <param name="opc" type="int"/>
                    <param name="flagNoCovered" type="boolean"/>
                </params>
            </method>
            <javadoc line="84">
                Constructor                
            </javadoc>
            <method name="Instruction" type="constructor" line="87">
                <params>
                    <param name="where" type="long"/>
                    <param name="opc" type="int"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <declaration name="SWITCHRATIO" type="double" line="93"/>
            <javadoc line="93">
                When deciding between a lookupswitch and a tableswitch, this
                  value is used in determining how much size increase is
                  acceptable.                
            </javadoc>
            <scope line="100">
                <declaration name="ratio" type="double" line="106"/>
                <declaration name="valStr" type="String" line="107"/>
                <scope line="108">
                    <scope line="109">
                        <declaration name="temp" type="double" line="110"/>
                        <scope line="111"/>
                    </scope>
                    <scope line="114"/>
                </scope>
            </scope>
            <javadoc line="119">
                Accessor                
            </javadoc>
            <method name="getOpcode" type="int" line="122"/>
            <method name="getValue" type="Object" line="126"/>
            <method name="setValue" type="void" line="130">
                <params>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="135">
                Optimize                
            </javadoc>
            <method name="optimize" type="void" line="138">
                <params>
                    <param name="env" type="Environment"/>
                </params>
                <comment line="143">
                    Don&apos;t keep the LocalVariable info around, unless we
                     are actually going to generate a local variable table.                    
                </comment>
                <comment line="154">
                    goto to the next instruction, obsolete                    
                </comment>
                <comment line="159">
                    We optimize
                    
                              goto Tag
                              ...
                        Tag:
                              return
                    
                     except when we&apos;re generating debuggable code.  When
                     we&apos;re generating debuggable code, we leave it alone,
                     in order to provide better stepping behavior.  Consider
                     a method the end of which looks like this:
                    
                              ...
                              break;
                          }    end of loop
                      }    end of method
                    
                     If we optimize the goto away, we&apos;ll be left with a
                     single instruction (return) and the need to ascribe that
                     instruction to two source lines (the break statement and
                     the method&apos;s right curly).  Can&apos;t get there from here.
                     Depending on which line-number ascription we choose, the
                     stepping user will step directly from the break statement
                     back into the caller of the method (case 1) or from the
                     statement that precedes the break statement to the method&apos;s
                     right curly (case 2).  Similarly, he&apos;ll be able to set a
                     breakpoint on the break statement (case 1) or the method&apos;s
                     right curly (case 2), but not on both.  Neither case 1 nor
                     case 2 is desirable.  .We want him to see both the break
                     statement and the method&apos;s right curly when stepping,
                     and we want him to be able to set a breakpoint on either or
                     both.  So we suppress the optimization when generating
                     debuggable code.
                     (Above notes from brucek@eng in JDK1.0.2, copied here
                      by kelly.ohair@eng for JDK1.1)
                    
                     With the changes to allow -O and -g at the same time,
                     I&apos;ve changed the condition to be whether optimization is
                     on instead of the debugging flag being off.
                         - david.stoutamire@eng for 1.2                    
                </comment>
                <comment line="204">
                    goto to return                    
                </comment>
                <comment line="218">
                    branch to next instruction, obsolete                    
                </comment>
                <comment line="223">
                    Conditional branch over goto, invert
                     Note that you can&apos;t invert all conditions, condition
                     results for float/double compares are not invertable.                    
                </comment>
                <comment line="236">
                    JCOV                    
                </comment>
                <comment line="238">
                    end JCOV                    
                </comment>
                <comment line="250">
                    branch to next instruction, obsolete                    
                </comment>
                <comment line="255">
                    Conditional branch over goto, invert                    
                </comment>
                <comment line="266">
                    JCOV                    
                </comment>
                <comment line="268">
                    end JCOV                    
                </comment>
                <comment line="284">
                    Compute the approximate sizes of a tableswitch and a
                     lookupswitch.  Decide which one we want to generate.                    
                </comment>
                <scope line="144"/>
                <scope line="149">
                    <declaration name="lbl" type="Label" line="150"/>
                    <scope line="152"/>
                    <scope line="199"/>
                </scope>
                <scope line="216"/>
                <scope line="221"/>
                <scope line="248"/>
                <scope line="253"/>
                <scope line="274">
                    <declaration name="sw" type="SwitchData" line="275"/>
                    <scope line="277">
                        <declaration name="k" type="Integer" line="278"/>
                        <declaration name="lbl" type="Label" line="279"/>
                    </scope>
                    <declaration name="range" type="long" line="286"/>
                    <declaration name="entries" type="long" line="287"/>
                    <declaration name="tableSize" type="long" line="289"/>
                    <declaration name="lookupSize" type="long" line="290"/>
                    <scope line="292"/>
                    <scope line="294"/>
                </scope>
            </method>
            <javadoc line="303">
                Collect constants into the constant table                
            </javadoc>
            <method name="collect" type="void" line="306">
                <params>
                    <param name="tab" type="ConstantPool"/>
                </params>
                <scope line="310">
                    <declaration name="field" type="MemberDefinition" line="311"/>
                </scope>
                <scope line="336">
                    <declaration name="v" type="int" line="337"/>
                    <scope line="338"/>
                    <scope line="341"/>
                    <scope line="344"/>
                </scope>
                <scope line="348">
                    <declaration name="v" type="float" line="349"/>
                    <scope line="350">
                        <scope line="351"/>
                    </scope>
                    <scope line="355"/>
                    <scope line="358"/>
                </scope>
                <scope line="367">
                    <declaration name="v" type="long" line="368"/>
                    <scope line="369"/>
                    <scope line="372"/>
                </scope>
                <scope line="376">
                    <declaration name="v" type="double" line="377"/>
                    <scope line="378">
                        <scope line="379"/>
                    </scope>
                    <scope line="383"/>
                </scope>
                <scope line="392">
                    <declaration name="cd" type="CatchData" line="393"/>
                    <scope line="394"/>
                </scope>
            </method>
            <javadoc line="407">
                Balance the stack                
            </javadoc>
            <method name="balance" type="int" line="410"/>
            <javadoc line="507">
                Return the size of the instruction                
            </javadoc>
            <method name="size" type="int" line="510">
                <params>
                    <param name="tab" type="ConstantPool"/>
                </params>
                <comment line="551">
                    indicate wide variant                    
                </comment>
                <comment line="565">
                    indicate wide variant                    
                </comment>
                <comment line="583">
                    indicate wide variant                    
                </comment>
                <comment line="596">
                    indicate wide variant                    
                </comment>
                <comment line="638">
                    most opcodes are only 1 byte long                    
                </comment>
                <scope line="529"/>
                <scope line="532"/>
                <scope line="538">
                    <declaration name="v" type="int" line="539"/>
                    <scope line="540">
                        <scope line="541"/>
                    </scope>
                    <scope line="547"/>
                    <scope line="549"/>
                </scope>
                <scope line="555">
                    <declaration name="register" type="int" line="556"/>
                    <declaration name="increment" type="int" line="557"/>
                    <scope line="558"/>
                    <scope line="561"/>
                    <scope line="563"/>
                </scope>
                <scope line="570">
                    <declaration name="v" type="int" line="571"/>
                    <scope line="573">
                        <scope line="574"/>
                    </scope>
                    <scope line="579"/>
                    <scope line="581"/>
                </scope>
                <scope line="587">
                    <declaration name="v" type="int" line="588"/>
                    <scope line="589">
                        <scope line="590"/>
                    </scope>
                    <scope line="594"/>
                </scope>
                <scope line="616">
                    <declaration name="sw" type="SwitchData" line="617"/>
                    <declaration name="n" type="int" line="618"/>
                </scope>
                <scope line="623">
                    <declaration name="sw" type="SwitchData" line="624"/>
                    <declaration name="n" type="int" line="625"/>
                </scope>
            </method>
            <javadoc line="641">
                Generate code                
            </javadoc>
            <method name="write" type="void" line="644">
                <params>
                    <param name="out" type="DataOutputStream"/>
                    <param name="tab" type="ConstantPool"/>
                </params>
                <comment line="703">
                    register                    
                </comment>
                <comment line="704">
                    increment                    
                </comment>
                <comment line="710">
                    register                    
                </comment>
                <comment line="711">
                    increment                    
                </comment>
                <comment line="790">
                    fall through                    
                </comment>
                <scope line="747">
                    <declaration name="sw" type="SwitchData" line="748"/>
                    <scope line="750"/>
                    <scope line="756">
                        <declaration name="lbl" type="Label" line="757"/>
                        <declaration name="target_pc" type="int" line="758"/>
                    </scope>
                </scope>
                <scope line="764">
                    <declaration name="sw" type="SwitchData" line="765"/>
                    <declaration name="n" type="int" line="767"/>
                    <scope line="768"/>
                    <scope line="773">
                        <declaration name="v" type="Integer" line="774"/>
                    </scope>
                </scope>
                <scope line="782"/>
            </method>
            <javadoc line="797">
                toString                
            </javadoc>
            <method name="toString" type="String" line="800">
                <declaration name="prefix" type="String" line="801"/>
                <scope line="809">
                    <declaration name="register" type="int" line="810"/>
                    <declaration name="increment" type="int" line="811"/>
                </scope>
                <scope line="816">
                    <scope line="817"/>
                    <scope line="819"/>
                    <scope line="821"/>
                    <scope line="823"/>
                </scope>
                <scope line="826"/>
            </method>
        </class>
    </source>