<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.asm">
        <import package="sun.tools.java"/>
        <import package="java.io.IOException"/>
        <import package="java.io.DataOutputStream"/>
        <class name="LocalVariableTable" line="5">
            <javadoc line="5">
                This class is used to assemble the local variable table.
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
                <author>
                    Arthur van Hoff                    
                </author>
            </javadoc>
            <declaration name="locals" type="LocalVariable" line="13"/>
            <declaration name="len" type="int" line="14"/>
            <javadoc line="15">
                Define a new local variable. Merge entries where possible.                
            </javadoc>
            <method name="define" type="void" line="18">
                <params>
                    <param name="field" type="MemberDefinition"/>
                    <param name="slot" type="int"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <scope line="19"/>
                <scope line="22">
                    <scope line="23"/>
                </scope>
                <scope line="29">
                    <declaration name="newlocals" type="LocalVariable" line="30"/>
                </scope>
            </method>
            <javadoc line="36">
                Trim overlapping local ranges.  Java forbids shadowing of
                  locals in nested scopes, but non-nested scopes may still declare
                  locals with the same name.  Because local variable ranges are
                  computed using flow analysis as part of assembly, it isn&apos;t
                  possible to simply make sure variable ranges end where the
                  enclosing lexical scope ends.  This method makes sure that
                  variables with the same name don&apos;t overlap, giving priority to
                  fields with higher slot numbers that should have appeared later
                  in the source.                
            </javadoc>
            <method name="trim_ranges" type="void" line="47">
                <scope line="48">
                    <scope line="49">
                        <scope line="50">
                            <scope line="51">
                                <scope line="52"/>
                                <scope line="55"/>
                            </scope>
                            <scope line="58">
                                <scope line="59"/>
                                <scope line="62"/>
                            </scope>
                            <scope line="65"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="71">
                Write out the data.                
            </javadoc>
            <method name="write" type="void" line="74">
                <params>
                    <param name="env" type="Environment"/>
                    <param name="out" type="DataOutputStream"/>
                    <param name="tab" type="ConstantPool"/>
                </params>
                <scope line="77"/>
            </method>
        </class>
    </source>