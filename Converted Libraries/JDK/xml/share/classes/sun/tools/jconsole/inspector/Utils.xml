<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.jconsole.inspector">
        <import package="java.awt.event"/>
        <import package="java.lang.reflect"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.math.BigInteger"/>
        <import package="java.util"/>
        <import package="java.util.concurrent.ExecutionException"/>
        <import package="javax.management"/>
        <import package="javax.management.openmbean"/>
        <import package="javax.swing"/>
        <import package="javax.swing.text"/>
        <class name="Utils" line="39">
            <method name="Utils" type="constructor" line="41"/>
            <declaration name="tableNavigationKeys" type="Set&lt;Integer&gt;" line="43"/>
            <declaration name="primitiveWrappers" type="Set&lt;Class&lt;?&gt;&gt;" line="51"/>
            <declaration name="primitives" type="Set&lt;Class&lt;?&gt;&gt;" line="56"/>
            <declaration name="primitiveMap" type="Map&lt;String,Class&lt;?&gt;&gt;" line="57"/>
            <declaration name="primitiveToWrapper" type="Map&lt;String,Class&lt;?&gt;&gt;" line="59"/>
            <declaration name="editableTypes" type="Set&lt;String&gt;" line="61"/>
            <declaration name="extraEditableClasses" type="Set&lt;Class&lt;?&gt;&gt;" line="62"/>
            <declaration name="numericalTypes" type="Set&lt;String&gt;" line="67"/>
            <declaration name="extraNumericalTypes" type="Set&lt;String&gt;" line="68"/>
            <declaration name="booleanTypes" type="Set&lt;String&gt;" line="73"/>
            <scope line="78">
                <scope line="80">
                    <scope line="81">
                        <declaration name="f" type="Field" line="82"/>
                        <declaration name="p" type="Class&lt;?&gt;" line="83"/>
                    </scope>
                    <scope line="87"/>
                </scope>
                <scope line="92"/>
                <scope line="95"/>
                <scope line="98"/>
                <scope line="102">
                    <declaration name="name" type="String" line="103"/>
                    <scope line="104"/>
                </scope>
                <scope line="108">
                    <declaration name="name" type="String" line="109"/>
                    <scope line="110"/>
                </scope>
            </scope>
            <javadoc line="116">
                This method returns the class matching the name className.
                  It&apos;s used to cater for the primitive types.                
            </javadoc>
            <method name="getClass" type="Class<?>" line="121">
                <params>
                    <param name="className" type="String"/>
                </params>
                <declaration name="c" type="Class&lt;?&gt;" line="122"/>
                <scope line="123"/>
            </method>
            <javadoc line="129">
                Check if the given collection is a uniform collection of the given type.                
            </javadoc>
            <method name="isUniformCollection" type="boolean" line="132">
                <params>
                    <param name="c" type="Collection<?>"/>
                    <param name="e" type="Class<?>"/>
                </params>
                <scope line="133"/>
                <scope line="136"/>
                <scope line="139"/>
                <scope line="142">
                    <scope line="143"/>
                </scope>
            </method>
            <javadoc line="150">
                Check if the given element denotes a supported array-friendly data
                  structure, i.e. a data structure jconsole can render as an array.                
            </javadoc>
            <method name="canBeRenderedAsArray" type="boolean" line="154">
                <params>
                    <param name="elem" type="Object"/>
                </params>
                <comment line="161">
                    Empty collections of any Java type are not handled as arrays                    
                </comment>
                <comment line="162">
                                        
                </comment>
                <comment line="165">
                    - Collections of CompositeData/TabularData are not handled                    
                </comment>
                <comment line="166">
                    as arrays                    
                </comment>
                <comment line="167">
                    - Collections of other Java types are handled as arrays                    
                </comment>
                <comment line="168">
                                        
                </comment>
                <scope line="155"/>
                <scope line="158">
                    <declaration name="c" type="Collection&lt;?&gt;" line="159"/>
                    <scope line="160"/>
                    <scope line="164"/>
                </scope>
                <scope line="173"/>
            </method>
            <javadoc line="179">
                Check if the given element is an array.
                  Multidimensional arrays are not supported.
                  Non-empty 1-dimensional arrays of CompositeData
                  and TabularData are not handled as arrays but as
                  tabular data.                
            </javadoc>
            <method name="isSupportedArray" type="boolean" line="188">
                <params>
                    <param name="elem" type="Object"/>
                </params>
                <scope line="189"/>
                <declaration name="ct" type="Class&lt;?&gt;" line="192"/>
                <scope line="193"/>
                <scope line="198"/>
            </method>
            <javadoc line="204">
                This method provides a readable classname if it&apos;s an array,
                  i.e. either the classname of the component type for arrays
                  of java reference types or the name of the primitive type
                  for arrays of java primitive types. Otherwise, it returns null.                
            </javadoc>
            <method name="getArrayClassName" type="String" line="210">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="222">
                    Should not happen                    
                </comment>
                <declaration name="className" type="String" line="211"/>
                <scope line="212">
                    <declaration name="index" type="int" line="213"/>
                    <scope line="215"/>
                    <scope line="217">
                        <scope line="218">
                            <declaration name="c" type="Class&lt;?&gt;" line="219"/>
                        </scope>
                        <scope line="221"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="231">
                This methods provides a readable classname. If the supplied name
                  parameter denotes an array this method returns either the classname
                  of the component type for arrays of java reference types or the name
                  of the primitive type for arrays of java primitive types followed by
                  n-times &quot;[]&quot; where &apos;n&apos; denotes the arity of the array. Otherwise, if
                  the supplied name doesn&apos;t denote an array it returns the same classname.                
            </javadoc>
            <method name="getReadableClassName" type="String" line="239">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="className" type="String" line="240"/>
                <scope line="241"/>
                <declaration name="index" type="int" line="244"/>
                <declaration name="brackets" type="StringBuilder" line="245"/>
                <scope line="246"/>
            </method>
            <javadoc line="252">
                This method tells whether the type is editable
                  (means can be created with a String or not)                
            </javadoc>
            <method name="isEditableType" type="boolean" line="256">
                <params>
                    <param name="type" type="String"/>
                </params>
            </method>
            <javadoc line="260">
                This method inserts a default value for the standard java types,
                  else it inserts the text name of the expected class type.
                  It acts to give a clue as to the input type.                
            </javadoc>
            <method name="getDefaultValue" type="String" line="265">
                <params>
                    <param name="type" type="String"/>
                </params>
                <scope line="267"/>
                <scope line="270"/>
                <declaration name="i" type="int" line="274"/>
                <scope line="275"/>
                <scope line="277"/>
            </method>
            <javadoc line="282">
                Try to create a Java object using a one-string-param constructor.                
            </javadoc>
            <method name="newStringConstructor" type="Object" line="286">
                <params>
                    <param name="type" type="String"/>
                    <param name="param" type="String"/>
                </params>
                <declaration name="c" type="Constructor" line="287"/>
                <scope line="288"/>
                <scope line="290">
                    <declaration name="t" type="Throwable" line="291"/>
                    <scope line="292"/>
                    <scope line="294"/>
                </scope>
            </method>
            <javadoc line="300">
                Try to convert a string value into a numerical value.                
            </javadoc>
            <method name="createNumberFromStringValue" type="Number" line="304">
                <params>
                    <param name="value" type="String"/>
                </params>
                <comment line="318">
                    OK: Ignore exception...                    
                </comment>
                <comment line="323">
                    OK: Ignore exception...                    
                </comment>
                <comment line="328">
                    OK: Ignore exception...                    
                </comment>
                <declaration name="suffix" type="String" line="305"/>
                <scope line="306"/>
                <scope line="309"/>
                <scope line="312"/>
                <scope line="315"/>
                <scope line="317"/>
                <scope line="320"/>
                <scope line="322"/>
                <scope line="325"/>
                <scope line="327"/>
            </method>
            <javadoc line="334">
                This method attempts to create an object of the given &quot;type&quot;
                  using the &quot;value&quot; parameter.
                  e.g. calling createObjectFromString(&quot;java.lang.Integer&quot;, &quot;10&quot;)
                  will return an Integer object initialized to 10.                
            </javadoc>
            <method name="createObjectFromString" type="Object" line="341">
                <params>
                    <param name="type" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <comment line="356">
                    hack for null value                    
                </comment>
                <comment line="359">
                    try to create a Java object using                    
                </comment>
                <comment line="360">
                    the one-string-param constructor                    
                </comment>
                <declaration name="result" type="Object" line="342"/>
                <scope line="343">
                    <scope line="344"/>
                    <scope line="346"/>
                </scope>
                <scope line="351"/>
                <scope line="353"/>
                <scope line="355"/>
                <scope line="358"/>
            </method>
            <javadoc line="366">
                This method is responsible for converting the inputs given by the user
                  into a useful object array for passing into a parameter array.                
            </javadoc>
            <method name="getParameters" type="Object[]" line="371">
                <params>
                    <param name="inputs" type="XTextField[]"/>
                    <param name="params" type="String[]"/>
                </params>
                <comment line="376">
                    if it&apos;s already a complex object, use the value                    
                </comment>
                <comment line="377">
                    else try to instantiate with string constructor                    
                </comment>
                <declaration name="result" type="Object" line="372"/>
                <declaration name="userInput" type="Object" line="373"/>
                <scope line="374">
                    <scope line="378"/>
                    <scope line="380"/>
                </scope>
            </method>
            <javadoc line="388">
                If the exception is wrapped, unwrap it.                
            </javadoc>
            <method name="getActualException" type="Throwable" line="391">
                <params>
                    <param name="e" type="Throwable"/>
                </params>
                <scope line="392"/>
                <scope line="398">
                    <declaration name="t" type="Throwable" line="399"/>
                    <scope line="400"/>
                </scope>
            </method>
            <class name="ReadOnlyTableCellEditor" line="407">
                <extends class="DefaultCellEditor"/>
                <method name="ReadOnlyTableCellEditor" type="constructor" line="411">
                    <params>
                        <param name="tf" type="JTextField"/>
                    </params>
                </method>
            </class>
            <class name="EditFocusAdapter" line="418">
                <extends class="FocusAdapter"/>
                <declaration name="editor" type="CellEditor" line="420"/>
                <method name="EditFocusAdapter" type="constructor" line="422">
                    <params>
                        <param name="editor" type="CellEditor"/>
                    </params>
                </method>
                <method name="focusLost" type="void" line="427">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
            </class>
            <class name="CopyKeyAdapter" line="432">
                <extends class="KeyAdapter"/>
                <declaration name="defaultEditorKitCopyActionName" type="String" line="433"/>
                <declaration name="transferHandlerCopyActionName" type="String" line="435"/>
                <method name="keyPressed" type="void" line="438">
                    <params>
                        <param name="e" type="KeyEvent"/>
                    </params>
                    <comment line="439">
                        Accept &quot;copy&quot; key strokes                        
                    </comment>
                    <comment line="451">
                        Accept JTable navigation key strokes                        
                    </comment>
                    <declaration name="ks" type="KeyStroke" line="440"/>
                    <declaration name="comp" type="JComponent" line="442"/>
                    <scope line="443">
                        <declaration name="im" type="InputMap" line="444"/>
                        <declaration name="key" type="Object" line="445"/>
                        <scope line="447"/>
                    </scope>
                    <scope line="452"/>
                </method>
                <method name="keyTyped" type="void" line="458">
                    <params>
                        <param name="e" type="KeyEvent"/>
                    </params>
                </method>
            </class>
        </class>
    </source>