<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tools.jconsole">
        <import package="java.awt.Font"/>
        <import package="java.awt.event.WindowAdapter"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.io"/>
        <import package="javax.swing"/>
        <class name="OutputViewer" line="35">
            <comment line="51">
                Dummy to cause class to be loaded                
            </comment>
            <javadoc line="35">
                A simple console window to display messages sent to System.out and
                  System.err.
                  A stop-gap solution until an error dialog is implemented.                
            </javadoc>
            <declaration name="frame" type="JFrame" line="42"/>
            <declaration name="ta" type="JTextArea" line="43"/>
            <scope line="45"/>
            <method name="init" type="void" line="51"/>
            <method name="append" type="void" line="53">
                <params>
                    <param name="s" type="String"/>
                </params>
                <comment line="55">
                    FIXME: The frame title should be a localized string.                    
                </comment>
                <comment line="63">
                    Exit JConsole if no window remains.                    
                </comment>
                <comment line="64">
                    e.g. jconsole -version only creates the OutputViewer                    
                </comment>
                <comment line="65">
                    but no other window.                    
                </comment>
                <scope line="54">
                    <anonymous_class line="66">
                        <method name="windowClosing" type="void" line="67">
                            <params>
                                <param name="e" type="WindowEvent"/>
                            </params>
                            <scope line="68"/>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <method name="appendln" type="void" line="79">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <class name="PipeListener" line="83">
                <extends class="Thread"/>
                <declaration name="ps" type="PrintStream" line="84"/>
                <declaration name="name" type="String" line="85"/>
                <declaration name="inPipe" type="PipedInputStream" line="86"/>
                <declaration name="br" type="BufferedReader" line="87"/>
                <method name="create" type="PrintStream" line="89">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="PipeListener" type="constructor" line="93">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <scope line="96"/>
                    <scope line="100"/>
                </method>
                <method name="run" type="void" line="106">
                    <comment line="112">
                        Hack: Turn off thread check in PipedInputStream.                        
                    </comment>
                    <comment line="113">
                        Any thread should be allowed to write except this one                        
                    </comment>
                    <comment line="114">
                        but we just use this one to keep the pipe alive.                        
                    </comment>
                    <scope line="107">
                        <declaration name="str" type="String" line="108"/>
                        <scope line="109">
                            <scope line="115">
                                <declaration name="f" type="java.lang.reflect.Field" line="116"/>
                            </scope>
                            <scope line="120"/>
                        </scope>
                    </scope>
                    <scope line="126"/>
                </method>
            </class>
        </class>
    </source>