<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.server">
        <import package="java.io.File"/>
        <import package="java.io.FilePermission"/>
        <import package="java.io.IOException"/>
        <import package="java.lang.ref.ReferenceQueue"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.lang.reflect.Proxy"/>
        <import package="java.net.JarURLConnection"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.SocketPermission"/>
        <import package="java.net.URL"/>
        <import package="java.net.URLClassLoader"/>
        <import package="java.net.URLConnection"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.CodeSource"/>
        <import package="java.security.Permission"/>
        <import package="java.security.Permissions"/>
        <import package="java.security.PermissionCollection"/>
        <import package="java.security.Policy"/>
        <import package="java.security.ProtectionDomain"/>
        <import package="java.rmi.server.LogStream"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.IdentityHashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.WeakHashMap"/>
        <import package="sun.rmi.runtime.Log"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="LoaderHandler" line="34">
            <javadoc line="34">
                &lt;code&gt;LoaderHandler&lt;/code&gt; provides the implementation of the static
                  methods of the &lt;code&gt;java.rmi.server.RMIClassLoader&lt;/code&gt; class.                
                <author>
                    Ann Wollrath                    
                </author>
                <author>
                    Peter Jones                    
                </author>
                <author>
                    Laird Dornin                    
                </author>
            </javadoc>
            <declaration name="logLevel" type="int" line="42"/>
            <javadoc line="42">
                RMI class loader log level                
            </javadoc>
            <declaration name="loaderLog" type="Log" line="46"/>
            <declaration name="codebaseProperty" type="String" line="47"/>
            <javadoc line="47">
                value of &quot;java.rmi.server.codebase&quot; property, as cached at class
                  initialization time.  It may contain malformed URLs.                
            </javadoc>
            <scope line="52">
                <declaration name="prop" type="String" line="53"/>
                <scope line="54"/>
            </scope>
            <declaration name="codebaseURLs" type="URL[]" line="58"/>
            <javadoc line="58">
                list of URLs represented by the codebase property, if valid                
            </javadoc>
            <declaration name="codebaseLoaders" type="Map&amp;lt;ClassLoader,Void&amp;gt;" line="62"/>
            <javadoc line="62">
                table of class loaders that use codebase property for annotation                
            </javadoc>
            <scope line="66">
                <scope line="67"/>
            </scope>
            <declaration name="loaderTable" type="HashMap&amp;lt;LoaderKey,LoaderEntry&amp;gt;" line="71"/>
            <javadoc line="71">
                table mapping codebase URL path and context class loader pairs
                  to class loader instances.  Entries hold class loaders with weak
                  references, so this table does not prevent loaders from being
                  garbage collected.                
            </javadoc>
            <declaration name="refQueue" type="ReferenceQueue&amp;lt;Loader&amp;gt;" line="78"/>
            <javadoc line="78">
                reference queue for cleared class loader entries                
            </javadoc>
            <method name="LoaderHandler" type="constructor" line="82"/>
            <javadoc line="84">
                Returns an array of URLs initialized with the value of the
                  java.rmi.server.codebase property as the URL path.                
            </javadoc>
            <method name="getDefaultCodebaseURLs" type="URL[]" line="88">
                <scope line="89">
                    <scope line="90"/>
                    <scope line="93"/>
                </scope>
            </method>
            <javadoc line="99">
                Load a class from a network location (one or more URLs),
                  but first try to resolve the named class through the given
                  &quot;default loader&quot;.                
            </javadoc>
            <method name="loadClass" type="Class" line="104">
                <params>
                    <param name="codebase" type="String"/>
                    <param name="name" type="String"/>
                    <param name="defaultLoader" type="ClassLoader"/>
                </params>
                <scope line="105"/>
                <declaration name="urls" type="URL[]" line="108"/>
                <scope line="109"/>
                <scope line="112"/>
                <scope line="115">
                    <scope line="116">
                        <declaration name="c" type="Class" line="117"/>
                        <scope line="118"/>
                    </scope>
                    <scope line="123"/>
                </scope>
            </method>
            <javadoc line="128">
                Returns the class annotation (representing the location for
                  a class) that RMI will use to annotate the call stream when
                  marshalling objects of the given class.                
            </javadoc>
            <method name="getClassAnnotation" type="String" line="133">
                <params>
                    <param name="cl" type="Class"/>
                </params>
                <declaration name="name" type="String" line="134"/>
                <declaration name="nameLength" type="int" line="135"/>
                <scope line="136">
                    <declaration name="i" type="int" line="137"/>
                    <scope line="138"/>
                    <scope line="141"/>
                </scope>
                <declaration name="loader" type="ClassLoader" line="145"/>
                <scope line="146"/>
                <declaration name="annotation" type="String" line="149"/>
                <scope line="150"/>
                <scope line="153">
                    <scope line="154">
                        <declaration name="urls" type="URL[]" line="155"/>
                        <scope line="156">
                            <declaration name="sm" type="SecurityManager" line="157"/>
                            <scope line="158">
                                <declaration name="perms" type="Permissions" line="159"/>
                                <scope line="160">
                                    <declaration name="p" type="Permission" line="161"/>
                                    <scope line="162">
                                        <scope line="163"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="173"/>
                    <scope line="175"/>
                </scope>
                <scope line="178"/>
                <scope line="181"/>
            </method>
            <javadoc line="185">
                Returns a classloader that loads classes from the given codebase URL
                  path.  The parent classloader of the returned classloader is the
                  context class loader.                
            </javadoc>
            <method name="getClassLoader" type="ClassLoader" line="190">
                <params>
                    <param name="codebase" type="String"/>
                </params>
                <declaration name="parent" type="ClassLoader" line="191"/>
                <declaration name="urls" type="URL[]" line="192"/>
                <scope line="193"/>
                <scope line="196"/>
                <declaration name="sm" type="SecurityManager" line="199"/>
                <scope line="200"/>
                <scope line="203"/>
                <declaration name="loader" type="Loader" line="206"/>
                <scope line="207"/>
            </method>
            <javadoc line="212">
                Return the security context of the given class loader.                
            </javadoc>
            <method name="getSecurityContext" type="Object" line="215">
                <params>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <scope line="216">
                    <declaration name="urls" type="URL[]" line="217"/>
                    <scope line="218"/>
                </scope>
            </method>
            <javadoc line="224">
                Register a class loader as one whose classes should always be
                  annotated with the value of the &quot;java.rmi.server.codebase&quot; property.                
            </javadoc>
            <method name="registerCodebaseLoader" type="void" line="228">
                <params>
                    <param name="loader" type="ClassLoader"/>
                </params>
            </method>
            <javadoc line="231">
                Load a class from the RMI class loader corresponding to the given
                  codebase URL path in the current execution context.                
            </javadoc>
            <method name="loadClass" type="Class" line="235">
                <params>
                    <param name="urls" type="URL[]"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="parent" type="ClassLoader" line="236"/>
                <scope line="237"/>
                <declaration name="sm" type="SecurityManager" line="240"/>
                <scope line="241">
                    <scope line="242">
                        <declaration name="c" type="Class" line="243"/>
                        <scope line="244"/>
                    </scope>
                    <scope line="249">
                        <scope line="250"/>
                    </scope>
                </scope>
                <declaration name="loader" type="Loader" line="256"/>
                <scope line="257">
                    <scope line="258"/>
                </scope>
                <scope line="262">
                    <scope line="263">
                        <declaration name="c" type="Class" line="264"/>
                        <scope line="265"/>
                    </scope>
                    <scope line="270">
                        <scope line="271"/>
                    </scope>
                </scope>
                <scope line="277">
                    <declaration name="c" type="Class" line="278"/>
                    <scope line="279"/>
                </scope>
                <scope line="284">
                    <scope line="285"/>
                </scope>
            </method>
            <javadoc line="291">
                Define and return a dynamic proxy class in a class loader with
                  URLs supplied in the given location.  The proxy class will
                  implement interface classes named by the given array of
                  interface names.                
            </javadoc>
            <method name="loadProxyClass" type="Class" line="297">
                <params>
                    <param name="codebase" type="String"/>
                    <param name="interfaces" type="String[]"/>
                    <param name="defaultLoader" type="ClassLoader"/>
                </params>
                <scope line="298"/>
                <declaration name="parent" type="ClassLoader" line="301"/>
                <scope line="302"/>
                <declaration name="urls" type="URL[]" line="305"/>
                <scope line="306"/>
                <scope line="309"/>
                <declaration name="sm" type="SecurityManager" line="312"/>
                <scope line="313">
                    <scope line="314">
                        <declaration name="c" type="Class" line="315"/>
                        <scope line="316"/>
                    </scope>
                    <scope line="321">
                        <scope line="322"/>
                    </scope>
                </scope>
                <declaration name="loader" type="Loader" line="328"/>
                <scope line="329">
                    <scope line="330"/>
                </scope>
                <scope line="334">
                    <scope line="335">
                        <declaration name="c" type="Class" line="336"/>
                        <scope line="337"/>
                    </scope>
                    <scope line="342">
                        <scope line="343"/>
                    </scope>
                </scope>
                <scope line="349">
                    <declaration name="c" type="Class" line="350"/>
                    <scope line="351"/>
                </scope>
                <scope line="356">
                    <scope line="357"/>
                </scope>
            </method>
            <javadoc line="363">
                Define a proxy class in the default loader if appropriate.
                  Define the class in an RMI class loader otherwise.  The proxy
                  class will implement classes which are named in the supplied
                  interfaceNames.                
            </javadoc>
            <method name="loadProxyClass" type="Class" line="369">
                <params>
                    <param name="interfaceNames" type="String[]"/>
                    <param name="defaultLoader" type="ClassLoader"/>
                    <param name="codebaseLoader" type="ClassLoader"/>
                    <param name="preferCodebase" type="boolean"/>
                </params>
                <declaration name="proxyLoader" type="ClassLoader" line="370"/>
                <declaration name="classObjs" type="Class[]" line="371"/>
                <declaration name="nonpublic" type="boolean[]" line="372"/>
                <scope line="373">
                    <scope line="374">
                        <scope line="376">
                            <declaration name="definingLoaders" type="ClassLoader[]" line="377"/>
                            <scope line="378"/>
                        </scope>
                    </scope>
                    <scope line="384"/>
                    <scope line="387">
                        <scope line="388">
                            <scope line="389"/>
                            <scope line="392"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="401">
                    <declaration name="definingLoaders" type="ClassLoader[]" line="402"/>
                    <scope line="403"/>
                </scope>
                <scope line="408"/>
            </method>
            <javadoc line="413">
                Define a proxy class in the given class loader.  The proxy
                  class will implement the given interfaces Classes.                
            </javadoc>
            <method name="loadProxyClass" type="Class" line="417">
                <params>
                    <param name="loader" type="ClassLoader"/>
                    <param name="interfaces" type="Class[]"/>
                </params>
                <scope line="418"/>
                <scope line="421"/>
            </method>
            <method name="loadProxyInterfaces" type="ClassLoader" line="425">
                <params>
                    <param name="interfaces" type="String[]"/>
                    <param name="loader" type="ClassLoader"/>
                    <param name="classObjs" type="Class[]"/>
                    <param name="nonpublic" type="boolean[]"/>
                </params>
                <declaration name="nonpublicLoader" type="ClassLoader" line="426"/>
                <scope line="427">
                    <declaration name="cl" type="Class" line="428"/>
                    <scope line="429">
                        <declaration name="current" type="ClassLoader" line="430"/>
                        <scope line="431"/>
                        <scope line="434"/>
                        <scope line="438"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="445">
                Convert a string containing a space-separated list of URLs into a
                  corresponding array of URL objects, throwing a MalformedURLException
                  if any of the URLs are invalid.                
            </javadoc>
            <method name="pathToURLs" type="URL[]" line="450">
                <params>
                    <param name="path" type="String"/>
                </params>
                <scope line="451">
                    <declaration name="v" type="Object[]" line="452"/>
                    <scope line="453"/>
                </scope>
                <declaration name="st" type="StringTokenizer" line="457"/>
                <declaration name="urls" type="URL[]" line="458"/>
                <scope line="459"/>
                <scope line="462"/>
            </method>
            <declaration name="pathToURLsCache" type="Map&amp;lt;String,Object[]&amp;gt;" line="467"/>
            <javadoc line="467">
                map from weak(key=string) to [URL[], soft(key)]                
            </javadoc>
            <javadoc line="471">
                Convert an array of URL objects into a corresponding string
                  containing a space-separated list of URLs.
                  Note that if the array has zero elements, the return value is
                  null, not the empty string.                
            </javadoc>
            <method name="urlsToPath" type="String" line="477">
                <params>
                    <param name="urls" type="URL[]"/>
                </params>
                <scope line="478"/>
                <scope line="481"/>
                <scope line="484">
                    <declaration name="path" type="StringBuffer" line="485"/>
                    <scope line="486"/>
                </scope>
            </method>
            <javadoc line="493">
                Return the class loader to be used as the parent for an RMI class
                  loader used in the current execution context.                
            </javadoc>
            <method name="getRMIContextClassLoader" type="ClassLoader" line="497"/>
            <javadoc line="500">
                Look up the RMI class loader for the given codebase URL path
                  and the given parent class loader.  A new class loader instance
                  will be created and returned if no match is found.                
            </javadoc>
            <method name="lookupLoader" type="Loader" line="505">
                <params>
                    <param name="urls" type="URL[]"/>
                    <param name="parent" type="ClassLoader"/>
                </params>
                <declaration name="entry" type="LoaderEntry" line="506"/>
                <declaration name="loader" type="Loader" line="507"/>
                <scope line="508">
                    <scope line="509">
                        <scope line="510"/>
                    </scope>
                    <declaration name="key" type="LoaderKey" line="514"/>
                    <scope line="516">
                        <scope line="517"/>
                        <declaration name="acc" type="AccessControlContext" line="521"/>
                        <anonymous_class line="522">
                            <method name="run" type="Loader" line="523"/>
                        </anonymous_class>
                    </scope>
                </scope>
            </method>
            <class name="LoaderKey" line="534">
                <javadoc line="534">
                    LoaderKey holds a codebase URL path and parent class loader pair
                      used to look up RMI class loader instances in its class loader cache.                    
                </javadoc>
                <declaration name="urls" type="URL[]" line="539"/>
                <declaration name="parent" type="ClassLoader" line="540"/>
                <declaration name="hashValue" type="int" line="541"/>
                <method name="LoaderKey" type="constructor" line="542">
                    <params>
                        <param name="urls" type="URL[]"/>
                        <param name="parent" type="ClassLoader"/>
                    </params>
                    <scope line="545"/>
                    <scope line="548"/>
                </method>
                <method name="hashCode" type="int" line="552"/>
                <method name="equals" type="boolean" line="555">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="556">
                        <declaration name="other" type="LoaderKey" line="557"/>
                        <scope line="558"/>
                        <scope line="561"/>
                        <scope line="564"/>
                        <scope line="567">
                            <scope line="568"/>
                        </scope>
                    </scope>
                    <scope line="574"/>
                </method>
            </class>
            <class name="LoaderEntry" line="579">
                <extends class="WeakReference">
                    <type_params>
                        <type_param name="Loader"/>
                    </type_params>
                </extends>
                <javadoc line="579">
                    LoaderEntry contains a weak reference to an RMIClassLoader.  The
                      weak reference is registered with the private static &quot;refQueue&quot;
                      queue.  The entry contains the codebase URL path and parent class
                      loader key for the loader so that the mapping can be removed from
                      the table efficiently when the weak reference is cleared.                    
                </javadoc>
                <declaration name="key" type="LoaderKey" line="587"/>
                <declaration name="removed" type="boolean" line="588"/>
                <javadoc line="588">
                    set to true if the entry has been removed from the table
                      because it has been replaced, so it should not be attempted
                      to be removed again                    
                </javadoc>
                <method name="LoaderEntry" type="constructor" line="594">
                    <params>
                        <param name="key" type="LoaderKey"/>
                        <param name="loader" type="Loader"/>
                    </params>
                </method>
            </class>
            <javadoc line="599">
                Return the access control context that a loader for the given
                  codebase URL path should execute with.                
            </javadoc>
            <method name="getLoaderAccessControlContext" type="AccessControlContext" line="603">
                <params>
                    <param name="urls" type="URL[]"/>
                </params>
                <anonymous_class line="604">
                    <method name="run" type="PermissionCollection" line="605">
                        <declaration name="codesource" type="CodeSource" line="606"/>
                        <declaration name="p" type="Policy" line="607"/>
                        <scope line="608"/>
                        <scope line="611"/>
                    </method>
                </anonymous_class>
                <declaration name="perms" type="PermissionCollection" line="604"/>
                <declaration name="pd" type="ProtectionDomain" line="620"/>
            </method>
            <javadoc line="623">
                Adds to the specified permission collection the permissions
                  necessary to load classes from a loader with the specified URL
                  path; if &quot;forLoader&quot; is true, also adds URL-specific
                  permissions necessary for the security context that such a
                  loader operates within, such as permissions necessary for
                  granting automatic permissions to classes defined by the
                  loader.  A given permission is only added to the collection if
                  it is not already implied by the collection.                
            </javadoc>
            <method name="addPermissionsForURLs" type="void" line="633">
                <params>
                    <param name="urls" type="URL[]"/>
                    <param name="perms" type="PermissionCollection"/>
                    <param name="forLoader" type="boolean"/>
                </params>
                <scope line="634">
                    <declaration name="url" type="URL" line="635"/>
                    <scope line="636">
                        <declaration name="urlConnection" type="URLConnection" line="637"/>
                        <declaration name="p" type="Permission" line="638"/>
                        <scope line="639">
                            <scope line="640">
                                <declaration name="path" type="String" line="641"/>
                                <declaration name="endIndex" type="int" line="642"/>
                                <scope line="643">
                                    <scope line="645"/>
                                    <declaration name="p2" type="Permission" line="648"/>
                                    <scope line="649"/>
                                </scope>
                                <scope line="654">
                                    <scope line="655"/>
                                </scope>
                            </scope>
                            <scope line="660">
                                <scope line="661"/>
                                <scope line="664">
                                    <declaration name="hostURL" type="URL" line="665"/>
                                    <scope line="666"/>
                                    <declaration name="host" type="String" line="670"/>
                                    <scope line="671">
                                        <declaration name="p2" type="Permission" line="672"/>
                                        <scope line="673"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="681"/>
                </scope>
            </method>
            <class name="Loader" line="685">
                <extends class="URLClassLoader"/>
                <javadoc line="685">
                    Loader is the actual class of the RMI class loaders created
                      by the RMIClassLoader static methods.                    
                </javadoc>
                <declaration name="parent" type="ClassLoader" line="690"/>
                <javadoc line="690">
                    parent class loader, kept here as an optimization                    
                </javadoc>
                <declaration name="annotation" type="String" line="694"/>
                <javadoc line="694">
                    string form of loader&apos;s codebase URL path, also an optimization                    
                </javadoc>
                <declaration name="permissions" type="Permissions" line="698"/>
                <javadoc line="698">
                    permissions required to access loader through public API                    
                </javadoc>
                <method name="Loader" type="constructor" line="702">
                    <params>
                        <param name="urls" type="URL[]"/>
                        <param name="parent" type="ClassLoader"/>
                    </params>
                </method>
                <javadoc line="709">
                    Return the string to be annotated with all classes loaded from
                      this class loader.                    
                </javadoc>
                <method name="getClassAnnotation" type="String" line="713"/>
                <javadoc line="716">
                    Check that the current access control context has all of the
                      permissions necessary to load classes from this loader.                    
                </javadoc>
                <method name="checkPermissions" type="void" line="720">
                    <declaration name="sm" type="SecurityManager" line="721"/>
                    <scope line="722">
                        <declaration name="enum_" type="Enumeration" line="723"/>
                        <scope line="724"/>
                    </scope>
                </method>
                <javadoc line="729">
                    Return the permissions to be granted to code loaded from the
                      given code source.                    
                </javadoc>
                <method name="getPermissions" type="PermissionCollection" line="733">
                    <params>
                        <param name="codesource" type="CodeSource"/>
                    </params>
                    <declaration name="perms" type="PermissionCollection" line="734"/>
                </method>
                <javadoc line="737">
                    Return a string representation of this loader (useful for
                      debugging).                    
                </javadoc>
                <method name="toString" type="String" line="741"/>
            </class>
        </class>
    </source>