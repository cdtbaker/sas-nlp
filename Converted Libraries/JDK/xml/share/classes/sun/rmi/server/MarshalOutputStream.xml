<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.server">
        <import package="java.io"/>
        <import package="java.rmi.Remote"/>
        <import package="java.rmi.server.RemoteStub"/>
        <import package="sun.rmi.transport.ObjectTable"/>
        <import package="sun.rmi.transport.Target"/>
        <class name="MarshalOutputStream" line="7">
            <extends class="ObjectOutputStream"/>
            <javadoc line="7">
                A MarshalOutputStream extends ObjectOutputStream to add functions
                  specific to marshaling of remote object references. If it is
                  necessary to serialize remote objects or objects that contain
                  references to remote objects a MarshalOutputStream must be used
                  instead of ObjectOutputStream. &lt;p&gt;
                  A new MarshalOutputStream is constructed to serialize remote
                  objects or graphs containing remote objects. Objects are written to
                  the stream using the ObjectOutputStream.writeObject method. &lt;p&gt;
                  MarshalOutputStream maps remote objects to the corresponding remote
                  stub and embeds the location from which to load the stub
                  classes. The location may be ignored by the client but is supplied.                
            </javadoc>
            <javadoc line="21">
                Creates a marshal output stream with protocol version 1.                
            </javadoc>
            <method name="MarshalOutputStream" type="constructor" line="24">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="27">
                Creates a marshal output stream with the given protocol version.                
            </javadoc>
            <method name="MarshalOutputStream" type="constructor" line="30">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="protocolVersion" type="int"/>
                </params>
                <anonymous_class line="33">
                    <method name="run" type="Void" line="34"/>
                </anonymous_class>
            </method>
            <javadoc line="41">
                Checks for objects that are instances of java.rmi.Remote
                  that need to be serialized as proxy objects.                
            </javadoc>
            <method name="replaceObject" type="Object" line="45">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="46">
                    <declaration name="target" type="Target" line="47"/>
                    <scope line="48"/>
                </scope>
            </method>
            <javadoc line="54">
                Serializes a location from which to load the the specified class.                
            </javadoc>
            <method name="annotateClass" type="void" line="57">
                <params>
                    <param name="cl" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="60">
                Serializes a location from which to load the specified class.                
            </javadoc>
            <method name="annotateProxyClass" type="void" line="63">
                <params>
                    <param name="cl" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="66">
                Writes the location for the class into the stream.  This method can
                  be overridden by subclasses that store this annotation somewhere
                  else than as the next object in the stream, as is done by this class.                
            </javadoc>
            <method name="writeLocation" type="void" line="71">
                <params>
                    <param name="location" type="String"/>
                </params>
            </method>
        </class>
    </source>