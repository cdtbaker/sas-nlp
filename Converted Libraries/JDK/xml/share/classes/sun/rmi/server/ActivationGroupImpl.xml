<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.server">
        <import package="java.io.IOException"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.net.ServerSocket"/>
        <import package="java.rmi.MarshalledObject"/>
        <import package="java.rmi.NoSuchObjectException"/>
        <import package="java.rmi.Remote"/>
        <import package="java.rmi.RemoteException"/>
        <import package="java.rmi.activation.Activatable"/>
        <import package="java.rmi.activation.ActivationDesc"/>
        <import package="java.rmi.activation.ActivationException"/>
        <import package="java.rmi.activation.ActivationGroup"/>
        <import package="java.rmi.activation.ActivationGroupID"/>
        <import package="java.rmi.activation.ActivationID"/>
        <import package="java.rmi.activation.UnknownObjectException"/>
        <import package="java.rmi.server.RMIClassLoader"/>
        <import package="java.rmi.server.RMIServerSocketFactory"/>
        <import package="java.rmi.server.RMISocketFactory"/>
        <import package="java.rmi.server.UnicastRemoteObject"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.List"/>
        <import package="sun.rmi.registry.RegistryImpl"/>
        <class name="ActivationGroupImpl" line="55">
            <extends class="ActivationGroup"/>
            <comment line="65">
                use serialVersionUID from JDK 1.2.2 for interoperability                
            </comment>
            <comment line="123">
                Obtains a lock on the ActivationID id before returning. Allows only one
                 thread at a time to hold a lock on a particular id.  If the lock for id
                 is in use, all requests for an equivalent (in the Object.equals sense)
                 id will wait for the id to be notified and use the supplied id as the
                 next lock. The caller of &quot;acquireLock&quot; must execute the &quot;releaseLock&quot;
                 method&quot; to release the lock and &quot;notifyAll&quot; waiters for the id lock
                 obtained from this method.  The typical usage pattern is as follows:
                
                 try {
                    acquireLock(id);
                     do stuff pertaining to id...
                 } finally {
                    releaseLock(id);
                    checkInactiveGroup();
                 }                
            </comment>
            <comment line="177">
                Releases the id lock obtained via the &quot;acquireLock&quot; method and then
                 notifies all threads waiting on the lock.                
            </comment>
            <comment line="401">
                Determines if the group has become inactive and
                 marks it as such.                
            </comment>
            <javadoc line="55">
                The default activation group implementation.                
                <author>
                    Ann Wollrath                    
                </author>
                <since>
                    1.2                    
                </since>
                <see>
                    java.rmi.activation.ActivationGroup                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="65"/>
            <declaration name="active" type="Hashtable&lt;ActivationID,ActiveEntry&gt;" line="67"/>
            <javadoc line="67">
                maps persistent IDs to activated remote objects                
            </javadoc>
            <declaration name="groupInactive" type="boolean" line="70"/>
            <declaration name="groupID" type="ActivationGroupID" line="71"/>
            <declaration name="lockedIDs" type="List&lt;ActivationID&gt;" line="72"/>
            <javadoc line="74">
                Creates a default activation group implementation.                
                <param>
                    id the group's identifier                    
                </param>
                <param>
                    data ignored                    
                </param>
            </javadoc>
            <method name="ActivationGroupImpl" type="constructor" line="82">
                <params>
                    <param name="id" type="ActivationGroupID"/>
                    <param name="data" type="MarshalledObject<?>"/>
                </params>
                <comment line="87">
                    Unexport activation group impl and attempt to export it on
                     an unshared anonymous port.  See 4692286.                    
                </comment>
                <comment line="97">
                    Provide a default security manager.                    
                </comment>
                <declaration name="ssf" type="RMIServerSocketFactory" line="91"/>
                <scope line="94">
                    <scope line="95"/>
                    <scope line="99"/>
                </scope>
            </method>
            <class name="ServerSocketFactoryImpl" line="105">
                <implements interface="RMIServerSocketFactory"/>
                <javadoc line="105">
                    Trivial server socket factory used to export the activation group
                      impl on an unshared port.                    
                </javadoc>
                <method name="createServerSocket" type="ServerSocket" line="113">
                    <params>
                        <param name="port" type="int"/>
                    </params>
                    <declaration name="sf" type="RMISocketFactory" line="114"/>
                    <scope line="115"/>
                </method>
            </class>
            <method name="acquireLock" type="void" line="139">
                <params>
                    <param name="id" type="ActivationID"/>
                </params>
                <comment line="162">
                    don&apos;t wait on an id that won&apos;t be notified.                    
                </comment>
                <declaration name="waitForID" type="ActivationID" line="141"/>
                <scope line="143">
                    <scope line="145">
                        <declaration name="index" type="int" line="146"/>
                        <scope line="147"/>
                        <scope line="150"/>
                    </scope>
                    <scope line="155">
                        <scope line="156">
                            <declaration name="index" type="int" line="157"/>
                            <declaration name="actualID" type="ActivationID" line="159"/>
                        </scope>
                        <scope line="167"/>
                        <scope line="169"/>
                    </scope>
                </scope>
            </method>
            <method name="releaseLock" type="void" line="180">
                <params>
                    <param name="id" type="ActivationID"/>
                </params>
                <scope line="181"/>
                <scope line="185"/>
            </method>
            <javadoc line="190">
                Creates a new instance of an activatable remote object. The
                  &lt;code&gt;Activator&lt;/code&gt; calls this method to create an activatable
                  object in this group. This method should be idempotent; a call to
                  activate an already active object should return the previously
                  activated object.
                  Note: this method assumes that the Activator will only invoke
                  newInstance for the same object in a serial fashion (i.e.,
                  the activator will not allow the group to see concurrent requests
                  to activate the same object.                
                <param>
                    id the object's activation identifier                    
                </param>
                <param>
                    desc the object's activation descriptor                    
                </param>
                <return>
                    a marshalled object containing the activated object's stub                    
                </return>
            </javadoc>
            <method name="newInstance" type="MarshalledObject<? extends Remote>" line="210">
                <params>
                    <param name="id" type="ActivationID"/>
                    <param name="desc" type="ActivationDesc"/>
                </params>
                <comment line="240">
                    Fix for 4164971: allow non-public activatable class
                     andor constructor, create the activatable object in a
                     privileged block                    
                </comment>
                <comment line="246">
                    The code below is in a doPrivileged block to
                     protect against user code which code might have set
                     a global socket factory (in which case application
                     code would be on the stack).                    
                </comment>
                <comment line="263">
                    Fix for 4289544: make sure to set the
                     context class loader to be the class
                     loader of the impl class before
                     constructing that class.                    
                </comment>
                <comment line="280">
                    narrow the exception&apos;s type and rethrow it                    
                </comment>
                <comment line="301">
                                        
                </comment>
                <comment line="307">
                    code recompiled and user forgot to provide
                      activatable constructor?                    
                </comment>
                <scope line="216">
                    <scope line="218"/>
                    <declaration name="entry" type="ActiveEntry" line="223"/>
                    <declaration name="className" type="String" line="227"/>
                    <declaration name="cl" type="Class&lt;? extends Remote&gt;" line="229"/>
                    <declaration name="impl" type="Remote" line="232"/>
                    <declaration name="t" type="Thread" line="234"/>
                    <declaration name="savedCcl" type="ClassLoader" line="235"/>
                    <declaration name="objcl" type="ClassLoader" line="236"/>
                    <declaration name="ccl" type="ClassLoader" line="237"/>
                    <scope line="244">
                        <anonymous_class line="252">
                            <method name="run" type="Remote" line="256">
                                <comment line="263">
                                    Fix for 4289544: make sure to set the
                                     context class loader to be the class
                                     loader of the impl class before
                                     constructing that class.                                    
                                </comment>
                                <declaration name="constructor" type="Constructor&lt;? extends Remote&gt;" line="257"/>
                                <scope line="261"/>
                                <scope line="271"/>
                            </method>
                        </anonymous_class>
                    </scope>
                    <scope line="276">
                        <declaration name="e" type="Throwable" line="277"/>
                        <scope line="280"/>
                        <scope line="282"/>
                        <scope line="284"/>
                        <scope line="286"/>
                        <scope line="288"/>
                        <scope line="290"/>
                    </scope>
                </scope>
                <scope line="299"/>
                <scope line="305"/>
                <scope line="313"/>
                <scope line="317"/>
                <scope line="319"/>
            </method>
            <javadoc line="326">
                The group&apos;s &lt;code&gt;inactiveObject&lt;/code&gt; method is called
                  indirectly via a call to the &lt;code&gt;Activatable.inactive&lt;/code&gt;
                  method. A remote object implementation must call
                  &lt;code&gt;Activatable&lt;/code&gt;&apos;s &lt;code&gt;inactive&lt;/code&gt; method when
                  that object deactivates (the object deems that it is no longer
                  active). If the object does not call
                  &lt;code&gt;Activatable.inactive&lt;/code&gt; when it deactivates, the
                  object will never be garbage collected since the group keeps
                  strong references to the objects it creates. &lt;p&gt;
                  The group&apos;s &lt;code&gt;inactiveObject&lt;/code&gt; method
                  unexports the remote object from the RMI runtime so that the
                  object can no longer receive incoming RMI calls. This call will
                  only succeed if the object has no pending/executing calls. If
                  the object does have pending/executing RMI calls, then false
                  will be returned.
                  If the object has no pending/executing calls, the object is
                  removed from the RMI runtime and the group informs its
                  &lt;code&gt;ActivationMonitor&lt;/code&gt; (via the monitor&apos;s
                  &lt;code&gt;inactiveObject&lt;/code&gt; method) that the remote object is
                  not currently active so that the remote object will be
                  re-activated by the activator upon a subsequent activation
                  request.                
                <param>
                    id the object's activation identifier                    
                </param>
                <returns>
                    true if the operation succeeds (the operation will
                      succeed if the object in currently known to be active and is
                      either already unexported or is currently exported and has no
                      pending/executing calls); false is returned if the object has
                      pending/executing calls in which case it cannot be deactivated                    
                </returns>
                <exception>
                    UnknownObjectException if object is unknown (may already
                      be inactive)                    
                </exception>
                <exception>
                    RemoteException if call informing monitor fails                    
                </exception>
            </javadoc>
            <method name="inactiveObject" type="boolean" line="364">
                <params>
                    <param name="id" type="ActivationID"/>
                </params>
                <comment line="376">
                    REMIND: should this be silent?                    
                </comment>
                <scope line="366">
                    <scope line="368"/>
                    <declaration name="entry" type="ActiveEntry" line="373"/>
                    <scope line="374"/>
                    <scope line="379"/>
                    <scope line="382"/>
                    <scope line="385"/>
                    <scope line="387"/>
                </scope>
                <scope line="392"/>
            </method>
            <method name="checkInactiveGroup" type="void" line="404">
                <declaration name="groupMarkedInactive" type="boolean" line="405"/>
                <scope line="406">
                    <scope line="409"/>
                </scope>
                <scope line="415">
                    <scope line="416"/>
                    <scope line="418"/>
                    <scope line="421"/>
                    <scope line="423"/>
                </scope>
            </method>
            <javadoc line="428">
                The group&apos;s &lt;code&gt;activeObject&lt;/code&gt; method is called when an
                  object is exported (either by &lt;code&gt;Activatable&lt;/code&gt; object
                  construction or an explicit call to
                  &lt;code&gt;Activatable.exportObject&lt;/code&gt;. The group must inform its
                  &lt;code&gt;ActivationMonitor&lt;/code&gt; that the object is active (via
                  the monitor&apos;s &lt;code&gt;activeObject&lt;/code&gt; method) if the group
                  hasn&apos;t already done so.                
                <param>
                    id the object's identifier                    
                </param>
                <param>
                    obj the remote object implementation                    
                </param>
                <exception>
                    UnknownObjectException if object is not registered                    
                </exception>
                <exception>
                    RemoteException if call informing monitor fails                    
                </exception>
            </javadoc>
            <method name="activeObject" type="void" line="444">
                <params>
                    <param name="id" type="ActivationID"/>
                    <param name="impl" type="Remote"/>
                </params>
                <comment line="456">
                    created new entry, so inform monitor of active object                    
                </comment>
                <comment line="460">
                    daemon can still find it by calling newInstance                    
                </comment>
                <scope line="446">
                    <scope line="448"/>
                    <scope line="452">
                        <declaration name="entry" type="ActiveEntry" line="453"/>
                        <scope line="456"/>
                        <scope line="458"/>
                    </scope>
                </scope>
                <scope line="462"/>
            </method>
            <class name="ActiveEntry" line="468">
                <javadoc line="468">
                    Entry in table for active object.                    
                </javadoc>
                <declaration name="impl" type="Remote" line="472"/>
                <declaration name="mobj" type="MarshalledObject&lt;Remote&gt;" line="473"/>
                <method name="ActiveEntry" type="constructor" line="475">
                    <params>
                        <param name="impl" type="Remote"/>
                    </params>
                    <scope line="477"/>
                    <scope line="479"/>
                </method>
            </class>
            <javadoc line="486">
                Returns true if the first argument is either equal to, or is a
                  descendant of, the second argument.  Null is treated as the root of
                  the tree.                
            </javadoc>
            <method name="covers" type="boolean" line="491">
                <params>
                    <param name="sub" type="ClassLoader"/>
                    <param name="sup" type="ClassLoader"/>
                </params>
                <scope line="492"/>
                <scope line="494"/>
                <scope line="497">
                    <scope line="498"/>
                </scope>
            </method>
        </class>
    </source>