<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.server">
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.InvocationHandler"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Proxy"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.rmi.Remote"/>
        <import package="java.rmi.RemoteException"/>
        <import package="java.rmi.StubNotFoundException"/>
        <import package="java.rmi.registry.Registry"/>
        <import package="java.rmi.server.LogStream"/>
        <import package="java.rmi.server.ObjID"/>
        <import package="java.rmi.server.RMIClientSocketFactory"/>
        <import package="java.rmi.server.RemoteObjectInvocationHandler"/>
        <import package="java.rmi.server.RemoteRef"/>
        <import package="java.rmi.server.RemoteStub"/>
        <import package="java.rmi.server.Skeleton"/>
        <import package="java.rmi.server.SkeletonNotFoundException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.DigestOutputStream"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Map"/>
        <import package="java.util.WeakHashMap"/>
        <import package="sun.rmi.registry.RegistryImpl"/>
        <import package="sun.rmi.runtime.Log"/>
        <import package="sun.rmi.transport.LiveRef"/>
        <import package="sun.rmi.transport.tcp.TCPEndpoint"/>
        <import package="sun.security.action.GetBooleanAction"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="Util" line="36">
            <javadoc line="36">
                A utility class with static methods for creating stubs/proxies and
                  skeletons for remote objects.                
            </javadoc>
            <declaration name="logLevel" type="int" line="41"/>
            <javadoc line="41">
                &quot;server&quot; package log level                
            </javadoc>
            <declaration name="serverRefLog" type="Log" line="45"/>
            <javadoc line="45">
                server reference log                
            </javadoc>
            <declaration name="ignoreStubClasses" type="boolean" line="49"/>
            <javadoc line="49">
                cached value of property java.rmi.server.ignoreStubClasses                
            </javadoc>
            <declaration name="withoutStubs" type="Map&amp;lt;Class&amp;lt;?&amp;gt;,Void&amp;gt;" line="53"/>
            <javadoc line="53">
                cache of  impl classes that have no corresponding stub class                
            </javadoc>
            <declaration name="stubConsParamTypes" type="Class[]" line="57"/>
            <javadoc line="57">
                parameter types for stub constructor                
            </javadoc>
            <method name="Util" type="constructor" line="61"/>
            <javadoc line="63">
                Returns a proxy for the specified implClass.
                  If both of the following criteria is satisfied, a dynamic proxy for
                  the specified implClass is returned (otherwise a RemoteStub instance
                  for the specified implClass is returned):
                  a) either the property java.rmi.server.ignoreStubClasses is true or
                  a pregenerated stub class does not exist for the impl class, and
                  b) forceStubUse is false.
                  If the above criteria are satisfied, this method constructs a
                  dynamic proxy instance (that implements the remote interfaces of
                  implClass) constructed with a RemoteObjectInvocationHandler instance
                  constructed with the clientRef.
                  Otherwise, this method loads the pregenerated stub class (which
                  extends RemoteStub and implements the remote interfaces of
                  implClass) and constructs an instance of the pregenerated stub
                  class with the clientRef.                
                <param>
                    implClass the class to obtain remote interfaces from                    
                </param>
                <param>
                    clientRef the remote ref to use in the invocation handler                    
                </param>
                <param>
                    forceStubUse if true, forces creation of a RemoteStub                    
                </param>
                <throws>
                    IllegalArgumentException if implClass implements illegal
                      remote interfaces                    
                </throws>
                <throws>
                    StubNotFoundException if problem locating/creating stub or
                      creating the dynamic proxy instance                    
                </throws>
            </javadoc>
            <method name="createProxy" type="Remote" line="87">
                <params>
                    <param name="implClass" type="Class"/>
                    <param name="clientRef" type="RemoteRef"/>
                    <param name="forceStubUse" type="boolean"/>
                </params>
                <declaration name="remoteClass" type="Class" line="88"/>
                <scope line="89"/>
                <scope line="92"/>
                <scope line="95"/>
                <declaration name="loader" type="ClassLoader" line="98"/>
                <declaration name="interfaces" type="Class[]" line="99"/>
                <declaration name="handler" type="InvocationHandler" line="100"/>
                <scope line="101"/>
                <scope line="104"/>
            </method>
            <javadoc line="108">
                Returns true if a stub class for the given impl class can be loaded,
                  otherwise returns false.                
                <param>
                    remoteClass the class to obtain remote interfaces from                    
                </param>
            </javadoc>
            <method name="stubClassExists" type="boolean" line="113">
                <params>
                    <param name="remoteClass" type="Class"/>
                </params>
                <scope line="114">
                    <scope line="115"/>
                    <scope line="119"/>
                </scope>
            </method>
            <method name="getRemoteClass" type="Class" line="125">
                <params>
                    <param name="cl" type="Class"/>
                </params>
                <scope line="126">
                    <declaration name="interfaces" type="Class[]" line="127"/>
                    <scope line="128"/>
                </scope>
            </method>
            <javadoc line="135">
                Returns an array containing the remote interfaces implemented
                  by the given class.                
                <param>
                    remoteClass the class to obtain remote interfaces from                    
                </param>
                <throws>
                    IllegalArgumentException if remoteClass implements
                      any illegal remote interfaces                    
                </throws>
                <throws>
                    NullPointerException if remoteClass is null                    
                </throws>
            </javadoc>
            <method name="getRemoteInterfaces" type="Class[]" line="143">
                <params>
                    <param name="remoteClass" type="Class"/>
                </params>
                <declaration name="list" type="ArrayList&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt;" line="144"/>
            </method>
            <javadoc line="148">
                Fills the given array list with the remote interfaces implemented
                  by the given class.                
                <throws>
                    IllegalArgumentException if the specified class implements
                      any illegal remote interfaces                    
                </throws>
                <throws>
                    NullPointerException if the specified class or list is null                    
                </throws>
            </javadoc>
            <method name="getRemoteInterfaces" type="void" line="155">
                <params>
                    <param name="list" type="ArrayList&lt;Class&lt;?&gt;&gt;"/>
                    <param name="cl" type="Class"/>
                </params>
                <declaration name="superclass" type="Class" line="156"/>
                <scope line="157"/>
                <declaration name="interfaces" type="Class[]" line="160"/>
                <scope line="161">
                    <declaration name="intf" type="Class" line="162"/>
                    <scope line="163">
                        <scope line="164">
                            <declaration name="methods" type="Method[]" line="165"/>
                            <scope line="166"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="174">
                Verifies that the supplied method has at least one declared exception
                  type that is RemoteException or one of its superclasses.  If not,
                  then this method throws IllegalArgumentException.                
                <throws>
                    IllegalArgumentException if m is an illegal remote method                    
                </throws>
            </javadoc>
            <method name="checkMethod" type="void" line="180">
                <params>
                    <param name="m" type="Method"/>
                </params>
                <declaration name="ex" type="Class&amp;lt;?&amp;gt;[]" line="181"/>
                <scope line="182"/>
            </method>
            <javadoc line="187">
                Creates a RemoteStub instance for the specified class, constructed
                  with the specified RemoteRef.  The supplied class must be the most
                  derived class in the remote object&apos;s superclass chain that
                  implements a remote interface.  The stub class name is the name of
                  the specified remoteClass with the suffix &quot;_Stub&quot;.  The loading of
                  the stub class is initiated from class loader of the specified class
                  (which may be the bootstrap class loader).                
            </javadoc>
            <method name="createStub" type="RemoteStub" line="196">
                <params>
                    <param name="remoteClass" type="Class"/>
                    <param name="ref" type="RemoteRef"/>
                </params>
                <declaration name="stubname" type="String" line="197"/>
                <scope line="198">
                    <declaration name="stubcl" type="Class&amp;lt;?&amp;gt;" line="199"/>
                    <declaration name="cons" type="Constructor" line="200"/>
                </scope>
                <scope line="203"/>
                <scope line="206"/>
                <scope line="209"/>
                <scope line="212"/>
                <scope line="215"/>
                <scope line="218"/>
            </method>
            <javadoc line="222">
                Locate and return the Skeleton for the specified remote object                
            </javadoc>
            <method name="createSkeleton" type="Skeleton" line="225">
                <params>
                    <param name="object" type="Remote"/>
                </params>
                <declaration name="cl" type="Class" line="226"/>
                <scope line="227"/>
                <scope line="230"/>
                <declaration name="skelname" type="String" line="233"/>
                <scope line="234">
                    <declaration name="skelcl" type="Class" line="235"/>
                </scope>
                <scope line="238"/>
                <scope line="241"/>
                <scope line="244"/>
                <scope line="247"/>
            </method>
            <javadoc line="251">
                Compute the &quot;method hash&quot; of a remote method.  The method hash
                  is a long containing the first 64 bits of the SHA digest from
                  the UTF encoded string of the method name and descriptor.                
            </javadoc>
            <method name="computeMethodHash" type="long" line="256">
                <params>
                    <param name="m" type="Method"/>
                </params>
                <declaration name="hash" type="long" line="257"/>
                <declaration name="sink" type="ByteArrayOutputStream" line="258"/>
                <scope line="259">
                    <declaration name="md" type="MessageDigest" line="260"/>
                    <declaration name="out" type="DataOutputStream" line="261"/>
                    <declaration name="s" type="String" line="262"/>
                    <scope line="263"/>
                    <declaration name="hasharray" type="byte" line="268"/>
                    <scope line="269"/>
                </scope>
                <scope line="273"/>
                <scope line="276"/>
            </method>
            <javadoc line="281">
                Return a string consisting of the given method&apos;s name followed by
                  its &quot;method descriptor&quot;, as appropriate for use in the computation
                  of the &quot;method hash&quot;.
                  See section 4.3.3 of The Java Virtual Machine Specification for
                  the definition of a &quot;method descriptor&quot;.                
            </javadoc>
            <method name="getMethodNameAndDescriptor" type="String" line="288">
                <params>
                    <param name="m" type="Method"/>
                </params>
                <declaration name="desc" type="StringBuffer" line="289"/>
                <declaration name="paramTypes" type="Class[]" line="291"/>
                <scope line="292"/>
                <declaration name="returnType" type="Class" line="296"/>
                <scope line="297"/>
                <scope line="300"/>
            </method>
            <javadoc line="305">
                Get the descriptor of a particular type, as appropriate for either
                  a parameter or return type in a method descriptor.                
            </javadoc>
            <method name="getTypeDescriptor" type="String" line="309">
                <params>
                    <param name="type" type="Class"/>
                </params>
                <scope line="310">
                    <scope line="311"/>
                    <scope line="314"/>
                    <scope line="317"/>
                    <scope line="320"/>
                    <scope line="323"/>
                    <scope line="326"/>
                    <scope line="329"/>
                    <scope line="332"/>
                    <scope line="335"/>
                    <scope line="338"/>
                </scope>
                <scope line="342"/>
                <scope line="345"/>
            </method>
            <javadoc line="349">
                Returns the binary name of the given type without package
                  qualification.  Nested types are treated no differently from
                  top-level types, so for a nested type, the returned name will
                  still be qualified with the simple name of its enclosing
                  top-level type (and perhaps other enclosing types), the
                  separator will be &apos;$&apos;, etc.                
            </javadoc>
            <method name="getUnqualifiedName" type="String" line="357">
                <params>
                    <param name="c" type="Class"/>
                </params>
                <declaration name="binaryName" type="String" line="358"/>
            </method>
        </class>
    </source>