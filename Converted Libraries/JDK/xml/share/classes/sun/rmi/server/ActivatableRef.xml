<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.server">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInput"/>
        <import package="java.io.ObjectOutput"/>
        <import package="java.lang.reflect.Proxy"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.URL"/>
        <import package="java.rmi"/>
        <import package="java.rmi.activation"/>
        <import package="java.rmi.server.Operation"/>
        <import package="java.rmi.server.RMIClassLoader"/>
        <import package="java.rmi.server.RemoteCall"/>
        <import package="java.rmi.server.RemoteObject"/>
        <import package="java.rmi.server.RemoteObjectInvocationHandler"/>
        <import package="java.rmi.server.RemoteRef"/>
        <import package="java.rmi.server.RemoteStub"/>
        <class name="ActivatableRef" line="17">
            <implements interface="RemoteRef"/>
            <declaration name="serialVersionUID" type="long" line="18"/>
            <declaration name="id" type="ActivationID" line="19"/>
            <declaration name="ref" type="RemoteRef" line="20"/>
            <declaration name="force" type="boolean" line="21"/>
            <declaration name="MAX_RETRIES" type="int" line="22"/>
            <declaration name="versionComplaint" type="String" line="23"/>
            <javadoc line="24">
                Create a new (empty) ActivatableRef                
            </javadoc>
            <method name="ActivatableRef" type="constructor" line="27"/>
            <javadoc line="29">
                Create a ActivatableRef with the specified id                
            </javadoc>
            <method name="ActivatableRef" type="constructor" line="32">
                <params>
                    <param name="id" type="ActivationID"/>
                    <param name="ref" type="RemoteRef"/>
                </params>
            </method>
            <javadoc line="36">
                Returns the stub for the remote object whose class is
                  specified in the activation descriptor. The ActivatableRef
                  in the resulting stub has its activation id set to the
                  activation id supplied as the second argument.                
            </javadoc>
            <method name="getStub" type="Remote" line="42">
                <params>
                    <param name="desc" type="ActivationDesc"/>
                    <param name="id" type="ActivationID"/>
                </params>
                <declaration name="className" type="String" line="43"/>
                <scope line="44">
                    <declaration name="cl" type="Class" line="45"/>
                    <declaration name="clientRef" type="RemoteRef" line="46"/>
                </scope>
                <scope line="49"/>
                <scope line="52"/>
                <scope line="55"/>
            </method>
            <javadoc line="59">
                Invoke method on remote object. This method delegates remote
                  method invocation to the underlying ref type.  If the
                  underlying reference is not known (is null), then the object
                  must be activated first.  If an attempt at method invocation
                  fails, the object should force reactivation.  Method invocation
                  must preserve &quot;at most once&quot; call semantics.  In RMI, &quot;at most
                  once&quot; applies to parameter deserialization at the remote site
                  and the remote object&apos;s method execution.  &quot;At most once&quot; does
                  not apply to parameter serialization at the client so the
                  parameters of a call don&apos;t need to be buffered in anticipation
                  of call retry. Thus, a method call is only be retried if the
                  initial method invocation does not execute at all at the server
                  (including parameter deserialization).                
            </javadoc>
            <method name="invoke" type="Object" line="74">
                <params>
                    <param name="obj" type="Remote"/>
                    <param name="method" type="java.lang.reflect.Method"/>
                    <param name="params" type="Object[]"/>
                    <param name="opnum" type="long"/>
                </params>
                <declaration name="force" type="boolean" line="75"/>
                <declaration name="localRef" type="RemoteRef" line="76"/>
                <declaration name="exception" type="Exception" line="77"/>
                <scope line="78">
                    <scope line="79"/>
                    <scope line="83"/>
                </scope>
                <scope line="87">
                    <scope line="88"/>
                    <scope line="91"/>
                    <scope line="94"/>
                    <scope line="97"/>
                    <scope line="100"/>
                    <scope line="103"/>
                    <scope line="106"/>
                    <scope line="109"/>
                    <scope line="112">
                        <scope line="113">
                            <scope line="114"/>
                        </scope>
                    </scope>
                    <scope line="120">
                        <scope line="121">
                            <scope line="122">
                                <declaration name="newRef" type="RemoteRef" line="123"/>
                                <scope line="124"/>
                            </scope>
                            <scope line="130"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="139">
                private method to obtain the ref for a call.                
            </javadoc>
            <method name="getRef" type="RemoteRef" line="142">
                <scope line="143"/>
            </method>
            <javadoc line="148">
                private method to activate the remote object.
                  NOTE: the caller must be synchronized on &quot;this&quot; before
                  calling this method.                
            </javadoc>
            <method name="activate" type="RemoteRef" line="153">
                <params>
                    <param name="force" type="boolean"/>
                </params>
            </method>
            <javadoc line="182">
                This call is used by the old 1.1 stub protocol and is
                  unsupported since activation requires 1.2 stubs.                
            </javadoc>
            <method name="newCall" type="RemoteCall" line="186">
                <params>
                    <param name="obj" type="RemoteObject"/>
                    <param name="ops" type="Operation[]"/>
                    <param name="opnum" type="int"/>
                    <param name="hash" type="long"/>
                </params>
            </method>
            <javadoc line="189">
                This call is used by the old 1.1 stub protocol and is
                  unsupported since activation requires 1.2 stubs.                
            </javadoc>
            <method name="invoke" type="void" line="193">
                <params>
                    <param name="call" type="RemoteCall"/>
                </params>
            </method>
            <javadoc line="196">
                This call is used by the old 1.1 stub protocol and is
                  unsupported since activation requires 1.2 stubs.                
            </javadoc>
            <method name="done" type="void" line="200">
                <params>
                    <param name="call" type="RemoteCall"/>
                </params>
            </method>
            <javadoc line="203">
                Returns the class of the ref type to be serialized                
            </javadoc>
            <method name="getRefClass" type="String" line="206">
                <params>
                    <param name="out" type="ObjectOutput"/>
                </params>
            </method>
            <javadoc line="209">
                Write out external representation for remote ref.                
            </javadoc>
            <method name="writeExternal" type="void" line="212">
                <params>
                    <param name="out" type="ObjectOutput"/>
                </params>
                <declaration name="localRef" type="RemoteRef" line="213"/>
                <scope line="215"/>
                <scope line="218"/>
            </method>
            <javadoc line="223">
                Read in external representation for remote ref.                
                <exception>
                    ClassNotFoundException If the class for an object
                      being restored cannot be found.                    
                </exception>
            </javadoc>
            <method name="readExternal" type="void" line="228">
                <params>
                    <param name="in" type="ObjectInput"/>
                </params>
                <declaration name="className" type="String" line="231"/>
                <scope line="233">
                    <declaration name="refClass" type="Class" line="234"/>
                </scope>
                <scope line="238"/>
                <scope line="241"/>
            </method>
            <javadoc line="245">
                Method from object, forward from RemoteObject                
            </javadoc>
            <method name="remoteToString" type="String" line="248"/>
            <javadoc line="251">
                default implementation of hashCode for remote objects                
            </javadoc>
            <method name="remoteHashCode" type="int" line="254"/>
            <javadoc line="257">
                default implementation of equals for remote objects                
            </javadoc>
            <method name="remoteEquals" type="boolean" line="260">
                <params>
                    <param name="ref" type="RemoteRef"/>
                </params>
            </method>
        </class>
    </source>