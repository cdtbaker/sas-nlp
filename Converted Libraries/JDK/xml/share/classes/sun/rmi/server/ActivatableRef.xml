<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.server">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInput"/>
        <import package="java.io.ObjectOutput"/>
        <import package="java.lang.reflect.Proxy"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.URL"/>
        <import package="java.rmi"/>
        <import package="java.rmi.activation"/>
        <import package="java.rmi.server.Operation"/>
        <import package="java.rmi.server.RMIClassLoader"/>
        <import package="java.rmi.server.RemoteCall"/>
        <import package="java.rmi.server.RemoteObject"/>
        <import package="java.rmi.server.RemoteObjectInvocationHandler"/>
        <import package="java.rmi.server.RemoteRef"/>
        <import package="java.rmi.server.RemoteStub"/>
        <class name="ActivatableRef" line="44">
            <comment line="389">
                ----------------------------------------------------------------------;                
            </comment>
            <implements interface="RemoteRef"/>
            <declaration name="serialVersionUID" type="long" line="46"/>
            <declaration name="id" type="ActivationID" line="48"/>
            <declaration name="ref" type="RemoteRef" line="49"/>
            <declaration name="force" type="boolean" line="50"/>
            <declaration name="MAX_RETRIES" type="int" line="52"/>
            <declaration name="versionComplaint" type="String" line="53"/>
            <javadoc line="56">
                Create a new (empty) ActivatableRef                
            </javadoc>
            <method name="ActivatableRef" type="constructor" line="60"/>
            <javadoc line="62">
                Create a ActivatableRef with the specified id                
            </javadoc>
            <method name="ActivatableRef" type="constructor" line="66">
                <params>
                    <param name="id" type="ActivationID"/>
                    <param name="ref" type="RemoteRef"/>
                </params>
            </method>
            <javadoc line="71">
                Returns the stub for the remote object whose class is
                  specified in the activation descriptor. The ActivatableRef
                  in the resulting stub has its activation id set to the
                  activation id supplied as the second argument.                
            </javadoc>
            <method name="getStub" type="Remote" line="79">
                <params>
                    <param name="desc" type="ActivationDesc"/>
                    <param name="id" type="ActivationID"/>
                </params>
                <declaration name="className" type="String" line="80"/>
                <scope line="82">
                    <declaration name="cl" type="Class" line="83"/>
                    <declaration name="clientRef" type="RemoteRef" line="85"/>
                </scope>
                <scope line="88"/>
                <scope line="92"/>
                <scope line="95"/>
            </method>
            <javadoc line="100">
                Invoke method on remote object. This method delegates remote
                  method invocation to the underlying ref type.  If the
                  underlying reference is not known (is null), then the object
                  must be activated first.  If an attempt at method invocation
                  fails, the object should force reactivation.  Method invocation
                  must preserve &quot;at most once&quot; call semantics.  In RMI, &quot;at most
                  once&quot; applies to parameter deserialization at the remote site
                  and the remote object&apos;s method execution.  &quot;At most once&quot; does
                  not apply to parameter serialization at the client so the
                  parameters of a call don&apos;t need to be buffered in anticipation
                  of call retry. Thus, a method call is only be retried if the
                  initial method invocation does not execute at all at the server
                  (including parameter deserialization).                
            </javadoc>
            <method name="invoke" type="Object" line="120">
                <params>
                    <param name="obj" type="Remote"/>
                    <param name="method" type="java.lang.reflect.Method"/>
                    <param name="params" type="Object[]"/>
                    <param name="opnum" type="long"/>
                </params>
                <comment line="127">
                    Attempt object activation if active ref is unknown.
                     Throws a RemoteException if object can&apos;t be activated.                    
                </comment>
                <comment line="145">
                    Object is not active in VM; retry call                    
                </comment>
                <comment line="150">
                    Failure during connection setup; retry call                    
                </comment>
                <comment line="155">
                    Failure during connection setup; retry call.                    
                </comment>
                <comment line="160">
                    Failure setting up multiplexed connection or reusing
                     cached connection; retry call                    
                </comment>
                <comment line="166">
                    Failure during parameter serialization; call may
                     have reached server, so call retry not possible.                    
                </comment>
                <comment line="172">
                    Call reached server; propagate remote exception.                    
                </comment>
                <comment line="177">
                    Call reached server; propagate remote exception                    
                </comment>
                <comment line="182">
                    This is a catch-all for other RemoteExceptions.
                     UnmarshalException being the only one relevant.
                    
                     StubNotFoundException should never show up because
                     it is generally thrown when attempting to locate
                     a stub.
                    
                     UnexpectedException should never show up because
                     it is only thrown by a stub and would be wrapped
                     in a ServerException if it was propagated by a
                     remote call.                    
                </comment>
                <comment line="197">
                    this may be overly conservative                    
                </comment>
                <comment line="205">
                    Activate object, since object could not be reached.                    
                </comment>
                <comment line="215">
                    If last exception was NoSuchObjectException,
                     then old value of ref is definitely wrong,
                     so make sure that it is different.                    
                </comment>
                <comment line="233">
                    Retries unsuccessful, so throw last exception                    
                </comment>
                <declaration name="force" type="boolean" line="122"/>
                <declaration name="localRef" type="RemoteRef" line="123"/>
                <declaration name="exception" type="Exception" line="124"/>
                <scope line="130">
                    <scope line="131"/>
                    <scope line="134"/>
                </scope>
                <scope line="139">
                    <scope line="141"/>
                    <scope line="143"/>
                    <scope line="148"/>
                    <scope line="153"/>
                    <scope line="158"/>
                    <scope line="164"/>
                    <scope line="170"/>
                    <scope line="175"/>
                    <scope line="180">
                        <scope line="194">
                            <scope line="195"/>
                        </scope>
                    </scope>
                    <scope line="203">
                        <scope line="207">
                            <scope line="208">
                                <declaration name="newRef" type="RemoteRef" line="209"/>
                                <scope line="213"/>
                            </scope>
                            <scope line="224"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="238">
                private method to obtain the ref for a call.                
            </javadoc>
            <method name="getRef" type="RemoteRef" line="243">
                <scope line="244"/>
            </method>
            <javadoc line="251">
                private method to activate the remote object.
                  NOTE: the caller must be synchronized on &quot;this&quot; before
                  calling this method.                
            </javadoc>
            <method name="activate" type="RemoteRef" line="259">
                <params>
                    <param name="force" type="boolean"/>
                </params>
                <comment line="265">
                    Activate the object and retrieve the remote reference
                     from inside the stub returned as the result. Then
                     set this activatable ref&apos;s internal ref to be the
                     ref inside the ref of the stub. In more clear terms,
                     the stub returned from the activate call contains an
                     ActivatableRef. We need to set the ref in this
                     ActivatableRef to the ref inside the ActivatableRef
                     retrieved from the stub. The ref type embedded in the
                     ActivatableRef is typically a UnicastRef.                    
                </comment>
                <comment line="283">
                    Assume that proxy is an instance of a dynamic proxy
                     class.  If that assumption is not correct, or either of
                     the casts below fails, the resulting exception will be
                     wrapped in an ActivateFailedException below.                    
                </comment>
                <scope line="263">
                    <declaration name="proxy" type="Remote" line="276"/>
                    <declaration name="newRef" type="ActivatableRef" line="277"/>
                    <scope line="279"/>
                    <scope line="281">
                        <declaration name="handler" type="RemoteObjectInvocationHandler" line="288"/>
                    </scope>
                </scope>
                <scope line="296"/>
                <scope line="298"/>
                <scope line="300"/>
                <scope line="302"/>
            </method>
            <javadoc line="307">
                This call is used by the old 1.1 stub protocol and is
                  unsupported since activation requires 1.2 stubs.                
            </javadoc>
            <method name="newCall" type="RemoteCall" line="316">
                <params>
                    <param name="obj" type="RemoteObject"/>
                    <param name="ops" type="Operation[]"/>
                    <param name="opnum" type="int"/>
                    <param name="hash" type="long"/>
                </params>
            </method>
            <javadoc line="320">
                This call is used by the old 1.1 stub protocol and is
                  unsupported since activation requires 1.2 stubs.                
            </javadoc>
            <method name="invoke" type="void" line="325">
                <params>
                    <param name="call" type="RemoteCall"/>
                </params>
            </method>
            <javadoc line="329">
                This call is used by the old 1.1 stub protocol and is
                  unsupported since activation requires 1.2 stubs.                
            </javadoc>
            <method name="done" type="void" line="333">
                <params>
                    <param name="call" type="RemoteCall"/>
                </params>
            </method>
            <javadoc line="337">
                Returns the class of the ref type to be serialized                
            </javadoc>
            <method name="getRefClass" type="String" line="341">
                <params>
                    <param name="out" type="ObjectOutput"/>
                </params>
            </method>
            <javadoc line="345">
                Write out external representation for remote ref.                
            </javadoc>
            <method name="writeExternal" type="void" line="349">
                <params>
                    <param name="out" type="ObjectOutput"/>
                </params>
                <declaration name="localRef" type="RemoteRef" line="350"/>
                <scope line="353"/>
                <scope line="355"/>
            </method>
            <javadoc line="361">
                Read in external representation for remote ref.                
                <exception>
                    ClassNotFoundException If the class for an object
                      being restored cannot be found.                    
                </exception>
            </javadoc>
            <method name="readExternal" type="void" line="368">
                <params>
                    <param name="in" type="ObjectInput"/>
                </params>
                <declaration name="className" type="String" line="371"/>
                <scope line="375">
                    <declaration name="refClass" type="Class" line="376"/>
                </scope>
                <scope line="380"/>
                <scope line="383"/>
            </method>
            <javadoc line="389">
                Method from object, forward from RemoteObject                
            </javadoc>
            <method name="remoteToString" type="String" line="392"/>
            <javadoc line="397">
                default implementation of hashCode for remote objects                
            </javadoc>
            <method name="remoteHashCode" type="int" line="400"/>
            <javadoc line="404">
                default implementation of equals for remote objects                
            </javadoc>
            <method name="remoteEquals" type="boolean" line="406">
                <params>
                    <param name="ref" type="RemoteRef"/>
                </params>
            </method>
        </class>
    </source>