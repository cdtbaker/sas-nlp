<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.server">
        <import package="java.lang.ref.Reference"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.util.Map"/>
        <import package="java.util.WeakHashMap"/>
        <class name="WeakClassHashMap" line="6">
            <type_params>
                <type_param name="V"/>
            </type_params>
            <javadoc line="6">
                Abstract class that maps Class objects to lazily-computed values of
                  type V.  A concrete subclass must implement the computeValue method
                  to determine how the values are computed.
                  The keys are only weakly reachable through this map, so this map
                  does not prevent a class (along with its class loader, etc.) from
                  being garbage collected if it is not otherwise strongly reachable.
                  The values are only softly reachable through this map, so that the
                  computed values generally persist while not otherwise strongly
                  reachable, but their storage may be reclaimed if necessary.  Also,
                  note that if a key is strongly reachable from a value, then the key
                  is effectively softly reachable through this map, which may delay
                  garbage collection of classes (see 4429536).                
            </javadoc>
            <declaration name="internalMap" type="Map&lt;Class&lt;?&gt;,ValueCell&lt;V&gt;&gt;" line="21"/>
            <method name="WeakClassHashMap" type="constructor" line="22"/>
            <method name="get" type="V" line="24">
                <params>
                    <param name="remoteClass" type="Class<?>"/>
                </params>
                <declaration name="valueCell" type="ValueCell&lt;V&gt;" line="25"/>
                <scope line="26">
                    <scope line="28"/>
                </scope>
                <scope line="33">
                    <declaration name="value" type="V" line="34"/>
                    <scope line="35"/>
                    <scope line="38"/>
                </scope>
            </method>
            <method name="computeValue" type="V" line="45"/>
            <class name="ValueCell" line="46">
                <type_params>
                    <type_param name="T"/>
                </type_params>
                <declaration name="ref" type="Reference&lt;T&gt;" line="47"/>
                <method name="ValueCell" type="constructor" line="48"/>
            </class>
        </class>
    </source>