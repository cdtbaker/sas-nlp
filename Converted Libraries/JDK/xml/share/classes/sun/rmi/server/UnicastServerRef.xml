<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.server">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInput"/>
        <import package="java.io.ObjectOutput"/>
        <import package="java.io.PrintStream"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.rmi.MarshalException"/>
        <import package="java.rmi.Remote"/>
        <import package="java.rmi.RemoteException"/>
        <import package="java.rmi.ServerError"/>
        <import package="java.rmi.ServerException"/>
        <import package="java.rmi.UnmarshalException"/>
        <import package="java.rmi.server.ExportException"/>
        <import package="java.rmi.server.RemoteCall"/>
        <import package="java.rmi.server.RemoteRef"/>
        <import package="java.rmi.server.RemoteStub"/>
        <import package="java.rmi.server.ServerNotActiveException"/>
        <import package="java.rmi.server.ServerRef"/>
        <import package="java.rmi.server.Skeleton"/>
        <import package="java.rmi.server.SkeletonNotFoundException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Date"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.WeakHashMap"/>
        <import package="sun.rmi.runtime.Log"/>
        <import package="sun.rmi.transport.LiveRef"/>
        <import package="sun.rmi.transport.Target"/>
        <import package="sun.rmi.transport.tcp.TCPTransport"/>
        <import package="sun.security.action.GetBooleanAction"/>
        <class name="UnicastServerRef" line="34">
            <extends class="UnicastRef"/>
            <implements interface="ServerRef"/>
            <implements interface="Dispatcher"/>
            <javadoc line="34">
                UnicastServerRef implements the remote reference layer server-side
                  behavior for remote objects exported with the &quot;UnicastRef&quot; reference
                  type.                
                <author>
                    Ann Wollrath                    
                </author>
                <author>
                    Roger Riggs                    
                </author>
                <author>
                    Peter Jones                    
                </author>
            </javadoc>
            <declaration name="logCalls" type="boolean" line="43"/>
            <javadoc line="43">
                value of server call log property                
            </javadoc>
            <declaration name="callLog" type="Log" line="47"/>
            <javadoc line="47">
                server call log                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="51"/>
            <declaration name="wantExceptionLog" type="boolean" line="52"/>
            <javadoc line="52">
                flag to enable writing exceptions to System.err                
            </javadoc>
            <declaration name="forceStubUse" type="boolean" line="56"/>
            <declaration name="suppressStackTraces" type="boolean" line="57"/>
            <javadoc line="57">
                flag to remove server-side stack traces before marshalling
                  exceptions thrown by remote invocations to this VM                
            </javadoc>
            <declaration name="skel" type="Skeleton" line="62"/>
            <javadoc line="62">
                skeleton to dispatch remote calls through, for 1.1 stub protocol
                  (may be null if stub class only uses 1.2 stub protocol)                
            </javadoc>
            <declaration name="hashToMethod_Map" type="Map&amp;lt;Long,Method&amp;gt;" line="67"/>
            <javadoc line="67">
                maps method hash to Method object for each remote method                
            </javadoc>
            <declaration name="hashToMethod_Maps" type="WeakClassHashMap&amp;lt;Map&amp;lt;Long,Method&amp;gt;&amp;gt;" line="71"/>
            <javadoc line="71">
                A weak hash map, mapping classes to hash maps that map method
                  hashes to method objects.                
            </javadoc>
            <declaration name="withoutSkeletons" type="Map&amp;lt;Class&amp;lt;?&amp;gt;,?&amp;gt;" line="76"/>
            <javadoc line="76">
                cache of impl classes that have no corresponding skeleton class                
            </javadoc>
            <javadoc line="80">
                Create a new (empty) Unicast server remote reference.                
            </javadoc>
            <method name="UnicastServerRef" type="constructor" line="83"/>
            <javadoc line="85">
                Construct a Unicast server remote reference for a specified
                  liveRef.                
            </javadoc>
            <method name="UnicastServerRef" type="constructor" line="89">
                <params>
                    <param name="ref" type="LiveRef"/>
                </params>
            </method>
            <javadoc line="92">
                Construct a Unicast server remote reference to be exported
                  on the specified port.                
            </javadoc>
            <method name="UnicastServerRef" type="constructor" line="96">
                <params>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="99">
                Constructs a UnicastServerRef to be exported on an
                  anonymous port (i.e., 0) and that uses a pregenerated stub class
                  (NOT a dynamic proxy instance) if &apos;forceStubUse&apos; is &apos;true&apos;.
                  This constructor is only called by the method
                  UnicastRemoteObject.exportObject(Remote) passing &apos;true&apos; for
                  &apos;forceStubUse&apos;.  The UnicastRemoteObject.exportObject(Remote) method
                  returns RemoteStub, so it must ensure that the stub for the
                  exported object is an instance of a pregenerated stub class that
                  extends RemoteStub (instead of an instance of a dynamic proxy class
                  which is not an instance of RemoteStub).                
            </javadoc>
            <method name="UnicastServerRef" type="constructor" line="111">
                <params>
                    <param name="forceStubUse" type="boolean"/>
                </params>
            </method>
            <javadoc line="115">
                With the addition of support for dynamic proxies as stubs, this
                  method is obsolete because it returns RemoteStub instead of the more
                  general Remote.  It should not be called.  It sets the
                  &apos;forceStubUse&apos; flag to true so that the stub for the exported object
                  is forced to be an instance of the pregenerated stub class, which
                  extends RemoteStub.
                  Export this object, create the skeleton and stubs for this
                  dispatcher.  Create a stub based on the type of the impl,
                  initialize it with the appropriate remote reference. Create the
                  target defined by the impl, dispatcher (this) and stub.
                  Export that target via the Ref.                
            </javadoc>
            <method name="exportObject" type="RemoteStub" line="128">
                <params>
                    <param name="impl" type="Remote"/>
                    <param name="data" type="Object"/>
                </params>
            </method>
            <javadoc line="132">
                Export this object, create the skeleton and stubs for this
                  dispatcher.  Create a stub based on the type of the impl,
                  initialize it with the appropriate remote reference. Create the
                  target defined by the impl, dispatcher (this) and stub.
                  Export that target via the Ref.                
            </javadoc>
            <method name="exportObject" type="Remote" line="139">
                <params>
                    <param name="impl" type="Remote"/>
                    <param name="data" type="Object"/>
                    <param name="permanent" type="boolean"/>
                </params>
                <declaration name="implClass" type="Class" line="140"/>
                <declaration name="stub" type="Remote" line="141"/>
                <scope line="142"/>
                <scope line="145"/>
                <scope line="148"/>
                <declaration name="target" type="Target" line="151"/>
            </method>
            <javadoc line="156">
                Return the hostname of the current client.  When called from a
                  thread actively handling a remote method invocation the
                  hostname of the client is returned.                
                <exception>
                    ServerNotActiveException If called outside of servicing
                      a remote method invocation.                    
                </exception>
            </javadoc>
            <method name="getClientHost" type="String" line="163"/>
            <javadoc line="166">
                Discovers and sets the appropriate skeleton for the impl.                
            </javadoc>
            <method name="setSkeleton" type="void" line="169">
                <params>
                    <param name="impl" type="Remote"/>
                </params>
                <scope line="170">
                    <scope line="171"/>
                    <scope line="174"/>
                </scope>
            </method>
            <javadoc line="179">
                Call to dispatch to the remote object (on the server side).
                  The up-call to the server and the marshalling of return result
                  (or exception) should be handled before returning from this
                  method.                
                <param>
                    obj the target remote object for the call                    
                </param>
                <param>
                    call the &quot;remote call&quot; from which operation and
                      method arguments can be obtained.                    
                </param>
                <exception>
                    IOException If unable to marshal return result or
                      release input or output streams                    
                </exception>
            </javadoc>
            <method name="dispatch" type="void" line="190">
                <params>
                    <param name="obj" type="Remote"/>
                    <param name="call" type="RemoteCall"/>
                </params>
                <declaration name="num" type="int" line="191"/>
                <declaration name="op" type="long" line="192"/>
                <scope line="193">
                    <declaration name="in" type="ObjectInput" line="194"/>
                    <scope line="195">
                        <scope line="198">
                            <scope line="199"/>
                            <scope line="203"/>
                        </scope>
                    </scope>
                    <scope line="209"/>
                    <declaration name="marshalStream" type="MarshalInputStream" line="212"/>
                    <declaration name="method" type="Method" line="214"/>
                    <scope line="215"/>
                    <declaration name="types" type="Class[]" line="219"/>
                    <declaration name="params" type="Object[]" line="220"/>
                    <scope line="221">
                        <scope line="223"/>
                    </scope>
                    <scope line="227"/>
                    <scope line="230"/>
                    <scope line="233"/>
                    <declaration name="result" type="Object" line="236"/>
                    <scope line="237"/>
                    <scope line="240"/>
                    <scope line="243">
                        <declaration name="out" type="ObjectOutput" line="244"/>
                        <declaration name="rtype" type="Class" line="245"/>
                        <scope line="246"/>
                    </scope>
                    <scope line="250"/>
                </scope>
                <scope line="254">
                    <declaration name="out" type="ObjectOutput" line="256"/>
                    <scope line="257"/>
                    <scope line="260"/>
                    <scope line="263"/>
                </scope>
                <scope line="268"/>
            </method>
            <method name="unmarshalCustomCallData" type="void" line="273">
                <params>
                    <param name="in" type="ObjectInput"/>
                </params>
            </method>
            <javadoc line="275">
                Handle server-side dispatch using the RMI 1.1 stub/skeleton
                  protocol, given a non-negative operation number that has
                  already been read from the call stream.                
                <param>
                    obj the target remote object for the call                    
                </param>
                <param>
                    call the &quot;remote call&quot; from which operation and
                      method arguments can be obtained.                    
                </param>
                <param>
                    op the operation number                    
                </param>
                <exception>
                    IOException if unable to marshal return result or
                      release input or output streams                    
                </exception>
            </javadoc>
            <method name="oldDispatch" type="void" line="286">
                <params>
                    <param name="obj" type="Remote"/>
                    <param name="call" type="RemoteCall"/>
                    <param name="op" type="int"/>
                </params>
                <declaration name="hash" type="long" line="287"/>
                <scope line="288">
                    <declaration name="in" type="ObjectInput" line="289"/>
                    <scope line="290"/>
                    <scope line="294"/>
                </scope>
                <scope line="301">
                    <declaration name="out" type="ObjectOutput" line="303"/>
                    <scope line="304"/>
                    <scope line="307"/>
                    <scope line="310"/>
                </scope>
                <scope line="315"/>
            </method>
            <javadoc line="320">
                Clear the stack trace of the given Throwable by replacing it with
                  an empty StackTraceElement array, and do the same for all of its
                  chained causative exceptions.                
            </javadoc>
            <method name="clearStackTraces" type="void" line="325">
                <params>
                    <param name="t" type="Throwable"/>
                </params>
                <declaration name="empty" type="StackTraceElement[]" line="326"/>
                <scope line="327"/>
            </method>
            <javadoc line="332">
                Log the details of an incoming call.  The method parameter is either of
                  type java.lang.reflect.Method or java.rmi.server.Operation.                
            </javadoc>
            <method name="logCall" type="void" line="336">
                <params>
                    <param name="obj" type="Remote"/>
                    <param name="method" type="Object"/>
                </params>
                <scope line="337">
                    <declaration name="clientHost" type="String" line="338"/>
                    <scope line="339"/>
                    <scope line="342"/>
                </scope>
            </method>
            <javadoc line="348">
                Log the exception detail of an incoming call.                
            </javadoc>
            <method name="logCallException" type="void" line="351">
                <params>
                    <param name="e" type="Throwable"/>
                </params>
                <scope line="352">
                    <declaration name="clientHost" type="String" line="353"/>
                    <scope line="354"/>
                    <scope line="357"/>
                </scope>
                <scope line="361">
                    <declaration name="log" type="java.io.PrintStream" line="362"/>
                    <scope line="363"/>
                </scope>
            </method>
            <javadoc line="370">
                Returns the class of the ref type to be serialized.                
            </javadoc>
            <method name="getRefClass" type="String" line="373">
                <params>
                    <param name="out" type="ObjectOutput"/>
                </params>
            </method>
            <javadoc line="376">
                Return the client remote reference for this remoteRef.
                  In the case of a client RemoteRef &quot;this&quot; is the answer.
                  For a server remote reference, a client side one will have to
                  found or created.                
            </javadoc>
            <method name="getClientRef" type="RemoteRef" line="382"/>
            <javadoc line="385">
                Write out external representation for remote ref.                
            </javadoc>
            <method name="writeExternal" type="void" line="388">
                <params>
                    <param name="out" type="ObjectOutput"/>
                </params>
            </method>
            <javadoc line="390">
                Read in external representation for remote ref.                
                <exception>
                    ClassNotFoundException If the class for an object
                      being restored cannot be found.                    
                </exception>
            </javadoc>
            <method name="readExternal" type="void" line="395">
                <params>
                    <param name="in" type="ObjectInput"/>
                </params>
            </method>
            <class name="HashToMethod_Maps" line="399">
                <extends class="WeakClassHashMap">
                    <type_params>
                        <type_param name="Map&lt;Long,Method&gt;"/>
                    </type_params>
                </extends>
                <javadoc line="399">
                    A weak hash map, mapping classes to hash maps that map method
                      hashes to method objects.                    
                </javadoc>
                <method name="HashToMethod_Maps" type="constructor" line="404"/>
                <method name="computeValue" type="Map&lt;Long,Method&gt;" line="406">
                    <params>
                        <param name="remoteClass" type="Class&lt;?&gt;"/>
                    </params>
                    <declaration name="map" type="Map&amp;lt;Long,Method&amp;gt;" line="407"/>
                    <scope line="408">
                        <scope line="409">
                            <scope line="410">
                                <scope line="411">
                                    <declaration name="m" type="Method" line="412"/>
                                    <anonymous_class line="413">
                                        <method name="run" type="Void" line="414"/>
                                    </anonymous_class>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>