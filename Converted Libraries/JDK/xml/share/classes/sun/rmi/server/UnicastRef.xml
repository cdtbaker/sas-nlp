<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.server">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInput"/>
        <import package="java.io.ObjectOutput"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.rmi.MarshalException"/>
        <import package="java.rmi.Remote"/>
        <import package="java.rmi.RemoteException"/>
        <import package="java.rmi.ServerException"/>
        <import package="java.rmi.UnmarshalException"/>
        <import package="java.rmi.server.Operation"/>
        <import package="java.rmi.server.RemoteCall"/>
        <import package="java.rmi.server.RemoteObject"/>
        <import package="java.rmi.server.RemoteRef"/>
        <import package="java.security.AccessController"/>
        <import package="sun.rmi.runtime.Log"/>
        <import package="sun.rmi.transport.Connection"/>
        <import package="sun.rmi.transport.LiveRef"/>
        <import package="sun.rmi.transport.StreamRemoteCall"/>
        <import package="sun.security.action.GetBooleanAction"/>
        <class name="UnicastRef" line="21">
            <implements interface="RemoteRef"/>
            <javadoc line="21">
                NOTE: There is a JDK-internal dependency on the existence of this
                  class&apos;s getLiveRef method (as it is inherited by UnicastRef2) in
                  the implementation of javax.management.remote.rmi.RMIConnector.                
            </javadoc>
            <declaration name="clientRefLog" type="Log" line="27"/>
            <javadoc line="27">
                Client-side transport log.                
            </javadoc>
            <declaration name="clientCallLog" type="Log" line="31"/>
            <javadoc line="31">
                Client-side call log.                
            </javadoc>
            <declaration name="ref" type="LiveRef" line="35"/>
            <javadoc line="36">
                Create a new (empty) Unicast remote reference.                
            </javadoc>
            <method name="UnicastRef" type="constructor" line="39"/>
            <javadoc line="41">
                Create a new Unicast RemoteRef.                
            </javadoc>
            <method name="UnicastRef" type="constructor" line="44">
                <params>
                    <param name="liveRef" type="LiveRef"/>
                </params>
            </method>
            <javadoc line="47">
                Returns the current value of this UnicastRef&apos;s underlying
                  LiveRef.
                  NOTE: There is a JDK-internal dependency on the existence of
                  this method (as it is inherited by UnicastRef) in the
                  implementation of javax.management.remote.rmi.RMIConnector.                
            </javadoc>
            <method name="getLiveRef" type="LiveRef" line="54"/>
            <javadoc line="57">
                Invoke a method. This form of delegating method invocation
                  to the reference allows the reference to take care of
                  setting up the connection to the remote host, marshalling
                  some representation for the method and parameters, then
                  communicating the method invocation to the remote host.
                  This method either returns the result of a method invocation
                  on the remote object which resides on the remote host or
                  throws a RemoteException if the call failed or an
                  application-level exception if the remote invocation throws
                  an exception.                
                <param>
                    obj the proxy for the remote object                    
                </param>
                <param>
                    method the method to be invoked                    
                </param>
                <param>
                    params the parameter list                    
                </param>
                <param>
                    opnum  a hash that may be used to represent the method                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="invoke" type="Object" line="74">
                <params>
                    <param name="obj" type="Remote"/>
                    <param name="method" type="Method"/>
                    <param name="params" type="Object[]"/>
                    <param name="opnum" type="long"/>
                </params>
                <scope line="75"/>
                <scope line="78"/>
                <declaration name="conn" type="Connection" line="81"/>
                <declaration name="call" type="RemoteCall" line="82"/>
                <declaration name="reuse" type="boolean" line="83"/>
                <declaration name="alreadyFreed" type="boolean" line="84"/>
                <scope line="85">
                    <scope line="86"/>
                    <scope line="90">
                        <declaration name="out" type="ObjectOutput" line="91"/>
                        <declaration name="types" type="Class&lt;?&gt;[]" line="93"/>
                        <scope line="94"/>
                    </scope>
                    <scope line="98"/>
                    <scope line="103">
                        <declaration name="rtype" type="Class&lt;?&gt;" line="104"/>
                        <declaration name="in" type="ObjectInput" line="106"/>
                        <declaration name="returnValue" type="Object" line="107"/>
                    </scope>
                    <scope line="113"/>
                    <scope line="117"/>
                    <scope line="121">
                        <scope line="122"/>
                        <scope line="125"/>
                    </scope>
                </scope>
                <scope line="130">
                    <scope line="131"/>
                </scope>
                <scope line="136"/>
                <scope line="140"/>
                <scope line="144">
                    <scope line="145">
                        <scope line="146"/>
                    </scope>
                </scope>
            </method>
            <method name="marshalCustomCallData" type="void" line="153">
                <params>
                    <param name="out" type="ObjectOutput"/>
                </params>
            </method>
            <javadoc line="155">
                Marshal value to an ObjectOutput sink using RMI&apos;s serialization
                  format for parameters or return values.                
            </javadoc>
            <method name="marshalValue" type="void" line="159">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="value" type="Object"/>
                    <param name="out" type="ObjectOutput"/>
                </params>
                <scope line="160">
                    <scope line="161"/>
                    <scope line="164"/>
                    <scope line="167"/>
                    <scope line="170"/>
                    <scope line="173"/>
                    <scope line="176"/>
                    <scope line="179"/>
                    <scope line="182"/>
                    <scope line="185"/>
                </scope>
                <scope line="189"/>
            </method>
            <javadoc line="193">
                Unmarshal value from an ObjectInput source using RMI&apos;s serialization
                  format for parameters or return values.                
            </javadoc>
            <method name="unmarshalValue" type="Object" line="197">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="in" type="ObjectInput"/>
                </params>
                <scope line="198">
                    <scope line="199"/>
                    <scope line="202"/>
                    <scope line="205"/>
                    <scope line="208"/>
                    <scope line="211"/>
                    <scope line="214"/>
                    <scope line="217"/>
                    <scope line="220"/>
                    <scope line="223"/>
                </scope>
                <scope line="227"/>
            </method>
            <javadoc line="231">
                Create an appropriate call object for a new call on this object.
                  Passing operation array and index, allows the stubs generator to
                  assign the operation indexes and interpret them. The RemoteRef
                  may need the operation to encode in for the call.                
            </javadoc>
            <method name="newCall" type="RemoteCall" line="237">
                <params>
                    <param name="obj" type="RemoteObject"/>
                    <param name="ops" type="Operation[]"/>
                    <param name="opnum" type="int"/>
                    <param name="hash" type="long"/>
                </params>
                <declaration name="conn" type="Connection" line="239"/>
                <scope line="240">
                    <scope line="242"/>
                    <declaration name="call" type="RemoteCall" line="245"/>
                    <scope line="246"/>
                    <scope line="249"/>
                </scope>
                <scope line="254"/>
            </method>
            <javadoc line="259">
                Invoke makes the remote call present in the RemoteCall object.
                  Invoke will raise any &quot;user&quot; exceptions which
                  should pass through and not be caught by the stub.  If any
                  exception is raised during the remote invocation, invoke should
                  take care of cleaning up the connection before raising the
                  &quot;user&quot; or remote exception.                
            </javadoc>
            <method name="invoke" type="void" line="267">
                <params>
                    <param name="call" type="RemoteCall"/>
                </params>
                <scope line="268"/>
                <scope line="272"/>
                <scope line="277"/>
                <scope line="282"/>
                <scope line="287"/>
            </method>
            <javadoc line="293">
                Private method to free a connection.                
            </javadoc>
            <method name="free" type="void" line="296">
                <params>
                    <param name="call" type="RemoteCall"/>
                    <param name="reuse" type="boolean"/>
                </params>
                <declaration name="conn" type="Connection" line="297"/>
            </method>
            <javadoc line="300">
                Done should only be called if the invoke returns successfully
                  (non-exceptionally) to the stub. It allows the remote reference to
                  clean up (or reuse) the connection.                
            </javadoc>
            <method name="done" type="void" line="305">
                <params>
                    <param name="call" type="RemoteCall"/>
                </params>
                <scope line="308"/>
                <scope line="311"/>
            </method>
            <javadoc line="314">
                Log the details of an outgoing call.  The method parameter is either of
                  type java.lang.reflect.Method or java.rmi.server.Operation.                
            </javadoc>
            <method name="logClientCall" type="void" line="318">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="method" type="Object"/>
                </params>
            </method>
            <javadoc line="321">
                Returns the class of the ref type to be serialized                
            </javadoc>
            <method name="getRefClass" type="String" line="324">
                <params>
                    <param name="out" type="ObjectOutput"/>
                </params>
            </method>
            <javadoc line="327">
                Write out external representation for remote ref.                
            </javadoc>
            <method name="writeExternal" type="void" line="330">
                <params>
                    <param name="out" type="ObjectOutput"/>
                </params>
            </method>
            <javadoc line="333">
                Read in external representation for remote ref.                
                <exception>
                    ClassNotFoundException If the class for an object
                      being restored cannot be found.                    
                </exception>
            </javadoc>
            <method name="readExternal" type="void" line="338">
                <params>
                    <param name="in" type="ObjectInput"/>
                </params>
            </method>
            <javadoc line="341">
                Method from object, forward from RemoteObject                
            </javadoc>
            <method name="remoteToString" type="String" line="344"/>
            <javadoc line="347">
                default implementation of hashCode for remote objects                
            </javadoc>
            <method name="remoteHashCode" type="int" line="350"/>
            <javadoc line="353">
                default implementation of equals for remote objects                
            </javadoc>
            <method name="remoteEquals" type="boolean" line="356">
                <params>
                    <param name="sub" type="RemoteRef"/>
                </params>
            </method>
        </class>
    </source>