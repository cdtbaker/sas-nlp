<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.server">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInput"/>
        <import package="java.io.ObjectOutput"/>
        <import package="sun.rmi.transport.LiveRef"/>
        <class name="UnicastRef2" line="6">
            <extends class="UnicastRef"/>
            <javadoc line="6">
                NOTE: There is a JDK-internal dependency on the existence of this
                  class and its getLiveRef method (inherited from UnicastRef) in the
                  implementation of javax.management.remote.rmi.RMIConnector.                
            </javadoc>
            <javadoc line="12">
                Create a new (empty) Unicast remote reference.                
            </javadoc>
            <method name="UnicastRef2" type="constructor" line="15"/>
            <javadoc line="17">
                Create a new Unicast RemoteRef.                
            </javadoc>
            <method name="UnicastRef2" type="constructor" line="20">
                <params>
                    <param name="liveRef" type="LiveRef"/>
                </params>
            </method>
            <javadoc line="23">
                Returns the class of the ref type to be serialized                
            </javadoc>
            <method name="getRefClass" type="String" line="26">
                <params>
                    <param name="out" type="ObjectOutput"/>
                </params>
            </method>
            <javadoc line="29">
                Write out external representation for remote ref.                
            </javadoc>
            <method name="writeExternal" type="void" line="32">
                <params>
                    <param name="out" type="ObjectOutput"/>
                </params>
            </method>
            <javadoc line="35">
                Read in external representation for remote ref.                
                <exception>
                    ClassNotFoundException If the class for an object
                      being restored cannot be found.                    
                </exception>
            </javadoc>
            <method name="readExternal" type="void" line="40">
                <params>
                    <param name="in" type="ObjectInput"/>
                </params>
            </method>
        </class>
    </source>