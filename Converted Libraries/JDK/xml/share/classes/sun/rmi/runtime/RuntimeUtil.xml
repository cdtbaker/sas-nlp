<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.runtime">
        <import package="java.security.AccessController"/>
        <import package="java.security.Permission"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.concurrent.ScheduledThreadPoolExecutor"/>
        <import package="java.util.concurrent.ThreadFactory"/>
        <import package="java.util.concurrent.TimeUnit"/>
        <import package="java.util.concurrent.atomic.AtomicInteger"/>
        <import package="java.util.logging.Level"/>
        <import package="sun.security.action.GetIntegerAction"/>
        <class name="RuntimeUtil" line="38">
            <javadoc line="38">
                RMI runtime implementation utilities.
                  There is a single instance of this class, which can be obtained
                  with a GetInstanceAction.  Getting the instance requires
                  RuntimePermission(&quot;sun.rmi.runtime.RuntimeUtil.getInstance&quot;)
                  because the public methods of this class expose security-sensitive
                  capabilities.                
                <author>
                    Peter Jones                    
                </author>
            </javadoc>
            <declaration name="runtimeLog" type="Log" line="51"/>
            <javadoc line="51">
                runtime package log                
            </javadoc>
            <declaration name="schedulerThreads" type="int" line="55"/>
            <javadoc line="55">
                number of scheduler threads                
            </javadoc>
            <declaration name="GET_INSTANCE_PERMISSION" type="Permission" line="60"/>
            <javadoc line="60">
                permission required to get instance                
            </javadoc>
            <declaration name="instance" type="RuntimeUtil" line="64"/>
            <javadoc line="64">
                the singleton instance of this class                
            </javadoc>
            <declaration name="scheduler" type="ScheduledThreadPoolExecutor" line="67"/>
            <javadoc line="67">
                thread pool for scheduling delayed tasks                
            </javadoc>
            <method name="RuntimeUtil" type="constructor" line="70">
                <comment line="89">
                    We would like to allow the scheduler&apos;s threads to terminate
                     if possible, but a bug in DelayQueue.poll can cause code
                     like this to result in a busy loop:                    
                </comment>
                <comment line="94">
                    stpe.setKeepAliveTime(10, TimeUnit.MINUTES);
                     stpe.allowCoreThreadTimeOut(true);                    
                </comment>
                <anonymous_class line="73">
                    <declaration name="count" type="AtomicInteger" line="74"/>
                    <method name="newThread" type="Thread" line="75">
                        <params>
                            <param name="runnable" type="Runnable"/>
                        </params>
                        <scope line="76"/>
                        <scope line="81"/>
                    </method>
                </anonymous_class>
            </method>
            <class name="GetInstanceAction" line="97">
                <implements interface="PrivilegedAction">
                    <type_params>
                        <type_param name="RuntimeUtil"/>
                    </type_params>
                </implements>
                <javadoc line="97">
                    A PrivilegedAction for getting the RuntimeUtil instance.                    
                </javadoc>
                <javadoc line="103">
                    Creates an action that returns the RuntimeUtil instance.                    
                </javadoc>
                <method name="GetInstanceAction" type="constructor" line="106"/>
                <method name="run" type="RuntimeUtil" line="109"/>
            </class>
            <method name="getInstance" type="RuntimeUtil" line="114">
                <declaration name="sm" type="SecurityManager" line="115"/>
                <scope line="116"/>
            </method>
            <javadoc line="122">
                Returns the shared thread pool for scheduling delayed tasks.
                  Note that the returned pool has limited concurrency, so
                  submitted tasks should be short-lived and should not block.                
            </javadoc>
            <method name="getScheduler" type="ScheduledThreadPoolExecutor" line="128"/>
        </class>
    </source>