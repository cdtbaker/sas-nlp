<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.registry">
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.MissingResourceException"/>
        <import package="java.util.ResourceBundle"/>
        <import package="java.io.IOException"/>
        <import package="java.net"/>
        <import package="java.rmi"/>
        <import package="java.rmi.server.ObjID"/>
        <import package="java.rmi.server.RemoteServer"/>
        <import package="java.rmi.server.ServerNotActiveException"/>
        <import package="java.rmi.registry.Registry"/>
        <import package="java.rmi.server.RMIClientSocketFactory"/>
        <import package="java.rmi.server.RMIServerSocketFactory"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.text.MessageFormat"/>
        <import package="sun.rmi.server.UnicastServerRef"/>
        <import package="sun.rmi.server.UnicastServerRef2"/>
        <import package="sun.rmi.transport.LiveRef"/>
        <import package="sun.rmi.transport.ObjectTable"/>
        <import package="sun.rmi.transport.Target"/>
        <class name="RegistryImpl" line="49">
            <extends class="java.rmi.server.RemoteServer"/>
            <comment line="68">
                                
            </comment>
            <comment line="102">
                Create the export the object using the parameter
                 &lt;code&gt;uref&lt;code&gt;                
            </comment>
            <implements interface="Registry"/>
            <javadoc line="49">
                A &quot;registry&quot; exists on every node that allows RMI connections to
                  servers on that node.  The registry on a particular node contains a
                  transient database that maps names to remote objects.  When the
                  node boots, the registry database is empty.  The names stored in the
                  registry are pure and are not parsed.  A service storing itself in
                  the registry may want to prefix its name of the service by a package
                  name (although not required), to reduce name collisions in the
                  registry.
                  The LocateRegistry class is used to obtain registry for different hosts.                
                <see>
                    java.rmi.registry.LocateRegistry                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="68"/>
            <declaration name="bindings" type="Hashtable&lt;String,Remote&gt;" line="69"/>
            <declaration name="allowedAccessCache" type="Hashtable&lt;InetAddress,InetAddress&gt;" line="71"/>
            <declaration name="registry" type="RegistryImpl" line="73"/>
            <declaration name="id" type="ObjID" line="74"/>
            <declaration name="resources" type="ResourceBundle" line="76"/>
            <javadoc line="78">
                Construct a new RegistryImpl on the specified port with the
                  given custom socket factory pair.                
            </javadoc>
            <method name="RegistryImpl" type="constructor" line="86">
                <params>
                    <param name="port" type="int"/>
                    <param name="csf" type="RMIClientSocketFactory"/>
                    <param name="ssf" type="RMIServerSocketFactory"/>
                </params>
                <declaration name="lref" type="LiveRef" line="87"/>
            </method>
            <javadoc line="91">
                Construct a new RegistryImpl on the specified port.                
            </javadoc>
            <method name="RegistryImpl" type="constructor" line="96">
                <params>
                    <param name="port" type="int"/>
                </params>
                <declaration name="lref" type="LiveRef" line="97"/>
            </method>
            <method name="setup" type="void" line="107">
                <params>
                    <param name="uref" type="UnicastServerRef"/>
                </params>
                <comment line="109">
                    Server ref must be created and assigned before remote
                     object &apos;this&apos; can be exported.                    
                </comment>
            </method>
            <javadoc line="115">
                Returns the remote object for specified name in the registry.                
                <exception>
                    RemoteException If remote operation failed.                    
                </exception>
                <exception>
                    NotBound If name is not currently bound.                    
                </exception>
            </javadoc>
            <method name="lookup" type="Remote" line="122">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="123">
                    <declaration name="obj" type="Remote" line="124"/>
                </scope>
            </method>
            <javadoc line="131">
                Binds the name to the specified remote object.                
                <exception>
                    RemoteException If remote operation failed.                    
                </exception>
                <exception>
                    AlreadyBoundException If name is already bound.                    
                </exception>
            </javadoc>
            <method name="bind" type="void" line="138">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Remote"/>
                </params>
                <scope line="140">
                    <declaration name="curr" type="Remote" line="141"/>
                </scope>
            </method>
            <javadoc line="148">
                Unbind the name.                
                <exception>
                    RemoteException If remote operation failed.                    
                </exception>
                <exception>
                    NotBound If name is not currently bound.                    
                </exception>
            </javadoc>
            <method name="unbind" type="void" line="155">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="157">
                    <declaration name="obj" type="Remote" line="158"/>
                </scope>
            </method>
            <javadoc line="165">
                Rebind the name to a new object, replaces any existing binding.                
                <exception>
                    RemoteException If remote operation failed.                    
                </exception>
            </javadoc>
            <method name="rebind" type="void" line="171">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Remote"/>
                </params>
            </method>
            <javadoc line="176">
                Returns an enumeration of the names in the registry.                
                <exception>
                    RemoteException If remote operation failed.                    
                </exception>
            </javadoc>
            <method name="list" type="String[]" line="182">
                <declaration name="names" type="String[]" line="183"/>
                <scope line="184">
                    <declaration name="i" type="int" line="185"/>
                    <declaration name="enum_" type="Enumeration" line="187"/>
                </scope>
            </method>
            <javadoc line="194">
                Check that the caller has access to perform indicated operation.
                  The client must be on same the same host as this server.                
            </javadoc>
            <method name="checkAccess" type="void" line="198">
                <params>
                    <param name="op" type="String"/>
                </params>
                <comment line="202">
                    Get client host that this registry operation was made from.                    
                </comment>
                <comment line="221">
                    if client not yet seen, make sure client allowed access                    
                </comment>
                <comment line="235">
                    if a ServerSocket can be bound to the client&apos;s
                     address then that address must be local                    
                </comment>
                <comment line="246">
                    must have been an IOException                    
                </comment>
                <comment line="254">
                    Local call from this VM: allow access.                    
                </comment>
                <scope line="200">
                    <declaration name="clientHostName" type="String" line="204"/>
                    <declaration name="clientHost" type="InetAddress" line="205"/>
                    <scope line="207">
                        <anonymous_class line="209">
                            <method name="run" type="InetAddress" line="212"/>
                        </anonymous_class>
                    </scope>
                    <scope line="216"/>
                    <scope line="221">
                        <scope line="223"/>
                        <scope line="228">
                            <declaration name="finalClientHost" type="InetAddress" line="229"/>
                            <anonymous_class line="232">
                                <method name="run" type="Void" line="233">
                                    <comment line="235">
                                        if a ServerSocket can be bound to the client&apos;s
                                         address then that address must be local                                        
                                    </comment>
                                </method>
                            </anonymous_class>
                        </scope>
                        <scope line="244"/>
                    </scope>
                </scope>
                <scope line="252"/>
                <scope line="256"/>
            </method>
            <method name="getID" type="ObjID" line="262"/>
            <javadoc line="266">
                Retrieves text resources from the locale-specific properties file.                
            </javadoc>
            <method name="getTextResource" type="String" line="269">
                <params>
                    <param name="key" type="String"/>
                </params>
                <comment line="278">
                    throwing an Error is a bit extreme, methinks                    
                </comment>
                <scope line="270">
                    <scope line="271"/>
                    <scope line="274"/>
                    <scope line="276"/>
                </scope>
                <declaration name="val" type="String" line="282"/>
                <scope line="283"/>
                <scope line="285"/>
                <scope line="288"/>
                <scope line="290"/>
            </method>
            <javadoc line="295">
                Main program to start a registry. &lt;br&gt;
                  The port number can be specified on the command line.                
            </javadoc>
            <method name="main" type="void" line="300">
                <params>
                    <param name="args" type="String"/>
                </params>
                <comment line="302">
                    Create and install the security manager if one is not installed
                     already.                    
                </comment>
                <comment line="309">
                    Fix bugid 4147561: When JDK tools are executed, the value of
                     the CLASSPATH environment variable for the shell in which they
                     were invoked is no longer incorporated into the application
                     class path; CLASSPATH&apos;s only effect is to be the value of the
                     system property &quot;env.class.path&quot;.  To preserve the previous
                     (JDK1.1 and JDK1.2beta3) behavior of this tool, however, its
                     CLASSPATH should still be considered when resolving classes
                     being unmarshalled.  To effect this old behavior, a class
                     loader that loads from the file path specified in the
                     &quot;env.class.path&quot; property is created and set to be the context
                     class loader before the remote object is exported.                    
                </comment>
                <comment line="324">
                    preserve old default behavior                    
                </comment>
                <comment line="329">
                    Fix bugid 4242317: Classes defined by this class loader should
                     be annotated with the value of the &quot;java.rmi.server.codebase&quot;
                     property, not the &quot;file:&quot; URLs for the CLASSPATH elements.                    
                </comment>
                <comment line="343">
                    prevent registry from exiting                    
                </comment>
                <scope line="303"/>
                <scope line="307">
                    <declaration name="envcp" type="String" line="321"/>
                    <scope line="322"/>
                    <declaration name="urls" type="URL[]" line="325"/>
                    <declaration name="cl" type="ClassLoader" line="326"/>
                    <declaration name="regPort" type="int" line="337"/>
                    <scope line="338"/>
                    <scope line="343">
                        <scope line="344"/>
                        <scope line="346"/>
                    </scope>
                </scope>
                <scope line="349"/>
                <scope line="356"/>
            </method>
        </class>
    </source>