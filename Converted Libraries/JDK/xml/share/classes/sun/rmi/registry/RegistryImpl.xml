<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.registry">
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.MissingResourceException"/>
        <import package="java.util.ResourceBundle"/>
        <import package="java.io.IOException"/>
        <import package="java.net"/>
        <import package="java.rmi"/>
        <import package="java.rmi.server.ObjID"/>
        <import package="java.rmi.server.RemoteServer"/>
        <import package="java.rmi.server.ServerNotActiveException"/>
        <import package="java.rmi.registry.Registry"/>
        <import package="java.rmi.server.RMIClientSocketFactory"/>
        <import package="java.rmi.server.RMIServerSocketFactory"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.text.MessageFormat"/>
        <import package="sun.rmi.server.UnicastServerRef"/>
        <import package="sun.rmi.server.UnicastServerRef2"/>
        <import package="sun.rmi.transport.LiveRef"/>
        <import package="sun.rmi.transport.ObjectTable"/>
        <import package="sun.rmi.transport.Target"/>
        <class name="RegistryImpl" line="22">
            <extends class="java.rmi.server.RemoteServer"/>
            <implements interface="Registry"/>
            <javadoc line="22">
                A &quot;registry&quot; exists on every node that allows RMI connections to
                  servers on that node.  The registry on a particular node contains a
                  transient database that maps names to remote objects.  When the
                  node boots, the registry database is empty.  The names stored in the
                  registry are pure and are not parsed.  A service storing itself in
                  the registry may want to prefix its name of the service by a package
                  name (although not required), to reduce name collisions in the
                  registry.
                  The LocateRegistry class is used to obtain registry for different hosts.                
                <see>
                    java.rmi.registry.LocateRegistry                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="35"/>
            <declaration name="bindings" type="Hashtable&lt;String,Remote&gt;" line="36"/>
            <declaration name="allowedAccessCache" type="Hashtable&lt;InetAddress,InetAddress&gt;" line="37"/>
            <declaration name="registry" type="RegistryImpl" line="38"/>
            <declaration name="id" type="ObjID" line="39"/>
            <declaration name="resources" type="ResourceBundle" line="40"/>
            <javadoc line="41">
                Construct a new RegistryImpl on the specified port with the
                  given custom socket factory pair.                
            </javadoc>
            <method name="RegistryImpl" type="constructor" line="45">
                <params>
                    <param name="port" type="int"/>
                    <param name="csf" type="RMIClientSocketFactory"/>
                    <param name="ssf" type="RMIServerSocketFactory"/>
                </params>
                <declaration name="lref" type="LiveRef" line="46"/>
            </method>
            <javadoc line="49">
                Construct a new RegistryImpl on the specified port.                
            </javadoc>
            <method name="RegistryImpl" type="constructor" line="52">
                <params>
                    <param name="port" type="int"/>
                </params>
                <declaration name="lref" type="LiveRef" line="53"/>
            </method>
            <method name="setup" type="void" line="56">
                <params>
                    <param name="uref" type="UnicastServerRef"/>
                </params>
            </method>
            <javadoc line="60">
                Returns the remote object for specified name in the registry.                
                <exception>
                    RemoteException If remote operation failed.                    
                </exception>
                <exception>
                    NotBound If name is not currently bound.                    
                </exception>
            </javadoc>
            <method name="lookup" type="Remote" line="65">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="66">
                    <declaration name="obj" type="Remote" line="67"/>
                </scope>
            </method>
            <javadoc line="72">
                Binds the name to the specified remote object.                
                <exception>
                    RemoteException If remote operation failed.                    
                </exception>
                <exception>
                    AlreadyBoundException If name is already bound.                    
                </exception>
            </javadoc>
            <method name="bind" type="void" line="77">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Remote"/>
                </params>
                <scope line="79">
                    <declaration name="curr" type="Remote" line="80"/>
                </scope>
            </method>
            <javadoc line="85">
                Unbind the name.                
                <exception>
                    RemoteException If remote operation failed.                    
                </exception>
                <exception>
                    NotBound If name is not currently bound.                    
                </exception>
            </javadoc>
            <method name="unbind" type="void" line="90">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="92">
                    <declaration name="obj" type="Remote" line="93"/>
                </scope>
            </method>
            <javadoc line="98">
                Rebind the name to a new object, replaces any existing binding.                
                <exception>
                    RemoteException If remote operation failed.                    
                </exception>
            </javadoc>
            <method name="rebind" type="void" line="102">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Remote"/>
                </params>
            </method>
            <javadoc line="106">
                Returns an enumeration of the names in the registry.                
                <exception>
                    RemoteException If remote operation failed.                    
                </exception>
            </javadoc>
            <method name="list" type="String[]" line="110">
                <declaration name="names" type="String[]" line="111"/>
                <scope line="112">
                    <declaration name="i" type="int" line="113"/>
                    <declaration name="enum_" type="Enumeration" line="115"/>
                </scope>
            </method>
            <javadoc line="120">
                Check that the caller has access to perform indicated operation.
                  The client must be on same the same host as this server.                
            </javadoc>
            <method name="checkAccess" type="void" line="124">
                <params>
                    <param name="op" type="String"/>
                </params>
                <scope line="125">
                    <declaration name="clientHostName" type="String" line="126"/>
                    <declaration name="clientHost" type="InetAddress" line="127"/>
                    <scope line="128">
                        <anonymous_class line="129">
                            <method name="run" type="InetAddress" line="130"/>
                        </anonymous_class>
                    </scope>
                    <scope line="136"/>
                    <scope line="139">
                        <scope line="140"/>
                        <scope line="143">
                            <declaration name="finalClientHost" type="InetAddress" line="144"/>
                            <anonymous_class line="145">
                                <method name="run" type="Void" line="146"/>
                            </anonymous_class>
                        </scope>
                        <scope line="154"/>
                    </scope>
                </scope>
                <scope line="159"/>
                <scope line="161"/>
            </method>
            <method name="getID" type="ObjID" line="165"/>
            <javadoc line="168">
                Retrieves text resources from the locale-specific properties file.                
            </javadoc>
            <method name="getTextResource" type="String" line="171">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="172">
                    <scope line="173"/>
                    <scope line="176"/>
                    <scope line="178"/>
                </scope>
                <declaration name="val" type="String" line="182"/>
                <scope line="183"/>
                <scope line="186"/>
                <scope line="188"/>
                <scope line="191"/>
            </method>
            <javadoc line="195">
                Main program to start a registry. &lt;br&gt;
                  The port number can be specified on the command line.                
            </javadoc>
            <method name="main" type="void" line="199">
                <params>
                    <param name="args" type="String"/>
                </params>
                <scope line="200"/>
                <scope line="203">
                    <declaration name="envcp" type="String" line="204"/>
                    <scope line="205"/>
                    <declaration name="urls" type="URL[]" line="208"/>
                    <declaration name="cl" type="ClassLoader" line="209"/>
                    <declaration name="regPort" type="int" line="212"/>
                    <scope line="213"/>
                    <scope line="217">
                        <scope line="218"/>
                        <scope line="221"/>
                    </scope>
                </scope>
                <scope line="225"/>
                <scope line="229"/>
            </method>
        </class>
    </source>