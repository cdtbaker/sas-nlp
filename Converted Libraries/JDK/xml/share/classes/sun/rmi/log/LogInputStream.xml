<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.log">
        <import package="java.io"/>
        <class name="LogInputStream" line="3">
            <extends class="InputStream"/>
            <declaration name="in" type="InputStream" line="4"/>
            <declaration name="length" type="int" line="5"/>
            <javadoc line="6">
                Creates a log input file with the specified system dependent
                  file descriptor.                
                <param>
                    fd the system dependent file descriptor                    
                </param>
                <param>
                    length the total number of bytes allowed to be read                    
                </param>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="LogInputStream" type="constructor" line="13">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="17">
                Reads a byte of data. This method will block if no input is
                  available.                
                <return>
                    the byte read, or -1 if the end of the log or end of the
                      stream is reached.                    
                </return>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="24">
                <declaration name="c" type="int" line="26"/>
            </method>
            <javadoc line="30">
                Reads data into an array of bytes.
                  This method blocks until some input is available.                
                <param>
                    b the buffer into which the data is read                    
                </param>
                <return>
                    the actual number of bytes read, or -1 if the end of the log
                      or end of the stream is reached.                    
                </return>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="38">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <javadoc line="41">
                Reads data into an array of bytes.
                  This method blocks until some input is available.                
                <param>
                    b the buffer into which the data is read                    
                </param>
                <param>
                    off the start offset of the data                    
                </param>
                <param>
                    len the maximum number of bytes read                    
                </param>
                <return>
                    the actual number of bytes read, or -1 if the end of the log or
                      end of the stream is reached.                    
                </return>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="51">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="n" type="int" line="54"/>
            </method>
            <javadoc line="58">
                Skips n bytes of input.                
                <param>
                    n the number of bytes to be skipped                    
                </param>
                <return>
                    the actual number of bytes skipped.                    
                </return>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="skip" type="long" line="64">
                <params>
                    <param name="n" type="long"/>
                </params>
            </method>
            <javadoc line="72">
                Returns the number of bytes that can be read without blocking.                
                <return>
                    the number of available bytes, which is initially
                      equal to the file size.                    
                </return>
            </javadoc>
            <method name="available" type="int" line="77">
                <declaration name="avail" type="int" line="78"/>
            </method>
            <javadoc line="81">
                Closes the input stream.  No further input can be read.
                  the stream.                
            </javadoc>
            <method name="close" type="void" line="85"/>
            <javadoc line="88">
                Closes the stream when garbage is collected.                
            </javadoc>
            <method name="finalize" type="void" line="91"/>
        </class>
    </source>