<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.log">
        <import package="java.io"/>
        <import package="sun.rmi.server.MarshalOutputStream"/>
        <import package="sun.rmi.server.MarshalInputStream"/>
        <class name="LogHandler" line="32">
            <javadoc line="32">
                A LogHandler represents snapshots and update records as serializable
                  objects.
                  This implementation does not know how to create an initial snaphot or
                  apply an update to a snapshot.  The client must specifiy these methods
                  via a subclass.                
                <see>
                    ReliableLog                    
                </see>
                <author>
                    Ann Wollrath                    
                </author>
            </javadoc>
            <javadoc line="47">
                Creates a LogHandler for a ReliableLog.                
            </javadoc>
            <method name="LogHandler" type="constructor" line="50"/>
            <method name="initialSnapshot" type="Object" line="52"/>
            <javadoc line="52">
                Creates and returns the initial state of data structure that needs
                  to be stably stored. This method is called when a ReliableLog is
                  created.                
                <return>
                    the initial state                    
                </return>
                <exception>
                    Exception can raise any exception                    
                </exception>
            </javadoc>
            <javadoc line="62">
                Writes the snapshot object to a stream.  This callback is
                  invoked when the client calls the snaphot method of ReliableLog.                
                <param>
                    out the output stream                    
                </param>
                <param>
                    value the snapshot                    
                </param>
                <exception>
                    Exception can raise any exception                    
                </exception>
            </javadoc>
            <method name="snapshot" type="void" line="70">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="s" type="MarshalOutputStream" line="71"/>
            </method>
            <javadoc line="76">
                Read the snapshot object from a stream and returns the snapshot.
                  This callback is invoked when the client calls the recover method
                  of ReliableLog.                
                <param>
                    in the input stream                    
                </param>
                <return>
                    the state (snapshot)                    
                </return>
                <exception>
                    Exception can raise any exception                    
                </exception>
            </javadoc>
            <method name="recover" type="Object" line="86">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <declaration name="s" type="MarshalInputStream" line="87"/>
            </method>
            <javadoc line="91">
                Writes the representation (a serializable object) of an update
                  to a stream.  This callback is invoked when the client calls the
                  update method of ReliableLog.                
                <param>
                    out the output stream                    
                </param>
                <param>
                    value the snapshot                    
                </param>
                <exception>
                    Exception can raise any exception                    
                </exception>
            </javadoc>
            <method name="writeUpdate" type="void" line="100">
                <params>
                    <param name="out" type="LogOutputStream"/>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="s" type="MarshalOutputStream" line="102"/>
            </method>
            <javadoc line="107">
                Reads a stably logged update (a serializable object) from a
                  stream.  This callback is invoked during recovery, once for
                  every record in the log.  After reading the update, this method
                  invokes the applyUpdate (abstract) method in order to obtain
                  the new snapshot value.  It then returns the new snapshot.                
                <param>
                    in the input stream                    
                </param>
                <param>
                    state the current state                    
                </param>
                <return>
                    the new state                    
                </return>
                <exception>
                    Exception can raise any exception                    
                </exception>
            </javadoc>
            <method name="readUpdate" type="Object" line="120">
                <params>
                    <param name="in" type="LogInputStream"/>
                    <param name="state" type="Object"/>
                </params>
                <declaration name="s" type="MarshalInputStream" line="121"/>
            </method>
            <method name="applyUpdate" type="Object" line="125"/>
            <javadoc line="125">
                Reads a stably logged update (a serializable object) from a stream.
                  This callback is invoked during recovery, once for every record in the
                  log.  After reading the update, this method is invoked in order to
                  obtain the new snapshot value.  The method should apply the update
                  object to the current state &lt;code&gt;state&lt;/code&gt; and return the new
                  state (the new snapshot value).                
                <param>
                    update the update object                    
                </param>
                <param>
                    state the current state                    
                </param>
                <return>
                    the new state                    
                </return>
                <exception>
                    Exception can raise any exception                    
                </exception>
            </javadoc>
        </class>
    </source>