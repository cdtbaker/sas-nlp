<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport">
        <import package="java.lang.ref"/>
        <import package="sun.rmi.runtime.Log"/>
        <class name="WeakRef" line="30">
            <extends class="WeakReference"/>
            <comment line="97">
                Cache referent&apos;s &quot;identity&quot; hash code (so that we still have the
                 value after the referent gets cleared).
                
                 We cannot use the value from the object&apos;s hashCode() method, since
                 if the object is of a remote class not extended from RemoteObject
                 and it is trying to implement hashCode() and equals() so that it
                 can be compared to stub objects, its own hash code could not have
                 been initialized yet (see bugid 4102938).  Also, object table keys
                 based on server objects are indeed matched on object identity, so
                 this is the correct hash technique regardless.                
            </comment>
            <javadoc line="30">
                WeakRef objects are used by the RMI runtime to hold potentially weak
                  references to exported remote objects in the local object table.
                  This class extends the functionality of java.lang.ref.WeakReference in
                  several ways.  The methods pin() and unpin() can be used to set
                  whether the contained reference is strong or weak (it is weak upon
                  construction).  The hashCode() and equals() methods are overridden so
                  that WeakRef objects hash and compare to each other according to the
                  object identity of their referents.                
                <author>
                    Ann Wollrath                    
                </author>
                <author>
                    Peter Jones                    
                </author>
            </javadoc>
            <declaration name="hashValue" type="int" line="46"/>
            <javadoc line="46">
                value of the referent&apos;s &quot;identity&quot; hash code                
            </javadoc>
            <declaration name="strongRef" type="Object" line="49"/>
            <javadoc line="49">
                strong reference to the referent, for when this WeakRef is &quot;pinned&quot;                
            </javadoc>
            <javadoc line="52">
                Create a new WeakRef to the given object.                
            </javadoc>
            <method name="WeakRef" type="constructor" line="55">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="58">
                    cache object&apos;s &quot;identity&quot; hash code                    
                </comment>
            </method>
            <javadoc line="60">
                Create a new WeakRef to the given object, registered with a queue.                
            </javadoc>
            <method name="WeakRef" type="constructor" line="63">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="q" type="ReferenceQueue"/>
                </params>
                <comment line="66">
                    cache object&apos;s &quot;identity&quot; hash code                    
                </comment>
            </method>
            <javadoc line="68">
                Pin the contained reference (make this a strong reference).                
            </javadoc>
            <method name="pin" type="void" line="71">
                <scope line="72">
                    <scope line="75"/>
                </scope>
            </method>
            <javadoc line="82">
                Unpin the contained reference (make this a weak reference).                
            </javadoc>
            <method name="unpin" type="void" line="85">
                <scope line="86">
                    <scope line="87"/>
                </scope>
            </method>
            <method name="setHashValue" type="void" line="108">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="109"/>
                <scope line="111"/>
            </method>
            <javadoc line="116">
                Always return the &quot;identity&quot; hash code of the original referent.                
            </javadoc>
            <method name="hashCode" type="int" line="119"/>
            <javadoc line="123">
                Return true if &quot;obj&quot; is this identical WeakRef object, or, if the
                  contained reference has not been cleared, if &quot;obj&quot; is another WeakRef
                  object with the identical non-null referent.  Otherwise, return false.                
            </javadoc>
            <method name="equals" type="boolean" line="128">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="129">
                    <declaration name="referent" type="Object" line="133"/>
                </scope>
                <scope line="135"/>
            </method>
        </class>
    </source>