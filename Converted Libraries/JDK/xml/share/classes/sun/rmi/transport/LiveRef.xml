<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInput"/>
        <import package="java.io.ObjectOutput"/>
        <import package="java.rmi.Remote"/>
        <import package="java.rmi.RemoteException"/>
        <import package="java.rmi.server.ObjID"/>
        <import package="java.rmi.server.RMIClientSocketFactory"/>
        <import package="java.rmi.server.RMIServerSocketFactory"/>
        <import package="java.util.Arrays"/>
        <import package="sun.rmi.transport.tcp.TCPEndpoint"/>
        <class name="LiveRef" line="12">
            <implements interface="Cloneable"/>
            <javadoc line="12">
                NOTE: There is a JDK-internal dependency on the existence of this
                  class and its getClientSocketFactory method in the implementation
                  of javax.management.remote.rmi.RMIConnector.                
            </javadoc>
            <declaration name="ep" type="Endpoint" line="18"/>
            <javadoc line="18">
                wire representation for the object                
            </javadoc>
            <declaration name="id" type="ObjID" line="22"/>
            <declaration name="ch" type="Channel" line="23"/>
            <javadoc line="23">
                cached connection service for the object                
            </javadoc>
            <declaration name="isLocal" type="boolean" line="27"/>
            <javadoc line="27">
                flag to indicate whether this ref specifies a local server or
                  is a ref for a remote object (surrogate)                
            </javadoc>
            <javadoc line="32">
                Construct a &quot;well-known&quot; live reference to a remote object                
                <param>
                    isLocalServer If true, indicates this ref specifies a local
                      server in this address space; if false, the ref is for a remote
                      object (hence a surrogate or proxy) in another address space.                    
                </param>
            </javadoc>
            <method name="LiveRef" type="constructor" line="38">
                <params>
                    <param name="objID" type="ObjID"/>
                    <param name="endpoint" type="Endpoint"/>
                    <param name="isLocal" type="boolean"/>
                </params>
            </method>
            <javadoc line="43">
                Construct a new live reference for a server object in the local
                  address space.                
            </javadoc>
            <method name="LiveRef" type="constructor" line="47">
                <params>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="50">
                Construct a new live reference for a server object in the local
                  address space, to use sockets of the specified type.                
            </javadoc>
            <method name="LiveRef" type="constructor" line="54">
                <params>
                    <param name="port" type="int"/>
                    <param name="csf" type="RMIClientSocketFactory"/>
                    <param name="ssf" type="RMIServerSocketFactory"/>
                </params>
            </method>
            <javadoc line="57">
                Construct a new live reference for a &quot;well-known&quot; server object
                  in the local address space.                
            </javadoc>
            <method name="LiveRef" type="constructor" line="61">
                <params>
                    <param name="objID" type="ObjID"/>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="64">
                Construct a new live reference for a &quot;well-known&quot; server object
                  in the local address space, to use sockets of the specified type.                
            </javadoc>
            <method name="LiveRef" type="constructor" line="68">
                <params>
                    <param name="objID" type="ObjID"/>
                    <param name="port" type="int"/>
                    <param name="csf" type="RMIClientSocketFactory"/>
                    <param name="ssf" type="RMIServerSocketFactory"/>
                </params>
            </method>
            <javadoc line="71">
                Return a shallow copy of this ref.                
            </javadoc>
            <method name="clone" type="Object" line="74">
                <scope line="75">
                    <declaration name="newRef" type="LiveRef" line="76"/>
                </scope>
                <scope line="79"/>
            </method>
            <javadoc line="83">
                Return the port number associated with this ref.                
            </javadoc>
            <method name="getPort" type="int" line="86"/>
            <javadoc line="89">
                Return the client socket factory associated with this ref.
                  NOTE: There is a JDK-internal dependency on the existence of
                  this method in the implementation of
                  javax.management.remote.rmi.RMIConnector.                
            </javadoc>
            <method name="getClientSocketFactory" type="RMIClientSocketFactory" line="95"/>
            <javadoc line="98">
                Return the server socket factory associated with this ref.                
            </javadoc>
            <method name="getServerSocketFactory" type="RMIServerSocketFactory" line="101"/>
            <javadoc line="104">
                Export the object to accept incoming calls.                
            </javadoc>
            <method name="exportObject" type="void" line="107">
                <params>
                    <param name="target" type="Target"/>
                </params>
            </method>
            <method name="getChannel" type="Channel" line="110">
                <scope line="111"/>
            </method>
            <method name="getObjID" type="ObjID" line="116"/>
            <method name="getEndpoint" type="Endpoint" line="119"/>
            <method name="toString" type="String" line="122">
                <declaration name="type" type="String" line="123"/>
            </method>
            <method name="hashCode" type="int" line="128"/>
            <method name="equals" type="boolean" line="131">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="132">
                    <declaration name="ref" type="LiveRef" line="133"/>
                </scope>
                <scope line="136"/>
            </method>
            <method name="remoteEquals" type="boolean" line="140">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="141">
                    <declaration name="ref" type="LiveRef" line="142"/>
                    <declaration name="thisEp" type="TCPEndpoint" line="143"/>
                    <declaration name="refEp" type="TCPEndpoint" line="144"/>
                    <declaration name="thisClientFactory" type="RMIClientSocketFactory" line="145"/>
                    <declaration name="refClientFactory" type="RMIClientSocketFactory" line="146"/>
                    <scope line="147"/>
                    <scope line="150"/>
                    <scope line="153"/>
                </scope>
                <scope line="158"/>
            </method>
            <method name="write" type="void" line="162">
                <params>
                    <param name="out" type="ObjectOutput"/>
                    <param name="useNewFormat" type="boolean"/>
                </params>
                <declaration name="isResultStream" type="boolean" line="163"/>
                <scope line="164">
                    <declaration name="stream" type="ConnectionOutputStream" line="165"/>
                    <scope line="167">
                        <declaration name="oe" type="ObjectEndpoint" line="168"/>
                        <declaration name="target" type="Target" line="169"/>
                        <scope line="170">
                            <declaration name="impl" type="Remote" line="171"/>
                            <scope line="172"/>
                        </scope>
                    </scope>
                    <scope line="177"/>
                </scope>
                <scope line="181"/>
                <scope line="184"/>
            </method>
            <method name="read" type="LiveRef" line="190">
                <params>
                    <param name="in" type="ObjectInput"/>
                    <param name="useNewFormat" type="boolean"/>
                </params>
                <declaration name="ep" type="Endpoint" line="191"/>
                <declaration name="id" type="ObjID" line="192"/>
                <scope line="193"/>
                <scope line="196"/>
                <declaration name="isResultStream" type="boolean" line="200"/>
                <declaration name="ref" type="LiveRef" line="201"/>
                <scope line="202">
                    <declaration name="stream" type="ConnectionInputStream" line="203"/>
                    <scope line="205"/>
                </scope>
                <scope line="209"/>
            </method>
        </class>
    </source>