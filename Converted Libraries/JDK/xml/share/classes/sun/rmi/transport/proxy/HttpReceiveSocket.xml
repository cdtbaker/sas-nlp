<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport.proxy">
        <import package="java.io"/>
        <import package="java.net.Socket"/>
        <import package="java.net.InetAddress"/>
        <class name="HttpReceiveSocket" line="5">
            <extends class="WrappedSocket"/>
            <implements interface="RMISocketInfo"/>
            <javadoc line="5">
                The HttpReceiveSocket class extends the WrappedSocket class
                  by removing the HTTP protocol packaging from the input stream and
                  formatting the output stream as an HTTP response.
                  NOTES:
                  The output stream must be explicitly closed for the output to be
                  sent, since the HttpResponseOutputStream needs to buffer the entire
                  transmission to be able to fill in the content-length field of
                  the HTTP header.  Closing this socket will do this.
                  The constructor blocks until the HTTP protocol header
                  is received.  This could be fixed, but I don&apos;t think it should be a
                  problem because this object would not be created unless the
                  HttpAwareServerSocket has detected the beginning of the header
                  anyway, so the rest should be there.
                  This socket can only be used to process one POST and reply to it.
                  Another message would be received on a newly accepted socket anyway.                
            </javadoc>
            <declaration name="headerSent" type="boolean" line="23"/>
            <javadoc line="23">
                true if the HTTP header has pushed through the output stream yet                
            </javadoc>
            <javadoc line="27">
                Layer on top of a pre-existing Socket object, and use specified
                  input and output streams.                
                <param>
                    socket the pre-existing socket to use                    
                </param>
                <param>
                    in the InputStream to use for this socket (can be null)                    
                </param>
                <param>
                    out the OutputStream to use for this socket (can be null)                    
                </param>
            </javadoc>
            <method name="HttpReceiveSocket" type="constructor" line="34">
                <params>
                    <param name="socket" type="Socket"/>
                    <param name="in" type="InputStream"/>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="39">
                Indicate that this socket is not reusable.                
            </javadoc>
            <method name="isReusable" type="boolean" line="42"/>
            <javadoc line="45">
                Get the address to which this socket is connected.  &quot;null&quot; is always
                  returned (to indicate an unknown address) because the originating
                  host&apos;s IP address cannot be reliably determined: both because the
                  request probably went through a proxy server, and because if it was
                  delivered by a local forwarder (CGI script or servlet), we do NOT
                  want it to appear as if the call is coming from the local host (in
                  case the remote object makes access control decisions based on the
                  &quot;client host&quot; of a remote call; see bugid 4399040).                
            </javadoc>
            <method name="getInetAddress" type="InetAddress" line="55"/>
            <javadoc line="58">
                Get an OutputStream for this socket.                
            </javadoc>
            <method name="getOutputStream" type="OutputStream" line="61">
                <scope line="62">
                    <declaration name="dos" type="DataOutputStream" line="63"/>
                </scope>
            </method>
            <javadoc line="71">
                Close the socket.                
            </javadoc>
            <method name="close" type="void" line="74"/>
            <javadoc line="78">
                Return string representation of the socket.                
            </javadoc>
            <method name="toString" type="String" line="81"/>
        </class>
    </source>