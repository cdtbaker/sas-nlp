<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport.tcp">
        <import package="java.lang.ref.Reference"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.io.DataInputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.BufferedOutputStream"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.ServerSocket"/>
        <import package="java.net.Socket"/>
        <import package="java.rmi.RemoteException"/>
        <import package="java.rmi.server.ExportException"/>
        <import package="java.rmi.server.LogStream"/>
        <import package="java.rmi.server.RMIFailureHandler"/>
        <import package="java.rmi.server.RMISocketFactory"/>
        <import package="java.rmi.server.RemoteCall"/>
        <import package="java.rmi.server.ServerNotActiveException"/>
        <import package="java.rmi.server.UID"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.AccessController"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.WeakHashMap"/>
        <import package="java.util.logging.Level"/>
        <import package="java.util.concurrent.ExecutorService"/>
        <import package="java.util.concurrent.RejectedExecutionException"/>
        <import package="java.util.concurrent.SynchronousQueue"/>
        <import package="java.util.concurrent.ThreadFactory"/>
        <import package="java.util.concurrent.ThreadPoolExecutor"/>
        <import package="java.util.concurrent.TimeUnit"/>
        <import package="java.util.concurrent.atomic.AtomicInteger"/>
        <import package="sun.rmi.runtime.Log"/>
        <import package="sun.rmi.runtime.NewThreadAction"/>
        <import package="sun.rmi.transport.Channel"/>
        <import package="sun.rmi.transport.Connection"/>
        <import package="sun.rmi.transport.DGCAckHandler"/>
        <import package="sun.rmi.transport.Endpoint"/>
        <import package="sun.rmi.transport.StreamRemoteCall"/>
        <import package="sun.rmi.transport.Target"/>
        <import package="sun.rmi.transport.Transport"/>
        <import package="sun.rmi.transport.TransportConstants"/>
        <import package="sun.rmi.transport.proxy.HttpReceiveSocket"/>
        <import package="sun.security.action.GetIntegerAction"/>
        <import package="sun.security.action.GetLongAction"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="TCPTransport" line="53">
            <extends class="Transport"/>
            <javadoc line="53">
                TCPTransport is the socket-based implementation of the RMI Transport
                  abstraction.                
                <author>
                    Ann Wollrath                    
                </author>
                <author>
                    Peter Jones                    
                </author>
            </javadoc>
            <declaration name="tcpLog" type="Log" line="60"/>
            <declaration name="maxConnectionThreads" type="int" line="61"/>
            <javadoc line="61">
                maximum number of connection handler threads                
            </javadoc>
            <declaration name="threadKeepAliveTime" type="long" line="65"/>
            <javadoc line="65">
                keep alive time for idle connection handler threads                
            </javadoc>
            <declaration name="connectionThreadPool" type="ExecutorService" line="69"/>
            <javadoc line="69">
                thread pool for connection handlers                
            </javadoc>
            <anonymous_class line="72">
                <method name="newThread" type="Thread" line="73">
                    <params>
                        <param name="runnable" type="Runnable"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="connectionCount" type="AtomicInteger" line="78"/>
            <javadoc line="78">
                total connections handled                
            </javadoc>
            <declaration name="threadConnectionHandler" type="ThreadLocal&lt;ConnectionHandler&gt;" line="82"/>
            <javadoc line="82">
                client host for the current thread&apos;s connection                
            </javadoc>
            <declaration name="epList" type="LinkedList&lt;TCPEndpoint&gt;" line="86"/>
            <javadoc line="86">
                endpoints for this transport                
            </javadoc>
            <declaration name="exportCount" type="int" line="90"/>
            <javadoc line="90">
                number of objects exported on this transport                
            </javadoc>
            <declaration name="server" type="ServerSocket" line="94"/>
            <javadoc line="94">
                server socket for this transport                
            </javadoc>
            <declaration name="channelTable" type="Map&lt;TCPEndpoint,Reference&lt;TCPChannel&gt;&gt;" line="98"/>
            <javadoc line="98">
                table mapping endpoints to channels                
            </javadoc>
            <declaration name="defaultSocketFactory" type="RMISocketFactory" line="102"/>
            <declaration name="connectionReadTimeout" type="int" line="103"/>
            <javadoc line="103">
                number of milliseconds in accepted-connection timeout.
                  Warning: this should be greater than 15 seconds (the client-side
                  timeout), and defaults to 2 hours.
                  The maximum representable value is slightly more than 24 days
                  and 20 hours.                
            </javadoc>
            <javadoc line="111">
                Constructs a TCPTransport.                
            </javadoc>
            <method name="TCPTransport" type="constructor" line="114">
                <params>
                    <param name="epList" type="LinkedList<TCPEndpoint>"/>
                </params>
                <scope line="116"/>
            </method>
            <javadoc line="120">
                Closes all cached connections in every channel subordinated to this
                  transport.  Currently, this only closes outgoing connections.                
            </javadoc>
            <method name="shedConnectionCaches" type="void" line="124">
                <declaration name="channels" type="List&lt;TCPChannel&gt;" line="125"/>
                <scope line="126">
                    <scope line="128">
                        <declaration name="ch" type="TCPChannel" line="129"/>
                        <scope line="130"/>
                    </scope>
                </scope>
                <scope line="135"/>
            </method>
            <javadoc line="139">
                Returns a &lt;I&gt;Channel&lt;/I&gt; that generates connections to the
                  endpoint &lt;I&gt;ep&lt;/I&gt;. A Channel is an object that creates and
                  manages connections of a particular type to some particular
                  address space.                
                <param>
                    ep the endpoint to which connections will be generated.                    
                </param>
                <return>
                    the channel or null if the transport cannot
                      generate connections to this endpoint                    
                </return>
            </javadoc>
            <method name="getChannel" type="TCPChannel" line="148">
                <params>
                    <param name="ep" type="Endpoint"/>
                </params>
                <declaration name="ch" type="TCPChannel" line="149"/>
                <scope line="150">
                    <scope line="151">
                        <declaration name="ref" type="Reference&lt;TCPChannel&gt;" line="152"/>
                        <scope line="153"/>
                        <scope line="156">
                            <declaration name="tcpEndpoint" type="TCPEndpoint" line="157"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="165">
                Removes the &lt;I&gt;Channel&lt;/I&gt; that generates connections to the
                  endpoint &lt;I&gt;ep&lt;/I&gt;.                
            </javadoc>
            <method name="free" type="void" line="169">
                <params>
                    <param name="ep" type="Endpoint"/>
                </params>
                <scope line="170">
                    <scope line="171">
                        <declaration name="ref" type="Reference&lt;TCPChannel&gt;" line="172"/>
                        <scope line="173">
                            <declaration name="channel" type="TCPChannel" line="174"/>
                            <scope line="175"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="182">
                Export the object so that it can accept incoming calls.                
            </javadoc>
            <method name="exportObject" type="void" line="185">
                <params>
                    <param name="target" type="Target"/>
                </params>
                <scope line="186"/>
                <declaration name="ok" type="boolean" line="190"/>
                <scope line="191"/>
                <scope line="195">
                    <scope line="196">
                        <scope line="197"/>
                    </scope>
                </scope>
            </method>
            <method name="targetUnexported" type="void" line="203"/>
            <javadoc line="206">
                Decrements the count of exported objects, closing the current
                  server socket if the count reaches zero.                
            </javadoc>
            <method name="decrementExportCount" type="void" line="210"/>
            <javadoc line="223">
                Verify that the current access control context has permission to
                  accept the connection being dispatched by the current thread.                
            </javadoc>
            <method name="checkAcceptPermission" type="void" line="227">
                <params>
                    <param name="acc" type="AccessControlContext"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="228"/>
                <scope line="229"/>
                <declaration name="h" type="ConnectionHandler" line="232"/>
                <scope line="233"/>
            </method>
            <method name="getEndpoint" type="TCPEndpoint" line="238">
                <scope line="239"/>
            </method>
            <javadoc line="243">
                Listen on transport&apos;s endpoint.                
            </javadoc>
            <method name="listen" type="void" line="246"/>
            <class name="AcceptLoop" line="273">
                <implements interface="Runnable"/>
                <javadoc line="273">
                    Worker for accepting connections from a server socket.                    
                </javadoc>
                <declaration name="serverSocket" type="ServerSocket" line="277"/>
                <declaration name="lastExceptionTime" type="long" line="278"/>
                <declaration name="recentExceptionCount" type="int" line="279"/>
                <method name="AcceptLoop" type="constructor" line="280">
                    <params>
                        <param name="serverSocket" type="ServerSocket"/>
                    </params>
                </method>
                <method name="run" type="void" line="283">
                    <scope line="284"/>
                    <scope line="287">
                        <scope line="288"/>
                        <scope line="291"/>
                    </scope>
                </method>
                <javadoc line="295">
                    Accepts connections from the server socket and executes
                      handlers for them in the thread pool.                    
                </javadoc>
                <method name="executeAcceptLoop" type="void" line="299">
                    <scope line="300"/>
                    <scope line="303">
                        <declaration name="socket" type="Socket" line="304"/>
                        <scope line="305">
                            <declaration name="clientAddr" type="InetAddress" line="307"/>
                            <declaration name="clientHost" type="String" line="308"/>
                            <scope line="309"/>
                            <scope line="312"/>
                        </scope>
                        <scope line="317">
                            <scope line="318">
                                <scope line="319"/>
                                <scope line="322">
                                    <scope line="323"/>
                                </scope>
                                <scope line="327"/>
                            </scope>
                            <scope line="330">
                                <scope line="331"/>
                            </scope>
                            <scope line="335">
                                <scope line="336"/>
                                <scope line="339"/>
                            </scope>
                            <scope line="342">
                                <scope line="343"/>
                            </scope>
                            <scope line="347"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="353">
                    Returns true if the accept loop should continue after the
                      specified exception has been caught, or false if the accept
                      loop should terminate (closing the server socket).  If
                      there is an RMIFailureHandler, this method returns the
                      result of passing the specified exception to it; otherwise,
                      this method always returns true, after sleeping to throttle
                      the accept loop if necessary.                    
                </javadoc>
                <method name="continueAfterAcceptFailure" type="boolean" line="362">
                    <params>
                        <param name="t" type="Throwable"/>
                    </params>
                    <declaration name="fh" type="RMIFailureHandler" line="363"/>
                    <scope line="364"/>
                    <scope line="367"/>
                </method>
                <javadoc line="372">
                    Throttles the accept loop after an exception has been
                      caught: if a burst of 10 exceptions in 5 seconds occurs,
                      then wait for 10 seconds to curb busy CPU usage.                    
                </javadoc>
                <method name="throttleLoopOnException" type="void" line="377">
                    <declaration name="now" type="long" line="378"/>
                    <scope line="379"/>
                    <scope line="383">
                        <scope line="384">
                            <scope line="385"/>
                            <scope line="388"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <javadoc line="394">
                close socket and eat exception                
            </javadoc>
            <method name="closeSocket" type="void" line="397">
                <params>
                    <param name="sock" type="Socket"/>
                </params>
                <scope line="398"/>
                <scope line="401"/>
            </method>
            <javadoc line="404">
                handleMessages decodes transport operations and handles messages
                  appropriately.  If an exception occurs during message handling,
                  the socket is closed.                
            </javadoc>
            <method name="handleMessages" type="void" line="409">
                <params>
                    <param name="conn" type="Connection"/>
                    <param name="persistent" type="boolean"/>
                </params>
                <declaration name="port" type="int" line="410"/>
                <scope line="411">
                    <declaration name="in" type="DataInputStream" line="412"/>
                    <scope line="413">
                        <declaration name="op" type="int" line="414"/>
                        <scope line="415">
                            <scope line="416"/>
                        </scope>
                        <scope line="421"/>
                        <declaration name="call" type="RemoteCall" line="426"/>
                        <declaration name="out" type="DataOutputStream" line="430"/>
                    </scope>
                </scope>
                <scope line="443">
                    <scope line="444"/>
                </scope>
                <scope line="448">
                    <scope line="449"/>
                    <scope line="452"/>
                </scope>
            </method>
            <javadoc line="456">
                Returns the client host for the current thread&apos;s connection.  Throws
                  ServerNotActiveException if no connection is active for this thread.                
            </javadoc>
            <method name="getClientHost" type="String" line="460">
                <declaration name="h" type="ConnectionHandler" line="461"/>
                <scope line="462"/>
                <scope line="465"/>
            </method>
            <class name="ConnectionHandler" line="469">
                <implements interface="Runnable"/>
                <javadoc line="469">
                    Services messages on accepted connection                    
                </javadoc>
                <declaration name="POST" type="int" line="473"/>
                <javadoc line="473">
                    int value of &quot;POST&quot; in ASCII (Java&apos;s specified data formats
                      make this once-reviled tactic again socially acceptable)                    
                </javadoc>
                <declaration name="okContext" type="AccessControlContext" line="478"/>
                <javadoc line="478">
                    most recently accept-authorized AccessControlContext                    
                </javadoc>
                <declaration name="authCache" type="Map&lt;AccessControlContext,Reference&lt;AccessControlContext&gt;&gt;" line="482"/>
                <javadoc line="482">
                    cache of accept-authorized AccessControlContexts                    
                </javadoc>
                <declaration name="cacheSecurityManager" type="SecurityManager" line="486"/>
                <javadoc line="486">
                    security manager which authorized contexts in authCache                    
                </javadoc>
                <declaration name="socket" type="Socket" line="490"/>
                <declaration name="remoteHost" type="String" line="491"/>
                <method name="ConnectionHandler" type="constructor" line="492">
                    <params>
                        <param name="socket" type="Socket"/>
                        <param name="remoteHost" type="String"/>
                    </params>
                </method>
                <method name="getClientHost" type="String" line="496"/>
                <javadoc line="499">
                    Verify that the given AccessControlContext has permission to
                      accept this connection.                    
                </javadoc>
                <method name="checkAcceptPermission" type="void" line="503">
                    <params>
                        <param name="sm" type="SecurityManager"/>
                        <param name="acc" type="AccessControlContext"/>
                    </params>
                    <scope line="504"/>
                    <scope line="509"/>
                    <declaration name="addr" type="InetAddress" line="512"/>
                    <declaration name="host" type="String" line="513"/>
                </method>
                <method name="run" type="void" line="518">
                    <declaration name="t" type="Thread" line="519"/>
                    <declaration name="name" type="String" line="520"/>
                    <scope line="521"/>
                    <scope line="525"/>
                </method>
                <method name="run0" type="void" line="529">
                    <declaration name="endpoint" type="TCPEndpoint" line="530"/>
                    <declaration name="port" type="int" line="531"/>
                    <scope line="533"/>
                    <scope line="536"/>
                    <scope line="538"/>
                    <scope line="541"/>
                    <scope line="543">
                        <declaration name="sockIn" type="InputStream" line="544"/>
                        <declaration name="bufIn" type="InputStream" line="545"/>
                        <declaration name="in" type="DataInputStream" line="547"/>
                        <declaration name="magic" type="int" line="548"/>
                        <scope line="549">
                            <scope line="552"/>
                            <scope line="560"/>
                        </scope>
                        <declaration name="version" type="short" line="564"/>
                        <scope line="565"/>
                        <declaration name="sockOut" type="OutputStream" line="569"/>
                        <declaration name="bufOut" type="BufferedOutputStream" line="570"/>
                        <declaration name="out" type="DataOutputStream" line="571"/>
                        <declaration name="remotePort" type="int" line="572"/>
                        <scope line="573"/>
                        <declaration name="ep" type="TCPEndpoint" line="576"/>
                        <declaration name="ch" type="TCPChannel" line="577"/>
                        <declaration name="conn" type="TCPConnection" line="578"/>
                        <declaration name="protocol" type="byte" line="579"/>
                        <scope line="589"/>
                        <declaration name="clientHost" type="String" line="595"/>
                        <declaration name="clientPort" type="int" line="596"/>
                        <scope line="597"/>
                        <scope line="606"/>
                        <scope line="610"/>
                        <scope line="617"/>
                        <declaration name="multiplexer" type="ConnectionMultiplexer" line="620"/>
                        <scope line="621"/>
                    </scope>
                    <scope line="634"/>
                    <scope line="637"/>
                </method>
            </class>
        </class>
    </source>