<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport.proxy">
        <import package="java.io"/>
        <class name="HttpSendInputStream" line="3">
            <extends class="FilterInputStream"/>
            <javadoc line="3">
                The HttpSendInputStream class is used by the HttpSendSocket class as
                  a layer on the top of the InputStream it returns so that it can be
                  notified of attempts to read from it.  This allows the HttpSendSocket
                  to know when it should push across its output message.                
            </javadoc>
            <declaration name="owner" type="HttpSendSocket" line="10"/>
            <javadoc line="10">
                the HttpSendSocket object that is providing this stream                
            </javadoc>
            <javadoc line="14">
                Create new filter on a given input stream.                
                <param>
                    in the InputStream to filter from                    
                </param>
                <param>
                    owner the HttpSendSocket that is providing this stream                    
                </param>
            </javadoc>
            <method name="HttpSendInputStream" type="constructor" line="19">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="owner" type="HttpSendSocket"/>
                </params>
            </method>
            <javadoc line="23">
                Mark this stream as inactive for its owner socket, so the next time
                  a read is attempted, the owner will be notified and a new underlying
                  input stream obtained.                
            </javadoc>
            <method name="deactivate" type="void" line="28"/>
            <javadoc line="31">
                Read a byte of data from the stream.                
            </javadoc>
            <method name="read" type="int" line="34"/>
            <javadoc line="38">
                Read into an array of bytes.                
                <param>
                    b the buffer into which the data is to be read                    
                </param>
                <param>
                    off the start offset of the data                    
                </param>
                <param>
                    len the maximum number of bytes to read                    
                </param>
            </javadoc>
            <method name="read" type="int" line="44">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="49">
                Skip bytes of input.                
                <param>
                    n the number of bytes to be skipped                    
                </param>
            </javadoc>
            <method name="skip" type="long" line="53">
                <params>
                    <param name="n" type="long"/>
                </params>
            </method>
            <javadoc line="58">
                Return the number of bytes that can be read without blocking.                
            </javadoc>
            <method name="available" type="int" line="61"/>
            <javadoc line="65">
                Close the stream.                
            </javadoc>
            <method name="close" type="void" line="68"/>
            <javadoc line="71">
                Mark the current position in the stream.                
                <param>
                    readlimit how many bytes can be read before mark becomes invalid                    
                </param>
            </javadoc>
            <method name="mark" type="void" line="75">
                <params>
                    <param name="readlimit" type="int"/>
                </params>
                <scope line="76">
                    <scope line="77"/>
                    <scope line="80"/>
                </scope>
            </method>
            <javadoc line="86">
                Reposition the stream to the last marked position.                
            </javadoc>
            <method name="reset" type="void" line="89"/>
            <javadoc line="93">
                Return true if this stream type supports mark/reset.                
            </javadoc>
            <method name="markSupported" type="boolean" line="96">
                <scope line="97">
                    <scope line="98"/>
                    <scope line="101"/>
                </scope>
            </method>
        </class>
    </source>