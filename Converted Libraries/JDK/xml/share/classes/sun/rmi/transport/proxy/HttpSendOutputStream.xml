<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport.proxy">
        <import package="java.io"/>
        <class name="HttpSendOutputStream" line="29">
            <extends class="FilterOutputStream"/>
            <javadoc line="29">
                The HttpSendOutputStream class is used by the HttpSendSocket class as
                  a layer on the top of the OutputStream it returns so that it can be
                  notified of attempts to write to it.  This allows the HttpSendSocket
                  to know when it should construct a new message.                
            </javadoc>
            <declaration name="owner" type="HttpSendSocket" line="37"/>
            <javadoc line="37">
                the HttpSendSocket object that is providing this stream                
            </javadoc>
            <javadoc line="40">
                Create new filter on a given output stream.                
                <param>
                    out the OutputStream to filter from                    
                </param>
                <param>
                    owner the HttpSendSocket that is providing this stream                    
                </param>
            </javadoc>
            <method name="HttpSendOutputStream" type="constructor" line="47">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="owner" type="HttpSendSocket"/>
                </params>
            </method>
            <javadoc line="53">
                Mark this stream as inactive for its owner socket, so the next time
                  a write is attempted, the owner will be notified and a new underlying
                  output stream obtained.                
            </javadoc>
            <method name="deactivate" type="void" line="59"/>
            <javadoc line="63">
                Write a byte of data to the stream.                
            </javadoc>
            <method name="write" type="void" line="67">
                <params>
                    <param name="b" type="int"/>
                </params>
            </method>
            <javadoc line="73">
                Write a subarray of bytes.                
                <param>
                    b the buffer from which the data is to be written                    
                </param>
                <param>
                    off the start offset of the data                    
                </param>
                <param>
                    len the number of bytes to be written                    
                </param>
            </javadoc>
            <method name="write" type="void" line="80">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="88">
                Flush the stream.                
            </javadoc>
            <method name="flush" type="void" line="92"/>
            <javadoc line="97">
                Close the stream.                
            </javadoc>
            <method name="close" type="void" line="101"/>
        </class>
    </source>