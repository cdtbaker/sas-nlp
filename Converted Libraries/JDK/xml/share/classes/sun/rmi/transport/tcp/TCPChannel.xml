<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport.tcp">
        <import package="java.io.DataInputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.lang.ref.Reference"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.net.Socket"/>
        <import package="java.rmi.ConnectIOException"/>
        <import package="java.rmi.RemoteException"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.AccessController"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="java.util.ListIterator"/>
        <import package="java.util.WeakHashMap"/>
        <import package="java.util.concurrent.Future"/>
        <import package="java.util.concurrent.ScheduledExecutorService"/>
        <import package="java.util.concurrent.TimeUnit"/>
        <import package="sun.rmi.runtime.Log"/>
        <import package="sun.rmi.runtime.NewThreadAction"/>
        <import package="sun.rmi.runtime.RuntimeUtil"/>
        <import package="sun.rmi.transport.Channel"/>
        <import package="sun.rmi.transport.Connection"/>
        <import package="sun.rmi.transport.Endpoint"/>
        <import package="sun.rmi.transport.TransportConstants"/>
        <import package="sun.security.action.GetIntegerAction"/>
        <import package="sun.security.action.GetLongAction"/>
        <class name="TCPChannel" line="28">
            <implements interface="Channel"/>
            <javadoc line="28">
                TCPChannel is the socket-based implementation of the RMI Channel
                  abstraction.                
                <author>
                    Ann Wollrath                    
                </author>
            </javadoc>
            <declaration name="ep" type="TCPEndpoint" line="34"/>
            <javadoc line="34">
                endpoint for this channel                
            </javadoc>
            <declaration name="tr" type="TCPTransport" line="38"/>
            <javadoc line="38">
                transport for this channel                
            </javadoc>
            <declaration name="freeList" type="List&amp;lt;TCPConnection&amp;gt;" line="42"/>
            <javadoc line="42">
                list of cached connections                
            </javadoc>
            <declaration name="reaper" type="Future&amp;lt;?&amp;gt;" line="46"/>
            <javadoc line="46">
                frees cached connections that have expired (guarded by freeList)                
            </javadoc>
            <declaration name="usingMultiplexer" type="boolean" line="50"/>
            <javadoc line="50">
                using multiplexer (for bi-directional applet communication                
            </javadoc>
            <declaration name="multiplexer" type="ConnectionMultiplexer" line="54"/>
            <javadoc line="54">
                connection multiplexer, if used                
            </javadoc>
            <declaration name="acceptor" type="ConnectionAcceptor" line="58"/>
            <javadoc line="58">
                connection acceptor (should be in TCPTransport)                
            </javadoc>
            <declaration name="okContext" type="AccessControlContext" line="62"/>
            <javadoc line="62">
                most recently authorized AccessControlContext                
            </javadoc>
            <declaration name="authcache" type="WeakHashMap&amp;lt;AccessControlContext,Reference&amp;lt;AccessControlContext&amp;gt;&amp;gt;" line="66"/>
            <javadoc line="66">
                cache of authorized AccessControlContexts                
            </javadoc>
            <declaration name="cacheSecurityManager" type="SecurityManager" line="70"/>
            <javadoc line="70">
                the SecurityManager which authorized okContext and authcache                
            </javadoc>
            <declaration name="idleTimeout" type="long" line="74"/>
            <javadoc line="74">
                client-side connection idle usage timeout                
            </javadoc>
            <declaration name="handshakeTimeout" type="int" line="78"/>
            <javadoc line="78">
                client-side connection handshake read timeout                
            </javadoc>
            <declaration name="responseTimeout" type="int" line="82"/>
            <javadoc line="82">
                client-side connection response read timeout (after handshake)                
            </javadoc>
            <declaration name="scheduler" type="ScheduledExecutorService" line="86"/>
            <javadoc line="86">
                thread pool for scheduling delayed tasks                
            </javadoc>
            <javadoc line="90">
                Create channel for endpoint.                
            </javadoc>
            <method name="TCPChannel" type="constructor" line="93">
                <params>
                    <param name="tr" type="TCPTransport"/>
                    <param name="ep" type="TCPEndpoint"/>
                </params>
            </method>
            <javadoc line="97">
                Return the endpoint for this channel.                
            </javadoc>
            <method name="getEndpoint" type="Endpoint" line="100"/>
            <javadoc line="103">
                Checks if the current caller has sufficient privilege to make
                  a connection to the remote endpoint.                
                <exception>
                    SecurityException if caller is not allowed to use this
                      Channel.                    
                </exception>
            </javadoc>
            <method name="checkConnectPermission" type="void" line="109">
                <declaration name="security" type="SecurityManager" line="110"/>
                <scope line="112"/>
                <declaration name="ctx" type="AccessControlContext" line="117"/>
                <scope line="118"/>
            </method>
            <javadoc line="124">
                Supplies a connection to the endpoint of the address space
                  for which this is a channel.  The returned connection may
                  be one retrieved from a cache of idle connections.                
            </javadoc>
            <method name="newConnection" type="Connection" line="129">
                <declaration name="conn" type="TCPConnection" line="130"/>
                <scope line="131">
                    <scope line="133">
                        <declaration name="elementPos" type="int" line="134"/>
                        <scope line="135"/>
                    </scope>
                    <scope line="141">
                        <scope line="142"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="152">
                Create a new connection to the remote endpoint of this channel.
                  The returned connection is new.  The caller must already have
                  passed a security checkConnect or equivalent.                
            </javadoc>
            <method name="createConnection" type="Connection" line="157">
                <declaration name="conn" type="Connection" line="158"/>
                <scope line="160">
                    <declaration name="sock" type="Socket" line="161"/>
                    <scope line="163">
                        <declaration name="out" type="DataOutputStream" line="164"/>
                        <scope line="166"/>
                        <scope line="169">
                            <declaration name="originalSoTimeout" type="int" line="172"/>
                            <scope line="173"/>
                            <scope line="177"/>
                            <declaration name="in" type="DataInputStream" line="179"/>
                            <declaration name="ack" type="byte" line="180"/>
                            <scope line="181"/>
                            <declaration name="suggestedHost" type="String" line="184"/>
                            <declaration name="suggestedPort" type="int" line="185"/>
                            <scope line="186"/>
                            <declaration name="localEp" type="TCPEndpoint" line="190"/>
                            <scope line="193"/>
                            <scope line="196"/>
                            <scope line="199"/>
                        </scope>
                    </scope>
                    <scope line="204"/>
                </scope>
                <scope line="209">
                    <scope line="210"/>
                    <scope line="213">
                        <scope line="214"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="223">
                Free the connection generated by this channel.                
                <param>
                    conn The connection                    
                </param>
                <param>
                    reuse If true, the connection is in a state in which it
                      can be reused for another method call.                    
                </param>
            </javadoc>
            <method name="free" type="void" line="229">
                <params>
                    <param name="conn" type="Connection"/>
                    <param name="reuse" type="boolean"/>
                </params>
                <scope line="231">
                    <declaration name="lastuse" type="long" line="232"/>
                    <declaration name="tcpConnection" type="TCPConnection" line="233"/>
                    <scope line="235">
                        <scope line="237">
                            <anonymous_class line="239">
                                <method name="run" type="void" line="240"/>
                            </anonymous_class>
                        </scope>
                    </scope>
                </scope>
                <scope line="251">
                    <scope line="253"/>
                    <scope line="256"/>
                </scope>
            </method>
            <javadoc line="260">
                Send transport header over stream.                
            </javadoc>
            <method name="writeTransportHeader" type="void" line="263">
                <params>
                    <param name="out" type="DataOutputStream"/>
                </params>
                <scope line="264">
                    <declaration name="dataOut" type="DataOutputStream" line="265"/>
                </scope>
                <scope line="269"/>
            </method>
            <javadoc line="273">
                Use given connection multiplexer object to obtain new connections
                  through this channel.                
            </javadoc>
            <method name="useMultiplexer" type="void" line="277">
                <params>
                    <param name="newMultiplexer" type="ConnectionMultiplexer"/>
                </params>
            </method>
            <javadoc line="281">
                Accept a connection provided over a multiplexed channel.                
            </javadoc>
            <method name="acceptMultiplexConnection" type="void" line="284">
                <params>
                    <param name="conn" type="Connection"/>
                </params>
                <scope line="285"/>
            </method>
            <javadoc line="291">
                Closes all the connections in the cache, whether timed out or not.                
            </javadoc>
            <method name="shedCache" type="void" line="294">
                <declaration name="conn" type="Connection[]" line="295"/>
                <scope line="296"/>
                <scope line="300">
                    <declaration name="c" type="Connection" line="301"/>
                    <scope line="303"/>
                    <scope line="306"/>
                </scope>
            </method>
            <method name="freeCachedConnections" type="void" line="310">
                <scope line="311">
                    <declaration name="size" type="int" line="312"/>
                    <scope line="313">
                        <declaration name="time" type="long" line="314"/>
                        <declaration name="iter" type="ListIterator&amp;lt;TCPConnection&amp;gt;" line="315"/>
                        <scope line="316">
                            <declaration name="conn" type="TCPConnection" line="317"/>
                            <scope line="318">
                                <scope line="320"/>
                                <scope line="323"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="329"/>
                </scope>
            </method>
        </class>
        <class name="ConnectionAcceptor" line="336">
            <implements interface="Runnable"/>
            <javadoc line="336">
                ConnectionAcceptor manages accepting new connections and giving them
                  to TCPTransport&apos;s message handler on new threads.
                  Since this object only needs to know which transport to give new
                  connections to, it doesn&apos;t need to be per-channel as currently
                  implemented.                
            </javadoc>
            <declaration name="transport" type="TCPTransport" line="344"/>
            <javadoc line="344">
                transport that will handle message on accepted connections                
            </javadoc>
            <declaration name="queue" type="List&amp;lt;Connection&amp;gt;" line="348"/>
            <javadoc line="348">
                queue of connections to be accepted                
            </javadoc>
            <declaration name="threadNum" type="int" line="352"/>
            <javadoc line="352">
                thread ID counter                
            </javadoc>
            <javadoc line="356">
                Create a new ConnectionAcceptor that will give connections
                  to the specified transport on a new thread.                
            </javadoc>
            <method name="ConnectionAcceptor" type="constructor" line="360">
                <params>
                    <param name="transport" type="TCPTransport"/>
                </params>
            </method>
            <javadoc line="363">
                Start a new thread to accept connections.                
            </javadoc>
            <method name="startNewAcceptor" type="void" line="366">
                <declaration name="t" type="Thread" line="367"/>
            </method>
            <javadoc line="370">
                Add connection to queue of connections to be accepted.                
            </javadoc>
            <method name="accept" type="void" line="373">
                <params>
                    <param name="conn" type="Connection"/>
                </params>
                <scope line="374"/>
            </method>
            <javadoc line="379">
                Give transport next accepted conection, when available.                
            </javadoc>
            <method name="run" type="void" line="382">
                <declaration name="conn" type="Connection" line="383"/>
                <scope line="384">
                    <scope line="385">
                        <scope line="386"/>
                        <scope line="389"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>