<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport.proxy">
        <import package="java.io"/>
        <import package="java.net"/>
        <import package="sun.rmi.runtime.Log"/>
        <class name="HttpSendSocket" line="5">
            <extends class="Socket"/>
            <implements interface="RMISocketInfo"/>
            <javadoc line="5">
                The HttpSendSocket class extends the java.net.Socket class
                  by enclosing the data output stream in, then extracting the input
                  stream from, an HTTP protocol transmission.
                  NOTES:
                  Since the length of the output request must be known before the
                  HTTP header can be completed, all of the output is buffered by
                  an HttpOutputStream object until either an attempt is made to
                  read from this socket, or the socket is explicitly closed.
                  On the first read attempt to read from this socket, the buffered
                  output is sent to the destination as the body of an HTTP POST
                  request.  All reads will then acquire data from the body of
                  the response.  A subsequent attempt to write to this socket will
                  throw an IOException.                
            </javadoc>
            <declaration name="host" type="String" line="21"/>
            <javadoc line="21">
                the host to connect to                
            </javadoc>
            <declaration name="port" type="int" line="25"/>
            <javadoc line="25">
                the port to connect to                
            </javadoc>
            <declaration name="url" type="URL" line="29"/>
            <javadoc line="29">
                the URL to forward through                
            </javadoc>
            <declaration name="conn" type="URLConnection" line="33"/>
            <javadoc line="33">
                the object managing this connection through the URL                
            </javadoc>
            <declaration name="in" type="InputStream" line="37"/>
            <javadoc line="37">
                internal input stream for this socket                
            </javadoc>
            <declaration name="out" type="OutputStream" line="41"/>
            <javadoc line="41">
                internal output stream for this socket                
            </javadoc>
            <declaration name="inNotifier" type="HttpSendInputStream" line="45"/>
            <javadoc line="45">
                the notifying input stream returned to users                
            </javadoc>
            <declaration name="outNotifier" type="HttpSendOutputStream" line="49"/>
            <javadoc line="49">
                the notifying output stream returned to users                
            </javadoc>
            <declaration name="lineSeparator" type="String" line="53"/>
            <javadoc line="53">
                Line separator string.  This is the value of the line.separator
                  property at the moment that the socket was created.                
            </javadoc>
            <javadoc line="58">
                Create a stream socket and connect it to the specified port on
                  the specified host.                
                <param>
                    host the host                    
                </param>
                <param>
                    port the port                    
                </param>
            </javadoc>
            <method name="HttpSendSocket" type="constructor" line="64">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="url" type="URL"/>
                </params>
                <scope line="66"/>
            </method>
            <javadoc line="75">
                Create a stream socket and connect it to the specified port on
                  the specified host.                
                <param>
                    host the host                    
                </param>
                <param>
                    port the port                    
                </param>
            </javadoc>
            <method name="HttpSendSocket" type="constructor" line="81">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="84">
                Create a stream socket and connect it to the specified address on
                  the specified port.                
                <param>
                    address the address                    
                </param>
                <param>
                    port the port                    
                </param>
            </javadoc>
            <method name="HttpSendSocket" type="constructor" line="90">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="93">
                Indicate that this socket is not reusable.                
            </javadoc>
            <method name="isReusable" type="boolean" line="96"/>
            <javadoc line="99">
                Create a new socket connection to host (or proxy), and prepare to
                  send HTTP transmission.                
            </javadoc>
            <method name="writeNotify" type="OutputStream" line="103">
                <scope line="104"/>
            </method>
            <javadoc line="115">
                Send HTTP output transmission and prepare to receive response.                
            </javadoc>
            <method name="readNotify" type="InputStream" line="118">
                <scope line="123"/>
                <scope line="126"/>
                <declaration name="contentType" type="String" line="130"/>
                <scope line="131">
                    <scope line="132">
                        <declaration name="message" type="String" line="133"/>
                        <scope line="134"/>
                        <scope line="137"/>
                        <scope line="141">
                            <declaration name="din" type="DataInputStream" line="142"/>
                            <declaration name="line" type="String" line="143"/>
                        </scope>
                        <scope line="146"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="154">
                Get the address to which the socket is connected.                
            </javadoc>
            <method name="getInetAddress" type="InetAddress" line="157">
                <scope line="158"/>
                <scope line="161"/>
            </method>
            <javadoc line="165">
                Get the local address to which the socket is bound.                
            </javadoc>
            <method name="getLocalAddress" type="InetAddress" line="168">
                <scope line="169"/>
                <scope line="172"/>
            </method>
            <javadoc line="176">
                Get the remote port to which the socket is connected.                
            </javadoc>
            <method name="getPort" type="int" line="179"/>
            <javadoc line="182">
                Get the local port to which the socket is connected.                
            </javadoc>
            <method name="getLocalPort" type="int" line="185"/>
            <javadoc line="188">
                Get an InputStream for this socket.                
            </javadoc>
            <method name="getInputStream" type="InputStream" line="191"/>
            <javadoc line="194">
                Get an OutputStream for this socket.                
            </javadoc>
            <method name="getOutputStream" type="OutputStream" line="197"/>
            <javadoc line="200">
                Enable/disable TCP_NODELAY.
                  This operation has no effect for an HttpSendSocket.                
            </javadoc>
            <method name="setTcpNoDelay" type="void" line="204">
                <params>
                    <param name="on" type="boolean"/>
                </params>
            </method>
            <javadoc line="206">
                Retrieve whether TCP_NODELAY is enabled.                
            </javadoc>
            <method name="getTcpNoDelay" type="boolean" line="209"/>
            <javadoc line="212">
                Enable/disable SO_LINGER with the specified linger time.
                  This operation has no effect for an HttpSendSocket.                
            </javadoc>
            <method name="setSoLinger" type="void" line="216">
                <params>
                    <param name="on" type="boolean"/>
                    <param name="val" type="int"/>
                </params>
            </method>
            <javadoc line="218">
                Retrive setting for SO_LINGER.                
            </javadoc>
            <method name="getSoLinger" type="int" line="221"/>
            <javadoc line="224">
                Enable/disable SO_TIMEOUT with the specified timeout
                  This operation has no effect for an HttpSendSocket.                
            </javadoc>
            <method name="setSoTimeout" type="void" line="228">
                <params>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <javadoc line="230">
                Retrive setting for SO_TIMEOUT.                
            </javadoc>
            <method name="getSoTimeout" type="int" line="233"/>
            <javadoc line="236">
                Close the socket.                
            </javadoc>
            <method name="close" type="void" line="239"/>
            <javadoc line="242">
                Return string representation of this pseudo-socket.                
            </javadoc>
            <method name="toString" type="String" line="245"/>
        </class>
    </source>