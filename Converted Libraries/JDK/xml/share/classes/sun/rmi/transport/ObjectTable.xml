<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport">
        <import package="java.lang.ref.ReferenceQueue"/>
        <import package="java.rmi.NoSuchObjectException"/>
        <import package="java.rmi.Remote"/>
        <import package="java.rmi.dgc.VMID"/>
        <import package="java.rmi.server.ExportException"/>
        <import package="java.rmi.server.ObjID"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="sun.misc.GC"/>
        <import package="sun.rmi.runtime.Log"/>
        <import package="sun.rmi.runtime.NewThreadAction"/>
        <import package="sun.security.action.GetLongAction"/>
        <class name="ObjectTable" line="16">
            <javadoc line="16">
                Object table shared by all implementors of the Transport interface.
                  This table maps object ids to remote object targets in this address
                  space.                
                <author>
                    Ann Wollrath                    
                </author>
                <author>
                    Peter Jones                    
                </author>
            </javadoc>
            <declaration name="gcInterval" type="long" line="24"/>
            <javadoc line="24">
                maximum interval between complete garbage collections of local heap                
            </javadoc>
            <declaration name="tableLock" type="Object" line="28"/>
            <javadoc line="28">
                lock guarding objTable and implTable.
                  Holders MAY acquire a Target instance&apos;s lock or keepAliveLock.                
            </javadoc>
            <declaration name="objTable" type="Map&lt;ObjectEndpoint,Target&gt;" line="33"/>
            <javadoc line="33">
                tables mapping to Target, keyed from ObjectEndpoint and impl object                
            </javadoc>
            <declaration name="implTable" type="Map&lt;WeakRef,Target&gt;" line="37"/>
            <declaration name="keepAliveLock" type="Object" line="38"/>
            <javadoc line="38">
                lock guarding keepAliveCount, reaper, and gcLatencyRequest.
                  Holders may NOT acquire a Target instance&apos;s lock or tableLock.                
            </javadoc>
            <declaration name="keepAliveCount" type="int" line="43"/>
            <javadoc line="43">
                count of non-permanent objects in table or still processing calls                
            </javadoc>
            <declaration name="reaper" type="Thread" line="47"/>
            <javadoc line="47">
                thread to collect unreferenced objects from table                
            </javadoc>
            <declaration name="reapQueue" type="ReferenceQueue" line="51"/>
            <javadoc line="51">
                queue notified when weak refs in the table are cleared                
            </javadoc>
            <declaration name="gcLatencyRequest" type="GC.LatencyRequest" line="55"/>
            <javadoc line="55">
                handle for GC latency request (for future cancellation)                
            </javadoc>
            <method name="ObjectTable" type="constructor" line="59"/>
            <javadoc line="61">
                Returns the target associated with the object id.                
            </javadoc>
            <method name="getTarget" type="Target" line="64">
                <params>
                    <param name="oe" type="ObjectEndpoint"/>
                </params>
                <scope line="65"/>
            </method>
            <javadoc line="69">
                Returns the target associated with the remote object                
            </javadoc>
            <method name="getTarget" type="Target" line="72">
                <params>
                    <param name="impl" type="Remote"/>
                </params>
                <scope line="73"/>
            </method>
            <javadoc line="77">
                Returns the stub for the remote object &lt;b&gt;obj&lt;/b&gt; passed
                  as a parameter. This operation is only valid &lt;i&gt;after&lt;/i&gt;
                  the object has been exported.                
                <return>
                    the stub for the remote object, <b>obj</b>.                    
                </return>
                <exception>
                    NoSuchObjectException if the stub for the
                      remote object could not be found.                    
                </exception>
            </javadoc>
            <method name="getStub" type="Remote" line="85">
                <params>
                    <param name="impl" type="Remote"/>
                </params>
                <declaration name="target" type="Target" line="86"/>
                <scope line="87"/>
                <scope line="90"/>
            </method>
            <javadoc line="94">
                Remove the remote object, obj, from the RMI runtime. If
                  successful, the object can no longer accept incoming RMI calls.
                  If the force parameter is true, the object is forcibly unexported
                  even if there are pending calls to the remote object or the
                  remote object still has calls in progress.  If the force
                  parameter is false, the object is only unexported if there are
                  no pending or in progress calls to the object.                
                <param>
                    obj the remote object to be unexported                    
                </param>
                <param>
                    force if true, unexports the object even if there are
                      pending or in-progress calls; if false, only unexports the object
                      if there are no pending or in-progress calls                    
                </param>
                <return>
                    true if operation is successful, false otherwise                    
                </return>
                <exception>
                    NoSuchObjectException if the remote object is not
                      currently exported                    
                </exception>
            </javadoc>
            <method name="unexportObject" type="boolean" line="110">
                <params>
                    <param name="obj" type="Remote"/>
                    <param name="force" type="boolean"/>
                </params>
                <scope line="111">
                    <declaration name="target" type="Target" line="112"/>
                    <scope line="113"/>
                    <scope line="116">
                        <scope line="117"/>
                        <scope line="121"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="127">
                Add target to object table.  If it is not a permanent entry, then
                  make sure that reaper thread is running to remove collected entries
                  and keep VM alive.                
            </javadoc>
            <method name="putTarget" type="void" line="132">
                <params>
                    <param name="target" type="Target"/>
                </params>
                <declaration name="oe" type="ObjectEndpoint" line="133"/>
                <declaration name="weakImpl" type="WeakRef" line="134"/>
                <scope line="135"/>
                <scope line="138">
                    <scope line="139">
                        <scope line="140"/>
                        <scope line="143"/>
                        <scope line="148"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="154">
                Remove target from object table.
                  NOTE: This method must only be invoked while synchronized on
                  the &quot;tableLock&quot; object, because it does not do so itself.                
            </javadoc>
            <method name="removeTarget" type="void" line="159">
                <params>
                    <param name="target" type="Target"/>
                </params>
                <declaration name="oe" type="ObjectEndpoint" line="160"/>
                <declaration name="weakImpl" type="WeakRef" line="161"/>
                <scope line="162"/>
            </method>
            <javadoc line="169">
                Process client VM signalling reference for given ObjID: forward to
                  correspoding Target entry.  If ObjID is not found in table,
                  no action is taken.                
            </javadoc>
            <method name="referenced" type="void" line="174">
                <params>
                    <param name="id" type="ObjID"/>
                    <param name="sequenceNum" type="long"/>
                    <param name="vmid" type="VMID"/>
                </params>
                <scope line="175">
                    <declaration name="oe" type="ObjectEndpoint" line="176"/>
                    <declaration name="target" type="Target" line="177"/>
                    <scope line="178"/>
                </scope>
            </method>
            <javadoc line="183">
                Process client VM dropping reference for given ObjID: forward to
                  correspoding Target entry.  If ObjID is not found in table,
                  no action is taken.                
            </javadoc>
            <method name="unreferenced" type="void" line="188">
                <params>
                    <param name="id" type="ObjID"/>
                    <param name="sequenceNum" type="long"/>
                    <param name="vmid" type="VMID"/>
                    <param name="strong" type="boolean"/>
                </params>
                <scope line="189">
                    <declaration name="oe" type="ObjectEndpoint" line="190"/>
                    <declaration name="target" type="Target" line="191"/>
                </scope>
            </method>
            <javadoc line="195">
                Increments the &quot;keep-alive count&quot;.
                  The &quot;keep-alive count&quot; is the number of non-permanent remote objects
                  that are either in the object table or still have calls in progress.
                  Therefore, this method should be invoked exactly once for every
                  non-permanent remote object exported (a remote object must be
                  exported before it can have any calls in progress).
                  The VM is &quot;kept alive&quot; while the keep-alive count is greater than
                  zero; this is accomplished by keeping a non-daemon thread running.
                  Because non-permanent objects are those that can be garbage
                  collected while exported, and thus those for which the &quot;reaper&quot;
                  thread operates, the reaper thread also serves as the non-daemon
                  VM keep-alive thread; a new reaper thread is created if necessary.                
            </javadoc>
            <method name="incrementKeepAliveCount" type="void" line="209">
                <scope line="210">
                    <scope line="212"/>
                    <scope line="216"/>
                </scope>
            </method>
            <javadoc line="221">
                Decrements the &quot;keep-alive count&quot;.
                  The &quot;keep-alive count&quot; is the number of non-permanent remote objects
                  that are either in the object table or still have calls in progress.
                  Therefore, this method should be invoked exactly once for every
                  previously-exported non-permanent remote object that both has been
                  removed from the object table and has no calls still in progress.
                  If the keep-alive count is decremented to zero, then the current
                  reaper thread is terminated to cease keeping the VM alive (and
                  because there are no more non-permanent remote objects to reap).                
            </javadoc>
            <method name="decrementKeepAliveCount" type="void" line="232">
                <scope line="233">
                    <scope line="235">
                        <scope line="236"/>
                        <anonymous_class line="239">
                            <method name="run" type="Void" line="240"/>
                        </anonymous_class>
                    </scope>
                </scope>
            </method>
            <class name="Reaper" line="252">
                <implements interface="Runnable"/>
                <javadoc line="252">
                    The Reaper thread waits for notifications that weak references in the
                      object table have been cleared.  When it receives a notification, it
                      removes the corresponding entry from the table.
                      Since the Reaper is created as a non-daemon thread, it also serves
                      to keep the VM from exiting while there are objects in the table
                      (other than permanent entries that should neither be reaped nor
                      keep the VM alive).                    
                </javadoc>
                <method name="run" type="void" line="262">
                    <scope line="263">
                        <scope line="264">
                            <declaration name="weakImpl" type="WeakRef" line="265"/>
                            <scope line="266">
                                <declaration name="target" type="Target" line="267"/>
                                <scope line="268">
                                    <scope line="269"/>
                                    <scope line="272"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="281"/>
                </method>
            </class>
        </class>
    </source>