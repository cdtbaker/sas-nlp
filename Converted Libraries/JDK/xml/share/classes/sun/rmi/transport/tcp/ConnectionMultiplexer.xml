<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport.tcp">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.rmi.server.LogStream"/>
        <import package="sun.rmi.runtime.Log"/>
        <class name="ConnectionMultiplexer" line="6">
            <javadoc line="6">
                ConnectionMultiplexer manages the transparent multiplexing of
                  multiple virtual connections from one endpoint to another through
                  one given real connection to that endpoint.  The input and output
                  streams for the the underlying real connection must be supplied.
                  A callback object is also supplied to be informed of new virtual
                  connections opened by the remote endpoint.  After creation, the
                  run() method must be called in a thread created for demultiplexing
                  the connections.  The openConnection() method is called to
                  initiate a virtual connection from this endpoint.                
                <author>
                    Peter Jones                    
                </author>
            </javadoc>
            <declaration name="logLevel" type="int" line="19"/>
            <javadoc line="19">
                &quot;multiplex&quot; log level                
            </javadoc>
            <method name="getLogLevel" type="String" line="23"/>
            <declaration name="multiplexLog" type="Log" line="26"/>
            <declaration name="OPEN" type="int" line="27"/>
            <javadoc line="27">
                multiplexing protocol operation codes                
            </javadoc>
            <declaration name="CLOSE" type="int" line="31"/>
            <declaration name="CLOSEACK" type="int" line="32"/>
            <declaration name="REQUEST" type="int" line="33"/>
            <declaration name="TRANSMIT" type="int" line="34"/>
            <declaration name="channel" type="TCPChannel" line="35"/>
            <javadoc line="35">
                object to notify for new connections from remote endpoint                
            </javadoc>
            <declaration name="in" type="InputStream" line="39"/>
            <javadoc line="39">
                input stream for underlying single connection                
            </javadoc>
            <declaration name="out" type="OutputStream" line="43"/>
            <javadoc line="43">
                output stream for underlying single connection                
            </javadoc>
            <declaration name="orig" type="boolean" line="47"/>
            <javadoc line="47">
                true if underlying connection originated from this endpoint
                  (used for generating unique connection IDs)                
            </javadoc>
            <declaration name="dataIn" type="DataInputStream" line="52"/>
            <javadoc line="52">
                layered stream for reading formatted data from underlying connection                
            </javadoc>
            <declaration name="dataOut" type="DataOutputStream" line="56"/>
            <javadoc line="56">
                layered stream for writing formatted data to underlying connection                
            </javadoc>
            <declaration name="connectionTable" type="Hashtable" line="60"/>
            <javadoc line="60">
                table holding currently open connection IDs and related info                
            </javadoc>
            <declaration name="numConnections" type="int" line="64"/>
            <javadoc line="64">
                number of currently open connections                
            </javadoc>
            <declaration name="maxConnections" type="int" line="68"/>
            <javadoc line="68">
                maximum allowed open connections                
            </javadoc>
            <declaration name="lastID" type="int" line="72"/>
            <javadoc line="72">
                ID of last connection opened                
            </javadoc>
            <declaration name="alive" type="boolean" line="76"/>
            <javadoc line="76">
                true if this mechanism is still alive                
            </javadoc>
            <javadoc line="80">
                Create a new ConnectionMultiplexer using the given underlying
                  input/output stream pair.  The run method must be called
                  (possibly on a new thread) to handle the demultiplexing.                
                <param>
                    channel object to notify when new connection is received                    
                </param>
                <param>
                    in input stream of underlying connection                    
                </param>
                <param>
                    out output stream of underlying connection                    
                </param>
                <param>
                    orig true if this endpoint intiated the underlying
                      connection (needs to be set differently at both ends)                    
                </param>
            </javadoc>
            <method name="ConnectionMultiplexer" type="constructor" line="90">
                <params>
                    <param name="channel" type="TCPChannel"/>
                    <param name="in" type="InputStream"/>
                    <param name="out" type="OutputStream"/>
                    <param name="orig" type="boolean"/>
                </params>
            </method>
            <javadoc line="98">
                Process multiplexing protocol received from underlying connection.                
            </javadoc>
            <method name="run" type="void" line="101">
                <scope line="102">
                    <declaration name="op" type="int" line="103"/>
                    <declaration name="idObj" type="Integer" line="104"/>
                    <declaration name="info" type="MultiplexConnectionInfo" line="105"/>
                    <scope line="106">
                        <scope line="111"/>
                        <scope line="120"/>
                        <declaration name="conn" type="sun.rmi.transport.Connection" line="124"/>
                        <scope line="130"/>
                        <scope line="139"/>
                        <scope line="146"/>
                        <scope line="155"/>
                        <scope line="166"/>
                        <scope line="177"/>
                    </scope>
                </scope>
                <scope line="187"/>
            </method>
            <javadoc line="191">
                Initiate a new multiplexed connection through the underlying
                  connection.                
            </javadoc>
            <method name="openConnection" type="TCPConnection" line="195">
                <declaration name="id" type="int" line="196"/>
                <declaration name="idObj" type="Integer" line="197"/>
                <scope line="198"/>
                <declaration name="info" type="MultiplexConnectionInfo" line="205"/>
                <scope line="208"/>
                <scope line="214">
                    <scope line="215"/>
                    <scope line="220"/>
                </scope>
            </method>
            <javadoc line="228">
                Shut down all connections and clean up.                
            </javadoc>
            <method name="shutDown" type="void" line="231">
                <scope line="232">
                    <declaration name="enum_" type="Enumeration" line="235"/>
                    <scope line="236">
                        <declaration name="info" type="MultiplexConnectionInfo" line="237"/>
                    </scope>
                </scope>
                <scope line="244"/>
                <scope line="247"/>
                <scope line="249"/>
                <scope line="252"/>
            </method>
            <javadoc line="255">
                Send request for more data on connection to remote endpoint.                
                <param>
                    info connection information structure                    
                </param>
                <param>
                    len number of more bytes that can be received                    
                </param>
            </javadoc>
            <method name="sendRequest" type="void" line="260">
                <params>
                    <param name="info" type="MultiplexConnectionInfo"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="261">
                    <scope line="262"/>
                    <scope line="268"/>
                </scope>
            </method>
            <javadoc line="275">
                Send packet of requested data on connection to remote endpoint.                
                <param>
                    info connection information structure                    
                </param>
                <param>
                    buf array containg bytes to send                    
                </param>
                <param>
                    off offset of first array index of packet                    
                </param>
                <param>
                    len number of bytes in packet to send                    
                </param>
            </javadoc>
            <method name="sendTransmit" type="void" line="282">
                <params>
                    <param name="info" type="MultiplexConnectionInfo"/>
                    <param name="buf" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="283">
                    <scope line="284"/>
                    <scope line="291"/>
                </scope>
            </method>
            <javadoc line="298">
                Inform remote endpoint that connection has been closed.                
                <param>
                    info connection information structure                    
                </param>
            </javadoc>
            <method name="sendClose" type="void" line="302">
                <params>
                    <param name="info" type="MultiplexConnectionInfo"/>
                </params>
                <scope line="304">
                    <scope line="305"/>
                    <scope line="311"/>
                </scope>
            </method>
            <javadoc line="318">
                Acknowledge remote endpoint&apos;s closing of connection.                
                <param>
                    info connection information structure                    
                </param>
            </javadoc>
            <method name="sendCloseAck" type="void" line="322">
                <params>
                    <param name="info" type="MultiplexConnectionInfo"/>
                </params>
                <scope line="323">
                    <scope line="324"/>
                    <scope line="330"/>
                </scope>
            </method>
            <javadoc line="337">
                Shut down connection upon finalization.                
            </javadoc>
            <method name="finalize" type="void" line="340"/>
        </class>
    </source>