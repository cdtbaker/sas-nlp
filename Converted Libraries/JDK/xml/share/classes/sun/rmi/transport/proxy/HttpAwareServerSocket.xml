<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport.proxy">
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.net.ServerSocket"/>
        <import package="java.net.Socket"/>
        <import package="sun.rmi.runtime.Log"/>
        <class name="HttpAwareServerSocket" line="33">
            <extends class="ServerSocket"/>
            <javadoc line="33">
                The HttpAwareServerSocket class extends the java.net.ServerSocket
                  class.  It behaves like a ServerSocket, except that if
                  the first four bytes of an accepted socket are the letters &quot;POST&quot;,
                  then it returns an HttpReceiveSocket instead of a java.net.Socket.
                  This means that the accept method blocks until four bytes have been
                  read from the new socket&apos;s input stream.                
            </javadoc>
            <javadoc line="43">
                Create a server socket on a specified port.                
                <param>
                    port the port                    
                </param>
                <exception>
                    IOException IO error when opening the socket.                    
                </exception>
            </javadoc>
            <method name="HttpAwareServerSocket" type="constructor" line="49">
                <params>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="53">
                Create a server socket, bind it to the specified local port
                  and listen to it.  You can connect to an annonymous port by
                  specifying the port number to be 0.  &lt;i&gt;backlog&lt;/i&gt; specifies
                  how many connection requests the system will queue up while waiting
                  for the ServerSocket to execute accept().                
                <param>
                    port the specified port                    
                </param>
                <param>
                    backlog the number of queued connect requests pending accept                    
                </param>
            </javadoc>
            <method name="HttpAwareServerSocket" type="constructor" line="63">
                <params>
                    <param name="port" type="int"/>
                    <param name="backlog" type="int"/>
                </params>
            </method>
            <javadoc line="67">
                Accept a connection. This method will block until the connection
                  is made and four bytes can be read from the input stream.
                  If the first four bytes are &quot;POST&quot;, then an HttpReceiveSocket is
                  returned, which will handle the HTTP protocol wrapping.
                  Otherwise, a WrappedSocket is returned.  The input stream will be
                  reset to the beginning of the transmission.
                  In either case, a BufferedInputStream will already be on top of
                  the underlying socket&apos;s input stream.                
                <exception>
                    IOException IO error when waiting for the connection.                    
                </exception>
            </javadoc>
            <method name="accept" type="Socket" line="79">
                <declaration name="socket" type="Socket" line="80"/>
                <declaration name="in" type="BufferedInputStream" line="81"/>
                <declaration name="isHttp" type="boolean" line="88"/>
                <scope line="94"/>
            </method>
            <javadoc line="106">
                Return the implementation address and implementation port of
                  the HttpAwareServerSocket as a String.                
            </javadoc>
            <method name="toString" type="String" line="111"/>
        </class>
    </source>