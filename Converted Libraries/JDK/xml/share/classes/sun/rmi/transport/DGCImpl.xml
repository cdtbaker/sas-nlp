<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport">
        <import package="java.rmi.Remote"/>
        <import package="java.rmi.RemoteException"/>
        <import package="java.rmi.dgc.DGC"/>
        <import package="java.rmi.dgc.Lease"/>
        <import package="java.rmi.dgc.VMID"/>
        <import package="java.rmi.server.LogStream"/>
        <import package="java.rmi.server.ObjID"/>
        <import package="java.rmi.server.RemoteServer"/>
        <import package="java.rmi.server.ServerNotActiveException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.concurrent.Future"/>
        <import package="java.util.concurrent.ScheduledExecutorService"/>
        <import package="java.util.concurrent.TimeUnit"/>
        <import package="sun.rmi.runtime.Log"/>
        <import package="sun.rmi.runtime.RuntimeUtil"/>
        <import package="sun.rmi.server.UnicastRef"/>
        <import package="sun.rmi.server.UnicastServerRef"/>
        <import package="sun.rmi.server.Util"/>
        <import package="sun.security.action.GetLongAction"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="DGCImpl" line="30">
            <implements interface="DGC"/>
            <javadoc line="30">
                This class implements the guts of the server-side distributed GC
                  algorithm                
                <author>
                    Ann Wollrath                    
                </author>
            </javadoc>
            <declaration name="dgcLog" type="Log" line="36"/>
            <declaration name="leaseValue" type="long" line="37"/>
            <javadoc line="37">
                lease duration to grant to clients                
            </javadoc>
            <declaration name="leaseCheckInterval" type="long" line="41"/>
            <javadoc line="41">
                lease check interval; default is half of lease grant duration                
            </javadoc>
            <declaration name="scheduler" type="ScheduledExecutorService" line="45"/>
            <javadoc line="45">
                thread pool for scheduling delayed tasks                
            </javadoc>
            <declaration name="dgc" type="DGCImpl" line="49"/>
            <javadoc line="49">
                remote implementation of DGC interface for this VM                
            </javadoc>
            <declaration name="leaseTable" type="Map&amp;lt;VMID,LeaseInfo&amp;gt;" line="53"/>
            <javadoc line="53">
                table that maps VMID to LeaseInfo                
            </javadoc>
            <declaration name="checker" type="Future&amp;lt;?&amp;gt;" line="57"/>
            <javadoc line="57">
                checks for lease expiration                
            </javadoc>
            <javadoc line="61">
                Return the remote implementation of the DGC interface for
                  this VM.                
            </javadoc>
            <method name="getDGCImpl" type="DGCImpl" line="65"/>
            <javadoc line="68">
                Construct a new server-side remote object collector at
                  a particular port. Disallow construction from outside.                
            </javadoc>
            <method name="DGCImpl" type="constructor" line="72"/>
            <javadoc line="74">
                The dirty call adds the VMID &quot;vmid&quot; to the set of clients
                  that hold references to the object associated with the ObjID
                  id.  The long &quot;sequenceNum&quot; is used to detect late dirty calls.  If
                  the VMID &quot;vmid&quot; is null, a VMID will be generated on the
                  server (for use by the client in subsequent calls) and
                  returned.
                  The client must call the &quot;dirty&quot; method to renew the lease
                  before the &quot;lease&quot; time expires or all references to remote
                  objects in this VM that the client holds are considered
                  &quot;unreferenced&quot;.                
            </javadoc>
            <method name="dirty" type="Lease" line="86">
                <params>
                    <param name="ids" type="ObjID[]"/>
                    <param name="sequenceNum" type="long"/>
                    <param name="lease" type="Lease"/>
                </params>
                <declaration name="vmid" type="VMID" line="87"/>
                <declaration name="duration" type="long" line="88"/>
                <scope line="89"/>
                <scope line="92">
                    <scope line="94">
                        <declaration name="clientHost" type="String" line="95"/>
                        <scope line="96"/>
                        <scope line="99"/>
                    </scope>
                </scope>
                <scope line="106">
                    <declaration name="info" type="LeaseInfo" line="107"/>
                    <scope line="108">
                        <scope line="110">
                            <anonymous_class line="111">
                                <method name="run" type="void" line="112"/>
                            </anonymous_class>
                        </scope>
                    </scope>
                    <scope line="119"/>
                </scope>
                <scope line="123">
                    <scope line="124"/>
                </scope>
            </method>
            <javadoc line="131">
                The clean call removes the VMID from the set of clients
                  that hold references to the object associated with the LiveRef
                  ref.  The sequence number is used to detect late clean calls.  If the
                  argument &quot;strong&quot; is true, then the clean call is a result of a
                  failed &quot;dirty&quot; call, thus the sequence number for the VMID needs
                  to be remembered until the client goes away.                
            </javadoc>
            <method name="clean" type="void" line="139">
                <params>
                    <param name="ids" type="ObjID[]"/>
                    <param name="sequenceNum" type="long"/>
                    <param name="vmid" type="VMID"/>
                    <param name="strong" type="boolean"/>
                </params>
                <scope line="140">
                    <scope line="141"/>
                </scope>
            </method>
            <javadoc line="147">
                Register interest in receiving a callback when this VMID
                  becomes inaccessible.                
            </javadoc>
            <method name="registerTarget" type="void" line="151">
                <params>
                    <param name="vmid" type="VMID"/>
                    <param name="target" type="Target"/>
                </params>
                <scope line="152">
                    <declaration name="info" type="LeaseInfo" line="153"/>
                    <scope line="154"/>
                    <scope line="157"/>
                </scope>
            </method>
            <javadoc line="162">
                Remove notification request.                
            </javadoc>
            <method name="unregisterTarget" type="void" line="165">
                <params>
                    <param name="vmid" type="VMID"/>
                    <param name="target" type="Target"/>
                </params>
                <scope line="166">
                    <declaration name="info" type="LeaseInfo" line="167"/>
                    <scope line="168"/>
                </scope>
            </method>
            <javadoc line="173">
                Check if leases have expired.  If a lease has expired, remove
                  it from the table and notify all interested parties that the
                  VMID is essentially &quot;dead&quot;.                
                <return>
                    if true, there are leases outstanding; otherwise leases
                      no longer need to be checked                    
                </return>
            </javadoc>
            <method name="checkLeases" type="void" line="180">
                <declaration name="time" type="long" line="181"/>
                <declaration name="toUnregister" type="List&amp;lt;LeaseInfo&amp;gt;" line="182"/>
                <scope line="183">
                    <declaration name="iter" type="Iterator&amp;lt;LeaseInfo&amp;gt;" line="184"/>
                    <scope line="185">
                        <declaration name="info" type="LeaseInfo" line="186"/>
                        <scope line="187"/>
                    </scope>
                    <scope line="192"/>
                </scope>
                <scope line="197">
                    <scope line="198"/>
                </scope>
            </method>
            <scope line="203">
                <anonymous_class line="204">
                    <method name="run" type="Void" line="205">
                        <declaration name="savedCcl" type="ClassLoader" line="206"/>
                        <scope line="207">
                            <scope line="209">
                                <declaration name="dgcID" type="ObjID" line="211"/>
                                <declaration name="ref" type="LiveRef" line="212"/>
                                <declaration name="disp" type="UnicastServerRef" line="213"/>
                                <declaration name="stub" type="Remote" line="214"/>
                                <declaration name="target" type="Target" line="216"/>
                            </scope>
                            <scope line="219"/>
                        </scope>
                        <scope line="223"/>
                    </method>
                </anonymous_class>
            </scope>
            <class name="LeaseInfo" line="231">
                <declaration name="vmid" type="VMID" line="232"/>
                <declaration name="expiration" type="long" line="233"/>
                <declaration name="notifySet" type="Set&amp;lt;Target&amp;gt;" line="234"/>
                <method name="LeaseInfo" type="constructor" line="235">
                    <params>
                        <param name="vmid" type="VMID"/>
                        <param name="lease" type="long"/>
                    </params>
                </method>
                <method name="renew" type="void" line="239">
                    <params>
                        <param name="lease" type="long"/>
                    </params>
                    <declaration name="newExpiration" type="long" line="240"/>
                </method>
                <method name="expired" type="boolean" line="243">
                    <params>
                        <param name="time" type="long"/>
                    </params>
                    <scope line="244">
                        <scope line="245"/>
                    </scope>
                    <scope line="250"/>
                </method>
            </class>
        </class>
    </source>