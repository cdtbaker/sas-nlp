<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport">
        <import package="java.lang.ref.PhantomReference"/>
        <import package="java.lang.ref.ReferenceQueue"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.rmi.ConnectException"/>
        <import package="java.rmi.RemoteException"/>
        <import package="java.rmi.dgc.DGC"/>
        <import package="java.rmi.dgc.Lease"/>
        <import package="java.rmi.dgc.VMID"/>
        <import package="java.rmi.server.ObjID"/>
        <import package="sun.misc.GC"/>
        <import package="sun.rmi.runtime.NewThreadAction"/>
        <import package="sun.rmi.server.UnicastRef"/>
        <import package="sun.rmi.server.Util"/>
        <import package="sun.security.action.GetLongAction"/>
        <class name="DGCClient" line="23">
            <javadoc line="23">
                DGCClient implements the client-side of the RMI distributed garbage
                  collection system.
                  The external interface to DGCClient is the &quot;registerRefs&quot; method.
                  When a LiveRef to a remote object enters the VM, it needs to be
                  registered with the DGCClient to participate in distributed garbage
                  collection.
                  When the first LiveRef to a particular remote object is registered,
                  a &quot;dirty&quot; call is made to the server-side distributed garbage
                  collector for the remote object, which returns a lease guaranteeing
                  that the server-side DGC will not collect the remote object for a
                  certain period of time.  While LiveRef instances to remote objects
                  on a particular server exist, the DGCClient periodically sends more
                  &quot;dirty&quot; calls to renew its lease.
                  The DGCClient tracks the local reachability of registered LiveRef
                  instances (using phantom references).  When the LiveRef instance
                  for a particular remote object becomes garbage collected locally,
                  a &quot;clean&quot; call is made to the server-side distributed garbage
                  collector, indicating that the server no longer needs to keep the
                  remote object alive for this client.                
                <see>
                    java.rmi.dgc.DGC, sun.rmi.transport.DGCImpl                    
                </see>
                <author>
                    Ann Wollrath                    
                </author>
                <author>
                    Peter Jones                    
                </author>
            </javadoc>
            <declaration name="nextSequenceNum" type="long" line="48"/>
            <javadoc line="48">
                next sequence number for DGC calls (access synchronized on class)                
            </javadoc>
            <declaration name="vmid" type="VMID" line="52"/>
            <javadoc line="52">
                unique identifier for this VM as a client of DGC                
            </javadoc>
            <declaration name="leaseValue" type="long" line="56"/>
            <javadoc line="56">
                lease duration to request (usually ignored by server)                
            </javadoc>
            <declaration name="cleanInterval" type="long" line="60"/>
            <javadoc line="60">
                maximum interval between retries of failed clean calls                
            </javadoc>
            <declaration name="gcInterval" type="long" line="64"/>
            <javadoc line="64">
                maximum interval between complete garbage collections of local heap                
            </javadoc>
            <declaration name="dirtyFailureRetries" type="int" line="68"/>
            <javadoc line="68">
                minimum retry count for dirty calls that fail                
            </javadoc>
            <declaration name="cleanFailureRetries" type="int" line="72"/>
            <javadoc line="72">
                retry count for clean calls that fail with ConnectException                
            </javadoc>
            <declaration name="emptyObjIDArray" type="ObjID[]" line="76"/>
            <javadoc line="76">
                constant empty ObjID array for lease renewal optimization                
            </javadoc>
            <declaration name="dgcID" type="ObjID" line="80"/>
            <javadoc line="80">
                ObjID for server-side DGC object                
            </javadoc>
            <method name="DGCClient" type="constructor" line="84"/>
            <javadoc line="86">
                Register the LiveRef instances in the supplied list to participate
                  in distributed garbage collection.
                  All of the LiveRefs in the list must be for remote objects at the
                  given endpoint.                
            </javadoc>
            <method name="registerRefs" type="void" line="92">
                <params>
                    <param name="ep" type="Endpoint"/>
                    <param name="refs" type="List"/>
                </params>
                <declaration name="epEntry" type="EndpointEntry" line="93"/>
                <scope line="94"/>
            </method>
            <javadoc line="99">
                Get the next sequence number to be used for a dirty or clean
                  operation from this VM.  This method should only be called while
                  synchronized on the EndpointEntry whose data structures the
                  operation affects.                
            </javadoc>
            <method name="getNextSequenceNum" type="long" line="105"/>
            <javadoc line="108">
                Given the length of a lease and the time that it was granted,
                  compute the absolute time at which it should be renewed, giving
                  room for reasonable computational and communication delays.                
            </javadoc>
            <method name="computeRenewTime" type="long" line="113">
                <params>
                    <param name="grantTime" type="long"/>
                    <param name="duration" type="long"/>
                </params>
            </method>
            <class name="EndpointEntry" line="116">
                <javadoc line="116">
                    EndpointEntry encapsulates the client-side DGC information specific
                      to a particular Endpoint.  Of most significance is the table that
                      maps LiveRef value to RefEntry objects and the renew/clean thread
                      that handles asynchronous client-side DGC operations.                    
                </javadoc>
                <declaration name="endpoint" type="Endpoint" line="123"/>
                <javadoc line="123">
                    the endpoint that this entry is for                    
                </javadoc>
                <declaration name="dgc" type="DGC" line="127"/>
                <javadoc line="127">
                    synthesized reference to the remote server-side DGC                    
                </javadoc>
                <declaration name="refTable" type="Map" line="131"/>
                <javadoc line="131">
                    table of refs held for endpoint: maps LiveRef to RefEntry                    
                </javadoc>
                <declaration name="invalidRefs" type="Set" line="135"/>
                <javadoc line="135">
                    set of RefEntry instances from last (failed) dirty call                    
                </javadoc>
                <declaration name="removed" type="boolean" line="139"/>
                <javadoc line="139">
                    true if this entry has been removed from the global table                    
                </javadoc>
                <declaration name="renewTime" type="long" line="143"/>
                <javadoc line="143">
                    absolute time to renew current lease to this endpoint                    
                </javadoc>
                <declaration name="expirationTime" type="long" line="147"/>
                <javadoc line="147">
                    absolute time current lease to this endpoint will expire                    
                </javadoc>
                <declaration name="dirtyFailures" type="int" line="151"/>
                <javadoc line="151">
                    count of recent dirty calls that have failed                    
                </javadoc>
                <declaration name="dirtyFailureStartTime" type="long" line="155"/>
                <javadoc line="155">
                    absolute time of first recent failed dirty call                    
                </javadoc>
                <declaration name="dirtyFailureDuration" type="long" line="159"/>
                <javadoc line="159">
                    (average) elapsed time for recent failed dirty calls                    
                </javadoc>
                <declaration name="renewCleanThread" type="Thread" line="163"/>
                <javadoc line="163">
                    renew/clean thread for handling lease renewals and clean calls                    
                </javadoc>
                <declaration name="interruptible" type="boolean" line="167"/>
                <javadoc line="167">
                    true if renew/clean thread may be interrupted                    
                </javadoc>
                <declaration name="refQueue" type="ReferenceQueue" line="171"/>
                <javadoc line="171">
                    reference queue for phantom references                    
                </javadoc>
                <declaration name="pendingCleans" type="Set" line="175"/>
                <javadoc line="175">
                    set of clean calls that need to be made                    
                </javadoc>
                <declaration name="endpointTable" type="Map" line="179"/>
                <javadoc line="179">
                    global endpoint table: maps Endpoint to EndpointEntry                    
                </javadoc>
                <declaration name="gcLatencyRequest" type="GC.LatencyRequest" line="183"/>
                <javadoc line="183">
                    handle for GC latency request (for future cancellation)                    
                </javadoc>
                <javadoc line="187">
                    Look up the EndpointEntry for the given Endpoint.  An entry is
                      created if one does not already exist.                    
                </javadoc>
                <method name="lookup" type="EndpointEntry" line="191">
                    <params>
                        <param name="ep" type="Endpoint"/>
                    </params>
                    <scope line="192">
                        <declaration name="entry" type="EndpointEntry" line="193"/>
                        <scope line="194">
                            <scope line="197"/>
                        </scope>
                    </scope>
                </method>
                <method name="EndpointEntry" type="constructor" line="204">
                    <params>
                        <param name="endpoint" type="Endpoint"/>
                    </params>
                    <scope line="206">
                        <declaration name="dgcRef" type="LiveRef" line="207"/>
                    </scope>
                    <scope line="210"/>
                </method>
                <javadoc line="216">
                    Register the LiveRef instances in the supplied list to participate
                      in distributed garbage collection.
                      This method returns false if this entry was removed from the
                      global endpoint table (because it was empty) before these refs
                      could be registered.  In that case, a new EndpointEntry needs
                      to be looked up.
                      This method must NOT be called while synchronized on this entry.                    
                </javadoc>
                <method name="registerRefs" type="boolean" line="225">
                    <params>
                        <param name="refs" type="List"/>
                    </params>
                </method>
                <javadoc line="259">
                    Remove the given RefEntry from the ref table.  If that makes
                      the ref table empty, remove this entry from the global endpoint
                      table.
                      This method must ONLY be called while synchronized on this entry.                    
                </javadoc>
                <method name="removeRefEntry" type="void" line="265">
                    <params>
                        <param name="refEntry" type="RefEntry"/>
                    </params>
                </method>
                <javadoc line="285">
                    Make a DGC dirty call to this entry&apos;s endpoint, for the ObjIDs
                      corresponding to the given set of refs and with the given
                      sequence number.
                      This method must NOT be called while synchronized on this entry.                    
                </javadoc>
                <method name="makeDirtyCall" type="void" line="291">
                    <params>
                        <param name="refEntries" type="Set"/>
                        <param name="sequenceNum" type="long"/>
                    </params>
                </method>
                <javadoc line="348">
                    Set the absolute time at which the lease for this entry should
                      be renewed.
                      This method must ONLY be called while synchronized on this entry.                    
                </javadoc>
                <method name="setRenewTime" type="void" line="353">
                    <params>
                        <param name="newRenewTime" type="long"/>
                    </params>
                </method>
                <class name="RenewCleanThread" line="371">
                    <implements interface="Runnable"/>
                    <javadoc line="371">
                        RenewCleanThread handles the asynchronous client-side DGC activity
                          for this entry: renewing the leases and making clean calls.                        
                    </javadoc>
                    <method name="run" type="void" line="376">
                        <scope line="377">
                            <declaration name="timeToWait" type="long" line="378"/>
                            <declaration name="phantom" type="RefEntry.PhantomLiveRef" line="379"/>
                            <declaration name="needRenewal" type="boolean" line="380"/>
                            <declaration name="refsToDirty" type="Set" line="381"/>
                            <declaration name="sequenceNum" type="long" line="382"/>
                            <scope line="383">
                                <declaration name="timeUntilRenew" type="long" line="384"/>
                                <scope line="386"/>
                            </scope>
                            <scope line="391"/>
                            <scope line="394"/>
                            <scope line="396">
                                <scope line="399"/>
                                <declaration name="currentTime" type="long" line="402"/>
                                <scope line="403">
                                    <scope line="405"/>
                                </scope>
                            </scope>
                            <scope line="412"/>
                            <scope line="415"/>
                        </scope>
                    </method>
                </class>
                <javadoc line="422">
                    Process the notification of the given phantom reference and any
                      others that are on this entry&apos;s reference queue.  Each phantom
                      reference is removed from its RefEntry&apos;s ref set.  All ref
                      entries that have no more registered instances are collected
                      into up to two batched clean call requests: one for refs
                      requiring a &quot;strong&quot; clean call, and one for the rest.
                      This method must ONLY be called while synchronized on this entry.                    
                </javadoc>
                <method name="processPhantomRefs" type="void" line="431">
                    <params>
                        <param name="phantom" type="RefEntry.PhantomLiveRef"/>
                    </params>
                </method>
                <class name="CleanRequest" line="462">
                    <javadoc line="462">
                        CleanRequest holds the data for the parameters of a clean call
                          that needs to be made.                        
                    </javadoc>
                    <declaration name="objIDs" type="ObjID[]" line="467"/>
                    <declaration name="sequenceNum" type="long" line="468"/>
                    <declaration name="strong" type="boolean" line="469"/>
                    <declaration name="failures" type="int" line="470"/>
                    <javadoc line="470">
                        how many times this request has failed                        
                    </javadoc>
                    <method name="CleanRequest" type="constructor" line="474">
                        <params>
                            <param name="objIDs" type="ObjID[]"/>
                            <param name="sequenceNum" type="long"/>
                            <param name="strong" type="boolean"/>
                        </params>
                    </method>
                </class>
                <javadoc line="480">
                    Make all of the clean calls described by the clean requests in
                      this entry&apos;s set of &quot;pending cleans&quot;.  Clean requests for clean
                      calls that succeed are removed from the &quot;pending cleans&quot; set.
                      This method must NOT be called while synchronized on this entry.                    
                </javadoc>
                <method name="makeCleanCalls" type="void" line="486"/>
                <javadoc line="502">
                    Create an array of ObjIDs (needed for the DGC remote calls)
                      from the ids in the given set of refs.                    
                </javadoc>
                <method name="createObjIDArray" type="ObjID[]" line="506">
                    <params>
                        <param name="refEntries" type="Set"/>
                    </params>
                    <declaration name="ids" type="ObjID[]" line="507"/>
                    <declaration name="iter" type="Iterator" line="508"/>
                    <scope line="509"/>
                </method>
                <class name="RefEntry" line="514">
                    <javadoc line="514">
                        RefEntry encapsulates the client-side DGC information specific
                          to a particular LiveRef value.  In particular, it contains a
                          set of phantom references to all of the instances of the LiveRef
                          value registered in the system (but not garbage collected
                          locally).                        
                    </javadoc>
                    <declaration name="ref" type="LiveRef" line="522"/>
                    <javadoc line="522">
                        LiveRef value for this entry (not a registered instance)                        
                    </javadoc>
                    <declaration name="refSet" type="Set" line="526"/>
                    <javadoc line="526">
                        set of phantom references to registered instances                        
                    </javadoc>
                    <declaration name="dirtyFailed" type="boolean" line="530"/>
                    <javadoc line="530">
                        true if a dirty call containing this ref has failed                        
                    </javadoc>
                    <method name="RefEntry" type="constructor" line="534">
                        <params>
                            <param name="ref" type="LiveRef"/>
                        </params>
                    </method>
                    <javadoc line="537">
                        Return the LiveRef value for this entry (not a registered
                          instance).                        
                    </javadoc>
                    <method name="getRef" type="LiveRef" line="541"/>
                    <javadoc line="544">
                        Add a LiveRef to the set of registered instances for this entry.
                          This method must ONLY be invoked while synchronized on this
                          RefEntry&apos;s EndpointEntry.                        
                    </javadoc>
                    <method name="addInstanceToRefSet" type="void" line="549">
                        <params>
                            <param name="ref" type="LiveRef"/>
                        </params>
                    </method>
                    <javadoc line="554">
                        Remove a PhantomLiveRef from the set of registered instances.
                          This method must ONLY be invoked while synchronized on this
                          RefEntry&apos;s EndpointEntry.                        
                    </javadoc>
                    <method name="removeInstanceFromRefSet" type="void" line="559">
                        <params>
                            <param name="phantom" type="PhantomLiveRef"/>
                        </params>
                    </method>
                    <javadoc line="564">
                        Return true if there are no registered LiveRef instances for
                          this entry still reachable in this VM.
                          This method must ONLY be invoked while synchronized on this
                          RefEntry&apos;s EndpointEntry.                        
                    </javadoc>
                    <method name="isRefSetEmpty" type="boolean" line="570"/>
                    <javadoc line="574">
                        Record that a dirty call that explicitly contained this
                          entry&apos;s ref has failed.
                          This method must ONLY be invoked while synchronized on this
                          RefEntry&apos;s EndpointEntry.                        
                    </javadoc>
                    <method name="markDirtyFailed" type="void" line="580"/>
                    <javadoc line="584">
                        Return true if a dirty call that explicitly contained this
                          entry&apos;s ref has failed (and therefore a clean call for this
                          ref needs to be marked &quot;strong&quot;).
                          This method must ONLY be invoked while synchronized on this
                          RefEntry&apos;s EndpointEntry.                        
                    </javadoc>
                    <method name="hasDirtyFailed" type="boolean" line="591"/>
                    <class name="PhantomLiveRef" line="595">
                        <extends class="PhantomReference"/>
                        <javadoc line="595">
                            PhantomLiveRef is a PhantomReference to a LiveRef instance,
                              used to detect when the LiveRef becomes permanently
                              unreachable in this VM.                            
                        </javadoc>
                        <method name="PhantomLiveRef" type="constructor" line="601">
                            <params>
                                <param name="ref" type="LiveRef"/>
                            </params>
                        </method>
                        <method name="getRefEntry" type="RefEntry" line="604"/>
                    </class>
                </class>
            </class>
        </class>
    </source>