<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport.tcp">
        <import package="java.io"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.Socket"/>
        <import package="java.net.SocketException"/>
        <import package="java.rmi"/>
        <import package="java.rmi.server.RMISocketFactory"/>
        <import package="sun.rmi.runtime.Log"/>
        <import package="sun.rmi.transport"/>
        <import package="sun.rmi.transport.proxy"/>
        <class name="TCPConnection" line="11">
            <implements interface="Connection"/>
            <declaration name="socket" type="Socket" line="12"/>
            <declaration name="channel" type="Channel" line="13"/>
            <declaration name="in" type="InputStream" line="14"/>
            <declaration name="out" type="OutputStream" line="15"/>
            <declaration name="expiration" type="long" line="16"/>
            <declaration name="lastuse" type="long" line="17"/>
            <declaration name="roundtrip" type="long" line="18"/>
            <javadoc line="19">
                Constructor used for creating a connection to accept call
                  (an input connection)                
            </javadoc>
            <method name="TCPConnection" type="constructor" line="23">
                <params>
                    <param name="ch" type="TCPChannel"/>
                    <param name="s" type="Socket"/>
                    <param name="in" type="InputStream"/>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="29">
                Constructor used by subclass when underlying input and output streams
                  are already available.                
            </javadoc>
            <method name="TCPConnection" type="constructor" line="33">
                <params>
                    <param name="ch" type="TCPChannel"/>
                    <param name="in" type="InputStream"/>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="36">
                Constructor used when socket is available, but not underlying
                  streams.                
            </javadoc>
            <method name="TCPConnection" type="constructor" line="40">
                <params>
                    <param name="ch" type="TCPChannel"/>
                    <param name="s" type="Socket"/>
                </params>
            </method>
            <javadoc line="43">
                Gets the output stream for this connection                
            </javadoc>
            <method name="getOutputStream" type="OutputStream" line="46"/>
            <javadoc line="50">
                Release the output stream for this connection.                
            </javadoc>
            <method name="releaseOutputStream" type="void" line="53"/>
            <javadoc line="56">
                Gets the input stream for this connection.                
            </javadoc>
            <method name="getInputStream" type="InputStream" line="59"/>
            <javadoc line="63">
                Release the input stream for this connection.                
            </javadoc>
            <method name="releaseInputStream" type="void" line="66"/>
            <javadoc line="68">
                Determine if this connection can be used for multiple operations.
                  If the socket implements RMISocketInfo, then we can query it about
                  this; otherwise, assume that it does provide a full-duplex
                  persistent connection like java.net.Socket.                
            </javadoc>
            <method name="isReusable" type="boolean" line="74"/>
            <javadoc line="78">
                Set the expiration time of this connection.                
                <param>
                    time The time at which the time out expires.                    
                </param>
            </javadoc>
            <method name="setExpiration" type="void" line="82">
                <params>
                    <param name="time" type="long"/>
                </params>
            </method>
            <javadoc line="85">
                Set the timestamp at which this connection was last used successfully.
                  The connection will be pinged for liveness if reused long after
                  this time.                
                <param>
                    time The time at which the connection was last active.                    
                </param>
            </javadoc>
            <method name="setLastUseTime" type="void" line="91">
                <params>
                    <param name="time" type="long"/>
                </params>
            </method>
            <javadoc line="94">
                Returns true if the timeout has expired on this connection;
                  otherwise returns false.                
                <param>
                    time The current time.                    
                </param>
            </javadoc>
            <method name="expired" type="boolean" line="99">
                <params>
                    <param name="time" type="long"/>
                </params>
            </method>
            <javadoc line="102">
                Probes the connection to see if it still alive and connected to
                  a responsive server.  If the connection has been idle for too
                  long, the server is pinged.  ``Too long&apos;&apos; means ``longer than the
                  last ping round-trip time&apos;&apos;.
                  &lt;P&gt;
                  This method may misdiagnose a dead connection as live, but it
                  will never misdiagnose a live connection as dead.                
                <return>
                    true if the connection and server are recently alive                    
                </return>
            </javadoc>
            <method name="isDead" type="boolean" line="112">
                <declaration name="i" type="InputStream" line="113"/>
                <declaration name="o" type="OutputStream" line="114"/>
                <declaration name="start" type="long" line="115"/>
                <scope line="117"/>
                <scope line="121"/>
                <declaration name="response" type="int" line="124"/>
                <scope line="125"/>
                <scope line="130"/>
                <scope line="135"/>
                <scope line="139"/>
            </method>
            <javadoc line="144">
                Close the connection.                
            </javadoc>
            <method name="close" type="void" line="147">
                <scope line="150"/>
            </method>
            <javadoc line="155">
                Returns the channel for this connection.                
            </javadoc>
            <method name="getChannel" type="Channel" line="158"/>
        </class>
    </source>