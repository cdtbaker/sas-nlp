<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport.tcp">
        <import package="java.io"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.Socket"/>
        <import package="java.net.SocketException"/>
        <import package="java.rmi"/>
        <import package="java.rmi.server.RMISocketFactory"/>
        <import package="sun.rmi.runtime.Log"/>
        <import package="sun.rmi.transport"/>
        <import package="sun.rmi.transport.proxy"/>
        <class name="TCPConnection" line="38">
            <comment line="47">
                round-trip time for ping                
            </comment>
            <implements interface="Connection"/>
            <declaration name="socket" type="Socket" line="40"/>
            <declaration name="channel" type="Channel" line="41"/>
            <declaration name="in" type="InputStream" line="42"/>
            <declaration name="out" type="OutputStream" line="43"/>
            <declaration name="expiration" type="long" line="44"/>
            <declaration name="lastuse" type="long" line="45"/>
            <declaration name="roundtrip" type="long" line="46"/>
            <javadoc line="48">
                Constructor used for creating a connection to accept call
                  (an input connection)                
            </javadoc>
            <method name="TCPConnection" type="constructor" line="53">
                <params>
                    <param name="ch" type="TCPChannel"/>
                    <param name="s" type="Socket"/>
                    <param name="in" type="InputStream"/>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="60">
                Constructor used by subclass when underlying input and output streams
                  are already available.                
            </javadoc>
            <method name="TCPConnection" type="constructor" line="65">
                <params>
                    <param name="ch" type="TCPChannel"/>
                    <param name="in" type="InputStream"/>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="69">
                Constructor used when socket is available, but not underlying
                  streams.                
            </javadoc>
            <method name="TCPConnection" type="constructor" line="74">
                <params>
                    <param name="ch" type="TCPChannel"/>
                    <param name="s" type="Socket"/>
                </params>
            </method>
            <javadoc line="78">
                Gets the output stream for this connection                
            </javadoc>
            <method name="getOutputStream" type="OutputStream" line="82"/>
            <javadoc line="88">
                Release the output stream for this connection.                
            </javadoc>
            <method name="releaseOutputStream" type="void" line="92"/>
            <javadoc line="97">
                Gets the input stream for this connection.                
            </javadoc>
            <method name="getInputStream" type="InputStream" line="101"/>
            <javadoc line="108">
                Release the input stream for this connection.                
            </javadoc>
            <method name="releaseInputStream" type="void" line="112"/>
            <javadoc line="115">
                Determine if this connection can be used for multiple operations.
                  If the socket implements RMISocketInfo, then we can query it about
                  this; otherwise, assume that it does provide a full-duplex
                  persistent connection like java.net.Socket.                
            </javadoc>
            <method name="isReusable" type="boolean" line="122"/>
            <javadoc line="129">
                Set the expiration time of this connection.                
                <param>
                    time The time at which the time out expires.                    
                </param>
            </javadoc>
            <method name="setExpiration" type="void" line="134">
                <params>
                    <param name="time" type="long"/>
                </params>
            </method>
            <javadoc line="138">
                Set the timestamp at which this connection was last used successfully.
                  The connection will be pinged for liveness if reused long after
                  this time.                
                <param>
                    time The time at which the connection was last active.                    
                </param>
            </javadoc>
            <method name="setLastUseTime" type="void" line="145">
                <params>
                    <param name="time" type="long"/>
                </params>
            </method>
            <javadoc line="149">
                Returns true if the timeout has expired on this connection;
                  otherwise returns false.                
                <param>
                    time The current time.                    
                </param>
            </javadoc>
            <method name="expired" type="boolean" line="155">
                <params>
                    <param name="time" type="long"/>
                </params>
            </method>
            <javadoc line="159">
                Probes the connection to see if it still alive and connected to
                  a responsive server.  If the connection has been idle for too
                  long, the server is pinged.  ``Too long&apos;&apos; means ``longer than the
                  last ping round-trip time&apos;&apos;.
                  &lt;P&gt;
                  This method may misdiagnose a dead connection as live, but it
                  will never misdiagnose a live connection as dead.                
                <return>
                    true if the connection and server are recently alive                    
                </return>
            </javadoc>
            <method name="isDead" type="boolean" line="170">
                <comment line="174">
                    skip ping if recently used within 1 RTT                    
                </comment>
                <comment line="177">
                    still alive and warm                    
                </comment>
                <comment line="179">
                    Get the streams                    
                </comment>
                <comment line="184">
                    can&apos;t even get a stream, must be very dead                    
                </comment>
                <comment line="187">
                    Write the ping byte and read the reply byte                    
                </comment>
                <comment line="197">
                    server failed the ping test                    
                </comment>
                <comment line="201">
                    save most recent RTT for future use                    
                </comment>
                <comment line="203">
                    clock-correction may make roundtrip &lt; 0; doesn&apos;t matter                    
                </comment>
                <comment line="204">
                    it&apos;s alive and 5-by-5                    
                </comment>
                <declaration name="i" type="InputStream" line="171"/>
                <declaration name="o" type="OutputStream" line="172"/>
                <declaration name="start" type="long" line="175"/>
                <scope line="180"/>
                <scope line="183"/>
                <declaration name="response" type="int" line="188"/>
                <scope line="189"/>
                <scope line="193"/>
                <scope line="200"/>
                <scope line="207"/>
            </method>
            <javadoc line="215">
                Close the connection.                
            </javadoc>
            <method name="close" type="void" line="218">
                <scope line="223"/>
            </method>
            <javadoc line="229">
                Returns the channel for this connection.                
            </javadoc>
            <method name="getChannel" type="Channel" line="233"/>
        </class>
    </source>