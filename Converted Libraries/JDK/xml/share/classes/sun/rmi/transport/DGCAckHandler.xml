<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport">
        <import package="java.rmi.server.UID"/>
        <import package="java.security.AccessController"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.concurrent.Future"/>
        <import package="java.util.concurrent.ScheduledExecutorService"/>
        <import package="java.util.concurrent.TimeUnit"/>
        <import package="sun.rmi.runtime.RuntimeUtil"/>
        <import package="sun.security.action.GetLongAction"/>
        <class name="DGCAckHandler" line="14">
            <javadoc line="14">
                Holds strong references to a set of remote objects, or live remote
                  references to remote objects, after they have been marshalled (as
                  remote references) as parts of the arguments or the result of a
                  remote invocation.  The purpose is to prevent remote objects or
                  live remote references that might otherwise be determined to be
                  unreachable in this VM from being locally garbage collected before
                  the receiver has had an opportunity to register the unmarshalled
                  remote references for DGC.
                  The references are held strongly until an acknowledgment has been
                  received that the receiver has had an opportunity to process the
                  remote references or until a timeout has expired.  For remote
                  references sent as parts of the arguments of a remote invocation,
                  the acknowledgment is the beginning of the response indicating
                  completion of the remote invocation.  For remote references sent as
                  parts of the result of a remote invocation, a UID is included as
                  part of the result, and the acknowledgment is a transport-level
                  &quot;DGCAck&quot; message containing that UID.                
                <author>
                    Ann Wollrath                    
                </author>
                <author>
                    Peter Jones                    
                </author>
            </javadoc>
            <declaration name="dgcAckTimeout" type="long" line="36"/>
            <javadoc line="36">
                timeout for holding references without receiving an acknowledgment                
            </javadoc>
            <declaration name="scheduler" type="ScheduledExecutorService" line="40"/>
            <javadoc line="40">
                thread pool for scheduling delayed tasks                
            </javadoc>
            <declaration name="idTable" type="Map&amp;lt;UID,DGCAckHandler&amp;gt;" line="44"/>
            <javadoc line="44">
                table mapping ack ID to handler                
            </javadoc>
            <declaration name="id" type="UID" line="48"/>
            <declaration name="objList" type="List&amp;lt;Object&amp;gt;" line="49"/>
            <declaration name="task" type="Future&amp;lt;?&amp;gt;" line="50"/>
            <javadoc line="51">
                Creates a new DGCAckHandler, associated with the specified UID
                  if the argument is not null.
                  References added to this DGCAckHandler will be held strongly
                  until its &quot;release&quot; method is invoked or (after the
                  &quot;startTimer&quot; method has been invoked) the timeout has expired.
                  If the argument is not null, then invoking the static
                  &quot;received&quot; method with the specified UID is equivalent to
                  invoking this instance&apos;s &quot;release&quot; method.                
            </javadoc>
            <method name="DGCAckHandler" type="constructor" line="61">
                <params>
                    <param name="id" type="UID"/>
                </params>
            </method>
            <javadoc line="68">
                Adds the specified reference to this DGCAckHandler.                
            </javadoc>
            <method name="add" type="void" line="71">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="72"/>
            </method>
            <javadoc line="76">
                Starts the timer for this DGCAckHandler.  After the timeout has
                  expired, the references are released even if the acknowledgment
                  has not been received.                
            </javadoc>
            <method name="startTimer" type="void" line="81">
                <scope line="82">
                    <anonymous_class line="83">
                        <method name="run" type="void" line="84"/>
                    </anonymous_class>
                </scope>
            </method>
            <javadoc line="91">
                Releases the references held by this DGCAckHandler.                
            </javadoc>
            <method name="release" type="void" line="94">
                <scope line="95"/>
            </method>
            <javadoc line="101">
                Causes the DGCAckHandler associated with the specified UID to
                  release its references.                
            </javadoc>
            <method name="received" type="void" line="105">
                <params>
                    <param name="id" type="UID"/>
                </params>
                <declaration name="h" type="DGCAckHandler" line="106"/>
                <scope line="107"/>
            </method>
        </class>
    </source>