<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport.tcp">
        <import package="java.io"/>
        <class name="MultiplexInputStream" line="29">
            <extends class="InputStream"/>
            <javadoc line="29">
                MultiplexInputStream manages receiving data over a connection managed
                  by a ConnectionMultiplexer object.  This object is responsible for
                  requesting more bytes of data as space in its internal buffer becomes
                  available.                
                <author>
                    Peter Jones                    
                </author>
            </javadoc>
            <declaration name="manager" type="ConnectionMultiplexer" line="39"/>
            <javadoc line="39">
                object managing multiplexed connection                
            </javadoc>
            <declaration name="info" type="MultiplexConnectionInfo" line="42"/>
            <javadoc line="42">
                information about the connection this is the input stream for                
            </javadoc>
            <declaration name="buffer" type="byte" line="45"/>
            <javadoc line="45">
                input buffer                
            </javadoc>
            <declaration name="present" type="int" line="48"/>
            <javadoc line="48">
                number of real data bytes present in buffer                
            </javadoc>
            <declaration name="pos" type="int" line="51"/>
            <javadoc line="51">
                current position to read from in input buffer                
            </javadoc>
            <declaration name="requested" type="int" line="54"/>
            <javadoc line="54">
                pending number of bytes this stream has requested                
            </javadoc>
            <declaration name="disconnected" type="boolean" line="57"/>
            <javadoc line="57">
                true if this connection has been disconnected                
            </javadoc>
            <declaration name="lock" type="Object" line="60"/>
            <javadoc line="60">
                lock acquired to access shared variables:
                  buffer, present, pos, requested, &amp; disconnected
                  WARNING:  Any of the methods manager.send() should not be
                  invoked while this lock is held, since they could potentially
                  block if the underlying connection&apos;s transport buffers are
                  full, and the manager may need to acquire this lock to process
                  and consume data coming over the underlying connection.                
            </javadoc>
            <declaration name="waterMark" type="int" line="71"/>
            <javadoc line="71">
                level at which more data is requested when read past                
            </javadoc>
            <declaration name="temp" type="byte" line="74"/>
            <javadoc line="74">
                data structure for holding reads of one byte                
            </javadoc>
            <javadoc line="77">
                Create a new MultiplexInputStream for the given manager.                
                <param>
                    manager object that manages this connection                    
                </param>
                <param>
                    info structure for connection this stream reads from                    
                </param>
                <param>
                    bufferLength length of input buffer                    
                </param>
            </javadoc>
            <method name="MultiplexInputStream" type="constructor" line="87">
                <params>
                    <param name="manager" type="ConnectionMultiplexer"/>
                    <param name="info" type="MultiplexConnectionInfo"/>
                    <param name="bufferLength" type="int"/>
                </params>
            </method>
            <javadoc line="95">
                Read a byte from the connection.                
            </javadoc>
            <method name="read" type="int" line="99">
                <declaration name="n" type="int" line="100"/>
            </method>
            <javadoc line="106">
                Read a subarray of bytes from connection.  This method blocks for
                  at least one byte, and it returns the number of bytes actually read,
                  or -1 if the end of the stream was detected.                
                <param>
                    b array to read bytes into                    
                </param>
                <param>
                    off offset of beginning of bytes to read into                    
                </param>
                <param>
                    len number of bytes to read                    
                </param>
            </javadoc>
            <method name="read" type="int" line="115">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="154">
                    could send another request here, if len &gt; available??                    
                </comment>
                <declaration name="moreSpace" type="int" line="119"/>
                <scope line="120">
                    <scope line="123"/>
                    <declaration name="freeSpace" type="int" line="128"/>
                </scope>
                <scope line="133">
                    <scope line="135">
                        <scope line="136"/>
                        <scope line="138"/>
                    </scope>
                    <declaration name="available" type="int" line="144"/>
                    <scope line="145"/>
                    <scope line="150"/>
                </scope>
            </method>
            <javadoc line="159">
                Return the number of bytes immediately available for reading.                
            </javadoc>
            <method name="available" type="int" line="163">
                <scope line="164"/>
            </method>
            <javadoc line="169">
                Close this connection.                
            </javadoc>
            <method name="close" type="void" line="173"/>
            <javadoc line="177">
                Receive bytes transmitted from connection at remote endpoint.                
                <param>
                    length number of bytes transmitted                    
                </param>
                <param>
                    in input stream with those bytes ready to be read                    
                </param>
            </javadoc>
            <method name="receive" type="void" line="184">
                <params>
                    <param name="length" type="int"/>
                    <param name="in" type="DataInputStream"/>
                </params>
                <comment line="186">
                    TO DO: Optimize so that data received from stream can be loaded
                     directly into user&apos;s buffer if there is a pending read().                    
                </comment>
                <scope line="188">
                    <scope line="189"/>
                </scope>
            </method>
            <javadoc line="203">
                Disconnect this stream from all connection activity.                
            </javadoc>
            <method name="disconnect" type="void" line="207">
                <scope line="208"/>
            </method>
        </class>
    </source>