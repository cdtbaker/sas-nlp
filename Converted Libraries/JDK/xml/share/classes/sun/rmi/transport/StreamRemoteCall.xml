<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport">
        <import package="java.io.DataInputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInput"/>
        <import package="java.io.ObjectOutput"/>
        <import package="java.io.StreamCorruptedException"/>
        <import package="java.rmi.RemoteException"/>
        <import package="java.rmi.MarshalException"/>
        <import package="java.rmi.UnmarshalException"/>
        <import package="java.rmi.server.ObjID"/>
        <import package="java.rmi.server.RemoteCall"/>
        <import package="sun.rmi.runtime.Log"/>
        <import package="sun.rmi.server.UnicastRef"/>
        <import package="sun.rmi.transport.tcp.TCPEndpoint"/>
        <class name="StreamRemoteCall" line="43">
            <comment line="298">
                method to retrieve possible server side exceptions (which will
                 be throw from exceptionReceivedFromServer(...) )                
            </comment>
            <implements interface="RemoteCall"/>
            <javadoc line="43">
                Stream-based implementation of the RemoteCall interface.                
                <author>
                    Ann Wollrath                    
                </author>
            </javadoc>
            <declaration name="in" type="ConnectionInputStream" line="49"/>
            <declaration name="out" type="ConnectionOutputStream" line="50"/>
            <declaration name="conn" type="Connection" line="51"/>
            <declaration name="resultStarted" type="boolean" line="52"/>
            <declaration name="serverException" type="Exception" line="53"/>
            <method name="StreamRemoteCall" type="constructor" line="55">
                <params>
                    <param name="c" type="Connection"/>
                </params>
            </method>
            <method name="StreamRemoteCall" type="constructor" line="61">
                <params>
                    <param name="c" type="Connection"/>
                    <param name="id" type="ObjID"/>
                    <param name="op" type="int"/>
                    <param name="hash" type="long"/>
                </params>
                <comment line="68">
                    write out remote call header info...
                     call header, part 1 (read by Transport)                    
                </comment>
                <comment line="71">
                    creates a MarshalOutputStream                    
                </comment>
                <comment line="72">
                    object id (target of call)                    
                </comment>
                <comment line="73">
                    call header, part 2 (read by Dispatcher)                    
                </comment>
                <comment line="74">
                    method number (operation index)                    
                </comment>
                <comment line="75">
                    stub/skeleton hash                    
                </comment>
                <scope line="62"/>
                <scope line="75"/>
            </method>
            <javadoc line="80">
                Return the connection associated with this call.                
            </javadoc>
            <method name="getConnection" type="Connection" line="83"/>
            <javadoc line="87">
                Return the output stream the stub/skeleton should put arguments/results
                  into.                
            </javadoc>
            <method name="getOutputStream" type="ObjectOutput" line="91"/>
            <method name="getOutputStream" type="ObjectOutput" line="97">
                <params>
                    <param name="resultStream" type="boolean"/>
                </params>
                <scope line="98"/>
            </method>
            <javadoc line="106">
                Release the outputStream  Currently, will not complain if the
                  output stream is released more than once.                
            </javadoc>
            <method name="releaseOutputStream" type="void" line="110">
                <comment line="117">
                    always start DGC ack timer                    
                </comment>
                <scope line="111">
                    <scope line="112">
                        <scope line="113"/>
                        <scope line="115"/>
                    </scope>
                </scope>
                <scope line="120"/>
            </method>
            <javadoc line="125">
                Get the InputStream the stub/skeleton should get results/arguments
                  from.                
            </javadoc>
            <method name="getInputStream" type="ObjectInput" line="129">
                <scope line="130"/>
            </method>
            <javadoc line="138">
                Release the input stream, this would allow some transports to release
                  the channel early.                
            </javadoc>
            <method name="releaseInputStream" type="void" line="142">
                <comment line="144">
                    WARNING: Currently, the UnicastRef.java invoke methods rely
                     upon this method not throwing an IOException.                    
                </comment>
                <comment line="150">
                    execute MarshalInputStream &quot;done&quot; callbacks                    
                </comment>
                <comment line="156">
                    add saved references to DGC table                    
                </comment>
                <comment line="159">
                    WARNING: The connection being passed to done may have
                     already been freed.                    
                </comment>
                <scope line="147">
                    <scope line="148">
                        <scope line="150"/>
                        <scope line="152"/>
                    </scope>
                </scope>
                <scope line="164"/>
            </method>
            <javadoc line="169">
                Returns an output stream (may put out header information
                  relating to the success of the call).                
                <param>
                    success If true, indicates normal return, else indicates
                      exceptional return.                    
                </param>
                <exception>
                    StreamCorruptedException If result stream previously
                      acquired                    
                </exception>
                <exception>
                    IOException For any other problem with I/O.                    
                </exception>
            </javadoc>
            <method name="getResultStream" type="ObjectOutput" line="178">
                <params>
                    <param name="success" type="boolean"/>
                </params>
                <comment line="180">
                                        
                </comment>
                <comment line="186">
                    write out return header
                     return header, part 1 (read by Transport)                    
                </comment>
                <comment line="189">
                    transport op                    
                </comment>
                <comment line="190">
                    creates a MarshalOutputStream                    
                </comment>
                <comment line="191">
                    return header, part 2 (read by client-side RemoteCall)                    
                </comment>
                <comment line="192">
                                        
                </comment>
                <comment line="196">
                    write id for gcAck                    
                </comment>
                <declaration name="wr" type="DataOutputStream" line="187"/>
            </method>
            <javadoc line="199">
                Do whatever it takes to execute the call.                
            </javadoc>
            <method name="executeCall" type="void" line="202">
                <comment line="206">
                    read result header                    
                </comment>
                <comment line="224">
                    id for DGC acknowledgement                    
                </comment>
                <comment line="236">
                    read return value                    
                </comment>
                <comment line="249">
                    An exception should have been received,
                     if so throw it, else flag error                    
                </comment>
                <declaration name="returnType" type="byte" line="203"/>
                <declaration name="ackHandler" type="DGCAckHandler" line="206"/>
                <scope line="207">
                    <scope line="208"/>
                    <declaration name="rd" type="DataInputStream" line="212"/>
                    <declaration name="op" type="byte" line="213"/>
                    <scope line="214">
                        <scope line="215"/>
                    </scope>
                </scope>
                <scope line="224"/>
                <scope line="226"/>
                <scope line="229">
                    <scope line="230"/>
                </scope>
                <declaration name="ex" type="Object" line="241"/>
                <scope line="242"/>
                <scope line="244"/>
                <scope line="250"/>
                <scope line="252"/>
                <scope line="256"/>
            </method>
            <javadoc line="264">
                Routine that causes the stack traces of remote exceptions to be
                  filled in with the current stack trace on the client.  Detail
                  exceptions are filled in iteratively.                
            </javadoc>
            <method name="exceptionReceivedFromServer" type="void" line="269">
                <params>
                    <param name="ex" type="Exception"/>
                </params>
                <comment line="283">
                    Log the details of a server exception thrown as a result of a
                     remote method invocation.                    
                </comment>
                <comment line="288">
                                        
                </comment>
                <declaration name="serverTrace" type="StackTraceElement[]" line="272"/>
                <declaration name="clientTrace" type="StackTraceElement[]" line="273"/>
                <declaration name="combinedTrace" type="StackTraceElement[]" line="274"/>
                <scope line="286">
                    <declaration name="ep" type="TCPEndpoint" line="288"/>
                </scope>
            </method>
            <method name="getServerException" type="Exception" line="301"/>
            <method name="done" type="void" line="305">
                <comment line="307">
                    WARNING: Currently, the UnicastRef.java invoke methods rely
                     upon this method not throwing an IOException.                    
                </comment>
            </method>
        </class>
    </source>