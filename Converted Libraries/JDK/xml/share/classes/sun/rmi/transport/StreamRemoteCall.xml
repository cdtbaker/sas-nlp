<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport">
        <import package="java.io.DataInputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInput"/>
        <import package="java.io.ObjectOutput"/>
        <import package="java.io.StreamCorruptedException"/>
        <import package="java.rmi.RemoteException"/>
        <import package="java.rmi.MarshalException"/>
        <import package="java.rmi.UnmarshalException"/>
        <import package="java.rmi.server.ObjID"/>
        <import package="java.rmi.server.RemoteCall"/>
        <import package="sun.rmi.runtime.Log"/>
        <import package="sun.rmi.server.UnicastRef"/>
        <import package="sun.rmi.transport.tcp.TCPEndpoint"/>
        <class name="StreamRemoteCall" line="16">
            <implements interface="RemoteCall"/>
            <javadoc line="16">
                Stream-based implementation of the RemoteCall interface.                
                <author>
                    Ann Wollrath                    
                </author>
            </javadoc>
            <declaration name="in" type="ConnectionInputStream" line="21"/>
            <declaration name="out" type="ConnectionOutputStream" line="22"/>
            <declaration name="conn" type="Connection" line="23"/>
            <declaration name="resultStarted" type="boolean" line="24"/>
            <declaration name="serverException" type="Exception" line="25"/>
            <method name="StreamRemoteCall" type="constructor" line="26">
                <params>
                    <param name="c" type="Connection"/>
                </params>
            </method>
            <method name="StreamRemoteCall" type="constructor" line="29">
                <params>
                    <param name="c" type="Connection"/>
                    <param name="id" type="ObjID"/>
                    <param name="op" type="int"/>
                    <param name="hash" type="long"/>
                </params>
                <scope line="30"/>
                <scope line="39"/>
            </method>
            <javadoc line="43">
                Return the connection associated with this call.                
            </javadoc>
            <method name="getConnection" type="Connection" line="46"/>
            <javadoc line="49">
                Return the output stream the stub/skeleton should put arguments/results
                  into.                
            </javadoc>
            <method name="getOutputStream" type="ObjectOutput" line="53"/>
            <method name="getOutputStream" type="ObjectOutput" line="56">
                <params>
                    <param name="resultStream" type="boolean"/>
                </params>
                <scope line="57"/>
            </method>
            <javadoc line="63">
                Release the outputStream  Currently, will not complain if the
                  output stream is released more than once.                
            </javadoc>
            <method name="releaseOutputStream" type="void" line="67">
                <scope line="68">
                    <scope line="69">
                        <scope line="70"/>
                        <scope line="73"/>
                    </scope>
                </scope>
                <scope line="79"/>
            </method>
            <javadoc line="83">
                Get the InputStream the stub/skeleton should get results/arguments
                  from.                
            </javadoc>
            <method name="getInputStream" type="ObjectInput" line="87">
                <scope line="88"/>
            </method>
            <javadoc line="94">
                Release the input stream, this would allow some transports to release
                  the channel early.                
            </javadoc>
            <method name="releaseInputStream" type="void" line="98">
                <scope line="99">
                    <scope line="100">
                        <scope line="101"/>
                        <scope line="104"/>
                    </scope>
                </scope>
                <scope line="111"/>
            </method>
            <javadoc line="115">
                Returns an output stream (may put out header information
                  relating to the success of the call).                
                <param>
                    success If true, indicates normal return, else indicates
                      exceptional return.                    
                </param>
                <exception>
                    StreamCorruptedException If result stream previously
                      acquired                    
                </exception>
                <exception>
                    IOException For any other problem with I/O.                    
                </exception>
            </javadoc>
            <method name="getResultStream" type="ObjectOutput" line="124">
                <params>
                    <param name="success" type="boolean"/>
                </params>
                <declaration name="wr" type="DataOutputStream" line="127"/>
            </method>
            <javadoc line="135">
                Do whatever it takes to execute the call.                
            </javadoc>
            <method name="executeCall" type="void" line="138">
                <declaration name="returnType" type="byte" line="139"/>
                <declaration name="ackHandler" type="DGCAckHandler" line="140"/>
                <scope line="141">
                    <scope line="142"/>
                    <declaration name="rd" type="DataInputStream" line="146"/>
                    <declaration name="op" type="byte" line="147"/>
                    <scope line="148">
                        <scope line="149"/>
                    </scope>
                </scope>
                <scope line="158"/>
                <scope line="161"/>
                <scope line="164">
                    <scope line="165"/>
                </scope>
                <declaration name="ex" type="Object" line="173"/>
                <scope line="174"/>
                <scope line="177"/>
                <scope line="180"/>
                <scope line="183"/>
                <scope line="187"/>
            </method>
            <javadoc line="193">
                Routine that causes the stack traces of remote exceptions to be
                  filled in with the current stack trace on the client.  Detail
                  exceptions are filled in iteratively.                
            </javadoc>
            <method name="exceptionReceivedFromServer" type="void" line="198">
                <params>
                    <param name="ex" type="Exception"/>
                </params>
                <declaration name="serverTrace" type="StackTraceElement[]" line="200"/>
                <declaration name="clientTrace" type="StackTraceElement[]" line="201"/>
                <declaration name="combinedTrace" type="StackTraceElement[]" line="202"/>
                <scope line="206">
                    <declaration name="ep" type="TCPEndpoint" line="207"/>
                </scope>
            </method>
            <method name="getServerException" type="Exception" line="212"/>
            <method name="done" type="void" line="215"/>
        </class>
    </source>