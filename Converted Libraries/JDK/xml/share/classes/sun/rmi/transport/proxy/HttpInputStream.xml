<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport.proxy">
        <import package="java.io"/>
        <import package="sun.rmi.runtime.Log"/>
        <class name="HttpInputStream" line="31">
            <extends class="FilterInputStream"/>
            <javadoc line="31">
                The HttpInputStream class assists the HttpSendSocket and HttpReceiveSocket
                  classes by filtering out the header for the message as well as any
                  data after its proper content length.                
            </javadoc>
            <declaration name="bytesLeft" type="int" line="38"/>
            <javadoc line="38">
                bytes remaining to be read from proper content of message                
            </javadoc>
            <declaration name="bytesLeftAtMark" type="int" line="41"/>
            <javadoc line="41">
                bytes remaining to be read at time of last mark                
            </javadoc>
            <javadoc line="44">
                Create new filter on a given input stream.                
                <param>
                    in the InputStream to filter from                    
                </param>
            </javadoc>
            <method name="HttpInputStream" type="constructor" line="49">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <comment line="53">
                    prevent resetting back to old marks                    
                </comment>
                <comment line="55">
                    pull out header, looking for content length                    
                </comment>
                <comment line="74">
                    what would we want to do in this case??                    
                </comment>
                <comment line="80">
                    The idea here is to go past the first blank line.                    
                </comment>
                <comment line="81">
                    Some DataInputStream.readLine() documentation specifies that                    
                </comment>
                <comment line="82">
                    it does include the line-terminating character(s) in the                    
                </comment>
                <comment line="83">
                    returned string, but it actually doesn&apos;t, so we&apos;ll cover                    
                </comment>
                <comment line="84">
                    all cases here...                    
                </comment>
                <comment line="89">
                    This really shouldn&apos;t happen, but if it does, shoud we fail??                    
                </comment>
                <comment line="90">
                    For now, just give up and let a whole lot of bytes through...                    
                </comment>
                <declaration name="dis" type="DataInputStream" line="57"/>
                <declaration name="key" type="String" line="58"/>
                <declaration name="contentLengthFound" type="boolean" line="59"/>
                <declaration name="line" type="String" line="60"/>
                <scope line="61">
                    <scope line="64"/>
                    <scope line="72"/>
                </scope>
                <scope line="88"/>
                <scope line="95"/>
            </method>
            <javadoc line="101">
                Returns the number of bytes that can be read with blocking.
                  Make sure that this does not exceed the number of bytes remaining
                  in the proper content of the message.                
            </javadoc>
            <method name="available" type="int" line="107">
                <declaration name="bytesAvailable" type="int" line="108"/>
            </method>
            <javadoc line="115">
                Read a byte of data from the stream.  Make sure that one is available
                  from the proper content of the message, else -1 is returned to
                  indicate to the user that the end of the stream has been reached.                
            </javadoc>
            <method name="read" type="int" line="121">
                <scope line="122">
                    <declaration name="data" type="int" line="123"/>
                    <scope line="127"/>
                </scope>
                <scope line="136"/>
            </method>
            <method name="read" type="int" line="145">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="146"/>
                <declaration name="bytesRead" type="int" line="154"/>
                <scope line="157"/>
            </method>
            <javadoc line="165">
                Mark the current position in the stream (for future calls to reset).
                  Remember where we are within the proper content of the message, so
                  that a reset method call can recreate our state properly.                
                <param>
                    readlimit how many bytes can be read before mark becomes invalid                    
                </param>
            </javadoc>
            <method name="mark" type="void" line="172">
                <params>
                    <param name="readlimit" type="int"/>
                </params>
            </method>
            <javadoc line="178">
                Repositions the stream to the last marked position.  Make sure to
                  adjust our position within the proper content accordingly.                
            </javadoc>
            <method name="reset" type="void" line="183"/>
            <javadoc line="188">
                Skips bytes of the stream.  Make sure to adjust our
                  position within the proper content accordingly.                
                <param>
                    n number of bytes to be skipped                    
                </param>
            </javadoc>
            <method name="skip" type="long" line="194">
                <params>
                    <param name="n" type="long"/>
                </params>
                <declaration name="bytesSkipped" type="long" line="197"/>
            </method>
        </class>
    </source>