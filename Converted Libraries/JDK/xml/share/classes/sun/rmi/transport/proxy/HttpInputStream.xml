<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport.proxy">
        <import package="java.io"/>
        <import package="sun.rmi.runtime.Log"/>
        <class name="HttpInputStream" line="4">
            <extends class="FilterInputStream"/>
            <javadoc line="4">
                The HttpInputStream class assists the HttpSendSocket and HttpReceiveSocket
                  classes by filtering out the header for the message as well as any
                  data after its proper content length.                
            </javadoc>
            <declaration name="bytesLeft" type="int" line="10"/>
            <javadoc line="10">
                bytes remaining to be read from proper content of message                
            </javadoc>
            <declaration name="bytesLeftAtMark" type="int" line="14"/>
            <javadoc line="14">
                bytes remaining to be read at time of last mark                
            </javadoc>
            <javadoc line="18">
                Create new filter on a given input stream.                
                <param>
                    in the InputStream to filter from                    
                </param>
            </javadoc>
            <method name="HttpInputStream" type="constructor" line="22">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <declaration name="dis" type="DataInputStream" line="25"/>
                <declaration name="key" type="String" line="26"/>
                <declaration name="contentLengthFound" type="boolean" line="27"/>
                <declaration name="line" type="String" line="28"/>
                <scope line="29">
                    <scope line="31"/>
                    <scope line="35"/>
                </scope>
                <scope line="42"/>
                <scope line="46"/>
            </method>
            <javadoc line="50">
                Returns the number of bytes that can be read with blocking.
                  Make sure that this does not exceed the number of bytes remaining
                  in the proper content of the message.                
            </javadoc>
            <method name="available" type="int" line="55">
                <declaration name="bytesAvailable" type="int" line="56"/>
            </method>
            <javadoc line="60">
                Read a byte of data from the stream.  Make sure that one is available
                  from the proper content of the message, else -1 is returned to
                  indicate to the user that the end of the stream has been reached.                
            </javadoc>
            <method name="read" type="int" line="65">
                <scope line="66">
                    <declaration name="data" type="int" line="67"/>
                    <scope line="69"/>
                </scope>
                <scope line="74"/>
            </method>
            <method name="read" type="int" line="79">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="80"/>
                <declaration name="bytesRead" type="int" line="85"/>
                <scope line="87"/>
            </method>
            <javadoc line="92">
                Mark the current position in the stream (for future calls to reset).
                  Remember where we are within the proper content of the message, so
                  that a reset method call can recreate our state properly.                
                <param>
                    readlimit how many bytes can be read before mark becomes invalid                    
                </param>
            </javadoc>
            <method name="mark" type="void" line="98">
                <params>
                    <param name="readlimit" type="int"/>
                </params>
            </method>
            <javadoc line="102">
                Repositions the stream to the last marked position.  Make sure to
                  adjust our position within the proper content accordingly.                
            </javadoc>
            <method name="reset" type="void" line="106"/>
            <javadoc line="110">
                Skips bytes of the stream.  Make sure to adjust our
                  position within the proper content accordingly.                
                <param>
                    n number of bytes to be skipped                    
                </param>
            </javadoc>
            <method name="skip" type="long" line="115">
                <params>
                    <param name="n" type="long"/>
                </params>
                <declaration name="bytesSkipped" type="long" line="117"/>
            </method>
        </class>
    </source>