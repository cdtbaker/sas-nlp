<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectOutput"/>
        <import package="java.rmi.MarshalException"/>
        <import package="java.rmi.NoSuchObjectException"/>
        <import package="java.rmi.Remote"/>
        <import package="java.rmi.RemoteException"/>
        <import package="java.rmi.server.LogStream"/>
        <import package="java.rmi.server.ObjID"/>
        <import package="java.rmi.server.RemoteCall"/>
        <import package="java.rmi.server.RemoteServer"/>
        <import package="java.rmi.server.ServerNotActiveException"/>
        <import package="java.security.AccessControlContext"/>
        <import package="sun.rmi.runtime.Log"/>
        <import package="sun.rmi.server.Dispatcher"/>
        <import package="sun.rmi.server.UnicastServerRef"/>
        <class name="Transport" line="17">
            <javadoc line="17">
                Transport abstraction for enabling communication between different
                  VMs.                
                <author>
                    Ann Wollrath                    
                </author>
            </javadoc>
            <declaration name="logLevel" type="int" line="23"/>
            <javadoc line="23">
                &quot;transport&quot; package log level                
            </javadoc>
            <method name="getLogLevel" type="String" line="27"/>
            <declaration name="transportLog" type="Log" line="30"/>
            <declaration name="currentTransport" type="ThreadLocal" line="31"/>
            <javadoc line="31">
                References the current transport when a call is being serviced                
            </javadoc>
            <declaration name="dgcID" type="ObjID" line="35"/>
            <javadoc line="35">
                ObjID for DGCImpl                
            </javadoc>
            <method name="getChannel" type="Channel" line="39"/>
            <javadoc line="39">
                Returns a &lt;I&gt;Channel&lt;/I&gt; that generates connections to the
                  endpoint &lt;I&gt;ep&lt;/I&gt;. A Channel is an object that creates and
                  manages connections of a particular type to some particular
                  address space.                
                <param>
                    ep the endpoint to which connections will be generated.                    
                </param>
                <return>
                    the channel or null if the transport cannot
                      generate connections to this endpoint                    
                </return>
            </javadoc>
            <method name="free" type="void" line="49"/>
            <javadoc line="49">
                Removes the &lt;I&gt;Channel&lt;/I&gt; that generates connections to the
                  endpoint &lt;I&gt;ep&lt;/I&gt;.                
            </javadoc>
            <javadoc line="54">
                Export the object so that it can accept incoming calls.                
            </javadoc>
            <method name="exportObject" type="void" line="57">
                <params>
                    <param name="target" type="Target"/>
                </params>
            </method>
            <javadoc line="61">
                Invoked when an object that was exported on this transport has
                  become unexported, either by being garbage collected or by
                  being explicitly unexported.                
            </javadoc>
            <method name="targetUnexported" type="void" line="66"/>
            <javadoc line="68">
                Returns the current transport if a call is being serviced, otherwise
                  returns null.                
            </javadoc>
            <method name="currentTransport" type="Transport" line="72"/>
            <method name="checkAcceptPermission" type="void" line="75"/>
            <javadoc line="75">
                Verify that the current access control context has permission to accept
                  the connection being dispatched by the current thread.  The current
                  access control context is passed as a parameter to avoid the overhead of
                  an additional call to AccessController.getContext.                
            </javadoc>
            <javadoc line="82">
                Service an incoming remote call. When a message arrives on the
                  connection indicating the beginning of a remote call, the
                  threads are required to call the &lt;I&gt;serviceCall&lt;/I&gt; method of
                  their transport.  The default implementation of this method
                  locates and calls the dispatcher object.  Ordinarily a
                  transport implementation will not need to override this method.
                  At the entry to &lt;I&gt;tr.serviceCall(conn)&lt;/I&gt;, the connection&apos;s
                  input stream is positioned at the start of the incoming
                  message.  The &lt;I&gt;serviceCall&lt;/I&gt; method processes the incoming
                  remote invocation and sends the result on the connection&apos;s
                  output stream.  If it returns &quot;true&quot;, then the remote
                  invocation was processed without error and the transport can
                  cache the connection.  If it returns &quot;false&quot;, a protocol error
                  occurred during the call, and the transport should destroy the
                  connection.                
            </javadoc>
            <method name="serviceCall" type="boolean" line="99">
                <params>
                    <param name="call" type="RemoteCall"/>
                </params>
                <scope line="100">
                    <declaration name="impl" type="Remote" line="101"/>
                    <declaration name="id" type="ObjID" line="102"/>
                    <scope line="103"/>
                    <scope line="106"/>
                    <declaration name="transport" type="Transport" line="109"/>
                    <declaration name="target" type="Target" line="110"/>
                    <scope line="111"/>
                    <declaration name="disp" type="Dispatcher" line="114"/>
                    <scope line="116">
                        <declaration name="acc" type="AccessControlContext" line="118"/>
                        <declaration name="ccl" type="ClassLoader" line="119"/>
                        <declaration name="t" type="Thread" line="120"/>
                        <declaration name="savedCcl" type="ClassLoader" line="121"/>
                        <scope line="122">
                            <scope line="125">
                                <anonymous_class line="126">
                                    <method name="run" type="Void" line="127"/>
                                </anonymous_class>
                            </scope>
                            <scope line="135"/>
                        </scope>
                        <scope line="139"/>
                    </scope>
                    <scope line="144"/>
                    <scope line="148"/>
                </scope>
                <scope line="152">
                    <scope line="153">
                        <declaration name="clientHost" type="String" line="154"/>
                        <scope line="155"/>
                        <scope line="158"/>
                        <declaration name="message" type="String" line="160"/>
                    </scope>
                    <scope line="163">
                        <declaration name="out" type="ObjectOutput" line="164"/>
                    </scope>
                    <scope line="169"/>
                </scope>
            </method>
        </class>
    </source>